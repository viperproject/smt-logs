(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.C () T@U)
(declare-fun Tagclass._module.C? () T@U)
(declare-fun tytagFamily$C () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.C? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.C () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.f (T@U) T@U)
(declare-fun |_module.__default.f#canCall| (T@U) Bool)
(declare-fun _module.__default.g (T@U) T@U)
(declare-fun |_module.__default.g#canCall| (T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._module.C Tagclass._module.C? tytagFamily$C)
)
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.C?)  (or (= $o null) (= (dtype $o) Tclass._module.C?)))
 :pattern ( ($Is refType $o Tclass._module.C?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.C $h) ($IsAlloc refType |c#0| Tclass._module.C? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.C $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.C? $h))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.C? $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.C? $h@@0))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v@@0) t h) ($IsAlloc T@@0 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@0 v@@0) t h))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.C) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) Tclass._module.C)))
 :pattern ( ($IsBox bx@@0 Tclass._module.C))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.C?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.C?)))
 :pattern ( ($IsBox bx@@1 Tclass._module.C?))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.C)  (and ($Is refType |c#0@@0| Tclass._module.C?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.C))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.C?))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|c#0@@1| T@U) ) (!  (=> (or (|_module.__default.f#canCall| |c#0@@1|) (and (< 1 $FunctionContextHeight) ($Is refType |c#0@@1| Tclass._module.C))) ($Is refType (_module.__default.f |c#0@@1|) Tclass._module.C))
 :pattern ( (_module.__default.f |c#0@@1|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|c#0@@2| T@U) ) (!  (=> (or (|_module.__default.g#canCall| |c#0@@2|) (and (< 1 $FunctionContextHeight) ($Is refType |c#0@@2| Tclass._module.C))) ($Is refType (_module.__default.g |c#0@@2|) Tclass._module.C))
 :pattern ( (_module.__default.g |c#0@@2|))
))))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v@@1) t@@0) ($Is T@@1 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@1 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@2) ($IsAllocBox bx@@2 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@2))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (|c#0@@3| T@U) ) (!  (=> (and (or (|_module.__default.f#canCall| |c#0@@3|) (and (< 1 $FunctionContextHeight) (and ($Is refType |c#0@@3| Tclass._module.C) ($IsAlloc refType |c#0@@3| Tclass._module.C $Heap)))) ($IsGoodHeap $Heap)) ($IsAlloc refType (_module.__default.f |c#0@@3|) Tclass._module.C $Heap))
 :pattern ( ($IsAlloc refType (_module.__default.f |c#0@@3|) Tclass._module.C $Heap))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|c#0@@4| T@U) ) (!  (=> (and (or (|_module.__default.g#canCall| |c#0@@4|) (and (< 1 $FunctionContextHeight) (and ($Is refType |c#0@@4| Tclass._module.C) ($IsAlloc refType |c#0@@4| Tclass._module.C $Heap@@0)))) ($IsGoodHeap $Heap@@0)) ($IsAlloc refType (_module.__default.g |c#0@@4|) Tclass._module.C $Heap@@0))
 :pattern ( ($IsAlloc refType (_module.__default.g |c#0@@4|) Tclass._module.C $Heap@@0))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@3 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@3)) x@@3)
 :pattern ( ($Box T@@2 x@@3))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((bx@@3 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@3 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@3)) bx@@3) ($Is SetType ($Unbox SetType bx@@3) (TSet t@@3))))
 :pattern ( ($IsBox bx@@3 (TSet t@@3)))
)))
(assert (= (Tag Tclass._module.C) Tagclass._module.C))
(assert (= (TagFamily Tclass._module.C) tytagFamily$C))
(assert (= (Tag Tclass._module.C?) Tagclass._module.C?))
(assert (= (TagFamily Tclass._module.C?) tytagFamily$C))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun |sc#0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (forall ((|c#1| T@U) ) (!  (=> (and ($Is refType |c#1| Tclass._module.C) (|Set#IsMember| |sc#0| ($Box refType |c#1|))) (or true (= |c#1| (_module.__default.f |c#1|))))
 :pattern ( (_module.__default.f |c#1|))
 :pattern ( (|Set#IsMember| |sc#0| ($Box refType |c#1|)))
))) (=> (forall ((|c#1@@0| T@U) ) (!  (=> (and ($Is refType |c#1@@0| Tclass._module.C) (|Set#IsMember| |sc#0| ($Box refType |c#1@@0|))) (or true (= |c#1@@0| (_module.__default.f |c#1@@0|))))
 :pattern ( (_module.__default.f |c#1@@0|))
 :pattern ( (|Set#IsMember| |sc#0| ($Box refType |c#1@@0|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (forall ((|c#3| T@U) ) (!  (=> (and ($Is refType |c#3| Tclass._module.C) (|Set#IsMember| |sc#0| ($Box refType |c#3|))) (or true (= (_module.__default.f |c#3|) (_module.__default.f (_module.__default.f |c#3|)))))
 :pattern ( (_module.__default.f (_module.__default.f |c#3|)))
 :pattern ( (_module.__default.f |c#3|))
 :pattern ( (|Set#IsMember| |sc#0| ($Box refType |c#3|)))
))) (=> (forall ((|c#3@@0| T@U) ) (!  (=> (and ($Is refType |c#3@@0| Tclass._module.C) (|Set#IsMember| |sc#0| ($Box refType |c#3@@0|))) (or true (= (_module.__default.f |c#3@@0|) (_module.__default.f (_module.__default.f |c#3@@0|)))))
 :pattern ( (_module.__default.f (_module.__default.f |c#3@@0|)))
 :pattern ( (_module.__default.f |c#3@@0|))
 :pattern ( (|Set#IsMember| |sc#0| ($Box refType |c#3@@0|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall ((|c#5| T@U) ) (!  (=> (and ($Is refType |c#5| Tclass._module.C) (|Set#IsMember| |sc#0| ($Box refType |c#5|))) (or (or (or true (= (_module.__default.f (_module.__default.f |c#5|)) (_module.__default.g (_module.__default.f |c#5|)))) (= (_module.__default.f (_module.__default.g |c#5|)) (_module.__default.g (_module.__default.f |c#5|)))) (= (_module.__default.f (_module.__default.g |c#5|)) (_module.__default.g (_module.__default.f |c#5|)))))
 :pattern ( (_module.__default.f (_module.__default.g |c#5|)))
 :pattern ( (_module.__default.g (_module.__default.f |c#5|)))
 :pattern ( (_module.__default.f (_module.__default.g |c#5|)))
 :pattern ( (_module.__default.g (_module.__default.f |c#5|)))
 :pattern ( (_module.__default.f (_module.__default.f |c#5|)))
 :pattern ( (|Set#IsMember| |sc#0| ($Box refType |c#5|)))
))) (=> (forall ((|c#5@@0| T@U) ) (!  (=> (and ($Is refType |c#5@@0| Tclass._module.C) (|Set#IsMember| |sc#0| ($Box refType |c#5@@0|))) (or (or (or true (= (_module.__default.f (_module.__default.f |c#5@@0|)) (_module.__default.g (_module.__default.f |c#5@@0|)))) (= (_module.__default.f (_module.__default.g |c#5@@0|)) (_module.__default.g (_module.__default.f |c#5@@0|)))) (= (_module.__default.f (_module.__default.g |c#5@@0|)) (_module.__default.g (_module.__default.f |c#5@@0|)))))
 :pattern ( (_module.__default.f (_module.__default.g |c#5@@0|)))
 :pattern ( (_module.__default.g (_module.__default.f |c#5@@0|)))
 :pattern ( (_module.__default.f (_module.__default.g |c#5@@0|)))
 :pattern ( (_module.__default.g (_module.__default.f |c#5@@0|)))
 :pattern ( (_module.__default.f (_module.__default.f |c#5@@0|)))
 :pattern ( (|Set#IsMember| |sc#0| ($Box refType |c#5@@0|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall ((|c#7| T@U) ) (!  (=> (and ($Is refType |c#7| Tclass._module.C) (|Set#IsMember| |sc#0| ($Box refType |c#7|))) (or true (= (_module.__default.f |c#7|) (_module.__default.g (_module.__default.f |c#7|)))))
 :pattern ( (_module.__default.f |c#7|))
 :pattern ( (_module.__default.f |c#7|))
 :pattern ( (|Set#IsMember| |sc#0| ($Box refType |c#7|)))
))) (=> (forall ((|c#7@@0| T@U) ) (!  (=> (and ($Is refType |c#7@@0| Tclass._module.C) (|Set#IsMember| |sc#0| ($Box refType |c#7@@0|))) (or true (= (_module.__default.f |c#7@@0|) (_module.__default.g (_module.__default.f |c#7@@0|)))))
 :pattern ( (_module.__default.f |c#7@@0|))
 :pattern ( (_module.__default.f |c#7@@0|))
 :pattern ( (|Set#IsMember| |sc#0| ($Box refType |c#7@@0|)))
)) (=> (= (ControlFlow 0 2) (- 0 1)) (forall ((|c#9| T@U) ) (!  (=> (and ($Is refType |c#9| Tclass._module.C) (|Set#IsMember| |sc#0| ($Box refType |c#9|))) (or (or true (= (_module.__default.f |c#9|) (_module.__default.f |c#9|))) (= (_module.__default.g (_module.__default.f |c#9|)) (_module.__default.g (_module.__default.f |c#9|)))))
 :pattern ( (_module.__default.f |c#9|))
 :pattern ( (_module.__default.f |c#9|))
 :pattern ( (|Set#IsMember| |sc#0| ($Box refType |c#9|)))
))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and ($Is SetType |sc#0| (TSet Tclass._module.C)) ($IsAlloc SetType |sc#0| (TSet Tclass._module.C) $Heap@@1)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 7) 2))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
