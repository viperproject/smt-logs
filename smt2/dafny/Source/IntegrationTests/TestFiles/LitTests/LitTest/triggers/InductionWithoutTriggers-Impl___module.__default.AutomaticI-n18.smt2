(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 (T@U Int Bool) Bool)
(declare-fun $generated@@1 (T@U) T@U)
(declare-fun $generated@@2 (Int Bool) Bool)
(declare-fun $generated@@3 (Int) Int)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U Int) Bool)
(declare-fun $generated@@34 (Int) Bool)
(declare-fun $generated@@40 (T@U T@U T@U) Bool)
(declare-fun $generated@@41 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@53 (T@U T@U) Bool)
(declare-fun $generated@@54 (T@T T@U T@U) Bool)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@T T@T) T@T)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@20 T@U) ($generated@@21 Int) ($generated@@22 Bool) ) (!  (=> (or ($generated@@2 $generated@@21 $generated@@22) (and (< 0 $generated) (<= ($generated@@3 0) $generated@@21))) (and (=> (< ($generated@@3 0) $generated@@21) ($generated@@2 (- $generated@@21 1)  (not $generated@@22))) (= ($generated@@0 ($generated@@1 $generated@@20) $generated@@21 $generated@@22) (ite (<= $generated@@21 ($generated@@3 0)) true ($generated@@0 $generated@@20 (- $generated@@21 1)  (not $generated@@22))))))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@20) $generated@@21 $generated@@22))
))))
(assert ($generated@@23 $generated@@24))
(assert (forall (($generated@@25 Int) ) (! (= ($generated@@3 $generated@@25) $generated@@25)
 :pattern ( ($generated@@3 $generated@@25))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 ($generated@@29 $generated@@32 $generated@@31)) $generated@@31)
 :pattern ( ($generated@@29 $generated@@32 $generated@@31))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (or ($generated@@34 ($generated@@3 $generated@@36)) (and (< 0 $generated) (<= ($generated@@3 0) $generated@@36))) (and (=> (< ($generated@@3 0) ($generated@@3 $generated@@36)) ($generated@@34 ($generated@@3 (- $generated@@36 1)))) (= ($generated@@33 ($generated@@1 $generated@@35) ($generated@@3 $generated@@36)) (ite (<= ($generated@@3 $generated@@36) ($generated@@3 0)) true ($generated@@33 ($generated@@1 $generated@@35) ($generated@@3 (- $generated@@36 1)))))))
 :weight 3
 :pattern ( ($generated@@33 ($generated@@1 $generated@@35) ($generated@@3 $generated@@36)))
))))
(assert (forall (($generated@@37 T@U) ($generated@@38 Int) ($generated@@39 Bool) ) (! (= ($generated@@0 ($generated@@1 $generated@@37) $generated@@38 $generated@@39) ($generated@@0 $generated@@37 $generated@@38 $generated@@39))
 :pattern ( ($generated@@0 ($generated@@1 $generated@@37) $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@40 ($generated@@30 $generated@@45 $generated@@42) $generated@@43 $generated@@44) ($generated@@41 $generated@@45 $generated@@42 $generated@@43 $generated@@44))
 :pattern ( ($generated@@40 ($generated@@30 $generated@@45 $generated@@42) $generated@@43 $generated@@44))
)))
(assert  (=> (<= 0 $generated) (forall (($generated@@46 T@U) ($generated@@47 Int) ($generated@@48 T@U) ) (!  (=> (or ($generated@@2 ($generated@@3 $generated@@47) ($generated@@9 ($generated@@26 $generated@@5 $generated@@48))) (and (< 0 $generated) (<= ($generated@@3 0) $generated@@47))) (and (=> (< ($generated@@3 0) ($generated@@3 $generated@@47)) ($generated@@2 ($generated@@3 (- $generated@@47 1))  (not ($generated@@9 ($generated@@26 $generated@@5 $generated@@48))))) (= ($generated@@0 ($generated@@1 $generated@@46) ($generated@@3 $generated@@47) ($generated@@9 ($generated@@26 $generated@@5 $generated@@48))) (ite (<= ($generated@@3 $generated@@47) ($generated@@3 0)) true ($generated@@0 ($generated@@1 $generated@@46) ($generated@@3 (- $generated@@47 1))  (not ($generated@@9 ($generated@@26 $generated@@5 $generated@@48))))))))
 :weight 3
 :pattern ( ($generated@@0 ($generated@@1 $generated@@46) ($generated@@3 $generated@@47) ($generated@@9 ($generated@@26 $generated@@5 $generated@@48))))
))))
(assert  (=> (<= 0 $generated) (forall (($generated@@49 T@U) ($generated@@50 Int) ) (!  (=> (or ($generated@@34 $generated@@50) (and (< 0 $generated) (<= ($generated@@3 0) $generated@@50))) (and (=> (< ($generated@@3 0) $generated@@50) ($generated@@34 (- $generated@@50 1))) (= ($generated@@33 ($generated@@1 $generated@@49) $generated@@50) (ite (<= $generated@@50 ($generated@@3 0)) true ($generated@@33 $generated@@49 (- $generated@@50 1))))))
 :pattern ( ($generated@@33 ($generated@@1 $generated@@49) $generated@@50))
))))
(assert (forall (($generated@@51 T@U) ($generated@@52 Int) ) (! (= ($generated@@33 ($generated@@1 $generated@@51) $generated@@52) ($generated@@33 $generated@@51 $generated@@52))
 :pattern ( ($generated@@33 ($generated@@1 $generated@@51) $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@53 ($generated@@30 $generated@@57 $generated@@55) $generated@@56) ($generated@@54 $generated@@57 $generated@@55 $generated@@56))
 :pattern ( ($generated@@53 ($generated@@30 $generated@@57 $generated@@55) $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@23 $generated@@58) (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> ($generated@@53 $generated@@60 $generated@@58) ($generated@@40 $generated@@60 $generated@@58 $generated@@59))
 :pattern ( ($generated@@40 $generated@@60 $generated@@58 $generated@@59))
)))
 :pattern ( ($generated@@23 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@29 $generated@@62 ($generated@@30 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@30 $generated@@62 $generated@@61))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@63 $generated@@74 $generated@@75 $generated@@76 ($generated@@70 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@79 $generated@@80) $generated@@77)
 :weight 0
)) (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@63 $generated@@81 $generated@@82 $generated@@83 ($generated@@70 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@63 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@63 $generated@@90 $generated@@91 $generated@@92 ($generated@@70 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@63 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)))) (= ($generated@@4 $generated@@64) 3)) (= ($generated@@4 $generated@@65) 4)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@67 $generated@@99 $generated@@100 ($generated@@71 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@103) $generated@@101)
 :weight 0
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@108 $generated@@109) (= ($generated@@67 $generated@@104 $generated@@105 ($generated@@71 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@109) ($generated@@67 $generated@@104 $generated@@105 $generated@@107 $generated@@109)))
 :weight 0
))) (= ($generated@@4 $generated@@68) 5)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (= ($generated@@4 ($generated@@69 $generated@@110 $generated@@111)) 6))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@72 ($generated@@69 $generated@@112 $generated@@113)) $generated@@112)
 :pattern ( ($generated@@69 $generated@@112 $generated@@113))
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@73 ($generated@@69 $generated@@114 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@69 $generated@@114 $generated@@115))
))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@9 ($generated@@63 $generated@@64 $generated@@65 $generated@@5 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@9 ($generated@@29 $generated@@5 ($generated@@67 $generated@@65 $generated@@68 ($generated@@67 $generated@@64 ($generated@@69 $generated@@65 $generated@@68) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@63 $generated@@64 $generated@@65 $generated@@5 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@30 $generated@@6 ($generated@@10 ($generated@@3 $generated@@122))) ($generated@@26 $generated@@68 ($generated@@30 $generated@@6 ($generated@@10 $generated@@122))))
 :pattern ( ($generated@@30 $generated@@6 ($generated@@10 ($generated@@3 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@30 $generated@@124 ($generated@@26 $generated@@124 $generated@@123)) ($generated@@26 $generated@@68 ($generated@@30 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@30 $generated@@124 ($generated@@26 $generated@@124 $generated@@123)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () Bool)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@134 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@135  (=> (= $generated@@125 ($generated@@66 $generated@@126 $generated@@127 $generated@@128 false)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> ($generated@@34 $generated@@129) (or ($generated@@33 ($generated@@1 $generated@@130) $generated@@129) (=> (<= $generated@@129 ($generated@@3 0)) ($generated@@9 ($generated@@26 $generated@@5 ($generated@@8 true))))))) (=> (=> ($generated@@34 $generated@@129) (or ($generated@@33 ($generated@@1 $generated@@130) $generated@@129) (=> (<= $generated@@129 ($generated@@3 0)) ($generated@@9 ($generated@@26 $generated@@5 ($generated@@8 true)))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> ($generated@@34 $generated@@129) (or ($generated@@33 ($generated@@1 $generated@@130) $generated@@129) (=> (< ($generated@@3 0) $generated@@129) ($generated@@33 ($generated@@1 ($generated@@1 $generated@@130)) (- $generated@@129 1)))))) (=> (=> ($generated@@34 $generated@@129) (or ($generated@@33 ($generated@@1 $generated@@130) $generated@@129) (=> (< ($generated@@3 0) $generated@@129) ($generated@@33 ($generated@@1 ($generated@@1 $generated@@130)) (- $generated@@129 1))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@2 (+ $generated@@129 12) $generated@@131) (or ($generated@@0 ($generated@@1 $generated@@130) (+ $generated@@129 12) $generated@@131) (=> (<= (+ $generated@@129 12) ($generated@@3 0)) ($generated@@9 ($generated@@26 $generated@@5 ($generated@@8 true))))))) (=> (=> ($generated@@2 (+ $generated@@129 12) $generated@@131) (or ($generated@@0 ($generated@@1 $generated@@130) (+ $generated@@129 12) $generated@@131) (=> (<= (+ $generated@@129 12) ($generated@@3 0)) ($generated@@9 ($generated@@26 $generated@@5 ($generated@@8 true)))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@2 (+ $generated@@129 12) $generated@@131) (or ($generated@@0 ($generated@@1 $generated@@130) (+ $generated@@129 12) $generated@@131) (=> (< ($generated@@3 0) (+ $generated@@129 12)) ($generated@@0 ($generated@@1 ($generated@@1 $generated@@130)) (- (+ $generated@@129 12) 1)  (not $generated@@131)))))))))))))))
(let (($generated@@136  (=> (and (and (and (and ($generated@@132 $generated@@127) ($generated@@133 $generated@@127)) (<= ($generated@@3 0) $generated@@129)) (and ($generated@@53 $generated@@134 $generated@@24) ($generated@@40 $generated@@134 $generated@@24 $generated@@127))) (and (and (= 1 $generated) (<= ($generated@@3 0) $generated@@129)) (and (< $generated@@129 100) (= (ControlFlow 0 6) 2)))) $generated@@135)))
$generated@@136)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
