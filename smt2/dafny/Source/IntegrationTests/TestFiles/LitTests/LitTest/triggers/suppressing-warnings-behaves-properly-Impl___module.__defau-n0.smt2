(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@34 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T) T@T)
(declare-fun $generated@@37 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@92 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@24 $generated@@29 ($generated@@25 $generated@@29 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@25 $generated@@29 $generated@@28))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@30 $generated@@41 $generated@@42 $generated@@43 ($generated@@37 $generated@@41 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@47 $generated@@44) $generated@@46 $generated@@47) $generated@@44)
 :weight 0
)) (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (or (= $generated@@53 $generated@@55) (= ($generated@@30 $generated@@48 $generated@@49 $generated@@50 ($generated@@37 $generated@@48 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@54 $generated@@51) $generated@@55 $generated@@56) ($generated@@30 $generated@@48 $generated@@49 $generated@@50 $generated@@52 $generated@@55 $generated@@56)))
 :weight 0
)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (!  (or (= $generated@@63 $generated@@65) (= ($generated@@30 $generated@@57 $generated@@58 $generated@@59 ($generated@@37 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@64 $generated@@65) ($generated@@30 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@64 $generated@@65)))
 :weight 0
)))) (= ($generated@@2 $generated@@31) 3)) (= ($generated@@2 $generated@@32) 4)) (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@34 $generated@@66 $generated@@67 ($generated@@38 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@68) $generated@@70) $generated@@68)
 :weight 0
))) (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (or (= $generated@@75 $generated@@76) (= ($generated@@34 $generated@@71 $generated@@72 ($generated@@38 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@73) $generated@@76) ($generated@@34 $generated@@71 $generated@@72 $generated@@74 $generated@@76)))
 :weight 0
))) (= ($generated@@2 $generated@@35) 5)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (= ($generated@@2 ($generated@@36 $generated@@77 $generated@@78)) 6))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@79 $generated@@80)) $generated@@79)
 :pattern ( ($generated@@36 $generated@@79 $generated@@80))
))) (forall (($generated@@81 T@T) ($generated@@82 T@T) ) (! (= ($generated@@40 ($generated@@36 $generated@@81 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@36 $generated@@81 $generated@@82))
))))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 Bool) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@7 ($generated@@30 $generated@@31 $generated@@32 $generated@@3 ($generated@@33 $generated@@83 $generated@@84 $generated@@85 $generated@@86) $generated@@87 $generated@@88))  (=> (and (or (not (= $generated@@87 $generated@@83)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@34 $generated@@32 $generated@@35 ($generated@@34 $generated@@31 ($generated@@36 $generated@@32 $generated@@35) $generated@@84 $generated@@87) $generated@@85)))) $generated@@86))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 $generated@@3 ($generated@@33 $generated@@83 $generated@@84 $generated@@85 $generated@@86) $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@89))) ($generated@@21 $generated@@35 ($generated@@25 $generated@@4 ($generated@@8 $generated@@89))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@89))))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@T) ) (! (= ($generated@@25 $generated@@91 ($generated@@21 $generated@@91 $generated@@90)) ($generated@@21 $generated@@35 ($generated@@25 $generated@@91 $generated@@90)))
 :pattern ( ($generated@@25 $generated@@91 ($generated@@21 $generated@@91 $generated@@90)))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ) (! ($generated@@92 $generated@@4 $generated@@94 $generated $generated@@93)
 :pattern ( ($generated@@92 $generated@@4 $generated@@94 $generated $generated@@93))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@95 (Int) Bool)
(declare-fun $generated@@96 (Int) Bool)
(declare-fun $generated@@97 () Int)
(declare-fun $generated@@98 () T@U)
(declare-fun $generated@@99 () Int)
(declare-fun $generated@@100 (Int) Bool)
(declare-fun $generated@@101 (Int) Bool)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () Int)
(declare-fun $generated@@106 () Int)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 (T@U) Bool)
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@114 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 58) (let (($generated@@115  (=> (and (forall (($generated@@116 Int) )  (=> (<= ($generated@@19 0) $generated@@116) ($generated@@95 $generated@@116))) (= (ControlFlow 0 5) (- 0 4))) (forall (($generated@@117 Int) )  (=> (<= ($generated@@19 0) $generated@@117) (or (=  (or (not (= $generated@@117 0)) (not true)) ($generated@@96 $generated@@117)) true))))))
(let (($generated@@118  (=> (and (=  (or (not (= $generated@@97 0)) (not true)) ($generated@@96 $generated@@97)) (= (ControlFlow 0 8) 5)) $generated@@115)))
(let (($generated@@119  (=> (and (=  (or (not (= $generated@@97 0)) (not true))  (not ($generated@@96 $generated@@97))) (= (ControlFlow 0 7) 5)) $generated@@115)))
(let (($generated@@120  (=> (<= ($generated@@19 0) $generated@@97) (=> (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@97) $generated $generated@@98) ($generated@@95 $generated@@97)) (and (=> (= (ControlFlow 0 9) 7) $generated@@119) (=> (= (ControlFlow 0 9) 8) $generated@@118))))))
(let (($generated@@121  (=> (and (< $generated@@97 ($generated@@19 0)) (= (ControlFlow 0 6) 5)) $generated@@115)))
(let (($generated@@122  (=> (forall (($generated@@123 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@123) ($generated@@95 $generated@@123))
 :pattern ( ($generated@@96 $generated@@123))
)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (forall (($generated@@124 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@124) (or (=  (or (not (= $generated@@124 0)) (not true)) ($generated@@96 $generated@@124)) true))
 :pattern ( ($generated@@96 $generated@@124))
))) (=> (forall (($generated@@125 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@125) (or (=  (or (not (= $generated@@125 0)) (not true)) ($generated@@96 $generated@@125)) true))
 :pattern ( ($generated@@96 $generated@@125))
)) (and (=> (= (ControlFlow 0 10) 9) $generated@@120) (=> (= (ControlFlow 0 10) 6) $generated@@121)))))))
(let (($generated@@126  (=> (and (=  (or (not (= $generated@@99 0)) (not true)) ($generated@@96 $generated@@99)) (= (ControlFlow 0 14) 10)) $generated@@122)))
(let (($generated@@127  (=> (and (=  (or (not (= $generated@@99 0)) (not true))  (not ($generated@@96 $generated@@99))) (= (ControlFlow 0 13) 10)) $generated@@122)))
(let (($generated@@128  (=> (<= ($generated@@19 0) $generated@@99) (=> (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@99) $generated $generated@@98) ($generated@@95 $generated@@99)) (and (=> (= (ControlFlow 0 15) 13) $generated@@127) (=> (= (ControlFlow 0 15) 14) $generated@@126))))))
(let (($generated@@129  (=> (and (< $generated@@99 ($generated@@19 0)) (= (ControlFlow 0 12) 10)) $generated@@122)))
(let (($generated@@130  (=> (forall (($generated@@131 Int) ($generated@@132 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@131) (=> (= $generated@@132 (+ $generated@@131 1)) (and (and ($generated@@95 $generated@@131) ($generated@@95 $generated@@132)) (=> (= ($generated@@96 $generated@@131)  (not ($generated@@96 $generated@@132))) ($generated@@101 $generated@@131)))))
 :pattern ( ($generated@@100 $generated@@131) ($generated@@96 $generated@@132))
 :pattern ( ($generated@@96 $generated@@132) ($generated@@96 $generated@@131))
)) (and (=> (= (ControlFlow 0 16) (- 0 17)) (forall (($generated@@133 Int) ($generated@@134 Int) ) (!  (=> (and (<= ($generated@@19 0) $generated@@133) (= $generated@@134 (+ $generated@@133 1))) (or (or (= ($generated@@96 $generated@@133) ($generated@@96 $generated@@134)) ($generated@@100 $generated@@133)) true))
 :pattern ( ($generated@@100 $generated@@133) ($generated@@96 $generated@@134))
 :pattern ( ($generated@@96 $generated@@134) ($generated@@96 $generated@@133))
))) (=> (forall (($generated@@135 Int) ($generated@@136 Int) ) (!  (=> (and (<= ($generated@@19 0) $generated@@135) (= $generated@@136 (+ $generated@@135 1))) (or (or (= ($generated@@96 $generated@@135) ($generated@@96 $generated@@136)) ($generated@@100 $generated@@135)) true))
 :pattern ( ($generated@@100 $generated@@135) ($generated@@96 $generated@@136))
 :pattern ( ($generated@@96 $generated@@136) ($generated@@96 $generated@@135))
)) (and (=> (= (ControlFlow 0 16) 15) $generated@@128) (=> (= (ControlFlow 0 16) 12) $generated@@129)))))))
(let (($generated@@137  (=> (and (or (= ($generated@@96 $generated@@102) ($generated@@96 (+ $generated@@102 1))) ($generated@@100 $generated@@102)) (= (ControlFlow 0 20) 16)) $generated@@130)))
(let (($generated@@138  (=> (and (not (or (= ($generated@@96 $generated@@102) ($generated@@96 (+ $generated@@102 1))) ($generated@@100 $generated@@102))) (= (ControlFlow 0 19) 16)) $generated@@130)))
(let (($generated@@139  (=> (= ($generated@@96 $generated@@102) ($generated@@96 (+ $generated@@102 1))) (and (=> (= (ControlFlow 0 22) 19) $generated@@138) (=> (= (ControlFlow 0 22) 20) $generated@@137)))))
(let (($generated@@140  (=> (= ($generated@@96 $generated@@102)  (not ($generated@@96 (+ $generated@@102 1)))) (=> (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@102) $generated $generated@@98) ($generated@@101 $generated@@102)) (and (=> (= (ControlFlow 0 21) 19) $generated@@138) (=> (= (ControlFlow 0 21) 20) $generated@@137))))))
(let (($generated@@141  (=> (and (<= ($generated@@19 0) $generated@@102) ($generated@@92 $generated@@4 ($generated@@8 $generated@@102) $generated $generated@@98)) (=> (and (and ($generated@@95 $generated@@102) (= $generated@@103 (+ $generated@@102 1))) (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@103) $generated $generated@@98) ($generated@@95 (+ $generated@@102 1)))) (and (=> (= (ControlFlow 0 23) 21) $generated@@140) (=> (= (ControlFlow 0 23) 22) $generated@@139))))))
(let (($generated@@142  (=> (and (< $generated@@102 ($generated@@19 0)) (= (ControlFlow 0 18) 16)) $generated@@130)))
(let (($generated@@143  (=> (forall (($generated@@144 Int) )  (=> (<= ($generated@@19 0) $generated@@144) ($generated@@95 $generated@@144))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (forall (($generated@@145 Int) )  (=> (<= ($generated@@19 0) $generated@@145) (or (=  (or (not (= $generated@@145 0)) (not true)) ($generated@@96 $generated@@145)) true)))) (=> (forall (($generated@@146 Int) )  (=> (<= ($generated@@19 0) $generated@@146) (or (=  (or (not (= $generated@@146 0)) (not true)) ($generated@@96 $generated@@146)) true))) (and (=> (= (ControlFlow 0 24) 23) $generated@@141) (=> (= (ControlFlow 0 24) 18) $generated@@142)))))))
(let (($generated@@147  (=> (and (=  (or (not (= $generated@@104 0)) (not true)) ($generated@@96 $generated@@104)) (= (ControlFlow 0 28) 24)) $generated@@143)))
(let (($generated@@148  (=> (and (=  (or (not (= $generated@@104 0)) (not true))  (not ($generated@@96 $generated@@104))) (= (ControlFlow 0 27) 24)) $generated@@143)))
(let (($generated@@149  (=> (<= ($generated@@19 0) $generated@@104) (=> (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@104) $generated $generated@@98) ($generated@@95 $generated@@104)) (and (=> (= (ControlFlow 0 29) 27) $generated@@148) (=> (= (ControlFlow 0 29) 28) $generated@@147))))))
(let (($generated@@150  (=> (and (< $generated@@104 ($generated@@19 0)) (= (ControlFlow 0 26) 24)) $generated@@143)))
(let (($generated@@151  (=> (forall (($generated@@152 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@152) ($generated@@95 $generated@@152))
 :pattern ( ($generated@@96 $generated@@152))
)) (and (=> (= (ControlFlow 0 30) (- 0 31)) (forall (($generated@@153 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@153) (or (=  (or (not (= $generated@@153 0)) (not true)) ($generated@@96 $generated@@153)) true))
 :pattern ( ($generated@@96 $generated@@153))
))) (=> (forall (($generated@@154 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@154) (or (=  (or (not (= $generated@@154 0)) (not true)) ($generated@@96 $generated@@154)) true))
 :pattern ( ($generated@@96 $generated@@154))
)) (and (=> (= (ControlFlow 0 30) 29) $generated@@149) (=> (= (ControlFlow 0 30) 26) $generated@@150)))))))
(let (($generated@@155  (=> (and (=  (or (not (= $generated@@105 0)) (not true)) ($generated@@96 $generated@@105)) (= (ControlFlow 0 34) 30)) $generated@@151)))
(let (($generated@@156  (=> (and (=  (or (not (= $generated@@105 0)) (not true))  (not ($generated@@96 $generated@@105))) (= (ControlFlow 0 33) 30)) $generated@@151)))
(let (($generated@@157  (=> (<= ($generated@@19 0) $generated@@105) (=> (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@105) $generated $generated@@98) ($generated@@95 $generated@@105)) (and (=> (= (ControlFlow 0 35) 33) $generated@@156) (=> (= (ControlFlow 0 35) 34) $generated@@155))))))
(let (($generated@@158  (=> (and (< $generated@@105 ($generated@@19 0)) (= (ControlFlow 0 32) 30)) $generated@@151)))
(let (($generated@@159  (=> (forall (($generated@@160 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@160) ($generated@@95 $generated@@160))
 :pattern ( ($generated@@96 $generated@@160))
)) (and (=> (= (ControlFlow 0 36) (- 0 37)) (forall (($generated@@161 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@161) (or (=  (or (not (= $generated@@161 0)) (not true)) ($generated@@96 $generated@@161)) true))
 :pattern ( ($generated@@96 $generated@@161))
))) (=> (forall (($generated@@162 Int) ) (!  (=> (<= ($generated@@19 0) $generated@@162) (or (=  (or (not (= $generated@@162 0)) (not true)) ($generated@@96 $generated@@162)) true))
 :pattern ( ($generated@@96 $generated@@162))
)) (and (=> (= (ControlFlow 0 36) 35) $generated@@157) (=> (= (ControlFlow 0 36) 32) $generated@@158)))))))
(let (($generated@@163  (=> (and (=  (or (not (= $generated@@106 0)) (not true)) ($generated@@96 $generated@@106)) (= (ControlFlow 0 40) 36)) $generated@@159)))
(let (($generated@@164  (=> (and (=  (or (not (= $generated@@106 0)) (not true))  (not ($generated@@96 $generated@@106))) (= (ControlFlow 0 39) 36)) $generated@@159)))
(let (($generated@@165  (=> (<= ($generated@@19 0) $generated@@106) (=> (and ($generated@@92 $generated@@4 ($generated@@8 $generated@@106) $generated $generated@@98) ($generated@@95 $generated@@106)) (and (=> (= (ControlFlow 0 41) 39) $generated@@164) (=> (= (ControlFlow 0 41) 40) $generated@@163))))))
(let (($generated@@166  (=> (and (< $generated@@106 ($generated@@19 0)) (= (ControlFlow 0 38) 36)) $generated@@159)))
(let (($generated@@167  (and (=> (= (ControlFlow 0 42) (- 0 43)) (forall (($generated@@168 Int) )  (or (>= $generated@@168 ($generated@@19 0)) (< $generated@@168 0)))) (=> (forall (($generated@@169 Int) )  (or (>= $generated@@169 ($generated@@19 0)) (< $generated@@169 0))) (and (=> (= (ControlFlow 0 42) 41) $generated@@165) (=> (= (ControlFlow 0 42) 38) $generated@@166))))))
(let (($generated@@170  (=> (and (>= $generated@@107 ($generated@@19 0)) (= (ControlFlow 0 45) 42)) $generated@@167)))
(let (($generated@@171  (=> (and (> ($generated@@19 0) $generated@@107) (= (ControlFlow 0 44) 42)) $generated@@167)))
(let (($generated@@172  (and (=> (= (ControlFlow 0 46) 44) $generated@@171) (=> (= (ControlFlow 0 46) 45) $generated@@170))))
(let (($generated@@173 true))
(let (($generated@@174  (and (=> (= (ControlFlow 0 47) (- 0 48)) (forall (($generated@@175 Int) )  (or (>= $generated@@175 ($generated@@19 0)) (< $generated@@175 0)))) (=> (forall (($generated@@176 Int) )  (or (>= $generated@@176 ($generated@@19 0)) (< $generated@@176 0))) (and (=> (= (ControlFlow 0 47) 46) $generated@@172) (=> (= (ControlFlow 0 47) 3) $generated@@173))))))
(let (($generated@@177  (=> (and (>= $generated@@108 ($generated@@19 0)) (= (ControlFlow 0 50) 47)) $generated@@174)))
(let (($generated@@178  (=> (and (> ($generated@@19 0) $generated@@108) (= (ControlFlow 0 49) 47)) $generated@@174)))
(let (($generated@@179  (and (=> (= (ControlFlow 0 51) 49) $generated@@178) (=> (= (ControlFlow 0 51) 50) $generated@@177))))
(let (($generated@@180 true))
(let (($generated@@181  (and (=> (= (ControlFlow 0 52) (- 0 53)) (forall (($generated@@182 Int) )  (or (>= $generated@@182 ($generated@@19 0)) (< $generated@@182 0)))) (=> (forall (($generated@@183 Int) )  (or (>= $generated@@183 ($generated@@19 0)) (< $generated@@183 0))) (and (=> (= (ControlFlow 0 52) 51) $generated@@179) (=> (= (ControlFlow 0 52) 2) $generated@@180))))))
(let (($generated@@184  (=> (and (>= $generated@@109 ($generated@@19 0)) (= (ControlFlow 0 55) 52)) $generated@@181)))
(let (($generated@@185  (=> (and (> ($generated@@19 0) $generated@@109) (= (ControlFlow 0 54) 52)) $generated@@181)))
(let (($generated@@186  (and (=> (= (ControlFlow 0 56) 54) $generated@@185) (=> (= (ControlFlow 0 56) 55) $generated@@184))))
(let (($generated@@187 true))
(let (($generated@@188  (=> (= $generated@@110 ($generated@@33 $generated@@111 $generated@@98 $generated@@1 false)) (and (=> (= (ControlFlow 0 57) 56) $generated@@186) (=> (= (ControlFlow 0 57) 1) $generated@@187)))))
(let (($generated@@189  (=> (and (and ($generated@@112 $generated@@98) ($generated@@113 $generated@@98)) (and (= 1 $generated@@114) (= (ControlFlow 0 58) 57))) $generated@@188)))
$generated@@189))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
