(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Foo (T@U) Bool)
(declare-fun |_module.__default.Foo#canCall| (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSeq alloc)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (= (Ctor SeqType) 3))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|s#0| T@U) ) (!  (=> (or (|_module.__default.Foo#canCall| |s#0|) (and (< 0 $FunctionContextHeight) ($Is SeqType |s#0| (TSeq TInt)))) (= (_module.__default.Foo |s#0|)  (and (and (and (forall ((|i#0| Int) ) (!  (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |s#0|))) (let ((|j#0| |i#0|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0| |j#0|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0| |i#0|)))
)) (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| |s#0|))) (let ((|k#0| |i#1|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0| |k#0|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0| |i#1|)))
))) (forall ((|i#2| Int) (|_t#0#0| Int) ) (!  (=> (= |_t#0#0| (+ |i#2| 1)) (=> (and (<= (LitInt 0) |i#2|) (< |i#2| (- (|Seq#Length| |s#0|) 1))) (= (U_2_int ($Unbox intType (|Seq#Index| |s#0| |i#2|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0| |_t#0#0|))))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0| |_t#0#0|)) ($Unbox intType (|Seq#Index| |s#0| |i#2|)))
))) (forall ((|i#3| Int) (|_t#0#1| Int) ) (!  (=> (= |_t#0#1| (+ |i#3| 1)) (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (- (|Seq#Length| |s#0|) 1))) (= (U_2_int ($Unbox intType (|Seq#Index| |s#0| |i#3|))) (U_2_int (let ((|j#2| |_t#0#1|))
($Unbox intType (|Seq#Index| |s#0| |j#2|)))))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0| |_t#0#1|)) ($Unbox intType (|Seq#Index| |s#0| |i#3|)))
)))))
 :pattern ( (_module.__default.Foo |s#0|))
))))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx TInt) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) TInt)))
 :pattern ( ($IsBox bx TInt))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TBool) (and (= ($Box boolType ($Unbox boolType bx@@0)) bx@@0) ($Is boolType ($Unbox boolType bx@@0) TBool)))
 :pattern ( ($IsBox bx@@0 TBool))
)))
(assert (forall ((v T@U) (t T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v) t) ($Is T@@1 v t))
 :pattern ( ($IsBox ($Box T@@1 v) t))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((t@@0 T@U) ) (! (= (Inv0_TSeq (TSeq t@@0)) t@@0)
 :pattern ( (TSeq t@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Tag (TSeq t@@1)) TagSeq)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@1 T@U) (t@@2 T@U) ) (!  (=> ($IsBox bx@@1 (TSeq t@@2)) (and (= ($Box SeqType ($Unbox SeqType bx@@1)) bx@@1) ($Is SeqType ($Unbox SeqType bx@@1) (TSeq t@@2))))
 :pattern ( ($IsBox bx@@1 (TSeq t@@2)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|s#0@@0| T@U) ) (!  (=> (or (|_module.__default.Foo#canCall| (Lit SeqType |s#0@@0|)) (and (< 0 $FunctionContextHeight) ($Is SeqType |s#0@@0| (TSeq TInt)))) (= (_module.__default.Foo (Lit SeqType |s#0@@0|))  (and (and (and (forall ((|i#4| Int) ) (!  (=> (and (<= (LitInt 0) |i#4|) (< |i#4| (|Seq#Length| (Lit SeqType |s#0@@0|)))) (let ((|j#3| |i#4|))
(> (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@0|) |j#3|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@0| |i#4|)))
)) (forall ((|i#5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5|) (< |i#5| (|Seq#Length| (Lit SeqType |s#0@@0|)))) (let ((|k#1| |i#5|))
(> (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@0|) |k#1|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@0| |i#5|)))
))) (forall ((|i#6| Int) (|_t#0#2| Int) ) (!  (=> (= |_t#0#2| (+ |i#6| 1)) (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (- (|Seq#Length| (Lit SeqType |s#0@@0|)) 1))) (= (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@0|) |i#6|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@0|) |_t#0#2|))))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@0| |_t#0#2|)) ($Unbox intType (|Seq#Index| |s#0@@0| |i#6|)))
))) (forall ((|i#7| Int) (|_t#0#3| Int) ) (!  (=> (= |_t#0#3| (+ |i#7| 1)) (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (- (|Seq#Length| (Lit SeqType |s#0@@0|)) 1))) (= (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@0|) |i#7|))) (U_2_int (let ((|j#5| |_t#0#3|))
($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@0|) |j#5|)))))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@0| |_t#0#3|)) ($Unbox intType (|Seq#Index| |s#0@@0| |i#7|)))
)))))
 :weight 3
 :pattern ( (_module.__default.Foo (Lit SeqType |s#0@@0|)))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@0 T@U) (t0@@1 T@U) ) (! (= ($Is SeqType v@@0 (TSeq t0@@1)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@0))) ($IsBox (|Seq#Index| v@@0 i) t0@@1))
 :pattern ( (|Seq#Index| v@@0 i))
)))
 :pattern ( ($Is SeqType v@@0 (TSeq t0@@1)))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is boolType v@@2 TBool)
 :pattern ( ($Is boolType v@@2 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#13@0| () Int)
(declare-fun |s#0@@1| () T@U)
(declare-fun |let#2#0#0| () Int)
(declare-fun |j#Z#2@0| () Int)
(declare-fun |i#11@0| () Int)
(declare-fun |i#9@0| () Int)
(declare-fun |let#1#0#0| () Int)
(declare-fun |j#Z#1@0| () Int)
(declare-fun |let#1#1#0| () Int)
(declare-fun |k#Z#0@0| () Int)
(declare-fun |i#8@0| () Int)
(declare-fun |let#0#0#0| () Int)
(declare-fun |j#Z#0@0| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 40) (let ((anon36_Else_correct true))
(let ((anon40_Else_correct true))
(let ((anon44_Else_correct true))
(let ((anon29_correct true))
(let ((anon46_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#13@0|) (< |i#13@0| (- (|Seq#Length| |s#0@@1|) 1)))) (= (ControlFlow 0 9) 3)) anon29_correct)))
(let ((anon46_Then_correct  (=> (and (<= (LitInt 0) |i#13@0|) (< |i#13@0| (- (|Seq#Length| |s#0@@1|) 1))) (and (=> (= (ControlFlow 0 6) (- 0 8)) (and (<= 0 |i#13@0|) (< |i#13@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |i#13@0|) (< |i#13@0| (|Seq#Length| |s#0@@1|))) (=> (= |let#2#0#0| (+ |i#13@0| 1)) (=> (and ($Is intType (int_2_U |let#2#0#0|) TInt) (= |j#Z#2@0| |let#2#0#0|)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (and (<= 0 |j#Z#2@0|) (< |j#Z#2@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |j#Z#2@0|) (< |j#Z#2@0| (|Seq#Length| |s#0@@1|))) (=> (= (ControlFlow 0 6) 3) anon29_correct))))))))))
(let ((anon45_Else_correct  (=> (< |i#13@0| (LitInt 0)) (and (=> (= (ControlFlow 0 11) 6) anon46_Then_correct) (=> (= (ControlFlow 0 11) 9) anon46_Else_correct)))))
(let ((anon45_Then_correct  (=> (<= (LitInt 0) |i#13@0|) (and (=> (= (ControlFlow 0 10) 6) anon46_Then_correct) (=> (= (ControlFlow 0 10) 9) anon46_Else_correct)))))
(let ((anon44_Then_correct  (and (=> (= (ControlFlow 0 12) 10) anon45_Then_correct) (=> (= (ControlFlow 0 12) 11) anon45_Else_correct))))
(let ((anon43_Then_correct  (=> (and (and (forall ((|i#10| Int) ) (!  (=> (and (<= (LitInt 0) |i#10|) (< |i#10| (|Seq#Length| |s#0@@1|))) (let ((|j#6| |i#10|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |j#6|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#10|)))
)) (forall ((|i#12| Int) ) (!  (=> (and (<= (LitInt 0) |i#12|) (< |i#12| (|Seq#Length| |s#0@@1|))) (let ((|k#2| |i#12|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |k#2|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#12|)))
))) (forall ((|i#14| Int) (|_t#0#4| Int) ) (!  (=> (= |_t#0#4| (+ |i#14| 1)) (=> (and (<= (LitInt 0) |i#14|) (< |i#14| (- (|Seq#Length| |s#0@@1|) 1))) (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |i#14|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |_t#0#4|))))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |_t#0#4|)) ($Unbox intType (|Seq#Index| |s#0@@1| |i#14|)))
))) (and (=> (= (ControlFlow 0 13) 12) anon44_Then_correct) (=> (= (ControlFlow 0 13) 5) anon44_Else_correct)))))
(let ((anon43_Else_correct  (=> (and (not (and (and (forall ((|i#10@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@0|) (< |i#10@@0| (|Seq#Length| |s#0@@1|))) (let ((|j#6@@0| |i#10@@0|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |j#6@@0|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#10@@0|)))
)) (forall ((|i#12@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@0|) (< |i#12@@0| (|Seq#Length| |s#0@@1|))) (let ((|k#2@@0| |i#12@@0|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |k#2@@0|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#12@@0|)))
))) (forall ((|i#14@@0| Int) (|_t#0#4@@0| Int) ) (!  (=> (= |_t#0#4@@0| (+ |i#14@@0| 1)) (=> (and (<= (LitInt 0) |i#14@@0|) (< |i#14@@0| (- (|Seq#Length| |s#0@@1|) 1))) (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |i#14@@0|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |_t#0#4@@0|))))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |_t#0#4@@0|)) ($Unbox intType (|Seq#Index| |s#0@@1| |i#14@@0|)))
)))) (= (ControlFlow 0 4) 3)) anon29_correct)))
(let ((anon42_Else_correct  (=> (not (and (<= (LitInt 0) |i#11@0|) (< |i#11@0| (- (|Seq#Length| |s#0@@1|) 1)))) (and (=> (= (ControlFlow 0 19) 13) anon43_Then_correct) (=> (= (ControlFlow 0 19) 4) anon43_Else_correct)))))
(let ((anon42_Then_correct  (=> (and (<= (LitInt 0) |i#11@0|) (< |i#11@0| (- (|Seq#Length| |s#0@@1|) 1))) (and (=> (= (ControlFlow 0 16) (- 0 18)) (and (<= 0 |i#11@0|) (< |i#11@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |i#11@0|) (< |i#11@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (and (<= 0 (+ |i#11@0| 1)) (< (+ |i#11@0| 1) (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 (+ |i#11@0| 1)) (< (+ |i#11@0| 1) (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 16) 13) anon43_Then_correct) (=> (= (ControlFlow 0 16) 4) anon43_Else_correct)))))))))
(let ((anon41_Else_correct  (=> (< |i#11@0| (LitInt 0)) (and (=> (= (ControlFlow 0 21) 16) anon42_Then_correct) (=> (= (ControlFlow 0 21) 19) anon42_Else_correct)))))
(let ((anon41_Then_correct  (=> (<= (LitInt 0) |i#11@0|) (and (=> (= (ControlFlow 0 20) 16) anon42_Then_correct) (=> (= (ControlFlow 0 20) 19) anon42_Else_correct)))))
(let ((anon40_Then_correct  (and (=> (= (ControlFlow 0 22) 20) anon41_Then_correct) (=> (= (ControlFlow 0 22) 21) anon41_Else_correct))))
(let ((anon39_Then_correct  (=> (and (forall ((|i#10@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@1|) (< |i#10@@1| (|Seq#Length| |s#0@@1|))) (let ((|j#6@@1| |i#10@@1|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |j#6@@1|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#10@@1|)))
)) (forall ((|i#12@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@1|) (< |i#12@@1| (|Seq#Length| |s#0@@1|))) (let ((|k#2@@1| |i#12@@1|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |k#2@@1|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#12@@1|)))
))) (and (=> (= (ControlFlow 0 23) 22) anon40_Then_correct) (=> (= (ControlFlow 0 23) 15) anon40_Else_correct)))))
(let ((anon39_Else_correct  (=> (not (and (forall ((|i#10@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@2|) (< |i#10@@2| (|Seq#Length| |s#0@@1|))) (let ((|j#6@@2| |i#10@@2|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |j#6@@2|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#10@@2|)))
)) (forall ((|i#12@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#12@@2|) (< |i#12@@2| (|Seq#Length| |s#0@@1|))) (let ((|k#2@@2| |i#12@@2|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |k#2@@2|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#12@@2|)))
)))) (and (=> (= (ControlFlow 0 14) 13) anon43_Then_correct) (=> (= (ControlFlow 0 14) 4) anon43_Else_correct)))))
(let ((anon38_Else_correct  (=> (not (and (<= (LitInt 0) |i#9@0|) (< |i#9@0| (|Seq#Length| |s#0@@1|)))) (and (=> (= (ControlFlow 0 28) 23) anon39_Then_correct) (=> (= (ControlFlow 0 28) 14) anon39_Else_correct)))))
(let ((anon38_Then_correct  (=> (and (and (and (<= (LitInt 0) |i#9@0|) (< |i#9@0| (|Seq#Length| |s#0@@1|))) (and (= |let#1#0#0| |i#9@0|) ($Is intType (int_2_U |let#1#0#0|) TInt))) (and (and (= |j#Z#1@0| |let#1#0#0|) (= |let#1#1#0| |i#9@0|)) (and ($Is intType (int_2_U |let#1#1#0|) TInt) (= |k#Z#0@0| |let#1#1#0|)))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (and (<= 0 |k#Z#0@0|) (< |k#Z#0@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |k#Z#0@0|) (< |k#Z#0@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 26) 23) anon39_Then_correct) (=> (= (ControlFlow 0 26) 14) anon39_Else_correct)))))))
(let ((anon37_Else_correct  (=> (< |i#9@0| (LitInt 0)) (and (=> (= (ControlFlow 0 30) 26) anon38_Then_correct) (=> (= (ControlFlow 0 30) 28) anon38_Else_correct)))))
(let ((anon37_Then_correct  (=> (<= (LitInt 0) |i#9@0|) (and (=> (= (ControlFlow 0 29) 26) anon38_Then_correct) (=> (= (ControlFlow 0 29) 28) anon38_Else_correct)))))
(let ((anon36_Then_correct  (and (=> (= (ControlFlow 0 31) 29) anon37_Then_correct) (=> (= (ControlFlow 0 31) 30) anon37_Else_correct))))
(let ((anon35_Then_correct  (=> (forall ((|i#10@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@3|) (< |i#10@@3| (|Seq#Length| |s#0@@1|))) (let ((|j#6@@3| |i#10@@3|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |j#6@@3|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#10@@3|)))
)) (and (=> (= (ControlFlow 0 32) 31) anon36_Then_correct) (=> (= (ControlFlow 0 32) 25) anon36_Else_correct)))))
(let ((anon35_Else_correct  (=> (not (forall ((|i#10@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@4|) (< |i#10@@4| (|Seq#Length| |s#0@@1|))) (let ((|j#6@@4| |i#10@@4|))
(> (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| |j#6@@4|))) 0)))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@@1| |i#10@@4|)))
))) (and (=> (= (ControlFlow 0 24) 23) anon39_Then_correct) (=> (= (ControlFlow 0 24) 14) anon39_Else_correct)))))
(let ((anon34_Else_correct  (=> (not (and (<= (LitInt 0) |i#8@0|) (< |i#8@0| (|Seq#Length| |s#0@@1|)))) (and (=> (= (ControlFlow 0 35) 32) anon35_Then_correct) (=> (= (ControlFlow 0 35) 24) anon35_Else_correct)))))
(let ((anon34_Then_correct  (=> (and (and (and (<= (LitInt 0) |i#8@0|) (< |i#8@0| (|Seq#Length| |s#0@@1|))) (= |let#0#0#0| |i#8@0|)) (and ($Is intType (int_2_U |let#0#0#0|) TInt) (= |j#Z#0@0| |let#0#0#0|))) (and (=> (= (ControlFlow 0 33) (- 0 34)) (and (<= 0 |j#Z#0@0|) (< |j#Z#0@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |j#Z#0@0|) (< |j#Z#0@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 33) 32) anon35_Then_correct) (=> (= (ControlFlow 0 33) 24) anon35_Else_correct)))))))
(let ((anon33_Else_correct  (=> (< |i#8@0| (LitInt 0)) (and (=> (= (ControlFlow 0 37) 33) anon34_Then_correct) (=> (= (ControlFlow 0 37) 35) anon34_Else_correct)))))
(let ((anon33_Then_correct  (=> (<= (LitInt 0) |i#8@0|) (and (=> (= (ControlFlow 0 36) 33) anon34_Then_correct) (=> (= (ControlFlow 0 36) 35) anon34_Else_correct)))))
(let ((anon32_Then_correct  (and (=> (= (ControlFlow 0 38) 36) anon33_Then_correct) (=> (= (ControlFlow 0 38) 37) anon33_Else_correct))))
(let ((anon32_Else_correct true))
(let ((anon31_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 39) 1) anon31_Then_correct) (=> (= (ControlFlow 0 39) 38) anon32_Then_correct)) (=> (= (ControlFlow 0 39) 2) anon32_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is SeqType |s#0@@1| (TSeq TInt))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 40) 39))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
