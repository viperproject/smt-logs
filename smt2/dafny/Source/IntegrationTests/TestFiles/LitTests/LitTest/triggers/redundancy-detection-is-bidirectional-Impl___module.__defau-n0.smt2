(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (T@T T@U) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@32 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@T T@T) T@T)
(declare-fun $generated@@35 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@89 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 T@U) ($generated@@21 T@T) ) (! (= ($generated@@19 $generated@@21 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@21 $generated@@20))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 ($generated@@22 $generated@@25 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@22 $generated@@25 $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@22 $generated@@27 ($generated@@23 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@23 $generated@@27 $generated@@26))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@28 $generated@@39 $generated@@40 $generated@@41 ($generated@@35 $generated@@39 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@45 $generated@@42) $generated@@44 $generated@@45) $generated@@42)
 :weight 0
)) (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (!  (or (= $generated@@51 $generated@@53) (= ($generated@@28 $generated@@46 $generated@@47 $generated@@48 ($generated@@35 $generated@@46 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@52 $generated@@49) $generated@@53 $generated@@54) ($generated@@28 $generated@@46 $generated@@47 $generated@@48 $generated@@50 $generated@@53 $generated@@54)))
 :weight 0
)) (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@61 $generated@@63) (= ($generated@@28 $generated@@55 $generated@@56 $generated@@57 ($generated@@35 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@61 $generated@@58) $generated@@62 $generated@@63) ($generated@@28 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@62 $generated@@63)))
 :weight 0
)))) (= ($generated@@2 $generated@@29) 3)) (= ($generated@@2 $generated@@30) 4)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@32 $generated@@64 $generated@@65 ($generated@@36 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@66) $generated@@68) $generated@@66)
 :weight 0
))) (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (or (= $generated@@73 $generated@@74) (= ($generated@@32 $generated@@69 $generated@@70 ($generated@@36 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@71) $generated@@74) ($generated@@32 $generated@@69 $generated@@70 $generated@@72 $generated@@74)))
 :weight 0
))) (= ($generated@@2 $generated@@33) 5)) (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (= ($generated@@2 ($generated@@34 $generated@@75 $generated@@76)) 6))) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (! (= ($generated@@37 ($generated@@34 $generated@@77 $generated@@78)) $generated@@77)
 :pattern ( ($generated@@34 $generated@@77 $generated@@78))
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@38 ($generated@@34 $generated@@79 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@34 $generated@@79 $generated@@80))
))))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 Bool) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@7 ($generated@@28 $generated@@29 $generated@@30 $generated@@3 ($generated@@31 $generated@@81 $generated@@82 $generated@@83 $generated@@84) $generated@@85 $generated@@86))  (=> (and (or (not (= $generated@@85 $generated@@81)) (not true)) ($generated@@7 ($generated@@22 $generated@@3 ($generated@@32 $generated@@30 $generated@@33 ($generated@@32 $generated@@29 ($generated@@34 $generated@@30 $generated@@33) $generated@@82 $generated@@85) $generated@@83)))) $generated@@84))
 :pattern ( ($generated@@28 $generated@@29 $generated@@30 $generated@@3 ($generated@@31 $generated@@81 $generated@@82 $generated@@83 $generated@@84) $generated@@85 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@23 $generated@@88 ($generated@@19 $generated@@88 $generated@@87)) ($generated@@19 $generated@@33 ($generated@@23 $generated@@88 $generated@@87)))
 :pattern ( ($generated@@23 $generated@@88 ($generated@@19 $generated@@88 $generated@@87)))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! ($generated@@89 $generated@@4 $generated@@91 $generated $generated@@90)
 :pattern ( ($generated@@89 $generated@@4 $generated@@91 $generated $generated@@90))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@92 (Int Int) Bool)
(declare-fun $generated@@93 (Int) Bool)
(declare-fun $generated@@94 (Int) Bool)
(declare-fun $generated@@95 (Int) Bool)
(declare-fun $generated@@96 (Int) Bool)
(declare-fun $generated@@97 (Int Int) Bool)
(declare-fun $generated@@98 () Int)
(declare-fun $generated@@99 () Int)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 () Int)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 () T@U)
(declare-fun $generated@@107 (T@U) Bool)
(declare-fun $generated@@108 (T@U) Bool)
(declare-fun $generated@@109 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 32) (let (($generated@@110  (=> (and (forall (($generated@@111 Int) ($generated@@112 Int) ) (!  (=> (not ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true)))) (and ($generated@@95 $generated@@112) (=> (not ($generated@@94 $generated@@112)) (and ($generated@@96 $generated@@111) (=> (not ($generated@@93 $generated@@111)) ($generated@@97 $generated@@111 $generated@@112))))))
 :pattern ( ($generated@@92 $generated@@111 $generated@@112))
 :pattern ( ($generated@@93 $generated@@111) ($generated@@94 $generated@@112))
)) (= (ControlFlow 0 5) (- 0 4))) (forall (($generated@@113 Int) ($generated@@114 Int) ) (!  (or (or (or true ($generated@@94 $generated@@114)) ($generated@@93 $generated@@113)) ($generated@@92 $generated@@113 $generated@@114))
 :pattern ( ($generated@@92 $generated@@113 $generated@@114))
 :pattern ( ($generated@@93 $generated@@113) ($generated@@94 $generated@@114))
)))))
(let (($generated@@115  (=> (and (or (or true ($generated@@94 $generated@@98)) ($generated@@93 $generated@@99)) (= (ControlFlow 0 7) 5)) $generated@@110)))
(let (($generated@@116  (=> (not (or (or true ($generated@@94 $generated@@98)) ($generated@@93 $generated@@99))) (=> (and (and ($generated@@89 $generated@@4 ($generated@@8 $generated@@99) $generated $generated@@100) ($generated@@89 $generated@@4 ($generated@@8 $generated@@98) $generated $generated@@100)) (and ($generated@@97 $generated@@99 $generated@@98) (= (ControlFlow 0 6) 5))) $generated@@110))))
(let (($generated@@117  (=> (or true ($generated@@94 $generated@@98)) (and (=> (= (ControlFlow 0 9) 6) $generated@@116) (=> (= (ControlFlow 0 9) 7) $generated@@115)))))
(let (($generated@@118  (=> (not (or true ($generated@@94 $generated@@98))) (=> (and ($generated@@89 $generated@@4 ($generated@@8 $generated@@99) $generated $generated@@100) ($generated@@96 $generated@@99)) (and (=> (= (ControlFlow 0 8) 6) $generated@@116) (=> (= (ControlFlow 0 8) 7) $generated@@115))))))
(let (($generated@@119  (=> ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 11) 8) $generated@@118) (=> (= (ControlFlow 0 11) 9) $generated@@117)))))
(let (($generated@@120  (=> (not ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@89 $generated@@4 ($generated@@8 $generated@@98) $generated $generated@@100) ($generated@@95 $generated@@98)) (and (=> (= (ControlFlow 0 10) 8) $generated@@118) (=> (= (ControlFlow 0 10) 9) $generated@@117))))))
(let (($generated@@121  (and (=> (= (ControlFlow 0 12) 10) $generated@@120) (=> (= (ControlFlow 0 12) 11) $generated@@119))))
(let (($generated@@122 true))
(let (($generated@@123  (=> (forall (($generated@@124 Int) ($generated@@125 Int) ) (!  (=> (not ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true)))) (and ($generated@@95 $generated@@125) (=> (not ($generated@@94 $generated@@125)) (and ($generated@@97 $generated@@124 $generated@@125) (=> (not ($generated@@92 $generated@@124 $generated@@125)) ($generated@@96 $generated@@124))))))
 :pattern ( ($generated@@93 $generated@@124) ($generated@@94 $generated@@125))
 :pattern ( ($generated@@92 $generated@@124 $generated@@125))
)) (and (=> (= (ControlFlow 0 13) (- 0 14)) (forall (($generated@@126 Int) ($generated@@127 Int) ) (!  (or (or (or true ($generated@@94 $generated@@127)) ($generated@@92 $generated@@126 $generated@@127)) ($generated@@93 $generated@@126))
 :pattern ( ($generated@@93 $generated@@126) ($generated@@94 $generated@@127))
 :pattern ( ($generated@@92 $generated@@126 $generated@@127))
))) (=> (forall (($generated@@128 Int) ($generated@@129 Int) ) (!  (or (or (or true ($generated@@94 $generated@@129)) ($generated@@92 $generated@@128 $generated@@129)) ($generated@@93 $generated@@128))
 :pattern ( ($generated@@93 $generated@@128) ($generated@@94 $generated@@129))
 :pattern ( ($generated@@92 $generated@@128 $generated@@129))
)) (and (=> (= (ControlFlow 0 13) 12) $generated@@121) (=> (= (ControlFlow 0 13) 3) $generated@@122)))))))
(let (($generated@@130  (=> (and (or (or true ($generated@@94 $generated@@101)) ($generated@@92 $generated@@102 $generated@@101)) (= (ControlFlow 0 16) 13)) $generated@@123)))
(let (($generated@@131  (=> (and (and (not (or (or true ($generated@@94 $generated@@101)) ($generated@@92 $generated@@102 $generated@@101))) ($generated@@89 $generated@@4 ($generated@@8 $generated@@102) $generated $generated@@100)) (and ($generated@@96 $generated@@102) (= (ControlFlow 0 15) 13))) $generated@@123)))
(let (($generated@@132  (=> (or true ($generated@@94 $generated@@101)) (and (=> (= (ControlFlow 0 18) 15) $generated@@131) (=> (= (ControlFlow 0 18) 16) $generated@@130)))))
(let (($generated@@133  (=> (and (and (not (or true ($generated@@94 $generated@@101))) ($generated@@89 $generated@@4 ($generated@@8 $generated@@102) $generated $generated@@100)) (and ($generated@@89 $generated@@4 ($generated@@8 $generated@@101) $generated $generated@@100) ($generated@@97 $generated@@102 $generated@@101))) (and (=> (= (ControlFlow 0 17) 15) $generated@@131) (=> (= (ControlFlow 0 17) 16) $generated@@130)))))
(let (($generated@@134  (=> ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 20) 17) $generated@@133) (=> (= (ControlFlow 0 20) 18) $generated@@132)))))
(let (($generated@@135  (=> (not ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@89 $generated@@4 ($generated@@8 $generated@@101) $generated $generated@@100) ($generated@@95 $generated@@101)) (and (=> (= (ControlFlow 0 19) 17) $generated@@133) (=> (= (ControlFlow 0 19) 18) $generated@@132))))))
(let (($generated@@136  (and (=> (= (ControlFlow 0 21) 19) $generated@@135) (=> (= (ControlFlow 0 21) 20) $generated@@134))))
(let (($generated@@137 true))
(let (($generated@@138  (=> (forall (($generated@@139 Int) ($generated@@140 Int) ) (!  (=> (not ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true)))) (and ($generated@@97 $generated@@139 $generated@@140) (=> (not ($generated@@92 $generated@@139 $generated@@140)) (and ($generated@@95 $generated@@140) (=> (not ($generated@@94 $generated@@140)) ($generated@@96 $generated@@139))))))
 :pattern ( ($generated@@93 $generated@@139) ($generated@@94 $generated@@140))
 :pattern ( ($generated@@92 $generated@@139 $generated@@140))
)) (and (=> (= (ControlFlow 0 22) (- 0 23)) (forall (($generated@@141 Int) ($generated@@142 Int) ) (!  (or (or (or true ($generated@@92 $generated@@141 $generated@@142)) ($generated@@94 $generated@@142)) ($generated@@93 $generated@@141))
 :pattern ( ($generated@@93 $generated@@141) ($generated@@94 $generated@@142))
 :pattern ( ($generated@@92 $generated@@141 $generated@@142))
))) (=> (forall (($generated@@143 Int) ($generated@@144 Int) ) (!  (or (or (or true ($generated@@92 $generated@@143 $generated@@144)) ($generated@@94 $generated@@144)) ($generated@@93 $generated@@143))
 :pattern ( ($generated@@93 $generated@@143) ($generated@@94 $generated@@144))
 :pattern ( ($generated@@92 $generated@@143 $generated@@144))
)) (and (=> (= (ControlFlow 0 22) 21) $generated@@136) (=> (= (ControlFlow 0 22) 2) $generated@@137)))))))
(let (($generated@@145  (=> (and (or (or true ($generated@@92 $generated@@103 $generated@@104)) ($generated@@94 $generated@@104)) (= (ControlFlow 0 25) 22)) $generated@@138)))
(let (($generated@@146  (=> (and (and (not (or (or true ($generated@@92 $generated@@103 $generated@@104)) ($generated@@94 $generated@@104))) ($generated@@89 $generated@@4 ($generated@@8 $generated@@103) $generated $generated@@100)) (and ($generated@@96 $generated@@103) (= (ControlFlow 0 24) 22))) $generated@@138)))
(let (($generated@@147  (=> (or true ($generated@@92 $generated@@103 $generated@@104)) (and (=> (= (ControlFlow 0 27) 24) $generated@@146) (=> (= (ControlFlow 0 27) 25) $generated@@145)))))
(let (($generated@@148  (=> (not (or true ($generated@@92 $generated@@103 $generated@@104))) (=> (and ($generated@@89 $generated@@4 ($generated@@8 $generated@@104) $generated $generated@@100) ($generated@@95 $generated@@104)) (and (=> (= (ControlFlow 0 26) 24) $generated@@146) (=> (= (ControlFlow 0 26) 25) $generated@@145))))))
(let (($generated@@149  (=> ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 29) 26) $generated@@148) (=> (= (ControlFlow 0 29) 27) $generated@@147)))))
(let (($generated@@150  (=> (and (and (not ($generated@@7 ($generated@@19 $generated@@3 ($generated@@6 true)))) ($generated@@89 $generated@@4 ($generated@@8 $generated@@103) $generated $generated@@100)) (and ($generated@@89 $generated@@4 ($generated@@8 $generated@@104) $generated $generated@@100) ($generated@@97 $generated@@103 $generated@@104))) (and (=> (= (ControlFlow 0 28) 26) $generated@@148) (=> (= (ControlFlow 0 28) 27) $generated@@147)))))
(let (($generated@@151  (and (=> (= (ControlFlow 0 30) 28) $generated@@150) (=> (= (ControlFlow 0 30) 29) $generated@@149))))
(let (($generated@@152 true))
(let (($generated@@153  (=> (= $generated@@105 ($generated@@31 $generated@@106 $generated@@100 $generated@@1 false)) (and (=> (= (ControlFlow 0 31) 30) $generated@@151) (=> (= (ControlFlow 0 31) 1) $generated@@152)))))
(let (($generated@@154  (=> (and (and ($generated@@107 $generated@@100) ($generated@@108 $generated@@100)) (and (= 1 $generated@@109) (= (ControlFlow 0 32) 31))) $generated@@153)))
$generated@@154))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
