(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Bool)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (Int) Int)
(declare-fun $generated@@19 (T@T T@U) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 () Int)
(declare-fun $generated@@27 (T@U Int) Bool)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (Int) Bool)
(declare-fun $generated@@32 (T@U T@U T@U) Bool)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@42 (T@U T@U) Bool)
(declare-fun $generated@@43 (T@T T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@T T@T) T@T)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert ($generated $generated@@0))
(assert (forall (($generated@@18 Int) ) (! (= ($generated@@17 $generated@@18) $generated@@18)
 :pattern ( ($generated@@17 $generated@@18))
)))
(assert (forall (($generated@@20 T@U) ($generated@@21 T@T) ) (! (= ($generated@@19 $generated@@21 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@21 $generated@@20))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 ($generated@@22 $generated@@25 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@22 $generated@@25 $generated@@24))
)))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@30 T@U) ($generated@@31 Int) ) (!  (=> (or ($generated@@29 ($generated@@17 $generated@@31)) (and (< 0 $generated@@26) (<= ($generated@@17 0) $generated@@31))) (and (=> (< ($generated@@17 0) ($generated@@17 $generated@@31)) ($generated@@29 ($generated@@17 (- $generated@@31 1)))) (= ($generated@@27 ($generated@@28 $generated@@30) ($generated@@17 $generated@@31)) (ite (<= ($generated@@17 $generated@@31) ($generated@@17 0)) true ($generated@@27 ($generated@@28 $generated@@30) ($generated@@17 (- $generated@@31 1)))))))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@28 $generated@@30) ($generated@@17 $generated@@31)))
))))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@32 ($generated@@23 $generated@@37 $generated@@34) $generated@@35 $generated@@36) ($generated@@33 $generated@@37 $generated@@34 $generated@@35 $generated@@36))
 :pattern ( ($generated@@32 ($generated@@23 $generated@@37 $generated@@34) $generated@@35 $generated@@36))
)))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@38 T@U) ($generated@@39 Int) ) (!  (=> (or ($generated@@29 $generated@@39) (and (< 0 $generated@@26) (<= ($generated@@17 0) $generated@@39))) (and (=> (< ($generated@@17 0) $generated@@39) ($generated@@29 (- $generated@@39 1))) (= ($generated@@27 ($generated@@28 $generated@@38) $generated@@39) (ite (<= $generated@@39 ($generated@@17 0)) true ($generated@@27 $generated@@38 (- $generated@@39 1))))))
 :pattern ( ($generated@@27 ($generated@@28 $generated@@38) $generated@@39))
))))
(assert (forall (($generated@@40 T@U) ($generated@@41 Int) ) (! (= ($generated@@27 ($generated@@28 $generated@@40) $generated@@41) ($generated@@27 $generated@@40 $generated@@41))
 :pattern ( ($generated@@27 ($generated@@28 $generated@@40) $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@42 ($generated@@23 $generated@@46 $generated@@44) $generated@@45) ($generated@@43 $generated@@46 $generated@@44 $generated@@45))
 :pattern ( ($generated@@42 ($generated@@23 $generated@@46 $generated@@44) $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated $generated@@47) (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (!  (=> ($generated@@42 $generated@@49 $generated@@47) ($generated@@32 $generated@@49 $generated@@47 $generated@@48))
 :pattern ( ($generated@@32 $generated@@49 $generated@@47 $generated@@48))
)))
 :pattern ( ($generated $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@22 $generated@@51 ($generated@@23 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@23 $generated@@51 $generated@@50))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@52 $generated@@63 $generated@@64 $generated@@65 ($generated@@59 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@68 $generated@@69) $generated@@66)
 :weight 0
)) (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@75 $generated@@77) (= ($generated@@52 $generated@@70 $generated@@71 $generated@@72 ($generated@@59 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@77 $generated@@78) ($generated@@52 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@77 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@52 $generated@@79 $generated@@80 $generated@@81 ($generated@@59 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@52 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)))) (= ($generated@@1 $generated@@53) 3)) (= ($generated@@1 $generated@@54) 4)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@56 $generated@@88 $generated@@89 ($generated@@60 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@92) $generated@@90)
 :weight 0
))) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@56 $generated@@93 $generated@@94 ($generated@@60 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@56 $generated@@93 $generated@@94 $generated@@96 $generated@@98)))
 :weight 0
))) (= ($generated@@1 $generated@@57) 5)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (= ($generated@@1 ($generated@@58 $generated@@99 $generated@@100)) 6))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (! (= ($generated@@61 ($generated@@58 $generated@@101 $generated@@102)) $generated@@101)
 :pattern ( ($generated@@58 $generated@@101 $generated@@102))
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@62 ($generated@@58 $generated@@103 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@58 $generated@@103 $generated@@104))
))))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 Bool) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@6 ($generated@@52 $generated@@53 $generated@@54 $generated@@2 ($generated@@55 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))  (=> (and (or (not (= $generated@@109 $generated@@105)) (not true)) ($generated@@6 ($generated@@22 $generated@@2 ($generated@@56 $generated@@54 $generated@@57 ($generated@@56 $generated@@53 ($generated@@58 $generated@@54 $generated@@57) $generated@@106 $generated@@109) $generated@@107)))) $generated@@108))
 :pattern ( ($generated@@52 $generated@@53 $generated@@54 $generated@@2 ($generated@@55 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))
)))
(assert (forall (($generated@@111 Int) ) (! (= ($generated@@23 $generated@@3 ($generated@@7 ($generated@@17 $generated@@111))) ($generated@@19 $generated@@57 ($generated@@23 $generated@@3 ($generated@@7 $generated@@111))))
 :pattern ( ($generated@@23 $generated@@3 ($generated@@7 ($generated@@17 $generated@@111))))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@T) ) (! (= ($generated@@23 $generated@@113 ($generated@@19 $generated@@113 $generated@@112)) ($generated@@19 $generated@@57 ($generated@@23 $generated@@113 $generated@@112)))
 :pattern ( ($generated@@23 $generated@@113 ($generated@@19 $generated@@113 $generated@@112)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () Bool)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@124  (=> (= $generated@@114 ($generated@@55 $generated@@115 $generated@@116 $generated@@117 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@29 (ite $generated@@118 $generated@@119 $generated@@119)) (or ($generated@@27 ($generated@@28 $generated@@120) (ite $generated@@118 $generated@@119 $generated@@119)) (=> (<= (ite $generated@@118 $generated@@119 $generated@@119) ($generated@@17 0)) ($generated@@6 ($generated@@19 $generated@@2 ($generated@@5 true))))))) (=> (=> ($generated@@29 (ite $generated@@118 $generated@@119 $generated@@119)) (or ($generated@@27 ($generated@@28 $generated@@120) (ite $generated@@118 $generated@@119 $generated@@119)) (=> (<= (ite $generated@@118 $generated@@119 $generated@@119) ($generated@@17 0)) ($generated@@6 ($generated@@19 $generated@@2 ($generated@@5 true)))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@29 (ite $generated@@118 $generated@@119 $generated@@119)) (or ($generated@@27 ($generated@@28 $generated@@120) (ite $generated@@118 $generated@@119 $generated@@119)) (=> (< ($generated@@17 0) (ite $generated@@118 $generated@@119 $generated@@119)) ($generated@@27 ($generated@@28 ($generated@@28 $generated@@120)) (- (ite $generated@@118 $generated@@119 $generated@@119) 1)))))))))))
(let (($generated@@125  (=> (and (and (and (and ($generated@@121 $generated@@116) ($generated@@122 $generated@@116)) (<= ($generated@@17 0) $generated@@119)) (and ($generated@@42 $generated@@123 $generated@@0) ($generated@@32 $generated@@123 $generated@@0 $generated@@116))) (and (and (= 1 $generated@@26) (<= ($generated@@17 0) $generated@@119)) (and (< $generated@@119 100) (= (ControlFlow 0 4) 2)))) $generated@@124)))
$generated@@125)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
