(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (Int) Int)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@17 (T@T T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U Int) Bool)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (Int) Bool)
(declare-fun $generated@@36 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@40 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@T T@T) T@T)
(declare-fun $generated@@43 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@46 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 Int) ) (! (= ($generated $generated@@16) $generated@@16)
 :pattern ( ($generated $generated@@16))
)))
(assert (forall (($generated@@18 T@U) ($generated@@19 T@T) ) (! (= ($generated@@17 $generated@@19 $generated@@18) $generated@@18)
 :pattern ( ($generated@@17 $generated@@19 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 ($generated@@20 $generated@@23 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@23 $generated@@22))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@28 T@U) ($generated@@29 Int) ) (!  (=> (or ($generated@@27 $generated@@29) (and (< 0 $generated@@24) (<= ($generated 0) $generated@@29))) (and (=> (or (not (= $generated@@29 ($generated 0))) (not true)) ($generated@@27 (- $generated@@29 1))) (= ($generated@@25 ($generated@@26 $generated@@28) $generated@@29) (ite (= $generated@@29 ($generated 0)) true ($generated@@25 $generated@@28 (- $generated@@29 1))))))
 :pattern ( ($generated@@25 ($generated@@26 $generated@@28) $generated@@29))
))))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@30 T@U) ($generated@@31 Int) ) (!  (=> (or ($generated@@27 ($generated $generated@@31)) (and (< 0 $generated@@24) (<= ($generated 0) $generated@@31))) (and (=> (or (not (= ($generated $generated@@31) ($generated 0))) (not true)) ($generated@@27 ($generated (- $generated@@31 1)))) (= ($generated@@25 ($generated@@26 $generated@@30) ($generated $generated@@31)) (ite (= ($generated $generated@@31) ($generated 0)) true ($generated@@25 ($generated@@26 $generated@@30) ($generated (- $generated@@31 1)))))))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@26 $generated@@30) ($generated $generated@@31)))
))))
(assert (forall (($generated@@32 T@U) ($generated@@33 Int) ) (! (= ($generated@@25 ($generated@@26 $generated@@32) $generated@@33) ($generated@@25 $generated@@32 $generated@@33))
 :pattern ( ($generated@@25 ($generated@@26 $generated@@32) $generated@@33))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@20 $generated@@35 ($generated@@21 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@21 $generated@@35 $generated@@34))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@36 $generated@@47 $generated@@48 $generated@@49 ($generated@@43 $generated@@47 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@53 $generated@@50) $generated@@52 $generated@@53) $generated@@50)
 :weight 0
)) (and (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (or (= $generated@@59 $generated@@61) (= ($generated@@36 $generated@@54 $generated@@55 $generated@@56 ($generated@@43 $generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@60 $generated@@57) $generated@@61 $generated@@62) ($generated@@36 $generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@61 $generated@@62)))
 :weight 0
)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (or (= $generated@@69 $generated@@71) (= ($generated@@36 $generated@@63 $generated@@64 $generated@@65 ($generated@@43 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@70 $generated@@71) ($generated@@36 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@70 $generated@@71)))
 :weight 0
)))) (= ($generated@@0 $generated@@37) 3)) (= ($generated@@0 $generated@@38) 4)) (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@40 $generated@@72 $generated@@73 ($generated@@44 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@74) $generated@@76) $generated@@74)
 :weight 0
))) (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@81 $generated@@82) (= ($generated@@40 $generated@@77 $generated@@78 ($generated@@44 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@79) $generated@@82) ($generated@@40 $generated@@77 $generated@@78 $generated@@80 $generated@@82)))
 :weight 0
))) (= ($generated@@0 $generated@@41) 5)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ) (= ($generated@@0 ($generated@@42 $generated@@83 $generated@@84)) 6))) (forall (($generated@@85 T@T) ($generated@@86 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@85 $generated@@86)) $generated@@85)
 :pattern ( ($generated@@42 $generated@@85 $generated@@86))
))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (! (= ($generated@@46 ($generated@@42 $generated@@87 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@42 $generated@@87 $generated@@88))
))))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 Bool) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@5 ($generated@@36 $generated@@37 $generated@@38 $generated@@1 ($generated@@39 $generated@@89 $generated@@90 $generated@@91 $generated@@92) $generated@@93 $generated@@94))  (=> (and (or (not (= $generated@@93 $generated@@89)) (not true)) ($generated@@5 ($generated@@20 $generated@@1 ($generated@@40 $generated@@38 $generated@@41 ($generated@@40 $generated@@37 ($generated@@42 $generated@@38 $generated@@41) $generated@@90 $generated@@93) $generated@@91)))) $generated@@92))
 :pattern ( ($generated@@36 $generated@@37 $generated@@38 $generated@@1 ($generated@@39 $generated@@89 $generated@@90 $generated@@91 $generated@@92) $generated@@93 $generated@@94))
)))
(assert (forall (($generated@@95 Int) ) (! (= ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@95))) ($generated@@17 $generated@@41 ($generated@@21 $generated@@2 ($generated@@6 $generated@@95))))
 :pattern ( ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@95))))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@21 $generated@@97 ($generated@@17 $generated@@97 $generated@@96)) ($generated@@17 $generated@@41 ($generated@@21 $generated@@97 $generated@@96)))
 :pattern ( ($generated@@21 $generated@@97 ($generated@@17 $generated@@97 $generated@@96)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@98 () T@U)
(declare-fun $generated@@99 () T@U)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 () T@U)
(declare-fun $generated@@102 (T@U) Bool)
(declare-fun $generated@@103 () T@U)
(declare-fun $generated@@104 (T@U) Bool)
(declare-fun $generated@@105 () Int)
(declare-fun $generated@@106 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@107  (=> (= $generated@@98 ($generated@@39 $generated@@99 $generated@@100 $generated@@101 false)) (=> (and (and ($generated@@102 $generated@@103) ($generated@@104 $generated@@103)) (and (= $generated@@100 $generated@@103) (forall (($generated@@108 Int) )  (=> (and (and (<= ($generated 0) $generated@@108) ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4 true)))) (and (<= 0 $generated@@108) (< $generated@@108 $generated@@105))) ($generated@@25 ($generated@@26 $generated@@106) (+ $generated@@108 0)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@27 (+ $generated@@105 0)) (or ($generated@@25 ($generated@@26 $generated@@106) (+ $generated@@105 0)) (=> (= (+ $generated@@105 0) ($generated 0)) ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4 true))))))) (=> (=> ($generated@@27 (+ $generated@@105 0)) (or ($generated@@25 ($generated@@26 $generated@@106) (+ $generated@@105 0)) (=> (= (+ $generated@@105 0) ($generated 0)) ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4 true)))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@27 (+ $generated@@105 0)) (or ($generated@@25 ($generated@@26 $generated@@106) (+ $generated@@105 0)) (=> (or (not (= (+ $generated@@105 0) ($generated 0))) (not true)) ($generated@@25 ($generated@@26 ($generated@@26 $generated@@106)) (- (+ $generated@@105 0) 1))))))))))))
(let (($generated@@109  (=> (and (and (and ($generated@@102 $generated@@100) ($generated@@104 $generated@@100)) (<= ($generated 0) $generated@@105)) (and (= 1 $generated@@24) (= (ControlFlow 0 4) 2))) $generated@@107)))
$generated@@109)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
