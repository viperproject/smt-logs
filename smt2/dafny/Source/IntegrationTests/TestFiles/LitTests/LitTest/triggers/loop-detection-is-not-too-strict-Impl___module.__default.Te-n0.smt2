(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@34 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T) T@T)
(declare-fun $generated@@37 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@89 (Int Int) Int)
(declare-fun $generated@@95 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@98 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@24 $generated@@29 ($generated@@25 $generated@@29 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@25 $generated@@29 $generated@@28))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@30 $generated@@41 $generated@@42 $generated@@43 ($generated@@37 $generated@@41 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@47 $generated@@44) $generated@@46 $generated@@47) $generated@@44)
 :weight 0
)) (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (or (= $generated@@53 $generated@@55) (= ($generated@@30 $generated@@48 $generated@@49 $generated@@50 ($generated@@37 $generated@@48 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@54 $generated@@51) $generated@@55 $generated@@56) ($generated@@30 $generated@@48 $generated@@49 $generated@@50 $generated@@52 $generated@@55 $generated@@56)))
 :weight 0
)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (!  (or (= $generated@@63 $generated@@65) (= ($generated@@30 $generated@@57 $generated@@58 $generated@@59 ($generated@@37 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@64 $generated@@65) ($generated@@30 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@64 $generated@@65)))
 :weight 0
)))) (= ($generated@@2 $generated@@31) 3)) (= ($generated@@2 $generated@@32) 4)) (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@34 $generated@@66 $generated@@67 ($generated@@38 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@68) $generated@@70) $generated@@68)
 :weight 0
))) (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (or (= $generated@@75 $generated@@76) (= ($generated@@34 $generated@@71 $generated@@72 ($generated@@38 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@73) $generated@@76) ($generated@@34 $generated@@71 $generated@@72 $generated@@74 $generated@@76)))
 :weight 0
))) (= ($generated@@2 $generated@@35) 5)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (= ($generated@@2 ($generated@@36 $generated@@77 $generated@@78)) 6))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@79 $generated@@80)) $generated@@79)
 :pattern ( ($generated@@36 $generated@@79 $generated@@80))
))) (forall (($generated@@81 T@T) ($generated@@82 T@T) ) (! (= ($generated@@40 ($generated@@36 $generated@@81 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@36 $generated@@81 $generated@@82))
))))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 Bool) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@7 ($generated@@30 $generated@@31 $generated@@32 $generated@@3 ($generated@@33 $generated@@83 $generated@@84 $generated@@85 $generated@@86) $generated@@87 $generated@@88))  (=> (and (or (not (= $generated@@87 $generated@@83)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@34 $generated@@32 $generated@@35 ($generated@@34 $generated@@31 ($generated@@36 $generated@@32 $generated@@35) $generated@@84 $generated@@87) $generated@@85)))) $generated@@86))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 $generated@@3 ($generated@@33 $generated@@83 $generated@@84 $generated@@85 $generated@@86) $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@90 Int) ($generated@@91 Int) ) (! (= ($generated@@89 $generated@@90 $generated@@91) (* $generated@@90 $generated@@91))
 :pattern ( ($generated@@89 $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@92))) ($generated@@21 $generated@@35 ($generated@@25 $generated@@4 ($generated@@8 $generated@@92))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@92))))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@T) ) (! (= ($generated@@25 $generated@@94 ($generated@@21 $generated@@94 $generated@@93)) ($generated@@21 $generated@@35 ($generated@@25 $generated@@94 $generated@@93)))
 :pattern ( ($generated@@25 $generated@@94 ($generated@@21 $generated@@94 $generated@@93)))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (! ($generated@@95 $generated@@4 $generated@@97 $generated $generated@@96)
 :pattern ( ($generated@@95 $generated@@4 $generated@@97 $generated $generated@@96))
)))
(assert (forall (($generated@@99 T@U) ) (! ($generated@@98 $generated@@4 $generated@@99 $generated)
 :pattern ( ($generated@@98 $generated@@4 $generated@@99 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@100 (Int) Bool)
(declare-fun $generated@@101 (Int) Bool)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 () Int)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 () Int)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 (Int Int) Bool)
(declare-fun $generated@@114 (Int Int) Bool)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 70) (let (($generated@@132  (=> (and (forall (($generated@@133 Int) ($generated@@134 Int) ) (!  (=> (= $generated@@134 (+ $generated@@133 1)) (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (and ($generated@@101 $generated@@133) (=> (not ($generated@@100 $generated@@133)) (let (($generated@@135 $generated@@134))
($generated@@101 $generated@@135))))))
 :pattern ( ($generated@@100 $generated@@134) ($generated@@100 $generated@@133))
)) (= (ControlFlow 0 12) (- 0 11))) (forall (($generated@@136 Int) ($generated@@137 Int) ) (!  (=> (= $generated@@137 (+ $generated@@136 1)) (or (or true ($generated@@100 $generated@@136)) (let (($generated@@138 $generated@@137))
($generated@@100 $generated@@138))))
 :pattern ( ($generated@@100 $generated@@137) ($generated@@100 $generated@@136))
)))))
(let (($generated@@139  (=> (and (or true ($generated@@100 $generated@@102)) (= (ControlFlow 0 14) 12)) $generated@@132)))
(let (($generated@@140  (=> (not (or true ($generated@@100 $generated@@102))) (=> (and (= $generated@@103 (+ $generated@@102 1)) ($generated@@98 $generated@@4 ($generated@@8 $generated@@103) $generated)) (=> (and (and (= $generated@@104 $generated@@103) ($generated@@95 $generated@@4 ($generated@@8 $generated@@104) $generated $generated@@105)) (and ($generated@@101 $generated@@104) (= (ControlFlow 0 13) 12))) $generated@@132)))))
(let (($generated@@141  (=> ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 16) 13) $generated@@140) (=> (= (ControlFlow 0 16) 14) $generated@@139)))))
(let (($generated@@142  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@102) $generated $generated@@105) ($generated@@101 $generated@@102)) (and (=> (= (ControlFlow 0 15) 13) $generated@@140) (=> (= (ControlFlow 0 15) 14) $generated@@139))))))
(let (($generated@@143  (and (=> (= (ControlFlow 0 17) 15) $generated@@142) (=> (= (ControlFlow 0 17) 16) $generated@@141))))
(let (($generated@@144 true))
(let (($generated@@145  (=> (forall (($generated@@146 Int) ($generated@@147 Int) ) (!  (=> (= $generated@@147 (ite (> $generated@@106 1) $generated@@146 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))) (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (and ($generated@@101 $generated@@146) (=> (not ($generated@@100 $generated@@146)) ($generated@@101 $generated@@147)))))
 :pattern ( ($generated@@100 $generated@@147) ($generated@@100 $generated@@146))
)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (forall (($generated@@148 Int) ($generated@@149 Int) ) (!  (=> (= $generated@@149 (ite (> $generated@@106 1) $generated@@148 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))) (or (or true ($generated@@100 $generated@@148)) ($generated@@100 $generated@@149)))
 :pattern ( ($generated@@100 $generated@@149) ($generated@@100 $generated@@148))
))) (=> (forall (($generated@@150 Int) ($generated@@151 Int) ) (!  (=> (= $generated@@151 (ite (> $generated@@106 1) $generated@@150 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))) (or (or true ($generated@@100 $generated@@150)) ($generated@@100 $generated@@151)))
 :pattern ( ($generated@@100 $generated@@151) ($generated@@100 $generated@@150))
)) (and (=> (= (ControlFlow 0 18) 17) $generated@@143) (=> (= (ControlFlow 0 18) 10) $generated@@144)))))))
(let (($generated@@152  (=> (and (and (= $generated@@107 (ite (> $generated@@106 1) $generated@@108 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))) ($generated@@95 $generated@@4 ($generated@@8 $generated@@107) $generated $generated@@105)) (and ($generated@@101 (ite (> $generated@@106 1) $generated@@108 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))) (= (ControlFlow 0 21) 18))) $generated@@145)))
(let (($generated@@153  (=> (and (>= 1 $generated@@106) (= (ControlFlow 0 23) 21)) $generated@@152)))
(let (($generated@@154  (=> (and (> $generated@@106 1) (= (ControlFlow 0 22) 21)) $generated@@152)))
(let (($generated@@155  (=> (not (or true ($generated@@100 $generated@@108))) (and (=> (= (ControlFlow 0 24) 22) $generated@@154) (=> (= (ControlFlow 0 24) 23) $generated@@153)))))
(let (($generated@@156  (=> (and (or true ($generated@@100 $generated@@108)) (= (ControlFlow 0 20) 18)) $generated@@145)))
(let (($generated@@157  (=> ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 26) 24) $generated@@155) (=> (= (ControlFlow 0 26) 20) $generated@@156)))))
(let (($generated@@158  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@108) $generated $generated@@105) ($generated@@101 $generated@@108)) (and (=> (= (ControlFlow 0 25) 24) $generated@@155) (=> (= (ControlFlow 0 25) 20) $generated@@156))))))
(let (($generated@@159  (and (=> (= (ControlFlow 0 27) 25) $generated@@158) (=> (= (ControlFlow 0 27) 26) $generated@@157))))
(let (($generated@@160 true))
(let (($generated@@161  (=> (forall (($generated@@162 Int) ) (!  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (and ($generated@@101 $generated@@162) (=> (not ($generated@@100 $generated@@162)) ($generated@@101 (ite (> $generated@@106 1) $generated@@106 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))))))
 :pattern ( ($generated@@100 $generated@@162))
)) (and (=> (= (ControlFlow 0 28) (- 0 29)) (forall (($generated@@163 Int) ) (!  (or (or true ($generated@@100 $generated@@163)) ($generated@@100 (ite (> $generated@@106 1) $generated@@106 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))))
 :pattern ( ($generated@@100 $generated@@163))
))) (=> (forall (($generated@@164 Int) ) (!  (or (or true ($generated@@100 $generated@@164)) ($generated@@100 (ite (> $generated@@106 1) $generated@@106 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))))
 :pattern ( ($generated@@100 $generated@@164))
)) (and (=> (= (ControlFlow 0 28) 27) $generated@@159) (=> (= (ControlFlow 0 28) 9) $generated@@160)))))))
(let (($generated@@165  (=> (and (and (= $generated@@109 (ite (> $generated@@106 1) $generated@@106 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))) ($generated@@95 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@105)) (and ($generated@@101 (ite (> $generated@@106 1) $generated@@106 (+ ($generated@@89 ($generated@@19 3) $generated@@106) 1))) (= (ControlFlow 0 31) 28))) $generated@@161)))
(let (($generated@@166  (=> (and (>= 1 $generated@@106) (= (ControlFlow 0 33) 31)) $generated@@165)))
(let (($generated@@167  (=> (and (> $generated@@106 1) (= (ControlFlow 0 32) 31)) $generated@@165)))
(let (($generated@@168  (=> (not (or true ($generated@@100 $generated@@110))) (and (=> (= (ControlFlow 0 34) 32) $generated@@167) (=> (= (ControlFlow 0 34) 33) $generated@@166)))))
(let (($generated@@169  (=> (and (or true ($generated@@100 $generated@@110)) (= (ControlFlow 0 30) 28)) $generated@@161)))
(let (($generated@@170  (=> ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 36) 34) $generated@@168) (=> (= (ControlFlow 0 36) 30) $generated@@169)))))
(let (($generated@@171  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@110) $generated $generated@@105) ($generated@@101 $generated@@110)) (and (=> (= (ControlFlow 0 35) 34) $generated@@168) (=> (= (ControlFlow 0 35) 30) $generated@@169))))))
(let (($generated@@172  (and (=> (= (ControlFlow 0 37) 35) $generated@@171) (=> (= (ControlFlow 0 37) 36) $generated@@170))))
(let (($generated@@173 true))
(let (($generated@@174  (=> (forall (($generated@@175 Int) ) (!  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (and ($generated@@101 $generated@@175) (=> (not ($generated@@100 $generated@@175)) ($generated@@101 ($generated@@19 (+ 0 1))))))
 :pattern ( ($generated@@100 $generated@@175))
)) (and (=> (= (ControlFlow 0 38) (- 0 39)) (forall (($generated@@176 Int) ) (!  (or (or true ($generated@@100 $generated@@176)) ($generated@@100 ($generated@@19 (+ 0 1))))
 :pattern ( ($generated@@100 $generated@@176))
))) (=> (forall (($generated@@177 Int) ) (!  (or (or true ($generated@@100 $generated@@177)) ($generated@@100 ($generated@@19 (+ 0 1))))
 :pattern ( ($generated@@100 $generated@@177))
)) (and (=> (= (ControlFlow 0 38) 37) $generated@@172) (=> (= (ControlFlow 0 38) 8) $generated@@173)))))))
(let (($generated@@178  (=> (and (or true ($generated@@100 $generated@@111)) (= (ControlFlow 0 41) 38)) $generated@@174)))
(let (($generated@@179  (=> (not (or true ($generated@@100 $generated@@111))) (=> (and (and (= $generated@@112 ($generated@@19 (+ 0 1))) ($generated@@95 $generated@@4 ($generated@@8 $generated@@112) $generated $generated@@105)) (and ($generated@@101 ($generated@@19 (+ 0 1))) (= (ControlFlow 0 40) 38))) $generated@@174))))
(let (($generated@@180  (=> ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 43) 40) $generated@@179) (=> (= (ControlFlow 0 43) 41) $generated@@178)))))
(let (($generated@@181  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@111) $generated $generated@@105) ($generated@@101 $generated@@111)) (and (=> (= (ControlFlow 0 42) 40) $generated@@179) (=> (= (ControlFlow 0 42) 41) $generated@@178))))))
(let (($generated@@182  (and (=> (= (ControlFlow 0 44) 42) $generated@@181) (=> (= (ControlFlow 0 44) 43) $generated@@180))))
(let (($generated@@183 true))
(let (($generated@@184  (=> (forall (($generated@@185 Int) ) (!  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (and ($generated@@114 $generated@@185 ($generated@@19 1)) (=> (not ($generated@@113 $generated@@185 ($generated@@19 1))) ($generated@@114 $generated@@185 $generated@@106))))
 :pattern ( ($generated@@113 $generated@@185 $generated@@106))
 :pattern ( ($generated@@113 $generated@@185 1))
)) (and (=> (= (ControlFlow 0 45) (- 0 46)) (forall (($generated@@186 Int) ) (!  (or (or true ($generated@@113 $generated@@186 ($generated@@19 1))) ($generated@@113 $generated@@186 $generated@@106))
 :pattern ( ($generated@@113 $generated@@186 $generated@@106))
 :pattern ( ($generated@@113 $generated@@186 1))
))) (=> (forall (($generated@@187 Int) ) (!  (or (or true ($generated@@113 $generated@@187 ($generated@@19 1))) ($generated@@113 $generated@@187 $generated@@106))
 :pattern ( ($generated@@113 $generated@@187 $generated@@106))
 :pattern ( ($generated@@113 $generated@@187 1))
)) (and (=> (= (ControlFlow 0 45) 44) $generated@@182) (=> (= (ControlFlow 0 45) 7) $generated@@183)))))))
(let (($generated@@188  (=> (and (or true ($generated@@113 $generated@@115 ($generated@@19 1))) (= (ControlFlow 0 48) 45)) $generated@@184)))
(let (($generated@@189  (=> (not (or true ($generated@@113 $generated@@115 ($generated@@19 1)))) (=> (and (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@115) $generated $generated@@105) ($generated@@95 $generated@@4 ($generated@@8 $generated@@106) $generated $generated@@105)) (and ($generated@@114 $generated@@115 $generated@@106) (= (ControlFlow 0 47) 45))) $generated@@184))))
(let (($generated@@190  (=> ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 50) 47) $generated@@189) (=> (= (ControlFlow 0 50) 48) $generated@@188)))))
(let (($generated@@191  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (=> (and (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@115) $generated $generated@@105) (= $generated@@116 ($generated@@19 1))) (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@116) $generated $generated@@105) ($generated@@114 $generated@@115 ($generated@@19 1)))) (and (=> (= (ControlFlow 0 49) 47) $generated@@189) (=> (= (ControlFlow 0 49) 48) $generated@@188))))))
(let (($generated@@192  (and (=> (= (ControlFlow 0 51) 49) $generated@@191) (=> (= (ControlFlow 0 51) 50) $generated@@190))))
(let (($generated@@193 true))
(let (($generated@@194  (=> (forall (($generated@@195 Int) ) (!  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (and ($generated@@101 $generated@@195) (=> (not ($generated@@100 $generated@@195)) ($generated@@101 $generated@@106))))
 :pattern ( ($generated@@100 $generated@@195))
)) (and (=> (= (ControlFlow 0 52) (- 0 53)) (forall (($generated@@196 Int) ) (!  (or (or true ($generated@@100 $generated@@196)) ($generated@@100 $generated@@106))
 :pattern ( ($generated@@100 $generated@@196))
))) (=> (forall (($generated@@197 Int) ) (!  (or (or true ($generated@@100 $generated@@197)) ($generated@@100 $generated@@106))
 :pattern ( ($generated@@100 $generated@@197))
)) (and (=> (= (ControlFlow 0 52) 51) $generated@@192) (=> (= (ControlFlow 0 52) 6) $generated@@193)))))))
(let (($generated@@198  (=> (and (or true ($generated@@100 $generated@@117)) (= (ControlFlow 0 55) 52)) $generated@@194)))
(let (($generated@@199  (=> (and (and (not (or true ($generated@@100 $generated@@117))) ($generated@@95 $generated@@4 ($generated@@8 $generated@@106) $generated $generated@@105)) (and ($generated@@101 $generated@@106) (= (ControlFlow 0 54) 52))) $generated@@194)))
(let (($generated@@200  (=> ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 57) 54) $generated@@199) (=> (= (ControlFlow 0 57) 55) $generated@@198)))))
(let (($generated@@201  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@117) $generated $generated@@105) ($generated@@101 $generated@@117)) (and (=> (= (ControlFlow 0 56) 54) $generated@@199) (=> (= (ControlFlow 0 56) 55) $generated@@198))))))
(let (($generated@@202  (and (=> (= (ControlFlow 0 58) 56) $generated@@201) (=> (= (ControlFlow 0 58) 57) $generated@@200))))
(let (($generated@@203 true))
(let (($generated@@204  (=> (forall (($generated@@205 Int) ) (!  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (and ($generated@@101 $generated@@205) (=> (not ($generated@@100 $generated@@205)) ($generated@@101 ($generated@@19 0)))))
 :pattern ( ($generated@@100 $generated@@205))
)) (and (=> (= (ControlFlow 0 59) (- 0 60)) (forall (($generated@@206 Int) ) (!  (or (or true ($generated@@100 $generated@@206)) ($generated@@100 ($generated@@19 0)))
 :pattern ( ($generated@@100 $generated@@206))
))) (=> (forall (($generated@@207 Int) ) (!  (or (or true ($generated@@100 $generated@@207)) ($generated@@100 ($generated@@19 0)))
 :pattern ( ($generated@@100 $generated@@207))
)) (and (=> (= (ControlFlow 0 59) 58) $generated@@202) (=> (= (ControlFlow 0 59) 5) $generated@@203)))))))
(let (($generated@@208  (=> (and (or true ($generated@@100 $generated@@118)) (= (ControlFlow 0 62) 59)) $generated@@204)))
(let (($generated@@209  (=> (not (or true ($generated@@100 $generated@@118))) (=> (and (and (= $generated@@119 ($generated@@19 0)) ($generated@@95 $generated@@4 ($generated@@8 $generated@@119) $generated $generated@@105)) (and ($generated@@101 ($generated@@19 0)) (= (ControlFlow 0 61) 59))) $generated@@204))))
(let (($generated@@210  (=> ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))) (and (=> (= (ControlFlow 0 64) 61) $generated@@209) (=> (= (ControlFlow 0 64) 62) $generated@@208)))))
(let (($generated@@211  (=> (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (=> (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@118) $generated $generated@@105) ($generated@@101 $generated@@118)) (and (=> (= (ControlFlow 0 63) 61) $generated@@209) (=> (= (ControlFlow 0 63) 62) $generated@@208))))))
(let (($generated@@212  (and (=> (= (ControlFlow 0 65) 63) $generated@@211) (=> (= (ControlFlow 0 65) 64) $generated@@210))))
(let (($generated@@213 true))
(let (($generated@@214  (=> ($generated@@95 $generated@@4 ($generated@@8 $generated@@120) $generated $generated@@105) (=> (and (and (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@121) $generated $generated@@105) ($generated@@114 $generated@@120 $generated@@121)) (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@120) $generated $generated@@105) (= $generated@@122 (+ $generated@@121 1)))) (and (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@122) $generated $generated@@105) ($generated@@114 $generated@@120 (+ $generated@@121 1))) (and (forall (($generated@@215 Int) ($generated@@216 Int) ($generated@@217 Int) ) (!  (=> (= $generated@@217 (+ $generated@@216 1)) (and ($generated@@114 $generated@@215 $generated@@216) ($generated@@114 $generated@@215 $generated@@217)))
 :pattern ( ($generated@@113 $generated@@215 $generated@@217) ($generated@@113 $generated@@215 $generated@@216))
)) (forall (($generated@@218 Int) ($generated@@219 Int) ($generated@@220 Int) ) (!  (=> (= $generated@@220 (+ $generated@@219 1)) (= ($generated@@113 $generated@@218 $generated@@219) ($generated@@113 $generated@@218 $generated@@220)))
 :pattern ( ($generated@@113 $generated@@218 $generated@@220) ($generated@@113 $generated@@218 $generated@@219))
))))) (and (=> (= (ControlFlow 0 66) 65) $generated@@212) (=> (= (ControlFlow 0 66) 4) $generated@@213))))))
(let (($generated@@221 true))
(let (($generated@@222  (=> (and (and (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@123) $generated $generated@@105) ($generated@@95 $generated@@4 ($generated@@8 $generated@@124) $generated $generated@@105)) (and ($generated@@114 $generated@@123 $generated@@124) ($generated@@95 $generated@@4 ($generated@@8 $generated@@124) $generated $generated@@105))) (and (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@123) $generated $generated@@105) ($generated@@114 $generated@@124 $generated@@123)) (and (forall (($generated@@223 Int) ($generated@@224 Int) ) (!  (and ($generated@@114 $generated@@223 $generated@@224) ($generated@@114 $generated@@224 $generated@@223))
 :pattern ( ($generated@@113 $generated@@224 $generated@@223))
 :pattern ( ($generated@@113 $generated@@223 $generated@@224))
)) (forall (($generated@@225 Int) ($generated@@226 Int) ) (! (= ($generated@@113 $generated@@225 $generated@@226) ($generated@@113 $generated@@226 $generated@@225))
 :pattern ( ($generated@@113 $generated@@226 $generated@@225))
 :pattern ( ($generated@@113 $generated@@225 $generated@@226))
))))) (and (=> (= (ControlFlow 0 67) 66) $generated@@214) (=> (= (ControlFlow 0 67) 3) $generated@@221)))))
(let (($generated@@227 true))
(let (($generated@@228  (=> (and (and (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@125) $generated $generated@@105) ($generated@@95 $generated@@4 ($generated@@8 $generated@@126) $generated $generated@@105)) (and ($generated@@114 $generated@@125 $generated@@126) ($generated@@95 $generated@@4 ($generated@@8 $generated@@126) $generated $generated@@105))) (and (and ($generated@@95 $generated@@4 ($generated@@8 $generated@@125) $generated $generated@@105) ($generated@@114 $generated@@126 $generated@@125)) (and (forall (($generated@@229 Int) ($generated@@230 Int) ) (!  (and ($generated@@114 $generated@@229 $generated@@230) ($generated@@114 $generated@@230 $generated@@229))
 :pattern ( ($generated@@113 $generated@@230 $generated@@229))
 :pattern ( ($generated@@113 $generated@@229 $generated@@230))
)) (forall (($generated@@231 Int) ($generated@@232 Int) ) (! (= ($generated@@113 $generated@@231 $generated@@232) ($generated@@113 $generated@@232 $generated@@231))
 :pattern ( ($generated@@113 $generated@@232 $generated@@231))
 :pattern ( ($generated@@113 $generated@@231 $generated@@232))
))))) (and (=> (= (ControlFlow 0 68) 67) $generated@@222) (=> (= (ControlFlow 0 68) 2) $generated@@227)))))
(let (($generated@@233 true))
(let (($generated@@234  (=> (= $generated@@127 ($generated@@33 $generated@@128 $generated@@105 $generated@@1 false)) (and (=> (= (ControlFlow 0 69) 68) $generated@@228) (=> (= (ControlFlow 0 69) 1) $generated@@233)))))
(let (($generated@@235  (=> (and (and ($generated@@129 $generated@@105) ($generated@@130 $generated@@105)) (and (= 1 $generated@@131) (= (ControlFlow 0 70) 69))) $generated@@234)))
$generated@@235))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
