(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@U Int) T@U)
(declare-fun $generated@@30 (T@U Int) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@U T@U T@U) Bool)
(declare-fun $generated@@39 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@53 (T@U T@U) Bool)
(declare-fun $generated@@54 (T@T T@U T@U) Bool)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 (T@T T@T) T@T)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@81 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ) (!  (not ($generated@@20 $generated@@21 $generated@@22))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22))
)))
(assert (= ($generated@@23 $generated@@21) 0))
(assert (forall (($generated@@25 Int) ) (! (= ($generated@@24 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@25))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 Int) ($generated@@33 Int) ) (!  (=> (and (and (<= 0 $generated@@33) (< $generated@@33 $generated@@32)) (< $generated@@33 ($generated@@23 $generated@@31))) (= ($generated@@29 ($generated@@30 $generated@@31 $generated@@32) $generated@@33) ($generated@@29 $generated@@31 $generated@@33)))
 :weight 25
 :pattern ( ($generated@@29 ($generated@@30 $generated@@31 $generated@@32) $generated@@33))
 :pattern ( ($generated@@29 $generated@@31 $generated@@33) ($generated@@30 $generated@@31 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 ($generated@@34 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@34 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@38 ($generated@@35 $generated@@43 $generated@@40) $generated@@41 $generated@@42) ($generated@@39 $generated@@43 $generated@@40 $generated@@41 $generated@@42))
 :pattern ( ($generated@@38 ($generated@@35 $generated@@43 $generated@@40) $generated@@41 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 Int) ($generated@@46 T@U) ) (! (= ($generated@@20 ($generated@@30 $generated@@44 $generated@@45) $generated@@46) (exists (($generated@@47 Int) ) (!  (and (and (and (<= 0 $generated@@47) (< $generated@@47 $generated@@45)) (< $generated@@47 ($generated@@23 $generated@@44))) (= ($generated@@29 $generated@@44 $generated@@47) $generated@@46))
 :pattern ( ($generated@@29 $generated@@44 $generated@@47))
)))
 :pattern ( ($generated@@20 ($generated@@30 $generated@@44 $generated@@45) $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@20 $generated@@48 $generated@@49) (exists (($generated@@50 Int) ) (!  (and (and (<= 0 $generated@@50) (< $generated@@50 ($generated@@23 $generated@@48))) (= ($generated@@29 $generated@@48 $generated@@50) $generated@@49))
 :pattern ( ($generated@@29 $generated@@48 $generated@@50))
)))
 :pattern ( ($generated@@20 $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 Int) ) (!  (=> (and (<= 0 $generated@@52) (<= $generated@@52 ($generated@@23 $generated@@51))) (= ($generated@@23 ($generated@@30 $generated@@51 $generated@@52)) $generated@@52))
 :pattern ( ($generated@@23 ($generated@@30 $generated@@51 $generated@@52)))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@53 $generated@@55 $generated) (and (= ($generated@@35 $generated@@5 ($generated@@34 $generated@@5 $generated@@55)) $generated@@55) ($generated@@54 $generated@@5 ($generated@@34 $generated@@5 $generated@@55) $generated)))
 :pattern ( ($generated@@53 $generated@@55 $generated))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@53 ($generated@@35 $generated@@58 $generated@@56) $generated@@57) ($generated@@54 $generated@@58 $generated@@56 $generated@@57))
 :pattern ( ($generated@@53 ($generated@@35 $generated@@58 $generated@@56) $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (! (<= 0 ($generated@@23 $generated@@59))
 :pattern ( ($generated@@23 $generated@@59))
)))
(assert (= ($generated@@3 $generated@@60) 3))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@39 $generated@@60 $generated@@62 ($generated@@61 $generated@@63) $generated@@64) (forall (($generated@@65 Int) ) (!  (=> (and (<= 0 $generated@@65) (< $generated@@65 ($generated@@23 $generated@@62))) ($generated@@38 ($generated@@29 $generated@@62 $generated@@65) $generated@@63 $generated@@64))
 :pattern ( ($generated@@29 $generated@@62 $generated@@65))
)))
 :pattern ( ($generated@@39 $generated@@60 $generated@@62 ($generated@@61 $generated@@63) $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@66 ($generated@@61 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@61 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@19 ($generated@@61 $generated@@68)) $generated@@1)
 :pattern ( ($generated@@61 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@34 $generated@@70 ($generated@@35 $generated@@70 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@35 $generated@@70 $generated@@69))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@71 $generated@@82 $generated@@83 $generated@@84 ($generated@@78 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@87 $generated@@88) $generated@@85)
 :weight 0
)) (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@71 $generated@@89 $generated@@90 $generated@@91 ($generated@@78 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@71 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@71 $generated@@98 $generated@@99 $generated@@100 ($generated@@78 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)))) (= ($generated@@3 $generated@@72) 4)) (= ($generated@@3 $generated@@73) 5)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@75 $generated@@107 $generated@@108 ($generated@@79 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@111) $generated@@109)
 :weight 0
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@116 $generated@@117) (= ($generated@@75 $generated@@112 $generated@@113 ($generated@@79 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@117) ($generated@@75 $generated@@112 $generated@@113 $generated@@115 $generated@@117)))
 :weight 0
))) (= ($generated@@3 $generated@@76) 6)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (= ($generated@@3 ($generated@@77 $generated@@118 $generated@@119)) 7))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@80 ($generated@@77 $generated@@120 $generated@@121)) $generated@@120)
 :pattern ( ($generated@@77 $generated@@120 $generated@@121))
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@81 ($generated@@77 $generated@@122 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@77 $generated@@122 $generated@@123))
))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@8 ($generated@@71 $generated@@72 $generated@@73 $generated@@4 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@8 ($generated@@34 $generated@@4 ($generated@@75 $generated@@73 $generated@@76 ($generated@@75 $generated@@72 ($generated@@77 $generated@@73 $generated@@76) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@71 $generated@@72 $generated@@73 $generated@@4 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> ($generated@@53 $generated@@130 ($generated@@61 $generated@@131)) (and (= ($generated@@35 $generated@@60 ($generated@@34 $generated@@60 $generated@@130)) $generated@@130) ($generated@@54 $generated@@60 ($generated@@34 $generated@@60 $generated@@130) ($generated@@61 $generated@@131))))
 :pattern ( ($generated@@53 $generated@@130 ($generated@@61 $generated@@131)))
)))
(assert (forall (($generated@@132 Int) ) (! (= ($generated@@35 $generated@@5 ($generated@@9 ($generated@@24 $generated@@132))) ($generated@@26 $generated@@76 ($generated@@35 $generated@@5 ($generated@@9 $generated@@132))))
 :pattern ( ($generated@@35 $generated@@5 ($generated@@9 ($generated@@24 $generated@@132))))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@T) ) (! (= ($generated@@35 $generated@@134 ($generated@@26 $generated@@134 $generated@@133)) ($generated@@26 $generated@@76 ($generated@@35 $generated@@134 $generated@@133)))
 :pattern ( ($generated@@35 $generated@@134 ($generated@@26 $generated@@134 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ) (!  (=> (= ($generated@@23 $generated@@135) 0) (= $generated@@135 $generated@@21))
 :pattern ( ($generated@@23 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 Int) ) (!  (=> (= $generated@@137 0) (= ($generated@@30 $generated@@136 $generated@@137) $generated@@21))
 :pattern ( ($generated@@30 $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (! ($generated@@39 $generated@@5 $generated@@139 $generated $generated@@138)
 :pattern ( ($generated@@39 $generated@@5 $generated@@139 $generated $generated@@138))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@54 $generated@@60 $generated@@140 ($generated@@61 $generated@@141)) (forall (($generated@@142 Int) ) (!  (=> (and (<= 0 $generated@@142) (< $generated@@142 ($generated@@23 $generated@@140))) ($generated@@53 ($generated@@29 $generated@@140 $generated@@142) $generated@@141))
 :pattern ( ($generated@@29 $generated@@140 $generated@@142))
)))
 :pattern ( ($generated@@54 $generated@@60 $generated@@140 ($generated@@61 $generated@@141)))
)))
(assert (forall (($generated@@143 T@U) ) (! ($generated@@54 $generated@@5 $generated@@143 $generated)
 :pattern ( ($generated@@54 $generated@@5 $generated@@143 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@155 (T@U) Bool)
(declare-fun $generated@@156 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 44) (let (($generated@@157  (=> (= (ControlFlow 0 30) (- 0 29)) (forall (($generated@@158 Int) ) (!  (=> ($generated@@20 ($generated@@30 $generated@@144 ($generated@@24 2)) ($generated@@35 $generated@@5 ($generated@@9 $generated@@158))) (> $generated@@158 1))
 :pattern ( ($generated@@20 ($generated@@30 $generated@@144 2) ($generated@@35 $generated@@5 ($generated@@9 $generated@@158))))
)))))
(let (($generated@@159  (=> (and (not ($generated@@20 ($generated@@30 $generated@@144 ($generated@@24 2)) ($generated@@35 $generated@@5 ($generated@@9 $generated@@145)))) (= (ControlFlow 0 32) 30)) $generated@@157)))
(let (($generated@@160  (=> (and ($generated@@20 ($generated@@30 $generated@@144 ($generated@@24 2)) ($generated@@35 $generated@@5 ($generated@@9 $generated@@145))) (= (ControlFlow 0 31) 30)) $generated@@157)))
(let (($generated@@161  (and (=> (= (ControlFlow 0 33) (- 0 34)) (and (<= 0 ($generated@@24 2)) (<= ($generated@@24 2) ($generated@@23 $generated@@144)))) (and (=> (= (ControlFlow 0 33) 31) $generated@@160) (=> (= (ControlFlow 0 33) 32) $generated@@159)))))
(let (($generated@@162 true))
(let (($generated@@163  (=> (forall (($generated@@164 T@U) ) (!  (=> ($generated@@20 ($generated@@30 $generated@@144 ($generated@@24 3)) ($generated@@35 $generated@@5 $generated@@164)) (> ($generated@@10 $generated@@164) 1))
 :pattern ( ($generated@@20 ($generated@@30 $generated@@144 3) ($generated@@35 $generated@@5 $generated@@164)))
)) (and (=> (= (ControlFlow 0 35) 33) $generated@@161) (=> (= (ControlFlow 0 35) 28) $generated@@162)))))
(let (($generated@@165  (=> (and (not ($generated@@20 ($generated@@30 $generated@@144 ($generated@@24 3)) ($generated@@35 $generated@@5 ($generated@@9 $generated@@146)))) (= (ControlFlow 0 37) 35)) $generated@@163)))
(let (($generated@@166  (=> (and ($generated@@20 ($generated@@30 $generated@@144 ($generated@@24 3)) ($generated@@35 $generated@@5 ($generated@@9 $generated@@146))) (= (ControlFlow 0 36) 35)) $generated@@163)))
(let (($generated@@167  (and (=> (= (ControlFlow 0 38) (- 0 39)) (and (<= 0 ($generated@@24 3)) (<= ($generated@@24 3) ($generated@@23 $generated@@144)))) (and (=> (= (ControlFlow 0 38) 36) $generated@@166) (=> (= (ControlFlow 0 38) 37) $generated@@165)))))
(let (($generated@@168 true))
(let (($generated@@169  (=> (> ($generated@@23 $generated@@144) 3) (and (=> (= (ControlFlow 0 40) 38) $generated@@167) (=> (= (ControlFlow 0 40) 27) $generated@@168)))))
(let (($generated@@170  (=> (= (ControlFlow 0 41) 40) $generated@@169)))
(let (($generated@@171  (=> (= (ControlFlow 0 16) (- 0 15)) (forall (($generated@@172 Int) ) (!  (=> (and (<= ($generated@@24 0) $generated@@172) (< $generated@@172 ($generated@@23 $generated@@144))) (> ($generated@@10 ($generated@@34 $generated@@5 ($generated@@29 $generated@@144 $generated@@172))) 0))
 :pattern ( ($generated@@34 $generated@@5 ($generated@@29 $generated@@144 $generated@@172)))
)))))
(let (($generated@@173  (=> (and (not (and (<= ($generated@@24 0) $generated@@147) (< $generated@@147 ($generated@@23 $generated@@144)))) (= (ControlFlow 0 19) 16)) $generated@@171)))
(let (($generated@@174  (=> (and (<= ($generated@@24 0) $generated@@147) (< $generated@@147 ($generated@@23 $generated@@144))) (and (=> (= (ControlFlow 0 17) (- 0 18)) (and (<= 0 $generated@@147) (< $generated@@147 ($generated@@23 $generated@@144)))) (=> (= (ControlFlow 0 17) 16) $generated@@171)))))
(let (($generated@@175  (=> (< $generated@@147 ($generated@@24 0)) (and (=> (= (ControlFlow 0 21) 17) $generated@@174) (=> (= (ControlFlow 0 21) 19) $generated@@173)))))
(let (($generated@@176  (=> (<= ($generated@@24 0) $generated@@147) (and (=> (= (ControlFlow 0 20) 17) $generated@@174) (=> (= (ControlFlow 0 20) 19) $generated@@173)))))
(let (($generated@@177  (and (=> (= (ControlFlow 0 22) 20) $generated@@176) (=> (= (ControlFlow 0 22) 21) $generated@@175))))
(let (($generated@@178 true))
(let (($generated@@179  (=> (forall (($generated@@180 T@U) ) (!  (=> ($generated@@20 $generated@@144 ($generated@@35 $generated@@5 $generated@@180)) (> ($generated@@10 $generated@@180) 0))
 :pattern ( ($generated@@20 $generated@@144 ($generated@@35 $generated@@5 $generated@@180)))
)) (and (=> (= (ControlFlow 0 23) 22) $generated@@177) (=> (= (ControlFlow 0 23) 14) $generated@@178)))))
(let (($generated@@181  (=> (and (not ($generated@@20 $generated@@144 ($generated@@35 $generated@@5 ($generated@@9 $generated@@148)))) (= (ControlFlow 0 25) 23)) $generated@@179)))
(let (($generated@@182  (=> (and ($generated@@20 $generated@@144 ($generated@@35 $generated@@5 ($generated@@9 $generated@@148))) (= (ControlFlow 0 24) 23)) $generated@@179)))
(let (($generated@@183  (and (=> (= (ControlFlow 0 26) 24) $generated@@182) (=> (= (ControlFlow 0 26) 25) $generated@@181))))
(let (($generated@@184 true))
(let (($generated@@185  (and (and (=> (= (ControlFlow 0 42) 41) $generated@@170) (=> (= (ControlFlow 0 42) 26) $generated@@183)) (=> (= (ControlFlow 0 42) 13) $generated@@184))))
(let (($generated@@186  (=> (= (ControlFlow 0 4) (- 0 3)) (forall (($generated@@187 Int) ) (!  (=> ($generated@@20 ($generated@@30 $generated@@144 ($generated@@23 $generated@@144)) ($generated@@35 $generated@@5 ($generated@@9 $generated@@187))) (> $generated@@187 0))
 :pattern ( ($generated@@20 ($generated@@30 $generated@@144 ($generated@@23 $generated@@144)) ($generated@@35 $generated@@5 ($generated@@9 $generated@@187))))
)))))
(let (($generated@@188  (=> (and (not ($generated@@20 ($generated@@30 $generated@@144 ($generated@@23 $generated@@144)) ($generated@@35 $generated@@5 ($generated@@9 $generated@@149)))) (= (ControlFlow 0 6) 4)) $generated@@186)))
(let (($generated@@189  (=> (and ($generated@@20 ($generated@@30 $generated@@144 ($generated@@23 $generated@@144)) ($generated@@35 $generated@@5 ($generated@@9 $generated@@149))) (= (ControlFlow 0 5) 4)) $generated@@186)))
(let (($generated@@190  (and (=> (= (ControlFlow 0 7) (- 0 8)) (and (<= 0 ($generated@@23 $generated@@144)) (<= ($generated@@23 $generated@@144) ($generated@@23 $generated@@144)))) (and (=> (= (ControlFlow 0 7) 5) $generated@@189) (=> (= (ControlFlow 0 7) 6) $generated@@188)))))
(let (($generated@@191 true))
(let (($generated@@192  (=> (forall (($generated@@193 T@U) ) (!  (=> ($generated@@20 $generated@@144 ($generated@@35 $generated@@5 $generated@@193)) (> ($generated@@10 $generated@@193) 0))
 :pattern ( ($generated@@20 $generated@@144 ($generated@@35 $generated@@5 $generated@@193)))
)) (and (=> (= (ControlFlow 0 9) 7) $generated@@190) (=> (= (ControlFlow 0 9) 2) $generated@@191)))))
(let (($generated@@194  (=> (and (not ($generated@@20 $generated@@144 ($generated@@35 $generated@@5 ($generated@@9 $generated@@150)))) (= (ControlFlow 0 11) 9)) $generated@@192)))
(let (($generated@@195  (=> (and ($generated@@20 $generated@@144 ($generated@@35 $generated@@5 ($generated@@9 $generated@@150))) (= (ControlFlow 0 10) 9)) $generated@@192)))
(let (($generated@@196  (and (=> (= (ControlFlow 0 12) 10) $generated@@195) (=> (= (ControlFlow 0 12) 11) $generated@@194))))
(let (($generated@@197 true))
(let (($generated@@198  (=> (= $generated@@151 ($generated@@74 $generated@@152 $generated@@153 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 43) 42) $generated@@185) (=> (= (ControlFlow 0 43) 12) $generated@@196)) (=> (= (ControlFlow 0 43) 1) $generated@@197)))))
(let (($generated@@199  (=> (and ($generated@@154 $generated@@153) ($generated@@155 $generated@@153)) (=> (and (and ($generated@@54 $generated@@60 $generated@@144 ($generated@@61 $generated)) ($generated@@39 $generated@@60 $generated@@144 ($generated@@61 $generated) $generated@@153)) (and (= 0 $generated@@156) (= (ControlFlow 0 44) 43))) $generated@@198))))
$generated@@199))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 30) (- 29))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 16) (- 15))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
