(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (Int) Int)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@17 (T@T T@U) T@U)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (Int Int) Int)
(declare-fun $generated@@22 (Int Int) Bool)
(declare-fun $generated@@25 (Int Int) Bool)
(declare-fun $generated@@26 (Int Int) Bool)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@47 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 Int) ) (! (= ($generated $generated@@16) $generated@@16)
 :pattern ( ($generated $generated@@16))
)))
(assert (forall (($generated@@18 T@U) ($generated@@19 T@T) ) (! (= ($generated@@17 $generated@@19 $generated@@18) $generated@@18)
 :pattern ( ($generated@@17 $generated@@19 $generated@@18))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@23 Int) ($generated@@24 Int) ) (!  (=> (or ($generated@@22 ($generated $generated@@23) ($generated $generated@@24)) (< 0 $generated@@20)) (= ($generated@@21 ($generated $generated@@23) ($generated $generated@@24)) ($generated (+ $generated@@23 $generated@@24))))
 :weight 3
 :pattern ( ($generated@@21 ($generated $generated@@23) ($generated $generated@@24)))
))))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@27 Int) ($generated@@28 Int) ) (!  (=> (or ($generated@@26 ($generated $generated@@27) ($generated $generated@@28)) (< 1 $generated@@20)) (and (forall (($generated@@29 Int) ) (! ($generated@@22 $generated@@29 ($generated $generated@@27))
 :pattern ( ($generated@@21 $generated@@29 $generated@@27))
)) (= ($generated@@25 ($generated $generated@@27) ($generated $generated@@28)) (forall (($generated@@30 Int) ) (! (= (+ ($generated@@21 $generated@@30 ($generated $generated@@27)) $generated@@28) (+ (+ $generated@@30 $generated@@27) $generated@@28))
 :pattern ( ($generated@@21 $generated@@30 $generated@@27))
)))))
 :weight 3
 :pattern ( ($generated@@25 ($generated $generated@@27) ($generated $generated@@28)))
))))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 ($generated@@31 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@34 $generated@@33))
)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@35 Int) ($generated@@36 Int) ) (!  (=> (or ($generated@@26 $generated@@35 $generated@@36) (< 1 $generated@@20)) (and (forall (($generated@@37 Int) ) (! ($generated@@22 $generated@@37 $generated@@35)
 :pattern ( ($generated@@21 $generated@@37 $generated@@35))
)) (= ($generated@@25 $generated@@35 $generated@@36) (forall (($generated@@38 Int) ) (! (= (+ ($generated@@21 $generated@@38 $generated@@35) $generated@@36) (+ (+ $generated@@38 $generated@@35) $generated@@36))
 :pattern ( ($generated@@21 $generated@@38 $generated@@35))
)))))
 :pattern ( ($generated@@25 $generated@@35 $generated@@36))
))))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@39 Int) ($generated@@40 Int) ) (!  (=> (or ($generated@@22 $generated@@39 $generated@@40) (< 0 $generated@@20)) (= ($generated@@21 $generated@@39 $generated@@40) (+ $generated@@39 $generated@@40)))
 :pattern ( ($generated@@21 $generated@@39 $generated@@40))
))))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@31 $generated@@42 ($generated@@32 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@32 $generated@@42 $generated@@41))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@43 $generated@@54 $generated@@55 $generated@@56 ($generated@@50 $generated@@54 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@60 $generated@@57) $generated@@59 $generated@@60) $generated@@57)
 :weight 0
)) (and (forall (($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (or (= $generated@@66 $generated@@68) (= ($generated@@43 $generated@@61 $generated@@62 $generated@@63 ($generated@@50 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@66 $generated@@67 $generated@@64) $generated@@68 $generated@@69) ($generated@@43 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@68 $generated@@69)))
 :weight 0
)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@76 $generated@@78) (= ($generated@@43 $generated@@70 $generated@@71 $generated@@72 ($generated@@50 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@77 $generated@@78) ($generated@@43 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@77 $generated@@78)))
 :weight 0
)))) (= ($generated@@0 $generated@@44) 3)) (= ($generated@@0 $generated@@45) 4)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@47 $generated@@79 $generated@@80 ($generated@@51 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@81) $generated@@83) $generated@@81)
 :weight 0
))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@88 $generated@@89) (= ($generated@@47 $generated@@84 $generated@@85 ($generated@@51 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@86) $generated@@89) ($generated@@47 $generated@@84 $generated@@85 $generated@@87 $generated@@89)))
 :weight 0
))) (= ($generated@@0 $generated@@48) 5)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ) (= ($generated@@0 ($generated@@49 $generated@@90 $generated@@91)) 6))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (! (= ($generated@@52 ($generated@@49 $generated@@92 $generated@@93)) $generated@@92)
 :pattern ( ($generated@@49 $generated@@92 $generated@@93))
))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (! (= ($generated@@53 ($generated@@49 $generated@@94 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@49 $generated@@94 $generated@@95))
))))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 Bool) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@5 ($generated@@43 $generated@@44 $generated@@45 $generated@@1 ($generated@@46 $generated@@96 $generated@@97 $generated@@98 $generated@@99) $generated@@100 $generated@@101))  (=> (and (or (not (= $generated@@100 $generated@@96)) (not true)) ($generated@@5 ($generated@@31 $generated@@1 ($generated@@47 $generated@@45 $generated@@48 ($generated@@47 $generated@@44 ($generated@@49 $generated@@45 $generated@@48) $generated@@97 $generated@@100) $generated@@98)))) $generated@@99))
 :pattern ( ($generated@@43 $generated@@44 $generated@@45 $generated@@1 ($generated@@46 $generated@@96 $generated@@97 $generated@@98 $generated@@99) $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@102 Int) ) (! (= ($generated@@32 $generated@@2 ($generated@@6 ($generated $generated@@102))) ($generated@@17 $generated@@48 ($generated@@32 $generated@@2 ($generated@@6 $generated@@102))))
 :pattern ( ($generated@@32 $generated@@2 ($generated@@6 ($generated $generated@@102))))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@T) ) (! (= ($generated@@32 $generated@@104 ($generated@@17 $generated@@104 $generated@@103)) ($generated@@17 $generated@@48 ($generated@@32 $generated@@104 $generated@@103)))
 :pattern ( ($generated@@32 $generated@@104 ($generated@@17 $generated@@104 $generated@@103)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 () T@U)
(declare-fun $generated@@107 () T@U)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 (T@U) Bool)
(declare-fun $generated@@112 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@113  (=> (= $generated@@105 ($generated@@46 $generated@@106 $generated@@107 $generated@@108 false)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (=> ($generated@@26 ($generated 0) ($generated 0)) (or ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4 ($generated@@25 ($generated 0) ($generated 0))))) (forall (($generated@@114 Int) ) (! (= (+ ($generated@@21 $generated@@114 ($generated 0)) 0) (+ (+ $generated@@114 0) 0))
 :pattern ( ($generated@@21 $generated@@114 0))
))))) (=> (=> ($generated@@26 ($generated 0) ($generated 0)) (or ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4 ($generated@@25 ($generated 0) ($generated 0))))) (forall (($generated@@115 Int) ) (! (= (+ ($generated@@21 $generated@@115 ($generated 0)) 0) (+ (+ $generated@@115 0) 0))
 :pattern ( ($generated@@21 $generated@@115 0))
)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> ($generated@@26 $generated@@109 $generated@@110) (or ($generated@@25 $generated@@109 $generated@@110) (forall (($generated@@116 Int) ) (! (= (+ ($generated@@21 $generated@@116 $generated@@109) $generated@@110) (+ (+ $generated@@116 $generated@@109) $generated@@110))
 :pattern ( ($generated@@21 $generated@@116 $generated@@109))
))))) (=> (=> ($generated@@26 $generated@@109 $generated@@110) (or ($generated@@25 $generated@@109 $generated@@110) (forall (($generated@@117 Int) ) (! (= (+ ($generated@@21 $generated@@117 $generated@@109) $generated@@110) (+ (+ $generated@@117 $generated@@109) $generated@@110))
 :pattern ( ($generated@@21 $generated@@117 $generated@@109))
)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> ($generated@@26 $generated@@109 (+ $generated@@110 1)) (or ($generated@@25 $generated@@109 (+ $generated@@110 1)) (forall (($generated@@118 Int) ) (! (= (+ ($generated@@21 $generated@@118 $generated@@109) (+ $generated@@110 1)) (+ (+ $generated@@118 $generated@@109) (+ $generated@@110 1)))
 :pattern ( ($generated@@21 $generated@@118 $generated@@109))
))))) (=> (=> ($generated@@26 $generated@@109 (+ $generated@@110 1)) (or ($generated@@25 $generated@@109 (+ $generated@@110 1)) (forall (($generated@@119 Int) ) (! (= (+ ($generated@@21 $generated@@119 $generated@@109) (+ $generated@@110 1)) (+ (+ $generated@@119 $generated@@109) (+ $generated@@110 1)))
 :pattern ( ($generated@@21 $generated@@119 $generated@@109))
)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@26 (+ $generated@@109 1) $generated@@110) ($generated@@25 (+ $generated@@109 1) $generated@@110))) (=> (=> ($generated@@26 (+ $generated@@109 1) $generated@@110) ($generated@@25 (+ $generated@@109 1) $generated@@110)) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@26 (+ $generated@@109 1) (+ $generated@@110 1)) ($generated@@25 (+ $generated@@109 1) (+ $generated@@110 1)))))))))))))))
(let (($generated@@120  (=> (and (and ($generated@@111 $generated@@107) ($generated@@112 $generated@@107)) (and (= 2 $generated@@20) (= (ControlFlow 0 7) 2))) $generated@@113)))
$generated@@120)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
