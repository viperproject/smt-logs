(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@7)) (Lit BoxType ($Box T@@2 x@@7)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@7)))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :pattern ( ($IsAlloc intType v TInt h))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module.__default.f (Int) Int)
(declare-fun _module.__default.g (Int) Int)
(declare-fun |_module.__default.f#canCall| (Int) Bool)
(declare-fun |i#28@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |i#26@0| () Int)
(declare-fun |_module.__default.g#canCall| (Int) Bool)
(declare-fun |i#24@0| () Int)
(declare-fun |##i#31@0| () Int)
(declare-fun |j#6@0| () Int)
(declare-fun |i#22@0| () Int)
(declare-fun |j#4@0| () Int)
(declare-fun |i#20@0| () Int)
(declare-fun |i#18@0| () Int)
(declare-fun |j#0@0| () Int)
(declare-fun |##i#21@0| () Int)
(declare-fun |i#16@0| () Int)
(declare-fun |##i#20@0| () Int)
(declare-fun |i#14@0| () Int)
(declare-fun |i#12@0| () Int)
(declare-fun |i#10@0| () Int)
(declare-fun |##i#16@0| () Int)
(declare-fun |i#8@0| () Int)
(declare-fun |##i#12@0| () Int)
(declare-fun |i#6@0| () Int)
(declare-fun |##i#8@0| () Int)
(declare-fun |i#4@0| () Int)
(declare-fun |##i#6@0| () Int)
(declare-fun |i#2@0| () Int)
(declare-fun |##i#4@0| () Int)
(declare-fun |i#0@0| () Int)
(declare-fun |##i#1@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 105) (let ((anon50_correct  (=> (and (forall ((|i#29| Int) (|j#11| Int) ) (!  (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#29|) (|_module.__default.f#canCall| |i#29|)))
 :pattern ( (_module.__default.f |i#29|) (_module.__default.g |j#11|))
)) (= (ControlFlow 0 17) (- 0 16))) (forall ((|i#29@@0| Int) (|j#11@@0| Int) ) (!  (=> false (= (_module.__default.f |i#29@@0|) (_module.__default.f |i#29@@0|)))
 :pattern ( (_module.__default.f |i#29@@0|) (_module.__default.g |j#11@@0|))
)))))
(let ((anon85_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 19) 17)) anon50_correct)))
(let ((anon85_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U false))) ($IsAlloc intType (int_2_U |i#28@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#28@0|) ($IsAlloc intType (int_2_U |i#28@0|) TInt $Heap)) (and (|_module.__default.f#canCall| |i#28@0|) (= (ControlFlow 0 18) 17))) anon50_correct))))
(let ((anon84_Then_correct  (and (=> (= (ControlFlow 0 20) 18) anon85_Then_correct) (=> (= (ControlFlow 0 20) 19) anon85_Else_correct))))
(let ((anon84_Else_correct true))
(let ((anon47_correct  (=> (forall ((|i#27| Int) )  (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#27|) (|_module.__default.f#canCall| |i#27|)))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (forall ((|i#27@@0| Int) (|j#9| Int) )  (=> false (= (_module.__default.f |i#27@@0|) (_module.__default.f |i#27@@0|))))) (=> (forall ((|i#27@@1| Int) (|j#9@@0| Int) )  (=> false (= (_module.__default.f |i#27@@1|) (_module.__default.f |i#27@@1|)))) (and (=> (= (ControlFlow 0 21) 20) anon84_Then_correct) (=> (= (ControlFlow 0 21) 15) anon84_Else_correct)))))))
(let ((anon83_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 24) 21)) anon47_correct)))
(let ((anon83_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U false))) ($IsAlloc intType (int_2_U |i#26@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#26@0|) ($IsAlloc intType (int_2_U |i#26@0|) TInt $Heap)) (and (|_module.__default.f#canCall| |i#26@0|) (= (ControlFlow 0 23) 21))) anon47_correct))))
(let ((anon82_Then_correct  (and (=> (= (ControlFlow 0 25) 23) anon83_Then_correct) (=> (= (ControlFlow 0 25) 24) anon83_Else_correct))))
(let ((anon82_Else_correct true))
(let ((anon44_correct  (=> (forall ((|i#25| Int) (|j#7| Int) )  (and (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#25|) (|_module.__default.f#canCall| |i#25|))) (=> (=> false (= (_module.__default.f |i#25|) (_module.__default.f |i#25|))) (=> (U_2_bool (Lit boolType (bool_2_U false))) (|_module.__default.g#canCall| (+ |j#7| 1)))))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (forall ((|i#25@@0| Int) (|j#7@@0| Int) )  (and (=> false (= (_module.__default.f |i#25@@0|) (_module.__default.f |i#25@@0|))) (=> false (= (_module.__default.g (+ |j#7@@0| 1)) (LitInt 0)))))) (=> (forall ((|i#25@@1| Int) (|j#7@@1| Int) )  (and (=> false (= (_module.__default.f |i#25@@1|) (_module.__default.f |i#25@@1|))) (=> false (= (_module.__default.g (+ |j#7@@1| 1)) (LitInt 0))))) (and (=> (= (ControlFlow 0 26) 25) anon82_Then_correct) (=> (= (ControlFlow 0 26) 14) anon82_Else_correct)))))))
(let ((anon81_Else_correct  (=> (and (or (not (= (_module.__default.f |i#24@0|) (_module.__default.f |i#24@0|))) (not true)) (= (ControlFlow 0 30) 26)) anon44_correct)))
(let ((anon81_Then_correct  (=> (= (_module.__default.f |i#24@0|) (_module.__default.f |i#24@0|)) (=> (and (and (= |##i#31@0| (+ |j#6@0| 1)) ($IsAlloc intType (int_2_U |##i#31@0|) TInt $Heap)) (and (|_module.__default.g#canCall| (+ |j#6@0| 1)) (= (ControlFlow 0 29) 26))) anon44_correct))))
(let ((anon80_Then_correct  (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and (and ($IsAlloc intType (int_2_U |i#24@0|) TInt $Heap) (|_module.__default.f#canCall| |i#24@0|)) (and ($IsAlloc intType (int_2_U |i#24@0|) TInt $Heap) (|_module.__default.f#canCall| |i#24@0|))) (and (=> (= (ControlFlow 0 31) 29) anon81_Then_correct) (=> (= (ControlFlow 0 31) 30) anon81_Else_correct))))))
(let ((anon80_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 28) 26)) anon44_correct)))
(let ((anon79_Then_correct  (and (=> (= (ControlFlow 0 32) 31) anon80_Then_correct) (=> (= (ControlFlow 0 32) 28) anon80_Else_correct))))
(let ((anon79_Else_correct true))
(let ((anon40_correct  (=> (forall ((|i#23| Int) (|j#5| Int) ) (!  (and (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#23|) (|_module.__default.f#canCall| |i#23|))) (=> (=> false (= (_module.__default.f |i#23|) (_module.__default.f |i#23|))) (=> (U_2_bool (Lit boolType (bool_2_U false))) (|_module.__default.g#canCall| |j#5|))))
 :pattern ( (_module.__default.g |j#5|) (_module.__default.f |i#23|))
)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (forall ((|i#23@@0| Int) (|j#5@@0| Int) ) (!  (and (=> false (= (_module.__default.f |i#23@@0|) (_module.__default.f |i#23@@0|))) (=> false (= (_module.__default.g |j#5@@0|) (LitInt 0))))
 :pattern ( (_module.__default.g |j#5@@0|) (_module.__default.f |i#23@@0|))
))) (=> (forall ((|i#23@@1| Int) (|j#5@@1| Int) ) (!  (and (=> false (= (_module.__default.f |i#23@@1|) (_module.__default.f |i#23@@1|))) (=> false (= (_module.__default.g |j#5@@1|) (LitInt 0))))
 :pattern ( (_module.__default.g |j#5@@1|) (_module.__default.f |i#23@@1|))
)) (and (=> (= (ControlFlow 0 33) 32) anon79_Then_correct) (=> (= (ControlFlow 0 33) 13) anon79_Else_correct)))))))
(let ((anon78_Else_correct  (=> (and (or (not (= (_module.__default.f |i#22@0|) (_module.__default.f |i#22@0|))) (not true)) (= (ControlFlow 0 37) 33)) anon40_correct)))
(let ((anon78_Then_correct  (=> (and (and (= (_module.__default.f |i#22@0|) (_module.__default.f |i#22@0|)) ($IsAlloc intType (int_2_U |j#4@0|) TInt $Heap)) (and (|_module.__default.g#canCall| |j#4@0|) (= (ControlFlow 0 36) 33))) anon40_correct)))
(let ((anon77_Then_correct  (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and (and ($IsAlloc intType (int_2_U |i#22@0|) TInt $Heap) (|_module.__default.f#canCall| |i#22@0|)) (and ($IsAlloc intType (int_2_U |i#22@0|) TInt $Heap) (|_module.__default.f#canCall| |i#22@0|))) (and (=> (= (ControlFlow 0 38) 36) anon78_Then_correct) (=> (= (ControlFlow 0 38) 37) anon78_Else_correct))))))
(let ((anon77_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 35) 33)) anon40_correct)))
(let ((anon76_Then_correct  (and (=> (= (ControlFlow 0 39) 38) anon77_Then_correct) (=> (= (ControlFlow 0 39) 35) anon77_Else_correct))))
(let ((anon76_Else_correct true))
(let ((anon36_correct  (=> (forall ((|i#21| Int) )  (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#21|) (|_module.__default.f#canCall| |i#21|)))) (and (=> (= (ControlFlow 0 40) (- 0 41)) (forall ((|i#21@@0| Int) (|j#3| Int) )  (=> false (= (_module.__default.f |i#21@@0|) (_module.__default.f |i#21@@0|))))) (=> (forall ((|i#21@@1| Int) (|j#3@@0| Int) )  (=> false (= (_module.__default.f |i#21@@1|) (_module.__default.f |i#21@@1|)))) (and (=> (= (ControlFlow 0 40) 39) anon76_Then_correct) (=> (= (ControlFlow 0 40) 12) anon76_Else_correct)))))))
(let ((anon75_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 43) 40)) anon36_correct)))
(let ((anon75_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U false))) ($IsAlloc intType (int_2_U |i#20@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#20@0|) ($IsAlloc intType (int_2_U |i#20@0|) TInt $Heap)) (and (|_module.__default.f#canCall| |i#20@0|) (= (ControlFlow 0 42) 40))) anon36_correct))))
(let ((anon74_Then_correct  (and (=> (= (ControlFlow 0 44) 42) anon75_Then_correct) (=> (= (ControlFlow 0 44) 43) anon75_Else_correct))))
(let ((anon74_Else_correct true))
(let ((anon33_correct  (=> (forall ((|i#19| Int) (|j#1| Int) ) (!  (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#19|) (|_module.__default.f#canCall| |j#1|)))
 :pattern ( (_module.__default.f |j#1|) (_module.__default.f |i#19|))
)) (and (=> (= (ControlFlow 0 45) (- 0 46)) (forall ((|i#19@@0| Int) (|j#1@@0| Int) ) (!  (=> false (= (_module.__default.f |i#19@@0|) (_module.__default.f |j#1@@0|)))
 :pattern ( (_module.__default.f |j#1@@0|) (_module.__default.f |i#19@@0|))
))) (=> (forall ((|i#19@@1| Int) (|j#1@@1| Int) ) (!  (=> false (= (_module.__default.f |i#19@@1|) (_module.__default.f |j#1@@1|)))
 :pattern ( (_module.__default.f |j#1@@1|) (_module.__default.f |i#19@@1|))
)) (and (=> (= (ControlFlow 0 45) 44) anon74_Then_correct) (=> (= (ControlFlow 0 45) 11) anon74_Else_correct)))))))
(let ((anon73_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 48) 45)) anon33_correct)))
(let ((anon73_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U false))) ($IsAlloc intType (int_2_U |i#18@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#18@0|) ($IsAlloc intType (int_2_U |j#0@0|) TInt $Heap)) (and (|_module.__default.f#canCall| |j#0@0|) (= (ControlFlow 0 47) 45))) anon33_correct))))
(let ((anon72_Then_correct  (and (=> (= (ControlFlow 0 49) 47) anon73_Then_correct) (=> (= (ControlFlow 0 49) 48) anon73_Else_correct))))
(let ((anon72_Else_correct true))
(let ((anon30_correct  (=> (forall ((|i#17| Int) )  (=> (U_2_bool (Lit boolType (bool_2_U false))) (|_module.__default.f#canCall| (+ |i#17| 1)))) (and (=> (= (ControlFlow 0 50) (- 0 51)) (forall ((|i#17@@0| Int) )  (=> false (= (_module.__default.f (+ |i#17@@0| 1)) (LitInt 0))))) (=> (forall ((|i#17@@1| Int) )  (=> false (= (_module.__default.f (+ |i#17@@1| 1)) (LitInt 0)))) (and (=> (= (ControlFlow 0 50) 49) anon72_Then_correct) (=> (= (ControlFlow 0 50) 10) anon72_Else_correct)))))))
(let ((anon71_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 53) 50)) anon30_correct)))
(let ((anon71_Then_correct  (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and (and (= |##i#21@0| (+ |i#16@0| 1)) ($IsAlloc intType (int_2_U |##i#21@0|) TInt $Heap)) (and (|_module.__default.f#canCall| (+ |i#16@0| 1)) (= (ControlFlow 0 52) 50))) anon30_correct))))
(let ((anon70_Then_correct  (and (=> (= (ControlFlow 0 54) 52) anon71_Then_correct) (=> (= (ControlFlow 0 54) 53) anon71_Else_correct))))
(let ((anon70_Else_correct true))
(let ((anon27_correct  (=> (forall ((|i#15| Int) )  (=> (U_2_bool (Lit boolType (bool_2_U false))) (|_module.__default.f#canCall| (+ |i#15| 1)))) (and (=> (= (ControlFlow 0 55) (- 0 56)) (forall ((|i#15@@0| Int) )  (=> false (= (_module.__default.f (+ |i#15@@0| 1)) (LitInt 0))))) (=> (forall ((|i#15@@1| Int) )  (=> false (= (_module.__default.f (+ |i#15@@1| 1)) (LitInt 0)))) (and (=> (= (ControlFlow 0 55) 54) anon70_Then_correct) (=> (= (ControlFlow 0 55) 9) anon70_Else_correct)))))))
(let ((anon69_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 58) 55)) anon27_correct)))
(let ((anon69_Then_correct  (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and (and (= |##i#20@0| (+ |i#14@0| 1)) ($IsAlloc intType (int_2_U |##i#20@0|) TInt $Heap)) (and (|_module.__default.f#canCall| (+ |i#14@0| 1)) (= (ControlFlow 0 57) 55))) anon27_correct))))
(let ((anon68_Then_correct  (and (=> (= (ControlFlow 0 59) 57) anon69_Then_correct) (=> (= (ControlFlow 0 59) 58) anon69_Else_correct))))
(let ((anon68_Else_correct true))
(let ((anon24_correct  (=> (forall ((|i#13| Int) ) (!  (=> (U_2_bool (Lit boolType (bool_2_U false))) (|_module.__default.f#canCall| |i#13|))
 :pattern ( (_module.__default.f |i#13|))
)) (and (=> (= (ControlFlow 0 60) (- 0 61)) (forall ((|i#13@@0| Int) ) (!  (=> false (= (_module.__default.f |i#13@@0|) (LitInt 0)))
 :pattern ( (_module.__default.f |i#13@@0|))
))) (=> (forall ((|i#13@@1| Int) ) (!  (=> false (= (_module.__default.f |i#13@@1|) (LitInt 0)))
 :pattern ( (_module.__default.f |i#13@@1|))
)) (and (=> (= (ControlFlow 0 60) 59) anon68_Then_correct) (=> (= (ControlFlow 0 60) 8) anon68_Else_correct)))))))
(let ((anon67_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 63) 60)) anon24_correct)))
(let ((anon67_Then_correct  (=> (and (and (U_2_bool (Lit boolType (bool_2_U false))) ($IsAlloc intType (int_2_U |i#12@0|) TInt $Heap)) (and (|_module.__default.f#canCall| |i#12@0|) (= (ControlFlow 0 62) 60))) anon24_correct)))
(let ((anon66_Then_correct  (and (=> (= (ControlFlow 0 64) 62) anon67_Then_correct) (=> (= (ControlFlow 0 64) 63) anon67_Else_correct))))
(let ((anon66_Else_correct true))
(let ((anon21_correct  (=> (and (forall ((|i#11| Int) (|_t#0#4| Int) ) (!  (=> (= |_t#0#4| (+ |i#11| 1)) (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#11|) (|_module.__default.f#canCall| |_t#0#4|))))
 :pattern ( (_module.__default.f |_t#0#4|) (_module.__default.f |i#11|))
)) (=> (forall ((|i#11@@0| Int) (|_t#0#4@@0| Int) ) (!  (=> (= |_t#0#4@@0| (+ |i#11@@0| 1)) (=> false (= (_module.__default.f |i#11@@0|) (_module.__default.f |_t#0#4@@0|))))
 :pattern ( (_module.__default.f |_t#0#4@@0|) (_module.__default.f |i#11@@0|))
)) (forall ((|i#11@@1| Int) ) (!  (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#11@@1|) (|_module.__default.f#canCall| |i#11@@1|)))
 :pattern ( (_module.__default.f |i#11@@1|))
)))) (and (=> (= (ControlFlow 0 65) (- 0 67)) (forall ((|i#11@@2| Int) (|_t#0#4@@1| Int) ) (!  (=> (= |_t#0#4@@1| (+ |i#11@@2| 1)) (=> false (= (_module.__default.f |i#11@@2|) (_module.__default.f |_t#0#4@@1|))))
 :pattern ( (_module.__default.f |_t#0#4@@1|) (_module.__default.f |i#11@@2|))
))) (and (=> (= (ControlFlow 0 65) (- 0 66)) (forall ((|i#11@@3| Int) ) (!  (=> false (= (_module.__default.f |i#11@@3|) (_module.__default.f |i#11@@3|)))
 :pattern ( (_module.__default.f |i#11@@3|))
))) (=> (and (forall ((|i#11@@4| Int) (|_t#0#4@@2| Int) ) (!  (=> (= |_t#0#4@@2| (+ |i#11@@4| 1)) (=> false (= (_module.__default.f |i#11@@4|) (_module.__default.f |_t#0#4@@2|))))
 :pattern ( (_module.__default.f |_t#0#4@@2|) (_module.__default.f |i#11@@4|))
)) (forall ((|i#11@@5| Int) ) (!  (=> false (= (_module.__default.f |i#11@@5|) (_module.__default.f |i#11@@5|)))
 :pattern ( (_module.__default.f |i#11@@5|))
))) (and (=> (= (ControlFlow 0 65) 64) anon66_Then_correct) (=> (= (ControlFlow 0 65) 7) anon66_Else_correct))))))))
(let ((anon65_Else_correct  (=> (and (or (not (= (_module.__default.f |i#10@0|) (_module.__default.f (+ |i#10@0| 1)))) (not true)) (= (ControlFlow 0 70) 65)) anon21_correct)))
(let ((anon65_Then_correct  (=> (and (= (_module.__default.f |i#10@0|) (_module.__default.f (+ |i#10@0| 1))) ($IsAlloc intType (int_2_U |i#10@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#10@0|) ($IsAlloc intType (int_2_U |i#10@0|) TInt $Heap)) (and (|_module.__default.f#canCall| |i#10@0|) (= (ControlFlow 0 69) 65))) anon21_correct))))
(let ((anon64_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U false))) ($IsAlloc intType (int_2_U |i#10@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#10@0|) (= |##i#16@0| (+ |i#10@0| 1))) (and ($IsAlloc intType (int_2_U |##i#16@0|) TInt $Heap) (|_module.__default.f#canCall| (+ |i#10@0| 1)))) (and (=> (= (ControlFlow 0 71) 69) anon65_Then_correct) (=> (= (ControlFlow 0 71) 70) anon65_Else_correct))))))
(let ((anon64_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 68) 65)) anon21_correct)))
(let ((anon63_Then_correct  (and (=> (= (ControlFlow 0 72) 71) anon64_Then_correct) (=> (= (ControlFlow 0 72) 68) anon64_Else_correct))))
(let ((anon63_Else_correct true))
(let ((anon17_correct  (=> (and (forall ((|i#9| Int) (|_t#0#3| Int) ) (!  (=> (= |_t#0#3| (+ |i#9| 1)) (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#9|) (|_module.__default.f#canCall| |_t#0#3|))))
 :pattern ( (_module.__default.f |_t#0#3|) (_module.__default.f |i#9|))
)) (=> (forall ((|i#9@@0| Int) (|_t#0#3@@0| Int) ) (!  (=> (= |_t#0#3@@0| (+ |i#9@@0| 1)) (=> false (= (_module.__default.f |i#9@@0|) (_module.__default.f |_t#0#3@@0|))))
 :pattern ( (_module.__default.f |_t#0#3@@0|) (_module.__default.f |i#9@@0|))
)) (forall ((|i#9@@1| Int) ) (!  (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#9@@1|) (|_module.__default.f#canCall| |i#9@@1|)))
 :pattern ( (_module.__default.f |i#9@@1|))
)))) (and (=> (= (ControlFlow 0 73) (- 0 75)) (forall ((|i#9@@2| Int) (|_t#0#3@@1| Int) ) (!  (=> (= |_t#0#3@@1| (+ |i#9@@2| 1)) (=> false (= (_module.__default.f |i#9@@2|) (_module.__default.f |_t#0#3@@1|))))
 :pattern ( (_module.__default.f |_t#0#3@@1|) (_module.__default.f |i#9@@2|))
))) (and (=> (= (ControlFlow 0 73) (- 0 74)) (forall ((|i#9@@3| Int) ) (!  (=> false (= (_module.__default.f |i#9@@3|) (_module.__default.f |i#9@@3|)))
 :pattern ( (_module.__default.f |i#9@@3|))
))) (=> (and (forall ((|i#9@@4| Int) (|_t#0#3@@2| Int) ) (!  (=> (= |_t#0#3@@2| (+ |i#9@@4| 1)) (=> false (= (_module.__default.f |i#9@@4|) (_module.__default.f |_t#0#3@@2|))))
 :pattern ( (_module.__default.f |_t#0#3@@2|) (_module.__default.f |i#9@@4|))
)) (forall ((|i#9@@5| Int) ) (!  (=> false (= (_module.__default.f |i#9@@5|) (_module.__default.f |i#9@@5|)))
 :pattern ( (_module.__default.f |i#9@@5|))
))) (and (=> (= (ControlFlow 0 73) 72) anon63_Then_correct) (=> (= (ControlFlow 0 73) 6) anon63_Else_correct))))))))
(let ((anon62_Else_correct  (=> (and (or (not (= (_module.__default.f |i#8@0|) (_module.__default.f (+ |i#8@0| 1)))) (not true)) (= (ControlFlow 0 78) 73)) anon17_correct)))
(let ((anon62_Then_correct  (=> (and (= (_module.__default.f |i#8@0|) (_module.__default.f (+ |i#8@0| 1))) ($IsAlloc intType (int_2_U |i#8@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#8@0|) ($IsAlloc intType (int_2_U |i#8@0|) TInt $Heap)) (and (|_module.__default.f#canCall| |i#8@0|) (= (ControlFlow 0 77) 73))) anon17_correct))))
(let ((anon61_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U false))) ($IsAlloc intType (int_2_U |i#8@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#8@0|) (= |##i#12@0| (+ |i#8@0| 1))) (and ($IsAlloc intType (int_2_U |##i#12@0|) TInt $Heap) (|_module.__default.f#canCall| (+ |i#8@0| 1)))) (and (=> (= (ControlFlow 0 79) 77) anon62_Then_correct) (=> (= (ControlFlow 0 79) 78) anon62_Else_correct))))))
(let ((anon61_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 76) 73)) anon17_correct)))
(let ((anon60_Then_correct  (and (=> (= (ControlFlow 0 80) 79) anon61_Then_correct) (=> (= (ControlFlow 0 80) 76) anon61_Else_correct))))
(let ((anon60_Else_correct true))
(let ((anon13_correct  (=> (and (forall ((|i#7| Int) (|_t#0#2| Int) ) (!  (=> (= |_t#0#2| (+ |i#7| 1)) (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#7|) (|_module.__default.f#canCall| |_t#0#2|))))
 :pattern ( (_module.__default.f |_t#0#2|) (_module.__default.f |i#7|))
)) (=> (forall ((|i#7@@0| Int) (|_t#0#2@@0| Int) ) (!  (=> (= |_t#0#2@@0| (+ |i#7@@0| 1)) (=> false (= (_module.__default.f |i#7@@0|) (_module.__default.f |_t#0#2@@0|))))
 :pattern ( (_module.__default.f |_t#0#2@@0|) (_module.__default.f |i#7@@0|))
)) (forall ((|i#7@@1| Int) ) (!  (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#7@@1|) (|_module.__default.g#canCall| |i#7@@1|)))
 :pattern ( (_module.__default.g |i#7@@1|))
 :pattern ( (_module.__default.f |i#7@@1|))
)))) (and (=> (= (ControlFlow 0 81) (- 0 83)) (forall ((|i#7@@2| Int) (|_t#0#2@@1| Int) ) (!  (=> (= |_t#0#2@@1| (+ |i#7@@2| 1)) (=> false (= (_module.__default.f |i#7@@2|) (_module.__default.f |_t#0#2@@1|))))
 :pattern ( (_module.__default.f |_t#0#2@@1|) (_module.__default.f |i#7@@2|))
))) (and (=> (= (ControlFlow 0 81) (- 0 82)) (forall ((|i#7@@3| Int) ) (!  (=> false (= (_module.__default.f |i#7@@3|) (_module.__default.g |i#7@@3|)))
 :pattern ( (_module.__default.g |i#7@@3|))
 :pattern ( (_module.__default.f |i#7@@3|))
))) (=> (and (forall ((|i#7@@4| Int) (|_t#0#2@@2| Int) ) (!  (=> (= |_t#0#2@@2| (+ |i#7@@4| 1)) (=> false (= (_module.__default.f |i#7@@4|) (_module.__default.f |_t#0#2@@2|))))
 :pattern ( (_module.__default.f |_t#0#2@@2|) (_module.__default.f |i#7@@4|))
)) (forall ((|i#7@@5| Int) ) (!  (=> false (= (_module.__default.f |i#7@@5|) (_module.__default.g |i#7@@5|)))
 :pattern ( (_module.__default.g |i#7@@5|))
 :pattern ( (_module.__default.f |i#7@@5|))
))) (and (=> (= (ControlFlow 0 81) 80) anon60_Then_correct) (=> (= (ControlFlow 0 81) 5) anon60_Else_correct))))))))
(let ((anon59_Else_correct  (=> (and (or (not (= (_module.__default.f |i#6@0|) (_module.__default.f (+ |i#6@0| 1)))) (not true)) (= (ControlFlow 0 86) 81)) anon13_correct)))
(let ((anon59_Then_correct  (=> (and (= (_module.__default.f |i#6@0|) (_module.__default.f (+ |i#6@0| 1))) ($IsAlloc intType (int_2_U |i#6@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#6@0|) ($IsAlloc intType (int_2_U |i#6@0|) TInt $Heap)) (and (|_module.__default.g#canCall| |i#6@0|) (= (ControlFlow 0 85) 81))) anon13_correct))))
(let ((anon58_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U false))) ($IsAlloc intType (int_2_U |i#6@0|) TInt $Heap)) (=> (and (and (|_module.__default.f#canCall| |i#6@0|) (= |##i#8@0| (+ |i#6@0| 1))) (and ($IsAlloc intType (int_2_U |##i#8@0|) TInt $Heap) (|_module.__default.f#canCall| (+ |i#6@0| 1)))) (and (=> (= (ControlFlow 0 87) 85) anon59_Then_correct) (=> (= (ControlFlow 0 87) 86) anon59_Else_correct))))))
(let ((anon58_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 84) 81)) anon13_correct)))
(let ((anon57_Then_correct  (and (=> (= (ControlFlow 0 88) 87) anon58_Then_correct) (=> (= (ControlFlow 0 88) 84) anon58_Else_correct))))
(let ((anon57_Else_correct true))
(let ((anon9_correct  (=> (forall ((|i#5| Int) (|_t#0#1| Int) ) (!  (=> (= |_t#0#1| (+ |i#5| 1)) (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#5|) (|_module.__default.f#canCall| |_t#0#1|))))
 :pattern ( (_module.__default.f |_t#0#1|) (_module.__default.f |i#5|))
)) (and (=> (= (ControlFlow 0 89) (- 0 90)) (forall ((|i#5@@0| Int) (|_t#0#1@@0| Int) ) (!  (=> (= |_t#0#1@@0| (+ |i#5@@0| 1)) (=> false (= (_module.__default.f |i#5@@0|) (_module.__default.f |_t#0#1@@0|))))
 :pattern ( (_module.__default.f |_t#0#1@@0|) (_module.__default.f |i#5@@0|))
))) (=> (forall ((|i#5@@1| Int) (|_t#0#1@@1| Int) ) (!  (=> (= |_t#0#1@@1| (+ |i#5@@1| 1)) (=> false (= (_module.__default.f |i#5@@1|) (_module.__default.f |_t#0#1@@1|))))
 :pattern ( (_module.__default.f |_t#0#1@@1|) (_module.__default.f |i#5@@1|))
)) (and (=> (= (ControlFlow 0 89) 88) anon57_Then_correct) (=> (= (ControlFlow 0 89) 4) anon57_Else_correct)))))))
(let ((anon56_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 92) 89)) anon9_correct)))
(let ((anon56_Then_correct  (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and ($IsAlloc intType (int_2_U |i#4@0|) TInt $Heap) (|_module.__default.f#canCall| |i#4@0|)) (=> (and (and (= |##i#6@0| (+ |i#4@0| 1)) ($IsAlloc intType (int_2_U |##i#6@0|) TInt $Heap)) (and (|_module.__default.f#canCall| (+ |i#4@0| 1)) (= (ControlFlow 0 91) 89))) anon9_correct)))))
(let ((anon55_Then_correct  (and (=> (= (ControlFlow 0 93) 91) anon56_Then_correct) (=> (= (ControlFlow 0 93) 92) anon56_Else_correct))))
(let ((anon55_Else_correct true))
(let ((anon6_correct  (=> (forall ((|i#3| Int) (|_t#0#0| Int) ) (!  (=> (= |_t#0#0| (+ |i#3| 1)) (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#3|) (|_module.__default.f#canCall| |_t#0#0|))))
 :pattern ( (_module.__default.f |_t#0#0|) (_module.__default.f |i#3|))
)) (and (=> (= (ControlFlow 0 94) (- 0 95)) (forall ((|i#3@@0| Int) (|_t#0#0@@0| Int) ) (!  (=> (= |_t#0#0@@0| (+ |i#3@@0| 1)) (=> false (= (_module.__default.f |i#3@@0|) (_module.__default.f |_t#0#0@@0|))))
 :pattern ( (_module.__default.f |_t#0#0@@0|) (_module.__default.f |i#3@@0|))
))) (=> (forall ((|i#3@@1| Int) (|_t#0#0@@1| Int) ) (!  (=> (= |_t#0#0@@1| (+ |i#3@@1| 1)) (=> false (= (_module.__default.f |i#3@@1|) (_module.__default.f |_t#0#0@@1|))))
 :pattern ( (_module.__default.f |_t#0#0@@1|) (_module.__default.f |i#3@@1|))
)) (and (=> (= (ControlFlow 0 94) 93) anon55_Then_correct) (=> (= (ControlFlow 0 94) 3) anon55_Else_correct)))))))
(let ((anon54_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 97) 94)) anon6_correct)))
(let ((anon54_Then_correct  (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and ($IsAlloc intType (int_2_U |i#2@0|) TInt $Heap) (|_module.__default.f#canCall| |i#2@0|)) (=> (and (and (= |##i#4@0| (+ |i#2@0| 1)) ($IsAlloc intType (int_2_U |##i#4@0|) TInt $Heap)) (and (|_module.__default.f#canCall| (+ |i#2@0| 1)) (= (ControlFlow 0 96) 94))) anon6_correct)))))
(let ((anon53_Then_correct  (and (=> (= (ControlFlow 0 98) 96) anon54_Then_correct) (=> (= (ControlFlow 0 98) 97) anon54_Else_correct))))
(let ((anon53_Else_correct true))
(let ((anon3_correct  (=> (forall ((|i#1| Int) ) (!  (=> (U_2_bool (Lit boolType (bool_2_U false))) (and (|_module.__default.f#canCall| |i#1|) (and (|_module.__default.f#canCall| |i#1|) (|_module.__default.f#canCall| (_module.__default.f |i#1|)))))
 :pattern ( (_module.__default.f (_module.__default.f |i#1|)))
)) (and (=> (= (ControlFlow 0 99) (- 0 100)) (forall ((|i#1@@0| Int) ) (!  (=> false (= (_module.__default.f |i#1@@0|) (_module.__default.f (_module.__default.f |i#1@@0|))))
 :pattern ( (_module.__default.f (_module.__default.f |i#1@@0|)))
))) (=> (forall ((|i#1@@1| Int) ) (!  (=> false (= (_module.__default.f |i#1@@1|) (_module.__default.f (_module.__default.f |i#1@@1|))))
 :pattern ( (_module.__default.f (_module.__default.f |i#1@@1|)))
)) (and (=> (= (ControlFlow 0 99) 98) anon53_Then_correct) (=> (= (ControlFlow 0 99) 2) anon53_Else_correct)))))))
(let ((anon52_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U false)))) (= (ControlFlow 0 102) 99)) anon3_correct)))
(let ((anon52_Then_correct  (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and (and (and ($IsAlloc intType (int_2_U |i#0@0|) TInt $Heap) (|_module.__default.f#canCall| |i#0@0|)) (and ($IsAlloc intType (int_2_U |i#0@0|) TInt $Heap) (|_module.__default.f#canCall| |i#0@0|))) (and (and (= |##i#1@0| (_module.__default.f |i#0@0|)) ($IsAlloc intType (int_2_U |##i#1@0|) TInt $Heap)) (and (|_module.__default.f#canCall| (_module.__default.f |i#0@0|)) (= (ControlFlow 0 101) 99)))) anon3_correct))))
(let ((anon51_Then_correct  (and (=> (= (ControlFlow 0 103) 101) anon52_Then_correct) (=> (= (ControlFlow 0 103) 102) anon52_Else_correct))))
(let ((anon51_Else_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 104) 103) anon51_Then_correct) (=> (= (ControlFlow 0 104) 1) anon51_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 105) 104))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
