(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Count (T@U T@U T@U Int Int T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun |_module.__default.Count#canCall| (T@U T@U Int Int T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun Mul (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor SeqType) 3))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Count$T T@U) ($ly T@U) (|a#0| T@U) (|s#0| Int) (|t#0| Int) (|x#0| T@U) ) (!  (=> (or (|_module.__default.Count#canCall| _module._default.Count$T (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt |t#0|) |x#0|) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |a#0| (TSeq _module._default.Count$T)) ($IsBox |x#0| _module._default.Count$T)) (and (and (<= (LitInt 0) (LitInt |s#0|)) (<= (LitInt |s#0|) (LitInt |t#0|))) (<= (LitInt |t#0|) (|Seq#Length| (Lit SeqType |a#0|))))))) (and (=> (or (not (= (LitInt |s#0|) (LitInt |t#0|))) (not true)) (|_module.__default.Count#canCall| _module._default.Count$T (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt (- |t#0| 1)) |x#0|)) (= (_module.__default.Count _module._default.Count$T ($LS $ly) (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt |t#0|) |x#0|) (ite (= (LitInt |s#0|) (LitInt |t#0|)) 0 (+ (_module.__default.Count _module._default.Count$T ($LS $ly) (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt (- |t#0| 1)) |x#0|) (ite (= (|Seq#Index| (Lit SeqType |a#0|) (LitInt (- |t#0| 1))) |x#0|) 1 0))))))
 :weight 3
 :pattern ( (_module.__default.Count _module._default.Count$T ($LS $ly) (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt |t#0|) |x#0|))
))))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Count$T@@0 T@U) ($ly@@0 T@U) (|a#0@@0| T@U) (|s#0@@0| Int) (|t#0@@0| Int) (|x#0@@0| T@U) ) (!  (=> (or (|_module.__default.Count#canCall| _module._default.Count$T@@0 (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt |t#0@@0|) (Lit BoxType |x#0@@0|)) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |a#0@@0| (TSeq _module._default.Count$T@@0)) ($IsBox |x#0@@0| _module._default.Count$T@@0)) (and (and (<= (LitInt 0) (LitInt |s#0@@0|)) (<= (LitInt |s#0@@0|) (LitInt |t#0@@0|))) (<= (LitInt |t#0@@0|) (|Seq#Length| (Lit SeqType |a#0@@0|))))))) (and (=> (or (not (= (LitInt |s#0@@0|) (LitInt |t#0@@0|))) (not true)) (|_module.__default.Count#canCall| _module._default.Count$T@@0 (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt (- |t#0@@0| 1)) (Lit BoxType |x#0@@0|))) (= (_module.__default.Count _module._default.Count$T@@0 ($LS $ly@@0) (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt |t#0@@0|) (Lit BoxType |x#0@@0|)) (ite (= (LitInt |s#0@@0|) (LitInt |t#0@@0|)) 0 (+ (_module.__default.Count _module._default.Count$T@@0 ($LS $ly@@0) (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt (- |t#0@@0| 1)) (Lit BoxType |x#0@@0|)) (ite (= (|Seq#Index| (Lit SeqType |a#0@@0|) (LitInt (- |t#0@@0| 1))) (Lit BoxType |x#0@@0|)) 1 0))))))
 :weight 3
 :pattern ( (_module.__default.Count _module._default.Count$T@@0 ($LS $ly@@0) (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt |t#0@@0|) (Lit BoxType |x#0@@0|)))
))))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_module._default.Count$T@@1 T@U) ($ly@@1 T@U) (|a#0@@1| T@U) (|s#0@@1| Int) (|t#0@@1| Int) (|x#0@@1| T@U) ) (! (= (_module.__default.Count _module._default.Count$T@@1 ($LS $ly@@1) |a#0@@1| |s#0@@1| |t#0@@1| |x#0@@1|) (_module.__default.Count _module._default.Count$T@@1 $ly@@1 |a#0@@1| |s#0@@1| |t#0@@1| |x#0@@1|))
 :pattern ( (_module.__default.Count _module._default.Count$T@@1 ($LS $ly@@1) |a#0@@1| |s#0@@1| |t#0@@1| |x#0@@1|))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@2))) ($IsAllocBox (|Seq#Index| v@@2 i) t0@@0 h@@3))
 :pattern ( (|Seq#Index| v@@2 i))
)))
 :pattern ( ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Count$T@@2 T@U) ($ly@@2 T@U) (|a#0@@2| T@U) (|s#0@@2| Int) (|t#0@@2| Int) (|x#0@@2| T@U) ) (!  (=> (or (|_module.__default.Count#canCall| _module._default.Count$T@@2 |a#0@@2| |s#0@@2| |t#0@@2| |x#0@@2|) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |a#0@@2| (TSeq _module._default.Count$T@@2)) ($IsBox |x#0@@2| _module._default.Count$T@@2)) (and (and (<= (LitInt 0) |s#0@@2|) (<= |s#0@@2| |t#0@@2|)) (<= |t#0@@2| (|Seq#Length| |a#0@@2|)))))) (and (=> (or (not (= |s#0@@2| |t#0@@2|)) (not true)) (|_module.__default.Count#canCall| _module._default.Count$T@@2 |a#0@@2| |s#0@@2| (- |t#0@@2| 1) |x#0@@2|)) (= (_module.__default.Count _module._default.Count$T@@2 ($LS $ly@@2) |a#0@@2| |s#0@@2| |t#0@@2| |x#0@@2|) (ite (= |s#0@@2| |t#0@@2|) 0 (+ (_module.__default.Count _module._default.Count$T@@2 $ly@@2 |a#0@@2| |s#0@@2| (- |t#0@@2| 1) |x#0@@2|) (ite (= (|Seq#Index| |a#0@@2| (- |t#0@@2| 1)) |x#0@@2|) 1 0))))))
 :pattern ( (_module.__default.Count _module._default.Count$T@@2 ($LS $ly@@2) |a#0@@2| |s#0@@2| |t#0@@2| |x#0@@2|))
))))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert (forall ((bx@@1 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@1 (TSeq t@@5)) (and (= ($Box SeqType ($Unbox SeqType bx@@1)) bx@@1) ($Is SeqType ($Unbox SeqType bx@@1) (TSeq t@@5))))
 :pattern ( ($IsBox bx@@1 (TSeq t@@5)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@4 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@4))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@4 (TSeq t0@@2)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@4))) ($IsBox (|Seq#Index| v@@4 i@@0) t0@@2))
 :pattern ( (|Seq#Index| v@@4 i@@0))
)))
 :pattern ( ($Is SeqType v@@4 (TSeq t0@@2)))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |hasWinner#0| () Bool)
(declare-fun _module._default.SearchForWinner$Candidate () T@U)
(declare-fun |a#0@@3| () T@U)
(declare-fun |s#0@0| () Int)
(declare-fun |K#0| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |n#0@0| () Int)
(declare-fun |defass#k#0@0| () Bool)
(declare-fun |k#0@1| () T@U)
(declare-fun |##t#1@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |k#0@4| () T@U)
(declare-fun |n#0@2| () Int)
(declare-fun |t##0@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |n#0@4| () Int)
(declare-fun |s#0@2| () Int)
(declare-fun |k#0@3| () T@U)
(declare-fun |c#0@2| () Int)
(declare-fun |k#0@2| () T@U)
(declare-fun |n#0@3| () Int)
(declare-fun |c#0@1| () Int)
(declare-fun |s#0@1| () Int)
(declare-fun |$rhs#0_1_1_0@1| () T@U)
(declare-fun |$rhs#0_1_1_1@1| () Int)
(declare-fun |$rhs#0_1_1_2@1| () Int)
(declare-fun |c#0@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |u##0_1_1_0@1| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |n#0@1| () Int)
(declare-fun |$rhs#0_0_0@1| () Int)
(declare-fun |$rhs#0_0_1@1| () Int)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |$rhs#2@0| () Int)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |k#0@0| () T@U)
(declare-fun |defass#k#0| () Bool)
(declare-fun |k#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 70) (let ((anon8_correct  (=> (=> |hasWinner#0| (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| (|Seq#Length| |a#0@@3|) |K#0|)) (=> (and (and (=> |hasWinner#0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS $LZ) |a#0@@3| |s#0@0| (|Seq#Length| |a#0@@3|) |K#0|)) (- (|Seq#Length| |a#0@@3|) |s#0@0|))) ($IsAlloc SeqType |a#0@@3| (TSeq _module._default.SearchForWinner$Candidate) $Heap@0)) (and ($IsAlloc intType (int_2_U |s#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |n#0@0|) TInt $Heap@0))) (and (=> (= (ControlFlow 0 41) (- 0 48)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| _module._default.SearchForWinner$Candidate $Heap@0) (and (=> (= (ControlFlow 0 41) (- 0 47)) (<= (LitInt 0) |s#0@0|)) (and (=> (= (ControlFlow 0 41) (- 0 46)) (<= |s#0@0| |n#0@0|)) (and (=> (= (ControlFlow 0 41) (- 0 45)) (<= |n#0@0| (|Seq#Length| |a#0@@3|))) (=> (and (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |n#0@0| |k#0@1|) (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |n#0@0| |k#0@1|)) (=> (and (and (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS $LZ) |a#0@@3| |s#0@0| |n#0@0| |k#0@1|)) (- |n#0@0| |s#0@0|)) ($IsAlloc SeqType |a#0@@3| (TSeq _module._default.SearchForWinner$Candidate) $Heap@0)) (and ($IsAlloc intType (int_2_U |s#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |n#0@0|) TInt $Heap@0))) (and (=> (= (ControlFlow 0 41) (- 0 44)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| _module._default.SearchForWinner$Candidate $Heap@0) (and (=> (= (ControlFlow 0 41) (- 0 43)) (<= (LitInt 0) |s#0@0|)) (and (=> (= (ControlFlow 0 41) (- 0 42)) (<= |s#0@0| |n#0@0|)) (=> (= (ControlFlow 0 41) (- 0 40)) (<= |n#0@0| (|Seq#Length| |a#0@@3|))))))))))))))))))))
(let ((anon27_Else_correct  (=> (and (not |hasWinner#0|) (= (ControlFlow 0 53) 41)) anon8_correct)))
(let ((anon27_Then_correct  (=> (and |hasWinner#0| ($IsAlloc SeqType |a#0@@3| (TSeq _module._default.SearchForWinner$Candidate) $Heap@0)) (=> (and (and ($IsAlloc intType (int_2_U |s#0@0|) TInt $Heap@0) (= |##t#1@0| (|Seq#Length| |a#0@@3|))) (and ($IsAlloc intType (int_2_U |##t#1@0|) TInt $Heap@0) ($IsAllocBox |K#0| _module._default.SearchForWinner$Candidate $Heap@0))) (and (=> (= (ControlFlow 0 49) (- 0 52)) (<= (LitInt 0) |s#0@0|)) (and (=> (= (ControlFlow 0 49) (- 0 51)) (<= |s#0@0| |##t#1@0|)) (and (=> (= (ControlFlow 0 49) (- 0 50)) (<= |##t#1@0| (|Seq#Length| |a#0@@3|))) (=> (and (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| (|Seq#Length| |a#0@@3|) |K#0|) (= (ControlFlow 0 49) 41)) anon8_correct))))))))
(let ((anon6_correct  (=> (and (and (<= (LitInt 0) |s#0@0|) (<= |s#0@0| |n#0@0|)) (<= |n#0@0| (|Seq#Length| |a#0@@3|))) (and (=> (= (ControlFlow 0 54) 49) anon27_Then_correct) (=> (= (ControlFlow 0 54) 53) anon27_Else_correct)))))
(let ((anon26_Else_correct  (=> (and (not (and (<= (LitInt 0) |s#0@0|) (<= |s#0@0| |n#0@0|))) (= (ControlFlow 0 56) 54)) anon6_correct)))
(let ((anon26_Then_correct  (=> (and (and (<= (LitInt 0) |s#0@0|) (<= |s#0@0| |n#0@0|)) (= (ControlFlow 0 55) 54)) anon6_correct)))
(let ((anon25_Else_correct  (=> (< |s#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 58) 55) anon26_Then_correct) (=> (= (ControlFlow 0 58) 56) anon26_Else_correct)))))
(let ((anon25_Then_correct  (=> (<= (LitInt 0) |s#0@0|) (and (=> (= (ControlFlow 0 57) 55) anon26_Then_correct) (=> (= (ControlFlow 0 57) 56) anon26_Else_correct)))))
(let ((anon24_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 59) 57) anon25_Then_correct) (=> (= (ControlFlow 0 59) 58) anon25_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 17) (- 0 16)) (=> |hasWinner#0| (= |k#0@4| |K#0|)))))
(let ((anon31_Then_correct  (=> (= (|Seq#Length| |a#0@@3|) |n#0@2|) (and (=> (= (ControlFlow 0 24) (- 0 25)) |defass#k#0@0|) (=> |defass#k#0@0| (=> (and (= |k#0@4| |k#0@1|) (= (ControlFlow 0 24) 17)) GeneratedUnifiedExit_correct))))))
(let ((anon28_Then_correct  (=> (and (<= (|Seq#Length| |a#0@@3|) |n#0@0|) (= |t##0@0| (|Seq#Length| |a#0@@3|))) (and (=> (= (ControlFlow 0 18) (- 0 23)) |defass#k#0@0|) (=> |defass#k#0@0| (and (=> (= (ControlFlow 0 18) (- 0 22)) (<= (LitInt 0) |s#0@0|)) (=> (<= (LitInt 0) |s#0@0|) (and (=> (= (ControlFlow 0 18) (- 0 21)) (<= |s#0@0| |t##0@0|)) (=> (<= |s#0@0| |t##0@0|) (and (=> (= (ControlFlow 0 18) (- 0 20)) (<= |t##0@0| (|Seq#Length| |a#0@@3|))) (=> (<= |t##0@0| (|Seq#Length| |a#0@@3|)) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (or (not (= |K#0| |k#0@1|)) (not true)) (and (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |t##0@0| |K#0|) (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |t##0@0| |k#0@1|)))) (and (=> (or (not (= |K#0| |k#0@1|)) (not true)) (<= (+ (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@0| |t##0@0| |K#0|) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@0| |t##0@0| |k#0@1|)) (- |t##0@0| |s#0@0|))) (= $Heap@0 $Heap@1))) (and (=> (= (ControlFlow 0 18) (- 0 19)) |defass#k#0@0|) (=> |defass#k#0@0| (=> (and (= |k#0@4| |k#0@1|) (= (ControlFlow 0 18) 17)) GeneratedUnifiedExit_correct)))))))))))))))
(let ((anon21_correct  (and (=> (= (ControlFlow 0 3) (- 0 10)) (or (<= 0 |$decr$loop#00@1|) (= (- (|Seq#Length| |a#0@@3|) |n#0@4|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- (|Seq#Length| |a#0@@3|) |n#0@4|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 3) (- 0 9)) (< (- (|Seq#Length| |a#0@@3|) |n#0@4|) |$decr$loop#00@1|)) (=> (< (- (|Seq#Length| |a#0@@3|) |n#0@4|) |$decr$loop#00@1|) (=> (=> (and (and (<= (LitInt 0) |s#0@2|) (<= |s#0@2| |n#0@4|)) (<= |n#0@4| (|Seq#Length| |a#0@@3|))) (and (=> |hasWinner#0| (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@2| (|Seq#Length| |a#0@@3|) |K#0|)) (=> (=> |hasWinner#0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS $LZ) |a#0@@3| |s#0@2| (|Seq#Length| |a#0@@3|) |K#0|)) (- (|Seq#Length| |a#0@@3|) |s#0@2|))) (and (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@2| |n#0@4| |k#0@3|) (=> (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS $LZ) |a#0@@3| |s#0@2| |n#0@4| |k#0@3|)) (- |n#0@4| |s#0@2|)) (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@2| |n#0@4| |k#0@3|)))))) (and (=> (= (ControlFlow 0 3) (- 0 8)) (=> |$w$loop#0@0| (<= (LitInt 0) |s#0@2|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |s#0@2|)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (=> |$w$loop#0@0| (<= |s#0@2| |n#0@4|))) (=> (=> |$w$loop#0@0| (<= |s#0@2| |n#0@4|)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (=> |$w$loop#0@0| (<= |n#0@4| (|Seq#Length| |a#0@@3|)))) (=> (=> |$w$loop#0@0| (<= |n#0@4| (|Seq#Length| |a#0@@3|))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> |$w$loop#0@0| (=> |hasWinner#0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@2| (|Seq#Length| |a#0@@3|) |K#0|)) (- (|Seq#Length| |a#0@@3|) |s#0@2|))))) (=> (=> |$w$loop#0@0| (=> |hasWinner#0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@2| (|Seq#Length| |a#0@@3|) |K#0|)) (- (|Seq#Length| |a#0@@3|) |s#0@2|)))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#0@0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@2| |n#0@4| |k#0@3|)) (- |n#0@4| |s#0@2|)))) (=> (=> |$w$loop#0@0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@2| |n#0@4| |k#0@3|)) (- |n#0@4| |s#0@2|))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#0@0| (= |c#0@2| (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@2| |n#0@4| |k#0@3|)))))))))))))))))))))
(let ((anon20_correct  (=> (= |k#0@3| |k#0@2|) (=> (and (and (= |n#0@4| |n#0@3|) (= |c#0@2| |c#0@1|)) (and (= |s#0@2| |s#0@1|) (= (ControlFlow 0 12) 3))) anon21_correct))))
(let ((anon31_Else_correct  (=> (or (not (= (|Seq#Length| |a#0@@3|) |n#0@2|)) (not true)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (and (<= 0 |n#0@2|) (< |n#0@2| (|Seq#Length| |a#0@@3|)))) (=> (and (<= 0 |n#0@2|) (< |n#0@2| (|Seq#Length| |a#0@@3|))) (=> (and (and (and (= |$rhs#0_1_1_0@1| (|Seq#Index| |a#0@@3| |n#0@2|)) (= |$rhs#0_1_1_1@1| (+ |n#0@2| 1))) (and (= |$rhs#0_1_1_2@1| (LitInt 1)) (= |k#0@2| |$rhs#0_1_1_0@1|))) (and (and (= |n#0@3| |$rhs#0_1_1_1@1|) (= |c#0@1| |$rhs#0_1_1_2@1|)) (and (= |s#0@1| |n#0@2|) (= (ControlFlow 0 14) 12)))) anon20_correct))))))
(let ((anon30_Else_correct  (=> (and (>= (- (+ |n#0@0| 1) |s#0@0|) (Mul (LitInt 2) |c#0@0|)) (= |n#0@2| (+ |n#0@0| 1))) (and (=> (= (ControlFlow 0 26) (- 0 34)) |defass#k#0@0|) (=> |defass#k#0@0| (and (=> (= (ControlFlow 0 26) (- 0 33)) (<= (LitInt 0) |s#0@0|)) (=> (<= (LitInt 0) |s#0@0|) (and (=> (= (ControlFlow 0 26) (- 0 32)) (<= |s#0@0| |n#0@2|)) (=> (<= |s#0@0| |n#0@2|) (and (=> (= (ControlFlow 0 26) (- 0 31)) (<= |n#0@2| (|Seq#Length| |a#0@@3|))) (=> (<= |n#0@2| (|Seq#Length| |a#0@@3|)) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (=> (or (not (= |K#0| |k#0@1|)) (not true)) (and (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |n#0@2| |K#0|) (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |n#0@2| |k#0@1|))) (=> (or (not (= |K#0| |k#0@1|)) (not true)) (<= (+ (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@0| |n#0@2| |K#0|) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@0| |n#0@2| |k#0@1|)) (- |n#0@2| |s#0@0|)))) (and (= $Heap@0 $Heap@2) (= |u##0_1_1_0@1| (|Seq#Length| |a#0@@3|)))) (and (=> (= (ControlFlow 0 26) (- 0 30)) (<= (LitInt 0) |s#0@0|)) (=> (<= (LitInt 0) |s#0@0|) (and (=> (= (ControlFlow 0 26) (- 0 29)) (<= |s#0@0| |n#0@2|)) (=> (<= |s#0@0| |n#0@2|) (and (=> (= (ControlFlow 0 26) (- 0 28)) (<= |n#0@2| |u##0_1_1_0@1|)) (=> (<= |n#0@2| |u##0_1_1_0@1|) (and (=> (= (ControlFlow 0 26) (- 0 27)) (<= |u##0_1_1_0@1| (|Seq#Length| |a#0@@3|))) (=> (<= |u##0_1_1_0@1| (|Seq#Length| |a#0@@3|)) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |n#0@2| |K#0|) (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |n#0@2| |u##0_1_1_0@1| |K#0|)) (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |u##0_1_1_0@1| |K#0|)) (and (= (+ (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@0| |n#0@2| |K#0|) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |n#0@2| |u##0_1_1_0@1| |K#0|)) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@0| |u##0_1_1_0@1| |K#0|)) (= $Heap@2 $Heap@3))) (and (=> (= (ControlFlow 0 26) 24) anon31_Then_correct) (=> (= (ControlFlow 0 26) 14) anon31_Else_correct)))))))))))))))))))))))))
(let ((anon30_Then_correct  (=> (> (Mul (LitInt 2) |c#0@0|) (- (+ |n#0@0| 1) |s#0@0|)) (=> (and (= |n#0@1| (+ |n#0@0| 1)) (= |k#0@2| |k#0@1|)) (=> (and (and (= |n#0@3| |n#0@1|) (= |c#0@1| |c#0@0|)) (and (= |s#0@1| |s#0@0|) (= (ControlFlow 0 13) 12))) anon20_correct)))))
(let ((anon29_Else_correct  (=> (or (not (= (|Seq#Index| |a#0@@3| |n#0@0|) |k#0@1|)) (not true)) (and (=> (= (ControlFlow 0 35) 13) anon30_Then_correct) (=> (= (ControlFlow 0 35) 26) anon30_Else_correct)))))
(let ((anon29_Then_correct  (=> (and (and (and (= (|Seq#Index| |a#0@@3| |n#0@0|) |k#0@1|) (= |$rhs#0_0_0@1| (+ |n#0@0| 1))) (and (= |$rhs#0_0_1@1| (+ |c#0@0| 1)) (= |k#0@3| |k#0@1|))) (and (and (= |n#0@4| |$rhs#0_0_0@1|) (= |c#0@2| |$rhs#0_0_1@1|)) (and (= |s#0@2| |s#0@0|) (= (ControlFlow 0 11) 3)))) anon21_correct)))
(let ((anon28_Else_correct  (=> (and (< |n#0@0| (|Seq#Length| |a#0@@3|)) (= |$decr$loop#00@1| (- (|Seq#Length| |a#0@@3|) |n#0@0|))) (and (=> (= (ControlFlow 0 36) (- 0 38)) (and (<= 0 |n#0@0|) (< |n#0@0| (|Seq#Length| |a#0@@3|)))) (=> (and (<= 0 |n#0@0|) (< |n#0@0| (|Seq#Length| |a#0@@3|))) (and (=> (= (ControlFlow 0 36) (- 0 37)) |defass#k#0@0|) (=> |defass#k#0@0| (and (=> (= (ControlFlow 0 36) 11) anon29_Then_correct) (=> (= (ControlFlow 0 36) 35) anon29_Else_correct)))))))))
(let ((anon24_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 39) 18) anon28_Then_correct) (=> (= (ControlFlow 0 39) 36) anon28_Else_correct)))))
(let ((anon23_LoopBody_correct  (and (=> (= (ControlFlow 0 60) 59) anon24_Then_correct) (=> (= (ControlFlow 0 60) 39) anon24_Else_correct))))
(let ((anon23_LoopDone_correct true))
(let ((anon23_LoopHead_correct  (=> (=> |defass#k#0@0| (and ($IsBox |k#0@1| _module._default.SearchForWinner$Candidate) ($IsAllocBox |k#0@1| _module._default.SearchForWinner$Candidate $Heap@0))) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (and (and (and (and (and (and (and (and |defass#k#0@0| (not false)) (<= 1 |n#0@0|)) (<= 1 |c#0@0|)) (<= 0 |s#0@0|)) (= |$rhs#0@0| 1)) (= |$rhs#1@0| 1)) (= |$rhs#2@0| 0)) true) (and (=> |$w$loop#0@0| (<= (LitInt 0) |s#0@0|)) (=> |$w$loop#0@0| (<= |s#0@0| |n#0@0|)))) (and (and (=> |$w$loop#0@0| (<= |n#0@0| (|Seq#Length| |a#0@@3|))) (=> |$w$loop#0@0| (=> |hasWinner#0| (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| (|Seq#Length| |a#0@@3|) |K#0|)))) (and (=> |$w$loop#0@0| (=> |hasWinner#0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@0| (|Seq#Length| |a#0@@3|) |K#0|)) (- (|Seq#Length| |a#0@@3|) |s#0@0|)))) (=> |$w$loop#0@0| (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |n#0@0| |k#0@1|))))) (and (and (and (=> |$w$loop#0@0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@0| |n#0@0| |k#0@1|)) (- |n#0@0| |s#0@0|))) (=> |$w$loop#0@0| (|_module.__default.Count#canCall| _module._default.SearchForWinner$Candidate |a#0@@3| |s#0@0| |n#0@0| |k#0@1|))) (and (=> |$w$loop#0@0| (= |c#0@0| (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |s#0@0| |n#0@0| |k#0@1|))) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
)))) (and (and ($HeapSucc $Heap $Heap@0) (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) $f@@0))
))) (and (=> true |defass#k#0@0|) (<= (- (|Seq#Length| |a#0@@3|) |n#0@0|) |$decr_init$loop#00@0|))))) (and (=> (= (ControlFlow 0 61) 1) anon23_LoopDone_correct) (=> (= (ControlFlow 0 61) 60) anon23_LoopBody_correct)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 62) (- 0 69)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |a#0@@3|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |a#0@@3|))) (=> (= |k#0@0| (|Seq#Index| |a#0@@3| (LitInt 0))) (=> (and (and (= |$rhs#0@0| (LitInt 1)) (= |$rhs#1@0| (LitInt 1))) (and (= |$rhs#2@0| (LitInt 0)) (= |$decr_init$loop#00@0| (- (|Seq#Length| |a#0@@3|) |$rhs#0@0|)))) (and (=> (= (ControlFlow 0 62) (- 0 68)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#2@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#2@0|)) (and (=> (= (ControlFlow 0 62) (- 0 67)) (=> |$w$loop#0@0| (<= |$rhs#2@0| |$rhs#0@0|))) (=> (=> |$w$loop#0@0| (<= |$rhs#2@0| |$rhs#0@0|)) (and (=> (= (ControlFlow 0 62) (- 0 66)) (=> |$w$loop#0@0| (<= |$rhs#0@0| (|Seq#Length| |a#0@@3|)))) (=> (=> |$w$loop#0@0| (<= |$rhs#0@0| (|Seq#Length| |a#0@@3|))) (and (=> (= (ControlFlow 0 62) (- 0 65)) (=> |$w$loop#0@0| (=> |hasWinner#0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |$rhs#2@0| (|Seq#Length| |a#0@@3|) |K#0|)) (- (|Seq#Length| |a#0@@3|) |$rhs#2@0|))))) (=> (=> |$w$loop#0@0| (=> |hasWinner#0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |$rhs#2@0| (|Seq#Length| |a#0@@3|) |K#0|)) (- (|Seq#Length| |a#0@@3|) |$rhs#2@0|)))) (and (=> (= (ControlFlow 0 62) (- 0 64)) (=> |$w$loop#0@0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |$rhs#2@0| |$rhs#0@0| |k#0@0|)) (- |$rhs#0@0| |$rhs#2@0|)))) (=> (=> |$w$loop#0@0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |$rhs#2@0| |$rhs#0@0| |k#0@0|)) (- |$rhs#0@0| |$rhs#2@0|))) (and (=> (= (ControlFlow 0 62) (- 0 63)) (=> |$w$loop#0@0| (= |$rhs#1@0| (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |$rhs#2@0| |$rhs#0@0| |k#0@0|)))) (=> (=> |$w$loop#0@0| (= |$rhs#1@0| (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| |$rhs#2@0| |$rhs#0@0| |k#0@0|))) (=> (= (ControlFlow 0 62) 61) anon23_LoopHead_correct))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is SeqType |a#0@@3| (TSeq _module._default.SearchForWinner$Candidate)) ($IsAlloc SeqType |a#0@@3| (TSeq _module._default.SearchForWinner$Candidate) $Heap))) (=> (and (and (and ($IsBox |K#0| _module._default.SearchForWinner$Candidate) ($IsAllocBox |K#0| _module._default.SearchForWinner$Candidate $Heap)) (=> |defass#k#0| (and ($IsBox |k#0| _module._default.SearchForWinner$Candidate) ($IsAllocBox |k#0| _module._default.SearchForWinner$Candidate $Heap)))) (and (and (= 2 $FunctionContextHeight) (or (not (= (|Seq#Length| |a#0@@3|) 0)) (not true))) (and (=> |hasWinner#0| (> (Mul (LitInt 2) (_module.__default.Count _module._default.SearchForWinner$Candidate ($LS ($LS $LZ)) |a#0@@3| (LitInt 0) (|Seq#Length| |a#0@@3|) |K#0|)) (|Seq#Length| |a#0@@3|))) (= (ControlFlow 0 70) 62)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
