(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@37 (T@U T@U) Bool)
(declare-fun $generated@@38 (T@T T@U T@U) Bool)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 (T@U Int) T@U)
(declare-fun $generated@@51 () Int)
(declare-fun $generated@@52 (T@U T@U Int Int) Int)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@54 (T@U Int Int) Bool)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@75 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@76 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 (T@T T@T) T@T)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@81 (T@T) T@T)
(declare-fun $generated@@82 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 ($generated@@27 $generated@@30 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@27 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@31 ($generated@@28 $generated@@36 $generated@@33) $generated@@34 $generated@@35) ($generated@@32 $generated@@36 $generated@@33 $generated@@34 $generated@@35))
 :pattern ( ($generated@@31 ($generated@@28 $generated@@36 $generated@@33) $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@39 T@U) ) (!  (=> ($generated@@37 $generated@@39 $generated) (and (= ($generated@@28 $generated@@5 ($generated@@27 $generated@@5 $generated@@39)) $generated@@39) ($generated@@38 $generated@@5 ($generated@@27 $generated@@5 $generated@@39) $generated)))
 :pattern ( ($generated@@37 $generated@@39 $generated))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@37 ($generated@@28 $generated@@42 $generated@@40) $generated@@41) ($generated@@38 $generated@@42 $generated@@40 $generated@@41))
 :pattern ( ($generated@@37 ($generated@@28 $generated@@42 $generated@@40) $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (! (<= 0 ($generated@@20 $generated@@43))
 :pattern ( ($generated@@20 $generated@@43))
)))
(assert (= ($generated@@3 $generated@@44) 3))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@32 $generated@@44 $generated@@47 ($generated@@45 $generated@@48) $generated@@49) (forall (($generated@@50 Int) ) (!  (=> (and (<= 0 $generated@@50) (< $generated@@50 ($generated@@20 $generated@@47))) ($generated@@31 ($generated@@46 $generated@@47 $generated@@50) $generated@@48 $generated@@49))
 :pattern ( ($generated@@46 $generated@@47 $generated@@50))
)))
 :pattern ( ($generated@@32 $generated@@44 $generated@@47 ($generated@@45 $generated@@48) $generated@@49))
)))
(assert  (=> (<= 0 $generated@@51) (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 Int) ($generated@@58 Int) ) (!  (=> (or ($generated@@54 ($generated@@24 $generated@@44 $generated@@56) ($generated@@22 $generated@@57) ($generated@@22 $generated@@58)) (and (< 0 $generated@@51) (and ($generated@@38 $generated@@44 $generated@@56 ($generated@@45 $generated)) (and (and (<= ($generated@@22 0) ($generated@@22 $generated@@57)) (<= ($generated@@22 $generated@@57) ($generated@@22 $generated@@58))) (<= ($generated@@22 $generated@@58) ($generated@@20 ($generated@@24 $generated@@44 $generated@@56))))))) (and (=> (or (not (= ($generated@@22 $generated@@57) ($generated@@22 $generated@@58))) (not true)) ($generated@@54 ($generated@@24 $generated@@44 $generated@@56) ($generated@@22 $generated@@57) ($generated@@22 (- $generated@@58 1)))) (= ($generated@@52 ($generated@@53 $generated@@55) ($generated@@24 $generated@@44 $generated@@56) ($generated@@22 $generated@@57) ($generated@@22 $generated@@58)) (ite (= ($generated@@22 $generated@@57) ($generated@@22 $generated@@58)) 0 (+ ($generated@@52 ($generated@@53 $generated@@55) ($generated@@24 $generated@@44 $generated@@56) ($generated@@22 $generated@@57) ($generated@@22 (- $generated@@58 1))) ($generated@@10 ($generated@@27 $generated@@5 ($generated@@46 ($generated@@24 $generated@@44 $generated@@56) ($generated@@22 (- $generated@@58 1))))))))))
 :weight 3
 :pattern ( ($generated@@52 ($generated@@53 $generated@@55) ($generated@@24 $generated@@44 $generated@@56) ($generated@@22 $generated@@57) ($generated@@22 $generated@@58)))
))))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@59 ($generated@@45 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@45 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@19 ($generated@@45 $generated@@61)) $generated@@1)
 :pattern ( ($generated@@45 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@27 $generated@@63 ($generated@@28 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@28 $generated@@63 $generated@@62))
)))
(assert  (=> (<= 0 $generated@@51) (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 Int) ($generated@@67 Int) ) (!  (=> (or ($generated@@54 $generated@@65 $generated@@66 $generated@@67) (and (< 0 $generated@@51) (and ($generated@@38 $generated@@44 $generated@@65 ($generated@@45 $generated)) (and (and (<= ($generated@@22 0) $generated@@66) (<= $generated@@66 $generated@@67)) (<= $generated@@67 ($generated@@20 $generated@@65)))))) (and (=> (or (not (= $generated@@66 $generated@@67)) (not true)) ($generated@@54 $generated@@65 $generated@@66 (- $generated@@67 1))) (= ($generated@@52 ($generated@@53 $generated@@64) $generated@@65 $generated@@66 $generated@@67) (ite (= $generated@@66 $generated@@67) 0 (+ ($generated@@52 $generated@@64 $generated@@65 $generated@@66 (- $generated@@67 1)) ($generated@@10 ($generated@@27 $generated@@5 ($generated@@46 $generated@@65 (- $generated@@67 1)))))))))
 :pattern ( ($generated@@52 ($generated@@53 $generated@@64) $generated@@65 $generated@@66 $generated@@67))
))))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 Int) ($generated@@71 Int) ) (! (= ($generated@@52 ($generated@@53 $generated@@68) $generated@@69 $generated@@70 $generated@@71) ($generated@@52 $generated@@68 $generated@@69 $generated@@70 $generated@@71))
 :pattern ( ($generated@@52 ($generated@@53 $generated@@68) $generated@@69 $generated@@70 $generated@@71))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@72 $generated@@83 $generated@@84 $generated@@85 ($generated@@79 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@88 $generated@@89) $generated@@86)
 :weight 0
)) (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@72 $generated@@90 $generated@@91 $generated@@92 ($generated@@79 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@72 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@72 $generated@@99 $generated@@100 $generated@@101 ($generated@@79 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@72 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)))) (= ($generated@@3 $generated@@73) 4)) (= ($generated@@3 $generated@@74) 5)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@76 $generated@@108 $generated@@109 ($generated@@80 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@110) $generated@@112) $generated@@110)
 :weight 0
))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@117 $generated@@118) (= ($generated@@76 $generated@@113 $generated@@114 ($generated@@80 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@115) $generated@@118) ($generated@@76 $generated@@113 $generated@@114 $generated@@116 $generated@@118)))
 :weight 0
))) (= ($generated@@3 $generated@@77) 6)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (= ($generated@@3 ($generated@@78 $generated@@119 $generated@@120)) 7))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (! (= ($generated@@81 ($generated@@78 $generated@@121 $generated@@122)) $generated@@121)
 :pattern ( ($generated@@78 $generated@@121 $generated@@122))
))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@82 ($generated@@78 $generated@@123 $generated@@124)) $generated@@124)
 :pattern ( ($generated@@78 $generated@@123 $generated@@124))
))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 Bool) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@8 ($generated@@72 $generated@@73 $generated@@74 $generated@@4 ($generated@@75 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))  (=> (and (or (not (= $generated@@129 $generated@@125)) (not true)) ($generated@@8 ($generated@@27 $generated@@4 ($generated@@76 $generated@@74 $generated@@77 ($generated@@76 $generated@@73 ($generated@@78 $generated@@74 $generated@@77) $generated@@126 $generated@@129) $generated@@127)))) $generated@@128))
 :pattern ( ($generated@@72 $generated@@73 $generated@@74 $generated@@4 ($generated@@75 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> ($generated@@37 $generated@@131 ($generated@@45 $generated@@132)) (and (= ($generated@@28 $generated@@44 ($generated@@27 $generated@@44 $generated@@131)) $generated@@131) ($generated@@38 $generated@@44 ($generated@@27 $generated@@44 $generated@@131) ($generated@@45 $generated@@132))))
 :pattern ( ($generated@@37 $generated@@131 ($generated@@45 $generated@@132)))
)))
(assert (forall (($generated@@133 Int) ) (! (= ($generated@@28 $generated@@5 ($generated@@9 ($generated@@22 $generated@@133))) ($generated@@24 $generated@@77 ($generated@@28 $generated@@5 ($generated@@9 $generated@@133))))
 :pattern ( ($generated@@28 $generated@@5 ($generated@@9 ($generated@@22 $generated@@133))))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@T) ) (! (= ($generated@@28 $generated@@135 ($generated@@24 $generated@@135 $generated@@134)) ($generated@@24 $generated@@77 ($generated@@28 $generated@@135 $generated@@134)))
 :pattern ( ($generated@@28 $generated@@135 ($generated@@24 $generated@@135 $generated@@134)))
)))
(assert (forall (($generated@@136 T@U) ) (!  (=> (= ($generated@@20 $generated@@136) 0) (= $generated@@136 $generated@@21))
 :pattern ( ($generated@@20 $generated@@136))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (! ($generated@@32 $generated@@5 $generated@@138 $generated $generated@@137)
 :pattern ( ($generated@@32 $generated@@5 $generated@@138 $generated $generated@@137))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@38 $generated@@44 $generated@@139 ($generated@@45 $generated@@140)) (forall (($generated@@141 Int) ) (!  (=> (and (<= 0 $generated@@141) (< $generated@@141 ($generated@@20 $generated@@139))) ($generated@@37 ($generated@@46 $generated@@139 $generated@@141) $generated@@140))
 :pattern ( ($generated@@46 $generated@@139 $generated@@141))
)))
 :pattern ( ($generated@@38 $generated@@44 $generated@@139 ($generated@@45 $generated@@140)))
)))
(assert (forall (($generated@@142 T@U) ) (! ($generated@@38 $generated@@5 $generated@@142 $generated)
 :pattern ( ($generated@@38 $generated@@5 $generated@@142 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 (T@U) Int)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let (($generated@@153  (=> (or (not (= $generated@@143 $generated@@144)) (not true)) (=> (and (and ($generated@@32 $generated@@44 $generated@@145 ($generated@@45 $generated) $generated@@146) ($generated@@32 $generated@@5 ($generated@@9 $generated@@143) $generated $generated@@146)) (and (= $generated@@147 (- $generated@@144 1)) ($generated@@32 $generated@@5 ($generated@@9 $generated@@147) $generated $generated@@146))) (and (=> (= (ControlFlow 0 4) (- 0 10)) (<= ($generated@@22 0) $generated@@143)) (and (=> (= (ControlFlow 0 4) (- 0 9)) (<= $generated@@143 $generated@@147)) (and (=> (= (ControlFlow 0 4) (- 0 8)) (<= $generated@@147 ($generated@@20 $generated@@145))) (=> (and (and (<= ($generated@@22 0) $generated@@143) (<= $generated@@143 $generated@@147)) (<= $generated@@147 ($generated@@20 $generated@@145))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (or (or (<= 0 $generated@@143) (< ($generated@@148 $generated@@145) ($generated@@148 $generated@@145))) (= $generated@@143 $generated@@143))) (=> (or (or (<= 0 $generated@@143) (< ($generated@@148 $generated@@145) ($generated@@148 $generated@@145))) (= $generated@@143 $generated@@143)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (or (or (<= 0 $generated@@144) (< ($generated@@148 $generated@@145) ($generated@@148 $generated@@145))) (< $generated@@143 $generated@@143)) (= $generated@@147 $generated@@144))) (=> (or (or (or (<= 0 $generated@@144) (< ($generated@@148 $generated@@145) ($generated@@148 $generated@@145))) (< $generated@@143 $generated@@143)) (= $generated@@147 $generated@@144)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (< ($generated@@148 $generated@@145) ($generated@@148 $generated@@145)) (and (= ($generated@@148 $generated@@145) ($generated@@148 $generated@@145)) (or (< $generated@@143 $generated@@143) (and (= $generated@@143 $generated@@143) (< $generated@@147 $generated@@144)))))) (=> (or (< ($generated@@148 $generated@@145) ($generated@@148 $generated@@145)) (and (= ($generated@@148 $generated@@145) ($generated@@148 $generated@@145)) (or (< $generated@@143 $generated@@143) (and (= $generated@@143 $generated@@143) (< $generated@@147 $generated@@144))))) (=> (and ($generated@@54 $generated@@145 $generated@@143 (- $generated@@144 1)) (= (ControlFlow 0 4) (- 0 3))) (and (<= 0 (- $generated@@144 1)) (< (- $generated@@144 1) ($generated@@20 $generated@@145))))))))))))))))))
(let (($generated@@154 true))
(let (($generated@@155 true))
(let (($generated@@156  (=> (and (and (<= ($generated@@22 0) $generated@@143) (<= $generated@@143 $generated@@144)) (<= $generated@@144 ($generated@@20 $generated@@145))) (and (and (=> (= (ControlFlow 0 11) 1) $generated@@155) (=> (= (ControlFlow 0 11) 2) $generated@@154)) (=> (= (ControlFlow 0 11) 4) $generated@@153)))))
(let (($generated@@157  (=> (and (not (and (<= ($generated@@22 0) $generated@@143) (<= $generated@@143 $generated@@144))) (= (ControlFlow 0 13) 11)) $generated@@156)))
(let (($generated@@158  (=> (and (and (<= ($generated@@22 0) $generated@@143) (<= $generated@@143 $generated@@144)) (= (ControlFlow 0 12) 11)) $generated@@156)))
(let (($generated@@159  (=> (< $generated@@143 ($generated@@22 0)) (and (=> (= (ControlFlow 0 15) 12) $generated@@158) (=> (= (ControlFlow 0 15) 13) $generated@@157)))))
(let (($generated@@160  (=> (<= ($generated@@22 0) $generated@@143) (and (=> (= (ControlFlow 0 14) 12) $generated@@158) (=> (= (ControlFlow 0 14) 13) $generated@@157)))))
(let (($generated@@161  (=> (= $generated@@149 ($generated@@75 $generated@@150 $generated@@146 $generated@@2 false)) (and (=> (= (ControlFlow 0 16) 14) $generated@@160) (=> (= (ControlFlow 0 16) 15) $generated@@159)))))
(let (($generated@@162  (=> (and (and (and ($generated@@151 $generated@@146) ($generated@@152 $generated@@146)) ($generated@@38 $generated@@44 $generated@@145 ($generated@@45 $generated))) (and (= 0 $generated@@51) (= (ControlFlow 0 17) 16))) $generated@@161)))
$generated@@162)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
