(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U Int) Int)
(declare-fun $generated@@24 (Int) Bool)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@T T@T) T@T)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@U T@U) Bool)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@73 (Int Int) Int)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@119 (T@U) T@U)
(declare-fun $generated@@120 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21)
 :pattern ( ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (or ($generated@@24 $generated@@27) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@27))) (<= ($generated@@25 0) ($generated@@23 $generated@@26 $generated@@27)))
 :pattern ( ($generated@@23 $generated@@26 $generated@@27))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@29 $generated@@38 $generated@@39 ($generated@@35 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@42) $generated@@40)
 :weight 0
)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (or (= $generated@@47 $generated@@48) (= ($generated@@29 $generated@@43 $generated@@44 ($generated@@35 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@45) $generated@@48) ($generated@@29 $generated@@43 $generated@@44 $generated@@46 $generated@@48)))
 :weight 0
))) (= ($generated@@2 $generated@@30) 3)) (= ($generated@@2 $generated@@31) 4)) (= ($generated@@2 $generated@@32) 5)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (= ($generated@@2 ($generated@@33 $generated@@49 $generated@@50)) 6))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@36 ($generated@@33 $generated@@51 $generated@@52)) $generated@@51)
 :pattern ( ($generated@@33 $generated@@51 $generated@@52))
))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@37 ($generated@@33 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@33 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> ($generated@@28 $generated@@55 $generated@@56) (forall (($generated@@57 T@U) ) (!  (=> ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@55 $generated@@57) $generated))) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@56 $generated@@57) $generated))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@56 $generated@@57) $generated))
)))
 :pattern ( ($generated@@28 $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@58 Int) ) (! (= ($generated@@25 $generated@@58) $generated@@58)
 :pattern ( ($generated@@25 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 $generated@@60) $generated@@60)
 :pattern ( ($generated@@59 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 ($generated@@34 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@34 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@65 $generated@@4 $generated@@66 $generated@@19) (<= ($generated@@25 0) ($generated@@9 $generated@@66)))
 :pattern ( ($generated@@65 $generated@@4 $generated@@66 $generated@@19))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (!  (=> ($generated@@28 $generated@@67 $generated@@68) (=> ($generated@@18 $generated@@71 $generated@@69 $generated@@70 $generated@@67) ($generated@@18 $generated@@71 $generated@@69 $generated@@70 $generated@@68)))
 :pattern ( ($generated@@28 $generated@@67 $generated@@68) ($generated@@18 $generated@@71 $generated@@69 $generated@@70 $generated@@67))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@74 T@U) ($generated@@75 Int) ) (!  (=> (or ($generated@@24 $generated@@75) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@75))) (and (=> (or (not (= $generated@@75 ($generated@@25 0))) (not true)) ($generated@@24 (- $generated@@75 1))) (= ($generated@@23 ($generated@@72 $generated@@74) $generated@@75) (ite (= $generated@@75 ($generated@@25 0)) 1 ($generated@@73 $generated@@75 ($generated@@23 $generated@@74 (- $generated@@75 1)))))))
 :pattern ( ($generated@@23 ($generated@@72 $generated@@74) $generated@@75))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (=> (or (not (= $generated@@76 $generated@@78)) (not true)) (=> (and ($generated@@28 $generated@@76 $generated@@77) ($generated@@28 $generated@@77 $generated@@78)) ($generated@@28 $generated@@76 $generated@@78)))
 :pattern ( ($generated@@28 $generated@@76 $generated@@77) ($generated@@28 $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@34 $generated@@80 ($generated@@62 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@62 $generated@@80 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 Int) ) (! (= ($generated@@23 ($generated@@72 $generated@@81) $generated@@82) ($generated@@23 $generated@@81 $generated@@82))
 :pattern ( ($generated@@23 ($generated@@72 $generated@@81) $generated@@82))
)))
(assert  (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@83 $generated@@86 $generated@@87 $generated@@88 ($generated@@85 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@91 $generated@@92) $generated@@89)
 :weight 0
)) (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@83 $generated@@93 $generated@@94 $generated@@95 ($generated@@85 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@83 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@83 $generated@@102 $generated@@103 $generated@@104 ($generated@@85 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@83 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)))))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 Bool) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@7 ($generated@@83 $generated@@32 $generated@@30 $generated@@3 ($generated@@84 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))  (=> (and (or (not (= $generated@@115 $generated@@111)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@112 $generated@@115) $generated@@113)))) $generated@@114))
 :pattern ( ($generated@@83 $generated@@32 $generated@@30 $generated@@3 ($generated@@84 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))
)))
(assert (forall (($generated@@117 Int) ($generated@@118 Int) ) (! (= ($generated@@73 $generated@@117 $generated@@118) (* $generated@@117 $generated@@118))
 :pattern ( ($generated@@73 $generated@@117 $generated@@118))
)))
(assert (= ($generated@@119 $generated@@19) $generated@@0))
(assert (= ($generated@@120 $generated@@19) $generated@@1))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@62 $generated@@4 ($generated@@8 ($generated@@25 $generated@@121))) ($generated@@59 $generated@@31 ($generated@@62 $generated@@4 ($generated@@8 $generated@@121))))
 :pattern ( ($generated@@62 $generated@@4 ($generated@@8 ($generated@@25 $generated@@121))))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@T) ) (! (= ($generated@@62 $generated@@123 ($generated@@59 $generated@@123 $generated@@122)) ($generated@@59 $generated@@31 ($generated@@62 $generated@@123 $generated@@122)))
 :pattern ( ($generated@@62 $generated@@123 ($generated@@59 $generated@@123 $generated@@122)))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@124 T@U) ($generated@@125 Int) ) (!  (=> (or ($generated@@24 ($generated@@25 $generated@@125)) (and (< 0 $generated@@22) (<= ($generated@@25 0) $generated@@125))) (and (=> (or (not (= ($generated@@25 $generated@@125) ($generated@@25 0))) (not true)) ($generated@@24 ($generated@@25 (- $generated@@125 1)))) (= ($generated@@23 ($generated@@72 $generated@@124) ($generated@@25 $generated@@125)) (ite (= ($generated@@25 $generated@@125) ($generated@@25 0)) 1 ($generated@@73 ($generated@@25 $generated@@125) ($generated@@25 ($generated@@23 ($generated@@72 $generated@@124) ($generated@@25 (- $generated@@125 1)))))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@72 $generated@@124) ($generated@@25 $generated@@125)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () Bool)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () Int)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () Bool)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 (T@U) Bool)
(declare-fun $generated@@149 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 38) (let (($generated@@150  (=> (= (ControlFlow 0 30) (- 0 29)) (= $generated@@126 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@128)))))
(let (($generated@@151  (=> (<= $generated@@128 $generated@@129) (=> (and (= $generated@@126 $generated@@130) (= (ControlFlow 0 31) 30)) $generated@@150))))
(let (($generated@@152 true))
(let (($generated@@153  (=> (and (or (not (= $generated@@130 ($generated@@23 ($generated@@72 $generated@@127) $generated@@129))) (not true)) (= (ControlFlow 0 20) 17)) $generated@@152)))
(let (($generated@@154  (=> (= $generated@@130 ($generated@@23 ($generated@@72 $generated@@127) $generated@@129)) (and (=> (= (ControlFlow 0 18) (- 0 19)) ($generated@@65 $generated@@4 ($generated@@8 $generated@@129) $generated@@19)) (=> ($generated@@65 $generated@@4 ($generated@@8 $generated@@129) $generated@@19) (=> ($generated@@18 $generated@@4 ($generated@@8 $generated@@129) $generated@@19 $generated@@131) (=> (and ($generated@@24 $generated@@129) (= (ControlFlow 0 18) 17)) $generated@@152)))))))
(let (($generated@@155  (=> (and (not $generated@@132) (<= $generated@@133 (+ $generated@@129 1))) (and (=> (= (ControlFlow 0 21) (- 0 22)) ($generated@@65 $generated@@4 ($generated@@8 $generated@@129) $generated@@19)) (=> ($generated@@65 $generated@@4 ($generated@@8 $generated@@129) $generated@@19) (=> (and ($generated@@18 $generated@@4 ($generated@@8 $generated@@129) $generated@@19 $generated@@131) ($generated@@24 $generated@@129)) (and (=> (= (ControlFlow 0 21) 18) $generated@@154) (=> (= (ControlFlow 0 21) 20) $generated@@153))))))))
(let (($generated@@156  (=> (and (and (< $generated@@133 (+ $generated@@129 1)) (= $generated@@134 (- (+ $generated@@129 1) $generated@@133))) (and (= $generated@@135 (+ $generated@@136 $generated@@130)) (= $generated@@137 (+ $generated@@133 1)))) (and (=> (= (ControlFlow 0 11) (- 0 15)) (or (<= 0 $generated@@134) (= (- (+ $generated@@129 1) $generated@@137) $generated@@134))) (=> (or (<= 0 $generated@@134) (= (- (+ $generated@@129 1) $generated@@137) $generated@@134)) (and (=> (= (ControlFlow 0 11) (- 0 14)) (< (- (+ $generated@@129 1) $generated@@137) $generated@@134)) (=> (< (- (+ $generated@@129 1) $generated@@137) $generated@@134) (=> (=> (<= $generated@@137 (+ $generated@@129 1)) (and ($generated@@24 $generated@@129) (=> (= $generated@@130 ($generated@@23 ($generated@@72 $generated@@127) $generated@@129)) ($generated@@24 $generated@@129)))) (and (=> (= (ControlFlow 0 11) (- 0 13)) (=> $generated@@132 (<= $generated@@137 (+ $generated@@129 1)))) (=> (=> $generated@@132 (<= $generated@@137 (+ $generated@@129 1))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (=> $generated@@132 (= $generated@@130 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129)))) (=> (=> $generated@@132 (= $generated@@130 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129))) (=> (= (ControlFlow 0 11) (- 0 10)) (=> $generated@@132 (= $generated@@135 ($generated@@73 $generated@@137 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129)))))))))))))))))
(let (($generated@@157  (=> (and (<= (+ $generated@@129 1) $generated@@133) (= $generated@@138 (+ $generated@@129 1))) (and (=> (= (ControlFlow 0 6) (- 0 9)) (or (<= 0 $generated@@139) (= (- $generated@@128 $generated@@138) $generated@@139))) (=> (or (<= 0 $generated@@139) (= (- $generated@@128 $generated@@138) $generated@@139)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (< (- $generated@@128 $generated@@138) $generated@@139)) (=> (< (- $generated@@128 $generated@@138) $generated@@139) (=> (=> (<= $generated@@138 $generated@@128) ($generated@@24 $generated@@138)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> $generated@@140 (<= $generated@@138 $generated@@128))) (=> (=> $generated@@140 (<= $generated@@138 $generated@@128)) (=> (= (ControlFlow 0 6) (- 0 5)) (=> $generated@@140 (= $generated@@136 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@138))))))))))))))
(let (($generated@@158  (=> $generated@@132 (and (=> (= (ControlFlow 0 16) 6) $generated@@157) (=> (= (ControlFlow 0 16) 11) $generated@@156)))))
(let (($generated@@159  (and (=> (= (ControlFlow 0 23) 21) $generated@@155) (=> (= (ControlFlow 0 23) 16) $generated@@158))))
(let (($generated@@160 true))
(let (($generated@@161  (=> (and (and (and (and (and (and (and (and (and (and (<= 1 $generated@@136) (not false)) (<= 1 $generated@@129)) (<= 0 $generated@@141)) $generated@@140) (<= 1 $generated@@130)) (<= 1 $generated@@133)) (<= 1 $generated@@130)) (= $generated@@142 1)) (<= 1 $generated@@143)) (and (and (and (=> $generated@@132 (<= $generated@@133 (+ $generated@@129 1))) (=> $generated@@132 (and ($generated@@24 $generated@@129) (=> (= $generated@@130 ($generated@@23 ($generated@@72 $generated@@127) $generated@@129)) ($generated@@24 $generated@@129))))) (and (=> $generated@@132 (= $generated@@130 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129))) (=> $generated@@132 (= $generated@@136 ($generated@@73 $generated@@133 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129)))))) (and (and (forall (($generated@@162 T@U) ) (!  (=> (and (or (not (= $generated@@162 $generated@@144)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@162) $generated)))) (= ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@162) ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@162)))
 :pattern ( ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@162))
)) ($generated@@28 $generated@@131 $generated@@131)) (and (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (!  (=> (and (or (not (= $generated@@163 $generated@@144)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@163) $generated)))) (or (= ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@163) $generated@@164) ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@163) $generated@@164)) ($generated@@7 ($generated@@83 $generated@@32 $generated@@30 $generated@@3 $generated@@145 $generated@@163 $generated@@164))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@163) $generated@@164))
)) (<= (- (+ $generated@@129 1) $generated@@133) $generated@@143))))) (and (=> (= (ControlFlow 0 24) 4) $generated@@160) (=> (= (ControlFlow 0 24) 23) $generated@@159)))))
(let (($generated@@165  (=> (and (and (< $generated@@129 $generated@@128) (= $generated@@139 (- $generated@@128 $generated@@129))) (and (= $generated@@142 ($generated@@25 1)) (= $generated@@143 (- (+ $generated@@129 1) $generated@@142)))) (and (=> (= (ControlFlow 0 25) (- 0 28)) (=> $generated@@132 (<= $generated@@142 (+ $generated@@129 1)))) (=> (=> $generated@@132 (<= $generated@@142 (+ $generated@@129 1))) (and (=> (= (ControlFlow 0 25) (- 0 27)) (=> $generated@@132 (= $generated@@130 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129)))) (=> (=> $generated@@132 (= $generated@@130 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129))) (and (=> (= (ControlFlow 0 25) (- 0 26)) (=> $generated@@132 (= $generated@@130 ($generated@@73 $generated@@142 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129))))) (=> (=> $generated@@132 (= $generated@@130 ($generated@@73 $generated@@142 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129)))) (=> (= (ControlFlow 0 25) 24) $generated@@161))))))))))
(let (($generated@@166  (=> $generated@@140 (and (=> (= (ControlFlow 0 32) 31) $generated@@151) (=> (= (ControlFlow 0 32) 25) $generated@@165)))))
(let (($generated@@167  (=> (not $generated@@140) (=> (and (<= $generated@@129 $generated@@128) (= (ControlFlow 0 3) (- 0 2))) ($generated@@65 $generated@@4 ($generated@@8 $generated@@129) $generated@@19)))))
(let (($generated@@168  (and (=> (= (ControlFlow 0 33) 3) $generated@@167) (=> (= (ControlFlow 0 33) 32) $generated@@166))))
(let (($generated@@169 true))
(let (($generated@@170  (=> (and (and (and (and (and (and (<= 1 $generated@@130) (not false)) (<= 1 $generated@@129)) (<= 0 $generated@@141)) (=> $generated@@140 (<= $generated@@129 $generated@@128))) (and (=> $generated@@140 ($generated@@24 $generated@@129)) (=> $generated@@140 (= $generated@@130 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@129))))) (and (and (forall (($generated@@171 T@U) ) (!  (=> (and (or (not (= $generated@@171 $generated@@144)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@171) $generated)))) (= ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@171) ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@171)))
 :pattern ( ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@171))
)) ($generated@@28 $generated@@131 $generated@@131)) (and (forall (($generated@@172 T@U) ($generated@@173 T@U) ) (!  (=> (and (or (not (= $generated@@172 $generated@@144)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@172) $generated)))) (or (= ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@172) $generated@@173) ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@172) $generated@@173)) ($generated@@7 ($generated@@83 $generated@@32 $generated@@30 $generated@@3 $generated@@145 $generated@@172 $generated@@173))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 ($generated@@29 $generated@@32 ($generated@@33 $generated@@30 $generated@@31) $generated@@131 $generated@@172) $generated@@173))
)) (<= (- $generated@@128 $generated@@129) $generated@@141)))) (and (=> (= (ControlFlow 0 34) 1) $generated@@169) (=> (= (ControlFlow 0 34) 33) $generated@@168)))))
(let (($generated@@174  (=> (and (and (= $generated@@145 ($generated@@84 $generated@@144 $generated@@131 $generated false)) (= $generated@@146 ($generated@@25 1))) (and (= $generated@@147 ($generated@@25 1)) (= $generated@@141 (- $generated@@128 $generated@@146)))) (and (=> (= (ControlFlow 0 35) (- 0 37)) (=> $generated@@140 (<= $generated@@146 $generated@@128))) (=> (=> $generated@@140 (<= $generated@@146 $generated@@128)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (=> $generated@@140 (= $generated@@147 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@146)))) (=> (=> $generated@@140 (= $generated@@147 ($generated@@23 ($generated@@72 ($generated@@72 $generated@@127)) $generated@@146))) (=> (= (ControlFlow 0 35) 34) $generated@@170))))))))
(let (($generated@@175  (=> (and (and (and ($generated@@148 $generated@@131) ($generated@@149 $generated@@131)) (= 1 $generated@@22)) (and (<= ($generated@@25 1) $generated@@128) (= (ControlFlow 0 38) 35))) $generated@@174)))
$generated@@175)))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
