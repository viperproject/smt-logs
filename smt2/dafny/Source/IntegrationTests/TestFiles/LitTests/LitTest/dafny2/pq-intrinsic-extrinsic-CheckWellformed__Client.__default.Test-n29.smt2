(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U T@U) Bool)
(declare-fun $generated@@21 (T@U Int) T@U)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 (T@U Int) Bool)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@36 (T@U) Int)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 (T@U T@U) Int)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@48 (Int) Int)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 () Int)
(declare-fun $generated@@54 () Bool)
(declare-fun $generated@@55 () Int)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@63 (T@U) Int)
(declare-fun $generated@@66 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@71 (T@U) Bool)
(declare-fun $generated@@73 (T@U T@U) T@U)
(declare-fun $generated@@88 () Bool)
(declare-fun $generated@@109 (T@U) T@U)
(declare-fun $generated@@119 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@120 () T@T)
(declare-fun $generated@@121 () T@T)
(declare-fun $generated@@122 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@123 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@124 () T@T)
(declare-fun $generated@@125 (T@T T@T) T@T)
(declare-fun $generated@@126 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@127 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@T) T@T)
(declare-fun $generated@@129 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 Int) ) (!  (=> (and (or ($generated@@23 $generated@@28 $generated@@29) (and (and ($generated@@24 $generated@@28 $generated@@22) ($generated@@20 $generated@@28 $generated@@22 $generated@@27)) ($generated@@25 $generated@@28))) ($generated@@26 $generated@@27)) ($generated@@20 ($generated@@21 $generated@@28 $generated@@29) $generated@@22 $generated@@27))
 :pattern ( ($generated@@20 ($generated@@21 $generated@@28 $generated@@29) $generated@@22 $generated@@27))
)))
(assert (= ($generated@@3 $generated@@31) 3))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> ($generated@@30 $generated@@31 $generated@@34 ($generated@@32 $generated@@35)) ($generated@@33 $generated@@34))
 :pattern ( ($generated@@30 $generated@@31 $generated@@34 ($generated@@32 $generated@@35)))
)))
(assert (forall (($generated@@43 T@U) ) (!  (=> (or ($generated@@37 $generated@@43) (and ($generated@@24 $generated@@43 $generated@@22) (and ($generated@@25 $generated@@43) (not ($generated@@38 ($generated@@39 $generated@@43) $generated@@40))))) (let (($generated@@44 ($generated@@36 $generated@@43)))
 (and (> ($generated@@41 ($generated@@39 $generated@@43) ($generated@@42 $generated@@5 ($generated@@9 $generated@@44))) 0) (forall (($generated@@45 T@U) ) (!  (=> (> ($generated@@41 ($generated@@39 $generated@@43) ($generated@@42 $generated@@5 $generated@@45)) 0) (<= $generated@@44 ($generated@@10 $generated@@45)))
 :pattern ( ($generated@@41 ($generated@@39 $generated@@43) ($generated@@42 $generated@@5 $generated@@45)))
)))))
 :pattern ( ($generated@@36 $generated@@43))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@26 $generated@@47) ($generated@@20 $generated@@46 $generated@@22 $generated@@47))
 :pattern ( ($generated@@20 $generated@@46 $generated@@22 $generated@@47))
)))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@48 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@52 $generated@@51))
)))
(assert  (=> (<= 0 $generated@@53) (=> (or $generated@@54 (< 0 $generated@@53)) (= ($generated@@48 $generated@@55) ($generated@@48 3)))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@42 $generated@@58 ($generated@@56 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@56 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (or (not (= $generated@@61 $generated@@62)) (not true)) (= ($generated@@41 $generated@@60 $generated@@62) ($generated@@41 ($generated@@59 $generated@@60 $generated@@61) $generated@@62)))
 :pattern ( ($generated@@59 $generated@@60 $generated@@61) ($generated@@41 $generated@@60 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@63 ($generated@@59 $generated@@64 $generated@@65)) (+ ($generated@@63 $generated@@64) 1))
 :pattern ( ($generated@@63 ($generated@@59 $generated@@64 $generated@@65)))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@20 ($generated@@42 $generated@@70 $generated@@67) $generated@@68 $generated@@69) ($generated@@66 $generated@@70 $generated@@67 $generated@@68 $generated@@69))
 :pattern ( ($generated@@20 ($generated@@42 $generated@@70 $generated@@67) $generated@@68 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> (or ($generated@@71 $generated@@72) ($generated@@24 $generated@@72 $generated@@22)) ($generated@@30 $generated@@31 ($generated@@39 $generated@@72) ($generated@@32 $generated)))
 :pattern ( ($generated@@39 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@63 ($generated@@73 $generated@@74 $generated@@75)) (+ ($generated@@63 $generated@@74) ($generated@@63 $generated@@75)))
 :pattern ( ($generated@@63 ($generated@@73 $generated@@74 $generated@@75)))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 Int) ) (!  (=> (or ($generated@@23 $generated@@76 $generated@@77) (and ($generated@@24 $generated@@76 $generated@@22) ($generated@@25 $generated@@76))) (and (let (($generated@@78 ($generated@@21 $generated@@76 $generated@@77)))
 (and ($generated@@25 $generated@@78) ($generated@@38 ($generated@@39 $generated@@78) ($generated@@73 ($generated@@39 $generated@@76) ($generated@@59 $generated@@40 ($generated@@42 $generated@@5 ($generated@@9 $generated@@77))))))) ($generated@@24 ($generated@@21 $generated@@76 $generated@@77) $generated@@22)))
 :pattern ( ($generated@@21 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> ($generated@@38 $generated@@79 $generated@@80) (= $generated@@79 $generated@@80))
 :pattern ( ($generated@@38 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@81 ($generated@@32 $generated@@82)) (forall (($generated@@83 T@U) ) (!  (=> (< 0 ($generated@@41 $generated@@81 $generated@@83)) ($generated@@24 $generated@@83 $generated@@82))
 :pattern ( ($generated@@41 $generated@@81 $generated@@83))
)))
 :pattern ( ($generated@@30 $generated@@31 $generated@@81 ($generated@@32 $generated@@82)))
)))
(assert (forall (($generated@@84 T@U) ) (!  (=> ($generated@@24 $generated@@84 $generated) (and (= ($generated@@42 $generated@@5 ($generated@@56 $generated@@5 $generated@@84)) $generated@@84) ($generated@@30 $generated@@5 ($generated@@56 $generated@@5 $generated@@84) $generated)))
 :pattern ( ($generated@@24 $generated@@84 $generated))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@24 ($generated@@42 $generated@@87 $generated@@85) $generated@@86) ($generated@@30 $generated@@87 $generated@@85 $generated@@86))
 :pattern ( ($generated@@24 ($generated@@42 $generated@@87 $generated@@85) $generated@@86))
)))
(assert  (=> (<= 0 $generated@@53) (=> (or $generated@@54 (< 0 $generated@@53)) (and (and $generated@@88 (let (($generated@@89 $generated@@46))
 (and ($generated@@23 $generated@@89 ($generated@@48 4)) (let (($generated@@90 ($generated@@21 $generated@@89 ($generated@@48 4))))
 (and ($generated@@23 $generated@@90 ($generated@@48 3)) (let (($generated@@91 ($generated@@21 $generated@@90 ($generated@@48 3))))
($generated@@37 $generated@@91))))))) (= $generated@@55 (let (($generated@@92 $generated@@46))
(let (($generated@@93 ($generated@@21 $generated@@92 ($generated@@48 4))))
(let (($generated@@94 ($generated@@21 $generated@@93 ($generated@@48 3))))
(let (($generated@@95 ($generated@@36 $generated@@94)))
$generated@@95)))))))))
(assert  (=> (<= 0 $generated@@53) (=> (or $generated@@54 (< 0 $generated@@53)) (and (and $generated@@88 (let (($generated@@96 $generated@@46))
 (and ($generated@@23 $generated@@96 ($generated@@48 4)) (let (($generated@@97 ($generated@@21 $generated@@96 ($generated@@48 4))))
 (and ($generated@@23 $generated@@97 ($generated@@48 3)) (let (($generated@@98 ($generated@@21 $generated@@97 ($generated@@48 3))))
($generated@@37 $generated@@98))))))) (= $generated@@55 (let (($generated@@99 $generated@@46))
(let (($generated@@100 ($generated@@21 $generated@@99 ($generated@@48 4))))
(let (($generated@@101 ($generated@@21 $generated@@100 ($generated@@48 3))))
(let (($generated@@102 ($generated@@36 $generated@@101)))
$generated@@102)))))))))
(assert (forall (($generated@@103 T@U) ) (! (= ($generated@@33 $generated@@103) (forall (($generated@@104 T@U) ) (!  (and (<= 0 ($generated@@41 $generated@@103 $generated@@104)) (<= ($generated@@41 $generated@@103 $generated@@104) ($generated@@63 $generated@@103)))
 :pattern ( ($generated@@41 $generated@@103 $generated@@104))
)))
 :pattern ( ($generated@@33 $generated@@103))
)))
(assert (forall (($generated@@105 T@U) ) (! (<= 0 ($generated@@63 $generated@@105))
 :pattern ( ($generated@@63 $generated@@105))
)))
(assert (forall (($generated@@106 T@U) ) (! (= ($generated@@41 $generated@@40 $generated@@106) 0)
 :pattern ( ($generated@@41 $generated@@40 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@41 ($generated@@59 $generated@@107 $generated@@108) $generated@@108) (+ ($generated@@41 $generated@@107 $generated@@108) 1))
 :pattern ( ($generated@@59 $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@110 T@U) ) (! (= ($generated@@109 ($generated@@32 $generated@@110)) $generated@@110)
 :pattern ( ($generated@@32 $generated@@110))
)))
(assert (forall (($generated@@111 T@U) ) (! (= ($generated@@19 ($generated@@32 $generated@@111)) $generated@@1)
 :pattern ( ($generated@@32 $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@T) ) (! (= ($generated@@56 $generated@@113 ($generated@@42 $generated@@113 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@42 $generated@@113 $generated@@112))
)))
(assert (forall (($generated@@114 T@U) ) (!  (and (= (= ($generated@@63 $generated@@114) 0) (= $generated@@114 $generated@@40)) (=> (or (not (= ($generated@@63 $generated@@114) 0)) (not true)) (exists (($generated@@115 T@U) ) (! (< 0 ($generated@@41 $generated@@114 $generated@@115))
 :pattern ( ($generated@@41 $generated@@114 $generated@@115))
))))
 :pattern ( ($generated@@63 $generated@@114))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@41 ($generated@@73 $generated@@116 $generated@@117) $generated@@118) (+ ($generated@@41 $generated@@116 $generated@@118) ($generated@@41 $generated@@117 $generated@@118)))
 :pattern ( ($generated@@41 ($generated@@73 $generated@@116 $generated@@117) $generated@@118))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (! (= ($generated@@119 $generated@@130 $generated@@131 $generated@@132 ($generated@@126 $generated@@130 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@135 $generated@@136) $generated@@133)
 :weight 0
)) (and (forall (($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@T) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@119 $generated@@137 $generated@@138 $generated@@139 ($generated@@126 $generated@@137 $generated@@138 $generated@@139 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@119 $generated@@137 $generated@@138 $generated@@139 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)) (forall (($generated@@146 T@T) ($generated@@147 T@T) ($generated@@148 T@T) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ) (!  (or (= $generated@@152 $generated@@154) (= ($generated@@119 $generated@@146 $generated@@147 $generated@@148 ($generated@@126 $generated@@146 $generated@@147 $generated@@148 $generated@@150 $generated@@151 $generated@@152 $generated@@149) $generated@@153 $generated@@154) ($generated@@119 $generated@@146 $generated@@147 $generated@@148 $generated@@150 $generated@@153 $generated@@154)))
 :weight 0
)))) (= ($generated@@3 $generated@@120) 4)) (= ($generated@@3 $generated@@121) 5)) (forall (($generated@@155 T@T) ($generated@@156 T@T) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (! (= ($generated@@123 $generated@@155 $generated@@156 ($generated@@127 $generated@@155 $generated@@156 $generated@@158 $generated@@159 $generated@@157) $generated@@159) $generated@@157)
 :weight 0
))) (forall (($generated@@160 T@T) ($generated@@161 T@T) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ) (!  (or (= $generated@@164 $generated@@165) (= ($generated@@123 $generated@@160 $generated@@161 ($generated@@127 $generated@@160 $generated@@161 $generated@@163 $generated@@164 $generated@@162) $generated@@165) ($generated@@123 $generated@@160 $generated@@161 $generated@@163 $generated@@165)))
 :weight 0
))) (= ($generated@@3 $generated@@124) 6)) (forall (($generated@@166 T@T) ($generated@@167 T@T) ) (= ($generated@@3 ($generated@@125 $generated@@166 $generated@@167)) 7))) (forall (($generated@@168 T@T) ($generated@@169 T@T) ) (! (= ($generated@@128 ($generated@@125 $generated@@168 $generated@@169)) $generated@@168)
 :pattern ( ($generated@@125 $generated@@168 $generated@@169))
))) (forall (($generated@@170 T@T) ($generated@@171 T@T) ) (! (= ($generated@@129 ($generated@@125 $generated@@170 $generated@@171)) $generated@@171)
 :pattern ( ($generated@@125 $generated@@170 $generated@@171))
))))
(assert (forall (($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 Bool) ($generated@@176 T@U) ($generated@@177 T@U) ) (! (= ($generated@@8 ($generated@@119 $generated@@120 $generated@@121 $generated@@4 ($generated@@122 $generated@@172 $generated@@173 $generated@@174 $generated@@175) $generated@@176 $generated@@177))  (=> (and (or (not (= $generated@@176 $generated@@172)) (not true)) ($generated@@8 ($generated@@56 $generated@@4 ($generated@@123 $generated@@121 $generated@@124 ($generated@@123 $generated@@120 ($generated@@125 $generated@@121 $generated@@124) $generated@@173 $generated@@176) $generated@@174)))) $generated@@175))
 :pattern ( ($generated@@119 $generated@@120 $generated@@121 $generated@@4 ($generated@@122 $generated@@172 $generated@@173 $generated@@174 $generated@@175) $generated@@176 $generated@@177))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (!  (=> ($generated@@24 $generated@@178 ($generated@@32 $generated@@179)) (and (= ($generated@@42 $generated@@31 ($generated@@56 $generated@@31 $generated@@178)) $generated@@178) ($generated@@30 $generated@@31 ($generated@@56 $generated@@31 $generated@@178) ($generated@@32 $generated@@179))))
 :pattern ( ($generated@@24 $generated@@178 ($generated@@32 $generated@@179)))
)))
(assert (let (($generated@@180 $generated@@46))
 (and ($generated@@25 $generated@@180) ($generated@@38 ($generated@@39 $generated@@180) $generated@@40))))
(assert ($generated@@24 $generated@@46 $generated@@22))
(assert (forall (($generated@@181 Int) ) (! (= ($generated@@42 $generated@@5 ($generated@@9 ($generated@@48 $generated@@181))) ($generated@@50 $generated@@124 ($generated@@42 $generated@@5 ($generated@@9 $generated@@181))))
 :pattern ( ($generated@@42 $generated@@5 ($generated@@9 ($generated@@48 $generated@@181))))
)))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@T) ) (! (= ($generated@@42 $generated@@183 ($generated@@50 $generated@@183 $generated@@182)) ($generated@@50 $generated@@124 ($generated@@42 $generated@@183 $generated@@182)))
 :pattern ( ($generated@@42 $generated@@183 ($generated@@50 $generated@@183 $generated@@182)))
)))
(assert (forall (($generated@@184 T@U) ($generated@@185 T@U) ($generated@@186 T@U) ) (!  (=> (< 0 ($generated@@41 $generated@@184 $generated@@186)) (< 0 ($generated@@41 ($generated@@59 $generated@@184 $generated@@185) $generated@@186)))
 :pattern ( ($generated@@59 $generated@@184 $generated@@185) ($generated@@41 $generated@@184 $generated@@186))
)))
(assert (forall (($generated@@187 T@U) ($generated@@188 T@U) ($generated@@189 T@U) ) (! (= (< 0 ($generated@@41 ($generated@@59 $generated@@187 $generated@@188) $generated@@189))  (or (= $generated@@189 $generated@@188) (< 0 ($generated@@41 $generated@@187 $generated@@189))))
 :pattern ( ($generated@@41 ($generated@@59 $generated@@187 $generated@@188) $generated@@189))
)))
(assert (forall (($generated@@190 T@U) ($generated@@191 T@U) ) (! (= ($generated@@38 $generated@@190 $generated@@191) (forall (($generated@@192 T@U) ) (! (= ($generated@@41 $generated@@190 $generated@@192) ($generated@@41 $generated@@191 $generated@@192))
 :pattern ( ($generated@@41 $generated@@190 $generated@@192))
 :pattern ( ($generated@@41 $generated@@191 $generated@@192))
)))
 :pattern ( ($generated@@38 $generated@@190 $generated@@191))
)))
(assert (forall (($generated@@193 T@U) ($generated@@194 T@U) ($generated@@195 T@U) ) (! (= ($generated@@66 $generated@@31 $generated@@193 ($generated@@32 $generated@@194) $generated@@195) (forall (($generated@@196 T@U) ) (!  (=> (< 0 ($generated@@41 $generated@@193 $generated@@196)) ($generated@@20 $generated@@196 $generated@@194 $generated@@195))
 :pattern ( ($generated@@41 $generated@@193 $generated@@196))
)))
 :pattern ( ($generated@@66 $generated@@31 $generated@@193 ($generated@@32 $generated@@194) $generated@@195))
)))
(assert (forall (($generated@@197 T@U) ($generated@@198 T@U) ) (! ($generated@@66 $generated@@5 $generated@@198 $generated $generated@@197)
 :pattern ( ($generated@@66 $generated@@5 $generated@@198 $generated $generated@@197))
)))
(assert (forall (($generated@@199 T@U) ) (! ($generated@@30 $generated@@5 $generated@@199 $generated)
 :pattern ( ($generated@@30 $generated@@5 $generated@@199 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 () T@U)
(declare-fun $generated@@202 () T@U)
(declare-fun $generated@@203 () Int)
(declare-fun $generated@@204 () T@U)
(declare-fun $generated@@205 () T@U)
(declare-fun $generated@@206 () Int)
(declare-fun $generated@@207 () T@U)
(declare-fun $generated@@208 () T@U)
(declare-fun $generated@@209 () Int)
(declare-fun $generated@@210 () Int)
(declare-fun $generated@@211 () T@U)
(declare-fun $generated@@212 () T@U)
(declare-fun $generated@@213 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@214  (=> (= (ControlFlow 0 4) (- 0 3)) (= ($generated@@48 $generated@@55) ($generated@@48 3)))))
(let (($generated@@215  (=> (and (and (and $generated@@88 (= $generated@@200 $generated@@46)) (and $generated@@88 ($generated@@24 $generated@@200 $generated@@22))) (and (and (= $generated@@201 $generated@@200) ($generated@@20 $generated@@201 $generated@@22 $generated@@202)) (and (= $generated@@203 ($generated@@48 4)) ($generated@@66 $generated@@5 ($generated@@9 $generated@@203) $generated $generated@@202)))) (and (=> (= (ControlFlow 0 5) (- 0 10)) ($generated@@25 $generated@@201)) (=> ($generated@@25 $generated@@201) (=> (and (and (and ($generated@@23 $generated@@201 ($generated@@48 4)) (= $generated@@204 ($generated@@21 $generated@@201 ($generated@@48 4)))) (and ($generated@@23 $generated@@201 ($generated@@48 4)) ($generated@@24 $generated@@204 $generated@@22))) (and (and (= $generated@@205 $generated@@204) ($generated@@20 $generated@@205 $generated@@22 $generated@@202)) (and (= $generated@@206 ($generated@@48 3)) ($generated@@66 $generated@@5 ($generated@@9 $generated@@206) $generated $generated@@202)))) (and (=> (= (ControlFlow 0 5) (- 0 9)) ($generated@@25 $generated@@205)) (=> ($generated@@25 $generated@@205) (=> (and (and (and ($generated@@23 $generated@@205 ($generated@@48 3)) (= $generated@@207 ($generated@@21 $generated@@205 ($generated@@48 3)))) (and ($generated@@23 $generated@@205 ($generated@@48 3)) ($generated@@24 $generated@@207 $generated@@22))) (and (and (= $generated@@208 $generated@@207) ($generated@@20 $generated@@208 $generated@@22 $generated@@202)) (and ($generated@@71 $generated@@208) ($generated@@71 $generated@@208)))) (and (=> (= (ControlFlow 0 5) (- 0 8)) ($generated@@38 ($generated@@39 $generated@@208) ($generated@@59 ($generated@@59 $generated@@40 ($generated@@42 $generated@@5 ($generated@@9 ($generated@@48 3)))) ($generated@@42 $generated@@5 ($generated@@9 ($generated@@48 4)))))) (=> ($generated@@38 ($generated@@39 $generated@@208) ($generated@@59 ($generated@@59 $generated@@40 ($generated@@42 $generated@@5 ($generated@@9 ($generated@@48 3)))) ($generated@@42 $generated@@5 ($generated@@9 ($generated@@48 4))))) (=> ($generated@@20 $generated@@208 $generated@@22 $generated@@202) (and (=> (= (ControlFlow 0 5) (- 0 7)) ($generated@@25 $generated@@208)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (not ($generated@@38 ($generated@@39 $generated@@208) $generated@@40))) (=> (and ($generated@@25 $generated@@208) (not ($generated@@38 ($generated@@39 $generated@@208) $generated@@40))) (=> (and (and (and ($generated@@37 $generated@@208) (= $generated@@209 ($generated@@36 $generated@@208))) (and ($generated@@37 $generated@@208) ($generated@@30 $generated@@5 ($generated@@9 $generated@@209) $generated))) (and (and (= $generated@@210 $generated@@209) (= $generated@@55 $generated@@210)) (and ($generated@@30 $generated@@5 ($generated@@9 $generated@@55) $generated) (= (ControlFlow 0 5) 4)))) $generated@@214))))))))))))))))
(let (($generated@@216  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@8 ($generated@@50 $generated@@4 ($generated@@7 true))))))
(let (($generated@@217  (=> (= $generated@@211 ($generated@@122 $generated@@212 $generated@@202 $generated@@2 false)) (and (=> (= (ControlFlow 0 11) 2) $generated@@216) (=> (= (ControlFlow 0 11) 5) $generated@@215)))))
(let (($generated@@218  (=> (and (and ($generated@@26 $generated@@202) ($generated@@213 $generated@@202)) (and (= 0 $generated@@53) (= (ControlFlow 0 12) 11))) $generated@@217)))
$generated@@218))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
