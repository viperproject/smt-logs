(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun class._module.Node? () T@U)
(declare-fun Tagclass._module.Node? () T@U)
(declare-fun Tagclass._module.Node () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun field$next () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Node.Nexxxt (T@U T@U T@U Int T@U) T@U)
(declare-fun |_module.Node.Nexxxt#canCall| (T@U T@U Int T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Node () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Tclass._module.Node? () T@U)
(declare-fun _module.Node.IsClosed (T@U T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun _module.Node.next () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |_module.Node.IsClosed#canCall| (T@U T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun Mul (Int Int) Int)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc allocName class._module.Node? Tagclass._module.Node? Tagclass._module.Node tytagFamily$Node field$next)
)
(assert  (and (= (Ctor refType) 3) (= (Ctor SetType) 4)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) ($Heap T@U) (this T@U) (|k#0| Int) (|S#0| T@U) ) (!  (=> (or (|_module.Node.Nexxxt#canCall| $Heap this |k#0| |S#0|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.Node) ($IsAlloc refType this Tclass._module.Node $Heap)))) (and ($Is SetType |S#0| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0| (TSet Tclass._module.Node?) $Heap))) (and (_module.Node.IsClosed $Heap this |S#0|) (<= (LitInt 0) |k#0|))))) (and (|Set#IsMember| |S#0| ($Box refType (_module.Node.Nexxxt $ly $Heap this |k#0| |S#0|))) ($Is refType (_module.Node.Nexxxt $ly $Heap this |k#0| |S#0|) Tclass._module.Node?)))
 :pattern ( (_module.Node.Nexxxt $ly $Heap this |k#0| |S#0|))
))))
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall (($ly@@0 T@U) ($Heap@@0 T@U) (this@@0 T@U) (|k#0@@0| Int) (|S#0@@0| T@U) ) (! (= (_module.Node.Nexxxt ($LS $ly@@0) $Heap@@0 this@@0 |k#0@@0| |S#0@@0|) (_module.Node.Nexxxt $ly@@0 $Heap@@0 this@@0 |k#0@@0| |S#0@@0|))
 :pattern ( (_module.Node.Nexxxt ($LS $ly@@0) $Heap@@0 this@@0 |k#0@@0| |S#0@@0|))
)))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Node?)  (or (= $o null) (= (dtype $o) Tclass._module.Node?)))
 :pattern ( ($Is refType $o Tclass._module.Node?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Node $h) ($IsAlloc refType |c#0| Tclass._module.Node? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node? $h))
)))
(assert (= (FDim _module.Node.next) 0))
(assert (= (FieldOfDecl class._module.Node? field$next) _module.Node.next))
(assert  (not ($IsGhostField _module.Node.next)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|Set#Subset| a b) (forall ((o T@U) ) (!  (=> (|Set#IsMember| a o) (|Set#IsMember| b o))
 :pattern ( (|Set#IsMember| a o))
 :pattern ( (|Set#IsMember| b o))
)))
 :pattern ( (|Set#Subset| a b))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall (($h@@1 T@U) ($o@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) Tclass._module.Node?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Node.next)) Tclass._module.Node?))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Node.next)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@1 T@U) (|S#0@@1| T@U) ) (!  (=> (or (|_module.Node.IsClosed#canCall| $Heap@@1 this@@1 |S#0@@1|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 Tclass._module.Node) ($IsAlloc refType this@@1 Tclass._module.Node $Heap@@1)))) ($Is SetType |S#0@@1| (TSet Tclass._module.Node?))))) (= (_module.Node.IsClosed $Heap@@1 this@@1 |S#0@@1|)  (and (and (|Set#IsMember| |S#0@@1| ($Box refType this@@1)) (|Set#IsMember| |S#0@@1| ($Box refType null))) (forall ((|n#0| T@U) ) (!  (=> ($Is refType |n#0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@1| ($Box refType |n#0|)) (or (not (= |n#0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0|) _module.Node.next)))
)))))
 :pattern ( (_module.Node.IsClosed $Heap@@1 this@@1 |S#0@@1|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Node?) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) Tclass._module.Node?)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Node?))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Node) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.Node)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Node))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.Node)  (and ($Is refType |c#0@@0| Tclass._module.Node?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node?))
)))
(assert (forall (($h@@2 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass._module.Node?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Node.next)) Tclass._module.Node? $h@@2))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Node.next)))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsAllocBox bx@@3 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@1 T@U) ($Heap@@2 T@U) (this@@2 T@U) (|k#0@@1| Int) (|S#0@@2| T@U) ) (!  (=> (or (|_module.Node.Nexxxt#canCall| $Heap@@2 this@@2 |k#0@@1| |S#0@@2|) (and (< 1 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $Heap@@2) (or (not (= this@@2 null)) (not true))) ($IsAlloc refType this@@2 Tclass._module.Node $Heap@@2)) (and ($Is SetType |S#0@@2| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0@@2| (TSet Tclass._module.Node?) $Heap@@2))) (and (_module.Node.IsClosed $Heap@@2 this@@2 |S#0@@2|) (<= (LitInt 0) |k#0@@1|))))) ($IsAlloc refType (_module.Node.Nexxxt $ly@@1 $Heap@@2 this@@2 |k#0@@1| |S#0@@2|) Tclass._module.Node? $Heap@@2))
 :pattern ( ($IsAlloc refType (_module.Node.Nexxxt $ly@@1 $Heap@@2 this@@2 |k#0@@1| |S#0@@2|) Tclass._module.Node? $Heap@@2))
))))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert (forall ((bx@@4 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@3))))
 :pattern ( ($IsBox bx@@4 (TSet t@@3)))
)))
(assert (= (Tag Tclass._module.Node?) Tagclass._module.Node?))
(assert (= (TagFamily Tclass._module.Node?) tytagFamily$Node))
(assert (= (Tag Tclass._module.Node) Tagclass._module.Node))
(assert (= (TagFamily Tclass._module.Node) tytagFamily$Node))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@2 T@U) ($Heap@@3 T@U) (this@@3 T@U) (|k#0@@2| Int) (|S#0@@3| T@U) ) (!  (=> (or (|_module.Node.Nexxxt#canCall| $Heap@@3 this@@3 |k#0@@2| |S#0@@3|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@3) (and (or (not (= this@@3 null)) (not true)) (and ($Is refType this@@3 Tclass._module.Node) ($IsAlloc refType this@@3 Tclass._module.Node $Heap@@3)))) ($Is SetType |S#0@@3| (TSet Tclass._module.Node?))) (and (_module.Node.IsClosed $Heap@@3 this@@3 |S#0@@3|) (<= (LitInt 0) |k#0@@2|))))) (and (=> (or (not (= |k#0@@2| (LitInt 0))) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|) (=> (or (not (= (_module.Node.Nexxxt $ly@@2 $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|) null)) (not true)) (|_module.Node.Nexxxt#canCall| $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|)))) (= (_module.Node.Nexxxt ($LS $ly@@2) $Heap@@3 this@@3 |k#0@@2| |S#0@@3|) (ite (= |k#0@@2| (LitInt 0)) this@@3 (ite (= (_module.Node.Nexxxt $ly@@2 $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|) null) null ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 (_module.Node.Nexxxt $ly@@2 $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|)) _module.Node.next)))))))
 :pattern ( (_module.Node.Nexxxt ($LS $ly@@2) $Heap@@3 this@@3 |k#0@@2| |S#0@@3|) ($IsGoodHeap $Heap@@3))
))))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |a#0| () Int)
(declare-fun |vt#1_0@0| () Int)
(declare-fun |$rhs#1_1@0| () Int)
(declare-fun |b#0| () Int)
(declare-fun this@@4 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |S#0@@4| () T@U)
(declare-fun |$w$loop#1_0@0| () Bool)
(declare-fun $LZ () T@U)
(declare-fun |t#1_0@0| () Int)
(declare-fun |vt#1_0@2| () Int)
(declare-fun |##k#1_11@0| () Int)
(declare-fun |h#1_0@0| () Int)
(declare-fun |catchup#1_0@0| () Int)
(declare-fun |i#1_0@1| () Int)
(declare-fun |$w$loop#1_1@0| () Bool)
(declare-fun $Heap@5 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |##k#0_1@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |d##0_0@0| () Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |##k#1_13@0| () Int)
(declare-fun |$decr$loop#1_10@1| () Int)
(declare-fun |$rhs#1_1_0@1| () Int)
(declare-fun |$rhs#1_1_1@1| () Int)
(declare-fun |$rhs#1_1_2@1| () Int)
(declare-fun |$rhs#1_1_3@1| () Int)
(declare-fun |##k#1_4@0| () Int)
(declare-fun |$decr_init$loop#1_10@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |i#1_0@0| () Int)
(declare-fun |$decr$loop#1_00@1| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun |vt#1_0@1| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |$decr_init$loop#1_00@0| () Int)
(declare-fun $Heap@@4 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 167) (let ((anon10_correct  (=> (and (and (and (<= |a#0| |vt#1_0@0|) (< |vt#1_0@0| (+ |$rhs#1_1@0| |b#0|))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3)) (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3))) (and (=> (= (ControlFlow 0 92) (- 0 99)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 92) (- 0 98)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 92) (- 0 97)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#1_6| T@U) ) (!  (=> ($Is refType |n#1_6| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_6|)) (or (not (= |n#1_6| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_6|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_6|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_6|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 92) (- 0 96)) (<= (LitInt 0) |a#0|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |a#0| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3)) (and ($IsAlloc intType (int_2_U |vt#1_0@0|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3))) (and (=> (= (ControlFlow 0 92) (- 0 95)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 92) (- 0 94)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 92) (- 0 93)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#1_7| T@U) ) (!  (=> ($Is refType |n#1_7| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_7|)) (or (not (= |n#1_7| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_7|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_7|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_7|) _module.Node.next)))
))))) (=> (= (ControlFlow 0 92) (- 0 91)) (<= (LitInt 0) |vt#1_0@0|)))))))))))))
(let ((anon40_Else_correct  (=> (and (< |vt#1_0@0| |a#0|) (= (ControlFlow 0 101) 92)) anon10_correct)))
(let ((anon40_Then_correct  (=> (and (<= |a#0| |vt#1_0@0|) (= (ControlFlow 0 100) 92)) anon10_correct)))
(let ((anon39_Then_correct  (=> (not |$w$loop#1_0@0|) (and (=> (= (ControlFlow 0 102) 100) anon40_Then_correct) (=> (= (ControlFlow 0 102) 101) anon40_Else_correct)))))
(let ((anon26_correct true))
(let ((anon48_Else_correct  (=> (and (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |vt#1_0@2| |S#0@@4|))) (not true)) (= (ControlFlow 0 57) 47)) anon26_correct)))
(let ((anon48_Then_correct  (=> (and (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |vt#1_0@2| |S#0@@4|)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3)) (and ($IsAlloc intType (int_2_U |vt#1_0@2|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3))) (and (=> (= (ControlFlow 0 48) (- 0 56)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 48) (- 0 55)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 48) (- 0 54)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#1_10| T@U) ) (!  (=> ($Is refType |n#1_10| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_10|)) (or (not (= |n#1_10| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_10|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_10|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_10|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 48) (- 0 53)) (<= (LitInt 0) |vt#1_0@2|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |vt#1_0@2| |S#0@@4|) (=> (and (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3) (= |##k#1_11@0| (- (+ |h#1_0@0| |catchup#1_0@0|) |i#1_0@1|))) (and ($IsAlloc intType (int_2_U |##k#1_11@0|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3))) (and (=> (= (ControlFlow 0 48) (- 0 52)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 48) (- 0 51)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 48) (- 0 50)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#1_11| T@U) ) (!  (=> ($Is refType |n#1_11| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_11|)) (or (not (= |n#1_11| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_11|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_11|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_11|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 48) (- 0 49)) (<= (LitInt 0) |##k#1_11@0|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 (- (+ |h#1_0@0| |catchup#1_0@0|) |i#1_0@1|) |S#0@@4|) (= (ControlFlow 0 48) 47)) anon26_correct))))))))))))))
(let ((anon24_correct  (=> (and (and (and (and (= |t#1_0@0| (+ |a#0| |i#1_0@1|)) (= |h#1_0@0| (+ 1 (Mul (LitInt 2) |t#1_0@0|)))) (<= |t#1_0@0| |vt#1_0@2|)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3)) (and ($IsAlloc intType (int_2_U |t#1_0@0|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3))) (and (=> (= (ControlFlow 0 58) (- 0 66)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 58) (- 0 65)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 58) (- 0 64)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#1_8| T@U) ) (!  (=> ($Is refType |n#1_8| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_8|)) (or (not (= |n#1_8| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_8|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_8|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_8|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 58) (- 0 63)) (<= (LitInt 0) |t#1_0@0|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3)) (and ($IsAlloc intType (int_2_U |vt#1_0@2|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3))) (and (=> (= (ControlFlow 0 58) (- 0 62)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 58) (- 0 61)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 58) (- 0 60)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#1_9| T@U) ) (!  (=> ($Is refType |n#1_9| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_9|)) (or (not (= |n#1_9| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_9|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_9|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_9|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 58) (- 0 59)) (<= (LitInt 0) |vt#1_0@2|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |vt#1_0@2| |S#0@@4|) (and (=> (= (ControlFlow 0 58) 48) anon48_Then_correct) (=> (= (ControlFlow 0 58) 57) anon48_Else_correct)))))))))))))))
(let ((anon47_Else_correct  (=> (and (not (and (= |t#1_0@0| (+ |a#0| |i#1_0@1|)) (= |h#1_0@0| (+ 1 (Mul (LitInt 2) |t#1_0@0|))))) (= (ControlFlow 0 68) 58)) anon24_correct)))
(let ((anon47_Then_correct  (=> (and (and (= |t#1_0@0| (+ |a#0| |i#1_0@1|)) (= |h#1_0@0| (+ 1 (Mul (LitInt 2) |t#1_0@0|)))) (= (ControlFlow 0 67) 58)) anon24_correct)))
(let ((anon46_Else_correct  (=> (or (not (= |t#1_0@0| (+ |a#0| |i#1_0@1|))) (not true)) (and (=> (= (ControlFlow 0 70) 67) anon47_Then_correct) (=> (= (ControlFlow 0 70) 68) anon47_Else_correct)))))
(let ((anon46_Then_correct  (=> (= |t#1_0@0| (+ |a#0| |i#1_0@1|)) (and (=> (= (ControlFlow 0 69) 67) anon47_Then_correct) (=> (= (ControlFlow 0 69) 68) anon47_Else_correct)))))
(let ((anon20_correct  (=> (and (<= (LitInt 0) |i#1_0@1|) (<= |i#1_0@1| |catchup#1_0@0|)) (and (=> (= (ControlFlow 0 71) 69) anon46_Then_correct) (=> (= (ControlFlow 0 71) 70) anon46_Else_correct)))))
(let ((anon45_Else_correct  (=> (and (< |i#1_0@1| (LitInt 0)) (= (ControlFlow 0 73) 71)) anon20_correct)))
(let ((anon45_Then_correct  (=> (and (<= (LitInt 0) |i#1_0@1|) (= (ControlFlow 0 72) 71)) anon20_correct)))
(let ((anon44_Then_correct  (=> (not |$w$loop#1_1@0|) (and (=> (= (ControlFlow 0 74) 72) anon45_Then_correct) (=> (= (ControlFlow 0 74) 73) anon45_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 28) (- 0 27)) (exists ((|T#1| Int) (|_t#0#0| Int) ) (!  (and (= |_t#0#0| (+ 1 (Mul (LitInt 2) |T#1|))) (and (and (<= (LitInt 0) |T#1|) (< |T#1| (+ |a#0| |b#0|))) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |T#1| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |_t#0#0| |S#0@@4|))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |_t#0#0| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |T#1| |S#0@@4|))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |_t#0#0| |S#0@@4|) (Mul 2 |T#1|))
)))))
(let ((anon3_correct  (=> (and (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |a#0| |S#0@@4|) (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |a#0| |S#0@@4|) null) (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 (+ 1 (Mul (LitInt 2) |a#0|)) |S#0@@4|))) (and (=> (= (ControlFlow 0 145) (- 0 146)) (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |a#0| |S#0@@4|) null) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 (+ 1 (Mul (LitInt 2) |a#0|)) |S#0@@4|) null))) (=> (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |a#0| |S#0@@4|) null) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 (+ 1 (Mul (LitInt 2) |a#0|)) |S#0@@4|) null)) (=> (and (= $Heap@5 $Heap@1) (= (ControlFlow 0 145) 28)) GeneratedUnifiedExit_correct))))))
(let ((anon36_Else_correct  (=> (and (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |a#0| |S#0@@4|) null)) (not true)) (= (ControlFlow 0 152) 145)) anon3_correct)))
(let ((anon36_Then_correct  (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |a#0| |S#0@@4|) null) (=> (and (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@1) (= |##k#0_1@0| (+ 1 (Mul (LitInt 2) |a#0|)))) (and ($IsAlloc intType (int_2_U |##k#0_1@0|) TInt $Heap@1) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@1))) (and (=> (= (ControlFlow 0 147) (- 0 151)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 147) (- 0 150)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 147) (- 0 149)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (forall ((|n#0_1| T@U) ) (!  (=> ($Is refType |n#0_1| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_1|)) (or (not (= |n#0_1| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#0_1|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#0_1|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#0_1|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 147) (- 0 148)) (<= (LitInt 0) |##k#0_1@0|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 (+ 1 (Mul (LitInt 2) |a#0|)) |S#0@@4|) (= (ControlFlow 0 147) 145)) anon3_correct)))))))))
(let ((anon35_Then_correct  (=> (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) null) (= |d##0_0@0| (+ 1 (Mul (LitInt 2) |a#0|)))) (and (=> (= (ControlFlow 0 153) (- 0 161)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4)))) (and (=> (= (ControlFlow 0 153) (- 0 160)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null)))) (and (=> (= (ControlFlow 0 153) (- 0 159)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (forall ((|n#2| T@U) ) (!  (=> ($Is refType |n#2| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#2|)) (or (not (= |n#2| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#2|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#2|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#2|) _module.Node.next)))
))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (forall ((|n#2@@0| T@U) ) (!  (=> ($Is refType |n#2@@0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#2@@0|)) (or (not (= |n#2@@0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#2@@0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#2@@0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#2@@0|) _module.Node.next)))
)))) (and (=> (= (ControlFlow 0 153) (- 0 158)) (<= (LitInt 0) |d##0_0@0|)) (=> (<= (LitInt 0) |d##0_0@0|) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (forall ((|k#1| Int) ) (!  (=> (and (<= (LitInt 0) |k#1|) (< |k#1| |d##0_0@0|)) (and (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |d##0_0@0| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |d##0_0@0| |S#0@@4|) null)) (not true)) (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |k#1| |S#0@@4|))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#1| |S#0@@4|))
)) (forall ((|k#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |k#1@@0|) (< |k#1@@0| |d##0_0@0|)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |d##0_0@0| |S#0@@4|) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#1@@0| |S#0@@4|) null)) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#1@@0| |S#0@@4|))
)))) (and (and (= $Heap@0 $Heap@1) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@1)) (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap@1) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@1)))) (and (=> (= (ControlFlow 0 153) (- 0 157)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 153) (- 0 156)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 153) (- 0 155)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (forall ((|n#0_0| T@U) ) (!  (=> ($Is refType |n#0_0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0|)) (or (not (= |n#0_0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#0_0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#0_0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#0_0|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 153) (- 0 154)) (<= (LitInt 0) |a#0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |a#0| |S#0@@4|) (and (=> (= (ControlFlow 0 153) 147) anon36_Then_correct) (=> (= (ControlFlow 0 153) 152) anon36_Else_correct)))))))))))))))))))
(let ((anon34_correct  (=> (=> (and (<= |a#0| |t#1_0@0|) (< |t#1_0@0| (+ |a#0| |b#0|))) (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 (+ 1 (Mul (LitInt 2) |t#1_0@0|)) |S#0@@4|))) (and (=> (= (ControlFlow 0 29) (- 0 32)) (<= |a#0| |t#1_0@0|)) (and (=> (= (ControlFlow 0 29) (- 0 31)) (< |t#1_0@0| (+ |a#0| |b#0|))) (and (=> (= (ControlFlow 0 29) (- 0 30)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 (+ 1 (Mul (LitInt 2) |t#1_0@0|)) |S#0@@4|))) (=> (and (and (and (<= |a#0| |t#1_0@0|) (< |t#1_0@0| (+ |a#0| |b#0|))) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 (+ 1 (Mul (LitInt 2) |t#1_0@0|)) |S#0@@4|))) (and (= $Heap@5 $Heap@3) (= (ControlFlow 0 29) 28))) GeneratedUnifiedExit_correct)))))))
(let ((anon51_Else_correct  (=> (and (not (and (<= |a#0| |t#1_0@0|) (< |t#1_0@0| (+ |a#0| |b#0|)))) (= (ControlFlow 0 42) 29)) anon34_correct)))
(let ((anon51_Then_correct  (=> (and (and (and (<= |a#0| |t#1_0@0|) (< |t#1_0@0| (+ |a#0| |b#0|))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3)) (and ($IsAlloc intType (int_2_U |t#1_0@0|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3))) (and (=> (= (ControlFlow 0 33) (- 0 41)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 33) (- 0 40)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 33) (- 0 39)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#1_12| T@U) ) (!  (=> ($Is refType |n#1_12| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_12|)) (or (not (= |n#1_12| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_12|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_12|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_12|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 33) (- 0 38)) (<= (LitInt 0) |t#1_0@0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) (=> (and (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3) (= |##k#1_13@0| (+ 1 (Mul (LitInt 2) |t#1_0@0|)))) (and ($IsAlloc intType (int_2_U |##k#1_13@0|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3))) (and (=> (= (ControlFlow 0 33) (- 0 37)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 33) (- 0 36)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 33) (- 0 35)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#1_13| T@U) ) (!  (=> ($Is refType |n#1_13| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_13|)) (or (not (= |n#1_13| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_13|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_13|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#1_13|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 33) (- 0 34)) (<= (LitInt 0) |##k#1_13@0|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 (+ 1 (Mul (LitInt 2) |t#1_0@0|)) |S#0@@4|) (= (ControlFlow 0 33) 29)) anon34_correct))))))))))))))
(let ((anon50_Else_correct  (=> (< |t#1_0@0| |a#0|) (and (=> (= (ControlFlow 0 44) 33) anon51_Then_correct) (=> (= (ControlFlow 0 44) 42) anon51_Else_correct)))))
(let ((anon50_Then_correct  (=> (<= |a#0| |t#1_0@0|) (and (=> (= (ControlFlow 0 43) 33) anon51_Then_correct) (=> (= (ControlFlow 0 43) 42) anon51_Else_correct)))))
(let ((anon49_Then_correct  (=> (<= |catchup#1_0@0| |i#1_0@1|) (and (=> (= (ControlFlow 0 45) 43) anon50_Then_correct) (=> (= (ControlFlow 0 45) 44) anon50_Else_correct)))))
(let ((anon49_Else_correct  (=> (and (< |i#1_0@1| |catchup#1_0@0|) (= |$decr$loop#1_10@1| (- |catchup#1_0@0| |i#1_0@1|))) (=> (and (and (= |$rhs#1_1_0@1| (+ |i#1_0@1| 1)) (= |$rhs#1_1_1@1| (+ |t#1_0@0| 1))) (and (= |$rhs#1_1_2@1| (+ |vt#1_0@2| 1)) (= |$rhs#1_1_3@1| (+ |h#1_0@0| 2)))) (and (=> (= (ControlFlow 0 18) (- 0 26)) (or (<= 0 |$decr$loop#1_10@1|) (= (- |catchup#1_0@0| |$rhs#1_1_0@1|) |$decr$loop#1_10@1|))) (=> (or (<= 0 |$decr$loop#1_10@1|) (= (- |catchup#1_0@0| |$rhs#1_1_0@1|) |$decr$loop#1_10@1|)) (and (=> (= (ControlFlow 0 18) (- 0 25)) (< (- |catchup#1_0@0| |$rhs#1_1_0@1|) |$decr$loop#1_10@1|)) (=> (< (- |catchup#1_0@0| |$rhs#1_1_0@1|) |$decr$loop#1_10@1|) (=> (=> (and (<= (LitInt 0) |$rhs#1_1_0@1|) (<= |$rhs#1_1_0@1| |catchup#1_0@0|)) (=> (= |$rhs#1_1_1@1| (+ |a#0| |$rhs#1_1_0@1|)) (=> (= |$rhs#1_1_3@1| (+ 1 (Mul (LitInt 2) |$rhs#1_1_1@1|))) (=> (<= |$rhs#1_1_1@1| |$rhs#1_1_2@1|) (and (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |$rhs#1_1_1@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |$rhs#1_1_2@1| |S#0@@4|)) (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |$rhs#1_1_1@1| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |$rhs#1_1_2@1| |S#0@@4|)) (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |$rhs#1_1_2@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 (- (+ |$rhs#1_1_3@1| |catchup#1_0@0|) |$rhs#1_1_0@1|) |S#0@@4|)))))))) (and (=> (= (ControlFlow 0 18) (- 0 24)) (=> |$w$loop#1_1@0| (<= (LitInt 0) |$rhs#1_1_0@1|))) (=> (=> |$w$loop#1_1@0| (<= (LitInt 0) |$rhs#1_1_0@1|)) (and (=> (= (ControlFlow 0 18) (- 0 23)) (=> |$w$loop#1_1@0| (<= |$rhs#1_1_0@1| |catchup#1_0@0|))) (=> (=> |$w$loop#1_1@0| (<= |$rhs#1_1_0@1| |catchup#1_0@0|)) (and (=> (= (ControlFlow 0 18) (- 0 22)) (=> |$w$loop#1_1@0| (= |$rhs#1_1_1@1| (+ |a#0| |$rhs#1_1_0@1|)))) (=> (=> |$w$loop#1_1@0| (= |$rhs#1_1_1@1| (+ |a#0| |$rhs#1_1_0@1|))) (and (=> (= (ControlFlow 0 18) (- 0 21)) (=> |$w$loop#1_1@0| (= |$rhs#1_1_3@1| (+ 1 (Mul (LitInt 2) |$rhs#1_1_1@1|))))) (=> (=> |$w$loop#1_1@0| (= |$rhs#1_1_3@1| (+ 1 (Mul (LitInt 2) |$rhs#1_1_1@1|)))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (=> |$w$loop#1_1@0| (<= |$rhs#1_1_1@1| |$rhs#1_1_2@1|))) (=> (=> |$w$loop#1_1@0| (<= |$rhs#1_1_1@1| |$rhs#1_1_2@1|)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (=> |$w$loop#1_1@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |$rhs#1_1_1@1| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |$rhs#1_1_2@1| |S#0@@4|)))) (=> (=> |$w$loop#1_1@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |$rhs#1_1_1@1| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |$rhs#1_1_2@1| |S#0@@4|))) (=> (= (ControlFlow 0 18) (- 0 17)) (=> |$w$loop#1_1@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |$rhs#1_1_2@1| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 (- (+ |$rhs#1_1_3@1| |catchup#1_0@0|) |$rhs#1_1_0@1|) |S#0@@4|)))))))))))))))))))))))))
(let ((anon44_Else_correct  (=> |$w$loop#1_1@0| (and (=> (= (ControlFlow 0 46) 45) anon49_Then_correct) (=> (= (ControlFlow 0 46) 18) anon49_Else_correct)))))
(let ((anon43_LoopBody_correct  (and (=> (= (ControlFlow 0 75) 74) anon44_Then_correct) (=> (= (ControlFlow 0 75) 46) anon44_Else_correct))))
(let ((anon43_LoopDone_correct true))
(let ((anon43_LoopHead_correct  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not false) (<= 0 |a#0|)) (<= 0 |a#0|)) (<= 0 |a#0|)) (<= 1 |b#0|)) (<= 1 |##k#1_4@0|)) (<= 0 |a#0|)) (<= 0 |t#1_0@0|)) (<= 0 |a#0|)) (<= 0 |vt#1_0@2|)) |$w$loop#1_0@0|) (<= 0 |catchup#1_0@0|)) (<= 0 |i#1_0@1|)) (<= 0 |$decr_init$loop#1_10@0|)) (=> |$w$loop#1_1@0| (<= (LitInt 0) |i#1_0@1|))) (and (=> |$w$loop#1_1@0| (<= |i#1_0@1| |catchup#1_0@0|)) (=> |$w$loop#1_1@0| (= |t#1_0@0| (+ |a#0| |i#1_0@1|))))) (and (and (and (=> |$w$loop#1_1@0| (= |h#1_0@0| (+ 1 (Mul (LitInt 2) |t#1_0@0|)))) (=> |$w$loop#1_1@0| (<= |t#1_0@0| |vt#1_0@2|))) (and (=> |$w$loop#1_1@0| (and (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |vt#1_0@2| |S#0@@4|)) (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |vt#1_0@2| |S#0@@4|)) (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |vt#1_0@2| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 (- (+ |h#1_0@0| |catchup#1_0@0|) |i#1_0@1|) |S#0@@4|))))) (=> |$w$loop#1_1@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |t#1_0@0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |vt#1_0@2| |S#0@@4|))))) (and (and (=> |$w$loop#1_1@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |vt#1_0@2| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 (- (+ |h#1_0@0| |catchup#1_0@0|) |i#1_0@1|) |S#0@@4|))) (= $Heap@3 $Heap@3)) (and (forall (($o@@4 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@4) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@4) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@4) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@4 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@4) $f@@0))
)) (<= (- |catchup#1_0@0| |i#1_0@1|) |$decr_init$loop#1_10@0|))))) (and (=> (= (ControlFlow 0 76) 16) anon43_LoopDone_correct) (=> (= (ControlFlow 0 76) 75) anon43_LoopBody_correct)))))
(let ((anon16_correct  (and (=> (= (ControlFlow 0 77) (- 0 86)) (<= (LitInt 0) |catchup#1_0@0|)) (and (=> (= (ControlFlow 0 77) (- 0 85)) (< |catchup#1_0@0| |b#0|)) (=> (and (and (<= (LitInt 0) |catchup#1_0@0|) (< |catchup#1_0@0| |b#0|)) (and (= |i#1_0@0| (LitInt 0)) (= |$decr_init$loop#1_10@0| (- |catchup#1_0@0| |i#1_0@0|)))) (and (=> (= (ControlFlow 0 77) (- 0 84)) (=> |$w$loop#1_1@0| (<= (LitInt 0) |i#1_0@0|))) (=> (=> |$w$loop#1_1@0| (<= (LitInt 0) |i#1_0@0|)) (and (=> (= (ControlFlow 0 77) (- 0 83)) (=> |$w$loop#1_1@0| (<= |i#1_0@0| |catchup#1_0@0|))) (=> (=> |$w$loop#1_1@0| (<= |i#1_0@0| |catchup#1_0@0|)) (and (=> (= (ControlFlow 0 77) (- 0 82)) (=> |$w$loop#1_1@0| (= |a#0| (+ |a#0| |i#1_0@0|)))) (=> (=> |$w$loop#1_1@0| (= |a#0| (+ |a#0| |i#1_0@0|))) (and (=> (= (ControlFlow 0 77) (- 0 81)) (=> |$w$loop#1_1@0| (= |$rhs#1_1@0| (+ 1 (Mul (LitInt 2) |a#0|))))) (=> (=> |$w$loop#1_1@0| (= |$rhs#1_1@0| (+ 1 (Mul (LitInt 2) |a#0|)))) (and (=> (= (ControlFlow 0 77) (- 0 80)) (=> |$w$loop#1_1@0| (<= |a#0| |vt#1_0@0|))) (=> (=> |$w$loop#1_1@0| (<= |a#0| |vt#1_0@0|)) (and (=> (= (ControlFlow 0 77) (- 0 79)) (=> |$w$loop#1_1@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |a#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |vt#1_0@0| |S#0@@4|)))) (=> (=> |$w$loop#1_1@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |a#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |vt#1_0@0| |S#0@@4|))) (and (=> (= (ControlFlow 0 77) (- 0 78)) (=> |$w$loop#1_1@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |vt#1_0@0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 (- (+ |$rhs#1_1@0| |catchup#1_0@0|) |i#1_0@0|) |S#0@@4|)))) (=> (=> |$w$loop#1_1@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |vt#1_0@0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 (- (+ |$rhs#1_1@0| |catchup#1_0@0|) |i#1_0@0|) |S#0@@4|))) (=> (= (ControlFlow 0 77) 76) anon43_LoopHead_correct))))))))))))))))))))
(let ((anon42_Else_correct  (=> (and (< |catchup#1_0@0| (LitInt 0)) (= (ControlFlow 0 88) 77)) anon16_correct)))
(let ((anon42_Then_correct  (=> (and (<= (LitInt 0) |catchup#1_0@0|) (= (ControlFlow 0 87) 77)) anon16_correct)))
(let ((anon41_Then_correct  (=> (and (<= |$rhs#1_1@0| |vt#1_0@0|) (= |catchup#1_0@0| (- |vt#1_0@0| |$rhs#1_1@0|))) (and (=> (= (ControlFlow 0 89) 87) anon42_Then_correct) (=> (= (ControlFlow 0 89) 88) anon42_Else_correct)))))
(let ((anon41_Else_correct  (=> (and (< |vt#1_0@0| |$rhs#1_1@0|) (= |$decr$loop#1_00@1| (- |$rhs#1_1@0| |vt#1_0@0|))) (and (=> (= (ControlFlow 0 3) (- 0 15)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4)))) (and (=> (= (ControlFlow 0 3) (- 0 14)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null)))) (and (=> (= (ControlFlow 0 3) (- 0 13)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#6| T@U) ) (!  (=> ($Is refType |n#6| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#6|)) (or (not (= |n#6| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#6|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#6|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#6|) _module.Node.next)))
))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#6@@0| T@U) ) (!  (=> ($Is refType |n#6@@0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#6@@0|)) (or (not (= |n#6@@0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#6@@0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#6@@0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#6@@0|) _module.Node.next)))
)))) (and (=> (= (ControlFlow 0 3) (- 0 12)) (<= (LitInt 0) |a#0|)) (=> (<= (LitInt 0) |a#0|) (and (=> (= (ControlFlow 0 3) (- 0 11)) (<= |a#0| |vt#1_0@0|)) (=> (<= |a#0| |vt#1_0@0|) (and (=> (= (ControlFlow 0 3) (- 0 10)) (<= (LitInt 1) |b#0|)) (=> (<= (LitInt 1) |b#0|) (and (=> (= (ControlFlow 0 3) (- 0 9)) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |a#0| |S#0@@4|) null)) (not true))) (=> (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |a#0| |S#0@@4|) null)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |a#0| |S#0@@4|) |b#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |a#0| |S#0@@4|))) (=> (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |a#0| |S#0@@4|) |b#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |a#0| |S#0@@4|)) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (and (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 (+ |vt#1_0@0| |b#0|) |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |vt#1_0@0| |S#0@@4|)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 (+ |vt#1_0@0| |b#0|) |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |vt#1_0@0| |S#0@@4|))) (and (= $Heap@3 $Heap@4) (= |vt#1_0@1| (+ |vt#1_0@0| |b#0|)))) (and (=> (= (ControlFlow 0 3) (- 0 7)) (or (<= 0 |$decr$loop#1_00@1|) (= (- |$rhs#1_1@0| |vt#1_0@1|) |$decr$loop#1_00@1|))) (=> (or (<= 0 |$decr$loop#1_00@1|) (= (- |$rhs#1_1@0| |vt#1_0@1|) |$decr$loop#1_00@1|)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (< (- |$rhs#1_1@0| |vt#1_0@1|) |$decr$loop#1_00@1|)) (=> (< (- |$rhs#1_1@0| |vt#1_0@1|) |$decr$loop#1_00@1|) (=> (=> (and (<= |a#0| |vt#1_0@1|) (< |vt#1_0@1| (+ |$rhs#1_1@0| |b#0|))) (and (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |a#0| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |vt#1_0@1| |S#0@@4|))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> |$w$loop#1_0@0| (<= |a#0| |vt#1_0@1|))) (=> (=> |$w$loop#1_0@0| (<= |a#0| |vt#1_0@1|)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#1_0@0| (< |vt#1_0@1| (+ |$rhs#1_1@0| |b#0|)))) (=> (=> |$w$loop#1_0@0| (< |vt#1_0@1| (+ |$rhs#1_1@0| |b#0|))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#1_0@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |a#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |vt#1_0@1| |S#0@@4|))))))))))))))))))))))))))))))))))
(let ((anon39_Else_correct  (=> |$w$loop#1_0@0| (and (=> (= (ControlFlow 0 90) 89) anon41_Then_correct) (=> (= (ControlFlow 0 90) 3) anon41_Else_correct)))))
(let ((anon38_LoopBody_correct  (and (=> (= (ControlFlow 0 103) 102) anon39_Then_correct) (=> (= (ControlFlow 0 103) 90) anon39_Else_correct))))
(let ((anon38_LoopDone_correct true))
(let ((anon38_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (not false) (<= 0 |a#0|)) (<= 0 |a#0|)) (<= 0 |a#0|)) (<= 1 |b#0|)) (<= 1 |##k#1_4@0|)) (<= 0 |a#0|)) (<= 0 |a#0|)) (<= 0 |a#0|)) (<= 0 |vt#1_0@0|)) (=> |$w$loop#1_0@0| (<= |a#0| |vt#1_0@0|))) (and (=> |$w$loop#1_0@0| (< |vt#1_0@0| (+ |$rhs#1_1@0| |b#0|))) (=> |$w$loop#1_0@0| (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |a#0| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |vt#1_0@0| |S#0@@4|))))) (and (and (=> |$w$loop#1_0@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |a#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |vt#1_0@0| |S#0@@4|))) (= $Heap@2 $Heap@3)) (and (forall (($o@@5 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@5) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@5) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@5) $f@@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@5 $f@@1))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@5) $f@@1))
)) (<= (- |$rhs#1_1@0| |vt#1_0@0|) |$decr_init$loop#1_00@0|)))) (and (=> (= (ControlFlow 0 104) 1) anon38_LoopDone_correct) (=> (= (ControlFlow 0 104) 103) anon38_LoopBody_correct))))))
(let ((anon6_correct  (=> (and (|_module.Node.Nexxxt#canCall| $Heap@0 this@@4 |a#0| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@0 this@@4 |a#0| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) |b#0| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@0 this@@4 |a#0| |S#0@@4|)))) (and (=> (= (ControlFlow 0 105) (- 0 124)) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |a#0| |S#0@@4|) null)) (not true))) (and (=> (= (ControlFlow 0 105) (- 0 123)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |a#0| |S#0@@4|) |b#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |a#0| |S#0@@4|))) (=> (and (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) null)) (not true)) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) |b#0| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|))) (and (=> (= (ControlFlow 0 105) (- 0 122)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4)))) (and (=> (= (ControlFlow 0 105) (- 0 121)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null)))) (and (=> (= (ControlFlow 0 105) (- 0 120)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (forall ((|n#4| T@U) ) (!  (=> ($Is refType |n#4| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4|)) (or (not (= |n#4| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#4|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#4|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#4|) _module.Node.next)))
))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (forall ((|n#4@@0| T@U) ) (!  (=> ($Is refType |n#4@@0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4@@0|)) (or (not (= |n#4@@0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#4@@0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#4@@0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#4@@0|) _module.Node.next)))
)))) (and (=> (= (ControlFlow 0 105) (- 0 119)) (<= (LitInt 0) |a#0|)) (=> (<= (LitInt 0) |a#0|) (and (=> (= (ControlFlow 0 105) (- 0 118)) (<= (LitInt 0) |b#0|)) (=> (<= (LitInt 0) |b#0|) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |a#0| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |a#0| |S#0@@4|) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |a#0| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |a#0| |S#0@@4|) |b#0| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 (+ |a#0| |b#0|) |S#0@@4|)))) (and (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |a#0| |S#0@@4|) null)) (not true)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |a#0| |S#0@@4|) |b#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 (+ |a#0| |b#0|) |S#0@@4|))) (= $Heap@0 $Heap@2))) (and (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2) (= |##k#1_4@0| (+ |a#0| |b#0|))) (and ($IsAlloc intType (int_2_U |##k#1_4@0|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2)))) (and (=> (= (ControlFlow 0 105) (- 0 117)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 105) (- 0 116)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 105) (- 0 115)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#1_4| T@U) ) (!  (=> ($Is refType |n#1_4| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_4|)) (or (not (= |n#1_4| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#1_4|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#1_4|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#1_4|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 105) (- 0 114)) (<= (LitInt 0) |##k#1_4@0|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 (+ |a#0| |b#0|) |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 105) (- 0 113)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 105) (- 0 112)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 105) (- 0 111)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#1_5| T@U) ) (!  (=> ($Is refType |n#1_5| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_5|)) (or (not (= |n#1_5| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#1_5|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#1_5|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#1_5|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 105) (- 0 110)) (<= (LitInt 0) |a#0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |a#0| |S#0@@4|) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 (+ |a#0| |b#0|) |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |a#0| |S#0@@4|)) (and (=> (= (ControlFlow 0 105) (- 0 109)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 (+ |a#0| |b#0|) |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |a#0| |S#0@@4|))) (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 (+ |a#0| |b#0|) |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |a#0| |S#0@@4|)) (=> (and (= |$rhs#1_1@0| (+ 1 (Mul (LitInt 2) |a#0|))) (= |$decr_init$loop#1_00@0| (- |$rhs#1_1@0| |a#0|))) (and (=> (= (ControlFlow 0 105) (- 0 108)) (=> |$w$loop#1_0@0| (<= |a#0| |a#0|))) (=> (=> |$w$loop#1_0@0| (<= |a#0| |a#0|)) (and (=> (= (ControlFlow 0 105) (- 0 107)) (=> |$w$loop#1_0@0| (< |a#0| (+ |$rhs#1_1@0| |b#0|)))) (=> (=> |$w$loop#1_0@0| (< |a#0| (+ |$rhs#1_1@0| |b#0|))) (and (=> (= (ControlFlow 0 105) (- 0 106)) (=> |$w$loop#1_0@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |a#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |a#0| |S#0@@4|)))) (=> (=> |$w$loop#1_0@0| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |a#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |a#0| |S#0@@4|))) (=> (= (ControlFlow 0 105) 104) anon38_LoopHead_correct)))))))))))))))))))))))))))))))))))))))
(let ((anon37_Else_correct  (=> (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) null) (= (ControlFlow 0 139) 105)) anon6_correct)))
(let ((anon37_Then_correct  (=> (and (and (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) null)) (not true)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@0)) (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap@0) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@0))) (and (=> (= (ControlFlow 0 125) (- 0 138)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 125) (- 0 137)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 125) (- 0 136)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (forall ((|n#1_1| T@U) ) (!  (=> ($Is refType |n#1_1| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_1|)) (or (not (= |n#1_1| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_1|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_1|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_1|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 125) (- 0 135)) (<= (LitInt 0) |a#0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@0 this@@4 |a#0| |S#0@@4|) (and (=> (= (ControlFlow 0 125) (- 0 134)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) null)) (not true))) (=> ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|)) Tclass._module.Node? $Heap@0) (=> (and ($IsAlloc intType (int_2_U |b#0|) TInt $Heap@0) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@0)) (and (=> (= (ControlFlow 0 125) (- 0 133)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |a#0| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 125) (- 0 132)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 125) (- 0 131)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) |S#0@@4|) (forall ((|n#1_2| T@U) ) (!  (=> ($Is refType |n#1_2| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_2|)) (or (not (= |n#1_2| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_2|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_2|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_2|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 125) (- 0 130)) (<= (LitInt 0) |b#0|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) |b#0| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@0)) (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap@0) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@0))) (and (=> (= (ControlFlow 0 125) (- 0 129)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 125) (- 0 128)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 125) (- 0 127)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (forall ((|n#1_3| T@U) ) (!  (=> ($Is refType |n#1_3| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_3|)) (or (not (= |n#1_3| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_3|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_3|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_3|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 125) (- 0 126)) (<= (LitInt 0) |a#0|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@0 this@@4 |a#0| |S#0@@4|) (= (ControlFlow 0 125) 105)) anon6_correct)))))))))))))))))))))
(let ((anon35_Else_correct  (=> (and (and (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |a#0| |S#0@@4|) null)) (not true)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@0)) (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap@0) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@0))) (and (=> (= (ControlFlow 0 140) (- 0 144)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 140) (- 0 143)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 140) (- 0 142)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (forall ((|n#1_0| T@U) ) (!  (=> ($Is refType |n#1_0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#1_0|)) (or (not (= |n#1_0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1_0|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 140) (- 0 141)) (<= (LitInt 0) |a#0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@0 this@@4 |a#0| |S#0@@4|) (and (=> (= (ControlFlow 0 140) 125) anon37_Then_correct) (=> (= (ControlFlow 0 140) 139) anon37_Else_correct))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#3| null $Heap@@4 alloc false)) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (= $Heap@@4 $Heap@0)) (and (and (forall ((|$ih#a0#0| Int) (|$ih#b0#0| Int) (|$ih#S0#0| T@U) ) (!  (=> (and (and ($Is SetType |$ih#S0#0| (TSet Tclass._module.Node?)) (and (and (and (_module.Node.IsClosed $Heap@@4 this@@4 |$ih#S0#0|) (and (<= (LitInt 0) |$ih#a0#0|) (<= (LitInt 1) |$ih#b0#0|))) (forall ((|k#2| Int) (|l#2@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |k#2|) (< |k#2| |l#2@@0|)) (< |l#2@@0| |$ih#a0#0|)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |k#2| |$ih#S0#0|) (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |l#2@@0| |$ih#S0#0|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |l#2@@0| |$ih#S0#0|) (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |k#2| |$ih#S0#0|))
))) (or (= (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |$ih#a0#0| |$ih#S0#0|) null) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |$ih#a0#0| |$ih#S0#0|) |$ih#b0#0| |$ih#S0#0|) (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |$ih#a0#0| |$ih#S0#0|))))) (or (and (<= 0 |$ih#a0#0|) (< |$ih#a0#0| |a#0|)) (and (= |$ih#a0#0| |a#0|) (or (and (<= 0 |$ih#b0#0|) (< |$ih#b0#0| |b#0|)) (and (= |$ih#b0#0| |b#0|) (and (|Set#Subset| |$ih#S0#0| |S#0@@4|) (not (|Set#Subset| |S#0@@4| |$ih#S0#0|)))))))) (exists ((|T#2| Int) (|_t#0#1| Int) ) (!  (and (= |_t#0#1| (+ 1 (Mul (LitInt 2) |T#2|))) (and (and (<= (LitInt 0) |T#2|) (< |T#2| (+ |$ih#a0#0| |$ih#b0#0|))) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |T#2| |$ih#S0#0|) (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |_t#0#1| |$ih#S0#0|))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |_t#0#1| |$ih#S0#0|) (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |T#2| |$ih#S0#0|))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |_t#0#1| |$ih#S0#0|) (Mul 2 |T#2|))
)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |$ih#a0#0| |$ih#S0#0|) |$ih#b0#0| |$ih#S0#0|))
)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@0)) (and ($IsAlloc intType (int_2_U |a#0|) TInt $Heap@0) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@0)))) (and (=> (= (ControlFlow 0 162) (- 0 166)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 162) (- 0 165)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 162) (- 0 164)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (forall ((|n#10| T@U) ) (!  (=> ($Is refType |n#10| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#10|)) (or (not (= |n#10| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#10|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#10|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#10|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 162) (- 0 163)) (<= (LitInt 0) |a#0|)) (=> (and (and (_module.Node.IsClosed $Heap@0 this@@4 |S#0@@4|) (<= (LitInt 0) |a#0|)) (and (|_module.Node.Nexxxt#canCall| $Heap@0 this@@4 |a#0| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@0 this@@4 |a#0| |S#0@@4|))) (and (=> (= (ControlFlow 0 162) 153) anon35_Then_correct) (=> (= (ControlFlow 0 162) 140) anon35_Else_correct)))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and ($IsGoodHeap $Heap@@4) ($IsHeapAnchor $Heap@@4)) (and (or (not (= this@@4 null)) (not true)) (and ($Is refType this@@4 Tclass._module.Node) ($IsAlloc refType this@@4 Tclass._module.Node $Heap@@4)))) (and (and ($Is SetType |S#0@@4| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@@4)) (= 4 $FunctionContextHeight))) (and (and (and (|_module.Node.IsClosed#canCall| $Heap@@4 this@@4 |S#0@@4|) (and (_module.Node.IsClosed $Heap@@4 this@@4 |S#0@@4|) (and (and (|Set#IsMember| |S#0@@4| ($Box refType this@@4)) (|Set#IsMember| |S#0@@4| ($Box refType null))) (forall ((|n#9| T@U) ) (!  (=> ($Is refType |n#9| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#9|)) (or (not (= |n#9| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 |n#9|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 |n#9|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 |n#9|) _module.Node.next)))
))))) (<= (LitInt 0) |a#0|)) (and (and (<= (LitInt 1) |b#0|) (forall ((|k#1@@1| Int) (|l#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |k#1@@1|) (< |k#1@@1| |l#1@@0|)) (< |l#1@@0| |a#0|)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |k#1@@1| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |l#1@@0| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |l#1@@0| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |k#1@@1| |S#0@@4|))
))) (and (or (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@@4 this@@4 |a#0| |S#0@@4|) null) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@@4 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@@4 this@@4 |a#0| |S#0@@4|) |b#0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@@4 this@@4 |a#0| |S#0@@4|))) (= (ControlFlow 0 167) 162))))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
