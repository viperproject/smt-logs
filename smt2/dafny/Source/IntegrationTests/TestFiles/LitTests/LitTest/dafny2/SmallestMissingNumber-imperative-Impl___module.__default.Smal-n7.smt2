(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun SetType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |lambda#5| (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun IndexField (Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Has (T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.Has#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |lambda#6| (Bool) T@U)
(declare-fun |lambda#8| (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |lambda#4| (T@U) T@U)
(declare-fun |lambda#7| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSet alloc Tagclass._System.nat Tagclass._System.object? Tagclass._System.object Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1|)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 3))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (= (Ctor SetType) 7)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (h T@U) (r T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType rd heap bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx))
)))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (forall ((|l#0| T@U) (|$l#0#heap#0| T@U) (|$l#0#_v0#0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#5| |l#0|) |$l#0#heap#0| |$l#0#_v0#0|)) ($IsBox |$l#0#_v0#0| |l#0|))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#5| |l#0|) |$l#0#heap#0| |$l#0#_v0#0|))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h@@0) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h@@0))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (Ctor HandleTypeType) 8))
(assert (forall ((f T@U) (t0@@2 T@U) (t1@@2 T@U) (u0@@2 T@U) (u1@@2 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 u0@@2) ($IsBox bx@@0 t0@@2))
 :pattern ( ($IsBox bx@@0 u0@@2))
 :pattern ( ($IsBox bx@@0 t0@@2))
))) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 t1@@2) ($IsBox bx@@1 u1@@2))
 :pattern ( ($IsBox bx@@1 t1@@2))
 :pattern ( ($IsBox bx@@1 u1@@2))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@1))
)))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@0 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@2)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@2 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@2))
)))
(assert (forall (($o@@1 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._System.object? $h@@3)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@3 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._System.object? $h@@3))
)))
(assert (forall ((h@@0 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@0 k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@0 o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h@@0 k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((t0@@3 T@U) (t1@@3 T@U) (heap@@0 T@U) (f@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@0 t0@@3) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@3)))) (= (|Set#Equal| (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) ($IsGoodHeap heap@@0))
 :pattern ( (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@4 T@U) ($o@@2 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@2)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@4 $o@@2) alloc)))) ($IsAllocBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@4 $o@@2) (IndexField $i0)) _System.array$arg@@2 $h@@4))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@4 $o@@2) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Has$T T@U) ($Heap T@U) (|a#0| T@U) (|x#0@@0| T@U) ) (!  (=> (or (|_module.__default.Has#canCall| _module._default.Has$T $Heap |a#0| |x#0@@0|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is refType |a#0| (Tclass._System.array _module._default.Has$T))) ($IsBox |x#0@@0| _module._default.Has$T)))) (= (_module.__default.Has _module._default.Has$T $Heap |a#0| |x#0@@0|) (exists ((|i#0| Int) ) (!  (and (and (<= (LitInt 0) |i#0|) (< |i#0| (_System.array.Length |a#0|))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap |a#0|) (IndexField |i#0|)) |x#0@@0|))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap |a#0|) (IndexField |i#0|)))
))))
 :pattern ( (_module.__default.Has _module._default.Has$T $Heap |a#0| |x#0@@0|) ($IsGoodHeap $Heap))
))))
(assert (forall ((t0@@4 T@U) (t1@@4 T@U) (h0 T@U) (h1 T@U) (f@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@1 t0@@4) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@4 t1@@4)))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads1 t0@@4 t1@@4 h0 f@@1 bx0@@1) ($Box refType o@@1))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0 o@@1) fld) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires1 t0@@4 t1@@4 h0 f@@1 bx0@@1) (Requires1 t0@@4 t1@@4 h1 f@@1 bx0@@1)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@4 t1@@4 h1 f@@1 bx0@@1))
)))
(assert (forall ((t0@@5 T@U) (t1@@5 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@2 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@5) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@5 t1@@5)))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2) ($Box refType o@@2))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires1 t0@@5 t1@@5 h0@@0 f@@2 bx0@@2) (Requires1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2))
)))
(assert (forall ((v T@U) (t0@@6 T@U) ) (! (= ($Is SetType v (TSet t0@@6)) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v bx@@2) ($IsBox bx@@2 t0@@6))
 :pattern ( (|Set#IsMember| v bx@@2))
)))
 :pattern ( ($Is SetType v (TSet t0@@6)))
)))
(assert (= (Ctor LayerTypeType) 9))
(assert (forall ((f@@3 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@3 ly) (MapType1Select LayerTypeType A f@@3 ly))
 :pattern ( (AtLayer A f@@3 ly))
)))
(assert (forall ((|x#0@@1| T@U) ) (! (= ($Is intType |x#0@@1| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@1|)))
 :pattern ( ($Is intType |x#0@@1| Tclass._System.nat))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@1 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@1) ($IsAlloc T@@1 v@@0 t h@@1))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@0 T@U) (bx@@3 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@2 k@@0) (=> ($IsAllocBox bx@@3 t@@0 h@@2) ($IsAllocBox bx@@3 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@2 k@@0) ($IsAllocBox bx@@3 t@@0 h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@3 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@3) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@3 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@3))
)))
(assert (forall ((t0@@7 T@U) (t1@@6 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@7) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@7 t1@@6)))) (forall ((o@@3 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@7 t1@@6 h0@@1 f@@4 bx0@@3) ($Box refType o@@3))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@1 o@@3) fld@@1) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@1 o@@3) fld@@1))))) (= (Reads1 t0@@7 t1@@6 h0@@1 f@@4 bx0@@3) (Reads1 t0@@7 t1@@6 h1@@1 f@@4 bx0@@3)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@7 t1@@6 h1@@1 f@@4 bx0@@3))
)))
(assert (forall ((t0@@8 T@U) (t1@@7 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@5 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@8) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@8 t1@@7)))) (forall ((o@@4 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4) ($Box refType o@@4))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@2 o@@4) fld@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@2 o@@4) fld@@2))))) (= (Reads1 t0@@8 t1@@7 h0@@2 f@@5 bx0@@4) (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4))
)))
(assert (forall ((t0@@9 T@U) (t1@@8 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@6 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@9) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@9 t1@@8)))) (forall ((o@@5 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@9 t1@@8 h0@@3 f@@6 bx0@@5) ($Box refType o@@5))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@3 o@@5) fld@@3) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@3 o@@5) fld@@3))))) (= (Apply1 t0@@9 t1@@8 h0@@3 f@@6 bx0@@5) (Apply1 t0@@9 t1@@8 h1@@3 f@@6 bx0@@5)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@9 t1@@8 h1@@3 f@@6 bx0@@5))
)))
(assert (forall ((t0@@10 T@U) (t1@@9 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@7 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@10) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@10 t1@@9)))) (forall ((o@@6 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6) ($Box refType o@@6))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@4 o@@6) fld@@4) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@4 o@@6) fld@@4))))) (= (Apply1 t0@@10 t1@@9 h0@@4 f@@7 bx0@@6) (Apply1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert (forall ((s T@U) (bx@@4 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@4) (U_2_bool (MapType1Select refType boolType s ($Unbox refType bx@@4))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@4))
)))
(assert (forall ((t0@@11 T@U) (t1@@10 T@U) (heap@@1 T@U) (h@@4 T@U) (r@@0 T@U) (rd@@0 T@U) (bx0@@7 T@U) ) (! (= (Apply1 t0@@11 t1@@10 heap@@1 (Handle1 h@@4 r@@0 rd@@0) bx0@@7) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType h@@4 heap@@1 bx0@@7))
 :pattern ( (Apply1 t0@@11 t1@@10 heap@@1 (Handle1 h@@4 r@@0 rd@@0) bx0@@7))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@5)) bx@@5) ($Is intType ($Unbox intType bx@@5) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@5 Tclass._System.nat))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@6 Tclass._System.object?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@3 T@U) ) (! (= ($Is refType $o@@3 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@3 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((f@@8 T@U) (t0@@12 T@U) (t1@@11 T@U) (h@@5 T@U) ) (!  (=> (and ($IsGoodHeap h@@5) ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@12 t1@@11) h@@5)) (forall ((bx0@@8 T@U) ) (!  (=> (and ($IsAllocBox bx0@@8 t0@@12 h@@5) (Requires1 t0@@12 t1@@11 h@@5 f@@8 bx0@@8)) ($IsAllocBox (Apply1 t0@@12 t1@@11 h@@5 f@@8 bx0@@8) t1@@11 h@@5))
 :pattern ( (Apply1 t0@@12 t1@@11 h@@5 f@@8 bx0@@8))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@12 t1@@11) h@@5))
)))
(assert (forall ((|l#0@@0| Bool) (|$l#0#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#6| |l#0@@0|) |$l#0#o#0|)) |l#0@@0|)
 :pattern ( (MapType1Select refType boolType (|lambda#6| |l#0@@0|) |$l#0#o#0|))
)))
(assert (forall ((|l#0@@1| T@U) (|$l#0#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#8| |l#0@@1|) |$l#0#ly#0|) |l#0@@1|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#8| |l#0@@1|) |$l#0#ly#0|))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@9 T@U) (t0@@13 T@U) (t1@@12 T@U) ) (! (= ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@13 t1@@12)) (forall ((h@@6 T@U) (bx0@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@6) ($IsBox bx0@@9 t0@@13)) (Requires1 t0@@13 t1@@12 h@@6 f@@9 bx0@@9)) ($IsBox (Apply1 t0@@13 t1@@12 h@@6 f@@9 bx0@@9) t1@@12))
 :pattern ( (Apply1 t0@@13 t1@@12 h@@6 f@@9 bx0@@9))
)))
 :pattern ( ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@13 t1@@12)))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 TInt) (and (= ($Box intType ($Unbox intType bx@@8)) bx@@8) ($Is intType ($Unbox intType bx@@8) TInt)))
 :pattern ( ($IsBox bx@@8 TInt))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 TBool) (and (= ($Box boolType ($Unbox boolType bx@@9)) bx@@9) ($Is boolType ($Unbox boolType bx@@9) TBool)))
 :pattern ( ($IsBox bx@@9 TBool))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((t0@@14 T@U) (t1@@13 T@U) (heap@@2 T@U) (h@@7 T@U) (r@@1 T@U) (rd@@1 T@U) (bx0@@10 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType r@@1 heap@@2 bx0@@10)) (Requires1 t0@@14 t1@@13 heap@@2 (Handle1 h@@7 r@@1 rd@@1) bx0@@10))
 :pattern ( (Requires1 t0@@14 t1@@13 heap@@2 (Handle1 h@@7 r@@1 rd@@1) bx0@@10))
)))
(assert (forall ((o@@7 T@U) ) (! (<= 0 (_System.array.Length o@@7))
 :pattern ( (_System.array.Length o@@7))
)))
(assert (forall ((v@@3 T@U) (t0@@15 T@U) (h@@8 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@15) h@@8) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@10) ($IsAllocBox bx@@10 t0@@15 h@@8))
 :pattern ( (|Set#IsMember| v@@3 bx@@10))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@15) h@@8))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$R@@0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|))
)))
(assert (forall (($o@@4 T@U) ) (! ($Is refType $o@@4 Tclass._System.object?)
 :pattern ( ($Is refType $o@@4 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((i Int) ) (! (= (FDim (IndexField i)) 1)
 :pattern ( (IndexField i))
)))
(assert (forall ((i@@0 Int) ) (! (= (IndexField_Inverse (IndexField i@@0)) i@@0)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@5 T@U) ($o@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@5 $o@@5) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@5)) TInt $h@@5))
 :pattern ( (_System.array.Length $o@@5) ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@5 $o@@5) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@6 T@U) ($o@@6 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@6)))) ($IsBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@6 $o@@6) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@6 $o@@6) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert (forall ((f@@10 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@10 ($LS ly@@0)) (AtLayer A@@0 f@@10 ly@@0))
 :pattern ( (AtLayer A@@0 f@@10 ($LS ly@@0)))
)))
(assert (forall ((f@@11 T@U) (t0@@16 T@U) (t1@@14 T@U) (h@@9 T@U) ) (!  (=> ($IsGoodHeap h@@9) (= ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@16 t1@@14) h@@9) (forall ((bx0@@11 T@U) ) (!  (=> (and (and ($IsBox bx0@@11 t0@@16) ($IsAllocBox bx0@@11 t0@@16 h@@9)) (Requires1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11)) (forall ((r@@2 T@U) ) (!  (=> (and (or (not (= r@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11) ($Box refType r@@2))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@9 r@@2) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11) ($Box refType r@@2)))
)))
 :pattern ( (Apply1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11))
 :pattern ( (Reads1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@16 t1@@14) h@@9))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@11)) bx@@11) ($Is HandleTypeType ($Unbox HandleTypeType bx@@11) (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))))
 :pattern ( ($IsBox bx@@11 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)))
)))
(assert (forall ((|l#0@@2| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@7 T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@2| |l#1| |l#2| |l#3|) $o@@7 $f))  (=> (and (or (not (= $o@@7 |l#0@@2|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@2| |l#1| |l#2| |l#3|) $o@@7 $f))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((_module._default.Has$T@@0 T@U) ($h0 T@U) ($h1 T@U) (|a#0@@0| T@U) (|x#0@@2| T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|_module.__default.Has#canCall| _module._default.Has$T@@0 $h0 |a#0@@0| |x#0@@2|) (and ($Is refType |a#0@@0| (Tclass._System.array _module._default.Has$T@@0)) ($IsBox |x#0@@2| _module._default.Has$T@@0)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@8 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@8 null)) (not true)) (= $o@@8 |a#0@@0|)) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h0 $o@@8) $f@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h1 $o@@8) $f@@0)))) (= (_module.__default.Has _module._default.Has$T@@0 $h0 |a#0@@0| |x#0@@2|) (_module.__default.Has _module._default.Has$T@@0 $h1 |a#0@@0| |x#0@@2|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.__default.Has _module._default.Has$T@@0 $h1 |a#0@@0| |x#0@@2|))
)))
(assert (forall ((t0@@17 T@U) (t1@@15 T@U) (heap@@3 T@U) (f@@12 T@U) (bx0@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@3) (and ($IsBox bx0@@12 t0@@17) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@17 t1@@15)))) (|Set#Equal| (Reads1 t0@@17 t1@@15 $OneHeap f@@12 bx0@@12) |Set#Empty|)) (= (Requires1 t0@@17 t1@@15 $OneHeap f@@12 bx0@@12) (Requires1 t0@@17 t1@@15 heap@@3 f@@12 bx0@@12)))
 :pattern ( (Requires1 t0@@17 t1@@15 $OneHeap f@@12 bx0@@12) ($IsGoodHeap heap@@3))
 :pattern ( (Requires1 t0@@17 t1@@15 heap@@3 f@@12 bx0@@12))
)))
(assert (forall ((bx@@12 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@12 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@12)) bx@@12) ($Is SetType ($Unbox SetType bx@@12) (TSet t@@5))))
 :pattern ( ($IsBox bx@@12 (TSet t@@5)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@13)) bx@@13) ($Is refType ($Unbox refType bx@@13) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@13 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@14)) bx@@14) ($Is refType ($Unbox refType bx@@14) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@14 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (forall ((h@@10 T@U) (r@@3 T@U) (f@@13 T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType1Store refType (MapType1Type FieldType BoxType) h@@10 r@@3 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@10 r@@3) f@@13 x@@6))) ($HeapSucc h@@10 (MapType1Store refType (MapType1Type FieldType BoxType) h@@10 r@@3 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@10 r@@3) f@@13 x@@6))))
 :pattern ( (MapType1Store refType (MapType1Type FieldType BoxType) h@@10 r@@3 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@10 r@@3) f@@13 x@@6)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@8 T@U) ) (! (= (|Set#IsMember| a@@1 o@@8) (|Set#IsMember| b@@1 o@@8))
 :pattern ( (|Set#IsMember| a@@1 o@@8))
 :pattern ( (|Set#IsMember| b@@1 o@@8))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((h@@11 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@11)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@11))
)))
(assert (forall ((h@@12 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@12)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@12))
)))
(assert (forall ((|l#0@@3| T@U) (|$l#0#heap#0@@0| T@U) (|$l#0#_v0#0@@0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#4| |l#0@@3|) |$l#0#heap#0@@0| |$l#0#_v0#0@@0|) |l#0@@3|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#4| |l#0@@3|) |$l#0#heap#0@@0| |$l#0#_v0#0@@0|))
)))
(assert (forall ((|l#0@@4| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#_v0#0@@1| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#7| |l#0@@4|) |$l#0#heap#0@@1| |$l#0#_v0#0@@1|) |l#0@@4|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#7| |l#0@@4|) |$l#0#heap#0@@1| |$l#0#_v0#0@@1|))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is intType v@@6 TInt)
 :pattern ( ($Is intType v@@6 TInt))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is boolType v@@7 TBool)
 :pattern ( ($Is boolType v@@7 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |_v1#0@0| () Int)
(declare-fun |$_Frame#l0@0| () T@U)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun |lambdaResult#0| () Bool)
(declare-fun $Heap@@0 () T@U)
(declare-fun |j#0@0| () Int)
(declare-fun |N#0@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun |a#0@@1| () T@U)
(declare-fun |n#0@1| () Int)
(declare-fun |i#2@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |j#2@0| () Int)
(declare-fun |s#0@1| () Int)
(declare-fun |$w$loop#1@0| () Bool)
(declare-fun $Heap@5 () T@U)
(declare-fun |s#0@3| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun |$decr$loop#10@1| () Int)
(declare-fun |s#0@2| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |$decr_init$loop#10@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |s#0@0| () Int)
(declare-fun |n#0@2| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |$rhs#0_0_0@1| () Bool)
(declare-fun $Heap@2 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $LZ () T@U)
(declare-fun |n#0@0| () Int)
(declare-fun |s#0| () Int)
(declare-fun |e#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 106) (let ((anon3_correct true))
(let ((anon48_Else_correct  (=> (and (< |_v1#0@0| (LitInt 0)) (= (ControlFlow 0 101) 99)) anon3_correct)))
(let ((anon48_Then_correct  (=> (<= (LitInt 0) |_v1#0@0|) (=> (and (and (= |$_Frame#l0@0| (|lambda#0| null |$lambdaHeap#0@0| alloc false)) (= |lambdaResult#0| (U_2_bool (Lit boolType (bool_2_U false))))) (and ($Is boolType (bool_2_U |lambdaResult#0|) TBool) (= (ControlFlow 0 100) 99))) anon3_correct))))
(let ((anon47_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap@@0 |$lambdaHeap#0@0|) ($HeapSucc $Heap@@0 |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 102) 100) anon48_Then_correct) (=> (= (ControlFlow 0 102) 101) anon48_Else_correct)))))
(let ((anon22_correct true))
(let ((anon59_Else_correct  (=> (and (not (and (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#0@0|)))))) (= (ControlFlow 0 65) 62)) anon22_correct)))
(let ((anon59_Then_correct  (=> (and (and (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#0@0|))))) ($IsAlloc refType |a#0@@1| (Tclass._System.array Tclass._System.nat) $Heap@1)) (and (=> (= (ControlFlow 0 63) (- 0 64)) ($Is intType (int_2_U |j#0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |j#0@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |j#0@0|) Tclass._System.nat $Heap@1) (=> (and (|_module.__default.Has#canCall| Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#0@0|))) (= (ControlFlow 0 63) 62)) anon22_correct)))))))
(let ((anon58_Else_correct  (=> (not (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |N#0@0|))) (and (=> (= (ControlFlow 0 69) 63) anon59_Then_correct) (=> (= (ControlFlow 0 69) 65) anon59_Else_correct)))))
(let ((anon58_Then_correct  (=> (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| |N#0@0|)) (and (=> (= (ControlFlow 0 66) (- 0 68)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 66) (- 0 67)) (and (<= 0 |j#0@0|) (< |j#0@0| (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 66) 63) anon59_Then_correct) (=> (= (ControlFlow 0 66) 65) anon59_Else_correct))))))))
(let ((anon57_Else_correct  (=> (< |j#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 71) 66) anon58_Then_correct) (=> (= (ControlFlow 0 71) 69) anon58_Else_correct)))))
(let ((anon57_Then_correct  (=> (<= (LitInt 0) |j#0@0|) (and (=> (= (ControlFlow 0 70) 66) anon58_Then_correct) (=> (= (ControlFlow 0 70) 69) anon58_Else_correct)))))
(let ((anon56_Then_correct  (and (=> (= (ControlFlow 0 72) 70) anon57_Then_correct) (=> (= (ControlFlow 0 72) 71) anon57_Else_correct))))
(let ((anon56_Else_correct true))
(let ((anon15_correct  (=> (forall ((|i#3| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3|) (< |i#3| |n#0@1|)) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#3|)))) |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#3|)))))))))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#3|))))
)) (and (=> (= (ControlFlow 0 73) 72) anon56_Then_correct) (=> (= (ControlFlow 0 73) 61) anon56_Else_correct)))))
(let ((anon55_Else_correct  (=> (and (not (and (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| |n#0@1|)) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#2@0|)))) |N#0@0|))) (= (ControlFlow 0 79) 73)) anon15_correct)))
(let ((anon55_Then_correct  (=> (and (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| |n#0@1|)) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#2@0|)))) |N#0@0|)) (and (=> (= (ControlFlow 0 74) (- 0 78)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 74) (- 0 77)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 74) (- 0 76)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array.Length |a#0@@1|)))) (and (=> (= (ControlFlow 0 74) (- 0 75)) (and (<= 0 (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#2@0|))))) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#2@0|)))) (_System.array.Length $nw@0)))) (=> (= (ControlFlow 0 74) 73) anon15_correct))))))))))
(let ((anon54_Else_correct  (=> (not (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| |n#0@1|))) (and (=> (= (ControlFlow 0 83) 74) anon55_Then_correct) (=> (= (ControlFlow 0 83) 79) anon55_Else_correct)))))
(let ((anon54_Then_correct  (=> (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| |n#0@1|)) (and (=> (= (ControlFlow 0 80) (- 0 82)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 80) (- 0 81)) (and (<= 0 |i#2@0|) (< |i#2@0| (_System.array.Length |a#0@@1|)))) (and (=> (= (ControlFlow 0 80) 74) anon55_Then_correct) (=> (= (ControlFlow 0 80) 79) anon55_Else_correct))))))))
(let ((anon53_Else_correct  (=> (< |i#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 85) 80) anon54_Then_correct) (=> (= (ControlFlow 0 85) 83) anon54_Else_correct)))))
(let ((anon53_Then_correct  (=> (<= (LitInt 0) |i#2@0|) (and (=> (= (ControlFlow 0 84) 80) anon54_Then_correct) (=> (= (ControlFlow 0 84) 83) anon54_Else_correct)))))
(let ((anon52_Then_correct  (and (=> (= (ControlFlow 0 86) 84) anon53_Then_correct) (=> (= (ControlFlow 0 86) 85) anon53_Else_correct))))
(let ((anon52_Else_correct true))
(let ((anon8_correct  (=> (and (<= (LitInt 0) |n#0@1|) (<= |n#0@1| |N#0@0|)) (and (=> (= (ControlFlow 0 87) 86) anon52_Then_correct) (=> (= (ControlFlow 0 87) 60) anon52_Else_correct)))))
(let ((anon51_Else_correct  (=> (and (< |n#0@1| (LitInt 0)) (= (ControlFlow 0 89) 87)) anon8_correct)))
(let ((anon51_Then_correct  (=> (and (<= (LitInt 0) |n#0@1|) (= (ControlFlow 0 88) 87)) anon8_correct)))
(let ((anon50_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 90) 88) anon51_Then_correct) (=> (= (ControlFlow 0 90) 89) anon51_Else_correct)))))
(let ((anon38_correct true))
(let ((anon67_Else_correct  (=> (and (not (and (<= (LitInt 0) |j#2@0|) (< |j#2@0| |s#0@1|))) (= (ControlFlow 0 44) 41)) anon38_correct)))
(let ((anon67_Then_correct  (=> (and (and (<= (LitInt 0) |j#2@0|) (< |j#2@0| |s#0@1|)) ($IsAlloc refType |a#0@@1| (Tclass._System.array Tclass._System.nat) $Heap@1)) (and (=> (= (ControlFlow 0 42) (- 0 43)) ($Is intType (int_2_U |j#2@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |j#2@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |j#2@0|) Tclass._System.nat $Heap@1) (=> (and (|_module.__default.Has#canCall| Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#2@0|))) (= (ControlFlow 0 42) 41)) anon38_correct)))))))
(let ((anon66_Else_correct  (=> (< |j#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 46) 42) anon67_Then_correct) (=> (= (ControlFlow 0 46) 44) anon67_Else_correct)))))
(let ((anon66_Then_correct  (=> (<= (LitInt 0) |j#2@0|) (and (=> (= (ControlFlow 0 45) 42) anon67_Then_correct) (=> (= (ControlFlow 0 45) 44) anon67_Else_correct)))))
(let ((anon65_Then_correct  (and (=> (= (ControlFlow 0 47) 45) anon66_Then_correct) (=> (= (ControlFlow 0 47) 46) anon66_Else_correct))))
(let ((anon65_Else_correct true))
(let ((anon33_correct  (=> (and (<= (LitInt 0) |s#0@1|) (<= |s#0@1| |N#0@0|)) (and (=> (= (ControlFlow 0 48) 47) anon65_Then_correct) (=> (= (ControlFlow 0 48) 40) anon65_Else_correct)))))
(let ((anon64_Else_correct  (=> (and (< |s#0@1| (LitInt 0)) (= (ControlFlow 0 50) 48)) anon33_correct)))
(let ((anon64_Then_correct  (=> (and (<= (LitInt 0) |s#0@1|) (= (ControlFlow 0 49) 48)) anon33_correct)))
(let ((anon63_Then_correct  (=> (not |$w$loop#1@0|) (and (=> (= (ControlFlow 0 51) 49) anon64_Then_correct) (=> (= (ControlFlow 0 51) 50) anon64_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 28) (- 0 29)) (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (_System.array.Length |a#0@@1|))) (or (not (= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 |a#0@@1|) (IndexField |i#1|)))) |s#0@3|)) (not true)))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 |a#0@@1|) (IndexField |i#1|))))
))) (=> (forall ((|i#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (_System.array.Length |a#0@@1|))) (or (not (= (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 |a#0@@1|) (IndexField |i#1@@0|)))) |s#0@3|)) (not true)))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 |a#0@@1|) (IndexField |i#1@@0|))))
)) (=> (= (ControlFlow 0 28) (- 0 27)) (forall ((|x#1| Int) ) (!  (=> (and (<= (LitInt 0) |x#1|) (< |x#1| |s#0@3|)) (_module.__default.Has Tclass._System.nat $Heap@5 |a#0@@1| ($Box intType (int_2_U |x#1|))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@5 |a#0@@1| ($Box intType (int_2_U |x#1|))))
)))))))
(let ((anon70_Else_correct  (=> (and (and (or (not (= |s#0@1| |N#0@0|)) (not true)) (= $Heap@5 $Heap@1)) (and (= |s#0@3| |s#0@1|) (= (ControlFlow 0 32) 28))) GeneratedUnifiedExit_correct)))
(let ((anon70_Then_correct  (=> (= |s#0@1| |N#0@0|) (and (=> (= (ControlFlow 0 30) (- 0 31)) (forall ((|x#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |x#1@@0|) (< |x#1@@0| (_System.array.Length |a#0@@1|))) (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |x#1@@0|))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |x#1@@0|))))
))) (=> (forall ((|x#1@@1| T@U) ) (!  (=> (and (<= (LitInt 0) (U_2_int |x#1@@1|)) (< (U_2_int |x#1@@1|) (_System.array.Length |a#0@@1|))) (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |x#1@@1|)))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |x#1@@1|)))
)) (=> (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (_System.array.Length |a#0@@1|))) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 |a#0@@1|) (IndexField |i#1@@1|)))) (_System.array.Length |a#0@@1|)))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 |a#0@@1|) (IndexField |i#1@@1|))))
))) (and (and (= $Heap@1 $Heap@4) (= $Heap@5 $Heap@4)) (and (= |s#0@3| |s#0@1|) (= (ControlFlow 0 30) 28)))) GeneratedUnifiedExit_correct))))))
(let ((anon69_Then_correct  (=> (not (and (< |s#0@1| |N#0@0|) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |s#0@1|)))))) (and (=> (= (ControlFlow 0 33) 30) anon70_Then_correct) (=> (= (ControlFlow 0 33) 32) anon70_Else_correct)))))
(let ((anon69_Else_correct  (=> (and (and (< |s#0@1| |N#0@0|) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |s#0@1|))))) (= |$decr$loop#10@1| (- |N#0@0| |s#0@1|))) (and (=> (= (ControlFlow 0 21) (- 0 26)) ($Is intType (int_2_U (+ |s#0@1| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ |s#0@1| 1)) Tclass._System.nat) (=> (= |s#0@2| (+ |s#0@1| 1)) (and (=> (= (ControlFlow 0 21) (- 0 25)) (or (<= 0 |$decr$loop#10@1|) (= (- |N#0@0| |s#0@2|) |$decr$loop#10@1|))) (=> (or (<= 0 |$decr$loop#10@1|) (= (- |N#0@0| |s#0@2|) |$decr$loop#10@1|)) (and (=> (= (ControlFlow 0 21) (- 0 24)) (< (- |N#0@0| |s#0@2|) |$decr$loop#10@1|)) (=> (< (- |N#0@0| |s#0@2|) |$decr$loop#10@1|) (=> (=> (and (<= (LitInt 0) |s#0@2|) (<= |s#0@2| |N#0@0|)) (forall ((|j#3| T@U) ) (!  (=> (and (<= (LitInt 0) (U_2_int |j#3|)) (< (U_2_int |j#3|) |s#0@2|)) (|_module.__default.Has#canCall| Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |j#3|)))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |j#3|)))
))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (=> |$w$loop#1@0| (<= (LitInt 0) |s#0@2|))) (=> (=> |$w$loop#1@0| (<= (LitInt 0) |s#0@2|)) (and (=> (= (ControlFlow 0 21) (- 0 22)) (=> |$w$loop#1@0| (<= |s#0@2| |N#0@0|))) (=> (=> |$w$loop#1@0| (<= |s#0@2| |N#0@0|)) (=> (= (ControlFlow 0 21) (- 0 20)) (=> |$w$loop#1@0| (forall ((|j#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@0|) (< |j#3@@0| |s#0@2|)) (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#3@@0|))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#3@@0|))))
)))))))))))))))))))
(let ((anon41_correct  (and (=> (= (ControlFlow 0 34) 33) anon69_Then_correct) (=> (= (ControlFlow 0 34) 21) anon69_Else_correct))))
(let ((anon68_Else_correct  (=> (and (<= |N#0@0| |s#0@1|) (= (ControlFlow 0 38) 34)) anon41_correct)))
(let ((anon68_Then_correct  (=> (< |s#0@1| |N#0@0|) (and (=> (= (ControlFlow 0 35) (- 0 37)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (and (<= 0 |s#0@1|) (< |s#0@1| (_System.array.Length $nw@0)))) (=> (and (<= 0 |s#0@1|) (< |s#0@1| (_System.array.Length $nw@0))) (=> (= (ControlFlow 0 35) 34) anon41_correct))))))))
(let ((anon63_Else_correct  (=> |$w$loop#1@0| (and (=> (= (ControlFlow 0 39) 35) anon68_Then_correct) (=> (= (ControlFlow 0 39) 38) anon68_Else_correct)))))
(let ((anon62_LoopBody_correct  (and (=> (= (ControlFlow 0 52) 51) anon63_Then_correct) (=> (= (ControlFlow 0 52) 39) anon63_Else_correct))))
(let ((anon62_LoopDone_correct true))
(let ((anon62_LoopHead_correct  (=> (<= (LitInt 0) |s#0@1|) (=> (and (and (and (and (and (and (and (<= 0 |s#0@1|) (not false)) (<= 0 |N#0@0|)) (<= 0 |n#0@1|)) (<= 0 |$decr_init$loop#00@0|)) |$w$loop#0@0|) (<= 0 |$decr_init$loop#10@0|)) (and (and (and (=> |$w$loop#1@0| (<= (LitInt 0) |s#0@1|)) (=> |$w$loop#1@0| (<= |s#0@1| |N#0@0|))) (and (=> |$w$loop#1@0| (forall ((|j#3@@1| T@U) ) (!  (=> (and (<= (LitInt 0) (U_2_int |j#3@@1|)) (< (U_2_int |j#3@@1|) |s#0@1|)) (|_module.__default.Has#canCall| Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |j#3@@1|)))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |j#3@@1|)))
))) (=> |$w$loop#1@0| (forall ((|j#3@@2| T@U) ) (!  (=> (and (<= (LitInt 0) (U_2_int |j#3@@2|)) (< (U_2_int |j#3@@2|) |s#0@1|)) (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |j#3@@2|)))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |j#3@@2|)))
))))) (and (and (forall (($o@@9 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 $o@@9) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@9) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@9)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@9))
)) ($HeapSucc $Heap@1 $Heap@1)) (and (forall (($o@@10 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@10) alloc)))) (or (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@10) $f@@1) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@10) $f@@1)) (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 $o@@10 $f@@1))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@10) $f@@1))
)) (<= (- |N#0@0| |s#0@1|) |$decr_init$loop#10@0|))))) (and (=> (= (ControlFlow 0 53) 19) anon62_LoopDone_correct) (=> (= (ControlFlow 0 53) 52) anon62_LoopBody_correct))))))
(let ((anon60_Then_correct  (=> (<= |N#0@0| |n#0@1|) (and (=> (= (ControlFlow 0 54) (- 0 58)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> (and (= |s#0@0| (LitInt 0)) (= |$decr_init$loop#10@0| (- |N#0@0| |s#0@0|))) (and (=> (= (ControlFlow 0 54) (- 0 57)) (=> |$w$loop#1@0| (<= (LitInt 0) |s#0@0|))) (=> (=> |$w$loop#1@0| (<= (LitInt 0) |s#0@0|)) (and (=> (= (ControlFlow 0 54) (- 0 56)) (=> |$w$loop#1@0| (<= |s#0@0| |N#0@0|))) (=> (=> |$w$loop#1@0| (<= |s#0@0| |N#0@0|)) (and (=> (= (ControlFlow 0 54) (- 0 55)) (=> |$w$loop#1@0| (forall ((|j#3@@3| Int) ) (!  (=> (and (<= (LitInt 0) |j#3@@3|) (< |j#3@@3| |s#0@0|)) (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#3@@3|))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#3@@3|))))
)))) (=> (=> |$w$loop#1@0| (forall ((|j#3@@4| T@U) ) (!  (=> (and (<= (LitInt 0) (U_2_int |j#3@@4|)) (< (U_2_int |j#3@@4|) |s#0@0|)) (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |j#3@@4|)))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType |j#3@@4|)))
))) (=> (= (ControlFlow 0 54) 53) anon62_LoopHead_correct)))))))))))))
(let ((anon28_correct  (=> (= |n#0@2| (+ |n#0@1| 1)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (or (<= 0 |$decr$loop#00@1|) (= (- |N#0@0| |n#0@2|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- |N#0@0| |n#0@2|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (< (- |N#0@0| |n#0@2|) |$decr$loop#00@1|)) (=> (< (- |N#0@0| |n#0@2|) |$decr$loop#00@1|) (=> (=> (and (<= (LitInt 0) |n#0@2|) (<= |n#0@2| |N#0@0|)) (=> (forall ((|i#3@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| |n#0@2|)) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 |a#0@@1|) (IndexField |i#3@@0|)))) |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 |a#0@@1|) (IndexField |i#3@@0|)))))))))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 |a#0@@1|) (IndexField |i#3@@0|))))
)) (forall ((|j#1| Int) ) (!  (=> (and (<= (LitInt 0) |j#1|) (< |j#1| |N#0@0|)) (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#1|)))) (|_module.__default.Has#canCall| Tclass._System.nat $Heap@3 |a#0@@1| ($Box intType (int_2_U |j#1|)))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@3 |a#0@@1| ($Box intType (int_2_U |j#1|))))
 :pattern ( ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#1|))))
)))) (and (=> (= (ControlFlow 0 3) (- 0 6)) (=> |$w$loop#0@0| (<= (LitInt 0) |n#0@2|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |n#0@2|)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> |$w$loop#0@0| (<= |n#0@2| |N#0@0|))) (=> (=> |$w$loop#0@0| (<= |n#0@2| |N#0@0|)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#0@0| (forall ((|i#3@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| |n#0@2|)) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 |a#0@@1|) (IndexField |i#3@@1|)))) |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 |a#0@@1|) (IndexField |i#3@@1|)))))))))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 |a#0@@1|) (IndexField |i#3@@1|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#3@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| |n#0@2|)) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 |a#0@@1|) (IndexField |i#3@@2|)))) |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 |a#0@@1|) (IndexField |i#3@@2|)))))))))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 |a#0@@1|) (IndexField |i#3@@2|))))
))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#0@0| (forall ((|j#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#1@@0|))))) (_module.__default.Has Tclass._System.nat $Heap@3 |a#0@@1| ($Box intType (int_2_U |j#1@@0|))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@3 |a#0@@1| ($Box intType (int_2_U |j#1@@0|))))
 :pattern ( ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#1@@0|))))
))))))))))))))))))
(let ((anon61_Else_correct  (=> (<= |N#0@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |n#0@1|))))) (=> (and (= $Heap@3 $Heap@1) (= (ControlFlow 0 15) 3)) anon28_correct))))
(let ((anon61_Then_correct  (=> (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |n#0@1|)))) |N#0@0|) (and (=> (= (ControlFlow 0 9) (- 0 14)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 9) (- 0 13)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 9) (- 0 12)) (and (<= 0 |n#0@1|) (< |n#0@1| (_System.array.Length |a#0@@1|)))) (=> (and (<= 0 |n#0@1|) (< |n#0@1| (_System.array.Length |a#0@@1|))) (and (=> (= (ControlFlow 0 9) (- 0 11)) (and (<= 0 (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |n#0@1|))))) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |n#0@1|)))) (_System.array.Length $nw@0)))) (=> (and (<= 0 (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |n#0@1|))))) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |n#0@1|)))) (_System.array.Length $nw@0))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |n#0@1|)))))))) (=> (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |n#0@1|))))))) (=> (= |$rhs#0_0_0@1| (U_2_bool (Lit boolType (bool_2_U true)))) (=> (and (and (= $Heap@2 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |n#0@1|))))) ($Box boolType (bool_2_U |$rhs#0_0_0@1|))))) ($IsGoodHeap $Heap@2)) (and (= $Heap@3 $Heap@2) (= (ControlFlow 0 9) 3))) anon28_correct)))))))))))))))
(let ((anon60_Else_correct  (=> (and (< |n#0@1| |N#0@0|) (= |$decr$loop#00@1| (- |N#0@0| |n#0@1|))) (and (=> (= (ControlFlow 0 16) (- 0 18)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 16) (- 0 17)) (and (<= 0 |n#0@1|) (< |n#0@1| (_System.array.Length |a#0@@1|)))) (=> (and (<= 0 |n#0@1|) (< |n#0@1| (_System.array.Length |a#0@@1|))) (and (=> (= (ControlFlow 0 16) 9) anon61_Then_correct) (=> (= (ControlFlow 0 16) 15) anon61_Else_correct)))))))))
(let ((anon50_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 59) 54) anon60_Then_correct) (=> (= (ControlFlow 0 59) 16) anon60_Else_correct)))))
(let ((anon49_LoopBody_correct  (and (=> (= (ControlFlow 0 91) 90) anon50_Then_correct) (=> (= (ControlFlow 0 91) 59) anon50_Else_correct))))
(let ((anon49_LoopDone_correct true))
(let ((anon49_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (and (and (and (not false) (<= 0 |N#0@0|)) (<= 0 |n#0@1|)) (<= 0 |$decr_init$loop#00@0|)) (=> |$w$loop#0@0| (<= (LitInt 0) |n#0@1|))) (and (and (and (=> |$w$loop#0@0| (<= |n#0@1| |N#0@0|)) (=> |$w$loop#0@0| (forall ((|i#3@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| |n#0@1|)) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#3@@3|)))) |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#3@@3|)))))))))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 |a#0@@1|) (IndexField |i#3@@3|))))
)))) (and (=> |$w$loop#0@0| (forall ((|j#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@1|) (< |j#1@@1| |N#0@0|)) (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#1@@1|)))) (|_module.__default.Has#canCall| Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#1@@1|)))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#1@@1|))))
 :pattern ( ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#1@@1|))))
))) (=> |$w$loop#0@0| (forall ((|j#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1@@2|) (< |j#1@@2| |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#1@@2|))))) (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#1@@2|))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@1 |a#0@@1| ($Box intType (int_2_U |j#1@@2|))))
 :pattern ( ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#1@@2|))))
))))) (and (and (forall (($o@@11 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 $o@@11) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@11) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@11)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@11))
)) ($HeapSucc $Heap@0 $Heap@1)) (and (forall (($o@@12 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@12) alloc)))) (or (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@12) $f@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@12) $f@@2)) (U_2_bool (MapType0Select refType FieldType boolType $_ModifiesFrame@0 $o@@12 $f@@2))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@12) $f@@2))
)) (<= (- |N#0@0| |n#0@1|) |$decr_init$loop#00@0|))))) (and (=> (= (ControlFlow 0 92) 1) anon49_LoopDone_correct) (=> (= (ControlFlow 0 92) 91) anon49_LoopBody_correct))))))
(let ((anon47_Else_correct  (=> (and (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 (Tclass._System.array? TBool))) (and (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 $nw@0) alloc)))) (= (_System.array.Length $nw@0) |N#0@0|))) (and (=> (= (ControlFlow 0 93) (- 0 98)) (forall ((|arrayinit#0#i0#0| Int) )  (=> (and (<= 0 |arrayinit#0#i0#0|) (< |arrayinit#0#i0#0| |N#0@0|)) (Requires1 Tclass._System.nat TBool $Heap@@0 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#8| (Handle1 (|lambda#4| ($Box boolType (Lit boolType (bool_2_U false)))) (|lambda#5| Tclass._System.nat) (|lambda#7| (SetRef_to_SetBox (|lambda#6| false))))) ($LS $LZ))) ($Box intType (int_2_U |arrayinit#0#i0#0|)))))) (=> (and (forall ((|arrayinit#0#i0#0@@0| Int) ) (!  (=> (and (<= 0 |arrayinit#0#i0#0@@0|) (< |arrayinit#0#i0#0@@0| |N#0@0|)) (= (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 $nw@0) (IndexField |arrayinit#0#i0#0@@0|)))) (U_2_bool ($Unbox boolType (Apply1 Tclass._System.nat TBool $Heap@@0 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#8| (Handle1 (|lambda#4| ($Box boolType (Lit boolType (bool_2_U false)))) (|lambda#5| Tclass._System.nat) (|lambda#7| (SetRef_to_SetBox (|lambda#6| false))))) ($LS $LZ))) ($Box intType (int_2_U |arrayinit#0#i0#0@@0|)))))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 $nw@0) (IndexField |arrayinit#0#i0#0@@0|)))
)) (= $Heap@0 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@@0 $nw@0 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 $nw@0) alloc ($Box boolType (bool_2_U true)))))) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= |n#0@0| (LitInt 0)) (= |$decr_init$loop#00@0| (- |N#0@0| |n#0@0|)))) (and (=> (= (ControlFlow 0 93) (- 0 97)) (=> |$w$loop#0@0| (<= (LitInt 0) |n#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |n#0@0|)) (and (=> (= (ControlFlow 0 93) (- 0 96)) (=> |$w$loop#0@0| (<= |n#0@0| |N#0@0|))) (=> (=> |$w$loop#0@0| (<= |n#0@0| |N#0@0|)) (and (=> (= (ControlFlow 0 93) (- 0 95)) (=> |$w$loop#0@0| (forall ((|i#3@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| |n#0@0|)) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 |a#0@@1|) (IndexField |i#3@@4|)))) |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 |a#0@@1|) (IndexField |i#3@@4|)))))))))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 |a#0@@1|) (IndexField |i#3@@4|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#3@@5| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@5|) (< |i#3@@5| |n#0@0|)) (< (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 |a#0@@1|) (IndexField |i#3@@5|)))) |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 |a#0@@1|) (IndexField |i#3@@5|)))))))))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 |a#0@@1|) (IndexField |i#3@@5|))))
))) (and (=> (= (ControlFlow 0 93) (- 0 94)) (=> |$w$loop#0@0| (forall ((|j#1@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1@@3|) (< |j#1@@3| |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#1@@3|))))) (_module.__default.Has Tclass._System.nat $Heap@0 |a#0@@1| ($Box intType (int_2_U |j#1@@3|))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@0 |a#0@@1| ($Box intType (int_2_U |j#1@@3|))))
 :pattern ( ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#1@@3|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|j#1@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1@@4|) (< |j#1@@4| |N#0@0|)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#1@@4|))))) (_module.__default.Has Tclass._System.nat $Heap@0 |a#0@@1| ($Box intType (int_2_U |j#1@@4|))))
 :pattern ( (_module.__default.Has Tclass._System.nat $Heap@0 |a#0@@1| ($Box intType (int_2_U |j#1@@4|))))
 :pattern ( ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#1@@4|))))
))) (=> (= (ControlFlow 0 93) 92) anon49_LoopHead_correct)))))))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (and (=> (= (ControlFlow 0 103) (- 0 105)) (or (not (= |a#0@@1| null)) (not true))) (=> (or (not (= |a#0@@1| null)) (not true)) (=> (= |N#0@0| (_System.array.Length |a#0@@1|)) (and (=> (= (ControlFlow 0 103) (- 0 104)) (<= 0 |N#0@0|)) (=> (<= 0 |N#0@0|) (and (=> (= (ControlFlow 0 103) 102) anon47_Then_correct) (=> (= (ControlFlow 0 103) 93) anon47_Else_correct))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and ($Is refType |a#0@@1| (Tclass._System.array Tclass._System.nat)) ($IsAlloc refType |a#0@@1| (Tclass._System.array Tclass._System.nat) $Heap@@0)) (<= (LitInt 0) |s#0|)) (=> (and (and (and ($Is refType |e#0| (Tclass._System.array TBool)) ($IsAlloc refType |e#0| (Tclass._System.array TBool) $Heap@@0)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 106) 103))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
