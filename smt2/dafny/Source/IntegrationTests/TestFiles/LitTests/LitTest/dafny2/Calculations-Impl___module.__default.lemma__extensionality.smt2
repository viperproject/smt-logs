(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun _module.__default.length (T@U T@U T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |_module.List#Equal| (T@U T@U) Bool)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun _module.List._h0 (T@U) T@U)
(declare-fun _module.List._h1 (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.ith (T@U T@U T@U Int) T@U)
(declare-fun |_module.__default.ith#canCall| (T@U T@U Int) Bool)
(declare-fun $LZ () T@U)
(declare-fun BoxType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |$IsA#_module.List| (T@U) Bool)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun |_module.__default.length#canCall| (T@U T@U) Bool)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.nat Tagclass._module.List |##_module.List.Nil| |##_module.List.Cons| tytagFamily$nat tytagFamily$List)
)
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((_module._default.length$_T0 T@U) ($ly T@U) (|l#0| T@U) ) (! (= (_module.__default.length _module._default.length$_T0 ($LS $ly) |l#0|) (_module.__default.length _module._default.length$_T0 $ly |l#0|))
 :pattern ( (_module.__default.length _module._default.length$_T0 ($LS $ly) |l#0|))
)))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.List$T T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h@@0))
)))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.List#Equal| a b) (= a b))
 :pattern ( (|_module.List#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.List.Cons_q a@@0) (_module.List.Cons_q b@@0)) (= (|_module.List#Equal| a@@0 b@@0)  (and (= (_module.List._h0 a@@0) (_module.List._h0 b@@0)) (|_module.List#Equal| (_module.List._h1 a@@0) (_module.List._h1 b@@0)))))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q a@@0))
 :pattern ( (|_module.List#Equal| a@@0 b@@0) (_module.List.Cons_q b@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.ith$a T@U) ($ly@@0 T@U) (|xs#0| T@U) (|i#0| Int) ) (!  (=> (or (|_module.__default.ith#canCall| _module._default.ith$a (Lit DatatypeTypeType |xs#0|) (LitInt |i#0|)) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0| (Tclass._module.List _module._default.ith$a)) (<= (LitInt 0) |i#0|)) (U_2_bool (Lit boolType (bool_2_U (< |i#0| (_module.__default.length _module._default.ith$a ($LS $LZ) (Lit DatatypeTypeType |xs#0|))))))))) (and (let ((|xrest#3| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |xs#0|)))))
 (=> (or (not (= (LitInt |i#0|) (LitInt 0))) (not true)) (|_module.__default.ith#canCall| _module._default.ith$a |xrest#3| (LitInt (- |i#0| 1))))) (= (_module.__default.ith _module._default.ith$a ($LS $ly@@0) (Lit DatatypeTypeType |xs#0|) (LitInt |i#0|)) (let ((|xrest#2| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |xs#0|)))))
(let ((|x#2| (Lit BoxType (_module.List._h0 (Lit DatatypeTypeType |xs#0|)))))
(ite (= (LitInt |i#0|) (LitInt 0)) |x#2| (_module.__default.ith _module._default.ith$a ($LS $ly@@0) |xrest#2| (LitInt (- |i#0| 1)))))))))
 :weight 3
 :pattern ( (_module.__default.ith _module._default.ith$a ($LS $ly@@0) (Lit DatatypeTypeType |xs#0|) (LitInt |i#0|)))
))))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.List.Cons_q d@@1) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@1 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.List.Nil_q d@@2) (= d@@2 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@2))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.ith$a@@0 T@U) ($ly@@1 T@U) (|xs#0@@0| T@U) (|i#0@@0| Int) ) (!  (=> (or (|_module.__default.ith#canCall| _module._default.ith$a@@0 |xs#0@@0| |i#0@@0|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0@@0| (Tclass._module.List _module._default.ith$a@@0)) (<= (LitInt 0) |i#0@@0|)) (< |i#0@@0| (_module.__default.length _module._default.ith$a@@0 ($LS $LZ) |xs#0@@0|))))) ($IsBox (_module.__default.ith _module._default.ith$a@@0 $ly@@1 |xs#0@@0| |i#0@@0|) _module._default.ith$a@@0))
 :pattern ( (_module.__default.ith _module._default.ith$a@@0 $ly@@1 |xs#0@@0| |i#0@@0|))
))))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) Tclass._System.nat)))
 :pattern ( ($IsBox bx Tclass._System.nat))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#_module.List| d@@3) (or (_module.List.Nil_q d@@3) (_module.List.Cons_q d@@3)))
 :pattern ( (|$IsA#_module.List| d@@3))
)))
(assert (forall ((_module.List$T@@3 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@4) (_module.List.Cons_q d@@4)))
 :pattern ( (_module.List.Cons_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$T@@3)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.ith$a@@1 T@U) ($ly@@2 T@U) (|xs#0@@1| T@U) (|i#0@@1| Int) ) (!  (=> (and (or (|_module.__default.ith#canCall| _module._default.ith$a@@1 |xs#0@@1| |i#0@@1|) (and (< 2 $FunctionContextHeight) (and (and (and ($Is DatatypeTypeType |xs#0@@1| (Tclass._module.List _module._default.ith$a@@1)) ($IsAlloc DatatypeTypeType |xs#0@@1| (Tclass._module.List _module._default.ith$a@@1) $Heap)) (<= (LitInt 0) |i#0@@1|)) (< |i#0@@1| (_module.__default.length _module._default.ith$a@@1 ($LS $LZ) |xs#0@@1|))))) ($IsGoodHeap $Heap)) ($IsAllocBox (_module.__default.ith _module._default.ith$a@@1 $ly@@2 |xs#0@@1| |i#0@@1|) _module._default.ith$a@@1 $Heap))
 :pattern ( ($IsAllocBox (_module.__default.ith _module._default.ith$a@@1 $ly@@2 |xs#0@@1| |i#0@@1|) _module._default.ith$a@@1 $Heap))
))))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.List.Nil_q a@@1) (_module.List.Nil_q b@@1)) (|_module.List#Equal| a@@1 b@@1))
 :pattern ( (|_module.List#Equal| a@@1 b@@1) (_module.List.Nil_q a@@1))
 :pattern ( (|_module.List#Equal| a@@1 b@@1) (_module.List.Nil_q b@@1))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List._h0 (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List._h1 (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.ith$a@@2 T@U) ($ly@@3 T@U) (|xs#0@@2| T@U) (|i#0@@2| Int) ) (!  (=> (or (|_module.__default.ith#canCall| _module._default.ith$a@@2 |xs#0@@2| |i#0@@2|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |xs#0@@2| (Tclass._module.List _module._default.ith$a@@2)) (<= (LitInt 0) |i#0@@2|)) (< |i#0@@2| (_module.__default.length _module._default.ith$a@@2 ($LS $LZ) |xs#0@@2|))))) (and (let ((|xrest#1| (_module.List._h1 |xs#0@@2|)))
 (=> (or (not (= |i#0@@2| (LitInt 0))) (not true)) (|_module.__default.ith#canCall| _module._default.ith$a@@2 |xrest#1| (- |i#0@@2| 1)))) (= (_module.__default.ith _module._default.ith$a@@2 ($LS $ly@@3) |xs#0@@2| |i#0@@2|) (let ((|xrest#0| (_module.List._h1 |xs#0@@2|)))
(let ((|x#0@@1| (_module.List._h0 |xs#0@@2|)))
(ite (= |i#0@@2| (LitInt 0)) |x#0@@1| (_module.__default.ith _module._default.ith$a@@2 $ly@@3 |xrest#0| (- |i#0@@2| 1))))))))
 :pattern ( (_module.__default.ith _module._default.ith$a@@2 ($LS $ly@@3) |xs#0@@2| |i#0@@2|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.length$_T0@@0 T@U) ($ly@@4 T@U) (|l#0@@0| T@U) ) (!  (=> (or (|_module.__default.length#canCall| _module._default.length$_T0@@0 |l#0@@0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@0| (Tclass._module.List _module._default.length$_T0@@0)))) (and (=> (not (_module.List.Nil_q |l#0@@0|)) (let ((|xs#1| (_module.List._h1 |l#0@@0|)))
(|_module.__default.length#canCall| _module._default.length$_T0@@0 |xs#1|))) (= (_module.__default.length _module._default.length$_T0@@0 ($LS $ly@@4) |l#0@@0|) (ite (_module.List.Nil_q |l#0@@0|) 0 (let ((|xs#0@@3| (_module.List._h1 |l#0@@0|)))
(+ 1 (_module.__default.length _module._default.length$_T0@@0 $ly@@4 |xs#0@@3|)))))))
 :pattern ( (_module.__default.length _module._default.length$_T0@@0 ($LS $ly@@4) |l#0@@0|))
))))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((d@@5 T@U) (_module.List$T@@5 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.List.Cons_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.List _module.List$T@@5) $h@@1))) ($IsAllocBox (_module.List._h0 d@@5) _module.List$T@@5 $h@@1))
 :pattern ( ($IsAllocBox (_module.List._h0 d@@5) _module.List$T@@5 $h@@1))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@1| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@1|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((_module._default.ith$a@@3 T@U) ($ly@@5 T@U) (|xs#0@@4| T@U) (|i#0@@3| Int) ) (! (= (_module.__default.ith _module._default.ith$a@@3 ($LS $ly@@5) |xs#0@@4| |i#0@@3|) (_module.__default.ith _module._default.ith$a@@3 $ly@@5 |xs#0@@4| |i#0@@3|))
 :pattern ( (_module.__default.ith _module._default.ith$a@@3 ($LS $ly@@5) |xs#0@@4| |i#0@@3|))
)))
(assert (forall ((_module.List$T@@6 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@0 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((d@@7 T@U) (_module.List$T@@7 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.List.Cons_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.List _module.List$T@@7) $h@@2))) ($IsAlloc DatatypeTypeType (_module.List._h1 d@@7) (Tclass._module.List _module.List$T@@7) $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List._h1 d@@7) (Tclass._module.List _module.List$T@@7) $h@@2))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.length$_T0@@1 T@U) ($ly@@6 T@U) (|l#0@@2| T@U) ) (!  (=> (or (|_module.__default.length#canCall| _module._default.length$_T0@@1 |l#0@@2|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@2| (Tclass._module.List _module._default.length$_T0@@1)))) (<= (LitInt 0) (_module.__default.length _module._default.length$_T0@@1 $ly@@6 |l#0@@2|)))
 :pattern ( (_module.__default.length _module._default.length$_T0@@1 $ly@@6 |l#0@@2|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.length$_T0@@2 T@U) ($ly@@7 T@U) (|l#0@@3| T@U) ) (!  (=> (or (|_module.__default.length#canCall| _module._default.length$_T0@@2 (Lit DatatypeTypeType |l#0@@3|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |l#0@@3| (Tclass._module.List _module._default.length$_T0@@2)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@3|)))))) (let ((|xs#3| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |l#0@@3|)))))
(|_module.__default.length#canCall| _module._default.length$_T0@@2 |xs#3|))) (= (_module.__default.length _module._default.length$_T0@@2 ($LS $ly@@7) (Lit DatatypeTypeType |l#0@@3|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |l#0@@3|)) 0 (let ((|xs#2| (Lit DatatypeTypeType (_module.List._h1 (Lit DatatypeTypeType |l#0@@3|)))))
(LitInt (+ 1 (_module.__default.length _module._default.length$_T0@@2 ($LS $ly@@7) |xs#2|))))))))
 :weight 3
 :pattern ( (_module.__default.length _module._default.length$_T0@@2 ($LS $ly@@7) (Lit DatatypeTypeType |l#0@@3|)))
))))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@3 T@U) ) (!  (=> ($IsGoodHeap $h@@3) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@3)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$T@@8 $h@@3) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$T@@8) $h@@3))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$T@@8) $h@@3))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |ys#0| () T@U)
(declare-fun |xs#0@@5| () T@U)
(declare-fun _module._default.lemma_extensionality$_T0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |x#0_0@0| () T@U)
(declare-fun |y#0_0_0@0| () T@U)
(declare-fun |xrest#0_0@0| () T@U)
(declare-fun |##i#0_0_0_2_0_0_0@0| () Int)
(declare-fun |##i#0_0_0_2_0_1_0@0| () Int)
(declare-fun |##i#0_0_0_2_0_1_1@0| () Int)
(declare-fun |##i#0_0_0_2_0_2_0@0| () Int)
(declare-fun |j#0_0_0_1_0_0@0| () Int)
(declare-fun |yrest#0_0_0@0| () T@U)
(declare-fun |##i#0_0_0_1_0_0_0_0@0| () Int)
(declare-fun |##i#0_0_0_1_0_0_1_0@0| () Int)
(declare-fun |##i#0_0_0_1_0_0_1_1@0| () Int)
(declare-fun |##i#0_0_0_1_0_0_2_1@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |_mcc#2#0_0_0@0| () T@U)
(declare-fun |_mcc#3#0_0_0@0| () T@U)
(declare-fun |let#0_0_0#0#0| () T@U)
(declare-fun |let#0_0_1#0#0| () T@U)
(declare-fun |_mcc#0#0_0@0| () T@U)
(declare-fun |_mcc#1#0_0@0| () T@U)
(declare-fun |let#0_0#0#0| () T@U)
(declare-fun |let#0_1#0#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap@@0 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 69) (let ((anon39_Then_correct  (=> (and (|$IsA#_module.List| |ys#0|) (|_module.List#Equal| |#_module.List.Nil| |ys#0|)) (=> (and (and (and (|$IsA#_module.List| |xs#0@@5|) (|$IsA#_module.List| |ys#0|)) (= (ControlFlow 0 65) (- 0 64))) (|_module.List#Equal| |#_module.List.Nil| |ys#0|)) (|_module.List#Equal| |xs#0@@5| |ys#0|)))))
(let ((anon38_Then_correct  (=> (and (and ($IsAlloc DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |ys#0|)) (and (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |ys#0|) (= (LitInt 0) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |ys#0|)))) (=> (and (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |ys#0|)) (and (= (= (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0|) (LitInt 0)) (_module.List.Nil_q |ys#0|)) (= $Heap@0 $Heap@2))) (and (and (|$IsA#_module.List| |ys#0|) (= (ControlFlow 0 63) (- 0 62))) (= (LitInt 0) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |ys#0|)))) (|_module.List#Equal| |#_module.List.Nil| |ys#0|)))))
(let ((anon37_Then_correct  (=> (and (and ($IsAlloc DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5|)) (and ($IsAlloc DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |ys#0|))) (=> (and (and (and (and (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5|) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |ys#0|)) (= (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |xs#0@@5|) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |ys#0|))) (and ($IsAlloc DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |ys#0|))) (and (and (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |ys#0|) (= (ControlFlow 0 61) (- 0 60))) (= (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |xs#0@@5|) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |ys#0|)))) (= (LitInt 0) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0|))))))
(let ((anon36_Then_correct  (=> (and (and ($IsAlloc DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5|)) (and ($IsAlloc DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |ys#0|))) (=> (and (and (and (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5|) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |ys#0|)) (= (ControlFlow 0 59) (- 0 58))) (U_2_bool (Lit boolType (bool_2_U true)))) (= (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5|) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0|))))))
(let ((anon35_Then_correct true))
(let ((anon48_Else_correct  (=> (and (= |x#0_0@0| |y#0_0_0@0|) (= (ControlFlow 0 52) (- 0 51))) (|_module.List#Equal| (|#_module.List.Cons| |x#0_0@0| |xrest#0_0@0|) (|#_module.List.Cons| |y#0_0_0@0| |xrest#0_0@0|)))))
(let ((anon48_Then_correct  (=> (and (and (and ($IsAlloc DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (and (= |##i#0_0_0_2_0_0_0@0| (LitInt 0)) ($IsAlloc intType (int_2_U |##i#0_0_0_2_0_0_0@0|) Tclass._System.nat $Heap@0))) (and (and (< |##i#0_0_0_2_0_0_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0|)) (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |ys#0| (LitInt 0))) (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |ys#0| (LitInt 0)) (= (ControlFlow 0 50) (- 0 49))))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0| (LitInt 0)) |y#0_0_0@0|))))
(let ((anon47_Then_correct  (=> (and (and (and ($IsAlloc DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (and (= |##i#0_0_0_2_0_1_0@0| (LitInt 0)) ($IsAlloc intType (int_2_U |##i#0_0_0_2_0_1_0@0|) Tclass._System.nat $Heap@0))) (and (and (< |##i#0_0_0_2_0_1_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5|)) (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5| (LitInt 0))) (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5| (LitInt 0)) ($IsAlloc DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0)))) (and (=> (= (ControlFlow 0 46) (- 0 48)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> (and (= |##i#0_0_0_2_0_1_1@0| (LitInt 0)) ($IsAlloc intType (int_2_U |##i#0_0_0_2_0_1_1@0|) Tclass._System.nat $Heap@0)) (and (=> (= (ControlFlow 0 46) (- 0 47)) (< |##i#0_0_0_2_0_1_1@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0|))) (=> (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |ys#0| (LitInt 0)) (=> (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |ys#0| (LitInt 0)) (= (ControlFlow 0 46) (- 0 45))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5| (LitInt 0)) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0| (LitInt 0))))))))))))
(let ((anon46_Then_correct  (=> ($IsAlloc DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (and (=> (= (ControlFlow 0 42) (- 0 44)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> (and (= |##i#0_0_0_2_0_2_0@0| (LitInt 0)) ($IsAlloc intType (int_2_U |##i#0_0_0_2_0_2_0@0|) Tclass._System.nat $Heap@0)) (and (=> (= (ControlFlow 0 42) (- 0 43)) (< |##i#0_0_0_2_0_2_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5|))) (=> (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5| (LitInt 0)) (=> (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5| (LitInt 0)) (= (ControlFlow 0 42) (- 0 41))) (= |x#0_0@0| (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5| (LitInt 0))))))))))))
(let ((anon45_Then_correct true))
(let ((anon44_Then_correct  (and (and (and (and (=> (= (ControlFlow 0 53) 40) anon45_Then_correct) (=> (= (ControlFlow 0 53) 42) anon46_Then_correct)) (=> (= (ControlFlow 0 53) 46) anon47_Then_correct)) (=> (= (ControlFlow 0 53) 50) anon48_Then_correct)) (=> (= (ControlFlow 0 53) 52) anon48_Else_correct))))
(let ((anon55_Else_correct  (=> (and (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |xrest#0_0@0| |j#0_0_0_1_0_0@0|) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |yrest#0_0_0@0| |j#0_0_0_1_0_0@0|)) (= (ControlFlow 0 36) (- 0 35))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0| |j#0_0_0_1_0_0@0|) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0| |j#0_0_0_1_0_0@0|)))))
(let ((anon55_Then_correct  (=> ($IsAlloc DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (=> (and (and (and ($Is intType (int_2_U (+ |j#0_0_0_1_0_0@0| 1)) Tclass._System.nat) (= |##i#0_0_0_1_0_0_0_0@0| (+ |j#0_0_0_1_0_0@0| 1))) (and ($IsAlloc intType (int_2_U |##i#0_0_0_1_0_0_0_0@0|) Tclass._System.nat $Heap@0) (< |##i#0_0_0_1_0_0_0_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0|)))) (and (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |ys#0| (+ |j#0_0_0_1_0_0@0| 1)) (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |ys#0| (+ |j#0_0_0_1_0_0@0| 1))) (and ($IsAlloc DatatypeTypeType |yrest#0_0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) ($IsAlloc intType (int_2_U |j#0_0_0_1_0_0@0|) Tclass._System.nat $Heap@0)))) (and (=> (= (ControlFlow 0 33) (- 0 34)) (< |j#0_0_0_1_0_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0|))) (=> (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |yrest#0_0_0@0| |j#0_0_0_1_0_0@0|) (=> (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |yrest#0_0_0@0| |j#0_0_0_1_0_0@0|) (= (ControlFlow 0 33) (- 0 32))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0| (+ |j#0_0_0_1_0_0@0| 1)) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0| |j#0_0_0_1_0_0@0|)))))))))
(let ((anon54_Then_correct  (=> (and (and (and ($IsAlloc DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) ($Is intType (int_2_U (+ |j#0_0_0_1_0_0@0| 1)) Tclass._System.nat)) (and (= |##i#0_0_0_1_0_0_1_0@0| (+ |j#0_0_0_1_0_0@0| 1)) ($IsAlloc intType (int_2_U |##i#0_0_0_1_0_0_1_0@0|) Tclass._System.nat $Heap@0))) (and (and (< |##i#0_0_0_1_0_0_1_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5|)) (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5| (+ |j#0_0_0_1_0_0@0| 1))) (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5| (+ |j#0_0_0_1_0_0@0| 1)) ($IsAlloc DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0)))) (and (=> (= (ControlFlow 0 29) (- 0 31)) ($Is intType (int_2_U (+ |j#0_0_0_1_0_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ |j#0_0_0_1_0_0@0| 1)) Tclass._System.nat) (=> (and (= |##i#0_0_0_1_0_0_1_1@0| (+ |j#0_0_0_1_0_0@0| 1)) ($IsAlloc intType (int_2_U |##i#0_0_0_1_0_0_1_1@0|) Tclass._System.nat $Heap@0)) (and (=> (= (ControlFlow 0 29) (- 0 30)) (< |##i#0_0_0_1_0_0_1_1@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0|))) (=> (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |ys#0| (+ |j#0_0_0_1_0_0@0| 1)) (=> (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |ys#0| (+ |j#0_0_0_1_0_0@0| 1)) (= (ControlFlow 0 29) (- 0 28))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5| (+ |j#0_0_0_1_0_0@0| 1)) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0| (+ |j#0_0_0_1_0_0@0| 1))))))))))))
(let ((anon53_Then_correct  (=> (and ($IsAlloc DatatypeTypeType |xrest#0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) ($IsAlloc intType (int_2_U |j#0_0_0_1_0_0@0|) Tclass._System.nat $Heap@0)) (=> (and (and (< |j#0_0_0_1_0_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0|)) (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xrest#0_0@0| |j#0_0_0_1_0_0@0|)) (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xrest#0_0@0| |j#0_0_0_1_0_0@0|) ($IsAlloc DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0))) (and (=> (= (ControlFlow 0 25) (- 0 27)) ($Is intType (int_2_U (+ |j#0_0_0_1_0_0@0| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ |j#0_0_0_1_0_0@0| 1)) Tclass._System.nat) (=> (and (= |##i#0_0_0_1_0_0_2_1@0| (+ |j#0_0_0_1_0_0@0| 1)) ($IsAlloc intType (int_2_U |##i#0_0_0_1_0_0_2_1@0|) Tclass._System.nat $Heap@0)) (and (=> (= (ControlFlow 0 25) (- 0 26)) (< |##i#0_0_0_1_0_0_2_1@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5|))) (=> (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5| (+ |j#0_0_0_1_0_0@0| 1)) (=> (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xs#0@@5| (+ |j#0_0_0_1_0_0@0| 1)) (= (ControlFlow 0 25) (- 0 24))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0| |j#0_0_0_1_0_0@0|) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5| (+ |j#0_0_0_1_0_0@0| 1)))))))))))))
(let ((anon52_Then_correct  (=> ($IsAlloc DatatypeTypeType |xrest#0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (=> (and ($IsAlloc intType (int_2_U |j#0_0_0_1_0_0@0|) Tclass._System.nat $Heap@0) (= (ControlFlow 0 23) (- 0 22))) (< |j#0_0_0_1_0_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0|))))))
(let ((anon51_Else_correct  (and (and (and (and (=> (= (ControlFlow 0 37) 23) anon52_Then_correct) (=> (= (ControlFlow 0 37) 25) anon53_Then_correct)) (=> (= (ControlFlow 0 37) 29) anon54_Then_correct)) (=> (= (ControlFlow 0 37) 33) anon55_Then_correct)) (=> (= (ControlFlow 0 37) 36) anon55_Else_correct))))
(let ((anon51_Then_correct  (=> (and ($IsAlloc DatatypeTypeType |xrest#0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) ($IsAlloc intType (int_2_U |j#0_0_0_1_0_0@0|) Tclass._System.nat $Heap@0)) (and (=> (= (ControlFlow 0 20) (- 0 21)) (< |j#0_0_0_1_0_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0|))) (=> (and (and (|_module.__default.ith#canCall| _module._default.lemma_extensionality$_T0 |xrest#0_0@0| |j#0_0_0_1_0_0@0|) ($IsAlloc DatatypeTypeType |yrest#0_0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0)) (and ($IsAlloc intType (int_2_U |j#0_0_0_1_0_0@0|) Tclass._System.nat $Heap@0) (= (ControlFlow 0 20) (- 0 19)))) (< |j#0_0_0_1_0_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0|)))))))
(let ((anon50_Then_correct  (=> (<= (LitInt 0) |j#0_0_0_1_0_0@0|) (=> (and (and ($IsAlloc DatatypeTypeType |xrest#0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0) (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |xrest#0_0@0|)) (and (|_module.__default.length#canCall| _module._default.lemma_extensionality$_T0 |xrest#0_0@0|) (< |j#0_0_0_1_0_0@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |xrest#0_0@0|)))) (and (=> (= (ControlFlow 0 38) 20) anon51_Then_correct) (=> (= (ControlFlow 0 38) 37) anon51_Else_correct))))))
(let ((anon50_Else_correct  (=> (forall ((|j#0_0_0_1_0_1| Int) ) (!  (=> (and (<= (LitInt 0) |j#0_0_0_1_0_1|) (< |j#0_0_0_1_0_1| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |xrest#0_0@0|))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |xrest#0_0@0| |j#0_0_0_1_0_1|) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |yrest#0_0_0@0| |j#0_0_0_1_0_1|)))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |yrest#0_0_0@0| |j#0_0_0_1_0_1|))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |xrest#0_0@0| |j#0_0_0_1_0_1|))
)) (and (=> (= (ControlFlow 0 15) (- 0 18)) (or (< (DtRank |xrest#0_0@0|) (DtRank |xs#0@@5|)) (and (= (DtRank |xrest#0_0@0|) (DtRank |xs#0@@5|)) (< (DtRank |yrest#0_0_0@0|) (DtRank |ys#0|))))) (=> (or (< (DtRank |xrest#0_0@0|) (DtRank |xs#0@@5|)) (and (= (DtRank |xrest#0_0@0|) (DtRank |xs#0@@5|)) (< (DtRank |yrest#0_0_0@0|) (DtRank |ys#0|)))) (and (=> (= (ControlFlow 0 15) (- 0 17)) (= (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0|) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0|))) (=> (= (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0|) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0|)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0|))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0| |i#1|) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0| |i#1|)))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0| |i#1|))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0| |i#1|))
))) (=> (forall ((|i#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0|))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0| |i#1@@0|) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0| |i#1@@0|)))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |yrest#0_0_0@0| |i#1@@0|))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xrest#0_0@0| |i#1@@0|))
)) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (and (|$IsA#_module.List| |xrest#0_0@0|) (|$IsA#_module.List| |yrest#0_0_0@0|)) (|_module.List#Equal| |xrest#0_0@0| |yrest#0_0_0@0|)) (and (= $Heap@0 $Heap@1) (= (ControlFlow 0 15) (- 0 14)))) (|_module.List#Equal| (|#_module.List.Cons| |y#0_0_0@0| |xrest#0_0@0|) (|#_module.List.Cons| |y#0_0_0@0| |yrest#0_0_0@0|)))))))))))))
(let ((anon49_Then_correct  (and (=> (= (ControlFlow 0 39) 38) anon50_Then_correct) (=> (= (ControlFlow 0 39) 15) anon50_Else_correct))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 12) (- 0 11)) (|_module.List#Equal| |xs#0@@5| |ys#0|))))
(let ((anon39_Else_correct  (=> (and (=> true (|_module.List#Equal| |xs#0@@5| |ys#0|)) (= (ControlFlow 0 66) 12)) GeneratedUnifiedExit_correct)))
(let ((anon34_Then_correct  (=> (= |xs#0@@5| |#_module.List.Nil|) (and (and (and (and (and (=> (= (ControlFlow 0 67) 57) anon35_Then_correct) (=> (= (ControlFlow 0 67) 59) anon36_Then_correct)) (=> (= (ControlFlow 0 67) 61) anon37_Then_correct)) (=> (= (ControlFlow 0 67) 63) anon38_Then_correct)) (=> (= (ControlFlow 0 67) 65) anon39_Then_correct)) (=> (= (ControlFlow 0 67) 66) anon39_Else_correct)))))
(let ((anon56_Else_correct  (=> (and (|_module.List#Equal| |xs#0@@5| |ys#0|) (= (ControlFlow 0 13) 12)) GeneratedUnifiedExit_correct)))
(let ((anon56_Then_correct  (=> (= (ControlFlow 0 10) (- 0 9)) (|_module.List#Equal| (|#_module.List.Cons| |y#0_0_0@0| |yrest#0_0_0@0|) |ys#0|))))
(let ((anon43_Then_correct  (=> (= (ControlFlow 0 8) (- 0 7)) (|_module.List#Equal| |xs#0@@5| (|#_module.List.Cons| |x#0_0@0| |xrest#0_0@0|)))))
(let ((anon42_Then_correct true))
(let ((anon41_Then_correct  (=> (= |ys#0| (|#_module.List.Cons| |_mcc#2#0_0_0@0| |_mcc#3#0_0_0@0|)) (=> (and ($IsBox |_mcc#2#0_0_0@0| _module._default.lemma_extensionality$_T0) ($Is DatatypeTypeType |_mcc#3#0_0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0))) (=> (and (and (and (and ($Is DatatypeTypeType |yrest#0_0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0)) ($IsAlloc DatatypeTypeType |yrest#0_0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0)) (= |let#0_0_0#0#0| |_mcc#3#0_0_0@0|)) (and ($Is DatatypeTypeType |let#0_0_0#0#0| (Tclass._module.List _module._default.lemma_extensionality$_T0)) (= |yrest#0_0_0@0| |let#0_0_0#0#0|))) (and (and (and ($IsBox |y#0_0_0@0| _module._default.lemma_extensionality$_T0) ($IsAllocBox |y#0_0_0@0| _module._default.lemma_extensionality$_T0 $Heap@0)) (= |let#0_0_1#0#0| |_mcc#2#0_0_0@0|)) (and ($IsBox |let#0_0_1#0#0| _module._default.lemma_extensionality$_T0) (= |y#0_0_0@0| |let#0_0_1#0#0|)))) (and (and (and (and (and (=> (= (ControlFlow 0 54) 6) anon42_Then_correct) (=> (= (ControlFlow 0 54) 8) anon43_Then_correct)) (=> (= (ControlFlow 0 54) 53) anon44_Then_correct)) (=> (= (ControlFlow 0 54) 39) anon49_Then_correct)) (=> (= (ControlFlow 0 54) 10) anon56_Then_correct)) (=> (= (ControlFlow 0 54) 13) anon56_Else_correct)))))))
(let ((anon57_Else_correct true))
(let ((anon57_Then_correct  (=> (and (= |ys#0| |#_module.List.Nil|) (= (ControlFlow 0 3) (- 0 2))) false)))
(let ((anon41_Else_correct  (=> (or (not (= |ys#0| (|#_module.List.Cons| |_mcc#2#0_0_0@0| |_mcc#3#0_0_0@0|))) (not true)) (and (=> (= (ControlFlow 0 5) 3) anon57_Then_correct) (=> (= (ControlFlow 0 5) 4) anon57_Else_correct)))))
(let ((anon40_Then_correct  (=> (= |xs#0@@5| (|#_module.List.Cons| |_mcc#0#0_0@0| |_mcc#1#0_0@0|)) (=> (and ($IsBox |_mcc#0#0_0@0| _module._default.lemma_extensionality$_T0) ($Is DatatypeTypeType |_mcc#1#0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0))) (=> (and (and (and (and ($Is DatatypeTypeType |xrest#0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0)) ($IsAlloc DatatypeTypeType |xrest#0_0@0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@0)) (= |let#0_0#0#0| |_mcc#1#0_0@0|)) (and ($Is DatatypeTypeType |let#0_0#0#0| (Tclass._module.List _module._default.lemma_extensionality$_T0)) (= |xrest#0_0@0| |let#0_0#0#0|))) (and (and (and ($IsBox |x#0_0@0| _module._default.lemma_extensionality$_T0) ($IsAllocBox |x#0_0@0| _module._default.lemma_extensionality$_T0 $Heap@0)) (= |let#0_1#0#0| |_mcc#0#0_0@0|)) (and ($IsBox |let#0_1#0#0| _module._default.lemma_extensionality$_T0) (= |x#0_0@0| |let#0_1#0#0|)))) (and (=> (= (ControlFlow 0 55) 54) anon41_Then_correct) (=> (= (ControlFlow 0 55) 5) anon41_Else_correct)))))))
(let ((anon40_Else_correct true))
(let ((anon34_Else_correct  (=> (or (not (= |xs#0@@5| |#_module.List.Nil|)) (not true)) (and (=> (= (ControlFlow 0 56) 55) anon40_Then_correct) (=> (= (ControlFlow 0 56) 1) anon40_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (=> (and (|$IsA#_module.List| |xs#0@@5|) (|$IsA#_module.List| |ys#0|)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@0 $Heap@0) (forall ((|$ih#xs0#0| T@U) (|$ih#ys0#0| T@U) ) (!  (=> (and (and (and ($Is DatatypeTypeType |$ih#xs0#0| (Tclass._module.List _module._default.lemma_extensionality$_T0)) ($Is DatatypeTypeType |$ih#ys0#0| (Tclass._module.List _module._default.lemma_extensionality$_T0))) (and (= (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |$ih#xs0#0|) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |$ih#ys0#0|)) (forall ((|i#2| Int) ) (!  (=> (and (<= (LitInt 0) |i#2|) (< |i#2| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |$ih#xs0#0|))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |$ih#xs0#0| |i#2|) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |$ih#ys0#0| |i#2|)))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |$ih#ys0#0| |i#2|))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |$ih#xs0#0| |i#2|))
)))) (or (< (DtRank |$ih#xs0#0|) (DtRank |xs#0@@5|)) (and (= (DtRank |$ih#xs0#0|) (DtRank |xs#0@@5|)) (< (DtRank |$ih#ys0#0|) (DtRank |ys#0|))))) (|_module.List#Equal| |$ih#xs0#0| |$ih#ys0#0|))
 :pattern ( (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |$ih#ys0#0|) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |$ih#xs0#0|))
)))) (and (=> (= (ControlFlow 0 68) 67) anon34_Then_correct) (=> (= (ControlFlow 0 68) 56) anon34_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and ($Is DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.lemma_extensionality$_T0)) ($IsAlloc DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@@0)) (|$IsA#_module.List| |xs#0@@5|)) (=> (and (and (and ($Is DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0)) ($IsAlloc DatatypeTypeType |ys#0| (Tclass._module.List _module._default.lemma_extensionality$_T0) $Heap@@0)) (|$IsA#_module.List| |ys#0|)) (and (and (= 3 $FunctionContextHeight) (= (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |xs#0@@5|) (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS ($LS $LZ)) |ys#0|))) (and (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (_module.__default.length _module._default.lemma_extensionality$_T0 ($LS $LZ) |xs#0@@5|))) (= (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |xs#0@@5| |i#1@@1|) (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |ys#0| |i#1@@1|)))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |ys#0| |i#1@@1|))
 :pattern ( (_module.__default.ith _module._default.lemma_extensionality$_T0 ($LS $LZ) |xs#0@@5| |i#1@@1|))
)) (= (ControlFlow 0 69) 68)))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
