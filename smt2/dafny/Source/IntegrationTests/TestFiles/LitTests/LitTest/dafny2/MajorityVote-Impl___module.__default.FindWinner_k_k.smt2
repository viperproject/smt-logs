(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Count (T@U T@U T@U Int Int T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun |_module.__default.Count#canCall| (T@U T@U Int Int T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun _module.__default.HasMajority (T@U T@U Int Int T@U) Bool)
(declare-fun BoxType () T@T)
(declare-fun |_module.__default.HasMajority#canCall| (T@U T@U Int Int T@U) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun $LZ () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor SeqType) 3))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Count$T T@U) ($ly T@U) (|a#0| T@U) (|s#0| Int) (|t#0| Int) (|x#0| T@U) ) (!  (=> (or (|_module.__default.Count#canCall| _module._default.Count$T (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt |t#0|) |x#0|) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |a#0| (TSeq _module._default.Count$T)) ($IsBox |x#0| _module._default.Count$T)) (and (and (<= (LitInt 0) (LitInt |s#0|)) (<= (LitInt |s#0|) (LitInt |t#0|))) (<= (LitInt |t#0|) (|Seq#Length| (Lit SeqType |a#0|))))))) (and (=> (or (not (= (LitInt |s#0|) (LitInt |t#0|))) (not true)) (|_module.__default.Count#canCall| _module._default.Count$T (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt (- |t#0| 1)) |x#0|)) (= (_module.__default.Count _module._default.Count$T ($LS $ly) (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt |t#0|) |x#0|) (ite (= (LitInt |s#0|) (LitInt |t#0|)) 0 (+ (_module.__default.Count _module._default.Count$T ($LS $ly) (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt (- |t#0| 1)) |x#0|) (ite (= (|Seq#Index| (Lit SeqType |a#0|) (LitInt (- |t#0| 1))) |x#0|) 1 0))))))
 :weight 3
 :pattern ( (_module.__default.Count _module._default.Count$T ($LS $ly) (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt |t#0|) |x#0|))
))))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.HasMajority$T T@U) (|a#0@@0| T@U) (|s#0@@0| Int) (|t#0@@0| Int) (|x#0@@0| T@U) ) (!  (=> (or (|_module.__default.HasMajority#canCall| _module._default.HasMajority$T (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt |t#0@@0|) (Lit BoxType |x#0@@0|)) (and (< 1 $FunctionContextHeight) (and (and ($Is SeqType |a#0@@0| (TSeq _module._default.HasMajority$T)) ($IsBox |x#0@@0| _module._default.HasMajority$T)) (and (and (<= (LitInt 0) (LitInt |s#0@@0|)) (<= (LitInt |s#0@@0|) (LitInt |t#0@@0|))) (<= (LitInt |t#0@@0|) (|Seq#Length| (Lit SeqType |a#0@@0|))))))) (and (|_module.__default.Count#canCall| _module._default.HasMajority$T (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt |t#0@@0|) (Lit BoxType |x#0@@0|)) (= (_module.__default.HasMajority _module._default.HasMajority$T (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt |t#0@@0|) (Lit BoxType |x#0@@0|)) (U_2_bool (Lit boolType (bool_2_U (> (Mul (LitInt 2) (LitInt (_module.__default.Count _module._default.HasMajority$T ($LS $LZ) (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt |t#0@@0|) (Lit BoxType |x#0@@0|)))) (- |t#0@@0| |s#0@@0|))))))))
 :weight 3
 :pattern ( (_module.__default.HasMajority _module._default.HasMajority$T (Lit SeqType |a#0@@0|) (LitInt |s#0@@0|) (LitInt |t#0@@0|) (Lit BoxType |x#0@@0|)))
))))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Count$T@@0 T@U) ($ly@@0 T@U) (|a#0@@1| T@U) (|s#0@@1| Int) (|t#0@@1| Int) (|x#0@@1| T@U) ) (!  (=> (or (|_module.__default.Count#canCall| _module._default.Count$T@@0 (Lit SeqType |a#0@@1|) (LitInt |s#0@@1|) (LitInt |t#0@@1|) (Lit BoxType |x#0@@1|)) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |a#0@@1| (TSeq _module._default.Count$T@@0)) ($IsBox |x#0@@1| _module._default.Count$T@@0)) (and (and (<= (LitInt 0) (LitInt |s#0@@1|)) (<= (LitInt |s#0@@1|) (LitInt |t#0@@1|))) (<= (LitInt |t#0@@1|) (|Seq#Length| (Lit SeqType |a#0@@1|))))))) (and (=> (or (not (= (LitInt |s#0@@1|) (LitInt |t#0@@1|))) (not true)) (|_module.__default.Count#canCall| _module._default.Count$T@@0 (Lit SeqType |a#0@@1|) (LitInt |s#0@@1|) (LitInt (- |t#0@@1| 1)) (Lit BoxType |x#0@@1|))) (= (_module.__default.Count _module._default.Count$T@@0 ($LS $ly@@0) (Lit SeqType |a#0@@1|) (LitInt |s#0@@1|) (LitInt |t#0@@1|) (Lit BoxType |x#0@@1|)) (ite (= (LitInt |s#0@@1|) (LitInt |t#0@@1|)) 0 (+ (_module.__default.Count _module._default.Count$T@@0 ($LS $ly@@0) (Lit SeqType |a#0@@1|) (LitInt |s#0@@1|) (LitInt (- |t#0@@1| 1)) (Lit BoxType |x#0@@1|)) (ite (= (|Seq#Index| (Lit SeqType |a#0@@1|) (LitInt (- |t#0@@1| 1))) (Lit BoxType |x#0@@1|)) 1 0))))))
 :weight 3
 :pattern ( (_module.__default.Count _module._default.Count$T@@0 ($LS $ly@@0) (Lit SeqType |a#0@@1|) (LitInt |s#0@@1|) (LitInt |t#0@@1|) (Lit BoxType |x#0@@1|)))
))))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_module._default.Count$T@@1 T@U) ($ly@@1 T@U) (|a#0@@2| T@U) (|s#0@@2| Int) (|t#0@@2| Int) (|x#0@@2| T@U) ) (! (= (_module.__default.Count _module._default.Count$T@@1 ($LS $ly@@1) |a#0@@2| |s#0@@2| |t#0@@2| |x#0@@2|) (_module.__default.Count _module._default.Count$T@@1 $ly@@1 |a#0@@2| |s#0@@2| |t#0@@2| |x#0@@2|))
 :pattern ( (_module.__default.Count _module._default.Count$T@@1 ($LS $ly@@1) |a#0@@2| |s#0@@2| |t#0@@2| |x#0@@2|))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.HasMajority$T@@0 T@U) (|a#0@@3| T@U) (|s#0@@3| Int) (|t#0@@3| Int) (|x#0@@3| T@U) ) (!  (=> (or (|_module.__default.HasMajority#canCall| _module._default.HasMajority$T@@0 (Lit SeqType |a#0@@3|) (LitInt |s#0@@3|) (LitInt |t#0@@3|) |x#0@@3|) (and (< 1 $FunctionContextHeight) (and (and ($Is SeqType |a#0@@3| (TSeq _module._default.HasMajority$T@@0)) ($IsBox |x#0@@3| _module._default.HasMajority$T@@0)) (and (and (<= (LitInt 0) (LitInt |s#0@@3|)) (<= (LitInt |s#0@@3|) (LitInt |t#0@@3|))) (<= (LitInt |t#0@@3|) (|Seq#Length| (Lit SeqType |a#0@@3|))))))) (and (|_module.__default.Count#canCall| _module._default.HasMajority$T@@0 (Lit SeqType |a#0@@3|) (LitInt |s#0@@3|) (LitInt |t#0@@3|) |x#0@@3|) (= (_module.__default.HasMajority _module._default.HasMajority$T@@0 (Lit SeqType |a#0@@3|) (LitInt |s#0@@3|) (LitInt |t#0@@3|) |x#0@@3|) (> (Mul (LitInt 2) (_module.__default.Count _module._default.HasMajority$T@@0 ($LS $LZ) (Lit SeqType |a#0@@3|) (LitInt |s#0@@3|) (LitInt |t#0@@3|) |x#0@@3|)) (- |t#0@@3| |s#0@@3|)))))
 :weight 3
 :pattern ( (_module.__default.HasMajority _module._default.HasMajority$T@@0 (Lit SeqType |a#0@@3|) (LitInt |s#0@@3|) (LitInt |t#0@@3|) |x#0@@3|))
))))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@2))) ($IsAllocBox (|Seq#Index| v@@2 i) t0@@0 h@@3))
 :pattern ( (|Seq#Index| v@@2 i))
)))
 :pattern ( ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.HasMajority$T@@1 T@U) (|a#0@@4| T@U) (|s#0@@4| Int) (|t#0@@4| Int) (|x#0@@4| T@U) ) (!  (=> (or (|_module.__default.HasMajority#canCall| _module._default.HasMajority$T@@1 |a#0@@4| |s#0@@4| |t#0@@4| |x#0@@4|) (and (< 1 $FunctionContextHeight) (and (and ($Is SeqType |a#0@@4| (TSeq _module._default.HasMajority$T@@1)) ($IsBox |x#0@@4| _module._default.HasMajority$T@@1)) (and (and (<= (LitInt 0) |s#0@@4|) (<= |s#0@@4| |t#0@@4|)) (<= |t#0@@4| (|Seq#Length| |a#0@@4|)))))) (and (|_module.__default.Count#canCall| _module._default.HasMajority$T@@1 |a#0@@4| |s#0@@4| |t#0@@4| |x#0@@4|) (= (_module.__default.HasMajority _module._default.HasMajority$T@@1 |a#0@@4| |s#0@@4| |t#0@@4| |x#0@@4|) (> (Mul (LitInt 2) (_module.__default.Count _module._default.HasMajority$T@@1 ($LS $LZ) |a#0@@4| |s#0@@4| |t#0@@4| |x#0@@4|)) (- |t#0@@4| |s#0@@4|)))))
 :pattern ( (_module.__default.HasMajority _module._default.HasMajority$T@@1 |a#0@@4| |s#0@@4| |t#0@@4| |x#0@@4|))
))))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Count$T@@2 T@U) ($ly@@2 T@U) (|a#0@@5| T@U) (|s#0@@5| Int) (|t#0@@5| Int) (|x#0@@5| T@U) ) (!  (=> (or (|_module.__default.Count#canCall| _module._default.Count$T@@2 |a#0@@5| |s#0@@5| |t#0@@5| |x#0@@5|) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |a#0@@5| (TSeq _module._default.Count$T@@2)) ($IsBox |x#0@@5| _module._default.Count$T@@2)) (and (and (<= (LitInt 0) |s#0@@5|) (<= |s#0@@5| |t#0@@5|)) (<= |t#0@@5| (|Seq#Length| |a#0@@5|)))))) (and (=> (or (not (= |s#0@@5| |t#0@@5|)) (not true)) (|_module.__default.Count#canCall| _module._default.Count$T@@2 |a#0@@5| |s#0@@5| (- |t#0@@5| 1) |x#0@@5|)) (= (_module.__default.Count _module._default.Count$T@@2 ($LS $ly@@2) |a#0@@5| |s#0@@5| |t#0@@5| |x#0@@5|) (ite (= |s#0@@5| |t#0@@5|) 0 (+ (_module.__default.Count _module._default.Count$T@@2 $ly@@2 |a#0@@5| |s#0@@5| (- |t#0@@5| 1) |x#0@@5|) (ite (= (|Seq#Index| |a#0@@5| (- |t#0@@5| 1)) |x#0@@5|) 1 0))))))
 :pattern ( (_module.__default.Count _module._default.Count$T@@2 ($LS $ly@@2) |a#0@@5| |s#0@@5| |t#0@@5| |x#0@@5|))
))))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert (forall ((bx@@1 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@1 (TSeq t@@5)) (and (= ($Box SeqType ($Unbox SeqType bx@@1)) bx@@1) ($Is SeqType ($Unbox SeqType bx@@1) (TSeq t@@5))))
 :pattern ( ($IsBox bx@@1 (TSeq t@@5)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@4 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@4))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@4 (TSeq t0@@2)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@4))) ($IsBox (|Seq#Index| v@@4 i@@0) t0@@2))
 :pattern ( (|Seq#Index| v@@4 i@@0))
)))
 :pattern ( ($Is SeqType v@@4 (TSeq t0@@2)))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |lo#0@0| () Int)
(declare-fun |up#0@0| () Int)
(declare-fun |a#0@@6| () T@U)
(declare-fun |_module._default.FindWinner''$Candidate| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |##t#1@0| () Int)
(declare-fun |K#0| () T@U)
(declare-fun |defass#k#0@0| () Bool)
(declare-fun |k#0@1| () T@U)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |k#0@4| () T@U)
(declare-fun |t##0@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |up#0@2| () Int)
(declare-fun |##t#0_1_1_1_2_3@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |##t#0_1_1_1_2_1@0| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |up#0@4| () Int)
(declare-fun |lo#0@2| () Int)
(declare-fun |k#0@3| () T@U)
(declare-fun |c#0@2| () Int)
(declare-fun |k#0@2| () T@U)
(declare-fun |lo#0@1| () Int)
(declare-fun |up#0@3| () Int)
(declare-fun |c#0@1| () Int)
(declare-fun |$rhs#0_1_1_0@1| () T@U)
(declare-fun |$rhs#0_1_1_2@1| () Int)
(declare-fun |$rhs#0_1_1_3@1| () Int)
(declare-fun |##t#0_1_1_1@1| () Int)
(declare-fun |c#0@0| () Int)
(declare-fun |up#0@1| () Int)
(declare-fun |$rhs#0_0_0@1| () Int)
(declare-fun |$rhs#0_0_1@1| () Int)
(declare-fun |##t#0_1_1_1_0_0@0| () Int)
(declare-fun |##t#0_1_1_1_0_1@0| () Int)
(declare-fun |##t#0_1_1_1_1_0@0| () Int)
(declare-fun |##t#0_1_1_1_1_1@0| () Int)
(declare-fun |##t#0_1_1_1_3_0@0| () Int)
(declare-fun |u##0_1_1_1_3_0@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |##t#0_1_1_1_3_2@0| () Int)
(declare-fun |##t#0_1_1_1_4_0@0| () Int)
(declare-fun |##t#0_1_1_1_4_1@0| () Int)
(declare-fun |##t#0_1_1_1_5_0@0| () Int)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |$rhs#2@0| () Int)
(declare-fun null () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |k#0@0| () T@U)
(declare-fun |defass#k#0| () Bool)
(declare-fun |k#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 200) (let ((anon6_correct  (=> (and (and (and (and (<= (LitInt 0) |lo#0@0|) (< |lo#0@0| |up#0@0|)) (<= |up#0@0| (|Seq#Length| |a#0@@6|))) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) (= |##t#1@0| (|Seq#Length| |a#0@@6|))) (and ($IsAlloc intType (int_2_U |##t#1@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)))) (and (=> (= (ControlFlow 0 174) (- 0 184)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 174) (- 0 183)) (<= |lo#0@0| |##t#1@0|)) (and (=> (= (ControlFlow 0 174) (- 0 182)) (<= |##t#1@0| (|Seq#Length| |a#0@@6|))) (=> (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|)) (=> (and (and (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap))) (and (=> (= (ControlFlow 0 174) (- 0 181)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 174) (- 0 180)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 174) (- 0 179)) (<= |lo#0@0| |up#0@0|)) (and (=> (= (ControlFlow 0 174) (- 0 178)) (<= |up#0@0| (|Seq#Length| |a#0@@6|))) (=> (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (=> (and (and (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap))) (and (=> (= (ControlFlow 0 174) (- 0 177)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 174) (- 0 176)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 174) (- 0 175)) (<= |lo#0@0| |up#0@0|)) (=> (= (ControlFlow 0 174) (- 0 173)) (<= |up#0@0| (|Seq#Length| |a#0@@6|))))))))))))))))))))))))
(let ((anon50_Else_correct  (=> (and (not (and (<= (LitInt 0) |lo#0@0|) (< |lo#0@0| |up#0@0|))) (= (ControlFlow 0 186) 174)) anon6_correct)))
(let ((anon50_Then_correct  (=> (and (and (<= (LitInt 0) |lo#0@0|) (< |lo#0@0| |up#0@0|)) (= (ControlFlow 0 185) 174)) anon6_correct)))
(let ((anon49_Else_correct  (=> (< |lo#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 188) 185) anon50_Then_correct) (=> (= (ControlFlow 0 188) 186) anon50_Else_correct)))))
(let ((anon49_Then_correct  (=> (<= (LitInt 0) |lo#0@0|) (and (=> (= (ControlFlow 0 187) 185) anon50_Then_correct) (=> (= (ControlFlow 0 187) 186) anon50_Else_correct)))))
(let ((anon48_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 189) 187) anon49_Then_correct) (=> (= (ControlFlow 0 189) 188) anon49_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 165) (- 0 164)) (= |k#0@4| |K#0|))))
(let ((anon51_Then_correct  (=> (and (<= (|Seq#Length| |a#0@@6|) |up#0@0|) (= |t##0@0| (|Seq#Length| |a#0@@6|))) (and (=> (= (ControlFlow 0 166) (- 0 171)) |defass#k#0@0|) (=> |defass#k#0@0| (and (=> (= (ControlFlow 0 166) (- 0 170)) (<= (LitInt 0) |lo#0@0|)) (=> (<= (LitInt 0) |lo#0@0|) (and (=> (= (ControlFlow 0 166) (- 0 169)) (<= |lo#0@0| |t##0@0|)) (=> (<= |lo#0@0| |t##0@0|) (and (=> (= (ControlFlow 0 166) (- 0 168)) (<= |t##0@0| (|Seq#Length| |a#0@@6|))) (=> (<= |t##0@0| (|Seq#Length| |a#0@@6|)) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (or (not (= |K#0| |k#0@1|)) (not true)) (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |t##0@0| |K#0|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |t##0@0| |k#0@1|)))) (and (=> (or (not (= |K#0| |k#0@1|)) (not true)) (<= (+ (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |t##0@0| |K#0|) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |t##0@0| |k#0@1|)) (- |t##0@0| |lo#0@0|))) (= $Heap $Heap@0))) (and (=> (= (ControlFlow 0 166) (- 0 167)) |defass#k#0@0|) (=> |defass#k#0@0| (=> (and (= |k#0@4| |k#0@1|) (= (ControlFlow 0 166) 165)) GeneratedUnifiedExit_correct)))))))))))))))
(let ((anon61_Else_correct  (=> (and (and (=> true (>= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- (+ |up#0@0| 1) |lo#0@0|))) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap))) (and (=> (= (ControlFlow 0 153) (- 0 157)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 153) (- 0 156)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 153) (- 0 155)) (<= |lo#0@0| |up#0@0|)) (and (=> (= (ControlFlow 0 153) (- 0 154)) (<= |up#0@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (= (ControlFlow 0 153) (- 0 152))) (= (<= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- (+ |up#0@0| 1) |lo#0@0|)) (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- (+ |up#0@0| 1) |lo#0@0|))))))))))))))
(let ((anon61_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap)) (and |defass#k#0@0| ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap))) (=> (and (and (and (<= (LitInt 0) |lo#0@0|) (<= |lo#0@0| |up#0@0|)) (and (<= |up#0@0| (|Seq#Length| |a#0@@6|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|))) (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap)))) (and (=> (= (ControlFlow 0 147) (- 0 151)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 147) (- 0 150)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 147) (- 0 149)) (<= |lo#0@0| |up#0@0|)) (and (=> (= (ControlFlow 0 147) (- 0 148)) (<= |up#0@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (= (ControlFlow 0 147) (- 0 146))) (= (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- |up#0@0| |lo#0@0|)) (>= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- (+ |up#0@0| 1) |lo#0@0|))))))))))))))))
(let ((anon60_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap)) (and |defass#k#0@0| ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap))) (=> (and (and (and (<= (LitInt 0) |lo#0@0|) (<= |lo#0@0| |up#0@0|)) (and (<= |up#0@0| (|Seq#Length| |a#0@@6|)) (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|))) (and (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap)))) (and (=> (= (ControlFlow 0 141) (- 0 145)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 141) (- 0 144)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 141) (- 0 143)) (<= |lo#0@0| |up#0@0|)) (and (=> (= (ControlFlow 0 141) (- 0 142)) (<= |up#0@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (= (ControlFlow 0 141) (- 0 140))) (= (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- |up#0@0| |lo#0@0|))))))))))))))))
(let ((anon59_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap)) (and (=> (= (ControlFlow 0 135) (- 0 139)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 135) (- 0 138)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 135) (- 0 137)) (<= |lo#0@0| |up#0@0|)) (and (=> (= (ControlFlow 0 135) (- 0 136)) (<= |up#0@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (=> (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (= (ControlFlow 0 135) (- 0 134))) (= (U_2_bool (Lit boolType (bool_2_U true))) (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|))))))))))))))
(let ((anon58_Then_correct true))
(let ((anon57_Then_correct  (=> (and ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap)) (=> (and (and (and ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap) |defass#k#0@0|) (and ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (<= (LitInt 0) |lo#0@0|))) (and (and (<= |lo#0@0| |up#0@0|) (<= |up#0@0| (|Seq#Length| |a#0@@6|))) (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)))) (and (and (and (and (=> (= (ControlFlow 0 158) 133) anon58_Then_correct) (=> (= (ControlFlow 0 158) 135) anon59_Then_correct)) (=> (= (ControlFlow 0 158) 141) anon60_Then_correct)) (=> (= (ControlFlow 0 158) 147) anon61_Then_correct)) (=> (= (ControlFlow 0 158) 153) anon61_Else_correct))))))
(let ((anon70_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap)) (and |defass#k#0@0| ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap))) (=> (and (and (and (<= (LitInt 0) |lo#0@0|) (<= |lo#0@0| |up#0@2|)) (and (<= |up#0@2| (|Seq#Length| |a#0@@6|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|))) (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap)))) (and (=> (= (ControlFlow 0 117) (- 0 122)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 117) (- 0 121)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 117) (- 0 120)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 117) (- 0 119)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (and (=> (= (ControlFlow 0 117) (- 0 118)) (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (- |up#0@2| |lo#0@0|))) (=> (and (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (- |up#0@2| |lo#0@0|)) (= (ControlFlow 0 117) (- 0 116))) (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (- |up#0@2| |lo#0@0|))))))))))))))))
(let ((anon69_Then_correct  (=> (and (and ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap))) (=> (and (and (and (<= (LitInt 0) |lo#0@0|) (<= |lo#0@0| |up#0@2|)) (and (<= |up#0@2| (|Seq#Length| |a#0@@6|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|))) (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap)))) (and (=> (= (ControlFlow 0 111) (- 0 115)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 111) (- 0 114)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 111) (- 0 113)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 111) (- 0 112)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) (= (ControlFlow 0 111) (- 0 110))) (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)))))))))))))))
(let ((anon68_Then_correct  (=> (and (and ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap))) (and (=> (= (ControlFlow 0 107) (- 0 109)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 107) (- 0 108)) (<= |lo#0@0| |up#0@2|)) (=> (= (ControlFlow 0 107) (- 0 106)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))))))))
(let ((anon40_correct  (=> (and (and ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap))) (and (=> (= (ControlFlow 0 96) (- 0 103)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 96) (- 0 102)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 96) (- 0 101)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (and (=> (= (ControlFlow 0 96) (- 0 100)) (<= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (- |up#0@2| |lo#0@0|))) (=> (and (<= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (- |up#0@2| |lo#0@0|)) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (=> (and (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) (= |##t#0_1_1_1_2_3@0| (|Seq#Length| |a#0@@6|))) (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_2_3@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap))) (and (=> (= (ControlFlow 0 96) (- 0 99)) (<= (LitInt 0) |up#0@2|)) (and (=> (= (ControlFlow 0 96) (- 0 98)) (<= |up#0@2| |##t#0_1_1_1_2_3@0|)) (and (=> (= (ControlFlow 0 96) (- 0 97)) (<= |##t#0_1_1_1_2_3@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (=> (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (= (ControlFlow 0 96) (- 0 95))) (> (+ (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|))) (- (|Seq#Length| |a#0@@6|) |lo#0@0|))) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (- (- (|Seq#Length| |a#0@@6|) |lo#0@0|) (- |up#0@2| |lo#0@0|))))))))))))))))))
(let ((anon70_Else_correct  (=> (and (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (- |up#0@2| |lo#0@0|)) (= (ControlFlow 0 123) 96)) anon40_correct)))
(let ((anon67_Then_correct  (=> (= |k#0@1| |K#0|) (and (and (and (=> (= (ControlFlow 0 124) 107) anon68_Then_correct) (=> (= (ControlFlow 0 124) 111) anon69_Then_correct)) (=> (= (ControlFlow 0 124) 117) anon70_Then_correct)) (=> (= (ControlFlow 0 124) 123) anon70_Else_correct)))))
(let ((anon74_Else_correct  (=> (and (=> true (<= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (- |up#0@2| |lo#0@0|))) (= (ControlFlow 0 104) 96)) anon40_correct)))
(let ((anon74_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and (and (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap)) (and ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap) (<= (LitInt 0) |lo#0@0|))) (and (and (<= |lo#0@0| |up#0@2|) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)))) (=> (and (and (and (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap)) (and |defass#k#0@0| ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap))) (and (and (<= (LitInt 0) |lo#0@0|) (<= |lo#0@0| |up#0@2|)) (and (<= |up#0@2| (|Seq#Length| |a#0@@6|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)))) (and (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap)))) (and (=> (= (ControlFlow 0 86) (- 0 94)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 86) (- 0 93)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 86) (- 0 92)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 86) (- 0 91)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (and (=> (= (ControlFlow 0 86) (- 0 90)) (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (- |up#0@2| |lo#0@0|))) (=> (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (- |up#0@2| |lo#0@0|)) (=> (and (and ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap))) (and (=> (= (ControlFlow 0 86) (- 0 89)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 86) (- 0 88)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 86) (- 0 87)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (= (ControlFlow 0 86) (- 0 85))) (= (<= (+ (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|))) (Mul (LitInt 2) (- |up#0@2| |lo#0@0|))) (<= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (- |up#0@2| |lo#0@0|)))))))))))))))))))))))
(let ((anon73_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap)) (=> (and (and ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap) (<= (LitInt 0) |lo#0@0|)) (and (<= |lo#0@0| |up#0@2|) (<= |up#0@2| (|Seq#Length| |a#0@@6|)))) (=> (and (and (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap))) (and (and |defass#k#0@0| ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap)) (and (<= (LitInt 0) |lo#0@0|) (<= |lo#0@0| |up#0@2|)))) (and (and (and (<= |up#0@2| (|Seq#Length| |a#0@@6|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|))) (and (and ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap)) (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap))))) (and (=> (= (ControlFlow 0 77) (- 0 84)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 77) (- 0 83)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 77) (- 0 82)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap))) (and (=> (= (ControlFlow 0 77) (- 0 81)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 77) (- 0 80)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 77) (- 0 79)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 77) (- 0 78)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) (=> (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (= (ControlFlow 0 77) (- 0 76))) (= (<= (+ (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (- |up#0@2| |lo#0@0|)) (<= (+ (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|))) (Mul (LitInt 2) (- |up#0@2| |lo#0@0|))))))))))))))))))))))
(let ((anon72_Then_correct  (and (=> (= (ControlFlow 0 64) (- 0 75)) |defass#k#0@0|) (=> |defass#k#0@0| (and (=> (= (ControlFlow 0 64) (- 0 74)) (<= (LitInt 0) |lo#0@0|)) (=> (<= (LitInt 0) |lo#0@0|) (and (=> (= (ControlFlow 0 64) (- 0 73)) (<= |lo#0@0| |up#0@2|)) (=> (<= |lo#0@0| |up#0@2|) (and (=> (= (ControlFlow 0 64) (- 0 72)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (<= |up#0@2| (|Seq#Length| |a#0@@6|)) (=> (and (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (or (not (= |k#0@1| |K#0|)) (not true)) (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|)))) (and (=> (or (not (= |k#0@1| |K#0|)) (not true)) (<= (+ (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (- |up#0@2| |lo#0@0|))) (= $Heap $Heap@2))) (and (and ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap@2) ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap@2)) (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap@2) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap@2)))) (and (=> (= (ControlFlow 0 64) (- 0 71)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 64) (- 0 70)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 64) (- 0 69)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap@2)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap@2) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap@2))) (and (=> (= (ControlFlow 0 64) (- 0 68)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap@2) (and (=> (= (ControlFlow 0 64) (- 0 67)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 64) (- 0 66)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 64) (- 0 65)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) (=> (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (= (ControlFlow 0 64) (- 0 63))) (= (U_2_bool (Lit boolType (bool_2_U true))) (<= (+ (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (- |up#0@2| |lo#0@0|))))))))))))))))))))))))))
(let ((anon71_Then_correct true))
(let ((anon67_Else_correct  (=> (or (not (= |k#0@1| |K#0|)) (not true)) (and (and (and (and (=> (= (ControlFlow 0 105) 62) anon71_Then_correct) (=> (= (ControlFlow 0 105) 64) anon72_Then_correct)) (=> (= (ControlFlow 0 105) 77) anon73_Then_correct)) (=> (= (ControlFlow 0 105) 86) anon74_Then_correct)) (=> (= (ControlFlow 0 105) 104) anon74_Else_correct)))))
(let ((anon66_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap)) (and ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap) (<= (LitInt 0) |lo#0@0|))) (=> (and (and (and (and (<= |lo#0@0| |up#0@2|) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap))) (and (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) (= |##t#0_1_1_1_2_1@0| (|Seq#Length| |a#0@@6|))) (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_2_1@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)))) (and (and (and (<= (LitInt 0) |up#0@2|) (<= |up#0@2| |##t#0_1_1_1_2_1@0|)) (and (<= |##t#0_1_1_1_2_1@0| (|Seq#Length| |a#0@@6|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|))) (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (> (+ (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|))) (- (|Seq#Length| |a#0@@6|) |lo#0@0|))))) (and (=> (= (ControlFlow 0 125) (- 0 126)) |defass#k#0@0|) (=> |defass#k#0@0| (and (=> (= (ControlFlow 0 125) 124) anon67_Then_correct) (=> (= (ControlFlow 0 125) 105) anon67_Else_correct)))))))))
(let ((anon45_correct  (and (=> (= (ControlFlow 0 45) (- 0 52)) (or (<= 0 |$decr$loop#00@1|) (= (- (|Seq#Length| |a#0@@6|) |up#0@4|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- (|Seq#Length| |a#0@@6|) |up#0@4|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 45) (- 0 51)) (< (- (|Seq#Length| |a#0@@6|) |up#0@4|) |$decr$loop#00@1|)) (=> (< (- (|Seq#Length| |a#0@@6|) |up#0@4|) |$decr$loop#00@1|) (=> (=> (and (and (<= (LitInt 0) |lo#0@2|) (< |lo#0@2| |up#0@4|)) (<= |up#0@4| (|Seq#Length| |a#0@@6|))) (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (=> (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|) (=> (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|)))))) (and (=> (= (ControlFlow 0 45) (- 0 50)) (=> |$w$loop#0@0| (<= (LitInt 0) |lo#0@2|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |lo#0@2|)) (and (=> (= (ControlFlow 0 45) (- 0 49)) (=> |$w$loop#0@0| (< |lo#0@2| |up#0@4|))) (=> (=> |$w$loop#0@0| (< |lo#0@2| |up#0@4|)) (and (=> (= (ControlFlow 0 45) (- 0 48)) (=> |$w$loop#0@0| (<= |up#0@4| (|Seq#Length| |a#0@@6|)))) (=> (=> |$w$loop#0@0| (<= |up#0@4| (|Seq#Length| |a#0@@6|))) (and (=> (= (ControlFlow 0 45) (- 0 47)) (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |lo#0@2|)))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |lo#0@2|))))) (and (=> (= (ControlFlow 0 45) (- 0 46)) (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|)) (- |up#0@4| |lo#0@2|)))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|)) (- |up#0@4| |lo#0@2|))))) (=> (= (ControlFlow 0 45) (- 0 44)) (=> |$w$loop#0@0| (= |c#0@2| (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@2| |up#0@4| |k#0@3|)))))))))))))))))))))
(let ((anon44_correct  (=> (= |k#0@3| |k#0@2|) (=> (and (and (= |lo#0@2| |lo#0@1|) (= |up#0@4| |up#0@3|)) (and (= |c#0@2| |c#0@1|) (= (ControlFlow 0 54) 45))) anon45_correct))))
(let ((anon76_Else_correct  (=> (=> true (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (and (=> (= (ControlFlow 0 56) (- 0 61)) (and (<= 0 |up#0@2|) (< |up#0@2| (|Seq#Length| |a#0@@6|)))) (=> (and (<= 0 |up#0@2|) (< |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (and (and (and (= |$rhs#0_1_1_0@1| (|Seq#Index| |a#0@@6| |up#0@2|)) (= |$rhs#0_1_1_2@1| (+ |up#0@2| 1))) (and (= |$rhs#0_1_1_3@1| (LitInt 1)) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap))) (and (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) (= |##t#0_1_1_1@1| (|Seq#Length| |a#0@@6|))) (and ($IsAlloc intType (int_2_U |##t#0_1_1_1@1|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)))) (and (=> (= (ControlFlow 0 56) (- 0 60)) (<= (LitInt 0) |up#0@2|)) (and (=> (= (ControlFlow 0 56) (- 0 59)) (<= |up#0@2| |##t#0_1_1_1@1|)) (and (=> (= (ControlFlow 0 56) (- 0 58)) (<= |##t#0_1_1_1@1| (|Seq#Length| |a#0@@6|))) (=> (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (and (=> (= (ControlFlow 0 56) (- 0 57)) (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |up#0@2|))))) (=> (and (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (= |k#0@2| |$rhs#0_1_1_0@1|)) (=> (and (and (= |lo#0@1| |up#0@2|) (= |up#0@3| |$rhs#0_1_1_2@1|)) (and (= |c#0@1| |$rhs#0_1_1_3@1|) (= (ControlFlow 0 56) 54))) anon44_correct)))))))))))))
(let ((anon53_Then_correct  (=> (> (Mul (LitInt 2) |c#0@0|) (- (+ |up#0@0| 1) |lo#0@0|)) (=> (and (= |up#0@1| (+ |up#0@0| 1)) (= |k#0@2| |k#0@1|)) (=> (and (and (= |lo#0@1| |lo#0@0|) (= |up#0@3| |up#0@1|)) (and (= |c#0@1| |c#0@0|) (= (ControlFlow 0 55) 54))) anon44_correct)))))
(let ((anon52_Then_correct  (=> (and (and (and (= (|Seq#Index| |a#0@@6| |up#0@0|) |k#0@1|) (= |$rhs#0_0_0@1| (+ |up#0@0| 1))) (and (= |$rhs#0_0_1@1| (+ |c#0@0| 1)) (= |k#0@3| |k#0@1|))) (and (and (= |lo#0@2| |lo#0@0|) (= |up#0@4| |$rhs#0_0_0@1|)) (and (= |c#0@2| |$rhs#0_0_1@1|) (= (ControlFlow 0 53) 45)))) anon45_correct)))
(let ((anon76_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) (= |##t#0_1_1_1_0_0@0| (|Seq#Length| |a#0@@6|))) (=> (and (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_0_0@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)) (and (<= (LitInt 0) |up#0@2|) (<= |up#0@2| |##t#0_1_1_1_0_0@0|))) (=> (and (and (and (<= |##t#0_1_1_1_0_0@0| (|Seq#Length| |a#0@@6|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap))) (and (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) (= |##t#0_1_1_1_0_1@0| (|Seq#Length| |a#0@@6|))) (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_0_1@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)))) (and (=> (= (ControlFlow 0 40) (- 0 43)) (<= (LitInt 0) |up#0@2|)) (and (=> (= (ControlFlow 0 40) (- 0 42)) (<= |up#0@2| |##t#0_1_1_1_0_1@0|)) (and (=> (= (ControlFlow 0 40) (- 0 41)) (<= |##t#0_1_1_1_0_1@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (=> (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (= (ControlFlow 0 40) (- 0 39))) (= (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |up#0@2|)) (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)))))))))))))
(let ((anon75_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) (= |##t#0_1_1_1_1_0@0| (|Seq#Length| |a#0@@6|))) (=> (and (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_1_0@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)) (and (<= (LitInt 0) |up#0@2|) (<= |up#0@2| |##t#0_1_1_1_1_0@0|))) (=> (and (and (and (<= |##t#0_1_1_1_1_0@0| (|Seq#Length| |a#0@@6|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap))) (and (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap) (= |##t#0_1_1_1_1_1@0| (|Seq#Length| |a#0@@6|))) (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_1_1@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)))) (and (=> (= (ControlFlow 0 35) (- 0 38)) (<= (LitInt 0) |up#0@2|)) (and (=> (= (ControlFlow 0 35) (- 0 37)) (<= |up#0@2| |##t#0_1_1_1_1_1@0|)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (<= |##t#0_1_1_1_1_1@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (= (ControlFlow 0 35) (- 0 34))) (= (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (- (- (|Seq#Length| |a#0@@6|) |lo#0@0|) (- |up#0@2| |lo#0@0|))) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |up#0@2|))))))))))))))
(let ((anon65_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) (= |##t#0_1_1_1_3_0@0| (|Seq#Length| |a#0@@6|))) (=> (and (and (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_3_0@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)) (and (<= (LitInt 0) |lo#0@0|) (<= |lo#0@0| |##t#0_1_1_1_3_0@0|))) (and (and (<= |##t#0_1_1_1_3_0@0| (|Seq#Length| |a#0@@6|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|)) (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (= |u##0_1_1_1_3_0@0| (|Seq#Length| |a#0@@6|))))) (and (=> (= (ControlFlow 0 23) (- 0 33)) (<= (LitInt 0) |lo#0@0|)) (=> (<= (LitInt 0) |lo#0@0|) (and (=> (= (ControlFlow 0 23) (- 0 32)) (<= |lo#0@0| |up#0@2|)) (=> (<= |lo#0@0| |up#0@2|) (and (=> (= (ControlFlow 0 23) (- 0 31)) (<= |up#0@2| |u##0_1_1_1_3_0@0|)) (=> (<= |up#0@2| |u##0_1_1_1_3_0@0|) (and (=> (= (ControlFlow 0 23) (- 0 30)) (<= |u##0_1_1_1_3_0@0| (|Seq#Length| |a#0@@6|))) (=> (<= |u##0_1_1_1_3_0@0| (|Seq#Length| |a#0@@6|)) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| |u##0_1_1_1_3_0@0| |K#0|)) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |u##0_1_1_1_3_0@0| |K#0|)) (and (= (+ (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |up#0@2| |u##0_1_1_1_3_0@0| |K#0|)) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |u##0_1_1_1_3_0@0| |K#0|)) (= $Heap $Heap@1))) (and (and ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap@1) ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap@1)) (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap@1) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap@1)))) (and (=> (= (ControlFlow 0 23) (- 0 29)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 23) (- 0 28)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 23) (- 0 27)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap@1)) (=> (and (and ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap@1) (= |##t#0_1_1_1_3_2@0| (|Seq#Length| |a#0@@6|))) (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_3_2@0|) TInt $Heap@1) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap@1))) (and (=> (= (ControlFlow 0 23) (- 0 26)) (<= (LitInt 0) |up#0@2|)) (and (=> (= (ControlFlow 0 23) (- 0 25)) (<= |up#0@2| |##t#0_1_1_1_3_2@0|)) (and (=> (= (ControlFlow 0 23) (- 0 24)) (<= |##t#0_1_1_1_3_2@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|) (=> (and (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |K#0|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|)) (= (ControlFlow 0 23) (- 0 22))) (= (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |lo#0@0|)) (> (+ (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |K#0|)) (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |up#0@2| (|Seq#Length| |a#0@@6|) |K#0|))) (- (|Seq#Length| |a#0@@6|) |lo#0@0|))))))))))))))))))))))))))))
(let ((anon64_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) (= |##t#0_1_1_1_4_0@0| (|Seq#Length| |a#0@@6|))) (=> (and (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_4_0@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)) (and (<= (LitInt 0) |lo#0@0|) (<= |lo#0@0| |##t#0_1_1_1_4_0@0|))) (=> (and (and (and (<= |##t#0_1_1_1_4_0@0| (|Seq#Length| |a#0@@6|)) (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|)) (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap))) (and (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) (= |##t#0_1_1_1_4_1@0| (|Seq#Length| |a#0@@6|))) (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_4_1@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)))) (and (=> (= (ControlFlow 0 18) (- 0 21)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 18) (- 0 20)) (<= |lo#0@0| |##t#0_1_1_1_4_1@0|)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (<= |##t#0_1_1_1_4_1@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (= (ControlFlow 0 18) (- 0 17))) (= (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |lo#0@0|))))))))))))))
(let ((anon63_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) (= |##t#0_1_1_1_5_0@0| (|Seq#Length| |a#0@@6|))) (and ($IsAlloc intType (int_2_U |##t#0_1_1_1_5_0@0|) TInt $Heap) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap))) (and (=> (= (ControlFlow 0 13) (- 0 16)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 13) (- 0 15)) (<= |lo#0@0| |##t#0_1_1_1_5_0@0|)) (and (=> (= (ControlFlow 0 13) (- 0 14)) (<= |##t#0_1_1_1_5_0@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (=> (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (= (ControlFlow 0 13) (- 0 12))) (= (U_2_bool (Lit boolType (bool_2_U true))) (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|)))))))))))
(let ((anon62_Then_correct true))
(let ((anon57_Else_correct  (=> (=> true (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- (+ |up#0@0| 1) |lo#0@0|))) (=> (and (and (= |up#0@2| (+ |up#0@0| 1)) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap)) (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@2|) TInt $Heap))) (and (=> (= (ControlFlow 0 127) (- 0 132)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 127) (- 0 131)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 127) (- 0 130)) (<= |lo#0@0| |up#0@2|)) (and (=> (= (ControlFlow 0 127) (- 0 129)) (<= |up#0@2| (|Seq#Length| |a#0@@6|))) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|) (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (and (=> (= (ControlFlow 0 127) (- 0 128)) (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (- |up#0@2| |lo#0@0|))) (=> (= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@2| |k#0@1|)) (- |up#0@2| |lo#0@0|)) (and (and (and (and (and (and (and (=> (= (ControlFlow 0 127) 11) anon62_Then_correct) (=> (= (ControlFlow 0 127) 13) anon63_Then_correct)) (=> (= (ControlFlow 0 127) 18) anon64_Then_correct)) (=> (= (ControlFlow 0 127) 23) anon65_Then_correct)) (=> (= (ControlFlow 0 127) 125) anon66_Then_correct)) (=> (= (ControlFlow 0 127) 35) anon75_Then_correct)) (=> (= (ControlFlow 0 127) 40) anon76_Then_correct)) (=> (= (ControlFlow 0 127) 56) anon76_Else_correct)))))))))))))))
(let ((anon56_Then_correct  (=> ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap) (=> (and ($IsAlloc intType (int_2_U |lo#0@0|) TInt $Heap) ($IsAlloc intType (int_2_U |up#0@0|) TInt $Heap)) (and (=> (= (ControlFlow 0 6) (- 0 10)) |defass#k#0@0|) (=> |defass#k#0@0| (=> ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap) (and (=> (= (ControlFlow 0 6) (- 0 9)) (<= (LitInt 0) |lo#0@0|)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (<= |lo#0@0| |up#0@0|)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= |up#0@0| (|Seq#Length| |a#0@@6|))) (=> (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (=> (and (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (= (ControlFlow 0 6) (- 0 5))) (= (<= (Mul (LitInt 2) |c#0@0|) (- (+ |up#0@0| 1) |lo#0@0|)) (<= (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- (+ |up#0@0| 1) |lo#0@0|)))))))))))))))
(let ((anon55_Then_correct  (=> (= (ControlFlow 0 4) (- 0 3)) (= (U_2_bool (Lit boolType (bool_2_U true))) (<= (Mul (LitInt 2) |c#0@0|) (- (+ |up#0@0| 1) |lo#0@0|))))))
(let ((anon54_Then_correct true))
(let ((anon53_Else_correct  (=> (>= (- (+ |up#0@0| 1) |lo#0@0|) (Mul (LitInt 2) |c#0@0|)) (and (and (and (and (=> (= (ControlFlow 0 159) 2) anon54_Then_correct) (=> (= (ControlFlow 0 159) 4) anon55_Then_correct)) (=> (= (ControlFlow 0 159) 6) anon56_Then_correct)) (=> (= (ControlFlow 0 159) 158) anon57_Then_correct)) (=> (= (ControlFlow 0 159) 127) anon57_Else_correct)))))
(let ((anon52_Else_correct  (=> (or (not (= (|Seq#Index| |a#0@@6| |up#0@0|) |k#0@1|)) (not true)) (and (=> (= (ControlFlow 0 160) 55) anon53_Then_correct) (=> (= (ControlFlow 0 160) 159) anon53_Else_correct)))))
(let ((anon51_Else_correct  (=> (and (< |up#0@0| (|Seq#Length| |a#0@@6|)) (= |$decr$loop#00@1| (- (|Seq#Length| |a#0@@6|) |up#0@0|))) (and (=> (= (ControlFlow 0 161) (- 0 163)) (and (<= 0 |up#0@0|) (< |up#0@0| (|Seq#Length| |a#0@@6|)))) (=> (and (<= 0 |up#0@0|) (< |up#0@0| (|Seq#Length| |a#0@@6|))) (and (=> (= (ControlFlow 0 161) (- 0 162)) |defass#k#0@0|) (=> |defass#k#0@0| (and (=> (= (ControlFlow 0 161) 53) anon52_Then_correct) (=> (= (ControlFlow 0 161) 160) anon52_Else_correct)))))))))
(let ((anon48_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 172) 166) anon51_Then_correct) (=> (= (ControlFlow 0 172) 161) anon51_Else_correct)))))
(let ((anon47_LoopBody_correct  (and (=> (= (ControlFlow 0 190) 189) anon48_Then_correct) (=> (= (ControlFlow 0 190) 172) anon48_Else_correct))))
(let ((anon47_LoopDone_correct true))
(let ((anon47_LoopHead_correct  (=> (=> |defass#k#0@0| (and ($IsBox |k#0@1| |_module._default.FindWinner''$Candidate|) ($IsAllocBox |k#0@1| |_module._default.FindWinner''$Candidate| $Heap))) (=> (and (and (and (and (and (and (and (and (and |defass#k#0@0| (not false)) (<= 0 |lo#0@0|)) (<= 1 |up#0@0|)) (<= 1 |c#0@0|)) (= |$rhs#0@0| 0)) (= |$rhs#1@0| 1)) (= |$rhs#2@0| 1)) true) (and (and (and (and (=> |$w$loop#0@0| (<= (LitInt 0) |lo#0@0|)) (=> |$w$loop#0@0| (< |lo#0@0| |up#0@0|))) (and (=> |$w$loop#0@0| (<= |up#0@0| (|Seq#Length| |a#0@@6|))) (=> |$w$loop#0@0| (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|)))) (and (and (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |lo#0@0|))))) (=> |$w$loop#0@0| (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (and (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |lo#0@0|)))))) (and (=> |$w$loop#0@0| (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- |up#0@0| |lo#0@0|)))))))) (and (and (and (=> |$w$loop#0@0| (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (and (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|)) (- |up#0@0| |lo#0@0|))))) (=> |$w$loop#0@0| (|_module.__default.Count#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|))) (and (=> |$w$loop#0@0| (= |c#0@0| (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |lo#0@0| |up#0@0| |k#0@1|))) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0))
)))) (and (and ($HeapSucc $Heap $Heap) (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0))
))) (and (=> true |defass#k#0@0|) (<= (- (|Seq#Length| |a#0@@6|) |up#0@0|) |$decr_init$loop#00@0|)))))) (and (=> (= (ControlFlow 0 191) 1) anon47_LoopDone_correct) (=> (= (ControlFlow 0 191) 190) anon47_LoopBody_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 192) (- 0 199)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |a#0@@6|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |a#0@@6|))) (=> (= |k#0@0| (|Seq#Index| |a#0@@6| (LitInt 0))) (=> (and (and (= |$rhs#0@0| (LitInt 0)) (= |$rhs#1@0| (LitInt 1))) (and (= |$rhs#2@0| (LitInt 1)) (= |$decr_init$loop#00@0| (- (|Seq#Length| |a#0@@6|) |$rhs#1@0|)))) (and (=> (= (ControlFlow 0 192) (- 0 198)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0@0|)) (and (=> (= (ControlFlow 0 192) (- 0 197)) (=> |$w$loop#0@0| (< |$rhs#0@0| |$rhs#1@0|))) (=> (=> |$w$loop#0@0| (< |$rhs#0@0| |$rhs#1@0|)) (and (=> (= (ControlFlow 0 192) (- 0 196)) (=> |$w$loop#0@0| (<= |$rhs#1@0| (|Seq#Length| |a#0@@6|)))) (=> (=> |$w$loop#0@0| (<= |$rhs#1@0| (|Seq#Length| |a#0@@6|))) (and (=> (= (ControlFlow 0 192) (- 0 195)) (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |$rhs#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |$rhs#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |$rhs#0@0| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |$rhs#0@0|)))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |$rhs#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |$rhs#0@0| (|Seq#Length| |a#0@@6|) |K#0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |$rhs#0@0| (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) |$rhs#0@0|))))) (and (=> (= (ControlFlow 0 192) (- 0 194)) (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |$rhs#0@0| |$rhs#1@0| |k#0@0|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |$rhs#0@0| |$rhs#1@0| |k#0@0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |$rhs#0@0| |$rhs#1@0| |k#0@0|)) (- |$rhs#1@0| |$rhs#0@0|)))))) (=> (=> |$w$loop#0@0| (=> (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| |$rhs#0@0| |$rhs#1@0| |k#0@0|) (or (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| |$rhs#0@0| |$rhs#1@0| |k#0@0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |$rhs#0@0| |$rhs#1@0| |k#0@0|)) (- |$rhs#1@0| |$rhs#0@0|))))) (and (=> (= (ControlFlow 0 192) (- 0 193)) (=> |$w$loop#0@0| (= |$rhs#2@0| (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |$rhs#0@0| |$rhs#1@0| |k#0@0|)))) (=> (=> |$w$loop#0@0| (= |$rhs#2@0| (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS ($LS $LZ)) |a#0@@6| |$rhs#0@0| |$rhs#1@0| |k#0@0|))) (=> (= (ControlFlow 0 192) 191) anon47_LoopHead_correct))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|)) ($IsAlloc SeqType |a#0@@6| (TSeq |_module._default.FindWinner''$Candidate|) $Heap))) (=> (and (and (and ($IsBox |K#0| |_module._default.FindWinner''$Candidate|) ($IsAllocBox |K#0| |_module._default.FindWinner''$Candidate| $Heap)) (and (=> |defass#k#0| (and ($IsBox |k#0| |_module._default.FindWinner''$Candidate|) ($IsAllocBox |k#0| |_module._default.FindWinner''$Candidate| $Heap))) (= 2 $FunctionContextHeight))) (and (and (|_module.__default.HasMajority#canCall| |_module._default.FindWinner''$Candidate| |a#0@@6| (LitInt 0) (|Seq#Length| |a#0@@6|) |K#0|) (and (_module.__default.HasMajority |_module._default.FindWinner''$Candidate| |a#0@@6| (LitInt 0) (|Seq#Length| |a#0@@6|) |K#0|) (> (Mul (LitInt 2) (_module.__default.Count |_module._default.FindWinner''$Candidate| ($LS $LZ) |a#0@@6| (LitInt 0) (|Seq#Length| |a#0@@6|) |K#0|)) (- (|Seq#Length| |a#0@@6|) 0)))) (= (ControlFlow 0 200) 192))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
