(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun _module.__default.NoDuplicates (T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Length (T@U T@U T@U) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |_module.__default.Length#canCall| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun _module.List.tail (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |Set#Empty| () T@U)
(declare-fun _module.__default.Elements (T@U T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |_module.__default.Elements#canCall| (T@U T@U) Bool)
(declare-fun _module.List.head (T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |_module.__default.NoDuplicates#canCall| (T@U T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun BoxType () T@T)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |$IsA#_module.List| (T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._module.List |##_module.List.Nil| |##_module.List.Cons| tytagFamily$List)
)
(assert (forall ((_module._default.NoDuplicates$_T0 T@U) ($ly T@U) (|xs#0| T@U) ) (! (= (_module.__default.NoDuplicates _module._default.NoDuplicates$_T0 ($LS $ly) |xs#0|) (_module.__default.NoDuplicates _module._default.NoDuplicates$_T0 $ly |xs#0|))
 :pattern ( (_module.__default.NoDuplicates _module._default.NoDuplicates$_T0 ($LS $ly) |xs#0|))
)))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Length$_T0 T@U) ($ly@@0 T@U) (|xs#0@@0| T@U) ) (!  (=> (or (|_module.__default.Length#canCall| _module._default.Length$_T0 (Lit DatatypeTypeType |xs#0@@0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@0| (Tclass._module.List _module._default.Length$_T0)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@0|)))))) (let ((|tail#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@0|)))))
(|_module.__default.Length#canCall| _module._default.Length$_T0 |tail#3|))) (= (_module.__default.Length _module._default.Length$_T0 ($LS $ly@@0) (Lit DatatypeTypeType |xs#0@@0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@0|)) 0 (let ((|tail#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@0|)))))
(LitInt (+ 1 (_module.__default.Length _module._default.Length$_T0 ($LS $ly@@0) |tail#2|))))))))
 :weight 3
 :pattern ( (_module.__default.Length _module._default.Length$_T0 ($LS $ly@@0) (Lit DatatypeTypeType |xs#0@@0|)))
))))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((_module._default.Length$_T0@@0 T@U) ($ly@@1 T@U) (|xs#0@@1| T@U) ) (! (= (_module.__default.Length _module._default.Length$_T0@@0 ($LS $ly@@1) |xs#0@@1|) (_module.__default.Length _module._default.Length$_T0@@0 $ly@@1 |xs#0@@1|))
 :pattern ( (_module.__default.Length _module._default.Length$_T0@@0 ($LS $ly@@1) |xs#0@@1|))
)))
(assert (forall ((_module._default.Elements$_T0 T@U) ($ly@@2 T@U) (|xs#0@@2| T@U) ) (! (= (_module.__default.Elements _module._default.Elements$_T0 ($LS $ly@@2) |xs#0@@2|) (_module.__default.Elements _module._default.Elements$_T0 $ly@@2 |xs#0@@2|))
 :pattern ( (_module.__default.Elements _module._default.Elements$_T0 ($LS $ly@@2) |xs#0@@2|))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Intersection| a@@5 b@@2) o@@1)  (and (|Set#IsMember| a@@5 o@@1) (|Set#IsMember| b@@2 o@@1)))
 :pattern ( (|Set#IsMember| (|Set#Intersection| a@@5 b@@2) o@@1))
)))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (forall ((a@@6 T@U) (b@@3 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@6 b@@3) b@@3) (|Set#Union| a@@6 b@@3))
 :pattern ( (|Set#Union| (|Set#Union| a@@6 b@@3) b@@3))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Intersection| (|Set#Intersection| a@@7 b@@4) b@@4) (|Set#Intersection| a@@7 b@@4))
 :pattern ( (|Set#Intersection| (|Set#Intersection| a@@7 b@@4) b@@4))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@2 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@8 b@@5) o@@2)  (and (|Set#IsMember| a@@8 o@@2) (not (|Set#IsMember| b@@5 o@@2))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@8 b@@5) o@@2))
)))
(assert (forall ((_module.List$X T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$X) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$X) $h))
)))
(assert (forall ((s T@U) ) (!  (and (= (= (|Set#Card| s) 0) (= s |Set#Empty|)) (=> (or (not (= (|Set#Card| s) 0)) (not true)) (exists ((x@@5 T@U) ) (! (|Set#IsMember| s x@@5)
 :pattern ( (|Set#IsMember| s x@@5))
))))
 :pattern ( (|Set#Card| s))
)))
(assert (forall ((_module.List$X@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$X@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$X@@0)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Elements$_T0@@0 T@U) ($ly@@3 T@U) (|xs#0@@3| T@U) ) (!  (=> (or (|_module.__default.Elements#canCall| _module._default.Elements$_T0@@0 |xs#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@3| (Tclass._module.List _module._default.Elements$_T0@@0)))) (and (=> (not (_module.List.Nil_q |xs#0@@3|)) (let ((|tail#1| (_module.List.tail |xs#0@@3|)))
(|_module.__default.Elements#canCall| _module._default.Elements$_T0@@0 |tail#1|))) (= (_module.__default.Elements _module._default.Elements$_T0@@0 ($LS $ly@@3) |xs#0@@3|) (ite (_module.List.Nil_q |xs#0@@3|) |Set#Empty| (let ((|tail#0| (_module.List.tail |xs#0@@3|)))
(let ((|x#0| (_module.List.head |xs#0@@3|)))
(|Set#Union| (|Set#UnionOne| |Set#Empty| |x#0|) (_module.__default.Elements _module._default.Elements$_T0@@0 $ly@@3 |tail#0|))))))))
 :pattern ( (_module.__default.Elements _module._default.Elements$_T0@@0 ($LS $ly@@3) |xs#0@@3|))
))))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (! (= (+ (|Set#Card| (|Set#Union| a@@9 b@@6)) (|Set#Card| (|Set#Intersection| a@@9 b@@6))) (+ (|Set#Card| a@@9) (|Set#Card| b@@6)))
 :pattern ( (|Set#Card| (|Set#Union| a@@9 b@@6)))
 :pattern ( (|Set#Card| (|Set#Intersection| a@@9 b@@6)))
)))
(assert (forall ((x@@6 Int) ) (! (= (LitInt x@@6) x@@6)
 :pattern ( (LitInt x@@6))
)))
(assert (forall ((x@@7 T@U) (T T@T) ) (! (= (Lit T x@@7) x@@7)
 :pattern ( (Lit T x@@7))
)))
(assert (forall ((_module.List$X@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$X@@1))  (and ($IsBox |a#6#0#0| _module.List$X@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$X@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$X@@1)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.NoDuplicates$_T0@@0 T@U) ($ly@@4 T@U) (|xs#0@@4| T@U) ) (!  (=> (or (|_module.__default.NoDuplicates#canCall| _module._default.NoDuplicates$_T0@@0 |xs#0@@4|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@4| (Tclass._module.List _module._default.NoDuplicates$_T0@@0)))) (and (=> (not (_module.List.Nil_q |xs#0@@4|)) (let ((|tail#1@@0| (_module.List.tail |xs#0@@4|)))
(let ((|x#1| (_module.List.head |xs#0@@4|)))
 (and (|_module.__default.Elements#canCall| _module._default.NoDuplicates$_T0@@0 |tail#1@@0|) (=> (not (|Set#IsMember| (_module.__default.Elements _module._default.NoDuplicates$_T0@@0 ($LS $LZ) |tail#1@@0|) |x#1|)) (|_module.__default.NoDuplicates#canCall| _module._default.NoDuplicates$_T0@@0 |tail#1@@0|)))))) (= (_module.__default.NoDuplicates _module._default.NoDuplicates$_T0@@0 ($LS $ly@@4) |xs#0@@4|) (ite (_module.List.Nil_q |xs#0@@4|) true (let ((|tail#0@@0| (_module.List.tail |xs#0@@4|)))
(let ((|x#0@@0| (_module.List.head |xs#0@@4|)))
 (and (not (|Set#IsMember| (_module.__default.Elements _module._default.NoDuplicates$_T0@@0 ($LS $LZ) |tail#0@@0|) |x#0@@0|)) (_module.__default.NoDuplicates _module._default.NoDuplicates$_T0@@0 $ly@@4 |tail#0@@0|))))))))
 :pattern ( (_module.__default.NoDuplicates _module._default.NoDuplicates$_T0@@0 ($LS $ly@@4) |xs#0@@4|))
))))
(assert (forall ((d T@U) ) (! (= (_module.List.Nil_q d) (= (DatatypeCtorId d) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.List.Cons_q d@@0) (= (DatatypeCtorId d@@0) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@0))
)))
(assert (forall ((x@@8 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@8)) x@@8)
 :pattern ( ($Unbox T@@0 x@@8))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (! (= (|Set#Disjoint| a@@10 b@@7) (forall ((o@@3 T@U) ) (!  (or (not (|Set#IsMember| a@@10 o@@3)) (not (|Set#IsMember| b@@7 o@@3)))
 :pattern ( (|Set#IsMember| a@@10 o@@3))
 :pattern ( (|Set#IsMember| b@@7 o@@3))
)))
 :pattern ( (|Set#Disjoint| a@@10 b@@7))
)))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Elements$_T0@@1 T@U) ($ly@@5 T@U) (|xs#0@@5| T@U) ) (!  (=> (or (|_module.__default.Elements#canCall| _module._default.Elements$_T0@@1 (Lit DatatypeTypeType |xs#0@@5|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@5| (Tclass._module.List _module._default.Elements$_T0@@1)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@5|)))))) (let ((|tail#3@@0| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@5|)))))
(|_module.__default.Elements#canCall| _module._default.Elements$_T0@@1 |tail#3@@0|))) (= (_module.__default.Elements _module._default.Elements$_T0@@1 ($LS $ly@@5) (Lit DatatypeTypeType |xs#0@@5|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@5|)) |Set#Empty| (let ((|tail#2@@0| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@5|)))))
(let ((|x#2| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0@@5|)))))
(|Set#Union| (|Set#UnionOne| |Set#Empty| |x#2|) (_module.__default.Elements _module._default.Elements$_T0@@1 ($LS $ly@@5) |tail#2@@0|))))))))
 :weight 3
 :pattern ( (_module.__default.Elements _module._default.Elements$_T0@@1 ($LS $ly@@5) (Lit DatatypeTypeType |xs#0@@5|)))
))))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.List.Cons_q d@@1) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@1 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.List.Nil_q d@@2) (= d@@2 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@2))
)))
(assert (= (Ctor SetType) 5))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Length$_T0@@1 T@U) ($ly@@6 T@U) (|xs#0@@6| T@U) ) (!  (=> (or (|_module.__default.Length#canCall| _module._default.Length$_T0@@1 |xs#0@@6|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@6| (Tclass._module.List _module._default.Length$_T0@@1)))) (and (=> (not (_module.List.Nil_q |xs#0@@6|)) (let ((|tail#1@@1| (_module.List.tail |xs#0@@6|)))
(|_module.__default.Length#canCall| _module._default.Length$_T0@@1 |tail#1@@1|))) (= (_module.__default.Length _module._default.Length$_T0@@1 ($LS $ly@@6) |xs#0@@6|) (ite (_module.List.Nil_q |xs#0@@6|) 0 (let ((|tail#0@@1| (_module.List.tail |xs#0@@6|)))
(+ 1 (_module.__default.Length _module._default.Length$_T0@@1 $ly@@6 |tail#0@@1|)))))))
 :pattern ( (_module.__default.Length _module._default.Length$_T0@@1 ($LS $ly@@6) |xs#0@@6|))
))))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((_module.List$X@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$X@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$X@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$X@@2))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) (o@@4 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@11 b@@8) o@@4)  (or (|Set#IsMember| a@@11 o@@4) (|Set#IsMember| b@@8 o@@4)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@11 b@@8) o@@4))
)))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (!  (=> (|Set#Disjoint| a@@12 b@@9) (and (= (|Set#Difference| (|Set#Union| a@@12 b@@9) a@@12) b@@9) (= (|Set#Difference| (|Set#Union| a@@12 b@@9) b@@9) a@@12)))
 :pattern ( (|Set#Union| a@@12 b@@9))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#_module.List| d@@3) (or (_module.List.Nil_q d@@3) (_module.List.Cons_q d@@3)))
 :pattern ( (|$IsA#_module.List| d@@3))
)))
(assert (forall ((_module.List$X@@3 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$X@@3)) (or (_module.List.Nil_q d@@4) (_module.List.Cons_q d@@4)))
 :pattern ( (_module.List.Cons_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$X@@3)))
 :pattern ( (_module.List.Nil_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.List _module.List$X@@3)))
)))
(assert (forall ((a@@13 T@U) (b@@10 T@U) ) (!  (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@13 b@@10)) (|Set#Card| (|Set#Difference| b@@10 a@@13))) (|Set#Card| (|Set#Intersection| a@@13 b@@10))) (|Set#Card| (|Set#Union| a@@13 b@@10))) (= (|Set#Card| (|Set#Difference| a@@13 b@@10)) (- (|Set#Card| a@@13) (|Set#Card| (|Set#Intersection| a@@13 b@@10)))))
 :pattern ( (|Set#Card| (|Set#Difference| a@@13 b@@10)))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Set#Card| s@@0))
 :pattern ( (|Set#Card| s@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@0) ($IsAllocBox bx@@0 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@0))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List.head (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List.tail (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.Elements$_T0@@2 T@U) ($ly@@7 T@U) (|xs#0@@7| T@U) ) (!  (=> (and (or (|_module.__default.Elements#canCall| _module._default.Elements$_T0@@2 |xs#0@@7|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |xs#0@@7| (Tclass._module.List _module._default.Elements$_T0@@2)) ($IsAlloc DatatypeTypeType |xs#0@@7| (Tclass._module.List _module._default.Elements$_T0@@2) $Heap)))) ($IsGoodHeap $Heap)) ($IsAlloc SetType (_module.__default.Elements _module._default.Elements$_T0@@2 $ly@@7 |xs#0@@7|) (TSet _module._default.Elements$_T0@@2) $Heap))
 :pattern ( ($IsAlloc SetType (_module.__default.Elements _module._default.Elements$_T0@@2 $ly@@7 |xs#0@@7|) (TSet _module._default.Elements$_T0@@2) $Heap))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((_module.List$X@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$X@@4)) _module.List$X@@4)
 :pattern ( (Tclass._module.List _module.List$X@@4))
)))
(assert (forall ((x@@9 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@9)) x@@9)
 :pattern ( ($Box T@@3 x@@9))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Elements$_T0@@3 T@U) ($ly@@8 T@U) (|xs#0@@8| T@U) ) (!  (=> (or (|_module.__default.Elements#canCall| _module._default.Elements$_T0@@3 |xs#0@@8|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@8| (Tclass._module.List _module._default.Elements$_T0@@3)))) ($Is SetType (_module.__default.Elements _module._default.Elements$_T0@@3 $ly@@8 |xs#0@@8|) (TSet _module._default.Elements$_T0@@3)))
 :pattern ( (_module.__default.Elements _module._default.Elements$_T0@@3 $ly@@8 |xs#0@@8|))
))))
(assert (forall ((a@@14 T@U) (b@@11 T@U) ) (! (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@11)) (|Set#Union| a@@14 b@@11))
 :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@11)))
)))
(assert (forall ((a@@15 T@U) (b@@12 T@U) ) (! (= (|Set#Intersection| a@@15 (|Set#Intersection| a@@15 b@@12)) (|Set#Intersection| a@@15 b@@12))
 :pattern ( (|Set#Intersection| a@@15 (|Set#Intersection| a@@15 b@@12)))
)))
(assert (forall ((d@@5 T@U) (_module.List$X@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.List.Cons_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.List _module.List$X@@5) $h@@0))) ($IsAllocBox (_module.List.head d@@5) _module.List$X@@5 $h@@0))
 :pattern ( ($IsAllocBox (_module.List.head d@@5) _module.List$X@@5 $h@@0))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0@@1 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@1 t1 t2 (MapType0Store t0@@1 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 6)) (= (Ctor FieldType) 7)) (forall ((t0@@2 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 (MapType1Store t0@@2 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((bx@@1 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@1 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@1)) bx@@1) ($Is SetType ($Unbox SetType bx@@1) (TSet t@@3))))
 :pattern ( ($IsBox bx@@1 (TSet t@@3)))
)))
(assert (forall ((_module.List$X@@6 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._module.List _module.List$X@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass._module.List _module.List$X@@6))))
 :pattern ( ($IsBox bx@@2 (Tclass._module.List _module.List$X@@6)))
)))
(assert (forall ((a@@16 T@U) (x@@10 T@U) ) (!  (=> (|Set#IsMember| a@@16 x@@10) (= (|Set#Card| (|Set#UnionOne| a@@16 x@@10)) (|Set#Card| a@@16)))
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@16 x@@10)))
)))
(assert (forall ((d@@7 T@U) (_module.List$X@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.List.Cons_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass._module.List _module.List$X@@7) $h@@1))) ($IsAlloc DatatypeTypeType (_module.List.tail d@@7) (Tclass._module.List _module.List$X@@7) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List.tail d@@7) (Tclass._module.List _module.List$X@@7) $h@@1))
)))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module._default.NoDuplicates$_T0@@1 T@U) ($ly@@9 T@U) (|xs#0@@9| T@U) ) (!  (=> (or (|_module.__default.NoDuplicates#canCall| _module._default.NoDuplicates$_T0@@1 (Lit DatatypeTypeType |xs#0@@9|)) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@9| (Tclass._module.List _module._default.NoDuplicates$_T0@@1)))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@9|)))))) (let ((|tail#3@@1| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@9|)))))
(let ((|x#3| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0@@9|)))))
 (and (|_module.__default.Elements#canCall| _module._default.NoDuplicates$_T0@@1 |tail#3@@1|) (=> (not (|Set#IsMember| (_module.__default.Elements _module._default.NoDuplicates$_T0@@1 ($LS $LZ) |tail#3@@1|) |x#3|)) (|_module.__default.NoDuplicates#canCall| _module._default.NoDuplicates$_T0@@1 |tail#3@@1|)))))) (= (_module.__default.NoDuplicates _module._default.NoDuplicates$_T0@@1 ($LS $ly@@9) (Lit DatatypeTypeType |xs#0@@9|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |xs#0@@9|)) true (let ((|tail#2@@1| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |xs#0@@9|)))))
(let ((|x#2@@0| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |xs#0@@9|)))))
 (and (not (|Set#IsMember| (Lit SetType (_module.__default.Elements _module._default.NoDuplicates$_T0@@1 ($LS $LZ) |tail#2@@1|)) |x#2@@0|)) (_module.__default.NoDuplicates _module._default.NoDuplicates$_T0@@1 ($LS $ly@@9) |tail#2@@1|))))))))
 :weight 3
 :pattern ( (_module.__default.NoDuplicates _module._default.NoDuplicates$_T0@@1 ($LS $ly@@9) (Lit DatatypeTypeType |xs#0@@9|)))
))))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((x@@11 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@11))) (Lit BoxType ($Box intType (int_2_U x@@11))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@11))))
)))
(assert (forall ((x@@12 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@12)) (Lit BoxType ($Box T@@4 x@@12)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@12)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.Length$_T0@@2 T@U) ($ly@@10 T@U) (|xs#0@@10| T@U) ) (!  (=> (or (|_module.__default.Length#canCall| _module._default.Length$_T0@@2 |xs#0@@10|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |xs#0@@10| (Tclass._module.List _module._default.Length$_T0@@2)))) (<= (LitInt 0) (_module.__default.Length _module._default.Length$_T0@@2 $ly@@10 |xs#0@@10|)))
 :pattern ( (_module.__default.Length _module._default.Length$_T0@@2 $ly@@10 |xs#0@@10|))
))))
(assert (forall ((_module.List$X@@8 T@U) (|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$X@@8) $h@@2)  (and ($IsAllocBox |a#6#0#0@@0| _module.List$X@@8 $h@@2) ($IsAlloc DatatypeTypeType |a#6#1#0@@0| (Tclass._module.List _module.List$X@@8) $h@@2))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@0| |a#6#1#0@@0|) (Tclass._module.List _module.List$X@@8) $h@@2))
)))
(assert (forall ((a@@17 T@U) (x@@13 T@U) ) (!  (=> (not (|Set#IsMember| a@@17 x@@13)) (= (|Set#Card| (|Set#UnionOne| a@@17 x@@13)) (+ (|Set#Card| a@@17) 1)))
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@17 x@@13)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |xs#0@@11| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun _module._default.Elements_Property$_T0 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (|$IsA#_module.List| |xs#0@@11|)) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (= $Heap@@0 $Heap@0)) (and (forall ((|$ih#xs0#0| T@U) ) (!  (=> (and (and ($Is DatatypeTypeType |$ih#xs0#0| (Tclass._module.List _module._default.Elements_Property$_T0)) (_module.__default.NoDuplicates _module._default.Elements_Property$_T0 ($LS $LZ) |$ih#xs0#0|)) (< (DtRank |$ih#xs0#0|) (DtRank |xs#0@@11|))) (= (|Set#Card| (_module.__default.Elements _module._default.Elements_Property$_T0 ($LS $LZ) |$ih#xs0#0|)) (_module.__default.Length _module._default.Elements_Property$_T0 ($LS $LZ) |$ih#xs0#0|)))
 :pattern ( (_module.__default.Length _module._default.Elements_Property$_T0 ($LS $LZ) |$ih#xs0#0|))
 :pattern ( (_module.__default.Elements _module._default.Elements_Property$_T0 ($LS $LZ) |$ih#xs0#0|))
 :pattern ( (_module.__default.NoDuplicates _module._default.Elements_Property$_T0 ($LS $LZ) |$ih#xs0#0|))
)) (= (ControlFlow 0 2) (- 0 1)))) (= (|Set#Card| (_module.__default.Elements _module._default.Elements_Property$_T0 ($LS ($LS $LZ)) |xs#0@@11|)) (_module.__default.Length _module._default.Elements_Property$_T0 ($LS ($LS $LZ)) |xs#0@@11|))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and (and (and ($Is DatatypeTypeType |xs#0@@11| (Tclass._module.List _module._default.Elements_Property$_T0)) ($IsAlloc DatatypeTypeType |xs#0@@11| (Tclass._module.List _module._default.Elements_Property$_T0) $Heap@@0)) (|$IsA#_module.List| |xs#0@@11|)) (= 3 $FunctionContextHeight)) (and (and (|_module.__default.NoDuplicates#canCall| _module._default.Elements_Property$_T0 |xs#0@@11|) (and (_module.__default.NoDuplicates _module._default.Elements_Property$_T0 ($LS $LZ) |xs#0@@11|) (ite (_module.List.Nil_q |xs#0@@11|) true (let ((|tail#3@@2| (_module.List.tail |xs#0@@11|)))
(let ((|x#3@@0| (_module.List.head |xs#0@@11|)))
 (and (not (|Set#IsMember| (_module.__default.Elements _module._default.Elements_Property$_T0 ($LS $LZ) |tail#3@@2|) |x#3@@0|)) (_module.__default.NoDuplicates _module._default.Elements_Property$_T0 ($LS $LZ) |tail#3@@2|))))))) (= (ControlFlow 0 3) 2))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
