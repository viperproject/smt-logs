(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@T T@U T@U) Bool)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@26 (Int) Int)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 (T@U T@U) Int)
(declare-fun $generated@@42 (T@U T@U) Bool)
(declare-fun $generated@@50 (T@U) Int)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@T T@T) T@T)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@127 (T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@3 $generated@@21) 3))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ) (!  (=> ($generated@@20 $generated@@21 $generated@@24 ($generated@@22 $generated@@25)) ($generated@@23 $generated@@24))
 :pattern ( ($generated@@20 $generated@@21 $generated@@24 ($generated@@22 $generated@@25)))
)))
(assert (forall (($generated@@27 Int) ) (! (= ($generated@@26 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 ($generated@@31 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@35 ($generated@@32 $generated@@40 $generated@@37) $generated@@38 $generated@@39) ($generated@@36 $generated@@40 $generated@@37 $generated@@38 $generated@@39))
 :pattern ( ($generated@@35 ($generated@@32 $generated@@40 $generated@@37) $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@20 $generated@@21 $generated@@43 ($generated@@22 $generated@@44)) (forall (($generated@@45 T@U) ) (!  (=> (< 0 ($generated@@41 $generated@@43 $generated@@45)) ($generated@@42 $generated@@45 $generated@@44))
 :pattern ( ($generated@@41 $generated@@43 $generated@@45))
)))
 :pattern ( ($generated@@20 $generated@@21 $generated@@43 ($generated@@22 $generated@@44)))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@42 $generated@@46 $generated) (and (= ($generated@@32 $generated@@5 ($generated@@31 $generated@@5 $generated@@46)) $generated@@46) ($generated@@20 $generated@@5 ($generated@@31 $generated@@5 $generated@@46) $generated)))
 :pattern ( ($generated@@42 $generated@@46 $generated))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@42 ($generated@@32 $generated@@49 $generated@@47) $generated@@48) ($generated@@20 $generated@@49 $generated@@47 $generated@@48))
 :pattern ( ($generated@@42 ($generated@@32 $generated@@49 $generated@@47) $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@23 $generated@@51) (forall (($generated@@52 T@U) ) (!  (and (<= 0 ($generated@@41 $generated@@51 $generated@@52)) (<= ($generated@@41 $generated@@51 $generated@@52) ($generated@@50 $generated@@51)))
 :pattern ( ($generated@@41 $generated@@51 $generated@@52))
)))
 :pattern ( ($generated@@23 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (<= 0 ($generated@@50 $generated@@53))
 :pattern ( ($generated@@50 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@41 $generated@@54 $generated@@55) 0)
 :pattern ( ($generated@@41 $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@56 ($generated@@22 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@22 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@19 ($generated@@22 $generated@@58)) $generated@@1)
 :pattern ( ($generated@@22 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@31 $generated@@60 ($generated@@32 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@32 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ) (!  (and (= (= ($generated@@50 $generated@@61) 0) (= $generated@@61 $generated@@54)) (=> (or (not (= ($generated@@50 $generated@@61) 0)) (not true)) (exists (($generated@@62 T@U) ) (! (< 0 ($generated@@41 $generated@@61 $generated@@62))
 :pattern ( ($generated@@41 $generated@@61 $generated@@62))
))))
 :pattern ( ($generated@@50 $generated@@61))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@63 $generated@@74 $generated@@75 $generated@@76 ($generated@@70 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@79 $generated@@80) $generated@@77)
 :weight 0
)) (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@63 $generated@@81 $generated@@82 $generated@@83 ($generated@@70 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@63 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@63 $generated@@90 $generated@@91 $generated@@92 ($generated@@70 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@63 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)))) (= ($generated@@3 $generated@@64) 4)) (= ($generated@@3 $generated@@65) 5)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@67 $generated@@99 $generated@@100 ($generated@@71 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@103) $generated@@101)
 :weight 0
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@108 $generated@@109) (= ($generated@@67 $generated@@104 $generated@@105 ($generated@@71 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@109) ($generated@@67 $generated@@104 $generated@@105 $generated@@107 $generated@@109)))
 :weight 0
))) (= ($generated@@3 $generated@@68) 6)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (= ($generated@@3 ($generated@@69 $generated@@110 $generated@@111)) 7))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@72 ($generated@@69 $generated@@112 $generated@@113)) $generated@@112)
 :pattern ( ($generated@@69 $generated@@112 $generated@@113))
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@73 ($generated@@69 $generated@@114 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@69 $generated@@114 $generated@@115))
))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@8 ($generated@@63 $generated@@64 $generated@@65 $generated@@4 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@8 ($generated@@31 $generated@@4 ($generated@@67 $generated@@65 $generated@@68 ($generated@@67 $generated@@64 ($generated@@69 $generated@@65 $generated@@68) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@63 $generated@@64 $generated@@65 $generated@@4 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ) (!  (=> ($generated@@42 $generated@@122 ($generated@@22 $generated@@123)) (and (= ($generated@@32 $generated@@21 ($generated@@31 $generated@@21 $generated@@122)) $generated@@122) ($generated@@20 $generated@@21 ($generated@@31 $generated@@21 $generated@@122) ($generated@@22 $generated@@123))))
 :pattern ( ($generated@@42 $generated@@122 ($generated@@22 $generated@@123)))
)))
(assert (forall (($generated@@124 Int) ) (! (= ($generated@@32 $generated@@5 ($generated@@9 ($generated@@26 $generated@@124))) ($generated@@28 $generated@@68 ($generated@@32 $generated@@5 ($generated@@9 $generated@@124))))
 :pattern ( ($generated@@32 $generated@@5 ($generated@@9 ($generated@@26 $generated@@124))))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@T) ) (! (= ($generated@@32 $generated@@126 ($generated@@28 $generated@@126 $generated@@125)) ($generated@@28 $generated@@68 ($generated@@32 $generated@@126 $generated@@125)))
 :pattern ( ($generated@@32 $generated@@126 ($generated@@28 $generated@@126 $generated@@125)))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@127 $generated@@128 $generated@@129) (forall (($generated@@130 T@U) ) (! (<= ($generated@@41 $generated@@128 $generated@@130) ($generated@@41 $generated@@129 $generated@@130))
 :pattern ( ($generated@@41 $generated@@128 $generated@@130))
 :pattern ( ($generated@@41 $generated@@129 $generated@@130))
)))
 :pattern ( ($generated@@127 $generated@@128 $generated@@129))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@36 $generated@@21 $generated@@131 ($generated@@22 $generated@@132) $generated@@133) (forall (($generated@@134 T@U) ) (!  (=> (< 0 ($generated@@41 $generated@@131 $generated@@134)) ($generated@@35 $generated@@134 $generated@@132 $generated@@133))
 :pattern ( ($generated@@41 $generated@@131 $generated@@134))
)))
 :pattern ( ($generated@@36 $generated@@21 $generated@@131 ($generated@@22 $generated@@132) $generated@@133))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (! ($generated@@36 $generated@@5 $generated@@136 $generated $generated@@135)
 :pattern ( ($generated@@36 $generated@@5 $generated@@136 $generated $generated@@135))
)))
(assert (forall (($generated@@137 T@U) ) (! ($generated@@20 $generated@@5 $generated@@137 $generated)
 :pattern ( ($generated@@20 $generated@@5 $generated@@137 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 (T@U) Bool)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@146 true))
(let (($generated@@147  (=> (= (ControlFlow 0 10) (- 0 9)) ($generated@@127 $generated@@138 $generated@@54))))
(let (($generated@@148  (=> (= (ControlFlow 0 8) (- 0 7)) ($generated@@127 $generated@@139 $generated@@138))))
(let (($generated@@149 true))
(let (($generated@@150  (=> ($generated@@127 $generated@@139 $generated@@54) (and (and (and (=> (= (ControlFlow 0 12) 6) $generated@@149) (=> (= (ControlFlow 0 12) 8) $generated@@148)) (=> (= (ControlFlow 0 12) 10) $generated@@147)) (=> (= (ControlFlow 0 12) 11) $generated@@146)))))
(let (($generated@@151  (=> (= (ControlFlow 0 5) (- 0 4)) ($generated@@127 $generated@@139 $generated@@138))))
(let (($generated@@152  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@127 $generated@@138 $generated@@54))))
(let (($generated@@153 true))
(let (($generated@@154  (=> (= $generated@@140 ($generated@@66 $generated@@141 $generated@@142 $generated@@2 false)) (and (and (and (=> (= (ControlFlow 0 13) 1) $generated@@153) (=> (= (ControlFlow 0 13) 3) $generated@@152)) (=> (= (ControlFlow 0 13) 5) $generated@@151)) (=> (= (ControlFlow 0 13) 12) $generated@@150)))))
(let (($generated@@155  (=> (and ($generated@@143 $generated@@142) ($generated@@144 $generated@@142)) (=> (and (and (and ($generated@@20 $generated@@21 $generated@@139 ($generated@@22 $generated)) ($generated@@36 $generated@@21 $generated@@139 ($generated@@22 $generated) $generated@@142)) (and ($generated@@20 $generated@@21 $generated@@138 ($generated@@22 $generated)) ($generated@@36 $generated@@21 $generated@@138 ($generated@@22 $generated) $generated@@142))) (and (and (= 0 $generated@@145) (= ($generated@@50 $generated@@139) ($generated@@26 0))) (and (> ($generated@@50 $generated@@138) 0) (= (ControlFlow 0 14) 13)))) $generated@@154))))
$generated@@155)))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 10) (- 9))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
