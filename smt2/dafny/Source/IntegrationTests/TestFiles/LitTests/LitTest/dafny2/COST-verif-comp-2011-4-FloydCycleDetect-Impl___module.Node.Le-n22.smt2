(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun class._module.Node? () T@U)
(declare-fun Tagclass._module.Node? () T@U)
(declare-fun Tagclass._module.Node () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun field$next () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Node.Nexxxt (T@U T@U T@U Int T@U) T@U)
(declare-fun |_module.Node.Nexxxt#canCall| (T@U T@U Int T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Node () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Tclass._module.Node? () T@U)
(declare-fun _module.Node.IsClosed (T@U T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun _module.Node.next () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |_module.Node.IsClosed#canCall| (T@U T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc allocName class._module.Node? Tagclass._module.Node? Tagclass._module.Node tytagFamily$Node field$next)
)
(assert  (and (= (Ctor refType) 3) (= (Ctor SetType) 4)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) ($Heap T@U) (this T@U) (|k#0| Int) (|S#0| T@U) ) (!  (=> (or (|_module.Node.Nexxxt#canCall| $Heap this |k#0| |S#0|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.Node) ($IsAlloc refType this Tclass._module.Node $Heap)))) (and ($Is SetType |S#0| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0| (TSet Tclass._module.Node?) $Heap))) (and (_module.Node.IsClosed $Heap this |S#0|) (<= (LitInt 0) |k#0|))))) (and (|Set#IsMember| |S#0| ($Box refType (_module.Node.Nexxxt $ly $Heap this |k#0| |S#0|))) ($Is refType (_module.Node.Nexxxt $ly $Heap this |k#0| |S#0|) Tclass._module.Node?)))
 :pattern ( (_module.Node.Nexxxt $ly $Heap this |k#0| |S#0|))
))))
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall (($ly@@0 T@U) ($Heap@@0 T@U) (this@@0 T@U) (|k#0@@0| Int) (|S#0@@0| T@U) ) (! (= (_module.Node.Nexxxt ($LS $ly@@0) $Heap@@0 this@@0 |k#0@@0| |S#0@@0|) (_module.Node.Nexxxt $ly@@0 $Heap@@0 this@@0 |k#0@@0| |S#0@@0|))
 :pattern ( (_module.Node.Nexxxt ($LS $ly@@0) $Heap@@0 this@@0 |k#0@@0| |S#0@@0|))
)))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Node?)  (or (= $o null) (= (dtype $o) Tclass._module.Node?)))
 :pattern ( ($Is refType $o Tclass._module.Node?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Node $h) ($IsAlloc refType |c#0| Tclass._module.Node? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node? $h))
)))
(assert (= (FDim _module.Node.next) 0))
(assert (= (FieldOfDecl class._module.Node? field$next) _module.Node.next))
(assert  (not ($IsGhostField _module.Node.next)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@0))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|Set#Subset| a b) (forall ((o T@U) ) (!  (=> (|Set#IsMember| a o) (|Set#IsMember| b o))
 :pattern ( (|Set#IsMember| a o))
 :pattern ( (|Set#IsMember| b o))
)))
 :pattern ( (|Set#Subset| a b))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall (($h@@1 T@U) ($o@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) Tclass._module.Node?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Node.next)) Tclass._module.Node?))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Node.next)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@1 T@U) (|S#0@@1| T@U) ) (!  (=> (or (|_module.Node.IsClosed#canCall| $Heap@@1 this@@1 |S#0@@1|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 Tclass._module.Node) ($IsAlloc refType this@@1 Tclass._module.Node $Heap@@1)))) ($Is SetType |S#0@@1| (TSet Tclass._module.Node?))))) (= (_module.Node.IsClosed $Heap@@1 this@@1 |S#0@@1|)  (and (and (|Set#IsMember| |S#0@@1| ($Box refType this@@1)) (|Set#IsMember| |S#0@@1| ($Box refType null))) (forall ((|n#0| T@U) ) (!  (=> ($Is refType |n#0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@1| ($Box refType |n#0|)) (or (not (= |n#0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@1| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0|) _module.Node.next)))
)))))
 :pattern ( (_module.Node.IsClosed $Heap@@1 this@@1 |S#0@@1|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Node?) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) Tclass._module.Node?)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Node?))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Node) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.Node)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Node))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.Node)  (and ($Is refType |c#0@@0| Tclass._module.Node?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node?))
)))
(assert (forall (($h@@2 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass._module.Node?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Node.next)) Tclass._module.Node? $h@@2))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Node.next)))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsAllocBox bx@@3 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@1 T@U) ($Heap@@2 T@U) (this@@2 T@U) (|k#0@@1| Int) (|S#0@@2| T@U) ) (!  (=> (or (|_module.Node.Nexxxt#canCall| $Heap@@2 this@@2 |k#0@@1| |S#0@@2|) (and (< 1 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $Heap@@2) (or (not (= this@@2 null)) (not true))) ($IsAlloc refType this@@2 Tclass._module.Node $Heap@@2)) (and ($Is SetType |S#0@@2| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0@@2| (TSet Tclass._module.Node?) $Heap@@2))) (and (_module.Node.IsClosed $Heap@@2 this@@2 |S#0@@2|) (<= (LitInt 0) |k#0@@1|))))) ($IsAlloc refType (_module.Node.Nexxxt $ly@@1 $Heap@@2 this@@2 |k#0@@1| |S#0@@2|) Tclass._module.Node? $Heap@@2))
 :pattern ( ($IsAlloc refType (_module.Node.Nexxxt $ly@@1 $Heap@@2 this@@2 |k#0@@1| |S#0@@2|) Tclass._module.Node? $Heap@@2))
))))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(assert (forall ((bx@@4 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@3))))
 :pattern ( ($IsBox bx@@4 (TSet t@@3)))
)))
(assert (= (Tag Tclass._module.Node?) Tagclass._module.Node?))
(assert (= (TagFamily Tclass._module.Node?) tytagFamily$Node))
(assert (= (Tag Tclass._module.Node) Tagclass._module.Node))
(assert (= (TagFamily Tclass._module.Node) tytagFamily$Node))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@2 T@U) ($Heap@@3 T@U) (this@@3 T@U) (|k#0@@2| Int) (|S#0@@3| T@U) ) (!  (=> (or (|_module.Node.Nexxxt#canCall| $Heap@@3 this@@3 |k#0@@2| |S#0@@3|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@3) (and (or (not (= this@@3 null)) (not true)) (and ($Is refType this@@3 Tclass._module.Node) ($IsAlloc refType this@@3 Tclass._module.Node $Heap@@3)))) ($Is SetType |S#0@@3| (TSet Tclass._module.Node?))) (and (_module.Node.IsClosed $Heap@@3 this@@3 |S#0@@3|) (<= (LitInt 0) |k#0@@2|))))) (and (=> (or (not (= |k#0@@2| (LitInt 0))) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|) (=> (or (not (= (_module.Node.Nexxxt $ly@@2 $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|) null)) (not true)) (|_module.Node.Nexxxt#canCall| $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|)))) (= (_module.Node.Nexxxt ($LS $ly@@2) $Heap@@3 this@@3 |k#0@@2| |S#0@@3|) (ite (= |k#0@@2| (LitInt 0)) this@@3 (ite (= (_module.Node.Nexxxt $ly@@2 $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|) null) null ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@3 (_module.Node.Nexxxt $ly@@2 $Heap@@3 this@@3 (- |k#0@@2| 1) |S#0@@3|)) _module.Node.next)))))))
 :pattern ( (_module.Node.Nexxxt ($LS $ly@@2) $Heap@@3 this@@3 |k#0@@2| |S#0@@3|) ($IsGoodHeap $Heap@@3))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |k#3@0| () Int)
(declare-fun |kn#0@1| () Int)
(declare-fun |l#3@0| () Int)
(declare-fun |n#0@@0| () Int)
(declare-fun $LZ () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun this@@4 () T@U)
(declare-fun |S#0@@4| () T@U)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun $Heap@10 () T@U)
(declare-fun |l#0_2@0| () Int)
(declare-fun |ln#0_0@2| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |k#0_0@0| () Int)
(declare-fun |l#0_0@0| () Int)
(declare-fun |$w$loop#0_0@1| () Bool)
(declare-fun $Heap@5 () T@U)
(declare-fun |nn#0_0_0_0_0@3| () Int)
(declare-fun |x##0_0_0_0_0_0@3| () Int)
(declare-fun call0formal@this@0 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |##k#0_0_0_0_0_14@3| () Int)
(declare-fun |nn#0_0_0_0_0@4| () Int)
(declare-fun |$decr$loop#0_0_0_0_00@3| () Int)
(declare-fun |$w$loop#0_0_0_0_0@2| () Bool)
(declare-fun |##k#0_0_0_0_0_8@3| () Int)
(declare-fun |##k#0_0_0_0_0_11@3| () Int)
(declare-fun |##k#0_0_0_0_0_6@3| () Int)
(declare-fun |ln#0_0@3| () Int)
(declare-fun |$decr$loop#0_00@2| () Int)
(declare-fun $Heap@9 () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun |##k#0_0_0_10@2| () Int)
(declare-fun $Heap@6 () T@U)
(declare-fun |j#0_0_0_0_0@2| () Int)
(declare-fun |##k#0_0_0_0_5@2| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |$decr_init$loop#0_00@1| () Int)
(declare-fun |##k#0_0_0_0@2| () Int)
(declare-fun |x##0_0_0_0@2| () Int)
(declare-fun |##k#0_0_0_3@2| () Int)
(declare-fun |y##0_0_0_1@2| () Int)
(declare-fun |##k#0_0_0_4@2| () Int)
(declare-fun |##k#0_0_0_6@2| () Int)
(declare-fun |##k#0_0_0_8@2| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$decr_init$loop#0_0_0_0_00@2| () Int)
(declare-fun |nn#0_0_0_0_0@2| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |kn#0@2| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |ln#0_0@1| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun $Heap@@4 () T@U)
(declare-fun |kn#0@0| () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 381) (let ((anon16_correct true))
(let ((anon79_Else_correct  (=> (and (not (and (and (and (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |kn#0@1|)) (and (<= (LitInt 0) |l#3@0|) (< |l#3@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) null)) (not true)))) (= (ControlFlow 0 350) 334)) anon16_correct)))
(let ((anon79_Then_correct  (=> (and (and (and (and (and (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |kn#0@1|)) (and (<= (LitInt 0) |l#3@0|) (< |l#3@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) null)) (not true))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@1)) (and ($IsAlloc intType (int_2_U |k#3@0|) TInt $Heap@1) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@1))) (and (=> (= (ControlFlow 0 335) (- 0 349)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 335) (- 0 348)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 335) (- 0 347)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (forall ((|n#11| T@U) ) (!  (=> ($Is refType |n#11| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#11|)) (or (not (= |n#11| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#11|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 335) (- 0 346)) (<= (LitInt 0) |k#3@0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |k#3@0| |S#0@@4|) (and (=> (= (ControlFlow 0 335) (- 0 345)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|) null)) (not true))) (and (=> (= (ControlFlow 0 335) (- 0 344)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) null)) (not true))) (=> ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next) Tclass._module.Node? $Heap@1) (=> (and ($IsAlloc intType (int_2_U |l#3@0|) TInt $Heap@1) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@1)) (and (=> (= (ControlFlow 0 335) (- 0 343)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next))))) (and (=> (= (ControlFlow 0 335) (- 0 342)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 335) (- 0 341)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (forall ((|n#12| T@U) ) (!  (=> ($Is refType |n#12| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#12|)) (or (not (= |n#12| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#12|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#12|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#12|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 335) (- 0 340)) (<= (LitInt 0) |l#3@0|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|)) _module.Node.next)) |l#3@0| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@1)) (and ($IsAlloc intType (int_2_U |k#3@0|) TInt $Heap@1) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@1))) (and (=> (= (ControlFlow 0 335) (- 0 339)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 335) (- 0 338)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 335) (- 0 337)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (forall ((|n#13| T@U) ) (!  (=> ($Is refType |n#13| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#13|)) (or (not (= |n#13| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#13|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 335) (- 0 336)) (<= (LitInt 0) |k#3@0|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |k#3@0| |S#0@@4|) (= (ControlFlow 0 335) 334)) anon16_correct))))))))))))))))))))))
(let ((anon78_Else_correct  (=> (not (and (and (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |kn#0@1|)) (and (<= (LitInt 0) |l#3@0|) (< |l#3@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|) null)) (not true)))) (and (=> (= (ControlFlow 0 357) 335) anon79_Then_correct) (=> (= (ControlFlow 0 357) 350) anon79_Else_correct)))))
(let ((anon78_Then_correct  (=> (and (and (and (and (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |kn#0@1|)) (and (<= (LitInt 0) |l#3@0|) (< |l#3@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|) null)) (not true))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@1)) (and ($IsAlloc intType (int_2_U |k#3@0|) TInt $Heap@1) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@1))) (and (=> (= (ControlFlow 0 351) (- 0 356)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 351) (- 0 355)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 351) (- 0 354)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (forall ((|n#10| T@U) ) (!  (=> ($Is refType |n#10| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#10|)) (or (not (= |n#10| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#10|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 351) (- 0 353)) (<= (LitInt 0) |k#3@0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |k#3@0| |S#0@@4|) (and (=> (= (ControlFlow 0 351) (- 0 352)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#3@0| |S#0@@4|) null)) (not true))) (and (=> (= (ControlFlow 0 351) 335) anon79_Then_correct) (=> (= (ControlFlow 0 351) 350) anon79_Else_correct)))))))))))
(let ((anon77_Else_correct  (=> (not (and (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |kn#0@1|)) (and (<= (LitInt 0) |l#3@0|) (< |l#3@0| |n#0@@0|)))) (and (=> (= (ControlFlow 0 363) 351) anon78_Then_correct) (=> (= (ControlFlow 0 363) 357) anon78_Else_correct)))))
(let ((anon77_Then_correct  (=> (and (and (and (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |kn#0@1|)) (and (<= (LitInt 0) |l#3@0|) (< |l#3@0| |n#0@@0|))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@1)) (and ($IsAlloc intType (int_2_U |k#3@0|) TInt $Heap@1) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@1))) (and (=> (= (ControlFlow 0 358) (- 0 362)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 358) (- 0 361)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 358) (- 0 360)) (=> (|_module.Node.IsClosed#canCall| $Heap@1 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@1 this@@4 |S#0@@4|) (forall ((|n#9| T@U) ) (!  (=> ($Is refType |n#9| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#9|)) (or (not (= |n#9| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#9|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#9|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |n#9|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 358) (- 0 359)) (<= (LitInt 0) |k#3@0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |k#3@0| |S#0@@4|) (and (=> (= (ControlFlow 0 358) 351) anon78_Then_correct) (=> (= (ControlFlow 0 358) 357) anon78_Else_correct))))))))))
(let ((anon76_Else_correct  (=> (< |l#3@0| (LitInt 0)) (and (=> (= (ControlFlow 0 366) 358) anon77_Then_correct) (=> (= (ControlFlow 0 366) 363) anon77_Else_correct)))))
(let ((anon76_Then_correct  (=> (<= (LitInt 0) |l#3@0|) (and (=> (= (ControlFlow 0 365) 358) anon77_Then_correct) (=> (= (ControlFlow 0 365) 363) anon77_Else_correct)))))
(let ((anon75_Then_correct  (=> (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |kn#0@1|)) (and (=> (= (ControlFlow 0 367) 365) anon76_Then_correct) (=> (= (ControlFlow 0 367) 366) anon76_Else_correct)))))
(let ((anon75_Else_correct  (=> (not (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |kn#0@1|))) (and (=> (= (ControlFlow 0 364) 358) anon77_Then_correct) (=> (= (ControlFlow 0 364) 363) anon77_Else_correct)))))
(let ((anon74_Else_correct  (=> (< |k#3@0| (LitInt 0)) (and (=> (= (ControlFlow 0 369) 367) anon75_Then_correct) (=> (= (ControlFlow 0 369) 364) anon75_Else_correct)))))
(let ((anon74_Then_correct  (=> (<= (LitInt 0) |k#3@0|) (and (=> (= (ControlFlow 0 368) 367) anon75_Then_correct) (=> (= (ControlFlow 0 368) 364) anon75_Else_correct)))))
(let ((anon73_Then_correct  (and (=> (= (ControlFlow 0 370) 368) anon74_Then_correct) (=> (= (ControlFlow 0 370) 369) anon74_Else_correct))))
(let ((anon73_Else_correct true))
(let ((anon4_correct  (=> (and (<= (LitInt 0) |kn#0@1|) (<= |kn#0@1| |n#0@@0|)) (and (=> (= (ControlFlow 0 371) 370) anon73_Then_correct) (=> (= (ControlFlow 0 371) 333) anon73_Else_correct)))))
(let ((anon72_Else_correct  (=> (and (< |kn#0@1| (LitInt 0)) (= (ControlFlow 0 373) 371)) anon4_correct)))
(let ((anon72_Then_correct  (=> (and (<= (LitInt 0) |kn#0@1|) (= (ControlFlow 0 372) 371)) anon4_correct)))
(let ((anon71_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 374) 372) anon72_Then_correct) (=> (= (ControlFlow 0 374) 373) anon72_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 330) (- 0 329)) (forall ((|k#1| Int) (|l#1@@0| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#1|) (< |k#1| |n#0@@0|)) (and (<= (LitInt 0) |l#1@@0|) (< |l#1@@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@10 this@@4 |k#1| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@10 this@@4 |k#1| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@10 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@10 this@@4 |k#1| |S#0@@4|)) _module.Node.next)) |l#1@@0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@10 this@@4 |k#1| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@10 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@10 this@@4 |k#1| |S#0@@4|)) _module.Node.next)) |l#1@@0| |S#0@@4|))
)))))
(let ((anon80_Then_correct  (=> (<= |n#0@@0| |kn#0@1|) (=> (and (= $Heap@10 $Heap@1) (= (ControlFlow 0 331) 330)) GeneratedUnifiedExit_correct))))
(let ((anon44_correct true))
(let ((anon95_Else_correct  (=> (and (not (and (and (and (<= (LitInt 0) |l#0_2@0|) (< |l#0_2@0| |ln#0_0@2|)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true)))) (= (ControlFlow 0 264) 248)) anon44_correct)))
(let ((anon95_Then_correct  (=> (and (and (and (and (and (<= (LitInt 0) |l#0_2@0|) (< |l#0_2@0| |ln#0_0@2|)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 249) (- 0 263)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 249) (- 0 262)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 249) (- 0 261)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_7| T@U) ) (!  (=> ($Is refType |n#0_7| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_7|)) (or (not (= |n#0_7| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_7|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_7|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_7|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 249) (- 0 260)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 249) (- 0 259)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (and (=> (= (ControlFlow 0 249) (- 0 258)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true))) (=> ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next) Tclass._module.Node? $Heap@2) (=> (and ($IsAlloc intType (int_2_U |l#0_2@0|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2)) (and (=> (= (ControlFlow 0 249) (- 0 257)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next))))) (and (=> (= (ControlFlow 0 249) (- 0 256)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 249) (- 0 255)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (forall ((|n#0_8| T@U) ) (!  (=> ($Is refType |n#0_8| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_8|)) (or (not (= |n#0_8| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_8|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_8|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_8|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 249) (- 0 254)) (<= (LitInt 0) |l#0_2@0|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_2@0| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 249) (- 0 253)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 249) (- 0 252)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 249) (- 0 251)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_9| T@U) ) (!  (=> ($Is refType |n#0_9| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_9|)) (or (not (= |n#0_9| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_9|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_9|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_9|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 249) (- 0 250)) (<= (LitInt 0) |kn#0@1|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|) (= (ControlFlow 0 249) 248)) anon44_correct))))))))))))))))))))))
(let ((anon94_Else_correct  (=> (not (and (and (<= (LitInt 0) |l#0_2@0|) (< |l#0_2@0| |ln#0_0@2|)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)))) (and (=> (= (ControlFlow 0 271) 249) anon95_Then_correct) (=> (= (ControlFlow 0 271) 264) anon95_Else_correct)))))
(let ((anon94_Then_correct  (=> (and (and (and (and (<= (LitInt 0) |l#0_2@0|) (< |l#0_2@0| |ln#0_0@2|)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 265) (- 0 270)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 265) (- 0 269)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 265) (- 0 268)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_6| T@U) ) (!  (=> ($Is refType |n#0_6| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_6|)) (or (not (= |n#0_6| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_6|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_6|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_6|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 265) (- 0 267)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 265) (- 0 266)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (and (=> (= (ControlFlow 0 265) 249) anon95_Then_correct) (=> (= (ControlFlow 0 265) 264) anon95_Else_correct)))))))))))
(let ((anon93_Else_correct  (=> (not (and (<= (LitInt 0) |l#0_2@0|) (< |l#0_2@0| |ln#0_0@2|))) (and (=> (= (ControlFlow 0 277) 265) anon94_Then_correct) (=> (= (ControlFlow 0 277) 271) anon94_Else_correct)))))
(let ((anon93_Then_correct  (=> (and (and (and (<= (LitInt 0) |l#0_2@0|) (< |l#0_2@0| |ln#0_0@2|)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 272) (- 0 276)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 272) (- 0 275)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 272) (- 0 274)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_5| T@U) ) (!  (=> ($Is refType |n#0_5| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_5|)) (or (not (= |n#0_5| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_5|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_5|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_5|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 272) (- 0 273)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 272) 265) anon94_Then_correct) (=> (= (ControlFlow 0 272) 271) anon94_Else_correct))))))))))
(let ((anon92_Else_correct  (=> (< |l#0_2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 279) 272) anon93_Then_correct) (=> (= (ControlFlow 0 279) 277) anon93_Else_correct)))))
(let ((anon92_Then_correct  (=> (<= (LitInt 0) |l#0_2@0|) (and (=> (= (ControlFlow 0 278) 272) anon93_Then_correct) (=> (= (ControlFlow 0 278) 277) anon93_Else_correct)))))
(let ((anon91_Then_correct  (and (=> (= (ControlFlow 0 280) 278) anon92_Then_correct) (=> (= (ControlFlow 0 280) 279) anon92_Else_correct))))
(let ((anon91_Else_correct true))
(let ((anon35_correct  (=> (and (forall ((|k#0_1| Int) (|l#0_1| Int) ) (!  (=> (and (<= (LitInt 0) |k#0_1|) (< |k#0_1| |kn#0@1|)) (=> (and (<= (LitInt 0) |l#0_1|) (< |l#0_1| |n#0@@0|)) (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_1| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1| |S#0@@4|) null)) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_1| |S#0@@4|) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1| |S#0@@4|)) _module.Node.next)) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1| |S#0@@4|)) _module.Node.next)) |l#0_1| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_1| |S#0@@4|))))))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1| |S#0@@4|)) _module.Node.next)) |l#0_1| |S#0@@4|))
)) (forall ((|k#0_1@@0| Int) (|l#0_1@@0| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#0_1@@0|) (< |k#0_1@@0| |kn#0@1|)) (and (<= (LitInt 0) |l#0_1@@0|) (< |l#0_1@@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@0| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@0| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@0| |S#0@@4|)) _module.Node.next)) |l#0_1@@0| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@0| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@0| |S#0@@4|)) _module.Node.next)) |l#0_1@@0| |S#0@@4|))
))) (and (=> (= (ControlFlow 0 281) 280) anon91_Then_correct) (=> (= (ControlFlow 0 281) 247) anon91_Else_correct)))))
(let ((anon90_Else_correct  (=> (and (not (and (and (and (and (<= (LitInt 0) |k#0_0@0|) (< |k#0_0@0| |kn#0@1|)) (and (<= (LitInt 0) |l#0_0@0|) (< |l#0_0@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) null)) (not true)))) (= (ControlFlow 0 297) 281)) anon35_correct)))
(let ((anon90_Then_correct  (=> (and (and (and (and (and (and (<= (LitInt 0) |k#0_0@0|) (< |k#0_0@0| |kn#0@1|)) (and (<= (LitInt 0) |l#0_0@0|) (< |l#0_0@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) null)) (not true))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |k#0_0@0|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 282) (- 0 296)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 282) (- 0 295)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 282) (- 0 294)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_2| T@U) ) (!  (=> ($Is refType |n#0_2| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_2|)) (or (not (= |n#0_2| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_2|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_2|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_2|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 282) (- 0 293)) (<= (LitInt 0) |k#0_0@0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) (and (=> (= (ControlFlow 0 282) (- 0 292)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) null)) (not true))) (and (=> (= (ControlFlow 0 282) (- 0 291)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) null)) (not true))) (=> ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next) Tclass._module.Node? $Heap@2) (=> (and ($IsAlloc intType (int_2_U |l#0_0@0|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2)) (and (=> (= (ControlFlow 0 282) (- 0 290)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next))))) (and (=> (= (ControlFlow 0 282) (- 0 289)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 282) (- 0 288)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (forall ((|n#0_3| T@U) ) (!  (=> ($Is refType |n#0_3| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_3|)) (or (not (= |n#0_3| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_3|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_3|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_3|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 282) (- 0 287)) (<= (LitInt 0) |l#0_0@0|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|)) _module.Node.next)) |l#0_0@0| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |k#0_0@0|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 282) (- 0 286)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 282) (- 0 285)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 282) (- 0 284)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_4| T@U) ) (!  (=> ($Is refType |n#0_4| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_4|)) (or (not (= |n#0_4| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_4|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_4|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_4|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 282) (- 0 283)) (<= (LitInt 0) |k#0_0@0|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) (= (ControlFlow 0 282) 281)) anon35_correct))))))))))))))))))))))
(let ((anon89_Else_correct  (=> (not (and (and (and (<= (LitInt 0) |k#0_0@0|) (< |k#0_0@0| |kn#0@1|)) (and (<= (LitInt 0) |l#0_0@0|) (< |l#0_0@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) null)) (not true)))) (and (=> (= (ControlFlow 0 304) 282) anon90_Then_correct) (=> (= (ControlFlow 0 304) 297) anon90_Else_correct)))))
(let ((anon89_Then_correct  (=> (and (and (and (and (and (<= (LitInt 0) |k#0_0@0|) (< |k#0_0@0| |kn#0@1|)) (and (<= (LitInt 0) |l#0_0@0|) (< |l#0_0@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) null)) (not true))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |k#0_0@0|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 298) (- 0 303)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 298) (- 0 302)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 298) (- 0 301)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_1| T@U) ) (!  (=> ($Is refType |n#0_1| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_1|)) (or (not (= |n#0_1| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_1|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_1|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_1|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 298) (- 0 300)) (<= (LitInt 0) |k#0_0@0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) (and (=> (= (ControlFlow 0 298) (- 0 299)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) null)) (not true))) (and (=> (= (ControlFlow 0 298) 282) anon90_Then_correct) (=> (= (ControlFlow 0 298) 297) anon90_Else_correct)))))))))))
(let ((anon88_Else_correct  (=> (not (and (and (<= (LitInt 0) |k#0_0@0|) (< |k#0_0@0| |kn#0@1|)) (and (<= (LitInt 0) |l#0_0@0|) (< |l#0_0@0| |n#0@@0|)))) (and (=> (= (ControlFlow 0 310) 298) anon89_Then_correct) (=> (= (ControlFlow 0 310) 304) anon89_Else_correct)))))
(let ((anon88_Then_correct  (=> (and (and (and (and (<= (LitInt 0) |k#0_0@0|) (< |k#0_0@0| |kn#0@1|)) (and (<= (LitInt 0) |l#0_0@0|) (< |l#0_0@0| |n#0@@0|))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |k#0_0@0|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 305) (- 0 309)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 305) (- 0 308)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 305) (- 0 307)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_0| T@U) ) (!  (=> ($Is refType |n#0_0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0|)) (or (not (= |n#0_0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 305) (- 0 306)) (<= (LitInt 0) |k#0_0@0|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_0@0| |S#0@@4|) (and (=> (= (ControlFlow 0 305) 298) anon89_Then_correct) (=> (= (ControlFlow 0 305) 304) anon89_Else_correct))))))))))
(let ((anon87_Else_correct  (=> (< |l#0_0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 313) 305) anon88_Then_correct) (=> (= (ControlFlow 0 313) 310) anon88_Else_correct)))))
(let ((anon87_Then_correct  (=> (<= (LitInt 0) |l#0_0@0|) (and (=> (= (ControlFlow 0 312) 305) anon88_Then_correct) (=> (= (ControlFlow 0 312) 310) anon88_Else_correct)))))
(let ((anon86_Then_correct  (=> (and (<= (LitInt 0) |k#0_0@0|) (< |k#0_0@0| |kn#0@1|)) (and (=> (= (ControlFlow 0 314) 312) anon87_Then_correct) (=> (= (ControlFlow 0 314) 313) anon87_Else_correct)))))
(let ((anon86_Else_correct  (=> (not (and (<= (LitInt 0) |k#0_0@0|) (< |k#0_0@0| |kn#0@1|))) (and (=> (= (ControlFlow 0 311) 305) anon88_Then_correct) (=> (= (ControlFlow 0 311) 310) anon88_Else_correct)))))
(let ((anon85_Else_correct  (=> (< |k#0_0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 316) 314) anon86_Then_correct) (=> (= (ControlFlow 0 316) 311) anon86_Else_correct)))))
(let ((anon85_Then_correct  (=> (<= (LitInt 0) |k#0_0@0|) (and (=> (= (ControlFlow 0 315) 314) anon86_Then_correct) (=> (= (ControlFlow 0 315) 311) anon86_Else_correct)))))
(let ((anon84_Then_correct  (and (=> (= (ControlFlow 0 317) 315) anon85_Then_correct) (=> (= (ControlFlow 0 317) 316) anon85_Else_correct))))
(let ((anon84_Else_correct true))
(let ((anon23_correct  (=> (and (<= (LitInt 0) |ln#0_0@2|) (<= |ln#0_0@2| |n#0@@0|)) (and (=> (= (ControlFlow 0 318) 317) anon84_Then_correct) (=> (= (ControlFlow 0 318) 246) anon84_Else_correct)))))
(let ((anon83_Else_correct  (=> (and (< |ln#0_0@2| (LitInt 0)) (= (ControlFlow 0 320) 318)) anon23_correct)))
(let ((anon83_Then_correct  (=> (and (<= (LitInt 0) |ln#0_0@2|) (= (ControlFlow 0 319) 318)) anon23_correct)))
(let ((anon82_Then_correct  (=> (not |$w$loop#0_0@1|) (and (=> (= (ControlFlow 0 321) 319) anon83_Then_correct) (=> (= (ControlFlow 0 321) 320) anon83_Else_correct)))))
(let ((anon105_Else_correct true))
(let ((anon60_correct  (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (and (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|))) (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (and (and (and (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (and (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|))) (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|))))))) (and (=> (= (ControlFlow 0 47) (- 0 77)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|))) (and (=> (= (ControlFlow 0 47) (- 0 76)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|))) (and (=> (= (ControlFlow 0 47) (- 0 75)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|))) (=> (and (and (and (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|))) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@5)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 47) (- 0 74)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 47) (- 0 73)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 47) (- 0 72)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0_12| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_12| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_12|)) (or (not (= |n#0_0_0_0_0_12| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_12|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_12|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_12|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 47) (- 0 71)) (<= (LitInt 0) |kn#0@1|)) (=> (and (and (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (<= (LitInt 0) |kn#0@1|)) (and (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|))) (and (=> (= (ControlFlow 0 47) (- 0 70)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (=> (and (= |x##0_0_0_0_0_0@3| (+ 1 |ln#0_0@2|)) (= call0formal@this@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|))) (and (=> (= (ControlFlow 0 47) (- 0 69)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 call0formal@this@0 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 call0formal@this@0 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType call0formal@this@0))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@5 call0formal@this@0 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 call0formal@this@0 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType call0formal@this@0)))) (and (=> (= (ControlFlow 0 47) (- 0 68)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 call0formal@this@0 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 call0formal@this@0 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@5 call0formal@this@0 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 call0formal@this@0 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null)))) (and (=> (= (ControlFlow 0 47) (- 0 67)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 call0formal@this@0 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 call0formal@this@0 |S#0@@4|) (forall ((|n#4| T@U) ) (!  (=> ($Is refType |n#4| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4|)) (or (not (= |n#4| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4|) _module.Node.next)))
))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@5 call0formal@this@0 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 call0formal@this@0 |S#0@@4|) (forall ((|n#4@@0| T@U) ) (!  (=> ($Is refType |n#4@@0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4@@0|)) (or (not (= |n#4@@0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4@@0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4@@0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4@@0|) _module.Node.next)))
)))) (and (=> (= (ControlFlow 0 47) (- 0 66)) (<= (LitInt 0) |x##0_0_0_0_0_0@3|)) (=> (<= (LitInt 0) |x##0_0_0_0_0_0@3|) (and (=> (= (ControlFlow 0 47) (- 0 65)) (<= (LitInt 0) |nn#0_0_0_0_0@3|)) (=> (<= (LitInt 0) |nn#0_0_0_0_0@3|) (=> (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (=> (and (and (and (|_module.Node.Nexxxt#canCall| $Heap@7 call0formal@this@0 |x##0_0_0_0_0_0@3| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@7 call0formal@this@0 |x##0_0_0_0_0_0@3| |S#0@@4|) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@7 call0formal@this@0 |x##0_0_0_0_0_0@3| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 call0formal@this@0 |x##0_0_0_0_0_0@3| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@7 call0formal@this@0 (+ |x##0_0_0_0_0_0@3| |nn#0_0_0_0_0@3|) |S#0@@4|)))) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@7 call0formal@this@0 |x##0_0_0_0_0_0@3| |S#0@@4|) null)) (not true)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 call0formal@this@0 |x##0_0_0_0_0_0@3| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 call0formal@this@0 (+ |x##0_0_0_0_0_0@3| |nn#0_0_0_0_0@3|) |S#0@@4|)))) (and (and (= $Heap@5 $Heap@7) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@7)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@7) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@7)))) (and (=> (= (ControlFlow 0 47) (- 0 64)) (=> (|_module.Node.IsClosed#canCall| $Heap@7 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@7 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 47) (- 0 63)) (=> (|_module.Node.IsClosed#canCall| $Heap@7 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@7 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 47) (- 0 62)) (=> (|_module.Node.IsClosed#canCall| $Heap@7 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@7 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0_13| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_13| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_13|)) (or (not (= |n#0_0_0_0_0_13| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#0_0_0_0_0_13|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#0_0_0_0_0_13|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#0_0_0_0_0_13|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 47) (- 0 61)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@7 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 47) (- 0 60)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> (and (and ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@7) (= |##k#0_0_0_0_0_14@3| (+ (+ |nn#0_0_0_0_0@3| 1) |ln#0_0@2|))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_0_0_14@3|) TInt $Heap@7) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@7))) (and (=> (= (ControlFlow 0 47) (- 0 59)) (=> (|_module.Node.IsClosed#canCall| $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 47) (- 0 58)) (=> (|_module.Node.IsClosed#canCall| $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 47) (- 0 57)) (=> (|_module.Node.IsClosed#canCall| $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_0_0_14| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_14| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_14|)) (or (not (= |n#0_0_0_0_0_14| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#0_0_0_0_0_14|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#0_0_0_0_0_14|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#0_0_0_0_0_14|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 47) (- 0 56)) (<= (LitInt 0) |##k#0_0_0_0_0_14@3|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) (+ (+ |nn#0_0_0_0_0@3| 1) |ln#0_0@2|) |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@7)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@7) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@7))) (and (=> (= (ControlFlow 0 47) (- 0 55)) (=> (|_module.Node.IsClosed#canCall| $Heap@7 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@7 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 47) (- 0 54)) (=> (|_module.Node.IsClosed#canCall| $Heap@7 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@7 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 47) (- 0 53)) (=> (|_module.Node.IsClosed#canCall| $Heap@7 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@7 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0_15| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_15| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_15|)) (or (not (= |n#0_0_0_0_0_15| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#0_0_0_0_0_15|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#0_0_0_0_0_15|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |n#0_0_0_0_0_15|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 47) (- 0 52)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@7 this@@4 |kn#0@1| |S#0@@4|) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@7 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) (+ (+ |nn#0_0_0_0_0@3| 1) |ln#0_0@2|) |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@7 this@@4 |kn#0@1| |S#0@@4|)) (and (=> (= (ControlFlow 0 47) (- 0 51)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) (+ (+ |nn#0_0_0_0_0@3| 1) |ln#0_0@2|) |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 this@@4 |kn#0@1| |S#0@@4|))) (=> (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) (+ (+ |nn#0_0_0_0_0@3| 1) |ln#0_0@2|) |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|)) (= |nn#0_0_0_0_0@4| (+ (+ |nn#0_0_0_0_0@3| 1) |ln#0_0@2|))) (and (=> (= (ControlFlow 0 47) (- 0 50)) (or (<= 0 |$decr$loop#0_0_0_0_00@3|) (= (- |n#0@@0| |nn#0_0_0_0_0@4|) |$decr$loop#0_0_0_0_00@3|))) (=> (or (<= 0 |$decr$loop#0_0_0_0_00@3|) (= (- |n#0@@0| |nn#0_0_0_0_0@4|) |$decr$loop#0_0_0_0_00@3|)) (and (=> (= (ControlFlow 0 47) (- 0 49)) (< (- |n#0@@0| |nn#0_0_0_0_0@4|) |$decr$loop#0_0_0_0_00@3|)) (=> (< (- |n#0@@0| |nn#0_0_0_0_0@4|) |$decr$loop#0_0_0_0_00@3|) (=> (=> (<= (LitInt 0) |nn#0_0_0_0_0@4|) (and (and (|_module.Node.Nexxxt#canCall| $Heap@7 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@7 (_module.Node.Nexxxt ($LS $LZ) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@4| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@7 this@@4 |kn#0@1| |S#0@@4|))) (and (=> (= (ControlFlow 0 47) (- 0 48)) (=> |$w$loop#0_0_0_0_0@2| (<= (LitInt 0) |nn#0_0_0_0_0@4|))) (=> (=> |$w$loop#0_0_0_0_0@2| (<= (LitInt 0) |nn#0_0_0_0_0@4|)) (=> (= (ControlFlow 0 47) (- 0 46)) (=> |$w$loop#0_0_0_0_0@2| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@4| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@7 this@@4 |kn#0@1| |S#0@@4|))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon104_Else_correct  (=> (and (not (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|)))) (= (ControlFlow 0 102) 47)) anon60_correct)))
(let ((anon104_Then_correct  (=> (and (and (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|))) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@5)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 78) (- 0 101)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 78) (- 0 100)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 78) (- 0 99)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0_7| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_7| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_7|)) (or (not (= |n#0_0_0_0_0_7| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_7|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_7|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_7|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 78) (- 0 98)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 78) (- 0 97)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> (and (and ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@5) (= |##k#0_0_0_0_0_8@3| (+ 1 |ln#0_0@2|))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_0_0_8@3|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 78) (- 0 96)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 78) (- 0 95)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 78) (- 0 94)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_0_0_8| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_8| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_8|)) (or (not (= |n#0_0_0_0_0_8| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_8|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_8|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_8|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 78) (- 0 93)) (<= (LitInt 0) |##k#0_0_0_0_0_8@3|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@5)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 78) (- 0 92)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 78) (- 0 91)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 78) (- 0 90)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0_9| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_9| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_9|)) (or (not (= |n#0_0_0_0_0_9| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_9|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_9|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_9|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 78) (- 0 89)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 78) (- 0 88)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@5) (=> (and ($IsAlloc intType (int_2_U |nn#0_0_0_0_0@3|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5)) (and (=> (= (ControlFlow 0 78) (- 0 87)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 78) (- 0 86)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 78) (- 0 85)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_0_0_10| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_10| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_10|)) (or (not (= |n#0_0_0_0_0_10| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_10|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_10|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_10|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 78) (- 0 84)) (<= (LitInt 0) |nn#0_0_0_0_0@3|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (and (=> (= (ControlFlow 0 78) (- 0 83)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) null)) (not true))) (=> (and (and ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) Tclass._module.Node? $Heap@5) (= |##k#0_0_0_0_0_11@3| (+ 1 |ln#0_0@2|))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_0_0_11@3|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 78) (- 0 82)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 78) (- 0 81)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 78) (- 0 80)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_0_0_11| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_11| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_11|)) (or (not (= |n#0_0_0_0_0_11| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_11|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_11|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_11|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 78) (- 0 79)) (<= (LitInt 0) |##k#0_0_0_0_0_11@3|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|) (= (ControlFlow 0 78) 47)) anon60_correct)))))))))))))))))))))))))))))))))))
(let ((anon103_Else_correct  (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|))) (not true)) (and (=> (= (ControlFlow 0 122) 78) anon104_Then_correct) (=> (= (ControlFlow 0 122) 102) anon104_Else_correct)))))
(let ((anon103_Then_correct  (=> (and (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@5)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 103) (- 0 121)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 103) (- 0 120)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 103) (- 0 119)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0_3| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_3| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_3|)) (or (not (= |n#0_0_0_0_0_3| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_3|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_3|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_3|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 103) (- 0 118)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 103) (- 0 117)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@5) (=> (and ($IsAlloc intType (int_2_U |nn#0_0_0_0_0@3|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5)) (and (=> (= (ControlFlow 0 103) (- 0 116)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 103) (- 0 115)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 103) (- 0 114)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_0_0_4| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_4| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_4|)) (or (not (= |n#0_0_0_0_0_4| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_4|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_4|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_4|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 103) (- 0 113)) (<= (LitInt 0) |nn#0_0_0_0_0@3|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@5)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 103) (- 0 112)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 103) (- 0 111)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 103) (- 0 110)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0_5| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_5| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_5|)) (or (not (= |n#0_0_0_0_0_5| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_5|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_5|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_5|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 103) (- 0 109)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 103) (- 0 108)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> (and (and ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@5) (= |##k#0_0_0_0_0_6@3| (+ 1 |ln#0_0@2|))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_0_0_6@3|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 103) (- 0 107)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 103) (- 0 106)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 103) (- 0 105)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_0_0_6| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_6| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_6|)) (or (not (= |n#0_0_0_0_0_6| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_6|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_6|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_6|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 103) (- 0 104)) (<= (LitInt 0) |##k#0_0_0_0_0_6@3|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|) (and (=> (= (ControlFlow 0 103) 78) anon104_Then_correct) (=> (= (ControlFlow 0 103) 102) anon104_Else_correct))))))))))))))))))))))))))))))
(let ((anon102_Else_correct  (=> (< |nn#0_0_0_0_0@3| |n#0@@0|) (=> (and (and (= |$decr$loop#0_0_0_0_00@3| (- |n#0@@0| |nn#0_0_0_0_0@3|)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@5)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 123) (- 0 136)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 123) (- 0 135)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 123) (- 0 134)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0_0| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_0|)) (or (not (= |n#0_0_0_0_0_0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_0|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 123) (- 0 133)) (<= (LitInt 0) |kn#0@1|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@5)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 123) (- 0 132)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 123) (- 0 131)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 123) (- 0 130)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0_1| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_1| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_1|)) (or (not (= |n#0_0_0_0_0_1| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_1|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_1|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_1|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 123) (- 0 129)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 123) (- 0 128)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@5) (=> (and ($IsAlloc intType (int_2_U |nn#0_0_0_0_0@3|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5)) (and (=> (= (ControlFlow 0 123) (- 0 127)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 123) (- 0 126)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 123) (- 0 125)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_0_0_2| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0_2| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0_2|)) (or (not (= |n#0_0_0_0_0_2| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_2|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_2|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0_2|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 123) (- 0 124)) (<= (LitInt 0) |nn#0_0_0_0_0@3|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (and (=> (= (ControlFlow 0 123) 103) anon103_Then_correct) (=> (= (ControlFlow 0 123) 122) anon103_Else_correct))))))))))))))))))))))))
(let ((anon101_Then_correct  (=> (not |$w$loop#0_0_0_0_0@2|) (=> (and (and (<= (LitInt 0) |nn#0_0_0_0_0@3|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@5)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 33) (- 0 45)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 33) (- 0 44)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 33) (- 0 43)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_0| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_0|)) (or (not (= |n#0_0_0_0_0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_0|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 33) (- 0 42)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 33) (- 0 41)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@5) (=> (and ($IsAlloc intType (int_2_U |nn#0_0_0_0_0@3|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5)) (and (=> (= (ControlFlow 0 33) (- 0 40)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 33) (- 0 39)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 33) (- 0 38)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_0_1| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_1| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_1|)) (or (not (= |n#0_0_0_0_1| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_1|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_1|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_1|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 33) (- 0 37)) (<= (LitInt 0) |nn#0_0_0_0_0@3|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@5)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@5) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@5))) (and (=> (= (ControlFlow 0 33) (- 0 36)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 33) (- 0 35)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 33) (- 0 34)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_2| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_2| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_2|)) (or (not (= |n#0_0_0_0_2| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_2|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_2|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#0_0_0_0_2|) _module.Node.next)))
))))) (=> (= (ControlFlow 0 33) (- 0 32)) (<= (LitInt 0) |kn#0@1|))))))))))))))))))))))
(let ((anon100_LoopDone_correct true))
(let ((anon68_correct  (=> (= |ln#0_0@3| (+ |ln#0_0@2| 1)) (and (=> (= (ControlFlow 0 10) (- 0 15)) (or (<= 0 |$decr$loop#0_00@2|) (= (- |n#0@@0| |ln#0_0@3|) |$decr$loop#0_00@2|))) (=> (or (<= 0 |$decr$loop#0_00@2|) (= (- |n#0@@0| |ln#0_0@3|) |$decr$loop#0_00@2|)) (and (=> (= (ControlFlow 0 10) (- 0 14)) (< (- |n#0@@0| |ln#0_0@3|) |$decr$loop#0_00@2|)) (=> (< (- |n#0@@0| |ln#0_0@3|) |$decr$loop#0_00@2|) (=> (=> (and (<= (LitInt 0) |ln#0_0@3|) (<= |ln#0_0@3| |n#0@@0|)) (and (forall ((|k#0_1@@1| Int) (|l#0_1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |k#0_1@@1|) (< |k#0_1@@1| |kn#0@1|)) (=> (and (<= (LitInt 0) |l#0_1@@1|) (< |l#0_1@@1| |n#0@@0|)) (and (|_module.Node.Nexxxt#canCall| $Heap@9 this@@4 |k#0_1@@1| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |k#0_1@@1| |S#0@@4|) null)) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@9 this@@4 |k#0_1@@1| |S#0@@4|) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |k#0_1@@1| |S#0@@4|)) _module.Node.next)) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@9 this@@4 |k#0_1@@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |k#0_1@@1| |S#0@@4|)) _module.Node.next)) |l#0_1@@1| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@9 this@@4 |k#0_1@@1| |S#0@@4|))))))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |k#0_1@@1| |S#0@@4|)) _module.Node.next)) |l#0_1@@1| |S#0@@4|))
)) (=> (forall ((|k#0_1@@2| Int) (|l#0_1@@2| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#0_1@@2|) (< |k#0_1@@2| |kn#0@1|)) (and (<= (LitInt 0) |l#0_1@@2|) (< |l#0_1@@2| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |k#0_1@@2| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |k#0_1@@2| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |k#0_1@@2| |S#0@@4|)) _module.Node.next)) |l#0_1@@2| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |k#0_1@@2| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |k#0_1@@2| |S#0@@4|)) _module.Node.next)) |l#0_1@@2| |S#0@@4|))
)) (forall ((|l#0_3| Int) ) (!  (=> (and (<= (LitInt 0) |l#0_3|) (< |l#0_3| |ln#0_0@3|)) (and (|_module.Node.Nexxxt#canCall| $Heap@9 this@@4 |kn#0@1| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@9 this@@4 |kn#0@1| |S#0@@4|) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@9 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@9 this@@4 |kn#0@1| |S#0@@4|)))))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS $LZ) $Heap@9 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3| |S#0@@4|))
))))) (and (=> (= (ControlFlow 0 10) (- 0 13)) (=> |$w$loop#0_0@1| (<= (LitInt 0) |ln#0_0@3|))) (=> (=> |$w$loop#0_0@1| (<= (LitInt 0) |ln#0_0@3|)) (and (=> (= (ControlFlow 0 10) (- 0 12)) (=> |$w$loop#0_0@1| (<= |ln#0_0@3| |n#0@@0|))) (=> (=> |$w$loop#0_0@1| (<= |ln#0_0@3| |n#0@@0|)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (=> |$w$loop#0_0@1| (forall ((|k#0_1@@3| Int) (|l#0_1@@3| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#0_1@@3|) (< |k#0_1@@3| |kn#0@1|)) (and (<= (LitInt 0) |l#0_1@@3|) (< |l#0_1@@3| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@3| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@3| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@3| |S#0@@4|)) _module.Node.next)) |l#0_1@@3| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@3| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@3| |S#0@@4|)) _module.Node.next)) |l#0_1@@3| |S#0@@4|))
)))) (=> (=> |$w$loop#0_0@1| (forall ((|k#0_1@@4| Int) (|l#0_1@@4| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#0_1@@4|) (< |k#0_1@@4| |kn#0@1|)) (and (<= (LitInt 0) |l#0_1@@4|) (< |l#0_1@@4| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@4| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@4| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@4| |S#0@@4|)) _module.Node.next)) |l#0_1@@4| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@4| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |k#0_1@@4| |S#0@@4|)) _module.Node.next)) |l#0_1@@4| |S#0@@4|))
))) (=> (= (ControlFlow 0 10) (- 0 9)) (=> |$w$loop#0_0@1| (forall ((|l#0_3@@0| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |l#0_3@@0|) (< |l#0_3@@0| |ln#0_0@3|)) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |kn#0@1| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@9 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@0| |S#0@@4|))
))))))))))))))))))
(let ((anon66_correct  (=> (and (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@8) (= |##k#0_0_0_10@2| (+ |kn#0@1| 1))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_10@2|) TInt $Heap@8) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@8))) (and (=> (= (ControlFlow 0 17) (- 0 29)) (=> (|_module.Node.IsClosed#canCall| $Heap@8 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@8 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 17) (- 0 28)) (=> (|_module.Node.IsClosed#canCall| $Heap@8 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@8 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 17) (- 0 27)) (=> (|_module.Node.IsClosed#canCall| $Heap@8 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@8 this@@4 |S#0@@4|) (forall ((|n#0_0_0_10| T@U) ) (!  (=> ($Is refType |n#0_0_0_10| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_10|)) (or (not (= |n#0_0_0_10| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |n#0_0_0_10|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |n#0_0_0_10|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |n#0_0_0_10|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 17) (- 0 26)) (<= (LitInt 0) |##k#0_0_0_10@2|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|) (and (=> (= (ControlFlow 0 17) (- 0 25)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|) null)) (not true))) (=> ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|)) Tclass._module.Node? $Heap@8) (=> (and ($IsAlloc intType (int_2_U |ln#0_0@2|) TInt $Heap@8) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@8)) (and (=> (= (ControlFlow 0 17) (- 0 24)) (=> (|_module.Node.IsClosed#canCall| $Heap@8 (_module.Node.Nexxxt ($LS $LZ) $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|) |S#0@@4|) (_module.Node.IsClosed $Heap@8 (_module.Node.Nexxxt ($LS $LZ) $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|) |S#0@@4|))) (and (=> (= (ControlFlow 0 17) (- 0 23)) (<= (LitInt 0) |ln#0_0@2|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@8 (_module.Node.Nexxxt ($LS $LZ) $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|) |ln#0_0@2| |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@8)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@8) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@8))) (and (=> (= (ControlFlow 0 17) (- 0 22)) (=> (|_module.Node.IsClosed#canCall| $Heap@8 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@8 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 17) (- 0 21)) (=> (|_module.Node.IsClosed#canCall| $Heap@8 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@8 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 17) (- 0 20)) (=> (|_module.Node.IsClosed#canCall| $Heap@8 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@8 this@@4 |S#0@@4|) (forall ((|n#0_0_0_11| T@U) ) (!  (=> ($Is refType |n#0_0_0_11| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_11|)) (or (not (= |n#0_0_0_11| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |n#0_0_0_11|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |n#0_0_0_11|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |n#0_0_0_11|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 17) (- 0 19)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@8 this@@4 |kn#0@1| |S#0@@4|) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@8 (_module.Node.Nexxxt ($LS $LZ) $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|) |ln#0_0@2| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@8 this@@4 |kn#0@1| |S#0@@4|)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@8 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|) |ln#0_0@2| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@8 this@@4 |kn#0@1| |S#0@@4|))) (not true))) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@8 (_module.Node.Nexxxt ($LS $LZ) $Heap@8 this@@4 (+ |kn#0@1| 1) |S#0@@4|) |ln#0_0@2| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@8 this@@4 |kn#0@1| |S#0@@4|))) (not true)) (=> (and (= $Heap@9 $Heap@8) (= (ControlFlow 0 17) 10)) anon68_correct)))))))))))))))))))))))
(let ((anon64_correct  (=> (forall ((|j#0_0_0_0_1| Int) ) (!  (=> (<= |n#0@@0| |j#0_0_0_0_1|) (|_module.Node.Nexxxt#canCall| $Heap@6 this@@4 |j#0_0_0_0_1| |S#0@@4|))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |j#0_0_0_0_1| |S#0@@4|))
)) (and (=> (= (ControlFlow 0 138) (- 0 140)) (forall ((|j#0_0_0_0_1@@0| Int) ) (!  (=> (and (forall ((|j$ih#0_0_0_0_0#0_0_0_0_0| Int) ) (!  (=> (and (<= 0 |j$ih#0_0_0_0_0#0_0_0_0_0|) (< |j$ih#0_0_0_0_0#0_0_0_0_0| |j#0_0_0_0_1@@0|)) (=> (<= |n#0@@0| |j$ih#0_0_0_0_0#0_0_0_0_0|) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |j$ih#0_0_0_0_0#0_0_0_0_0| |S#0@@4|) null)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |j$ih#0_0_0_0_0#0_0_0_0_0| |S#0@@4|))
)) true) (=> (<= |n#0@@0| |j#0_0_0_0_1@@0|) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@6 this@@4 |j#0_0_0_0_1@@0| |S#0@@4|) null)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@6 this@@4 |j#0_0_0_0_1@@0| |S#0@@4|))
))) (=> (forall ((|j#0_0_0_0_1@@1| Int) ) (!  (=> (<= |n#0@@0| |j#0_0_0_0_1@@1|) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |j#0_0_0_0_1@@1| |S#0@@4|) null))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |j#0_0_0_0_1@@1| |S#0@@4|))
)) (and (=> (= (ControlFlow 0 138) (- 0 139)) (U_2_bool (Lit boolType (bool_2_U false)))) (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (and (= $Heap@8 $Heap@6) (= (ControlFlow 0 138) 17)) anon66_correct))))))))
(let ((anon106_Else_correct  (=> (and (< |j#0_0_0_0_0@2| |n#0@@0|) (= (ControlFlow 0 146) 138)) anon64_correct)))
(let ((anon106_Then_correct  (=> (and (and (<= |n#0@@0| |j#0_0_0_0_0@2|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@6)) (and ($IsAlloc intType (int_2_U |j#0_0_0_0_0@2|) TInt $Heap@6) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@6))) (and (=> (= (ControlFlow 0 141) (- 0 145)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 141) (- 0 144)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 141) (- 0 143)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_6| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_6| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_6|)) (or (not (= |n#0_0_0_0_6| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_6|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_6|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_6|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 141) (- 0 142)) (<= (LitInt 0) |j#0_0_0_0_0@2|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@6 this@@4 |j#0_0_0_0_0@2| |S#0@@4|) (= (ControlFlow 0 141) 138)) anon64_correct))))))))
(let ((anon105_Then_correct  (and (=> (= (ControlFlow 0 147) 141) anon106_Then_correct) (=> (= (ControlFlow 0 147) 146) anon106_Else_correct))))
(let ((anon102_Then_correct  (=> (<= |n#0@@0| |nn#0_0_0_0_0@3|) (and (=> (= (ControlFlow 0 148) (- 0 167)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4)))) (and (=> (= (ControlFlow 0 148) (- 0 166)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null)))) (and (=> (= (ControlFlow 0 148) (- 0 165)) (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#4@@1| T@U) ) (!  (=> ($Is refType |n#4@@1| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4@@1|)) (or (not (= |n#4@@1| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4@@1|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4@@1|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4@@1|) _module.Node.next)))
))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@5 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@5 this@@4 |S#0@@4|) (forall ((|n#4@@2| T@U) ) (!  (=> ($Is refType |n#4@@2| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4@@2|)) (or (not (= |n#4@@2| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4@@2|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4@@2|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |n#4@@2|) _module.Node.next)))
)))) (and (=> (= (ControlFlow 0 148) (- 0 164)) (<= (LitInt 0) |kn#0@1|)) (=> (<= (LitInt 0) |kn#0@1|) (and (=> (= (ControlFlow 0 148) (- 0 163)) (<= (LitInt 0) |nn#0_0_0_0_0@3|)) (=> (<= (LitInt 0) |nn#0_0_0_0_0@3|) (=> (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (=> (and (and (and (|_module.Node.Nexxxt#canCall| $Heap@6 this@@4 |kn#0@1| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@6 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@6 this@@4 (+ |kn#0@1| |nn#0_0_0_0_0@3|) |S#0@@4|)))) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@6 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@6 this@@4 (+ |kn#0@1| |nn#0_0_0_0_0@3|) |S#0@@4|)))) (and (and (= $Heap@5 $Heap@6) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@6)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@6) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@6)))) (and (=> (= (ControlFlow 0 148) (- 0 162)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 148) (- 0 161)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 148) (- 0 160)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_3| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_3| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_3|)) (or (not (= |n#0_0_0_0_3| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_3|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_3|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_3|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 148) (- 0 159)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@6 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 148) (- 0 158)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@6) (=> (and ($IsAlloc intType (int_2_U |nn#0_0_0_0_0@3|) TInt $Heap@6) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@6)) (and (=> (= (ControlFlow 0 148) (- 0 157)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@6 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 148) (- 0 156)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 148) (- 0 155)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_0_4| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_4| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_4|)) (or (not (= |n#0_0_0_0_4| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_4|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_4|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_4|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 148) (- 0 154)) (<= (LitInt 0) |nn#0_0_0_0_0@3|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (=> (and (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@6) (= |##k#0_0_0_0_5@2| (+ |kn#0@1| |nn#0_0_0_0_0@3|))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_0_5@2|) TInt $Heap@6) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@6))) (and (=> (= (ControlFlow 0 148) (- 0 153)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 148) (- 0 152)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 148) (- 0 151)) (=> (|_module.Node.IsClosed#canCall| $Heap@6 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@6 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0_5| T@U) ) (!  (=> ($Is refType |n#0_0_0_0_5| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0_5|)) (or (not (= |n#0_0_0_0_5| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_5|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_5|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |n#0_0_0_0_5|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 148) (- 0 150)) (<= (LitInt 0) |##k#0_0_0_0_5@2|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@6 this@@4 (+ |kn#0@1| |nn#0_0_0_0_0@3|) |S#0@@4|) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@6 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@6 this@@4 (+ |kn#0@1| |nn#0_0_0_0_0@3|) |S#0@@4|)) (and (=> (= (ControlFlow 0 148) (- 0 149)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@6 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@6 this@@4 (+ |kn#0@1| |nn#0_0_0_0_0@3|) |S#0@@4|))) (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@6 (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@6 this@@4 (+ |kn#0@1| |nn#0_0_0_0_0@3|) |S#0@@4|)) (and (=> (= (ControlFlow 0 148) 147) anon105_Then_correct) (=> (= (ControlFlow 0 148) 137) anon105_Else_correct)))))))))))))))))))))))))))))))))))))))
(let ((anon101_Else_correct  (=> |$w$loop#0_0_0_0_0@2| (and (=> (= (ControlFlow 0 168) 148) anon102_Then_correct) (=> (= (ControlFlow 0 168) 123) anon102_Else_correct)))))
(let ((anon100_LoopBody_correct  (and (=> (= (ControlFlow 0 169) 33) anon101_Then_correct) (=> (= (ControlFlow 0 169) 168) anon101_Else_correct))))
(let ((anon100_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not false) (<= 0 |kn#0@1|)) (<= 0 |$decr_init$loop#00@0|)) |$w$loop#0@0|) (<= 0 |ln#0_0@2|)) (<= 1 |$decr_init$loop#0_00@1|)) |$w$loop#0_0@1|) (<= 0 |kn#0@1|)) (<= 1 |##k#0_0_0_0@2|)) (<= 1 |x##0_0_0_0@2|)) (<= 0 |ln#0_0@2|)) (<= 0 |kn#0@1|)) (<= 0 |ln#0_0@2|)) (<= 1 |##k#0_0_0_3@2|)) (<= 0 |kn#0@1|)) (<= 1 |y##0_0_0_1@2|)) (<= 1 |##k#0_0_0_4@2|)) (<= 0 |kn#0@1|)) (<= 1 |##k#0_0_0_6@2|)) (<= 0 |kn#0@1|)) (<= 1 |##k#0_0_0_8@2|)) (<= 0 |kn#0@1|)) (<= 1 |nn#0_0_0_0_0@3|)) (and (=> |$w$loop#0_0_0_0_0@2| (<= (LitInt 0) |nn#0_0_0_0_0@3|)) (=> |$w$loop#0_0_0_0_0@2| (and (and (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@5 (_module.Node.Nexxxt ($LS $LZ) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@5 this@@4 |kn#0@1| |S#0@@4|))))) (and (and (=> |$w$loop#0_0_0_0_0@2| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@3| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@5 this@@4 |kn#0@1| |S#0@@4|))) (= $Heap@4 $Heap@5)) (and (forall (($o@@4 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@4) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@4) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@4) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@4 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@4) $f@@0))
)) (<= (- |n#0@@0| |nn#0_0_0_0_0@3|) |$decr_init$loop#0_0_0_0_00@2|)))) (and (=> (= (ControlFlow 0 170) 31) anon100_LoopDone_correct) (=> (= (ControlFlow 0 170) 169) anon100_LoopBody_correct))))))
(let ((anon99_Then_correct  (=> (= (_module.Node.Nexxxt ($LS $LZ) $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|)) (=> (and (= |nn#0_0_0_0_0@2| (+ 1 |ln#0_0@2|)) (= |$decr_init$loop#0_0_0_0_00@2| (- |n#0@@0| |nn#0_0_0_0_0@2|))) (and (=> (= (ControlFlow 0 171) (- 0 173)) (=> |$w$loop#0_0_0_0_0@2| (<= (LitInt 0) |nn#0_0_0_0_0@2|))) (=> (=> |$w$loop#0_0_0_0_0@2| (<= (LitInt 0) |nn#0_0_0_0_0@2|)) (and (=> (= (ControlFlow 0 171) (- 0 172)) (=> |$w$loop#0_0_0_0_0@2| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@2| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |kn#0@1| |S#0@@4|)))) (=> (=> |$w$loop#0_0_0_0_0@2| (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |nn#0_0_0_0_0@2| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |kn#0@1| |S#0@@4|))) (=> (= (ControlFlow 0 171) 170) anon100_LoopHead_correct)))))))))
(let ((anon99_Else_correct  (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|))) (not true)) (=> (and (= $Heap@8 $Heap@4) (= (ControlFlow 0 30) 17)) anon66_correct))))
(let ((anon98_Then_correct  (=> (and (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true))) (=> (and (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2) (= |##k#0_0_0_0@2| (+ |kn#0@1| 1))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_0@2|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 174) (- 0 231)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 174) (- 0 230)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 229)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_0_0_0| T@U) ) (!  (=> ($Is refType |n#0_0_0_0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_0|)) (or (not (= |n#0_0_0_0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0_0_0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0_0_0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0_0_0|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 228)) (<= (LitInt 0) |##k#0_0_0_0@2|)) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 (+ |kn#0@1| 1) |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 (+ |kn#0@1| 1) |S#0@@4|)) (and (=> (= (ControlFlow 0 174) (- 0 227)) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 (+ |kn#0@1| 1) |S#0@@4|) null)) (not true))) (=> (and (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 (+ |kn#0@1| 1) |S#0@@4|) null)) (not true)) (= |x##0_0_0_0@2| (+ |kn#0@1| 1))) (and (=> (= (ControlFlow 0 174) (- 0 226)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4)))) (and (=> (= (ControlFlow 0 174) (- 0 225)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null)))) (and (=> (= (ControlFlow 0 174) (- 0 224)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#4@@3| T@U) ) (!  (=> ($Is refType |n#4@@3| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4@@3|)) (or (not (= |n#4@@3| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#4@@3|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#4@@3|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#4@@3|) _module.Node.next)))
))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#4@@4| T@U) ) (!  (=> ($Is refType |n#4@@4| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4@@4|)) (or (not (= |n#4@@4| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#4@@4|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#4@@4|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#4@@4|) _module.Node.next)))
)))) (and (=> (= (ControlFlow 0 174) (- 0 223)) (<= (LitInt 0) |x##0_0_0_0@2|)) (=> (<= (LitInt 0) |x##0_0_0_0@2|) (and (=> (= (ControlFlow 0 174) (- 0 222)) (<= (LitInt 0) |ln#0_0@2|)) (=> (<= (LitInt 0) |ln#0_0@2|) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |x##0_0_0_0@2| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |x##0_0_0_0@2| |S#0@@4|) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |x##0_0_0_0@2| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |x##0_0_0_0@2| |S#0@@4|) |ln#0_0@2| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 (+ |x##0_0_0_0@2| |ln#0_0@2|) |S#0@@4|)))) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |x##0_0_0_0@2| |S#0@@4|) null)) (not true)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |x##0_0_0_0@2| |S#0@@4|) |ln#0_0@2| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 (+ |x##0_0_0_0@2| |ln#0_0@2|) |S#0@@4|)))) (and (and (= $Heap@2 $Heap@3) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3)))) (and (=> (= (ControlFlow 0 174) (- 0 221)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 174) (- 0 220)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 219)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#0_0_0_1| T@U) ) (!  (=> ($Is refType |n#0_0_0_1| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_1|)) (or (not (= |n#0_0_0_1| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#0_0_0_1|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#0_0_0_1|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#0_0_0_1|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 218)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 174) (- 0 217)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (and (=> (= (ControlFlow 0 174) (- 0 216)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true))) (=> ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next) Tclass._module.Node? $Heap@3) (=> (and ($IsAlloc intType (int_2_U |ln#0_0@2|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3)) (and (=> (= (ControlFlow 0 174) (- 0 215)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next))))) (and (=> (= (ControlFlow 0 174) (- 0 214)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 213)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |S#0@@4|) (forall ((|n#0_0_0_2| T@U) ) (!  (=> ($Is refType |n#0_0_0_2| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_2|)) (or (not (= |n#0_0_0_2| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#0_0_0_2|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#0_0_0_2|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#0_0_0_2|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 212)) (<= (LitInt 0) |ln#0_0@2|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |ln#0_0@2| |S#0@@4|) (=> (and (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@3) (= |##k#0_0_0_3@2| (+ (+ |kn#0@1| 1) |ln#0_0@2|))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_3@2|) TInt $Heap@3) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@3))) (and (=> (= (ControlFlow 0 174) (- 0 211)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 174) (- 0 210)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 209)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#0_0_0_3| T@U) ) (!  (=> ($Is refType |n#0_0_0_3| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_3|)) (or (not (= |n#0_0_0_3| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#0_0_0_3|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#0_0_0_3|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#0_0_0_3|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 208)) (<= (LitInt 0) |##k#0_0_0_3@2|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 (+ (+ |kn#0@1| 1) |ln#0_0@2|) |S#0@@4|) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |ln#0_0@2| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@3 this@@4 (+ (+ |kn#0@1| 1) |ln#0_0@2|) |S#0@@4|)) (and (=> (= (ControlFlow 0 174) (- 0 207)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |ln#0_0@2| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@3 this@@4 (+ (+ |kn#0@1| 1) |ln#0_0@2|) |S#0@@4|))) (=> (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@3 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |ln#0_0@2| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@3 this@@4 (+ (+ |kn#0@1| 1) |ln#0_0@2|) |S#0@@4|)) (= |y##0_0_0_1@2| (+ 1 |ln#0_0@2|))) (and (=> (= (ControlFlow 0 174) (- 0 206)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4)))) (and (=> (= (ControlFlow 0 174) (- 0 205)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null)))) (and (=> (= (ControlFlow 0 174) (- 0 204)) (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#4@@5| T@U) ) (!  (=> ($Is refType |n#4@@5| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4@@5|)) (or (not (= |n#4@@5| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#4@@5|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#4@@5|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#4@@5|) _module.Node.next)))
))))) (=> (=> (|_module.Node.IsClosed#canCall| $Heap@3 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@3 this@@4 |S#0@@4|) (forall ((|n#4@@6| T@U) ) (!  (=> ($Is refType |n#4@@6| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#4@@6|)) (or (not (= |n#4@@6| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#4@@6|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#4@@6|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |n#4@@6|) _module.Node.next)))
)))) (and (=> (= (ControlFlow 0 174) (- 0 203)) (<= (LitInt 0) |kn#0@1|)) (=> (<= (LitInt 0) |kn#0@1|) (and (=> (= (ControlFlow 0 174) (- 0 202)) (<= (LitInt 0) |y##0_0_0_1@2|)) (=> (<= (LitInt 0) |y##0_0_0_1@2|) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (and (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |y##0_0_0_1@2| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 (+ |kn#0@1| |y##0_0_0_1@2|) |S#0@@4|)))) (and (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |y##0_0_0_1@2| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 (+ |kn#0@1| |y##0_0_0_1@2|) |S#0@@4|))) (= $Heap@3 $Heap@4))) (and (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@4) (= |##k#0_0_0_4@2| (+ (+ |kn#0@1| 1) |ln#0_0@2|))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_4@2|) TInt $Heap@4) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@4)))) (and (=> (= (ControlFlow 0 174) (- 0 201)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 174) (- 0 200)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 199)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (forall ((|n#0_0_0_4| T@U) ) (!  (=> ($Is refType |n#0_0_0_4| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_4|)) (or (not (= |n#0_0_0_4| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_4|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_4|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_4|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 198)) (<= (LitInt 0) |##k#0_0_0_4@2|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 (+ (+ |kn#0@1| 1) |ln#0_0@2|) |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@4)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@4) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@4))) (and (=> (= (ControlFlow 0 174) (- 0 197)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 174) (- 0 196)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 195)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (forall ((|n#0_0_0_5| T@U) ) (!  (=> ($Is refType |n#0_0_0_5| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_5|)) (or (not (= |n#0_0_0_5| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_5|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_5|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_5|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 194)) (<= (LitInt 0) |kn#0@1|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (and (=> (= (ControlFlow 0 174) (- 0 193)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> (and (and ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@4) (= |##k#0_0_0_6@2| (+ 1 |ln#0_0@2|))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_6@2|) TInt $Heap@4) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@4))) (and (=> (= (ControlFlow 0 174) (- 0 192)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 174) (- 0 191)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 190)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_6| T@U) ) (!  (=> ($Is refType |n#0_0_0_6| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_6|)) (or (not (= |n#0_0_0_6| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_6|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_6|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_6|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 189)) (<= (LitInt 0) |##k#0_0_0_6@2|)) (=> (|_module.Node.Nexxxt#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|) (=> (and (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 (+ (+ |kn#0@1| 1) |ln#0_0@2|) |S#0@@4|) (and (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|))) (and (=> (= (ControlFlow 0 174) (- 0 188)) (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 (+ (+ |kn#0@1| 1) |ln#0_0@2|) |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|))) (=> (and (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 (+ (+ |kn#0@1| 1) |ln#0_0@2|) |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@4)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@4) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@4))) (and (=> (= (ControlFlow 0 174) (- 0 187)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 174) (- 0 186)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 185)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (forall ((|n#0_0_0_7| T@U) ) (!  (=> ($Is refType |n#0_0_0_7| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_7|)) (or (not (= |n#0_0_0_7| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_7|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_7|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_7|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 184)) (<= (LitInt 0) |kn#0@1|)) (=> (and (and (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (<= (LitInt 0) |kn#0@1|)) (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |kn#0@1| |S#0@@4|)) (and (=> (= (ControlFlow 0 174) (- 0 183)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (=> (and (and ($IsAllocBox ($Box refType (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|)) Tclass._module.Node? $Heap@4) (= |##k#0_0_0_8@2| (+ 1 |ln#0_0@2|))) (and ($IsAlloc intType (int_2_U |##k#0_0_0_8@2|) TInt $Heap@4) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@4))) (and (=> (= (ControlFlow 0 174) (- 0 182)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@4 this@@4 |kn#0@1| |S#0@@4|)))))) (and (=> (= (ControlFlow 0 174) (- 0 181)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 180)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (forall ((|n#0_0_0_8| T@U) ) (!  (=> ($Is refType |n#0_0_0_8| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_8|)) (or (not (= |n#0_0_0_8| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_8|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_8|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_8|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 179)) (<= (LitInt 0) |##k#0_0_0_8@2|)) (=> (and (_module.Node.IsClosed $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) |S#0@@4|) (<= (LitInt 0) |##k#0_0_0_8@2|)) (=> (and (and (|_module.Node.Nexxxt#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@4)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@4) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@4))) (and (=> (= (ControlFlow 0 174) (- 0 178)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 174) (- 0 177)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 174) (- 0 176)) (=> (|_module.Node.IsClosed#canCall| $Heap@4 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (forall ((|n#0_0_0_9| T@U) ) (!  (=> ($Is refType |n#0_0_0_9| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0_9|)) (or (not (= |n#0_0_0_9| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_9|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_9|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |n#0_0_0_9|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 174) (- 0 175)) (<= (LitInt 0) |kn#0@1|)) (=> (and (and (and (_module.Node.IsClosed $Heap@4 this@@4 |S#0@@4|) (<= (LitInt 0) |kn#0@1|)) (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |kn#0@1| |S#0@@4|)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@4 (_module.Node.Nexxxt ($LS $LZ) $Heap@4 this@@4 |kn#0@1| |S#0@@4|) (+ 1 |ln#0_0@2|) |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@4 this@@4 |kn#0@1| |S#0@@4|))) (and (=> (= (ControlFlow 0 174) 171) anon99_Then_correct) (=> (= (ControlFlow 0 174) 30) anon99_Else_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon98_Else_correct  (=> (not (and (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true)))) (=> (and (= $Heap@9 $Heap@2) (= (ControlFlow 0 16) 10)) anon68_correct))))
(let ((anon49_correct  (=> (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|))) (and (=> (= (ControlFlow 0 232) 174) anon98_Then_correct) (=> (= (ControlFlow 0 232) 16) anon98_Else_correct)))))
(let ((anon97_Else_correct  (=> (and (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null) (= (ControlFlow 0 239) 232)) anon49_correct)))
(let ((anon97_Then_correct  (=> (and (and (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 233) (- 0 238)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 233) (- 0 237)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 233) (- 0 236)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_0_1| T@U) ) (!  (=> ($Is refType |n#0_0_1| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_1|)) (or (not (= |n#0_0_1| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0_1|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0_1|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0_1|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 233) (- 0 235)) (<= (LitInt 0) |kn#0@1|)) (=> (and (and (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (<= (LitInt 0) |kn#0@1|)) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) (and (=> (= (ControlFlow 0 233) (- 0 234)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (=> (= (ControlFlow 0 233) 232) anon49_correct)))))))))))
(let ((anon96_Else_correct  (=> (< |ln#0_0@2| |n#0@@0|) (=> (and (and (= |$decr$loop#0_00@2| (- |n#0@@0| |ln#0_0@2|)) ($IsAllocBox ($Box refType this@@4) Tclass._module.Node? $Heap@2)) (and ($IsAlloc intType (int_2_U |kn#0@1|) TInt $Heap@2) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@2))) (and (=> (= (ControlFlow 0 240) (- 0 244)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType this@@4))))) (and (=> (= (ControlFlow 0 240) (- 0 243)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (|Set#IsMember| |S#0@@4| ($Box refType null))))) (and (=> (= (ControlFlow 0 240) (- 0 242)) (=> (|_module.Node.IsClosed#canCall| $Heap@2 this@@4 |S#0@@4|) (or (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (forall ((|n#0_0_0| T@U) ) (!  (=> ($Is refType |n#0_0_0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#0_0_0|)) (or (not (= |n#0_0_0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0_0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0_0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |n#0_0_0|) _module.Node.next)))
))))) (and (=> (= (ControlFlow 0 240) (- 0 241)) (<= (LitInt 0) |kn#0@1|)) (=> (and (and (_module.Node.IsClosed $Heap@2 this@@4 |S#0@@4|) (<= (LitInt 0) |kn#0@1|)) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) (and (=> (= (ControlFlow 0 240) 233) anon97_Then_correct) (=> (= (ControlFlow 0 240) 239) anon97_Else_correct)))))))))))
(let ((anon96_Then_correct  (=> (and (<= |n#0@@0| |ln#0_0@2|) (= |kn#0@2| (+ |kn#0@1| 1))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (or (<= 0 |$decr$loop#00@1|) (= (- |n#0@@0| |kn#0@2|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- |n#0@@0| |kn#0@2|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 4) (- 0 7)) (< (- |n#0@@0| |kn#0@2|) |$decr$loop#00@1|)) (=> (< (- |n#0@@0| |kn#0@2|) |$decr$loop#00@1|) (=> (=> (and (<= (LitInt 0) |kn#0@2|) (<= |kn#0@2| |n#0@@0|)) (forall ((|k#4| Int) (|l#4| Int) ) (!  (=> (and (<= (LitInt 0) |k#4|) (< |k#4| |kn#0@2|)) (=> (and (<= (LitInt 0) |l#4|) (< |l#4| |n#0@@0|)) (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#4| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#4| |S#0@@4|) null)) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#4| |S#0@@4|) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#4| |S#0@@4|)) _module.Node.next)) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#4| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#4| |S#0@@4|)) _module.Node.next)) |l#4| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#4| |S#0@@4|))))))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#4| |S#0@@4|)) _module.Node.next)) |l#4| |S#0@@4|))
))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (=> |$w$loop#0@0| (<= (LitInt 0) |kn#0@2|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |kn#0@2|)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> |$w$loop#0@0| (<= |kn#0@2| |n#0@@0|))) (=> (=> |$w$loop#0@0| (<= |kn#0@2| |n#0@@0|)) (=> (= (ControlFlow 0 4) (- 0 3)) (=> |$w$loop#0@0| (forall ((|k#4@@0| Int) (|l#4@@0| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#4@@0|) (< |k#4@@0| |kn#0@2|)) (and (<= (LitInt 0) |l#4@@0|) (< |l#4@@0| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#4@@0| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#4@@0| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#4@@0| |S#0@@4|)) _module.Node.next)) |l#4@@0| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#4@@0| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#4@@0| |S#0@@4|)) _module.Node.next)) |l#4@@0| |S#0@@4|))
))))))))))))))))
(let ((anon82_Else_correct  (=> |$w$loop#0_0@1| (and (=> (= (ControlFlow 0 245) 4) anon96_Then_correct) (=> (= (ControlFlow 0 245) 240) anon96_Else_correct)))))
(let ((anon81_LoopBody_correct  (and (=> (= (ControlFlow 0 322) 321) anon82_Then_correct) (=> (= (ControlFlow 0 322) 245) anon82_Else_correct))))
(let ((anon81_LoopDone_correct true))
(let ((anon81_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and (and (and (and (and (and (not false) (<= 0 |kn#0@1|)) (<= 0 |$decr_init$loop#00@0|)) |$w$loop#0@0|) (<= 0 |ln#0_0@2|)) (<= 1 |$decr_init$loop#0_00@1|)) (=> |$w$loop#0_0@1| (<= (LitInt 0) |ln#0_0@2|))) (and (=> |$w$loop#0_0@1| (<= |ln#0_0@2| |n#0@@0|)) (=> |$w$loop#0_0@1| (forall ((|k#0_1@@5| Int) (|l#0_1@@5| Int) ) (!  (=> (and (<= (LitInt 0) |k#0_1@@5|) (< |k#0_1@@5| |kn#0@1|)) (=> (and (<= (LitInt 0) |l#0_1@@5|) (< |l#0_1@@5| |n#0@@0|)) (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_1@@5| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@5| |S#0@@4|) null)) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_1@@5| |S#0@@4|) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@5| |S#0@@4|)) _module.Node.next)) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_1@@5| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@5| |S#0@@4|)) _module.Node.next)) |l#0_1@@5| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |k#0_1@@5| |S#0@@4|))))))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@5| |S#0@@4|)) _module.Node.next)) |l#0_1@@5| |S#0@@4|))
))))) (and (and (and (=> |$w$loop#0_0@1| (forall ((|k#0_1@@6| Int) (|l#0_1@@6| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#0_1@@6|) (< |k#0_1@@6| |kn#0@1|)) (and (<= (LitInt 0) |l#0_1@@6|) (< |l#0_1@@6| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#0_1@@6| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#0_1@@6| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#0_1@@6| |S#0@@4|)) _module.Node.next)) |l#0_1@@6| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#0_1@@6| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |k#0_1@@6| |S#0@@4|)) _module.Node.next)) |l#0_1@@6| |S#0@@4|))
))) (=> |$w$loop#0_0@1| (forall ((|k#0_1@@7| Int) (|l#0_1@@7| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#0_1@@7|) (< |k#0_1@@7| |kn#0@1|)) (and (<= (LitInt 0) |l#0_1@@7|) (< |l#0_1@@7| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@7| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@7| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@7| |S#0@@4|)) _module.Node.next)) |l#0_1@@7| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@7| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |k#0_1@@7| |S#0@@4|)) _module.Node.next)) |l#0_1@@7| |S#0@@4|))
)))) (and (=> |$w$loop#0_0@1| (forall ((|l#0_3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |l#0_3@@1|) (< |l#0_3@@1| |ln#0_0@2|)) (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@1| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@2 this@@4 |kn#0@1| |S#0@@4|)))))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@1| |S#0@@4|))
))) (=> |$w$loop#0_0@1| (forall ((|l#0_3@@2| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |l#0_3@@2|) (< |l#0_3@@2| |ln#0_0@2|)) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@2| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |kn#0@1| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@2| |S#0@@4|))
))))) (and (and (=> |$w$loop#0_0@1| (forall ((|l#0_3@@3| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |l#0_3@@3|) (< |l#0_3@@3| |ln#0_0@2|)) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@3| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@2 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 (_module.Node.Nexxxt ($LS $LZ) $Heap@2 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@3| |S#0@@4|))
))) (= $Heap@1 $Heap@2)) (and (forall (($o@@5 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@5) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@5) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@5) $f@@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@5 $f@@1))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@5) $f@@1))
)) (<= (- |n#0@@0| |ln#0_0@2|) |$decr_init$loop#0_00@1|))))) (and (=> (= (ControlFlow 0 323) 2) anon81_LoopDone_correct) (=> (= (ControlFlow 0 323) 322) anon81_LoopBody_correct))))))
(let ((anon80_Else_correct  (=> (and (and (< |kn#0@1| |n#0@@0|) (= |$decr$loop#00@1| (- |n#0@@0| |kn#0@1|))) (and (= |ln#0_0@1| (LitInt 0)) (= |$decr_init$loop#0_00@1| (- |n#0@@0| |ln#0_0@1|)))) (and (=> (= (ControlFlow 0 324) (- 0 328)) (=> |$w$loop#0_0@1| (<= (LitInt 0) |ln#0_0@1|))) (=> (=> |$w$loop#0_0@1| (<= (LitInt 0) |ln#0_0@1|)) (and (=> (= (ControlFlow 0 324) (- 0 327)) (=> |$w$loop#0_0@1| (<= |ln#0_0@1| |n#0@@0|))) (=> (=> |$w$loop#0_0@1| (<= |ln#0_0@1| |n#0@@0|)) (and (=> (= (ControlFlow 0 324) (- 0 326)) (=> |$w$loop#0_0@1| (forall ((|k#0_1@@8| Int) (|l#0_1@@8| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#0_1@@8|) (< |k#0_1@@8| |kn#0@1|)) (and (<= (LitInt 0) |l#0_1@@8|) (< |l#0_1@@8| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@8| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@8| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@8| |S#0@@4|)) _module.Node.next)) |l#0_1@@8| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@8| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@8| |S#0@@4|)) _module.Node.next)) |l#0_1@@8| |S#0@@4|))
)))) (=> (=> |$w$loop#0_0@1| (forall ((|k#0_1@@9| Int) (|l#0_1@@9| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#0_1@@9|) (< |k#0_1@@9| |kn#0@1|)) (and (<= (LitInt 0) |l#0_1@@9|) (< |l#0_1@@9| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@9| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@9| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@9| |S#0@@4|)) _module.Node.next)) |l#0_1@@9| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@9| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#0_1@@9| |S#0@@4|)) _module.Node.next)) |l#0_1@@9| |S#0@@4|))
))) (and (=> (= (ControlFlow 0 324) (- 0 325)) (=> |$w$loop#0_0@1| (forall ((|l#0_3@@4| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |l#0_3@@4|) (< |l#0_3@@4| |ln#0_0@1|)) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@4| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@4| |S#0@@4|))
)))) (=> (=> |$w$loop#0_0@1| (forall ((|l#0_3@@5| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |l#0_3@@5|) (< |l#0_3@@5| |ln#0_0@1|)) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@5| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |kn#0@1| |S#0@@4|)) _module.Node.next)) |l#0_3@@5| |S#0@@4|))
))) (=> (= (ControlFlow 0 324) 323) anon81_LoopHead_correct))))))))))))
(let ((anon71_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 332) 331) anon80_Then_correct) (=> (= (ControlFlow 0 332) 324) anon80_Else_correct)))))
(let ((anon70_LoopBody_correct  (and (=> (= (ControlFlow 0 375) 374) anon71_Then_correct) (=> (= (ControlFlow 0 375) 332) anon71_Else_correct))))
(let ((anon70_LoopDone_correct true))
(let ((anon70_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (not false) (<= 0 |kn#0@1|)) (<= 0 |$decr_init$loop#00@0|)) (=> (and (and (and (=> |$w$loop#0@0| (<= (LitInt 0) |kn#0@1|)) (=> |$w$loop#0@0| (<= |kn#0@1| |n#0@@0|))) (and (=> |$w$loop#0@0| (forall ((|k#4@@1| Int) (|l#4@@1| Int) ) (!  (=> (and (<= (LitInt 0) |k#4@@1|) (< |k#4@@1| |kn#0@1|)) (=> (and (<= (LitInt 0) |l#4@@1|) (< |l#4@@1| |n#0@@0|)) (and (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |k#4@@1| |S#0@@4|) (=> (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#4@@1| |S#0@@4|) null)) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |k#4@@1| |S#0@@4|) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#4@@1| |S#0@@4|)) _module.Node.next)) null)) (not true)) (and (and (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |k#4@@1| |S#0@@4|) (|_module.Node.Nexxxt#canCall| $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#4@@1| |S#0@@4|)) _module.Node.next)) |l#4@@1| |S#0@@4|)) (|_module.Node.Nexxxt#canCall| $Heap@1 this@@4 |k#4@@1| |S#0@@4|))))))))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#4@@1| |S#0@@4|)) _module.Node.next)) |l#4@@1| |S#0@@4|))
))) (=> |$w$loop#0@0| (forall ((|k#4@@2| Int) (|l#4@@2| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#4@@2|) (< |k#4@@2| |kn#0@1|)) (and (<= (LitInt 0) |l#4@@2|) (< |l#4@@2| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#4@@2| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#4@@2| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#4@@2| |S#0@@4|)) _module.Node.next)) |l#4@@2| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#4@@2| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@1 this@@4 |k#4@@2| |S#0@@4|)) _module.Node.next)) |l#4@@2| |S#0@@4|))
))))) (and (and (=> |$w$loop#0@0| (forall ((|k#4@@3| Int) (|l#4@@3| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#4@@3|) (< |k#4@@3| |kn#0@1|)) (and (<= (LitInt 0) |l#4@@3|) (< |l#4@@3| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#4@@3| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#4@@3| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#4@@3| |S#0@@4|)) _module.Node.next)) |l#4@@3| |S#0@@4|) (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#4@@3| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 (_module.Node.Nexxxt ($LS $LZ) $Heap@1 this@@4 |k#4@@3| |S#0@@4|)) _module.Node.next)) |l#4@@3| |S#0@@4|))
))) (= $Heap@0 $Heap@1)) (and (forall (($o@@6 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@6) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6) $f@@2)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@6 $f@@2))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@6) $f@@2))
)) (<= (- |n#0@@0| |kn#0@1|) |$decr_init$loop#00@0|)))) (and (=> (= (ControlFlow 0 376) 1) anon70_LoopDone_correct) (=> (= (ControlFlow 0 376) 375) anon70_LoopBody_correct)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#3| null $Heap@@4 alloc false)) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (= $Heap@@4 $Heap@0) (forall ((|$ih#n0#0| Int) (|$ih#S0#0| T@U) ) (!  (=> (and (and ($Is SetType |$ih#S0#0| (TSet Tclass._module.Node?)) (and (and (_module.Node.IsClosed $Heap@@4 this@@4 |$ih#S0#0|) (<= (LitInt 0) |$ih#n0#0|)) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@@4 this@@4 |$ih#n0#0| |$ih#S0#0|) null))) (or (and (<= 0 |$ih#n0#0|) (< |$ih#n0#0| |n#0@@0|)) (and (= |$ih#n0#0| |n#0@@0|) (and (|Set#Subset| |$ih#S0#0| |S#0@@4|) (not (|Set#Subset| |S#0@@4| |$ih#S0#0|)))))) (forall ((|k#2| Int) (|l#2@@0| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#2|) (< |k#2| |$ih#n0#0|)) (and (<= (LitInt 0) |l#2@@0|) (< |l#2@@0| |$ih#n0#0|))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |k#2| |$ih#S0#0|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |k#2| |$ih#S0#0|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS $LZ) $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |k#2| |$ih#S0#0|)) _module.Node.next)) |l#2@@0| |$ih#S0#0|) (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |k#2| |$ih#S0#0|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |k#2| |$ih#S0#0|)) _module.Node.next)) |l#2@@0| |$ih#S0#0|))
)))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@0 this@@4 |$ih#n0#0| |$ih#S0#0|))
))) (and (= |kn#0@0| (LitInt 0)) (= |$decr_init$loop#00@0| (- |n#0@@0| |kn#0@0|)))) (and (=> (= (ControlFlow 0 377) (- 0 380)) (=> |$w$loop#0@0| (<= (LitInt 0) |kn#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |kn#0@0|)) (and (=> (= (ControlFlow 0 377) (- 0 379)) (=> |$w$loop#0@0| (<= |kn#0@0| |n#0@@0|))) (=> (=> |$w$loop#0@0| (<= |kn#0@0| |n#0@@0|)) (and (=> (= (ControlFlow 0 377) (- 0 378)) (=> |$w$loop#0@0| (forall ((|k#4@@4| Int) (|l#4@@4| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#4@@4|) (< |k#4@@4| |kn#0@0|)) (and (<= (LitInt 0) |l#4@@4|) (< |l#4@@4| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@4| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@4| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@4| |S#0@@4|)) _module.Node.next)) |l#4@@4| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@4| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@4| |S#0@@4|)) _module.Node.next)) |l#4@@4| |S#0@@4|))
)))) (=> (=> |$w$loop#0@0| (forall ((|k#4@@5| Int) (|l#4@@5| Int) ) (!  (=> (and (and (and (and (<= (LitInt 0) |k#4@@5|) (< |k#4@@5| |kn#0@0|)) (and (<= (LitInt 0) |l#4@@5|) (< |l#4@@5| |n#0@@0|))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@5| |S#0@@4|) null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@5| |S#0@@4|)) _module.Node.next)) null)) (not true))) (or (not (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@5| |S#0@@4|)) _module.Node.next)) |l#4@@5| |S#0@@4|) (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@5| |S#0@@4|))) (not true)))
 :pattern ( (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@0 this@@4 |k#4@@5| |S#0@@4|)) _module.Node.next)) |l#4@@5| |S#0@@4|))
))) (=> (= (ControlFlow 0 377) 376) anon70_LoopHead_correct))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and ($IsGoodHeap $Heap@@4) ($IsHeapAnchor $Heap@@4)) (and (or (not (= this@@4 null)) (not true)) (and ($Is refType this@@4 Tclass._module.Node) ($IsAlloc refType this@@4 Tclass._module.Node $Heap@@4)))) (and (and ($Is SetType |S#0@@4| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0@@4| (TSet Tclass._module.Node?) $Heap@@4)) (= 3 $FunctionContextHeight))) (and (and (and (|_module.Node.IsClosed#canCall| $Heap@@4 this@@4 |S#0@@4|) (and (_module.Node.IsClosed $Heap@@4 this@@4 |S#0@@4|) (and (and (|Set#IsMember| |S#0@@4| ($Box refType this@@4)) (|Set#IsMember| |S#0@@4| ($Box refType null))) (forall ((|n#8| T@U) ) (!  (=> ($Is refType |n#8| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@4| ($Box refType |n#8|)) (or (not (= |n#8| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 |n#8|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@4| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 |n#8|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@4 |n#8|) _module.Node.next)))
))))) (<= (LitInt 0) |n#0@@0|)) (and (= (_module.Node.Nexxxt ($LS ($LS $LZ)) $Heap@@4 this@@4 |n#0@@0| |S#0@@4|) null) (= (ControlFlow 0 381) 377)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
