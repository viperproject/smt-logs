(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun class._module.Node? () T@U)
(declare-fun Tagclass._module.Node? () T@U)
(declare-fun Tagclass._module.Node () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun field$next () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Node.Nexxxt (T@U T@U T@U Int T@U) T@U)
(declare-fun |_module.Node.Nexxxt#canCall| (T@U T@U Int T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Node () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Tclass._module.Node? () T@U)
(declare-fun _module.Node.IsClosed (T@U T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun DeclName (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun _module.Node.next () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun _module.Node.Reaches (T@U T@U T@U T@U) Bool)
(declare-fun |_module.Node.Reaches#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_module.Node.IsClosed#canCall| (T@U T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc allocName class._module.Node? Tagclass._module.Node? Tagclass._module.Node tytagFamily$Node field$next)
)
(assert  (and (= (Ctor refType) 3) (= (Ctor SetType) 4)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) ($Heap T@U) (this T@U) (|k#0| Int) (|S#0| T@U) ) (!  (=> (or (|_module.Node.Nexxxt#canCall| $Heap this |k#0| |S#0|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.Node) ($IsAlloc refType this Tclass._module.Node $Heap)))) (and ($Is SetType |S#0| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0| (TSet Tclass._module.Node?) $Heap))) (and (_module.Node.IsClosed $Heap this |S#0|) (<= (LitInt 0) |k#0|))))) (and (|Set#IsMember| |S#0| ($Box refType (_module.Node.Nexxxt $ly $Heap this |k#0| |S#0|))) ($Is refType (_module.Node.Nexxxt $ly $Heap this |k#0| |S#0|) Tclass._module.Node?)))
 :pattern ( (_module.Node.Nexxxt $ly $Heap this |k#0| |S#0|))
))))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert (forall (($ly@@0 T@U) ($Heap@@0 T@U) (this@@0 T@U) (|k#0@@0| Int) (|S#0@@0| T@U) ) (! (= (_module.Node.Nexxxt ($LS $ly@@0) $Heap@@0 this@@0 |k#0@@0| |S#0@@0|) (_module.Node.Nexxxt $ly@@0 $Heap@@0 this@@0 |k#0@@0| |S#0@@0|))
 :pattern ( (_module.Node.Nexxxt ($LS $ly@@0) $Heap@@0 this@@0 |k#0@@0| |S#0@@0|))
)))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Node?)  (or (= $o null) (= (dtype $o) Tclass._module.Node?)))
 :pattern ( ($Is refType $o Tclass._module.Node?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Node $h) ($IsAlloc refType |c#0| Tclass._module.Node? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node? $h))
)))
(assert (= (FDim _module.Node.next) 0))
(assert (= (FieldOfDecl class._module.Node? field$next) _module.Node.next))
(assert  (not ($IsGhostField _module.Node.next)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.Node? $h@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert (forall (($h0 T@U) ($h1 T@U) (this@@1 T@U) (|sink#0| T@U) (|S#0@@1| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 Tclass._module.Node))) (or (|_module.Node.Reaches#canCall| $h0 this@@1 |sink#0| |S#0@@1|) (and ($Is refType |sink#0| Tclass._module.Node) ($Is SetType |S#0@@1| (TSet Tclass._module.Node?))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@1 T@U) ($f T@U) )  (=> (and (or (not (= $o@@1 null)) (not true)) (|Set#IsMember| |S#0@@1| ($Box refType $o@@1))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@1) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@1) $f)))) (= (_module.Node.Reaches $h0 this@@1 |sink#0| |S#0@@1|) (_module.Node.Reaches $h1 this@@1 |sink#0| |S#0@@1|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.Node.Reaches $h1 this@@1 |sink#0| |S#0@@1|))
)))
(assert (forall (($h@@1 T@U) ($o@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass._module.Node?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@2) _module.Node.next)) Tclass._module.Node?))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@2) _module.Node.next)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@2 T@U) (|S#0@@2| T@U) ) (!  (=> (or (|_module.Node.IsClosed#canCall| $Heap@@1 this@@2 |S#0@@2|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 Tclass._module.Node) ($IsAlloc refType this@@2 Tclass._module.Node $Heap@@1)))) ($Is SetType |S#0@@2| (TSet Tclass._module.Node?))))) (= (_module.Node.IsClosed $Heap@@1 this@@2 |S#0@@2|)  (and (and (|Set#IsMember| |S#0@@2| ($Box refType this@@2)) (|Set#IsMember| |S#0@@2| ($Box refType null))) (forall ((|n#0| T@U) ) (!  (=> ($Is refType |n#0| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@2| ($Box refType |n#0|)) (or (not (= |n#0| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@2| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0|) _module.Node.next)))
)))))
 :pattern ( (_module.Node.IsClosed $Heap@@1 this@@2 |S#0@@2|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Node?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.Node?)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Node?))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Node) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.Node)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Node))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.Node)  (and ($Is refType |c#0@@0| Tclass._module.Node?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Node?))
)))
(assert (forall (($ly@@1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (this@@3 T@U) (|k#0@@1| Int) (|S#0@@3| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass._module.Node))) (or (|_module.Node.Nexxxt#canCall| $h0@@0 this@@3 |k#0@@1| |S#0@@3|) ($Is SetType |S#0@@3| (TSet Tclass._module.Node?)))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0))) (=> (forall (($o@@3 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@3 null)) (not true)) (|Set#IsMember| |S#0@@3| ($Box refType $o@@3))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@0 $o@@3) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@0 $o@@3) $f@@0)))) (= (_module.Node.Nexxxt $ly@@1 $h0@@0 this@@3 |k#0@@1| |S#0@@3|) (_module.Node.Nexxxt $ly@@1 $h1@@0 this@@3 |k#0@@1| |S#0@@3|))))
 :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (_module.Node.Nexxxt $ly@@1 $h1@@0 this@@3 |k#0@@1| |S#0@@3|))
)))
(assert (forall (($h@@2 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass._module.Node?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) _module.Node.next)) Tclass._module.Node? $h@@2))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) _module.Node.next)))
)))
(assert (forall (($h0@@1 T@U) ($h1@@1 T@U) (this@@4 T@U) (|S#0@@4| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (and (or (not (= this@@4 null)) (not true)) ($Is refType this@@4 Tclass._module.Node))) (or (|_module.Node.IsClosed#canCall| $h0@@1 this@@4 |S#0@@4|) ($Is SetType |S#0@@4| (TSet Tclass._module.Node?)))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1))) (=> (forall (($o@@5 T@U) ($f@@1 T@U) )  (=> (and (or (not (= $o@@5 null)) (not true)) (|Set#IsMember| |S#0@@4| ($Box refType $o@@5))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@1 $o@@5) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@1 $o@@5) $f@@1)))) (= (_module.Node.IsClosed $h0@@1 this@@4 |S#0@@4|) (_module.Node.IsClosed $h1@@1 this@@4 |S#0@@4|))))
 :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (_module.Node.IsClosed $h1@@1 this@@4 |S#0@@4|))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@2 T@U) (this@@5 T@U) (|sink#0@@0| T@U) (|S#0@@5| T@U) ) (!  (=> (or (|_module.Node.Reaches#canCall| $Heap@@2 this@@5 |sink#0@@0| |S#0@@5|) (and (< 2 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $Heap@@2) (and (or (not (= this@@5 null)) (not true)) (and ($Is refType this@@5 Tclass._module.Node) ($IsAlloc refType this@@5 Tclass._module.Node $Heap@@2)))) ($Is refType |sink#0@@0| Tclass._module.Node)) ($Is SetType |S#0@@5| (TSet Tclass._module.Node?))) (_module.Node.IsClosed $Heap@@2 this@@5 |S#0@@5|)))) (and (forall ((|k#0@@2| Int) ) (!  (=> (<= (LitInt 0) |k#0@@2|) (|_module.Node.Nexxxt#canCall| $Heap@@2 this@@5 |k#0@@2| |S#0@@5|))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@@2 this@@5 |k#0@@2| |S#0@@5|))
)) (= (_module.Node.Reaches $Heap@@2 this@@5 |sink#0@@0| |S#0@@5|) (exists ((|k#0@@3| Int) ) (!  (and (<= (LitInt 0) |k#0@@3|) (= (_module.Node.Nexxxt ($LS $LZ) $Heap@@2 this@@5 |k#0@@3| |S#0@@5|) |sink#0@@0|))
 :pattern ( (_module.Node.Nexxxt ($LS $LZ) $Heap@@2 this@@5 |k#0@@3| |S#0@@5|))
)))))
 :pattern ( (_module.Node.Reaches $Heap@@2 this@@5 |sink#0@@0| |S#0@@5|) ($IsGoodHeap $Heap@@2))
))))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@3) ($IsAllocBox bx@@3 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@2 T@U) ($Heap@@3 T@U) (this@@6 T@U) (|k#0@@4| Int) (|S#0@@6| T@U) ) (!  (=> (or (|_module.Node.Nexxxt#canCall| $Heap@@3 this@@6 |k#0@@4| |S#0@@6|) (and (< 1 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $Heap@@3) (or (not (= this@@6 null)) (not true))) ($IsAlloc refType this@@6 Tclass._module.Node $Heap@@3)) (and ($Is SetType |S#0@@6| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0@@6| (TSet Tclass._module.Node?) $Heap@@3))) (and (_module.Node.IsClosed $Heap@@3 this@@6 |S#0@@6|) (<= (LitInt 0) |k#0@@4|))))) ($IsAlloc refType (_module.Node.Nexxxt $ly@@2 $Heap@@3 this@@6 |k#0@@4| |S#0@@6|) Tclass._module.Node? $Heap@@3))
 :pattern ( ($IsAlloc refType (_module.Node.Nexxxt $ly@@2 $Heap@@3 this@@6 |k#0@@4| |S#0@@6|) Tclass._module.Node? $Heap@@3))
))))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@6 T@U) ($f@@2 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3|) $o@@6 $f@@2))  (=> (and (or (not (= $o@@6 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@6) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3|) $o@@6 $f@@2))
)))
(assert (forall ((bx@@4 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@5))))
 :pattern ( ($IsBox bx@@4 (TSet t@@5)))
)))
(assert (= (Tag Tclass._module.Node?) Tagclass._module.Node?))
(assert (= (TagFamily Tclass._module.Node?) tytagFamily$Node))
(assert (= (Tag Tclass._module.Node) Tagclass._module.Node))
(assert (= (TagFamily Tclass._module.Node) tytagFamily$Node))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@4 T@U) (this@@7 T@U) (|sink#0@@1| T@U) (|S#0@@7| T@U) ) (!  (=> (or (|_module.Node.Reaches#canCall| $Heap@@4 this@@7 |sink#0@@1| |S#0@@7|) (and (< 2 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $Heap@@4) (and (or (not (= this@@7 null)) (not true)) (and ($Is refType this@@7 Tclass._module.Node) ($IsAlloc refType this@@7 Tclass._module.Node $Heap@@4)))) (and ($Is refType |sink#0@@1| Tclass._module.Node) ($IsAlloc refType |sink#0@@1| Tclass._module.Node $Heap@@4))) (and ($Is SetType |S#0@@7| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0@@7| (TSet Tclass._module.Node?) $Heap@@4))) (_module.Node.IsClosed $Heap@@4 this@@7 |S#0@@7|)))) (=> (_module.Node.Reaches $Heap@@4 this@@7 |sink#0@@1| |S#0@@7|) (|Set#IsMember| |S#0@@7| ($Box refType |sink#0@@1|))))
 :pattern ( (_module.Node.Reaches $Heap@@4 this@@7 |sink#0@@1| |S#0@@7|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@3 T@U) ($Heap@@5 T@U) (this@@8 T@U) (|k#0@@5| Int) (|S#0@@8| T@U) ) (!  (=> (or (|_module.Node.Nexxxt#canCall| $Heap@@5 this@@8 |k#0@@5| |S#0@@8|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@5) (and (or (not (= this@@8 null)) (not true)) (and ($Is refType this@@8 Tclass._module.Node) ($IsAlloc refType this@@8 Tclass._module.Node $Heap@@5)))) ($Is SetType |S#0@@8| (TSet Tclass._module.Node?))) (and (_module.Node.IsClosed $Heap@@5 this@@8 |S#0@@8|) (<= (LitInt 0) |k#0@@5|))))) (and (=> (or (not (= |k#0@@5| (LitInt 0))) (not true)) (and (|_module.Node.Nexxxt#canCall| $Heap@@5 this@@8 (- |k#0@@5| 1) |S#0@@8|) (=> (or (not (= (_module.Node.Nexxxt $ly@@3 $Heap@@5 this@@8 (- |k#0@@5| 1) |S#0@@8|) null)) (not true)) (|_module.Node.Nexxxt#canCall| $Heap@@5 this@@8 (- |k#0@@5| 1) |S#0@@8|)))) (= (_module.Node.Nexxxt ($LS $ly@@3) $Heap@@5 this@@8 |k#0@@5| |S#0@@8|) (ite (= |k#0@@5| (LitInt 0)) this@@8 (ite (= (_module.Node.Nexxxt $ly@@3 $Heap@@5 this@@8 (- |k#0@@5| 1) |S#0@@8|) null) null ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@5 (_module.Node.Nexxxt $ly@@3 $Heap@@5 this@@8 (- |k#0@@5| 1) |S#0@@8|)) _module.Node.next)))))))
 :pattern ( (_module.Node.Nexxxt ($LS $ly@@3) $Heap@@5 this@@8 |k#0@@5| |S#0@@8|) ($IsGoodHeap $Heap@@5))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@0 () T@U)
(declare-fun this@@9 () T@U)
(declare-fun |n#0@0| () T@U)
(declare-fun |S#0@@9| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@6 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let ((anon6_correct true))
(let ((anon9_Else_correct  (=> (and (not (and (_module.Node.Reaches $Heap@0 this@@9 |n#0@0| |S#0@@9|) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) null)) (not true)))) (= (ControlFlow 0 9) 1)) anon6_correct)))
(let ((anon9_Then_correct  (=> (and (_module.Node.Reaches $Heap@0 this@@9 |n#0@0| |S#0@@9|) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) null)) (not true))) (and (=> (= (ControlFlow 0 3) (- 0 8)) (or (not (= |n#0@0| null)) (not true))) (=> (or (not (= |n#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) null)) (not true)) (=> ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next) Tclass._module.Node? $Heap@0) (=> (and ($IsAlloc refType |n#0@0| Tclass._module.Node $Heap@0) ($IsAlloc SetType |S#0@@9| (TSet Tclass._module.Node?) $Heap@0)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) |S#0@@9|) (or (_module.Node.IsClosed $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) |S#0@@9|) (|Set#IsMember| |S#0@@9| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next))))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) |S#0@@9|) (or (_module.Node.IsClosed $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) |S#0@@9|) (|Set#IsMember| |S#0@@9| ($Box refType null))))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) |S#0@@9|) (or (_module.Node.IsClosed $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) |S#0@@9|) (forall ((|n#2| T@U) ) (!  (=> ($Is refType |n#2| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@9| ($Box refType |n#2|)) (or (not (= |n#2| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#2|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@9| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#2|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#2|) _module.Node.next)))
))))) (=> (_module.Node.IsClosed $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) |S#0@@9|) (=> (and (|_module.Node.Reaches#canCall| $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#0@0|) _module.Node.next)) |n#0@0| |S#0@@9|) (= (ControlFlow 0 3) 1)) anon6_correct))))))))))))))
(let ((anon8_Else_correct  (=> (not (_module.Node.Reaches $Heap@0 this@@9 |n#0@0| |S#0@@9|)) (and (=> (= (ControlFlow 0 12) 3) anon9_Then_correct) (=> (= (ControlFlow 0 12) 9) anon9_Else_correct)))))
(let ((anon8_Then_correct  (=> (_module.Node.Reaches $Heap@0 this@@9 |n#0@0| |S#0@@9|) (and (=> (= (ControlFlow 0 10) (- 0 11)) (or (not (= |n#0@0| null)) (not true))) (=> (or (not (= |n#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 10) 3) anon9_Then_correct) (=> (= (ControlFlow 0 10) 9) anon9_Else_correct)))))))
(let ((anon7_Then_correct  (=> (and (and (and ($Is refType |n#0@0| Tclass._module.Node) ($IsAlloc refType |n#0@0| Tclass._module.Node $Heap@0)) ($IsAllocBox ($Box refType this@@9) Tclass._module.Node? $Heap@0)) (and ($IsAlloc refType |n#0@0| Tclass._module.Node $Heap@0) ($IsAlloc SetType |S#0@@9| (TSet Tclass._module.Node?) $Heap@0))) (and (=> (= (ControlFlow 0 13) (- 0 16)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@9 |S#0@@9|) (or (_module.Node.IsClosed $Heap@0 this@@9 |S#0@@9|) (|Set#IsMember| |S#0@@9| ($Box refType this@@9))))) (and (=> (= (ControlFlow 0 13) (- 0 15)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@9 |S#0@@9|) (or (_module.Node.IsClosed $Heap@0 this@@9 |S#0@@9|) (|Set#IsMember| |S#0@@9| ($Box refType null))))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (=> (|_module.Node.IsClosed#canCall| $Heap@0 this@@9 |S#0@@9|) (or (_module.Node.IsClosed $Heap@0 this@@9 |S#0@@9|) (forall ((|n#1| T@U) ) (!  (=> ($Is refType |n#1| Tclass._module.Node?) (=> (and (and (|Set#IsMember| |S#0@@9| ($Box refType |n#1|)) (or (not (= |n#1| null)) (not true))) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1|) _module.Node.next)) null)) (not true))) (|Set#IsMember| |S#0@@9| (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1|) _module.Node.next))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |n#1|) _module.Node.next)))
))))) (=> (and (_module.Node.IsClosed $Heap@0 this@@9 |S#0@@9|) (|_module.Node.Reaches#canCall| $Heap@0 this@@9 |n#0@0| |S#0@@9|)) (and (=> (= (ControlFlow 0 13) 10) anon8_Then_correct) (=> (= (ControlFlow 0 13) 12) anon8_Else_correct)))))))))
(let ((anon7_Else_correct  (=> (and (not (and ($Is refType |n#0@0| Tclass._module.Node) ($IsAlloc refType |n#0@0| Tclass._module.Node $Heap@0))) (= (ControlFlow 0 2) 1)) anon6_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#3| null $Heap@@6 alloc false)) (=> (and (and (and ($IsAllocBox ($Box refType this@@9) Tclass._module.Node? $Heap@@6) ($IsAlloc SetType |S#0@@9| (TSet Tclass._module.Node?) $Heap@@6)) (and (|_module.Node.IsClosed#canCall| $Heap@@6 this@@9 |S#0@@9|) (_module.Node.IsClosed $Heap@@6 this@@9 |S#0@@9|))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (forall (($o@@7 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 $o@@7) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@7) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@6 $o@@7)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@7))
)) ($HeapSucc $Heap@@6 $Heap@0)))) (and (=> (= (ControlFlow 0 17) 13) anon7_Then_correct) (=> (= (ControlFlow 0 17) 2) anon7_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@6) ($IsHeapAnchor $Heap@@6)) (and (or (not (= this@@9 null)) (not true)) (and ($Is refType this@@9 Tclass._module.Node) ($IsAlloc refType this@@9 Tclass._module.Node $Heap@@6)))) (and (and ($Is SetType |S#0@@9| (TSet Tclass._module.Node?)) ($IsAlloc SetType |S#0@@9| (TSet Tclass._module.Node?) $Heap@@6)) (and (= 5 $FunctionContextHeight) (= (ControlFlow 0 18) 17)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
