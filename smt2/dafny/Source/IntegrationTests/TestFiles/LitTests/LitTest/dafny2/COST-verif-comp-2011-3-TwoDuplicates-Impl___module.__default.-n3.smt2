(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.IsPrefixDuplicate (T@U T@U Int Int) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.__default.IsPrefixDuplicate#canCall| (T@U T@U Int Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun IndexField (Int) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.__default.IsDuplicate (T@U T@U Int) Bool)
(declare-fun |_module.__default.IsDuplicate#canCall| (T@U T@U Int) Bool)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.array? Tagclass._System.array tytagFamily$array)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (|a#0| T@U) (|k#0| Int) (|p#0| Int) ) (!  (=> (or (|_module.__default.IsPrefixDuplicate#canCall| $Heap |a#0| |k#0| |p#0|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is refType |a#0| (Tclass._System.array TInt))) (and (<= (LitInt 0) |k#0|) (<= |k#0| (_System.array.Length |a#0|)))))) (= (_module.__default.IsPrefixDuplicate $Heap |a#0| |k#0| |p#0|) (exists ((|i#0| Int) (|j#0| Int) ) (!  (and (and (and (<= (LitInt 0) |i#0|) (< |i#0| |j#0|)) (< |j#0| |k#0|)) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |i#0|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0|)))) |p#0|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |j#0|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |i#0|))))
))))
 :pattern ( (_module.__default.IsPrefixDuplicate $Heap |a#0| |k#0| |p#0|) ($IsGoodHeap $Heap))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@1 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) _System.array$arg@@2 $h@@1))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall (($h0 T@U) ($h1 T@U) (|a#0@@0| T@U) (|k#0@@0| Int) (|p#0@@0| Int) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|_module.__default.IsPrefixDuplicate#canCall| $h0 |a#0@@0| |k#0@@0| |p#0@@0|) ($Is refType |a#0@@0| (Tclass._System.array TInt)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@2 T@U) ($f T@U) )  (=> (and (or (not (= $o@@2 null)) (not true)) (= $o@@2 |a#0@@0|)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@2) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@2) $f)))) (= (_module.__default.IsPrefixDuplicate $h0 |a#0@@0| |k#0@@0| |p#0@@0|) (_module.__default.IsPrefixDuplicate $h1 |a#0@@0| |k#0@@0| |p#0@@0|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.__default.IsPrefixDuplicate $h1 |a#0@@0| |k#0@@0| |p#0@@0|))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@3 T@U) ) (! (= ($Is refType $o@@3 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@3 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall (($h0@@0 T@U) ($h1@@0 T@U) (|a#0@@1| T@U) (|p#0@@1| Int) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|_module.__default.IsDuplicate#canCall| $h0@@0 |a#0@@1| |p#0@@1|) ($Is refType |a#0@@1| (Tclass._System.array TInt)))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0))) (=> (forall (($o@@4 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@4 null)) (not true)) (= $o@@4 |a#0@@1|)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@0 $o@@4) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@0 $o@@4) $f@@0)))) (= (_module.__default.IsDuplicate $h0@@0 |a#0@@1| |p#0@@1|) (_module.__default.IsDuplicate $h1@@0 |a#0@@1| |p#0@@1|))))
 :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (_module.__default.IsDuplicate $h1@@0 |a#0@@1| |p#0@@1|))
)))
(assert (forall ((o@@0 T@U) ) (! (<= 0 (_System.array.Length o@@0))
 :pattern ( (_System.array.Length o@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|a#0@@2| T@U) (|p#0@@2| Int) ) (!  (=> (or (|_module.__default.IsDuplicate#canCall| $Heap@@0 |a#0@@2| |p#0@@2|) (and (< 1 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) ($Is refType |a#0@@2| (Tclass._System.array TInt))))) (and (|_module.__default.IsPrefixDuplicate#canCall| $Heap@@0 |a#0@@2| (_System.array.Length |a#0@@2|) |p#0@@2|) (= (_module.__default.IsDuplicate $Heap@@0 |a#0@@2| |p#0@@2|) (_module.__default.IsPrefixDuplicate $Heap@@0 |a#0@@2| (_System.array.Length |a#0@@2|) |p#0@@2|))))
 :pattern ( (_module.__default.IsDuplicate $Heap@@0 |a#0@@2| |p#0@@2|) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((i Int) ) (! (= (FDim (IndexField i)) 1)
 :pattern ( (IndexField i))
)))
(assert (forall ((i@@0 Int) ) (! (= (IndexField_Inverse (IndexField i@@0)) i@@0)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@2 T@U) ($o@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@5) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@5)) TInt $h@@2))
 :pattern ( (_System.array.Length $o@@5) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@5) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@3 T@U) ($o@@6 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@6)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@6) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@6) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@7 T@U) ($f@@1 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#2| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f@@1))  (=> (and (or (not (= $o@@7 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#2| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f@@1))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (forall ((h@@3 T@U) (r T@U) (f T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@6))) ($HeapSucc h@@3 (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@6)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((h@@4 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@4))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#6@1| () Int)
(declare-fun $nw@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |j#4@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun $Heap@@1 () T@U)
(declare-fun |a#0@@3| () T@U)
(declare-fun |i#6@2| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |p#0@0| () Int)
(declare-fun |q#0@0| () Int)
(declare-fun |k#3@0| () Int)
(declare-fun |##p#5@0| () Int)
(declare-fun |j#6@0| () Int)
(declare-fun |k#0@0| () Int)
(declare-fun |$w$loop#1@0| () Bool)
(declare-fun |i#6@3| () Int)
(declare-fun |$decr$loop#10@1| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun |p#0@2| () Int)
(declare-fun |q#0@3| () Int)
(declare-fun |p#0@1| () Int)
(declare-fun |q#0@2| () Int)
(declare-fun |$rhs#1_1_0_0@1| () Int)
(declare-fun |$rhs#1_1_0_1@1| () Int)
(declare-fun |k#1_0@1| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |p#0@3| () Int)
(declare-fun |q#0@4| () Int)
(declare-fun $Heap@6 () T@U)
(declare-fun |q#0@1| () Int)
(declare-fun |##p#1_1_0@1| () Int)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |$rhs#2@0| () Int)
(declare-fun |$decr_init$loop#10@0| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun $index0@1 () T@U)
(declare-fun |$rhs#0_0@1| () Int)
(declare-fun |$rhs#0_1@1| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |i#6@0| () Int)
(declare-fun |d#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 157) (let ((anon65_Else_correct true))
(let ((anon11_correct  (=> (and (and (and (<= (LitInt 0) |i#6@1|) (<= |i#6@1| (_System.array.Length $nw@0))) (forall ((|j#5| Int) ) (!  (=> (and (<= (LitInt 0) |j#5|) (< |j#5| |i#6@1|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#5|)))) (LitInt (- 0 1))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#5|))))
))) (= (ControlFlow 0 134) (- 0 133))) (or (not (= $nw@0 null)) (not true)))))
(let ((anon67_Else_correct  (=> (and (not (and (<= (LitInt 0) |j#4@0|) (< |j#4@0| |i#6@1|))) (= (ControlFlow 0 140) 134)) anon11_correct)))
(let ((anon67_Then_correct  (=> (and (<= (LitInt 0) |j#4@0|) (< |j#4@0| |i#6@1|)) (and (=> (= (ControlFlow 0 137) (- 0 139)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 137) (- 0 138)) (and (<= 0 |j#4@0|) (< |j#4@0| (_System.array.Length $nw@0)))) (=> (= (ControlFlow 0 137) 134) anon11_correct)))))))
(let ((anon66_Else_correct  (=> (< |j#4@0| (LitInt 0)) (and (=> (= (ControlFlow 0 142) 137) anon67_Then_correct) (=> (= (ControlFlow 0 142) 140) anon67_Else_correct)))))
(let ((anon66_Then_correct  (=> (<= (LitInt 0) |j#4@0|) (and (=> (= (ControlFlow 0 141) 137) anon67_Then_correct) (=> (= (ControlFlow 0 141) 140) anon67_Else_correct)))))
(let ((anon65_Then_correct  (and (=> (= (ControlFlow 0 143) 141) anon66_Then_correct) (=> (= (ControlFlow 0 143) 142) anon66_Else_correct))))
(let ((anon64_Then_correct  (=> (and (<= (LitInt 0) |i#6@1|) (<= |i#6@1| (_System.array.Length $nw@0))) (and (=> (= (ControlFlow 0 144) 143) anon65_Then_correct) (=> (= (ControlFlow 0 144) 136) anon65_Else_correct)))))
(let ((anon64_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#6@1|) (<= |i#6@1| (_System.array.Length $nw@0)))) (= (ControlFlow 0 135) 134)) anon11_correct)))
(let ((anon63_Else_correct  (=> (< |i#6@1| (LitInt 0)) (and (=> (= (ControlFlow 0 147) 144) anon64_Then_correct) (=> (= (ControlFlow 0 147) 135) anon64_Else_correct)))))
(let ((anon63_Then_correct  (=> (<= (LitInt 0) |i#6@1|) (and (=> (= (ControlFlow 0 145) (- 0 146)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 145) 144) anon64_Then_correct) (=> (= (ControlFlow 0 145) 135) anon64_Else_correct))))))
(let ((anon62_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 148) 145) anon63_Then_correct) (=> (= (ControlFlow 0 148) 147) anon63_Else_correct)))))
(let ((anon76_Else_correct true))
(let ((anon45_correct  (=> (forall ((|k#4| Int) ) (!  (and (=> (and (<= (LitInt 0) |k#4|) (< |k#4| |i#6@2|)) (|_module.__default.IsPrefixDuplicate#canCall| $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4|)))))) (=> (=> (and (and (<= (LitInt 0) |k#4|) (< |k#4| |i#6@2|)) (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4|)))))) (= |p#0@0| |q#0@0|)) (=> (and (<= (LitInt 0) |k#4|) (< |k#4| |i#6@2|)) (|_module.__default.IsPrefixDuplicate#canCall| $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4|))))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |k#4|))))
)) (=> (and (forall ((|k#4@@0| Int) ) (!  (and (=> (and (and (<= (LitInt 0) |k#4@@0|) (< |k#4@@0| |i#6@2|)) (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4@@0|)))))) (= |p#0@0| |q#0@0|)) (=> (and (and (<= (LitInt 0) |k#4@@0|) (< |k#4@@0| |i#6@2|)) (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4@@0|)))))) (= |q#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4@@0|)))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |k#4@@0|))))
)) (= (ControlFlow 0 66) (- 0 65))) (or (not (= |a#0@@3| null)) (not true))))))
(let ((anon87_Else_correct  (=> (and (or (not (= |p#0@0| |q#0@0|)) (not true)) (= (ControlFlow 0 71) 66)) anon45_correct)))
(let ((anon87_Then_correct  (=> (= |p#0@0| |q#0@0|) (and (=> (= (ControlFlow 0 68) (- 0 70)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 68) (- 0 69)) (and (<= 0 |k#3@0|) (< |k#3@0| (_System.array.Length |a#0@@3|)))) (=> (= (ControlFlow 0 68) 66) anon45_correct)))))))
(let ((anon86_Then_correct  (=> (and (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |i#6@2|)) (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#3@0|)))))) (and (=> (= (ControlFlow 0 72) 68) anon87_Then_correct) (=> (= (ControlFlow 0 72) 71) anon87_Else_correct)))))
(let ((anon86_Else_correct  (=> (and (not (and (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |i#6@2|)) (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#3@0|))))))) (= (ControlFlow 0 67) 66)) anon45_correct)))
(let ((anon85_Else_correct  (=> (not (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |i#6@2|))) (and (=> (= (ControlFlow 0 78) 72) anon86_Then_correct) (=> (= (ControlFlow 0 78) 67) anon86_Else_correct)))))
(let ((anon85_Then_correct  (=> (and (and (<= (LitInt 0) |k#3@0|) (< |k#3@0| |i#6@2|)) (and ($IsAlloc refType |a#0@@3| (Tclass._System.array TInt) $Heap@3) ($IsAlloc intType (int_2_U |i#6@2|) TInt $Heap@3))) (and (=> (= (ControlFlow 0 73) (- 0 77)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 73) (- 0 76)) (and (<= 0 |k#3@0|) (< |k#3@0| (_System.array.Length |a#0@@3|)))) (=> (and (= |##p#5@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#3@0|))))) ($IsAlloc intType (int_2_U |##p#5@0|) TInt $Heap@3)) (and (=> (= (ControlFlow 0 73) (- 0 75)) (<= (LitInt 0) |i#6@2|)) (and (=> (= (ControlFlow 0 73) (- 0 74)) (<= |i#6@2| (_System.array.Length |a#0@@3|))) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#3@0|))))) (and (=> (= (ControlFlow 0 73) 72) anon86_Then_correct) (=> (= (ControlFlow 0 73) 67) anon86_Else_correct))))))))))))
(let ((anon84_Else_correct  (=> (< |k#3@0| (LitInt 0)) (and (=> (= (ControlFlow 0 80) 73) anon85_Then_correct) (=> (= (ControlFlow 0 80) 78) anon85_Else_correct)))))
(let ((anon84_Then_correct  (=> (<= (LitInt 0) |k#3@0|) (and (=> (= (ControlFlow 0 79) 73) anon85_Then_correct) (=> (= (ControlFlow 0 79) 78) anon85_Else_correct)))))
(let ((anon83_Then_correct  (and (=> (= (ControlFlow 0 81) 79) anon84_Then_correct) (=> (= (ControlFlow 0 81) 80) anon84_Else_correct))))
(let ((anon83_Else_correct true))
(let ((anon37_correct  (=> (and (=> (= |p#0@0| |q#0@0|) (|_module.__default.IsDuplicate#canCall| $Heap@3 |a#0@@3| |p#0@0|)) (=> (= |p#0@0| |q#0@0|) (_module.__default.IsDuplicate $Heap@3 |a#0@@3| |p#0@0|))) (and (=> (= (ControlFlow 0 82) 81) anon83_Then_correct) (=> (= (ControlFlow 0 82) 64) anon83_Else_correct)))))
(let ((anon82_Else_correct  (=> (and (or (not (= |p#0@0| |q#0@0|)) (not true)) (= (ControlFlow 0 84) 82)) anon37_correct)))
(let ((anon82_Then_correct  (=> (= |p#0@0| |q#0@0|) (=> (and (and ($IsAlloc refType |a#0@@3| (Tclass._System.array TInt) $Heap@3) ($IsAlloc intType (int_2_U |p#0@0|) TInt $Heap@3)) (and (|_module.__default.IsDuplicate#canCall| $Heap@3 |a#0@@3| |p#0@0|) (= (ControlFlow 0 83) 82))) anon37_correct))))
(let ((anon35_correct  (=> (forall ((|j#7| Int) ) (!  (=> (and (<= (LitInt 0) |j#7|) (< |j#7| (_System.array.Length $nw@0))) (or (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7|)))) (LitInt (- 0 1))) (forall ((|k#2| Int) ) (!  (=> (and (<= (LitInt 0) |k#2|) (< |k#2| |i#6@2|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#2|)))) |j#7|)) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#2|))))
))) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7|)))) |i#6@2|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7|)))))))) |j#7|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7|))))
)) (and (=> (= (ControlFlow 0 85) 83) anon82_Then_correct) (=> (= (ControlFlow 0 85) 84) anon82_Else_correct)))))
(let ((anon81_Else_correct  (=> (and (not (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|)))) |i#6@2|))) (= (ControlFlow 0 93) 85)) anon35_correct)))
(let ((anon81_Then_correct  (=> (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|)))) |i#6@2|)) (and (=> (= (ControlFlow 0 88) (- 0 92)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 88) (- 0 91)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 88) (- 0 90)) (and (<= 0 |j#6@0|) (< |j#6@0| (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 88) (- 0 89)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|)))) (_System.array.Length |a#0@@3|)))) (=> (= (ControlFlow 0 88) 85) anon35_correct))))))))))
(let ((anon80_Else_correct  (=> (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|)))) (LitInt 0)) (and (=> (= (ControlFlow 0 97) 88) anon81_Then_correct) (=> (= (ControlFlow 0 97) 93) anon81_Else_correct)))))
(let ((anon80_Then_correct  (=> (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|))))) (and (=> (= (ControlFlow 0 94) (- 0 96)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 94) (- 0 95)) (and (<= 0 |j#6@0|) (< |j#6@0| (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 94) 88) anon81_Then_correct) (=> (= (ControlFlow 0 94) 93) anon81_Else_correct))))))))
(let ((anon79_Then_correct  (=> (not (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|)))) (LitInt (- 0 1))) (forall ((|k#1| Int) ) (!  (=> (and (<= (LitInt 0) |k#1|) (< |k#1| |i#6@2|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#1|)))) |j#6@0|)) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#1|))))
)))) (and (=> (= (ControlFlow 0 98) (- 0 100)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 98) (- 0 99)) (and (<= 0 |j#6@0|) (< |j#6@0| (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 98) 94) anon80_Then_correct) (=> (= (ControlFlow 0 98) 97) anon80_Else_correct))))))))
(let ((anon79_Else_correct  (=> (and (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|)))) (LitInt (- 0 1))) (forall ((|k#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |k#1@@0|) (< |k#1@@0| |i#6@2|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#1@@0|)))) |j#6@0|)) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#1@@0|))))
))) (= (ControlFlow 0 87) 85)) anon35_correct)))
(let ((anon78_Else_correct  (=> (not (and (<= (LitInt 0) |k#0@0|) (< |k#0@0| |i#6@2|))) (and (=> (= (ControlFlow 0 106) 98) anon79_Then_correct) (=> (= (ControlFlow 0 106) 87) anon79_Else_correct)))))
(let ((anon78_Then_correct  (=> (and (<= (LitInt 0) |k#0@0|) (< |k#0@0| |i#6@2|)) (and (=> (= (ControlFlow 0 103) (- 0 105)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 103) (- 0 104)) (and (<= 0 |k#0@0|) (< |k#0@0| (_System.array.Length |a#0@@3|)))) (and (=> (= (ControlFlow 0 103) 98) anon79_Then_correct) (=> (= (ControlFlow 0 103) 87) anon79_Else_correct))))))))
(let ((anon77_Else_correct  (=> (< |k#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 108) 103) anon78_Then_correct) (=> (= (ControlFlow 0 108) 106) anon78_Else_correct)))))
(let ((anon77_Then_correct  (=> (<= (LitInt 0) |k#0@0|) (and (=> (= (ControlFlow 0 107) 103) anon78_Then_correct) (=> (= (ControlFlow 0 107) 106) anon78_Else_correct)))))
(let ((anon76_Then_correct  (and (=> (= (ControlFlow 0 109) 107) anon77_Then_correct) (=> (= (ControlFlow 0 109) 108) anon77_Else_correct))))
(let ((anon75_Then_correct  (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|)))) (LitInt (- 0 1))) (and (=> (= (ControlFlow 0 110) 109) anon76_Then_correct) (=> (= (ControlFlow 0 110) 102) anon76_Else_correct)))))
(let ((anon75_Else_correct  (=> (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#6@0|)))) (LitInt (- 0 1)))) (not true)) (and (=> (= (ControlFlow 0 101) 98) anon79_Then_correct) (=> (= (ControlFlow 0 101) 87) anon79_Else_correct)))))
(let ((anon74_Then_correct  (=> (and (<= (LitInt 0) |j#6@0|) (< |j#6@0| (_System.array.Length $nw@0))) (and (=> (= (ControlFlow 0 111) (- 0 113)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 111) (- 0 112)) (and (<= 0 |j#6@0|) (< |j#6@0| (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 111) 110) anon75_Then_correct) (=> (= (ControlFlow 0 111) 101) anon75_Else_correct))))))))
(let ((anon74_Else_correct  (=> (and (not (and (<= (LitInt 0) |j#6@0|) (< |j#6@0| (_System.array.Length $nw@0)))) (= (ControlFlow 0 86) 85)) anon35_correct)))
(let ((anon73_Else_correct  (=> (< |j#6@0| (LitInt 0)) (and (=> (= (ControlFlow 0 116) 111) anon74_Then_correct) (=> (= (ControlFlow 0 116) 86) anon74_Else_correct)))))
(let ((anon73_Then_correct  (=> (<= (LitInt 0) |j#6@0|) (and (=> (= (ControlFlow 0 114) (- 0 115)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 114) 111) anon74_Then_correct) (=> (= (ControlFlow 0 114) 86) anon74_Else_correct))))))
(let ((anon72_Then_correct  (and (=> (= (ControlFlow 0 117) 114) anon73_Then_correct) (=> (= (ControlFlow 0 117) 116) anon73_Else_correct))))
(let ((anon72_Else_correct true))
(let ((anon19_correct  (=> (and (<= (LitInt 0) |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|))) (and (=> (= (ControlFlow 0 118) 117) anon72_Then_correct) (=> (= (ControlFlow 0 118) 63) anon72_Else_correct)))))
(let ((anon71_Else_correct  (=> (and (< |i#6@2| (LitInt 0)) (= (ControlFlow 0 121) 118)) anon19_correct)))
(let ((anon71_Then_correct  (=> (<= (LitInt 0) |i#6@2|) (and (=> (= (ControlFlow 0 119) (- 0 120)) (or (not (= |a#0@@3| null)) (not true))) (=> (= (ControlFlow 0 119) 118) anon19_correct)))))
(let ((anon70_Then_correct  (=> (not |$w$loop#1@0|) (and (=> (= (ControlFlow 0 122) 119) anon71_Then_correct) (=> (= (ControlFlow 0 122) 121) anon71_Else_correct)))))
(let ((anon60_correct  (=> (= |i#6@3| (+ |i#6@2| 1)) (and (=> (= (ControlFlow 0 21) (- 0 27)) (or (<= 0 |$decr$loop#10@1|) (= (- (_System.array.Length |a#0@@3|) |i#6@3|) |$decr$loop#10@1|))) (=> (or (<= 0 |$decr$loop#10@1|) (= (- (_System.array.Length |a#0@@3|) |i#6@3|) |$decr$loop#10@1|)) (and (=> (= (ControlFlow 0 21) (- 0 26)) (< (- (_System.array.Length |a#0@@3|) |i#6@3|) |$decr$loop#10@1|)) (=> (< (- (_System.array.Length |a#0@@3|) |i#6@3|) |$decr$loop#10@1|) (=> (=> (and (<= (LitInt 0) |i#6@3|) (< |i#6@3| (_System.array.Length |a#0@@3|))) (=> (forall ((|j#7@@0| Int) ) (!  (=> (and (<= (LitInt 0) |j#7@@0|) (< |j#7@@0| (_System.array.Length $nw@0))) (or (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@0|)))) (LitInt (- 0 1))) (forall ((|k#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@0|) (< |k#2@@0| |i#6@3|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#2@@0|)))) |j#7@@0|)) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#2@@0|))))
))) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@0|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@0|)))) |i#6@3|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@0|)))))))) |j#7@@0|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@0|))))
)) (and (=> (= |p#0@2| |q#0@3|) (|_module.__default.IsDuplicate#canCall| $Heap@5 |a#0@@3| |p#0@2|)) (=> (=> (= |p#0@2| |q#0@3|) (_module.__default.IsDuplicate $Heap@5 |a#0@@3| |p#0@2|)) (forall ((|k#4@@1| Int) ) (!  (and (=> (and (<= (LitInt 0) |k#4@@1|) (< |k#4@@1| |i#6@3|)) (|_module.__default.IsPrefixDuplicate#canCall| $Heap@5 |a#0@@3| |i#6@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#4@@1|)))))) (=> (=> (and (and (<= (LitInt 0) |k#4@@1|) (< |k#4@@1| |i#6@3|)) (_module.__default.IsPrefixDuplicate $Heap@5 |a#0@@3| |i#6@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#4@@1|)))))) (= |p#0@2| |q#0@3|)) (=> (and (<= (LitInt 0) |k#4@@1|) (< |k#4@@1| |i#6@3|)) (|_module.__default.IsPrefixDuplicate#canCall| $Heap@5 |a#0@@3| |i#6@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#4@@1|))))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |k#4@@1|))))
)))))) (and (=> (= (ControlFlow 0 21) (- 0 25)) (=> |$w$loop#1@0| (<= (LitInt 0) |i#6@3|))) (=> (=> |$w$loop#1@0| (<= (LitInt 0) |i#6@3|)) (and (=> (= (ControlFlow 0 21) (- 0 24)) (=> |$w$loop#1@0| (< |i#6@3| (_System.array.Length |a#0@@3|)))) (=> (=> |$w$loop#1@0| (< |i#6@3| (_System.array.Length |a#0@@3|))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (=> |$w$loop#1@0| (forall ((|j#7@@1| Int) ) (!  (=> (and (<= (LitInt 0) |j#7@@1|) (< |j#7@@1| (_System.array.Length $nw@0))) (or (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@1|)))) (LitInt (- 0 1))) (forall ((|k#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@1|) (< |k#2@@1| |i#6@3|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#2@@1|)))) |j#7@@1|)) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#2@@1|))))
))) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@1|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@1|)))) |i#6@3|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@1|)))))))) |j#7@@1|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@1|))))
)))) (=> (=> |$w$loop#1@0| (forall ((|j#7@@2| Int) ) (!  (=> (and (<= (LitInt 0) |j#7@@2|) (< |j#7@@2| (_System.array.Length $nw@0))) (or (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@2|)))) (LitInt (- 0 1))) (forall ((|k#2@@2| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@2|) (< |k#2@@2| |i#6@3|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#2@@2|)))) |j#7@@2|)) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#2@@2|))))
))) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@2|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@2|)))) |i#6@3|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@2|)))))))) |j#7@@2|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) (IndexField |j#7@@2|))))
))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (=> |$w$loop#1@0| (=> (= |p#0@2| |q#0@3|) (=> (|_module.__default.IsDuplicate#canCall| $Heap@5 |a#0@@3| |p#0@2|) (or (_module.__default.IsDuplicate $Heap@5 |a#0@@3| |p#0@2|) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@5 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@2|) (or (_module.__default.IsPrefixDuplicate $Heap@5 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@2|) (exists ((|i#7| Int) (|j#8| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7|) (< |i#7| |j#8|)) (< |j#8| (_System.array.Length |a#0@@3|))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |i#7|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |j#8|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |j#8|)))) |p#0@2|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |j#8|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |i#7|))))
))))))))) (=> (=> |$w$loop#1@0| (=> (= |p#0@2| |q#0@3|) (=> (|_module.__default.IsDuplicate#canCall| $Heap@5 |a#0@@3| |p#0@2|) (or (_module.__default.IsDuplicate $Heap@5 |a#0@@3| |p#0@2|) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@5 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@2|) (or (_module.__default.IsPrefixDuplicate $Heap@5 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@2|) (exists ((|i#7@@0| Int) (|j#8@@0| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@0|) (< |i#7@@0| |j#8@@0|)) (< |j#8@@0| (_System.array.Length |a#0@@3|))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |i#7@@0|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |j#8@@0|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |j#8@@0|)))) |p#0@2|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |j#8@@0|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |i#7@@0|))))
)))))))) (=> (= (ControlFlow 0 21) (- 0 20)) (=> |$w$loop#1@0| (forall ((|k#4@@2| Int) ) (!  (and (=> (and (and (<= (LitInt 0) |k#4@@2|) (< |k#4@@2| |i#6@3|)) (_module.__default.IsPrefixDuplicate $Heap@5 |a#0@@3| |i#6@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#4@@2|)))))) (= |p#0@2| |q#0@3|)) (=> (and (and (<= (LitInt 0) |k#4@@2|) (< |k#4@@2| |i#6@3|)) (_module.__default.IsPrefixDuplicate $Heap@5 |a#0@@3| |i#6@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#4@@2|)))))) (= |q#0@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0@@3|) (IndexField |k#4@@2|)))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |k#4@@2|))))
))))))))))))))))))))
(let ((anon59_correct  (=> (and (and (= $Heap@5 $Heap@3) (= |p#0@2| |p#0@1|)) (and (= |q#0@3| |q#0@2|) (= (ControlFlow 0 34) 21))) anon60_correct)))
(let ((anon92_Then_correct  (=> (and (and (= |p#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (= |p#0@1| |p#0@0|)) (and (= |q#0@2| |q#0@0|) (= (ControlFlow 0 40) 34))) anon59_correct)))
(let ((anon91_Then_correct  (=> (or (not (= |p#0@0| |q#0@0|)) (not true)) (and (=> (= (ControlFlow 0 35) (- 0 39)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 35) (- 0 38)) (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|)))) (=> (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|))) (=> (= |$rhs#1_1_0_0@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (and (=> (= (ControlFlow 0 35) (- 0 37)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|)))) (=> (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|))) (=> (and (and (= |$rhs#1_1_0_1@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (= |p#0@1| |$rhs#1_1_0_0@1|)) (and (= |q#0@2| |$rhs#1_1_0_1@1|) (= (ControlFlow 0 35) 34))) anon59_correct)))))))))))))
(let ((anon89_Then_correct  (=> (= |k#1_0@1| (LitInt (- 0 1))) (and (=> (= (ControlFlow 0 28) (- 0 33)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 28) (- 0 32)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 28) (- 0 31)) (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|)))) (=> (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|))) (and (=> (= (ControlFlow 0 28) (- 0 30)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))) (_System.array.Length $nw@0)))) (=> (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))) (_System.array.Length $nw@0))) (and (=> (= (ControlFlow 0 28) (- 0 29)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))))))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))))) (=> (and (= $Heap@4 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) ($Box intType (int_2_U |i#6@2|))))) ($IsGoodHeap $Heap@4)) (=> (and (and (= $Heap@5 $Heap@4) (= |p#0@2| |p#0@0|)) (and (= |q#0@3| |q#0@0|) (= (ControlFlow 0 28) 21))) anon60_correct)))))))))))))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 13) (- 0 15)) (or (not (= |p#0@3| |q#0@4|)) (not true))) (=> (or (not (= |p#0@3| |q#0@4|)) (not true)) (and (=> (= (ControlFlow 0 13) (- 0 14)) (=> (|_module.__default.IsDuplicate#canCall| $Heap@6 |a#0@@3| |p#0@3|) (or (_module.__default.IsDuplicate $Heap@6 |a#0@@3| |p#0@3|) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@6 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@3|) (or (_module.__default.IsPrefixDuplicate $Heap@6 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@3|) (exists ((|i#4| Int) (|j#2| Int) ) (!  (and (and (and (<= (LitInt 0) |i#4|) (< |i#4| |j#2|)) (< |j#2| (_System.array.Length |a#0@@3|))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |i#4|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |j#2|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |j#2|)))) |p#0@3|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |j#2|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |i#4|))))
))))))) (=> (=> (|_module.__default.IsDuplicate#canCall| $Heap@6 |a#0@@3| |p#0@3|) (or (_module.__default.IsDuplicate $Heap@6 |a#0@@3| |p#0@3|) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@6 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@3|) (or (_module.__default.IsPrefixDuplicate $Heap@6 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@3|) (exists ((|i#4@@0| Int) (|j#2@@0| Int) ) (!  (and (and (and (<= (LitInt 0) |i#4@@0|) (< |i#4@@0| |j#2@@0|)) (< |j#2@@0| (_System.array.Length |a#0@@3|))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |i#4@@0|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |j#2@@0|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |j#2@@0|)))) |p#0@3|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |j#2@@0|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |i#4@@0|))))
)))))) (=> (= (ControlFlow 0 13) (- 0 12)) (=> (|_module.__default.IsDuplicate#canCall| $Heap@6 |a#0@@3| |q#0@4|) (or (_module.__default.IsDuplicate $Heap@6 |a#0@@3| |q#0@4|) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@6 |a#0@@3| (_System.array.Length |a#0@@3|) |q#0@4|) (or (_module.__default.IsPrefixDuplicate $Heap@6 |a#0@@3| (_System.array.Length |a#0@@3|) |q#0@4|) (exists ((|i#5| Int) (|j#3| Int) ) (!  (and (and (and (<= (LitInt 0) |i#5|) (< |i#5| |j#3|)) (< |j#3| (_System.array.Length |a#0@@3|))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |i#5|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |j#3|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |j#3|)))) |q#0@4|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |j#3|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#0@@3|) (IndexField |i#5|))))
)))))))))))))
(let ((anon92_Else_correct  (=> (or (not (= |p#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))))) (not true)) (and (=> (= (ControlFlow 0 17) (- 0 19)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|)))) (=> (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|))) (=> (= |q#0@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (=> (and (and (= $Heap@6 $Heap@3) (= |p#0@3| |p#0@0|)) (and (= |q#0@4| |q#0@1|) (= (ControlFlow 0 17) 13))) GeneratedUnifiedExit_correct)))))))))
(let ((anon91_Else_correct  (=> (= |p#0@0| |q#0@0|) (and (=> (= (ControlFlow 0 41) (- 0 43)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 41) (- 0 42)) (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|)))) (=> (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|))) (and (=> (= (ControlFlow 0 41) 40) anon92_Then_correct) (=> (= (ControlFlow 0 41) 17) anon92_Else_correct)))))))))
(let ((anon52_correct  (=> (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#1_0@1|))))) (|_module.__default.IsDuplicate#canCall| $Heap@3 |a#0@@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))))) (and (=> (= (ControlFlow 0 44) (- 0 46)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#1_0@1|)))))) (and (=> (= (ControlFlow 0 44) (- 0 45)) (=> (|_module.__default.IsDuplicate#canCall| $Heap@3 |a#0@@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (or (_module.__default.IsDuplicate $Heap@3 |a#0@@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@3 |a#0@@3| (_System.array.Length |a#0@@3|) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (or (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| (_System.array.Length |a#0@@3|) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (exists ((|i#1_1_0| Int) (|j#1_1_0| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1_1_0|) (< |i#1_1_0| |j#1_1_0|)) (< |j#1_1_0| (_System.array.Length |a#0@@3|))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#1_1_0|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |j#1_1_0|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |j#1_1_0|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |j#1_1_0|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#1_1_0|))))
))))))) (=> (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#1_0@1|))))) (_module.__default.IsDuplicate $Heap@3 |a#0@@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))))) (and (=> (= (ControlFlow 0 44) 35) anon91_Then_correct) (=> (= (ControlFlow 0 44) 41) anon91_Else_correct))))))))
(let ((anon90_Else_correct  (=> (and (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#1_0@1|)))))) (not true)) (= (ControlFlow 0 50) 44)) anon52_correct)))
(let ((anon90_Then_correct  (=> (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#1_0@1|))))) ($IsAlloc refType |a#0@@3| (Tclass._System.array TInt) $Heap@3)) (and (=> (= (ControlFlow 0 47) (- 0 49)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 47) (- 0 48)) (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|)))) (=> (and (and (= |##p#1_1_0@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) ($IsAlloc intType (int_2_U |##p#1_1_0@1|) TInt $Heap@3)) (and (|_module.__default.IsDuplicate#canCall| $Heap@3 |a#0@@3| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (= (ControlFlow 0 47) 44))) anon52_correct)))))))
(let ((anon89_Else_correct  (=> (or (not (= |k#1_0@1| (LitInt (- 0 1)))) (not true)) (and (=> (= (ControlFlow 0 51) (- 0 55)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 51) (- 0 54)) (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|)))) (and (=> (= (ControlFlow 0 51) (- 0 53)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 51) (- 0 52)) (and (<= 0 |k#1_0@1|) (< |k#1_0@1| (_System.array.Length |a#0@@3|)))) (and (=> (= (ControlFlow 0 51) 47) anon90_Then_correct) (=> (= (ControlFlow 0 51) 50) anon90_Else_correct)))))))))))
(let ((anon88_Else_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (= |$decr$loop#10@1| (- (_System.array.Length |a#0@@3|) |i#6@2|))) (and (=> (= (ControlFlow 0 56) (- 0 61)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 56) (- 0 60)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 56) (- 0 59)) (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|)))) (=> (and (<= 0 |i#6@2|) (< |i#6@2| (_System.array.Length |a#0@@3|))) (and (=> (= (ControlFlow 0 56) (- 0 58)) (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))) (_System.array.Length $nw@0)))) (=> (and (<= 0 (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|)))) (_System.array.Length $nw@0))) (=> (= |k#1_0@1| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#6@2|))))))))) (and (=> (= (ControlFlow 0 56) (- 0 57)) (< |k#1_0@1| |i#6@2|)) (=> (< |k#1_0@1| |i#6@2|) (and (=> (= (ControlFlow 0 56) 28) anon89_Then_correct) (=> (= (ControlFlow 0 56) 51) anon89_Else_correct))))))))))))))))
(let ((anon88_Then_correct  (=> (not (U_2_bool (Lit boolType (bool_2_U true)))) (=> (and (and (= $Heap@6 $Heap@3) (= |p#0@3| |p#0@0|)) (and (= |q#0@4| |q#0@0|) (= (ControlFlow 0 16) 13))) GeneratedUnifiedExit_correct))))
(let ((anon70_Else_correct  (=> |$w$loop#1@0| (and (=> (= (ControlFlow 0 62) 16) anon88_Then_correct) (=> (= (ControlFlow 0 62) 56) anon88_Else_correct)))))
(let ((anon69_LoopBody_correct  (and (=> (= (ControlFlow 0 123) 122) anon70_Then_correct) (=> (= (ControlFlow 0 123) 62) anon70_Else_correct))))
(let ((anon69_LoopDone_correct true))
(let ((anon69_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (and (and (and (and (not false) (<= 0 |i#6@2|)) |$w$loop#0@0|) (= |$rhs#0@0| 0)) (= |$rhs#1@0| 0)) (= |$rhs#2@0| 1)) (and (and (=> |$w$loop#1@0| (<= (LitInt 0) |i#6@2|)) (=> |$w$loop#1@0| (< |i#6@2| (_System.array.Length |a#0@@3|)))) (and (=> |$w$loop#1@0| (forall ((|j#7@@3| Int) ) (!  (=> (and (<= (LitInt 0) |j#7@@3|) (< |j#7@@3| (_System.array.Length $nw@0))) (or (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7@@3|)))) (LitInt (- 0 1))) (forall ((|k#2@@3| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@3|) (< |k#2@@3| |i#6@2|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#2@@3|)))) |j#7@@3|)) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#2@@3|))))
))) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7@@3|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7@@3|)))) |i#6@2|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7@@3|)))))))) |j#7@@3|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) (IndexField |j#7@@3|))))
))) (=> |$w$loop#1@0| (=> (= |p#0@0| |q#0@0|) (|_module.__default.IsDuplicate#canCall| $Heap@3 |a#0@@3| |p#0@0|)))))) (and (and (and (=> |$w$loop#1@0| (=> (= |p#0@0| |q#0@0|) (=> (|_module.__default.IsDuplicate#canCall| $Heap@3 |a#0@@3| |p#0@0|) (or (_module.__default.IsDuplicate $Heap@3 |a#0@@3| |p#0@0|) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@3 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@0|) (or (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@0|) (exists ((|i#7@@1| Int) (|j#8@@1| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@1|) (< |i#7@@1| |j#8@@1|)) (< |j#8@@1| (_System.array.Length |a#0@@3|))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#7@@1|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |j#8@@1|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |j#8@@1|)))) |p#0@0|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |j#8@@1|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |i#7@@1|))))
)))))))) (=> |$w$loop#1@0| (=> (= |p#0@0| |q#0@0|) (and (|_module.__default.IsDuplicate#canCall| $Heap@3 |a#0@@3| |p#0@0|) (and (_module.__default.IsDuplicate $Heap@3 |a#0@@3| |p#0@0|) (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| (_System.array.Length |a#0@@3|) |p#0@0|)))))) (and (=> |$w$loop#1@0| (forall ((|k#4@@3| Int) ) (!  (and (=> (and (<= (LitInt 0) |k#4@@3|) (< |k#4@@3| |i#6@2|)) (|_module.__default.IsPrefixDuplicate#canCall| $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4@@3|)))))) (=> (=> (and (and (<= (LitInt 0) |k#4@@3|) (< |k#4@@3| |i#6@2|)) (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4@@3|)))))) (= |p#0@0| |q#0@0|)) (=> (and (<= (LitInt 0) |k#4@@3|) (< |k#4@@3| |i#6@2|)) (|_module.__default.IsPrefixDuplicate#canCall| $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4@@3|))))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |k#4@@3|))))
))) (=> |$w$loop#1@0| (forall ((|k#4@@4| Int) ) (!  (and (=> (and (and (<= (LitInt 0) |k#4@@4|) (< |k#4@@4| |i#6@2|)) (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4@@4|)))))) (= |p#0@0| |q#0@0|)) (=> (and (and (<= (LitInt 0) |k#4@@4|) (< |k#4@@4| |i#6@2|)) (_module.__default.IsPrefixDuplicate $Heap@3 |a#0@@3| |i#6@2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4@@4|)))))) (= |q#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0@@3|) (IndexField |k#4@@4|)))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |k#4@@4|))))
))))) (and (and (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@8) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@8))
)) ($HeapSucc $Heap@1 $Heap@3)) (and (forall (($o@@9 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@9) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@9) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@9) $f@@2)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@9 $f@@2))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@9) $f@@2))
)) (<= (- (_System.array.Length |a#0@@3|) |i#6@2|) |$decr_init$loop#10@0|))))) (and (=> (= (ControlFlow 0 124) 11) anon69_LoopDone_correct) (=> (= (ControlFlow 0 124) 123) anon69_LoopBody_correct))))))
(let ((anon68_Then_correct  (=> (<= (_System.array.Length $nw@0) |i#6@1|) (=> (and (and (= |$rhs#0@0| (LitInt 0)) (= |$rhs#1@0| (LitInt 0))) (and (= |$rhs#2@0| (LitInt 1)) (= |$decr_init$loop#10@0| (- (_System.array.Length |a#0@@3|) |$rhs#0@0|)))) (and (=> (= (ControlFlow 0 125) (- 0 130)) (=> |$w$loop#1@0| (<= (LitInt 0) |$rhs#0@0|))) (=> (=> |$w$loop#1@0| (<= (LitInt 0) |$rhs#0@0|)) (and (=> (= (ControlFlow 0 125) (- 0 129)) (=> |$w$loop#1@0| (< |$rhs#0@0| (_System.array.Length |a#0@@3|)))) (=> (=> |$w$loop#1@0| (< |$rhs#0@0| (_System.array.Length |a#0@@3|))) (and (=> (= (ControlFlow 0 125) (- 0 128)) (=> |$w$loop#1@0| (forall ((|j#7@@4| Int) ) (!  (=> (and (<= (LitInt 0) |j#7@@4|) (< |j#7@@4| (_System.array.Length $nw@0))) (or (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@4|)))) (LitInt (- 0 1))) (forall ((|k#2@@4| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@4|) (< |k#2@@4| |$rhs#0@0|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#2@@4|)))) |j#7@@4|)) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#2@@4|))))
))) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@4|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@4|)))) |$rhs#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@4|)))))))) |j#7@@4|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@4|))))
)))) (=> (=> |$w$loop#1@0| (forall ((|j#7@@5| Int) ) (!  (=> (and (<= (LitInt 0) |j#7@@5|) (< |j#7@@5| (_System.array.Length $nw@0))) (or (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@5|)))) (LitInt (- 0 1))) (forall ((|k#2@@5| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@5|) (< |k#2@@5| |$rhs#0@0|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#2@@5|)))) |j#7@@5|)) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#2@@5|))))
))) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@5|))))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@5|)))) |$rhs#0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@5|)))))))) |j#7@@5|))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#7@@5|))))
))) (and (=> (= (ControlFlow 0 125) (- 0 127)) (=> |$w$loop#1@0| (=> (= |$rhs#1@0| |$rhs#2@0|) (=> (|_module.__default.IsDuplicate#canCall| $Heap@1 |a#0@@3| |$rhs#1@0|) (or (_module.__default.IsDuplicate $Heap@1 |a#0@@3| |$rhs#1@0|) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@1 |a#0@@3| (_System.array.Length |a#0@@3|) |$rhs#1@0|) (or (_module.__default.IsPrefixDuplicate $Heap@1 |a#0@@3| (_System.array.Length |a#0@@3|) |$rhs#1@0|) (exists ((|i#7@@2| Int) (|j#8@@2| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@2|) (< |i#7@@2| |j#8@@2|)) (< |j#8@@2| (_System.array.Length |a#0@@3|))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |i#7@@2|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |j#8@@2|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |j#8@@2|)))) |$rhs#1@0|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |j#8@@2|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |i#7@@2|))))
))))))))) (=> (=> |$w$loop#1@0| (=> (= |$rhs#1@0| |$rhs#2@0|) (=> (|_module.__default.IsDuplicate#canCall| $Heap@1 |a#0@@3| |$rhs#1@0|) (or (_module.__default.IsDuplicate $Heap@1 |a#0@@3| |$rhs#1@0|) (=> (|_module.__default.IsPrefixDuplicate#canCall| $Heap@1 |a#0@@3| (_System.array.Length |a#0@@3|) |$rhs#1@0|) (or (_module.__default.IsPrefixDuplicate $Heap@1 |a#0@@3| (_System.array.Length |a#0@@3|) |$rhs#1@0|) (exists ((|i#7@@3| Int) (|j#8@@3| Int) ) (!  (and (and (and (<= (LitInt 0) |i#7@@3|) (< |i#7@@3| |j#8@@3|)) (< |j#8@@3| (_System.array.Length |a#0@@3|))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |i#7@@3|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |j#8@@3|))))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |j#8@@3|)))) |$rhs#1@0|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |j#8@@3|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |i#7@@3|))))
)))))))) (and (=> (= (ControlFlow 0 125) (- 0 126)) (=> |$w$loop#1@0| (forall ((|k#4@@5| Int) ) (!  (and (=> (and (and (<= (LitInt 0) |k#4@@5|) (< |k#4@@5| |$rhs#0@0|)) (_module.__default.IsPrefixDuplicate $Heap@1 |a#0@@3| |$rhs#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#4@@5|)))))) (= |$rhs#1@0| |$rhs#2@0|)) (=> (and (and (<= (LitInt 0) |k#4@@5|) (< |k#4@@5| |$rhs#0@0|)) (_module.__default.IsPrefixDuplicate $Heap@1 |a#0@@3| |$rhs#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#4@@5|)))))) (= |$rhs#2@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#4@@5|)))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |k#4@@5|))))
)))) (=> (=> |$w$loop#1@0| (forall ((|k#4@@6| Int) ) (!  (and (=> (and (and (<= (LitInt 0) |k#4@@6|) (< |k#4@@6| |$rhs#0@0|)) (_module.__default.IsPrefixDuplicate $Heap@1 |a#0@@3| |$rhs#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#4@@6|)))))) (= |$rhs#1@0| |$rhs#2@0|)) (=> (and (and (<= (LitInt 0) |k#4@@6|) (< |k#4@@6| |$rhs#0@0|)) (_module.__default.IsPrefixDuplicate $Heap@1 |a#0@@3| |$rhs#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#4@@6|)))))) (= |$rhs#2@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0@@3|) (IndexField |k#4@@6|)))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |k#4@@6|))))
))) (=> (= (ControlFlow 0 125) 124) anon69_LoopHead_correct)))))))))))))))
(let ((anon68_Else_correct  (=> (and (< |i#6@1| (_System.array.Length $nw@0)) (= |$decr$loop#00@1| (- (_System.array.Length $nw@0) |i#6@1|))) (and (=> (= (ControlFlow 0 3) (- 0 10)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 9)) (and (<= 0 |i#6@1|) (< |i#6@1| (_System.array.Length $nw@0)))) (=> (and (<= 0 |i#6@1|) (< |i#6@1| (_System.array.Length $nw@0))) (=> (= $index0@1 (IndexField |i#6@1|)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 $index0@1))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 $index0@1)) (=> (and (and (= |$rhs#0_0@1| (LitInt (- 0 1))) (= |$rhs#0_1@1| (+ |i#6@1| 1))) (and (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) $index0@1 ($Box intType (int_2_U |$rhs#0_0@1|))))) ($IsGoodHeap $Heap@2))) (and (=> (= (ControlFlow 0 3) (- 0 7)) (or (<= 0 |$decr$loop#00@1|) (= (- (_System.array.Length $nw@0) |$rhs#0_1@1|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- (_System.array.Length $nw@0) |$rhs#0_1@1|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (< (- (_System.array.Length $nw@0) |$rhs#0_1@1|) |$decr$loop#00@1|)) (=> (< (- (_System.array.Length $nw@0) |$rhs#0_1@1|) |$decr$loop#00@1|) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0_1@1|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0_1@1|)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#0@0| (<= |$rhs#0_1@1| (_System.array.Length $nw@0)))) (=> (=> |$w$loop#0@0| (<= |$rhs#0_1@1| (_System.array.Length $nw@0))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#0@0| (forall ((|j#5@@0| Int) ) (!  (=> (and (<= (LitInt 0) |j#5@@0|) (< |j#5@@0| |$rhs#0_1@1|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#5@@0|)))) (LitInt (- 0 1))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |j#5@@0|))))
)))))))))))))))))))))))
(let ((anon62_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 131) (- 0 132)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 131) 125) anon68_Then_correct) (=> (= (ControlFlow 0 131) 3) anon68_Else_correct)))))))
(let ((anon61_LoopBody_correct  (and (=> (= (ControlFlow 0 149) 148) anon62_Then_correct) (=> (= (ControlFlow 0 149) 131) anon62_Else_correct))))
(let ((anon61_LoopDone_correct true))
(let ((anon61_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (and (and (not false) (<= 0 |i#6@1|)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#6@1|))) (and (=> |$w$loop#0@0| (<= |i#6@1| (_System.array.Length $nw@0))) (=> |$w$loop#0@0| (forall ((|j#5@@1| Int) ) (!  (=> (and (<= (LitInt 0) |j#5@@1|) (< |j#5@@1| |i#6@1|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#5@@1|)))) (LitInt (- 0 1))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#5@@1|))))
))))) (and (and (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@10) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@10)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@10))
)) ($HeapSucc $Heap@0 $Heap@1)) (and (forall (($o@@11 T@U) ($f@@3 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@11) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@11) $f@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@11) $f@@3)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@11 $f@@3))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@11) $f@@3))
)) (<= (- (_System.array.Length $nw@0) |i#6@1|) |$decr_init$loop#00@0|)))) (and (=> (= (ControlFlow 0 150) 1) anon61_LoopDone_correct) (=> (= (ControlFlow 0 150) 149) anon61_LoopBody_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#2| null $Heap@@1 alloc false)) (and (=> (= (ControlFlow 0 151) (- 0 156)) (or (not (= |a#0@@3| null)) (not true))) (=> (or (not (= |a#0@@3| null)) (not true)) (and (=> (= (ControlFlow 0 151) (- 0 155)) (<= 0 (- (_System.array.Length |a#0@@3|) 2))) (=> (<= 0 (- (_System.array.Length |a#0@@3|) 2)) (=> (and (and (and (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 (Tclass._System.array? TInt))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $nw@0) alloc))))) (and (= (_System.array.Length $nw@0) (- (_System.array.Length |a#0@@3|) 2)) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@@1 $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $nw@0) alloc ($Box boolType (bool_2_U true))))))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= |i#6@0| (LitInt 0)) (= |$decr_init$loop#00@0| (- (_System.array.Length $nw@0) |i#6@0|))))) (and (=> (= (ControlFlow 0 151) (- 0 154)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#6@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#6@0|)) (and (=> (= (ControlFlow 0 151) (- 0 153)) (=> |$w$loop#0@0| (<= |i#6@0| (_System.array.Length $nw@0)))) (=> (=> |$w$loop#0@0| (<= |i#6@0| (_System.array.Length $nw@0))) (and (=> (= (ControlFlow 0 151) (- 0 152)) (=> |$w$loop#0@0| (forall ((|j#5@@2| Int) ) (!  (=> (and (<= (LitInt 0) |j#5@@2|) (< |j#5@@2| |i#6@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#5@@2|)))) (LitInt (- 0 1))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#5@@2|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|j#5@@3| Int) ) (!  (=> (and (<= (LitInt 0) |j#5@@3|) (< |j#5@@3| |i#6@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#5@@3|)))) (LitInt (- 0 1))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@0) (IndexField |j#5@@3|))))
))) (=> (= (ControlFlow 0 151) 150) anon61_LoopHead_correct)))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (and ($Is refType |a#0@@3| (Tclass._System.array TInt)) ($IsAlloc refType |a#0@@3| (Tclass._System.array TInt) $Heap@@1))) (=> (and (and (and (and ($Is refType |d#0| (Tclass._System.array TInt)) ($IsAlloc refType |d#0| (Tclass._System.array TInt) $Heap@@1)) true) (= 2 $FunctionContextHeight)) (and (and (<= (LitInt 4) (_System.array.Length |a#0@@3|)) (exists ((|p#2| Int) (|q#2| Int) ) (!  (and (and (or (not (= |p#2| |q#2|)) (not true)) (_module.__default.IsDuplicate $Heap@@1 |a#0@@3| |p#2|)) (_module.__default.IsDuplicate $Heap@@1 |a#0@@3| |q#2|))
 :pattern ( (_module.__default.IsDuplicate $Heap@@1 |a#0@@3| |q#2|) (_module.__default.IsDuplicate $Heap@@1 |a#0@@3| |p#2|))
))) (and (forall ((|i#1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (_System.array.Length |a#0@@3|))) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |i#1|)))))) (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (_System.array.Length |a#0@@3|))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |i#1|)))) (- (_System.array.Length |a#0@@3|) 2))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |a#0@@3|) (IndexField |i#1|))))
)) (= (ControlFlow 0 157) 151)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
