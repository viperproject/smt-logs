(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@31 () Bool)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@40 (T@U T@U T@U) Bool)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 (T@U) Bool)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@59 (T@U) Bool)
(declare-fun $generated@@64 (T@U T@U) Int)
(declare-fun $generated@@72 (T@U) Int)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@89 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@90 (T@T T@T) T@T)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@T) T@T)
(declare-fun $generated@@94 (T@T) T@T)
(declare-fun $generated@@145 (T@U) T@U)
(declare-fun $generated@@146 (T@U) Bool)
(declare-fun $generated@@148 () Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@28) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@30 T@U) ) (!  (=> (or ($generated@@24 $generated@@30) (and (< 1 $generated@@22) ($generated@@25 $generated@@30 $generated@@26))) ($generated@@27 $generated@@28 ($generated@@23 $generated@@30) ($generated@@29 $generated)))
 :pattern ( ($generated@@23 $generated@@30))
))))
(assert (= ($generated@@5 $generated@@34) 4))
(assert  (=> (<= 2 $generated@@22) (=> (or $generated@@31 (< 2 $generated@@22)) (and ($generated@@32 ($generated@@23 ($generated@@33 $generated@@34 $generated@@35)) $generated@@36) ($generated@@25 $generated@@35 $generated@@26)))))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> ($generated@@27 $generated@@28 $generated@@38 ($generated@@29 $generated@@39)) ($generated@@37 $generated@@38))
 :pattern ( ($generated@@27 $generated@@28 $generated@@38 ($generated@@29 $generated@@39)))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@40 $generated@@42 $generated@@26 $generated@@43) ($generated@@40 $generated@@42 $generated@@41 $generated@@43))
 :pattern ( ($generated@@40 $generated@@42 $generated@@26 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@45 $generated@@46) ($generated@@40 $generated@@44 $generated@@41 $generated@@46))
 :pattern ( ($generated@@40 $generated@@44 $generated@@41 $generated@@46))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@33 $generated@@48 $generated@@47) $generated@@47)
 :pattern ( ($generated@@33 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 ($generated@@49 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@49 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@40 ($generated@@50 $generated@@57 $generated@@54) $generated@@55 $generated@@56) ($generated@@53 $generated@@57 $generated@@54 $generated@@55 $generated@@56))
 :pattern ( ($generated@@40 ($generated@@50 $generated@@57 $generated@@54) $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@60 T@U) ) (!  (=> (or ($generated@@59 $generated@@60) ($generated@@25 $generated@@60 $generated@@41)) ($generated@@27 $generated@@28 ($generated@@58 $generated@@60) ($generated@@29 $generated)))
 :pattern ( ($generated@@58 $generated@@60))
)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@61 T@U) ) (!  (=> (and (or $generated@@31 (< 2 $generated@@22)) ($generated@@45 $generated@@61)) ($generated@@40 $generated@@35 $generated@@26 $generated@@61))
 :pattern ( ($generated@@40 $generated@@35 $generated@@26 $generated@@61))
))))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> ($generated@@32 $generated@@62 $generated@@63) (= $generated@@62 $generated@@63))
 :pattern ( ($generated@@32 $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@65 ($generated@@29 $generated@@66)) (forall (($generated@@67 T@U) ) (!  (=> (< 0 ($generated@@64 $generated@@65 $generated@@67)) ($generated@@25 $generated@@67 $generated@@66))
 :pattern ( ($generated@@64 $generated@@65 $generated@@67))
)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@65 ($generated@@29 $generated@@66)))
)))
(assert (forall (($generated@@68 T@U) ) (!  (=> ($generated@@25 $generated@@68 $generated) (and (= ($generated@@50 $generated@@7 ($generated@@49 $generated@@7 $generated@@68)) $generated@@68) ($generated@@27 $generated@@7 ($generated@@49 $generated@@7 $generated@@68) $generated)))
 :pattern ( ($generated@@25 $generated@@68 $generated))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@25 ($generated@@50 $generated@@71 $generated@@69) $generated@@70) ($generated@@27 $generated@@71 $generated@@69 $generated@@70))
 :pattern ( ($generated@@25 ($generated@@50 $generated@@71 $generated@@69) $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@37 $generated@@73) (forall (($generated@@74 T@U) ) (!  (and (<= 0 ($generated@@64 $generated@@73 $generated@@74)) (<= ($generated@@64 $generated@@73 $generated@@74) ($generated@@72 $generated@@73)))
 :pattern ( ($generated@@64 $generated@@73 $generated@@74))
)))
 :pattern ( ($generated@@37 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (! (<= 0 ($generated@@72 $generated@@75))
 :pattern ( ($generated@@72 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ) (! (= ($generated@@64 $generated@@36 $generated@@76) 0)
 :pattern ( ($generated@@64 $generated@@36 $generated@@76))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@77 T@U) ) (!  (=> (or ($generated@@24 $generated@@77) (and (< 1 $generated@@22) ($generated@@25 $generated@@77 $generated@@26))) (and ($generated@@59 $generated@@77) (= ($generated@@23 $generated@@77) ($generated@@58 $generated@@77))))
 :pattern ( ($generated@@23 $generated@@77))
))))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@78 ($generated@@29 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@29 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@21 ($generated@@29 $generated@@80)) $generated@@1)
 :pattern ( ($generated@@29 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@49 $generated@@82 ($generated@@50 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@50 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ) (!  (and (= (= ($generated@@72 $generated@@83) 0) (= $generated@@83 $generated@@36)) (=> (or (not (= ($generated@@72 $generated@@83) 0)) (not true)) (exists (($generated@@84 T@U) ) (! (< 0 ($generated@@64 $generated@@83 $generated@@84))
 :pattern ( ($generated@@64 $generated@@83 $generated@@84))
))))
 :pattern ( ($generated@@72 $generated@@83))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@85 $generated@@95 $generated@@96 $generated@@97 ($generated@@91 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@100 $generated@@101) $generated@@98)
 :weight 0
)) (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@85 $generated@@102 $generated@@103 $generated@@104 ($generated@@91 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@85 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@85 $generated@@111 $generated@@112 $generated@@113 ($generated@@91 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@85 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)))) (= ($generated@@5 $generated@@86) 5)) (= ($generated@@5 $generated@@87) 6)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@89 $generated@@120 $generated@@121 ($generated@@92 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@122) $generated@@124) $generated@@122)
 :weight 0
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@129 $generated@@130) (= ($generated@@89 $generated@@125 $generated@@126 ($generated@@92 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@127) $generated@@130) ($generated@@89 $generated@@125 $generated@@126 $generated@@128 $generated@@130)))
 :weight 0
))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (= ($generated@@5 ($generated@@90 $generated@@131 $generated@@132)) 7))) (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (! (= ($generated@@93 ($generated@@90 $generated@@133 $generated@@134)) $generated@@133)
 :pattern ( ($generated@@90 $generated@@133 $generated@@134))
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (! (= ($generated@@94 ($generated@@90 $generated@@135 $generated@@136)) $generated@@136)
 :pattern ( ($generated@@90 $generated@@135 $generated@@136))
))))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 Bool) ($generated@@141 T@U) ($generated@@142 T@U) ) (! (= ($generated@@10 ($generated@@85 $generated@@86 $generated@@87 $generated@@6 ($generated@@88 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))  (=> (and (or (not (= $generated@@141 $generated@@137)) (not true)) ($generated@@10 ($generated@@49 $generated@@6 ($generated@@89 $generated@@87 $generated@@34 ($generated@@89 $generated@@86 ($generated@@90 $generated@@87 $generated@@34) $generated@@138 $generated@@141) $generated@@139)))) $generated@@140))
 :pattern ( ($generated@@85 $generated@@86 $generated@@87 $generated@@6 ($generated@@88 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> ($generated@@25 $generated@@143 ($generated@@29 $generated@@144)) (and (= ($generated@@50 $generated@@28 ($generated@@49 $generated@@28 $generated@@143)) $generated@@143) ($generated@@27 $generated@@28 ($generated@@49 $generated@@28 $generated@@143) ($generated@@29 $generated@@144))))
 :pattern ( ($generated@@25 $generated@@143 ($generated@@29 $generated@@144)))
)))
(assert (= ($generated@@21 $generated@@26) $generated@@3))
(assert (= ($generated@@145 $generated@@26) $generated@@4))
(assert (let (($generated@@147 $generated@@44))
 (and ($generated@@146 $generated@@147) ($generated@@32 ($generated@@58 $generated@@147) $generated@@36))))
(assert ($generated@@25 $generated@@44 $generated@@41))
(assert  (=> (<= 2 $generated@@22) (=> (or $generated@@31 (< 2 $generated@@22)) (and $generated@@148 (= $generated@@35 $generated@@44)))))
(assert  (=> (<= 2 $generated@@22) (=> (or $generated@@31 (< 2 $generated@@22)) (and $generated@@148 (= $generated@@35 $generated@@44)))))
(assert (forall (($generated@@149 T@U) ) (! (= ($generated@@25 $generated@@149 $generated@@26)  (and ($generated@@25 $generated@@149 $generated@@41) ($generated@@146 $generated@@149)))
 :pattern ( ($generated@@25 $generated@@149 $generated@@26))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@T) ) (! (= ($generated@@50 $generated@@151 ($generated@@33 $generated@@151 $generated@@150)) ($generated@@33 $generated@@34 ($generated@@50 $generated@@151 $generated@@150)))
 :pattern ( ($generated@@50 $generated@@151 ($generated@@33 $generated@@151 $generated@@150)))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (! (= ($generated@@32 $generated@@152 $generated@@153) (forall (($generated@@154 T@U) ) (! (= ($generated@@64 $generated@@152 $generated@@154) ($generated@@64 $generated@@153 $generated@@154))
 :pattern ( ($generated@@64 $generated@@152 $generated@@154))
 :pattern ( ($generated@@64 $generated@@153 $generated@@154))
)))
 :pattern ( ($generated@@32 $generated@@152 $generated@@153))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ) (! (= ($generated@@53 $generated@@28 $generated@@155 ($generated@@29 $generated@@156) $generated@@157) (forall (($generated@@158 T@U) ) (!  (=> (< 0 ($generated@@64 $generated@@155 $generated@@158)) ($generated@@40 $generated@@158 $generated@@156 $generated@@157))
 :pattern ( ($generated@@64 $generated@@155 $generated@@158))
)))
 :pattern ( ($generated@@53 $generated@@28 $generated@@155 ($generated@@29 $generated@@156) $generated@@157))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (! ($generated@@53 $generated@@7 $generated@@160 $generated $generated@@159)
 :pattern ( ($generated@@53 $generated@@7 $generated@@160 $generated $generated@@159))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@161 T@U) ) (!  (=> (or ($generated@@24 ($generated@@33 $generated@@34 $generated@@161)) (and (< 1 $generated@@22) ($generated@@25 $generated@@161 $generated@@26))) (and ($generated@@59 ($generated@@33 $generated@@34 $generated@@161)) (= ($generated@@23 ($generated@@33 $generated@@34 $generated@@161)) ($generated@@58 ($generated@@33 $generated@@34 $generated@@161)))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@33 $generated@@34 $generated@@161)))
))))
(assert (forall (($generated@@162 T@U) ) (! ($generated@@27 $generated@@7 $generated@@162 $generated)
 :pattern ( ($generated@@27 $generated@@7 $generated@@162 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@167  (=> (= (ControlFlow 0 4) (- 0 3)) ($generated@@32 ($generated@@23 ($generated@@33 $generated@@34 $generated@@35)) $generated@@36))))
(let (($generated@@168  (=> $generated@@148 (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@25 $generated@@44 $generated@@26)) (=> ($generated@@25 $generated@@44 $generated@@26) (=> (and (and (= $generated@@35 $generated@@44) $generated@@148) (and ($generated@@25 $generated@@35 $generated@@26) (= (ControlFlow 0 5) 4))) $generated@@167))))))
(let (($generated@@169  (=> (and ($generated@@25 $generated@@35 $generated@@26) (= (ControlFlow 0 2) (- 0 1))) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 true))))))
(let (($generated@@170  (=> (= $generated@@163 ($generated@@88 $generated@@164 $generated@@165 $generated@@2 false)) (and (=> (= (ControlFlow 0 7) 2) $generated@@169) (=> (= (ControlFlow 0 7) 5) $generated@@168)))))
(let (($generated@@171  (=> (and (and ($generated@@45 $generated@@165) ($generated@@166 $generated@@165)) (and (= 2 $generated@@22) (= (ControlFlow 0 8) 7))) $generated@@170)))
$generated@@171))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
