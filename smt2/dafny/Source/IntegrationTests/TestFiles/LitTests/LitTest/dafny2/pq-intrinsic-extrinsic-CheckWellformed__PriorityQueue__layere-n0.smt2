(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@27 (T@U T@U) Bool)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@U T@U) T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@34 (T@T T@U T@U) Bool)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@38 () Bool)
(declare-fun $generated@@39 (T@U T@U) Bool)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@45 (T@U T@U T@U) Bool)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 (T@U) Bool)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@68 (T@U T@U) Int)
(declare-fun $generated@@73 (T@U T@U) Bool)
(declare-fun $generated@@79 (T@U) Int)
(declare-fun $generated@@84 (T@U) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@99 (T@T T@T) T@T)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T) T@T)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@154 (T@U) T@U)
(declare-fun $generated@@155 () Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@25) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@33 T@U) ) (!  (=> (or ($generated@@26 ($generated@@24 $generated@@25 $generated@@33)) (and (< 1 $generated@@22) ($generated@@27 $generated@@33 $generated@@28))) (and ($generated@@29 ($generated@@24 $generated@@25 $generated@@33)) (= ($generated@@23 ($generated@@24 $generated@@25 $generated@@33)) ($generated@@30 ($generated@@31 $generated@@32) ($generated@@24 $generated@@25 $generated@@33)))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@25 $generated@@33)))
))))
(assert (= ($generated@@5 $generated@@35) 4))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@37 T@U) ) (!  (=> (or ($generated@@26 $generated@@37) (and (< 1 $generated@@22) ($generated@@27 $generated@@37 $generated@@28))) ($generated@@34 $generated@@35 ($generated@@23 $generated@@37) ($generated@@36 $generated)))
 :pattern ( ($generated@@23 $generated@@37))
))))
(assert  (=> (<= 2 $generated@@22) (=> (or $generated@@38 (< 2 $generated@@22)) (and ($generated@@39 ($generated@@23 ($generated@@24 $generated@@25 $generated@@40)) $generated@@41) ($generated@@27 $generated@@40 $generated@@28)))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated@@34 $generated@@35 $generated@@43 ($generated@@36 $generated@@44)) ($generated@@42 $generated@@43))
 :pattern ( ($generated@@34 $generated@@35 $generated@@43 ($generated@@36 $generated@@44)))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@45 $generated@@47 $generated@@28 $generated@@48) ($generated@@45 $generated@@47 $generated@@46 $generated@@48))
 :pattern ( ($generated@@45 $generated@@47 $generated@@28 $generated@@48))
)))
(assert ($generated@@27 $generated@@49 $generated@@46))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@50 $generated@@51) ($generated@@45 $generated@@49 $generated@@46 $generated@@51))
 :pattern ( ($generated@@45 $generated@@49 $generated@@46 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@24 $generated@@53 $generated@@52) $generated@@52)
 :pattern ( ($generated@@24 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 ($generated@@54 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@54 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@45 ($generated@@55 $generated@@62 $generated@@59) $generated@@60 $generated@@61) ($generated@@58 $generated@@62 $generated@@59 $generated@@60 $generated@@61))
 :pattern ( ($generated@@45 ($generated@@55 $generated@@62 $generated@@59) $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (or ($generated@@29 $generated@@64) ($generated@@27 $generated@@64 $generated@@46)) ($generated@@34 $generated@@35 ($generated@@30 $generated@@63 $generated@@64) ($generated@@36 $generated)))
 :pattern ( ($generated@@30 $generated@@63 $generated@@64))
)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@65 T@U) ) (!  (=> (and (or $generated@@38 (< 2 $generated@@22)) ($generated@@50 $generated@@65)) ($generated@@45 $generated@@40 $generated@@28 $generated@@65))
 :pattern ( ($generated@@45 $generated@@40 $generated@@28 $generated@@65))
))))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> ($generated@@39 $generated@@66 $generated@@67) (= $generated@@66 $generated@@67))
 :pattern ( ($generated@@39 $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@34 $generated@@35 $generated@@69 ($generated@@36 $generated@@70)) (forall (($generated@@71 T@U) ) (!  (=> (< 0 ($generated@@68 $generated@@69 $generated@@71)) ($generated@@27 $generated@@71 $generated@@70))
 :pattern ( ($generated@@68 $generated@@69 $generated@@71))
)))
 :pattern ( ($generated@@34 $generated@@35 $generated@@69 ($generated@@36 $generated@@70)))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> ($generated@@27 $generated@@72 $generated) (and (= ($generated@@55 $generated@@7 ($generated@@54 $generated@@7 $generated@@72)) $generated@@72) ($generated@@34 $generated@@7 ($generated@@54 $generated@@7 $generated@@72) $generated)))
 :pattern ( ($generated@@27 $generated@@72 $generated))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@73 ($generated@@31 $generated@@74) $generated@@75) ($generated@@73 $generated@@74 $generated@@75))
 :pattern ( ($generated@@73 ($generated@@31 $generated@@74) $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@27 ($generated@@55 $generated@@78 $generated@@76) $generated@@77) ($generated@@34 $generated@@78 $generated@@76 $generated@@77))
 :pattern ( ($generated@@27 ($generated@@55 $generated@@78 $generated@@76) $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@42 $generated@@80) (forall (($generated@@81 T@U) ) (!  (and (<= 0 ($generated@@68 $generated@@80 $generated@@81)) (<= ($generated@@68 $generated@@80 $generated@@81) ($generated@@79 $generated@@80)))
 :pattern ( ($generated@@68 $generated@@80 $generated@@81))
)))
 :pattern ( ($generated@@42 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (<= 0 ($generated@@79 $generated@@82))
 :pattern ( ($generated@@79 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@68 $generated@@41 $generated@@83) 0)
 :pattern ( ($generated@@68 $generated@@41 $generated@@83))
)))
(assert (forall (($generated@@85 T@U) ) (! (= ($generated@@84 ($generated@@36 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@36 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@21 ($generated@@36 $generated@@86)) $generated@@1)
 :pattern ( ($generated@@36 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@54 $generated@@88 ($generated@@55 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@55 $generated@@88 $generated@@87))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@89 T@U) ) (!  (=> (or ($generated@@26 $generated@@89) (and (< 1 $generated@@22) ($generated@@27 $generated@@89 $generated@@28))) (and ($generated@@29 $generated@@89) (= ($generated@@23 $generated@@89) ($generated@@30 ($generated@@31 $generated@@32) $generated@@89))))
 :pattern ( ($generated@@23 $generated@@89))
))))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@30 ($generated@@31 $generated@@90) $generated@@91) ($generated@@30 $generated@@90 $generated@@91))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@90) $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ) (!  (and (= (= ($generated@@79 $generated@@92) 0) (= $generated@@92 $generated@@41)) (=> (or (not (= ($generated@@79 $generated@@92) 0)) (not true)) (exists (($generated@@93 T@U) ) (! (< 0 ($generated@@68 $generated@@92 $generated@@93))
 :pattern ( ($generated@@68 $generated@@92 $generated@@93))
))))
 :pattern ( ($generated@@79 $generated@@92))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@94 $generated@@104 $generated@@105 $generated@@106 ($generated@@100 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@109 $generated@@110) $generated@@107)
 :weight 0
)) (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@94 $generated@@111 $generated@@112 $generated@@113 ($generated@@100 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@94 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@94 $generated@@120 $generated@@121 $generated@@122 ($generated@@100 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@94 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)))) (= ($generated@@5 $generated@@95) 5)) (= ($generated@@5 $generated@@96) 6)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@98 $generated@@129 $generated@@130 ($generated@@101 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@131) $generated@@133) $generated@@131)
 :weight 0
))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@138 $generated@@139) (= ($generated@@98 $generated@@134 $generated@@135 ($generated@@101 $generated@@134 $generated@@135 $generated@@137 $generated@@138 $generated@@136) $generated@@139) ($generated@@98 $generated@@134 $generated@@135 $generated@@137 $generated@@139)))
 :weight 0
))) (forall (($generated@@140 T@T) ($generated@@141 T@T) ) (= ($generated@@5 ($generated@@99 $generated@@140 $generated@@141)) 7))) (forall (($generated@@142 T@T) ($generated@@143 T@T) ) (! (= ($generated@@102 ($generated@@99 $generated@@142 $generated@@143)) $generated@@142)
 :pattern ( ($generated@@99 $generated@@142 $generated@@143))
))) (forall (($generated@@144 T@T) ($generated@@145 T@T) ) (! (= ($generated@@103 ($generated@@99 $generated@@144 $generated@@145)) $generated@@145)
 :pattern ( ($generated@@99 $generated@@144 $generated@@145))
))))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 Bool) ($generated@@150 T@U) ($generated@@151 T@U) ) (! (= ($generated@@10 ($generated@@94 $generated@@95 $generated@@96 $generated@@6 ($generated@@97 $generated@@146 $generated@@147 $generated@@148 $generated@@149) $generated@@150 $generated@@151))  (=> (and (or (not (= $generated@@150 $generated@@146)) (not true)) ($generated@@10 ($generated@@54 $generated@@6 ($generated@@98 $generated@@96 $generated@@25 ($generated@@98 $generated@@95 ($generated@@99 $generated@@96 $generated@@25) $generated@@147 $generated@@150) $generated@@148)))) $generated@@149))
 :pattern ( ($generated@@94 $generated@@95 $generated@@96 $generated@@6 ($generated@@97 $generated@@146 $generated@@147 $generated@@148 $generated@@149) $generated@@150 $generated@@151))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> ($generated@@27 $generated@@152 ($generated@@36 $generated@@153)) (and (= ($generated@@55 $generated@@35 ($generated@@54 $generated@@35 $generated@@152)) $generated@@152) ($generated@@34 $generated@@35 ($generated@@54 $generated@@35 $generated@@152) ($generated@@36 $generated@@153))))
 :pattern ( ($generated@@27 $generated@@152 ($generated@@36 $generated@@153)))
)))
(assert (= ($generated@@21 $generated@@28) $generated@@3))
(assert (= ($generated@@154 $generated@@28) $generated@@4))
(assert  (=> (<= 2 $generated@@22) (=> (or $generated@@38 (< 2 $generated@@22)) (and $generated@@155 (= $generated@@40 $generated@@49)))))
(assert  (=> (<= 2 $generated@@22) (=> (or $generated@@38 (< 2 $generated@@22)) (and $generated@@155 (= $generated@@40 $generated@@49)))))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@T) ) (! (= ($generated@@55 $generated@@157 ($generated@@24 $generated@@157 $generated@@156)) ($generated@@24 $generated@@25 ($generated@@55 $generated@@157 $generated@@156)))
 :pattern ( ($generated@@55 $generated@@157 ($generated@@24 $generated@@157 $generated@@156)))
)))
(assert (forall (($generated@@158 T@U) ) (! (= ($generated@@27 $generated@@158 $generated@@28)  (and ($generated@@27 $generated@@158 $generated@@46) ($generated@@73 ($generated@@31 $generated@@32) $generated@@158)))
 :pattern ( ($generated@@27 $generated@@158 $generated@@28))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (! (= ($generated@@39 $generated@@159 $generated@@160) (forall (($generated@@161 T@U) ) (! (= ($generated@@68 $generated@@159 $generated@@161) ($generated@@68 $generated@@160 $generated@@161))
 :pattern ( ($generated@@68 $generated@@159 $generated@@161))
 :pattern ( ($generated@@68 $generated@@160 $generated@@161))
)))
 :pattern ( ($generated@@39 $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ) (! (= ($generated@@58 $generated@@35 $generated@@162 ($generated@@36 $generated@@163) $generated@@164) (forall (($generated@@165 T@U) ) (!  (=> (< 0 ($generated@@68 $generated@@162 $generated@@165)) ($generated@@45 $generated@@165 $generated@@163 $generated@@164))
 :pattern ( ($generated@@68 $generated@@162 $generated@@165))
)))
 :pattern ( ($generated@@58 $generated@@35 $generated@@162 ($generated@@36 $generated@@163) $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (! ($generated@@58 $generated@@7 $generated@@167 $generated $generated@@166)
 :pattern ( ($generated@@58 $generated@@7 $generated@@167 $generated $generated@@166))
)))
(assert (forall (($generated@@168 T@U) ) (! ($generated@@34 $generated@@7 $generated@@168 $generated)
 :pattern ( ($generated@@34 $generated@@7 $generated@@168 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 (T@U) Bool)
(declare-fun $generated@@171 (T@U) Bool)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@175  (=> (= (ControlFlow 0 4) (- 0 3)) ($generated@@39 ($generated@@23 ($generated@@24 $generated@@25 $generated@@40)) $generated@@41))))
(let (($generated@@176  (=> (and (and (and ($generated@@50 $generated@@169) ($generated@@170 $generated@@169)) (and $generated@@155 (let (($generated@@177 $generated@@49))
 (and ($generated@@171 $generated@@177) (=> ($generated@@73 ($generated@@31 $generated@@32) $generated@@177) ($generated@@29 $generated@@177)))))) (and (and (let (($generated@@178 $generated@@49))
($generated@@73 ($generated@@31 ($generated@@31 $generated@@32)) $generated@@178)) (let (($generated@@179 $generated@@49))
($generated@@39 ($generated@@30 ($generated@@31 ($generated@@31 $generated@@32)) $generated@@179) $generated@@41))) (and (= $generated@@172 $generated@@169) $generated@@155))) (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@27 $generated@@49 $generated@@28)) (=> ($generated@@27 $generated@@49 $generated@@28) (=> (and (and (= $generated@@40 $generated@@49) $generated@@155) (and ($generated@@27 $generated@@40 $generated@@28) (= (ControlFlow 0 5) 4))) $generated@@175))))))
(let (($generated@@180  (=> (and ($generated@@27 $generated@@40 $generated@@28) (= (ControlFlow 0 2) (- 0 1))) ($generated@@10 ($generated@@24 $generated@@6 ($generated@@9 true))))))
(let (($generated@@181  (=> (= $generated@@173 ($generated@@97 $generated@@174 $generated@@172 $generated@@2 false)) (and (=> (= (ControlFlow 0 7) 2) $generated@@180) (=> (= (ControlFlow 0 7) 5) $generated@@176)))))
(let (($generated@@182  (=> (and (and ($generated@@50 $generated@@172) ($generated@@170 $generated@@172)) (and (= 2 $generated@@22) (= (ControlFlow 0 8) 7))) $generated@@181)))
$generated@@182))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
