(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Sum (T@U T@U Int Int) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.Sum#canCall| (T@U Int Int) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (= (Ctor SeqType) 7))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@2))) ($IsAllocBox (|Seq#Index| v@@2 i) t0@@0 h@@3))
 :pattern ( (|Seq#Index| v@@2 i))
)))
 :pattern ( ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly T@U) (|a#0| T@U) (|s#0| Int) (|t#0| Int) ) (!  (=> (or (|_module.__default.Sum#canCall| (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt |t#0|)) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |a#0| (TSeq TInt)) (and (and (<= (LitInt 0) (LitInt |s#0|)) (<= (LitInt |s#0|) (LitInt |t#0|))) (<= (LitInt |t#0|) (|Seq#Length| (Lit SeqType |a#0|))))))) (and (=> (or (not (= (LitInt |s#0|) (LitInt |t#0|))) (not true)) (|_module.__default.Sum#canCall| (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt (- |t#0| 1)))) (= (_module.__default.Sum ($LS $ly) (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt |t#0|)) (ite (= (LitInt |s#0|) (LitInt |t#0|)) 0 (+ (_module.__default.Sum ($LS $ly) (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt (- |t#0| 1))) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |a#0|) (LitInt (- |t#0| 1))))))))))
 :weight 3
 :pattern ( (_module.__default.Sum ($LS $ly) (Lit SeqType |a#0|) (LitInt |s#0|) (LitInt |t#0|)))
))))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@0 T@U) (|a#0@@0| T@U) (|s#0@@0| Int) (|t#0@@0| Int) ) (!  (=> (or (|_module.__default.Sum#canCall| |a#0@@0| |s#0@@0| |t#0@@0|) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |a#0@@0| (TSeq TInt)) (and (and (<= (LitInt 0) |s#0@@0|) (<= |s#0@@0| |t#0@@0|)) (<= |t#0@@0| (|Seq#Length| |a#0@@0|)))))) (and (=> (or (not (= |s#0@@0| |t#0@@0|)) (not true)) (|_module.__default.Sum#canCall| |a#0@@0| |s#0@@0| (- |t#0@@0| 1))) (= (_module.__default.Sum ($LS $ly@@0) |a#0@@0| |s#0@@0| |t#0@@0|) (ite (= |s#0@@0| |t#0@@0|) 0 (+ (_module.__default.Sum $ly@@0 |a#0@@0| |s#0@@0| (- |t#0@@0| 1)) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@0| (- |t#0@@0| 1)))))))))
 :pattern ( (_module.__default.Sum ($LS $ly@@0) |a#0@@0| |s#0@@0| |t#0@@0|))
))))
(assert (forall (($ly@@1 T@U) (|a#0@@1| T@U) (|s#0@@1| Int) (|t#0@@1| Int) ) (! (= (_module.__default.Sum ($LS $ly@@1) |a#0@@1| |s#0@@1| |t#0@@1|) (_module.__default.Sum $ly@@1 |a#0@@1| |s#0@@1| |t#0@@1|))
 :pattern ( (_module.__default.Sum ($LS $ly@@1) |a#0@@1| |s#0@@1| |t#0@@1|))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@1 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@1 (TSeq t@@5)) (and (= ($Box SeqType ($Unbox SeqType bx@@1)) bx@@1) ($Is SeqType ($Unbox SeqType bx@@1) (TSeq t@@5))))
 :pattern ( ($IsBox bx@@1 (TSeq t@@5)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@4 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@4))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@4 (TSeq t0@@2)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@4))) ($IsBox (|Seq#Index| v@@4 i@@0) t0@@2))
 :pattern ( (|Seq#Index| v@@4 i@@0))
)))
 :pattern ( ($Is SeqType v@@4 (TSeq t0@@2)))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |p#0@0| () Int)
(declare-fun |q#0@0| () Int)
(declare-fun |a#0@@2| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |k#0@0| () Int)
(declare-fun |m#0@0| () Int)
(declare-fun $LZ () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((anon12_correct true))
(let ((anon10_correct  (=> (and (and (and (and (<= (LitInt 0) |p#0@0|) (<= |p#0@0| |q#0@0|)) (<= |q#0@0| (|Seq#Length| |a#0@@2|))) ($IsAlloc SeqType |a#0@@2| (TSeq TInt) $Heap@0)) (and ($IsAlloc intType (int_2_U |p#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |q#0@0|) TInt $Heap@0))) (and (=> (= (ControlFlow 0 3) (- 0 9)) (<= (LitInt 0) |p#0@0|)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (<= |p#0@0| |q#0@0|)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (<= |q#0@0| (|Seq#Length| |a#0@@2|))) (=> (and (and (and (<= (LitInt 0) |p#0@0|) (<= |p#0@0| |q#0@0|)) (<= |q#0@0| (|Seq#Length| |a#0@@2|))) (and (and (|_module.__default.Sum#canCall| |a#0@@2| |p#0@0| |q#0@0|) ($IsAlloc SeqType |a#0@@2| (TSeq TInt) $Heap@0)) (and ($IsAlloc intType (int_2_U |k#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |m#0@0|) TInt $Heap@0)))) (and (=> (= (ControlFlow 0 3) (- 0 6)) (<= (LitInt 0) |k#0@0|)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (<= |k#0@0| |m#0@0|)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= |m#0@0| (|Seq#Length| |a#0@@2|))) (=> (and (and (and (and (<= (LitInt 0) |k#0@0|) (<= |k#0@0| |m#0@0|)) (<= |m#0@0| (|Seq#Length| |a#0@@2|))) (|_module.__default.Sum#canCall| |a#0@@2| |k#0@0| |m#0@0|)) (and (<= (_module.__default.Sum ($LS $LZ) |a#0@@2| |p#0@0| |q#0@0|) (_module.__default.Sum ($LS $LZ) |a#0@@2| |k#0@0| |m#0@0|)) (= (ControlFlow 0 3) 1))) anon12_correct)))))))))))
(let ((anon17_Else_correct  (=> (and (not (and (<= (LitInt 0) |p#0@0|) (<= |p#0@0| |q#0@0|))) (= (ControlFlow 0 11) 3)) anon10_correct)))
(let ((anon17_Then_correct  (=> (and (and (<= (LitInt 0) |p#0@0|) (<= |p#0@0| |q#0@0|)) (= (ControlFlow 0 10) 3)) anon10_correct)))
(let ((anon16_Else_correct  (=> (< |p#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 13) 10) anon17_Then_correct) (=> (= (ControlFlow 0 13) 11) anon17_Else_correct)))))
(let ((anon16_Then_correct  (=> (<= (LitInt 0) |p#0@0|) (and (=> (= (ControlFlow 0 12) 10) anon17_Then_correct) (=> (= (ControlFlow 0 12) 11) anon17_Else_correct)))))
(let ((anon15_Else_correct  (=> (and (=> (and (and (<= (LitInt 0) |p#0@0|) (<= |p#0@0| |q#0@0|)) (<= |q#0@0| (|Seq#Length| |a#0@@2|))) (<= (_module.__default.Sum ($LS $LZ) |a#0@@2| |p#0@0| |q#0@0|) (_module.__default.Sum ($LS $LZ) |a#0@@2| |k#0@0| |m#0@0|))) (= (ControlFlow 0 2) 1)) anon12_correct)))
(let ((anon5_correct  (=> (and (and (<= (LitInt 0) |k#0@0|) (<= |k#0@0| |m#0@0|)) (<= |m#0@0| (|Seq#Length| |a#0@@2|))) (and (and (=> (= (ControlFlow 0 14) 2) anon15_Else_correct) (=> (= (ControlFlow 0 14) 12) anon16_Then_correct)) (=> (= (ControlFlow 0 14) 13) anon16_Else_correct)))))
(let ((anon14_Else_correct  (=> (and (not (and (<= (LitInt 0) |k#0@0|) (<= |k#0@0| |m#0@0|))) (= (ControlFlow 0 16) 14)) anon5_correct)))
(let ((anon14_Then_correct  (=> (and (and (<= (LitInt 0) |k#0@0|) (<= |k#0@0| |m#0@0|)) (= (ControlFlow 0 15) 14)) anon5_correct)))
(let ((anon13_Else_correct  (=> (< |k#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 18) 15) anon14_Then_correct) (=> (= (ControlFlow 0 18) 16) anon14_Else_correct)))))
(let ((anon13_Then_correct  (=> (<= (LitInt 0) |k#0@0|) (and (=> (= (ControlFlow 0 17) 15) anon14_Then_correct) (=> (= (ControlFlow 0 17) 16) anon14_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
)) ($HeapSucc $Heap $Heap@0))) (and (=> (= (ControlFlow 0 19) 17) anon13_Then_correct) (=> (= (ControlFlow 0 19) 18) anon13_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is SeqType |a#0@@2| (TSeq TInt)) ($IsAlloc SeqType |a#0@@2| (TSeq TInt) $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 20) 19))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
