(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U) Int)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@T T@T) T@T)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@62 () T@U)
(declare-fun $generated@@65 (T@U Int) Int)
(declare-fun $generated@@66 (T@U Int) Bool)
(declare-fun $generated@@67 (Int) Int)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@T T@U) T@U)
(declare-fun $generated@@82 (T@U T@U T@U) Bool)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@U) T@U)
(declare-fun $generated@@127 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert  (=> (< 0 $generated@@21) (forall (($generated@@28 T@U) ) (!  (=> (and (or (not (= $generated@@28 $generated@@23)) (not true)) (= ($generated@@24 $generated@@28) $generated@@25)) ($generated@@26 $generated@@7 ($generated@@11 ($generated@@22 $generated@@28)) $generated@@27))
 :pattern ( ($generated@@22 $generated@@28))
))))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! ($generated@@29 $generated@@7 $generated@@30 $generated@@27 $generated@@31)
 :pattern ( ($generated@@29 $generated@@7 $generated@@30 $generated@@27 $generated@@31))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@33 $generated@@42 $generated@@43 ($generated@@39 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@46) $generated@@44)
 :weight 0
)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@51 $generated@@52) (= ($generated@@33 $generated@@47 $generated@@48 ($generated@@39 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@52) ($generated@@33 $generated@@47 $generated@@48 $generated@@50 $generated@@52)))
 :weight 0
))) (= ($generated@@5 $generated@@34) 3)) (= ($generated@@5 $generated@@35) 4)) (= ($generated@@5 $generated@@36) 5)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (= ($generated@@5 ($generated@@37 $generated@@53 $generated@@54)) 6))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@55 $generated@@56)) $generated@@55)
 :pattern ( ($generated@@37 $generated@@55 $generated@@56))
))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@41 ($generated@@37 $generated@@57 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@37 $generated@@57 $generated@@58))
))))
(assert  (=> (< 0 $generated@@21) (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> (and (and ($generated@@38 $generated@@59) (and (or (not (= $generated@@60 $generated@@23)) (not true)) (= ($generated@@24 $generated@@60) $generated@@25))) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@59 $generated@@60) $generated)))) ($generated@@29 $generated@@7 ($generated@@11 ($generated@@22 $generated@@60)) $generated@@27 $generated@@59))
 :pattern ( ($generated@@22 $generated@@60) ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@59 $generated@@60) $generated)))
))))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@26 $generated@@36 $generated@@61 $generated@@25)  (or (= $generated@@61 $generated@@23) (= ($generated@@24 $generated@@61) $generated@@25)))
 :pattern ( ($generated@@26 $generated@@36 $generated@@61 $generated@@25))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@29 $generated@@36 $generated@@63 $generated@@62 $generated@@64) ($generated@@29 $generated@@36 $generated@@63 $generated@@25 $generated@@64))
 :pattern ( ($generated@@29 $generated@@36 $generated@@63 $generated@@62 $generated@@64))
 :pattern ( ($generated@@29 $generated@@36 $generated@@63 $generated@@25 $generated@@64))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@68 T@U) ($generated@@69 Int) ) (!  (=> (or ($generated@@66 $generated@@68 $generated@@69) (and (< 1 $generated@@21) (and (and (and (or (not (= $generated@@68 $generated@@23)) (not true)) ($generated@@26 $generated@@36 $generated@@68 $generated@@62)) (<= ($generated@@67 0) $generated@@69)) (or (not (= $generated@@69 7)) (not true))))) (= ($generated@@65 $generated@@68 $generated@@69) $generated@@69))
 :pattern ( ($generated@@65 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@29 $generated@@36 $generated@@70 $generated@@25 $generated@@71)  (or (= $generated@@70 $generated@@23) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@71 $generated@@70) $generated)))))
 :pattern ( ($generated@@29 $generated@@36 $generated@@70 $generated@@25 $generated@@71))
)))
(assert (forall (($generated@@72 Int) ) (! (= ($generated@@67 $generated@@72) $generated@@72)
 :pattern ( ($generated@@67 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 $generated@@74) $generated@@74)
 :pattern ( ($generated@@73 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@76 $generated@@78 ($generated@@32 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@32 $generated@@78 $generated@@77))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@79 T@U) ($generated@@80 Int) ) (!  (=> (or ($generated@@66 $generated@@79 $generated@@80) (and (< 1 $generated@@21) (and (and (and (or (not (= $generated@@79 $generated@@23)) (not true)) ($generated@@26 $generated@@36 $generated@@79 $generated@@62)) (<= ($generated@@67 0) $generated@@80)) (or (not (= $generated@@80 7)) (not true))))) (and (= ($generated@@65 $generated@@79 $generated@@80) ($generated@@22 $generated@@79)) (<= ($generated@@67 0) ($generated@@65 $generated@@79 $generated@@80))))
 :pattern ( ($generated@@65 $generated@@79 $generated@@80))
))))
(assert (forall (($generated@@81 T@U) ) (! (= ($generated@@26 $generated@@7 $generated@@81 $generated@@27) (<= ($generated@@67 0) ($generated@@12 $generated@@81)))
 :pattern ( ($generated@@26 $generated@@7 $generated@@81 $generated@@27))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@82 ($generated@@76 $generated@@86 $generated@@83) $generated@@84 $generated@@85) ($generated@@29 $generated@@86 $generated@@83 $generated@@84 $generated@@85))
 :pattern ( ($generated@@82 ($generated@@76 $generated@@86 $generated@@83) $generated@@84 $generated@@85))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@87 T@U) ($generated@@88 Int) ) (!  (=> (or ($generated@@66 $generated@@87 ($generated@@67 $generated@@88)) (and (< 1 $generated@@21) (and (and (and (or (not (= $generated@@87 $generated@@23)) (not true)) ($generated@@26 $generated@@36 $generated@@87 $generated@@62)) (<= ($generated@@67 0) $generated@@88)) ($generated@@10 ($generated@@73 $generated@@6 ($generated@@9  (or (not (= $generated@@88 7)) (not true)))))))) (= ($generated@@65 $generated@@87 ($generated@@67 $generated@@88)) ($generated@@67 $generated@@88)))
 :weight 3
 :pattern ( ($generated@@65 $generated@@87 ($generated@@67 $generated@@88)))
))))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@26 $generated@@36 $generated@@89 $generated@@62)  (and ($generated@@26 $generated@@36 $generated@@89 $generated@@25) (or (not (= $generated@@89 $generated@@23)) (not true))))
 :pattern ( ($generated@@26 $generated@@36 $generated@@89 $generated@@62))
 :pattern ( ($generated@@26 $generated@@36 $generated@@89 $generated@@25))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@T) ) (! (= ($generated@@32 $generated@@91 ($generated@@76 $generated@@91 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@76 $generated@@91 $generated@@90))
)))
(assert  (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@92 $generated@@95 $generated@@96 $generated@@97 ($generated@@94 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@100 $generated@@101) $generated@@98)
 :weight 0
)) (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@92 $generated@@102 $generated@@103 $generated@@104 ($generated@@94 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@92 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@92 $generated@@111 $generated@@112 $generated@@113 ($generated@@94 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@92 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@10 ($generated@@92 $generated@@36 $generated@@34 $generated@@6 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@92 $generated@@36 $generated@@34 $generated@@6 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (= ($generated@@126 $generated@@27) $generated@@0))
(assert (= ($generated@@127 $generated@@27) $generated@@3))
(assert (= ($generated@@126 $generated@@25) $generated@@1))
(assert (= ($generated@@127 $generated@@25) $generated@@4))
(assert (= ($generated@@126 $generated@@62) $generated@@2))
(assert (= ($generated@@127 $generated@@62) $generated@@4))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@128 T@U) ($generated@@129 Int) ) (!  (=> (or ($generated@@66 ($generated@@73 $generated@@36 $generated@@128) ($generated@@67 $generated@@129)) (and (< 1 $generated@@21) (and (and (and (or (not (= $generated@@128 $generated@@23)) (not true)) ($generated@@26 $generated@@36 $generated@@128 $generated@@62)) (<= ($generated@@67 0) $generated@@129)) ($generated@@10 ($generated@@73 $generated@@6 ($generated@@9  (or (not (= $generated@@129 7)) (not true)))))))) (= ($generated@@65 ($generated@@73 $generated@@36 $generated@@128) ($generated@@67 $generated@@129)) ($generated@@67 $generated@@129)))
 :weight 3
 :pattern ( ($generated@@65 ($generated@@73 $generated@@36 $generated@@128) ($generated@@67 $generated@@129)))
))))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@76 $generated@@7 ($generated@@11 ($generated@@67 $generated@@130))) ($generated@@73 $generated@@35 ($generated@@76 $generated@@7 ($generated@@11 $generated@@130))))
 :pattern ( ($generated@@76 $generated@@7 ($generated@@11 ($generated@@67 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@76 $generated@@132 ($generated@@73 $generated@@132 $generated@@131)) ($generated@@73 $generated@@35 ($generated@@76 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@76 $generated@@132 ($generated@@73 $generated@@132 $generated@@131)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@138  (=> (= (ControlFlow 0 6) (- 0 5)) (= ($generated@@65 $generated@@133 $generated@@134) ($generated@@22 $generated@@133)))))
(let (($generated@@139  (=> (= ($generated@@65 $generated@@133 $generated@@134) $generated@@134) (=> (and ($generated@@26 $generated@@7 ($generated@@11 ($generated@@65 $generated@@133 $generated@@134)) $generated@@27) (= (ControlFlow 0 7) 6)) $generated@@138))))
(let (($generated@@140  (=> (<= ($generated@@67 0) ($generated@@65 $generated@@133 $generated@@134)) (=> (and ($generated@@82 ($generated@@76 $generated@@36 $generated@@133) $generated@@25 $generated@@135) ($generated@@29 $generated@@7 ($generated@@11 $generated@@134) $generated@@27 $generated@@135)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= $generated@@134 7)) (not true))) (=> (or (not (= $generated@@134 7)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@134) (= $generated@@134 $generated@@134))) (=> (or (<= 0 $generated@@134) (= $generated@@134 $generated@@134)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@133 $generated@@133) (= $generated@@134 $generated@@134)) (< $generated@@134 $generated@@134)))))))))))
(let (($generated@@141  (=> (and (= $generated@@136 ($generated@@93 $generated@@23 $generated@@135 $generated false)) (or (not (= $generated@@134 7)) (not true))) (and (=> (= (ControlFlow 0 8) 2) $generated@@140) (=> (= (ControlFlow 0 8) 7) $generated@@139)))))
(let (($generated@@142  (=> (and ($generated@@38 $generated@@135) ($generated@@137 $generated@@135)) (=> (and (and (and (or (not (= $generated@@133 $generated@@23)) (not true)) (and ($generated@@26 $generated@@36 $generated@@133 $generated@@62) ($generated@@29 $generated@@36 $generated@@133 $generated@@62 $generated@@135))) (<= ($generated@@67 0) $generated@@134)) (and (= 1 $generated@@21) (= (ControlFlow 0 9) 8))) $generated@@141))))
$generated@@142))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
