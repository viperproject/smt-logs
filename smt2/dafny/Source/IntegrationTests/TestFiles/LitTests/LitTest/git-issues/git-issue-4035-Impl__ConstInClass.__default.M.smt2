(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U) Int)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 (T@T T@T) T@T)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@65 () T@U)
(declare-fun $generated@@66 () T@U)
(declare-fun $generated@@69 () T@U)
(declare-fun $generated@@76 (T@T T@U) T@U)
(declare-fun $generated@@79 (T@T T@U) T@U)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@122 (T@U) T@U)
(declare-fun $generated@@123 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert  (=> (< 1 $generated@@24) (forall (($generated@@31 T@U) ) (!  (=> (and (or (not (= $generated@@31 $generated@@26)) (not true)) (= ($generated@@27 $generated@@31) $generated@@28)) ($generated@@29 $generated@@10 ($generated@@14 ($generated@@25 $generated@@31)) $generated@@30))
 :pattern ( ($generated@@25 $generated@@31))
))))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (! ($generated@@32 $generated@@10 $generated@@33 $generated@@30 $generated@@34)
 :pattern ( ($generated@@32 $generated@@10 $generated@@33 $generated@@30 $generated@@34))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@36 $generated@@45 $generated@@46 ($generated@@42 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@49) $generated@@47)
 :weight 0
)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (= $generated@@54 $generated@@55) (= ($generated@@36 $generated@@50 $generated@@51 ($generated@@42 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@55) ($generated@@36 $generated@@50 $generated@@51 $generated@@53 $generated@@55)))
 :weight 0
))) (= ($generated@@8 $generated@@37) 3)) (= ($generated@@8 $generated@@38) 4)) (= ($generated@@8 $generated@@39) 5)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (= ($generated@@8 ($generated@@40 $generated@@56 $generated@@57)) 6))) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (! (= ($generated@@43 ($generated@@40 $generated@@58 $generated@@59)) $generated@@58)
 :pattern ( ($generated@@40 $generated@@58 $generated@@59))
))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@44 ($generated@@40 $generated@@60 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@40 $generated@@60 $generated@@61))
))))
(assert  (=> (< 1 $generated@@24) (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> (and (and ($generated@@41 $generated@@62) (and (or (not (= $generated@@63 $generated@@26)) (not true)) (= ($generated@@27 $generated@@63) $generated@@28))) ($generated@@13 ($generated@@35 $generated@@9 ($generated@@36 $generated@@37 $generated@@38 ($generated@@36 $generated@@39 ($generated@@40 $generated@@37 $generated@@38) $generated@@62 $generated@@63) $generated)))) ($generated@@32 $generated@@10 ($generated@@14 ($generated@@25 $generated@@63)) $generated@@30 $generated@@62))
 :pattern ( ($generated@@25 $generated@@63) ($generated@@35 $generated@@9 ($generated@@36 $generated@@37 $generated@@38 ($generated@@36 $generated@@39 ($generated@@40 $generated@@37 $generated@@38) $generated@@62 $generated@@63) $generated)))
))))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@29 $generated@@39 $generated@@64 $generated@@28)  (or (= $generated@@64 $generated@@26) (= ($generated@@27 $generated@@64) $generated@@28)))
 :pattern ( ($generated@@29 $generated@@39 $generated@@64 $generated@@28))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@32 $generated@@39 $generated@@67 $generated@@65 $generated@@68) ($generated@@32 $generated@@39 $generated@@67 $generated@@66 $generated@@68))
 :pattern ( ($generated@@32 $generated@@39 $generated@@67 $generated@@65 $generated@@68))
 :pattern ( ($generated@@32 $generated@@39 $generated@@67 $generated@@66 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@32 $generated@@39 $generated@@70 $generated@@69 $generated@@71) ($generated@@32 $generated@@39 $generated@@70 $generated@@28 $generated@@71))
 :pattern ( ($generated@@32 $generated@@39 $generated@@70 $generated@@69 $generated@@71))
 :pattern ( ($generated@@32 $generated@@39 $generated@@70 $generated@@28 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@32 $generated@@39 $generated@@72 $generated@@66 $generated@@73)  (or (= $generated@@72 $generated@@26) ($generated@@13 ($generated@@35 $generated@@9 ($generated@@36 $generated@@37 $generated@@38 ($generated@@36 $generated@@39 ($generated@@40 $generated@@37 $generated@@38) $generated@@73 $generated@@72) $generated)))))
 :pattern ( ($generated@@32 $generated@@39 $generated@@72 $generated@@66 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@32 $generated@@39 $generated@@74 $generated@@28 $generated@@75)  (or (= $generated@@74 $generated@@26) ($generated@@13 ($generated@@35 $generated@@9 ($generated@@36 $generated@@37 $generated@@38 ($generated@@36 $generated@@39 ($generated@@40 $generated@@37 $generated@@38) $generated@@75 $generated@@74) $generated)))))
 :pattern ( ($generated@@32 $generated@@39 $generated@@74 $generated@@28 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@76 $generated@@78 $generated@@77) $generated@@77)
 :pattern ( ($generated@@76 $generated@@78 $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@79 $generated@@81 ($generated@@35 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@35 $generated@@81 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@29 $generated@@39 $generated@@82 $generated@@65)  (and ($generated@@29 $generated@@39 $generated@@82 $generated@@66) (or (not (= $generated@@82 $generated@@26)) (not true))))
 :pattern ( ($generated@@29 $generated@@39 $generated@@82 $generated@@65))
 :pattern ( ($generated@@29 $generated@@39 $generated@@82 $generated@@66))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@29 $generated@@39 $generated@@83 $generated@@69)  (and ($generated@@29 $generated@@39 $generated@@83 $generated@@28) (or (not (= $generated@@83 $generated@@26)) (not true))))
 :pattern ( ($generated@@29 $generated@@39 $generated@@83 $generated@@69))
 :pattern ( ($generated@@29 $generated@@39 $generated@@83 $generated@@28))
)))
(assert (forall (($generated@@84 T@U) ) (! ($generated@@29 $generated@@39 $generated@@84 $generated@@66)
 :pattern ( ($generated@@29 $generated@@39 $generated@@84 $generated@@66))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@35 $generated@@86 ($generated@@79 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@79 $generated@@86 $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@29 $generated@@10 $generated@@87 $generated@@30) ($generated@@13 ($generated@@76 $generated@@9 ($generated@@12 false))))
 :pattern ( ($generated@@29 $generated@@10 $generated@@87 $generated@@30))
)))
(assert  (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@88 $generated@@91 $generated@@92 $generated@@93 ($generated@@90 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@90 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@88 $generated@@107 $generated@@108 $generated@@109 ($generated@@90 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@13 ($generated@@88 $generated@@39 $generated@@37 $generated@@9 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@13 ($generated@@35 $generated@@9 ($generated@@36 $generated@@37 $generated@@38 ($generated@@36 $generated@@39 ($generated@@40 $generated@@37 $generated@@38) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@88 $generated@@39 $generated@@37 $generated@@9 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (= ($generated@@122 $generated@@66) $generated@@0))
(assert (= ($generated@@123 $generated@@66) $generated@@5))
(assert (= ($generated@@122 $generated@@65) $generated@@1))
(assert (= ($generated@@123 $generated@@65) $generated@@5))
(assert (= ($generated@@122 $generated@@69) $generated@@2))
(assert (= ($generated@@123 $generated@@69) $generated@@6))
(assert (= ($generated@@122 $generated@@30) $generated@@3))
(assert (= ($generated@@123 $generated@@30) $generated@@7))
(assert (= ($generated@@122 $generated@@28) $generated@@4))
(assert (= ($generated@@123 $generated@@28) $generated@@6))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@T) ) (! (= ($generated@@79 $generated@@125 ($generated@@76 $generated@@125 $generated@@124)) ($generated@@76 $generated@@38 ($generated@@79 $generated@@125 $generated@@124)))
 :pattern ( ($generated@@79 $generated@@125 ($generated@@76 $generated@@125 $generated@@124)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 () Bool)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@136  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@13 ($generated@@76 $generated@@9 ($generated@@12 false))))))
(let (($generated@@137  (=> (and (not ($generated@@29 $generated@@39 $generated@@126 $generated@@69)) (= (ControlFlow 0 9) 2)) $generated@@136)))
(let (($generated@@138  (=> ($generated@@29 $generated@@39 $generated@@126 $generated@@69) (and (=> (= (ControlFlow 0 3) (- 0 8)) ($generated@@29 $generated@@39 $generated@@126 $generated@@69)) (=> ($generated@@29 $generated@@39 $generated@@126 $generated@@69) (and (=> (= (ControlFlow 0 3) (- 0 7)) true) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (not (= $generated@@126 $generated@@26)) (not true))) (=> (or (not (= $generated@@126 $generated@@26)) (not true)) (=> (= $generated@@127 ($generated@@25 $generated@@126)) (and (=> (= (ControlFlow 0 3) (- 0 5)) ($generated@@13 ($generated@@76 $generated@@9 ($generated@@12 false)))) (=> ($generated@@13 ($generated@@76 $generated@@9 ($generated@@12 false))) (=> (= $generated@@128 ($generated@@25 $generated@@126)) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@13 ($generated@@76 $generated@@9 ($generated@@12 false)))) (=> ($generated@@13 ($generated@@76 $generated@@9 ($generated@@12 false))) (=> (and (= $generated@@129 ($generated@@25 $generated@@126)) (= (ControlFlow 0 3) 2)) $generated@@136)))))))))))))))
(let (($generated@@139  (=> (= $generated@@130 ($generated@@89 $generated@@26 $generated@@131 $generated false)) (and (=> (= (ControlFlow 0 10) 3) $generated@@138) (=> (= (ControlFlow 0 10) 9) $generated@@137)))))
(let (($generated@@140  (=> (and ($generated@@41 $generated@@131) ($generated@@132 $generated@@131)) (=> (and (and (and ($generated@@29 $generated@@39 $generated@@126 $generated@@65) ($generated@@32 $generated@@39 $generated@@126 $generated@@65 $generated@@131)) (and (=> $generated@@133 (and ($generated@@29 $generated@@39 $generated@@134 $generated@@69) ($generated@@32 $generated@@39 $generated@@134 $generated@@69 $generated@@131))) true)) (and (and (=> $generated@@135 ($generated@@13 ($generated@@76 $generated@@9 ($generated@@12 false)))) true) (and (= 2 $generated@@24) (= (ControlFlow 0 11) 10)))) $generated@@139))))
$generated@@140))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
