(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@U T@U) T@U)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@41 (T@U T@U) Bool)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@46 (T@U) Int)
(declare-fun $generated@@47 (T@U) Int)
(declare-fun $generated@@50 (Int) Int)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@U T@U) Bool)
(declare-fun $generated@@56 (T@U Int) T@U)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@67 (T@T T@U T@U) Bool)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@73 (T@U T@U T@U) Bool)
(declare-fun $generated@@74 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@84 () Int)
(declare-fun $generated@@85 (Bool T@U) T@U)
(declare-fun $generated@@86 (T@U) Bool)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@104 (T@U) T@U)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@113 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@114 () T@T)
(declare-fun $generated@@115 () T@T)
(declare-fun $generated@@116 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@117 (T@T T@T) T@T)
(declare-fun $generated@@118 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@119 (T@T) T@T)
(declare-fun $generated@@120 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert  (and (and (forall (($generated@@27 T@T) ($generated@@28 T@T) ($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@21 $generated@@27 $generated@@28 ($generated@@26 $generated@@27 $generated@@28 $generated@@30 $generated@@31 $generated@@29) $generated@@31) $generated@@29)
 :weight 0
)) (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (!  (or (= $generated@@36 $generated@@37) (= ($generated@@21 $generated@@32 $generated@@33 ($generated@@26 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@37) ($generated@@21 $generated@@32 $generated@@33 $generated@@35 $generated@@37)))
 :weight 0
))) (= ($generated@@4 $generated@@22) 3)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@9 ($generated@@21 $generated@@22 $generated@@5 ($generated@@23 $generated@@38 $generated@@39) $generated@@40))  (and ($generated@@24 $generated@@40 $generated@@38) ($generated@@25 $generated@@39 $generated@@40)))
 :pattern ( ($generated@@21 $generated@@22 $generated@@5 ($generated@@23 $generated@@38 $generated@@39) $generated@@40))
)))
(assert (forall (($generated@@43 T@U) ) (!  (not ($generated@@41 $generated@@42 $generated@@43))
 :pattern ( ($generated@@41 $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ) (!  (not ($generated@@25 $generated@@44 $generated@@45))
 :pattern ( ($generated@@25 $generated@@44 $generated@@45))
)))
(assert (= ($generated@@46 $generated@@44) 0))
(assert (forall (($generated@@48 T@U) ) (!  (and (= (= ($generated@@47 $generated@@48) 0) (= $generated@@48 $generated@@42)) (=> (or (not (= ($generated@@47 $generated@@48) 0)) (not true)) (exists (($generated@@49 T@U) ) (! ($generated@@41 $generated@@48 $generated@@49)
 :pattern ( ($generated@@41 $generated@@48 $generated@@49))
))))
 :pattern ( ($generated@@47 $generated@@48))
)))
(assert (forall (($generated@@51 Int) ) (! (= ($generated@@50 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@52 $generated@@54 $generated@@53) $generated@@53)
 :pattern ( ($generated@@52 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@55 $generated@@57 $generated@@58)  (and (= ($generated@@46 $generated@@57) ($generated@@46 $generated@@58)) (forall (($generated@@59 Int) ) (!  (=> (and (<= 0 $generated@@59) (< $generated@@59 ($generated@@46 $generated@@57))) (= ($generated@@56 $generated@@57 $generated@@59) ($generated@@56 $generated@@58 $generated@@59)))
 :pattern ( ($generated@@56 $generated@@57 $generated@@59))
 :pattern ( ($generated@@56 $generated@@58 $generated@@59))
))))
 :pattern ( ($generated@@55 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@61 $generated@@63 ($generated@@60 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@60 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@41 ($generated@@64 $generated@@65) $generated@@66) ($generated@@9 ($generated@@21 $generated@@22 $generated@@5 $generated@@65 $generated@@66)))
 :pattern ( ($generated@@41 ($generated@@64 $generated@@65) $generated@@66))
)))
(assert (= ($generated@@4 $generated@@68) 4))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@67 $generated@@68 $generated@@70 ($generated@@69 $generated@@71)) (forall (($generated@@72 T@U) ) (!  (=> ($generated@@41 $generated@@70 $generated@@72) ($generated@@24 $generated@@72 $generated@@71))
 :pattern ( ($generated@@41 $generated@@70 $generated@@72))
)))
 :pattern ( ($generated@@67 $generated@@68 $generated@@70 ($generated@@69 $generated@@71)))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@73 ($generated@@61 $generated@@78 $generated@@75) $generated@@76 $generated@@77) ($generated@@74 $generated@@78 $generated@@75 $generated@@76 $generated@@77))
 :pattern ( ($generated@@73 ($generated@@61 $generated@@78 $generated@@75) $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@25 $generated@@79 $generated@@80) (exists (($generated@@81 Int) ) (!  (and (and (<= 0 $generated@@81) (< $generated@@81 ($generated@@46 $generated@@79))) (= ($generated@@56 $generated@@79 $generated@@81) $generated@@80))
 :pattern ( ($generated@@56 $generated@@79 $generated@@81))
)))
 :pattern ( ($generated@@25 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> ($generated@@55 $generated@@82 $generated@@83) (= $generated@@82 $generated@@83))
 :pattern ( ($generated@@55 $generated@@82 $generated@@83))
)))
(assert (= ($generated@@4 $generated@@87) 5))
(assert  (=> (<= 0 $generated@@84) (forall (($generated@@89 T@U) ) (!  (=> (or ($generated@@86 $generated@@89) (and (< 0 $generated@@84) ($generated@@67 $generated@@87 $generated@@89 ($generated@@88 $generated)))) (= ($generated@@85 true $generated@@89) ($generated@@64 ($generated@@23 $generated $generated@@89))))
 :pattern ( ($generated@@85 true $generated@@89))
))))
(assert (forall (($generated@@90 T@U) ) (!  (=> ($generated@@24 $generated@@90 $generated) (and (= ($generated@@61 $generated@@6 ($generated@@60 $generated@@6 $generated@@90)) $generated@@90) ($generated@@67 $generated@@6 ($generated@@60 $generated@@6 $generated@@90) $generated)))
 :pattern ( ($generated@@24 $generated@@90 $generated))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@24 ($generated@@61 $generated@@93 $generated@@91) $generated@@92) ($generated@@67 $generated@@93 $generated@@91 $generated@@92))
 :pattern ( ($generated@@24 ($generated@@61 $generated@@93 $generated@@91) $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ) (! (<= 0 ($generated@@47 $generated@@94))
 :pattern ( ($generated@@47 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ) (! (<= 0 ($generated@@46 $generated@@95))
 :pattern ( ($generated@@46 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@74 $generated@@68 $generated@@96 ($generated@@69 $generated@@97) $generated@@98) (forall (($generated@@99 T@U) ) (!  (=> ($generated@@41 $generated@@96 $generated@@99) ($generated@@73 $generated@@99 $generated@@97 $generated@@98))
 :pattern ( ($generated@@41 $generated@@96 $generated@@99))
)))
 :pattern ( ($generated@@74 $generated@@68 $generated@@96 ($generated@@69 $generated@@97) $generated@@98))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@74 $generated@@87 $generated@@100 ($generated@@88 $generated@@101) $generated@@102) (forall (($generated@@103 Int) ) (!  (=> (and (<= 0 $generated@@103) (< $generated@@103 ($generated@@46 $generated@@100))) ($generated@@73 ($generated@@56 $generated@@100 $generated@@103) $generated@@101 $generated@@102))
 :pattern ( ($generated@@56 $generated@@100 $generated@@103))
)))
 :pattern ( ($generated@@74 $generated@@87 $generated@@100 ($generated@@88 $generated@@101) $generated@@102))
)))
(assert (forall (($generated@@105 T@U) ) (! (= ($generated@@104 ($generated@@69 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@69 $generated@@105))
)))
(assert (forall (($generated@@106 T@U) ) (! (= ($generated@@20 ($generated@@69 $generated@@106)) $generated@@1)
 :pattern ( ($generated@@69 $generated@@106))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@107 ($generated@@88 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@88 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ) (! (= ($generated@@20 ($generated@@88 $generated@@109)) $generated@@2)
 :pattern ( ($generated@@88 $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@T) ) (! (= ($generated@@60 $generated@@111 ($generated@@61 $generated@@111 $generated@@110)) $generated@@110)
 :pattern ( ($generated@@61 $generated@@111 $generated@@110))
)))
(assert  (=> (<= 0 $generated@@84) (forall (($generated@@112 T@U) ) (!  (=> (or ($generated@@86 ($generated@@52 $generated@@87 $generated@@112)) (and (< 0 $generated@@84) ($generated@@67 $generated@@87 $generated@@112 ($generated@@88 $generated)))) (= ($generated@@85 true ($generated@@52 $generated@@87 $generated@@112)) ($generated@@64 ($generated@@23 $generated $generated@@112))))
 :weight 3
 :pattern ( ($generated@@85 true ($generated@@52 $generated@@87 $generated@@112)))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@113 $generated@@121 $generated@@122 $generated@@123 ($generated@@118 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@126 $generated@@127) $generated@@124)
 :weight 0
)) (and (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (!  (or (= $generated@@133 $generated@@135) (= ($generated@@113 $generated@@128 $generated@@129 $generated@@130 ($generated@@118 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@134 $generated@@131) $generated@@135 $generated@@136) ($generated@@113 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@135 $generated@@136)))
 :weight 0
)) (forall (($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@T) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or (= $generated@@143 $generated@@145) (= ($generated@@113 $generated@@137 $generated@@138 $generated@@139 ($generated@@118 $generated@@137 $generated@@138 $generated@@139 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@113 $generated@@137 $generated@@138 $generated@@139 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)))) (= ($generated@@4 $generated@@114) 6)) (= ($generated@@4 $generated@@115) 7)) (forall (($generated@@146 T@T) ($generated@@147 T@T) ) (= ($generated@@4 ($generated@@117 $generated@@146 $generated@@147)) 8))) (forall (($generated@@148 T@T) ($generated@@149 T@T) ) (! (= ($generated@@119 ($generated@@117 $generated@@148 $generated@@149)) $generated@@148)
 :pattern ( ($generated@@117 $generated@@148 $generated@@149))
))) (forall (($generated@@150 T@T) ($generated@@151 T@T) ) (! (= ($generated@@120 ($generated@@117 $generated@@150 $generated@@151)) $generated@@151)
 :pattern ( ($generated@@117 $generated@@150 $generated@@151))
))))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 Bool) ($generated@@156 T@U) ($generated@@157 T@U) ) (! (= ($generated@@9 ($generated@@113 $generated@@114 $generated@@115 $generated@@5 ($generated@@116 $generated@@152 $generated@@153 $generated@@154 $generated@@155) $generated@@156 $generated@@157))  (=> (and (or (not (= $generated@@156 $generated@@152)) (not true)) ($generated@@9 ($generated@@60 $generated@@5 ($generated@@21 $generated@@115 $generated@@22 ($generated@@21 $generated@@114 ($generated@@117 $generated@@115 $generated@@22) $generated@@153 $generated@@156) $generated@@154)))) $generated@@155))
 :pattern ( ($generated@@113 $generated@@114 $generated@@115 $generated@@5 ($generated@@116 $generated@@152 $generated@@153 $generated@@154 $generated@@155) $generated@@156 $generated@@157))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (!  (=> ($generated@@24 $generated@@158 ($generated@@69 $generated@@159)) (and (= ($generated@@61 $generated@@68 ($generated@@60 $generated@@68 $generated@@158)) $generated@@158) ($generated@@67 $generated@@68 ($generated@@60 $generated@@68 $generated@@158) ($generated@@69 $generated@@159))))
 :pattern ( ($generated@@24 $generated@@158 ($generated@@69 $generated@@159)))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@U) ) (!  (=> ($generated@@24 $generated@@160 ($generated@@88 $generated@@161)) (and (= ($generated@@61 $generated@@87 ($generated@@60 $generated@@87 $generated@@160)) $generated@@160) ($generated@@67 $generated@@87 ($generated@@60 $generated@@87 $generated@@160) ($generated@@88 $generated@@161))))
 :pattern ( ($generated@@24 $generated@@160 ($generated@@88 $generated@@161)))
)))
(assert (forall (($generated@@162 Int) ) (! (= ($generated@@61 $generated@@6 ($generated@@10 ($generated@@50 $generated@@162))) ($generated@@52 $generated@@22 ($generated@@61 $generated@@6 ($generated@@10 $generated@@162))))
 :pattern ( ($generated@@61 $generated@@6 ($generated@@10 ($generated@@50 $generated@@162))))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@T) ) (! (= ($generated@@61 $generated@@164 ($generated@@52 $generated@@164 $generated@@163)) ($generated@@52 $generated@@22 ($generated@@61 $generated@@164 $generated@@163)))
 :pattern ( ($generated@@61 $generated@@164 ($generated@@52 $generated@@164 $generated@@163)))
)))
(assert (forall (($generated@@165 T@U) ) (!  (=> (= ($generated@@46 $generated@@165) 0) (= $generated@@165 $generated@@44))
 :pattern ( ($generated@@46 $generated@@165))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (! ($generated@@74 $generated@@6 $generated@@167 $generated $generated@@166)
 :pattern ( ($generated@@74 $generated@@6 $generated@@167 $generated $generated@@166))
)))
(assert  (=> (<= 0 $generated@@84) (forall (($generated@@168 Bool) ($generated@@169 T@U) ) (!  (=> (or ($generated@@86 $generated@@169) (and (< 0 $generated@@84) ($generated@@67 $generated@@87 $generated@@169 ($generated@@88 $generated)))) ($generated@@67 $generated@@68 ($generated@@85 $generated@@168 $generated@@169) ($generated@@69 $generated)))
 :pattern ( ($generated@@85 $generated@@168 $generated@@169))
))))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (! (= ($generated@@67 $generated@@87 $generated@@170 ($generated@@88 $generated@@171)) (forall (($generated@@172 Int) ) (!  (=> (and (<= 0 $generated@@172) (< $generated@@172 ($generated@@46 $generated@@170))) ($generated@@24 ($generated@@56 $generated@@170 $generated@@172) $generated@@171))
 :pattern ( ($generated@@56 $generated@@170 $generated@@172))
)))
 :pattern ( ($generated@@67 $generated@@87 $generated@@170 ($generated@@88 $generated@@171)))
)))
(assert (forall (($generated@@173 T@U) ) (! ($generated@@67 $generated@@6 $generated@@173 $generated)
 :pattern ( ($generated@@67 $generated@@6 $generated@@173 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () Bool)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 (T@U) Bool)
(declare-fun $generated@@180 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@181  (=> (= $generated@@174 ($generated@@116 $generated@@175 $generated@@176 $generated@@3 false)) (=> (and ($generated@@9 ($generated@@52 $generated@@5 ($generated@@8 false))) (= (ControlFlow 0 2) (- 0 1))) (= ($generated@@47 ($generated@@85 $generated@@177 $generated@@178)) ($generated@@50 0))))))
(let (($generated@@182  (=> (and ($generated@@179 $generated@@176) ($generated@@180 $generated@@176)) (=> (and (and (and ($generated@@67 $generated@@87 $generated@@178 ($generated@@88 $generated)) ($generated@@74 $generated@@87 $generated@@178 ($generated@@88 $generated) $generated@@176)) (= 1 $generated@@84)) (and ($generated@@55 $generated@@178 $generated@@44) (= (ControlFlow 0 3) 2))) $generated@@181))))
$generated@@182)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
