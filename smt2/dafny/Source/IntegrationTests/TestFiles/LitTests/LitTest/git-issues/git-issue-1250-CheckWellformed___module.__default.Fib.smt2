(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U Int) Int)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (Int) Bool)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 () Int)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@47 (T@T T@U T@U) Bool)
(declare-fun $generated@@51 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@118 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@32 T@U) ($generated@@33 Int) ) (!  (=> (or ($generated@@28 $generated@@33) (and (< 1 $generated@@25) (<= ($generated@@29 0) $generated@@33))) (and (=> (or (not (= $generated@@33 ($generated@@29 0))) (not true)) (=> (or (not (= $generated@@33 ($generated@@29 1))) (not true)) (and ($generated@@28 (- $generated@@33 2)) ($generated@@28 (- $generated@@33 1))))) (= ($generated@@26 ($generated@@27 $generated@@32) $generated@@33) (ite (= $generated@@33 ($generated@@29 0)) $generated@@30 (ite (= $generated@@33 ($generated@@29 1)) $generated@@31 (+ ($generated@@26 $generated@@32 (- $generated@@33 2)) ($generated@@26 $generated@@32 (- $generated@@33 1))))))))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@32) $generated@@33))
))))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@29 $generated@@34) $generated@@34)
 :pattern ( ($generated@@29 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@38 T@U) ($generated@@39 Int) ) (!  (=> (or ($generated@@28 ($generated@@29 $generated@@39)) (and (< 1 $generated@@25) (<= ($generated@@29 0) $generated@@39))) (and (=> (or (not (= ($generated@@29 $generated@@39) ($generated@@29 0))) (not true)) (=> (or (not (= ($generated@@29 $generated@@39) ($generated@@29 1))) (not true)) (and ($generated@@28 ($generated@@29 (- $generated@@39 2))) ($generated@@28 ($generated@@29 (- $generated@@39 1)))))) (= ($generated@@26 ($generated@@27 $generated@@38) ($generated@@29 $generated@@39)) (ite (= ($generated@@29 $generated@@39) ($generated@@29 0)) $generated@@30 (ite (= ($generated@@29 $generated@@39) ($generated@@29 1)) $generated@@31 (+ ($generated@@26 ($generated@@27 $generated@@38) ($generated@@29 (- $generated@@39 2))) ($generated@@26 ($generated@@27 $generated@@38) ($generated@@29 (- $generated@@39 1)))))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@38) ($generated@@29 $generated@@39)))
))))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert  (=> (< 0 $generated@@25) (forall (($generated@@45 T@U) ) (!  (=> ($generated@@44 $generated@@45) ($generated@@21 $generated@@6 ($generated@@10 $generated@@30) $generated $generated@@45))
 :pattern ( ($generated@@21 $generated@@6 ($generated@@10 $generated@@30) $generated $generated@@45))
))))
(assert  (=> (< 0 $generated@@25) (forall (($generated@@46 T@U) ) (!  (=> ($generated@@44 $generated@@46) ($generated@@21 $generated@@6 ($generated@@10 $generated@@31) $generated $generated@@46))
 :pattern ( ($generated@@21 $generated@@6 ($generated@@10 $generated@@31) $generated $generated@@46))
))))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@47 $generated@@6 $generated@@48 $generated@@22) (<= ($generated@@29 0) ($generated@@11 $generated@@48)))
 :pattern ( ($generated@@47 $generated@@6 $generated@@48 $generated@@22))
)))
(assert  (=> (< 0 $generated@@25) ($generated@@47 $generated@@6 ($generated@@10 $generated@@30) $generated)))
(assert  (=> (< 0 $generated@@25) ($generated@@47 $generated@@6 ($generated@@10 $generated@@31) $generated)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@40 $generated@@50 ($generated@@41 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@41 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 Int) ) (! (= ($generated@@26 $generated@@53 $generated@@55) ($generated@@11 ($generated@@40 $generated@@6 ($generated@@51 $generated@@22 $generated $generated@@54 ($generated@@52 $generated@@53) ($generated@@41 $generated@@6 ($generated@@10 $generated@@55))))))
 :pattern ( ($generated@@26 $generated@@53 $generated@@55) ($generated@@44 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 Int) ) (! (= ($generated@@26 ($generated@@27 $generated@@56) $generated@@57) ($generated@@26 $generated@@56 $generated@@57))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@56) $generated@@57))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@58 $generated@@69 $generated@@70 $generated@@71 ($generated@@65 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@74 $generated@@75) $generated@@72)
 :weight 0
)) (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@81 $generated@@83) (= ($generated@@58 $generated@@76 $generated@@77 $generated@@78 ($generated@@65 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@58 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@58 $generated@@85 $generated@@86 $generated@@87 ($generated@@65 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@58 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)))) (= ($generated@@4 $generated@@59) 3)) (= ($generated@@4 $generated@@60) 4)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@62 $generated@@94 $generated@@95 ($generated@@66 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@96) $generated@@98) $generated@@96)
 :weight 0
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@103 $generated@@104) (= ($generated@@62 $generated@@99 $generated@@100 ($generated@@66 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@104) ($generated@@62 $generated@@99 $generated@@100 $generated@@102 $generated@@104)))
 :weight 0
))) (= ($generated@@4 $generated@@63) 5)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (= ($generated@@4 ($generated@@64 $generated@@105 $generated@@106)) 6))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@67 ($generated@@64 $generated@@107 $generated@@108)) $generated@@107)
 :pattern ( ($generated@@64 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@68 ($generated@@64 $generated@@109 $generated@@110)) $generated@@110)
 :pattern ( ($generated@@64 $generated@@109 $generated@@110))
))))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 Bool) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@9 ($generated@@58 $generated@@59 $generated@@60 $generated@@5 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))  (=> (and (or (not (= $generated@@115 $generated@@111)) (not true)) ($generated@@9 ($generated@@40 $generated@@5 ($generated@@62 $generated@@60 $generated@@63 ($generated@@62 $generated@@59 ($generated@@64 $generated@@60 $generated@@63) $generated@@112 $generated@@115) $generated@@113)))) $generated@@114))
 :pattern ( ($generated@@58 $generated@@59 $generated@@60 $generated@@5 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))
)))
(assert (forall (($generated@@117 T@U) ) (! (= ($generated@@52 ($generated@@27 $generated@@117)) ($generated@@52 $generated@@117))
 :pattern ( ($generated@@52 ($generated@@27 $generated@@117)))
)))
(assert (= ($generated@@20 $generated@@22) $generated@@2))
(assert (= ($generated@@118 $generated@@22) $generated@@3))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@51 $generated@@22 $generated $generated@@120 ($generated@@52 $generated@@119) $generated@@121) ($generated@@41 $generated@@6 ($generated@@10 ($generated@@26 $generated@@119 ($generated@@11 ($generated@@40 $generated@@6 $generated@@121))))))
 :pattern ( ($generated@@51 $generated@@22 $generated $generated@@120 ($generated@@52 $generated@@119) $generated@@121))
)))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@41 $generated@@6 ($generated@@10 ($generated@@29 $generated@@122))) ($generated@@35 $generated@@63 ($generated@@41 $generated@@6 ($generated@@10 $generated@@122))))
 :pattern ( ($generated@@41 $generated@@6 ($generated@@10 ($generated@@29 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@41 $generated@@124 ($generated@@35 $generated@@124 $generated@@123)) ($generated@@35 $generated@@63 ($generated@@41 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@41 $generated@@124 ($generated@@35 $generated@@124 $generated@@123)))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! ($generated@@21 $generated@@6 $generated@@126 $generated $generated@@125)
 :pattern ( ($generated@@21 $generated@@6 $generated@@126 $generated $generated@@125))
)))
(assert (forall (($generated@@127 T@U) ) (! ($generated@@47 $generated@@6 $generated@@127 $generated)
 :pattern ( ($generated@@47 $generated@@6 $generated@@127 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@135  (=> (or (not (= $generated@@128 ($generated@@29 1))) (not true)) (and (=> (= (ControlFlow 0 5) (- 0 10)) ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@128 2)) $generated@@22)) (=> ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@128 2)) $generated@@22) (=> (and (= $generated@@129 (- $generated@@128 2)) ($generated@@21 $generated@@6 ($generated@@10 $generated@@129) $generated@@22 $generated@@130)) (and (=> (= (ControlFlow 0 5) (- 0 9)) (or (<= 0 $generated@@128) (= $generated@@129 $generated@@128))) (=> (or (<= 0 $generated@@128) (= $generated@@129 $generated@@128)) (and (=> (= (ControlFlow 0 5) (- 0 8)) (< $generated@@129 $generated@@128)) (=> (< $generated@@129 $generated@@128) (=> ($generated@@28 (- $generated@@128 2)) (and (=> (= (ControlFlow 0 5) (- 0 7)) ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@128 1)) $generated@@22)) (=> ($generated@@47 $generated@@6 ($generated@@10 (- $generated@@128 1)) $generated@@22) (=> (and (= $generated@@131 (- $generated@@128 1)) ($generated@@21 $generated@@6 ($generated@@10 $generated@@131) $generated@@22 $generated@@130)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (<= 0 $generated@@128) (= $generated@@131 $generated@@128))) (=> (or (<= 0 $generated@@128) (= $generated@@131 $generated@@128)) (=> (= (ControlFlow 0 5) (- 0 4)) (< $generated@@131 $generated@@128))))))))))))))))))
(let (($generated@@136 true))
(let (($generated@@137  (=> (or (not (= $generated@@128 ($generated@@29 0))) (not true)) (and (=> (= (ControlFlow 0 11) 3) $generated@@136) (=> (= (ControlFlow 0 11) 5) $generated@@135)))))
(let (($generated@@138 true))
(let (($generated@@139 true))
(let (($generated@@140  (=> (= $generated@@132 ($generated@@61 $generated@@133 $generated@@130 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 12) 1) $generated@@139) (=> (= (ControlFlow 0 12) 2) $generated@@138)) (=> (= (ControlFlow 0 12) 11) $generated@@137)))))
(let (($generated@@141  (=> (and (and (and ($generated@@44 $generated@@130) ($generated@@134 $generated@@130)) (<= ($generated@@29 0) $generated@@128)) (and (= 1 $generated@@25) (= (ControlFlow 0 13) 12))) $generated@@140)))
$generated@@141))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
