(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (T@T T@T) T@T)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (T@T T@U) T@U)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@17 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@18 (T@T) T@T)
(declare-fun $generated@@19 (T@T) T@T)
(declare-fun $generated@@46 (Int) Int)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 ((_ BitVec 8)) Int)
(declare-fun $generated@@56 (Int Int) Int)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@8) 0) (= ($generated@@9 $generated@@10) 1)) (= ($generated@@9 $generated@@11) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@6 ($generated@@12 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@12 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@12 ($generated@@6 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@6 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@13 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@14 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@15 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@16 $generated@@25))
))) (forall (($generated@@26 T@T) ($generated@@27 T@T) ($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@0 $generated@@26 $generated@@27 ($generated@@17 $generated@@26 $generated@@27 $generated@@29 $generated@@30 $generated@@28) $generated@@30) $generated@@28)
 :weight 0
))) (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (or (= $generated@@35 $generated@@36) (= ($generated@@0 $generated@@31 $generated@@32 ($generated@@17 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@36) ($generated@@0 $generated@@31 $generated@@32 $generated@@34 $generated@@36)))
 :weight 0
))) (= ($generated@@9 $generated@@1) 3)) (= ($generated@@9 $generated@@2) 4)) (= ($generated@@9 $generated@@3) 5)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ) (= ($generated@@9 ($generated@@4 $generated@@37 $generated@@38)) 6))) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (! (= ($generated@@18 ($generated@@4 $generated@@39 $generated@@40)) $generated@@39)
 :pattern ( ($generated@@4 $generated@@39 $generated@@40))
))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@19 ($generated@@4 $generated@@41 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@4 $generated@@41 $generated@@42))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated $generated@@43 $generated@@44) (forall (($generated@@45 T@U) ) (!  (=> ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@43 $generated@@45) $generated@@5))) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))
)))
 :pattern ( ($generated $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@46 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@7 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@7 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 (_ BitVec 8)) ) (!  (and (and (<= 0 ($generated@@54 $generated@@55)) (< ($generated@@54 $generated@@55) 256)) (= ($generated@@54 $generated@@55) (bv2int $generated@@55)))
 :pattern ( ($generated@@54 $generated@@55))
)))
(assert (forall (($generated@@57 Int) ($generated@@58 Int) ) (! (= ($generated@@56 $generated@@57 $generated@@58) (div $generated@@57 $generated@@58))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (=> (or (not (= $generated@@59 $generated@@61)) (not true)) (=> (and ($generated $generated@@59 $generated@@60) ($generated $generated@@60 $generated@@61)) ($generated $generated@@59 $generated@@61)))
 :pattern ( ($generated $generated@@59 $generated@@60) ($generated $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@7 $generated@@63 ($generated@@51 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@51 $generated@@63 $generated@@62))
)))
(assert  (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@64 $generated@@67 $generated@@68 $generated@@69 ($generated@@66 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@72 $generated@@73) $generated@@70)
 :weight 0
)) (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@64 $generated@@74 $generated@@75 $generated@@76 ($generated@@66 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@64 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@64 $generated@@83 $generated@@84 $generated@@85 ($generated@@66 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@64 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)))))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 Bool) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@6 ($generated@@64 $generated@@3 $generated@@1 $generated@@8 ($generated@@65 $generated@@92 $generated@@93 $generated@@94 $generated@@95) $generated@@96 $generated@@97))  (=> (and (or (not (= $generated@@96 $generated@@92)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@93 $generated@@96) $generated@@94)))) $generated@@95))
 :pattern ( ($generated@@64 $generated@@3 $generated@@1 $generated@@8 ($generated@@65 $generated@@92 $generated@@93 $generated@@94 $generated@@95) $generated@@96 $generated@@97))
)))
(assert (forall (($generated@@98 Int) ) (! (= ($generated@@51 $generated@@10 ($generated@@13 ($generated@@46 $generated@@98))) ($generated@@48 $generated@@2 ($generated@@51 $generated@@10 ($generated@@13 $generated@@98))))
 :pattern ( ($generated@@51 $generated@@10 ($generated@@13 ($generated@@46 $generated@@98))))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@T) ) (! (= ($generated@@51 $generated@@100 ($generated@@48 $generated@@100 $generated@@99)) ($generated@@48 $generated@@2 ($generated@@51 $generated@@100 $generated@@99)))
 :pattern ( ($generated@@51 $generated@@100 ($generated@@48 $generated@@100 $generated@@99)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@101 () (_ BitVec 32))
(declare-fun $generated@@102 (T@U) (_ BitVec 32))
(declare-fun $generated@@103 () T@T)
(declare-fun $generated@@104 ((_ BitVec 32)) T@U)
(declare-fun $generated@@105 () Int)
(declare-fun $generated@@106 () Int)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () (_ BitVec 8))
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(assert  (and (and (= ($generated@@9 $generated@@103) 7) (forall (($generated@@125 (_ BitVec 32)) ) (! (= ($generated@@102 ($generated@@104 $generated@@125)) $generated@@125)
 :pattern ( ($generated@@104 $generated@@125))
))) (forall (($generated@@126 T@U) ) (! (= ($generated@@104 ($generated@@102 $generated@@126)) $generated@@126)
 :pattern ( ($generated@@102 $generated@@126))
))))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 26) (let (($generated@@127  (=> (and (= $generated@@101 ($generated@@102 ($generated@@48 $generated@@103 ($generated@@104 #x0000000c)))) (= $generated@@105 ($generated@@46 31))) (and (=> (= (ControlFlow 0 2) (- 0 11)) (and (<= 0 $generated@@105) (< $generated@@105 64))) (=> (and (<= 0 $generated@@105) (< $generated@@105 64)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (bvule #b011111 #b100000)) (and (=> (= (ControlFlow 0 2) (- 0 9)) (= (bvlshr $generated@@101 (concat #b00000000000000000000000000 #b011111)) ($generated@@102 ($generated@@48 $generated@@103 ($generated@@104 #x00000000))))) (=> (= (bvlshr $generated@@101 (concat #b00000000000000000000000000 #b011111)) ($generated@@102 ($generated@@48 $generated@@103 ($generated@@104 #x00000000)))) (=> (= $generated@@106 ($generated@@46 31)) (and (=> (= (ControlFlow 0 2) (- 0 8)) (and (<= 0 $generated@@106) (< $generated@@106 64))) (=> (and (<= 0 $generated@@106) (< $generated@@106 64)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (bvule #b011111 #b100000)) (=> (= $generated@@107 ($generated@@46 32)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (and (<= 0 $generated@@107) (< $generated@@107 64))) (=> (and (<= 0 $generated@@107) (< $generated@@107 64)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (bvule #b100000 #b100000)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= (bvlshr $generated@@101 (concat #b00000000000000000000000000 #b100000)) ($generated@@102 ($generated@@48 $generated@@103 ($generated@@104 #x00000000))))) (=> (= (bvlshr $generated@@101 (concat #b00000000000000000000000000 #b100000)) ($generated@@102 ($generated@@48 $generated@@103 ($generated@@104 #x00000000)))) (=> (= $generated@@108 ($generated@@46 32)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 $generated@@108) (< $generated@@108 64))) (=> (and (<= 0 $generated@@108) (< $generated@@108 64)) (=> (= (ControlFlow 0 2) (- 0 1)) (bvule #b100000 #b100000)))))))))))))))))))))))
(let (($generated@@128  (=> (and (or (not (= $generated@@109 ($generated@@46 248))) (not true)) (= (ControlFlow 0 14) 2)) $generated@@127)))
(let (($generated@@129  (=> (= $generated@@109 ($generated@@46 248)) (and (=> (= (ControlFlow 0 12) (- 0 13)) (or (not (= ($generated@@46 0) 0)) (not true))) (=> (or (not (= ($generated@@46 0) 0)) (not true)) (=> (and (= $generated@@110 ($generated@@46 ($generated@@56 1 ($generated@@46 0)))) (= (ControlFlow 0 12) 2)) $generated@@127))))))
(let (($generated@@130  (=> (and (= $generated@@111 ($generated@@65 $generated@@112 $generated@@113 $generated@@5 false)) (= $generated@@114 ($generated@@46 128))) (and (=> (= (ControlFlow 0 15) (- 0 25)) (and (<= 0 $generated@@114) (< $generated@@114 256))) (=> (and (<= 0 $generated@@114) (< $generated@@114 256)) (=> (= $generated@@115 ($generated@@46 4)) (and (=> (= (ControlFlow 0 15) (- 0 24)) (and (<= 0 $generated@@115) (< $generated@@115 16))) (=> (and (<= 0 $generated@@115) (< $generated@@115 16)) (and (=> (= (ControlFlow 0 15) (- 0 23)) (bvule #b0100 #b1000)) (=> (bvule #b0100 #b1000) (=> (= $generated@@116 (bvlshr #x80 (concat #b0000 #b0100))) (and (=> (= (ControlFlow 0 15) (- 0 22)) (and (<= ($generated@@46 0) ($generated@@54 $generated@@116)) (< ($generated@@54 $generated@@116) 256))) (=> (and (<= ($generated@@46 0) ($generated@@54 $generated@@116)) (< ($generated@@54 $generated@@116) 256)) (=> (= $generated@@117 ($generated@@54 (bvlshr #x80 (concat #b0000 #b0100)))) (and (=> (= (ControlFlow 0 15) (- 0 21)) (and (<= ($generated@@46 0) $generated@@117) (< $generated@@117 256))) (=> (and (<= ($generated@@46 0) $generated@@117) (< $generated@@117 256)) (=> (and (= $generated@@109 ($generated@@54 (bvlshr #x80 (concat #b0000 #b0100)))) (= $generated@@118 ($generated@@46 248))) (and (=> (= (ControlFlow 0 15) (- 0 20)) (and (<= ($generated@@46 0) $generated@@118) (< $generated@@118 256))) (=> (and (<= ($generated@@46 0) $generated@@118) (< $generated@@118 256)) (and (=> (= (ControlFlow 0 15) (- 0 19)) (or (not (= $generated@@109 248)) (not true))) (=> (or (not (= $generated@@109 248)) (not true)) (=> (= $generated@@119 ($generated@@46 8)) (and (=> (= (ControlFlow 0 15) (- 0 18)) (and (<= ($generated@@46 0) $generated@@119) (< $generated@@119 256))) (=> (and (<= ($generated@@46 0) $generated@@119) (< $generated@@119 256)) (and (=> (= (ControlFlow 0 15) (- 0 17)) (= $generated@@109 ($generated@@46 8))) (=> (= $generated@@109 ($generated@@46 8)) (=> (= $generated@@120 ($generated@@46 248)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (and (<= ($generated@@46 0) $generated@@120) (< $generated@@120 256))) (=> (and (<= ($generated@@46 0) $generated@@120) (< $generated@@120 256)) (and (=> (= (ControlFlow 0 15) 12) $generated@@129) (=> (= (ControlFlow 0 15) 14) $generated@@128)))))))))))))))))))))))))))))))
(let (($generated@@131  (=> (and ($generated@@121 $generated@@113) ($generated@@122 $generated@@113)) (=> (and (and (and (<= ($generated@@46 0) $generated@@123) (< $generated@@123 256)) true) (and (= 1 $generated@@124) (= (ControlFlow 0 26) 15))) $generated@@130))))
$generated@@131))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
