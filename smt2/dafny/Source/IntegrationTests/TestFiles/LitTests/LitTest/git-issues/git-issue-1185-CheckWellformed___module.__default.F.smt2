(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U T@U) T@U)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U T@U) Bool)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 (T@U) T@U)
(declare-fun $generated@@41 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@U T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@51 () Int)
(declare-fun $generated@@52 (T@U T@U) Int)
(declare-fun $generated@@53 (T@U) Bool)
(declare-fun $generated@@54 (T@U T@U) Bool)
(declare-fun $generated@@55 (T@U T@U) Bool)
(declare-fun $generated@@77 (T@U) T@U)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@86 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@T T@T) T@T)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@92 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@1))
(assert (= ($generated@@21 $generated@@0) $generated@@2))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> ($generated@@23 $generated@@25 $generated@@26) ($generated@@24 $generated@@26 ($generated@@22 $generated@@25 $generated@@26)))
 :pattern ( ($generated@@22 $generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ) (!  (not ($generated@@24 $generated@@27 $generated@@28))
 :pattern ( ($generated@@24 $generated@@27 $generated@@28))
)))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@29 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 ($generated@@34 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@34 $generated@@37 $generated@@36))
)))
(assert (= ($generated@@5 $generated@@39) 3))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@38 $generated@@39 $generated@@42 ($generated@@40 $generated@@43)) (forall (($generated@@44 T@U) ) (!  (=> ($generated@@24 $generated@@42 $generated@@44) ($generated@@41 $generated@@44 $generated@@43))
 :pattern ( ($generated@@24 $generated@@42 $generated@@44))
)))
 :pattern ( ($generated@@38 $generated@@39 $generated@@42 ($generated@@40 $generated@@43)))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@45 ($generated@@35 $generated@@50 $generated@@47) $generated@@48 $generated@@49) ($generated@@46 $generated@@50 $generated@@47 $generated@@48 $generated@@49))
 :pattern ( ($generated@@45 ($generated@@35 $generated@@50 $generated@@47) $generated@@48 $generated@@49))
)))
(assert  (=> (<= 0 $generated@@51) (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (=> (or ($generated@@54 $generated@@56 $generated@@58) (and (< 0 $generated@@51) (and (and ($generated@@53 $generated@@57) ($generated@@38 $generated@@39 $generated@@58 ($generated@@40 $generated@@56))) (not ($generated@@55 $generated@@58 $generated@@27))))) (and ($generated@@23 $generated@@56 $generated@@58) (= ($generated@@52 $generated@@56 $generated@@58) (let (($generated@@59 (let (($generated@@60 ($generated@@22 $generated@@56 $generated@@58)))
(= $generated@@60 $generated@@60))))
(ite $generated@@59 6 8)))))
 :pattern ( ($generated@@52 $generated@@56 $generated@@58) ($generated@@53 $generated@@57))
))))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> ($generated@@55 $generated@@61 $generated@@62) (= $generated@@61 $generated@@62))
 :pattern ( ($generated@@55 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@41 $generated@@63 $generated@@0) (and (= ($generated@@35 $generated@@7 ($generated@@34 $generated@@7 $generated@@63)) $generated@@63) ($generated@@38 $generated@@7 ($generated@@34 $generated@@7 $generated@@63) $generated@@0)))
 :pattern ( ($generated@@41 $generated@@63 $generated@@0))
)))
(assert (forall (($generated@@64 T@U) ) (!  (=> ($generated@@41 $generated@@64 $generated) (and (= ($generated@@35 $generated@@6 ($generated@@34 $generated@@6 $generated@@64)) $generated@@64) ($generated@@38 $generated@@6 ($generated@@34 $generated@@6 $generated@@64) $generated)))
 :pattern ( ($generated@@41 $generated@@64 $generated))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@41 ($generated@@35 $generated@@67 $generated@@65) $generated@@66) ($generated@@38 $generated@@67 $generated@@65 $generated@@66))
 :pattern ( ($generated@@41 ($generated@@35 $generated@@67 $generated@@65) $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@46 $generated@@39 $generated@@68 ($generated@@40 $generated@@69) $generated@@70) (forall (($generated@@71 T@U) ) (!  (=> ($generated@@24 $generated@@68 $generated@@71) ($generated@@45 $generated@@71 $generated@@69 $generated@@70))
 :pattern ( ($generated@@24 $generated@@68 $generated@@71))
)))
 :pattern ( ($generated@@46 $generated@@39 $generated@@68 ($generated@@40 $generated@@69) $generated@@70))
)))
(assert  (=> (<= 0 $generated@@51) (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> (or ($generated@@54 $generated@@72 ($generated@@31 $generated@@39 $generated@@74)) (and (< 0 $generated@@51) (and (and ($generated@@53 $generated@@73) ($generated@@38 $generated@@39 $generated@@74 ($generated@@40 $generated@@72))) (not ($generated@@55 $generated@@74 $generated@@27))))) (and ($generated@@23 $generated@@72 ($generated@@31 $generated@@39 $generated@@74)) (= ($generated@@52 $generated@@72 ($generated@@31 $generated@@39 $generated@@74)) (let (($generated@@75 (let (($generated@@76 ($generated@@22 $generated@@72 ($generated@@31 $generated@@39 $generated@@74))))
(= $generated@@76 $generated@@76))))
(ite $generated@@75 6 8)))))
 :weight 3
 :pattern ( ($generated@@52 $generated@@72 ($generated@@31 $generated@@39 $generated@@74)) ($generated@@53 $generated@@73))
))))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@77 ($generated@@40 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@40 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@21 ($generated@@40 $generated@@79)) $generated@@3)
 :pattern ( ($generated@@40 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@34 $generated@@81 ($generated@@35 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@35 $generated@@81 $generated@@80))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@82 $generated@@93 $generated@@94 $generated@@95 ($generated@@89 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@98 $generated@@99) $generated@@96)
 :weight 0
)) (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@82 $generated@@100 $generated@@101 $generated@@102 ($generated@@89 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@82 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@82 $generated@@109 $generated@@110 $generated@@111 ($generated@@89 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@82 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)))) (= ($generated@@5 $generated@@83) 4)) (= ($generated@@5 $generated@@84) 5)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@86 $generated@@118 $generated@@119 ($generated@@90 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@122) $generated@@120)
 :weight 0
))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@127 $generated@@128) (= ($generated@@86 $generated@@123 $generated@@124 ($generated@@90 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@125) $generated@@128) ($generated@@86 $generated@@123 $generated@@124 $generated@@126 $generated@@128)))
 :weight 0
))) (= ($generated@@5 $generated@@87) 6)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (= ($generated@@5 ($generated@@88 $generated@@129 $generated@@130)) 7))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (! (= ($generated@@91 ($generated@@88 $generated@@131 $generated@@132)) $generated@@131)
 :pattern ( ($generated@@88 $generated@@131 $generated@@132))
))) (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (! (= ($generated@@92 ($generated@@88 $generated@@133 $generated@@134)) $generated@@134)
 :pattern ( ($generated@@88 $generated@@133 $generated@@134))
))))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 Bool) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@10 ($generated@@82 $generated@@83 $generated@@84 $generated@@6 ($generated@@85 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))  (=> (and (or (not (= $generated@@139 $generated@@135)) (not true)) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@86 $generated@@84 $generated@@87 ($generated@@86 $generated@@83 ($generated@@88 $generated@@84 $generated@@87) $generated@@136 $generated@@139) $generated@@137)))) $generated@@138))
 :pattern ( ($generated@@82 $generated@@83 $generated@@84 $generated@@6 ($generated@@85 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (!  (=> ($generated@@41 $generated@@141 ($generated@@40 $generated@@142)) (and (= ($generated@@35 $generated@@39 ($generated@@34 $generated@@39 $generated@@141)) $generated@@141) ($generated@@38 $generated@@39 ($generated@@34 $generated@@39 $generated@@141) ($generated@@40 $generated@@142))))
 :pattern ( ($generated@@41 $generated@@141 ($generated@@40 $generated@@142)))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (! (= ($generated@@55 $generated@@143 $generated@@144) (forall (($generated@@145 T@U) ) (! (= ($generated@@24 $generated@@143 $generated@@145) ($generated@@24 $generated@@144 $generated@@145))
 :pattern ( ($generated@@24 $generated@@143 $generated@@145))
 :pattern ( ($generated@@24 $generated@@144 $generated@@145))
)))
 :pattern ( ($generated@@55 $generated@@143 $generated@@144))
)))
(assert (forall (($generated@@146 Int) ) (! (= ($generated@@35 $generated@@7 ($generated@@11 ($generated@@29 $generated@@146))) ($generated@@31 $generated@@87 ($generated@@35 $generated@@7 ($generated@@11 $generated@@146))))
 :pattern ( ($generated@@35 $generated@@7 ($generated@@11 ($generated@@29 $generated@@146))))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@T) ) (! (= ($generated@@35 $generated@@148 ($generated@@31 $generated@@148 $generated@@147)) ($generated@@31 $generated@@87 ($generated@@35 $generated@@148 $generated@@147)))
 :pattern ( ($generated@@35 $generated@@148 ($generated@@31 $generated@@148 $generated@@147)))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (! ($generated@@46 $generated@@7 $generated@@150 $generated@@0 $generated@@149)
 :pattern ( ($generated@@46 $generated@@7 $generated@@150 $generated@@0 $generated@@149))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (! ($generated@@46 $generated@@6 $generated@@152 $generated $generated@@151)
 :pattern ( ($generated@@46 $generated@@6 $generated@@152 $generated $generated@@151))
)))
(assert (forall (($generated@@153 T@U) ) (! ($generated@@38 $generated@@7 $generated@@153 $generated@@0)
 :pattern ( ($generated@@38 $generated@@7 $generated@@153 $generated@@0))
)))
(assert (forall (($generated@@154 T@U) ) (! ($generated@@38 $generated@@6 $generated@@154 $generated)
 :pattern ( ($generated@@38 $generated@@6 $generated@@154 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () Bool)
(declare-fun $generated@@161 () Bool)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@165 true))
(let (($generated@@166 true))
(let (($generated@@167  (and (=> (= (ControlFlow 0 4) (- 0 6)) (exists (($generated@@168 T@U) )  (and ($generated@@41 $generated@@168 $generated@@155) ($generated@@24 $generated@@156 $generated@@168)))) (=> (exists (($generated@@169 T@U) )  (and ($generated@@41 $generated@@169 $generated@@155) ($generated@@24 $generated@@156 $generated@@169))) (=> (and (and (and ($generated@@41 $generated@@157 $generated@@155) ($generated@@45 $generated@@157 $generated@@155 $generated@@158)) ($generated@@24 $generated@@156 $generated@@157)) (and (and ($generated@@41 $generated@@159 $generated@@155) ($generated@@45 $generated@@159 $generated@@155 $generated@@158)) ($generated@@24 $generated@@156 $generated@@159))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (= (= $generated@@157 $generated@@157) (= $generated@@159 $generated@@159))) (=> (= (= $generated@@157 $generated@@157) (= $generated@@159 $generated@@159)) (=> (and (and ($generated@@23 $generated@@155 $generated@@156) (= $generated@@160 (= $generated@@157 $generated@@157))) (and ($generated@@38 $generated@@6 ($generated@@9 $generated@@160) $generated) (= $generated@@161 $generated@@160))) (and (=> (= (ControlFlow 0 4) 2) $generated@@166) (=> (= (ControlFlow 0 4) 3) $generated@@165))))))))))
(let (($generated@@170  (=> (and (not (and ($generated@@41 $generated@@157 $generated@@155) ($generated@@45 $generated@@157 $generated@@155 $generated@@158))) (= (ControlFlow 0 8) 4)) $generated@@167)))
(let (($generated@@171  (=> (and (and ($generated@@41 $generated@@157 $generated@@155) ($generated@@45 $generated@@157 $generated@@155 $generated@@158)) (= (ControlFlow 0 7) 4)) $generated@@167)))
(let (($generated@@172 true))
(let (($generated@@173  (=> (and (= $generated@@162 ($generated@@85 $generated@@163 $generated@@158 $generated@@4 false)) (not ($generated@@55 $generated@@156 $generated@@27))) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@172) (=> (= (ControlFlow 0 9) 7) $generated@@171)) (=> (= (ControlFlow 0 9) 8) $generated@@170)))))
(let (($generated@@174  (=> (and (and (and ($generated@@53 $generated@@158) ($generated@@164 $generated@@158)) ($generated@@38 $generated@@39 $generated@@156 ($generated@@40 $generated@@155))) (and (= 0 $generated@@51) (= (ControlFlow 0 10) 9))) $generated@@173)))
$generated@@174)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
