(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U T@U Int) Bool)
(declare-fun $generated@@23 (T@U Int) Bool)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@29 (Int Int) Int)
(declare-fun $generated@@30 (T@U T@U Int) Bool)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@36 (T@U Int) Bool)
(declare-fun $generated@@40 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@T T@T) T@T)
(declare-fun $generated@@52 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@78 (T@T T@U) T@U)
(declare-fun $generated@@88 (T@U T@U T@U) Bool)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@132 (T@U) T@U)
(declare-fun $generated@@133 (T@U) T@U)
(declare-fun $generated@@134 (T@U) Bool)
(declare-fun $generated@@135 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@5 $generated@@26) 3))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 Int) ) (!  (=> (or ($generated@@23 $generated@@34 $generated@@35) (and (< 1 $generated@@21) (and (and (or (not (= $generated@@34 $generated@@24)) (not true)) ($generated@@25 $generated@@26 $generated@@34 $generated@@27)) (<= ($generated@@28 0) $generated@@35)))) (or (= $generated@@35 ($generated@@28 0)) (= (= ($generated@@29 $generated@@35 ($generated@@28 2)) ($generated@@28 0)) ($generated@@30 ($generated@@31 $generated@@32) $generated@@34 (- $generated@@35 1)))))
 :pattern ( ($generated@@22 $generated@@33 $generated@@34 $generated@@35))
))))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 Int) ) (!  (=> (or ($generated@@36 $generated@@38 $generated@@39) (and (< 1 $generated@@21) (and (and (or (not (= $generated@@38 $generated@@24)) (not true)) ($generated@@25 $generated@@26 $generated@@38 $generated@@27)) (<= ($generated@@28 0) $generated@@39)))) (or (= $generated@@39 ($generated@@28 0)) (= (= ($generated@@29 $generated@@39 ($generated@@28 2)) ($generated@@28 1)) ($generated@@22 ($generated@@31 $generated@@32) $generated@@38 (- $generated@@39 1)))))
 :pattern ( ($generated@@30 $generated@@37 $generated@@38 $generated@@39))
))))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! ($generated@@40 $generated@@7 $generated@@42 $generated@@41 $generated@@43)
 :pattern ( ($generated@@40 $generated@@7 $generated@@42 $generated@@41 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@40 $generated@@26 $generated@@45 $generated@@27 $generated@@46) ($generated@@40 $generated@@26 $generated@@45 $generated@@44 $generated@@46))
 :pattern ( ($generated@@40 $generated@@26 $generated@@45 $generated@@27 $generated@@46))
 :pattern ( ($generated@@40 $generated@@26 $generated@@45 $generated@@44 $generated@@46))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@48 $generated@@55 $generated@@56 ($generated@@52 $generated@@55 $generated@@56 $generated@@58 $generated@@59 $generated@@57) $generated@@59) $generated@@57)
 :weight 0
)) (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (!  (or (= $generated@@64 $generated@@65) (= ($generated@@48 $generated@@60 $generated@@61 ($generated@@52 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@62) $generated@@65) ($generated@@48 $generated@@60 $generated@@61 $generated@@63 $generated@@65)))
 :weight 0
))) (= ($generated@@5 $generated@@49) 4)) (= ($generated@@5 $generated@@50) 5)) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (= ($generated@@5 ($generated@@51 $generated@@66 $generated@@67)) 6))) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@53 ($generated@@51 $generated@@68 $generated@@69)) $generated@@68)
 :pattern ( ($generated@@51 $generated@@68 $generated@@69))
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@54 ($generated@@51 $generated@@70 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@51 $generated@@70 $generated@@71))
))))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@40 $generated@@26 $generated@@72 $generated@@44 $generated@@73)  (or (= $generated@@72 $generated@@24) ($generated@@10 ($generated@@47 $generated@@6 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@26 ($generated@@51 $generated@@49 $generated@@50) $generated@@73 $generated@@72) $generated)))))
 :pattern ( ($generated@@40 $generated@@26 $generated@@72 $generated@@44 $generated@@73))
)))
(assert (forall (($generated@@74 Int) ) (! (= ($generated@@28 $generated@@74) $generated@@74)
 :pattern ( ($generated@@28 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 $generated@@76) $generated@@76)
 :pattern ( ($generated@@75 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@78 $generated@@80 ($generated@@47 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@47 $generated@@80 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ) (! (= ($generated@@25 $generated@@7 $generated@@81 $generated@@41) (<= ($generated@@28 0) ($generated@@12 $generated@@81)))
 :pattern ( ($generated@@25 $generated@@7 $generated@@81 $generated@@41))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 Int) ) (! (= ($generated@@22 ($generated@@31 $generated@@82) $generated@@83 $generated@@84) ($generated@@22 $generated@@82 $generated@@83 $generated@@84))
 :pattern ( ($generated@@22 ($generated@@31 $generated@@82) $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 Int) ) (! (= ($generated@@30 ($generated@@31 $generated@@85) $generated@@86 $generated@@87) ($generated@@30 $generated@@85 $generated@@86 $generated@@87))
 :pattern ( ($generated@@30 ($generated@@31 $generated@@85) $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@88 ($generated@@78 $generated@@92 $generated@@89) $generated@@90 $generated@@91) ($generated@@40 $generated@@92 $generated@@89 $generated@@90 $generated@@91))
 :pattern ( ($generated@@88 ($generated@@78 $generated@@92 $generated@@89) $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@93 $generated@@27)  (and ($generated@@25 $generated@@26 $generated@@93 $generated@@44) (or (not (= $generated@@93 $generated@@24)) (not true))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@93 $generated@@27))
 :pattern ( ($generated@@25 $generated@@26 $generated@@93 $generated@@44))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@47 $generated@@95 ($generated@@78 $generated@@95 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@78 $generated@@95 $generated@@94))
)))
(assert  (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@96 $generated@@99 $generated@@100 $generated@@101 ($generated@@98 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@104 $generated@@105) $generated@@102)
 :weight 0
)) (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@96 $generated@@106 $generated@@107 $generated@@108 ($generated@@98 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@96 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@96 $generated@@115 $generated@@116 $generated@@117 ($generated@@98 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@96 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@10 ($generated@@96 $generated@@26 $generated@@49 $generated@@6 ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@10 ($generated@@47 $generated@@6 ($generated@@48 $generated@@49 $generated@@50 ($generated@@48 $generated@@26 ($generated@@51 $generated@@49 $generated@@50) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@96 $generated@@26 $generated@@49 $generated@@6 ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert (forall (($generated@@130 Int) ($generated@@131 Int) ) (! (= ($generated@@29 $generated@@130 $generated@@131) (mod $generated@@130 $generated@@131))
 :pattern ( ($generated@@29 $generated@@130 $generated@@131))
)))
(assert (= ($generated@@132 $generated@@41) $generated@@0))
(assert (= ($generated@@133 $generated@@41) $generated@@3))
(assert (= ($generated@@132 $generated@@44) $generated@@1))
(assert (= ($generated@@133 $generated@@44) $generated@@4))
(assert (= ($generated@@132 $generated@@27) $generated@@2))
(assert (= ($generated@@133 $generated@@27) $generated@@4))
(assert (forall (($generated@@136 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@136 $generated@@44)  (or (= $generated@@136 $generated@@24) ($generated@@134 ($generated@@135 $generated@@136))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@136 $generated@@44))
)))
(assert (forall (($generated@@137 Int) ) (! (= ($generated@@78 $generated@@7 ($generated@@11 ($generated@@28 $generated@@137))) ($generated@@75 $generated@@50 ($generated@@78 $generated@@7 ($generated@@11 $generated@@137))))
 :pattern ( ($generated@@78 $generated@@7 ($generated@@11 ($generated@@28 $generated@@137))))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@T) ) (! (= ($generated@@78 $generated@@139 ($generated@@75 $generated@@139 $generated@@138)) ($generated@@75 $generated@@50 ($generated@@78 $generated@@139 $generated@@138)))
 :pattern ( ($generated@@78 $generated@@139 ($generated@@75 $generated@@139 $generated@@138)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@146 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@147 true))
(let (($generated@@148  (=> (or (not (= $generated@@140 ($generated@@28 0))) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 8)) (or (not (= ($generated@@28 2) 0)) (not true))) (=> (or (not (= ($generated@@28 2) 0)) (not true)) (=> ($generated@@88 ($generated@@78 $generated@@26 $generated@@141) $generated@@44 $generated@@142) (and (=> (= (ControlFlow 0 4) (- 0 7)) ($generated@@25 $generated@@7 ($generated@@11 (- $generated@@140 1)) $generated@@41)) (=> ($generated@@25 $generated@@7 ($generated@@11 (- $generated@@140 1)) $generated@@41) (=> (and (= $generated@@143 (- $generated@@140 1)) ($generated@@40 $generated@@7 ($generated@@11 $generated@@143) $generated@@41 $generated@@142)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (<= 0 $generated@@140) (= $generated@@143 $generated@@140))) (=> (or (<= 0 $generated@@140) (= $generated@@143 $generated@@140)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (< $generated@@143 $generated@@140)) (=> (< $generated@@143 $generated@@140) (=> ($generated@@36 $generated@@141 (- $generated@@140 1)) (=> (and (= (= ($generated@@29 $generated@@140 ($generated@@28 2)) ($generated@@28 0)) ($generated@@30 ($generated@@31 $generated@@32) $generated@@141 (- $generated@@140 1))) (= (ControlFlow 0 4) 2)) $generated@@147)))))))))))))))
(let (($generated@@149  (=> (and (= $generated@@140 ($generated@@28 0)) (= (ControlFlow 0 3) 2)) $generated@@147)))
(let (($generated@@150 true))
(let (($generated@@151  (=> (= $generated@@144 ($generated@@97 $generated@@24 $generated@@142 $generated false)) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@150) (=> (= (ControlFlow 0 9) 3) $generated@@149)) (=> (= (ControlFlow 0 9) 4) $generated@@148)))))
(let (($generated@@152  (=> (and ($generated@@145 $generated@@142) ($generated@@146 $generated@@142)) (=> (and (and (and (or (not (= $generated@@141 $generated@@24)) (not true)) (and ($generated@@25 $generated@@26 $generated@@141 $generated@@27) ($generated@@40 $generated@@26 $generated@@141 $generated@@27 $generated@@142))) (<= ($generated@@28 0) $generated@@140)) (and (= 1 $generated@@21) (= (ControlFlow 0 10) 9))) $generated@@151))))
$generated@@152)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
