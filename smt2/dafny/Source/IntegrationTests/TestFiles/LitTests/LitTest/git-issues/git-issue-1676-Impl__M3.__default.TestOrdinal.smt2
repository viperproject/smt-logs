(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (Int) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@38 (T@U) Int)
(declare-fun $generated@@40 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@114 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ($generated@@24 T@U) ) (!  (=> (and ($generated@@21 $generated@@22 $generated@@23) ($generated@@21 $generated@@23 $generated@@24)) ($generated@@21 $generated@@22 $generated@@24))
 :pattern ( ($generated@@21 $generated@@22 $generated@@23) ($generated@@21 $generated@@23 $generated@@24))
 :pattern ( ($generated@@21 $generated@@22 $generated@@23) ($generated@@21 $generated@@22 $generated@@24))
)))
(assert (= ($generated@@4 $generated@@26) 3))
(assert (forall (($generated@@29 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@29 $generated@@27)  (and ($generated@@25 $generated@@26 $generated@@29 $generated) (and (or (= ($generated@@28 1000) $generated@@29) ($generated@@21 ($generated@@28 1000) $generated@@29)) ($generated@@21 $generated@@29 ($generated@@28 1200)))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@29 $generated@@27))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 ($generated@@33 $generated@@36 $generated@@35)) $generated@@35)
 :pattern ( ($generated@@33 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@39 Int) ) (!  (=> (<= 0 $generated@@39) (and ($generated@@37 ($generated@@28 $generated@@39)) (= ($generated@@38 ($generated@@28 $generated@@39)) $generated@@39)))
 :pattern ( ($generated@@28 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (!  (and (or (= $generated@@41 ($generated@@40 $generated@@41 $generated@@42)) ($generated@@21 $generated@@41 ($generated@@40 $generated@@41 $generated@@42))) (or (= $generated@@42 ($generated@@40 $generated@@41 $generated@@42)) ($generated@@21 $generated@@42 ($generated@@40 $generated@@41 $generated@@42))))
 :pattern ( ($generated@@40 $generated@@41 $generated@@42))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (or (or ($generated@@21 $generated@@43 $generated@@44) (= $generated@@43 $generated@@44)) ($generated@@21 $generated@@44 $generated@@43))
 :pattern ( ($generated@@21 $generated@@43 $generated@@44) ($generated@@21 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (and (=> (= $generated@@45 ($generated@@28 0)) (= ($generated@@40 $generated@@45 $generated@@46) $generated@@46)) (=> (= $generated@@46 ($generated@@28 0)) (= ($generated@@40 $generated@@45 $generated@@46) $generated@@45)))
 :pattern ( ($generated@@40 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@47 T@U) ) (! (<= 0 ($generated@@38 $generated@@47))
 :pattern ( ($generated@@38 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@33 $generated@@49 ($generated@@34 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@34 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (!  (and (and (and (=> ($generated@@21 $generated@@50 $generated@@51) (or (not (= $generated@@50 $generated@@51)) (not true))) (=> (and ($generated@@37 $generated@@50) (not ($generated@@37 $generated@@51))) ($generated@@21 $generated@@50 $generated@@51))) (=> (and ($generated@@37 $generated@@50) ($generated@@37 $generated@@51)) (= ($generated@@21 $generated@@50 $generated@@51) (< ($generated@@38 $generated@@50) ($generated@@38 $generated@@51))))) (=> (and ($generated@@21 $generated@@50 $generated@@51) ($generated@@37 $generated@@51)) ($generated@@37 $generated@@50)))
 :pattern ( ($generated@@21 $generated@@50 $generated@@51))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@52 $generated@@62 $generated@@63 $generated@@64 ($generated@@58 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@67 $generated@@68) $generated@@65)
 :weight 0
)) (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@52 $generated@@69 $generated@@70 $generated@@71 ($generated@@58 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@76 $generated@@77) ($generated@@52 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@76 $generated@@77)))
 :weight 0
)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@52 $generated@@78 $generated@@79 $generated@@80 ($generated@@58 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@52 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)))) (= ($generated@@4 $generated@@53) 4)) (= ($generated@@4 $generated@@54) 5)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@56 $generated@@87 $generated@@88 ($generated@@59 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@91) $generated@@89)
 :weight 0
))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@96 $generated@@97) (= ($generated@@56 $generated@@92 $generated@@93 ($generated@@59 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@97) ($generated@@56 $generated@@92 $generated@@93 $generated@@95 $generated@@97)))
 :weight 0
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (= ($generated@@4 ($generated@@57 $generated@@98 $generated@@99)) 6))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@60 ($generated@@57 $generated@@100 $generated@@101)) $generated@@100)
 :pattern ( ($generated@@57 $generated@@100 $generated@@101))
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@61 ($generated@@57 $generated@@102 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@57 $generated@@102 $generated@@103))
))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 Bool) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@9 ($generated@@52 $generated@@53 $generated@@54 $generated@@5 ($generated@@55 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))  (=> (and (or (not (= $generated@@108 $generated@@104)) (not true)) ($generated@@9 ($generated@@33 $generated@@5 ($generated@@56 $generated@@54 $generated@@26 ($generated@@56 $generated@@53 ($generated@@57 $generated@@54 $generated@@26) $generated@@105 $generated@@108) $generated@@106)))) $generated@@107))
 :pattern ( ($generated@@52 $generated@@53 $generated@@54 $generated@@5 ($generated@@55 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 Int) ($generated@@112 Int) ) (!  (=> (and (<= 0 $generated@@111) (<= 0 $generated@@112)) (= ($generated@@40 ($generated@@40 $generated@@110 ($generated@@28 $generated@@111)) ($generated@@28 $generated@@112)) ($generated@@40 $generated@@110 ($generated@@28 (+ $generated@@111 $generated@@112)))))
 :pattern ( ($generated@@40 ($generated@@40 $generated@@110 ($generated@@28 $generated@@111)) ($generated@@28 $generated@@112)))
)))
(assert (forall (($generated@@113 T@U) ) (!  (=> ($generated@@37 $generated@@113) (= $generated@@113 ($generated@@28 ($generated@@38 $generated@@113))))
 :pattern ( ($generated@@38 $generated@@113))
 :pattern ( ($generated@@37 $generated@@113))
)))
(assert (= ($generated@@20 $generated@@27) $generated@@2))
(assert (= ($generated@@114 $generated@@27) $generated@@3))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (!  (and (=> ($generated@@37 ($generated@@40 $generated@@115 $generated@@116)) (and ($generated@@37 $generated@@115) ($generated@@37 $generated@@116))) (=> ($generated@@37 $generated@@116) (and (= ($generated@@37 ($generated@@40 $generated@@115 $generated@@116)) ($generated@@37 $generated@@115)) (= ($generated@@38 ($generated@@40 $generated@@115 $generated@@116)) (+ ($generated@@38 $generated@@115) ($generated@@38 $generated@@116))))))
 :pattern ( ($generated@@40 $generated@@115 $generated@@116))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@T) ) (! (= ($generated@@34 $generated@@118 ($generated@@30 $generated@@118 $generated@@117)) ($generated@@30 $generated@@26 ($generated@@34 $generated@@118 $generated@@117)))
 :pattern ( ($generated@@34 $generated@@118 ($generated@@30 $generated@@118 $generated@@117)))
)))
(assert (forall (($generated@@119 T@U) ) (! ($generated@@25 $generated@@26 $generated@@119 $generated)
 :pattern ( ($generated@@25 $generated@@26 $generated@@119 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@131  (=> (and (and (and (and (and (and (not ($generated@@9 ($generated@@30 $generated@@5 ($generated@@8 true)))) (not ($generated@@9 ($generated@@30 $generated@@5 ($generated@@8 true))))) (not ($generated@@9 ($generated@@30 $generated@@5 ($generated@@8 true))))) (not ($generated@@9 ($generated@@30 $generated@@5 ($generated@@8 true))))) (not ($generated@@9 ($generated@@30 $generated@@5 ($generated@@8 true))))) (not ($generated@@9 ($generated@@30 $generated@@5 ($generated@@8 true))))) (= (ControlFlow 0 10) (- 0 9))) false)))
(let (($generated@@132 true))
(let (($generated@@133 true))
(let (($generated@@134  (=> (= (ControlFlow 0 6) (- 0 5)) ($generated@@25 $generated@@26 ($generated@@40 $generated@@120 $generated@@121) $generated@@27))))
(let (($generated@@135  (=> (= (ControlFlow 0 4) (- 0 3)) ($generated@@25 $generated@@26 ($generated@@40 $generated@@121 $generated@@120) $generated@@27))))
(let (($generated@@136 true))
(let (($generated@@137 true))
(let (($generated@@138  (=> (= $generated@@122 ($generated@@55 $generated@@123 $generated@@124 $generated@@1 false)) (and (and (and (and (and (and (=> (= (ControlFlow 0 11) 1) $generated@@137) (=> (= (ControlFlow 0 11) 2) $generated@@136)) (=> (= (ControlFlow 0 11) 4) $generated@@135)) (=> (= (ControlFlow 0 11) 6) $generated@@134)) (=> (= (ControlFlow 0 11) 7) $generated@@133)) (=> (= (ControlFlow 0 11) 8) $generated@@132)) (=> (= (ControlFlow 0 11) 10) $generated@@131)))))
(let (($generated@@139  (=> (and (and ($generated@@125 $generated@@124) ($generated@@126 $generated@@124)) ($generated@@25 $generated@@26 $generated@@120 $generated@@27)) (=> (and (and (and ($generated@@25 $generated@@26 $generated@@127 $generated@@27) true) (and ($generated@@25 $generated@@26 $generated@@128 $generated@@27) true)) (and (and ($generated@@25 $generated@@26 $generated@@129 $generated@@27) true) (and (= 1 $generated@@130) (= (ControlFlow 0 12) 11)))) $generated@@138))))
$generated@@139))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
