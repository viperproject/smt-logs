(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) Bool)
(declare-fun $generated@@20 (T@U) Bool)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@39 (T@U T@U T@U) Bool)
(declare-fun $generated@@40 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 (T@U) T@U)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@52 (T@U T@U) Bool)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@65 (T@U) Int)
(declare-fun $generated@@66 (T@U) Int)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 (T@T T@T) T@T)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@81 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@21 T@U) ) (!  (=> ($generated@@19 $generated@@21) ($generated@@20 $generated@@21))
 :pattern ( ($generated@@19 $generated@@21))
)))
(assert (= ($generated@@3 $generated@@23) 3))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@26 ($generated@@24 $generated@@25)) ($generated@@20 $generated@@26))
 :pattern ( ($generated@@20 $generated@@26) ($generated@@22 $generated@@23 $generated@@26 ($generated@@24 $generated@@25)))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@31 T@U) ) (! (= ($generated@@20 $generated@@31) (= ($generated@@30 $generated@@31) $generated@@1))
 :pattern ( ($generated@@20 $generated@@31))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 ($generated@@32 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ) (!  (=> ($generated@@20 $generated@@37) (exists (($generated@@38 T@U) ) (= $generated@@37 ($generated@@36 $generated@@38))))
 :pattern ( ($generated@@20 $generated@@37))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@39 ($generated@@33 $generated@@44 $generated@@41) $generated@@42 $generated@@43) ($generated@@40 $generated@@44 $generated@@41 $generated@@42 $generated@@43))
 :pattern ( ($generated@@39 ($generated@@33 $generated@@44 $generated@@41) $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@47 T@U) ) (!  (and (= ($generated@@45 ($generated@@24 $generated@@47)) $generated@@0) (= ($generated@@46 ($generated@@24 $generated@@47)) $generated@@2))
 :pattern ( ($generated@@24 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (!  (=> ($generated@@48 $generated@@51) (= ($generated@@40 $generated@@23 ($generated@@36 $generated@@50) ($generated@@24 $generated@@49) $generated@@51) ($generated@@39 $generated@@50 $generated@@49 $generated@@51)))
 :pattern ( ($generated@@40 $generated@@23 ($generated@@36 $generated@@50) ($generated@@24 $generated@@49) $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@52 ($generated@@33 $generated@@55 $generated@@53) $generated@@54) ($generated@@22 $generated@@55 $generated@@53 $generated@@54))
 :pattern ( ($generated@@52 ($generated@@33 $generated@@55 $generated@@53) $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@56 ($generated@@24 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@24 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@30 ($generated@@36 $generated@@58)) $generated@@1)
 :pattern ( ($generated@@36 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@59 ($generated@@36 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@36 $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@32 $generated@@62 ($generated@@33 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@33 $generated@@62 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@36 $generated@@64) ($generated@@24 $generated@@63)) ($generated@@52 $generated@@64 $generated@@63))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@36 $generated@@64) ($generated@@24 $generated@@63)))
)))
(assert (forall (($generated@@67 T@U) ) (! (< ($generated@@65 $generated@@67) ($generated@@66 ($generated@@36 $generated@@67)))
 :pattern ( ($generated@@36 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (=> (and ($generated@@48 $generated@@70) (and ($generated@@20 $generated@@68) ($generated@@40 $generated@@23 $generated@@68 ($generated@@24 $generated@@69) $generated@@70))) ($generated@@39 ($generated@@59 $generated@@68) $generated@@69 $generated@@70))
 :pattern ( ($generated@@39 ($generated@@59 $generated@@68) $generated@@69 $generated@@70))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@71 $generated@@82 $generated@@83 $generated@@84 ($generated@@78 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@87 $generated@@88) $generated@@85)
 :weight 0
)) (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@71 $generated@@89 $generated@@90 $generated@@91 ($generated@@78 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@71 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@71 $generated@@98 $generated@@99 $generated@@100 ($generated@@78 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)))) (= ($generated@@3 $generated@@72) 4)) (= ($generated@@3 $generated@@73) 5)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@75 $generated@@107 $generated@@108 ($generated@@79 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@111) $generated@@109)
 :weight 0
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@116 $generated@@117) (= ($generated@@75 $generated@@112 $generated@@113 ($generated@@79 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@117) ($generated@@75 $generated@@112 $generated@@113 $generated@@115 $generated@@117)))
 :weight 0
))) (= ($generated@@3 $generated@@76) 6)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (= ($generated@@3 ($generated@@77 $generated@@118 $generated@@119)) 7))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@80 ($generated@@77 $generated@@120 $generated@@121)) $generated@@120)
 :pattern ( ($generated@@77 $generated@@120 $generated@@121))
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@81 ($generated@@77 $generated@@122 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@77 $generated@@122 $generated@@123))
))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@8 ($generated@@71 $generated@@72 $generated@@73 $generated@@4 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@8 ($generated@@32 $generated@@4 ($generated@@75 $generated@@73 $generated@@76 ($generated@@75 $generated@@72 ($generated@@77 $generated@@73 $generated@@76) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@71 $generated@@72 $generated@@73 $generated@@4 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert (forall (($generated@@130 T@U) ) (! (= ($generated@@65 ($generated@@33 $generated@@23 $generated@@130)) ($generated@@66 $generated@@130))
 :pattern ( ($generated@@65 ($generated@@33 $generated@@23 $generated@@130)))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> ($generated@@52 $generated@@132 ($generated@@24 $generated@@131)) (and (= ($generated@@33 $generated@@23 ($generated@@32 $generated@@23 $generated@@132)) $generated@@132) ($generated@@22 $generated@@23 ($generated@@32 $generated@@23 $generated@@132) ($generated@@24 $generated@@131))))
 :pattern ( ($generated@@52 $generated@@132 ($generated@@24 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (! (= ($generated@@36 ($generated@@27 $generated@@76 $generated@@133)) ($generated@@27 $generated@@23 ($generated@@36 $generated@@133)))
 :pattern ( ($generated@@36 ($generated@@27 $generated@@76 $generated@@133)))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@T) ) (! (= ($generated@@33 $generated@@135 ($generated@@27 $generated@@135 $generated@@134)) ($generated@@27 $generated@@76 ($generated@@33 $generated@@135 $generated@@134)))
 :pattern ( ($generated@@33 $generated@@135 ($generated@@27 $generated@@135 $generated@@134)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 () Bool)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@148 true))
(let (($generated@@149  (=> (= $generated@@136 ($generated@@36 $generated@@137)) (=> (and (and (and ($generated@@52 $generated@@137 $generated@@138) ($generated@@39 $generated@@137 $generated@@138 $generated@@139)) (and ($generated@@52 $generated@@140 $generated@@138) ($generated@@39 $generated@@140 $generated@@138 $generated@@139))) (and (and (= $generated@@141 $generated@@137) ($generated@@52 $generated@@141 $generated@@138)) (and (= $generated@@140 $generated@@141) (= (ControlFlow 0 2) (- 0 1))))) true))))
(let (($generated@@150  (=> (= $generated@@142 ($generated@@74 $generated@@143 $generated@@139 $generated false)) (and (=> (= (ControlFlow 0 4) (- 0 5)) ($generated@@8 ($generated@@27 $generated@@4 ($generated@@7 true)))) (=> ($generated@@8 ($generated@@27 $generated@@4 ($generated@@7 true))) (and (=> (= (ControlFlow 0 4) 2) $generated@@149) (=> (= (ControlFlow 0 4) 3) $generated@@148)))))))
(let (($generated@@151  (=> (and ($generated@@48 $generated@@139) ($generated@@144 $generated@@139)) (=> (and (and (and (and ($generated@@22 $generated@@23 $generated@@136 ($generated@@24 $generated@@138)) ($generated@@40 $generated@@23 $generated@@136 ($generated@@24 $generated@@138) $generated@@139)) ($generated@@19 $generated@@136)) (=> $generated@@145 (and ($generated@@52 $generated@@146 $generated@@138) ($generated@@39 $generated@@146 $generated@@138 $generated@@139)))) (and (= 1 $generated@@147) (= (ControlFlow 0 6) 4))) $generated@@150))))
$generated@@151)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
