(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (Int) Int)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@17 (T@T T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (Int Int) Int)
(declare-fun $generated@@29 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 (T@T T@T) T@T)
(declare-fun $generated@@36 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@88 (Int Int) Int)
(declare-fun $generated@@91 (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 Int) ) (! (= ($generated $generated@@16) $generated@@16)
 :pattern ( ($generated $generated@@16))
)))
(assert (forall (($generated@@18 T@U) ($generated@@19 T@T) ) (! (= ($generated@@17 $generated@@19 $generated@@18) $generated@@18)
 :pattern ( ($generated@@17 $generated@@19 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 ($generated@@20 $generated@@23 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@25 Int) ($generated@@26 Int) ) (! (= ($generated@@24 $generated@@25 $generated@@26) (div $generated@@25 $generated@@26))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@20 $generated@@28 ($generated@@21 $generated@@28 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@21 $generated@@28 $generated@@27))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@29 $generated@@40 $generated@@41 $generated@@42 ($generated@@36 $generated@@40 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@46 $generated@@43) $generated@@45 $generated@@46) $generated@@43)
 :weight 0
)) (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (= $generated@@52 $generated@@54) (= ($generated@@29 $generated@@47 $generated@@48 $generated@@49 ($generated@@36 $generated@@47 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@53 $generated@@50) $generated@@54 $generated@@55) ($generated@@29 $generated@@47 $generated@@48 $generated@@49 $generated@@51 $generated@@54 $generated@@55)))
 :weight 0
)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (or (= $generated@@62 $generated@@64) (= ($generated@@29 $generated@@56 $generated@@57 $generated@@58 ($generated@@36 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@59) $generated@@63 $generated@@64) ($generated@@29 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@63 $generated@@64)))
 :weight 0
)))) (= ($generated@@0 $generated@@30) 3)) (= ($generated@@0 $generated@@31) 4)) (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@33 $generated@@65 $generated@@66 ($generated@@37 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@67) $generated@@69) $generated@@67)
 :weight 0
))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@74 $generated@@75) (= ($generated@@33 $generated@@70 $generated@@71 ($generated@@37 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@72) $generated@@75) ($generated@@33 $generated@@70 $generated@@71 $generated@@73 $generated@@75)))
 :weight 0
))) (= ($generated@@0 $generated@@34) 5)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ) (= ($generated@@0 ($generated@@35 $generated@@76 $generated@@77)) 6))) (forall (($generated@@78 T@T) ($generated@@79 T@T) ) (! (= ($generated@@38 ($generated@@35 $generated@@78 $generated@@79)) $generated@@78)
 :pattern ( ($generated@@35 $generated@@78 $generated@@79))
))) (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (! (= ($generated@@39 ($generated@@35 $generated@@80 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@35 $generated@@80 $generated@@81))
))))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 Bool) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@5 ($generated@@29 $generated@@30 $generated@@31 $generated@@1 ($generated@@32 $generated@@82 $generated@@83 $generated@@84 $generated@@85) $generated@@86 $generated@@87))  (=> (and (or (not (= $generated@@86 $generated@@82)) (not true)) ($generated@@5 ($generated@@20 $generated@@1 ($generated@@33 $generated@@31 $generated@@34 ($generated@@33 $generated@@30 ($generated@@35 $generated@@31 $generated@@34) $generated@@83 $generated@@86) $generated@@84)))) $generated@@85))
 :pattern ( ($generated@@29 $generated@@30 $generated@@31 $generated@@1 ($generated@@32 $generated@@82 $generated@@83 $generated@@84 $generated@@85) $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@89 Int) ($generated@@90 Int) ) (! (= ($generated@@88 $generated@@89 $generated@@90) (mod $generated@@89 $generated@@90))
 :pattern ( ($generated@@88 $generated@@89 $generated@@90))
)))
(assert (forall (($generated@@92 Int) ($generated@@93 Int) ) (! (= ($generated@@91 $generated@@92 $generated@@93) (* $generated@@92 $generated@@93))
 :pattern ( ($generated@@91 $generated@@92 $generated@@93))
)))
(assert (forall (($generated@@94 Int) ) (! (= ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@94))) ($generated@@17 $generated@@34 ($generated@@21 $generated@@2 ($generated@@6 $generated@@94))))
 :pattern ( ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@94))))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@21 $generated@@96 ($generated@@17 $generated@@96 $generated@@95)) ($generated@@17 $generated@@34 ($generated@@21 $generated@@96 $generated@@95)))
 :pattern ( ($generated@@21 $generated@@96 ($generated@@17 $generated@@96 $generated@@95)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@97 () Int)
(declare-fun $generated@@98 () Bool)
(declare-fun $generated@@99 () T@U)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 () T@U)
(declare-fun $generated@@102 () T@U)
(declare-fun $generated@@103 (T@U) Bool)
(declare-fun $generated@@104 (T@U) Bool)
(declare-fun $generated@@105 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@106 true))
(let (($generated@@107  (=> (and (or (not (= ($generated@@88 $generated@@97 ($generated 2)) ($generated 0))) (not true)) (= (ControlFlow 0 5) 2)) $generated@@106)))
(let (($generated@@108  (=> (= ($generated@@88 $generated@@97 ($generated 2)) ($generated 0)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (not (= ($generated 2) 0)) (not true))) (=> (or (not (= ($generated 2) 0)) (not true)) (=> (= (ControlFlow 0 3) 2) $generated@@106))))))
(let (($generated@@109  (=> (and (or (not (= $generated@@97 ($generated 1))) (not true)) (= $generated@@98 ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4 true))))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (or (not (= ($generated 2) 0)) (not true))) (=> (or (not (= ($generated 2) 0)) (not true)) (and (=> (= (ControlFlow 0 6) 3) $generated@@108) (=> (= (ControlFlow 0 6) 5) $generated@@107)))))))
(let (($generated@@110 true))
(let (($generated@@111  (=> (= $generated@@99 ($generated@@32 $generated@@100 $generated@@101 $generated@@102 false)) (and (=> (= (ControlFlow 0 8) 1) $generated@@110) (=> (= (ControlFlow 0 8) 6) $generated@@109)))))
(let (($generated@@112  (=> (and (and ($generated@@103 $generated@@101) ($generated@@104 $generated@@101)) (and (= 0 $generated@@105) (= (ControlFlow 0 9) 8))) $generated@@111)))
$generated@@112))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
