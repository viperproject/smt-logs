(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass.StartingFromOpaqueType_mCodatatype.Ty () T@U)
(declare-fun |##StartingFromOpaqueType.Codatatype.Ty.Make| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$Ty () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |$Eq#StartingFromOpaqueType_mCodatatype.Ty| (T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun StartingFromOpaqueType_mCodatatype.Ty.c (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.StartingFromOpaqueType_mCodatatype.Ty () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| (T@U T@U T@U T@U) Bool)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun StartingFromOpaqueType_mCodatatype.Ty.Make_q (T@U) Bool)
(declare-fun StartingFromOpaqueType_mCodatatype.Ty.F (T@U Int) Int)
(declare-fun |StartingFromOpaqueType_mCodatatype.Ty.F#canCall| (T@U Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun StartingFromOpaqueType_mCodatatype.Ty.w (T@U) Int)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#StartingFromOpaqueType.Codatatype.Ty.Make| (Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.nat Tagclass.StartingFromOpaqueType_mCodatatype.Ty |##StartingFromOpaqueType.Codatatype.Ty.Make| tytagFamily$nat tytagFamily$Ty)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((ly T@U) (d0 T@U) (d1 T@U) ) (! (= (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly) d0 d1) (= d0 d1))
 :pattern ( (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly) d0 d1))
)))
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (< 0 $FunctionContextHeight) (forall (($h@@0 T@U) ($o T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType $o Tclass.StartingFromOpaqueType_mCodatatype.Ty)) ($IsAlloc DatatypeTypeType $o Tclass.StartingFromOpaqueType_mCodatatype.Ty $h@@0)) ($IsAlloc intType (int_2_U (StartingFromOpaqueType_mCodatatype.Ty.c $o)) Tclass._System.nat $h@@0))
 :pattern ( (StartingFromOpaqueType_mCodatatype.Ty.c $o) ($IsAlloc DatatypeTypeType $o Tclass.StartingFromOpaqueType_mCodatatype.Ty $h@@0))
))))
(assert (forall ((ly@@0 T@U) (d0@@0 T@U) (d1@@0 T@U) ) (!  (=> (forall ((k Int) ) (!  (=> (<= 0 k) (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| (|ORD#FromNat| k) ($LS ly@@0) d0@@0 d1@@0))
 :pattern ( (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| (|ORD#FromNat| k) ($LS ly@@0) d0@@0 d1@@0))
)) (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly@@0) d0@@0 d1@@0))
 :pattern ( (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly@@0) d0@@0 d1@@0))
)))
(assert (forall ((d T@U) ) (!  (=> ($Is DatatypeTypeType d Tclass.StartingFromOpaqueType_mCodatatype.Ty) (StartingFromOpaqueType_mCodatatype.Ty.Make_q d))
 :pattern ( (StartingFromOpaqueType_mCodatatype.Ty.Make_q d) ($Is DatatypeTypeType d Tclass.StartingFromOpaqueType_mCodatatype.Ty))
)))
(assert  (=> (< 0 $FunctionContextHeight) (forall (($o@@0 T@U) ) (!  (=> ($Is DatatypeTypeType $o@@0 Tclass.StartingFromOpaqueType_mCodatatype.Ty) ($Is intType (int_2_U (StartingFromOpaqueType_mCodatatype.Ty.c $o@@0)) Tclass._System.nat))
 :pattern ( (StartingFromOpaqueType_mCodatatype.Ty.c $o@@0))
))))
(assert (forall ((k@@0 T@U) (ly@@1 T@U) (d0@@1 T@U) (d1@@1 T@U) (m T@U) ) (!  (=> (and (|ORD#Less| k@@0 m) (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| m ($LS ly@@1) d0@@1 d1@@1)) (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@0 ($LS ly@@1) d0@@1 d1@@1))
 :pattern ( (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@0 ($LS ly@@1) d0@@1 d1@@1) (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| m ($LS ly@@1) d0@@1 d1@@1))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this T@U) (|x#0@@0| Int) ) (!  (=> (or (|StartingFromOpaqueType_mCodatatype.Ty.F#canCall| this |x#0@@0|) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType this Tclass.StartingFromOpaqueType_mCodatatype.Ty) (<= (LitInt 0) |x#0@@0|)) (or (not (= |x#0@@0| 7)) (not true))))) (= (StartingFromOpaqueType_mCodatatype.Ty.F this |x#0@@0|) |x#0@@0|))
 :pattern ( (StartingFromOpaqueType_mCodatatype.Ty.F this |x#0@@0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((k@@1 T@U) (ly@@2 T@U) (d0@@2 T@U) (d1@@2 T@U) ) (!  (=> (and ($Is DatatypeTypeType d0@@2 Tclass.StartingFromOpaqueType_mCodatatype.Ty) ($Is DatatypeTypeType d1@@2 Tclass.StartingFromOpaqueType_mCodatatype.Ty)) (= (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@1 ($LS ly@@2) d0@@2 d1@@2)  (and (=> (< 0 (|ORD#Offset| k@@1)) (and (and (StartingFromOpaqueType_mCodatatype.Ty.Make_q d0@@2) (StartingFromOpaqueType_mCodatatype.Ty.Make_q d1@@2)) (=> (and (StartingFromOpaqueType_mCodatatype.Ty.Make_q d0@@2) (StartingFromOpaqueType_mCodatatype.Ty.Make_q d1@@2)) (= (StartingFromOpaqueType_mCodatatype.Ty.w d0@@2) (StartingFromOpaqueType_mCodatatype.Ty.w d1@@2))))) (=> (and (or (not (= k@@1 (|ORD#FromNat| 0))) (not true)) (= (|ORD#Offset| k@@1) 0)) (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ly@@2 d0@@2 d1@@2)))))
 :pattern ( (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@1 ($LS ly@@2) d0@@2 d1@@2))
)))
(assert (forall ((d@@0 T@U) ) (! (= (StartingFromOpaqueType_mCodatatype.Ty.Make_q d@@0) (= (DatatypeCtorId d@@0) |##StartingFromOpaqueType.Codatatype.Ty.Make|))
 :pattern ( (StartingFromOpaqueType_mCodatatype.Ty.Make_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (StartingFromOpaqueType_mCodatatype.Ty.Make_q d@@1) (exists ((|a#1#0#0| Int) ) (= d@@1 (|#StartingFromOpaqueType.Codatatype.Ty.Make| |a#1#0#0|))))
 :pattern ( (StartingFromOpaqueType_mCodatatype.Ty.Make_q d@@1))
)))
(assert (forall ((|x#0@@1| T@U) ) (! (= ($Is intType |x#0@@1| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@1|)))
 :pattern ( ($Is intType |x#0@@1| Tclass._System.nat))
)))
(assert (forall ((k@@2 T@U) (ly@@3 T@U) (d0@@3 T@U) (d1@@3 T@U) ) (!  (=> (or (not (= k@@2 (|ORD#FromNat| 0))) (not true)) (= (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@2 ($LS ly@@3) d0@@3 d1@@3) (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@2 ly@@3 d0@@3 d1@@3)))
 :pattern ( (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@2 ($LS ly@@3) d0@@3 d1@@3))
)))
(assert (forall ((ly@@4 T@U) (d0@@4 T@U) (d1@@4 T@U) ) (! (= (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly@@4) d0@@4 d1@@4) (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ly@@4 d0@@4 d1@@4))
 :pattern ( (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly@@4) d0@@4 d1@@4))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@0 T@U) (|x#0@@2| Int) ) (!  (=> (or (|StartingFromOpaqueType_mCodatatype.Ty.F#canCall| this@@0 |x#0@@2|) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType this@@0 Tclass.StartingFromOpaqueType_mCodatatype.Ty) (<= (LitInt 0) |x#0@@2|)) (or (not (= |x#0@@2| 7)) (not true))))) (and (= (StartingFromOpaqueType_mCodatatype.Ty.F this@@0 |x#0@@2|) (StartingFromOpaqueType_mCodatatype.Ty.c this@@0)) (<= (LitInt 0) (StartingFromOpaqueType_mCodatatype.Ty.F this@@0 |x#0@@2|))))
 :pattern ( (StartingFromOpaqueType_mCodatatype.Ty.F this@@0 |x#0@@2|))
))))
(assert (forall ((n Int) ) (!  (=> (<= 0 n) (and (|ORD#IsNat| (|ORD#FromNat| n)) (= (|ORD#Offset| (|ORD#FromNat| n)) n)))
 :pattern ( (|ORD#FromNat| n))
)))
(assert (forall ((ly@@5 T@U) (d0@@5 T@U) (d1@@5 T@U) ) (! (= (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly@@5) d0@@5 d1@@5) (forall ((k@@3 T@U) ) (! (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@3 ($LS ly@@5) d0@@5 d1@@5)
 :pattern ( (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@3 ($LS ly@@5) d0@@5 d1@@5))
)))
 :pattern ( (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly@@5) d0@@5 d1@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@1 T@U) (|x#0@@3| Int) ) (!  (=> (or (|StartingFromOpaqueType_mCodatatype.Ty.F#canCall| this@@1 (LitInt |x#0@@3|)) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType this@@1 Tclass.StartingFromOpaqueType_mCodatatype.Ty) (<= (LitInt 0) |x#0@@3|)) (U_2_bool (Lit boolType (bool_2_U  (or (not (= |x#0@@3| 7)) (not true)))))))) (= (StartingFromOpaqueType_mCodatatype.Ty.F this@@1 (LitInt |x#0@@3|)) (LitInt |x#0@@3|)))
 :weight 3
 :pattern ( (StartingFromOpaqueType_mCodatatype.Ty.F this@@1 (LitInt |x#0@@3|)))
))))
(assert (forall ((o@@0 T@U) (p@@0 T@U) ) (!  (or (or (|ORD#Less| o@@0 p@@0) (= o@@0 p@@0)) (|ORD#Less| p@@0 o@@0))
 :pattern ( (|ORD#Less| o@@0 p@@0) (|ORD#Less| p@@0 o@@0))
)))
(assert (forall ((o@@1 T@U) ) (! (<= 0 (|ORD#Offset| o@@1))
 :pattern ( (|ORD#Offset| o@@1))
)))
(assert (forall ((|a#0#0#0| Int) ) (! (= (DatatypeCtorId (|#StartingFromOpaqueType.Codatatype.Ty.Make| |a#0#0#0|)) |##StartingFromOpaqueType.Codatatype.Ty.Make|)
 :pattern ( (|#StartingFromOpaqueType.Codatatype.Ty.Make| |a#0#0#0|))
)))
(assert (forall ((|a#3#0#0| Int) ) (! (= (StartingFromOpaqueType_mCodatatype.Ty.w (|#StartingFromOpaqueType.Codatatype.Ty.Make| |a#3#0#0|)) |a#3#0#0|)
 :pattern ( (|#StartingFromOpaqueType.Codatatype.Ty.Make| |a#3#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall ((o@@2 T@U) (p@@1 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@2 p@@1) (or (not (= o@@2 p@@1)) (not true))) (=> (and (|ORD#IsNat| o@@2) (not (|ORD#IsNat| p@@1))) (|ORD#Less| o@@2 p@@1))) (=> (and (|ORD#IsNat| o@@2) (|ORD#IsNat| p@@1)) (= (|ORD#Less| o@@2 p@@1) (< (|ORD#Offset| o@@2) (|ORD#Offset| p@@1))))) (=> (and (|ORD#Less| o@@2 p@@1) (|ORD#IsNat| p@@1)) (|ORD#IsNat| o@@2)))
 :pattern ( (|ORD#Less| o@@2 p@@1))
)))
(assert (forall ((|a#2#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#StartingFromOpaqueType.Codatatype.Ty.Make| |a#2#0#0|) Tclass.StartingFromOpaqueType_mCodatatype.Ty) ($Is intType (int_2_U |a#2#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#StartingFromOpaqueType.Codatatype.Ty.Make| |a#2#0#0|) Tclass.StartingFromOpaqueType_mCodatatype.Ty))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m@@0 T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m@@0 x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@1 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@1 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@2 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@2 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@3 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@4 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@4 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((d@@2 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (StartingFromOpaqueType_mCodatatype.Ty.Make_q d@@2) ($IsAlloc DatatypeTypeType d@@2 Tclass.StartingFromOpaqueType_mCodatatype.Ty $h@@1))) ($IsAlloc intType (int_2_U (StartingFromOpaqueType_mCodatatype.Ty.w d@@2)) TInt $h@@1))
 :pattern ( ($IsAlloc intType (int_2_U (StartingFromOpaqueType_mCodatatype.Ty.w d@@2)) TInt $h@@1))
)))
(assert (forall ((o@@3 T@U) ) (!  (=> (|ORD#IsNat| o@@3) (= o@@3 (|ORD#FromNat| (|ORD#Offset| o@@3))))
 :pattern ( (|ORD#Offset| o@@3))
 :pattern ( (|ORD#IsNat| o@@3))
)))
(assert (forall ((d@@3 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) ($Is DatatypeTypeType d@@3 Tclass.StartingFromOpaqueType_mCodatatype.Ty)) ($IsAlloc DatatypeTypeType d@@3 Tclass.StartingFromOpaqueType_mCodatatype.Ty $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 Tclass.StartingFromOpaqueType_mCodatatype.Ty $h@@2))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass.StartingFromOpaqueType_mCodatatype.Ty) Tagclass.StartingFromOpaqueType_mCodatatype.Ty))
(assert (= (TagFamily Tclass.StartingFromOpaqueType_mCodatatype.Ty) tytagFamily$Ty))
(assert (forall ((ly@@6 T@U) (d0@@6 T@U) (d1@@6 T@U) ) (!  (=> (and ($Is DatatypeTypeType d0@@6 Tclass.StartingFromOpaqueType_mCodatatype.Ty) ($Is DatatypeTypeType d1@@6 Tclass.StartingFromOpaqueType_mCodatatype.Ty)) (= (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly@@6) d0@@6 d1@@6)  (and (and (StartingFromOpaqueType_mCodatatype.Ty.Make_q d0@@6) (StartingFromOpaqueType_mCodatatype.Ty.Make_q d1@@6)) (=> (and (StartingFromOpaqueType_mCodatatype.Ty.Make_q d0@@6) (StartingFromOpaqueType_mCodatatype.Ty.Make_q d1@@6)) (= (StartingFromOpaqueType_mCodatatype.Ty.w d0@@6) (StartingFromOpaqueType_mCodatatype.Ty.w d1@@6))))))
 :pattern ( (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ly@@6) d0@@6 d1@@6))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(assert (forall ((h@@0 T@U) (v@@0 T@U) ) (! ($IsAlloc intType v@@0 TInt h@@0)
 :pattern ( ($IsAlloc intType v@@0 TInt h@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@2 T@U) (|x#0@@4| Int) ) (!  (=> (or (|StartingFromOpaqueType_mCodatatype.Ty.F#canCall| (Lit DatatypeTypeType this@@2) (LitInt |x#0@@4|)) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType this@@2 Tclass.StartingFromOpaqueType_mCodatatype.Ty) (<= (LitInt 0) |x#0@@4|)) (U_2_bool (Lit boolType (bool_2_U  (or (not (= |x#0@@4| 7)) (not true)))))))) (= (StartingFromOpaqueType_mCodatatype.Ty.F (Lit DatatypeTypeType this@@2) (LitInt |x#0@@4|)) (LitInt |x#0@@4|)))
 :weight 3
 :pattern ( (StartingFromOpaqueType_mCodatatype.Ty.F (Lit DatatypeTypeType this@@2) (LitInt |x#0@@4|)))
))))
(assert (forall ((k@@4 T@U) (ly@@7 T@U) (d0@@7 T@U) (d1@@7 T@U) ) (!  (=> (= d0@@7 d1@@7) (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@4 ($LS ly@@7) d0@@7 d1@@7))
 :pattern ( (|$PrefixEq#StartingFromOpaqueType_mCodatatype.Ty| k@@4 ($LS ly@@7) d0@@7 d1@@7))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun this@@3 () T@U)
(declare-fun |x#0@@5| () Int)
(declare-fun $Heap () T@U)
(declare-fun $LZ () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 6) (- 0 5)) (= (StartingFromOpaqueType_mCodatatype.Ty.F this@@3 |x#0@@5|) (StartingFromOpaqueType_mCodatatype.Ty.c this@@3)))))
(let ((anon5_Else_correct  (=> (= (StartingFromOpaqueType_mCodatatype.Ty.F this@@3 |x#0@@5|) |x#0@@5|) (=> (and ($Is intType (int_2_U (StartingFromOpaqueType_mCodatatype.Ty.F this@@3 |x#0@@5|)) Tclass._System.nat) (= (ControlFlow 0 7) 6)) GeneratedUnifiedExit_correct))))
(let ((anon5_Then_correct  (=> (<= (LitInt 0) (StartingFromOpaqueType_mCodatatype.Ty.F this@@3 |x#0@@5|)) (=> (and ($IsAllocBox ($Box DatatypeTypeType this@@3) Tclass.StartingFromOpaqueType_mCodatatype.Ty $Heap) ($IsAlloc intType (int_2_U |x#0@@5|) Tclass._System.nat $Heap)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= |x#0@@5| 7)) (not true))) (=> (or (not (= |x#0@@5| 7)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 |x#0@@5|) (= |x#0@@5| |x#0@@5|))) (=> (or (<= 0 |x#0@@5|) (= |x#0@@5| |x#0@@5|)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (|$Eq#StartingFromOpaqueType_mCodatatype.Ty| ($LS ($LS $LZ)) this@@3 this@@3) (= |x#0@@5| |x#0@@5|)) (< |x#0@@5| |x#0@@5|)))))))))))
(let ((anon0_correct  (=> (and (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (or (not (= |x#0@@5| 7)) (not true))) (and (=> (= (ControlFlow 0 8) 2) anon5_Then_correct) (=> (= (ControlFlow 0 8) 7) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is DatatypeTypeType this@@3 Tclass.StartingFromOpaqueType_mCodatatype.Ty) ($IsAlloc DatatypeTypeType this@@3 Tclass.StartingFromOpaqueType_mCodatatype.Ty $Heap)) (<= (LitInt 0) |x#0@@5|)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 9) 8))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
