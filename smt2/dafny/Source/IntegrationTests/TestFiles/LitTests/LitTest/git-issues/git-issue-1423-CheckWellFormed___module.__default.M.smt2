(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@23 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@T T@T) T@T)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@30 (T@T) T@T)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@52 (T@U Int) T@U)
(declare-fun $generated@@55 (Int) Int)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@U T@U T@U) Bool)
(declare-fun $generated@@66 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@80 (T@U Int) T@U)
(declare-fun $generated@@87 (T@U T@U) Bool)
(declare-fun $generated@@88 (T@T T@U T@U) Bool)
(declare-fun $generated@@94 () T@T)
(declare-fun $generated@@95 (T@U) T@U)
(declare-fun $generated@@100 (T@U) T@U)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@23 $generated@@32 $generated@@33 ($generated@@29 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@36) $generated@@34)
 :weight 0
)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (!  (or (= $generated@@41 $generated@@42) (= ($generated@@23 $generated@@37 $generated@@38 ($generated@@29 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@42) ($generated@@23 $generated@@37 $generated@@38 $generated@@40 $generated@@42)))
 :weight 0
))) (= ($generated@@3 $generated@@24) 3)) (= ($generated@@3 $generated@@25) 4)) (= ($generated@@3 $generated@@26) 5)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (= ($generated@@3 ($generated@@27 $generated@@43 $generated@@44)) 6))) (forall (($generated@@45 T@T) ($generated@@46 T@T) ) (! (= ($generated@@30 ($generated@@27 $generated@@45 $generated@@46)) $generated@@45)
 :pattern ( ($generated@@27 $generated@@45 $generated@@46))
))) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (! (= ($generated@@31 ($generated@@27 $generated@@47 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@27 $generated@@47 $generated@@48))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> ($generated@@22 $generated@@49 $generated@@50) (forall (($generated@@51 T@U) ) (!  (=> ($generated@@8 ($generated@@28 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@49 $generated@@51) $generated@@2))) ($generated@@8 ($generated@@28 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@51) $generated@@2))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@51) $generated@@2))
)))
 :pattern ( ($generated@@22 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 Int) ) (!  (=> (= $generated@@54 0) (= ($generated@@52 $generated@@53 $generated@@54) $generated@@53))
 :pattern ( ($generated@@52 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@55 $generated@@56) $generated@@56)
 :pattern ( ($generated@@55 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 $generated@@58) $generated@@58)
 :pattern ( ($generated@@57 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 Int) ) (!  (=> (and (<= 0 $generated@@61) (<= $generated@@61 ($generated@@20 $generated@@60))) (= ($generated@@20 ($generated@@52 $generated@@60 $generated@@61)) (- ($generated@@20 $generated@@60) $generated@@61)))
 :pattern ( ($generated@@20 ($generated@@52 $generated@@60 $generated@@61)))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 ($generated@@28 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@28 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@65 ($generated@@62 $generated@@70 $generated@@67) $generated@@68 $generated@@69) ($generated@@66 $generated@@70 $generated@@67 $generated@@68 $generated@@69))
 :pattern ( ($generated@@65 ($generated@@62 $generated@@70 $generated@@67) $generated@@68 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> ($generated@@22 $generated@@71 $generated@@72) (=> ($generated@@65 $generated@@73 $generated@@74 $generated@@71) ($generated@@65 $generated@@73 $generated@@74 $generated@@72)))
 :pattern ( ($generated@@22 $generated@@71 $generated@@72) ($generated@@65 $generated@@73 $generated@@74 $generated@@71))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@T) ) (!  (=> ($generated@@22 $generated@@75 $generated@@76) (=> ($generated@@66 $generated@@79 $generated@@77 $generated@@78 $generated@@75) ($generated@@66 $generated@@79 $generated@@77 $generated@@78 $generated@@76)))
 :pattern ( ($generated@@22 $generated@@75 $generated@@76) ($generated@@66 $generated@@79 $generated@@77 $generated@@78 $generated@@75))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 Int) ($generated@@83 Int) ) (!  (=> (and (and (<= 0 $generated@@82) (<= 0 $generated@@83)) (< $generated@@83 (- ($generated@@20 $generated@@81) $generated@@82))) (= ($generated@@80 ($generated@@52 $generated@@81 $generated@@82) $generated@@83) ($generated@@80 $generated@@81 (+ $generated@@83 $generated@@82))))
 :weight 25
 :pattern ( ($generated@@80 ($generated@@52 $generated@@81 $generated@@82) $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> (or (not (= $generated@@84 $generated@@86)) (not true)) (=> (and ($generated@@22 $generated@@84 $generated@@85) ($generated@@22 $generated@@85 $generated@@86)) ($generated@@22 $generated@@84 $generated@@86)))
 :pattern ( ($generated@@22 $generated@@84 $generated@@85) ($generated@@22 $generated@@85 $generated@@86))
)))
(assert (forall (($generated@@89 T@U) ) (!  (=> ($generated@@87 $generated@@89 $generated) (and (= ($generated@@62 $generated@@5 ($generated@@28 $generated@@5 $generated@@89)) $generated@@89) ($generated@@88 $generated@@5 ($generated@@28 $generated@@5 $generated@@89) $generated)))
 :pattern ( ($generated@@87 $generated@@89 $generated))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@87 ($generated@@62 $generated@@92 $generated@@90) $generated@@91) ($generated@@88 $generated@@92 $generated@@90 $generated@@91))
 :pattern ( ($generated@@87 ($generated@@62 $generated@@92 $generated@@90) $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ) (! (<= 0 ($generated@@20 $generated@@93))
 :pattern ( ($generated@@20 $generated@@93))
)))
(assert (= ($generated@@3 $generated@@94) 7))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@66 $generated@@94 $generated@@96 ($generated@@95 $generated@@97) $generated@@98) (forall (($generated@@99 Int) ) (!  (=> (and (<= 0 $generated@@99) (< $generated@@99 ($generated@@20 $generated@@96))) ($generated@@65 ($generated@@80 $generated@@96 $generated@@99) $generated@@97 $generated@@98))
 :pattern ( ($generated@@80 $generated@@96 $generated@@99))
)))
 :pattern ( ($generated@@66 $generated@@94 $generated@@96 ($generated@@95 $generated@@97) $generated@@98))
)))
(assert (forall (($generated@@101 T@U) ) (! (= ($generated@@100 ($generated@@95 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@95 $generated@@101))
)))
(assert (forall (($generated@@102 T@U) ) (! (= ($generated@@19 ($generated@@95 $generated@@102)) $generated@@1)
 :pattern ( ($generated@@95 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@T) ) (! (= ($generated@@28 $generated@@104 ($generated@@62 $generated@@104 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@62 $generated@@104 $generated@@103))
)))
(assert  (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@105 $generated@@108 $generated@@109 $generated@@110 ($generated@@107 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@113 $generated@@114) $generated@@111)
 :weight 0
)) (and (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@105 $generated@@115 $generated@@116 $generated@@117 ($generated@@107 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@105 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@105 $generated@@124 $generated@@125 $generated@@126 ($generated@@107 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@131 $generated@@132) ($generated@@105 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@131 $generated@@132)))
 :weight 0
)))))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 Bool) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@8 ($generated@@105 $generated@@26 $generated@@24 $generated@@4 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))  (=> (and (or (not (= $generated@@137 $generated@@133)) (not true)) ($generated@@8 ($generated@@28 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@134 $generated@@137) $generated@@135)))) $generated@@136))
 :pattern ( ($generated@@105 $generated@@26 $generated@@24 $generated@@4 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> ($generated@@87 $generated@@139 ($generated@@95 $generated@@140)) (and (= ($generated@@62 $generated@@94 ($generated@@28 $generated@@94 $generated@@139)) $generated@@139) ($generated@@88 $generated@@94 ($generated@@28 $generated@@94 $generated@@139) ($generated@@95 $generated@@140))))
 :pattern ( ($generated@@87 $generated@@139 ($generated@@95 $generated@@140)))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 Int) ($generated@@143 Int) ) (!  (=> (and (and (<= 0 $generated@@142) (<= $generated@@142 $generated@@143)) (< $generated@@143 ($generated@@20 $generated@@141))) (= ($generated@@80 ($generated@@52 $generated@@141 $generated@@142) (- $generated@@143 $generated@@142)) ($generated@@80 $generated@@141 $generated@@143)))
 :weight 25
 :pattern ( ($generated@@80 $generated@@141 $generated@@143) ($generated@@52 $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 Int) ($generated@@146 Int) ) (!  (=> (and (and (<= 0 $generated@@145) (<= 0 $generated@@146)) (<= (+ $generated@@145 $generated@@146) ($generated@@20 $generated@@144))) (= ($generated@@52 ($generated@@52 $generated@@144 $generated@@145) $generated@@146) ($generated@@52 $generated@@144 (+ $generated@@145 $generated@@146))))
 :pattern ( ($generated@@52 ($generated@@52 $generated@@144 $generated@@145) $generated@@146))
)))
(assert (forall (($generated@@147 Int) ) (! (= ($generated@@62 $generated@@5 ($generated@@9 ($generated@@55 $generated@@147))) ($generated@@57 $generated@@25 ($generated@@62 $generated@@5 ($generated@@9 $generated@@147))))
 :pattern ( ($generated@@62 $generated@@5 ($generated@@9 ($generated@@55 $generated@@147))))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@T) ) (! (= ($generated@@62 $generated@@149 ($generated@@57 $generated@@149 $generated@@148)) ($generated@@57 $generated@@25 ($generated@@62 $generated@@149 $generated@@148)))
 :pattern ( ($generated@@62 $generated@@149 ($generated@@57 $generated@@149 $generated@@148)))
)))
(assert (forall (($generated@@150 T@U) ) (!  (=> (= ($generated@@20 $generated@@150) 0) (= $generated@@150 $generated@@21))
 :pattern ( ($generated@@20 $generated@@150))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (! ($generated@@66 $generated@@5 $generated@@152 $generated $generated@@151)
 :pattern ( ($generated@@66 $generated@@5 $generated@@152 $generated $generated@@151))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (! (= ($generated@@88 $generated@@94 $generated@@153 ($generated@@95 $generated@@154)) (forall (($generated@@155 Int) ) (!  (=> (and (<= 0 $generated@@155) (< $generated@@155 ($generated@@20 $generated@@153))) ($generated@@87 ($generated@@80 $generated@@153 $generated@@155) $generated@@154))
 :pattern ( ($generated@@80 $generated@@153 $generated@@155))
)))
 :pattern ( ($generated@@88 $generated@@94 $generated@@153 ($generated@@95 $generated@@154)))
)))
(assert (forall (($generated@@156 T@U) ) (! ($generated@@88 $generated@@5 $generated@@156 $generated)
 :pattern ( ($generated@@88 $generated@@5 $generated@@156 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () Int)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@165 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@166  (=> (and (and (< $generated@@157 $generated@@158) (<= $generated@@158 ($generated@@20 $generated@@159))) (= (ControlFlow 0 2) (- 0 1))) (and (<= 0 $generated@@158) (<= $generated@@158 ($generated@@20 $generated@@159))))))
(let (($generated@@167  (=> (and (<= $generated@@158 $generated@@157) (= (ControlFlow 0 4) 2)) $generated@@166)))
(let (($generated@@168  (=> (and (< $generated@@157 $generated@@158) (= (ControlFlow 0 3) 2)) $generated@@166)))
(let (($generated@@169  (=> (= $generated@@160 ($generated@@106 $generated@@161 $generated@@162 $generated@@2 false)) (and (=> (= (ControlFlow 0 5) 3) $generated@@168) (=> (= (ControlFlow 0 5) 4) $generated@@167)))))
(let (($generated@@170  (=> (and (and (and ($generated@@163 $generated@@162) ($generated@@164 $generated@@162)) (and ($generated@@88 $generated@@94 $generated@@159 ($generated@@95 $generated)) ($generated@@66 $generated@@94 $generated@@159 ($generated@@95 $generated) $generated@@162))) (and (and (<= ($generated@@55 0) $generated@@157) (<= ($generated@@55 0) $generated@@158)) (and (= 1 $generated@@165) (= (ControlFlow 0 6) 5)))) $generated@@169)))
$generated@@170))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
