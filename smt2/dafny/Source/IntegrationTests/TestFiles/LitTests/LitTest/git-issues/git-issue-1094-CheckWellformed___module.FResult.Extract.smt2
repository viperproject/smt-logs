(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U T@U T@U) Bool)
(declare-fun $generated@@25 (T@U T@U) T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U) Bool)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U T@U) Bool)
(declare-fun $generated@@39 (T@U T@U) Bool)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@U) T@U)
(declare-fun $generated@@53 (Int) T@U)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@U) T@U)
(declare-fun $generated@@66 (T@U) Int)
(declare-fun $generated@@82 (T@U) T@U)
(declare-fun $generated@@94 (T@U) Int)
(declare-fun $generated@@95 (T@U) Int)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@101 () T@T)
(declare-fun $generated@@102 () T@T)
(declare-fun $generated@@103 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@104 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@105 (T@T T@T) T@T)
(declare-fun $generated@@106 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@108 (T@T) T@T)
(declare-fun $generated@@109 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@6 $generated@@28) 3))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (!  (=> (and (or ($generated@@26 $generated@@33 $generated@@34) (and (< 0 $generated@@23) (and ($generated@@27 $generated@@28 $generated@@34 ($generated@@29 $generated@@33) $generated@@32) ($generated@@30 $generated@@34)))) ($generated@@31 $generated@@32)) ($generated@@24 ($generated@@25 $generated@@33 $generated@@34) $generated@@33 $generated@@32))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@33 $generated@@34) $generated@@33 $generated@@32))
))))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (!  (=> (or ($generated@@26 $generated@@40 $generated@@41) (and (< 0 $generated@@23) (and ($generated@@38 $generated@@28 $generated@@41 ($generated@@29 $generated@@40)) ($generated@@30 $generated@@41)))) ($generated@@39 ($generated@@25 $generated@@40 $generated@@41) $generated@@40))
 :pattern ( ($generated@@25 $generated@@40 $generated@@41))
))))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@30 $generated@@43) (= ($generated@@42 $generated@@43) $generated@@3))
 :pattern ( ($generated@@30 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ) (! (= ($generated@@44 $generated@@45) (= ($generated@@42 $generated@@45) $generated@@4))
 :pattern ( ($generated@@44 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 ($generated@@46 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@46 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@30 $generated@@51) (exists (($generated@@52 T@U) ) (= $generated@@51 ($generated@@50 $generated@@52))))
 :pattern ( ($generated@@30 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@44 $generated@@54) (exists (($generated@@55 Int) ) (= $generated@@54 ($generated@@53 $generated@@55))))
 :pattern ( ($generated@@44 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@24 ($generated@@47 $generated@@59 $generated@@56) $generated@@57 $generated@@58) ($generated@@27 $generated@@59 $generated@@56 $generated@@57 $generated@@58))
 :pattern ( ($generated@@24 ($generated@@47 $generated@@59 $generated@@56) $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ) (!  (and (= ($generated@@22 ($generated@@29 $generated@@61)) $generated@@2) (= ($generated@@60 ($generated@@29 $generated@@61)) $generated@@5))
 :pattern ( ($generated@@29 $generated@@61))
)))
(assert (= ($generated@@6 $generated@@62) 4))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> (or ($generated@@26 $generated@@64 ($generated@@35 $generated@@28 $generated@@65)) (and (< 0 $generated@@23) (and ($generated@@38 $generated@@28 $generated@@65 ($generated@@29 $generated@@64)) ($generated@@11 ($generated@@35 $generated@@7 ($generated@@10 ($generated@@30 ($generated@@35 $generated@@28 $generated@@65)))))))) (= ($generated@@25 $generated@@64 ($generated@@35 $generated@@28 $generated@@65)) ($generated@@35 $generated@@62 ($generated@@63 ($generated@@35 $generated@@28 $generated@@65)))))
 :weight 3
 :pattern ( ($generated@@25 $generated@@64 ($generated@@35 $generated@@28 $generated@@65)))
))))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> (and ($generated@@31 $generated@@68) (and ($generated@@44 $generated@@67) (exists (($generated@@69 T@U) ) (! ($generated@@27 $generated@@28 $generated@@67 ($generated@@29 $generated@@69) $generated@@68)
 :pattern ( ($generated@@27 $generated@@28 $generated@@67 ($generated@@29 $generated@@69) $generated@@68))
)))) ($generated@@27 $generated@@8 ($generated@@12 ($generated@@66 $generated@@67)) $generated $generated@@68))
 :pattern ( ($generated@@27 $generated@@8 ($generated@@12 ($generated@@66 $generated@@67)) $generated $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> ($generated@@31 $generated@@72) (= ($generated@@27 $generated@@28 ($generated@@50 $generated@@71) ($generated@@29 $generated@@70) $generated@@72) ($generated@@24 $generated@@71 $generated@@70 $generated@@72)))
 :pattern ( ($generated@@27 $generated@@28 ($generated@@50 $generated@@71) ($generated@@29 $generated@@70) $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 Int) ($generated@@75 T@U) ) (!  (=> ($generated@@31 $generated@@75) (= ($generated@@27 $generated@@28 ($generated@@53 $generated@@74) ($generated@@29 $generated@@73) $generated@@75) ($generated@@27 $generated@@8 ($generated@@12 $generated@@74) $generated $generated@@75)))
 :pattern ( ($generated@@27 $generated@@28 ($generated@@53 $generated@@74) ($generated@@29 $generated@@73) $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> ($generated@@38 $generated@@28 $generated@@77 ($generated@@29 $generated@@76)) (or ($generated@@30 $generated@@77) ($generated@@44 $generated@@77)))
 :pattern ( ($generated@@44 $generated@@77) ($generated@@38 $generated@@28 $generated@@77 ($generated@@29 $generated@@76)))
 :pattern ( ($generated@@30 $generated@@77) ($generated@@38 $generated@@28 $generated@@77 ($generated@@29 $generated@@76)))
)))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@39 $generated@@78 $generated) (and (= ($generated@@47 $generated@@8 ($generated@@46 $generated@@8 $generated@@78)) $generated@@78) ($generated@@38 $generated@@8 ($generated@@46 $generated@@8 $generated@@78) $generated)))
 :pattern ( ($generated@@39 $generated@@78 $generated))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@39 ($generated@@47 $generated@@81 $generated@@79) $generated@@80) ($generated@@38 $generated@@81 $generated@@79 $generated@@80))
 :pattern ( ($generated@@39 ($generated@@47 $generated@@81 $generated@@79) $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@82 ($generated@@29 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@29 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@42 ($generated@@50 $generated@@84)) $generated@@3)
 :pattern ( ($generated@@50 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ) (! (= ($generated@@63 ($generated@@50 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@50 $generated@@85))
)))
(assert (forall (($generated@@86 Int) ) (! (= ($generated@@42 ($generated@@53 $generated@@86)) $generated@@4)
 :pattern ( ($generated@@53 $generated@@86))
)))
(assert (forall (($generated@@87 Int) ) (! (= ($generated@@66 ($generated@@53 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@53 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@46 $generated@@89 ($generated@@47 $generated@@89 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@47 $generated@@89 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@38 $generated@@28 ($generated@@50 $generated@@91) ($generated@@29 $generated@@90)) ($generated@@39 $generated@@91 $generated@@90))
 :pattern ( ($generated@@38 $generated@@28 ($generated@@50 $generated@@91) ($generated@@29 $generated@@90)))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 Int) ) (! (= ($generated@@38 $generated@@28 ($generated@@53 $generated@@93) ($generated@@29 $generated@@92)) ($generated@@38 $generated@@8 ($generated@@12 $generated@@93) $generated))
 :pattern ( ($generated@@38 $generated@@28 ($generated@@53 $generated@@93) ($generated@@29 $generated@@92)))
)))
(assert (forall (($generated@@96 T@U) ) (! (< ($generated@@94 $generated@@96) ($generated@@95 ($generated@@50 $generated@@96)))
 :pattern ( ($generated@@50 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (=> (and ($generated@@31 $generated@@99) (and ($generated@@30 $generated@@97) ($generated@@27 $generated@@28 $generated@@97 ($generated@@29 $generated@@98) $generated@@99))) ($generated@@24 ($generated@@63 $generated@@97) $generated@@98 $generated@@99))
 :pattern ( ($generated@@24 ($generated@@63 $generated@@97) $generated@@98 $generated@@99))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@100 $generated@@110 $generated@@111 $generated@@112 ($generated@@106 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@115 $generated@@116) $generated@@113)
 :weight 0
)) (and (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@122 $generated@@124) (= ($generated@@100 $generated@@117 $generated@@118 $generated@@119 ($generated@@106 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@100 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@132 $generated@@134) (= ($generated@@100 $generated@@126 $generated@@127 $generated@@128 ($generated@@106 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@132 $generated@@129) $generated@@133 $generated@@134) ($generated@@100 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@133 $generated@@134)))
 :weight 0
)))) (= ($generated@@6 $generated@@101) 5)) (= ($generated@@6 $generated@@102) 6)) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@104 $generated@@135 $generated@@136 ($generated@@107 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@137) $generated@@139) $generated@@137)
 :weight 0
))) (forall (($generated@@140 T@T) ($generated@@141 T@T) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or (= $generated@@144 $generated@@145) (= ($generated@@104 $generated@@140 $generated@@141 ($generated@@107 $generated@@140 $generated@@141 $generated@@143 $generated@@144 $generated@@142) $generated@@145) ($generated@@104 $generated@@140 $generated@@141 $generated@@143 $generated@@145)))
 :weight 0
))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ) (= ($generated@@6 ($generated@@105 $generated@@146 $generated@@147)) 7))) (forall (($generated@@148 T@T) ($generated@@149 T@T) ) (! (= ($generated@@108 ($generated@@105 $generated@@148 $generated@@149)) $generated@@148)
 :pattern ( ($generated@@105 $generated@@148 $generated@@149))
))) (forall (($generated@@150 T@T) ($generated@@151 T@T) ) (! (= ($generated@@109 ($generated@@105 $generated@@150 $generated@@151)) $generated@@151)
 :pattern ( ($generated@@105 $generated@@150 $generated@@151))
))))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 Bool) ($generated@@156 T@U) ($generated@@157 T@U) ) (! (= ($generated@@11 ($generated@@100 $generated@@101 $generated@@102 $generated@@7 ($generated@@103 $generated@@152 $generated@@153 $generated@@154 $generated@@155) $generated@@156 $generated@@157))  (=> (and (or (not (= $generated@@156 $generated@@152)) (not true)) ($generated@@11 ($generated@@46 $generated@@7 ($generated@@104 $generated@@102 $generated@@62 ($generated@@104 $generated@@101 ($generated@@105 $generated@@102 $generated@@62) $generated@@153 $generated@@156) $generated@@154)))) $generated@@155))
 :pattern ( ($generated@@100 $generated@@101 $generated@@102 $generated@@7 ($generated@@103 $generated@@152 $generated@@153 $generated@@154 $generated@@155) $generated@@156 $generated@@157))
)))
(assert (forall (($generated@@158 T@U) ) (! (= ($generated@@94 ($generated@@47 $generated@@28 $generated@@158)) ($generated@@95 $generated@@158))
 :pattern ( ($generated@@94 ($generated@@47 $generated@@28 $generated@@158)))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (!  (=> ($generated@@39 $generated@@160 ($generated@@29 $generated@@159)) (and (= ($generated@@47 $generated@@28 ($generated@@46 $generated@@28 $generated@@160)) $generated@@160) ($generated@@38 $generated@@28 ($generated@@46 $generated@@28 $generated@@160) ($generated@@29 $generated@@159))))
 :pattern ( ($generated@@39 $generated@@160 ($generated@@29 $generated@@159)))
)))
(assert (forall (($generated@@161 T@U) ) (! (= ($generated@@50 ($generated@@35 $generated@@62 $generated@@161)) ($generated@@35 $generated@@28 ($generated@@50 $generated@@161)))
 :pattern ( ($generated@@50 ($generated@@35 $generated@@62 $generated@@161)))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@T) ) (! (= ($generated@@47 $generated@@163 ($generated@@35 $generated@@163 $generated@@162)) ($generated@@35 $generated@@62 ($generated@@47 $generated@@163 $generated@@162)))
 :pattern ( ($generated@@47 $generated@@163 ($generated@@35 $generated@@163 $generated@@162)))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (! ($generated@@27 $generated@@8 $generated@@165 $generated $generated@@164)
 :pattern ( ($generated@@27 $generated@@8 $generated@@165 $generated $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ) (! ($generated@@38 $generated@@8 $generated@@166 $generated)
 :pattern ( ($generated@@38 $generated@@8 $generated@@166 $generated))
)))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@167 T@U) ($generated@@168 T@U) ) (!  (=> (or ($generated@@26 $generated@@167 $generated@@168) (and (< 0 $generated@@23) (and ($generated@@38 $generated@@28 $generated@@168 ($generated@@29 $generated@@167)) ($generated@@30 $generated@@168)))) (= ($generated@@25 $generated@@167 $generated@@168) ($generated@@63 $generated@@168)))
 :pattern ( ($generated@@25 $generated@@167 $generated@@168))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@174 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@175  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@30 $generated@@169))))
(let (($generated@@176 true))
(let (($generated@@177  (=> (and (= $generated@@170 ($generated@@103 $generated@@171 $generated@@172 $generated@@1 false)) ($generated@@30 $generated@@169)) (and (=> (= (ControlFlow 0 4) 1) $generated@@176) (=> (= (ControlFlow 0 4) 3) $generated@@175)))))
(let (($generated@@178  (=> (and ($generated@@31 $generated@@172) ($generated@@173 $generated@@172)) (=> (and (and ($generated@@38 $generated@@28 $generated@@169 ($generated@@29 $generated@@174)) ($generated@@27 $generated@@28 $generated@@169 ($generated@@29 $generated@@174) $generated@@172)) (and (= 0 $generated@@23) (= (ControlFlow 0 5) 4))) $generated@@177))))
$generated@@178)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
