(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@U T@U T@U) Bool)
(declare-fun $generated@@39 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@45 (T@U T@U) Bool)
(declare-fun $generated@@51 (T@U Int) T@U)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@T T@T) T@T)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@71 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (= ($generated@@3 $generated@@26) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@29 T@U) ) (!  (=> (or ($generated@@24 $generated@@29) (and (< 0 $generated@@22) ($generated@@25 $generated@@26 $generated@@29 ($generated@@27 $generated)))) (= ($generated@@23 $generated@@29) (<= ($generated@@20 $generated@@29) ($generated@@28 1))))
 :pattern ( ($generated@@23 $generated@@29))
))))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@28 $generated@@30) $generated@@30)
 :pattern ( ($generated@@28 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 ($generated@@34 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@34 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@38 ($generated@@35 $generated@@43 $generated@@40) $generated@@41 $generated@@42) ($generated@@39 $generated@@43 $generated@@40 $generated@@41 $generated@@42))
 :pattern ( ($generated@@38 ($generated@@35 $generated@@43 $generated@@40) $generated@@41 $generated@@42))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@44 T@U) ) (!  (=> (or ($generated@@24 ($generated@@31 $generated@@26 $generated@@44)) (and (< 0 $generated@@22) ($generated@@25 $generated@@26 $generated@@44 ($generated@@27 $generated)))) (= ($generated@@23 ($generated@@31 $generated@@26 $generated@@44)) (<= ($generated@@20 ($generated@@31 $generated@@26 $generated@@44)) ($generated@@28 1))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@31 $generated@@26 $generated@@44)))
))))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@45 $generated@@46 $generated) (and (= ($generated@@35 $generated@@5 ($generated@@34 $generated@@5 $generated@@46)) $generated@@46) ($generated@@25 $generated@@5 ($generated@@34 $generated@@5 $generated@@46) $generated)))
 :pattern ( ($generated@@45 $generated@@46 $generated))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@45 ($generated@@35 $generated@@49 $generated@@47) $generated@@48) ($generated@@25 $generated@@49 $generated@@47 $generated@@48))
 :pattern ( ($generated@@45 ($generated@@35 $generated@@49 $generated@@47) $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (! (<= 0 ($generated@@20 $generated@@50))
 :pattern ( ($generated@@20 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@39 $generated@@26 $generated@@52 ($generated@@27 $generated@@53) $generated@@54) (forall (($generated@@55 Int) ) (!  (=> (and (<= 0 $generated@@55) (< $generated@@55 ($generated@@20 $generated@@52))) ($generated@@38 ($generated@@51 $generated@@52 $generated@@55) $generated@@53 $generated@@54))
 :pattern ( ($generated@@51 $generated@@52 $generated@@55))
)))
 :pattern ( ($generated@@39 $generated@@26 $generated@@52 ($generated@@27 $generated@@53) $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@56 ($generated@@27 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@27 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@19 ($generated@@27 $generated@@58)) $generated@@1)
 :pattern ( ($generated@@27 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@34 $generated@@60 ($generated@@35 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@35 $generated@@60 $generated@@59))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@61 $generated@@72 $generated@@73 $generated@@74 ($generated@@68 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@77 $generated@@78) $generated@@75)
 :weight 0
)) (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@61 $generated@@79 $generated@@80 $generated@@81 ($generated@@68 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@61 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@61 $generated@@88 $generated@@89 $generated@@90 ($generated@@68 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@61 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)))) (= ($generated@@3 $generated@@62) 4)) (= ($generated@@3 $generated@@63) 5)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@65 $generated@@97 $generated@@98 ($generated@@69 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@101) $generated@@99)
 :weight 0
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@65 $generated@@102 $generated@@103 ($generated@@69 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@65 $generated@@102 $generated@@103 $generated@@105 $generated@@107)))
 :weight 0
))) (= ($generated@@3 $generated@@66) 6)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (= ($generated@@3 ($generated@@67 $generated@@108 $generated@@109)) 7))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@70 ($generated@@67 $generated@@110 $generated@@111)) $generated@@110)
 :pattern ( ($generated@@67 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@71 ($generated@@67 $generated@@112 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@67 $generated@@112 $generated@@113))
))))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 Bool) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@8 ($generated@@61 $generated@@62 $generated@@63 $generated@@4 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))  (=> (and (or (not (= $generated@@118 $generated@@114)) (not true)) ($generated@@8 ($generated@@34 $generated@@4 ($generated@@65 $generated@@63 $generated@@66 ($generated@@65 $generated@@62 ($generated@@67 $generated@@63 $generated@@66) $generated@@115 $generated@@118) $generated@@116)))) $generated@@117))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63 $generated@@4 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ) (!  (=> ($generated@@45 $generated@@120 ($generated@@27 $generated@@121)) (and (= ($generated@@35 $generated@@26 ($generated@@34 $generated@@26 $generated@@120)) $generated@@120) ($generated@@25 $generated@@26 ($generated@@34 $generated@@26 $generated@@120) ($generated@@27 $generated@@121))))
 :pattern ( ($generated@@45 $generated@@120 ($generated@@27 $generated@@121)))
)))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@35 $generated@@5 ($generated@@9 ($generated@@28 $generated@@122))) ($generated@@31 $generated@@66 ($generated@@35 $generated@@5 ($generated@@9 $generated@@122))))
 :pattern ( ($generated@@35 $generated@@5 ($generated@@9 ($generated@@28 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@35 $generated@@124 ($generated@@31 $generated@@124 $generated@@123)) ($generated@@31 $generated@@66 ($generated@@35 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@35 $generated@@124 ($generated@@31 $generated@@124 $generated@@123)))
)))
(assert (forall (($generated@@125 T@U) ) (!  (=> (= ($generated@@20 $generated@@125) 0) (= $generated@@125 $generated@@21))
 :pattern ( ($generated@@20 $generated@@125))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (! ($generated@@39 $generated@@5 $generated@@127 $generated $generated@@126)
 :pattern ( ($generated@@39 $generated@@5 $generated@@127 $generated $generated@@126))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@128 ($generated@@27 $generated@@129)) (forall (($generated@@130 Int) ) (!  (=> (and (<= 0 $generated@@130) (< $generated@@130 ($generated@@20 $generated@@128))) ($generated@@45 ($generated@@51 $generated@@128 $generated@@130) $generated@@129))
 :pattern ( ($generated@@51 $generated@@128 $generated@@130))
)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@128 ($generated@@27 $generated@@129)))
)))
(assert (forall (($generated@@131 T@U) ) (! ($generated@@25 $generated@@5 $generated@@131 $generated)
 :pattern ( ($generated@@25 $generated@@5 $generated@@131 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@136 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@137  (=> (and (and ($generated@@24 ($generated@@31 $generated@@26 $generated@@21)) (= (ControlFlow 0 3) (- 0 2))) ($generated@@24 ($generated@@31 $generated@@26 $generated@@21))) (or ($generated@@8 ($generated@@31 $generated@@4 ($generated@@7 ($generated@@23 ($generated@@31 $generated@@26 $generated@@21))))) (<= ($generated@@20 ($generated@@31 $generated@@26 $generated@@21)) ($generated@@28 1))))))
(let (($generated@@138 true))
(let (($generated@@139  (=> (= $generated@@132 ($generated@@64 $generated@@133 $generated@@134 $generated@@2 false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@138) (=> (= (ControlFlow 0 4) 3) $generated@@137)))))
(let (($generated@@140  (=> (and (and ($generated@@135 $generated@@134) ($generated@@136 $generated@@134)) (and (= 1 $generated@@22) (= (ControlFlow 0 5) 4))) $generated@@139)))
$generated@@140)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
