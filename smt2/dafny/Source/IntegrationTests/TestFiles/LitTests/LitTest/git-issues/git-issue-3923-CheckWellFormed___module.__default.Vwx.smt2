(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@T T@T) T@T)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@32 (T@T) T@T)
(declare-fun $generated@@53 (Int) Int)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@U) Bool)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@61 (T@U) Bool)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@66 (Int) T@U)
(declare-fun $generated@@69 (Int) T@U)
(declare-fun $generated@@72 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@78 (T@U) Bool)
(declare-fun $generated@@80 (T@T T@U T@U) Bool)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 () T@U)
(declare-fun $generated@@88 (T@U) Int)
(declare-fun $generated@@91 (T@U) Int)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@98 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@99 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@131 (T@U) Bool)
(declare-fun $generated@@138 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@24 $generated@@33 $generated@@34 ($generated@@30 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@37) $generated@@35)
 :weight 0
)) (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (or (= $generated@@42 $generated@@43) (= ($generated@@24 $generated@@38 $generated@@39 ($generated@@30 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@43) ($generated@@24 $generated@@38 $generated@@39 $generated@@41 $generated@@43)))
 :weight 0
))) (= ($generated@@6 $generated@@25) 3)) (= ($generated@@6 $generated@@26) 4)) (= ($generated@@6 $generated@@27) 5)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (= ($generated@@6 ($generated@@28 $generated@@44 $generated@@45)) 6))) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (! (= ($generated@@31 ($generated@@28 $generated@@46 $generated@@47)) $generated@@46)
 :pattern ( ($generated@@28 $generated@@46 $generated@@47))
))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@32 ($generated@@28 $generated@@48 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@28 $generated@@48 $generated@@49))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (!  (=> ($generated@@23 $generated@@50 $generated@@51) (forall (($generated@@52 T@U) ) (!  (=> ($generated@@11 ($generated@@29 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@50 $generated@@52) $generated@@1))) ($generated@@11 ($generated@@29 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@51 $generated@@52) $generated@@1))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@51 $generated@@52) $generated@@1))
)))
 :pattern ( ($generated@@23 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@54 Int) ) (! (= ($generated@@53 $generated@@54) $generated@@54)
 :pattern ( ($generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 $generated@@56) $generated@@56)
 :pattern ( ($generated@@55 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@58 $generated@@60) (= ($generated@@59 $generated@@60) $generated@@3))
 :pattern ( ($generated@@58 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ) (! (= ($generated@@61 $generated@@62) (= ($generated@@59 $generated@@62) $generated@@4))
 :pattern ( ($generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 ($generated@@29 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@29 $generated@@65 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@58 $generated@@67) (exists (($generated@@68 Int) ) (= $generated@@67 ($generated@@66 $generated@@68))))
 :pattern ( ($generated@@58 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@61 $generated@@70) (exists (($generated@@71 Int) ) (= $generated@@70 ($generated@@69 $generated@@71))))
 :pattern ( ($generated@@61 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@T) ) (!  (=> ($generated@@23 $generated@@73 $generated@@74) (=> ($generated@@72 $generated@@77 $generated@@75 $generated@@76 $generated@@73) ($generated@@72 $generated@@77 $generated@@75 $generated@@76 $generated@@74)))
 :pattern ( ($generated@@23 $generated@@73 $generated@@74) ($generated@@72 $generated@@77 $generated@@75 $generated@@76 $generated@@73))
)))
(assert (forall (($generated@@79 T@U) ) (!  (=> ($generated@@78 $generated@@79) (or ($generated@@58 $generated@@79) ($generated@@61 $generated@@79)))
 :pattern ( ($generated@@78 $generated@@79))
)))
(assert (= ($generated@@6 $generated@@81) 7))
(assert (forall (($generated@@83 T@U) ) (!  (=> ($generated@@80 $generated@@81 $generated@@83 $generated@@82) (or ($generated@@58 $generated@@83) ($generated@@61 $generated@@83)))
 :pattern ( ($generated@@61 $generated@@83) ($generated@@80 $generated@@81 $generated@@83 $generated@@82))
 :pattern ( ($generated@@58 $generated@@83) ($generated@@80 $generated@@81 $generated@@83 $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> (or (not (= $generated@@84 $generated@@86)) (not true)) (=> (and ($generated@@23 $generated@@84 $generated@@85) ($generated@@23 $generated@@85 $generated@@86)) ($generated@@23 $generated@@84 $generated@@86)))
 :pattern ( ($generated@@23 $generated@@84 $generated@@85) ($generated@@23 $generated@@85 $generated@@86))
)))
(assert (forall (($generated@@87 Int) ) (! (= ($generated@@59 ($generated@@66 $generated@@87)) $generated@@3)
 :pattern ( ($generated@@66 $generated@@87))
)))
(assert (forall (($generated@@89 Int) ) (! (= ($generated@@88 ($generated@@66 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@66 $generated@@89))
)))
(assert (forall (($generated@@90 Int) ) (! (= ($generated@@59 ($generated@@69 $generated@@90)) $generated@@4)
 :pattern ( ($generated@@69 $generated@@90))
)))
(assert (forall (($generated@@92 Int) ) (! (= ($generated@@91 ($generated@@69 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@69 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@T) ) (! (= ($generated@@29 $generated@@94 ($generated@@63 $generated@@94 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@63 $generated@@94 $generated@@93))
)))
(assert (forall (($generated@@95 Int) ) (! (= ($generated@@80 $generated@@81 ($generated@@66 $generated@@95) $generated@@82) ($generated@@80 $generated@@8 ($generated@@12 $generated@@95) $generated))
 :pattern ( ($generated@@80 $generated@@81 ($generated@@66 $generated@@95) $generated@@82))
)))
(assert (forall (($generated@@96 Int) ) (! (= ($generated@@80 $generated@@81 ($generated@@69 $generated@@96) $generated@@82) ($generated@@80 $generated@@8 ($generated@@12 $generated@@96) $generated))
 :pattern ( ($generated@@80 $generated@@81 ($generated@@69 $generated@@96) $generated@@82))
)))
(assert  (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@97 $generated@@100 $generated@@101 $generated@@102 ($generated@@99 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@105 $generated@@106) $generated@@103)
 :weight 0
)) (and (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@97 $generated@@107 $generated@@108 $generated@@109 ($generated@@99 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@97 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@122 $generated@@124) (= ($generated@@97 $generated@@116 $generated@@117 $generated@@118 ($generated@@99 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@97 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 Bool) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@11 ($generated@@97 $generated@@27 $generated@@25 $generated@@7 ($generated@@98 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))  (=> (and (or (not (= $generated@@129 $generated@@125)) (not true)) ($generated@@11 ($generated@@29 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@126 $generated@@129) $generated@@127)))) $generated@@128))
 :pattern ( ($generated@@97 $generated@@27 $generated@@25 $generated@@7 ($generated@@98 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> (and ($generated@@131 $generated@@133) (and ($generated@@58 $generated@@132) ($generated@@72 $generated@@81 $generated@@132 $generated@@82 $generated@@133))) ($generated@@72 $generated@@8 ($generated@@12 ($generated@@88 $generated@@132)) $generated $generated@@133))
 :pattern ( ($generated@@72 $generated@@8 ($generated@@12 ($generated@@88 $generated@@132)) $generated $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> (and ($generated@@131 $generated@@135) (and ($generated@@61 $generated@@134) ($generated@@72 $generated@@81 $generated@@134 $generated@@82 $generated@@135))) ($generated@@72 $generated@@8 ($generated@@12 ($generated@@91 $generated@@134)) $generated $generated@@135))
 :pattern ( ($generated@@72 $generated@@8 ($generated@@12 ($generated@@91 $generated@@134)) $generated $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (!  (=> (and ($generated@@131 $generated@@137) ($generated@@80 $generated@@81 $generated@@136 $generated@@82)) ($generated@@72 $generated@@81 $generated@@136 $generated@@82 $generated@@137))
 :pattern ( ($generated@@72 $generated@@81 $generated@@136 $generated@@82 $generated@@137))
)))
(assert (= ($generated@@22 $generated@@82) $generated@@2))
(assert (= ($generated@@138 $generated@@82) $generated@@5))
(assert (forall (($generated@@139 Int) ) (! (= ($generated@@63 $generated@@8 ($generated@@12 ($generated@@53 $generated@@139))) ($generated@@55 $generated@@26 ($generated@@63 $generated@@8 ($generated@@12 $generated@@139))))
 :pattern ( ($generated@@63 $generated@@8 ($generated@@12 ($generated@@53 $generated@@139))))
)))
(assert (forall (($generated@@140 Int) ) (! (= ($generated@@66 ($generated@@53 $generated@@140)) ($generated@@55 $generated@@81 ($generated@@66 $generated@@140)))
 :pattern ( ($generated@@66 ($generated@@53 $generated@@140)))
)))
(assert (forall (($generated@@141 Int) ) (! (= ($generated@@69 ($generated@@53 $generated@@141)) ($generated@@55 $generated@@81 ($generated@@69 $generated@@141)))
 :pattern ( ($generated@@69 ($generated@@53 $generated@@141)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@T) ) (! (= ($generated@@63 $generated@@143 ($generated@@55 $generated@@143 $generated@@142)) ($generated@@55 $generated@@26 ($generated@@63 $generated@@143 $generated@@142)))
 :pattern ( ($generated@@63 $generated@@143 ($generated@@55 $generated@@143 $generated@@142)))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (! ($generated@@72 $generated@@8 $generated@@145 $generated $generated@@144)
 :pattern ( ($generated@@72 $generated@@8 $generated@@145 $generated $generated@@144))
)))
(assert (forall (($generated@@146 T@U) ) (! ($generated@@80 $generated@@8 $generated@@146 $generated)
 :pattern ( ($generated@@80 $generated@@8 $generated@@146 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@153 true))
(let (($generated@@154  (=> (and (=> ($generated@@58 $generated@@147) (<= ($generated@@53 0) ($generated@@88 $generated@@147))) (= (ControlFlow 0 4) 1)) $generated@@153)))
(let (($generated@@155  (=> ($generated@@58 $generated@@147) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@58 $generated@@147)) (=> ($generated@@58 $generated@@147) (=> (and (<= ($generated@@53 0) ($generated@@88 $generated@@147)) (= (ControlFlow 0 2) 1)) $generated@@153))))))
(let (($generated@@156  (=> (= $generated@@148 ($generated@@98 $generated@@149 $generated@@150 $generated@@1 false)) (and (=> (= (ControlFlow 0 5) 2) $generated@@155) (=> (= (ControlFlow 0 5) 4) $generated@@154)))))
(let (($generated@@157  (=> (and ($generated@@131 $generated@@150) ($generated@@151 $generated@@150)) (=> (and (and (and ($generated@@80 $generated@@81 $generated@@147 $generated@@82) ($generated@@72 $generated@@81 $generated@@147 $generated@@82 $generated@@150)) ($generated@@78 $generated@@147)) (and (= 1 $generated@@152) (= (ControlFlow 0 6) 5))) $generated@@156))))
$generated@@157))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
