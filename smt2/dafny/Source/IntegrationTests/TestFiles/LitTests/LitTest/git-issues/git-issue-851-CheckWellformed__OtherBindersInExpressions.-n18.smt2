(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@U Bool T@U) T@U)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@33 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@U T@U) Bool)
(declare-fun $generated@@55 (T@U) T@U)
(declare-fun $generated@@58 (T@T T@U T@U) Bool)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@64 (T@U T@U T@U) Bool)
(declare-fun $generated@@65 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@70 (Int Int) Int)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 () T@T)
(declare-fun $generated@@93 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@94 (T@T T@T) T@T)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@T) T@T)
(declare-fun $generated@@97 (T@T) T@T)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () Bool)
(declare-fun $generated@@137 () Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@1))
(assert (= ($generated@@21 $generated@@0) $generated@@2))
(assert ($generated@@22 $generated@@23))
(assert (forall (($generated@@25 Int) ) (! (= ($generated@@24 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@25))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@28 $generated@@27))
)))
(assert  (and (and (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@29 $generated@@34 $generated@@35 ($generated@@33 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@38) $generated@@36)
 :weight 0
)) (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (!  (or (= $generated@@43 $generated@@44) (= ($generated@@29 $generated@@39 $generated@@40 ($generated@@33 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@44) ($generated@@29 $generated@@39 $generated@@40 $generated@@42 $generated@@44)))
 :weight 0
))) (= ($generated@@5 $generated@@30) 3)))
(assert (forall (($generated@@45 T@U) ($generated@@46 Bool) ($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@10 ($generated@@29 $generated@@30 $generated@@6 ($generated@@31 $generated@@45 $generated@@46 $generated@@47) $generated@@48)) (exists (($generated@@49 T@U) )  (and (and ($generated@@32 $generated@@49 $generated@@45) $generated@@46) (= $generated@@48 $generated@@47))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@6 ($generated@@31 $generated@@45 $generated@@46 $generated@@47) $generated@@48))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@50 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@54 ($generated@@55 $generated@@56) $generated@@57) ($generated@@10 ($generated@@29 $generated@@30 $generated@@6 $generated@@56 $generated@@57)))
 :pattern ( ($generated@@54 ($generated@@55 $generated@@56) $generated@@57))
)))
(assert (= ($generated@@5 $generated@@59) 4))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@58 $generated@@59 $generated@@61 ($generated@@60 $generated@@62)) (forall (($generated@@63 T@U) ) (!  (=> ($generated@@54 $generated@@61 $generated@@63) ($generated@@32 $generated@@63 $generated@@62))
 :pattern ( ($generated@@54 $generated@@61 $generated@@63))
)))
 :pattern ( ($generated@@58 $generated@@59 $generated@@61 ($generated@@60 $generated@@62)))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@64 ($generated@@51 $generated@@69 $generated@@66) $generated@@67 $generated@@68) ($generated@@65 $generated@@69 $generated@@66 $generated@@67 $generated@@68))
 :pattern ( ($generated@@64 ($generated@@51 $generated@@69 $generated@@66) $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@71 Int) ($generated@@72 Int) ) (! (= ($generated@@70 $generated@@71 $generated@@72) (div $generated@@71 $generated@@72))
 :pattern ( ($generated@@70 $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@32 $generated@@73 $generated@@0) (and (= ($generated@@51 $generated@@7 ($generated@@50 $generated@@7 $generated@@73)) $generated@@73) ($generated@@58 $generated@@7 ($generated@@50 $generated@@7 $generated@@73) $generated@@0)))
 :pattern ( ($generated@@32 $generated@@73 $generated@@0))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@32 $generated@@74 $generated) (and (= ($generated@@51 $generated@@6 ($generated@@50 $generated@@6 $generated@@74)) $generated@@74) ($generated@@58 $generated@@6 ($generated@@50 $generated@@6 $generated@@74) $generated)))
 :pattern ( ($generated@@32 $generated@@74 $generated))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@32 ($generated@@51 $generated@@77 $generated@@75) $generated@@76) ($generated@@58 $generated@@77 $generated@@75 $generated@@76))
 :pattern ( ($generated@@32 ($generated@@51 $generated@@77 $generated@@75) $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@22 $generated@@78) (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> ($generated@@32 $generated@@80 $generated@@78) ($generated@@64 $generated@@80 $generated@@78 $generated@@79))
 :pattern ( ($generated@@64 $generated@@80 $generated@@78 $generated@@79))
)))
 :pattern ( ($generated@@22 $generated@@78))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@65 $generated@@59 $generated@@81 ($generated@@60 $generated@@82) $generated@@83) (forall (($generated@@84 T@U) ) (!  (=> ($generated@@54 $generated@@81 $generated@@84) ($generated@@64 $generated@@84 $generated@@82 $generated@@83))
 :pattern ( ($generated@@54 $generated@@81 $generated@@84))
)))
 :pattern ( ($generated@@65 $generated@@59 $generated@@81 ($generated@@60 $generated@@82) $generated@@83))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@85 ($generated@@60 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@60 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@21 ($generated@@60 $generated@@87)) $generated@@3)
 :pattern ( ($generated@@60 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@50 $generated@@89 ($generated@@51 $generated@@89 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@51 $generated@@89 $generated@@88))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@90 $generated@@98 $generated@@99 $generated@@100 ($generated@@95 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@103 $generated@@104) $generated@@101)
 :weight 0
)) (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@90 $generated@@105 $generated@@106 $generated@@107 ($generated@@95 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@112 $generated@@113) ($generated@@90 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@112 $generated@@113)))
 :weight 0
)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@90 $generated@@114 $generated@@115 $generated@@116 ($generated@@95 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@121 $generated@@122) ($generated@@90 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@121 $generated@@122)))
 :weight 0
)))) (= ($generated@@5 $generated@@91) 5)) (= ($generated@@5 $generated@@92) 6)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (= ($generated@@5 ($generated@@94 $generated@@123 $generated@@124)) 7))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@96 ($generated@@94 $generated@@125 $generated@@126)) $generated@@125)
 :pattern ( ($generated@@94 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (! (= ($generated@@97 ($generated@@94 $generated@@127 $generated@@128)) $generated@@128)
 :pattern ( ($generated@@94 $generated@@127 $generated@@128))
))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@10 ($generated@@90 $generated@@91 $generated@@92 $generated@@6 ($generated@@93 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@10 ($generated@@50 $generated@@6 ($generated@@29 $generated@@92 $generated@@30 ($generated@@29 $generated@@91 ($generated@@94 $generated@@92 $generated@@30) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@90 $generated@@91 $generated@@92 $generated@@6 ($generated@@93 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert  (=> (<= 1 $generated@@135) (=> (or $generated@@136 (< 1 $generated@@135)) (= $generated@@137 ($generated@@24 ($generated@@70 40 ($generated@@24 0)))))))
(assert  (=> (<= 1 $generated@@135) (=> (or $generated@@136 (< 1 $generated@@135)) (= $generated@@137 ($generated@@24 ($generated@@70 40 ($generated@@24 0)))))))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> ($generated@@32 $generated@@138 ($generated@@60 $generated@@139)) (and (= ($generated@@51 $generated@@59 ($generated@@50 $generated@@59 $generated@@138)) $generated@@138) ($generated@@58 $generated@@59 ($generated@@50 $generated@@59 $generated@@138) ($generated@@60 $generated@@139))))
 :pattern ( ($generated@@32 $generated@@138 ($generated@@60 $generated@@139)))
)))
(assert (forall (($generated@@140 Int) ) (! (= ($generated@@51 $generated@@7 ($generated@@11 ($generated@@24 $generated@@140))) ($generated@@26 $generated@@30 ($generated@@51 $generated@@7 ($generated@@11 $generated@@140))))
 :pattern ( ($generated@@51 $generated@@7 ($generated@@11 ($generated@@24 $generated@@140))))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@T) ) (! (= ($generated@@51 $generated@@142 ($generated@@26 $generated@@142 $generated@@141)) ($generated@@26 $generated@@30 ($generated@@51 $generated@@142 $generated@@141)))
 :pattern ( ($generated@@51 $generated@@142 ($generated@@26 $generated@@142 $generated@@141)))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (! ($generated@@65 $generated@@7 $generated@@144 $generated@@0 $generated@@143)
 :pattern ( ($generated@@65 $generated@@7 $generated@@144 $generated@@0 $generated@@143))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! ($generated@@65 $generated@@6 $generated@@146 $generated $generated@@145)
 :pattern ( ($generated@@65 $generated@@6 $generated@@146 $generated $generated@@145))
)))
(assert (forall (($generated@@147 T@U) ) (! ($generated@@58 $generated@@7 $generated@@147 $generated@@0)
 :pattern ( ($generated@@58 $generated@@7 $generated@@147 $generated@@0))
)))
(assert (forall (($generated@@148 T@U) ) (! ($generated@@58 $generated@@6 $generated@@148 $generated)
 :pattern ( ($generated@@58 $generated@@6 $generated@@148 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@158  (=> (and (and (= $generated@@149 ($generated@@55 ($generated@@31 $generated@@23 ($generated@@10 ($generated@@26 $generated@@6 ($generated@@9 true))) ($generated@@51 $generated@@6 ($generated@@9 (= ($generated@@24 ($generated@@70 5 ($generated@@24 0))) ($generated@@24 19))))))) ($generated@@58 $generated@@59 $generated@@149 ($generated@@60 $generated))) (and (= $generated@@150 $generated@@149) (= (ControlFlow 0 3) (- 0 2)))) (or (not (= ($generated@@24 0) 0)) (not true)))))
(let (($generated@@159  (=> (and (not ($generated@@10 ($generated@@26 $generated@@6 ($generated@@9 true)))) (= (ControlFlow 0 7) 3)) $generated@@158)))
(let (($generated@@160  (=> ($generated@@10 ($generated@@26 $generated@@6 ($generated@@9 true))) (=> (and (and ($generated@@151 $generated@@152) ($generated@@153 $generated@@152)) (and ($generated@@10 ($generated@@26 $generated@@6 ($generated@@9 false))) (= $generated@@154 $generated@@152))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= ($generated@@24 0) 0)) (not true))) (=> (or (not (= ($generated@@24 0) 0)) (not true)) (=> (= (ControlFlow 0 5) 3) $generated@@158)))))))
(let (($generated@@161  (=> (and ($generated@@32 $generated@@155 $generated@@23) ($generated@@64 $generated@@155 $generated@@23 $generated@@154)) (and (=> (= (ControlFlow 0 8) 5) $generated@@160) (=> (= (ControlFlow 0 8) 7) $generated@@159)))))
(let (($generated@@162  (=> (and (not (and ($generated@@32 $generated@@155 $generated@@23) ($generated@@64 $generated@@155 $generated@@23 $generated@@154))) (= (ControlFlow 0 4) 3)) $generated@@158)))
(let (($generated@@163 true))
(let (($generated@@164  (=> (= $generated@@156 ($generated@@93 $generated@@157 $generated@@154 $generated@@4 false)) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@163) (=> (= (ControlFlow 0 9) 8) $generated@@161)) (=> (= (ControlFlow 0 9) 4) $generated@@162)))))
(let (($generated@@165  (=> (and (and ($generated@@151 $generated@@154) ($generated@@153 $generated@@154)) (and (= 1 $generated@@135) (= (ControlFlow 0 10) 9))) $generated@@164)))
$generated@@165)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
