(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass._module.CodeUnit () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.IsMinimalWellFormedCodeUnitSubsequence (T@U T@U) Bool)
(declare-fun |_module.__default.IsMinimalWellFormedCodeUnitSubsequence#canCall| (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSeq alloc)
)
(assert ($AlwaysAllocated Tclass._module.CodeUnit))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) (n Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n)) (< j (|Seq#Length| s))) (= (|Seq#Index| (|Seq#Take| s n) j) (|Seq#Index| s j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s n) j))
 :pattern ( (|Seq#Index| s j) (|Seq#Take| s n))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (= (Ctor SeqType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) (|s#0| T@U) ) (!  (=> (or (|_module.__default.IsMinimalWellFormedCodeUnitSubsequence#canCall| |s#0|) (and (< 1 $FunctionContextHeight) ($Is SeqType |s#0| (TSeq Tclass._module.CodeUnit)))) (=> (_module.__default.IsMinimalWellFormedCodeUnitSubsequence $ly |s#0|) (and (> (|Seq#Length| |s#0|) 0) (forall ((|i#0| Int) ) (!  (=> (and (< 0 |i#0|) (< |i#0| (|Seq#Length| |s#0|))) (not (_module.__default.IsMinimalWellFormedCodeUnitSubsequence $ly (|Seq#Take| |s#0| |i#0|))))
 :pattern ( (|Seq#Take| |s#0| |i#0|))
)))))
 :pattern ( (_module.__default.IsMinimalWellFormedCodeUnitSubsequence $ly |s#0|))
))))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v) t h) ($IsAlloc T@@0 v t h))
 :pattern ( ($IsAllocBox ($Box T@@0 v) t h))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) ) (!  (=> (and (<= 0 n@@0) (<= n@@0 (|Seq#Length| s@@0))) (= (|Seq#Length| (|Seq#Take| s@@0 n@@0)) n@@0))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@0 n@@0)))
)))
(assert (forall (($ly@@0 T@U) (|s#0@@0| T@U) ) (! (= (_module.__default.IsMinimalWellFormedCodeUnitSubsequence ($LS $ly@@0) |s#0@@0|) (_module.__default.IsMinimalWellFormedCodeUnitSubsequence $ly@@0 |s#0@@0|))
 :pattern ( (_module.__default.IsMinimalWellFormedCodeUnitSubsequence ($LS $ly@@0) |s#0@@0|))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v@@0) t@@0) ($Is T@@1 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@1 v@@0) t@@0))
)))
(assert (forall ((s@@1 T@U) ) (! (<= 0 (|Seq#Length| s@@1))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@0 T@U) (v@@1 T@U) ) (!  (=> ($IsBox v@@1 ty) ($IsAllocBox v@@1 ty h@@0))
 :pattern ( ($IsAllocBox v@@1 ty h@@0))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall ((v@@2 T@U) (t0 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@2 (TSeq t0) h@@1) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@2))) ($IsAllocBox (|Seq#Index| v@@2 i) t0 h@@1))
 :pattern ( (|Seq#Index| v@@2 i))
)))
 :pattern ( ($IsAlloc SeqType v@@2 (TSeq t0) h@@1))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSeq (TSeq t@@1)) t@@1)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSeq t@@2)) TagSeq)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((x@@3 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@3)) x@@3)
 :pattern ( ($Box T@@2 x@@3))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx (TSeq t@@3)) (and (= ($Box SeqType ($Unbox SeqType bx)) bx) ($Is SeqType ($Unbox SeqType bx) (TSeq t@@3))))
 :pattern ( ($IsBox bx (TSeq t@@3)))
)))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (|Seq#Length| s@@2) 0) (= s@@2 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((s@@3 T@U) (n@@1 Int) ) (!  (=> (= n@@1 0) (= (|Seq#Take| s@@3 n@@1) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@3 n@@1))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@3 (TSeq t0@@2)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsBox (|Seq#Index| v@@3 i@@0) t0@@2))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($Is SeqType v@@3 (TSeq t0@@2)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |s#0@@1| () T@U)
(declare-fun $LZ () T@U)
(declare-fun |i#2@0| () Int)
(declare-fun |##s#0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |b#0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let ((anon10_correct true))
(let ((anon8_correct  (=> (and (forall ((|i#1| Int) ) (!  (=> (and (< 0 |i#1|) (< |i#1| (|Seq#Length| |s#0@@1|))) (not (_module.__default.IsMinimalWellFormedCodeUnitSubsequence ($LS $LZ) (|Seq#Take| |s#0@@1| |i#1|))))
 :pattern ( (|Seq#Take| |s#0@@1| |i#1|))
)) (= (ControlFlow 0 4) 2)) anon10_correct)))
(let ((anon6_correct  (=> (and (< 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 6) (- 0 9)) (and (<= 0 |i#2@0|) (<= |i#2@0| (|Seq#Length| |s#0@@1|)))) (=> (and (<= 0 |i#2@0|) (<= |i#2@0| (|Seq#Length| |s#0@@1|))) (=> (and (= |##s#0@0| (|Seq#Take| |s#0@@1| |i#2@0|)) ($IsAlloc SeqType |##s#0@0| (TSeq Tclass._module.CodeUnit) $Heap)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (or (<= 0 (|Seq#Length| |s#0@@1|)) (= (|Seq#Length| |##s#0@0|) (|Seq#Length| |s#0@@1|)))) (=> (or (<= 0 (|Seq#Length| |s#0@@1|)) (= (|Seq#Length| |##s#0@0|) (|Seq#Length| |s#0@@1|))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (or (= (|Seq#Take| |s#0@@1| |i#2@0|) |s#0@@1|) (< (|Seq#Length| |##s#0@0|) (|Seq#Length| |s#0@@1|)))) (=> (or (= (|Seq#Take| |s#0@@1| |i#2@0|) |s#0@@1|) (< (|Seq#Length| |##s#0@0|) (|Seq#Length| |s#0@@1|))) (=> (or (= (|Seq#Take| |s#0@@1| |i#2@0|) |s#0@@1|) (|_module.__default.IsMinimalWellFormedCodeUnitSubsequence#canCall| (|Seq#Take| |s#0@@1| |i#2@0|))) (=> (and (not (_module.__default.IsMinimalWellFormedCodeUnitSubsequence ($LS $LZ) (|Seq#Take| |s#0@@1| |i#2@0|))) (= (ControlFlow 0 6) 4)) anon8_correct))))))))))))
(let ((anon15_Else_correct  (=> (and (<= |i#2@0| 0) (= (ControlFlow 0 11) 6)) anon6_correct)))
(let ((anon15_Then_correct  (=> (and (< 0 |i#2@0|) (= (ControlFlow 0 10) 6)) anon6_correct)))
(let ((anon14_Else_correct  (=> (and (=> (and (< 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@1|))) (not (_module.__default.IsMinimalWellFormedCodeUnitSubsequence ($LS $LZ) (|Seq#Take| |s#0@@1| |i#2@0|)))) (= (ControlFlow 0 5) 4)) anon8_correct)))
(let ((anon13_Then_correct  (=> (and |b#0| (> (|Seq#Length| |s#0@@1|) 0)) (and (and (=> (= (ControlFlow 0 12) 5) anon14_Else_correct) (=> (= (ControlFlow 0 12) 10) anon15_Then_correct)) (=> (= (ControlFlow 0 12) 11) anon15_Else_correct)))))
(let ((anon13_Else_correct  (=> (and (=> |b#0| (and (> (|Seq#Length| |s#0@@1|) 0) (forall ((|i#1@@0| Int) ) (!  (=> (and (< 0 |i#1@@0|) (< |i#1@@0| (|Seq#Length| |s#0@@1|))) (not (_module.__default.IsMinimalWellFormedCodeUnitSubsequence ($LS $LZ) (|Seq#Take| |s#0@@1| |i#1@@0|))))
 :pattern ( (|Seq#Take| |s#0@@1| |i#1@@0|))
)))) (= (ControlFlow 0 3) 2)) anon10_correct)))
(let ((anon12_Else_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 13) 1) anon12_Else_correct) (=> (= (ControlFlow 0 13) 12) anon13_Then_correct)) (=> (= (ControlFlow 0 13) 3) anon13_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is SeqType |s#0@@1| (TSeq Tclass._module.CodeUnit))) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 14) 13))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
