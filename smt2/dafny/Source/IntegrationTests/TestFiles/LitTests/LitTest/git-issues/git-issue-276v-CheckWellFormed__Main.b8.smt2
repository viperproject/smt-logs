(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@T T@U T@U) Bool)
(declare-fun $generated@@0 () T@T)
(declare-fun $generated@@1 (Int) T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@18 () T@T)
(declare-fun $generated@@19 ((_ BitVec 8)) T@U)
(declare-fun $generated@@20 (T@U) (_ BitVec 8))
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 ((_ BitVec 8)) Int)
(declare-fun $generated@@35 (T@U) Int)
(declare-fun $generated@@39 () (_ BitVec 8))
(declare-fun $generated@@40 () (_ BitVec 8))
(declare-fun $generated@@41 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@T T@T) T@T)
(declare-fun $generated@@48 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@100 () Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@0) 1)) (= ($generated@@2 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (forall (($generated@@17 T@U) ) (! ($generated $generated@@0 $generated@@17 ($generated@@1 0))
 :pattern ( ($generated $generated@@0 $generated@@17 ($generated@@1 0)))
)))
(assert  (and (and (= ($generated@@2 $generated@@18) 3) (forall (($generated@@21 (_ BitVec 8)) ) (! (= ($generated@@20 ($generated@@19 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@19 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@22))
))))
(assert (forall (($generated@@23 T@U) ) (! ($generated $generated@@18 $generated@@23 ($generated@@1 8))
 :pattern ( ($generated $generated@@18 $generated@@23 ($generated@@1 8)))
)))
(assert (forall (($generated@@25 Int) ) (! (= ($generated@@24 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@25))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 $generated@@27) $generated@@27)
 :pattern ( ($generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 ($generated@@29 $generated@@32 $generated@@31)) $generated@@31)
 :pattern ( ($generated@@29 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@34 (_ BitVec 8)) ) (!  (and (and (<= 0 ($generated@@33 $generated@@34)) (< ($generated@@33 $generated@@34) 256)) (= ($generated@@33 $generated@@34) (bv2int $generated@@34)))
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@35 ($generated@@1 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@1 $generated@@36))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@29 $generated@@38 ($generated@@30 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@30 $generated@@38 $generated@@37))
)))
(assert (= $generated@@39 ($generated@@20 ($generated@@26 $generated@@18 ($generated@@19 #x14)))))
(assert (= $generated@@40 ($generated@@20 ($generated@@26 $generated@@18 ($generated@@19 #x25)))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@41 $generated@@52 $generated@@53 $generated@@54 ($generated@@48 $generated@@52 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@58 $generated@@55) $generated@@57 $generated@@58) $generated@@55)
 :weight 0
)) (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (or (= $generated@@64 $generated@@66) (= ($generated@@41 $generated@@59 $generated@@60 $generated@@61 ($generated@@48 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@65 $generated@@62) $generated@@66 $generated@@67) ($generated@@41 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@66 $generated@@67)))
 :weight 0
)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@41 $generated@@68 $generated@@69 $generated@@70 ($generated@@48 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@75 $generated@@76) ($generated@@41 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@75 $generated@@76)))
 :weight 0
)))) (= ($generated@@2 $generated@@42) 4)) (= ($generated@@2 $generated@@43) 5)) (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@45 $generated@@77 $generated@@78 ($generated@@49 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@79) $generated@@81) $generated@@79)
 :weight 0
))) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@86 $generated@@87) (= ($generated@@45 $generated@@82 $generated@@83 ($generated@@49 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@84) $generated@@87) ($generated@@45 $generated@@82 $generated@@83 $generated@@85 $generated@@87)))
 :weight 0
))) (= ($generated@@2 $generated@@46) 6)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ) (= ($generated@@2 ($generated@@47 $generated@@88 $generated@@89)) 7))) (forall (($generated@@90 T@T) ($generated@@91 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@90 $generated@@91)) $generated@@90)
 :pattern ( ($generated@@47 $generated@@90 $generated@@91))
))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (! (= ($generated@@51 ($generated@@47 $generated@@92 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@47 $generated@@92 $generated@@93))
))))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 Bool) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@6 ($generated@@41 $generated@@42 $generated@@43 $generated@@3 ($generated@@44 $generated@@94 $generated@@95 $generated@@96 $generated@@97) $generated@@98 $generated@@99))  (=> (and (or (not (= $generated@@98 $generated@@94)) (not true)) ($generated@@6 ($generated@@29 $generated@@3 ($generated@@45 $generated@@43 $generated@@46 ($generated@@45 $generated@@42 ($generated@@47 $generated@@43 $generated@@46) $generated@@95 $generated@@98) $generated@@96)))) $generated@@97))
 :pattern ( ($generated@@41 $generated@@42 $generated@@43 $generated@@3 ($generated@@44 $generated@@94 $generated@@95 $generated@@96 $generated@@97) $generated@@98 $generated@@99))
)))
(assert  (=> (< 0 $generated@@100) ($generated $generated@@18 ($generated@@19 $generated@@39) ($generated@@1 8))))
(assert  (=> (< 0 $generated@@100) ($generated $generated@@18 ($generated@@19 $generated@@40) ($generated@@1 8))))
(assert (forall (($generated@@101 Int) ) (! (= ($generated@@30 $generated@@0 ($generated@@7 ($generated@@24 $generated@@101))) ($generated@@26 $generated@@46 ($generated@@30 $generated@@0 ($generated@@7 $generated@@101))))
 :pattern ( ($generated@@30 $generated@@0 ($generated@@7 ($generated@@24 $generated@@101))))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@T) ) (! (= ($generated@@30 $generated@@103 ($generated@@26 $generated@@103 $generated@@102)) ($generated@@26 $generated@@46 ($generated@@30 $generated@@103 $generated@@102)))
 :pattern ( ($generated@@30 $generated@@103 ($generated@@26 $generated@@103 $generated@@102)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 () T@U)
(declare-fun $generated@@107 () T@U)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 (T@U) Bool)
(declare-fun $generated@@110 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@111 true))
(let (($generated@@112  (=> (and (< $generated@@104 ($generated@@24 0)) (= (ControlFlow 0 6) 4)) $generated@@111)))
(let (($generated@@113  (=> (and (<= ($generated@@24 0) $generated@@104) (= (ControlFlow 0 5) 4)) $generated@@111)))
(let (($generated@@114  (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@24 0) ($generated@@24 0))) (=> (= (ControlFlow 0 2) (- 0 1)) (< 0 ($generated@@33 (bvor $generated@@39 $generated@@40)))))))
(let (($generated@@115  (=> (= $generated@@105 ($generated@@44 $generated@@106 $generated@@107 $generated@@108 false)) (and (and (=> (= (ControlFlow 0 7) 2) $generated@@114) (=> (= (ControlFlow 0 7) 5) $generated@@113)) (=> (= (ControlFlow 0 7) 6) $generated@@112)))))
(let (($generated@@116  (=> (and (and ($generated@@109 $generated@@107) ($generated@@110 $generated@@107)) (and (= 1 $generated@@100) (= (ControlFlow 0 8) 7))) $generated@@115)))
$generated@@116)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
