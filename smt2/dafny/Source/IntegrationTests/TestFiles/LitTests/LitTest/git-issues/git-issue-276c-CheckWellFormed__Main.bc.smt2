(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@36 (T@U Int) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@57 (T@U) T@U)
(declare-fun $generated@@62 (Int) T@U)
(declare-fun $generated@@63 (T@U) Int)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@124 (T@U) T@U)
(declare-fun $generated@@125 (T@U) T@U)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (= ($generated@@3 $generated@@28) 3))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (!  (=> (and ($generated@@27 $generated@@28 $generated@@32 ($generated@@30 $generated@@34)) ($generated@@31 $generated@@33 $generated@@34)) ($generated@@27 $generated@@28 ($generated@@29 $generated@@32 $generated@@33) ($generated@@30 $generated@@34)))
 :pattern ( ($generated@@27 $generated@@28 ($generated@@29 $generated@@32 $generated@@33) ($generated@@30 $generated@@34)))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@35 $generated@@37 $generated@@38)  (and (= ($generated@@20 $generated@@37) ($generated@@20 $generated@@38)) (forall (($generated@@39 Int) ) (!  (=> (and (<= 0 $generated@@39) (< $generated@@39 ($generated@@20 $generated@@37))) (= ($generated@@36 $generated@@37 $generated@@39) ($generated@@36 $generated@@38 $generated@@39)))
 :pattern ( ($generated@@36 $generated@@37 $generated@@39))
 :pattern ( ($generated@@36 $generated@@38 $generated@@39))
))))
 :pattern ( ($generated@@35 $generated@@37 $generated@@38))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@20 ($generated@@29 $generated@@44 $generated@@45)) (+ 1 ($generated@@20 $generated@@44)))
 :pattern ( ($generated@@29 $generated@@44 $generated@@45))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 Int) ($generated@@48 T@U) ) (!  (and (=> (= $generated@@47 ($generated@@20 $generated@@46)) (= ($generated@@36 ($generated@@29 $generated@@46 $generated@@48) $generated@@47) $generated@@48)) (=> (or (not (= $generated@@47 ($generated@@20 $generated@@46))) (not true)) (= ($generated@@36 ($generated@@29 $generated@@46 $generated@@48) $generated@@47) ($generated@@36 $generated@@46 $generated@@47))))
 :pattern ( ($generated@@36 ($generated@@29 $generated@@46 $generated@@48) $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> ($generated@@35 $generated@@49 $generated@@50) (= $generated@@49 $generated@@50))
 :pattern ( ($generated@@35 $generated@@49 $generated@@50))
)))
(assert (= ($generated@@3 $generated@@51) 4))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@31 $generated@@52 $generated) (and (= ($generated@@41 $generated@@51 ($generated@@40 $generated@@51 $generated@@52)) $generated@@52) ($generated@@27 $generated@@51 ($generated@@40 $generated@@51 $generated@@52) $generated)))
 :pattern ( ($generated@@31 $generated@@52 $generated))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@31 ($generated@@41 $generated@@55 $generated@@53) $generated@@54) ($generated@@27 $generated@@55 $generated@@53 $generated@@54))
 :pattern ( ($generated@@31 ($generated@@41 $generated@@55 $generated@@53) $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (! (<= 0 ($generated@@20 $generated@@56))
 :pattern ( ($generated@@20 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@57 ($generated@@30 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@30 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@19 ($generated@@30 $generated@@59)) $generated@@1)
 :pattern ( ($generated@@30 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@40 $generated@@61 ($generated@@41 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@41 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@64 Int) ) (!  (=> (or (and (<= 0 $generated@@64) (< $generated@@64 55296)) (and (<= 57344 $generated@@64) (< $generated@@64 1114112))) (= ($generated@@63 ($generated@@62 $generated@@64)) $generated@@64))
 :pattern ( ($generated@@62 $generated@@64))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@65 $generated@@76 $generated@@77 $generated@@78 ($generated@@72 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@65 $generated@@83 $generated@@84 $generated@@85 ($generated@@72 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@65 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@65 $generated@@92 $generated@@93 $generated@@94 ($generated@@72 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@65 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))) (= ($generated@@3 $generated@@66) 5)) (= ($generated@@3 $generated@@67) 6)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@69 $generated@@101 $generated@@102 ($generated@@73 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@105) $generated@@103)
 :weight 0
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@110 $generated@@111) (= ($generated@@69 $generated@@106 $generated@@107 ($generated@@73 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@69 $generated@@106 $generated@@107 $generated@@109 $generated@@111)))
 :weight 0
))) (= ($generated@@3 $generated@@70) 7)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@3 ($generated@@71 $generated@@112 $generated@@113)) 8))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@71 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@71 $generated@@116 $generated@@117))
))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@8 ($generated@@65 $generated@@66 $generated@@67 $generated@@4 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@8 ($generated@@40 $generated@@4 ($generated@@69 $generated@@67 $generated@@70 ($generated@@69 $generated@@66 ($generated@@71 $generated@@67 $generated@@70) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@65 $generated@@66 $generated@@67 $generated@@4 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (and (= ($generated@@124 ($generated@@29 $generated@@126 $generated@@127)) $generated@@126) (= ($generated@@125 ($generated@@29 $generated@@126 $generated@@127)) $generated@@127))
 :pattern ( ($generated@@29 $generated@@126 $generated@@127))
)))
(assert  (=> (< 0 $generated@@128) ($generated@@27 $generated@@28 $generated@@129 ($generated@@30 $generated))))
(assert (= $generated@@129 ($generated@@24 $generated@@28 ($generated@@29 ($generated@@29 ($generated@@29 ($generated@@29 ($generated@@29 $generated@@21 ($generated@@41 $generated@@51 ($generated@@62 97))) ($generated@@41 $generated@@51 ($generated@@62 98))) ($generated@@41 $generated@@51 ($generated@@62 99))) ($generated@@41 $generated@@51 ($generated@@62 100))) ($generated@@41 $generated@@51 ($generated@@62 101))))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> ($generated@@31 $generated@@130 ($generated@@30 $generated@@131)) (and (= ($generated@@41 $generated@@28 ($generated@@40 $generated@@28 $generated@@130)) $generated@@130) ($generated@@27 $generated@@28 ($generated@@40 $generated@@28 $generated@@130) ($generated@@30 $generated@@131))))
 :pattern ( ($generated@@31 $generated@@130 ($generated@@30 $generated@@131)))
)))
(assert (forall (($generated@@132 T@U) ) (!  (and (= ($generated@@62 ($generated@@63 $generated@@132)) $generated@@132) (or (and (<= 0 ($generated@@63 $generated@@132)) (< ($generated@@63 $generated@@132) 55296)) (and (<= 57344 ($generated@@63 $generated@@132)) (< ($generated@@63 $generated@@132) 1114112))))
 :pattern ( ($generated@@63 $generated@@132))
)))
(assert (forall (($generated@@133 Int) ) (! (= ($generated@@41 $generated@@5 ($generated@@9 ($generated@@22 $generated@@133))) ($generated@@24 $generated@@70 ($generated@@41 $generated@@5 ($generated@@9 $generated@@133))))
 :pattern ( ($generated@@41 $generated@@5 ($generated@@9 ($generated@@22 $generated@@133))))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@T) ) (! (= ($generated@@41 $generated@@135 ($generated@@24 $generated@@135 $generated@@134)) ($generated@@24 $generated@@70 ($generated@@41 $generated@@135 $generated@@134)))
 :pattern ( ($generated@@41 $generated@@135 ($generated@@24 $generated@@135 $generated@@134)))
)))
(assert (forall (($generated@@136 T@U) ) (!  (=> (= ($generated@@20 $generated@@136) 0) (= $generated@@136 $generated@@21))
 :pattern ( ($generated@@20 $generated@@136))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@137 ($generated@@30 $generated@@138)) (forall (($generated@@139 Int) ) (!  (=> (and (<= 0 $generated@@139) (< $generated@@139 ($generated@@20 $generated@@137))) ($generated@@31 ($generated@@36 $generated@@137 $generated@@139) $generated@@138))
 :pattern ( ($generated@@36 $generated@@137 $generated@@139))
)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@137 ($generated@@30 $generated@@138)))
)))
(assert (forall (($generated@@140 T@U) ) (! ($generated@@27 $generated@@51 $generated@@140 $generated)
 :pattern ( ($generated@@27 $generated@@51 $generated@@140 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@146 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@147 true))
(let (($generated@@148  (=> (and ($generated@@35 $generated@@129 $generated@@129) (= (ControlFlow 0 7) 4)) $generated@@147)))
(let (($generated@@149  (=> (and (not ($generated@@35 $generated@@129 $generated@@129)) (= (ControlFlow 0 6) 4)) $generated@@147)))
(let (($generated@@150  (=> (<= ($generated@@22 0) $generated@@141) (and (=> (= (ControlFlow 0 8) 6) $generated@@149) (=> (= (ControlFlow 0 8) 7) $generated@@148)))))
(let (($generated@@151  (=> (and (< $generated@@141 ($generated@@22 0)) (= (ControlFlow 0 5) 4)) $generated@@147)))
(let (($generated@@152  (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@22 0) ($generated@@22 0))) (=> (= (ControlFlow 0 2) (- 0 1)) (< 0 (ite  (not ($generated@@35 $generated@@129 $generated@@129)) 30 40))))))
(let (($generated@@153  (=> (= $generated@@142 ($generated@@68 $generated@@143 $generated@@144 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 9) 2) $generated@@152) (=> (= (ControlFlow 0 9) 8) $generated@@150)) (=> (= (ControlFlow 0 9) 5) $generated@@151)))))
(let (($generated@@154  (=> (and (and ($generated@@145 $generated@@144) ($generated@@146 $generated@@144)) (and (= 1 $generated@@128) (= (ControlFlow 0 10) 9))) $generated@@153)))
$generated@@154)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
