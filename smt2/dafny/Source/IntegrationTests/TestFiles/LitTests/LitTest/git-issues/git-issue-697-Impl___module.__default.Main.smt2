(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U T@U) T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@U T@U) T@U)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@56 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 () T@U)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@62 (T@U) Bool)
(declare-fun $generated@@63 (T@T T@U T@U) Bool)
(declare-fun $generated@@65 (Int) Int)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@U) T@U)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@U) T@U)
(declare-fun $generated@@84 () Int)
(declare-fun $generated@@85 (T@U) Int)
(declare-fun $generated@@86 (T@U) Bool)
(declare-fun $generated@@87 (Int Int) Int)
(declare-fun $generated@@88 (T@U) Int)
(declare-fun $generated@@89 (Int Int) Int)
(declare-fun $generated@@90 (Int Int) Int)
(declare-fun $generated@@92 (Int) T@U)
(declare-fun $generated@@96 (T@U T@U T@U) Bool)
(declare-fun $generated@@113 (T@U) T@U)
(declare-fun $generated@@122 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@123 () T@T)
(declare-fun $generated@@124 () T@T)
(declare-fun $generated@@125 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@126 (T@T T@T) T@T)
(declare-fun $generated@@127 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@T) T@T)
(declare-fun $generated@@129 (T@T) T@T)
(declare-fun $generated@@169 (T@U) Bool)
(declare-fun $generated@@178 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! ($generated@@26 ($generated@@25 $generated@@27 $generated@@28) $generated@@28)
 :pattern ( ($generated@@25 $generated@@27 $generated@@28))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> ($generated@@26 $generated@@29 $generated@@31) ($generated@@26 ($generated@@25 $generated@@29 $generated@@30) $generated@@31))
 :pattern ( ($generated@@25 $generated@@29 $generated@@30) ($generated@@26 $generated@@29 $generated@@31))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@26 ($generated@@25 $generated@@32 $generated@@33) $generated@@34)  (or (= $generated@@34 $generated@@33) ($generated@@26 $generated@@32 $generated@@34)))
 :pattern ( ($generated@@26 ($generated@@25 $generated@@32 $generated@@33) $generated@@34))
)))
(assert  (and (and (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@35 $generated@@40 $generated@@41 ($generated@@39 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@44) $generated@@42)
 :weight 0
)) (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (or (= $generated@@49 $generated@@50) (= ($generated@@35 $generated@@45 $generated@@46 ($generated@@39 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@50) ($generated@@35 $generated@@45 $generated@@46 $generated@@48 $generated@@50)))
 :weight 0
))) (= ($generated@@8 $generated@@36) 3)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@13 ($generated@@35 $generated@@36 $generated@@9 ($generated@@37 $generated@@51 $generated@@52) $generated@@53))  (and ($generated@@38 $generated@@53 $generated@@51) ($generated@@26 $generated@@52 $generated@@53)))
 :pattern ( ($generated@@35 $generated@@36 $generated@@9 ($generated@@37 $generated@@51 $generated@@52) $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (!  (not ($generated@@26 $generated@@54 $generated@@55))
 :pattern ( ($generated@@26 $generated@@54 $generated@@55))
)))
(assert (= ($generated@@8 $generated@@57) 4))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@56 $generated@@57 $generated@@60 $generated@@58 $generated@@61) ($generated@@56 $generated@@57 $generated@@60 $generated@@59 $generated@@61))
 :pattern ( ($generated@@56 $generated@@57 $generated@@60 $generated@@58 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ) (!  (=> ($generated@@63 $generated@@57 $generated@@64 $generated@@59) ($generated@@62 $generated@@64))
 :pattern ( ($generated@@62 $generated@@64) ($generated@@63 $generated@@57 $generated@@64 $generated@@59))
)))
(assert (forall (($generated@@66 Int) ) (! (= ($generated@@65 $generated@@66) $generated@@66)
 :pattern ( ($generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@67 $generated@@69 $generated@@68) $generated@@68)
 :pattern ( ($generated@@67 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@62 $generated@@71) (= ($generated@@70 $generated@@71) $generated@@5))
 :pattern ( ($generated@@62 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 ($generated@@72 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@72 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@26 ($generated@@76 $generated@@77) $generated@@78) ($generated@@13 ($generated@@35 $generated@@36 $generated@@9 $generated@@77 $generated@@78)))
 :pattern ( ($generated@@26 ($generated@@76 $generated@@77) $generated@@78))
)))
(assert (= ($generated@@8 $generated@@79) 5))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@63 $generated@@79 $generated@@81 ($generated@@80 $generated@@82)) (forall (($generated@@83 T@U) ) (!  (=> ($generated@@26 $generated@@81 $generated@@83) ($generated@@38 $generated@@83 $generated@@82))
 :pattern ( ($generated@@26 $generated@@81 $generated@@83))
)))
 :pattern ( ($generated@@63 $generated@@79 $generated@@81 ($generated@@80 $generated@@82)))
)))
(assert  (=> (<= 2 $generated@@84) (forall (($generated@@91 T@U) ) (!  (=> (or ($generated@@86 ($generated@@67 $generated@@57 $generated@@91)) (and (< 2 $generated@@84) ($generated@@63 $generated@@57 $generated@@91 $generated@@58))) (and (and ($generated@@62 ($generated@@67 $generated@@57 $generated@@91)) (=> (or (not (= ($generated@@65 ($generated@@87 ($generated@@88 ($generated@@67 $generated@@57 $generated@@91)) ($generated@@65 2))) ($generated@@65 1))) (not true)) ($generated@@62 ($generated@@67 $generated@@57 $generated@@91)))) (= ($generated@@85 ($generated@@67 $generated@@57 $generated@@91)) (ite (= ($generated@@65 ($generated@@87 ($generated@@88 ($generated@@67 $generated@@57 $generated@@91)) ($generated@@65 2))) ($generated@@65 1)) ($generated@@89 1 ($generated@@65 0)) ($generated@@90 ($generated@@65 ($generated@@88 ($generated@@67 $generated@@57 $generated@@91))) ($generated@@65 2))))))
 :weight 3
 :pattern ( ($generated@@85 ($generated@@67 $generated@@57 $generated@@91)))
))))
(assert (forall (($generated@@93 T@U) ) (!  (=> ($generated@@62 $generated@@93) (exists (($generated@@94 Int) ) (= $generated@@93 ($generated@@92 $generated@@94))))
 :pattern ( ($generated@@62 $generated@@93))
)))
(assert  (=> (<= 2 $generated@@84) (forall (($generated@@95 T@U) ) (!  (=> (or ($generated@@86 $generated@@95) (and (< 2 $generated@@84) ($generated@@63 $generated@@57 $generated@@95 $generated@@58))) (and (and ($generated@@62 $generated@@95) (=> (or (not (= ($generated@@87 ($generated@@88 $generated@@95) ($generated@@65 2)) ($generated@@65 1))) (not true)) ($generated@@62 $generated@@95))) (= ($generated@@85 $generated@@95) (ite (= ($generated@@87 ($generated@@88 $generated@@95) ($generated@@65 2)) ($generated@@65 1)) ($generated@@89 1 ($generated@@65 0)) ($generated@@90 ($generated@@88 $generated@@95) ($generated@@65 2))))))
 :pattern ( ($generated@@85 $generated@@95))
))))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@T) ) (! (= ($generated@@96 ($generated@@73 $generated@@100 $generated@@97) $generated@@98 $generated@@99) ($generated@@56 $generated@@100 $generated@@97 $generated@@98 $generated@@99))
 :pattern ( ($generated@@96 ($generated@@73 $generated@@100 $generated@@97) $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@101 T@U) ) (!  (=> ($generated@@38 $generated@@101 $generated@@58) (and (= ($generated@@73 $generated@@57 ($generated@@72 $generated@@57 $generated@@101)) $generated@@101) ($generated@@63 $generated@@57 ($generated@@72 $generated@@57 $generated@@101) $generated@@58)))
 :pattern ( ($generated@@38 $generated@@101 $generated@@58))
)))
(assert (forall (($generated@@102 T@U) ) (!  (=> ($generated@@38 $generated@@102 $generated@@59) (and (= ($generated@@73 $generated@@57 ($generated@@72 $generated@@57 $generated@@102)) $generated@@102) ($generated@@63 $generated@@57 ($generated@@72 $generated@@57 $generated@@102) $generated@@59)))
 :pattern ( ($generated@@38 $generated@@102 $generated@@59))
)))
(assert (forall (($generated@@103 Int) ($generated@@104 Int) ) (! (= ($generated@@89 $generated@@103 $generated@@104) (div $generated@@103 $generated@@104))
 :pattern ( ($generated@@89 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ) (!  (=> ($generated@@38 $generated@@105 $generated) (and (= ($generated@@73 $generated@@10 ($generated@@72 $generated@@10 $generated@@105)) $generated@@105) ($generated@@63 $generated@@10 ($generated@@72 $generated@@10 $generated@@105) $generated)))
 :pattern ( ($generated@@38 $generated@@105 $generated))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@T) ) (! (= ($generated@@38 ($generated@@73 $generated@@108 $generated@@106) $generated@@107) ($generated@@63 $generated@@108 $generated@@106 $generated@@107))
 :pattern ( ($generated@@38 ($generated@@73 $generated@@108 $generated@@106) $generated@@107))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@56 $generated@@79 $generated@@109 ($generated@@80 $generated@@110) $generated@@111) (forall (($generated@@112 T@U) ) (!  (=> ($generated@@26 $generated@@109 $generated@@112) ($generated@@96 $generated@@112 $generated@@110 $generated@@111))
 :pattern ( ($generated@@26 $generated@@109 $generated@@112))
)))
 :pattern ( ($generated@@56 $generated@@79 $generated@@109 ($generated@@80 $generated@@110) $generated@@111))
)))
(assert (forall (($generated@@114 T@U) ) (! (= ($generated@@113 ($generated@@80 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@80 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ) (! (= ($generated@@24 ($generated@@80 $generated@@115)) $generated@@1)
 :pattern ( ($generated@@80 $generated@@115))
)))
(assert (forall (($generated@@116 Int) ) (! (= ($generated@@70 ($generated@@92 $generated@@116)) $generated@@5)
 :pattern ( ($generated@@92 $generated@@116))
)))
(assert (forall (($generated@@117 Int) ) (! (= ($generated@@88 ($generated@@92 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@92 $generated@@117))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@T) ) (! (= ($generated@@72 $generated@@119 ($generated@@73 $generated@@119 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@73 $generated@@119 $generated@@118))
)))
(assert (forall (($generated@@120 T@U) ) (! (= ($generated@@63 $generated@@57 $generated@@120 $generated@@58)  (and ($generated@@63 $generated@@57 $generated@@120 $generated@@59) (= ($generated@@87 ($generated@@88 $generated@@120) ($generated@@65 2)) ($generated@@65 0))))
 :pattern ( ($generated@@63 $generated@@57 $generated@@120 $generated@@58))
)))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@63 $generated@@57 ($generated@@92 $generated@@121) $generated@@59) ($generated@@63 $generated@@10 ($generated@@14 $generated@@121) $generated))
 :pattern ( ($generated@@63 $generated@@57 ($generated@@92 $generated@@121) $generated@@59))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (! (= ($generated@@122 $generated@@130 $generated@@131 $generated@@132 ($generated@@127 $generated@@130 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@135 $generated@@136) $generated@@133)
 :weight 0
)) (and (forall (($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@T) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@122 $generated@@137 $generated@@138 $generated@@139 ($generated@@127 $generated@@137 $generated@@138 $generated@@139 $generated@@141 $generated@@142 $generated@@143 $generated@@140) $generated@@144 $generated@@145) ($generated@@122 $generated@@137 $generated@@138 $generated@@139 $generated@@141 $generated@@144 $generated@@145)))
 :weight 0
)) (forall (($generated@@146 T@T) ($generated@@147 T@T) ($generated@@148 T@T) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ) (!  (or (= $generated@@152 $generated@@154) (= ($generated@@122 $generated@@146 $generated@@147 $generated@@148 ($generated@@127 $generated@@146 $generated@@147 $generated@@148 $generated@@150 $generated@@151 $generated@@152 $generated@@149) $generated@@153 $generated@@154) ($generated@@122 $generated@@146 $generated@@147 $generated@@148 $generated@@150 $generated@@153 $generated@@154)))
 :weight 0
)))) (= ($generated@@8 $generated@@123) 6)) (= ($generated@@8 $generated@@124) 7)) (forall (($generated@@155 T@T) ($generated@@156 T@T) ) (= ($generated@@8 ($generated@@126 $generated@@155 $generated@@156)) 8))) (forall (($generated@@157 T@T) ($generated@@158 T@T) ) (! (= ($generated@@128 ($generated@@126 $generated@@157 $generated@@158)) $generated@@157)
 :pattern ( ($generated@@126 $generated@@157 $generated@@158))
))) (forall (($generated@@159 T@T) ($generated@@160 T@T) ) (! (= ($generated@@129 ($generated@@126 $generated@@159 $generated@@160)) $generated@@160)
 :pattern ( ($generated@@126 $generated@@159 $generated@@160))
))))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 Bool) ($generated@@165 T@U) ($generated@@166 T@U) ) (! (= ($generated@@13 ($generated@@122 $generated@@123 $generated@@124 $generated@@9 ($generated@@125 $generated@@161 $generated@@162 $generated@@163 $generated@@164) $generated@@165 $generated@@166))  (=> (and (or (not (= $generated@@165 $generated@@161)) (not true)) ($generated@@13 ($generated@@72 $generated@@9 ($generated@@35 $generated@@124 $generated@@36 ($generated@@35 $generated@@123 ($generated@@126 $generated@@124 $generated@@36) $generated@@162 $generated@@165) $generated@@163)))) $generated@@164))
 :pattern ( ($generated@@122 $generated@@123 $generated@@124 $generated@@9 ($generated@@125 $generated@@161 $generated@@162 $generated@@163 $generated@@164) $generated@@165 $generated@@166))
)))
(assert (forall (($generated@@167 Int) ($generated@@168 Int) ) (! (= ($generated@@87 $generated@@167 $generated@@168) (mod $generated@@167 $generated@@168))
 :pattern ( ($generated@@87 $generated@@167 $generated@@168))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (!  (=> (and ($generated@@169 $generated@@171) (and ($generated@@62 $generated@@170) ($generated@@56 $generated@@57 $generated@@170 $generated@@59 $generated@@171))) ($generated@@56 $generated@@10 ($generated@@14 ($generated@@88 $generated@@170)) $generated $generated@@171))
 :pattern ( ($generated@@56 $generated@@10 ($generated@@14 ($generated@@88 $generated@@170)) $generated $generated@@171))
)))
(assert (forall (($generated@@172 Int) ($generated@@173 Int) ) (! (= ($generated@@90 $generated@@172 $generated@@173) (* $generated@@172 $generated@@173))
 :pattern ( ($generated@@90 $generated@@172 $generated@@173))
)))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@U) ) (!  (=> ($generated@@38 $generated@@174 ($generated@@80 $generated@@175)) (and (= ($generated@@73 $generated@@79 ($generated@@72 $generated@@79 $generated@@174)) $generated@@174) ($generated@@63 $generated@@79 ($generated@@72 $generated@@79 $generated@@174) ($generated@@80 $generated@@175))))
 :pattern ( ($generated@@38 $generated@@174 ($generated@@80 $generated@@175)))
)))
(assert (forall (($generated@@176 T@U) ($generated@@177 T@U) ) (!  (=> (and ($generated@@169 $generated@@177) ($generated@@63 $generated@@57 $generated@@176 $generated@@59)) ($generated@@56 $generated@@57 $generated@@176 $generated@@59 $generated@@177))
 :pattern ( ($generated@@56 $generated@@57 $generated@@176 $generated@@59 $generated@@177))
)))
(assert (= ($generated@@24 $generated@@58) $generated@@3))
(assert (= ($generated@@178 $generated@@58) $generated@@6))
(assert (= ($generated@@24 $generated@@59) $generated@@4))
(assert (= ($generated@@178 $generated@@59) $generated@@7))
(assert (forall (($generated@@179 Int) ) (! (= ($generated@@73 $generated@@10 ($generated@@14 ($generated@@65 $generated@@179))) ($generated@@67 $generated@@36 ($generated@@73 $generated@@10 ($generated@@14 $generated@@179))))
 :pattern ( ($generated@@73 $generated@@10 ($generated@@14 ($generated@@65 $generated@@179))))
)))
(assert (forall (($generated@@180 Int) ) (! (= ($generated@@92 ($generated@@65 $generated@@180)) ($generated@@67 $generated@@57 ($generated@@92 $generated@@180)))
 :pattern ( ($generated@@92 ($generated@@65 $generated@@180)))
)))
(assert (forall (($generated@@181 T@U) ($generated@@182 T@T) ) (! (= ($generated@@73 $generated@@182 ($generated@@67 $generated@@182 $generated@@181)) ($generated@@67 $generated@@36 ($generated@@73 $generated@@182 $generated@@181)))
 :pattern ( ($generated@@73 $generated@@182 ($generated@@67 $generated@@182 $generated@@181)))
)))
(assert (forall (($generated@@183 T@U) ($generated@@184 T@U) ) (! ($generated@@56 $generated@@10 $generated@@184 $generated $generated@@183)
 :pattern ( ($generated@@56 $generated@@10 $generated@@184 $generated $generated@@183))
)))
(assert (forall (($generated@@185 T@U) ) (! ($generated@@63 $generated@@10 $generated@@185 $generated)
 :pattern ( ($generated@@63 $generated@@10 $generated@@185 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () Bool)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 () T@U)
(declare-fun $generated@@190 () T@U)
(declare-fun $generated@@191 () T@U)
(declare-fun $generated@@192 () T@U)
(declare-fun $generated@@193 () T@U)
(declare-fun $generated@@194 (T@U) Bool)
(declare-fun $generated@@195 () T@U)
(declare-fun $generated@@196 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@197  (=> (forall (($generated@@198 T@U) ) (!  (=> ($generated@@63 $generated@@57 $generated@@198 $generated@@58) (=> ($generated@@26 $generated@@186 ($generated@@73 $generated@@57 $generated@@198)) ($generated@@86 $generated@@198)))
 :pattern ( ($generated@@85 $generated@@198))
 :pattern ( ($generated@@26 $generated@@186 ($generated@@73 $generated@@57 $generated@@198)))
)) (=> (and (= $generated@@187 (forall (($generated@@199 T@U) ) (!  (=> ($generated@@63 $generated@@57 $generated@@199 $generated@@58) (=> ($generated@@26 $generated@@186 ($generated@@73 $generated@@57 $generated@@199)) (> ($generated@@85 $generated@@199) 0)))
 :pattern ( ($generated@@85 $generated@@199))
 :pattern ( ($generated@@26 $generated@@186 ($generated@@73 $generated@@57 $generated@@199)))
))) (= (ControlFlow 0 2) (- 0 1))) $generated@@187))))
(let (($generated@@200  (=> (and (not ($generated@@26 $generated@@186 ($generated@@73 $generated@@57 $generated@@188))) (= (ControlFlow 0 5) 2)) $generated@@197)))
(let (($generated@@201  (=> (and (and ($generated@@26 $generated@@186 ($generated@@73 $generated@@57 $generated@@188)) ($generated@@56 $generated@@57 $generated@@188 $generated@@58 $generated@@189)) (and ($generated@@86 $generated@@188) (= (ControlFlow 0 4) 2))) $generated@@197)))
(let (($generated@@202  (=> (and ($generated@@63 $generated@@57 $generated@@188 $generated@@58) ($generated@@56 $generated@@57 $generated@@188 $generated@@58 $generated@@189)) (and (=> (= (ControlFlow 0 6) 4) $generated@@201) (=> (= (ControlFlow 0 6) 5) $generated@@200)))))
(let (($generated@@203  (=> (and (not (and ($generated@@63 $generated@@57 $generated@@188 $generated@@58) ($generated@@56 $generated@@57 $generated@@188 $generated@@58 $generated@@189))) (= (ControlFlow 0 3) 2)) $generated@@197)))
(let (($generated@@204  (=> (= $generated@@186 ($generated@@76 ($generated@@37 $generated@@58 $generated@@190))) (and (=> (= (ControlFlow 0 7) 6) $generated@@202) (=> (= (ControlFlow 0 7) 3) $generated@@203)))))
(let (($generated@@205  (=> (and (not ($generated@@26 $generated@@190 ($generated@@73 $generated@@57 $generated@@191))) (= (ControlFlow 0 10) 7)) $generated@@204)))
(let (($generated@@206  (=> (and ($generated@@26 $generated@@190 ($generated@@73 $generated@@57 $generated@@191)) (= (ControlFlow 0 9) 7)) $generated@@204)))
(let (($generated@@207  (=> (and ($generated@@63 $generated@@57 $generated@@191 $generated@@58) ($generated@@56 $generated@@57 $generated@@191 $generated@@58 $generated@@189)) (and (=> (= (ControlFlow 0 11) 9) $generated@@206) (=> (= (ControlFlow 0 11) 10) $generated@@205)))))
(let (($generated@@208  (=> (and (not (and ($generated@@63 $generated@@57 $generated@@191 $generated@@58) ($generated@@56 $generated@@57 $generated@@191 $generated@@58 $generated@@189))) (= (ControlFlow 0 8) 7)) $generated@@204)))
(let (($generated@@209  (=> (and (= $generated@@192 ($generated@@125 $generated@@193 $generated@@189 $generated@@2 false)) (= $generated@@190 ($generated@@67 $generated@@79 ($generated@@25 ($generated@@25 ($generated@@25 ($generated@@25 $generated@@54 ($generated@@73 $generated@@57 ($generated@@67 $generated@@57 ($generated@@92 ($generated@@65 1))))) ($generated@@73 $generated@@57 ($generated@@67 $generated@@57 ($generated@@92 ($generated@@65 2))))) ($generated@@73 $generated@@57 ($generated@@67 $generated@@57 ($generated@@92 ($generated@@65 3))))) ($generated@@73 $generated@@57 ($generated@@67 $generated@@57 ($generated@@92 ($generated@@65 4)))))))) (and (=> (= (ControlFlow 0 12) 11) $generated@@207) (=> (= (ControlFlow 0 12) 8) $generated@@208)))))
(let (($generated@@210  (=> (and ($generated@@169 $generated@@189) ($generated@@194 $generated@@189)) (=> (and (and ($generated@@63 $generated@@79 $generated@@195 ($generated@@80 $generated@@59)) ($generated@@56 $generated@@79 $generated@@195 ($generated@@80 $generated@@59) $generated@@189)) true) (=> (and (and (and ($generated@@63 $generated@@79 $generated@@196 ($generated@@80 $generated@@58)) ($generated@@56 $generated@@79 $generated@@196 ($generated@@80 $generated@@58) $generated@@189)) true) (and (= 3 $generated@@84) (= (ControlFlow 0 13) 12))) $generated@@209)))))
$generated@@210)))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
