(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._module.D () T@U)
(declare-fun class._module.D? () T@U)
(declare-fun Tagclass._module.D? () T@U)
(declare-fun tytagFamily$D () T@U)
(declare-fun field$data () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.D? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.D () T@U)
(declare-fun _module.D.data () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun _module.__default.CalcStmtExprFunction (T@U T@U T@U Int) Int)
(declare-fun |_module.__default.CalcStmtExprFunction#canCall| (T@U T@U T@U Int) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#3| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc allocName Tagclass._module.D class._module.D? Tagclass._module.D? tytagFamily$D field$data)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.D?)  (or (= $o null) (= (dtype $o) Tclass._module.D?)))
 :pattern ( ($Is refType $o Tclass._module.D?))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.D $h) ($IsAlloc refType |c#0| Tclass._module.D? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.D $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.D? $h))
)))
(assert (= (FDim _module.D.data) 0))
(assert (= (FieldOfDecl class._module.D? field$data) _module.D.data))
(assert  (not ($IsGhostField _module.D.data)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.D? $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.D? $h@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert ($IsGhostField alloc))
(assert (forall (($h@@1 T@U) ($o@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) Tclass._module.D?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.D.data)) TInt $h@@1))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.D.data)))
)))
(assert (forall (($prevHeap T@U) ($h0 T@U) ($h1 T@U) (|d#0| T@U) (|selector#0| Int) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|_module.__default.CalcStmtExprFunction#canCall| $prevHeap $h0 |d#0| |selector#0|) ($Is refType |d#0| Tclass._module.D))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@2 T@U) ($f T@U) )  (=> (and (or (not (= $o@@2 null)) (not true)) (= $o@@2 |d#0|)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@2) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@2) $f)))) (= (_module.__default.CalcStmtExprFunction $prevHeap $h0 |d#0| |selector#0|) (_module.__default.CalcStmtExprFunction $prevHeap $h1 |d#0| |selector#0|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.__default.CalcStmtExprFunction $prevHeap $h1 |d#0| |selector#0|))
)))
(assert (forall ((h@@0 T@U) (k@@0 T@U) (v T@U) (t T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@0 k@@0) (=> ($IsAlloc T@@1 v t h@@0) ($IsAlloc T@@1 v t k@@0)))
 :pattern ( ($HeapSucc h@@0 k@@0) ($IsAlloc T@@1 v t h@@0))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@3 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f@@0))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) (= $o@@3 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#3| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f@@0))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.D)  (and ($Is refType |c#0@@0| Tclass._module.D?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.D))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.D?))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall (($h@@2 T@U) ($o@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass._module.D?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) _module.D.data)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) _module.D.data)))
)))
(assert (= (Tag Tclass._module.D) Tagclass._module.D))
(assert (= (TagFamily Tclass._module.D) tytagFamily$D))
(assert (= (Tag Tclass._module.D?) Tagclass._module.D?))
(assert (= (TagFamily Tclass._module.D?) tytagFamily$D))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(assert (forall ((h@@1 T@U) (v@@0 T@U) ) (! ($IsAlloc intType v@@0 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@0 TInt h@@1))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($prevHeap@@0 T@U) ($Heap T@U) (|d#0@@0| T@U) (|selector#0@@0| Int) ) (!  (=> (or (|_module.__default.CalcStmtExprFunction#canCall| $prevHeap@@0 $Heap |d#0@@0| |selector#0@@0|) (and (< 1 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $prevHeap@@0) ($IsGoodHeap $Heap)) ($HeapSucc $prevHeap@@0 $Heap)) ($Is refType |d#0@@0| Tclass._module.D)) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $prevHeap@@0 |d#0@@0|) _module.D.data))) (LitInt 3)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |d#0@@0|) _module.D.data))) (LitInt 100)))))) (= (_module.__default.CalcStmtExprFunction $prevHeap@@0 $Heap |d#0@@0| |selector#0@@0|) (ite (= |selector#0@@0| (LitInt 0)) 10 (ite (= |selector#0@@0| (LitInt 1)) 10 (ite (= |selector#0@@0| (LitInt 2)) 10 (ite (= |selector#0@@0| (LitInt 3)) 10 (ite (= |selector#0@@0| (LitInt 4)) 10 10)))))))
 :pattern ( (_module.__default.CalcStmtExprFunction $prevHeap@@0 $Heap |d#0@@0| |selector#0@@0|) ($IsGoodHeap $Heap))
))))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |d#0@@1| () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun |selector#0@@1| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |y##3_0_0@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |y##4_0_0@0| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun current$Heap () T@U)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun previous$Heap () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 47) (let ((anon31_Else_correct true))
(let ((anon31_Then_correct  (and (=> (= (ControlFlow 0 34) (- 0 38)) (or (not (= |d#0@@1| null)) (not true))) (and (=> (= (ControlFlow 0 34) (- 0 37)) ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0)) (=> ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0) (and (=> (= (ControlFlow 0 34) (- 0 36)) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 |d#0@@1| _module.D.data))) (and (=> (= (ControlFlow 0 34) (- 0 35)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |d#0@@1|) _module.D.data))) (LitInt 3))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |d#0@@1|) _module.D.data))) (LitInt 3)) (=> (= (ControlFlow 0 34) (- 0 33)) (= (LitInt 2) (LitInt 2)))))))))))
(let ((anon30_Then_correct true))
(let ((anon29_Then_correct  (=> (and (= |selector#0@@1| (LitInt 1)) (= $Heap@1 $Heap@@0)) (and (and (=> (= (ControlFlow 0 40) 32) anon30_Then_correct) (=> (= (ControlFlow 0 40) 34) anon31_Then_correct)) (=> (= (ControlFlow 0 40) 39) anon31_Else_correct)))))
(let ((anon34_Else_correct true))
(let ((anon34_Then_correct  (and (=> (= (ControlFlow 0 24) (- 0 28)) (or (not (= |d#0@@1| null)) (not true))) (and (=> (= (ControlFlow 0 24) (- 0 27)) ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0)) (=> ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0) (and (=> (= (ControlFlow 0 24) (- 0 26)) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 |d#0@@1| _module.D.data))) (and (=> (= (ControlFlow 0 24) (- 0 25)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |d#0@@1|) _module.D.data))) (LitInt 100))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |d#0@@1|) _module.D.data))) (LitInt 100)) (=> (= (ControlFlow 0 24) (- 0 23)) (= (LitInt 2) (LitInt 2)))))))))))
(let ((anon33_Then_correct true))
(let ((anon32_Then_correct  (=> (and (= |selector#0@@1| (LitInt 2)) (= $Heap@2 $Heap@@0)) (and (and (=> (= (ControlFlow 0 30) 22) anon33_Then_correct) (=> (= (ControlFlow 0 30) 24) anon34_Then_correct)) (=> (= (ControlFlow 0 30) 29) anon34_Else_correct)))))
(let ((anon37_Else_correct true))
(let ((anon37_Then_correct  (and (=> (= (ControlFlow 0 15) (- 0 18)) (or (not (= |d#0@@1| null)) (not true))) (=> (or (not (= |d#0@@1| null)) (not true)) (=> (= |y##3_0_0@0| (LitInt 3)) (and (=> (= (ControlFlow 0 15) (- 0 17)) ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0)) (=> ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0) (and (=> (= (ControlFlow 0 15) (- 0 16)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |d#0@@1|) _module.D.data))) |y##3_0_0@0|)) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |d#0@@1|) _module.D.data))) |y##3_0_0@0|) (=> (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (= $Heap@3 $Heap@6) (= (ControlFlow 0 15) (- 0 14)))) (= (LitInt 2) (LitInt 2))))))))))))
(let ((anon36_Then_correct true))
(let ((anon35_Then_correct  (=> (and (= |selector#0@@1| (LitInt 3)) (= $Heap@3 $Heap@@0)) (and (and (=> (= (ControlFlow 0 20) 13) anon36_Then_correct) (=> (= (ControlFlow 0 20) 15) anon37_Then_correct)) (=> (= (ControlFlow 0 20) 19) anon37_Else_correct)))))
(let ((anon40_Else_correct true))
(let ((anon40_Then_correct  (and (=> (= (ControlFlow 0 6) (- 0 9)) (or (not (= |d#0@@1| null)) (not true))) (=> (or (not (= |d#0@@1| null)) (not true)) (=> (= |y##4_0_0@0| (LitInt 100)) (and (=> (= (ControlFlow 0 6) (- 0 8)) ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0)) (=> ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0) (and (=> (= (ControlFlow 0 6) (- 0 7)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |d#0@@1|) _module.D.data))) |y##4_0_0@0|)) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 |d#0@@1|) _module.D.data))) |y##4_0_0@0|) (=> (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (and (= $Heap@4 $Heap@5) (= (ControlFlow 0 6) (- 0 5)))) (= (LitInt 2) (LitInt 2))))))))))))
(let ((anon39_Then_correct true))
(let ((anon38_Then_correct  (=> (and (= |selector#0@@1| (LitInt 4)) (= $Heap@4 $Heap@@0)) (and (and (=> (= (ControlFlow 0 11) 4) anon39_Then_correct) (=> (= (ControlFlow 0 11) 6) anon40_Then_correct)) (=> (= (ControlFlow 0 11) 10) anon40_Else_correct)))))
(let ((anon38_Else_correct true))
(let ((anon35_Else_correct  (=> (or (not (= |selector#0@@1| (LitInt 3))) (not true)) (and (=> (= (ControlFlow 0 12) 11) anon38_Then_correct) (=> (= (ControlFlow 0 12) 3) anon38_Else_correct)))))
(let ((anon32_Else_correct  (=> (or (not (= |selector#0@@1| (LitInt 2))) (not true)) (and (=> (= (ControlFlow 0 21) 20) anon35_Then_correct) (=> (= (ControlFlow 0 21) 12) anon35_Else_correct)))))
(let ((anon29_Else_correct  (=> (or (not (= |selector#0@@1| (LitInt 1))) (not true)) (and (=> (= (ControlFlow 0 31) 30) anon32_Then_correct) (=> (= (ControlFlow 0 31) 21) anon32_Else_correct)))))
(let ((anon28_Else_correct  (=> (or (not (= |selector#0@@1| (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 41) 40) anon29_Then_correct) (=> (= (ControlFlow 0 41) 31) anon29_Else_correct)))))
(let ((anon28_Then_correct true))
(let ((anon27_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#3| null current$Heap alloc |d#0@@1|)) (and (=> (= (ControlFlow 0 42) (- 0 46)) (or (not (= |d#0@@1| null)) (not true))) (=> (or (not (= |d#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 42) (- 0 45)) ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0)) (=> ($IsAlloc refType |d#0@@1| Tclass._module.D $Heap@@0) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |d#0@@1|) _module.D.data))) (LitInt 3)) (and (=> (= (ControlFlow 0 42) (- 0 44)) (or (not (= |d#0@@1| null)) (not true))) (=> (or (not (= |d#0@@1| null)) (not true)) (=> (and (= |b$reqreads#0@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 |d#0@@1| _module.D.data))) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) current$Heap |d#0@@1|) _module.D.data))) (LitInt 100))) (and (=> (= (ControlFlow 0 42) (- 0 43)) |b$reqreads#0@0|) (=> |b$reqreads#0@0| (and (and (=> (= (ControlFlow 0 42) 1) anon27_Then_correct) (=> (= (ControlFlow 0 42) 2) anon28_Then_correct)) (=> (= (ControlFlow 0 42) 41) anon28_Else_correct)))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and (and ($Is refType |d#0@@1| Tclass._module.D) ($IsAlloc refType |d#0@@1| Tclass._module.D previous$Heap)) (= 1 $FunctionContextHeight)) (and (and (= previous$Heap $Heap@@0) (and ($HeapSucc previous$Heap current$Heap) ($IsGoodHeap current$Heap))) (= (ControlFlow 0 47) 42))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 24) (- 25))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 7))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
