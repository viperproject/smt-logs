(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 (T@U Int T@U) Bool)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@45 (Int T@U) Bool)
(declare-fun $generated@@46 (T@U) T@U)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@58 (T@U Int T@U) Bool)
(declare-fun $generated@@68 (T@U) Bool)
(declare-fun $generated@@71 (Int T@U) Bool)
(declare-fun $generated@@72 (Int T@U) Bool)
(declare-fun $generated@@73 () T@U)
(declare-fun $generated@@82 (Int T@U) Bool)
(declare-fun $generated@@88 (T@U) Int)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 () T@T)
(declare-fun $generated@@93 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@94 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 (T@T T@T) T@T)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@T) T@T)
(declare-fun $generated@@100 (T@T) T@T)
(declare-fun $generated@@149 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@150 (T@U) Bool)
(declare-fun $generated@@153 (T@U) T@U)
(declare-fun $generated@@154 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@2))
(assert (= ($generated@@4 $generated@@23) 3))
(assert ($generated@@22 $generated@@23 $generated@@21 $generated@@24))
(assert (forall (($generated@@26 Int) ) (! (= ($generated@@25 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert  (=> (<= 2 $generated@@30) (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 Int) ) (!  (=> (and ($generated@@22 $generated@@23 $generated@@33 $generated@@24) (= $generated@@34 0)) ($generated@@31 $generated@@32 $generated@@34 $generated@@33))
 :pattern ( ($generated@@31 $generated@@32 $generated@@34 $generated@@33))
))))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@35 $generated@@36) (= ($generated@@20 $generated@@36) $generated@@1))
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ) (! (= ($generated@@37 $generated@@38) (= ($generated@@20 $generated@@38) $generated@@2))
 :pattern ( ($generated@@37 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@39 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@39 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (!  (=> ($generated@@37 $generated@@43) (= $generated@@43 $generated@@21))
 :pattern ( ($generated@@37 $generated@@43))
)))
(assert  (=> (<= 2 $generated@@30) (forall (($generated@@47 T@U) ($generated@@48 Int) ($generated@@49 T@U) ) (!  (=> (or ($generated@@45 ($generated@@25 $generated@@48) $generated@@49) (and (< 2 $generated@@30) (and (<= ($generated@@25 0) $generated@@48) ($generated@@22 $generated@@23 $generated@@49 $generated@@24)))) (and (=> (< 0 $generated@@48) (=> ($generated@@35 $generated@@49) (let (($generated@@50 ($generated@@46 $generated@@49)))
($generated@@45 (- $generated@@48 1) $generated@@50)))) (= ($generated@@31 ($generated@@44 $generated@@47) ($generated@@25 $generated@@48) $generated@@49)  (=> (< 0 $generated@@48) (ite ($generated@@35 $generated@@49) (let (($generated@@51 ($generated@@46 $generated@@49)))
($generated@@31 ($generated@@44 $generated@@47) (- $generated@@48 1) $generated@@51)) true)))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@44 $generated@@47) ($generated@@25 $generated@@48) $generated@@49))
))))
(assert (forall (($generated@@53 T@U) ) (!  (=> ($generated@@35 $generated@@53) (exists (($generated@@54 T@U) ) (= $generated@@53 ($generated@@52 $generated@@54))))
 :pattern ( ($generated@@35 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ($generated@@57 T@U) ) (! (= ($generated@@31 ($generated@@44 $generated@@55) $generated@@56 $generated@@57) ($generated@@31 $generated@@55 $generated@@56 $generated@@57))
 :pattern ( ($generated@@31 ($generated@@44 $generated@@55) $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 Int) ($generated@@61 T@U) ) (! (= ($generated@@58 ($generated@@44 $generated@@59) $generated@@60 $generated@@61) ($generated@@58 $generated@@59 $generated@@60 $generated@@61))
 :pattern ( ($generated@@58 ($generated@@44 $generated@@59) $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@52 $generated@@62) $generated@@24) ($generated@@22 $generated@@23 $generated@@62 $generated@@24))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@52 $generated@@62) $generated@@24))
)))
(assert  (=> (<= 2 $generated@@30) (forall (($generated@@63 T@U) ($generated@@64 Int) ($generated@@65 T@U) ) (!  (=> (or ($generated@@45 $generated@@64 $generated@@65) (and (< 2 $generated@@30) (and (<= ($generated@@25 0) $generated@@64) ($generated@@22 $generated@@23 $generated@@65 $generated@@24)))) (and (=> (< 0 $generated@@64) (=> ($generated@@35 $generated@@65) (let (($generated@@66 ($generated@@46 $generated@@65)))
($generated@@45 (- $generated@@64 1) $generated@@66)))) (= ($generated@@31 ($generated@@44 $generated@@63) $generated@@64 $generated@@65)  (=> (< 0 $generated@@64) (ite ($generated@@35 $generated@@65) (let (($generated@@67 ($generated@@46 $generated@@65)))
($generated@@31 $generated@@63 (- $generated@@64 1) $generated@@67)) true)))))
 :pattern ( ($generated@@31 ($generated@@44 $generated@@63) $generated@@64 $generated@@65))
))))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@68 $generated@@69) (or ($generated@@35 $generated@@69) ($generated@@37 $generated@@69)))
 :pattern ( ($generated@@68 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@70 $generated@@24) (or ($generated@@35 $generated@@70) ($generated@@37 $generated@@70)))
 :pattern ( ($generated@@37 $generated@@70) ($generated@@22 $generated@@23 $generated@@70 $generated@@24))
 :pattern ( ($generated@@35 $generated@@70) ($generated@@22 $generated@@23 $generated@@70 $generated@@24))
)))
(assert  (=> (<= 3 $generated@@30) (forall (($generated@@74 Int) ($generated@@75 T@U) ) (!  (=> (or ($generated@@72 ($generated@@25 $generated@@74) ($generated@@27 $generated@@23 $generated@@75)) (and (< 3 $generated@@30) (and (<= ($generated@@25 0) $generated@@74) ($generated@@22 $generated@@23 $generated@@75 $generated@@24)))) (and ($generated@@45 ($generated@@25 $generated@@74) ($generated@@27 $generated@@23 $generated@@75)) (= ($generated@@71 ($generated@@25 $generated@@74) ($generated@@27 $generated@@23 $generated@@75)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@31 ($generated@@44 $generated@@73) ($generated@@25 $generated@@74) ($generated@@27 $generated@@23 $generated@@75))))))))
 :weight 3
 :pattern ( ($generated@@71 ($generated@@25 $generated@@74) ($generated@@27 $generated@@23 $generated@@75)))
))))
(assert  (=> (<= 3 $generated@@30) (forall (($generated@@76 Int) ($generated@@77 T@U) ) (!  (=> (or ($generated@@72 $generated@@76 $generated@@77) (and (< 3 $generated@@30) (and (<= ($generated@@25 0) $generated@@76) ($generated@@22 $generated@@23 $generated@@77 $generated@@24)))) (and ($generated@@45 $generated@@76 $generated@@77) (= ($generated@@71 $generated@@76 $generated@@77) ($generated@@31 ($generated@@44 $generated@@73) $generated@@76 $generated@@77))))
 :pattern ( ($generated@@71 $generated@@76 $generated@@77))
))))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@20 ($generated@@52 $generated@@78)) $generated@@1)
 :pattern ( ($generated@@52 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@46 ($generated@@52 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@52 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@39 $generated@@81 ($generated@@40 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@40 $generated@@81 $generated@@80))
)))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@83 T@U) ($generated@@84 Int) ($generated@@85 T@U) ) (!  (=> (or ($generated@@82 $generated@@84 $generated@@85) (and (< 1 $generated@@30) (and (<= ($generated@@25 0) $generated@@84) ($generated@@22 $generated@@23 $generated@@85 $generated@@24)))) (and (=> (or (not (= $generated@@84 ($generated@@25 0))) (not true)) (=> ($generated@@35 $generated@@85) (let (($generated@@86 ($generated@@46 $generated@@85)))
($generated@@82 (- $generated@@84 1) $generated@@86)))) (= ($generated@@58 ($generated@@44 $generated@@83) $generated@@84 $generated@@85) (ite (= $generated@@84 ($generated@@25 0)) true (ite ($generated@@35 $generated@@85) (let (($generated@@87 ($generated@@46 $generated@@85)))
($generated@@58 $generated@@83 (- $generated@@84 1) $generated@@87)) true)))))
 :pattern ( ($generated@@58 ($generated@@44 $generated@@83) $generated@@84 $generated@@85))
))))
(assert (forall (($generated@@89 T@U) ) (! (< ($generated@@88 $generated@@89) ($generated@@88 ($generated@@52 $generated@@89)))
 :pattern ( ($generated@@52 $generated@@89))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@90 $generated@@101 $generated@@102 $generated@@103 ($generated@@97 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@106 $generated@@107) $generated@@104)
 :weight 0
)) (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@90 $generated@@108 $generated@@109 $generated@@110 ($generated@@97 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@90 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@90 $generated@@117 $generated@@118 $generated@@119 ($generated@@97 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@90 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)))) (= ($generated@@4 $generated@@91) 4)) (= ($generated@@4 $generated@@92) 5)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@94 $generated@@126 $generated@@127 ($generated@@98 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@128) $generated@@130) $generated@@128)
 :weight 0
))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (!  (or (= $generated@@135 $generated@@136) (= ($generated@@94 $generated@@131 $generated@@132 ($generated@@98 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@133) $generated@@136) ($generated@@94 $generated@@131 $generated@@132 $generated@@134 $generated@@136)))
 :weight 0
))) (= ($generated@@4 $generated@@95) 6)) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (= ($generated@@4 ($generated@@96 $generated@@137 $generated@@138)) 7))) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (! (= ($generated@@99 ($generated@@96 $generated@@139 $generated@@140)) $generated@@139)
 :pattern ( ($generated@@96 $generated@@139 $generated@@140))
))) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (! (= ($generated@@100 ($generated@@96 $generated@@141 $generated@@142)) $generated@@142)
 :pattern ( ($generated@@96 $generated@@141 $generated@@142))
))))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 Bool) ($generated@@147 T@U) ($generated@@148 T@U) ) (! (= ($generated@@9 ($generated@@90 $generated@@91 $generated@@92 $generated@@5 ($generated@@93 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))  (=> (and (or (not (= $generated@@147 $generated@@143)) (not true)) ($generated@@9 ($generated@@39 $generated@@5 ($generated@@94 $generated@@92 $generated@@95 ($generated@@94 $generated@@91 ($generated@@96 $generated@@92 $generated@@95) $generated@@144 $generated@@147) $generated@@145)))) $generated@@146))
 :pattern ( ($generated@@90 $generated@@91 $generated@@92 $generated@@5 ($generated@@93 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (!  (=> (and ($generated@@150 $generated@@152) ($generated@@22 $generated@@23 $generated@@151 $generated@@24)) ($generated@@149 $generated@@23 $generated@@151 $generated@@24 $generated@@152))
 :pattern ( ($generated@@149 $generated@@23 $generated@@151 $generated@@24 $generated@@152))
)))
(assert (= ($generated@@153 $generated@@24) $generated@@0))
(assert (= ($generated@@154 $generated@@24) $generated@@3))
(assert (= $generated@@21 ($generated@@27 $generated@@23 $generated@@21)))
(assert  (=> (<= 2 $generated@@30) (forall (($generated@@155 T@U) ($generated@@156 Int) ($generated@@157 T@U) ) (!  (=> (or ($generated@@45 ($generated@@25 $generated@@156) ($generated@@27 $generated@@23 $generated@@157)) (and (< 2 $generated@@30) (and (<= ($generated@@25 0) $generated@@156) ($generated@@22 $generated@@23 $generated@@157 $generated@@24)))) (and (=> (< 0 $generated@@156) (=> ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@35 ($generated@@27 $generated@@23 $generated@@157))))) (let (($generated@@158 ($generated@@27 $generated@@23 ($generated@@46 ($generated@@27 $generated@@23 $generated@@157)))))
($generated@@45 (- $generated@@156 1) $generated@@158)))) (= ($generated@@31 ($generated@@44 $generated@@155) ($generated@@25 $generated@@156) ($generated@@27 $generated@@23 $generated@@157))  (=> (< 0 $generated@@156) (ite ($generated@@35 ($generated@@27 $generated@@23 $generated@@157)) (let (($generated@@159 ($generated@@27 $generated@@23 ($generated@@46 ($generated@@27 $generated@@23 $generated@@157)))))
($generated@@31 ($generated@@44 $generated@@155) (- $generated@@156 1) $generated@@159)) true)))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@44 $generated@@155) ($generated@@25 $generated@@156) ($generated@@27 $generated@@23 $generated@@157)))
))))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@U) ) (!  (=> (and ($generated@@150 $generated@@161) (and ($generated@@35 $generated@@160) ($generated@@149 $generated@@23 $generated@@160 $generated@@24 $generated@@161))) ($generated@@149 $generated@@23 ($generated@@46 $generated@@160) $generated@@24 $generated@@161))
 :pattern ( ($generated@@149 $generated@@23 ($generated@@46 $generated@@160) $generated@@24 $generated@@161))
)))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@162 T@U) ($generated@@163 Int) ($generated@@164 T@U) ) (!  (=> (or ($generated@@82 ($generated@@25 $generated@@163) ($generated@@27 $generated@@23 $generated@@164)) (and (< 1 $generated@@30) (and (<= ($generated@@25 0) $generated@@163) ($generated@@22 $generated@@23 $generated@@164 $generated@@24)))) (and (=> (or (not (= ($generated@@25 $generated@@163) ($generated@@25 0))) (not true)) (=> ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 ($generated@@35 ($generated@@27 $generated@@23 $generated@@164))))) (let (($generated@@165 ($generated@@27 $generated@@23 ($generated@@46 ($generated@@27 $generated@@23 $generated@@164)))))
($generated@@82 ($generated@@25 (- $generated@@163 1)) $generated@@165)))) (= ($generated@@58 ($generated@@44 $generated@@162) ($generated@@25 $generated@@163) ($generated@@27 $generated@@23 $generated@@164)) (ite (= ($generated@@25 $generated@@163) ($generated@@25 0)) true (ite ($generated@@35 ($generated@@27 $generated@@23 $generated@@164)) ($generated@@9 (let (($generated@@166 ($generated@@27 $generated@@23 ($generated@@46 ($generated@@27 $generated@@23 $generated@@164)))))
($generated@@27 $generated@@5 ($generated@@8 ($generated@@58 ($generated@@44 $generated@@162) ($generated@@25 (- $generated@@163 1)) $generated@@166))))) true)))))
 :weight 3
 :pattern ( ($generated@@58 ($generated@@44 $generated@@162) ($generated@@25 $generated@@163) ($generated@@27 $generated@@23 $generated@@164)))
))))
(assert (forall (($generated@@167 Int) ) (! (= ($generated@@40 $generated@@6 ($generated@@10 ($generated@@25 $generated@@167))) ($generated@@27 $generated@@95 ($generated@@40 $generated@@6 ($generated@@10 $generated@@167))))
 :pattern ( ($generated@@40 $generated@@6 ($generated@@10 ($generated@@25 $generated@@167))))
)))
(assert (forall (($generated@@168 T@U) ) (! (= ($generated@@52 ($generated@@27 $generated@@23 $generated@@168)) ($generated@@27 $generated@@23 ($generated@@52 $generated@@168)))
 :pattern ( ($generated@@52 ($generated@@27 $generated@@23 $generated@@168)))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@T) ) (! (= ($generated@@40 $generated@@170 ($generated@@27 $generated@@170 $generated@@169)) ($generated@@27 $generated@@95 ($generated@@40 $generated@@170 $generated@@169)))
 :pattern ( ($generated@@40 $generated@@170 ($generated@@27 $generated@@170 $generated@@169)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 (T@U) Bool)
(declare-fun $generated@@177 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@178  (=> (and (= $generated@@171 ($generated@@93 $generated@@172 $generated@@173 $generated false)) ($generated@@68 $generated@@174)) (=> (and (and ($generated@@150 $generated@@175) ($generated@@176 $generated@@175)) (and (= $generated@@173 $generated@@175) (forall (($generated@@179 Int) ($generated@@180 T@U) ) (!  (=> (and (and (and (<= ($generated@@25 0) $generated@@179) ($generated@@22 $generated@@23 $generated@@180 $generated@@24)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true)))) (or (and (<= 0 $generated@@179) (< $generated@@179 $generated@@177)) (and (= $generated@@179 $generated@@177) (< ($generated@@88 $generated@@180) ($generated@@88 $generated@@174))))) (and (and ($generated@@31 ($generated@@44 $generated@@73) $generated@@179 $generated@@180) ($generated@@58 ($generated@@44 $generated@@73) $generated@@179 $generated@@180)) ($generated@@71 $generated@@179 $generated@@180)))
 :pattern ( ($generated@@71 $generated@@179 $generated@@180))
 :pattern ( ($generated@@58 ($generated@@44 $generated@@73) $generated@@179 $generated@@180))
 :pattern ( ($generated@@31 ($generated@@44 $generated@@73) $generated@@179 $generated@@180))
)))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (=> ($generated@@45 $generated@@177 $generated@@174) (or ($generated@@31 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (< 0 $generated@@177) (=> ($generated@@35 $generated@@174) (let (($generated@@181 ($generated@@46 $generated@@174)))
($generated@@31 ($generated@@44 ($generated@@44 $generated@@73)) (- $generated@@177 1) $generated@@181))))))) (=> (=> ($generated@@45 $generated@@177 $generated@@174) (or ($generated@@31 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (< 0 $generated@@177) (=> ($generated@@35 $generated@@174) (let (($generated@@182 ($generated@@46 $generated@@174)))
($generated@@31 ($generated@@44 ($generated@@44 $generated@@73)) (- $generated@@177 1) $generated@@182)))))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (=> ($generated@@45 $generated@@177 $generated@@174) (or ($generated@@31 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (< 0 $generated@@177) (=> (not ($generated@@35 $generated@@174)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true)))))))) (=> (=> ($generated@@45 $generated@@177 $generated@@174) (or ($generated@@31 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (< 0 $generated@@177) (=> (not ($generated@@35 $generated@@174)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true))))))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (=> ($generated@@82 $generated@@177 $generated@@174) (or ($generated@@58 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (= $generated@@177 ($generated@@25 0)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true))))))) (=> (=> ($generated@@82 $generated@@177 $generated@@174) (or ($generated@@58 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (= $generated@@177 ($generated@@25 0)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true)))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> ($generated@@82 $generated@@177 $generated@@174) (or ($generated@@58 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (or (not (= $generated@@177 ($generated@@25 0))) (not true)) (=> ($generated@@35 $generated@@174) (let (($generated@@183 ($generated@@46 $generated@@174)))
($generated@@58 ($generated@@44 ($generated@@44 $generated@@73)) (- $generated@@177 1) $generated@@183))))))) (=> (=> ($generated@@82 $generated@@177 $generated@@174) (or ($generated@@58 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (or (not (= $generated@@177 ($generated@@25 0))) (not true)) (=> ($generated@@35 $generated@@174) (let (($generated@@184 ($generated@@46 $generated@@174)))
($generated@@58 ($generated@@44 ($generated@@44 $generated@@73)) (- $generated@@177 1) $generated@@184)))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> ($generated@@82 $generated@@177 $generated@@174) (or ($generated@@58 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (or (not (= $generated@@177 ($generated@@25 0))) (not true)) (=> (not ($generated@@35 $generated@@174)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true)))))))) (=> (=> ($generated@@82 $generated@@177 $generated@@174) (or ($generated@@58 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (or (not (= $generated@@177 ($generated@@25 0))) (not true)) (=> (not ($generated@@35 $generated@@174)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@72 $generated@@177 $generated@@174) (or ($generated@@71 $generated@@177 $generated@@174) (=> ($generated@@45 $generated@@177 $generated@@174) (or ($generated@@31 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (< 0 $generated@@177) (=> ($generated@@35 $generated@@174) (let (($generated@@185 ($generated@@46 $generated@@174)))
($generated@@31 ($generated@@44 ($generated@@44 $generated@@73)) (- $generated@@177 1) $generated@@185))))))))) (=> (=> ($generated@@72 $generated@@177 $generated@@174) (or ($generated@@71 $generated@@177 $generated@@174) (=> ($generated@@45 $generated@@177 $generated@@174) (or ($generated@@31 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (< 0 $generated@@177) (=> ($generated@@35 $generated@@174) (let (($generated@@186 ($generated@@46 $generated@@174)))
($generated@@31 ($generated@@44 ($generated@@44 $generated@@73)) (- $generated@@177 1) $generated@@186)))))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@72 $generated@@177 $generated@@174) (or ($generated@@71 $generated@@177 $generated@@174) (=> ($generated@@45 $generated@@177 $generated@@174) (or ($generated@@31 ($generated@@44 $generated@@73) $generated@@177 $generated@@174) (=> (< 0 $generated@@177) (=> (not ($generated@@35 $generated@@174)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true))))))))))))))))))))))))))
(let (($generated@@187  (=> (and (and ($generated@@150 $generated@@173) ($generated@@176 $generated@@173)) (<= ($generated@@25 0) $generated@@177)) (=> (and (and (and ($generated@@22 $generated@@23 $generated@@174 $generated@@24) ($generated@@149 $generated@@23 $generated@@174 $generated@@24 $generated@@173)) ($generated@@68 $generated@@174)) (and (= 4 $generated@@30) (= (ControlFlow 0 9) 2))) $generated@@178))))
$generated@@187)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
