(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) Int)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@T T@T) T@T)
(declare-fun $generated@@42 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@65 (Int) Int)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@81 (T@U) T@U)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@87 (T@U) Bool)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@1))
(assert (= ($generated@@23 $generated@@0) $generated@@2))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (!  (=> (and (or (not (= $generated@@30 $generated@@26)) (not true)) (= ($generated@@27 $generated@@30) ($generated@@25 $generated@@29))) ($generated@@28 $generated@@9 ($generated@@13 ($generated@@24 $generated@@30)) $generated))
 :pattern ( ($generated@@24 $generated@@30) ($generated@@25 $generated@@29))
)))
(assert (= ($generated@@7 $generated@@32) 3))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@35 ($generated@@33 $generated@@34) $generated@@36) ($generated@@31 $generated@@32 $generated@@35 ($generated@@25 $generated@@34) $generated@@36))
 :pattern ( ($generated@@31 $generated@@32 $generated@@35 ($generated@@33 $generated@@34) $generated@@36))
 :pattern ( ($generated@@31 $generated@@32 $generated@@35 ($generated@@25 $generated@@34) $generated@@36))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@38 $generated@@45 $generated@@46 ($generated@@42 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@49) $generated@@47)
 :weight 0
)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (= $generated@@54 $generated@@55) (= ($generated@@38 $generated@@50 $generated@@51 ($generated@@42 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@55) ($generated@@38 $generated@@50 $generated@@51 $generated@@53 $generated@@55)))
 :weight 0
))) (= ($generated@@7 $generated@@39) 4)) (= ($generated@@7 $generated@@40) 5)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (= ($generated@@7 ($generated@@41 $generated@@56 $generated@@57)) 6))) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (! (= ($generated@@43 ($generated@@41 $generated@@58 $generated@@59)) $generated@@58)
 :pattern ( ($generated@@41 $generated@@58 $generated@@59))
))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@44 ($generated@@41 $generated@@60 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@41 $generated@@60 $generated@@61))
))))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@63 ($generated@@25 $generated@@62) $generated@@64)  (or (= $generated@@63 $generated@@26) ($generated@@12 ($generated@@37 $generated@@8 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@32 ($generated@@41 $generated@@39 $generated@@40) $generated@@64 $generated@@63) $generated@@3)))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@63 ($generated@@25 $generated@@62) $generated@@64))
)))
(assert (forall (($generated@@66 Int) ) (! (= ($generated@@65 $generated@@66) $generated@@66)
 :pattern ( ($generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@67 $generated@@69 $generated@@68) $generated@@68)
 :pattern ( ($generated@@67 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 ($generated@@37 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@37 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@28 $generated@@32 $generated@@74 ($generated@@33 $generated@@73))  (and ($generated@@28 $generated@@32 $generated@@74 ($generated@@25 $generated@@73)) (or (not (= $generated@@74 $generated@@26)) (not true))))
 :pattern ( ($generated@@28 $generated@@32 $generated@@74 ($generated@@33 $generated@@73)))
 :pattern ( ($generated@@28 $generated@@32 $generated@@74 ($generated@@25 $generated@@73)))
)))
(assert (forall (($generated@@76 T@U) ) (!  (and (= ($generated@@23 ($generated@@25 $generated@@76)) $generated@@4) (= ($generated@@75 ($generated@@25 $generated@@76)) $generated@@6))
 :pattern ( ($generated@@25 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ) (!  (and (= ($generated@@23 ($generated@@33 $generated@@77)) $generated@@5) (= ($generated@@75 ($generated@@33 $generated@@77)) $generated@@6))
 :pattern ( ($generated@@33 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@28 $generated@@32 $generated@@79 ($generated@@25 $generated@@78))  (or (= $generated@@79 $generated@@26) (= ($generated@@27 $generated@@79) ($generated@@25 $generated@@78))))
 :pattern ( ($generated@@28 $generated@@32 $generated@@79 ($generated@@25 $generated@@78)))
)))
(assert (forall (($generated@@80 T@U) ) (! (<= 0 ($generated@@24 $generated@@80))
 :pattern ( ($generated@@24 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@81 ($generated@@25 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@25 $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@33 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@33 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@37 $generated@@86 ($generated@@70 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@70 $generated@@86 $generated@@85))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (=> (and (and ($generated@@87 $generated@@89) (and (or (not (= $generated@@90 $generated@@26)) (not true)) (= ($generated@@27 $generated@@90) ($generated@@25 $generated@@88)))) ($generated@@12 ($generated@@37 $generated@@8 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@32 ($generated@@41 $generated@@39 $generated@@40) $generated@@89 $generated@@90) $generated@@3)))) ($generated@@31 $generated@@9 ($generated@@13 ($generated@@24 $generated@@90)) $generated $generated@@89))
 :pattern ( ($generated@@24 $generated@@90) ($generated@@37 $generated@@8 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@32 ($generated@@41 $generated@@39 $generated@@40) $generated@@89 $generated@@90) $generated@@3)) ($generated@@25 $generated@@88))
)))
(assert  (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@91 $generated@@94 $generated@@95 $generated@@96 ($generated@@93 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@99 $generated@@100) $generated@@97)
 :weight 0
)) (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@91 $generated@@101 $generated@@102 $generated@@103 ($generated@@93 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@91 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@91 $generated@@110 $generated@@111 $generated@@112 ($generated@@93 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@91 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@12 ($generated@@91 $generated@@32 $generated@@39 $generated@@8 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@12 ($generated@@37 $generated@@8 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@32 ($generated@@41 $generated@@39 $generated@@40) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@91 $generated@@32 $generated@@39 $generated@@8 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@125 Int) ) (! (= ($generated@@70 $generated@@9 ($generated@@13 ($generated@@65 $generated@@125))) ($generated@@67 $generated@@40 ($generated@@70 $generated@@9 ($generated@@13 $generated@@125))))
 :pattern ( ($generated@@70 $generated@@9 ($generated@@13 ($generated@@65 $generated@@125))))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@T) ) (! (= ($generated@@70 $generated@@127 ($generated@@67 $generated@@127 $generated@@126)) ($generated@@67 $generated@@40 ($generated@@70 $generated@@127 $generated@@126)))
 :pattern ( ($generated@@70 $generated@@127 ($generated@@67 $generated@@127 $generated@@126)))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (! ($generated@@31 $generated@@9 $generated@@129 $generated $generated@@128)
 :pattern ( ($generated@@31 $generated@@9 $generated@@129 $generated $generated@@128))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (! ($generated@@31 $generated@@10 $generated@@131 $generated@@0 $generated@@130)
 :pattern ( ($generated@@31 $generated@@10 $generated@@131 $generated@@0 $generated@@130))
)))
(assert (forall (($generated@@132 T@U) ) (! ($generated@@28 $generated@@9 $generated@@132 $generated)
 :pattern ( ($generated@@28 $generated@@9 $generated@@132 $generated))
)))
(assert (forall (($generated@@133 T@U) ) (! ($generated@@28 $generated@@10 $generated@@133 $generated@@0)
 :pattern ( ($generated@@28 $generated@@10 $generated@@133 $generated@@0))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 (T@U) Bool)
(declare-fun $generated@@138 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@139 true))
(let (($generated@@140  (=> (or (not (= $generated@@134 $generated@@26)) (not true)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= $generated@@134 $generated@@26)) (not true))) (=> (or (not (= $generated@@134 $generated@@26)) (not true)) (=> (and (= ($generated@@24 $generated@@134) ($generated@@65 10)) (= (ControlFlow 0 5) 3)) $generated@@139))))))
(let (($generated@@141  (=> (and (= $generated@@134 $generated@@26) (= (ControlFlow 0 4) 3)) $generated@@139)))
(let (($generated@@142  (=> ($generated@@28 $generated@@32 $generated@@134 ($generated@@25 $generated@@0)) (and (=> (= (ControlFlow 0 7) 4) $generated@@141) (=> (= (ControlFlow 0 7) 5) $generated@@140)))))
(let (($generated@@143  (=> (= (ControlFlow 0 2) (- 0 1)) (or (= $generated@@26 $generated@@26) (= ($generated@@24 $generated@@26) ($generated@@65 10))))))
(let (($generated@@144  (=> (= $generated@@135 ($generated@@92 $generated@@26 $generated@@136 $generated@@3 false)) (and (=> (= (ControlFlow 0 8) 7) $generated@@142) (=> (= (ControlFlow 0 8) 2) $generated@@143)))))
(let (($generated@@145  (=> (and (and ($generated@@87 $generated@@136) ($generated@@137 $generated@@136)) (and (= 0 $generated@@138) (= (ControlFlow 0 9) 8))) $generated@@144)))
$generated@@145))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
