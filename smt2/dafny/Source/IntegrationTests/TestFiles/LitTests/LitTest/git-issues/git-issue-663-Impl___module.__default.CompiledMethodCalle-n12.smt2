(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@27 (Int Int) T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 (T@T T@T) T@T)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@60 (Int) Int)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@84 (T@U) Int)
(declare-fun $generated@@87 (T@U) Int)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@133 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@24) 3))
(assert (forall (($generated@@26 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@26 $generated@@25) ($generated@@22 $generated@@26))
 :pattern ( ($generated@@22 $generated@@26) ($generated@@23 $generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@28 Int) ($generated@@29 Int) ) (! (= ($generated@@23 $generated@@24 ($generated@@27 $generated@@28 $generated@@29) $generated@@25)  (and ($generated@@23 $generated@@7 ($generated@@11 $generated@@28) $generated) ($generated@@23 $generated@@7 ($generated@@11 $generated@@29) $generated)))
 :pattern ( ($generated@@23 $generated@@24 ($generated@@27 $generated@@28 $generated@@29) $generated@@25))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@31 $generated@@40 $generated@@41 ($generated@@37 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@44) $generated@@42)
 :weight 0
)) (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (or (= $generated@@49 $generated@@50) (= ($generated@@31 $generated@@45 $generated@@46 ($generated@@37 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@50) ($generated@@31 $generated@@45 $generated@@46 $generated@@48 $generated@@50)))
 :weight 0
))) (= ($generated@@5 $generated@@32) 4)) (= ($generated@@5 $generated@@33) 5)) (= ($generated@@5 $generated@@34) 6)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (= ($generated@@5 ($generated@@35 $generated@@51 $generated@@52)) 7))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@38 ($generated@@35 $generated@@53 $generated@@54)) $generated@@53)
 :pattern ( ($generated@@35 $generated@@53 $generated@@54))
))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@39 ($generated@@35 $generated@@55 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@35 $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (!  (=> ($generated@@30 $generated@@57 $generated@@58) (forall (($generated@@59 T@U) ) (!  (=> ($generated@@10 ($generated@@36 $generated@@6 ($generated@@31 $generated@@32 $generated@@33 ($generated@@31 $generated@@34 ($generated@@35 $generated@@32 $generated@@33) $generated@@57 $generated@@59) $generated@@1))) ($generated@@10 ($generated@@36 $generated@@6 ($generated@@31 $generated@@32 $generated@@33 ($generated@@31 $generated@@34 ($generated@@35 $generated@@32 $generated@@33) $generated@@58 $generated@@59) $generated@@1))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@33 ($generated@@31 $generated@@34 ($generated@@35 $generated@@32 $generated@@33) $generated@@58 $generated@@59) $generated@@1))
)))
 :pattern ( ($generated@@30 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@61 Int) ) (! (= ($generated@@60 $generated@@61) $generated@@61)
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 $generated@@63) $generated@@63)
 :pattern ( ($generated@@62 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@22 $generated@@66) (= ($generated@@65 $generated@@66) $generated@@3))
 :pattern ( ($generated@@22 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@67 $generated@@69 ($generated@@36 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@36 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@22 $generated@@70) (exists (($generated@@71 Int) ($generated@@72 Int) ) (= $generated@@70 ($generated@@27 $generated@@71 $generated@@72))))
 :pattern ( ($generated@@22 $generated@@70))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@T) ) (!  (=> ($generated@@30 $generated@@74 $generated@@75) (=> ($generated@@73 $generated@@78 $generated@@76 $generated@@77 $generated@@74) ($generated@@73 $generated@@78 $generated@@76 $generated@@77 $generated@@75)))
 :pattern ( ($generated@@30 $generated@@74 $generated@@75) ($generated@@73 $generated@@78 $generated@@76 $generated@@77 $generated@@74))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (=> (or (not (= $generated@@79 $generated@@81)) (not true)) (=> (and ($generated@@30 $generated@@79 $generated@@80) ($generated@@30 $generated@@80 $generated@@81)) ($generated@@30 $generated@@79 $generated@@81)))
 :pattern ( ($generated@@30 $generated@@79 $generated@@80) ($generated@@30 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 Int) ($generated@@83 Int) ) (! (= ($generated@@65 ($generated@@27 $generated@@82 $generated@@83)) $generated@@3)
 :pattern ( ($generated@@27 $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@85 Int) ($generated@@86 Int) ) (! (= ($generated@@84 ($generated@@27 $generated@@85 $generated@@86)) $generated@@85)
 :pattern ( ($generated@@27 $generated@@85 $generated@@86))
)))
(assert (forall (($generated@@88 Int) ($generated@@89 Int) ) (! (= ($generated@@87 ($generated@@27 $generated@@88 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@27 $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@T) ) (! (= ($generated@@36 $generated@@91 ($generated@@67 $generated@@91 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@67 $generated@@91 $generated@@90))
)))
(assert  (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@92 $generated@@95 $generated@@96 $generated@@97 ($generated@@94 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@100 $generated@@101) $generated@@98)
 :weight 0
)) (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@92 $generated@@102 $generated@@103 $generated@@104 ($generated@@94 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@92 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@92 $generated@@111 $generated@@112 $generated@@113 ($generated@@94 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@92 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@10 ($generated@@92 $generated@@34 $generated@@32 $generated@@6 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@10 ($generated@@36 $generated@@6 ($generated@@31 $generated@@32 $generated@@33 ($generated@@31 $generated@@34 ($generated@@35 $generated@@32 $generated@@33) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@92 $generated@@34 $generated@@32 $generated@@6 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> (and ($generated@@126 $generated@@128) (and ($generated@@22 $generated@@127) ($generated@@73 $generated@@24 $generated@@127 $generated@@25 $generated@@128))) ($generated@@73 $generated@@7 ($generated@@11 ($generated@@84 $generated@@127)) $generated $generated@@128))
 :pattern ( ($generated@@73 $generated@@7 ($generated@@11 ($generated@@84 $generated@@127)) $generated $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (!  (=> (and ($generated@@126 $generated@@130) (and ($generated@@22 $generated@@129) ($generated@@73 $generated@@24 $generated@@129 $generated@@25 $generated@@130))) ($generated@@73 $generated@@7 ($generated@@11 ($generated@@87 $generated@@129)) $generated $generated@@130))
 :pattern ( ($generated@@73 $generated@@7 ($generated@@11 ($generated@@87 $generated@@129)) $generated $generated@@130))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> (and ($generated@@126 $generated@@132) ($generated@@23 $generated@@24 $generated@@131 $generated@@25)) ($generated@@73 $generated@@24 $generated@@131 $generated@@25 $generated@@132))
 :pattern ( ($generated@@73 $generated@@24 $generated@@131 $generated@@25 $generated@@132))
)))
(assert (= ($generated@@21 $generated@@25) $generated@@2))
(assert (= ($generated@@133 $generated@@25) $generated@@4))
(assert (forall (($generated@@134 Int) ($generated@@135 Int) ) (! (= ($generated@@27 ($generated@@60 $generated@@134) ($generated@@60 $generated@@135)) ($generated@@62 $generated@@24 ($generated@@27 $generated@@134 $generated@@135)))
 :pattern ( ($generated@@27 ($generated@@60 $generated@@134) ($generated@@60 $generated@@135)))
)))
(assert (forall (($generated@@136 Int) ) (! (= ($generated@@67 $generated@@7 ($generated@@11 ($generated@@60 $generated@@136))) ($generated@@62 $generated@@33 ($generated@@67 $generated@@7 ($generated@@11 $generated@@136))))
 :pattern ( ($generated@@67 $generated@@7 ($generated@@11 ($generated@@60 $generated@@136))))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@T) ) (! (= ($generated@@67 $generated@@138 ($generated@@62 $generated@@138 $generated@@137)) ($generated@@62 $generated@@33 ($generated@@67 $generated@@138 $generated@@137)))
 :pattern ( ($generated@@67 $generated@@138 ($generated@@62 $generated@@138 $generated@@137)))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (! ($generated@@73 $generated@@7 $generated@@140 $generated $generated@@139)
 :pattern ( ($generated@@73 $generated@@7 $generated@@140 $generated $generated@@139))
)))
(assert (forall (($generated@@141 T@U) ) (! ($generated@@23 $generated@@7 $generated@@141 $generated)
 :pattern ( ($generated@@23 $generated@@7 $generated@@141 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
