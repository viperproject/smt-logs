(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U T@U Int) T@U)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@48 (T@T T@U T@U) Bool)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@U) T@U)
(declare-fun $generated@@54 (T@U T@U T@U) Bool)
(declare-fun $generated@@55 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@60 (T@U T@U) Bool)
(declare-fun $generated@@67 (T@U Int T@U) T@U)
(declare-fun $generated@@77 (T@U) T@U)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@86 (T@T T@T) T@T)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T) T@T)
(declare-fun $generated@@89 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert  (and (and (forall (($generated@@27 T@T) ($generated@@28 T@T) ($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@20 $generated@@27 $generated@@28 ($generated@@26 $generated@@27 $generated@@28 $generated@@30 $generated@@31 $generated@@29) $generated@@31) $generated@@29)
 :weight 0
)) (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (!  (or (= $generated@@36 $generated@@37) (= ($generated@@20 $generated@@32 $generated@@33 ($generated@@26 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@37) ($generated@@20 $generated@@32 $generated@@33 $generated@@35 $generated@@37)))
 :weight 0
))) (= ($generated@@3 $generated@@21) 3)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 Int) ($generated@@41 T@U) ) (! (= ($generated@@8 ($generated@@20 $generated@@21 $generated@@4 ($generated@@22 $generated@@38 $generated@@39 $generated@@40) $generated@@41))  (and ($generated@@23 $generated@@41 $generated@@38) (and ($generated@@24 $generated@@39 $generated@@41) (< ($generated@@10 ($generated@@25 $generated@@5 $generated@@41)) $generated@@40))))
 :pattern ( ($generated@@20 $generated@@21 $generated@@4 ($generated@@22 $generated@@38 $generated@@39 $generated@@40) $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 ($generated@@25 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@25 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@24 ($generated@@45 $generated@@46) $generated@@47) ($generated@@8 ($generated@@20 $generated@@21 $generated@@4 $generated@@46 $generated@@47)))
 :pattern ( ($generated@@24 ($generated@@45 $generated@@46) $generated@@47))
)))
(assert (= ($generated@@3 $generated@@49) 4))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@48 $generated@@49 $generated@@51 ($generated@@50 $generated@@52)) (forall (($generated@@53 T@U) ) (!  (=> ($generated@@24 $generated@@51 $generated@@53) ($generated@@23 $generated@@53 $generated@@52))
 :pattern ( ($generated@@24 $generated@@51 $generated@@53))
)))
 :pattern ( ($generated@@48 $generated@@49 $generated@@51 ($generated@@50 $generated@@52)))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@54 ($generated@@42 $generated@@59 $generated@@56) $generated@@57 $generated@@58) ($generated@@55 $generated@@59 $generated@@56 $generated@@57 $generated@@58))
 :pattern ( ($generated@@54 ($generated@@42 $generated@@59 $generated@@56) $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> ($generated@@60 $generated@@61 $generated@@62) (= $generated@@61 $generated@@62))
 :pattern ( ($generated@@60 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@23 $generated@@63 $generated) (and (= ($generated@@42 $generated@@5 ($generated@@25 $generated@@5 $generated@@63)) $generated@@63) ($generated@@48 $generated@@5 ($generated@@25 $generated@@5 $generated@@63) $generated)))
 :pattern ( ($generated@@23 $generated@@63 $generated))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@23 ($generated@@42 $generated@@66 $generated@@64) $generated@@65) ($generated@@48 $generated@@66 $generated@@64 $generated@@65))
 :pattern ( ($generated@@23 ($generated@@42 $generated@@66 $generated@@64) $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 Int) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@8 ($generated@@20 $generated@@21 $generated@@4 ($generated@@67 $generated@@68 $generated@@69 $generated@@70) $generated@@71)) (exists (($generated@@72 Int) ) (!  (and (and ($generated@@24 $generated@@68 ($generated@@42 $generated@@5 ($generated@@9 $generated@@72))) (< $generated@@72 $generated@@69)) (= $generated@@71 ($generated@@42 $generated@@5 ($generated@@9 $generated@@72))))
 :pattern ( ($generated@@24 $generated@@70 ($generated@@42 $generated@@5 ($generated@@9 $generated@@72))))
)))
 :pattern ( ($generated@@20 $generated@@21 $generated@@4 ($generated@@67 $generated@@68 $generated@@69 $generated@@70) $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@55 $generated@@49 $generated@@73 ($generated@@50 $generated@@74) $generated@@75) (forall (($generated@@76 T@U) ) (!  (=> ($generated@@24 $generated@@73 $generated@@76) ($generated@@54 $generated@@76 $generated@@74 $generated@@75))
 :pattern ( ($generated@@24 $generated@@73 $generated@@76))
)))
 :pattern ( ($generated@@55 $generated@@49 $generated@@73 ($generated@@50 $generated@@74) $generated@@75))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@77 ($generated@@50 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@50 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@19 ($generated@@50 $generated@@79)) $generated@@1)
 :pattern ( ($generated@@50 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@25 $generated@@81 ($generated@@42 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@42 $generated@@81 $generated@@80))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@82 $generated@@90 $generated@@91 $generated@@92 ($generated@@87 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@95 $generated@@96) $generated@@93)
 :weight 0
)) (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@82 $generated@@97 $generated@@98 $generated@@99 ($generated@@87 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@82 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@82 $generated@@106 $generated@@107 $generated@@108 ($generated@@87 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@82 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)))) (= ($generated@@3 $generated@@83) 5)) (= ($generated@@3 $generated@@84) 6)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (= ($generated@@3 ($generated@@86 $generated@@115 $generated@@116)) 7))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@88 ($generated@@86 $generated@@117 $generated@@118)) $generated@@117)
 :pattern ( ($generated@@86 $generated@@117 $generated@@118))
))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@89 ($generated@@86 $generated@@119 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@86 $generated@@119 $generated@@120))
))))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 Bool) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@8 ($generated@@82 $generated@@83 $generated@@84 $generated@@4 ($generated@@85 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))  (=> (and (or (not (= $generated@@125 $generated@@121)) (not true)) ($generated@@8 ($generated@@25 $generated@@4 ($generated@@20 $generated@@84 $generated@@21 ($generated@@20 $generated@@83 ($generated@@86 $generated@@84 $generated@@21) $generated@@122 $generated@@125) $generated@@123)))) $generated@@124))
 :pattern ( ($generated@@82 $generated@@83 $generated@@84 $generated@@4 ($generated@@85 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> ($generated@@23 $generated@@127 ($generated@@50 $generated@@128)) (and (= ($generated@@42 $generated@@49 ($generated@@25 $generated@@49 $generated@@127)) $generated@@127) ($generated@@48 $generated@@49 ($generated@@25 $generated@@49 $generated@@127) ($generated@@50 $generated@@128))))
 :pattern ( ($generated@@23 $generated@@127 ($generated@@50 $generated@@128)))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@60 $generated@@129 $generated@@130) (forall (($generated@@131 T@U) ) (! (= ($generated@@24 $generated@@129 $generated@@131) ($generated@@24 $generated@@130 $generated@@131))
 :pattern ( ($generated@@24 $generated@@129 $generated@@131))
 :pattern ( ($generated@@24 $generated@@130 $generated@@131))
)))
 :pattern ( ($generated@@60 $generated@@129 $generated@@130))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (! ($generated@@55 $generated@@5 $generated@@133 $generated $generated@@132)
 :pattern ( ($generated@@55 $generated@@5 $generated@@133 $generated $generated@@132))
)))
(assert (forall (($generated@@134 T@U) ) (! ($generated@@48 $generated@@5 $generated@@134 $generated)
 :pattern ( ($generated@@48 $generated@@5 $generated@@134 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 (T@U) Bool)
(declare-fun $generated@@142 (T@U) Bool)
(declare-fun $generated@@143 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@144  (=> (= (ControlFlow 0 4) (- 0 3)) ($generated@@60 ($generated@@45 ($generated@@67 $generated@@135 7 $generated@@135)) ($generated@@45 ($generated@@22 $generated $generated@@135 7))))))
(let (($generated@@145  (=> (and (not (and ($generated@@24 $generated@@135 ($generated@@42 $generated@@5 ($generated@@9 $generated@@136))) (< $generated@@136 7))) (= (ControlFlow 0 6) 4)) $generated@@144)))
(let (($generated@@146  (=> (and (and ($generated@@24 $generated@@135 ($generated@@42 $generated@@5 ($generated@@9 $generated@@136))) (< $generated@@136 7)) (= (ControlFlow 0 5) 4)) $generated@@144)))
(let (($generated@@147  (=> (not ($generated@@24 $generated@@135 ($generated@@42 $generated@@5 ($generated@@9 $generated@@136)))) (and (=> (= (ControlFlow 0 8) 5) $generated@@146) (=> (= (ControlFlow 0 8) 6) $generated@@145)))))
(let (($generated@@148  (=> ($generated@@24 $generated@@135 ($generated@@42 $generated@@5 ($generated@@9 $generated@@136))) (and (=> (= (ControlFlow 0 7) 5) $generated@@146) (=> (= (ControlFlow 0 7) 6) $generated@@145)))))
(let (($generated@@149  (and (=> (= (ControlFlow 0 9) 7) $generated@@148) (=> (= (ControlFlow 0 9) 8) $generated@@147))))
(let (($generated@@150 true))
(let (($generated@@151  (=> (not (and ($generated@@24 $generated@@135 ($generated@@42 $generated@@5 ($generated@@9 $generated@@137))) (< $generated@@137 7))) (and (=> (= (ControlFlow 0 11) 9) $generated@@149) (=> (= (ControlFlow 0 11) 2) $generated@@150)))))
(let (($generated@@152  (=> (and ($generated@@24 $generated@@135 ($generated@@42 $generated@@5 ($generated@@9 $generated@@137))) (< $generated@@137 7)) (and (=> (= (ControlFlow 0 10) 9) $generated@@149) (=> (= (ControlFlow 0 10) 2) $generated@@150)))))
(let (($generated@@153  (=> (not ($generated@@24 $generated@@135 ($generated@@42 $generated@@5 ($generated@@9 $generated@@137)))) (and (=> (= (ControlFlow 0 13) 10) $generated@@152) (=> (= (ControlFlow 0 13) 11) $generated@@151)))))
(let (($generated@@154  (=> ($generated@@24 $generated@@135 ($generated@@42 $generated@@5 ($generated@@9 $generated@@137))) (and (=> (= (ControlFlow 0 12) 10) $generated@@152) (=> (= (ControlFlow 0 12) 11) $generated@@151)))))
(let (($generated@@155  (and (=> (= (ControlFlow 0 14) 12) $generated@@154) (=> (= (ControlFlow 0 14) 13) $generated@@153))))
(let (($generated@@156 true))
(let (($generated@@157  (=> (= $generated@@138 ($generated@@85 $generated@@139 $generated@@140 $generated@@2 false)) (and (=> (= (ControlFlow 0 15) 14) $generated@@155) (=> (= (ControlFlow 0 15) 1) $generated@@156)))))
(let (($generated@@158  (=> (and ($generated@@141 $generated@@140) ($generated@@142 $generated@@140)) (=> (and (and ($generated@@48 $generated@@49 $generated@@135 ($generated@@50 $generated)) ($generated@@55 $generated@@49 $generated@@135 ($generated@@50 $generated) $generated@@140)) (and (= 0 $generated@@143) (= (ControlFlow 0 16) 15))) $generated@@157))))
$generated@@158))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
