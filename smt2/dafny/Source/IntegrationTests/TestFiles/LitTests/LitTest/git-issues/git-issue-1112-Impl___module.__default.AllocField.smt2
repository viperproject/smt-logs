(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 () T@U)
(declare-fun $generated@@12 () T@U)
(declare-fun $generated@@13 (T@T) Int)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 () T@T)
(declare-fun $generated@@16 () T@T)
(declare-fun $generated@@17 (Bool) T@U)
(declare-fun $generated@@18 (T@U) Bool)
(declare-fun $generated@@19 (Int) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 (Real) T@U)
(declare-fun $generated@@22 (T@U) Real)
(declare-fun $generated@@29 (T@U) Int)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@40 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T T@T) T@T)
(declare-fun $generated@@56 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@80 (T@U T@U) Bool)
(declare-fun $generated@@84 (T@T T@U) T@U)
(declare-fun $generated@@87 (T@U) Bool)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@138 (T@U) T@U)
(declare-fun $generated@@149 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@13 $generated@@14) 0) (= ($generated@@13 $generated@@15) 1)) (= ($generated@@13 $generated@@16) 2)) (forall (($generated@@23 Bool) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Int) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))) (forall (($generated@@27 Real) ) (! (= ($generated@@22 ($generated@@21 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@21 $generated@@27))
))) (forall (($generated@@28 T@U) ) (! (= ($generated@@21 ($generated@@22 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@22 $generated@@28))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10 $generated@@11 $generated@@12)
)
(assert (= ($generated@@29 $generated@@1) 0))
(assert (= ($generated@@30 $generated) $generated@@0))
(assert (= ($generated@@31 $generated@@1) $generated@@2))
(assert (= ($generated@@13 $generated@@33) 3))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@37 $generated@@34)  (or (= $generated@@37 $generated@@35) (= ($generated@@36 $generated@@37) $generated@@34)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@37 $generated@@34))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@39 $generated@@38)  (or (= $generated@@39 $generated@@35) (= ($generated@@36 $generated@@39) $generated@@38)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@40 $generated@@33 $generated@@42 $generated@@41 $generated@@43) ($generated@@40 $generated@@33 $generated@@42 $generated@@34 $generated@@43))
 :pattern ( ($generated@@40 $generated@@33 $generated@@42 $generated@@41 $generated@@43))
 :pattern ( ($generated@@40 $generated@@33 $generated@@42 $generated@@34 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@40 $generated@@33 $generated@@45 $generated@@44 $generated@@46) ($generated@@40 $generated@@33 $generated@@45 $generated@@38 $generated@@46))
 :pattern ( ($generated@@40 $generated@@33 $generated@@45 $generated@@44 $generated@@46))
 :pattern ( ($generated@@40 $generated@@33 $generated@@45 $generated@@38 $generated@@46))
)))
(assert (= ($generated@@29 $generated@@47) 0))
(assert (= ($generated@@48 $generated@@6 $generated@@11) $generated@@47))
(assert  (not ($generated@@49 $generated@@47)))
(assert (= ($generated@@29 $generated@@50) 0))
(assert (= ($generated@@48 $generated@@8 $generated@@12) $generated@@50))
(assert  (not ($generated@@49 $generated@@50)))
(assert  (and (and (and (and (and (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@52 $generated@@59 $generated@@60 ($generated@@56 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@61) $generated@@63) $generated@@61)
 :weight 0
)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (or (= $generated@@68 $generated@@69) (= ($generated@@52 $generated@@64 $generated@@65 ($generated@@56 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@66) $generated@@69) ($generated@@52 $generated@@64 $generated@@65 $generated@@67 $generated@@69)))
 :weight 0
))) (= ($generated@@13 $generated@@53) 4)) (= ($generated@@13 $generated@@54) 5)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (= ($generated@@13 ($generated@@55 $generated@@70 $generated@@71)) 6))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@57 ($generated@@55 $generated@@72 $generated@@73)) $generated@@72)
 :pattern ( ($generated@@55 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@T) ($generated@@75 T@T) ) (! (= ($generated@@58 ($generated@@55 $generated@@74 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@55 $generated@@74 $generated@@75))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@40 $generated@@33 $generated@@76 $generated@@34 $generated@@77)  (or (= $generated@@76 $generated@@35) ($generated@@18 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@77 $generated@@76) $generated@@1)))))
 :pattern ( ($generated@@40 $generated@@33 $generated@@76 $generated@@34 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@40 $generated@@33 $generated@@78 $generated@@38 $generated@@79)  (or (= $generated@@78 $generated@@35) ($generated@@18 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@79 $generated@@78) $generated@@1)))))
 :pattern ( ($generated@@40 $generated@@33 $generated@@78 $generated@@38 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> ($generated@@80 $generated@@81 $generated@@82) (forall (($generated@@83 T@U) ) (!  (=> ($generated@@18 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@81 $generated@@83) $generated@@1))) ($generated@@18 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@82 $generated@@83) $generated@@1))))
 :pattern ( ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@82 $generated@@83) $generated@@1))
)))
 :pattern ( ($generated@@80 $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@84 $generated@@86 ($generated@@51 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@51 $generated@@86 $generated@@85))
)))
(assert ($generated@@49 $generated@@1))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ) (!  (=> (and (and ($generated@@87 $generated@@88) (and (or (not (= $generated@@89 $generated@@35)) (not true)) (= ($generated@@36 $generated@@89) $generated@@38))) ($generated@@18 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@88 $generated@@89) $generated@@1)))) ($generated@@40 $generated@@14 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@88 $generated@@89) $generated@@50)) $generated $generated@@88))
 :pattern ( ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@88 $generated@@89) $generated@@50)))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@T) ) (!  (=> ($generated@@80 $generated@@90 $generated@@91) (=> ($generated@@40 $generated@@94 $generated@@92 $generated@@93 $generated@@90) ($generated@@40 $generated@@94 $generated@@92 $generated@@93 $generated@@91)))
 :pattern ( ($generated@@80 $generated@@90 $generated@@91) ($generated@@40 $generated@@94 $generated@@92 $generated@@93 $generated@@90))
)))
(assert  (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@95 $generated@@98 $generated@@99 $generated@@100 ($generated@@97 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@103 $generated@@104) $generated@@101)
 :weight 0
)) (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@95 $generated@@105 $generated@@106 $generated@@107 ($generated@@97 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@112 $generated@@113) ($generated@@95 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@112 $generated@@113)))
 :weight 0
)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@95 $generated@@114 $generated@@115 $generated@@116 ($generated@@97 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@121 $generated@@122) ($generated@@95 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@121 $generated@@122)))
 :weight 0
)))))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@18 ($generated@@95 $generated@@33 $generated@@53 $generated@@14 ($generated@@96 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))  (=> (and (or (not (= $generated@@127 $generated@@123)) (not true)) ($generated@@18 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@124 $generated@@127) $generated@@125)))) (= $generated@@127 $generated@@126)))
 :pattern ( ($generated@@95 $generated@@33 $generated@@53 $generated@@14 ($generated@@96 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (!  (=> (and ($generated@@87 $generated@@129) (and (or (not (= $generated@@130 $generated@@35)) (not true)) (= ($generated@@36 $generated@@130) $generated@@34))) ($generated@@32 $generated@@33 ($generated@@51 $generated@@33 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@129 $generated@@130) $generated@@47)) $generated@@38))
 :pattern ( ($generated@@51 $generated@@33 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@129 $generated@@130) $generated@@47)))
)))
(assert (forall (($generated@@131 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@131 $generated@@41)  (and ($generated@@32 $generated@@33 $generated@@131 $generated@@34) (or (not (= $generated@@131 $generated@@35)) (not true))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@131 $generated@@41))
 :pattern ( ($generated@@32 $generated@@33 $generated@@131 $generated@@34))
)))
(assert (forall (($generated@@132 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@132 $generated@@44)  (and ($generated@@32 $generated@@33 $generated@@132 $generated@@38) (or (not (= $generated@@132 $generated@@35)) (not true))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@132 $generated@@44))
 :pattern ( ($generated@@32 $generated@@33 $generated@@132 $generated@@38))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (!  (=> (and (and ($generated@@87 $generated@@133) (and (or (not (= $generated@@134 $generated@@35)) (not true)) (= ($generated@@36 $generated@@134) $generated@@34))) ($generated@@18 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@133 $generated@@134) $generated@@1)))) ($generated@@40 $generated@@33 ($generated@@51 $generated@@33 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@133 $generated@@134) $generated@@47)) $generated@@38 $generated@@133))
 :pattern ( ($generated@@51 $generated@@33 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@133 $generated@@134) $generated@@47)))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (!  (=> (or (not (= $generated@@135 $generated@@137)) (not true)) (=> (and ($generated@@80 $generated@@135 $generated@@136) ($generated@@80 $generated@@136 $generated@@137)) ($generated@@80 $generated@@135 $generated@@137)))
 :pattern ( ($generated@@80 $generated@@135 $generated@@136) ($generated@@80 $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (and (= ($generated@@138 ($generated@@48 $generated@@139 $generated@@140)) $generated@@139) (= ($generated@@31 ($generated@@48 $generated@@139 $generated@@140)) $generated@@140))
 :pattern ( ($generated@@48 $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@T) ) (! (= ($generated@@51 $generated@@142 ($generated@@84 $generated@@142 $generated@@141)) $generated@@141)
 :pattern ( ($generated@@84 $generated@@142 $generated@@141))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> (and ($generated@@87 $generated@@143) (and (or (not (= $generated@@144 $generated@@35)) (not true)) (= ($generated@@36 $generated@@144) $generated@@38))) ($generated@@32 $generated@@14 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@143 $generated@@144) $generated@@50)) $generated))
 :pattern ( ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@143 $generated@@144) $generated@@50)))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ) (!  (=> ($generated@@87 ($generated@@56 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@145 $generated@@146 ($generated@@56 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@145 $generated@@146) $generated@@147 $generated@@148))) ($generated@@80 $generated@@145 ($generated@@56 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@145 $generated@@146 ($generated@@56 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@145 $generated@@146) $generated@@147 $generated@@148))))
 :pattern ( ($generated@@56 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@145 $generated@@146 ($generated@@56 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@145 $generated@@146) $generated@@147 $generated@@148)))
)))
(assert (= ($generated@@30 $generated@@41) $generated@@3))
(assert (= ($generated@@149 $generated@@41) $generated@@9))
(assert (= ($generated@@30 $generated@@38) $generated@@4))
(assert (= ($generated@@149 $generated@@38) $generated@@10))
(assert (= ($generated@@30 $generated@@44) $generated@@5))
(assert (= ($generated@@149 $generated@@44) $generated@@10))
(assert (= ($generated@@30 $generated@@34) $generated@@7))
(assert (= ($generated@@149 $generated@@34) $generated@@9))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (! ($generated@@40 $generated@@14 $generated@@151 $generated $generated@@150)
 :pattern ( ($generated@@40 $generated@@14 $generated@@151 $generated $generated@@150))
)))
(assert (forall (($generated@@152 T@U) ) (! ($generated@@32 $generated@@14 $generated@@152 $generated)
 :pattern ( ($generated@@32 $generated@@14 $generated@@152 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 (T@U) Bool)
(declare-fun $generated@@160 () Bool)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@163  (and (=> (= (ControlFlow 0 6) (- 0 8)) true) (and (=> (= (ControlFlow 0 6) (- 0 7)) (or (not (= $generated@@153 $generated@@35)) (not true))) (=> (or (not (= $generated@@153 $generated@@35)) (not true)) (=> (= (ControlFlow 0 6) (- 0 5)) ($generated@@40 $generated@@33 $generated@@153 $generated@@44 $generated@@154)))))))
(let (($generated@@164  (and (=> (= (ControlFlow 0 2) (- 0 4)) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= $generated@@153 $generated@@35)) (not true))) (=> (or (not (= $generated@@153 $generated@@35)) (not true)) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@40 $generated@@33 $generated@@153 $generated@@44 $generated@@155)))))))
(let (($generated@@165  (=> (= $generated@@156 ($generated@@96 $generated@@35 $generated@@155 $generated@@1 $generated@@157)) (and (=> (= (ControlFlow 0 9) (- 0 11)) (or (not (= $generated@@157 $generated@@35)) (not true))) (=> (or (not (= $generated@@157 $generated@@35)) (not true)) (and (=> (= (ControlFlow 0 9) (- 0 10)) ($generated@@18 ($generated@@95 $generated@@33 $generated@@53 $generated@@14 $generated@@156 $generated@@157 $generated@@47))) (=> ($generated@@18 ($generated@@95 $generated@@33 $generated@@53 $generated@@14 $generated@@156 $generated@@157 $generated@@47)) (=> (and (and (and (= $generated@@154 ($generated@@56 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@155 $generated@@157 ($generated@@56 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@155 $generated@@157) $generated@@47 ($generated@@84 $generated@@33 $generated@@35)))) ($generated@@87 $generated@@154)) (and (or (not (= $generated@@153 $generated@@35)) (not true)) ($generated@@32 $generated@@33 $generated@@153 $generated@@38))) (and (and (not ($generated@@18 ($generated@@51 $generated@@14 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@154 $generated@@153) $generated@@1)))) (= $generated@@158 ($generated@@56 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@154 $generated@@153 ($generated@@56 $generated@@53 $generated@@54 ($generated@@52 $generated@@33 ($generated@@55 $generated@@53 $generated@@54) $generated@@154 $generated@@153) $generated@@1 ($generated@@84 $generated@@14 ($generated@@17 true)))))) (and ($generated@@87 $generated@@158) ($generated@@159 $generated@@158)))) (and (=> (= (ControlFlow 0 9) 2) $generated@@164) (=> (= (ControlFlow 0 9) 6) $generated@@163))))))))))
(let (($generated@@166  (=> (and (and (and ($generated@@87 $generated@@155) ($generated@@159 $generated@@155)) (and ($generated@@32 $generated@@33 $generated@@157 $generated@@41) ($generated@@40 $generated@@33 $generated@@157 $generated@@41 $generated@@155))) (and (and (=> $generated@@160 (and ($generated@@32 $generated@@33 $generated@@161 $generated@@44) ($generated@@40 $generated@@33 $generated@@161 $generated@@44 $generated@@155))) true) (and (= 1 $generated@@162) (= (ControlFlow 0 12) 9)))) $generated@@165)))
$generated@@166)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
