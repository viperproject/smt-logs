(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 () Int)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@36 (Int) Bool)
(declare-fun $generated@@37 (Int Int) Int)
(declare-fun $generated@@39 (T@T T@U T@U) Bool)
(declare-fun $generated@@41 () Bool)
(declare-fun $generated@@42 () Int)
(declare-fun $generated@@46 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@T T@T) T@T)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@107 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (forall (($generated@@26 Int) ) (! (= ($generated@@25 $generated@@26) $generated@@26)
 :pattern ( ($generated@@25 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 ($generated@@30 $generated@@33 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@30 $generated@@33 $generated@@32))
)))
(assert  (=> (<= 0 $generated@@34) (forall (($generated@@38 Int) ) (!  (=> (or ($generated@@36 $generated@@38) (< 0 $generated@@34)) (= ($generated@@35 $generated@@38) (- 10 ($generated@@37 $generated@@38 $generated@@38))))
 :pattern ( ($generated@@35 $generated@@38))
))))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@6 $generated@@40 $generated@@22) (<= ($generated@@25 0) ($generated@@11 $generated@@40)))
 :pattern ( ($generated@@39 $generated@@6 $generated@@40 $generated@@22))
)))
(assert  (=> (<= 1 $generated@@34) (=> (or $generated@@41 (< 1 $generated@@34)) (= $generated@@42 ($generated@@25 2)))))
(assert  (=> (<= 1 $generated@@34) (=> (or $generated@@41 (< 1 $generated@@34)) (= $generated@@42 ($generated@@25 2)))))
(assert  (=> (<= 0 $generated@@34) (forall (($generated@@43 Int) ) (!  (=> (or ($generated@@36 ($generated@@25 $generated@@43)) (< 0 $generated@@34)) (= ($generated@@35 ($generated@@25 $generated@@43)) ($generated@@25 (- 10 ($generated@@37 ($generated@@25 $generated@@43) ($generated@@25 $generated@@43))))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@25 $generated@@43)))
))))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@30 $generated@@45 ($generated@@31 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@31 $generated@@45 $generated@@44))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@46 $generated@@57 $generated@@58 $generated@@59 ($generated@@53 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@62 $generated@@63) $generated@@60)
 :weight 0
)) (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@69 $generated@@71) (= ($generated@@46 $generated@@64 $generated@@65 $generated@@66 ($generated@@53 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@46 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@46 $generated@@73 $generated@@74 $generated@@75 ($generated@@53 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@46 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)))) (= ($generated@@4 $generated@@47) 3)) (= ($generated@@4 $generated@@48) 4)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@50 $generated@@82 $generated@@83 ($generated@@54 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@84) $generated@@86) $generated@@84)
 :weight 0
))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@91 $generated@@92) (= ($generated@@50 $generated@@87 $generated@@88 ($generated@@54 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@92) ($generated@@50 $generated@@87 $generated@@88 $generated@@90 $generated@@92)))
 :weight 0
))) (= ($generated@@4 $generated@@51) 5)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (= ($generated@@4 ($generated@@52 $generated@@93 $generated@@94)) 6))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@55 ($generated@@52 $generated@@95 $generated@@96)) $generated@@95)
 :pattern ( ($generated@@52 $generated@@95 $generated@@96))
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@56 ($generated@@52 $generated@@97 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@52 $generated@@97 $generated@@98))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 Bool) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@9 ($generated@@46 $generated@@47 $generated@@48 $generated@@5 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))  (=> (and (or (not (= $generated@@103 $generated@@99)) (not true)) ($generated@@9 ($generated@@30 $generated@@5 ($generated@@50 $generated@@48 $generated@@51 ($generated@@50 $generated@@47 ($generated@@52 $generated@@48 $generated@@51) $generated@@100 $generated@@103) $generated@@101)))) $generated@@102))
 :pattern ( ($generated@@46 $generated@@47 $generated@@48 $generated@@5 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 Int) ($generated@@106 Int) ) (! (= ($generated@@37 $generated@@105 $generated@@106) (* $generated@@105 $generated@@106))
 :pattern ( ($generated@@37 $generated@@105 $generated@@106))
)))
(assert (= ($generated@@20 $generated@@22) $generated@@2))
(assert (= ($generated@@107 $generated@@22) $generated@@3))
(assert (forall (($generated@@108 Int) ) (! (= ($generated@@31 $generated@@6 ($generated@@10 ($generated@@25 $generated@@108))) ($generated@@27 $generated@@51 ($generated@@31 $generated@@6 ($generated@@10 $generated@@108))))
 :pattern ( ($generated@@31 $generated@@6 ($generated@@10 ($generated@@25 $generated@@108))))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@31 $generated@@110 ($generated@@27 $generated@@110 $generated@@109)) ($generated@@27 $generated@@51 ($generated@@31 $generated@@110 $generated@@109)))
 :pattern ( ($generated@@31 $generated@@110 ($generated@@27 $generated@@110 $generated@@109)))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! ($generated@@21 $generated@@6 $generated@@112 $generated $generated@@111)
 :pattern ( ($generated@@21 $generated@@6 $generated@@112 $generated $generated@@111))
)))
(assert (forall (($generated@@113 T@U) ) (! ($generated@@39 $generated@@6 $generated@@113 $generated)
 :pattern ( ($generated@@39 $generated@@6 $generated@@113 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 23) (let (($generated@@127  (=> (= (ControlFlow 0 5) (- 0 4)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@8 true))))))
(let (($generated@@128  (=> (and (not (exists (($generated@@129 Int) ($generated@@130 Int) ($generated@@131 Int) ) (!  (and (and (= $generated@@131 (+ $generated@@129 2)) (= $generated@@130 (+ $generated@@129 1))) (and (and (<= ($generated@@25 0) $generated@@129) (< $generated@@129 10)) (or (= ($generated@@35 $generated@@129) ($generated@@35 $generated@@130)) (= ($generated@@35 $generated@@129) ($generated@@35 $generated@@131)))))
 :pattern ( ($generated@@35 $generated@@131) ($generated@@35 $generated@@130) ($generated@@35 $generated@@129))
))) (= (ControlFlow 0 7) 5)) $generated@@127)))
(let (($generated@@132  (=> (and (and (and (<= ($generated@@25 0) $generated@@114) (< $generated@@114 10)) (or (= ($generated@@35 $generated@@114) ($generated@@35 $generated@@115)) (= ($generated@@35 $generated@@114) ($generated@@35 $generated@@116)))) (= (ControlFlow 0 6) 5)) $generated@@127)))
(let (($generated@@133  (=> (forall (($generated@@134 Int) ($generated@@135 Int) ($generated@@136 Int) ) (!  (=> (and (= $generated@@136 (+ $generated@@134 2)) (= $generated@@135 (+ $generated@@134 1))) (=> (<= ($generated@@25 0) $generated@@134) (=> (< $generated@@134 10) (and (and ($generated@@36 $generated@@134) ($generated@@36 $generated@@135)) (=> (or (not (= ($generated@@35 $generated@@134) ($generated@@35 $generated@@135))) (not true)) (and ($generated@@36 $generated@@134) ($generated@@36 $generated@@136)))))))
 :pattern ( ($generated@@35 $generated@@136) ($generated@@35 $generated@@135) ($generated@@35 $generated@@134))
)) (and (=> (= (ControlFlow 0 8) 6) $generated@@132) (=> (= (ControlFlow 0 8) 7) $generated@@128)))))
(let (($generated@@137  (=> (and (= ($generated@@35 $generated@@117) ($generated@@35 $generated@@118)) (= (ControlFlow 0 12) 8)) $generated@@133)))
(let (($generated@@138  (=> (and (or (not (= ($generated@@35 $generated@@117) ($generated@@35 $generated@@118))) (not true)) ($generated@@21 $generated@@6 ($generated@@10 $generated@@117) $generated $generated@@119)) (=> (and (and ($generated@@36 $generated@@117) ($generated@@21 $generated@@6 ($generated@@10 $generated@@120) $generated $generated@@119)) (and ($generated@@36 $generated@@120) (= (ControlFlow 0 11) 8))) $generated@@133))))
(let (($generated@@139  (=> (and (<= ($generated@@25 0) $generated@@117) (< $generated@@117 10)) (=> (and (and ($generated@@21 $generated@@6 ($generated@@10 $generated@@117) $generated $generated@@119) ($generated@@36 $generated@@117)) (and ($generated@@21 $generated@@6 ($generated@@10 $generated@@118) $generated $generated@@119) ($generated@@36 $generated@@118))) (and (=> (= (ControlFlow 0 13) 11) $generated@@138) (=> (= (ControlFlow 0 13) 12) $generated@@137))))))
(let (($generated@@140  (=> (and (not (and (<= ($generated@@25 0) $generated@@117) (< $generated@@117 10))) (= (ControlFlow 0 10) 8)) $generated@@133)))
(let (($generated@@141  (=> (< $generated@@117 ($generated@@25 0)) (and (=> (= (ControlFlow 0 15) 13) $generated@@139) (=> (= (ControlFlow 0 15) 10) $generated@@140)))))
(let (($generated@@142  (=> (<= ($generated@@25 0) $generated@@117) (and (=> (= (ControlFlow 0 14) 13) $generated@@139) (=> (= (ControlFlow 0 14) 10) $generated@@140)))))
(let (($generated@@143  (=> (and (= $generated@@120 (+ $generated@@117 2)) (= $generated@@118 (+ $generated@@117 1))) (and (=> (= (ControlFlow 0 16) 14) $generated@@142) (=> (= (ControlFlow 0 16) 15) $generated@@141)))))
(let (($generated@@144  (=> (and (not (and (= $generated@@120 (+ $generated@@117 2)) (= $generated@@118 (+ $generated@@117 1)))) (= (ControlFlow 0 9) 8)) $generated@@133)))
(let (($generated@@145  (=> (or (not (= $generated@@120 (+ $generated@@117 2))) (not true)) (and (=> (= (ControlFlow 0 18) 16) $generated@@143) (=> (= (ControlFlow 0 18) 9) $generated@@144)))))
(let (($generated@@146  (=> (= $generated@@120 (+ $generated@@117 2)) (and (=> (= (ControlFlow 0 17) 16) $generated@@143) (=> (= (ControlFlow 0 17) 9) $generated@@144)))))
(let (($generated@@147  (and (=> (= (ControlFlow 0 19) 17) $generated@@146) (=> (= (ControlFlow 0 19) 18) $generated@@145))))
(let (($generated@@148 true))
(let (($generated@@149 true))
(let (($generated@@150  (and (=> (= (ControlFlow 0 20) (- 0 21)) ($generated@@39 $generated@@6 ($generated@@10 ($generated@@25 1)) $generated@@22)) (=> ($generated@@39 $generated@@6 ($generated@@10 ($generated@@25 1)) $generated@@22) (=> (= $generated@@121 ($generated@@25 1)) (=> (and ($generated@@39 $generated@@6 ($generated@@10 $generated@@121) $generated@@22) (= $generated@@122 $generated@@121)) (and (and (=> (= (ControlFlow 0 20) 2) $generated@@149) (=> (= (ControlFlow 0 20) 19) $generated@@147)) (=> (= (ControlFlow 0 20) 3) $generated@@148))))))))
(let (($generated@@151 true))
(let (($generated@@152  (=> (= $generated@@123 ($generated@@49 $generated@@124 $generated@@119 $generated@@1 false)) (and (=> (= (ControlFlow 0 22) 1) $generated@@151) (=> (= (ControlFlow 0 22) 20) $generated@@150)))))
(let (($generated@@153  (=> (and (and ($generated@@125 $generated@@119) ($generated@@126 $generated@@119)) (and (= 1 $generated@@34) (= (ControlFlow 0 23) 22))) $generated@@152)))
$generated@@153))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
