(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@U Int) T@U)
(declare-fun $generated@@36 (T@U Int) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@U T@U T@U) Bool)
(declare-fun $generated@@47 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 (T@T T@T) T@T)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@81 (T@T) T@T)
(declare-fun $generated@@130 (T@U) T@U)
(declare-fun $generated@@131 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (= ($generated@@3 $generated@@28) 3))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (!  (=> (and ($generated@@27 $generated@@28 $generated@@32 ($generated@@30 $generated@@34)) ($generated@@31 $generated@@33 $generated@@34)) ($generated@@27 $generated@@28 ($generated@@29 $generated@@32 $generated@@33) ($generated@@30 $generated@@34)))
 :pattern ( ($generated@@27 $generated@@28 ($generated@@29 $generated@@32 $generated@@33) ($generated@@30 $generated@@34)))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 Int) ($generated@@39 Int) ) (!  (=> (and (and (<= 0 $generated@@39) (< $generated@@39 $generated@@38)) (< $generated@@39 ($generated@@20 $generated@@37))) (= ($generated@@35 ($generated@@36 $generated@@37 $generated@@38) $generated@@39) ($generated@@35 $generated@@37 $generated@@39)))
 :weight 25
 :pattern ( ($generated@@35 ($generated@@36 $generated@@37 $generated@@38) $generated@@39))
 :pattern ( ($generated@@35 $generated@@37 $generated@@39) ($generated@@36 $generated@@37 $generated@@38))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@20 ($generated@@29 $generated@@44 $generated@@45)) (+ 1 ($generated@@20 $generated@@44)))
 :pattern ( ($generated@@29 $generated@@44 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@46 ($generated@@41 $generated@@51 $generated@@48) $generated@@49 $generated@@50) ($generated@@47 $generated@@51 $generated@@48 $generated@@49 $generated@@50))
 :pattern ( ($generated@@46 ($generated@@41 $generated@@51 $generated@@48) $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 Int) ($generated@@54 T@U) ) (!  (and (=> (= $generated@@53 ($generated@@20 $generated@@52)) (= ($generated@@35 ($generated@@29 $generated@@52 $generated@@54) $generated@@53) $generated@@54)) (=> (or (not (= $generated@@53 ($generated@@20 $generated@@52))) (not true)) (= ($generated@@35 ($generated@@29 $generated@@52 $generated@@54) $generated@@53) ($generated@@35 $generated@@52 $generated@@53))))
 :pattern ( ($generated@@35 ($generated@@29 $generated@@52 $generated@@54) $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 Int) ) (!  (=> (and (<= 0 $generated@@56) (<= $generated@@56 ($generated@@20 $generated@@55))) (= ($generated@@20 ($generated@@36 $generated@@55 $generated@@56)) $generated@@56))
 :pattern ( ($generated@@20 ($generated@@36 $generated@@55 $generated@@56)))
)))
(assert (forall (($generated@@57 T@U) ) (!  (=> ($generated@@31 $generated@@57 $generated) (and (= ($generated@@41 $generated@@5 ($generated@@40 $generated@@5 $generated@@57)) $generated@@57) ($generated@@27 $generated@@5 ($generated@@40 $generated@@5 $generated@@57) $generated)))
 :pattern ( ($generated@@31 $generated@@57 $generated))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@31 ($generated@@41 $generated@@60 $generated@@58) $generated@@59) ($generated@@27 $generated@@60 $generated@@58 $generated@@59))
 :pattern ( ($generated@@31 ($generated@@41 $generated@@60 $generated@@58) $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ) (! (<= 0 ($generated@@20 $generated@@61))
 :pattern ( ($generated@@20 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@47 $generated@@28 $generated@@62 ($generated@@30 $generated@@63) $generated@@64) (forall (($generated@@65 Int) ) (!  (=> (and (<= 0 $generated@@65) (< $generated@@65 ($generated@@20 $generated@@62))) ($generated@@46 ($generated@@35 $generated@@62 $generated@@65) $generated@@63 $generated@@64))
 :pattern ( ($generated@@35 $generated@@62 $generated@@65))
)))
 :pattern ( ($generated@@47 $generated@@28 $generated@@62 ($generated@@30 $generated@@63) $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@66 ($generated@@30 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@30 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@19 ($generated@@30 $generated@@68)) $generated@@1)
 :pattern ( ($generated@@30 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@40 $generated@@70 ($generated@@41 $generated@@70 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@41 $generated@@70 $generated@@69))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@71 $generated@@82 $generated@@83 $generated@@84 ($generated@@78 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@87 $generated@@88) $generated@@85)
 :weight 0
)) (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@71 $generated@@89 $generated@@90 $generated@@91 ($generated@@78 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@71 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@71 $generated@@98 $generated@@99 $generated@@100 ($generated@@78 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)))) (= ($generated@@3 $generated@@72) 4)) (= ($generated@@3 $generated@@73) 5)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@75 $generated@@107 $generated@@108 ($generated@@79 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@111) $generated@@109)
 :weight 0
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@116 $generated@@117) (= ($generated@@75 $generated@@112 $generated@@113 ($generated@@79 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@117) ($generated@@75 $generated@@112 $generated@@113 $generated@@115 $generated@@117)))
 :weight 0
))) (= ($generated@@3 $generated@@76) 6)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (= ($generated@@3 ($generated@@77 $generated@@118 $generated@@119)) 7))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@80 ($generated@@77 $generated@@120 $generated@@121)) $generated@@120)
 :pattern ( ($generated@@77 $generated@@120 $generated@@121))
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@81 ($generated@@77 $generated@@122 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@77 $generated@@122 $generated@@123))
))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@8 ($generated@@71 $generated@@72 $generated@@73 $generated@@4 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@8 ($generated@@40 $generated@@4 ($generated@@75 $generated@@73 $generated@@76 ($generated@@75 $generated@@72 ($generated@@77 $generated@@73 $generated@@76) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@71 $generated@@72 $generated@@73 $generated@@4 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (and (= ($generated@@130 ($generated@@29 $generated@@132 $generated@@133)) $generated@@132) (= ($generated@@131 ($generated@@29 $generated@@132 $generated@@133)) $generated@@133))
 :pattern ( ($generated@@29 $generated@@132 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> ($generated@@31 $generated@@134 ($generated@@30 $generated@@135)) (and (= ($generated@@41 $generated@@28 ($generated@@40 $generated@@28 $generated@@134)) $generated@@134) ($generated@@27 $generated@@28 ($generated@@40 $generated@@28 $generated@@134) ($generated@@30 $generated@@135))))
 :pattern ( ($generated@@31 $generated@@134 ($generated@@30 $generated@@135)))
)))
(assert (forall (($generated@@136 Int) ) (! (= ($generated@@41 $generated@@5 ($generated@@9 ($generated@@22 $generated@@136))) ($generated@@24 $generated@@76 ($generated@@41 $generated@@5 ($generated@@9 $generated@@136))))
 :pattern ( ($generated@@41 $generated@@5 ($generated@@9 ($generated@@22 $generated@@136))))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@T) ) (! (= ($generated@@41 $generated@@138 ($generated@@24 $generated@@138 $generated@@137)) ($generated@@24 $generated@@76 ($generated@@41 $generated@@138 $generated@@137)))
 :pattern ( ($generated@@41 $generated@@138 ($generated@@24 $generated@@138 $generated@@137)))
)))
(assert (forall (($generated@@139 T@U) ) (!  (=> (= ($generated@@20 $generated@@139) 0) (= $generated@@139 $generated@@21))
 :pattern ( ($generated@@20 $generated@@139))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 Int) ) (!  (=> (= $generated@@141 0) (= ($generated@@36 $generated@@140 $generated@@141) $generated@@21))
 :pattern ( ($generated@@36 $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (! ($generated@@47 $generated@@5 $generated@@143 $generated $generated@@142)
 :pattern ( ($generated@@47 $generated@@5 $generated@@143 $generated $generated@@142))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@144 ($generated@@30 $generated@@145)) (forall (($generated@@146 Int) ) (!  (=> (and (<= 0 $generated@@146) (< $generated@@146 ($generated@@20 $generated@@144))) ($generated@@31 ($generated@@35 $generated@@144 $generated@@146) $generated@@145))
 :pattern ( ($generated@@35 $generated@@144 $generated@@146))
)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@144 ($generated@@30 $generated@@145)))
)))
(assert (forall (($generated@@147 T@U) ) (! ($generated@@27 $generated@@5 $generated@@147 $generated)
 :pattern ( ($generated@@27 $generated@@5 $generated@@147 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@157  (=> (= $generated@@148 ($generated@@74 $generated@@149 $generated@@150 $generated@@2 false)) (=> (and (= $generated@@151 ($generated@@24 $generated@@28 ($generated@@29 ($generated@@29 ($generated@@29 $generated@@21 ($generated@@41 $generated@@5 ($generated@@9 ($generated@@22 1)))) ($generated@@41 $generated@@5 ($generated@@9 ($generated@@22 2)))) ($generated@@41 $generated@@5 ($generated@@9 ($generated@@22 3)))))) (= (ControlFlow 0 2) (- 0 1))) (and (<= 0 ($generated@@22 4)) (<= ($generated@@22 4) ($generated@@20 $generated@@151)))))))
(let (($generated@@158  (=> (and ($generated@@152 $generated@@150) ($generated@@153 $generated@@150)) (=> (and (and ($generated@@27 $generated@@28 $generated@@154 ($generated@@30 $generated)) ($generated@@47 $generated@@28 $generated@@154 ($generated@@30 $generated) $generated@@150)) true) (=> (and (and (and ($generated@@27 $generated@@28 $generated@@155 ($generated@@30 $generated)) ($generated@@47 $generated@@28 $generated@@155 ($generated@@30 $generated) $generated@@150)) true) (and (= 0 $generated@@156) (= (ControlFlow 0 3) 2))) $generated@@157)))))
$generated@@158)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
