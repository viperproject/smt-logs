(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@U) Int)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@U Int) T@U)
(declare-fun $generated@@39 (T@U) Int)
(declare-fun $generated@@40 (T@U) Int)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@50 (T@U) T@U)
(declare-fun $generated@@54 (Int) T@U)
(declare-fun $generated@@58 (T@U T@U T@U) Bool)
(declare-fun $generated@@59 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@64 (T@U T@U) Bool)
(declare-fun $generated@@82 (T@U) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 () T@T)
(declare-fun $generated@@93 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@94 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 (T@T T@T) T@T)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@T) T@T)
(declare-fun $generated@@100 (T@T) T@T)
(declare-fun $generated@@149 (T@U) Bool)
(declare-fun $generated@@156 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert  (and (= ($generated@@6 $generated@@25) 3) (= ($generated@@6 $generated@@37) 4)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (!  (=> (or ($generated@@26 ($generated@@24 $generated@@25 $generated@@41) ($generated@@24 $generated@@25 $generated@@42)) (and (< 1 $generated@@22) (and ($generated@@27 $generated@@25 $generated@@41 ($generated@@28 $generated@@29)) ($generated@@27 $generated@@25 $generated@@42 ($generated@@28 $generated))))) (and (=> ($generated@@30 $generated@@42 ($generated@@31 $generated@@8 ($generated@@12 0))) (=> (= ($generated@@32 ($generated@@24 $generated@@25 $generated@@42)) ($generated@@33 0)) (and ($generated@@34 ($generated@@24 $generated@@25 $generated@@42)) ($generated@@35 ($generated@@36 $generated@@37 ($generated@@38 ($generated@@24 $generated@@25 $generated@@41) ($generated@@33 ($generated@@39 ($generated@@24 $generated@@25 $generated@@42))))))))) (= ($generated@@23 ($generated@@24 $generated@@25 $generated@@41) ($generated@@24 $generated@@25 $generated@@42))  (=> (and ($generated@@30 $generated@@42 ($generated@@31 $generated@@8 ($generated@@12 0))) (= ($generated@@32 ($generated@@24 $generated@@25 $generated@@42)) ($generated@@33 0))) (= ($generated@@40 ($generated@@36 $generated@@37 ($generated@@38 ($generated@@24 $generated@@25 $generated@@41) ($generated@@33 ($generated@@39 ($generated@@24 $generated@@25 $generated@@42)))))) ($generated@@33 0))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@25 $generated@@41) ($generated@@24 $generated@@25 $generated@@42)))
))))
(assert (= ($generated@@43 $generated) $generated@@0))
(assert (forall (($generated@@45 T@U) ) (!  (not ($generated@@30 $generated@@44 $generated@@45))
 :pattern ( ($generated@@30 $generated@@44 $generated@@45))
)))
(assert (= ($generated@@32 $generated@@44) 0))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@27 $generated@@37 $generated@@46 $generated@@29) ($generated@@35 $generated@@46))
 :pattern ( ($generated@@35 $generated@@46) ($generated@@27 $generated@@37 $generated@@46 $generated@@29))
)))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@33 $generated@@47) $generated@@47)
 :pattern ( ($generated@@33 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@24 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@24 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@35 $generated@@51) (= ($generated@@50 $generated@@51) $generated@@4))
 :pattern ( ($generated@@35 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@31 $generated@@53 ($generated@@36 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@36 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@35 $generated@@55) (exists (($generated@@56 Int) ) (= $generated@@55 ($generated@@54 $generated@@56))))
 :pattern ( ($generated@@35 $generated@@55))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@57 T@U) ) (!  (=> (or ($generated@@34 $generated@@57) (and (< 0 $generated@@22) (and ($generated@@27 $generated@@25 $generated@@57 ($generated@@28 $generated)) (or (not (= ($generated@@32 $generated@@57) 0)) (not true))))) (= ($generated@@39 $generated@@57) ($generated@@13 ($generated@@36 $generated@@8 ($generated@@38 $generated@@57 ($generated@@33 0))))))
 :pattern ( ($generated@@39 $generated@@57))
))))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@58 ($generated@@31 $generated@@63 $generated@@60) $generated@@61 $generated@@62) ($generated@@59 $generated@@63 $generated@@60 $generated@@61 $generated@@62))
 :pattern ( ($generated@@58 ($generated@@31 $generated@@63 $generated@@60) $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ) (!  (=> ($generated@@64 $generated@@65 $generated@@29) (and (= ($generated@@31 $generated@@37 ($generated@@36 $generated@@37 $generated@@65)) $generated@@65) ($generated@@27 $generated@@37 ($generated@@36 $generated@@37 $generated@@65) $generated@@29)))
 :pattern ( ($generated@@64 $generated@@65 $generated@@29))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> (or ($generated@@26 $generated@@66 $generated@@67) (and (< 1 $generated@@22) (and ($generated@@27 $generated@@25 $generated@@66 ($generated@@28 $generated@@29)) ($generated@@27 $generated@@25 $generated@@67 ($generated@@28 $generated))))) (and (=> ($generated@@30 $generated@@67 ($generated@@31 $generated@@8 ($generated@@12 0))) (=> (= ($generated@@32 $generated@@67) ($generated@@33 0)) (and ($generated@@34 $generated@@67) ($generated@@35 ($generated@@36 $generated@@37 ($generated@@38 $generated@@66 ($generated@@39 $generated@@67))))))) (= ($generated@@23 $generated@@66 $generated@@67)  (=> (and ($generated@@30 $generated@@67 ($generated@@31 $generated@@8 ($generated@@12 0))) (= ($generated@@32 $generated@@67) ($generated@@33 0))) (= ($generated@@40 ($generated@@36 $generated@@37 ($generated@@38 $generated@@66 ($generated@@39 $generated@@67)))) ($generated@@33 0))))))
 :pattern ( ($generated@@23 $generated@@66 $generated@@67))
))))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@30 $generated@@68 $generated@@69) (exists (($generated@@70 Int) ) (!  (and (and (<= 0 $generated@@70) (< $generated@@70 ($generated@@32 $generated@@68))) (= ($generated@@38 $generated@@68 $generated@@70) $generated@@69))
 :pattern ( ($generated@@38 $generated@@68 $generated@@70))
)))
 :pattern ( ($generated@@30 $generated@@68 $generated@@69))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@71 T@U) ) (!  (=> (or ($generated@@34 ($generated@@24 $generated@@25 $generated@@71)) (and (< 0 $generated@@22) (and ($generated@@27 $generated@@25 $generated@@71 ($generated@@28 $generated)) (or (not (= ($generated@@32 ($generated@@24 $generated@@25 $generated@@71)) 0)) (not true))))) (= ($generated@@39 ($generated@@24 $generated@@25 $generated@@71)) ($generated@@13 ($generated@@36 $generated@@8 ($generated@@38 ($generated@@24 $generated@@25 $generated@@71) ($generated@@33 0))))))
 :weight 3
 :pattern ( ($generated@@39 ($generated@@24 $generated@@25 $generated@@71)))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@72 T@U) ) (!  (=> (or ($generated@@34 $generated@@72) (and (< 0 $generated@@22) (and ($generated@@27 $generated@@25 $generated@@72 ($generated@@28 $generated)) (or (not (= ($generated@@32 $generated@@72) 0)) (not true))))) ($generated@@30 $generated@@72 ($generated@@31 $generated@@8 ($generated@@12 ($generated@@39 $generated@@72)))))
 :pattern ( ($generated@@39 $generated@@72))
))))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@64 $generated@@73 $generated) (and (= ($generated@@31 $generated@@8 ($generated@@36 $generated@@8 $generated@@73)) $generated@@73) ($generated@@27 $generated@@8 ($generated@@36 $generated@@8 $generated@@73) $generated)))
 :pattern ( ($generated@@64 $generated@@73 $generated))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@64 ($generated@@31 $generated@@76 $generated@@74) $generated@@75) ($generated@@27 $generated@@76 $generated@@74 $generated@@75))
 :pattern ( ($generated@@64 ($generated@@31 $generated@@76 $generated@@74) $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ) (! (<= 0 ($generated@@32 $generated@@77))
 :pattern ( ($generated@@32 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@59 $generated@@25 $generated@@78 ($generated@@28 $generated@@79) $generated@@80) (forall (($generated@@81 Int) ) (!  (=> (and (<= 0 $generated@@81) (< $generated@@81 ($generated@@32 $generated@@78))) ($generated@@58 ($generated@@38 $generated@@78 $generated@@81) $generated@@79 $generated@@80))
 :pattern ( ($generated@@38 $generated@@78 $generated@@81))
)))
 :pattern ( ($generated@@59 $generated@@25 $generated@@78 ($generated@@28 $generated@@79) $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@82 ($generated@@28 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@28 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@43 ($generated@@28 $generated@@84)) $generated@@1)
 :pattern ( ($generated@@28 $generated@@84))
)))
(assert (forall (($generated@@85 Int) ) (! (= ($generated@@50 ($generated@@54 $generated@@85)) $generated@@4)
 :pattern ( ($generated@@54 $generated@@85))
)))
(assert (forall (($generated@@86 Int) ) (! (= ($generated@@40 ($generated@@54 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@54 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@36 $generated@@88 ($generated@@31 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@31 $generated@@88 $generated@@87))
)))
(assert (forall (($generated@@89 Int) ) (! (= ($generated@@27 $generated@@37 ($generated@@54 $generated@@89) $generated@@29) ($generated@@27 $generated@@8 ($generated@@12 $generated@@89) $generated))
 :pattern ( ($generated@@27 $generated@@37 ($generated@@54 $generated@@89) $generated@@29))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@90 $generated@@101 $generated@@102 $generated@@103 ($generated@@97 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@106 $generated@@107) $generated@@104)
 :weight 0
)) (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@90 $generated@@108 $generated@@109 $generated@@110 ($generated@@97 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@90 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@90 $generated@@117 $generated@@118 $generated@@119 ($generated@@97 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@90 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)))) (= ($generated@@6 $generated@@91) 5)) (= ($generated@@6 $generated@@92) 6)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@94 $generated@@126 $generated@@127 ($generated@@98 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@128) $generated@@130) $generated@@128)
 :weight 0
))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (!  (or (= $generated@@135 $generated@@136) (= ($generated@@94 $generated@@131 $generated@@132 ($generated@@98 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@133) $generated@@136) ($generated@@94 $generated@@131 $generated@@132 $generated@@134 $generated@@136)))
 :weight 0
))) (= ($generated@@6 $generated@@95) 7)) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (= ($generated@@6 ($generated@@96 $generated@@137 $generated@@138)) 8))) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (! (= ($generated@@99 ($generated@@96 $generated@@139 $generated@@140)) $generated@@139)
 :pattern ( ($generated@@96 $generated@@139 $generated@@140))
))) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (! (= ($generated@@100 ($generated@@96 $generated@@141 $generated@@142)) $generated@@142)
 :pattern ( ($generated@@96 $generated@@141 $generated@@142))
))))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 Bool) ($generated@@147 T@U) ($generated@@148 T@U) ) (! (= ($generated@@11 ($generated@@90 $generated@@91 $generated@@92 $generated@@7 ($generated@@93 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))  (=> (and (or (not (= $generated@@147 $generated@@143)) (not true)) ($generated@@11 ($generated@@36 $generated@@7 ($generated@@94 $generated@@92 $generated@@95 ($generated@@94 $generated@@91 ($generated@@96 $generated@@92 $generated@@95) $generated@@144 $generated@@147) $generated@@145)))) $generated@@146))
 :pattern ( ($generated@@90 $generated@@91 $generated@@92 $generated@@7 ($generated@@93 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (!  (=> (and ($generated@@149 $generated@@151) (and ($generated@@35 $generated@@150) ($generated@@59 $generated@@37 $generated@@150 $generated@@29 $generated@@151))) ($generated@@59 $generated@@8 ($generated@@12 ($generated@@40 $generated@@150)) $generated $generated@@151))
 :pattern ( ($generated@@59 $generated@@8 ($generated@@12 ($generated@@40 $generated@@150)) $generated $generated@@151))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> ($generated@@64 $generated@@152 ($generated@@28 $generated@@153)) (and (= ($generated@@31 $generated@@25 ($generated@@36 $generated@@25 $generated@@152)) $generated@@152) ($generated@@27 $generated@@25 ($generated@@36 $generated@@25 $generated@@152) ($generated@@28 $generated@@153))))
 :pattern ( ($generated@@64 $generated@@152 ($generated@@28 $generated@@153)))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> (and ($generated@@149 $generated@@155) ($generated@@27 $generated@@37 $generated@@154 $generated@@29)) ($generated@@59 $generated@@37 $generated@@154 $generated@@29 $generated@@155))
 :pattern ( ($generated@@59 $generated@@37 $generated@@154 $generated@@29 $generated@@155))
)))
(assert (= ($generated@@43 $generated@@29) $generated@@3))
(assert (= ($generated@@156 $generated@@29) $generated@@5))
(assert (forall (($generated@@157 Int) ) (! (= ($generated@@31 $generated@@8 ($generated@@12 ($generated@@33 $generated@@157))) ($generated@@24 $generated@@95 ($generated@@31 $generated@@8 ($generated@@12 $generated@@157))))
 :pattern ( ($generated@@31 $generated@@8 ($generated@@12 ($generated@@33 $generated@@157))))
)))
(assert (forall (($generated@@158 Int) ) (! (= ($generated@@54 ($generated@@33 $generated@@158)) ($generated@@24 $generated@@37 ($generated@@54 $generated@@158)))
 :pattern ( ($generated@@54 ($generated@@33 $generated@@158)))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@T) ) (! (= ($generated@@31 $generated@@160 ($generated@@24 $generated@@160 $generated@@159)) ($generated@@24 $generated@@95 ($generated@@31 $generated@@160 $generated@@159)))
 :pattern ( ($generated@@31 $generated@@160 ($generated@@24 $generated@@160 $generated@@159)))
)))
(assert (forall (($generated@@161 T@U) ) (!  (=> (= ($generated@@32 $generated@@161) 0) (= $generated@@161 $generated@@44))
 :pattern ( ($generated@@32 $generated@@161))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@U) ) (! ($generated@@59 $generated@@8 $generated@@163 $generated $generated@@162)
 :pattern ( ($generated@@59 $generated@@8 $generated@@163 $generated $generated@@162))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (! (= ($generated@@27 $generated@@25 $generated@@164 ($generated@@28 $generated@@165)) (forall (($generated@@166 Int) ) (!  (=> (and (<= 0 $generated@@166) (< $generated@@166 ($generated@@32 $generated@@164))) ($generated@@64 ($generated@@38 $generated@@164 $generated@@166) $generated@@165))
 :pattern ( ($generated@@38 $generated@@164 $generated@@166))
)))
 :pattern ( ($generated@@27 $generated@@25 $generated@@164 ($generated@@28 $generated@@165)))
)))
(assert (forall (($generated@@167 T@U) ) (! ($generated@@27 $generated@@8 $generated@@167 $generated)
 :pattern ( ($generated@@27 $generated@@8 $generated@@167 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@174  (=> (= $generated@@168 ($generated@@93 $generated@@169 $generated@@170 $generated@@2 false)) (=> (and (= $generated@@171 ($generated@@24 $generated@@25 $generated@@44)) ($generated@@59 $generated@@25 $generated@@171 ($generated@@28 $generated@@29) $generated@@170)) (=> (and (and (= $generated@@172 ($generated@@24 $generated@@25 $generated@@44)) ($generated@@59 $generated@@25 $generated@@172 ($generated@@28 $generated) $generated@@170)) (and ($generated@@26 ($generated@@24 $generated@@25 $generated@@44) ($generated@@24 $generated@@25 $generated@@44)) ($generated@@26 ($generated@@24 $generated@@25 $generated@@44) ($generated@@24 $generated@@25 $generated@@44)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@26 ($generated@@24 $generated@@25 $generated@@44) ($generated@@24 $generated@@25 $generated@@44)) (or ($generated@@11 ($generated@@24 $generated@@7 ($generated@@10 ($generated@@23 ($generated@@24 $generated@@25 $generated@@44) ($generated@@24 $generated@@25 $generated@@44))))) (=> (and ($generated@@30 $generated@@44 ($generated@@31 $generated@@8 ($generated@@12 0))) (= ($generated@@32 ($generated@@24 $generated@@25 $generated@@44)) ($generated@@33 0))) (= ($generated@@40 ($generated@@36 $generated@@37 ($generated@@38 ($generated@@24 $generated@@25 $generated@@44) ($generated@@33 ($generated@@39 ($generated@@24 $generated@@25 $generated@@44)))))) ($generated@@33 0)))))) (=> (and ($generated@@11 ($generated@@24 $generated@@7 ($generated@@10 ($generated@@23 ($generated@@24 $generated@@25 $generated@@44) ($generated@@24 $generated@@25 $generated@@44))))) (= (ControlFlow 0 2) (- 0 1))) ($generated@@11 ($generated@@24 $generated@@7 ($generated@@10 false))))))))))
(let (($generated@@175  (=> (and (and ($generated@@149 $generated@@170) ($generated@@173 $generated@@170)) (and (= 2 $generated@@22) (= (ControlFlow 0 4) 2))) $generated@@174)))
$generated@@175)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
