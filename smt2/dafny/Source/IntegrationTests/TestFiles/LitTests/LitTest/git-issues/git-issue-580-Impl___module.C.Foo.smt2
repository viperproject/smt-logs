(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@T T@T) T@T)
(declare-fun $generated@@50 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@76 (T@T T@U) T@U)
(declare-fun $generated@@79 (T@T T@U) T@U)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@127 (T@U) T@U)
(declare-fun $generated@@128 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert ($generated@@25 $generated@@26))
(assert ($generated@@27 $generated@@26))
(assert (= ($generated@@9 $generated@@29) 3))
(assert (forall (($generated@@32 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@32 $generated@@26)  (or (= $generated@@32 $generated@@30) (= ($generated@@31 $generated@@32) $generated@@26)))
 :pattern ( ($generated@@28 $generated@@29 $generated@@32 $generated@@26))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@33 $generated@@29 $generated@@36 $generated@@34 $generated@@37) ($generated@@33 $generated@@29 $generated@@36 $generated@@35 $generated@@37))
 :pattern ( ($generated@@33 $generated@@29 $generated@@36 $generated@@34 $generated@@37))
 :pattern ( ($generated@@33 $generated@@29 $generated@@36 $generated@@35 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@33 $generated@@29 $generated@@40 $generated@@38 $generated@@41) ($generated@@33 $generated@@29 $generated@@40 $generated@@39 $generated@@41))
 :pattern ( ($generated@@33 $generated@@29 $generated@@40 $generated@@38 $generated@@41))
 :pattern ( ($generated@@33 $generated@@29 $generated@@40 $generated@@39 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@33 $generated@@29 $generated@@43 $generated@@42 $generated@@44) ($generated@@33 $generated@@29 $generated@@43 $generated@@26 $generated@@44))
 :pattern ( ($generated@@33 $generated@@29 $generated@@43 $generated@@42 $generated@@44))
 :pattern ( ($generated@@33 $generated@@29 $generated@@43 $generated@@26 $generated@@44))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@46 $generated@@53 $generated@@54 ($generated@@50 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@57) $generated@@55)
 :weight 0
)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@62 $generated@@63) (= ($generated@@46 $generated@@58 $generated@@59 ($generated@@50 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@60) $generated@@63) ($generated@@46 $generated@@58 $generated@@59 $generated@@61 $generated@@63)))
 :weight 0
))) (= ($generated@@9 $generated@@47) 4)) (= ($generated@@9 $generated@@48) 5)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (= ($generated@@9 ($generated@@49 $generated@@64 $generated@@65)) 6))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@51 ($generated@@49 $generated@@66 $generated@@67)) $generated@@66)
 :pattern ( ($generated@@49 $generated@@66 $generated@@67))
))) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@52 ($generated@@49 $generated@@68 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@49 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@33 $generated@@29 $generated@@70 $generated@@35 $generated@@71)  (or (= $generated@@70 $generated@@30) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@29 ($generated@@49 $generated@@47 $generated@@48) $generated@@71 $generated@@70) $generated)))))
 :pattern ( ($generated@@33 $generated@@29 $generated@@70 $generated@@35 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@33 $generated@@29 $generated@@72 $generated@@39 $generated@@73)  (or (= $generated@@72 $generated@@30) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@29 ($generated@@49 $generated@@47 $generated@@48) $generated@@73 $generated@@72) $generated)))))
 :pattern ( ($generated@@33 $generated@@29 $generated@@72 $generated@@39 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@33 $generated@@29 $generated@@74 $generated@@26 $generated@@75)  (or (= $generated@@74 $generated@@30) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@29 ($generated@@49 $generated@@47 $generated@@48) $generated@@75 $generated@@74) $generated)))))
 :pattern ( ($generated@@33 $generated@@29 $generated@@74 $generated@@26 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@76 $generated@@78 $generated@@77) $generated@@77)
 :pattern ( ($generated@@76 $generated@@78 $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@79 $generated@@81 ($generated@@45 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@45 $generated@@81 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@82 $generated@@34)  (and ($generated@@28 $generated@@29 $generated@@82 $generated@@35) (or (not (= $generated@@82 $generated@@30)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@82 $generated@@34))
 :pattern ( ($generated@@28 $generated@@29 $generated@@82 $generated@@35))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@83 $generated@@38)  (and ($generated@@28 $generated@@29 $generated@@83 $generated@@39) (or (not (= $generated@@83 $generated@@30)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@83 $generated@@38))
 :pattern ( ($generated@@28 $generated@@29 $generated@@83 $generated@@39))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@84 $generated@@42)  (and ($generated@@28 $generated@@29 $generated@@84 $generated@@26) (or (not (= $generated@@84 $generated@@30)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@84 $generated@@42))
 :pattern ( ($generated@@28 $generated@@29 $generated@@84 $generated@@26))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> ($generated@@33 $generated@@29 $generated@@85 $generated@@26 $generated@@86) ($generated@@33 $generated@@29 $generated@@85 $generated@@35 $generated@@86))
 :pattern ( ($generated@@33 $generated@@29 $generated@@85 $generated@@26 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> ($generated@@33 $generated@@29 $generated@@87 $generated@@26 $generated@@88) ($generated@@33 $generated@@29 $generated@@87 $generated@@39 $generated@@88))
 :pattern ( ($generated@@33 $generated@@29 $generated@@87 $generated@@26 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@45 $generated@@90 ($generated@@79 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@79 $generated@@90 $generated@@89))
)))
(assert  (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@91 $generated@@94 $generated@@95 $generated@@96 ($generated@@93 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@99 $generated@@100) $generated@@97)
 :weight 0
)) (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@91 $generated@@101 $generated@@102 $generated@@103 ($generated@@93 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@91 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@91 $generated@@110 $generated@@111 $generated@@112 ($generated@@93 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@91 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@14 ($generated@@91 $generated@@29 $generated@@47 $generated@@10 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@14 ($generated@@45 $generated@@10 ($generated@@46 $generated@@47 $generated@@48 ($generated@@46 $generated@@29 ($generated@@49 $generated@@47 $generated@@48) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@91 $generated@@29 $generated@@47 $generated@@10 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@125 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@125 $generated@@26) ($generated@@28 $generated@@29 $generated@@125 $generated@@35))
 :pattern ( ($generated@@28 $generated@@29 $generated@@125 $generated@@26))
)))
(assert (forall (($generated@@126 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@126 $generated@@26) ($generated@@28 $generated@@29 $generated@@126 $generated@@39))
 :pattern ( ($generated@@28 $generated@@29 $generated@@126 $generated@@26))
)))
(assert (= ($generated@@127 $generated@@35) $generated@@0))
(assert (= ($generated@@128 $generated@@35) $generated@@6))
(assert (= ($generated@@127 $generated@@34) $generated@@1))
(assert (= ($generated@@128 $generated@@34) $generated@@6))
(assert (= ($generated@@127 $generated@@39) $generated@@2))
(assert (= ($generated@@128 $generated@@39) $generated@@7))
(assert (= ($generated@@127 $generated@@38) $generated@@3))
(assert (= ($generated@@128 $generated@@38) $generated@@7))
(assert (= ($generated@@127 $generated@@26) $generated@@4))
(assert (= ($generated@@128 $generated@@26) $generated@@8))
(assert (= ($generated@@127 $generated@@42) $generated@@5))
(assert (= ($generated@@128 $generated@@42) $generated@@8))
(assert (forall (($generated@@129 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@129 $generated@@35)  (or (= $generated@@129 $generated@@30) ($generated@@25 ($generated@@31 $generated@@129))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@129 $generated@@35))
)))
(assert (forall (($generated@@130 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@130 $generated@@39)  (or (= $generated@@130 $generated@@30) ($generated@@27 ($generated@@31 $generated@@130))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@130 $generated@@39))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@79 $generated@@132 ($generated@@76 $generated@@132 $generated@@131)) ($generated@@76 $generated@@48 ($generated@@79 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@79 $generated@@132 ($generated@@76 $generated@@132 $generated@@131)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@139  (=> (and (= $generated@@133 ($generated@@92 $generated@@30 $generated@@134 $generated false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@14 ($generated@@76 $generated@@10 ($generated@@13 false))))))
(let (($generated@@140  (=> (and ($generated@@135 $generated@@134) ($generated@@136 $generated@@134)) (=> (and (and (or (not (= $generated@@137 $generated@@30)) (not true)) (and ($generated@@28 $generated@@29 $generated@@137 $generated@@42) ($generated@@33 $generated@@29 $generated@@137 $generated@@42 $generated@@134))) (and (= 0 $generated@@138) (= (ControlFlow 0 3) 2))) $generated@@139))))
$generated@@140)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
