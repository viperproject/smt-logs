(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U T@U) T@U)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@37 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@40 (T@U) Int)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U Int) T@U)
(declare-fun $generated@@46 (T@U Int) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (Int) Int)
(declare-fun $generated@@55 (T@U Int) T@U)
(declare-fun $generated@@63 (T@U T@U T@U) Bool)
(declare-fun $generated@@84 (T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@94 (T@T T@T) T@T)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@T) T@T)
(declare-fun $generated@@98 (T@T) T@T)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@156 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@5 $generated@@24) 3))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (!  (=> (or ($generated@@25 $generated@@27 ($generated@@23 $generated@@24 $generated@@28)) (and (< 0 $generated@@21) ($generated@@26 $generated@@28 $generated@@27))) (= ($generated@@22 $generated@@27 ($generated@@23 $generated@@24 $generated@@28)) ($generated@@23 $generated@@24 $generated@@28)))
 :weight 3
 :pattern ( ($generated@@22 $generated@@27 ($generated@@23 $generated@@24 $generated@@28)))
))))
(assert (= ($generated@@29 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@33) 4))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@36 T@U) ) (!  (=> (or ($generated@@31 $generated@@36) (and (< 1 $generated@@21) ($generated@@32 $generated@@33 $generated@@36 $generated@@34))) ($generated@@32 $generated@@33 ($generated@@30 $generated@@36) ($generated@@35 $generated)))
 :pattern ( ($generated@@30 $generated@@36))
))))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@37 $generated@@33 $generated@@38 $generated@@34 $generated@@39) ($generated@@37 $generated@@33 $generated@@38 ($generated@@35 $generated) $generated@@39))
 :pattern ( ($generated@@37 $generated@@33 $generated@@38 $generated@@34 $generated@@39))
)))
(assert (= ($generated@@40 $generated@@41) 0))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (!  (=> (or ($generated@@25 $generated@@42 $generated@@43) (and (< 0 $generated@@21) ($generated@@26 $generated@@43 $generated@@42))) ($generated@@26 ($generated@@22 $generated@@42 $generated@@43) $generated@@42))
 :pattern ( ($generated@@22 $generated@@42 $generated@@43))
))))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@49 T@U) ) (!  (=> (or ($generated@@31 ($generated@@23 $generated@@33 $generated@@49)) (and (< 1 $generated@@21) ($generated@@32 $generated@@33 $generated@@49 $generated@@34))) (and ($generated@@25 $generated@@34 ($generated@@44 $generated@@33 ($generated@@23 $generated@@33 $generated@@49))) (= ($generated@@30 ($generated@@23 $generated@@33 $generated@@49)) ($generated@@23 $generated@@33 ($generated@@45 ($generated@@46 ($generated@@23 $generated@@33 ($generated@@47 $generated@@33 ($generated@@22 $generated@@34 ($generated@@44 $generated@@33 ($generated@@23 $generated@@33 $generated@@49))))) ($generated@@48 2)) ($generated@@48 0))))))
 :weight 3
 :pattern ( ($generated@@30 ($generated@@23 $generated@@33 $generated@@49)))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 Int) ) (!  (=> (= $generated@@51 0) (= ($generated@@45 $generated@@50 $generated@@51) $generated@@50))
 :pattern ( ($generated@@45 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@52 Int) ) (! (= ($generated@@48 $generated@@52) $generated@@52)
 :pattern ( ($generated@@48 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@23 $generated@@54 $generated@@53) $generated@@53)
 :pattern ( ($generated@@23 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 Int) ($generated@@58 Int) ) (!  (=> (and (and (<= 0 $generated@@58) (< $generated@@58 $generated@@57)) (< $generated@@58 ($generated@@40 $generated@@56))) (= ($generated@@55 ($generated@@46 $generated@@56 $generated@@57) $generated@@58) ($generated@@55 $generated@@56 $generated@@58)))
 :weight 25
 :pattern ( ($generated@@55 ($generated@@46 $generated@@56 $generated@@57) $generated@@58))
 :pattern ( ($generated@@55 $generated@@56 $generated@@58) ($generated@@46 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 Int) ) (!  (=> (and (<= 0 $generated@@60) (<= $generated@@60 ($generated@@40 $generated@@59))) (= ($generated@@40 ($generated@@45 $generated@@59 $generated@@60)) (- ($generated@@40 $generated@@59) $generated@@60)))
 :pattern ( ($generated@@40 ($generated@@45 $generated@@59 $generated@@60)))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@44 $generated@@62 ($generated@@47 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@47 $generated@@62 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@63 ($generated@@44 $generated@@67 $generated@@64) $generated@@65 $generated@@66) ($generated@@37 $generated@@67 $generated@@64 $generated@@65 $generated@@66))
 :pattern ( ($generated@@63 ($generated@@44 $generated@@67 $generated@@64) $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 Int) ($generated@@70 Int) ) (!  (=> (and (and (<= 0 $generated@@69) (<= 0 $generated@@70)) (< $generated@@70 (- ($generated@@40 $generated@@68) $generated@@69))) (= ($generated@@55 ($generated@@45 $generated@@68 $generated@@69) $generated@@70) ($generated@@55 $generated@@68 (+ $generated@@70 $generated@@69))))
 :weight 25
 :pattern ( ($generated@@55 ($generated@@45 $generated@@68 $generated@@69) $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@26 $generated@@71 $generated@@34) (and (= ($generated@@44 $generated@@33 ($generated@@47 $generated@@33 $generated@@71)) $generated@@71) ($generated@@32 $generated@@33 ($generated@@47 $generated@@33 $generated@@71) $generated@@34)))
 :pattern ( ($generated@@26 $generated@@71 $generated@@34))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@72 $generated@@34)  (and ($generated@@32 $generated@@33 $generated@@72 ($generated@@35 $generated)) (= ($generated@@40 $generated@@72) ($generated@@48 2))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@72 $generated@@34))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 Int) ) (!  (=> (and (<= 0 $generated@@74) (<= $generated@@74 ($generated@@40 $generated@@73))) (= ($generated@@40 ($generated@@46 $generated@@73 $generated@@74)) $generated@@74))
 :pattern ( ($generated@@40 ($generated@@46 $generated@@73 $generated@@74)))
)))
(assert (forall (($generated@@75 T@U) ) (!  (=> ($generated@@26 $generated@@75 $generated) (and (= ($generated@@44 $generated@@7 ($generated@@47 $generated@@7 $generated@@75)) $generated@@75) ($generated@@32 $generated@@7 ($generated@@47 $generated@@7 $generated@@75) $generated)))
 :pattern ( ($generated@@26 $generated@@75 $generated))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@26 ($generated@@44 $generated@@78 $generated@@76) $generated@@77) ($generated@@32 $generated@@78 $generated@@76 $generated@@77))
 :pattern ( ($generated@@26 ($generated@@44 $generated@@78 $generated@@76) $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ) (! (<= 0 ($generated@@40 $generated@@79))
 :pattern ( ($generated@@40 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@37 $generated@@33 $generated@@80 ($generated@@35 $generated@@81) $generated@@82) (forall (($generated@@83 Int) ) (!  (=> (and (<= 0 $generated@@83) (< $generated@@83 ($generated@@40 $generated@@80))) ($generated@@63 ($generated@@55 $generated@@80 $generated@@83) $generated@@81 $generated@@82))
 :pattern ( ($generated@@55 $generated@@80 $generated@@83))
)))
 :pattern ( ($generated@@37 $generated@@33 $generated@@80 ($generated@@35 $generated@@81) $generated@@82))
)))
(assert (forall (($generated@@85 T@U) ) (! (= ($generated@@84 ($generated@@35 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@35 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@29 ($generated@@35 $generated@@86)) $generated@@1)
 :pattern ( ($generated@@35 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@47 $generated@@88 ($generated@@44 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@44 $generated@@88 $generated@@87))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@89 $generated@@99 $generated@@100 $generated@@101 ($generated@@95 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@104 $generated@@105) $generated@@102)
 :weight 0
)) (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@89 $generated@@106 $generated@@107 $generated@@108 ($generated@@95 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@89 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@89 $generated@@115 $generated@@116 $generated@@117 ($generated@@95 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@89 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)))) (= ($generated@@5 $generated@@90) 5)) (= ($generated@@5 $generated@@91) 6)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@93 $generated@@124 $generated@@125 ($generated@@96 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@126) $generated@@128) $generated@@126)
 :weight 0
))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@133 $generated@@134) (= ($generated@@93 $generated@@129 $generated@@130 ($generated@@96 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@131) $generated@@134) ($generated@@93 $generated@@129 $generated@@130 $generated@@132 $generated@@134)))
 :weight 0
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (= ($generated@@5 ($generated@@94 $generated@@135 $generated@@136)) 7))) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (! (= ($generated@@97 ($generated@@94 $generated@@137 $generated@@138)) $generated@@137)
 :pattern ( ($generated@@94 $generated@@137 $generated@@138))
))) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (! (= ($generated@@98 ($generated@@94 $generated@@139 $generated@@140)) $generated@@140)
 :pattern ( ($generated@@94 $generated@@139 $generated@@140))
))))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 Bool) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@10 ($generated@@89 $generated@@90 $generated@@91 $generated@@6 ($generated@@92 $generated@@141 $generated@@142 $generated@@143 $generated@@144) $generated@@145 $generated@@146))  (=> (and (or (not (= $generated@@145 $generated@@141)) (not true)) ($generated@@10 ($generated@@47 $generated@@6 ($generated@@93 $generated@@91 $generated@@24 ($generated@@93 $generated@@90 ($generated@@94 $generated@@91 $generated@@24) $generated@@142 $generated@@145) $generated@@143)))) $generated@@144))
 :pattern ( ($generated@@89 $generated@@90 $generated@@91 $generated@@6 ($generated@@92 $generated@@141 $generated@@142 $generated@@143 $generated@@144) $generated@@145 $generated@@146))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@147 T@U) ($generated@@148 T@U) ) (!  (=> (or ($generated@@25 $generated@@147 $generated@@148) (and (< 0 $generated@@21) ($generated@@26 $generated@@148 $generated@@147))) (= ($generated@@22 $generated@@147 $generated@@148) $generated@@148))
 :pattern ( ($generated@@22 $generated@@147 $generated@@148))
))))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (!  (=> ($generated@@26 $generated@@149 ($generated@@35 $generated@@150)) (and (= ($generated@@44 $generated@@33 ($generated@@47 $generated@@33 $generated@@149)) $generated@@149) ($generated@@32 $generated@@33 ($generated@@47 $generated@@33 $generated@@149) ($generated@@35 $generated@@150))))
 :pattern ( ($generated@@26 $generated@@149 ($generated@@35 $generated@@150)))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@151 T@U) ) (!  (=> (or ($generated@@31 $generated@@151) (and (< 1 $generated@@21) ($generated@@32 $generated@@33 $generated@@151 $generated@@34))) (and ($generated@@25 $generated@@34 ($generated@@44 $generated@@33 $generated@@151)) (= ($generated@@30 $generated@@151) ($generated@@45 ($generated@@46 ($generated@@47 $generated@@33 ($generated@@22 $generated@@34 ($generated@@44 $generated@@33 $generated@@151))) ($generated@@48 2)) ($generated@@48 0)))))
 :pattern ( ($generated@@30 $generated@@151))
))))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> (and (or ($generated@@25 $generated@@154 $generated@@155) (and (< 0 $generated@@21) (and ($generated@@26 $generated@@155 $generated@@154) ($generated@@63 $generated@@155 $generated@@154 $generated@@153)))) ($generated@@152 $generated@@153)) ($generated@@63 ($generated@@22 $generated@@154 $generated@@155) $generated@@154 $generated@@153))
 :pattern ( ($generated@@63 ($generated@@22 $generated@@154 $generated@@155) $generated@@154 $generated@@153))
))))
(assert (= ($generated@@29 $generated@@34) $generated@@3))
(assert (= ($generated@@156 $generated@@34) $generated@@4))
(assert (forall (($generated@@157 T@U) ($generated@@158 Int) ($generated@@159 Int) ) (!  (=> (and (and (<= 0 $generated@@158) (<= $generated@@158 $generated@@159)) (< $generated@@159 ($generated@@40 $generated@@157))) (= ($generated@@55 ($generated@@45 $generated@@157 $generated@@158) (- $generated@@159 $generated@@158)) ($generated@@55 $generated@@157 $generated@@159)))
 :weight 25
 :pattern ( ($generated@@55 $generated@@157 $generated@@159) ($generated@@45 $generated@@157 $generated@@158))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 Int) ($generated@@162 Int) ) (!  (=> (and (and (<= 0 $generated@@161) (<= 0 $generated@@162)) (<= (+ $generated@@161 $generated@@162) ($generated@@40 $generated@@160))) (= ($generated@@45 ($generated@@45 $generated@@160 $generated@@161) $generated@@162) ($generated@@45 $generated@@160 (+ $generated@@161 $generated@@162))))
 :pattern ( ($generated@@45 ($generated@@45 $generated@@160 $generated@@161) $generated@@162))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@44 $generated@@7 ($generated@@11 ($generated@@48 $generated@@163))) ($generated@@23 $generated@@24 ($generated@@44 $generated@@7 ($generated@@11 $generated@@163))))
 :pattern ( ($generated@@44 $generated@@7 ($generated@@11 ($generated@@48 $generated@@163))))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@T) ) (! (= ($generated@@44 $generated@@165 ($generated@@23 $generated@@165 $generated@@164)) ($generated@@23 $generated@@24 ($generated@@44 $generated@@165 $generated@@164)))
 :pattern ( ($generated@@44 $generated@@165 ($generated@@23 $generated@@165 $generated@@164)))
)))
(assert (forall (($generated@@166 T@U) ) (!  (=> (= ($generated@@40 $generated@@166) 0) (= $generated@@166 $generated@@41))
 :pattern ( ($generated@@40 $generated@@166))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 Int) ) (!  (=> (= $generated@@168 0) (= ($generated@@46 $generated@@167 $generated@@168) $generated@@41))
 :pattern ( ($generated@@46 $generated@@167 $generated@@168))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@U) ) (! ($generated@@37 $generated@@7 $generated@@170 $generated $generated@@169)
 :pattern ( ($generated@@37 $generated@@7 $generated@@170 $generated $generated@@169))
)))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@171 ($generated@@35 $generated@@172)) (forall (($generated@@173 Int) ) (!  (=> (and (<= 0 $generated@@173) (< $generated@@173 ($generated@@40 $generated@@171))) ($generated@@26 ($generated@@55 $generated@@171 $generated@@173) $generated@@172))
 :pattern ( ($generated@@55 $generated@@171 $generated@@173))
)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@171 ($generated@@35 $generated@@172)))
)))
(assert (forall (($generated@@174 T@U) ) (! ($generated@@32 $generated@@7 $generated@@174 $generated)
 :pattern ( ($generated@@32 $generated@@7 $generated@@174 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@180  (=> (and ($generated@@37 $generated@@33 $generated@@175 $generated@@34 $generated@@176) ($generated@@25 $generated@@34 ($generated@@44 $generated@@33 $generated@@175))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (and (<= 0 ($generated@@48 0)) (<= ($generated@@48 0) ($generated@@40 ($generated@@47 $generated@@33 ($generated@@22 $generated@@34 ($generated@@44 $generated@@33 $generated@@175))))))) (=> (and (<= 0 ($generated@@48 0)) (<= ($generated@@48 0) ($generated@@40 ($generated@@47 $generated@@33 ($generated@@22 $generated@@34 ($generated@@44 $generated@@33 $generated@@175)))))) (=> (= (ControlFlow 0 3) (- 0 2)) (and (<= ($generated@@48 0) ($generated@@48 2)) (<= ($generated@@48 2) ($generated@@40 ($generated@@47 $generated@@33 ($generated@@22 $generated@@34 ($generated@@44 $generated@@33 $generated@@175))))))))))))
(let (($generated@@181 true))
(let (($generated@@182  (=> (= $generated@@177 ($generated@@92 $generated@@178 $generated@@176 $generated@@2 false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@181) (=> (= (ControlFlow 0 5) 3) $generated@@180)))))
(let (($generated@@183  (=> (and (and (and ($generated@@152 $generated@@176) ($generated@@179 $generated@@176)) ($generated@@32 $generated@@33 $generated@@175 $generated@@34)) (and (= 1 $generated@@21) (= (ControlFlow 0 6) 5))) $generated@@182)))
$generated@@183)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
