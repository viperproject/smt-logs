(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@U Bool) T@U)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 (T@T T@T) T@T)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@55 (Int) Int)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@64 (T@U T@U T@U) Bool)
(declare-fun $generated@@65 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@74 () Int)
(declare-fun $generated@@75 () Bool)
(declare-fun $generated@@76 () Int)
(declare-fun $generated@@77 (Int Int) Int)
(declare-fun $generated@@87 (T@U) T@U)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 () T@T)
(declare-fun $generated@@95 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert  (and (and (forall (($generated@@25 T@T) ($generated@@26 T@T) ($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@20 $generated@@25 $generated@@26 ($generated@@24 $generated@@25 $generated@@26 $generated@@28 $generated@@29 $generated@@27) $generated@@29) $generated@@27)
 :weight 0
)) (forall (($generated@@30 T@T) ($generated@@31 T@T) ($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ) (!  (or (= $generated@@34 $generated@@35) (= ($generated@@20 $generated@@30 $generated@@31 ($generated@@24 $generated@@30 $generated@@31 $generated@@33 $generated@@34 $generated@@32) $generated@@35) ($generated@@20 $generated@@30 $generated@@31 $generated@@33 $generated@@35)))
 :weight 0
))) (= ($generated@@3 $generated@@21) 3)))
(assert (forall (($generated@@36 T@U) ($generated@@37 Bool) ($generated@@38 T@U) ) (! (= ($generated@@8 ($generated@@20 $generated@@21 $generated@@4 ($generated@@22 $generated@@36 $generated@@37) $generated@@38))  (and ($generated@@23 $generated@@38 $generated@@36) $generated@@37))
 :pattern ( ($generated@@20 $generated@@21 $generated@@4 ($generated@@22 $generated@@36 $generated@@37) $generated@@38))
)))
(assert ($generated@@39 $generated@@40))
(assert  (and (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (= ($generated@@3 ($generated@@42 $generated@@46 $generated@@47)) 4)) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@44 ($generated@@42 $generated@@48 $generated@@49)) $generated@@48)
 :pattern ( ($generated@@42 $generated@@48 $generated@@49))
))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@50 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@42 $generated@@50 $generated@@51))
))))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@41 ($generated@@42 $generated@@21 $generated@@4) $generated@@52 ($generated@@43 $generated@@53)) (forall (($generated@@54 T@U) ) (!  (=> ($generated@@8 ($generated@@20 $generated@@21 $generated@@4 $generated@@52 $generated@@54)) ($generated@@23 $generated@@54 $generated@@53))
 :pattern ( ($generated@@20 $generated@@21 $generated@@4 $generated@@52 $generated@@54))
)))
 :pattern ( ($generated@@41 ($generated@@42 $generated@@21 $generated@@4) $generated@@52 ($generated@@43 $generated@@53)))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@55 $generated@@56) $generated@@56)
 :pattern ( ($generated@@55 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 $generated@@58) $generated@@58)
 :pattern ( ($generated@@57 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@61 $generated@@63 ($generated@@60 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@60 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@64 ($generated@@61 $generated@@69 $generated@@66) $generated@@67 $generated@@68) ($generated@@65 $generated@@69 $generated@@66 $generated@@67 $generated@@68))
 :pattern ( ($generated@@64 ($generated@@61 $generated@@69 $generated@@66) $generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@65 ($generated@@42 $generated@@21 $generated@@4) $generated@@70 ($generated@@43 $generated@@71) $generated@@72) (forall (($generated@@73 T@U) ) (!  (=> ($generated@@8 ($generated@@20 $generated@@21 $generated@@4 $generated@@70 $generated@@73)) ($generated@@64 $generated@@73 $generated@@71 $generated@@72))
 :pattern ( ($generated@@20 $generated@@21 $generated@@4 $generated@@70 $generated@@73))
)))
 :pattern ( ($generated@@65 ($generated@@42 $generated@@21 $generated@@4) $generated@@70 ($generated@@43 $generated@@71) $generated@@72))
)))
(assert  (=> (<= 1 $generated@@74) (=> (or $generated@@75 (< 1 $generated@@74)) (= $generated@@76 ($generated@@55 ($generated@@77 40 ($generated@@55 0)))))))
(assert  (=> (<= 1 $generated@@74) (=> (or $generated@@75 (< 1 $generated@@74)) (= $generated@@76 ($generated@@55 ($generated@@77 40 ($generated@@55 0)))))))
(assert (forall (($generated@@78 Int) ($generated@@79 Int) ) (! (= ($generated@@77 $generated@@78 $generated@@79) (div $generated@@78 $generated@@79))
 :pattern ( ($generated@@77 $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ) (!  (=> ($generated@@23 $generated@@80 $generated) (and (= ($generated@@61 $generated@@5 ($generated@@60 $generated@@5 $generated@@80)) $generated@@80) ($generated@@41 $generated@@5 ($generated@@60 $generated@@5 $generated@@80) $generated)))
 :pattern ( ($generated@@23 $generated@@80 $generated))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@23 ($generated@@61 $generated@@83 $generated@@81) $generated@@82) ($generated@@41 $generated@@83 $generated@@81 $generated@@82))
 :pattern ( ($generated@@23 ($generated@@61 $generated@@83 $generated@@81) $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ) (!  (=> ($generated@@39 $generated@@84) (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> ($generated@@23 $generated@@86 $generated@@84) ($generated@@64 $generated@@86 $generated@@84 $generated@@85))
 :pattern ( ($generated@@64 $generated@@86 $generated@@84 $generated@@85))
)))
 :pattern ( ($generated@@39 $generated@@84))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@87 ($generated@@43 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@43 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@19 ($generated@@43 $generated@@89)) $generated@@1)
 :pattern ( ($generated@@43 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@T) ) (! (= ($generated@@60 $generated@@91 ($generated@@61 $generated@@91 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@61 $generated@@91 $generated@@90))
)))
(assert  (and (and (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@92 $generated@@97 $generated@@98 $generated@@99 ($generated@@96 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@102 $generated@@103) $generated@@100)
 :weight 0
)) (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@92 $generated@@104 $generated@@105 $generated@@106 ($generated@@96 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@92 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@92 $generated@@113 $generated@@114 $generated@@115 ($generated@@96 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@92 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)))) (= ($generated@@3 $generated@@93) 5)) (= ($generated@@3 $generated@@94) 6)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@8 ($generated@@92 $generated@@93 $generated@@94 $generated@@4 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@8 ($generated@@60 $generated@@4 ($generated@@20 $generated@@94 $generated@@21 ($generated@@20 $generated@@93 ($generated@@42 $generated@@94 $generated@@21) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@92 $generated@@93 $generated@@94 $generated@@4 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> ($generated@@23 $generated@@128 ($generated@@43 $generated@@129)) (and (= ($generated@@61 ($generated@@42 $generated@@21 $generated@@4) ($generated@@60 ($generated@@42 $generated@@21 $generated@@4) $generated@@128)) $generated@@128) ($generated@@41 ($generated@@42 $generated@@21 $generated@@4) ($generated@@60 ($generated@@42 $generated@@21 $generated@@4) $generated@@128) ($generated@@43 $generated@@129))))
 :pattern ( ($generated@@23 $generated@@128 ($generated@@43 $generated@@129)))
)))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@61 $generated@@5 ($generated@@9 ($generated@@55 $generated@@130))) ($generated@@57 $generated@@21 ($generated@@61 $generated@@5 ($generated@@9 $generated@@130))))
 :pattern ( ($generated@@61 $generated@@5 ($generated@@9 ($generated@@55 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@61 $generated@@132 ($generated@@57 $generated@@132 $generated@@131)) ($generated@@57 $generated@@21 ($generated@@61 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@61 $generated@@132 ($generated@@57 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (! ($generated@@65 $generated@@5 $generated@@134 $generated $generated@@133)
 :pattern ( ($generated@@65 $generated@@5 $generated@@134 $generated $generated@@133))
)))
(assert (forall (($generated@@135 T@U) ) (! ($generated@@41 $generated@@5 $generated@@135 $generated)
 :pattern ( ($generated@@41 $generated@@5 $generated@@135 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 (T@U) Bool)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@145  (=> (and (and (= $generated@@136 ($generated@@22 $generated@@40 (= ($generated@@55 ($generated@@77 5 ($generated@@55 0))) ($generated@@55 19)))) ($generated@@41 ($generated@@42 $generated@@21 $generated@@4) $generated@@136 ($generated@@43 $generated@@40))) (and (= $generated@@137 $generated@@136) (= (ControlFlow 0 3) (- 0 2)))) (or (not (= ($generated@@55 0) 0)) (not true)))))
(let (($generated@@146  (=> (and (or (not (= ($generated@@55 ($generated@@77 5 ($generated@@55 0))) ($generated@@55 19))) (not true)) (= (ControlFlow 0 6) 3)) $generated@@145)))
(let (($generated@@147  (=> (and (= ($generated@@55 ($generated@@77 5 ($generated@@55 0))) ($generated@@55 19)) (= (ControlFlow 0 5) 3)) $generated@@145)))
(let (($generated@@148  (=> (and ($generated@@23 $generated@@138 $generated@@40) ($generated@@64 $generated@@138 $generated@@40 $generated@@139)) (=> (and (and ($generated@@140 $generated@@141) ($generated@@142 $generated@@141)) (and ($generated@@8 ($generated@@57 $generated@@4 ($generated@@7 false))) (= $generated@@139 $generated@@141))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (not (= ($generated@@55 0) 0)) (not true))) (=> (or (not (= ($generated@@55 0) 0)) (not true)) (and (=> (= (ControlFlow 0 7) 5) $generated@@147) (=> (= (ControlFlow 0 7) 6) $generated@@146))))))))
(let (($generated@@149  (=> (and (not (and ($generated@@23 $generated@@138 $generated@@40) ($generated@@64 $generated@@138 $generated@@40 $generated@@139))) (= (ControlFlow 0 4) 3)) $generated@@145)))
(let (($generated@@150 true))
(let (($generated@@151  (=> (= $generated@@143 ($generated@@95 $generated@@144 $generated@@139 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@150) (=> (= (ControlFlow 0 9) 7) $generated@@148)) (=> (= (ControlFlow 0 9) 4) $generated@@149)))))
(let (($generated@@152  (=> (and (and ($generated@@140 $generated@@139) ($generated@@142 $generated@@139)) (and (= 1 $generated@@74) (= (ControlFlow 0 10) 9))) $generated@@151)))
$generated@@152)))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
