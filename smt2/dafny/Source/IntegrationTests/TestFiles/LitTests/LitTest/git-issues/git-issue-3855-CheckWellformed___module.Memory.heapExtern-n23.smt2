(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.Object () T@U)
(declare-fun Tagclass._module.Region () T@U)
(declare-fun Tagclass._module.Memory () T@U)
(declare-fun Tagclass._module.Memory? () T@U)
(declare-fun Tagclass._module.Object? () T@U)
(declare-fun |##_module.Region.Frozen| () T@U)
(declare-fun |##_module.Region.Heap| () T@U)
(declare-fun |##_module.Region.Stack| () T@U)
(declare-fun |##_module.Region.Frame| () T@U)
(declare-fun |##_module.Region.Isolate| () T@U)
(declare-fun |##_module.Edge.Edge| () T@U)
(declare-fun Tagclass._module.Edge () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Object () T@U)
(declare-fun tytagFamily$Region () T@U)
(declare-fun tytagFamily$Memory () T@U)
(declare-fun tytagFamily$Edge () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.Edge.Edge| (T@U T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.Edge () T@U)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Object () T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Object.region (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.Object? () T@U)
(declare-fun Tclass._module.Region () T@U)
(declare-fun |_module.Region#Equal| (T@U T@U) Bool)
(declare-fun _module.Region.Heap_q (T@U) Bool)
(declare-fun _module.Region.region (T@U) T@U)
(declare-fun _module.Region.Stack_q (T@U) Bool)
(declare-fun _module.Region.Frame_q (T@U) Bool)
(declare-fun _module.Region.prev (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |lambda#54| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Edge.f (T@U) T@U)
(declare-fun _module.Edge.n (T@U) T@U)
(declare-fun _module.Edge.t (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun _module.Memory.justHeapExternalEdges (T@U T@U) T@U)
(declare-fun |_module.Memory.justHeapExternalEdges#canCall| (T@U T@U) Bool)
(declare-fun Tclass._module.Memory () T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |$IsA#_module.Region| (T@U) Bool)
(declare-fun _module.Edge.Edge_q (T@U) Bool)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun |lambda#76| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |#_module.Region.Frozen| () T@U)
(declare-fun |#_module.Region.Isolate| () T@U)
(declare-fun Tclass._module.Memory? () T@U)
(declare-fun _module.Memory.externalEdges (T@U T@U T@U) T@U)
(declare-fun |_module.Memory.externalEdges#canCall| (T@U T@U T@U) Bool)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun _module.Memory.heapExternalsZeroOrOneEdges (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.Memory.heapExternalsZeroOrOneEdges#canCall| (T@U T@U) Bool)
(declare-fun |lambda#52| (T@U T@U T@U) T@U)
(declare-fun |lambda#55| (T@U T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun LitInt (Int) Int)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun _module.Region.Frozen_q (T@U) Bool)
(declare-fun _module.Region.Isolate_q (T@U) Bool)
(declare-fun |#_module.Region.Heap| (T@U) T@U)
(declare-fun |#_module.Region.Stack| (T@U) T@U)
(declare-fun |#_module.Region.Frame| (T@U) T@U)
(declare-fun |lambda#71| (T@U T@U T@U T@U) T@U)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun charType () T@T)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun BoxRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TagBool TagChar TagSet TagSeq TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.Object Tagclass._module.Region Tagclass._module.Memory Tagclass._module.Memory? Tagclass._module.Object? |##_module.Region.Frozen| |##_module.Region.Heap| |##_module.Region.Stack| |##_module.Region.Frame| |##_module.Region.Isolate| |##_module.Edge.Edge| Tagclass._module.Edge |tytagFamily$_tuple#2| tytagFamily$Object tytagFamily$Region tytagFamily$Memory tytagFamily$Edge)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) (|a#6#2#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#6#1#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#6#1#0| i))) (DtRank (|#_module.Edge.Edge| |a#6#0#0| |a#6#1#0| |a#6#2#0|))))
 :pattern ( (|Seq#Index| |a#6#1#0| i) (|#_module.Edge.Edge| |a#6#0#0| |a#6#1#0| |a#6#2#0|))
)))
(assert  (and (= (Ctor refType) 4) (= (Ctor SeqType) 5)))
(assert (forall ((|a#2#0#0| T@U) (|a#2#1#0| T@U) (|a#2#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Edge.Edge| |a#2#0#0| |a#2#1#0| |a#2#2#0|) Tclass._module.Edge)  (and (and ($Is refType |a#2#0#0| Tclass._module.Object) ($Is SeqType |a#2#1#0| (TSeq TChar))) ($Is refType |a#2#2#0| Tclass._module.Object)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Edge.Edge| |a#2#0#0| |a#2#1#0| |a#2#2#0|) Tclass._module.Edge))
)))
(assert  (=> (< 2 $FunctionContextHeight) (forall (($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) Tclass._module.Object?)) ($Is DatatypeTypeType (_module.Object.region $o) Tclass._module.Region))
 :pattern ( (_module.Object.region $o))
))))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (_module.Region.Heap_q a) (_module.Region.Heap_q b)) (= (|_module.Region#Equal| a b) (= (_module.Region.region a) (_module.Region.region b))))
 :pattern ( (|_module.Region#Equal| a b) (_module.Region.Heap_q a))
 :pattern ( (|_module.Region#Equal| a b) (_module.Region.Heap_q b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.Region.Stack_q a@@0) (_module.Region.Stack_q b@@0)) (= (|_module.Region#Equal| a@@0 b@@0) (= (_module.Region.region a@@0) (_module.Region.region b@@0))))
 :pattern ( (|_module.Region#Equal| a@@0 b@@0) (_module.Region.Stack_q a@@0))
 :pattern ( (|_module.Region#Equal| a@@0 b@@0) (_module.Region.Stack_q b@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.Region.Frame_q a@@1) (_module.Region.Frame_q b@@1)) (= (|_module.Region#Equal| a@@1 b@@1) (= (_module.Region.prev a@@1) (_module.Region.prev b@@1))))
 :pattern ( (|_module.Region#Equal| a@@1 b@@1) (_module.Region.Frame_q a@@1))
 :pattern ( (|_module.Region#Equal| a@@1 b@@1) (_module.Region.Frame_q b@@1))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 6)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$w#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#54| |l#0| |l#1|) |$w#0|))  (and ($IsBox |$w#0| |l#0|) (|Set#IsMember| |l#1| |$w#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#54| |l#0| |l#1|) |$w#0|))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (t T@U) ) (! (= (|Map#Domain| (|Map#Glue| a@@2 b@@2 t)) a@@2)
 :pattern ( (|Map#Domain| (|Map#Glue| a@@2 b@@2 t)))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) (t@@0 T@U) ) (! (= (|Map#Elements| (|Map#Glue| a@@3 b@@3 t@@0)) b@@3)
 :pattern ( (|Map#Elements| (|Map#Glue| a@@3 b@@3 t@@0)))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) (|a#0#2#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Edge.Edge| |a#0#0#0| |a#0#1#0| |a#0#2#0|)) |##_module.Edge.Edge|)
 :pattern ( (|#_module.Edge.Edge| |a#0#0#0| |a#0#1#0| |a#0#2#0|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) (|a#4#2#0| T@U) ) (! (= (_module.Edge.f (|#_module.Edge.Edge| |a#4#0#0| |a#4#1#0| |a#4#2#0|)) |a#4#0#0|)
 :pattern ( (|#_module.Edge.Edge| |a#4#0#0| |a#4#1#0| |a#4#2#0|))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) (|a#5#2#0| T@U) ) (! (= (_module.Edge.n (|#_module.Edge.Edge| |a#5#0#0| |a#5#1#0| |a#5#2#0|)) |a#5#1#0|)
 :pattern ( (|#_module.Edge.Edge| |a#5#0#0| |a#5#1#0| |a#5#2#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) (|a#8#2#0| T@U) ) (! (= (_module.Edge.t (|#_module.Edge.Edge| |a#8#0#0| |a#8#1#0| |a#8#2#0|)) |a#8#2#0|)
 :pattern ( (|#_module.Edge.Edge| |a#8#0#0| |a#8#1#0| |a#8#2#0|))
)))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert  (and (and (and (= (Ctor FieldType) 7) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert  (=> (< 2 $FunctionContextHeight) (forall (($h T@U) ($o@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap $h) (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) Tclass._module.Object?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@0) alloc)))) ($IsAlloc DatatypeTypeType (_module.Object.region $o@@0) Tclass._module.Region $h))
 :pattern ( (_module.Object.region $o@@0) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@0) alloc)))
))))
(assert (= (Ctor SetType) 9))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this T@U) (|edges#0| T@U) ) (!  (=> (or (|_module.Memory.justHeapExternalEdges#canCall| this |edges#0|) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this null)) (not true)) ($Is refType this Tclass._module.Memory)) ($Is SetType |edges#0| (TSet Tclass._module.Edge))))) (and (forall ((|e#0| T@U) ) (!  (=> ($Is DatatypeTypeType |e#0| Tclass._module.Edge) (=> (|Set#IsMember| |edges#0| ($Box DatatypeTypeType |e#0|)) (and (and (and (|$IsA#_module.Region| (_module.Object.region (_module.Edge.f |e#0|))) (|$IsA#_module.Region| (_module.Object.region (_module.Edge.t |e#0|)))) (and (_module.Edge.Edge_q |e#0|) (_module.Edge.Edge_q |e#0|))) (=> (not (|_module.Region#Equal| (_module.Object.region (_module.Edge.f |e#0|)) (_module.Object.region (_module.Edge.t |e#0|)))) (_module.Edge.Edge_q |e#0|)))))
 :pattern ( (_module.Edge.t |e#0|))
 :pattern ( (_module.Edge.f |e#0|))
 :pattern ( (|Set#IsMember| |edges#0| ($Box DatatypeTypeType |e#0|)))
)) (= (_module.Memory.justHeapExternalEdges this |edges#0|) (|Set#FromBoogieMap| (|lambda#76| Tclass._module.Edge |edges#0|)))))
 :pattern ( (_module.Memory.justHeapExternalEdges this |edges#0|))
))))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.Region.Frozen|) |##_module.Region.Frozen|))
(assert (= (DatatypeCtorId |#_module.Region.Isolate|) |##_module.Region.Isolate|))
(assert (forall (($o@@1 T@U) ) (! (= ($Is refType $o@@1 Tclass._module.Object?)  (or (= $o@@1 null) (= (dtype $o@@1) Tclass._module.Object?)))
 :pattern ( ($Is refType $o@@1 Tclass._module.Object?))
)))
(assert (forall (($o@@2 T@U) ) (! (= ($Is refType $o@@2 Tclass._module.Memory?)  (or (= $o@@2 null) (= (dtype $o@@2) Tclass._module.Memory?)))
 :pattern ( ($Is refType $o@@2 Tclass._module.Memory?))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@0 T@U) (|o#0| T@U) (|edges#0@@0| T@U) ) (!  (=> (or (|_module.Memory.externalEdges#canCall| this@@0 |o#0| |edges#0@@0|) (and (< 3 $FunctionContextHeight) (and (and (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 Tclass._module.Memory)) ($Is DatatypeTypeType |o#0| Tclass._module.Region)) ($Is SetType |edges#0@@0| (TSet Tclass._module.Edge))))) (and (|Set#Subset| (_module.Memory.externalEdges this@@0 |o#0| |edges#0@@0|) |edges#0@@0|) ($Is SetType (_module.Memory.externalEdges this@@0 |o#0| |edges#0@@0|) (TSet Tclass._module.Edge))))
 :pattern ( (_module.Memory.externalEdges this@@0 |o#0| |edges#0@@0|))
))))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Object $h@@0) ($IsAlloc refType |c#0| Tclass._module.Object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Object $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Object? $h@@0))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Memory $h@@1) ($IsAlloc refType |c#0@@0| Tclass._module.Memory? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Memory $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Memory? $h@@1))
)))
(assert (forall ((d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 Tclass._module.Edge) (_module.Edge.Edge_q d@@0))
 :pattern ( (_module.Edge.Edge_q d@@0) ($Is DatatypeTypeType d@@0 Tclass._module.Edge))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((this@@1 T@U) (|edges#0@@1| T@U) ) (!  (=> (or (|_module.Memory.heapExternalsZeroOrOneEdges#canCall| this@@1 (Lit SetType |edges#0@@1|)) (and (< 4 $FunctionContextHeight) (and (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 Tclass._module.Memory)) ($Is SetType |edges#0@@1| (TSet Tclass._module.Edge))))) (and (and (|_module.Memory.justHeapExternalEdges#canCall| this@@1 (Lit SetType |edges#0@@1|)) (let ((|heapExternalEdges#1| (_module.Memory.justHeapExternalEdges this@@1 (Lit SetType |edges#0@@1|))))
 (and (forall ((|he#1| T@U) ) (!  (=> ($Is DatatypeTypeType |he#1| Tclass._module.Edge) (=> (|Set#IsMember| |heapExternalEdges#1| ($Box DatatypeTypeType |he#1|)) (_module.Edge.Edge_q |he#1|)))
 :pattern ( (_module.Edge.t |he#1|))
 :pattern ( (|Set#IsMember| |heapExternalEdges#1| ($Box DatatypeTypeType |he#1|)))
)) (let ((|allRelevantHeapRegions#1| (|Set#FromBoogieMap| (|lambda#52| Tclass._module.Edge |heapExternalEdges#1| |heapExternalEdges#1|))))
(forall ((|r#0| T@U) ) (!  (=> ($Is DatatypeTypeType |r#0| Tclass._module.Region) (=> (|Set#IsMember| |allRelevantHeapRegions#1| ($Box DatatypeTypeType |r#0|)) (|_module.Memory.externalEdges#canCall| this@@1 |r#0| |heapExternalEdges#1|)))
 :pattern ( (_module.Memory.externalEdges this@@1 |r#0| |heapExternalEdges#1|))
 :pattern ( (|Set#IsMember| |allRelevantHeapRegions#1| ($Box DatatypeTypeType |r#0|)))
)))))) (= (_module.Memory.heapExternalsZeroOrOneEdges this@@1 (Lit SetType |edges#0@@1|)) (let ((|heapExternalEdges#1@@0| (_module.Memory.justHeapExternalEdges this@@1 (Lit SetType |edges#0@@1|))))
(let ((|allRelevantHeapRegions#1@@0| (|Set#FromBoogieMap| (|lambda#52| Tclass._module.Edge |heapExternalEdges#1@@0| |heapExternalEdges#1@@0|))))
(let ((|heapExternalEdgesPartitionedByRegion#1| (|Map#Glue| (|Set#FromBoogieMap| (|lambda#54| Tclass._module.Region |allRelevantHeapRegions#1@@0|)) (|lambda#55| this@@1 |heapExternalEdges#1@@0|) (TMap Tclass._module.Region (TSet Tclass._module.Edge)))))
(forall ((|hr#1| T@U) ) (!  (=> (and ($Is DatatypeTypeType |hr#1| Tclass._module.Region) (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#1|) ($Box DatatypeTypeType |hr#1|))) (<= (|Set#Card| ($Unbox SetType (MapType0Select BoxType BoxType (|Map#Elements| |heapExternalEdgesPartitionedByRegion#1|) ($Box DatatypeTypeType |hr#1|)))) (LitInt 1)))
 :pattern ( ($Unbox SetType (MapType0Select BoxType BoxType (|Map#Elements| |heapExternalEdgesPartitionedByRegion#1|) ($Box DatatypeTypeType |hr#1|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#1|) ($Box DatatypeTypeType |hr#1|)))
))))))))
 :weight 3
 :pattern ( (_module.Memory.heapExternalsZeroOrOneEdges this@@1 (Lit SetType |edges#0@@1|)))
))))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0@@0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0@@0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert ($Is DatatypeTypeType |#_module.Region.Frozen| Tclass._module.Region))
(assert ($Is DatatypeTypeType |#_module.Region.Isolate| Tclass._module.Region))
(assert (forall ((s T@U) ) (!  (and (= (= (|Set#Card| s) 0) (= s |Set#Empty|)) (=> (or (not (= (|Set#Card| s) 0)) (not true)) (exists ((x@@2 T@U) ) (! (|Set#IsMember| s x@@2)
 :pattern ( (|Set#IsMember| s x@@2))
))))
 :pattern ( (|Set#Card| s))
)))
(assert (forall (($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) ($IsAlloc DatatypeTypeType |#_module.Region.Frozen| Tclass._module.Region $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Region.Frozen| Tclass._module.Region $h@@2))
)))
(assert (forall (($h@@3 T@U) ) (!  (=> ($IsGoodHeap $h@@3) ($IsAlloc DatatypeTypeType |#_module.Region.Isolate| Tclass._module.Region $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Region.Isolate| Tclass._module.Region $h@@3))
)))
(assert (forall (($o@@3 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.Object? $h@@4)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.Object? $h@@4))
)))
(assert (forall (($o@@4 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass._module.Memory? $h@@5)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._module.Memory? $h@@5))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|_module.Region#Equal| a@@4 b@@4) (= a@@4 b@@4))
 :pattern ( (|_module.Region#Equal| a@@4 b@@4))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@2 T@U) (|edges#0@@2| T@U) ) (!  (=> (or (|_module.Memory.justHeapExternalEdges#canCall| (Lit refType this@@2) (Lit SetType |edges#0@@2|)) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 Tclass._module.Memory)) ($Is SetType |edges#0@@2| (TSet Tclass._module.Edge))))) (and (forall ((|e#2| T@U) ) (!  (=> ($Is DatatypeTypeType |e#2| Tclass._module.Edge) (=> (|Set#IsMember| (Lit SetType |edges#0@@2|) ($Box DatatypeTypeType |e#2|)) (and (and (and (|$IsA#_module.Region| (_module.Object.region (_module.Edge.f |e#2|))) (|$IsA#_module.Region| (_module.Object.region (_module.Edge.t |e#2|)))) (and (_module.Edge.Edge_q |e#2|) (_module.Edge.Edge_q |e#2|))) (=> (not (|_module.Region#Equal| (_module.Object.region (_module.Edge.f |e#2|)) (_module.Object.region (_module.Edge.t |e#2|)))) (_module.Edge.Edge_q |e#2|)))))
 :pattern ( (_module.Edge.t |e#2|))
 :pattern ( (_module.Edge.f |e#2|))
 :pattern ( (|Set#IsMember| |edges#0@@2| ($Box DatatypeTypeType |e#2|)))
)) (= (_module.Memory.justHeapExternalEdges (Lit refType this@@2) (Lit SetType |edges#0@@2|)) (|Set#FromBoogieMap| (|lambda#76| Tclass._module.Edge (Lit SetType |edges#0@@2|))))))
 :weight 3
 :pattern ( (_module.Memory.justHeapExternalEdges (Lit refType this@@2) (Lit SetType |edges#0@@2|)))
))))
(assert (forall ((x@@3 Int) ) (! (= (LitInt x@@3) x@@3)
 :pattern ( (LitInt x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (= (Ctor MapType) 10))
(assert (forall ((a@@5 T@U) (b@@5 T@U) (t0@@0 T@U) (t1@@0 T@U) ) (!  (=> (forall ((bx T@U) )  (=> (|Set#IsMember| a@@5 bx) (and ($IsBox bx t0@@0) ($IsBox (MapType0Select BoxType BoxType b@@5 bx) t1@@0)))) ($Is MapType (|Map#Glue| a@@5 b@@5 (TMap t0@@0 t1@@0)) (TMap t0@@0 t1@@0)))
 :pattern ( (|Map#Glue| a@@5 b@@5 (TMap t0@@0 t1@@0)))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((this@@3 T@U) (|edges#0@@3| T@U) ) (!  (=> (or (|_module.Memory.heapExternalsZeroOrOneEdges#canCall| (Lit refType this@@3) (Lit SetType |edges#0@@3|)) (and (< 4 $FunctionContextHeight) (and (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass._module.Memory)) ($Is SetType |edges#0@@3| (TSet Tclass._module.Edge))))) (and (and (|_module.Memory.justHeapExternalEdges#canCall| (Lit refType this@@3) (Lit SetType |edges#0@@3|)) (let ((|heapExternalEdges#2| (Lit SetType (_module.Memory.justHeapExternalEdges (Lit refType this@@3) (Lit SetType |edges#0@@3|)))))
 (and (forall ((|he#2| T@U) ) (!  (=> ($Is DatatypeTypeType |he#2| Tclass._module.Edge) (=> (|Set#IsMember| |heapExternalEdges#2| ($Box DatatypeTypeType |he#2|)) (_module.Edge.Edge_q |he#2|)))
 :pattern ( (_module.Edge.t |he#2|))
 :pattern ( (|Set#IsMember| |heapExternalEdges#2| ($Box DatatypeTypeType |he#2|)))
)) (let ((|allRelevantHeapRegions#2| (|Set#FromBoogieMap| (|lambda#52| Tclass._module.Edge |heapExternalEdges#2| |heapExternalEdges#2|))))
(forall ((|r#0@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |r#0@@0| Tclass._module.Region) (=> (|Set#IsMember| |allRelevantHeapRegions#2| ($Box DatatypeTypeType |r#0@@0|)) (|_module.Memory.externalEdges#canCall| (Lit refType this@@3) |r#0@@0| |heapExternalEdges#2|)))
 :pattern ( (_module.Memory.externalEdges this@@3 |r#0@@0| |heapExternalEdges#2|))
 :pattern ( (|Set#IsMember| |allRelevantHeapRegions#2| ($Box DatatypeTypeType |r#0@@0|)))
)))))) (= (_module.Memory.heapExternalsZeroOrOneEdges (Lit refType this@@3) (Lit SetType |edges#0@@3|)) (let ((|heapExternalEdges#2@@0| (Lit SetType (_module.Memory.justHeapExternalEdges (Lit refType this@@3) (Lit SetType |edges#0@@3|)))))
(let ((|allRelevantHeapRegions#2@@0| (|Set#FromBoogieMap| (|lambda#52| Tclass._module.Edge |heapExternalEdges#2@@0| |heapExternalEdges#2@@0|))))
(let ((|heapExternalEdgesPartitionedByRegion#2| (|Map#Glue| (|Set#FromBoogieMap| (|lambda#54| Tclass._module.Region |allRelevantHeapRegions#2@@0|)) (|lambda#55| (Lit refType this@@3) |heapExternalEdges#2@@0|) (TMap Tclass._module.Region (TSet Tclass._module.Edge)))))
(forall ((|hr#2| T@U) ) (!  (=> (and ($Is DatatypeTypeType |hr#2| Tclass._module.Region) (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#2|) ($Box DatatypeTypeType |hr#2|))) (<= (|Set#Card| ($Unbox SetType (MapType0Select BoxType BoxType (|Map#Elements| |heapExternalEdgesPartitionedByRegion#2|) ($Box DatatypeTypeType |hr#2|)))) (LitInt 1)))
 :pattern ( ($Unbox SetType (MapType0Select BoxType BoxType (|Map#Elements| |heapExternalEdgesPartitionedByRegion#2|) ($Box DatatypeTypeType |hr#2|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#2|) ($Box DatatypeTypeType |hr#2|)))
))))))))
 :weight 3
 :pattern ( (_module.Memory.heapExternalsZeroOrOneEdges (Lit refType this@@3) (Lit SetType |edges#0@@3|)))
))))
(assert (forall ((a@@6 T@U) (b@@6 T@U) ) (! (= (|Set#Subset| a@@6 b@@6) (forall ((o@@0 T@U) ) (!  (=> (|Set#IsMember| a@@6 o@@0) (|Set#IsMember| b@@6 o@@0))
 :pattern ( (|Set#IsMember| a@@6 o@@0))
 :pattern ( (|Set#IsMember| b@@6 o@@0))
)))
 :pattern ( (|Set#Subset| a@@6 b@@6))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@1| T@U) (|a#2#1#0@@1| T@U) ($h@@6 T@U) ) (!  (=> ($IsGoodHeap $h@@6) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@1| |a#2#1#0@@1|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@6)  (and ($IsAllocBox |a#2#0#0@@1| |_System._tuple#2$T0@@1| $h@@6) ($IsAllocBox |a#2#1#0@@1| |_System._tuple#2$T1@@1| $h@@6))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@1| |a#2#1#0@@1|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@6))
)))
(assert (forall ((|a#2#0#0@@2| T@U) (|a#2#1#0@@2| T@U) (|a#2#2#0@@0| T@U) ($h@@7 T@U) ) (!  (=> ($IsGoodHeap $h@@7) (= ($IsAlloc DatatypeTypeType (|#_module.Edge.Edge| |a#2#0#0@@2| |a#2#1#0@@2| |a#2#2#0@@0|) Tclass._module.Edge $h@@7)  (and (and ($IsAlloc refType |a#2#0#0@@2| Tclass._module.Object $h@@7) ($IsAlloc SeqType |a#2#1#0@@2| (TSeq TChar) $h@@7)) ($IsAlloc refType |a#2#2#0@@0| Tclass._module.Object $h@@7))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Edge.Edge| |a#2#0#0@@2| |a#2#1#0@@2| |a#2#2#0@@0|) Tclass._module.Edge $h@@7))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@1) (= (DatatypeCtorId d@@1) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Region.Frozen_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Region.Frozen|))
 :pattern ( (_module.Region.Frozen_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.Region.Heap_q d@@3) (= (DatatypeCtorId d@@3) |##_module.Region.Heap|))
 :pattern ( (_module.Region.Heap_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (_module.Region.Stack_q d@@4) (= (DatatypeCtorId d@@4) |##_module.Region.Stack|))
 :pattern ( (_module.Region.Stack_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (_module.Region.Frame_q d@@5) (= (DatatypeCtorId d@@5) |##_module.Region.Frame|))
 :pattern ( (_module.Region.Frame_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (_module.Region.Isolate_q d@@6) (= (DatatypeCtorId d@@6) |##_module.Region.Isolate|))
 :pattern ( (_module.Region.Isolate_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (! (= (_module.Edge.Edge_q d@@7) (= (DatatypeCtorId d@@7) |##_module.Edge.Edge|))
 :pattern ( (_module.Edge.Edge_q d@@7))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (_module.Edge.Edge_q d@@8) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) (|a#1#2#0| T@U) ) (= d@@8 (|#_module.Edge.Edge| |a#1#0#0| |a#1#1#0| |a#1#2#0|))))
 :pattern ( (_module.Edge.Edge_q d@@8))
)))
(assert (forall ((m@@1 T@U) (bx@@0 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@0)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@9) (exists ((|a#1#0#0@@0| T@U) (|a#1#1#0@@0| T@U) ) (= d@@9 (|#_System._tuple#2._#Make2| |a#1#0#0@@0| |a#1#1#0@@0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@9))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#76| |l#0@@0| |l#1@@0|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@0|) (and (|Set#IsMember| |l#1@@0| |$y#0|) (and (not (|_module.Region#Equal| (_module.Object.region (_module.Edge.f ($Unbox DatatypeTypeType |$y#0|))) (_module.Object.region (_module.Edge.t ($Unbox DatatypeTypeType |$y#0|))))) (_module.Region.Heap_q (_module.Object.region (_module.Edge.t ($Unbox DatatypeTypeType |$y#0|))))))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#76| |l#0@@0| |l#1@@0|) |$y#0|))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (_module.Region.Frozen_q d@@10) (= d@@10 |#_module.Region.Frozen|))
 :pattern ( (_module.Region.Frozen_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (_module.Region.Isolate_q d@@11) (= d@@11 |#_module.Region.Isolate|))
 :pattern ( (_module.Region.Isolate_q d@@11))
)))
(assert (forall ((v T@U) (t0@@1 T@U) ) (! (= ($Is SetType v (TSet t0@@1)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v bx@@1) ($IsBox bx@@1 t0@@1))
 :pattern ( (|Set#IsMember| v bx@@1))
)))
 :pattern ( ($Is SetType v (TSet t0@@1)))
)))
(assert (forall ((d@@12 T@U) ) (!  (=> (_module.Region.Heap_q d@@12) (exists ((|a#25#0#0| T@U) ) (= d@@12 (|#_module.Region.Heap| |a#25#0#0|))))
 :pattern ( (_module.Region.Heap_q d@@12))
)))
(assert (forall ((d@@13 T@U) ) (!  (=> (_module.Region.Stack_q d@@13) (exists ((|a#30#0#0| T@U) ) (= d@@13 (|#_module.Region.Stack| |a#30#0#0|))))
 :pattern ( (_module.Region.Stack_q d@@13))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> (_module.Region.Frame_q d@@14) (exists ((|a#35#0#0| T@U) ) (= d@@14 (|#_module.Region.Frame| |a#35#0#0|))))
 :pattern ( (_module.Region.Frame_q d@@14))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@4 T@U) (|o#0@@0| T@U) (|edges#0@@4| T@U) ) (!  (=> (or (|_module.Memory.externalEdges#canCall| this@@4 |o#0@@0| |edges#0@@4|) (and (< 3 $FunctionContextHeight) (and (and (and (or (not (= this@@4 null)) (not true)) ($Is refType this@@4 Tclass._module.Memory)) ($Is DatatypeTypeType |o#0@@0| Tclass._module.Region)) ($Is SetType |edges#0@@4| (TSet Tclass._module.Edge))))) (and (forall ((|e#0@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |e#0@@0| Tclass._module.Edge) (=> (|Set#IsMember| |edges#0@@4| ($Box DatatypeTypeType |e#0@@0|)) (and (and (and (|$IsA#_module.Region| (_module.Object.region (_module.Edge.t |e#0@@0|))) (|$IsA#_module.Region| |o#0@@0|)) (_module.Edge.Edge_q |e#0@@0|)) (=> (|_module.Region#Equal| (_module.Object.region (_module.Edge.t |e#0@@0|)) |o#0@@0|) (and (and (|$IsA#_module.Region| (_module.Object.region (_module.Edge.f |e#0@@0|))) (|$IsA#_module.Region| |o#0@@0|)) (_module.Edge.Edge_q |e#0@@0|))))))
 :pattern ( (_module.Edge.f |e#0@@0|))
 :pattern ( (_module.Edge.t |e#0@@0|))
 :pattern ( (|Set#IsMember| |edges#0@@4| ($Box DatatypeTypeType |e#0@@0|)))
)) (= (_module.Memory.externalEdges this@@4 |o#0@@0| |edges#0@@4|) (|Set#FromBoogieMap| (|lambda#71| Tclass._module.Edge |edges#0@@4| |o#0@@0| |o#0@@0|)))))
 :pattern ( (_module.Memory.externalEdges this@@4 |o#0@@0| |edges#0@@4|))
))))
(assert (forall ((v@@0 T@U) (t@@1 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@1 h) ($IsAlloc T@@1 v@@0 t@@1 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@1 h))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Object) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.Object)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Object))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.Region) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) Tclass._module.Region)))
 :pattern ( ($IsBox bx@@3 Tclass._module.Region))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.Memory) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._module.Memory)))
 :pattern ( ($IsBox bx@@4 Tclass._module.Memory))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._module.Memory?) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._module.Memory?)))
 :pattern ( ($IsBox bx@@5 Tclass._module.Memory?))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._module.Object?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._module.Object?)))
 :pattern ( ($IsBox bx@@6 Tclass._module.Object?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._module.Edge) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@7)) bx@@7) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@7) Tclass._module.Edge)))
 :pattern ( ($IsBox bx@@7 Tclass._module.Edge))
)))
(assert (forall ((|a#26#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Region.Heap| |a#26#0#0|) Tclass._module.Region) ($Is refType |a#26#0#0| Tclass._module.Object))
 :pattern ( ($Is DatatypeTypeType (|#_module.Region.Heap| |a#26#0#0|) Tclass._module.Region))
)))
(assert (forall ((|a#31#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Region.Stack| |a#31#0#0|) Tclass._module.Region) ($Is refType |a#31#0#0| Tclass._module.Object))
 :pattern ( ($Is DatatypeTypeType (|#_module.Region.Stack| |a#31#0#0|) Tclass._module.Region))
)))
(assert (forall ((|a#36#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Region.Frame| |a#36#0#0|) Tclass._module.Region) ($Is refType |a#36#0#0| Tclass._module.Object))
 :pattern ( ($Is DatatypeTypeType (|#_module.Region.Frame| |a#36#0#0|) Tclass._module.Region))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@5 T@U) (|edges#0@@5| T@U) ) (!  (=> (or (|_module.Memory.justHeapExternalEdges#canCall| this@@5 |edges#0@@5|) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this@@5 null)) (not true)) ($Is refType this@@5 Tclass._module.Memory)) ($Is SetType |edges#0@@5| (TSet Tclass._module.Edge))))) (and (|Set#Subset| (_module.Memory.justHeapExternalEdges this@@5 |edges#0@@5|) |edges#0@@5|) ($Is SetType (_module.Memory.justHeapExternalEdges this@@5 |edges#0@@5|) (TSet Tclass._module.Edge))))
 :pattern ( (_module.Memory.justHeapExternalEdges this@@5 |edges#0@@5|))
))))
(assert (forall ((|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| Tclass._module.Object)  (and ($Is refType |c#0@@1| Tclass._module.Object?) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| Tclass._module.Object))
 :pattern ( ($Is refType |c#0@@1| Tclass._module.Object?))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.Memory)  (and ($Is refType |c#0@@2| Tclass._module.Memory?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Memory))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Memory?))
)))
(assert (forall ((m@@2 T@U) ) (! (= (= (|Map#Card| m@@2) 0) (= m@@2 |Map#Empty|))
 :pattern ( (|Map#Card| m@@2))
)))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2| T@U) (|l#3| T@U) (|$y#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#71| |l#0@@1| |l#1@@1| |l#2| |l#3|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@1|) (and (|Set#IsMember| |l#1@@1| |$y#0@@0|) (and (|_module.Region#Equal| (_module.Object.region (_module.Edge.t ($Unbox DatatypeTypeType |$y#0@@0|))) |l#2|) (not (|_module.Region#Equal| (_module.Object.region (_module.Edge.f ($Unbox DatatypeTypeType |$y#0@@0|))) |l#3|))))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#71| |l#0@@1| |l#1@@1| |l#2| |l#3|) |$y#0@@0|))
)))
(assert (forall ((|a#26#0#0@@0| T@U) ($h@@8 T@U) ) (!  (=> ($IsGoodHeap $h@@8) (= ($IsAlloc DatatypeTypeType (|#_module.Region.Heap| |a#26#0#0@@0|) Tclass._module.Region $h@@8) ($IsAlloc refType |a#26#0#0@@0| Tclass._module.Object $h@@8)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Region.Heap| |a#26#0#0@@0|) Tclass._module.Region $h@@8))
)))
(assert (forall ((|a#31#0#0@@0| T@U) ($h@@9 T@U) ) (!  (=> ($IsGoodHeap $h@@9) (= ($IsAlloc DatatypeTypeType (|#_module.Region.Stack| |a#31#0#0@@0|) Tclass._module.Region $h@@9) ($IsAlloc refType |a#31#0#0@@0| Tclass._module.Object $h@@9)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Region.Stack| |a#31#0#0@@0|) Tclass._module.Region $h@@9))
)))
(assert (forall ((|a#36#0#0@@0| T@U) ($h@@10 T@U) ) (!  (=> ($IsGoodHeap $h@@10) (= ($IsAlloc DatatypeTypeType (|#_module.Region.Frame| |a#36#0#0@@0|) Tclass._module.Region $h@@10) ($IsAlloc refType |a#36#0#0@@0| Tclass._module.Object $h@@10)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Region.Frame| |a#36#0#0@@0|) Tclass._module.Region $h@@10))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap T@U) (this@@6 T@U) (|edges#0@@6| T@U) ) (!  (=> (and (or (|_module.Memory.justHeapExternalEdges#canCall| this@@6 |edges#0@@6|) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this@@6 null)) (not true)) ($IsAlloc refType this@@6 Tclass._module.Memory $Heap)) (and ($Is SetType |edges#0@@6| (TSet Tclass._module.Edge)) ($IsAlloc SetType |edges#0@@6| (TSet Tclass._module.Edge) $Heap))))) ($IsGoodHeap $Heap)) ($IsAlloc SetType (_module.Memory.justHeapExternalEdges this@@6 |edges#0@@6|) (TSet Tclass._module.Edge) $Heap))
 :pattern ( ($IsAlloc SetType (_module.Memory.justHeapExternalEdges this@@6 |edges#0@@6|) (TSet Tclass._module.Edge) $Heap))
))))
(assert (forall ((|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@0| T@U) (|$y#1| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#52| |l#0@@2| |l#1@@2| |l#2@@0|) |$y#1|)) (exists ((|he#0| T@U) ) (!  (and (and ($Is DatatypeTypeType |he#0| |l#0@@2|) (|Set#IsMember| |l#1@@2| ($Box DatatypeTypeType |he#0|))) (= |$y#1| ($Box DatatypeTypeType (_module.Object.region (_module.Edge.t |he#0|)))))
 :pattern ( (_module.Edge.t |he#0|))
 :pattern ( (|Set#IsMember| |l#2@@0| ($Box DatatypeTypeType |he#0|)))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#52| |l#0@@2| |l#1@@2| |l#2@@0|) |$y#1|))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 TBool) (and (= ($Box boolType ($Unbox boolType bx@@8)) bx@@8) ($Is boolType ($Unbox boolType bx@@8) TBool)))
 :pattern ( ($IsBox bx@@8 TBool))
)))
(assert (= (Ctor charType) 11))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 TChar) (and (= ($Box charType ($Unbox charType bx@@9)) bx@@9) ($Is charType ($Unbox charType bx@@9) TChar)))
 :pattern ( ($IsBox bx@@9 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@2) ($Is T@@2 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@2))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Set#Card| s@@0))
 :pattern ( (|Set#Card| s@@0))
)))
(assert (forall ((s@@1 T@U) ) (! (<= 0 (|Seq#Length| s@@1))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert (forall ((m@@3 T@U) ) (! (<= 0 (|Map#Card| m@@3))
 :pattern ( (|Map#Card| m@@3))
)))
(assert (forall ((a@@7 T@U) (b@@7 T@U) ) (!  (=> (and (_module.Region.Frozen_q a@@7) (_module.Region.Frozen_q b@@7)) (|_module.Region#Equal| a@@7 b@@7))
 :pattern ( (|_module.Region#Equal| a@@7 b@@7) (_module.Region.Frozen_q a@@7))
 :pattern ( (|_module.Region#Equal| a@@7 b@@7) (_module.Region.Frozen_q b@@7))
)))
(assert (forall ((a@@8 T@U) (b@@8 T@U) ) (!  (=> (and (_module.Region.Isolate_q a@@8) (_module.Region.Isolate_q b@@8)) (|_module.Region#Equal| a@@8 b@@8))
 :pattern ( (|_module.Region#Equal| a@@8 b@@8) (_module.Region.Isolate_q a@@8))
 :pattern ( (|_module.Region#Equal| a@@8 b@@8) (_module.Region.Isolate_q b@@8))
)))
(assert (forall ((v@@2 T@U) (t0@@2 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@10) ($IsAllocBox bx@@10 t0@@2 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@10))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0))
)))
(assert (forall ((t@@3 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@3 u)) t@@3)
 :pattern ( (TMap t@@3 u))
)))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)
 :pattern ( (TMap t@@4 u@@0))
)))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@5 u@@1)) TagMap)
 :pattern ( (TMap t@@5 u@@1))
)))
(assert (forall ((|a#0#0#0@@0| T@U) (|a#0#1#0@@0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0@@0| |a#0#1#0@@0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0@@0| |a#0#1#0@@0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0@@0| |a#4#1#0@@0|)) |a#4#0#0@@0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0@@0| |a#4#1#0@@0|))
)))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|)) |a#6#1#0@@0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|))
)))
(assert (forall ((v@@3 T@U) (t0@@3 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0@@3) h@@1) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i@@0) t0@@3 h@@1))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0@@3) h@@1))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) (|a#3#2#0| T@U) ) (! (= (|#_module.Edge.Edge| (Lit refType |a#3#0#0|) (Lit SeqType |a#3#1#0|) (Lit refType |a#3#2#0|)) (Lit DatatypeTypeType (|#_module.Edge.Edge| |a#3#0#0| |a#3#1#0| |a#3#2#0|)))
 :pattern ( (|#_module.Edge.Edge| (Lit refType |a#3#0#0|) (Lit SeqType |a#3#1#0|) (Lit refType |a#3#2#0|)))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSet (TSet t@@6)) t@@6)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSet t@@7)) TagSet)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Inv0_TSeq (TSeq t@@8)) t@@8)
 :pattern ( (TSeq t@@8))
)))
(assert (forall ((t@@9 T@U) ) (! (= (Tag (TSeq t@@9)) TagSeq)
 :pattern ( (TSeq t@@9))
)))
(assert (forall ((|a#24#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Region.Heap| |a#24#0#0|)) |##_module.Region.Heap|)
 :pattern ( (|#_module.Region.Heap| |a#24#0#0|))
)))
(assert (forall ((|a#28#0#0| T@U) ) (! (= (_module.Region.region (|#_module.Region.Heap| |a#28#0#0|)) |a#28#0#0|)
 :pattern ( (|#_module.Region.Heap| |a#28#0#0|))
)))
(assert (forall ((|a#29#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Region.Stack| |a#29#0#0|)) |##_module.Region.Stack|)
 :pattern ( (|#_module.Region.Stack| |a#29#0#0|))
)))
(assert (forall ((|a#33#0#0| T@U) ) (! (= (_module.Region.region (|#_module.Region.Stack| |a#33#0#0|)) |a#33#0#0|)
 :pattern ( (|#_module.Region.Stack| |a#33#0#0|))
)))
(assert (forall ((|a#34#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Region.Frame| |a#34#0#0|)) |##_module.Region.Frame|)
 :pattern ( (|#_module.Region.Frame| |a#34#0#0|))
)))
(assert (forall ((|a#38#0#0| T@U) ) (! (= (_module.Region.prev (|#_module.Region.Frame| |a#38#0#0|)) |a#38#0#0|)
 :pattern ( (|#_module.Region.Frame| |a#38#0#0|))
)))
(assert (forall ((x@@6 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@6)) x@@6)
 :pattern ( ($Box T@@3 x@@6))
)))
(assert (forall ((v@@4 T@U) (t0@@4 T@U) (t1@@1 T@U) (h@@2 T@U) ) (! (= ($IsAlloc MapType v@@4 (TMap t0@@4 t1@@1) h@@2) (forall ((bx@@11 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@4) bx@@11) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@11) t1@@1 h@@2) ($IsAllocBox bx@@11 t0@@4 h@@2)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@11))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@4) bx@@11))
)))
 :pattern ( ($IsAlloc MapType v@@4 (TMap t0@@4 t1@@1) h@@2))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) (|a#7#2#0| T@U) ) (! (< (|Seq#Rank| |a#7#1#0|) (DtRank (|#_module.Edge.Edge| |a#7#0#0| |a#7#1#0| |a#7#2#0|)))
 :pattern ( (|#_module.Edge.Edge| |a#7#0#0| |a#7#1#0| |a#7#2#0|))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@0 T@U) (this@@7 T@U) (|o#0@@1| T@U) (|edges#0@@7| T@U) ) (!  (=> (and (or (|_module.Memory.externalEdges#canCall| this@@7 |o#0@@1| |edges#0@@7|) (and (< 3 $FunctionContextHeight) (and (and (and (or (not (= this@@7 null)) (not true)) ($IsAlloc refType this@@7 Tclass._module.Memory $Heap@@0)) (and ($Is DatatypeTypeType |o#0@@1| Tclass._module.Region) ($IsAlloc DatatypeTypeType |o#0@@1| Tclass._module.Region $Heap@@0))) (and ($Is SetType |edges#0@@7| (TSet Tclass._module.Edge)) ($IsAlloc SetType |edges#0@@7| (TSet Tclass._module.Edge) $Heap@@0))))) ($IsGoodHeap $Heap@@0)) ($IsAlloc SetType (_module.Memory.externalEdges this@@7 |o#0@@1| |edges#0@@7|) (TSet Tclass._module.Edge) $Heap@@0))
 :pattern ( ($IsAlloc SetType (_module.Memory.externalEdges this@@7 |o#0@@1| |edges#0@@7|) (TSet Tclass._module.Edge) $Heap@@0))
))))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0@@0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|))
)))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0@@0| T@U) ) (! (< (BoxRank |a#7#1#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0@@0| |a#7#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0@@0| |a#7#1#0@@0|))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@8 T@U) (|edges#0@@8| T@U) ) (!  (=> (or (|_module.Memory.justHeapExternalEdges#canCall| this@@8 (Lit SetType |edges#0@@8|)) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this@@8 null)) (not true)) ($Is refType this@@8 Tclass._module.Memory)) ($Is SetType |edges#0@@8| (TSet Tclass._module.Edge))))) (and (forall ((|e#1| T@U) ) (!  (=> ($Is DatatypeTypeType |e#1| Tclass._module.Edge) (=> (|Set#IsMember| (Lit SetType |edges#0@@8|) ($Box DatatypeTypeType |e#1|)) (and (and (and (|$IsA#_module.Region| (_module.Object.region (_module.Edge.f |e#1|))) (|$IsA#_module.Region| (_module.Object.region (_module.Edge.t |e#1|)))) (and (_module.Edge.Edge_q |e#1|) (_module.Edge.Edge_q |e#1|))) (=> (not (|_module.Region#Equal| (_module.Object.region (_module.Edge.f |e#1|)) (_module.Object.region (_module.Edge.t |e#1|)))) (_module.Edge.Edge_q |e#1|)))))
 :pattern ( (_module.Edge.t |e#1|))
 :pattern ( (_module.Edge.f |e#1|))
 :pattern ( (|Set#IsMember| |edges#0@@8| ($Box DatatypeTypeType |e#1|)))
)) (= (_module.Memory.justHeapExternalEdges this@@8 (Lit SetType |edges#0@@8|)) (|Set#FromBoogieMap| (|lambda#76| Tclass._module.Edge (Lit SetType |edges#0@@8|))))))
 :weight 3
 :pattern ( (_module.Memory.justHeapExternalEdges this@@8 (Lit SetType |edges#0@@8|)))
))))
(assert (forall ((|l#0@@3| T@U) (|l#1@@3| T@U) (|$w#0@@0| T@U) ) (! (= (MapType0Select BoxType BoxType (|lambda#55| |l#0@@3| |l#1@@3|) |$w#0@@0|) ($Box SetType (_module.Memory.externalEdges |l#0@@3| ($Unbox DatatypeTypeType |$w#0@@0|) |l#1@@3|)))
 :pattern ( (MapType0Select BoxType BoxType (|lambda#55| |l#0@@3| |l#1@@3|) |$w#0@@0|))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@9 T@U) (|o#0@@2| T@U) (|edges#0@@9| T@U) ) (!  (=> (or (|_module.Memory.externalEdges#canCall| (Lit refType this@@9) (Lit DatatypeTypeType |o#0@@2|) (Lit SetType |edges#0@@9|)) (and (< 3 $FunctionContextHeight) (and (and (and (or (not (= this@@9 null)) (not true)) ($Is refType this@@9 Tclass._module.Memory)) ($Is DatatypeTypeType |o#0@@2| Tclass._module.Region)) ($Is SetType |edges#0@@9| (TSet Tclass._module.Edge))))) (and (forall ((|e#2@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |e#2@@0| Tclass._module.Edge) (=> (|Set#IsMember| (Lit SetType |edges#0@@9|) ($Box DatatypeTypeType |e#2@@0|)) (and (and (and (|$IsA#_module.Region| (_module.Object.region (_module.Edge.t |e#2@@0|))) (|$IsA#_module.Region| (Lit DatatypeTypeType |o#0@@2|))) (_module.Edge.Edge_q |e#2@@0|)) (=> (|_module.Region#Equal| (_module.Object.region (_module.Edge.t |e#2@@0|)) |o#0@@2|) (and (and (|$IsA#_module.Region| (_module.Object.region (_module.Edge.f |e#2@@0|))) (|$IsA#_module.Region| (Lit DatatypeTypeType |o#0@@2|))) (_module.Edge.Edge_q |e#2@@0|))))))
 :pattern ( (_module.Edge.f |e#2@@0|))
 :pattern ( (_module.Edge.t |e#2@@0|))
 :pattern ( (|Set#IsMember| |edges#0@@9| ($Box DatatypeTypeType |e#2@@0|)))
)) (= (_module.Memory.externalEdges (Lit refType this@@9) (Lit DatatypeTypeType |o#0@@2|) (Lit SetType |edges#0@@9|)) (|Set#FromBoogieMap| (|lambda#71| Tclass._module.Edge (Lit SetType |edges#0@@9|) |o#0@@2| |o#0@@2|)))))
 :weight 3
 :pattern ( (_module.Memory.externalEdges (Lit refType this@@9) (Lit DatatypeTypeType |o#0@@2|) (Lit SetType |edges#0@@9|)))
))))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((bx@@12 T@U) (s@@2 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@12 (TMap s@@2 t@@10)) (and (= ($Box MapType ($Unbox MapType bx@@12)) bx@@12) ($Is MapType ($Unbox MapType bx@@12) (TMap s@@2 t@@10))))
 :pattern ( ($IsBox bx@@12 (TMap s@@2 t@@10)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@13)) bx@@13) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@13) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (forall ((t0@@5 T@T) (t1@@2 T@T) (t2 T@T) (val@@1 T@U) (m@@4 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@5 t1@@2 t2 (MapType1Store t0@@5 t1@@2 t2 m@@4 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@5 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@5 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@5 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@6 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@6 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@6 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@1| T@U) (|l#3@@0| Bool) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@4| |l#1@@4| |l#2@@1| |l#3@@0|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0@@4|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@4| $o@@5) |l#2@@1|)))) |l#3@@0|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@4| |l#1@@4| |l#2@@1| |l#3@@0|) $o@@5 $f))
)))
(assert (forall ((d@@15 T@U) ) (!  (=> (|$IsA#_module.Region| d@@15) (or (or (or (or (_module.Region.Frozen_q d@@15) (_module.Region.Heap_q d@@15)) (_module.Region.Stack_q d@@15)) (_module.Region.Frame_q d@@15)) (_module.Region.Isolate_q d@@15)))
 :pattern ( (|$IsA#_module.Region| d@@15))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@7 T@U) ) (!  (or (= m@@7 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@7) k)))
 :pattern ( (|Map#Domain| m@@7))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |Map#Empty|) (exists ((v@@5 T@U) ) (|Set#IsMember| (|Map#Values| m@@8) v@@5)))
 :pattern ( (|Map#Values| m@@8))
)))
(assert (forall ((m@@9 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@9) item)  (and (|Set#IsMember| (|Map#Domain| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@9) item))
)))
(assert (forall ((m@@10 T@U) (v@@6 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@10) v@@6) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@10) u@@3) (= v@@6 (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@10) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@10) v@@6))
)))
(assert (forall ((d@@16 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@16)) (DtRank d@@16))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@16)))
)))
(assert (forall ((m@@11 T@U) ) (! (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))
 :pattern ( (|Set#Card| (|Map#Domain| m@@11)))
 :pattern ( (|Map#Card| m@@11))
)))
(assert (forall ((m@@12 T@U) ) (! (= (|Set#Card| (|Map#Items| m@@12)) (|Map#Card| m@@12))
 :pattern ( (|Set#Card| (|Map#Items| m@@12)))
 :pattern ( (|Map#Card| m@@12))
)))
(assert (forall ((m@@13 T@U) ) (! (<= (|Set#Card| (|Map#Values| m@@13)) (|Map#Card| m@@13))
 :pattern ( (|Set#Card| (|Map#Values| m@@13)))
 :pattern ( (|Map#Card| m@@13))
)))
(assert (forall ((bx@@14 T@U) (t@@11 T@U) ) (!  (=> ($IsBox bx@@14 (TSet t@@11)) (and (= ($Box SetType ($Unbox SetType bx@@14)) bx@@14) ($Is SetType ($Unbox SetType bx@@14) (TSet t@@11))))
 :pattern ( ($IsBox bx@@14 (TSet t@@11)))
)))
(assert (forall ((bx@@15 T@U) (t@@12 T@U) ) (!  (=> ($IsBox bx@@15 (TSeq t@@12)) (and (= ($Box SeqType ($Unbox SeqType bx@@15)) bx@@15) ($Is SeqType ($Unbox SeqType bx@@15) (TSeq t@@12))))
 :pattern ( ($IsBox bx@@15 (TSeq t@@12)))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((this@@10 T@U) (|edges#0@@10| T@U) ) (!  (=> (or (|_module.Memory.heapExternalsZeroOrOneEdges#canCall| this@@10 |edges#0@@10|) (and (< 4 $FunctionContextHeight) (and (and (or (not (= this@@10 null)) (not true)) ($Is refType this@@10 Tclass._module.Memory)) ($Is SetType |edges#0@@10| (TSet Tclass._module.Edge))))) (and (and (|_module.Memory.justHeapExternalEdges#canCall| this@@10 |edges#0@@10|) (let ((|heapExternalEdges#0| (_module.Memory.justHeapExternalEdges this@@10 |edges#0@@10|)))
 (and (forall ((|he#0@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |he#0@@0| Tclass._module.Edge) (=> (|Set#IsMember| |heapExternalEdges#0| ($Box DatatypeTypeType |he#0@@0|)) (_module.Edge.Edge_q |he#0@@0|)))
 :pattern ( (_module.Edge.t |he#0@@0|))
 :pattern ( (|Set#IsMember| |heapExternalEdges#0| ($Box DatatypeTypeType |he#0@@0|)))
)) (let ((|allRelevantHeapRegions#0| (|Set#FromBoogieMap| (|lambda#52| Tclass._module.Edge |heapExternalEdges#0| |heapExternalEdges#0|))))
(forall ((|r#0@@1| T@U) ) (!  (=> ($Is DatatypeTypeType |r#0@@1| Tclass._module.Region) (=> (|Set#IsMember| |allRelevantHeapRegions#0| ($Box DatatypeTypeType |r#0@@1|)) (|_module.Memory.externalEdges#canCall| this@@10 |r#0@@1| |heapExternalEdges#0|)))
 :pattern ( (_module.Memory.externalEdges this@@10 |r#0@@1| |heapExternalEdges#0|))
 :pattern ( (|Set#IsMember| |allRelevantHeapRegions#0| ($Box DatatypeTypeType |r#0@@1|)))
)))))) (= (_module.Memory.heapExternalsZeroOrOneEdges this@@10 |edges#0@@10|) (let ((|heapExternalEdges#0@@0| (_module.Memory.justHeapExternalEdges this@@10 |edges#0@@10|)))
(let ((|allRelevantHeapRegions#0@@0| (|Set#FromBoogieMap| (|lambda#52| Tclass._module.Edge |heapExternalEdges#0@@0| |heapExternalEdges#0@@0|))))
(let ((|heapExternalEdgesPartitionedByRegion#0| (|Map#Glue| (|Set#FromBoogieMap| (|lambda#54| Tclass._module.Region |allRelevantHeapRegions#0@@0|)) (|lambda#55| this@@10 |heapExternalEdges#0@@0|) (TMap Tclass._module.Region (TSet Tclass._module.Edge)))))
(forall ((|hr#0| T@U) ) (!  (=> (and ($Is DatatypeTypeType |hr#0| Tclass._module.Region) (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#0|) ($Box DatatypeTypeType |hr#0|))) (<= (|Set#Card| ($Unbox SetType (MapType0Select BoxType BoxType (|Map#Elements| |heapExternalEdgesPartitionedByRegion#0|) ($Box DatatypeTypeType |hr#0|)))) (LitInt 1)))
 :pattern ( ($Unbox SetType (MapType0Select BoxType BoxType (|Map#Elements| |heapExternalEdgesPartitionedByRegion#0|) ($Box DatatypeTypeType |hr#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#0|) ($Box DatatypeTypeType |hr#0|)))
))))))))
 :pattern ( (_module.Memory.heapExternalsZeroOrOneEdges this@@10 |edges#0@@10|))
))))
(assert (forall ((v@@7 T@U) (t0@@6 T@U) (t1@@3 T@U) ) (! (= ($Is MapType v@@7 (TMap t0@@6 t1@@3)) (forall ((bx@@16 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@7) bx@@16) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@16) t1@@3) ($IsBox bx@@16 t0@@6)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@16))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@7) bx@@16))
)))
 :pattern ( ($Is MapType v@@7 (TMap t0@@6 t1@@3)))
)))
(assert (= (Tag Tclass._module.Object) Tagclass._module.Object))
(assert (= (TagFamily Tclass._module.Object) tytagFamily$Object))
(assert (= (Tag Tclass._module.Region) Tagclass._module.Region))
(assert (= (TagFamily Tclass._module.Region) tytagFamily$Region))
(assert (= (Tag Tclass._module.Memory) Tagclass._module.Memory))
(assert (= (TagFamily Tclass._module.Memory) tytagFamily$Memory))
(assert (= (Tag Tclass._module.Memory?) Tagclass._module.Memory?))
(assert (= (TagFamily Tclass._module.Memory?) tytagFamily$Memory))
(assert (= (Tag Tclass._module.Object?) Tagclass._module.Object?))
(assert (= (TagFamily Tclass._module.Object?) tytagFamily$Object))
(assert (= (Tag Tclass._module.Edge) Tagclass._module.Edge))
(assert (= (TagFamily Tclass._module.Edge) tytagFamily$Edge))
(assert (= |#_module.Region.Frozen| (Lit DatatypeTypeType |#_module.Region.Frozen|)))
(assert (= |#_module.Region.Isolate| (Lit DatatypeTypeType |#_module.Region.Isolate|)))
(assert (forall ((d@@17 T@U) ($h@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (_module.Edge.Edge_q d@@17) ($IsAlloc DatatypeTypeType d@@17 Tclass._module.Edge $h@@11))) ($IsAlloc SeqType (_module.Edge.n d@@17) (TSeq TChar) $h@@11))
 :pattern ( ($IsAlloc SeqType (_module.Edge.n d@@17) (TSeq TChar) $h@@11))
)))
(assert (forall ((d@@18 T@U) ) (!  (=> ($Is DatatypeTypeType d@@18 Tclass._module.Region) (or (or (or (or (_module.Region.Frozen_q d@@18) (_module.Region.Heap_q d@@18)) (_module.Region.Stack_q d@@18)) (_module.Region.Frame_q d@@18)) (_module.Region.Isolate_q d@@18)))
 :pattern ( (_module.Region.Isolate_q d@@18) ($Is DatatypeTypeType d@@18 Tclass._module.Region))
 :pattern ( (_module.Region.Frame_q d@@18) ($Is DatatypeTypeType d@@18 Tclass._module.Region))
 :pattern ( (_module.Region.Stack_q d@@18) ($Is DatatypeTypeType d@@18 Tclass._module.Region))
 :pattern ( (_module.Region.Heap_q d@@18) ($Is DatatypeTypeType d@@18 Tclass._module.Region))
 :pattern ( (_module.Region.Frozen_q d@@18) ($Is DatatypeTypeType d@@18 Tclass._module.Region))
)))
(assert (forall ((d@@19 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@12 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (_System.Tuple2.___hMake2_q d@@19) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@19 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@12)
 :pattern ( ($IsAlloc DatatypeTypeType d@@19 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@12))
)))) ($IsAllocBox (_System.Tuple2._0 d@@19) |_System._tuple#2$T0@@6| $h@@12))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@19) |_System._tuple#2$T0@@6| $h@@12))
)))
(assert (forall ((d@@20 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@13 T@U) ) (!  (=> (and ($IsGoodHeap $h@@13) (and (_System.Tuple2.___hMake2_q d@@20) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@20 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@13)
 :pattern ( ($IsAlloc DatatypeTypeType d@@20 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@13))
)))) ($IsAllocBox (_System.Tuple2._1 d@@20) |_System._tuple#2$T1@@7| $h@@13))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@20) |_System._tuple#2$T1@@7| $h@@13))
)))
(assert (forall ((d@@21 T@U) ($h@@14 T@U) ) (!  (=> (and ($IsGoodHeap $h@@14) (and (_module.Region.Heap_q d@@21) ($IsAlloc DatatypeTypeType d@@21 Tclass._module.Region $h@@14))) ($IsAlloc refType (_module.Region.region d@@21) Tclass._module.Object $h@@14))
 :pattern ( ($IsAlloc refType (_module.Region.region d@@21) Tclass._module.Object $h@@14))
)))
(assert (forall ((d@@22 T@U) ($h@@15 T@U) ) (!  (=> (and ($IsGoodHeap $h@@15) (and (_module.Region.Stack_q d@@22) ($IsAlloc DatatypeTypeType d@@22 Tclass._module.Region $h@@15))) ($IsAlloc refType (_module.Region.region d@@22) Tclass._module.Object $h@@15))
 :pattern ( ($IsAlloc refType (_module.Region.region d@@22) Tclass._module.Object $h@@15))
)))
(assert (forall ((d@@23 T@U) ($h@@16 T@U) ) (!  (=> (and ($IsGoodHeap $h@@16) (and (_module.Region.Frame_q d@@23) ($IsAlloc DatatypeTypeType d@@23 Tclass._module.Region $h@@16))) ($IsAlloc refType (_module.Region.prev d@@23) Tclass._module.Object $h@@16))
 :pattern ( ($IsAlloc refType (_module.Region.prev d@@23) Tclass._module.Object $h@@16))
)))
(assert (forall ((d@@24 T@U) ($h@@17 T@U) ) (!  (=> (and ($IsGoodHeap $h@@17) (and (_module.Edge.Edge_q d@@24) ($IsAlloc DatatypeTypeType d@@24 Tclass._module.Edge $h@@17))) ($IsAlloc refType (_module.Edge.f d@@24) Tclass._module.Object $h@@17))
 :pattern ( ($IsAlloc refType (_module.Edge.f d@@24) Tclass._module.Object $h@@17))
)))
(assert (forall ((d@@25 T@U) ($h@@18 T@U) ) (!  (=> (and ($IsGoodHeap $h@@18) (and (_module.Edge.Edge_q d@@25) ($IsAlloc DatatypeTypeType d@@25 Tclass._module.Edge $h@@18))) ($IsAlloc refType (_module.Edge.t d@@25) Tclass._module.Object $h@@18))
 :pattern ( ($IsAlloc refType (_module.Edge.t d@@25) Tclass._module.Object $h@@18))
)))
(assert (forall ((|a#3#0#0@@0| T@U) (|a#3#1#0@@0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0@@0|) (Lit BoxType |a#3#1#0@@0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0@@0| |a#3#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0@@0|) (Lit BoxType |a#3#1#0@@0|)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((|a#27#0#0| T@U) ) (! (= (|#_module.Region.Heap| (Lit refType |a#27#0#0|)) (Lit DatatypeTypeType (|#_module.Region.Heap| |a#27#0#0|)))
 :pattern ( (|#_module.Region.Heap| (Lit refType |a#27#0#0|)))
)))
(assert (forall ((|a#32#0#0| T@U) ) (! (= (|#_module.Region.Stack| (Lit refType |a#32#0#0|)) (Lit DatatypeTypeType (|#_module.Region.Stack| |a#32#0#0|)))
 :pattern ( (|#_module.Region.Stack| (Lit refType |a#32#0#0|)))
)))
(assert (forall ((|a#37#0#0| T@U) ) (! (= (|#_module.Region.Frame| (Lit refType |a#37#0#0|)) (Lit DatatypeTypeType (|#_module.Region.Frame| |a#37#0#0|)))
 :pattern ( (|#_module.Region.Frame| (Lit refType |a#37#0#0|)))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert (forall ((s@@3 T@U) ) (!  (=> (= (|Seq#Length| s@@3) 0) (= s@@3 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@3))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@11 T@U) (|o#0@@3| T@U) (|edges#0@@11| T@U) ) (!  (=> (or (|_module.Memory.externalEdges#canCall| this@@11 (Lit DatatypeTypeType |o#0@@3|) (Lit SetType |edges#0@@11|)) (and (< 3 $FunctionContextHeight) (and (and (and (or (not (= this@@11 null)) (not true)) ($Is refType this@@11 Tclass._module.Memory)) ($Is DatatypeTypeType |o#0@@3| Tclass._module.Region)) ($Is SetType |edges#0@@11| (TSet Tclass._module.Edge))))) (and (forall ((|e#1@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |e#1@@0| Tclass._module.Edge) (=> (|Set#IsMember| (Lit SetType |edges#0@@11|) ($Box DatatypeTypeType |e#1@@0|)) (and (and (and (|$IsA#_module.Region| (_module.Object.region (_module.Edge.t |e#1@@0|))) (|$IsA#_module.Region| (Lit DatatypeTypeType |o#0@@3|))) (_module.Edge.Edge_q |e#1@@0|)) (=> (|_module.Region#Equal| (_module.Object.region (_module.Edge.t |e#1@@0|)) |o#0@@3|) (and (and (|$IsA#_module.Region| (_module.Object.region (_module.Edge.f |e#1@@0|))) (|$IsA#_module.Region| (Lit DatatypeTypeType |o#0@@3|))) (_module.Edge.Edge_q |e#1@@0|))))))
 :pattern ( (_module.Edge.f |e#1@@0|))
 :pattern ( (_module.Edge.t |e#1@@0|))
 :pattern ( (|Set#IsMember| |edges#0@@11| ($Box DatatypeTypeType |e#1@@0|)))
)) (= (_module.Memory.externalEdges this@@11 (Lit DatatypeTypeType |o#0@@3|) (Lit SetType |edges#0@@11|)) (|Set#FromBoogieMap| (|lambda#71| Tclass._module.Edge (Lit SetType |edges#0@@11|) |o#0@@3| |o#0@@3|)))))
 :weight 3
 :pattern ( (_module.Memory.externalEdges this@@11 (Lit DatatypeTypeType |o#0@@3|) (Lit SetType |edges#0@@11|)))
))))
(assert (forall ((h@@3 T@U) (v@@8 T@U) ) (! ($IsAlloc boolType v@@8 TBool h@@3)
 :pattern ( ($IsAlloc boolType v@@8 TBool h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@9 T@U) ) (! ($IsAlloc charType v@@9 TChar h@@4)
 :pattern ( ($IsAlloc charType v@@9 TChar h@@4))
)))
(assert (forall ((v@@10 T@U) (t0@@7 T@U) ) (! (= ($Is SeqType v@@10 (TSeq t0@@7)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@10))) ($IsBox (|Seq#Index| v@@10 i@@1) t0@@7))
 :pattern ( (|Seq#Index| v@@10 i@@1))
)))
 :pattern ( ($Is SeqType v@@10 (TSeq t0@@7)))
)))
(assert (forall ((m@@14 T@U) ) (!  (or (= m@@14 |Map#Empty|) (exists ((k@@0 T@U) (v@@11 T@U) ) (|Set#IsMember| (|Map#Items| m@@14) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@11)))))
 :pattern ( (|Map#Items| m@@14))
)))
(assert (forall ((s@@4 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@4))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@4 i@@2))) (|Seq#Rank| s@@4)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@4 i@@2))))
)))
(assert (forall ((v@@12 T@U) (t0@@8 T@U) (t1@@4 T@U) ) (!  (=> ($Is MapType v@@12 (TMap t0@@8 t1@@4)) (and (and ($Is SetType (|Map#Domain| v@@12) (TSet t0@@8)) ($Is SetType (|Map#Values| v@@12) (TSet t1@@4))) ($Is SetType (|Map#Items| v@@12) (TSet (Tclass._System.Tuple2 t0@@8 t1@@4)))))
 :pattern ( ($Is MapType v@@12 (TMap t0@@8 t1@@4)))
)))
(assert (forall ((v@@13 T@U) ) (! ($Is boolType v@@13 TBool)
 :pattern ( ($Is boolType v@@13 TBool))
)))
(assert (forall ((v@@14 T@U) ) (! ($Is charType v@@14 TChar)
 :pattern ( ($Is charType v@@14 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |heapExternalEdgesPartitionedByRegion#Z#0@0| () T@U)
(declare-fun |hr#3@0| () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |allRelevantHeapRegions#Z#0@0| () T@U)
(declare-fun this@@12 () T@U)
(declare-fun |heapExternalEdges#Z#0@0| () T@U)
(declare-fun |r#1@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |he#3@0| () T@U)
(declare-fun |edges#0@@12| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let ((anon12_correct true))
(let ((anon20_Else_correct  (=> (and (not (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#Z#0@0|) ($Box DatatypeTypeType |hr#3@0|))) (= (ControlFlow 0 6) 2)) anon12_correct)))
(let ((anon20_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#Z#0@0|) ($Box DatatypeTypeType |hr#3@0|)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#Z#0@0|) ($Box DatatypeTypeType |hr#3@0|))) (=> (|Set#IsMember| (|Map#Domain| |heapExternalEdgesPartitionedByRegion#Z#0@0|) ($Box DatatypeTypeType |hr#3@0|)) (=> (= (ControlFlow 0 4) 2) anon12_correct))))))
(let ((anon19_Then_correct  (=> (and ($Is DatatypeTypeType |hr#3@0| Tclass._module.Region) ($IsAlloc DatatypeTypeType |hr#3@0| Tclass._module.Region $Heap@@1)) (and (=> (= (ControlFlow 0 7) 4) anon20_Then_correct) (=> (= (ControlFlow 0 7) 6) anon20_Else_correct)))))
(let ((anon19_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |hr#3@0| Tclass._module.Region) ($IsAlloc DatatypeTypeType |hr#3@0| Tclass._module.Region $Heap@@1))) (= (ControlFlow 0 3) 2)) anon12_correct)))
(let ((anon9_correct  (=> (and (and (= |let#2#0#0| (|Map#Glue| (|Set#FromBoogieMap| (|lambda#54| Tclass._module.Region |allRelevantHeapRegions#Z#0@0|)) (|lambda#55| this@@12 |heapExternalEdges#Z#0@0|) (TMap Tclass._module.Region (TSet Tclass._module.Edge)))) (forall ((|r#0@@2| T@U) ) (!  (=> ($Is DatatypeTypeType |r#0@@2| Tclass._module.Region) (=> (|Set#IsMember| |allRelevantHeapRegions#Z#0@0| ($Box DatatypeTypeType |r#0@@2|)) (|_module.Memory.externalEdges#canCall| this@@12 |r#0@@2| |heapExternalEdges#Z#0@0|)))
 :pattern ( (_module.Memory.externalEdges this@@12 |r#0@@2| |heapExternalEdges#Z#0@0|))
 :pattern ( (|Set#IsMember| |allRelevantHeapRegions#Z#0@0| ($Box DatatypeTypeType |r#0@@2|)))
))) (and ($Is MapType |let#2#0#0| (TMap Tclass._module.Region (TSet Tclass._module.Edge))) (= |heapExternalEdgesPartitionedByRegion#Z#0@0| |let#2#0#0|))) (and (=> (= (ControlFlow 0 8) 7) anon19_Then_correct) (=> (= (ControlFlow 0 8) 3) anon19_Else_correct)))))
(let ((anon18_Else_correct  (=> (and (not (|Set#IsMember| |allRelevantHeapRegions#Z#0@0| ($Box DatatypeTypeType |r#1@0|))) (= (ControlFlow 0 11) 8)) anon9_correct)))
(let ((anon18_Then_correct  (=> (and (|Set#IsMember| |allRelevantHeapRegions#Z#0@0| ($Box DatatypeTypeType |r#1@0|)) ($IsAllocBox ($Box refType this@@12) Tclass._module.Memory? $Heap@@1)) (=> (and (and ($IsAlloc DatatypeTypeType |r#1@0| Tclass._module.Region $Heap@@1) ($IsAlloc SetType |heapExternalEdges#Z#0@0| (TSet Tclass._module.Edge) $Heap@@1)) (and (|_module.Memory.externalEdges#canCall| this@@12 |r#1@0| |heapExternalEdges#Z#0@0|) (= (ControlFlow 0 10) 8))) anon9_correct))))
(let ((anon17_Then_correct  (=> (and ($Is DatatypeTypeType |r#1@0| Tclass._module.Region) ($IsAlloc DatatypeTypeType |r#1@0| Tclass._module.Region $Heap@@1)) (and (=> (= (ControlFlow 0 12) 10) anon18_Then_correct) (=> (= (ControlFlow 0 12) 11) anon18_Else_correct)))))
(let ((anon17_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |r#1@0| Tclass._module.Region) ($IsAlloc DatatypeTypeType |r#1@0| Tclass._module.Region $Heap@@1))) (= (ControlFlow 0 9) 8)) anon9_correct)))
(let ((anon6_correct  (=> (and (and (= |let#1#0#0| (|Set#FromBoogieMap| (|lambda#52| Tclass._module.Edge |heapExternalEdges#Z#0@0| |heapExternalEdges#Z#0@0|))) (forall ((|he#4| T@U) ) (!  (=> ($Is DatatypeTypeType |he#4| Tclass._module.Edge) (=> (|Set#IsMember| |heapExternalEdges#Z#0@0| ($Box DatatypeTypeType |he#4|)) (_module.Edge.Edge_q |he#4|)))
 :pattern ( (_module.Edge.t |he#4|))
 :pattern ( (|Set#IsMember| |heapExternalEdges#Z#0@0| ($Box DatatypeTypeType |he#4|)))
))) (and ($Is SetType |let#1#0#0| (TSet Tclass._module.Region)) (= |allRelevantHeapRegions#Z#0@0| |let#1#0#0|))) (and (=> (= (ControlFlow 0 13) 12) anon17_Then_correct) (=> (= (ControlFlow 0 13) 9) anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (and (not (|Set#IsMember| |heapExternalEdges#Z#0@0| ($Box DatatypeTypeType |he#3@0|))) (= (ControlFlow 0 17) 13)) anon6_correct)))
(let ((anon16_Then_correct  (=> (and (|Set#IsMember| |heapExternalEdges#Z#0@0| ($Box DatatypeTypeType |he#3@0|)) (_module.Edge.Edge_q |he#3@0|)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (or (not (= (_module.Edge.t |he#3@0|) null)) (not true))) (=> (or (not (= (_module.Edge.t |he#3@0|) null)) (not true)) (=> (= (ControlFlow 0 15) 13) anon6_correct))))))
(let ((anon15_Then_correct  (=> (and ($Is DatatypeTypeType |he#3@0| Tclass._module.Edge) ($IsAlloc DatatypeTypeType |he#3@0| Tclass._module.Edge $Heap@@1)) (and (=> (= (ControlFlow 0 18) 15) anon16_Then_correct) (=> (= (ControlFlow 0 18) 17) anon16_Else_correct)))))
(let ((anon15_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |he#3@0| Tclass._module.Edge) ($IsAlloc DatatypeTypeType |he#3@0| Tclass._module.Edge $Heap@@1))) (= (ControlFlow 0 14) 13)) anon6_correct)))
(let ((anon14_Else_correct  (=> ($IsAllocBox ($Box refType this@@12) Tclass._module.Memory? $Heap@@1) (=> (and ($IsAlloc SetType |edges#0@@12| (TSet Tclass._module.Edge) $Heap@@1) (|_module.Memory.justHeapExternalEdges#canCall| this@@12 |edges#0@@12|)) (=> (and (and (= |let#0#0#0| (_module.Memory.justHeapExternalEdges this@@12 |edges#0@@12|)) (|_module.Memory.justHeapExternalEdges#canCall| this@@12 |edges#0@@12|)) (and ($Is SetType |let#0#0#0| (TSet Tclass._module.Edge)) (= |heapExternalEdges#Z#0@0| |let#0#0#0|))) (and (=> (= (ControlFlow 0 19) 18) anon15_Then_correct) (=> (= (ControlFlow 0 19) 14) anon15_Else_correct)))))))
(let ((anon14_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (and (=> (= (ControlFlow 0 20) 1) anon14_Then_correct) (=> (= (ControlFlow 0 20) 19) anon14_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and (and (or (not (= this@@12 null)) (not true)) (and ($Is refType this@@12 Tclass._module.Memory) ($IsAlloc refType this@@12 Tclass._module.Memory $Heap@@1))) ($Is SetType |edges#0@@12| (TSet Tclass._module.Edge))) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 21) 20))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
