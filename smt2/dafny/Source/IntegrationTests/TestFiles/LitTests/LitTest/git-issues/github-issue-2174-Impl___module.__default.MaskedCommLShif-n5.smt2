(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@T T@U T@U) Bool)
(declare-fun $generated@@0 () T@T)
(declare-fun $generated@@1 (Int) T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@18 () T@T)
(declare-fun $generated@@19 ((_ BitVec 5)) T@U)
(declare-fun $generated@@20 (T@U) (_ BitVec 5))
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 ((_ BitVec 6)) T@U)
(declare-fun $generated@@26 (T@U) (_ BitVec 6))
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 ((_ BitVec 7)) T@U)
(declare-fun $generated@@32 (T@U) (_ BitVec 7))
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 ((_ BitVec 8)) T@U)
(declare-fun $generated@@38 (T@U) (_ BitVec 8))
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 ((_ BitVec 16)) T@U)
(declare-fun $generated@@44 (T@U) (_ BitVec 16))
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 ((_ BitVec 32)) T@U)
(declare-fun $generated@@50 (T@U) (_ BitVec 32))
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 ((_ BitVec 64)) T@U)
(declare-fun $generated@@56 (T@U) (_ BitVec 64))
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 ((_ BitVec 128)) T@U)
(declare-fun $generated@@62 (T@U) (_ BitVec 128))
(declare-fun $generated@@66 (Int) Int)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@U) Int)
(declare-fun $generated@@79 () (_ BitVec 128))
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@84 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@T T@T) T@T)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T) T@T)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@139 () Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@0) 1)) (= ($generated@@2 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (forall (($generated@@17 T@U) ) (! ($generated $generated@@0 $generated@@17 ($generated@@1 0))
 :pattern ( ($generated $generated@@0 $generated@@17 ($generated@@1 0)))
)))
(assert  (and (and (= ($generated@@2 $generated@@18) 3) (forall (($generated@@21 (_ BitVec 5)) ) (! (= ($generated@@20 ($generated@@19 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@19 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@22))
))))
(assert (forall (($generated@@23 T@U) ) (! ($generated $generated@@18 $generated@@23 ($generated@@1 5))
 :pattern ( ($generated $generated@@18 $generated@@23 ($generated@@1 5)))
)))
(assert  (and (and (= ($generated@@2 $generated@@24) 4) (forall (($generated@@27 (_ BitVec 6)) ) (! (= ($generated@@26 ($generated@@25 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@25 $generated@@27))
))) (forall (($generated@@28 T@U) ) (! (= ($generated@@25 ($generated@@26 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@26 $generated@@28))
))))
(assert (forall (($generated@@29 T@U) ) (! ($generated $generated@@24 $generated@@29 ($generated@@1 6))
 :pattern ( ($generated $generated@@24 $generated@@29 ($generated@@1 6)))
)))
(assert  (and (and (= ($generated@@2 $generated@@30) 5) (forall (($generated@@33 (_ BitVec 7)) ) (! (= ($generated@@32 ($generated@@31 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@33))
))) (forall (($generated@@34 T@U) ) (! (= ($generated@@31 ($generated@@32 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@34))
))))
(assert (forall (($generated@@35 T@U) ) (! ($generated $generated@@30 $generated@@35 ($generated@@1 7))
 :pattern ( ($generated $generated@@30 $generated@@35 ($generated@@1 7)))
)))
(assert  (and (and (= ($generated@@2 $generated@@36) 6) (forall (($generated@@39 (_ BitVec 8)) ) (! (= ($generated@@38 ($generated@@37 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@37 $generated@@39))
))) (forall (($generated@@40 T@U) ) (! (= ($generated@@37 ($generated@@38 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@38 $generated@@40))
))))
(assert (forall (($generated@@41 T@U) ) (! ($generated $generated@@36 $generated@@41 ($generated@@1 8))
 :pattern ( ($generated $generated@@36 $generated@@41 ($generated@@1 8)))
)))
(assert  (and (and (= ($generated@@2 $generated@@42) 7) (forall (($generated@@45 (_ BitVec 16)) ) (! (= ($generated@@44 ($generated@@43 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@45))
))) (forall (($generated@@46 T@U) ) (! (= ($generated@@43 ($generated@@44 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@44 $generated@@46))
))))
(assert (forall (($generated@@47 T@U) ) (! ($generated $generated@@42 $generated@@47 ($generated@@1 16))
 :pattern ( ($generated $generated@@42 $generated@@47 ($generated@@1 16)))
)))
(assert  (and (and (= ($generated@@2 $generated@@48) 8) (forall (($generated@@51 (_ BitVec 32)) ) (! (= ($generated@@50 ($generated@@49 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@49 $generated@@51))
))) (forall (($generated@@52 T@U) ) (! (= ($generated@@49 ($generated@@50 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ) (! ($generated $generated@@48 $generated@@53 ($generated@@1 32))
 :pattern ( ($generated $generated@@48 $generated@@53 ($generated@@1 32)))
)))
(assert  (and (and (= ($generated@@2 $generated@@54) 9) (forall (($generated@@57 (_ BitVec 64)) ) (! (= ($generated@@56 ($generated@@55 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@55 $generated@@57))
))) (forall (($generated@@58 T@U) ) (! (= ($generated@@55 ($generated@@56 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@56 $generated@@58))
))))
(assert (forall (($generated@@59 T@U) ) (! ($generated $generated@@54 $generated@@59 ($generated@@1 64))
 :pattern ( ($generated $generated@@54 $generated@@59 ($generated@@1 64)))
)))
(assert  (and (and (= ($generated@@2 $generated@@60) 10) (forall (($generated@@63 (_ BitVec 128)) ) (! (= ($generated@@62 ($generated@@61 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@61 $generated@@63))
))) (forall (($generated@@64 T@U) ) (! (= ($generated@@61 ($generated@@62 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@62 $generated@@64))
))))
(assert (forall (($generated@@65 T@U) ) (! ($generated $generated@@60 $generated@@65 ($generated@@1 128))
 :pattern ( ($generated $generated@@60 $generated@@65 ($generated@@1 128)))
)))
(assert (forall (($generated@@67 Int) ) (! (= ($generated@@66 $generated@@67) $generated@@67)
 :pattern ( ($generated@@66 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@68 $generated@@70 $generated@@69) $generated@@69)
 :pattern ( ($generated@@68 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 ($generated@@71 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@71 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@76 Int) ) (! (= ($generated@@75 ($generated@@1 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@1 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@71 $generated@@78 ($generated@@72 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@72 $generated@@78 $generated@@77))
)))
(assert (= $generated@@79 ($generated@@62 ($generated@@68 $generated@@60 ($generated@@61 #x0000000000000000ffffffffffffffff)))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@80 $generated@@91 $generated@@92 $generated@@93 ($generated@@87 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@80 $generated@@98 $generated@@99 $generated@@100 ($generated@@87 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@80 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@80 $generated@@107 $generated@@108 $generated@@109 ($generated@@87 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))) (= ($generated@@2 $generated@@81) 11)) (= ($generated@@2 $generated@@82) 12)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@84 $generated@@116 $generated@@117 ($generated@@88 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@118) $generated@@120) $generated@@118)
 :weight 0
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@125 $generated@@126) (= ($generated@@84 $generated@@121 $generated@@122 ($generated@@88 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@123) $generated@@126) ($generated@@84 $generated@@121 $generated@@122 $generated@@124 $generated@@126)))
 :weight 0
))) (= ($generated@@2 $generated@@85) 13)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (= ($generated@@2 ($generated@@86 $generated@@127 $generated@@128)) 14))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (! (= ($generated@@89 ($generated@@86 $generated@@129 $generated@@130)) $generated@@129)
 :pattern ( ($generated@@86 $generated@@129 $generated@@130))
))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (! (= ($generated@@90 ($generated@@86 $generated@@131 $generated@@132)) $generated@@132)
 :pattern ( ($generated@@86 $generated@@131 $generated@@132))
))))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 Bool) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@6 ($generated@@80 $generated@@81 $generated@@82 $generated@@3 ($generated@@83 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))  (=> (and (or (not (= $generated@@137 $generated@@133)) (not true)) ($generated@@6 ($generated@@71 $generated@@3 ($generated@@84 $generated@@82 $generated@@85 ($generated@@84 $generated@@81 ($generated@@86 $generated@@82 $generated@@85) $generated@@134 $generated@@137) $generated@@135)))) $generated@@136))
 :pattern ( ($generated@@80 $generated@@81 $generated@@82 $generated@@3 ($generated@@83 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))
)))
(assert  (=> (< 0 $generated@@139) ($generated $generated@@60 ($generated@@61 $generated@@79) ($generated@@1 128))))
(assert (forall (($generated@@140 Int) ) (! (= ($generated@@72 $generated@@0 ($generated@@7 ($generated@@66 $generated@@140))) ($generated@@68 $generated@@85 ($generated@@72 $generated@@0 ($generated@@7 $generated@@140))))
 :pattern ( ($generated@@72 $generated@@0 ($generated@@7 ($generated@@66 $generated@@140))))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@T) ) (! (= ($generated@@72 $generated@@142 ($generated@@68 $generated@@142 $generated@@141)) ($generated@@68 $generated@@85 ($generated@@72 $generated@@142 $generated@@141)))
 :pattern ( ($generated@@72 $generated@@142 ($generated@@68 $generated@@142 $generated@@141)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () (_ BitVec 64))
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 (T@U) Bool)
(declare-fun $generated@@150 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@151  (=> (and (= $generated@@143 ($generated@@83 $generated@@144 $generated@@145 $generated@@146 false)) (= (ControlFlow 0 2) (- 0 1))) (= (bvand (bvshl (concat #x0000000000000000 $generated@@147) (concat #x000000000000000000000000000000 ((_ int2bv 8) $generated@@148))) $generated@@79) (concat #x0000000000000000 (bvshl $generated@@147 (concat #b000000000000000000000000000000000000000000000000000000000 ((_ int2bv 7) $generated@@148))))))))
(let (($generated@@152  (=> (and ($generated@@149 $generated@@145) ($generated@@150 $generated@@145)) (=> (and (and (<= ($generated@@66 0) $generated@@148) (= 1 $generated@@139)) (and (< $generated@@148 64) (= (ControlFlow 0 3) 2))) $generated@@151))))
$generated@@152)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
