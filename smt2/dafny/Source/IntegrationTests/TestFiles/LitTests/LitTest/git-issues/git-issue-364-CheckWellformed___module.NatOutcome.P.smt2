(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 () Int)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@34 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@39 (T@U) Int)
(declare-fun $generated@@42 (T@U Int) T@U)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@44 (T@U) Int)
(declare-fun $generated@@45 (T@U) Int)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@54 (Int) Int)
(declare-fun $generated@@58 (T@U) T@U)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@62 (T@U T@U) Bool)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@69 (Int) T@U)
(declare-fun $generated@@75 (T@U T@U T@U) Bool)
(declare-fun $generated@@80 (T@U T@U) Bool)
(declare-fun $generated@@84 (T@U) T@U)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@U) T@U)
(declare-fun $generated@@102 (T@U) T@U)
(declare-fun $generated@@111 (T@U) Int)
(declare-fun $generated@@113 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@114 () T@T)
(declare-fun $generated@@115 () T@T)
(declare-fun $generated@@116 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@117 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@118 () T@T)
(declare-fun $generated@@119 (T@T T@T) T@T)
(declare-fun $generated@@120 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@121 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@122 (T@T) T@T)
(declare-fun $generated@@123 (T@T) T@T)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@177 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated) $generated@@0))
(assert (= ($generated@@9 $generated@@30) 3))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@33 T@U) ) (!  (=> (or ($generated@@28 $generated@@33) (and (< 0 $generated@@26) ($generated@@29 $generated@@30 $generated@@33 $generated@@31))) (= ($generated@@27 $generated@@33) (ite ($generated@@32 $generated@@33) 12 14)))
 :pattern ( ($generated@@27 $generated@@33))
))))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! ($generated@@34 $generated@@11 $generated@@36 $generated@@35 $generated@@37)
 :pattern ( ($generated@@34 $generated@@11 $generated@@36 $generated@@35 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (!  (=> (and ($generated@@32 $generated@@40) ($generated@@32 $generated@@41)) (= ($generated@@38 $generated@@40 $generated@@41) (= ($generated@@39 $generated@@40) ($generated@@39 $generated@@41))))
 :pattern ( ($generated@@38 $generated@@40 $generated@@41) ($generated@@32 $generated@@40))
 :pattern ( ($generated@@38 $generated@@40 $generated@@41) ($generated@@32 $generated@@41))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 Int) ) (!  (=> (and (<= 0 $generated@@48) (< $generated@@48 ($generated@@44 $generated@@47))) (< ($generated@@45 ($generated@@46 $generated@@30 ($generated@@42 $generated@@47 $generated@@48))) ($generated@@45 ($generated@@43 $generated@@47))))
 :pattern ( ($generated@@42 $generated@@47 $generated@@48) ($generated@@43 $generated@@47))
)))
(assert (= ($generated@@44 $generated@@49) 0))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@51 T@U) ) (!  (=> (or ($generated@@28 ($generated@@50 $generated@@30 $generated@@51)) (and (< 0 $generated@@26) ($generated@@29 $generated@@30 $generated@@51 $generated@@31))) (= ($generated@@27 ($generated@@50 $generated@@30 $generated@@51)) (ite ($generated@@32 ($generated@@50 $generated@@30 $generated@@51)) 12 14)))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@50 $generated@@30 $generated@@51)))
))))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@38 $generated@@52 $generated@@53) (= $generated@@52 $generated@@53))
 :pattern ( ($generated@@38 $generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 Int) ) (! (= ($generated@@54 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@50 $generated@@57 $generated@@56) $generated@@56)
 :pattern ( ($generated@@50 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@32 $generated@@59) (= ($generated@@58 $generated@@59) $generated@@5))
 :pattern ( ($generated@@32 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@60 $generated@@61) (= ($generated@@58 $generated@@61) $generated@@6))
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@62 $generated@@63 $generated@@64)  (and (= ($generated@@44 $generated@@63) ($generated@@44 $generated@@64)) (forall (($generated@@65 Int) ) (!  (=> (and (<= 0 $generated@@65) (< $generated@@65 ($generated@@44 $generated@@63))) (= ($generated@@42 $generated@@63 $generated@@65) ($generated@@42 $generated@@64 $generated@@65)))
 :pattern ( ($generated@@42 $generated@@63 $generated@@65))
 :pattern ( ($generated@@42 $generated@@64 $generated@@65))
))))
 :pattern ( ($generated@@62 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 ($generated@@46 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@46 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@32 $generated@@70) (exists (($generated@@71 Int) ) (= $generated@@70 ($generated@@69 $generated@@71))))
 :pattern ( ($generated@@32 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> ($generated@@60 $generated@@72) (exists (($generated@@73 T@U) ) (= $generated@@72 ($generated@@43 $generated@@73))))
 :pattern ( ($generated@@60 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@29 $generated@@11 $generated@@74 $generated@@35) (<= ($generated@@54 0) ($generated@@16 $generated@@74)))
 :pattern ( ($generated@@29 $generated@@11 $generated@@74 $generated@@35))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@75 ($generated@@66 $generated@@79 $generated@@76) $generated@@77 $generated@@78) ($generated@@34 $generated@@79 $generated@@76 $generated@@77 $generated@@78))
 :pattern ( ($generated@@75 ($generated@@66 $generated@@79 $generated@@76) $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@81 T@U) ) (!  (=> ($generated@@80 $generated@@81 $generated@@35) (and (= ($generated@@66 $generated@@11 ($generated@@46 $generated@@11 $generated@@81)) $generated@@81) ($generated@@29 $generated@@11 ($generated@@46 $generated@@11 $generated@@81) $generated@@35)))
 :pattern ( ($generated@@80 $generated@@81 $generated@@35))
)))
(assert (forall (($generated@@82 T@U) ) (!  (=> ($generated@@80 $generated@@82 $generated@@31) (and (= ($generated@@66 $generated@@30 ($generated@@46 $generated@@30 $generated@@82)) $generated@@82) ($generated@@29 $generated@@30 ($generated@@46 $generated@@30 $generated@@82) $generated@@31)))
 :pattern ( ($generated@@80 $generated@@82 $generated@@31))
)))
(assert (forall (($generated@@83 Int) ) (! (= ($generated@@29 $generated@@30 ($generated@@69 $generated@@83) $generated@@31) ($generated@@29 $generated@@11 ($generated@@15 $generated@@83) $generated@@35))
 :pattern ( ($generated@@29 $generated@@30 ($generated@@69 $generated@@83) $generated@@31))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (!  (=> (and ($generated@@60 $generated@@85) ($generated@@60 $generated@@86)) (= ($generated@@38 $generated@@85 $generated@@86) ($generated@@62 ($generated@@84 $generated@@85) ($generated@@84 $generated@@86))))
 :pattern ( ($generated@@38 $generated@@85 $generated@@86) ($generated@@60 $generated@@85))
 :pattern ( ($generated@@38 $generated@@85 $generated@@86) ($generated@@60 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> ($generated@@62 $generated@@87 $generated@@88) (= $generated@@87 $generated@@88))
 :pattern ( ($generated@@62 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@89 $generated@@31) (or ($generated@@32 $generated@@89) ($generated@@60 $generated@@89)))
 :pattern ( ($generated@@60 $generated@@89) ($generated@@29 $generated@@30 $generated@@89 $generated@@31))
 :pattern ( ($generated@@32 $generated@@89) ($generated@@29 $generated@@30 $generated@@89 $generated@@31))
)))
(assert (= ($generated@@9 $generated@@90) 4))
(assert (forall (($generated@@91 T@U) ) (!  (=> ($generated@@80 $generated@@91 $generated) (and (= ($generated@@66 $generated@@90 ($generated@@46 $generated@@90 $generated@@91)) $generated@@91) ($generated@@29 $generated@@90 ($generated@@46 $generated@@90 $generated@@91) $generated)))
 :pattern ( ($generated@@80 $generated@@91 $generated))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@T) ) (! (= ($generated@@80 ($generated@@66 $generated@@94 $generated@@92) $generated@@93) ($generated@@29 $generated@@94 $generated@@92 $generated@@93))
 :pattern ( ($generated@@80 ($generated@@66 $generated@@94 $generated@@92) $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ) (! (<= 0 ($generated@@44 $generated@@95))
 :pattern ( ($generated@@44 $generated@@95))
)))
(assert (= ($generated@@9 $generated@@96) 5))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@34 $generated@@96 $generated@@98 ($generated@@97 $generated@@99) $generated@@100) (forall (($generated@@101 Int) ) (!  (=> (and (<= 0 $generated@@101) (< $generated@@101 ($generated@@44 $generated@@98))) ($generated@@75 ($generated@@42 $generated@@98 $generated@@101) $generated@@99 $generated@@100))
 :pattern ( ($generated@@42 $generated@@98 $generated@@101))
)))
 :pattern ( ($generated@@34 $generated@@96 $generated@@98 ($generated@@97 $generated@@99) $generated@@100))
)))
(assert (forall (($generated@@103 T@U) ) (! (= ($generated@@102 ($generated@@97 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@97 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ) (! (= ($generated@@25 ($generated@@97 $generated@@104)) $generated@@1)
 :pattern ( ($generated@@97 $generated@@104))
)))
(assert (forall (($generated@@105 Int) ) (! (= ($generated@@58 ($generated@@69 $generated@@105)) $generated@@5)
 :pattern ( ($generated@@69 $generated@@105))
)))
(assert (forall (($generated@@106 Int) ) (! (= ($generated@@39 ($generated@@69 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@69 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ) (! (= ($generated@@58 ($generated@@43 $generated@@107)) $generated@@6)
 :pattern ( ($generated@@43 $generated@@107))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@84 ($generated@@43 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@43 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@46 $generated@@110 ($generated@@66 $generated@@110 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@66 $generated@@110 $generated@@109))
)))
(assert (forall (($generated@@112 T@U) ) (! (< ($generated@@111 $generated@@112) ($generated@@45 ($generated@@43 $generated@@112)))
 :pattern ( ($generated@@43 $generated@@112))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@113 $generated@@124 $generated@@125 $generated@@126 ($generated@@120 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@129 $generated@@130) $generated@@127)
 :weight 0
)) (and (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@136 $generated@@138) (= ($generated@@113 $generated@@131 $generated@@132 $generated@@133 ($generated@@120 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@113 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
)) (forall (($generated@@140 T@T) ($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ) (!  (or (= $generated@@146 $generated@@148) (= ($generated@@113 $generated@@140 $generated@@141 $generated@@142 ($generated@@120 $generated@@140 $generated@@141 $generated@@142 $generated@@144 $generated@@145 $generated@@146 $generated@@143) $generated@@147 $generated@@148) ($generated@@113 $generated@@140 $generated@@141 $generated@@142 $generated@@144 $generated@@147 $generated@@148)))
 :weight 0
)))) (= ($generated@@9 $generated@@114) 6)) (= ($generated@@9 $generated@@115) 7)) (forall (($generated@@149 T@T) ($generated@@150 T@T) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (! (= ($generated@@117 $generated@@149 $generated@@150 ($generated@@121 $generated@@149 $generated@@150 $generated@@152 $generated@@153 $generated@@151) $generated@@153) $generated@@151)
 :weight 0
))) (forall (($generated@@154 T@T) ($generated@@155 T@T) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ($generated@@159 T@U) ) (!  (or (= $generated@@158 $generated@@159) (= ($generated@@117 $generated@@154 $generated@@155 ($generated@@121 $generated@@154 $generated@@155 $generated@@157 $generated@@158 $generated@@156) $generated@@159) ($generated@@117 $generated@@154 $generated@@155 $generated@@157 $generated@@159)))
 :weight 0
))) (= ($generated@@9 $generated@@118) 8)) (forall (($generated@@160 T@T) ($generated@@161 T@T) ) (= ($generated@@9 ($generated@@119 $generated@@160 $generated@@161)) 9))) (forall (($generated@@162 T@T) ($generated@@163 T@T) ) (! (= ($generated@@122 ($generated@@119 $generated@@162 $generated@@163)) $generated@@162)
 :pattern ( ($generated@@119 $generated@@162 $generated@@163))
))) (forall (($generated@@164 T@T) ($generated@@165 T@T) ) (! (= ($generated@@123 ($generated@@119 $generated@@164 $generated@@165)) $generated@@165)
 :pattern ( ($generated@@119 $generated@@164 $generated@@165))
))))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 Bool) ($generated@@170 T@U) ($generated@@171 T@U) ) (! (= ($generated@@14 ($generated@@113 $generated@@114 $generated@@115 $generated@@10 ($generated@@116 $generated@@166 $generated@@167 $generated@@168 $generated@@169) $generated@@170 $generated@@171))  (=> (and (or (not (= $generated@@170 $generated@@166)) (not true)) ($generated@@14 ($generated@@46 $generated@@10 ($generated@@117 $generated@@115 $generated@@118 ($generated@@117 $generated@@114 ($generated@@119 $generated@@115 $generated@@118) $generated@@167 $generated@@170) $generated@@168)))) $generated@@169))
 :pattern ( ($generated@@113 $generated@@114 $generated@@115 $generated@@10 ($generated@@116 $generated@@166 $generated@@167 $generated@@168 $generated@@169) $generated@@170 $generated@@171))
)))
(assert (forall (($generated@@172 T@U) ($generated@@173 T@U) ) (!  (=> ($generated@@80 $generated@@172 ($generated@@97 $generated@@173)) (and (= ($generated@@66 $generated@@96 ($generated@@46 $generated@@96 $generated@@172)) $generated@@172) ($generated@@29 $generated@@96 ($generated@@46 $generated@@96 $generated@@172) ($generated@@97 $generated@@173))))
 :pattern ( ($generated@@80 $generated@@172 ($generated@@97 $generated@@173)))
)))
(assert (forall (($generated@@175 T@U) ($generated@@176 T@U) ) (!  (=> (and ($generated@@174 $generated@@176) ($generated@@29 $generated@@30 $generated@@175 $generated@@31)) ($generated@@34 $generated@@30 $generated@@175 $generated@@31 $generated@@176))
 :pattern ( ($generated@@34 $generated@@30 $generated@@175 $generated@@31 $generated@@176))
)))
(assert (= ($generated@@25 $generated@@35) $generated@@3))
(assert (= ($generated@@177 $generated@@35) $generated@@7))
(assert (= ($generated@@25 $generated@@31) $generated@@4))
(assert (= ($generated@@177 $generated@@31) $generated@@8))
(assert (forall (($generated@@178 T@U) ) (! (= ($generated@@29 $generated@@30 ($generated@@43 $generated@@178) $generated@@31) ($generated@@29 $generated@@96 $generated@@178 ($generated@@97 $generated)))
 :pattern ( ($generated@@29 $generated@@30 ($generated@@43 $generated@@178) $generated@@31))
)))
(assert (forall (($generated@@179 T@U) ($generated@@180 T@U) ) (!  (=> (and ($generated@@174 $generated@@180) (and ($generated@@60 $generated@@179) ($generated@@34 $generated@@30 $generated@@179 $generated@@31 $generated@@180))) ($generated@@34 $generated@@96 ($generated@@84 $generated@@179) ($generated@@97 $generated) $generated@@180))
 :pattern ( ($generated@@34 $generated@@96 ($generated@@84 $generated@@179) ($generated@@97 $generated) $generated@@180))
)))
(assert (forall (($generated@@181 T@U) ($generated@@182 T@U) ) (!  (=> (and ($generated@@174 $generated@@182) (and ($generated@@32 $generated@@181) ($generated@@34 $generated@@30 $generated@@181 $generated@@31 $generated@@182))) ($generated@@34 $generated@@11 ($generated@@15 ($generated@@39 $generated@@181)) $generated@@35 $generated@@182))
 :pattern ( ($generated@@34 $generated@@11 ($generated@@15 ($generated@@39 $generated@@181)) $generated@@35 $generated@@182))
)))
(assert (forall (($generated@@183 Int) ) (! (= ($generated@@66 $generated@@11 ($generated@@15 ($generated@@54 $generated@@183))) ($generated@@50 $generated@@118 ($generated@@66 $generated@@11 ($generated@@15 $generated@@183))))
 :pattern ( ($generated@@66 $generated@@11 ($generated@@15 ($generated@@54 $generated@@183))))
)))
(assert (forall (($generated@@184 Int) ) (! (= ($generated@@69 ($generated@@54 $generated@@184)) ($generated@@50 $generated@@30 ($generated@@69 $generated@@184)))
 :pattern ( ($generated@@69 ($generated@@54 $generated@@184)))
)))
(assert (forall (($generated@@185 T@U) ) (! (= ($generated@@43 ($generated@@50 $generated@@96 $generated@@185)) ($generated@@50 $generated@@30 ($generated@@43 $generated@@185)))
 :pattern ( ($generated@@43 ($generated@@50 $generated@@96 $generated@@185)))
)))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@T) ) (! (= ($generated@@66 $generated@@187 ($generated@@50 $generated@@187 $generated@@186)) ($generated@@50 $generated@@118 ($generated@@66 $generated@@187 $generated@@186)))
 :pattern ( ($generated@@66 $generated@@187 ($generated@@50 $generated@@187 $generated@@186)))
)))
(assert (forall (($generated@@188 T@U) ) (!  (=> (= ($generated@@44 $generated@@188) 0) (= $generated@@188 $generated@@49))
 :pattern ( ($generated@@44 $generated@@188))
)))
(assert  (=> (<= 0 $generated@@26) (forall (($generated@@189 T@U) ) (!  (=> (or ($generated@@28 $generated@@189) (and (< 0 $generated@@26) ($generated@@29 $generated@@30 $generated@@189 $generated@@31))) (and (< ($generated@@27 $generated@@189) 20) (<= ($generated@@54 0) ($generated@@27 $generated@@189))))
 :pattern ( ($generated@@27 $generated@@189))
))))
(assert (forall (($generated@@190 T@U) ($generated@@191 T@U) ) (! ($generated@@34 $generated@@90 $generated@@191 $generated $generated@@190)
 :pattern ( ($generated@@34 $generated@@90 $generated@@191 $generated $generated@@190))
)))
(assert (forall (($generated@@192 T@U) ($generated@@193 T@U) ) (! (= ($generated@@29 $generated@@96 $generated@@192 ($generated@@97 $generated@@193)) (forall (($generated@@194 Int) ) (!  (=> (and (<= 0 $generated@@194) (< $generated@@194 ($generated@@44 $generated@@192))) ($generated@@80 ($generated@@42 $generated@@192 $generated@@194) $generated@@193))
 :pattern ( ($generated@@42 $generated@@192 $generated@@194))
)))
 :pattern ( ($generated@@29 $generated@@96 $generated@@192 ($generated@@97 $generated@@193)))
)))
(assert (forall (($generated@@195 T@U) ($generated@@196 Int) ) (!  (=> (and (<= 0 $generated@@196) (< $generated@@196 ($generated@@44 $generated@@195))) (< ($generated@@45 ($generated@@46 $generated@@30 ($generated@@42 $generated@@195 $generated@@196))) ($generated@@111 $generated@@195)))
 :pattern ( ($generated@@45 ($generated@@46 $generated@@30 ($generated@@42 $generated@@195 $generated@@196))))
)))
(assert (forall (($generated@@197 T@U) ) (! ($generated@@29 $generated@@90 $generated@@197 $generated)
 :pattern ( ($generated@@29 $generated@@90 $generated@@197 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@198 () T@U)
(declare-fun $generated@@199 () T@U)
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 () T@U)
(declare-fun $generated@@202 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@203  (=> (= (ControlFlow 0 4) (- 0 3)) (< ($generated@@27 $generated@@198) 20))))
(let (($generated@@204  (=> (not ($generated@@32 $generated@@198)) (and (=> (= (ControlFlow 0 7) (- 0 8)) ($generated@@29 $generated@@11 ($generated@@15 ($generated@@54 14)) $generated@@35)) (=> ($generated@@29 $generated@@11 ($generated@@15 ($generated@@54 14)) $generated@@35) (=> (= ($generated@@27 $generated@@198) ($generated@@54 14)) (=> (and ($generated@@29 $generated@@11 ($generated@@15 ($generated@@27 $generated@@198)) $generated@@35) (= (ControlFlow 0 7) 4)) $generated@@203)))))))
(let (($generated@@205  (=> ($generated@@32 $generated@@198) (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@29 $generated@@11 ($generated@@15 ($generated@@54 12)) $generated@@35)) (=> ($generated@@29 $generated@@11 ($generated@@15 ($generated@@54 12)) $generated@@35) (=> (= ($generated@@27 $generated@@198) ($generated@@54 12)) (=> (and ($generated@@29 $generated@@11 ($generated@@15 ($generated@@27 $generated@@198)) $generated@@35) (= (ControlFlow 0 5) 4)) $generated@@203)))))))
(let (($generated@@206  (=> (<= ($generated@@54 0) ($generated@@27 $generated@@198)) (=> (and ($generated@@75 ($generated@@66 $generated@@30 $generated@@198) $generated@@31 $generated@@199) (= (ControlFlow 0 2) (- 0 1))) (or ($generated@@38 $generated@@198 $generated@@198) (< ($generated@@45 $generated@@198) ($generated@@45 $generated@@198)))))))
(let (($generated@@207  (=> (= $generated@@200 ($generated@@116 $generated@@201 $generated@@199 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 9) 2) $generated@@206) (=> (= (ControlFlow 0 9) 5) $generated@@205)) (=> (= (ControlFlow 0 9) 7) $generated@@204)))))
(let (($generated@@208  (=> (and ($generated@@174 $generated@@199) ($generated@@202 $generated@@199)) (=> (and (and ($generated@@29 $generated@@30 $generated@@198 $generated@@31) ($generated@@34 $generated@@30 $generated@@198 $generated@@31 $generated@@199)) (and (= 0 $generated@@26) (= (ControlFlow 0 10) 9))) $generated@@207))))
$generated@@208)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
