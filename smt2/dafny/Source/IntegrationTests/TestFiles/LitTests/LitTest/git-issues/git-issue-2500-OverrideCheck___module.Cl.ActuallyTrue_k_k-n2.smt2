(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@44 () Int)
(declare-fun $generated@@45 (T@U) Bool)
(declare-fun $generated@@46 (T@U) Bool)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T T@T) T@T)
(declare-fun $generated@@56 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@82 (T@T T@U) T@U)
(declare-fun $generated@@85 (T@T T@U) T@U)
(declare-fun $generated@@95 (T@U) Bool)
(declare-fun $generated@@96 (T@U) Bool)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@139 (T@U) T@U)
(declare-fun $generated@@140 (T@U) T@U)
(declare-fun $generated@@141 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert ($generated@@25 $generated@@26))
(assert (= ($generated@@9 $generated@@28) 3))
(assert (forall (($generated@@31 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@31 $generated@@26)  (or (= $generated@@31 $generated@@29) (= ($generated@@30 $generated@@31) $generated@@26)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@31 $generated@@26))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@32 $generated@@28 $generated@@34 $generated@@33 $generated@@35) ($generated@@32 $generated@@28 $generated@@34 $generated@@26 $generated@@35))
 :pattern ( ($generated@@32 $generated@@28 $generated@@34 $generated@@33 $generated@@35))
 :pattern ( ($generated@@32 $generated@@28 $generated@@34 $generated@@26 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@32 $generated@@28 $generated@@38 $generated@@36 $generated@@39) ($generated@@32 $generated@@28 $generated@@38 $generated@@37 $generated@@39))
 :pattern ( ($generated@@32 $generated@@28 $generated@@38 $generated@@36 $generated@@39))
 :pattern ( ($generated@@32 $generated@@28 $generated@@38 $generated@@37 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@32 $generated@@28 $generated@@42 $generated@@40 $generated@@43) ($generated@@32 $generated@@28 $generated@@42 $generated@@41 $generated@@43))
 :pattern ( ($generated@@32 $generated@@28 $generated@@42 $generated@@40 $generated@@43))
 :pattern ( ($generated@@32 $generated@@28 $generated@@42 $generated@@41 $generated@@43))
)))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@47 T@U) ) (!  (=> (or ($generated@@46 $generated@@47) (and (< 0 $generated@@44) (and (or (not (= $generated@@47 $generated@@29)) (not true)) ($generated@@27 $generated@@28 $generated@@47 $generated@@33)))) ($generated@@45 $generated@@47))
 :pattern ( ($generated@@45 $generated@@47))
))))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@50 T@U) ) (!  (=> (or ($generated@@49 $generated@@50) (and (< 0 $generated@@44) (and (or (not (= $generated@@50 $generated@@29)) (not true)) ($generated@@27 $generated@@28 $generated@@50 $generated@@33)))) ($generated@@48 $generated@@50))
 :pattern ( ($generated@@48 $generated@@50))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@52 $generated@@59 $generated@@60 ($generated@@56 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@61) $generated@@63) $generated@@61)
 :weight 0
)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (or (= $generated@@68 $generated@@69) (= ($generated@@52 $generated@@64 $generated@@65 ($generated@@56 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@66) $generated@@69) ($generated@@52 $generated@@64 $generated@@65 $generated@@67 $generated@@69)))
 :weight 0
))) (= ($generated@@9 $generated@@53) 4)) (= ($generated@@9 $generated@@54) 5)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (= ($generated@@9 ($generated@@55 $generated@@70 $generated@@71)) 6))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@57 ($generated@@55 $generated@@72 $generated@@73)) $generated@@72)
 :pattern ( ($generated@@55 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@T) ($generated@@75 T@T) ) (! (= ($generated@@58 ($generated@@55 $generated@@74 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@55 $generated@@74 $generated@@75))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@32 $generated@@28 $generated@@76 $generated@@26 $generated@@77)  (or (= $generated@@76 $generated@@29) ($generated@@14 ($generated@@51 $generated@@10 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@28 ($generated@@55 $generated@@53 $generated@@54) $generated@@77 $generated@@76) $generated)))))
 :pattern ( ($generated@@32 $generated@@28 $generated@@76 $generated@@26 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@32 $generated@@28 $generated@@78 $generated@@37 $generated@@79)  (or (= $generated@@78 $generated@@29) ($generated@@14 ($generated@@51 $generated@@10 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@28 ($generated@@55 $generated@@53 $generated@@54) $generated@@79 $generated@@78) $generated)))))
 :pattern ( ($generated@@32 $generated@@28 $generated@@78 $generated@@37 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@32 $generated@@28 $generated@@80 $generated@@41 $generated@@81)  (or (= $generated@@80 $generated@@29) ($generated@@14 ($generated@@51 $generated@@10 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@28 ($generated@@55 $generated@@53 $generated@@54) $generated@@81 $generated@@80) $generated)))))
 :pattern ( ($generated@@32 $generated@@28 $generated@@80 $generated@@41 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@82 $generated@@84 $generated@@83) $generated@@83)
 :pattern ( ($generated@@82 $generated@@84 $generated@@83))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@85 $generated@@87 ($generated@@51 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@51 $generated@@87 $generated@@86))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@88 $generated@@33)  (and ($generated@@27 $generated@@28 $generated@@88 $generated@@26) (or (not (= $generated@@88 $generated@@29)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@88 $generated@@33))
 :pattern ( ($generated@@27 $generated@@28 $generated@@88 $generated@@26))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@89 $generated@@36)  (and ($generated@@27 $generated@@28 $generated@@89 $generated@@37) (or (not (= $generated@@89 $generated@@29)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@89 $generated@@36))
 :pattern ( ($generated@@27 $generated@@28 $generated@@89 $generated@@37))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@90 $generated@@40)  (and ($generated@@27 $generated@@28 $generated@@90 $generated@@41) (or (not (= $generated@@90 $generated@@29)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@90 $generated@@40))
 :pattern ( ($generated@@27 $generated@@28 $generated@@90 $generated@@41))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ) (!  (=> ($generated@@32 $generated@@28 $generated@@91 $generated@@41 $generated@@92) ($generated@@32 $generated@@28 $generated@@91 $generated@@37 $generated@@92))
 :pattern ( ($generated@@32 $generated@@28 $generated@@91 $generated@@41 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ) (!  (=> ($generated@@32 $generated@@28 $generated@@93 $generated@@26 $generated@@94) ($generated@@32 $generated@@28 $generated@@93 $generated@@41 $generated@@94))
 :pattern ( ($generated@@32 $generated@@28 $generated@@93 $generated@@26 $generated@@94))
)))
(assert (forall (($generated@@97 T@U) ) (!  (=> (or ($generated@@96 $generated@@97) (and (< 1 $generated@@44) (and (or (not (= $generated@@97 $generated@@29)) (not true)) ($generated@@27 $generated@@28 $generated@@97 $generated@@36)))) ($generated@@95 $generated@@97))
 :pattern ( ($generated@@95 $generated@@97))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@51 $generated@@99 ($generated@@85 $generated@@99 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@85 $generated@@99 $generated@@98))
)))
(assert  (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@100 $generated@@103 $generated@@104 $generated@@105 ($generated@@102 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@108 $generated@@109) $generated@@106)
 :weight 0
)) (and (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@100 $generated@@110 $generated@@111 $generated@@112 ($generated@@102 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@100 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@125 $generated@@127) (= ($generated@@100 $generated@@119 $generated@@120 $generated@@121 ($generated@@102 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@126 $generated@@127) ($generated@@100 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@126 $generated@@127)))
 :weight 0
)))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@14 ($generated@@100 $generated@@28 $generated@@53 $generated@@10 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@14 ($generated@@51 $generated@@10 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@28 ($generated@@55 $generated@@53 $generated@@54) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@100 $generated@@28 $generated@@53 $generated@@10 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@134 T@U) ) (!  (=> (or ($generated@@46 $generated@@134) (and (< 0 $generated@@44) (and (or (not (= $generated@@134 $generated@@29)) (not true)) ($generated@@27 $generated@@28 $generated@@134 $generated@@33)))) (= ($generated@@45 $generated@@134) ($generated@@14 ($generated@@82 $generated@@10 ($generated@@13 true)))))
 :pattern ( ($generated@@45 $generated@@134))
))))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@135 T@U) ) (!  (=> (or ($generated@@46 $generated@@135) (and (< 0 $generated@@44) (and (or (not (= $generated@@135 $generated@@29)) (not true)) ($generated@@27 $generated@@28 $generated@@135 $generated@@33)))) (= ($generated@@95 $generated@@135) ($generated@@45 $generated@@135)))
 :pattern ( ($generated@@95 $generated@@135) ($generated@@27 $generated@@28 $generated@@135 $generated@@33))
 :pattern ( ($generated@@95 $generated@@135) ($generated@@45 $generated@@135))
))))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@136 T@U) ) (!  (=> (or ($generated@@49 $generated@@136) (and (< 0 $generated@@44) (and (or (not (= $generated@@136 $generated@@29)) (not true)) ($generated@@27 $generated@@28 $generated@@136 $generated@@33)))) (= ($generated@@48 $generated@@136) ($generated@@14 ($generated@@82 $generated@@10 ($generated@@13 true)))))
 :pattern ( ($generated@@48 $generated@@136))
))))
(assert (forall (($generated@@137 T@U) ) (!  (=> ($generated@@27 $generated@@28 $generated@@137 $generated@@41) ($generated@@27 $generated@@28 $generated@@137 $generated@@37))
 :pattern ( ($generated@@27 $generated@@28 $generated@@137 $generated@@41))
)))
(assert (forall (($generated@@138 T@U) ) (!  (=> ($generated@@27 $generated@@28 $generated@@138 $generated@@26) ($generated@@27 $generated@@28 $generated@@138 $generated@@41))
 :pattern ( ($generated@@27 $generated@@28 $generated@@138 $generated@@26))
)))
(assert (= ($generated@@139 $generated@@40) $generated@@0))
(assert (= ($generated@@140 $generated@@40) $generated@@6))
(assert (= ($generated@@139 $generated@@41) $generated@@1))
(assert (= ($generated@@140 $generated@@41) $generated@@6))
(assert (= ($generated@@139 $generated@@26) $generated@@2))
(assert (= ($generated@@140 $generated@@26) $generated@@7))
(assert (= ($generated@@139 $generated@@33) $generated@@3))
(assert (= ($generated@@140 $generated@@33) $generated@@7))
(assert (= ($generated@@139 $generated@@37) $generated@@4))
(assert (= ($generated@@140 $generated@@37) $generated@@8))
(assert (= ($generated@@139 $generated@@36) $generated@@5))
(assert (= ($generated@@140 $generated@@36) $generated@@8))
(assert (forall (($generated@@142 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@142 $generated@@37)  (or (= $generated@@142 $generated@@29) ($generated@@141 ($generated@@30 $generated@@142))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@142 $generated@@37))
)))
(assert (forall (($generated@@143 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@143 $generated@@41)  (or (= $generated@@143 $generated@@29) ($generated@@25 ($generated@@30 $generated@@143))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@143 $generated@@41))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@T) ) (! (= ($generated@@85 $generated@@145 ($generated@@82 $generated@@145 $generated@@144)) ($generated@@82 $generated@@54 ($generated@@85 $generated@@145 $generated@@144)))
 :pattern ( ($generated@@85 $generated@@145 ($generated@@82 $generated@@145 $generated@@144)))
)))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@146 T@U) ) (!  (=> (or ($generated@@46 ($generated@@82 $generated@@28 $generated@@146)) (and (< 0 $generated@@44) (and (or (not (= $generated@@146 $generated@@29)) (not true)) ($generated@@27 $generated@@28 $generated@@146 $generated@@33)))) (= ($generated@@45 ($generated@@82 $generated@@28 $generated@@146)) ($generated@@14 ($generated@@82 $generated@@10 ($generated@@13 true)))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@82 $generated@@28 $generated@@146)))
))))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@147 T@U) ) (!  (=> (or ($generated@@49 ($generated@@82 $generated@@28 $generated@@147)) (and (< 0 $generated@@44) (and (or (not (= $generated@@147 $generated@@29)) (not true)) ($generated@@27 $generated@@28 $generated@@147 $generated@@33)))) (= ($generated@@48 ($generated@@82 $generated@@28 $generated@@147)) ($generated@@14 ($generated@@82 $generated@@10 ($generated@@13 true)))))
 :weight 3
 :pattern ( ($generated@@48 ($generated@@82 $generated@@28 $generated@@147)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@153  (and (=> (= (ControlFlow 0 2) (- 0 4)) true) (=> (= $generated@@148 ($generated@@101 $generated@@29 $generated@@149 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@154 T@U) ($generated@@155 T@U) ) true)) (=> (forall (($generated@@156 T@U) ($generated@@157 T@U) ) true) (=> (and ($generated@@48 $generated@@150) (= (ControlFlow 0 2) (- 0 1))) (let (($generated@@158 $generated@@150))
($generated@@95 $generated@@158)))))))))
(let (($generated@@159  (=> (and ($generated@@151 $generated@@149) ($generated@@152 $generated@@149)) (=> (and (and (or (not (= $generated@@150 $generated@@29)) (not true)) (and ($generated@@27 $generated@@28 $generated@@150 $generated@@33) ($generated@@32 $generated@@28 $generated@@150 $generated@@33 $generated@@149))) (and (= 0 $generated@@44) (= (ControlFlow 0 5) 2))) $generated@@153))))
$generated@@159)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
