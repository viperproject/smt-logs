(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U) Int)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@T T@T) T@T)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@53 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@106 (T@U) T@U)
(declare-fun $generated@@107 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! ($generated@@20 $generated@@6 $generated@@22 $generated@@21 $generated@@23)
 :pattern ( ($generated@@20 $generated@@6 $generated@@22 $generated@@21 $generated@@23))
)))
(assert (= ($generated@@4 $generated@@26) 3))
(assert  (=> (< 0 $generated@@24) (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> (and (and ($generated@@28 $generated@@30) ($generated@@29 $generated@@26 $generated@@31 $generated@@27)) ($generated@@20 $generated@@26 $generated@@31 $generated@@27 $generated@@30)) ($generated@@20 $generated@@6 ($generated@@10 ($generated@@25 $generated@@31)) $generated@@21 $generated@@30))
 :pattern ( ($generated@@25 $generated@@31) ($generated@@20 $generated@@26 $generated@@31 $generated@@27 $generated@@30))
))))
(assert  (=> (< 0 $generated@@24) (forall (($generated@@32 T@U) ) (!  (=> ($generated@@29 $generated@@26 $generated@@32 $generated@@27) ($generated@@29 $generated@@6 ($generated@@10 ($generated@@25 $generated@@32)) $generated@@21))
 :pattern ( ($generated@@25 $generated@@32))
))))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@33 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 ($generated@@38 $generated@@41 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@38 $generated@@41 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@29 $generated@@6 $generated@@42 $generated@@21) (<= ($generated@@33 0) ($generated@@11 $generated@@42)))
 :pattern ( ($generated@@29 $generated@@6 $generated@@42 $generated@@21))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@38 $generated@@44 ($generated@@39 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@39 $generated@@44 $generated@@43))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@45 $generated@@56 $generated@@57 $generated@@58 ($generated@@52 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@59) $generated@@61 $generated@@62) $generated@@59)
 :weight 0
)) (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (or (= $generated@@68 $generated@@70) (= ($generated@@45 $generated@@63 $generated@@64 $generated@@65 ($generated@@52 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@70 $generated@@71) ($generated@@45 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@70 $generated@@71)))
 :weight 0
)) (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@78 $generated@@80) (= ($generated@@45 $generated@@72 $generated@@73 $generated@@74 ($generated@@52 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@45 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)))) (= ($generated@@4 $generated@@46) 4)) (= ($generated@@4 $generated@@47) 5)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@49 $generated@@81 $generated@@82 ($generated@@53 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@83) $generated@@85) $generated@@83)
 :weight 0
))) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@90 $generated@@91) (= ($generated@@49 $generated@@86 $generated@@87 ($generated@@53 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@88) $generated@@91) ($generated@@49 $generated@@86 $generated@@87 $generated@@89 $generated@@91)))
 :weight 0
))) (= ($generated@@4 $generated@@50) 6)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ) (= ($generated@@4 ($generated@@51 $generated@@92 $generated@@93)) 7))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (! (= ($generated@@54 ($generated@@51 $generated@@94 $generated@@95)) $generated@@94)
 :pattern ( ($generated@@51 $generated@@94 $generated@@95))
))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (! (= ($generated@@55 ($generated@@51 $generated@@96 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@51 $generated@@96 $generated@@97))
))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 Bool) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@9 ($generated@@45 $generated@@46 $generated@@47 $generated@@5 ($generated@@48 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))  (=> (and (or (not (= $generated@@102 $generated@@98)) (not true)) ($generated@@9 ($generated@@38 $generated@@5 ($generated@@49 $generated@@47 $generated@@50 ($generated@@49 $generated@@46 ($generated@@51 $generated@@47 $generated@@50) $generated@@99 $generated@@102) $generated@@100)))) $generated@@101))
 :pattern ( ($generated@@45 $generated@@46 $generated@@47 $generated@@5 ($generated@@48 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ) (!  (=> (and ($generated@@28 $generated@@105) ($generated@@29 $generated@@26 $generated@@104 $generated@@27)) ($generated@@20 $generated@@26 $generated@@104 $generated@@27 $generated@@105))
 :pattern ( ($generated@@20 $generated@@26 $generated@@104 $generated@@27 $generated@@105))
)))
(assert (= ($generated@@106 $generated@@21) $generated@@0))
(assert (= ($generated@@107 $generated@@21) $generated@@2))
(assert (= ($generated@@106 $generated@@27) $generated@@1))
(assert (= ($generated@@107 $generated@@27) $generated@@3))
(assert (forall (($generated@@108 Int) ) (! (= ($generated@@39 $generated@@6 ($generated@@10 ($generated@@33 $generated@@108))) ($generated@@35 $generated@@50 ($generated@@39 $generated@@6 ($generated@@10 $generated@@108))))
 :pattern ( ($generated@@39 $generated@@6 ($generated@@10 ($generated@@33 $generated@@108))))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@39 $generated@@110 ($generated@@35 $generated@@110 $generated@@109)) ($generated@@35 $generated@@50 ($generated@@39 $generated@@110 $generated@@109)))
 :pattern ( ($generated@@39 $generated@@110 ($generated@@35 $generated@@110 $generated@@109)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 (T@U) Bool)
(declare-fun $generated@@118 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@119  (=> (= $generated@@111 ($generated@@48 $generated@@112 $generated@@113 $generated false)) (=> (and (= $generated@@114 ($generated@@25 $generated@@115)) (= (ControlFlow 0 2) (- 0 1))) (= $generated@@114 $generated@@116)))))
(let (($generated@@120  (=> (and ($generated@@28 $generated@@113) ($generated@@117 $generated@@113)) (=> (and (and (and ($generated@@29 $generated@@26 $generated@@115 $generated@@27) ($generated@@20 $generated@@26 $generated@@115 $generated@@27 $generated@@113)) (<= ($generated@@33 0) $generated@@116)) (and (and (<= ($generated@@33 0) $generated@@118) (= 1 $generated@@24)) (and (or (not (= $generated@@116 9)) (not true)) (= (ControlFlow 0 3) 2)))) $generated@@119))))
$generated@@120)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
