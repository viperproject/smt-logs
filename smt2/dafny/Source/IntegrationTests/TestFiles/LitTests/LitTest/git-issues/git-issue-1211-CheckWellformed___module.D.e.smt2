(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun |##_module.D.O| () T@U)
(declare-fun Tagclass._module.D () T@U)
(declare-fun |##_module.D.LD| () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun tytagFamily$D () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.apply (T@U T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.apply#canCall| (T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun _module.D.e (T@U T@U) T@U)
(declare-fun |_module.D.e#canCall| (T@U T@U) Bool)
(declare-fun Tclass._module.D () T@U)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.D.O| () T@U)
(declare-fun |lambda#0| (T@U) T@U)
(declare-fun |#_module.D.LD| (T@U T@U) T@U)
(declare-fun _module.D.thunk (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |lambda#1| (T@U) T@U)
(declare-fun _module.D.LD_q (T@U) Bool)
(declare-fun _module.D.O_q (T@U) Bool)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun |lambda#4| (T@U) T@U)
(declare-fun |lambda#3| (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |lambda#2| (Bool) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun TSet (T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun _module.D.c (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 |##_module.D.O| Tagclass._module.D |##_module.D.LD| tytagFamily$object |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| |tytagFamily$_tuple#0| tytagFamily$D)
)
(assert  (and (and (and (and (and (and (and (and (= (Ctor HandleTypeType) 3) (= (Ctor refType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f T@U) (t0@@0 T@U) (h T@U) ) (!  (=> ($IsGoodHeap h) (= ($IsAlloc HandleTypeType f (Tclass._System.___hFunc0 t0@@0) h)  (=> (Requires0 t0@@0 h f) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads0 t0@@0 h f) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h r) alloc))))
 :pattern ( (|Set#IsMember| (Reads0 t0@@0 h f) ($Box refType r)))
)))))
 :pattern ( ($IsAlloc HandleTypeType f (Tclass._System.___hFunc0 t0@@0) h))
)))
(assert  (and (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor SetType) 8)))
(assert (forall ((t0@@2 T@U) (t1@@1 T@U) (heap T@U) (h@@0 T@U) (r@@0 T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@2 t1@@1 heap (Handle1 h@@0 r@@0 rd) bx0) bx) (|Set#IsMember| (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType SetType rd heap bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@2 t1@@1 heap (Handle1 h@@0 r@@0 rd) bx0) bx))
)))
(assert (= (Ctor DatatypeTypeType) 9))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.apply$T T@U) (_module._default.apply$U T@U) (|op#0| T@U) ) (!  (=> (or (|_module.__default.apply#canCall| _module._default.apply$T _module._default.apply$U (Lit HandleTypeType |op#0|)) (and (< 0 $FunctionContextHeight) ($Is HandleTypeType |op#0| (Tclass._System.___hPartialFunc1 _module._default.apply$T _module._default.apply$U)))) (= (_module.__default.apply _module._default.apply$T _module._default.apply$U (Lit HandleTypeType |op#0|)) (Lit DatatypeTypeType |#_System._tuple#0._#Make0|)))
 :weight 3
 :pattern ( (_module.__default.apply _module._default.apply$T _module._default.apply$U (Lit HandleTypeType |op#0|)))
))))
(assert (forall ((|#$R| T@U) (|f#0| T@U) ($h T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc0 |#$R|) $h) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc0 |#$R|) $h))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc0 |#$R|) $h))
)))
(assert (forall ((|#$R@@0| T@U) (|f#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc0 |#$R@@0|) $h@@0) ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@0|) $h@@0))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc0 |#$R@@0|) $h@@0))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this T@U) (|d#0| T@U) ) (!  (=> (or (|_module.D.e#canCall| this |d#0|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this Tclass._module.D) ($Is DatatypeTypeType |d#0| Tclass._module.D)))) ($Is DatatypeTypeType (_module.D.e this |d#0|) Tclass._System.Tuple0))
 :pattern ( (_module.D.e this |d#0|))
))))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (= (DatatypeCtorId |#_module.D.O|) |##_module.D.O|))
(assert (forall ((|l#0| T@U) (|$l#2#heap#0| T@U) (|$l#2#x#0| T@U) ) (! (= (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType (|lambda#0| |l#0|) |$l#2#heap#0| |$l#2#x#0|) ($Box DatatypeTypeType (let ((|dt_update_tmp#0#2| ($Unbox DatatypeTypeType |$l#2#x#0|)))
(let ((|dt_update#c#0#2| |l#0|))
(|#_module.D.LD| |dt_update#c#0#2| (_module.D.thunk |dt_update_tmp#0#2|))))))
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType (|lambda#0| |l#0|) |$l#2#heap#0| |$l#2#x#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.D.LD| |a#6#0#0| |a#6#1#0|) Tclass._module.D)  (and ($Is DatatypeTypeType |a#6#0#0| Tclass._module.D) ($Is HandleTypeType |a#6#1#0| (Tclass._System.___hTotalFunc0 Tclass._module.D))))
 :pattern ( ($Is DatatypeTypeType (|#_module.D.LD| |a#6#0#0| |a#6#1#0|) Tclass._module.D))
)))
(assert (forall ((f@@0 T@U) (t0@@3 T@U) (t1@@2 T@U) (u0@@2 T@U) (u1@@2 T@U) ) (!  (=> (and (and ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@2)) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 u0@@2) ($IsBox bx@@0 t0@@3))
 :pattern ( ($IsBox bx@@0 u0@@2))
 :pattern ( ($IsBox bx@@0 t0@@3))
))) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 t1@@2) ($IsBox bx@@1 u1@@2))
 :pattern ( ($IsBox bx@@1 t1@@2))
 :pattern ( ($IsBox bx@@1 u1@@2))
))) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 u0@@2 u1@@2)))
 :pattern ( ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@2)) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 u0@@2 u1@@2)))
)))
(assert (forall ((|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@1) ($IsAlloc refType |c#0| Tclass._System.object? $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@1))
)))
(assert (forall ((d T@U) ) (!  (=> ($Is DatatypeTypeType d Tclass._System.Tuple0) (_System.Tuple0.___hMake0_q d))
 :pattern ( (_System.Tuple0.___hMake0_q d) ($Is DatatypeTypeType d Tclass._System.Tuple0))
)))
(assert ($Is DatatypeTypeType |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert ($Is DatatypeTypeType |#_module.D.O| Tclass._module.D))
(assert (forall (($o T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o Tclass._System.object? $h@@2)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o Tclass._System.object? $h@@2))
)))
(assert (forall ((h@@1 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@1 k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h@@1 k))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((t0@@4 T@U) (t1@@3 T@U) (heap@@0 T@U) (f@@1 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@0 t0@@4) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@4 t1@@3)))) (= (|Set#Equal| (Reads1 t0@@4 t1@@3 $OneHeap f@@1 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@4 t1@@3 heap@@0 f@@1 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@4 t1@@3 $OneHeap f@@1 bx0@@0) ($IsGoodHeap heap@@0))
 :pattern ( (Reads1 t0@@4 t1@@3 heap@@0 f@@1 bx0@@0))
)))
(assert (forall ((|l#0@@0| T@U) (|$l#2#heap#0@@0| T@U) (|$l#2#x#0@@0| T@U) ) (! (= (U_2_bool (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType boolType (|lambda#1| |l#0@@0|) |$l#2#heap#0@@0| |$l#2#x#0@@0|))  (and ($IsBox |$l#2#x#0@@0| |l#0@@0|) (_module.D.LD_q ($Unbox DatatypeTypeType |$l#2#x#0@@0|))))
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType boolType (|lambda#1| |l#0@@0|) |$l#2#heap#0@@0| |$l#2#x#0@@0|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.apply$T@@0 T@U) (_module._default.apply$U@@0 T@U) (|op#0@@0| T@U) ) (!  (=> (or (|_module.__default.apply#canCall| _module._default.apply$T@@0 _module._default.apply$U@@0 |op#0@@0|) (and (< 0 $FunctionContextHeight) ($Is HandleTypeType |op#0@@0| (Tclass._System.___hPartialFunc1 _module._default.apply$T@@0 _module._default.apply$U@@0)))) ($Is DatatypeTypeType (_module.__default.apply _module._default.apply$T@@0 _module._default.apply$U@@0 |op#0@@0|) Tclass._System.Tuple0))
 :pattern ( (_module.__default.apply _module._default.apply$T@@0 _module._default.apply$U@@0 |op#0@@0|))
))))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple0.___hMake0_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#0._#Make0|))
 :pattern ( (_System.Tuple0.___hMake0_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.D.O_q d@@1) (= (DatatypeCtorId d@@1) |##_module.D.O|))
 :pattern ( (_module.D.O_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.D.LD_q d@@2) (= (DatatypeCtorId d@@2) |##_module.D.LD|))
 :pattern ( (_module.D.LD_q d@@2))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((t0@@5 T@U) (heap@@1 T@U) (f@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@1) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc0 t0@@5))) (|Set#Equal| (Reads0 t0@@5 $OneHeap f@@2) |Set#Empty|)) (= (Requires0 t0@@5 $OneHeap f@@2) (Requires0 t0@@5 heap@@1 f@@2)))
 :pattern ( (Requires0 t0@@5 $OneHeap f@@2) ($IsGoodHeap heap@@1))
 :pattern ( (Requires0 t0@@5 heap@@1 f@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.D.LD_q d@@3) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@3 (|#_module.D.LD| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.D.LD_q d@@3))
)))
(assert (forall ((t0@@6 T@U) (t1@@4 T@U) (h0 T@U) (h1 T@U) (f@@3 T@U) (bx0@@1 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@1 t0@@6) ($Is HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@6 t1@@4)))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads1 t0@@6 t1@@4 h0 f@@3 bx0@@1) ($Box refType o@@1))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0 o@@1) fld) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires1 t0@@6 t1@@4 h0 f@@3 bx0@@1) (Requires1 t0@@6 t1@@4 h1 f@@3 bx0@@1)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@6 t1@@4 h1 f@@3 bx0@@1))
)))
(assert (forall ((t0@@7 T@U) (t1@@5 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@4 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@7) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@7 t1@@5)))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@7 t1@@5 h1@@0 f@@4 bx0@@2) ($Box refType o@@2))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires1 t0@@7 t1@@5 h0@@0 f@@4 bx0@@2) (Requires1 t0@@7 t1@@5 h1@@0 f@@4 bx0@@2)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@7 t1@@5 h1@@0 f@@4 bx0@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@0 T@U) (|d#0@@0| T@U) ) (!  (=> (or (|_module.D.e#canCall| (Lit DatatypeTypeType this@@0) (Lit DatatypeTypeType |d#0@@0|)) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@0 Tclass._module.D) ($Is DatatypeTypeType |d#0@@0| Tclass._module.D)))) (and (|_module.__default.apply#canCall| Tclass._module.D Tclass._module.D (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#4| (Handle1 (|lambda#0| (Lit DatatypeTypeType |d#0@@0|)) (|lambda#1| Tclass._module.D) (|lambda#3| (SetRef_to_SetBox (|lambda#2| false))))) ($LS $LZ)))) (= (_module.D.e (Lit DatatypeTypeType this@@0) (Lit DatatypeTypeType |d#0@@0|)) (Lit DatatypeTypeType (_module.__default.apply Tclass._module.D Tclass._module.D (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#4| (Handle1 (|lambda#0| (Lit DatatypeTypeType |d#0@@0|)) (|lambda#1| Tclass._module.D) (|lambda#3| (SetRef_to_SetBox (|lambda#2| false))))) ($LS $LZ))))))))
 :weight 3
 :pattern ( (_module.D.e (Lit DatatypeTypeType this@@0) (Lit DatatypeTypeType |d#0@@0|)))
))))
(assert (forall ((d@@4 T@U) ) (!  (=> (_System.Tuple0.___hMake0_q d@@4) (= d@@4 |#_System._tuple#0._#Make0|))
 :pattern ( (_System.Tuple0.___hMake0_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.D.O_q d@@5) (= d@@5 |#_module.D.O|))
 :pattern ( (_module.D.O_q d@@5))
)))
(assert (forall ((v T@U) (t0@@8 T@U) ) (! (= ($Is SetType v (TSet t0@@8)) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v bx@@2) ($IsBox bx@@2 t0@@8))
 :pattern ( (|Set#IsMember| v bx@@2))
)))
 :pattern ( ($Is SetType v (TSet t0@@8)))
)))
(assert (= (Ctor LayerTypeType) 10))
(assert (forall ((f@@5 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@5 ly) (MapType0Select LayerTypeType A f@@5 ly))
 :pattern ( (AtLayer A f@@5 ly))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v@@0 T@U) (t T@U) (h@@2 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@2) ($IsAlloc T@@1 v@@0 t h@@2))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@0 T@U) (bx@@3 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@3 k@@0) (=> ($IsAllocBox bx@@3 t@@0 h@@3) ($IsAllocBox bx@@3 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@3 k@@0) ($IsAllocBox bx@@3 t@@0 h@@3))
)))
(assert (forall ((h@@4 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@4 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@4) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@4 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@4))
)))
(assert (forall ((t0@@9 T@U) (t1@@6 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@9) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@9 t1@@6)))) (forall ((o@@3 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@9 t1@@6 h0@@1 f@@6 bx0@@3) ($Box refType o@@3))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@1 o@@3) fld@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@1 o@@3) fld@@1))))) (= (Reads1 t0@@9 t1@@6 h0@@1 f@@6 bx0@@3) (Reads1 t0@@9 t1@@6 h1@@1 f@@6 bx0@@3)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@9 t1@@6 h1@@1 f@@6 bx0@@3))
)))
(assert (forall ((t0@@10 T@U) (t1@@7 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@10) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@10 t1@@7)))) (forall ((o@@4 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@7 h1@@2 f@@7 bx0@@4) ($Box refType o@@4))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@2 o@@4) fld@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@2 o@@4) fld@@2))))) (= (Reads1 t0@@10 t1@@7 h0@@2 f@@7 bx0@@4) (Reads1 t0@@10 t1@@7 h1@@2 f@@7 bx0@@4)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@10 t1@@7 h1@@2 f@@7 bx0@@4))
)))
(assert (forall ((t0@@11 T@U) (t1@@8 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@11) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@11 t1@@8)))) (forall ((o@@5 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@11 t1@@8 h0@@3 f@@8 bx0@@5) ($Box refType o@@5))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@3 o@@5) fld@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@3 o@@5) fld@@3))))) (= (Apply1 t0@@11 t1@@8 h0@@3 f@@8 bx0@@5) (Apply1 t0@@11 t1@@8 h1@@3 f@@8 bx0@@5)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@11 t1@@8 h1@@3 f@@8 bx0@@5))
)))
(assert (forall ((t0@@12 T@U) (t1@@9 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@12) ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@12 t1@@9)))) (forall ((o@@6 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@12 t1@@9 h1@@4 f@@9 bx0@@6) ($Box refType o@@6))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@4 o@@6) fld@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@4 o@@6) fld@@4))))) (= (Apply1 t0@@12 t1@@9 h0@@4 f@@9 bx0@@6) (Apply1 t0@@12 t1@@9 h1@@4 f@@9 bx0@@6)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@12 t1@@9 h1@@4 f@@9 bx0@@6))
)))
(assert (forall ((|#$R@@1| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc0 |#$R@@1|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@1|)) |tytagFamily$_#Func0|))
 :pattern ( (Tclass._System.___hFunc0 |#$R@@1|))
)))
(assert (forall ((|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@2|)) |tytagFamily$_#PartialFunc0|))
 :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|))
)))
(assert (forall ((|#$R@@3| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@3|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@3|)) |tytagFamily$_#TotalFunc0|))
 :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@3|))
)))
(assert (forall ((s T@U) (bx@@4 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@4) (U_2_bool (MapType0Select refType boolType s ($Unbox refType bx@@4))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@4))
)))
(assert (forall ((|#$T0| T@U) (|#$R@@4| T@U) (|f#0@@1| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0| |#$R@@4|) $h@@3) ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hFunc1 |#$T0| |#$R@@4|) $h@@3))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0| |#$R@@4|) $h@@3))
)))
(assert (forall ((t0@@13 T@U) (t1@@10 T@U) (heap@@2 T@U) (h@@5 T@U) (r@@1 T@U) (rd@@0 T@U) (bx0@@7 T@U) ) (! (= (Apply1 t0@@13 t1@@10 heap@@2 (Handle1 h@@5 r@@1 rd@@0) bx0@@7) (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType BoxType h@@5 heap@@2 bx0@@7))
 :pattern ( (Apply1 t0@@13 t1@@10 heap@@2 (Handle1 h@@5 r@@1 rd@@0) bx0@@7))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@5 Tclass._System.object?))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._System.object)))
 :pattern ( ($IsBox bx@@6 Tclass._System.object))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.Tuple0) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@7)) bx@@7) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@7) Tclass._System.Tuple0)))
 :pattern ( ($IsBox bx@@7 Tclass._System.Tuple0))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.D) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@8)) bx@@8) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@8) Tclass._module.D)))
 :pattern ( ($IsBox bx@@8 Tclass._module.D))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._System.object)  (and ($Is refType |c#0@@0| Tclass._System.object?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object?))
)))
(assert (forall ((f@@10 T@U) (t0@@14 T@U) (t1@@11 T@U) (h@@6 T@U) ) (!  (=> (and ($IsGoodHeap h@@6) ($IsAlloc HandleTypeType f@@10 (Tclass._System.___hFunc1 t0@@14 t1@@11) h@@6)) (forall ((bx0@@8 T@U) ) (!  (=> (and ($IsAllocBox bx0@@8 t0@@14 h@@6) (Requires1 t0@@14 t1@@11 h@@6 f@@10 bx0@@8)) ($IsAllocBox (Apply1 t0@@14 t1@@11 h@@6 f@@10 bx0@@8) t1@@11 h@@6))
 :pattern ( (Apply1 t0@@14 t1@@11 h@@6 f@@10 bx0@@8))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@10 (Tclass._System.___hFunc1 t0@@14 t1@@11) h@@6))
)))
(assert (forall ((|l#0@@1| Bool) (|$l#2#o#0| T@U) ) (! (= (U_2_bool (MapType0Select refType boolType (|lambda#2| |l#0@@1|) |$l#2#o#0|)) |l#0@@1|)
 :pattern ( (MapType0Select refType boolType (|lambda#2| |l#0@@1|) |$l#2#o#0|))
)))
(assert (forall ((|l#0@@2| T@U) (|$l#2#ly#0| T@U) ) (! (= (MapType0Select LayerTypeType HandleTypeType (|lambda#4| |l#0@@2|) |$l#2#ly#0|) |l#0@@2|)
 :pattern ( (MapType0Select LayerTypeType HandleTypeType (|lambda#4| |l#0@@2|) |$l#2#ly#0|))
)))
(assert (forall ((t0@@15 T@U) (heap@@3 T@U) (f@@11 T@U) ) (!  (=> (and ($IsGoodHeap heap@@3) ($Is HandleTypeType f@@11 (Tclass._System.___hFunc0 t0@@15))) (= (|Set#Equal| (Reads0 t0@@15 $OneHeap f@@11) |Set#Empty|) (|Set#Equal| (Reads0 t0@@15 heap@@3 f@@11) |Set#Empty|)))
 :pattern ( (Reads0 t0@@15 $OneHeap f@@11) ($IsGoodHeap heap@@3))
 :pattern ( (Reads0 t0@@15 heap@@3 f@@11))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 Tclass._module.D) (or (_module.D.O_q d@@6) (_module.D.LD_q d@@6)))
 :pattern ( (_module.D.LD_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.D))
 :pattern ( (_module.D.O_q d@@6) ($Is DatatypeTypeType d@@6 Tclass._module.D))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@12 T@U) (t0@@16 T@U) (t1@@12 T@U) ) (! (= ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@16 t1@@12)) (forall ((h@@7 T@U) (bx0@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@7) ($IsBox bx0@@9 t0@@16)) (Requires1 t0@@16 t1@@12 h@@7 f@@12 bx0@@9)) ($IsBox (Apply1 t0@@16 t1@@12 h@@7 f@@12 bx0@@9) t1@@12))
 :pattern ( (Apply1 t0@@16 t1@@12 h@@7 f@@12 bx0@@9))
)))
 :pattern ( ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@16 t1@@12)))
)))
(assert (forall ((t0@@17 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@13 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is HandleTypeType f@@13 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@7 T@U) (fld@@5 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads0 t0@@17 h0@@5 f@@13) ($Box refType o@@7))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@5 o@@7) fld@@5) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@5 o@@7) fld@@5))))) (= (Requires0 t0@@17 h0@@5 f@@13) (Requires0 t0@@17 h1@@5 f@@13)))
 :pattern ( ($HeapSucc h0@@5 h1@@5) (Requires0 t0@@17 h1@@5 f@@13))
)))
(assert (forall ((t0@@18 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@14 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is HandleTypeType f@@14 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@8 T@U) (fld@@6 T@U) )  (=> (and (or (not (= o@@8 null)) (not true)) (|Set#IsMember| (Reads0 t0@@18 h1@@6 f@@14) ($Box refType o@@8))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@6 o@@8) fld@@6) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@6 o@@8) fld@@6))))) (= (Requires0 t0@@18 h0@@6 f@@14) (Requires0 t0@@18 h1@@6 f@@14)))
 :pattern ( ($HeapSucc h0@@6 h1@@6) (Requires0 t0@@18 h1@@6 f@@14))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((t0@@19 T@U) (t1@@13 T@U) (heap@@4 T@U) (h@@8 T@U) (r@@2 T@U) (rd@@1 T@U) (bx0@@10 T@U) ) (!  (=> (U_2_bool (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType boolType r@@2 heap@@4 bx0@@10)) (Requires1 t0@@19 t1@@13 heap@@4 (Handle1 h@@8 r@@2 rd@@1) bx0@@10))
 :pattern ( (Requires1 t0@@19 t1@@13 heap@@4 (Handle1 h@@8 r@@2 rd@@1) bx0@@10))
)))
(assert (forall ((v@@3 T@U) (t0@@20 T@U) (h@@9 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@20) h@@9) (forall ((bx@@9 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@9) ($IsAllocBox bx@@9 t0@@20 h@@9))
 :pattern ( (|Set#IsMember| v@@3 bx@@9))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@20) h@@9))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@5|)) |#$T0@@0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@5|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@6|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@7| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@2| |#$R@@7|)) |#$T0@@2|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@2| |#$R@@7|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@8| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@8|)) |#$R@@8|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@8|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.D.LD| |a#4#0#0| |a#4#1#0|)) |##_module.D.LD|)
 :pattern ( (|#_module.D.LD| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.D.c (|#_module.D.LD| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.D.LD| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.D.thunk (|#_module.D.LD| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.D.LD| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall (($o@@0 T@U) ) (! ($Is refType $o@@0 Tclass._System.object?)
 :pattern ( ($Is refType $o@@0 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((|#$R@@9| T@U) ) (! (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@9|)) |#$R@@9|)
 :pattern ( (Tclass._System.___hFunc0 |#$R@@9|))
)))
(assert (forall ((|#$R@@10| T@U) ) (! (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@10|)) |#$R@@10|)
 :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@10|))
)))
(assert (forall ((|#$R@@11| T@U) ) (! (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@11|)) |#$R@@11|)
 :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@11|))
)))
(assert (forall ((x@@4 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@4)) x@@4)
 :pattern ( ($Box T@@4 x@@4))
)))
(assert (forall ((t0@@21 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@15 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is HandleTypeType f@@15 (Tclass._System.___hFunc0 t0@@21))) (forall ((o@@9 T@U) (fld@@7 T@U) )  (=> (and (or (not (= o@@9 null)) (not true)) (|Set#IsMember| (Reads0 t0@@21 h0@@7 f@@15) ($Box refType o@@9))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@7 o@@9) fld@@7) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@7 o@@9) fld@@7))))) (= (Reads0 t0@@21 h0@@7 f@@15) (Reads0 t0@@21 h1@@7 f@@15)))
 :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@21 h1@@7 f@@15))
)))
(assert (forall ((t0@@22 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@16 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is HandleTypeType f@@16 (Tclass._System.___hFunc0 t0@@22))) (forall ((o@@10 T@U) (fld@@8 T@U) )  (=> (and (or (not (= o@@10 null)) (not true)) (|Set#IsMember| (Reads0 t0@@22 h1@@8 f@@16) ($Box refType o@@10))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@8 o@@10) fld@@8) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@8 o@@10) fld@@8))))) (= (Reads0 t0@@22 h0@@8 f@@16) (Reads0 t0@@22 h1@@8 f@@16)))
 :pattern ( ($HeapSucc h0@@8 h1@@8) (Reads0 t0@@22 h1@@8 f@@16))
)))
(assert (forall ((t0@@23 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@17 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is HandleTypeType f@@17 (Tclass._System.___hFunc0 t0@@23))) (forall ((o@@11 T@U) (fld@@9 T@U) )  (=> (and (or (not (= o@@11 null)) (not true)) (|Set#IsMember| (Reads0 t0@@23 h0@@9 f@@17) ($Box refType o@@11))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@9 o@@11) fld@@9) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@9 o@@11) fld@@9))))) (= (Apply0 t0@@23 h0@@9 f@@17) (Apply0 t0@@23 h1@@9 f@@17)))
 :pattern ( ($HeapSucc h0@@9 h1@@9) (Apply0 t0@@23 h1@@9 f@@17))
)))
(assert (forall ((t0@@24 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@18 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is HandleTypeType f@@18 (Tclass._System.___hFunc0 t0@@24))) (forall ((o@@12 T@U) (fld@@10 T@U) )  (=> (and (or (not (= o@@12 null)) (not true)) (|Set#IsMember| (Reads0 t0@@24 h1@@10 f@@18) ($Box refType o@@12))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@10 o@@12) fld@@10) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@10 o@@12) fld@@10))))) (= (Apply0 t0@@24 h0@@10 f@@18) (Apply0 t0@@24 h1@@10 f@@18)))
 :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@24 h1@@10 f@@18))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (DtRank |a#9#0#0|) (DtRank (|#_module.D.LD| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.D.LD| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@12| T@U) (|f#0@@2| T@U) ) (! (= ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@12|))  (and ($Is HandleTypeType |f#0@@2| (Tclass._System.___hFunc1 |#$T0@@4| |#$R@@12|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@4|) (|Set#Equal| (Reads1 |#$T0@@4| |#$R@@12| $OneHeap |f#0@@2| |x0#0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@12|)))
)))
(assert (forall ((f@@19 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@19 ($LS ly@@0)) (AtLayer A@@0 f@@19 ly@@0))
 :pattern ( (AtLayer A@@0 f@@19 ($LS ly@@0)))
)))
(assert (forall ((f@@20 T@U) (t0@@25 T@U) (t1@@14 T@U) (h@@10 T@U) ) (!  (=> ($IsGoodHeap h@@10) (= ($IsAlloc HandleTypeType f@@20 (Tclass._System.___hFunc1 t0@@25 t1@@14) h@@10) (forall ((bx0@@11 T@U) ) (!  (=> (and (and ($IsBox bx0@@11 t0@@25) ($IsAllocBox bx0@@11 t0@@25 h@@10)) (Requires1 t0@@25 t1@@14 h@@10 f@@20 bx0@@11)) (forall ((r@@3 T@U) ) (!  (=> (and (or (not (= r@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@25 t1@@14 h@@10 f@@20 bx0@@11) ($Box refType r@@3))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@10 r@@3) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@25 t1@@14 h@@10 f@@20 bx0@@11) ($Box refType r@@3)))
)))
 :pattern ( (Apply1 t0@@25 t1@@14 h@@10 f@@20 bx0@@11))
 :pattern ( (Reads1 t0@@25 t1@@14 h@@10 f@@20 bx0@@11))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@20 (Tclass._System.___hFunc1 t0@@25 t1@@14) h@@10))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@13| T@U) (bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@13|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@10)) bx@@10) ($Is HandleTypeType ($Unbox HandleTypeType bx@@10) (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@13|))))
 :pattern ( ($IsBox bx@@10 (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@13|)))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@14| T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@14|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@11)) bx@@11) ($Is HandleTypeType ($Unbox HandleTypeType bx@@11) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@14|))))
 :pattern ( ($IsBox bx@@11 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@14|)))
)))
(assert (forall ((|l#0@@3| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#20| |l#0@@3| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0@@3|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#20| |l#0@@3| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((|#$R@@15| T@U) (|f#0@@3| T@U) ) (! (= ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc0 |#$R@@15|))  (and ($Is HandleTypeType |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@15|)) (Requires0 |#$R@@15| $OneHeap |f#0@@3|)))
 :pattern ( ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc0 |#$R@@15|)))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@16| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@16|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@16|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@16|))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@17| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@17|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@17|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@17|))
)))
(assert (forall ((t0@@26 T@U) (t1@@15 T@U) (heap@@5 T@U) (f@@21 T@U) (bx0@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@12 t0@@26) ($Is HandleTypeType f@@21 (Tclass._System.___hFunc1 t0@@26 t1@@15)))) (|Set#Equal| (Reads1 t0@@26 t1@@15 $OneHeap f@@21 bx0@@12) |Set#Empty|)) (= (Requires1 t0@@26 t1@@15 $OneHeap f@@21 bx0@@12) (Requires1 t0@@26 t1@@15 heap@@5 f@@21 bx0@@12)))
 :pattern ( (Requires1 t0@@26 t1@@15 $OneHeap f@@21 bx0@@12) ($IsGoodHeap heap@@5))
 :pattern ( (Requires1 t0@@26 t1@@15 heap@@5 f@@21 bx0@@12))
)))
(assert (forall ((f@@22 T@U) (t0@@27 T@U) ) (! (= ($Is HandleTypeType f@@22 (Tclass._System.___hFunc0 t0@@27)) (forall ((h@@11 T@U) ) (!  (=> (and ($IsGoodHeap h@@11) (Requires0 t0@@27 h@@11 f@@22)) ($IsBox (Apply0 t0@@27 h@@11 f@@22) t0@@27))
 :pattern ( (Apply0 t0@@27 h@@11 f@@22))
)))
 :pattern ( ($Is HandleTypeType f@@22 (Tclass._System.___hFunc0 t0@@27)))
)))
(assert (forall ((bx@@12 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@12 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@12)) bx@@12) ($Is SetType ($Unbox SetType bx@@12) (TSet t@@5))))
 :pattern ( ($IsBox bx@@12 (TSet t@@5)))
)))
(assert (forall ((|#$R@@18| T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass._System.___hFunc0 |#$R@@18|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@13)) bx@@13) ($Is HandleTypeType ($Unbox HandleTypeType bx@@13) (Tclass._System.___hFunc0 |#$R@@18|))))
 :pattern ( ($IsBox bx@@13 (Tclass._System.___hFunc0 |#$R@@18|)))
)))
(assert (forall ((|#$R@@19| T@U) (bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (Tclass._System.___hPartialFunc0 |#$R@@19|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@14)) bx@@14) ($Is HandleTypeType ($Unbox HandleTypeType bx@@14) (Tclass._System.___hPartialFunc0 |#$R@@19|))))
 :pattern ( ($IsBox bx@@14 (Tclass._System.___hPartialFunc0 |#$R@@19|)))
)))
(assert (forall ((|#$R@@20| T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass._System.___hTotalFunc0 |#$R@@20|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@15)) bx@@15) ($Is HandleTypeType ($Unbox HandleTypeType bx@@15) (Tclass._System.___hTotalFunc0 |#$R@@20|))))
 :pattern ( ($IsBox bx@@15 (Tclass._System.___hTotalFunc0 |#$R@@20|)))
)))
(assert (forall ((d@@7 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) ($Is DatatypeTypeType d@@7 Tclass._System.Tuple0)) ($IsAlloc DatatypeTypeType d@@7 Tclass._System.Tuple0 $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType d@@7 Tclass._System.Tuple0 $h@@4))
)))
(assert (forall ((d@@8 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) ($Is DatatypeTypeType d@@8 Tclass._module.D)) ($IsAlloc DatatypeTypeType d@@8 Tclass._module.D $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType d@@8 Tclass._module.D $h@@5))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (= (Tag Tclass._module.D) Tagclass._module.D))
(assert (= (TagFamily Tclass._module.D) tytagFamily$D))
(assert (= |#_System._tuple#0._#Make0| (Lit DatatypeTypeType |#_System._tuple#0._#Make0|)))
(assert (= |#_module.D.O| (Lit DatatypeTypeType |#_module.D.O|)))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((f@@23 T@U) (t0@@28 T@U) (h@@12 T@U) ) (!  (=> (and ($IsGoodHeap h@@12) ($IsAlloc HandleTypeType f@@23 (Tclass._System.___hFunc0 t0@@28) h@@12)) (=> (Requires0 t0@@28 h@@12 f@@23) ($IsAllocBox (Apply0 t0@@28 h@@12 f@@23) t0@@28 h@@12)))
 :pattern ( ($IsAlloc HandleTypeType f@@23 (Tclass._System.___hFunc0 t0@@28) h@@12))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@13 T@U) ) (! (= (|Set#IsMember| a@@1 o@@13) (|Set#IsMember| b@@1 o@@13))
 :pattern ( (|Set#IsMember| a@@1 o@@13))
 :pattern ( (|Set#IsMember| b@@1 o@@13))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((d@@9 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_module.D.LD_q d@@9) ($IsAlloc DatatypeTypeType d@@9 Tclass._module.D $h@@6))) ($IsAlloc DatatypeTypeType (_module.D.c d@@9) Tclass._module.D $h@@6))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.D.c d@@9) Tclass._module.D $h@@6))
)))
(assert (forall ((f@@24 T@U) (t0@@29 T@U) (u0@@3 T@U) ) (!  (=> (and ($Is HandleTypeType f@@24 (Tclass._System.___hFunc0 t0@@29)) (forall ((bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 t0@@29) ($IsBox bx@@16 u0@@3))
 :pattern ( ($IsBox bx@@16 t0@@29))
 :pattern ( ($IsBox bx@@16 u0@@3))
))) ($Is HandleTypeType f@@24 (Tclass._System.___hFunc0 u0@@3)))
 :pattern ( ($Is HandleTypeType f@@24 (Tclass._System.___hFunc0 t0@@29)) ($Is HandleTypeType f@@24 (Tclass._System.___hFunc0 u0@@3)))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.D.LD| (Lit DatatypeTypeType |a#7#0#0|) (Lit HandleTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.D.LD| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.D.LD| (Lit DatatypeTypeType |a#7#0#0|) (Lit HandleTypeType |a#7#1#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@5)) (Lit BoxType ($Box T@@5 x@@5)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@5)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@1 T@U) (|d#0@@1| T@U) ) (!  (=> (or (|_module.D.e#canCall| this@@1 |d#0@@1|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@1 Tclass._module.D) ($Is DatatypeTypeType |d#0@@1| Tclass._module.D)))) (and (|_module.__default.apply#canCall| Tclass._module.D Tclass._module.D (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#4| (Handle1 (|lambda#0| |d#0@@1|) (|lambda#1| Tclass._module.D) (|lambda#3| (SetRef_to_SetBox (|lambda#2| false))))) ($LS $LZ)))) (= (_module.D.e this@@1 |d#0@@1|) (Lit DatatypeTypeType (_module.__default.apply Tclass._module.D Tclass._module.D (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#4| (Handle1 (|lambda#0| |d#0@@1|) (|lambda#1| Tclass._module.D) (|lambda#3| (SetRef_to_SetBox (|lambda#2| false))))) ($LS $LZ))))))))
 :pattern ( (_module.D.e this@@1 |d#0@@1|))
))))
(assert (forall ((d@@10 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_module.D.LD_q d@@10) ($IsAlloc DatatypeTypeType d@@10 Tclass._module.D $h@@7))) ($IsAlloc HandleTypeType (_module.D.thunk d@@10) (Tclass._System.___hTotalFunc0 Tclass._module.D) $h@@7))
 :pattern ( ($IsAlloc HandleTypeType (_module.D.thunk d@@10) (Tclass._System.___hTotalFunc0 Tclass._module.D) $h@@7))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.apply$T@@1 T@U) (_module._default.apply$U@@1 T@U) (|op#0@@1| T@U) ) (!  (=> (or (|_module.__default.apply#canCall| _module._default.apply$T@@1 _module._default.apply$U@@1 |op#0@@1|) (and (< 0 $FunctionContextHeight) ($Is HandleTypeType |op#0@@1| (Tclass._System.___hPartialFunc1 _module._default.apply$T@@1 _module._default.apply$U@@1)))) (= (_module.__default.apply _module._default.apply$T@@1 _module._default.apply$U@@1 |op#0@@1|) (Lit DatatypeTypeType |#_System._tuple#0._#Make0|)))
 :pattern ( (_module.__default.apply _module._default.apply$T@@1 _module._default.apply$U@@1 |op#0@@1|))
))))
(assert (forall ((|#$R@@21| T@U) (|f#0@@4| T@U) ) (! (= ($Is HandleTypeType |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is HandleTypeType |f#0@@4| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@4|) |Set#Empty|)))
 :pattern ( ($Is HandleTypeType |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@21|)))
)))
(assert (forall ((|l#0@@4| T@U) (|$l#2#heap#0@@1| T@U) (|$l#2#x#0@@1| T@U) ) (! (= (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType SetType (|lambda#3| |l#0@@4|) |$l#2#heap#0@@1| |$l#2#x#0@@1|) |l#0@@4|)
 :pattern ( (MapType1Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType SetType (|lambda#3| |l#0@@4|) |$l#2#heap#0@@1| |$l#2#x#0@@1|))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x#0@0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |dt_update_tmp#0#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |d#0@@2| () T@U)
(declare-fun |dt_update#c#0#Z#0@0| () T@U)
(declare-fun |lambdaResult#0| () T@U)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun |$_Frame#l0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun this@@2 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let ((anon7_correct true))
(let ((anon13_Else_correct  (=> (and (not (_module.D.LD_q |x#0@0|)) (= (ControlFlow 0 7) 3)) anon7_correct)))
(let ((anon13_Then_correct  (=> (_module.D.LD_q |x#0@0|) (=> (and (= |let#0#0#0| |x#0@0|) ($Is DatatypeTypeType |let#0#0#0| Tclass._module.D)) (=> (and (and (= |dt_update_tmp#0#Z#0@0| |let#0#0#0|) (= |let#1#0#0| |d#0@@2|)) (and ($Is DatatypeTypeType |let#1#0#0| Tclass._module.D) (= |dt_update#c#0#Z#0@0| |let#1#0#0|))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (_module.D.LD_q |dt_update_tmp#0#Z#0@0|)) (=> (_module.D.LD_q |dt_update_tmp#0#Z#0@0|) (=> (= |lambdaResult#0| (|#_module.D.LD| |dt_update#c#0#Z#0@0| (_module.D.thunk |dt_update_tmp#0#Z#0@0|))) (=> (and ($Is DatatypeTypeType |lambdaResult#0| Tclass._module.D) (= (ControlFlow 0 5) 3)) anon7_correct)))))))))
(let ((anon12_Then_correct  (=> (and (and ($Is DatatypeTypeType |x#0@0| Tclass._module.D) ($IsAlloc DatatypeTypeType |x#0@0| Tclass._module.D |$lambdaHeap#0@0|)) (= |$_Frame#l0@0| (|lambda#20| null |$lambdaHeap#0@0| alloc false))) (and (=> (= (ControlFlow 0 8) 5) anon13_Then_correct) (=> (= (ControlFlow 0 8) 7) anon13_Else_correct)))))
(let ((anon12_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |x#0@0| Tclass._module.D) ($IsAlloc DatatypeTypeType |x#0@0| Tclass._module.D |$lambdaHeap#0@0|))) (= (ControlFlow 0 4) 3)) anon7_correct)))
(let ((anon11_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap |$lambdaHeap#0@0|) ($HeapSucc $Heap |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 9) 8) anon12_Then_correct) (=> (= (ControlFlow 0 9) 4) anon12_Else_correct)))))
(let ((anon11_Else_correct true))
(let ((anon10_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#20| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 10) 1) anon10_Then_correct) (=> (= (ControlFlow 0 10) 9) anon11_Then_correct)) (=> (= (ControlFlow 0 10) 2) anon11_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is DatatypeTypeType this@@2 Tclass._module.D) ($IsAlloc DatatypeTypeType this@@2 Tclass._module.D $Heap)) ($Is DatatypeTypeType |d#0@@2| Tclass._module.D)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 11) 10))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
