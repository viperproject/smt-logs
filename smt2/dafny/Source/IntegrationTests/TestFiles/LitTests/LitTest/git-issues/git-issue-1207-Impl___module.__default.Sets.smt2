(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc)
)
(assert (forall ((a T@U) (b T@U) (y T@U) ) (!  (=> (|Set#IsMember| a y) (|Set#IsMember| (|Set#Union| a b) y))
 :pattern ( (|Set#Union| a b) (|Set#IsMember| a y))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@0) (|Set#IsMember| (|Set#Union| a@@0 b@@0) y@@0))
 :pattern ( (|Set#Union| a@@0 b@@0) (|Set#IsMember| b@@0 y@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@1) (not (|Set#IsMember| (|Set#Difference| a@@1 b@@1) y@@1)))
 :pattern ( (|Set#Difference| a@@1 b@@1) (|Set#IsMember| b@@1 y@@1))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#Intersection| a@@2 b@@2) o)  (and (|Set#IsMember| a@@2 o) (|Set#IsMember| b@@2 o)))
 :pattern ( (|Set#IsMember| (|Set#Intersection| a@@2 b@@2) o))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@3 b@@3) b@@3) (|Set#Union| a@@3 b@@3))
 :pattern ( (|Set#Union| (|Set#Union| a@@3 b@@3) b@@3))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|Set#Intersection| (|Set#Intersection| a@@4 b@@4) b@@4) (|Set#Intersection| a@@4 b@@4))
 :pattern ( (|Set#Intersection| (|Set#Intersection| a@@4 b@@4) b@@4))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) (o@@0 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@5 b@@5) o@@0)  (and (|Set#IsMember| a@@5 o@@0) (not (|Set#IsMember| b@@5 o@@0))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@5 b@@5) o@@0))
)))
(assert (forall ((a@@6 T@U) (b@@6 T@U) ) (! (= (|Set#Subset| a@@6 b@@6) (forall ((o@@1 T@U) ) (!  (=> (|Set#IsMember| a@@6 o@@1) (|Set#IsMember| b@@6 o@@1))
 :pattern ( (|Set#IsMember| a@@6 o@@1))
 :pattern ( (|Set#IsMember| b@@6 o@@1))
)))
 :pattern ( (|Set#Subset| a@@6 b@@6))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (forall ((a@@7 T@U) (b@@7 T@U) ) (! (= (|Set#Disjoint| a@@7 b@@7) (forall ((o@@2 T@U) ) (!  (or (not (|Set#IsMember| a@@7 o@@2)) (not (|Set#IsMember| b@@7 o@@2)))
 :pattern ( (|Set#IsMember| a@@7 o@@2))
 :pattern ( (|Set#IsMember| b@@7 o@@2))
)))
 :pattern ( (|Set#Disjoint| a@@7 b@@7))
)))
(assert (= (Ctor SetType) 3))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v@@0) t h) ($IsAlloc T@@0 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@0 v@@0) t h))
)))
(assert (forall ((a@@8 T@U) (b@@8 T@U) (o@@3 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@8 b@@8) o@@3)  (or (|Set#IsMember| a@@8 o@@3) (|Set#IsMember| b@@8 o@@3)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@8 b@@8) o@@3))
)))
(assert (forall ((a@@9 T@U) (b@@9 T@U) ) (!  (=> (|Set#Disjoint| a@@9 b@@9) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@9) a@@9) b@@9) (= (|Set#Difference| (|Set#Union| a@@9 b@@9) b@@9) a@@9)))
 :pattern ( (|Set#Union| a@@9 b@@9))
)))
(assert (forall ((a@@10 T@U) (b@@10 T@U) ) (!  (=> (|Set#Equal| a@@10 b@@10) (= a@@10 b@@10))
 :pattern ( (|Set#Equal| a@@10 b@@10))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v@@1) t@@0) ($Is T@@1 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@1 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@0) ($IsAllocBox bx@@0 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@0))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@3 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@3)) x@@3)
 :pattern ( ($Box T@@2 x@@3))
)))
(assert (forall ((a@@11 T@U) (b@@11 T@U) ) (! (= (|Set#Union| a@@11 (|Set#Union| a@@11 b@@11)) (|Set#Union| a@@11 b@@11))
 :pattern ( (|Set#Union| a@@11 (|Set#Union| a@@11 b@@11)))
)))
(assert (forall ((a@@12 T@U) (b@@12 T@U) ) (! (= (|Set#Intersection| a@@12 (|Set#Intersection| a@@12 b@@12)) (|Set#Intersection| a@@12 b@@12))
 :pattern ( (|Set#Intersection| a@@12 (|Set#Intersection| a@@12 b@@12)))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@1 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@1 t1 t2 (MapType0Store t0@@1 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@2 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 (MapType1Store t0@@2 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@1 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@1 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@1)) bx@@1) ($Is SetType ($Unbox SetType bx@@1) (TSet t@@3))))
 :pattern ( ($IsBox bx@@1 (TSet t@@3)))
)))
(assert (forall ((a@@13 T@U) (b@@13 T@U) ) (! (= (|Set#Equal| a@@13 b@@13) (forall ((o@@4 T@U) ) (! (= (|Set#IsMember| a@@13 o@@4) (|Set#IsMember| b@@13 o@@4))
 :pattern ( (|Set#IsMember| a@@13 o@@4))
 :pattern ( (|Set#IsMember| b@@13 o@@4))
)))
 :pattern ( (|Set#Equal| a@@13 b@@13))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module._default.Sets$T () T@U)
(declare-fun $Heap () T@U)
(declare-fun |a#16@0| () T@U)
(declare-fun |t#0@0| () T@U)
(declare-fun |a#14@0| () T@U)
(declare-fun |b#14@0| () T@U)
(declare-fun |a#12@0| () T@U)
(declare-fun |b#12@0| () T@U)
(declare-fun |a#10@0| () T@U)
(declare-fun |b#10@0| () T@U)
(declare-fun |a#8@0| () T@U)
(declare-fun |b#8@0| () T@U)
(declare-fun |a#6@0| () T@U)
(declare-fun |b#6@0| () T@U)
(declare-fun |a#4@0| () T@U)
(declare-fun |b#4@0| () T@U)
(declare-fun |a#2@0| () T@U)
(declare-fun |b#2@0| () T@U)
(declare-fun |a#0@0| () T@U)
(declare-fun |b#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 38) (let ((anon18_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (forall ((|a#17| T@U) (|t#1| T@U) ) (!  (=> (and (and ($Is SetType |a#17| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#17| (TSet _module._default.Sets$T) $Heap)) (and ($IsBox |t#1| _module._default.Sets$T) ($IsAllocBox |t#1| _module._default.Sets$T $Heap))) (|Set#IsMember| |a#17| |t#1|))
 :pattern ( (|Set#IsMember| |a#17| |t#1|))
)))))
(let ((anon27_Else_correct  (=> (and (not (and (and ($Is SetType |a#16@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#16@0| (TSet _module._default.Sets$T) $Heap)) (and ($IsBox |t#0@0| _module._default.Sets$T) ($IsAllocBox |t#0@0| _module._default.Sets$T $Heap)))) (= (ControlFlow 0 4) 2)) anon18_correct)))
(let ((anon27_Then_correct  (=> (and (and (and ($Is SetType |a#16@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#16@0| (TSet _module._default.Sets$T) $Heap)) (and ($IsBox |t#0@0| _module._default.Sets$T) ($IsAllocBox |t#0@0| _module._default.Sets$T $Heap))) (= (ControlFlow 0 3) 2)) anon18_correct)))
(let ((anon16_correct  (and (=> (= (ControlFlow 0 5) (- 0 6)) (forall ((|a#15| T@U) (|b#15| T@U) )  (=> (and (and ($Is SetType |a#15| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#15| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#15| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#15| (TSet _module._default.Sets$T) $Heap))) (|Set#Disjoint| |a#15| |b#15|)))) (=> (forall ((|a#15@@0| T@U) (|b#15@@0| T@U) )  (=> (and (and ($Is SetType |a#15@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#15@@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#15@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#15@@0| (TSet _module._default.Sets$T) $Heap))) (|Set#Disjoint| |a#15@@0| |b#15@@0|))) (and (=> (= (ControlFlow 0 5) 3) anon27_Then_correct) (=> (= (ControlFlow 0 5) 4) anon27_Else_correct))))))
(let ((anon26_Else_correct  (=> (and (not (and (and ($Is SetType |a#14@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#14@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#14@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#14@0| (TSet _module._default.Sets$T) $Heap)))) (= (ControlFlow 0 8) 5)) anon16_correct)))
(let ((anon26_Then_correct  (=> (and (and (and ($Is SetType |a#14@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#14@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#14@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#14@0| (TSet _module._default.Sets$T) $Heap))) (= (ControlFlow 0 7) 5)) anon16_correct)))
(let ((anon14_correct  (and (=> (= (ControlFlow 0 9) (- 0 10)) (forall ((|a#13| T@U) (|b#13| T@U) ) (!  (=> (and (and ($Is SetType |a#13| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#13| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#13| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#13| (TSet _module._default.Sets$T) $Heap))) (|Set#Equal| (|Set#Intersection| |a#13| |b#13|) |b#13|))
 :pattern ( (|Set#Intersection| |a#13| |b#13|))
))) (=> (forall ((|a#13@@0| T@U) (|b#13@@0| T@U) ) (!  (=> (and (and ($Is SetType |a#13@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#13@@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#13@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#13@@0| (TSet _module._default.Sets$T) $Heap))) (|Set#Equal| (|Set#Intersection| |a#13@@0| |b#13@@0|) |b#13@@0|))
 :pattern ( (|Set#Intersection| |a#13@@0| |b#13@@0|))
)) (and (=> (= (ControlFlow 0 9) 7) anon26_Then_correct) (=> (= (ControlFlow 0 9) 8) anon26_Else_correct))))))
(let ((anon25_Else_correct  (=> (and (not (and (and ($Is SetType |a#12@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#12@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#12@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#12@0| (TSet _module._default.Sets$T) $Heap)))) (= (ControlFlow 0 12) 9)) anon14_correct)))
(let ((anon25_Then_correct  (=> (and (and (and ($Is SetType |a#12@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#12@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#12@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#12@0| (TSet _module._default.Sets$T) $Heap))) (= (ControlFlow 0 11) 9)) anon14_correct)))
(let ((anon12_correct  (and (=> (= (ControlFlow 0 13) (- 0 14)) (forall ((|a#11| T@U) (|b#11| T@U) ) (!  (=> (and (and ($Is SetType |a#11| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#11| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#11| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#11| (TSet _module._default.Sets$T) $Heap))) (|Set#Equal| (|Set#Difference| |a#11| |b#11|) |b#11|))
 :pattern ( (|Set#Difference| |a#11| |b#11|))
))) (=> (forall ((|a#11@@0| T@U) (|b#11@@0| T@U) ) (!  (=> (and (and ($Is SetType |a#11@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#11@@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#11@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#11@@0| (TSet _module._default.Sets$T) $Heap))) (|Set#Equal| (|Set#Difference| |a#11@@0| |b#11@@0|) |b#11@@0|))
 :pattern ( (|Set#Difference| |a#11@@0| |b#11@@0|))
)) (and (=> (= (ControlFlow 0 13) 11) anon25_Then_correct) (=> (= (ControlFlow 0 13) 12) anon25_Else_correct))))))
(let ((anon24_Else_correct  (=> (and (not (and (and ($Is SetType |a#10@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#10@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#10@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#10@0| (TSet _module._default.Sets$T) $Heap)))) (= (ControlFlow 0 16) 13)) anon12_correct)))
(let ((anon24_Then_correct  (=> (and (and (and ($Is SetType |a#10@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#10@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#10@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#10@0| (TSet _module._default.Sets$T) $Heap))) (= (ControlFlow 0 15) 13)) anon12_correct)))
(let ((anon10_correct  (and (=> (= (ControlFlow 0 17) (- 0 18)) (forall ((|a#9| T@U) (|b#9| T@U) ) (!  (=> (and (and ($Is SetType |a#9| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#9| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#9| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#9| (TSet _module._default.Sets$T) $Heap))) (|Set#Equal| (|Set#Union| |a#9| |b#9|) |b#9|))
 :pattern ( (|Set#Union| |a#9| |b#9|))
))) (=> (forall ((|a#9@@0| T@U) (|b#9@@0| T@U) ) (!  (=> (and (and ($Is SetType |a#9@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#9@@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#9@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#9@@0| (TSet _module._default.Sets$T) $Heap))) (|Set#Equal| (|Set#Union| |a#9@@0| |b#9@@0|) |b#9@@0|))
 :pattern ( (|Set#Union| |a#9@@0| |b#9@@0|))
)) (and (=> (= (ControlFlow 0 17) 15) anon24_Then_correct) (=> (= (ControlFlow 0 17) 16) anon24_Else_correct))))))
(let ((anon23_Else_correct  (=> (and (not (and (and ($Is SetType |a#8@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#8@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#8@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#8@0| (TSet _module._default.Sets$T) $Heap)))) (= (ControlFlow 0 20) 17)) anon10_correct)))
(let ((anon23_Then_correct  (=> (and (and (and ($Is SetType |a#8@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#8@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#8@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#8@0| (TSet _module._default.Sets$T) $Heap))) (= (ControlFlow 0 19) 17)) anon10_correct)))
(let ((anon8_correct  (and (=> (= (ControlFlow 0 21) (- 0 22)) (forall ((|a#7| T@U) (|b#7| T@U) ) (!  (=> (and (and ($Is SetType |a#7| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#7| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#7| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#7| (TSet _module._default.Sets$T) $Heap))) (|Set#Subset| |b#7| |a#7|))
 :pattern ( (|Set#Subset| |b#7| |a#7|))
))) (=> (forall ((|a#7@@0| T@U) (|b#7@@0| T@U) ) (!  (=> (and (and ($Is SetType |a#7@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#7@@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#7@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#7@@0| (TSet _module._default.Sets$T) $Heap))) (|Set#Subset| |b#7@@0| |a#7@@0|))
 :pattern ( (|Set#Subset| |b#7@@0| |a#7@@0|))
)) (and (=> (= (ControlFlow 0 21) 19) anon23_Then_correct) (=> (= (ControlFlow 0 21) 20) anon23_Else_correct))))))
(let ((anon22_Else_correct  (=> (and (not (and (and ($Is SetType |a#6@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#6@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#6@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#6@0| (TSet _module._default.Sets$T) $Heap)))) (= (ControlFlow 0 24) 21)) anon8_correct)))
(let ((anon22_Then_correct  (=> (and (and (and ($Is SetType |a#6@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#6@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#6@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#6@0| (TSet _module._default.Sets$T) $Heap))) (= (ControlFlow 0 23) 21)) anon8_correct)))
(let ((anon6_correct  (and (=> (= (ControlFlow 0 25) (- 0 26)) (forall ((|a#5| T@U) (|b#5| T@U) ) (!  (=> (and (and ($Is SetType |a#5| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#5| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#5| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#5| (TSet _module._default.Sets$T) $Heap))) (and (|Set#Subset| |b#5| |a#5|) (not (|Set#Subset| |a#5| |b#5|))))
 :pattern ( (|Set#Subset| |b#5| |a#5|))
))) (=> (forall ((|a#5@@0| T@U) (|b#5@@0| T@U) ) (!  (=> (and (and ($Is SetType |a#5@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#5@@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#5@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#5@@0| (TSet _module._default.Sets$T) $Heap))) (and (|Set#Subset| |b#5@@0| |a#5@@0|) (not (|Set#Subset| |a#5@@0| |b#5@@0|))))
 :pattern ( (|Set#Subset| |b#5@@0| |a#5@@0|))
)) (and (=> (= (ControlFlow 0 25) 23) anon22_Then_correct) (=> (= (ControlFlow 0 25) 24) anon22_Else_correct))))))
(let ((anon21_Else_correct  (=> (and (not (and (and ($Is SetType |a#4@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#4@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#4@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#4@0| (TSet _module._default.Sets$T) $Heap)))) (= (ControlFlow 0 28) 25)) anon6_correct)))
(let ((anon21_Then_correct  (=> (and (and (and ($Is SetType |a#4@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#4@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#4@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#4@0| (TSet _module._default.Sets$T) $Heap))) (= (ControlFlow 0 27) 25)) anon6_correct)))
(let ((anon4_correct  (and (=> (= (ControlFlow 0 29) (- 0 30)) (forall ((|a#3| T@U) (|b#3| T@U) ) (!  (=> (and (and ($Is SetType |a#3| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#3| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#3| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#3| (TSet _module._default.Sets$T) $Heap))) (and (|Set#Subset| |a#3| |b#3|) (not (|Set#Subset| |b#3| |a#3|))))
 :pattern ( (|Set#Subset| |a#3| |b#3|))
))) (=> (forall ((|a#3@@0| T@U) (|b#3@@0| T@U) ) (!  (=> (and (and ($Is SetType |a#3@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#3@@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#3@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#3@@0| (TSet _module._default.Sets$T) $Heap))) (and (|Set#Subset| |a#3@@0| |b#3@@0|) (not (|Set#Subset| |b#3@@0| |a#3@@0|))))
 :pattern ( (|Set#Subset| |a#3@@0| |b#3@@0|))
)) (and (=> (= (ControlFlow 0 29) 27) anon21_Then_correct) (=> (= (ControlFlow 0 29) 28) anon21_Else_correct))))))
(let ((anon20_Else_correct  (=> (and (not (and (and ($Is SetType |a#2@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#2@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#2@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#2@0| (TSet _module._default.Sets$T) $Heap)))) (= (ControlFlow 0 32) 29)) anon4_correct)))
(let ((anon20_Then_correct  (=> (and (and (and ($Is SetType |a#2@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#2@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#2@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#2@0| (TSet _module._default.Sets$T) $Heap))) (= (ControlFlow 0 31) 29)) anon4_correct)))
(let ((anon2_correct  (and (=> (= (ControlFlow 0 33) (- 0 34)) (forall ((|a#1| T@U) (|b#1| T@U) ) (!  (=> (and (and ($Is SetType |a#1| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#1| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#1| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#1| (TSet _module._default.Sets$T) $Heap))) (|Set#Subset| |a#1| |b#1|))
 :pattern ( (|Set#Subset| |a#1| |b#1|))
))) (=> (forall ((|a#1@@0| T@U) (|b#1@@0| T@U) ) (!  (=> (and (and ($Is SetType |a#1@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#1@@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#1@@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#1@@0| (TSet _module._default.Sets$T) $Heap))) (|Set#Subset| |a#1@@0| |b#1@@0|))
 :pattern ( (|Set#Subset| |a#1@@0| |b#1@@0|))
)) (and (=> (= (ControlFlow 0 33) 31) anon20_Then_correct) (=> (= (ControlFlow 0 33) 32) anon20_Else_correct))))))
(let ((anon19_Else_correct  (=> (and (not (and (and ($Is SetType |a#0@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#0@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#0@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#0@0| (TSet _module._default.Sets$T) $Heap)))) (= (ControlFlow 0 36) 33)) anon2_correct)))
(let ((anon19_Then_correct  (=> (and (and (and ($Is SetType |a#0@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |a#0@0| (TSet _module._default.Sets$T) $Heap)) (and ($Is SetType |b#0@0| (TSet _module._default.Sets$T)) ($IsAlloc SetType |b#0@0| (TSet _module._default.Sets$T) $Heap))) (= (ControlFlow 0 35) 33)) anon2_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 37) 35) anon19_Then_correct) (=> (= (ControlFlow 0 37) 36) anon19_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 38) 37))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 33) (- 34))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 29) (- 30))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 17) (- 18))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 13) (- 14))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
