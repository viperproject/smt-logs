(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@36 (Int) Bool)
(declare-fun $generated@@37 (Int) Bool)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@44 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@45 (T@U) Bool)
(declare-fun $generated@@53 (T@U) Bool)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@62 (T@U T@U T@U) Bool)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@77 (T@U T@U) Bool)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@91 (T@U) Int)
(declare-fun $generated@@92 (T@U) Int)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@98 () T@T)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@101 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@102 () T@T)
(declare-fun $generated@@103 (T@T T@T) T@T)
(declare-fun $generated@@104 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@105 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@T) T@T)
(declare-fun $generated@@107 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@1))
(assert (= ($generated@@24 $generated@@0) $generated@@2))
(assert (= ($generated@@8 $generated@@28) 3))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@38 T@U) ) (!  (=> (or ($generated@@29 ($generated@@27 $generated@@28 $generated@@38)) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@38 ($generated@@31 $generated@@0)))) (and (=> ($generated@@13 ($generated@@27 $generated@@9 ($generated@@12 ($generated@@32 ($generated@@27 $generated@@28 $generated@@38))))) (let (($generated@@39 ($generated@@33 ($generated@@15 ($generated@@34 $generated@@10 ($generated@@35 ($generated@@27 $generated@@28 $generated@@38)))))))
($generated@@36 $generated@@39))) (= ($generated@@26 ($generated@@27 $generated@@28 $generated@@38)) (ite ($generated@@32 ($generated@@27 $generated@@28 $generated@@38)) ($generated@@13 (let (($generated@@40 ($generated@@33 ($generated@@15 ($generated@@34 $generated@@10 ($generated@@35 ($generated@@27 $generated@@28 $generated@@38)))))))
($generated@@27 $generated@@9 ($generated@@12 ($generated@@37 $generated@@40))))) true))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@28 $generated@@38)))
))))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@41 Int) ) (!  (=> (or ($generated@@36 ($generated@@33 $generated@@41)) (< 0 $generated@@25)) (= ($generated@@37 ($generated@@33 $generated@@41))  (and (<= ($generated@@33 0) ($generated@@33 $generated@@41)) (or (not (= $generated@@41 5)) (not true)))))
 :weight 3
 :pattern ( ($generated@@37 ($generated@@33 $generated@@41)))
))))
(assert (= ($generated@@42 $generated@@43) $generated@@6))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@45 $generated@@47) ($generated@@44 $generated@@28 $generated@@43 ($generated@@31 $generated@@46) $generated@@47))
 :pattern ( ($generated@@44 $generated@@28 $generated@@43 ($generated@@31 $generated@@46) $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ) (! ($generated@@30 $generated@@28 $generated@@43 ($generated@@31 $generated@@48))
 :pattern ( ($generated@@30 $generated@@28 $generated@@43 ($generated@@31 $generated@@48)))
)))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@33 $generated@@49) $generated@@49)
 :pattern ( ($generated@@33 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@27 $generated@@51 $generated@@50) $generated@@50)
 :pattern ( ($generated@@27 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ) (! (= ($generated@@32 $generated@@52) (= ($generated@@42 $generated@@52) $generated@@5))
 :pattern ( ($generated@@32 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@53 $generated@@54) (= ($generated@@42 $generated@@54) $generated@@6))
 :pattern ( ($generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 ($generated@@34 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@34 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@53 $generated@@58) (= $generated@@58 $generated@@43))
 :pattern ( ($generated@@53 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@32 $generated@@60) (exists (($generated@@61 T@U) ) (= $generated@@60 ($generated@@59 $generated@@61))))
 :pattern ( ($generated@@32 $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@62 ($generated@@55 $generated@@66 $generated@@63) $generated@@64 $generated@@65) ($generated@@44 $generated@@66 $generated@@63 $generated@@64 $generated@@65))
 :pattern ( ($generated@@62 ($generated@@55 $generated@@66 $generated@@63) $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ) (!  (and (= ($generated@@24 ($generated@@31 $generated@@68)) $generated@@4) (= ($generated@@67 ($generated@@31 $generated@@68)) $generated@@7))
 :pattern ( ($generated@@31 $generated@@68))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@69 T@U) ) (!  (=> (or ($generated@@29 $generated@@69) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@69 ($generated@@31 $generated@@0)))) (and (=> ($generated@@32 $generated@@69) (let (($generated@@70 ($generated@@15 ($generated@@34 $generated@@10 ($generated@@35 $generated@@69)))))
($generated@@36 $generated@@70))) (= ($generated@@26 $generated@@69) (ite ($generated@@32 $generated@@69) (let (($generated@@71 ($generated@@15 ($generated@@34 $generated@@10 ($generated@@35 $generated@@69)))))
($generated@@37 $generated@@71)) true))))
 :pattern ( ($generated@@26 $generated@@69))
))))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> ($generated@@45 $generated@@74) (= ($generated@@44 $generated@@28 ($generated@@59 $generated@@73) ($generated@@31 $generated@@72) $generated@@74) ($generated@@62 $generated@@73 $generated@@72 $generated@@74)))
 :pattern ( ($generated@@44 $generated@@28 ($generated@@59 $generated@@73) ($generated@@31 $generated@@72) $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> ($generated@@30 $generated@@28 $generated@@76 ($generated@@31 $generated@@75)) (or ($generated@@32 $generated@@76) ($generated@@53 $generated@@76)))
 :pattern ( ($generated@@53 $generated@@76) ($generated@@30 $generated@@28 $generated@@76 ($generated@@31 $generated@@75)))
 :pattern ( ($generated@@32 $generated@@76) ($generated@@30 $generated@@28 $generated@@76 ($generated@@31 $generated@@75)))
)))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@77 $generated@@78 $generated@@0) (and (= ($generated@@55 $generated@@10 ($generated@@34 $generated@@10 $generated@@78)) $generated@@78) ($generated@@30 $generated@@10 ($generated@@34 $generated@@10 $generated@@78) $generated@@0)))
 :pattern ( ($generated@@77 $generated@@78 $generated@@0))
)))
(assert (forall (($generated@@79 T@U) ) (!  (=> ($generated@@77 $generated@@79 $generated) (and (= ($generated@@55 $generated@@9 ($generated@@34 $generated@@9 $generated@@79)) $generated@@79) ($generated@@30 $generated@@9 ($generated@@34 $generated@@9 $generated@@79) $generated)))
 :pattern ( ($generated@@77 $generated@@79 $generated))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@77 ($generated@@55 $generated@@82 $generated@@80) $generated@@81) ($generated@@30 $generated@@82 $generated@@80 $generated@@81))
 :pattern ( ($generated@@77 ($generated@@55 $generated@@82 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@31 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@31 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ) (! (= ($generated@@42 ($generated@@59 $generated@@85)) $generated@@5)
 :pattern ( ($generated@@59 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@35 ($generated@@59 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@59 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@34 $generated@@88 ($generated@@55 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@55 $generated@@88 $generated@@87))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@30 $generated@@28 ($generated@@59 $generated@@90) ($generated@@31 $generated@@89)) ($generated@@77 $generated@@90 $generated@@89))
 :pattern ( ($generated@@30 $generated@@28 ($generated@@59 $generated@@90) ($generated@@31 $generated@@89)))
)))
(assert (forall (($generated@@93 T@U) ) (! (< ($generated@@91 $generated@@93) ($generated@@92 ($generated@@59 $generated@@93)))
 :pattern ( ($generated@@59 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (=> (and ($generated@@45 $generated@@96) (and ($generated@@32 $generated@@94) ($generated@@44 $generated@@28 $generated@@94 ($generated@@31 $generated@@95) $generated@@96))) ($generated@@62 ($generated@@35 $generated@@94) $generated@@95 $generated@@96))
 :pattern ( ($generated@@62 ($generated@@35 $generated@@94) $generated@@95 $generated@@96))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@97 $generated@@108 $generated@@109 $generated@@110 ($generated@@104 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@113 $generated@@114) $generated@@111)
 :weight 0
)) (and (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@97 $generated@@115 $generated@@116 $generated@@117 ($generated@@104 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@97 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@97 $generated@@124 $generated@@125 $generated@@126 ($generated@@104 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@131 $generated@@132) ($generated@@97 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@131 $generated@@132)))
 :weight 0
)))) (= ($generated@@8 $generated@@98) 4)) (= ($generated@@8 $generated@@99) 5)) (forall (($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@101 $generated@@133 $generated@@134 ($generated@@105 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@135) $generated@@137) $generated@@135)
 :weight 0
))) (forall (($generated@@138 T@T) ($generated@@139 T@T) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (!  (or (= $generated@@142 $generated@@143) (= ($generated@@101 $generated@@138 $generated@@139 ($generated@@105 $generated@@138 $generated@@139 $generated@@141 $generated@@142 $generated@@140) $generated@@143) ($generated@@101 $generated@@138 $generated@@139 $generated@@141 $generated@@143)))
 :weight 0
))) (= ($generated@@8 $generated@@102) 6)) (forall (($generated@@144 T@T) ($generated@@145 T@T) ) (= ($generated@@8 ($generated@@103 $generated@@144 $generated@@145)) 7))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ) (! (= ($generated@@106 ($generated@@103 $generated@@146 $generated@@147)) $generated@@146)
 :pattern ( ($generated@@103 $generated@@146 $generated@@147))
))) (forall (($generated@@148 T@T) ($generated@@149 T@T) ) (! (= ($generated@@107 ($generated@@103 $generated@@148 $generated@@149)) $generated@@149)
 :pattern ( ($generated@@103 $generated@@148 $generated@@149))
))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (= ($generated@@13 ($generated@@97 $generated@@98 $generated@@99 $generated@@9 ($generated@@100 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (or (not (= $generated@@154 $generated@@150)) (not true)) ($generated@@13 ($generated@@34 $generated@@9 ($generated@@101 $generated@@99 $generated@@102 ($generated@@101 $generated@@98 ($generated@@103 $generated@@99 $generated@@102) $generated@@151 $generated@@154) $generated@@152)))) $generated@@153))
 :pattern ( ($generated@@97 $generated@@98 $generated@@99 $generated@@9 ($generated@@100 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@156 T@U) ) (! (= ($generated@@91 ($generated@@55 $generated@@28 $generated@@156)) ($generated@@92 $generated@@156))
 :pattern ( ($generated@@91 ($generated@@55 $generated@@28 $generated@@156)))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (!  (=> ($generated@@77 $generated@@158 ($generated@@31 $generated@@157)) (and (= ($generated@@55 $generated@@28 ($generated@@34 $generated@@28 $generated@@158)) $generated@@158) ($generated@@30 $generated@@28 ($generated@@34 $generated@@28 $generated@@158) ($generated@@31 $generated@@157))))
 :pattern ( ($generated@@77 $generated@@158 ($generated@@31 $generated@@157)))
)))
(assert (= $generated@@43 ($generated@@27 $generated@@28 $generated@@43)))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@159 Int) ) (!  (=> (or ($generated@@36 $generated@@159) (< 0 $generated@@25)) (= ($generated@@37 $generated@@159)  (and (<= ($generated@@33 0) $generated@@159) (or (not (= $generated@@159 5)) (not true)))))
 :pattern ( ($generated@@37 $generated@@159))
))))
(assert (forall (($generated@@160 Int) ) (! (= ($generated@@55 $generated@@10 ($generated@@14 ($generated@@33 $generated@@160))) ($generated@@27 $generated@@102 ($generated@@55 $generated@@10 ($generated@@14 $generated@@160))))
 :pattern ( ($generated@@55 $generated@@10 ($generated@@14 ($generated@@33 $generated@@160))))
)))
(assert (forall (($generated@@161 T@U) ) (! (= ($generated@@59 ($generated@@27 $generated@@102 $generated@@161)) ($generated@@27 $generated@@28 ($generated@@59 $generated@@161)))
 :pattern ( ($generated@@59 ($generated@@27 $generated@@102 $generated@@161)))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 T@T) ) (! (= ($generated@@55 $generated@@163 ($generated@@27 $generated@@163 $generated@@162)) ($generated@@27 $generated@@102 ($generated@@55 $generated@@163 $generated@@162)))
 :pattern ( ($generated@@55 $generated@@163 ($generated@@27 $generated@@163 $generated@@162)))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (! ($generated@@44 $generated@@10 $generated@@165 $generated@@0 $generated@@164)
 :pattern ( ($generated@@44 $generated@@10 $generated@@165 $generated@@0 $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (! ($generated@@44 $generated@@9 $generated@@167 $generated $generated@@166)
 :pattern ( ($generated@@44 $generated@@9 $generated@@167 $generated $generated@@166))
)))
(assert (forall (($generated@@168 T@U) ) (! ($generated@@30 $generated@@10 $generated@@168 $generated@@0)
 :pattern ( ($generated@@30 $generated@@10 $generated@@168 $generated@@0))
)))
(assert (forall (($generated@@169 T@U) ) (! ($generated@@30 $generated@@9 $generated@@169 $generated)
 :pattern ( ($generated@@30 $generated@@9 $generated@@169 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@175 true))
(let (($generated@@176  (=> (and ($generated@@32 $generated@@170) (= (ControlFlow 0 3) (- 0 2))) ($generated@@32 $generated@@170))))
(let (($generated@@177 true))
(let (($generated@@178  (=> (= $generated@@171 ($generated@@100 $generated@@172 $generated@@173 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 5) 1) $generated@@177) (=> (= (ControlFlow 0 5) 3) $generated@@176)) (=> (= (ControlFlow 0 5) 4) $generated@@175)))))
(let (($generated@@179  (=> (and (and (and ($generated@@45 $generated@@173) ($generated@@174 $generated@@173)) ($generated@@30 $generated@@28 $generated@@170 ($generated@@31 $generated@@0))) (and (= 1 $generated@@25) (= (ControlFlow 0 6) 5))) $generated@@178)))
$generated@@179))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
