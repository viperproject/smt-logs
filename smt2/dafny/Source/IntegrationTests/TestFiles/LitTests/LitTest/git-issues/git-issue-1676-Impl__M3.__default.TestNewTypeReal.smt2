(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@34 (Real) Real)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@U T@U) T@U)
(declare-fun $generated@@44 (T@U T@U) Int)
(declare-fun $generated@@48 (T@U) Int)
(declare-fun $generated@@52 (T@U T@U T@U) Bool)
(declare-fun $generated@@57 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@U T@U) Bool)
(declare-fun $generated@@72 () T@U)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@88 () T@T)
(declare-fun $generated@@89 () T@T)
(declare-fun $generated@@90 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@91 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@92 () T@T)
(declare-fun $generated@@93 (T@T T@T) T@T)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@96 (T@T) T@T)
(declare-fun $generated@@97 (T@T) T@T)
(declare-fun $generated@@148 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@8 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@8 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! ($generated@@21 $generated@@8 $generated@@26 $generated@@25 $generated@@27)
 :pattern ( ($generated@@21 $generated@@8 $generated@@26 $generated@@25 $generated@@27))
)))
(assert (= ($generated@@5 $generated@@29) 3))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@32 ($generated@@30 $generated@@33)) ($generated@@31 $generated@@32))
 :pattern ( ($generated@@28 $generated@@29 $generated@@32 ($generated@@30 $generated@@33)))
)))
(assert (forall (($generated@@35 Real) ) (! (= ($generated@@34 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@39 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@39 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> (or (not (= $generated@@46 $generated@@47)) (not true)) (= ($generated@@44 $generated@@45 $generated@@47) ($generated@@44 ($generated@@43 $generated@@45 $generated@@46) $generated@@47)))
 :pattern ( ($generated@@43 $generated@@45 $generated@@46) ($generated@@44 $generated@@45 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@48 ($generated@@43 $generated@@49 $generated@@50)) (+ ($generated@@48 $generated@@49) 1))
 :pattern ( ($generated@@48 ($generated@@43 $generated@@49 $generated@@50)))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@28 $generated@@8 $generated@@51 $generated@@25)  (and (and (<= ($generated@@34 0.0) ($generated@@14 $generated@@51)) (< ($generated@@14 $generated@@51) 100.0)) (<= ($generated@@34 2.0) ($generated@@14 $generated@@51))))
 :pattern ( ($generated@@28 $generated@@8 $generated@@51 $generated@@25))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@52 ($generated@@40 $generated@@56 $generated@@53) $generated@@54 $generated@@55) ($generated@@21 $generated@@56 $generated@@53 $generated@@54 $generated@@55))
 :pattern ( ($generated@@52 ($generated@@40 $generated@@56 $generated@@53) $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@48 ($generated@@57 $generated@@58 $generated@@59)) (+ ($generated@@48 $generated@@58) ($generated@@48 $generated@@59)))
 :pattern ( ($generated@@48 ($generated@@57 $generated@@58 $generated@@59)))
)))
(assert (forall (($generated@@61 T@U) ) (!  (=> ($generated@@60 $generated@@61 $generated@@22) (and (= ($generated@@40 $generated@@8 ($generated@@39 $generated@@8 $generated@@61)) $generated@@61) ($generated@@28 $generated@@8 ($generated@@39 $generated@@8 $generated@@61) $generated@@22)))
 :pattern ( ($generated@@60 $generated@@61 $generated@@22))
)))
(assert (forall (($generated@@62 T@U) ) (!  (=> ($generated@@60 $generated@@62 $generated@@25) (and (= ($generated@@40 $generated@@8 ($generated@@39 $generated@@8 $generated@@62)) $generated@@62) ($generated@@28 $generated@@8 ($generated@@39 $generated@@8 $generated@@62) $generated@@25)))
 :pattern ( ($generated@@60 $generated@@62 $generated@@25))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@63 ($generated@@30 $generated@@64)) (forall (($generated@@65 T@U) ) (!  (=> (< 0 ($generated@@44 $generated@@63 $generated@@65)) ($generated@@60 $generated@@65 $generated@@64))
 :pattern ( ($generated@@44 $generated@@63 $generated@@65))
)))
 :pattern ( ($generated@@28 $generated@@29 $generated@@63 ($generated@@30 $generated@@64)))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@60 ($generated@@40 $generated@@68 $generated@@66) $generated@@67) ($generated@@28 $generated@@68 $generated@@66 $generated@@67))
 :pattern ( ($generated@@60 ($generated@@40 $generated@@68 $generated@@66) $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@31 $generated@@69) (forall (($generated@@70 T@U) ) (!  (and (<= 0 ($generated@@44 $generated@@69 $generated@@70)) (<= ($generated@@44 $generated@@69 $generated@@70) ($generated@@48 $generated@@69)))
 :pattern ( ($generated@@44 $generated@@69 $generated@@70))
)))
 :pattern ( ($generated@@31 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (<= 0 ($generated@@48 $generated@@71))
 :pattern ( ($generated@@48 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@44 $generated@@72 $generated@@73) 0)
 :pattern ( ($generated@@44 $generated@@72 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@44 ($generated@@43 $generated@@74 $generated@@75) $generated@@75) (+ ($generated@@44 $generated@@74 $generated@@75) 1))
 :pattern ( ($generated@@43 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@76 ($generated@@30 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@30 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@78 ($generated@@30 $generated@@79)) $generated)
 :pattern ( ($generated@@30 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@39 $generated@@81 ($generated@@40 $generated@@81 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@40 $generated@@81 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (!  (and (= (= ($generated@@48 $generated@@82) 0) (= $generated@@82 $generated@@72)) (=> (or (not (= ($generated@@48 $generated@@82) 0)) (not true)) (exists (($generated@@83 T@U) ) (! (< 0 ($generated@@44 $generated@@82 $generated@@83))
 :pattern ( ($generated@@44 $generated@@82 $generated@@83))
))))
 :pattern ( ($generated@@48 $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@44 ($generated@@57 $generated@@84 $generated@@85) $generated@@86) (+ ($generated@@44 $generated@@84 $generated@@86) ($generated@@44 $generated@@85 $generated@@86)))
 :pattern ( ($generated@@44 ($generated@@57 $generated@@84 $generated@@85) $generated@@86))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@87 $generated@@98 $generated@@99 $generated@@100 ($generated@@94 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@103 $generated@@104) $generated@@101)
 :weight 0
)) (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@87 $generated@@105 $generated@@106 $generated@@107 ($generated@@94 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@112 $generated@@113) ($generated@@87 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@112 $generated@@113)))
 :weight 0
)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@87 $generated@@114 $generated@@115 $generated@@116 ($generated@@94 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@120 $generated@@117) $generated@@121 $generated@@122) ($generated@@87 $generated@@114 $generated@@115 $generated@@116 $generated@@118 $generated@@121 $generated@@122)))
 :weight 0
)))) (= ($generated@@5 $generated@@88) 4)) (= ($generated@@5 $generated@@89) 5)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@91 $generated@@123 $generated@@124 ($generated@@95 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@125) $generated@@127) $generated@@125)
 :weight 0
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@132 $generated@@133) (= ($generated@@91 $generated@@128 $generated@@129 ($generated@@95 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@130) $generated@@133) ($generated@@91 $generated@@128 $generated@@129 $generated@@131 $generated@@133)))
 :weight 0
))) (= ($generated@@5 $generated@@92) 6)) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (= ($generated@@5 ($generated@@93 $generated@@134 $generated@@135)) 7))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (! (= ($generated@@96 ($generated@@93 $generated@@136 $generated@@137)) $generated@@136)
 :pattern ( ($generated@@93 $generated@@136 $generated@@137))
))) (forall (($generated@@138 T@T) ($generated@@139 T@T) ) (! (= ($generated@@97 ($generated@@93 $generated@@138 $generated@@139)) $generated@@139)
 :pattern ( ($generated@@93 $generated@@138 $generated@@139))
))))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 Bool) ($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@10 ($generated@@87 $generated@@88 $generated@@89 $generated@@6 ($generated@@90 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@144 $generated@@145))  (=> (and (or (not (= $generated@@144 $generated@@140)) (not true)) ($generated@@10 ($generated@@39 $generated@@6 ($generated@@91 $generated@@89 $generated@@92 ($generated@@91 $generated@@88 ($generated@@93 $generated@@89 $generated@@92) $generated@@141 $generated@@144) $generated@@142)))) $generated@@143))
 :pattern ( ($generated@@87 $generated@@88 $generated@@89 $generated@@6 ($generated@@90 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@144 $generated@@145))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (!  (=> ($generated@@60 $generated@@146 ($generated@@30 $generated@@147)) (and (= ($generated@@40 $generated@@29 ($generated@@39 $generated@@29 $generated@@146)) $generated@@146) ($generated@@28 $generated@@29 ($generated@@39 $generated@@29 $generated@@146) ($generated@@30 $generated@@147))))
 :pattern ( ($generated@@60 $generated@@146 ($generated@@30 $generated@@147)))
)))
(assert (= ($generated@@78 $generated@@22) $generated@@1))
(assert (= ($generated@@148 $generated@@22) $generated@@3))
(assert (= ($generated@@78 $generated@@25) $generated@@2))
(assert (= ($generated@@148 $generated@@25) $generated@@4))
(assert (forall (($generated@@149 T@U) ) (! (= ($generated@@28 $generated@@8 $generated@@149 $generated@@22)  (and (<= ($generated@@34 0.0) ($generated@@14 $generated@@149)) (< ($generated@@14 $generated@@149) 100.0)))
 :pattern ( ($generated@@28 $generated@@8 $generated@@149 $generated@@22))
)))
(assert (forall (($generated@@150 Real) ) (! (= ($generated@@40 $generated@@8 ($generated@@13 ($generated@@34 $generated@@150))) ($generated@@36 $generated@@92 ($generated@@40 $generated@@8 ($generated@@13 $generated@@150))))
 :pattern ( ($generated@@40 $generated@@8 ($generated@@13 ($generated@@34 $generated@@150))))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@T) ) (! (= ($generated@@40 $generated@@152 ($generated@@36 $generated@@152 $generated@@151)) ($generated@@36 $generated@@92 ($generated@@40 $generated@@152 $generated@@151)))
 :pattern ( ($generated@@40 $generated@@152 ($generated@@36 $generated@@152 $generated@@151)))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> (< 0 ($generated@@44 $generated@@153 $generated@@155)) (< 0 ($generated@@44 ($generated@@43 $generated@@153 $generated@@154) $generated@@155)))
 :pattern ( ($generated@@43 $generated@@153 $generated@@154) ($generated@@44 $generated@@153 $generated@@155))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ) (! (= (< 0 ($generated@@44 ($generated@@43 $generated@@156 $generated@@157) $generated@@158))  (or (= $generated@@158 $generated@@157) (< 0 ($generated@@44 $generated@@156 $generated@@158))))
 :pattern ( ($generated@@44 ($generated@@43 $generated@@156 $generated@@157) $generated@@158))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ) (! (= ($generated@@21 $generated@@29 $generated@@159 ($generated@@30 $generated@@160) $generated@@161) (forall (($generated@@162 T@U) ) (!  (=> (< 0 ($generated@@44 $generated@@159 $generated@@162)) ($generated@@52 $generated@@162 $generated@@160 $generated@@161))
 :pattern ( ($generated@@44 $generated@@159 $generated@@162))
)))
 :pattern ( ($generated@@21 $generated@@29 $generated@@159 ($generated@@30 $generated@@160) $generated@@161))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () Real)
(declare-fun $generated@@169 () Real)
(declare-fun $generated@@170 (T@U) Bool)
(declare-fun $generated@@171 (T@U) Bool)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@181  (=> (and (and (and (and (and (and (not ($generated@@10 ($generated@@36 $generated@@6 ($generated@@9 true)))) (not ($generated@@10 ($generated@@36 $generated@@6 ($generated@@9 true))))) (not ($generated@@10 ($generated@@36 $generated@@6 ($generated@@9 true))))) (not ($generated@@10 ($generated@@36 $generated@@6 ($generated@@9 true))))) (not ($generated@@10 ($generated@@36 $generated@@6 ($generated@@9 true))))) (not ($generated@@10 ($generated@@36 $generated@@6 ($generated@@9 true))))) (= (ControlFlow 0 10) (- 0 9))) false)))
(let (($generated@@182 true))
(let (($generated@@183 true))
(let (($generated@@184  (=> (= (ControlFlow 0 6) (- 0 5)) ($generated@@28 $generated@@29 ($generated@@57 $generated@@163 $generated@@164) ($generated@@30 $generated@@25)))))
(let (($generated@@185  (=> (= (ControlFlow 0 4) (- 0 3)) ($generated@@28 $generated@@29 ($generated@@57 $generated@@164 $generated@@163) ($generated@@30 $generated@@25)))))
(let (($generated@@186 true))
(let (($generated@@187 true))
(let (($generated@@188  (=> (= $generated@@165 ($generated@@90 $generated@@166 $generated@@167 $generated@@0 false)) (=> (and (= $generated@@164 ($generated@@43 $generated@@72 ($generated@@40 $generated@@8 ($generated@@13 $generated@@168)))) (= $generated@@163 ($generated@@43 $generated@@72 ($generated@@40 $generated@@8 ($generated@@13 $generated@@169))))) (and (and (and (and (and (and (=> (= (ControlFlow 0 11) 1) $generated@@187) (=> (= (ControlFlow 0 11) 2) $generated@@186)) (=> (= (ControlFlow 0 11) 4) $generated@@185)) (=> (= (ControlFlow 0 11) 6) $generated@@184)) (=> (= (ControlFlow 0 11) 7) $generated@@183)) (=> (= (ControlFlow 0 11) 8) $generated@@182)) (=> (= (ControlFlow 0 11) 10) $generated@@181))))))
(let (($generated@@189  (=> (and (and ($generated@@170 $generated@@167) ($generated@@171 $generated@@167)) (and (<= ($generated@@34 0.0) $generated@@168) (< $generated@@168 100.0))) (=> (and (and (and (<= ($generated@@34 0.0) $generated@@169) (< $generated@@169 100.0)) (<= ($generated@@34 2.0) $generated@@169)) (and (and ($generated@@28 $generated@@29 $generated@@172 ($generated@@30 $generated@@22)) ($generated@@21 $generated@@29 $generated@@172 ($generated@@30 $generated@@22) $generated@@167)) true)) (=> (and (and (and (and (and ($generated@@28 $generated@@29 $generated@@173 ($generated@@30 $generated@@25)) ($generated@@21 $generated@@29 $generated@@173 ($generated@@30 $generated@@25) $generated@@167)) true) (and (and ($generated@@28 $generated@@29 $generated@@174 ($generated@@30 $generated@@22)) ($generated@@21 $generated@@29 $generated@@174 ($generated@@30 $generated@@22) $generated@@167)) true)) (and (and (and ($generated@@28 $generated@@29 $generated@@175 ($generated@@30 $generated@@22)) ($generated@@21 $generated@@29 $generated@@175 ($generated@@30 $generated@@22) $generated@@167)) true) (and (and ($generated@@28 $generated@@29 $generated@@176 ($generated@@30 $generated@@25)) ($generated@@21 $generated@@29 $generated@@176 ($generated@@30 $generated@@25) $generated@@167)) true))) (and (and (and (and ($generated@@28 $generated@@29 $generated@@177 ($generated@@30 $generated@@25)) ($generated@@21 $generated@@29 $generated@@177 ($generated@@30 $generated@@25) $generated@@167)) true) (and (and ($generated@@28 $generated@@29 $generated@@178 ($generated@@30 $generated@@22)) ($generated@@21 $generated@@29 $generated@@178 ($generated@@30 $generated@@22) $generated@@167)) true)) (and (and (and ($generated@@28 $generated@@29 $generated@@179 ($generated@@30 $generated@@22)) ($generated@@21 $generated@@29 $generated@@179 ($generated@@30 $generated@@22) $generated@@167)) true) (and (= 2 $generated@@180) (= (ControlFlow 0 12) 11))))) $generated@@188)))))
$generated@@189))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
