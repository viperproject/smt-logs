(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U Int) T@U)
(declare-fun $generated@@23 (T@U Int T@U) T@U)
(declare-fun $generated@@28 (T@U Int) T@U)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U) Bool)
(declare-fun $generated@@51 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@65 (T@U T@U) Bool)
(declare-fun $generated@@66 (T@T T@U T@U) Bool)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@88 () T@T)
(declare-fun $generated@@89 (T@T T@T) T@T)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@T) T@T)
(declare-fun $generated@@93 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@24 T@U) ($generated@@25 Int) ($generated@@26 T@U) ($generated@@27 Int) ) (!  (=> (and (<= 0 $generated@@27) (< $generated@@27 ($generated@@20 $generated@@24))) (and (=> (= $generated@@25 $generated@@27) (= ($generated@@22 ($generated@@23 $generated@@24 $generated@@25 $generated@@26) $generated@@27) $generated@@26)) (=> (or (not (= $generated@@25 $generated@@27)) (not true)) (= ($generated@@22 ($generated@@23 $generated@@24 $generated@@25 $generated@@26) $generated@@27) ($generated@@22 $generated@@24 $generated@@27)))))
 :pattern ( ($generated@@22 ($generated@@23 $generated@@24 $generated@@25 $generated@@26) $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 Int) ($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (and (and (<= 0 $generated@@32) (<= $generated@@32 $generated@@30)) (< $generated@@30 ($generated@@20 $generated@@29))) (= ($generated@@28 ($generated@@23 $generated@@29 $generated@@30 $generated@@31) $generated@@32) ($generated@@23 ($generated@@28 $generated@@29 $generated@@32) (- $generated@@30 $generated@@32) $generated@@31)))
 :pattern ( ($generated@@28 ($generated@@23 $generated@@29 $generated@@30 $generated@@31) $generated@@32))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 Int) ) (!  (=> (= $generated@@34 0) (= ($generated@@28 $generated@@33 $generated@@34) $generated@@33))
 :pattern ( ($generated@@28 $generated@@33 $generated@@34))
)))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@35 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 $generated@@38) $generated@@38)
 :pattern ( ($generated@@37 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 Int) ) (!  (=> (and (<= 0 $generated@@41) (<= $generated@@41 ($generated@@20 $generated@@40))) (= ($generated@@20 ($generated@@28 $generated@@40 $generated@@41)) (- ($generated@@20 $generated@@40) $generated@@41)))
 :pattern ( ($generated@@20 ($generated@@28 $generated@@40 $generated@@41)))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@42 $generated@@43 $generated@@44)  (and (= ($generated@@20 $generated@@43) ($generated@@20 $generated@@44)) (forall (($generated@@45 Int) ) (!  (=> (and (<= 0 $generated@@45) (< $generated@@45 ($generated@@20 $generated@@43))) (= ($generated@@22 $generated@@43 $generated@@45) ($generated@@22 $generated@@44 $generated@@45)))
 :pattern ( ($generated@@22 $generated@@43 $generated@@45))
 :pattern ( ($generated@@22 $generated@@44 $generated@@45))
))))
 :pattern ( ($generated@@42 $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 ($generated@@46 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@46 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@55 $generated@@52) $generated@@53 $generated@@54) ($generated@@51 $generated@@55 $generated@@52 $generated@@53 $generated@@54))
 :pattern ( ($generated@@50 ($generated@@47 $generated@@55 $generated@@52) $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 Int) ($generated@@58 Int) ) (!  (=> (and (and (<= 0 $generated@@57) (<= 0 $generated@@58)) (< $generated@@58 (- ($generated@@20 $generated@@56) $generated@@57))) (= ($generated@@22 ($generated@@28 $generated@@56 $generated@@57) $generated@@58) ($generated@@22 $generated@@56 (+ $generated@@58 $generated@@57))))
 :weight 25
 :pattern ( ($generated@@22 ($generated@@28 $generated@@56 $generated@@57) $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 Int) ($generated@@61 T@U) ($generated@@62 Int) ) (!  (=> (and (and (<= 0 $generated@@60) (< $generated@@60 $generated@@62)) (<= $generated@@62 ($generated@@20 $generated@@59))) (= ($generated@@28 ($generated@@23 $generated@@59 $generated@@60 $generated@@61) $generated@@62) ($generated@@28 $generated@@59 $generated@@62)))
 :pattern ( ($generated@@28 ($generated@@23 $generated@@59 $generated@@60 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> ($generated@@42 $generated@@63 $generated@@64) (= $generated@@63 $generated@@64))
 :pattern ( ($generated@@42 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@65 $generated@@67 $generated) (and (= ($generated@@47 $generated@@5 ($generated@@46 $generated@@5 $generated@@67)) $generated@@67) ($generated@@66 $generated@@5 ($generated@@46 $generated@@5 $generated@@67) $generated)))
 :pattern ( ($generated@@65 $generated@@67 $generated))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@65 ($generated@@47 $generated@@70 $generated@@68) $generated@@69) ($generated@@66 $generated@@70 $generated@@68 $generated@@69))
 :pattern ( ($generated@@65 ($generated@@47 $generated@@70 $generated@@68) $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (<= 0 ($generated@@20 $generated@@71))
 :pattern ( ($generated@@20 $generated@@71))
)))
(assert (= ($generated@@3 $generated@@72) 3))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@51 $generated@@72 $generated@@74 ($generated@@73 $generated@@75) $generated@@76) (forall (($generated@@77 Int) ) (!  (=> (and (<= 0 $generated@@77) (< $generated@@77 ($generated@@20 $generated@@74))) ($generated@@50 ($generated@@22 $generated@@74 $generated@@77) $generated@@75 $generated@@76))
 :pattern ( ($generated@@22 $generated@@74 $generated@@77))
)))
 :pattern ( ($generated@@51 $generated@@72 $generated@@74 ($generated@@73 $generated@@75) $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@78 ($generated@@73 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@73 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@19 ($generated@@73 $generated@@80)) $generated@@1)
 :pattern ( ($generated@@73 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@46 $generated@@82 ($generated@@47 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@47 $generated@@82 $generated@@81))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@83 $generated@@94 $generated@@95 $generated@@96 ($generated@@90 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@99 $generated@@100) $generated@@97)
 :weight 0
)) (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@83 $generated@@101 $generated@@102 $generated@@103 ($generated@@90 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@83 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@83 $generated@@110 $generated@@111 $generated@@112 ($generated@@90 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@83 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)))) (= ($generated@@3 $generated@@84) 4)) (= ($generated@@3 $generated@@85) 5)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@87 $generated@@119 $generated@@120 ($generated@@91 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@121) $generated@@123) $generated@@121)
 :weight 0
))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@128 $generated@@129) (= ($generated@@87 $generated@@124 $generated@@125 ($generated@@91 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@126) $generated@@129) ($generated@@87 $generated@@124 $generated@@125 $generated@@127 $generated@@129)))
 :weight 0
))) (= ($generated@@3 $generated@@88) 6)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (= ($generated@@3 ($generated@@89 $generated@@130 $generated@@131)) 7))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@92 ($generated@@89 $generated@@132 $generated@@133)) $generated@@132)
 :pattern ( ($generated@@89 $generated@@132 $generated@@133))
))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (! (= ($generated@@93 ($generated@@89 $generated@@134 $generated@@135)) $generated@@135)
 :pattern ( ($generated@@89 $generated@@134 $generated@@135))
))))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 Bool) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@8 ($generated@@83 $generated@@84 $generated@@85 $generated@@4 ($generated@@86 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))  (=> (and (or (not (= $generated@@140 $generated@@136)) (not true)) ($generated@@8 ($generated@@46 $generated@@4 ($generated@@87 $generated@@85 $generated@@88 ($generated@@87 $generated@@84 ($generated@@89 $generated@@85 $generated@@88) $generated@@137 $generated@@140) $generated@@138)))) $generated@@139))
 :pattern ( ($generated@@83 $generated@@84 $generated@@85 $generated@@4 ($generated@@86 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 Int) ($generated@@144 T@U) ) (!  (=> (and (<= 0 $generated@@143) (< $generated@@143 ($generated@@20 $generated@@142))) (= ($generated@@20 ($generated@@23 $generated@@142 $generated@@143 $generated@@144)) ($generated@@20 $generated@@142)))
 :pattern ( ($generated@@20 ($generated@@23 $generated@@142 $generated@@143 $generated@@144)))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (!  (=> ($generated@@65 $generated@@145 ($generated@@73 $generated@@146)) (and (= ($generated@@47 $generated@@72 ($generated@@46 $generated@@72 $generated@@145)) $generated@@145) ($generated@@66 $generated@@72 ($generated@@46 $generated@@72 $generated@@145) ($generated@@73 $generated@@146))))
 :pattern ( ($generated@@65 $generated@@145 ($generated@@73 $generated@@146)))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 Int) ($generated@@149 Int) ) (!  (=> (and (and (<= 0 $generated@@148) (<= $generated@@148 $generated@@149)) (< $generated@@149 ($generated@@20 $generated@@147))) (= ($generated@@22 ($generated@@28 $generated@@147 $generated@@148) (- $generated@@149 $generated@@148)) ($generated@@22 $generated@@147 $generated@@149)))
 :weight 25
 :pattern ( ($generated@@22 $generated@@147 $generated@@149) ($generated@@28 $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 Int) ($generated@@152 Int) ) (!  (=> (and (and (<= 0 $generated@@151) (<= 0 $generated@@152)) (<= (+ $generated@@151 $generated@@152) ($generated@@20 $generated@@150))) (= ($generated@@28 ($generated@@28 $generated@@150 $generated@@151) $generated@@152) ($generated@@28 $generated@@150 (+ $generated@@151 $generated@@152))))
 :pattern ( ($generated@@28 ($generated@@28 $generated@@150 $generated@@151) $generated@@152))
)))
(assert (forall (($generated@@153 Int) ) (! (= ($generated@@47 $generated@@5 ($generated@@9 ($generated@@35 $generated@@153))) ($generated@@37 $generated@@88 ($generated@@47 $generated@@5 ($generated@@9 $generated@@153))))
 :pattern ( ($generated@@47 $generated@@5 ($generated@@9 ($generated@@35 $generated@@153))))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@T) ) (! (= ($generated@@47 $generated@@155 ($generated@@37 $generated@@155 $generated@@154)) ($generated@@37 $generated@@88 ($generated@@47 $generated@@155 $generated@@154)))
 :pattern ( ($generated@@47 $generated@@155 ($generated@@37 $generated@@155 $generated@@154)))
)))
(assert (forall (($generated@@156 T@U) ) (!  (=> (= ($generated@@20 $generated@@156) 0) (= $generated@@156 $generated@@21))
 :pattern ( ($generated@@20 $generated@@156))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (! ($generated@@51 $generated@@5 $generated@@158 $generated $generated@@157)
 :pattern ( ($generated@@51 $generated@@5 $generated@@158 $generated $generated@@157))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (! (= ($generated@@66 $generated@@72 $generated@@159 ($generated@@73 $generated@@160)) (forall (($generated@@161 Int) ) (!  (=> (and (<= 0 $generated@@161) (< $generated@@161 ($generated@@20 $generated@@159))) ($generated@@65 ($generated@@22 $generated@@159 $generated@@161) $generated@@160))
 :pattern ( ($generated@@22 $generated@@159 $generated@@161))
)))
 :pattern ( ($generated@@66 $generated@@72 $generated@@159 ($generated@@73 $generated@@160)))
)))
(assert (forall (($generated@@162 T@U) ) (! ($generated@@66 $generated@@5 $generated@@162 $generated)
 :pattern ( ($generated@@66 $generated@@5 $generated@@162 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () Int)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () Int)
(declare-fun $generated@@170 () Int)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 (T@U T@U) Bool)
(declare-fun $generated@@173 (T@U T@U) Bool)
(declare-fun $generated@@174 (T@U) Bool)
(declare-fun $generated@@175 (T@U) Bool)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@178  (=> (= $generated@@163 ($generated@@86 $generated@@164 $generated@@165 $generated@@2 false)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (and (<= 0 $generated@@166) (< $generated@@166 ($generated@@20 $generated@@167)))) (=> (and (<= 0 $generated@@166) (< $generated@@166 ($generated@@20 $generated@@167))) (=> (= $generated@@168 ($generated@@23 $generated@@167 $generated@@166 ($generated@@47 $generated@@5 ($generated@@9 $generated@@169)))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (and (<= 0 $generated@@170) (<= $generated@@170 ($generated@@20 $generated@@167)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (and (<= 0 $generated@@170) (<= $generated@@170 ($generated@@20 $generated@@168)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($generated@@42 ($generated@@28 $generated@@167 $generated@@170) ($generated@@28 $generated@@168 $generated@@170))) (=> ($generated@@42 ($generated@@28 $generated@@167 $generated@@170) ($generated@@28 $generated@@168 $generated@@170)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 $generated@@170) (<= $generated@@170 ($generated@@20 $generated@@168)))) (=> (= $generated@@171 ($generated@@28 $generated@@168 $generated@@170)) (=> (and (and ($generated@@51 $generated@@72 $generated@@171 ($generated@@73 $generated) $generated@@165) ($generated@@172 $generated ($generated@@28 $generated@@168 $generated@@170))) (and ($generated@@172 $generated ($generated@@28 $generated@@168 $generated@@170)) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@173 $generated ($generated@@28 $generated@@168 $generated@@170)))))))))))))))
(let (($generated@@179  (=> (and ($generated@@174 $generated@@165) ($generated@@175 $generated@@165)) (=> (and (and ($generated@@66 $generated@@72 $generated@@167 ($generated@@73 $generated)) ($generated@@51 $generated@@72 $generated@@167 ($generated@@73 $generated) $generated@@165)) (and (<= ($generated@@35 0) $generated@@166) (<= ($generated@@35 0) $generated@@170))) (=> (and (and (and (and ($generated@@66 $generated@@72 $generated@@176 ($generated@@73 $generated)) ($generated@@51 $generated@@72 $generated@@176 ($generated@@73 $generated) $generated@@165)) true) (= 1 $generated@@177)) (and (and (< $generated@@166 $generated@@170) (<= $generated@@170 ($generated@@20 $generated@@167))) (and ($generated@@173 $generated ($generated@@28 $generated@@167 $generated@@170)) (= (ControlFlow 0 8) 2)))) $generated@@178)))))
$generated@@179)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
