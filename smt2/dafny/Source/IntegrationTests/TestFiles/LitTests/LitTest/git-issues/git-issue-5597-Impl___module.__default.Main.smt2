(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Number () T@U)
(declare-fun Tagclass._module.Integer () T@U)
(declare-fun Tagclass._module.Number? () T@U)
(declare-fun Tagclass._module.Integer? () T@U)
(declare-fun tytagFamily$Number () T@U)
(declare-fun tytagFamily$Integer () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun implements$_module.Number (T@U) Bool)
(declare-fun Tclass._module.Integer? () T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.Number? () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.Number () T@U)
(declare-fun Tclass._module.Integer () T@U)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.DoItWithPlainLet (T@U) T@U)
(declare-fun |_module.__default.DoItWithPlainLet#canCall| (T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.__default.DoItViaFunctionBodyResult (T@U) T@U)
(declare-fun |_module.__default.DoItViaFunctionBodyResult#canCall| (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.__default.DoItWithOptimizedLet (T@U) T@U)
(declare-fun |_module.__default.DoItWithOptimizedLet#canCall| (T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._module.Number Tagclass._module.Integer Tagclass._module.Number? Tagclass._module.Integer? tytagFamily$Number tytagFamily$Integer)
)
(assert (forall ((a T@U) (b T@U) (y T@U) ) (!  (=> (|Set#IsMember| a y) (|Set#IsMember| (|Set#Union| a b) y))
 :pattern ( (|Set#Union| a b) (|Set#IsMember| a y))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@0) (|Set#IsMember| (|Set#Union| a@@0 b@@0) y@@0))
 :pattern ( (|Set#Union| a@@0 b@@0) (|Set#IsMember| b@@0 y@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@1) (not (|Set#IsMember| (|Set#Difference| a@@1 b@@1) y@@1)))
 :pattern ( (|Set#Difference| a@@1 b@@1) (|Set#IsMember| b@@1 y@@1))
)))
(assert (implements$_module.Number Tclass._module.Integer?))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (o@@0 T@U) ) (! (= (|Set#IsMember| (|Set#Intersection| a@@2 b@@2) o@@0)  (and (|Set#IsMember| a@@2 o@@0) (|Set#IsMember| b@@2 o@@0)))
 :pattern ( (|Set#IsMember| (|Set#Intersection| a@@2 b@@2) o@@0))
)))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Integer?)  (or (= $o null) (= (dtype $o) Tclass._module.Integer?)))
 :pattern ( ($Is refType $o Tclass._module.Integer?))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@3 b@@3) b@@3) (|Set#Union| a@@3 b@@3))
 :pattern ( (|Set#Union| (|Set#Union| a@@3 b@@3) b@@3))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|Set#Intersection| (|Set#Intersection| a@@4 b@@4) b@@4) (|Set#Intersection| a@@4 b@@4))
 :pattern ( (|Set#Intersection| (|Set#Intersection| a@@4 b@@4) b@@4))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@5 b@@5) o@@1)  (and (|Set#IsMember| a@@5 o@@1) (not (|Set#IsMember| b@@5 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@5 b@@5) o@@1))
)))
(assert (forall ((bx T@U) ($h T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.Integer? $h) ($IsGoodHeap $h)) ($IsAllocBox bx Tclass._module.Number? $h))
 :pattern ( ($IsAllocBox bx Tclass._module.Integer? $h))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Number $h@@0) ($IsAlloc refType |c#0| Tclass._module.Number? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Number $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Number? $h@@0))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Integer $h@@1) ($IsAlloc refType |c#0@@0| Tclass._module.Integer? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Integer $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Integer? $h@@1))
)))
(assert (forall ((s T@U) ) (!  (and (= (= (|Set#Card| s) 0) (= s |Set#Empty|)) (=> (or (not (= (|Set#Card| s) 0)) (not true)) (exists ((x@@2 T@U) ) (! (|Set#IsMember| s x@@2)
 :pattern ( (|Set#IsMember| s x@@2))
))))
 :pattern ( (|Set#Card| s))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.Number? $h@@2)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.Number? $h@@2))
)))
(assert (forall (($o@@1 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.Integer? $h@@3)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.Integer? $h@@3))
)))
(assert (forall ((a@@6 T@U) (b@@6 T@U) ) (! (= (+ (|Set#Card| (|Set#Union| a@@6 b@@6)) (|Set#Card| (|Set#Intersection| a@@6 b@@6))) (+ (|Set#Card| a@@6) (|Set#Card| b@@6)))
 :pattern ( (|Set#Card| (|Set#Union| a@@6 b@@6)))
 :pattern ( (|Set#Card| (|Set#Intersection| a@@6 b@@6)))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (= (Ctor SetType) 7))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|numbers#0| T@U) ) (!  (=> (or (|_module.__default.DoItWithPlainLet#canCall| |numbers#0|) (and (< 1 $FunctionContextHeight) (and ($Is SetType |numbers#0| (TSet Tclass._module.Number)) (= (|Set#Card| |numbers#0|) (LitInt 0))))) (= (_module.__default.DoItWithPlainLet |numbers#0|) (|Set#Union| |Set#Empty| (let ((|integers11#0| |numbers#0|))
|integers11#0|))))
 :pattern ( (_module.__default.DoItWithPlainLet |numbers#0|))
))))
(assert (forall ((x@@3 Int) ) (! (= (LitInt x@@3) x@@3)
 :pattern ( (LitInt x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|numbers#0@@0| T@U) ) (!  (=> (or (|_module.__default.DoItViaFunctionBodyResult#canCall| |numbers#0@@0|) (and (< 1 $FunctionContextHeight) (and ($Is SetType |numbers#0@@0| (TSet Tclass._module.Number)) (= (|Set#Card| |numbers#0@@0|) (LitInt 0))))) (= (_module.__default.DoItViaFunctionBodyResult |numbers#0@@0|) |numbers#0@@0|))
 :pattern ( (_module.__default.DoItViaFunctionBodyResult |numbers#0@@0|))
))))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (forall ((a@@7 T@U) (b@@7 T@U) ) (! (= (|Set#Disjoint| a@@7 b@@7) (forall ((o@@3 T@U) ) (!  (or (not (|Set#IsMember| a@@7 o@@3)) (not (|Set#IsMember| b@@7 o@@3)))
 :pattern ( (|Set#IsMember| a@@7 o@@3))
 :pattern ( (|Set#IsMember| b@@7 o@@3))
)))
 :pattern ( (|Set#Disjoint| a@@7 b@@7))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@1 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@1 t@@0 h@@1) ($IsAllocBox bx@@1 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@1 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|numbers#0@@1| T@U) ) (!  (=> (or (|_module.__default.DoItWithPlainLet#canCall| |numbers#0@@1|) (and (< 1 $FunctionContextHeight) (and ($Is SetType |numbers#0@@1| (TSet Tclass._module.Number)) (= (|Set#Card| |numbers#0@@1|) (LitInt 0))))) ($Is SetType (_module.__default.DoItWithPlainLet |numbers#0@@1|) (TSet Tclass._module.Integer)))
 :pattern ( (_module.__default.DoItWithPlainLet |numbers#0@@1|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|numbers#0@@2| T@U) ) (!  (=> (or (|_module.__default.DoItWithOptimizedLet#canCall| |numbers#0@@2|) (and (< 1 $FunctionContextHeight) (and ($Is SetType |numbers#0@@2| (TSet Tclass._module.Number)) (= (|Set#Card| |numbers#0@@2|) (LitInt 0))))) ($Is SetType (_module.__default.DoItWithOptimizedLet |numbers#0@@2|) (TSet Tclass._module.Integer)))
 :pattern ( (_module.__default.DoItWithOptimizedLet |numbers#0@@2|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|numbers#0@@3| T@U) ) (!  (=> (or (|_module.__default.DoItViaFunctionBodyResult#canCall| |numbers#0@@3|) (and (< 1 $FunctionContextHeight) (and ($Is SetType |numbers#0@@3| (TSet Tclass._module.Number)) (= (|Set#Card| |numbers#0@@3|) (LitInt 0))))) ($Is SetType (_module.__default.DoItViaFunctionBodyResult |numbers#0@@3|) (TSet Tclass._module.Integer)))
 :pattern ( (_module.__default.DoItViaFunctionBodyResult |numbers#0@@3|))
))))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Number) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.Number)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Number))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.Integer) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.Integer)))
 :pattern ( ($IsBox bx@@3 Tclass._module.Integer))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.Number?) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._module.Number?)))
 :pattern ( ($IsBox bx@@4 Tclass._module.Number?))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._module.Integer?) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._module.Integer?)))
 :pattern ( ($IsBox bx@@5 Tclass._module.Integer?))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|numbers#0@@4| T@U) ) (!  (=> (or (|_module.__default.DoItWithOptimizedLet#canCall| |numbers#0@@4|) (and (< 1 $FunctionContextHeight) (and ($Is SetType |numbers#0@@4| (TSet Tclass._module.Number)) (= (|Set#Card| |numbers#0@@4|) (LitInt 0))))) (= (_module.__default.DoItWithOptimizedLet |numbers#0@@4|) (let ((|integers22#0| |numbers#0@@4|))
|integers22#0|)))
 :pattern ( (_module.__default.DoItWithOptimizedLet |numbers#0@@4|))
))))
(assert (forall ((|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| Tclass._module.Number)  (and ($Is refType |c#0@@1| Tclass._module.Number?) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| Tclass._module.Number))
 :pattern ( ($Is refType |c#0@@1| Tclass._module.Number?))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.Integer)  (and ($Is refType |c#0@@2| Tclass._module.Integer?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Integer))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Integer?))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|numbers#0@@5| T@U) ) (!  (=> (or (|_module.__default.DoItWithPlainLet#canCall| (Lit SetType |numbers#0@@5|)) (and (< 1 $FunctionContextHeight) (and ($Is SetType |numbers#0@@5| (TSet Tclass._module.Number)) (= (|Set#Card| (Lit SetType |numbers#0@@5|)) (LitInt 0))))) (= (_module.__default.DoItWithPlainLet (Lit SetType |numbers#0@@5|)) (|Set#Union| |Set#Empty| (let ((|integers11#1| (Lit SetType |numbers#0@@5|)))
|integers11#1|))))
 :weight 3
 :pattern ( (_module.__default.DoItWithPlainLet (Lit SetType |numbers#0@@5|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|numbers#0@@6| T@U) ) (!  (=> (or (|_module.__default.DoItViaFunctionBodyResult#canCall| (Lit SetType |numbers#0@@6|)) (and (< 1 $FunctionContextHeight) (and ($Is SetType |numbers#0@@6| (TSet Tclass._module.Number)) (= (|Set#Card| (Lit SetType |numbers#0@@6|)) (LitInt 0))))) (= (_module.__default.DoItViaFunctionBodyResult (Lit SetType |numbers#0@@6|)) (Lit SetType |numbers#0@@6|)))
 :weight 3
 :pattern ( (_module.__default.DoItViaFunctionBodyResult (Lit SetType |numbers#0@@6|)))
))))
(assert (forall ((a@@8 T@U) (b@@8 T@U) (o@@4 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@8 b@@8) o@@4)  (or (|Set#IsMember| a@@8 o@@4) (|Set#IsMember| b@@8 o@@4)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@8 b@@8) o@@4))
)))
(assert (forall ((a@@9 T@U) (b@@9 T@U) ) (!  (=> (|Set#Disjoint| a@@9 b@@9) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@9) a@@9) b@@9) (= (|Set#Difference| (|Set#Union| a@@9 b@@9) b@@9) a@@9)))
 :pattern ( (|Set#Union| a@@9 b@@9))
)))
(assert (forall (($o@@2 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@2 Tclass._module.Integer? $heap) ($IsAlloc refType $o@@2 Tclass._module.Number? $heap))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._module.Integer? $heap))
)))
(assert (forall ((a@@10 T@U) (b@@10 T@U) (c T@U) ) (!  (=> (or (not (= a@@10 c)) (not true)) (=> (and ($HeapSucc a@@10 b@@10) ($HeapSucc b@@10 c)) ($HeapSucc a@@10 c)))
 :pattern ( ($HeapSucc a@@10 b@@10) ($HeapSucc b@@10 c))
)))
(assert (forall ((a@@11 T@U) (b@@11 T@U) ) (!  (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@11 b@@11)) (|Set#Card| (|Set#Difference| b@@11 a@@11))) (|Set#Card| (|Set#Intersection| a@@11 b@@11))) (|Set#Card| (|Set#Union| a@@11 b@@11))) (= (|Set#Card| (|Set#Difference| a@@11 b@@11)) (- (|Set#Card| a@@11) (|Set#Card| (|Set#Intersection| a@@11 b@@11)))))
 :pattern ( (|Set#Card| (|Set#Difference| a@@11 b@@11)))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Set#Card| s@@0))
 :pattern ( (|Set#Card| s@@0))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@6 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@6) ($IsAllocBox bx@@6 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@6))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|numbers#0@@7| T@U) ) (!  (=> (or (|_module.__default.DoItWithOptimizedLet#canCall| (Lit SetType |numbers#0@@7|)) (and (< 1 $FunctionContextHeight) (and ($Is SetType |numbers#0@@7| (TSet Tclass._module.Number)) (= (|Set#Card| (Lit SetType |numbers#0@@7|)) (LitInt 0))))) (= (_module.__default.DoItWithOptimizedLet (Lit SetType |numbers#0@@7|)) (let ((|integers22#1| (Lit SetType |numbers#0@@7|)))
|integers22#1|)))
 :weight 3
 :pattern ( (_module.__default.DoItWithOptimizedLet (Lit SetType |numbers#0@@7|)))
))))
(assert (forall ((a@@12 T@U) (b@@12 T@U) ) (! (= (|Set#Union| a@@12 (|Set#Union| a@@12 b@@12)) (|Set#Union| a@@12 b@@12))
 :pattern ( (|Set#Union| a@@12 (|Set#Union| a@@12 b@@12)))
)))
(assert (forall ((a@@13 T@U) (b@@13 T@U) ) (! (= (|Set#Intersection| a@@13 (|Set#Intersection| a@@13 b@@13)) (|Set#Intersection| a@@13 b@@13))
 :pattern ( (|Set#Intersection| a@@13 (|Set#Intersection| a@@13 b@@13)))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(assert (forall ((bx@@7 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@7 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@7)) bx@@7) ($Is SetType ($Unbox SetType bx@@7) (TSet t@@5))))
 :pattern ( ($IsBox bx@@7 (TSet t@@5)))
)))
(assert (forall (($o@@4 T@U) ) (!  (=> ($Is refType $o@@4 Tclass._module.Integer?) ($Is refType $o@@4 Tclass._module.Number?))
 :pattern ( ($Is refType $o@@4 Tclass._module.Integer?))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.Integer?) ($IsBox bx@@8 Tclass._module.Number?))
 :pattern ( ($IsBox bx@@8 Tclass._module.Integer?))
)))
(assert (= (Tag Tclass._module.Number) Tagclass._module.Number))
(assert (= (TagFamily Tclass._module.Number) tytagFamily$Number))
(assert (= (Tag Tclass._module.Integer) Tagclass._module.Integer))
(assert (= (TagFamily Tclass._module.Integer) tytagFamily$Integer))
(assert (= (Tag Tclass._module.Number?) Tagclass._module.Number?))
(assert (= (TagFamily Tclass._module.Number?) tytagFamily$Number))
(assert (= (Tag Tclass._module.Integer?) Tagclass._module.Integer?))
(assert (= (TagFamily Tclass._module.Integer?) tytagFamily$Integer))
(assert (forall (($o@@5 T@U) ) (! (= ($Is refType $o@@5 Tclass._module.Number?)  (or (= $o@@5 null) (implements$_module.Number (dtype $o@@5))))
 :pattern ( ($Is refType $o@@5 Tclass._module.Number?))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (|numbers#0@@8| T@U) ) (!  (=> (and (or (|_module.__default.DoItWithPlainLet#canCall| |numbers#0@@8|) (and (< 1 $FunctionContextHeight) (and (and ($Is SetType |numbers#0@@8| (TSet Tclass._module.Number)) ($IsAlloc SetType |numbers#0@@8| (TSet Tclass._module.Number) $Heap)) (= (|Set#Card| |numbers#0@@8|) (LitInt 0))))) ($IsGoodHeap $Heap)) ($IsAlloc SetType (_module.__default.DoItWithPlainLet |numbers#0@@8|) (TSet Tclass._module.Integer) $Heap))
 :pattern ( ($IsAlloc SetType (_module.__default.DoItWithPlainLet |numbers#0@@8|) (TSet Tclass._module.Integer) $Heap))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|numbers#0@@9| T@U) ) (!  (=> (and (or (|_module.__default.DoItWithOptimizedLet#canCall| |numbers#0@@9|) (and (< 1 $FunctionContextHeight) (and (and ($Is SetType |numbers#0@@9| (TSet Tclass._module.Number)) ($IsAlloc SetType |numbers#0@@9| (TSet Tclass._module.Number) $Heap@@0)) (= (|Set#Card| |numbers#0@@9|) (LitInt 0))))) ($IsGoodHeap $Heap@@0)) ($IsAlloc SetType (_module.__default.DoItWithOptimizedLet |numbers#0@@9|) (TSet Tclass._module.Integer) $Heap@@0))
 :pattern ( ($IsAlloc SetType (_module.__default.DoItWithOptimizedLet |numbers#0@@9|) (TSet Tclass._module.Integer) $Heap@@0))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@1 T@U) (|numbers#0@@10| T@U) ) (!  (=> (and (or (|_module.__default.DoItViaFunctionBodyResult#canCall| |numbers#0@@10|) (and (< 1 $FunctionContextHeight) (and (and ($Is SetType |numbers#0@@10| (TSet Tclass._module.Number)) ($IsAlloc SetType |numbers#0@@10| (TSet Tclass._module.Number) $Heap@@1)) (= (|Set#Card| |numbers#0@@10|) (LitInt 0))))) ($IsGoodHeap $Heap@@1)) ($IsAlloc SetType (_module.__default.DoItViaFunctionBodyResult |numbers#0@@10|) (TSet Tclass._module.Integer) $Heap@@1))
 :pattern ( ($IsAlloc SetType (_module.__default.DoItViaFunctionBodyResult |numbers#0@@10|) (TSet Tclass._module.Integer) $Heap@@1))
))))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@2 () T@U)
(declare-fun |n#0@0| () T@U)
(declare-fun |s#0@0| () T@U)
(declare-fun |call2formal@integers00#0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call2formal@integers00#0@0| () T@U)
(declare-fun |s#0@1| () T@U)
(declare-fun |s#0@2| () T@U)
(declare-fun |n#0| () T@U)
(declare-fun |s#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@2 alloc false)) (= |n#0@0| (Lit SetType |Set#Empty|))) (=> (and (and ($Is SetType |s#0@0| (TSet Tclass._module.Integer)) ($IsAlloc SetType |s#0@0| (TSet Tclass._module.Integer) $Heap@@2)) (and ($Is SetType |call2formal@integers00#0| (TSet Tclass._module.Integer)) ($IsAlloc SetType |call2formal@integers00#0| (TSet Tclass._module.Integer) $Heap@@2))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= (|Set#Card| |n#0@0|) (LitInt 0))) (=> (= (|Set#Card| |n#0@0|) (LitInt 0)) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and ($Is SetType |call2formal@integers00#0@0| (TSet Tclass._module.Integer)) ($IsAlloc SetType |call2formal@integers00#0@0| (TSet Tclass._module.Integer) $Heap@0)) (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6))
))) (and ($HeapSucc $Heap@@2 $Heap@0) ($IsAlloc SetType |n#0@0| (TSet Tclass._module.Number) $Heap@0))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= (|Set#Card| |n#0@0|) (LitInt 0))) (=> (= (|Set#Card| |n#0@0|) (LitInt 0)) (=> (and (and (|_module.__default.DoItWithPlainLet#canCall| |n#0@0|) (|_module.__default.DoItWithPlainLet#canCall| |n#0@0|)) (and (= |s#0@1| (_module.__default.DoItWithPlainLet |n#0@0|)) ($IsAlloc SetType |n#0@0| (TSet Tclass._module.Number) $Heap@0))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= (|Set#Card| |n#0@0|) (LitInt 0))) (=> (and (= (|Set#Card| |n#0@0|) (LitInt 0)) (|_module.__default.DoItWithOptimizedLet#canCall| |n#0@0|)) (=> (and (and (|_module.__default.DoItWithOptimizedLet#canCall| |n#0@0|) (= |s#0@2| (_module.__default.DoItWithOptimizedLet |n#0@0|))) (and ($IsAlloc SetType |n#0@0| (TSet Tclass._module.Number) $Heap@0) (= (ControlFlow 0 2) (- 0 1)))) (= (|Set#Card| |n#0@0|) (LitInt 0))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (=> (and (and ($Is SetType |n#0| (TSet Tclass._module.Number)) ($IsAlloc SetType |n#0| (TSet Tclass._module.Number) $Heap@@2)) true) (=> (and (and (and ($Is SetType |s#0| (TSet Tclass._module.Integer)) ($IsAlloc SetType |s#0| (TSet Tclass._module.Integer) $Heap@@2)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 6) 2))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
