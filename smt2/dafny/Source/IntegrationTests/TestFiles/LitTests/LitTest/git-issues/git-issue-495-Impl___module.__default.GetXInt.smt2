(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@31 (T@T T@U T@U) Bool)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@36 (Int) Int)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@U) T@U)
(declare-fun $generated@@51 (T@U T@U T@U) Bool)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@58 (T@U T@U) Bool)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@77 (T@U) Int)
(declare-fun $generated@@78 (T@U) Int)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@88 () T@T)
(declare-fun $generated@@89 (T@T T@T) T@T)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@T) T@T)
(declare-fun $generated@@93 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! ($generated@@24 $generated@@9 $generated@@26 $generated@@25 $generated@@27)
 :pattern ( ($generated@@24 $generated@@9 $generated@@26 $generated@@25 $generated@@27))
)))
(assert (forall (($generated@@30 T@U) ) (!  (=> ($generated@@28 $generated@@30) ($generated@@29 $generated@@30))
 :pattern ( ($generated@@28 $generated@@30))
)))
(assert (= ($generated@@7 $generated@@32) 3))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> ($generated@@31 $generated@@32 $generated@@35 ($generated@@33 $generated@@34)) ($generated@@29 $generated@@35))
 :pattern ( ($generated@@29 $generated@@35) ($generated@@31 $generated@@32 $generated@@35 ($generated@@33 $generated@@34)))
)))
(assert (forall (($generated@@37 Int) ) (! (= ($generated@@36 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 $generated@@39) $generated@@39)
 :pattern ( ($generated@@38 $generated@@40 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@29 $generated@@42) (= ($generated@@41 $generated@@42) $generated@@4))
 :pattern ( ($generated@@29 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ) (!  (=> ($generated@@29 $generated@@48) (exists (($generated@@49 T@U) ) (= $generated@@48 ($generated@@47 $generated@@49))))
 :pattern ( ($generated@@29 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@31 $generated@@9 $generated@@50 $generated@@25) (<= ($generated@@36 0) ($generated@@14 $generated@@50)))
 :pattern ( ($generated@@31 $generated@@9 $generated@@50 $generated@@25))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@51 ($generated@@44 $generated@@55 $generated@@52) $generated@@53 $generated@@54) ($generated@@24 $generated@@55 $generated@@52 $generated@@53 $generated@@54))
 :pattern ( ($generated@@51 ($generated@@44 $generated@@55 $generated@@52) $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ) (!  (and (= ($generated@@23 ($generated@@33 $generated@@57)) $generated@@3) (= ($generated@@56 ($generated@@33 $generated@@57)) $generated@@6))
 :pattern ( ($generated@@33 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@58 $generated@@59 $generated@@25) (and (= ($generated@@44 $generated@@9 ($generated@@43 $generated@@9 $generated@@59)) $generated@@59) ($generated@@31 $generated@@9 ($generated@@43 $generated@@9 $generated@@59) $generated@@25)))
 :pattern ( ($generated@@58 $generated@@59 $generated@@25))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> ($generated@@60 $generated@@63) (= ($generated@@24 $generated@@32 ($generated@@47 $generated@@62) ($generated@@33 $generated@@61) $generated@@63) ($generated@@51 $generated@@62 $generated@@61 $generated@@63)))
 :pattern ( ($generated@@24 $generated@@32 ($generated@@47 $generated@@62) ($generated@@33 $generated@@61) $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ) (!  (=> ($generated@@58 $generated@@64 $generated) (and (= ($generated@@44 $generated@@9 ($generated@@43 $generated@@9 $generated@@64)) $generated@@64) ($generated@@31 $generated@@9 ($generated@@43 $generated@@9 $generated@@64) $generated)))
 :pattern ( ($generated@@58 $generated@@64 $generated))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@58 ($generated@@44 $generated@@67 $generated@@65) $generated@@66) ($generated@@31 $generated@@67 $generated@@65 $generated@@66))
 :pattern ( ($generated@@58 ($generated@@44 $generated@@67 $generated@@65) $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@68 ($generated@@33 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@33 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@41 ($generated@@47 $generated@@70)) $generated@@4)
 :pattern ( ($generated@@47 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@71 ($generated@@47 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@47 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@43 $generated@@74 ($generated@@44 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@44 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@31 $generated@@32 ($generated@@47 $generated@@76) ($generated@@33 $generated@@75)) ($generated@@58 $generated@@76 $generated@@75))
 :pattern ( ($generated@@31 $generated@@32 ($generated@@47 $generated@@76) ($generated@@33 $generated@@75)))
)))
(assert (forall (($generated@@79 T@U) ) (! (< ($generated@@77 $generated@@79) ($generated@@78 ($generated@@47 $generated@@79)))
 :pattern ( ($generated@@47 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> (and ($generated@@60 $generated@@82) (and ($generated@@29 $generated@@80) ($generated@@24 $generated@@32 $generated@@80 ($generated@@33 $generated@@81) $generated@@82))) ($generated@@51 ($generated@@71 $generated@@80) $generated@@81 $generated@@82))
 :pattern ( ($generated@@51 ($generated@@71 $generated@@80) $generated@@81 $generated@@82))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@83 $generated@@94 $generated@@95 $generated@@96 ($generated@@90 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@99 $generated@@100) $generated@@97)
 :weight 0
)) (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@83 $generated@@101 $generated@@102 $generated@@103 ($generated@@90 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@83 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@83 $generated@@110 $generated@@111 $generated@@112 ($generated@@90 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@83 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)))) (= ($generated@@7 $generated@@84) 4)) (= ($generated@@7 $generated@@85) 5)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@87 $generated@@119 $generated@@120 ($generated@@91 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@121) $generated@@123) $generated@@121)
 :weight 0
))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@128 $generated@@129) (= ($generated@@87 $generated@@124 $generated@@125 ($generated@@91 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@126) $generated@@129) ($generated@@87 $generated@@124 $generated@@125 $generated@@127 $generated@@129)))
 :weight 0
))) (= ($generated@@7 $generated@@88) 6)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (= ($generated@@7 ($generated@@89 $generated@@130 $generated@@131)) 7))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@92 ($generated@@89 $generated@@132 $generated@@133)) $generated@@132)
 :pattern ( ($generated@@89 $generated@@132 $generated@@133))
))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (! (= ($generated@@93 ($generated@@89 $generated@@134 $generated@@135)) $generated@@135)
 :pattern ( ($generated@@89 $generated@@134 $generated@@135))
))))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 Bool) ($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@12 ($generated@@83 $generated@@84 $generated@@85 $generated@@8 ($generated@@86 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))  (=> (and (or (not (= $generated@@140 $generated@@136)) (not true)) ($generated@@12 ($generated@@43 $generated@@8 ($generated@@87 $generated@@85 $generated@@88 ($generated@@87 $generated@@84 ($generated@@89 $generated@@85 $generated@@88) $generated@@137 $generated@@140) $generated@@138)))) $generated@@139))
 :pattern ( ($generated@@83 $generated@@84 $generated@@85 $generated@@8 ($generated@@86 $generated@@136 $generated@@137 $generated@@138 $generated@@139) $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ) (! (= ($generated@@77 ($generated@@44 $generated@@32 $generated@@142)) ($generated@@78 $generated@@142))
 :pattern ( ($generated@@77 ($generated@@44 $generated@@32 $generated@@142)))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> ($generated@@58 $generated@@144 ($generated@@33 $generated@@143)) (and (= ($generated@@44 $generated@@32 ($generated@@43 $generated@@32 $generated@@144)) $generated@@144) ($generated@@31 $generated@@32 ($generated@@43 $generated@@32 $generated@@144) ($generated@@33 $generated@@143))))
 :pattern ( ($generated@@58 $generated@@144 ($generated@@33 $generated@@143)))
)))
(assert (= ($generated@@23 $generated@@25) $generated@@2))
(assert (= ($generated@@56 $generated@@25) $generated@@5))
(assert (forall (($generated@@145 Int) ) (! (= ($generated@@44 $generated@@9 ($generated@@13 ($generated@@36 $generated@@145))) ($generated@@38 $generated@@88 ($generated@@44 $generated@@9 ($generated@@13 $generated@@145))))
 :pattern ( ($generated@@44 $generated@@9 ($generated@@13 ($generated@@36 $generated@@145))))
)))
(assert (forall (($generated@@146 T@U) ) (! (= ($generated@@47 ($generated@@38 $generated@@88 $generated@@146)) ($generated@@38 $generated@@32 ($generated@@47 $generated@@146)))
 :pattern ( ($generated@@47 ($generated@@38 $generated@@88 $generated@@146)))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@T) ) (! (= ($generated@@44 $generated@@148 ($generated@@38 $generated@@148 $generated@@147)) ($generated@@38 $generated@@88 ($generated@@44 $generated@@148 $generated@@147)))
 :pattern ( ($generated@@44 $generated@@148 ($generated@@38 $generated@@148 $generated@@147)))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (! ($generated@@24 $generated@@9 $generated@@150 $generated $generated@@149)
 :pattern ( ($generated@@24 $generated@@9 $generated@@150 $generated $generated@@149))
)))
(assert (forall (($generated@@151 T@U) ) (! ($generated@@31 $generated@@9 $generated@@151 $generated)
 :pattern ( ($generated@@31 $generated@@9 $generated@@151 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () Int)
(declare-fun $generated@@154 () Int)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 (T@U) Bool)
(declare-fun $generated@@159 () Int)
(declare-fun $generated@@160 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@161 true))
(let (($generated@@162  (=> (= $generated@@152 ($generated@@47 ($generated@@44 $generated@@9 ($generated@@13 $generated@@153)))) (=> (and (<= ($generated@@36 0) $generated@@154) (= (ControlFlow 0 2) (- 0 1))) ($generated@@31 $generated@@9 ($generated@@13 $generated@@153) $generated@@25)))))
(let (($generated@@163  (=> (= $generated@@155 ($generated@@86 $generated@@156 $generated@@157 $generated@@1 false)) (and (=> (= (ControlFlow 0 4) 2) $generated@@162) (=> (= (ControlFlow 0 4) 3) $generated@@161)))))
(let (($generated@@164  (=> (and ($generated@@60 $generated@@157) ($generated@@158 $generated@@157)) (=> (and (and (and (and ($generated@@31 $generated@@32 $generated@@152 ($generated@@33 $generated)) ($generated@@24 $generated@@32 $generated@@152 ($generated@@33 $generated) $generated@@157)) ($generated@@28 $generated@@152)) (<= ($generated@@36 0) $generated@@159)) (and (= 1 $generated@@160) (= (ControlFlow 0 5) 4))) $generated@@163))))
$generated@@164)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
