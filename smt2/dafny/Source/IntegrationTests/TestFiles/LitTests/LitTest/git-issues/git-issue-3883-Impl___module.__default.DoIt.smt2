(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@26 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@T T@T) T@T)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@33 (T@T) T@T)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@55 (Int) Int)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@U T@U) T@U)
(declare-fun $generated@@66 (T@U T@U) Bool)
(declare-fun $generated@@67 (T@U T@U) Bool)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@80 (T@U T@U) T@U)
(declare-fun $generated@@81 (T@U) T@U)
(declare-fun $generated@@84 (T@U) T@U)
(declare-fun $generated@@87 (T@U T@U) T@U)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@91 (T@U) T@U)
(declare-fun $generated@@96 () T@U)
(declare-fun $generated@@98 (Int) T@U)
(declare-fun $generated@@99 (T@U) Int)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@103 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@135 (Int Int) Int)
(declare-fun $generated@@138 (T@U) T@U)
(declare-fun $generated@@139 (T@U) T@U)
(declare-fun $generated@@142 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@23 $generated@@24) 0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@35 T@T) ($generated@@36 T@T) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@26 $generated@@35 $generated@@36 ($generated@@32 $generated@@35 $generated@@36 $generated@@38 $generated@@39 $generated@@37) $generated@@39) $generated@@37)
 :weight 0
)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (!  (or (= $generated@@44 $generated@@45) (= ($generated@@26 $generated@@40 $generated@@41 ($generated@@32 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@45) ($generated@@26 $generated@@40 $generated@@41 $generated@@43 $generated@@45)))
 :weight 0
))) (= ($generated@@6 $generated@@27) 3)) (= ($generated@@6 $generated@@28) 4)) (= ($generated@@6 $generated@@29) 5)) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (= ($generated@@6 ($generated@@30 $generated@@46 $generated@@47)) 6))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@33 ($generated@@30 $generated@@48 $generated@@49)) $generated@@48)
 :pattern ( ($generated@@30 $generated@@48 $generated@@49))
))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@34 ($generated@@30 $generated@@50 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@30 $generated@@50 $generated@@51))
))))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> ($generated@@25 $generated@@52 $generated@@53) (forall (($generated@@54 T@U) ) (!  (=> ($generated@@11 ($generated@@31 $generated@@7 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@52 $generated@@54) $generated@@1))) ($generated@@11 ($generated@@31 $generated@@7 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@53 $generated@@54) $generated@@1))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@53 $generated@@54) $generated@@1))
)))
 :pattern ( ($generated@@25 $generated@@52 $generated@@53))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@55 $generated@@56) $generated@@56)
 :pattern ( ($generated@@55 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 $generated@@58) $generated@@58)
 :pattern ( ($generated@@57 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 ($generated@@31 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@31 $generated@@62 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@23 ($generated@@63 $generated@@64 $generated@@65)) (+ 1 ($generated@@23 $generated@@64)))
 :pattern ( ($generated@@63 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@66 $generated@@70 $generated@@71)  (and (forall (($generated@@72 T@U) ) (= ($generated@@67 ($generated@@68 $generated@@70) $generated@@72) ($generated@@67 ($generated@@68 $generated@@71) $generated@@72))) (forall (($generated@@73 T@U) )  (=> ($generated@@67 ($generated@@68 $generated@@70) $generated@@73) (= ($generated@@26 $generated@@28 $generated@@28 ($generated@@69 $generated@@70) $generated@@73) ($generated@@26 $generated@@28 $generated@@28 ($generated@@69 $generated@@71) $generated@@73))))))
 :pattern ( ($generated@@66 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> ($generated@@66 $generated@@74 $generated@@75) (= $generated@@74 $generated@@75))
 :pattern ( ($generated@@66 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (=> (or (not (= $generated@@76 $generated@@78)) (not true)) (=> (and ($generated@@25 $generated@@76 $generated@@77) ($generated@@25 $generated@@77 $generated@@78)) ($generated@@25 $generated@@76 $generated@@78)))
 :pattern ( ($generated@@25 $generated@@76 $generated@@77) ($generated@@25 $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ) (! (<= 0 ($generated@@23 $generated@@79))
 :pattern ( ($generated@@23 $generated@@79))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@81 ($generated@@80 $generated@@82 $generated@@83)) $generated@@82)
 :pattern ( ($generated@@80 $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@84 ($generated@@80 $generated@@85 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@80 $generated@@85 $generated@@86))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@88 ($generated@@87 $generated@@89 $generated@@90)) $generated@@89)
 :pattern ( ($generated@@87 $generated@@89 $generated@@90))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@91 ($generated@@87 $generated@@92 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@87 $generated@@92 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@31 $generated@@95 ($generated@@60 $generated@@95 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@60 $generated@@95 $generated@@94))
)))
(assert (forall (($generated@@97 T@U) ) (!  (not ($generated@@67 ($generated@@68 $generated@@96) $generated@@97))
 :pattern ( ($generated@@67 ($generated@@68 $generated@@96) $generated@@97))
)))
(assert (forall (($generated@@100 Int) ) (!  (=> (or (and (<= 0 $generated@@100) (< $generated@@100 55296)) (and (<= 57344 $generated@@100) (< $generated@@100 1114112))) (= ($generated@@99 ($generated@@98 $generated@@100)) $generated@@100))
 :pattern ( ($generated@@98 $generated@@100))
)))
(assert  (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@101 $generated@@104 $generated@@105 $generated@@106 ($generated@@103 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@109 $generated@@110) $generated@@107)
 :weight 0
)) (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@101 $generated@@111 $generated@@112 $generated@@113 ($generated@@103 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@101 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@101 $generated@@120 $generated@@121 $generated@@122 ($generated@@103 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@101 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@11 ($generated@@101 $generated@@29 $generated@@27 $generated@@7 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@11 ($generated@@31 $generated@@7 ($generated@@26 $generated@@27 $generated@@28 ($generated@@26 $generated@@29 ($generated@@30 $generated@@27 $generated@@28) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@101 $generated@@29 $generated@@27 $generated@@7 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@136 Int) ($generated@@137 Int) ) (! (= ($generated@@135 $generated@@136 $generated@@137) (mod $generated@@136 $generated@@137))
 :pattern ( ($generated@@135 $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (and (= ($generated@@138 ($generated@@63 $generated@@140 $generated@@141)) $generated@@140) (= ($generated@@139 ($generated@@63 $generated@@140 $generated@@141)) $generated@@141))
 :pattern ( ($generated@@63 $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (and (= ($generated@@22 ($generated@@80 $generated@@143 $generated@@144)) $generated@@2) (= ($generated@@142 ($generated@@80 $generated@@143 $generated@@144)) $generated@@4))
 :pattern ( ($generated@@80 $generated@@143 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (!  (and (= ($generated@@22 ($generated@@87 $generated@@145 $generated@@146)) $generated@@3) (= ($generated@@142 ($generated@@87 $generated@@145 $generated@@146)) $generated@@5))
 :pattern ( ($generated@@87 $generated@@145 $generated@@146))
)))
(assert (forall (($generated@@147 T@U) ) (!  (or (= $generated@@147 $generated@@96) (exists (($generated@@148 T@U) ) ($generated@@67 ($generated@@68 $generated@@147) $generated@@148)))
 :pattern ( ($generated@@68 $generated@@147))
)))
(assert (forall (($generated@@149 T@U) ) (!  (and (= ($generated@@98 ($generated@@99 $generated@@149)) $generated@@149) (or (and (<= 0 ($generated@@99 $generated@@149)) (< ($generated@@99 $generated@@149) 55296)) (and (<= 57344 ($generated@@99 $generated@@149)) (< ($generated@@99 $generated@@149) 1114112))))
 :pattern ( ($generated@@99 $generated@@149))
)))
(assert (forall (($generated@@150 Int) ) (! (= ($generated@@60 $generated@@8 ($generated@@12 ($generated@@55 $generated@@150))) ($generated@@57 $generated@@28 ($generated@@60 $generated@@8 ($generated@@12 $generated@@150))))
 :pattern ( ($generated@@60 $generated@@8 ($generated@@12 ($generated@@55 $generated@@150))))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@T) ) (! (= ($generated@@60 $generated@@152 ($generated@@57 $generated@@152 $generated@@151)) ($generated@@57 $generated@@28 ($generated@@60 $generated@@152 $generated@@151)))
 :pattern ( ($generated@@60 $generated@@152 ($generated@@57 $generated@@152 $generated@@151)))
)))
(assert (forall (($generated@@153 T@U) ) (!  (=> (= ($generated@@23 $generated@@153) 0) (= $generated@@153 $generated@@24))
 :pattern ( ($generated@@23 $generated@@153))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
