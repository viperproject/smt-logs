(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@U) Bool)
(declare-fun $generated@@31 (Int) Int)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 (Int) Bool)
(declare-fun $generated@@35 (Int) Bool)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@55 (T@U) Bool)
(declare-fun $generated@@56 (T@U) Bool)
(declare-fun $generated@@57 (T@U) Bool)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@68 (T@U T@U T@U) Bool)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@86 (T@U T@U) Bool)
(declare-fun $generated@@91 (T@U) T@U)
(declare-fun $generated@@99 (T@U) Int)
(declare-fun $generated@@100 (T@U) Int)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 () T@T)
(declare-fun $generated@@107 () T@T)
(declare-fun $generated@@108 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@109 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@110 () T@T)
(declare-fun $generated@@111 (T@T T@T) T@T)
(declare-fun $generated@@112 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@113 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@114 (T@T) T@T)
(declare-fun $generated@@115 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@6 $generated@@26) 3))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@36 T@U) ) (!  (=> (or ($generated@@27 ($generated@@25 $generated@@26 $generated@@36)) (and (< 1 $generated@@23) ($generated@@28 $generated@@26 $generated@@36 ($generated@@29 $generated)))) (and (=> ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10 ($generated@@30 ($generated@@25 $generated@@26 $generated@@36))))) (let (($generated@@37 ($generated@@31 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 ($generated@@25 $generated@@26 $generated@@36)))))))
($generated@@34 $generated@@37))) (= ($generated@@24 ($generated@@25 $generated@@26 $generated@@36)) (ite ($generated@@30 ($generated@@25 $generated@@26 $generated@@36)) ($generated@@11 (let (($generated@@38 ($generated@@31 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 ($generated@@25 $generated@@26 $generated@@36)))))))
($generated@@25 $generated@@7 ($generated@@10 ($generated@@35 $generated@@38))))) true))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@25 $generated@@26 $generated@@36)))
))))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@41 T@U) ) (!  (=> (or ($generated@@40 ($generated@@25 $generated@@26 $generated@@41)) (and (< 1 $generated@@23) ($generated@@28 $generated@@26 $generated@@41 ($generated@@29 $generated)))) (and (=> ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10 ($generated@@30 ($generated@@25 $generated@@26 $generated@@41))))) (let (($generated@@42 ($generated@@31 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 ($generated@@25 $generated@@26 $generated@@41)))))))
($generated@@34 $generated@@42))) (= ($generated@@39 ($generated@@25 $generated@@26 $generated@@41)) (ite ($generated@@30 ($generated@@25 $generated@@26 $generated@@41)) ($generated@@11 (let (($generated@@43 ($generated@@31 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 ($generated@@25 $generated@@26 $generated@@41)))))))
($generated@@25 $generated@@7 ($generated@@10 ($generated@@35 $generated@@43))))) true))))
 :weight 3
 :pattern ( ($generated@@39 ($generated@@25 $generated@@26 $generated@@41)))
))))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@44 Int) ) (!  (=> (or ($generated@@34 ($generated@@31 $generated@@44)) (< 0 $generated@@23)) (= ($generated@@35 ($generated@@31 $generated@@44))  (and (<= ($generated@@31 0) ($generated@@31 $generated@@44)) (or (not (= $generated@@44 5)) (not true)))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@31 $generated@@44)))
))))
(assert (= ($generated@@45 $generated@@46) $generated@@4))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> ($generated@@48 $generated@@50) ($generated@@47 $generated@@26 $generated@@46 ($generated@@29 $generated@@49) $generated@@50))
 :pattern ( ($generated@@47 $generated@@26 $generated@@46 ($generated@@29 $generated@@49) $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ) (! ($generated@@28 $generated@@26 $generated@@46 ($generated@@29 $generated@@51))
 :pattern ( ($generated@@28 $generated@@26 $generated@@46 ($generated@@29 $generated@@51)))
)))
(assert (forall (($generated@@52 Int) ) (! (= ($generated@@31 $generated@@52) $generated@@52)
 :pattern ( ($generated@@31 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@25 $generated@@54 $generated@@53) $generated@@53)
 :pattern ( ($generated@@25 $generated@@54 $generated@@53))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@58 T@U) ) (!  (=> (or ($generated@@56 $generated@@58) (and (< 1 $generated@@23) ($generated@@28 $generated@@26 $generated@@58 ($generated@@29 $generated)))) (and (=> ($generated@@30 $generated@@58) ($generated@@34 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@58))))) (= ($generated@@55 $generated@@58)  (and (=> ($generated@@30 $generated@@58) ($generated@@35 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@58))))) (=> ($generated@@57 $generated@@58) true)))))
 :pattern ( ($generated@@55 $generated@@58))
))))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@30 $generated@@59) (= ($generated@@45 $generated@@59) $generated@@3))
 :pattern ( ($generated@@30 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@57 $generated@@60) (= ($generated@@45 $generated@@60) $generated@@4))
 :pattern ( ($generated@@57 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@61 $generated@@63 ($generated@@32 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@32 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ) (!  (=> ($generated@@57 $generated@@64) (= $generated@@64 $generated@@46))
 :pattern ( ($generated@@57 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@30 $generated@@66) (exists (($generated@@67 T@U) ) (= $generated@@66 ($generated@@65 $generated@@67))))
 :pattern ( ($generated@@30 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@68 ($generated@@61 $generated@@72 $generated@@69) $generated@@70 $generated@@71) ($generated@@47 $generated@@72 $generated@@69 $generated@@70 $generated@@71))
 :pattern ( ($generated@@68 ($generated@@61 $generated@@72 $generated@@69) $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (!  (and (= ($generated@@22 ($generated@@29 $generated@@74)) $generated@@2) (= ($generated@@73 ($generated@@29 $generated@@74)) $generated@@5))
 :pattern ( ($generated@@29 $generated@@74))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@75 T@U) ) (!  (=> (or ($generated@@27 $generated@@75) (and (< 1 $generated@@23) ($generated@@28 $generated@@26 $generated@@75 ($generated@@29 $generated)))) (and (=> ($generated@@30 $generated@@75) (let (($generated@@76 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@75)))))
($generated@@34 $generated@@76))) (= ($generated@@24 $generated@@75) (ite ($generated@@30 $generated@@75) (let (($generated@@77 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@75)))))
($generated@@35 $generated@@77)) true))))
 :pattern ( ($generated@@24 $generated@@75))
))))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@78 T@U) ) (!  (=> (or ($generated@@40 $generated@@78) (and (< 1 $generated@@23) ($generated@@28 $generated@@26 $generated@@78 ($generated@@29 $generated)))) (and (=> ($generated@@30 $generated@@78) (let (($generated@@79 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@78)))))
($generated@@34 $generated@@79))) (= ($generated@@39 $generated@@78) (ite ($generated@@30 $generated@@78) (let (($generated@@80 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@78)))))
($generated@@35 $generated@@80)) true))))
 :pattern ( ($generated@@39 $generated@@78))
))))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> ($generated@@48 $generated@@83) (= ($generated@@47 $generated@@26 ($generated@@65 $generated@@82) ($generated@@29 $generated@@81) $generated@@83) ($generated@@68 $generated@@82 $generated@@81 $generated@@83)))
 :pattern ( ($generated@@47 $generated@@26 ($generated@@65 $generated@@82) ($generated@@29 $generated@@81) $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> ($generated@@28 $generated@@26 $generated@@85 ($generated@@29 $generated@@84)) (or ($generated@@30 $generated@@85) ($generated@@57 $generated@@85)))
 :pattern ( ($generated@@57 $generated@@85) ($generated@@28 $generated@@26 $generated@@85 ($generated@@29 $generated@@84)))
 :pattern ( ($generated@@30 $generated@@85) ($generated@@28 $generated@@26 $generated@@85 ($generated@@29 $generated@@84)))
)))
(assert (forall (($generated@@87 T@U) ) (!  (=> ($generated@@86 $generated@@87 $generated) (and (= ($generated@@61 $generated@@8 ($generated@@32 $generated@@8 $generated@@87)) $generated@@87) ($generated@@28 $generated@@8 ($generated@@32 $generated@@8 $generated@@87) $generated)))
 :pattern ( ($generated@@86 $generated@@87 $generated))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@86 ($generated@@61 $generated@@90 $generated@@88) $generated@@89) ($generated@@28 $generated@@90 $generated@@88 $generated@@89))
 :pattern ( ($generated@@86 ($generated@@61 $generated@@90 $generated@@88) $generated@@89))
)))
(assert (forall (($generated@@92 T@U) ) (! (= ($generated@@91 ($generated@@29 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@29 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@45 ($generated@@65 $generated@@93)) $generated@@3)
 :pattern ( ($generated@@65 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@33 ($generated@@65 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@65 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@32 $generated@@96 ($generated@@61 $generated@@96 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@61 $generated@@96 $generated@@95))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@28 $generated@@26 ($generated@@65 $generated@@98) ($generated@@29 $generated@@97)) ($generated@@86 $generated@@98 $generated@@97))
 :pattern ( ($generated@@28 $generated@@26 ($generated@@65 $generated@@98) ($generated@@29 $generated@@97)))
)))
(assert (forall (($generated@@101 T@U) ) (! (< ($generated@@99 $generated@@101) ($generated@@100 ($generated@@65 $generated@@101)))
 :pattern ( ($generated@@65 $generated@@101))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and ($generated@@48 $generated@@104) (and ($generated@@30 $generated@@102) ($generated@@47 $generated@@26 $generated@@102 ($generated@@29 $generated@@103) $generated@@104))) ($generated@@68 ($generated@@33 $generated@@102) $generated@@103 $generated@@104))
 :pattern ( ($generated@@68 ($generated@@33 $generated@@102) $generated@@103 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@105 $generated@@116 $generated@@117 $generated@@118 ($generated@@112 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@121 $generated@@122) $generated@@119)
 :weight 0
)) (and (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@128 $generated@@130) (= ($generated@@105 $generated@@123 $generated@@124 $generated@@125 ($generated@@112 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@129 $generated@@126) $generated@@130 $generated@@131) ($generated@@105 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@130 $generated@@131)))
 :weight 0
)) (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@138 $generated@@140) (= ($generated@@105 $generated@@132 $generated@@133 $generated@@134 ($generated@@112 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@138 $generated@@135) $generated@@139 $generated@@140) ($generated@@105 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@139 $generated@@140)))
 :weight 0
)))) (= ($generated@@6 $generated@@106) 4)) (= ($generated@@6 $generated@@107) 5)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@109 $generated@@141 $generated@@142 ($generated@@113 $generated@@141 $generated@@142 $generated@@144 $generated@@145 $generated@@143) $generated@@145) $generated@@143)
 :weight 0
))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ) (!  (or (= $generated@@150 $generated@@151) (= ($generated@@109 $generated@@146 $generated@@147 ($generated@@113 $generated@@146 $generated@@147 $generated@@149 $generated@@150 $generated@@148) $generated@@151) ($generated@@109 $generated@@146 $generated@@147 $generated@@149 $generated@@151)))
 :weight 0
))) (= ($generated@@6 $generated@@110) 6)) (forall (($generated@@152 T@T) ($generated@@153 T@T) ) (= ($generated@@6 ($generated@@111 $generated@@152 $generated@@153)) 7))) (forall (($generated@@154 T@T) ($generated@@155 T@T) ) (! (= ($generated@@114 ($generated@@111 $generated@@154 $generated@@155)) $generated@@154)
 :pattern ( ($generated@@111 $generated@@154 $generated@@155))
))) (forall (($generated@@156 T@T) ($generated@@157 T@T) ) (! (= ($generated@@115 ($generated@@111 $generated@@156 $generated@@157)) $generated@@157)
 :pattern ( ($generated@@111 $generated@@156 $generated@@157))
))))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 Bool) ($generated@@162 T@U) ($generated@@163 T@U) ) (! (= ($generated@@11 ($generated@@105 $generated@@106 $generated@@107 $generated@@7 ($generated@@108 $generated@@158 $generated@@159 $generated@@160 $generated@@161) $generated@@162 $generated@@163))  (=> (and (or (not (= $generated@@162 $generated@@158)) (not true)) ($generated@@11 ($generated@@32 $generated@@7 ($generated@@109 $generated@@107 $generated@@110 ($generated@@109 $generated@@106 ($generated@@111 $generated@@107 $generated@@110) $generated@@159 $generated@@162) $generated@@160)))) $generated@@161))
 :pattern ( ($generated@@105 $generated@@106 $generated@@107 $generated@@7 ($generated@@108 $generated@@158 $generated@@159 $generated@@160 $generated@@161) $generated@@162 $generated@@163))
)))
(assert (forall (($generated@@164 T@U) ) (! (= ($generated@@99 ($generated@@61 $generated@@26 $generated@@164)) ($generated@@100 $generated@@164))
 :pattern ( ($generated@@99 ($generated@@61 $generated@@26 $generated@@164)))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (!  (=> ($generated@@86 $generated@@166 ($generated@@29 $generated@@165)) (and (= ($generated@@61 $generated@@26 ($generated@@32 $generated@@26 $generated@@166)) $generated@@166) ($generated@@28 $generated@@26 ($generated@@32 $generated@@26 $generated@@166) ($generated@@29 $generated@@165))))
 :pattern ( ($generated@@86 $generated@@166 ($generated@@29 $generated@@165)))
)))
(assert (= $generated@@46 ($generated@@25 $generated@@26 $generated@@46)))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@167 Int) ) (!  (=> (or ($generated@@34 $generated@@167) (< 0 $generated@@23)) (= ($generated@@35 $generated@@167)  (and (<= ($generated@@31 0) $generated@@167) (or (not (= $generated@@167 5)) (not true)))))
 :pattern ( ($generated@@35 $generated@@167))
))))
(assert (forall (($generated@@168 Int) ) (! (= ($generated@@61 $generated@@8 ($generated@@12 ($generated@@31 $generated@@168))) ($generated@@25 $generated@@110 ($generated@@61 $generated@@8 ($generated@@12 $generated@@168))))
 :pattern ( ($generated@@61 $generated@@8 ($generated@@12 ($generated@@31 $generated@@168))))
)))
(assert (forall (($generated@@169 T@U) ) (! (= ($generated@@65 ($generated@@25 $generated@@110 $generated@@169)) ($generated@@25 $generated@@26 ($generated@@65 $generated@@169)))
 :pattern ( ($generated@@65 ($generated@@25 $generated@@110 $generated@@169)))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@T) ) (! (= ($generated@@61 $generated@@171 ($generated@@25 $generated@@171 $generated@@170)) ($generated@@25 $generated@@110 ($generated@@61 $generated@@171 $generated@@170)))
 :pattern ( ($generated@@61 $generated@@171 ($generated@@25 $generated@@171 $generated@@170)))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@172 T@U) ) (!  (=> (or ($generated@@56 ($generated@@25 $generated@@26 $generated@@172)) (and (< 1 $generated@@23) ($generated@@28 $generated@@26 $generated@@172 ($generated@@29 $generated)))) (and (=> ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10 ($generated@@30 ($generated@@25 $generated@@26 $generated@@172))))) ($generated@@34 ($generated@@31 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 ($generated@@25 $generated@@26 $generated@@172))))))) (= ($generated@@55 ($generated@@25 $generated@@26 $generated@@172)) ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10  (and (=> ($generated@@30 ($generated@@25 $generated@@26 $generated@@172)) ($generated@@35 ($generated@@31 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 ($generated@@25 $generated@@26 $generated@@172))))))) (=> ($generated@@57 ($generated@@25 $generated@@26 $generated@@172)) true))))))))
 :weight 3
 :pattern ( ($generated@@55 ($generated@@25 $generated@@26 $generated@@172)))
))))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@U) ) (! ($generated@@47 $generated@@8 $generated@@174 $generated $generated@@173)
 :pattern ( ($generated@@47 $generated@@8 $generated@@174 $generated $generated@@173))
)))
(assert (forall (($generated@@175 T@U) ) (! ($generated@@28 $generated@@8 $generated@@175 $generated)
 :pattern ( ($generated@@28 $generated@@8 $generated@@175 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 (T@U) Bool)
(declare-fun $generated@@181 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@182  (=> (and (and (and (not ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10 true)))) (not ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10 true))))) (not ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10 true))))) (= (ControlFlow 0 14) (- 0 13))) false)))
(let (($generated@@183  (=> ($generated@@47 $generated@@26 $generated@@176 ($generated@@29 $generated) $generated@@177) (=> (and ($generated@@40 $generated@@176) ($generated@@40 $generated@@176)) (and (=> (= (ControlFlow 0 10) (- 0 12)) (=> ($generated@@40 $generated@@176) (or ($generated@@39 $generated@@176) (=> ($generated@@30 $generated@@176) (let (($generated@@184 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176)))))
 (=> ($generated@@34 $generated@@184) (or ($generated@@35 $generated@@184) (<= ($generated@@31 0) $generated@@184)))))))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (=> ($generated@@40 $generated@@176) (or ($generated@@39 $generated@@176) (=> ($generated@@30 $generated@@176) (let (($generated@@185 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176)))))
 (=> ($generated@@34 $generated@@185) (or ($generated@@35 $generated@@185) (or (not (= $generated@@185 5)) (not true))))))))) (=> (= (ControlFlow 0 10) (- 0 9)) (=> ($generated@@40 $generated@@176) (or ($generated@@39 $generated@@176) (=> (not ($generated@@30 $generated@@176)) ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10 true)))))))))))))
(let (($generated@@186  (=> ($generated@@47 $generated@@26 $generated@@176 ($generated@@29 $generated) $generated@@177) (=> (and ($generated@@27 $generated@@176) ($generated@@27 $generated@@176)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (=> ($generated@@27 $generated@@176) (or ($generated@@24 $generated@@176) (=> ($generated@@30 $generated@@176) (let (($generated@@187 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176)))))
 (=> ($generated@@34 $generated@@187) (or ($generated@@35 $generated@@187) (<= ($generated@@31 0) $generated@@187)))))))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> ($generated@@27 $generated@@176) (or ($generated@@24 $generated@@176) (=> ($generated@@30 $generated@@176) (let (($generated@@188 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176)))))
 (=> ($generated@@34 $generated@@188) (or ($generated@@35 $generated@@188) (or (not (= $generated@@188 5)) (not true))))))))) (=> (= (ControlFlow 0 6) (- 0 5)) (=> ($generated@@27 $generated@@176) (or ($generated@@24 $generated@@176) (=> (not ($generated@@30 $generated@@176)) ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10 true)))))))))))))
(let (($generated@@189  (=> ($generated@@47 $generated@@26 $generated@@176 ($generated@@29 $generated) $generated@@177) (=> (and ($generated@@56 $generated@@176) ($generated@@56 $generated@@176)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> ($generated@@56 $generated@@176) (or ($generated@@55 $generated@@176) (=> ($generated@@30 $generated@@176) (=> ($generated@@34 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176)))) (or ($generated@@35 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176)))) (<= ($generated@@31 0) ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176)))))))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@56 $generated@@176) (or ($generated@@55 $generated@@176) (=> ($generated@@30 $generated@@176) (=> ($generated@@34 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176)))) (or ($generated@@35 ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176)))) (or (not (= ($generated@@13 ($generated@@32 $generated@@8 ($generated@@33 $generated@@176))) 5)) (not true)))))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@56 $generated@@176) (or ($generated@@55 $generated@@176) (=> ($generated@@57 $generated@@176) ($generated@@11 ($generated@@25 $generated@@7 ($generated@@10 true)))))))))))))
(let (($generated@@190  (=> (and (= $generated@@178 ($generated@@108 $generated@@179 $generated@@177 $generated@@1 false)) (= $generated@@176 ($generated@@25 $generated@@26 ($generated@@65 ($generated@@61 $generated@@8 ($generated@@12 ($generated@@31 5))))))) (and (and (and (=> (= (ControlFlow 0 15) 2) $generated@@189) (=> (= (ControlFlow 0 15) 6) $generated@@186)) (=> (= (ControlFlow 0 15) 10) $generated@@183)) (=> (= (ControlFlow 0 15) 14) $generated@@182)))))
(let (($generated@@191  (=> (and ($generated@@48 $generated@@177) ($generated@@180 $generated@@177)) (=> (and (and (and ($generated@@28 $generated@@26 $generated@@181 ($generated@@29 $generated)) ($generated@@47 $generated@@26 $generated@@181 ($generated@@29 $generated) $generated@@177)) true) (and (= 2 $generated@@23) (= (ControlFlow 0 16) 15))) $generated@@190))))
$generated@@191)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 10) (- 11))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 7))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
