(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) Int)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@31 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () Int)
(declare-fun $generated@@34 (T@U Bool T@U) Bool)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@36 (T@U T@U) Bool)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (Int) Int)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@46 (T@U) Bool)
(declare-fun $generated@@48 (T@U T@U) Bool)
(declare-fun $generated@@49 (T@U Int) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@64 (T@U T@U T@U) Bool)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@70 (T@U) T@U)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 (T@U) T@U)
(declare-fun $generated@@89 (T@U) T@U)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@95 (T@U) T@U)
(declare-fun $generated@@101 (T@U) Int)
(declare-fun $generated@@102 (T@U) Int)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@108 () T@T)
(declare-fun $generated@@109 () T@T)
(declare-fun $generated@@110 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@111 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@112 (T@T T@T) T@T)
(declare-fun $generated@@113 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@114 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@115 (T@T) T@T)
(declare-fun $generated@@116 (T@T) T@T)
(declare-fun $generated@@178 (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated@@22) 0))
(assert (= ($generated@@23 $generated@@24) $generated@@2))
(assert (= ($generated@@5 $generated@@26) 3))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (!  (=> ($generated@@28 $generated@@30) ($generated@@25 $generated@@26 $generated@@24 ($generated@@27 $generated@@29) $generated@@30))
 :pattern ( ($generated@@25 $generated@@26 $generated@@24 ($generated@@27 $generated@@29) $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ) (! ($generated@@31 $generated@@26 $generated@@24 ($generated@@27 $generated@@32))
 :pattern ( ($generated@@31 $generated@@26 $generated@@24 ($generated@@27 $generated@@32)))
)))
(assert  (=> (<= 0 $generated@@33) (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> (or ($generated@@35 $generated@@38 $generated@@39) (and (< 0 $generated@@33) ($generated@@36 $generated@@39 $generated@@38))) (= ($generated@@34 $generated@@38 true $generated@@39) ($generated@@10 ($generated@@37 $generated@@6 ($generated@@9 true)))))
 :pattern ( ($generated@@34 $generated@@38 true $generated@@39))
))))
(assert (forall (($generated@@41 Int) ) (! (= ($generated@@40 $generated@@41) $generated@@41)
 :pattern ( ($generated@@40 $generated@@41))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@37 $generated@@43 $generated@@42) $generated@@42)
 :pattern ( ($generated@@37 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ) (! (= ($generated@@44 $generated@@45) (= ($generated@@23 $generated@@45) $generated@@2))
 :pattern ( ($generated@@44 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@46 $generated@@47) (= ($generated@@23 $generated@@47) $generated@@3))
 :pattern ( ($generated@@46 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@48 $generated@@50 $generated@@51)  (and (= ($generated@@21 $generated@@50) ($generated@@21 $generated@@51)) (forall (($generated@@52 Int) ) (!  (=> (and (<= 0 $generated@@52) (< $generated@@52 ($generated@@21 $generated@@50))) (= ($generated@@49 $generated@@50 $generated@@52) ($generated@@49 $generated@@51 $generated@@52)))
 :pattern ( ($generated@@49 $generated@@50 $generated@@52))
 :pattern ( ($generated@@49 $generated@@51 $generated@@52))
))))
 :pattern ( ($generated@@48 $generated@@50 $generated@@51))
)))
(assert (= ($generated@@5 $generated@@53) 4))
(assert  (=> (<= 0 $generated@@33) (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (or ($generated@@35 $generated@@54 ($generated@@37 $generated@@53 $generated@@55)) (and (< 0 $generated@@33) ($generated@@36 $generated@@55 $generated@@54))) (= ($generated@@34 $generated@@54 true ($generated@@37 $generated@@53 $generated@@55)) ($generated@@10 ($generated@@37 $generated@@6 ($generated@@9 true)))))
 :weight 3
 :pattern ( ($generated@@34 $generated@@54 true ($generated@@37 $generated@@53 $generated@@55)))
))))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@56 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@56 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@44 $generated@@60) (= $generated@@60 $generated@@24))
 :pattern ( ($generated@@44 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ) (!  (=> ($generated@@46 $generated@@62) (exists (($generated@@63 T@U) ) (= $generated@@62 ($generated@@61 $generated@@63))))
 :pattern ( ($generated@@46 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@64 ($generated@@57 $generated@@68 $generated@@65) $generated@@66 $generated@@67) ($generated@@25 $generated@@68 $generated@@65 $generated@@66 $generated@@67))
 :pattern ( ($generated@@64 ($generated@@57 $generated@@68 $generated@@65) $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@71 T@U) ) (!  (and (= ($generated@@69 ($generated@@27 $generated@@71)) $generated@@1) (= ($generated@@70 ($generated@@27 $generated@@71)) $generated@@4))
 :pattern ( ($generated@@27 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> ($generated@@28 $generated@@74) (= ($generated@@25 $generated@@26 ($generated@@61 $generated@@73) ($generated@@27 $generated@@72) $generated@@74) ($generated@@64 $generated@@73 $generated@@72 $generated@@74)))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@61 $generated@@73) ($generated@@27 $generated@@72) $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> ($generated@@31 $generated@@26 $generated@@76 ($generated@@27 $generated@@75)) (or ($generated@@44 $generated@@76) ($generated@@46 $generated@@76)))
 :pattern ( ($generated@@46 $generated@@76) ($generated@@31 $generated@@26 $generated@@76 ($generated@@27 $generated@@75)))
 :pattern ( ($generated@@44 $generated@@76) ($generated@@31 $generated@@26 $generated@@76 ($generated@@27 $generated@@75)))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (!  (=> ($generated@@48 $generated@@77 $generated@@78) (= $generated@@77 $generated@@78))
 :pattern ( ($generated@@48 $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@36 ($generated@@57 $generated@@81 $generated@@79) $generated@@80) ($generated@@31 $generated@@81 $generated@@79 $generated@@80))
 :pattern ( ($generated@@36 ($generated@@57 $generated@@81 $generated@@79) $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ) (! (<= 0 ($generated@@21 $generated@@82))
 :pattern ( ($generated@@21 $generated@@82))
)))
(assert (= ($generated@@5 $generated@@83) 5))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@25 $generated@@83 $generated@@85 ($generated@@84 $generated@@86) $generated@@87) (forall (($generated@@88 Int) ) (!  (=> (and (<= 0 $generated@@88) (< $generated@@88 ($generated@@21 $generated@@85))) ($generated@@64 ($generated@@49 $generated@@85 $generated@@88) $generated@@86 $generated@@87))
 :pattern ( ($generated@@49 $generated@@85 $generated@@88))
)))
 :pattern ( ($generated@@25 $generated@@83 $generated@@85 ($generated@@84 $generated@@86) $generated@@87))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@89 ($generated@@84 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@84 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@69 ($generated@@84 $generated@@91)) $generated)
 :pattern ( ($generated@@84 $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@92 ($generated@@27 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@27 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@23 ($generated@@61 $generated@@94)) $generated@@3)
 :pattern ( ($generated@@61 $generated@@94))
)))
(assert (forall (($generated@@96 T@U) ) (! (= ($generated@@95 ($generated@@61 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@61 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@T) ) (! (= ($generated@@56 $generated@@98 ($generated@@57 $generated@@98 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@57 $generated@@98 $generated@@97))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@31 $generated@@26 ($generated@@61 $generated@@100) ($generated@@27 $generated@@99)) ($generated@@36 $generated@@100 $generated@@99))
 :pattern ( ($generated@@31 $generated@@26 ($generated@@61 $generated@@100) ($generated@@27 $generated@@99)))
)))
(assert (forall (($generated@@103 T@U) ) (! (< ($generated@@101 $generated@@103) ($generated@@102 ($generated@@61 $generated@@103)))
 :pattern ( ($generated@@61 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (=> (and ($generated@@28 $generated@@106) (and ($generated@@46 $generated@@104) ($generated@@25 $generated@@26 $generated@@104 ($generated@@27 $generated@@105) $generated@@106))) ($generated@@64 ($generated@@95 $generated@@104) $generated@@105 $generated@@106))
 :pattern ( ($generated@@64 ($generated@@95 $generated@@104) $generated@@105 $generated@@106))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@107 $generated@@117 $generated@@118 $generated@@119 ($generated@@113 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@122 $generated@@123) $generated@@120)
 :weight 0
)) (and (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (or (= $generated@@129 $generated@@131) (= ($generated@@107 $generated@@124 $generated@@125 $generated@@126 ($generated@@113 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@131 $generated@@132) ($generated@@107 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@131 $generated@@132)))
 :weight 0
)) (forall (($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (!  (or (= $generated@@139 $generated@@141) (= ($generated@@107 $generated@@133 $generated@@134 $generated@@135 ($generated@@113 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@138 $generated@@139 $generated@@136) $generated@@140 $generated@@141) ($generated@@107 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@140 $generated@@141)))
 :weight 0
)))) (= ($generated@@5 $generated@@108) 6)) (= ($generated@@5 $generated@@109) 7)) (forall (($generated@@142 T@T) ($generated@@143 T@T) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@111 $generated@@142 $generated@@143 ($generated@@114 $generated@@142 $generated@@143 $generated@@145 $generated@@146 $generated@@144) $generated@@146) $generated@@144)
 :weight 0
))) (forall (($generated@@147 T@T) ($generated@@148 T@T) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (!  (or (= $generated@@151 $generated@@152) (= ($generated@@111 $generated@@147 $generated@@148 ($generated@@114 $generated@@147 $generated@@148 $generated@@150 $generated@@151 $generated@@149) $generated@@152) ($generated@@111 $generated@@147 $generated@@148 $generated@@150 $generated@@152)))
 :weight 0
))) (forall (($generated@@153 T@T) ($generated@@154 T@T) ) (= ($generated@@5 ($generated@@112 $generated@@153 $generated@@154)) 8))) (forall (($generated@@155 T@T) ($generated@@156 T@T) ) (! (= ($generated@@115 ($generated@@112 $generated@@155 $generated@@156)) $generated@@155)
 :pattern ( ($generated@@112 $generated@@155 $generated@@156))
))) (forall (($generated@@157 T@T) ($generated@@158 T@T) ) (! (= ($generated@@116 ($generated@@112 $generated@@157 $generated@@158)) $generated@@158)
 :pattern ( ($generated@@112 $generated@@157 $generated@@158))
))))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 Bool) ($generated@@163 T@U) ($generated@@164 T@U) ) (! (= ($generated@@10 ($generated@@107 $generated@@108 $generated@@109 $generated@@6 ($generated@@110 $generated@@159 $generated@@160 $generated@@161 $generated@@162) $generated@@163 $generated@@164))  (=> (and (or (not (= $generated@@163 $generated@@159)) (not true)) ($generated@@10 ($generated@@56 $generated@@6 ($generated@@111 $generated@@109 $generated@@53 ($generated@@111 $generated@@108 ($generated@@112 $generated@@109 $generated@@53) $generated@@160 $generated@@163) $generated@@161)))) $generated@@162))
 :pattern ( ($generated@@107 $generated@@108 $generated@@109 $generated@@6 ($generated@@110 $generated@@159 $generated@@160 $generated@@161 $generated@@162) $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@165 T@U) ) (! (= ($generated@@101 ($generated@@57 $generated@@26 $generated@@165)) ($generated@@102 $generated@@165))
 :pattern ( ($generated@@101 ($generated@@57 $generated@@26 $generated@@165)))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (!  (=> ($generated@@36 $generated@@166 ($generated@@84 $generated@@167)) (and (= ($generated@@57 $generated@@83 ($generated@@56 $generated@@83 $generated@@166)) $generated@@166) ($generated@@31 $generated@@83 ($generated@@56 $generated@@83 $generated@@166) ($generated@@84 $generated@@167))))
 :pattern ( ($generated@@36 $generated@@166 ($generated@@84 $generated@@167)))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ) (!  (=> ($generated@@36 $generated@@169 ($generated@@27 $generated@@168)) (and (= ($generated@@57 $generated@@26 ($generated@@56 $generated@@26 $generated@@169)) $generated@@169) ($generated@@31 $generated@@26 ($generated@@56 $generated@@26 $generated@@169) ($generated@@27 $generated@@168))))
 :pattern ( ($generated@@36 $generated@@169 ($generated@@27 $generated@@168)))
)))
(assert (= $generated@@24 ($generated@@37 $generated@@26 $generated@@24)))
(assert (forall (($generated@@170 Int) ) (! (= ($generated@@57 $generated@@7 ($generated@@11 ($generated@@40 $generated@@170))) ($generated@@37 $generated@@53 ($generated@@57 $generated@@7 ($generated@@11 $generated@@170))))
 :pattern ( ($generated@@57 $generated@@7 ($generated@@11 ($generated@@40 $generated@@170))))
)))
(assert (forall (($generated@@171 T@U) ) (! (= ($generated@@61 ($generated@@37 $generated@@53 $generated@@171)) ($generated@@37 $generated@@26 ($generated@@61 $generated@@171)))
 :pattern ( ($generated@@61 ($generated@@37 $generated@@53 $generated@@171)))
)))
(assert (forall (($generated@@172 T@U) ($generated@@173 T@T) ) (! (= ($generated@@57 $generated@@173 ($generated@@37 $generated@@173 $generated@@172)) ($generated@@37 $generated@@53 ($generated@@57 $generated@@173 $generated@@172)))
 :pattern ( ($generated@@57 $generated@@173 ($generated@@37 $generated@@173 $generated@@172)))
)))
(assert (forall (($generated@@174 T@U) ) (!  (=> (= ($generated@@21 $generated@@174) 0) (= $generated@@174 $generated@@22))
 :pattern ( ($generated@@21 $generated@@174))
)))
(assert (forall (($generated@@175 T@U) ($generated@@176 T@U) ) (! (= ($generated@@31 $generated@@83 $generated@@175 ($generated@@84 $generated@@176)) (forall (($generated@@177 Int) ) (!  (=> (and (<= 0 $generated@@177) (< $generated@@177 ($generated@@21 $generated@@175))) ($generated@@36 ($generated@@49 $generated@@175 $generated@@177) $generated@@176))
 :pattern ( ($generated@@49 $generated@@175 $generated@@177))
)))
 :pattern ( ($generated@@31 $generated@@83 $generated@@175 ($generated@@84 $generated@@176)))
)))
(assert (forall (($generated@@179 T@U) ($generated@@180 Int) ) (!  (=> (and (<= 0 $generated@@180) (< $generated@@180 ($generated@@21 $generated@@179))) (< ($generated@@102 ($generated@@56 $generated@@26 ($generated@@49 $generated@@179 $generated@@180))) ($generated@@178 $generated@@179)))
 :pattern ( ($generated@@102 ($generated@@56 $generated@@26 ($generated@@49 $generated@@179 $generated@@180))))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () Bool)
(declare-fun $generated@@184 () Bool)
(declare-fun $generated@@185 () T@U)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 () T@U)
(declare-fun $generated@@190 () T@U)
(declare-fun $generated@@191 () T@U)
(declare-fun $generated@@192 (T@U) Bool)
(declare-fun $generated@@193 () T@U)
(declare-fun $generated@@194 () Bool)
(declare-fun $generated@@195 () T@U)
(declare-fun $generated@@196 () Bool)
(declare-fun $generated@@197 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@198  (and (=> (= (ControlFlow 0 3) (- 0 4)) (exists (($generated@@199 T@U) )  (and (and ($generated@@36 $generated@@199 $generated@@181) ($generated@@64 $generated@@199 $generated@@181 $generated@@182)) (=> $generated@@183 ($generated@@34 $generated@@181 $generated@@184 $generated@@199))))) (=> (exists (($generated@@200 T@U) )  (and (and ($generated@@36 $generated@@200 $generated@@181) ($generated@@64 $generated@@200 $generated@@181 $generated@@182)) (=> $generated@@183 ($generated@@34 $generated@@181 $generated@@184 $generated@@200)))) (=> (=> true (and ($generated@@36 $generated@@185 $generated@@181) ($generated@@64 $generated@@185 $generated@@181 $generated@@182))) (=> (and (=> $generated@@183 ($generated@@34 $generated@@181 $generated@@184 $generated@@185)) (= (ControlFlow 0 3) (- 0 2))) true))))))
(let (($generated@@201  (=> (and (=> $generated@@183 ($generated@@35 $generated@@181 $generated@@186)) (= (ControlFlow 0 6) 3)) $generated@@198)))
(let (($generated@@202  (=> (and (not $generated@@183) (= (ControlFlow 0 8) 6)) $generated@@201)))
(let (($generated@@203  (=> (and (and $generated@@183 ($generated@@64 $generated@@186 $generated@@181 $generated@@182)) (and ($generated@@35 $generated@@181 $generated@@186) (= (ControlFlow 0 7) 6))) $generated@@201)))
(let (($generated@@204  (=> (and ($generated@@36 $generated@@186 $generated@@181) ($generated@@64 $generated@@186 $generated@@181 $generated@@182)) (and (=> (= (ControlFlow 0 9) 7) $generated@@203) (=> (= (ControlFlow 0 9) 8) $generated@@202)))))
(let (($generated@@205  (=> (and (not (and ($generated@@36 $generated@@186 $generated@@181) ($generated@@64 $generated@@186 $generated@@181 $generated@@182))) (= (ControlFlow 0 5) 3)) $generated@@198)))
(let (($generated@@206  (=> (and (forall (($generated@@207 T@U) ) (!  (=> ($generated@@36 $generated@@207 $generated@@181) ($generated@@35 $generated@@181 $generated@@207))
 :pattern ( ($generated@@34 $generated@@181 $generated@@184 $generated@@207))
)) (= $generated@@183 (exists (($generated@@208 T@U) ) (!  (and (and ($generated@@36 $generated@@208 $generated@@181) ($generated@@64 $generated@@208 $generated@@181 $generated@@182)) ($generated@@34 $generated@@181 $generated@@184 $generated@@208))
 :pattern ( ($generated@@34 $generated@@181 $generated@@184 $generated@@208))
)))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (and (<= 0 ($generated@@40 0)) (< ($generated@@40 0) ($generated@@21 $generated@@187)))) (=> (and (<= 0 ($generated@@40 0)) (< ($generated@@40 0) ($generated@@21 $generated@@187))) (=> (= $generated@@188 ($generated@@49 $generated@@187 ($generated@@40 0))) (and (=> (= (ControlFlow 0 10) 9) $generated@@204) (=> (= (ControlFlow 0 10) 5) $generated@@205))))))))
(let (($generated@@209  (=> (and (not (and ($generated@@36 $generated@@189 $generated@@181) ($generated@@64 $generated@@189 $generated@@181 $generated@@182))) (= (ControlFlow 0 13) 10)) $generated@@206)))
(let (($generated@@210  (=> (and (and (and ($generated@@36 $generated@@189 $generated@@181) ($generated@@64 $generated@@189 $generated@@181 $generated@@182)) ($generated@@64 $generated@@189 $generated@@181 $generated@@182)) (and ($generated@@35 $generated@@181 $generated@@189) (= (ControlFlow 0 12) 10))) $generated@@206)))
(let (($generated@@211  (=> (not ($generated@@48 $generated@@187 $generated@@22)) (and (=> (= (ControlFlow 0 14) 12) $generated@@210) (=> (= (ControlFlow 0 14) 13) $generated@@209)))))
(let (($generated@@212 true))
(let (($generated@@213  (=> (= $generated@@190 ($generated@@110 $generated@@191 $generated@@182 $generated@@0 false)) (and (=> (= (ControlFlow 0 15) 1) $generated@@212) (=> (= (ControlFlow 0 15) 14) $generated@@211)))))
(let (($generated@@214  (=> (and (and ($generated@@28 $generated@@182) ($generated@@192 $generated@@182)) (and ($generated@@31 $generated@@83 $generated@@187 ($generated@@84 $generated@@181)) ($generated@@25 $generated@@83 $generated@@187 ($generated@@84 $generated@@181) $generated@@182))) (=> (and (and (and ($generated@@31 $generated@@26 $generated@@193 ($generated@@27 $generated@@181)) ($generated@@25 $generated@@26 $generated@@193 ($generated@@27 $generated@@181) $generated@@182)) (and (=> $generated@@194 (and ($generated@@36 $generated@@195 $generated@@181) ($generated@@64 $generated@@195 $generated@@181 $generated@@182))) true)) (and (and (=> $generated@@196 (and ($generated@@36 $generated@@197 $generated@@181) ($generated@@64 $generated@@197 $generated@@181 $generated@@182))) true) (and (= 1 $generated@@33) (= (ControlFlow 0 16) 15)))) $generated@@213))))
$generated@@214))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
