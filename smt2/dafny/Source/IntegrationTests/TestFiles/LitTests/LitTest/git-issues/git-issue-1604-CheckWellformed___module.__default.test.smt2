(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 (T@T) Int)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 (Bool) T@U)
(declare-fun $generated@@16 (T@U) Bool)
(declare-fun $generated@@17 (Int) T@U)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@19 (Real) T@U)
(declare-fun $generated@@20 (T@U) Real)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@T T@U T@U) Bool)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@37 (Int) Int)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@42 () Int)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 (Int Int) Int)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 () T@U)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@T T@T) T@T)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@123 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@11 $generated@@12) 0) (= ($generated@@11 $generated@@13) 1)) (= ($generated@@11 $generated@@14) 2)) (forall (($generated@@21 Bool) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Int) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Real) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10)
)
(assert (= ($generated@@27 $generated) $generated@@0))
(assert ($generated@@28 $generated@@29))
(assert ($generated@@28 $generated@@30))
(assert (= ($generated@@11 $generated@@32) 3))
(assert (forall (($generated@@35 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@35 $generated@@29)  (or (= $generated@@35 $generated@@33) (= ($generated@@34 $generated@@35) $generated@@29)))
 :pattern ( ($generated@@31 $generated@@32 $generated@@35 $generated@@29))
)))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@36 $generated@@30)  (or (= $generated@@36 $generated@@33) (= ($generated@@34 $generated@@36) $generated@@30)))
 :pattern ( ($generated@@31 $generated@@32 $generated@@36 $generated@@30))
)))
(assert (forall (($generated@@38 Int) ) (! (= ($generated@@37 $generated@@38) $generated@@38)
 :pattern ( ($generated@@37 $generated@@38))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 $generated@@40) $generated@@40)
 :pattern ( ($generated@@39 $generated@@41 $generated@@40))
)))
(assert  (=> (<= 1 $generated@@42) (forall (($generated@@49 T@U) ) (!  (=> (or ($generated@@44 ($generated@@39 $generated@@32 $generated@@49)) (and (< 1 $generated@@42) (and ($generated@@31 $generated@@32 $generated@@49 $generated@@45) ($generated@@31 $generated@@32 ($generated@@39 $generated@@32 $generated@@49) $generated@@46)))) (= ($generated@@43 ($generated@@39 $generated@@32 $generated@@49)) (ite ($generated@@31 $generated@@32 ($generated@@39 $generated@@32 $generated@@49) $generated@@47) (= ($generated@@37 ($generated@@48 1 ($generated@@37 0))) ($generated@@37 0)) true)))
 :weight 3
 :pattern ( ($generated@@43 ($generated@@39 $generated@@32 $generated@@49)))
))))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@50 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@50 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@55 $generated@@45)  (and ($generated@@31 $generated@@32 $generated@@55 $generated@@54) (or (not (= $generated@@55 $generated@@33)) (not true))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@55 $generated@@45))
 :pattern ( ($generated@@31 $generated@@32 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@56 $generated@@46)  (and ($generated@@31 $generated@@32 $generated@@56 $generated@@29) (or (not (= $generated@@56 $generated@@33)) (not true))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@56 $generated@@46))
 :pattern ( ($generated@@31 $generated@@32 $generated@@56 $generated@@29))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@57 $generated@@47)  (and ($generated@@31 $generated@@32 $generated@@57 $generated@@30) (or (not (= $generated@@57 $generated@@33)) (not true))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@57 $generated@@47))
 :pattern ( ($generated@@31 $generated@@32 $generated@@57 $generated@@30))
)))
(assert (forall (($generated@@58 Int) ($generated@@59 Int) ) (! (= ($generated@@48 $generated@@58 $generated@@59) (div $generated@@58 $generated@@59))
 :pattern ( ($generated@@48 $generated@@58 $generated@@59))
)))
(assert  (=> (<= 1 $generated@@42) (forall (($generated@@60 T@U) ) (!  (=> (or ($generated@@44 $generated@@60) (and (< 1 $generated@@42) (and ($generated@@31 $generated@@32 $generated@@60 $generated@@45) ($generated@@31 $generated@@32 $generated@@60 $generated@@46)))) (= ($generated@@43 $generated@@60) (ite ($generated@@31 $generated@@32 $generated@@60 $generated@@47) (= ($generated@@37 ($generated@@48 1 ($generated@@37 0))) ($generated@@37 0)) true)))
 :pattern ( ($generated@@43 $generated@@60))
))))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@50 $generated@@62 ($generated@@51 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@51 $generated@@62 $generated@@61))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@63 $generated@@73 $generated@@74 $generated@@75 ($generated@@69 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@78 $generated@@79) $generated@@76)
 :weight 0
)) (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@63 $generated@@80 $generated@@81 $generated@@82 ($generated@@69 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@63 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@63 $generated@@89 $generated@@90 $generated@@91 ($generated@@69 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@63 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)))) (= ($generated@@11 $generated@@64) 4)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@66 $generated@@98 $generated@@99 ($generated@@70 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@102) $generated@@100)
 :weight 0
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@107 $generated@@108) (= ($generated@@66 $generated@@103 $generated@@104 ($generated@@70 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@108) ($generated@@66 $generated@@103 $generated@@104 $generated@@106 $generated@@108)))
 :weight 0
))) (= ($generated@@11 $generated@@67) 5)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (= ($generated@@11 ($generated@@68 $generated@@109 $generated@@110)) 6))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@71 ($generated@@68 $generated@@111 $generated@@112)) $generated@@111)
 :pattern ( ($generated@@68 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@72 ($generated@@68 $generated@@113 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@68 $generated@@113 $generated@@114))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 Bool) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@16 ($generated@@63 $generated@@32 $generated@@64 $generated@@12 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))  (=> (and (or (not (= $generated@@119 $generated@@115)) (not true)) ($generated@@16 ($generated@@50 $generated@@12 ($generated@@66 $generated@@64 $generated@@67 ($generated@@66 $generated@@32 ($generated@@68 $generated@@64 $generated@@67) $generated@@116 $generated@@119) $generated@@117)))) $generated@@118))
 :pattern ( ($generated@@63 $generated@@32 $generated@@64 $generated@@12 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))
)))
(assert (forall (($generated@@121 T@U) ) (!  (=> ($generated@@31 $generated@@32 $generated@@121 $generated@@29) ($generated@@31 $generated@@32 $generated@@121 $generated@@54))
 :pattern ( ($generated@@31 $generated@@32 $generated@@121 $generated@@29))
)))
(assert (forall (($generated@@122 T@U) ) (!  (=> ($generated@@31 $generated@@32 $generated@@122 $generated@@30) ($generated@@31 $generated@@32 $generated@@122 $generated@@54))
 :pattern ( ($generated@@31 $generated@@32 $generated@@122 $generated@@30))
)))
(assert (= ($generated@@27 $generated@@46) $generated@@2))
(assert (= ($generated@@123 $generated@@46) $generated@@8))
(assert (= ($generated@@27 $generated@@45) $generated@@3))
(assert (= ($generated@@123 $generated@@45) $generated@@9))
(assert (= ($generated@@27 $generated@@47) $generated@@4))
(assert (= ($generated@@123 $generated@@47) $generated@@10))
(assert (= ($generated@@27 $generated@@29) $generated@@5))
(assert (= ($generated@@123 $generated@@29) $generated@@8))
(assert (= ($generated@@27 $generated@@30) $generated@@6))
(assert (= ($generated@@123 $generated@@30) $generated@@10))
(assert (= ($generated@@27 $generated@@54) $generated@@7))
(assert (= ($generated@@123 $generated@@54) $generated@@9))
(assert (forall (($generated@@124 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@124 $generated@@54)  (or (= $generated@@124 $generated@@33) ($generated@@28 ($generated@@34 $generated@@124))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@124 $generated@@54))
)))
(assert (forall (($generated@@125 Int) ) (! (= ($generated@@51 $generated@@13 ($generated@@17 ($generated@@37 $generated@@125))) ($generated@@39 $generated@@67 ($generated@@51 $generated@@13 ($generated@@17 $generated@@125))))
 :pattern ( ($generated@@51 $generated@@13 ($generated@@17 ($generated@@37 $generated@@125))))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@T) ) (! (= ($generated@@51 $generated@@127 ($generated@@39 $generated@@127 $generated@@126)) ($generated@@39 $generated@@67 ($generated@@51 $generated@@127 $generated@@126)))
 :pattern ( ($generated@@51 $generated@@127 ($generated@@39 $generated@@127 $generated@@126)))
)))
(assert (forall (($generated@@128 T@U) ) (! ($generated@@31 $generated@@12 $generated@@128 $generated)
 :pattern ( ($generated@@31 $generated@@12 $generated@@128 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@134 true))
(let (($generated@@135  (=> (and ($generated@@31 $generated@@32 $generated@@129 $generated@@47) (= (ControlFlow 0 3) (- 0 2))) (or (not (= ($generated@@37 0) 0)) (not true)))))
(let (($generated@@136 true))
(let (($generated@@137  (=> (and (= $generated@@130 ($generated@@65 $generated@@33 $generated@@131 $generated@@1 false)) ($generated@@31 $generated@@32 $generated@@129 $generated@@46)) (and (and (=> (= (ControlFlow 0 5) 1) $generated@@136) (=> (= (ControlFlow 0 5) 3) $generated@@135)) (=> (= (ControlFlow 0 5) 4) $generated@@134)))))
(let (($generated@@138  (=> (and (and (and ($generated@@132 $generated@@131) ($generated@@133 $generated@@131)) ($generated@@31 $generated@@32 $generated@@129 $generated@@45)) (and (= 1 $generated@@42) (= (ControlFlow 0 6) 5))) $generated@@137)))
$generated@@138))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
