(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@27 () Int)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@34 (Int Int) Int)
(declare-fun $generated@@35 (Int Int) Bool)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (Int) Int)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@U T@U T@U) Bool)
(declare-fun $generated@@60 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@64 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@T T@T) T@T)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@119 (T@U) T@U)
(declare-fun $generated@@120 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! ($generated@@20 $generated@@6 $generated@@22 $generated@@21 $generated@@23)
 :pattern ( ($generated@@20 $generated@@6 $generated@@22 $generated@@21 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (! ($generated@@20 $generated@@6 $generated@@25 $generated@@24 $generated@@26)
 :pattern ( ($generated@@20 $generated@@6 $generated@@25 $generated@@24 $generated@@26))
)))
(assert  (=> (< 0 $generated@@27) (forall (($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (and (and ($generated@@29 $generated@@31) ($generated@@30 $generated@@6 ($generated@@10 $generated@@32) $generated@@24)) ($generated@@20 $generated@@6 ($generated@@10 $generated@@32) $generated@@24 $generated@@31)) ($generated@@20 $generated@@6 ($generated@@10 ($generated@@28 $generated@@32)) $generated@@21 $generated@@31))
 :pattern ( ($generated@@28 $generated@@32) ($generated@@20 $generated@@6 ($generated@@10 $generated@@32) $generated@@24 $generated@@31))
))))
(assert  (=> (< 0 $generated@@27) (forall (($generated@@33 Int) ) (!  (=> ($generated@@30 $generated@@6 ($generated@@10 $generated@@33) $generated@@24) ($generated@@30 $generated@@6 ($generated@@10 ($generated@@28 $generated@@33)) $generated@@21))
 :pattern ( ($generated@@28 $generated@@33))
))))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@38 Int) ($generated@@39 Int) ) (!  (=> (or ($generated@@35 $generated@@38 $generated@@39) (and (< 1 $generated@@27) (and (and ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))) (<= ($generated@@37 0) $generated@@39)) (or (not (= $generated@@39 7)) (not true))))) (= ($generated@@34 $generated@@38 $generated@@39) $generated@@39))
 :pattern ( ($generated@@34 $generated@@38 $generated@@39))
))))
(assert (forall (($generated@@40 Int) ) (! (= ($generated@@37 $generated@@40) $generated@@40)
 :pattern ( ($generated@@37 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@36 $generated@@42 $generated@@41) $generated@@41)
 :pattern ( ($generated@@36 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@30 $generated@@6 $generated@@47 $generated@@21) (<= ($generated@@37 0) ($generated@@11 $generated@@47)))
 :pattern ( ($generated@@30 $generated@@6 $generated@@47 $generated@@21))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@48 ($generated@@44 $generated@@52 $generated@@49) $generated@@50 $generated@@51) ($generated@@20 $generated@@52 $generated@@49 $generated@@50 $generated@@51))
 :pattern ( ($generated@@48 ($generated@@44 $generated@@52 $generated@@49) $generated@@50 $generated@@51))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@53 Int) ($generated@@54 Int) ) (!  (=> (or ($generated@@35 $generated@@53 $generated@@54) (and (< 1 $generated@@27) (and (and ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))) (<= ($generated@@37 0) $generated@@54)) (or (not (= $generated@@54 7)) (not true))))) (and (= ($generated@@34 $generated@@53 $generated@@54) ($generated@@28 $generated@@53)) (<= ($generated@@37 0) ($generated@@34 $generated@@53 $generated@@54))))
 :pattern ( ($generated@@34 $generated@@53 $generated@@54))
))))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@55 Int) ($generated@@56 Int) ) (!  (=> (or ($generated@@35 $generated@@55 ($generated@@37 $generated@@56)) (and (< 1 $generated@@27) (and (and ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))) (<= ($generated@@37 0) $generated@@56)) ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8  (or (not (= $generated@@56 7)) (not true)))))))) (= ($generated@@34 $generated@@55 ($generated@@37 $generated@@56)) ($generated@@37 $generated@@56)))
 :weight 3
 :pattern ( ($generated@@34 $generated@@55 ($generated@@37 $generated@@56)))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@43 $generated@@58 ($generated@@44 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@44 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@30 $generated@@6 $generated@@59 $generated@@24) ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))))
 :pattern ( ($generated@@30 $generated@@6 $generated@@59 $generated@@24))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@60 $generated@@71 $generated@@72 $generated@@73 ($generated@@67 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@76 $generated@@77) $generated@@74)
 :weight 0
)) (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@83 $generated@@85) (= ($generated@@60 $generated@@78 $generated@@79 $generated@@80 ($generated@@67 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@60 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@60 $generated@@87 $generated@@88 $generated@@89 ($generated@@67 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@60 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)))) (= ($generated@@4 $generated@@61) 3)) (= ($generated@@4 $generated@@62) 4)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@64 $generated@@96 $generated@@97 ($generated@@68 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@98) $generated@@100) $generated@@98)
 :weight 0
))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@105 $generated@@106) (= ($generated@@64 $generated@@101 $generated@@102 ($generated@@68 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@64 $generated@@101 $generated@@102 $generated@@104 $generated@@106)))
 :weight 0
))) (= ($generated@@4 $generated@@65) 5)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@4 ($generated@@66 $generated@@107 $generated@@108)) 6))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@69 ($generated@@66 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@66 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@70 ($generated@@66 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@66 $generated@@111 $generated@@112))
))))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 Bool) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@9 ($generated@@60 $generated@@61 $generated@@62 $generated@@5 ($generated@@63 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))  (=> (and (or (not (= $generated@@117 $generated@@113)) (not true)) ($generated@@9 ($generated@@43 $generated@@5 ($generated@@64 $generated@@62 $generated@@65 ($generated@@64 $generated@@61 ($generated@@66 $generated@@62 $generated@@65) $generated@@114 $generated@@117) $generated@@115)))) $generated@@116))
 :pattern ( ($generated@@60 $generated@@61 $generated@@62 $generated@@5 ($generated@@63 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))
)))
(assert (= ($generated@@119 $generated@@21) $generated@@0))
(assert (= ($generated@@120 $generated@@21) $generated@@2))
(assert (= ($generated@@119 $generated@@24) $generated@@1))
(assert (= ($generated@@120 $generated@@24) $generated@@3))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@44 $generated@@6 ($generated@@10 ($generated@@37 $generated@@121))) ($generated@@36 $generated@@65 ($generated@@44 $generated@@6 ($generated@@10 $generated@@121))))
 :pattern ( ($generated@@44 $generated@@6 ($generated@@10 ($generated@@37 $generated@@121))))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@T) ) (! (= ($generated@@44 $generated@@123 ($generated@@36 $generated@@123 $generated@@122)) ($generated@@36 $generated@@65 ($generated@@44 $generated@@123 $generated@@122)))
 :pattern ( ($generated@@44 $generated@@123 ($generated@@36 $generated@@123 $generated@@122)))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@124 Int) ($generated@@125 Int) ) (!  (=> (or ($generated@@35 ($generated@@37 $generated@@124) ($generated@@37 $generated@@125)) (and (< 1 $generated@@27) (and (and ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))) (<= ($generated@@37 0) $generated@@125)) ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8  (or (not (= $generated@@125 7)) (not true)))))))) (= ($generated@@34 ($generated@@37 $generated@@124) ($generated@@37 $generated@@125)) ($generated@@37 $generated@@125)))
 :weight 3
 :pattern ( ($generated@@34 ($generated@@37 $generated@@124) ($generated@@37 $generated@@125)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@132  (=> (= (ControlFlow 0 6) (- 0 5)) (= ($generated@@34 $generated@@126 $generated@@127) ($generated@@28 $generated@@126)))))
(let (($generated@@133  (=> (= ($generated@@34 $generated@@126 $generated@@127) $generated@@127) (=> (and ($generated@@30 $generated@@6 ($generated@@10 ($generated@@34 $generated@@126 $generated@@127)) $generated@@21) (= (ControlFlow 0 7) 6)) $generated@@132))))
(let (($generated@@134  (=> (<= ($generated@@37 0) ($generated@@34 $generated@@126 $generated@@127)) (=> (and ($generated@@48 ($generated@@44 $generated@@6 ($generated@@10 $generated@@126)) $generated@@24 $generated@@128) ($generated@@20 $generated@@6 ($generated@@10 $generated@@127) $generated@@21 $generated@@128)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= $generated@@127 7)) (not true))) (=> (or (not (= $generated@@127 7)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@127) (= $generated@@127 $generated@@127))) (=> (or (<= 0 $generated@@127) (= $generated@@127 $generated@@127)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@126 $generated@@126) (= $generated@@127 $generated@@127)) (< $generated@@127 $generated@@127)))))))))))
(let (($generated@@135  (=> (and (= $generated@@129 ($generated@@63 $generated@@130 $generated@@128 $generated false)) (or (not (= $generated@@127 7)) (not true))) (and (=> (= (ControlFlow 0 8) 2) $generated@@134) (=> (= (ControlFlow 0 8) 7) $generated@@133)))))
(let (($generated@@136  (=> (and ($generated@@29 $generated@@128) ($generated@@131 $generated@@128)) (=> (and (and ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))) (<= ($generated@@37 0) $generated@@127)) (and (= 1 $generated@@27) (= (ControlFlow 0 9) 8))) $generated@@135))))
$generated@@136))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
