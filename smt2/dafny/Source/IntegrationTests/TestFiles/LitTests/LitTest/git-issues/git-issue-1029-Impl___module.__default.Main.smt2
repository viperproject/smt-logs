(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@30 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U T@U T@U) Bool)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@70 (T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@77 (T@U) T@U)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 (T@T T@T) T@T)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@140 (T@U) T@U)
(declare-fun $generated@@141 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@23) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@24 $generated@@28 $generated@@29) $generated@@25)  (and ($generated@@26 $generated@@28 $generated@@27) ($generated@@26 $generated@@29 $generated@@27)))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@24 $generated@@28 $generated@@29) $generated@@25))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> ($generated@@31 $generated@@35) (= ($generated@@30 $generated@@23 ($generated@@24 $generated@@33 $generated@@34) $generated@@25 $generated@@35)  (and ($generated@@32 $generated@@33 $generated@@27 $generated@@35) ($generated@@32 $generated@@34 $generated@@27 $generated@@35))))
 :pattern ( ($generated@@30 $generated@@23 ($generated@@24 $generated@@33 $generated@@34) $generated@@25 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@38 $generated@@37) ($generated@@36 $generated@@38))
 :pattern ( ($generated@@36 $generated@@38) ($generated@@22 $generated@@23 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@40 $generated@@25) ($generated@@39 $generated@@40))
 :pattern ( ($generated@@39 $generated@@40) ($generated@@22 $generated@@23 $generated@@40 $generated@@25))
)))
(assert ($generated@@26 $generated@@41 $generated@@27))
(assert (forall (($generated@@42 T@U) ) (!  (=> ($generated@@31 $generated@@42) ($generated@@32 $generated@@41 $generated@@27 $generated@@42))
 :pattern ( ($generated@@32 $generated@@41 $generated@@27 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@36 $generated@@44) (= ($generated@@43 $generated@@44) $generated@@2))
 :pattern ( ($generated@@36 $generated@@44))
)))
(assert (forall (($generated@@45 T@U) ) (! (= ($generated@@39 $generated@@45) (= ($generated@@43 $generated@@45) $generated@@3))
 :pattern ( ($generated@@39 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 ($generated@@46 $generated@@49 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@46 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@39 $generated@@50) (exists (($generated@@51 T@U) ($generated@@52 T@U) ) (= $generated@@50 ($generated@@24 $generated@@51 $generated@@52))))
 :pattern ( ($generated@@39 $generated@@50))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@36 $generated@@54) (exists (($generated@@55 T@U) ) (= $generated@@54 ($generated@@53 $generated@@55))))
 :pattern ( ($generated@@36 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@32 ($generated@@47 $generated@@59 $generated@@56) $generated@@57 $generated@@58) ($generated@@30 $generated@@59 $generated@@56 $generated@@57 $generated@@58))
 :pattern ( ($generated@@32 ($generated@@47 $generated@@59 $generated@@56) $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@26 $generated@@60 $generated@@37) (and (= ($generated@@47 $generated@@23 ($generated@@46 $generated@@23 $generated@@60)) $generated@@60) ($generated@@22 $generated@@23 ($generated@@46 $generated@@23 $generated@@60) $generated@@37)))
 :pattern ( ($generated@@26 $generated@@60 $generated@@37))
)))
(assert (forall (($generated@@61 T@U) ) (!  (=> ($generated@@26 $generated@@61 $generated@@25) (and (= ($generated@@47 $generated@@23 ($generated@@46 $generated@@23 $generated@@61)) $generated@@61) ($generated@@22 $generated@@23 ($generated@@46 $generated@@23 $generated@@61) $generated@@25)))
 :pattern ( ($generated@@26 $generated@@61 $generated@@25))
)))
(assert (forall (($generated@@62 T@U) ) (! (= ($generated@@22 $generated@@23 ($generated@@53 $generated@@62) $generated@@37) ($generated@@26 $generated@@62 $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@53 $generated@@62) $generated@@37))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> ($generated@@31 $generated@@64) (= ($generated@@30 $generated@@23 ($generated@@53 $generated@@63) $generated@@37 $generated@@64) ($generated@@32 $generated@@63 $generated@@27 $generated@@64)))
 :pattern ( ($generated@@30 $generated@@23 ($generated@@53 $generated@@63) $generated@@37 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@26 ($generated@@47 $generated@@67 $generated@@65) $generated@@66) ($generated@@22 $generated@@67 $generated@@65 $generated@@66))
 :pattern ( ($generated@@26 ($generated@@47 $generated@@67 $generated@@65) $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@43 ($generated@@24 $generated@@68 $generated@@69)) $generated@@3)
 :pattern ( ($generated@@24 $generated@@68 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@70 ($generated@@24 $generated@@71 $generated@@72)) $generated@@71)
 :pattern ( ($generated@@24 $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@73 ($generated@@24 $generated@@74 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@24 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ) (! (= ($generated@@43 ($generated@@53 $generated@@76)) $generated@@2)
 :pattern ( ($generated@@53 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@77 ($generated@@53 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@53 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@46 $generated@@80 ($generated@@47 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@47 $generated@@80 $generated@@79))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@81 $generated@@92 $generated@@93 $generated@@94 ($generated@@88 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@97 $generated@@98) $generated@@95)
 :weight 0
)) (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@81 $generated@@99 $generated@@100 $generated@@101 ($generated@@88 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@81 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@81 $generated@@108 $generated@@109 $generated@@110 ($generated@@88 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@81 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)))) (= ($generated@@6 $generated@@82) 4)) (= ($generated@@6 $generated@@83) 5)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@85 $generated@@117 $generated@@118 ($generated@@89 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@121) $generated@@119)
 :weight 0
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@126 $generated@@127) (= ($generated@@85 $generated@@122 $generated@@123 ($generated@@89 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@124) $generated@@127) ($generated@@85 $generated@@122 $generated@@123 $generated@@125 $generated@@127)))
 :weight 0
))) (= ($generated@@6 $generated@@86) 6)) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (= ($generated@@6 ($generated@@87 $generated@@128 $generated@@129)) 7))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@90 ($generated@@87 $generated@@130 $generated@@131)) $generated@@130)
 :pattern ( ($generated@@87 $generated@@130 $generated@@131))
))) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (! (= ($generated@@91 ($generated@@87 $generated@@132 $generated@@133)) $generated@@133)
 :pattern ( ($generated@@87 $generated@@132 $generated@@133))
))))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 Bool) ($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@11 ($generated@@81 $generated@@82 $generated@@83 $generated@@7 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))  (=> (and (or (not (= $generated@@138 $generated@@134)) (not true)) ($generated@@11 ($generated@@46 $generated@@7 ($generated@@85 $generated@@83 $generated@@86 ($generated@@85 $generated@@82 ($generated@@87 $generated@@83 $generated@@86) $generated@@135 $generated@@138) $generated@@136)))) $generated@@137))
 :pattern ( ($generated@@81 $generated@@82 $generated@@83 $generated@@7 ($generated@@84 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))
)))
(assert (= ($generated@@140 $generated@@37) $generated@@0))
(assert (= ($generated@@141 $generated@@37) $generated@@4))
(assert (= ($generated@@140 $generated@@25) $generated@@1))
(assert (= ($generated@@141 $generated@@25) $generated@@5))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> (and ($generated@@31 $generated@@143) (and ($generated@@36 $generated@@142) ($generated@@30 $generated@@23 $generated@@142 $generated@@37 $generated@@143))) ($generated@@32 ($generated@@77 $generated@@142) $generated@@27 $generated@@143))
 :pattern ( ($generated@@32 ($generated@@77 $generated@@142) $generated@@27 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (!  (=> (and ($generated@@31 $generated@@145) (and ($generated@@39 $generated@@144) ($generated@@30 $generated@@23 $generated@@144 $generated@@25 $generated@@145))) ($generated@@32 ($generated@@70 $generated@@144) $generated@@27 $generated@@145))
 :pattern ( ($generated@@32 ($generated@@70 $generated@@144) $generated@@27 $generated@@145))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (!  (=> (and ($generated@@31 $generated@@147) (and ($generated@@39 $generated@@146) ($generated@@30 $generated@@23 $generated@@146 $generated@@25 $generated@@147))) ($generated@@32 ($generated@@73 $generated@@146) $generated@@27 $generated@@147))
 :pattern ( ($generated@@32 ($generated@@73 $generated@@146) $generated@@27 $generated@@147))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () Bool)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@155 () Bool)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Bool)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@160  (=> (and (= $generated@@148 ($generated@@84 $generated@@149 $generated@@150 $generated false)) $generated@@151) (=> (and (and (and $generated@@151 (= $generated@@152 ($generated@@53 $generated@@41))) (and $generated@@151 $generated@@151)) (and (and $generated@@151 $generated@@151) (= $generated@@153 ($generated@@24 $generated@@41 $generated@@41)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) true))))))
(let (($generated@@161  (=> (and (and (and ($generated@@31 $generated@@150) ($generated@@154 $generated@@150)) (and (=> $generated@@155 (and ($generated@@22 $generated@@23 $generated@@156 $generated@@37) ($generated@@30 $generated@@23 $generated@@156 $generated@@37 $generated@@150))) true)) (and (and (=> $generated@@157 (and ($generated@@22 $generated@@23 $generated@@158 $generated@@25) ($generated@@30 $generated@@23 $generated@@158 $generated@@25 $generated@@150))) true) (and (= 0 $generated@@159) (= (ControlFlow 0 4) 2)))) $generated@@160)))
$generated@@161)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
