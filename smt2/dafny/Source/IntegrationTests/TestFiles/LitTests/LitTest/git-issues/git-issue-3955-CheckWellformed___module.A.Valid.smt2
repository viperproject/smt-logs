(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 (T@T) Int)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 (Bool) T@U)
(declare-fun $generated@@15 (T@U) Bool)
(declare-fun $generated@@16 (Int) T@U)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 (Real) T@U)
(declare-fun $generated@@19 (T@U) Real)
(declare-fun $generated@@26 (T@U) Int)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 () Int)
(declare-fun $generated@@30 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U T@U) Bool)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@T T@T) T@T)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@44 (Int) Int)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@67 () T@U)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@72 (T@U T@U) T@U)
(declare-fun $generated@@73 (T@U) Bool)
(declare-fun $generated@@77 (T@T T@U) T@U)
(declare-fun $generated@@80 (T@T T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@120 (T@U) T@U)
(declare-fun $generated@@127 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@10 $generated@@11) 0) (= ($generated@@10 $generated@@12) 1)) (= ($generated@@10 $generated@@13) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@19 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@18 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9)
)
(assert (= ($generated@@26 $generated@@3) 0))
(assert (= ($generated@@27 $generated) $generated@@1))
(assert (= ($generated@@27 $generated@@0) $generated@@2))
(assert (= ($generated@@28 $generated@@3) $generated@@4))
(assert  (and (and (and (and (and (and (and (= ($generated@@10 $generated@@35) 3) (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@39 $generated@@48 $generated@@49 ($generated@@45 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@50) $generated@@52) $generated@@50)
 :weight 0
))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (or (= $generated@@57 $generated@@58) (= ($generated@@39 $generated@@53 $generated@@54 ($generated@@45 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@58) ($generated@@39 $generated@@53 $generated@@54 $generated@@56 $generated@@58)))
 :weight 0
))) (= ($generated@@10 $generated@@40) 4)) (= ($generated@@10 $generated@@41) 5)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (= ($generated@@10 ($generated@@42 $generated@@59 $generated@@60)) 6))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@46 ($generated@@42 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@42 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@47 ($generated@@42 $generated@@63 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@42 $generated@@63 $generated@@64))
))))
(assert  (=> (<= 0 $generated@@29) (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> (or ($generated@@32 $generated@@65 $generated@@66) (and (< 0 $generated@@29) (and ($generated@@31 $generated@@65) (and (or (not (= $generated@@66 $generated@@33)) (not true)) (and ($generated@@34 $generated@@35 $generated@@66 $generated@@36) ($generated@@37 $generated@@35 $generated@@66 $generated@@36 $generated@@65)))))) (= ($generated@@30 $generated@@65 $generated@@66) (>= ($generated@@17 ($generated@@38 $generated@@12 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@35 ($generated@@42 $generated@@40 $generated@@41) $generated@@65 $generated@@66) $generated@@43))) ($generated@@44 0))))
 :pattern ( ($generated@@30 $generated@@65 $generated@@66) ($generated@@31 $generated@@65))
))))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@34 $generated@@35 $generated@@69 $generated@@67)  (or (= $generated@@69 $generated@@33) (= ($generated@@68 $generated@@69) $generated@@67)))
 :pattern ( ($generated@@34 $generated@@35 $generated@@69 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@37 $generated@@35 $generated@@70 $generated@@36 $generated@@71) ($generated@@37 $generated@@35 $generated@@70 $generated@@67 $generated@@71))
 :pattern ( ($generated@@37 $generated@@35 $generated@@70 $generated@@36 $generated@@71))
 :pattern ( ($generated@@37 $generated@@35 $generated@@70 $generated@@67 $generated@@71))
)))
(assert (= ($generated@@26 $generated@@43) 0))
(assert (= ($generated@@72 $generated@@5 $generated@@9) $generated@@43))
(assert  (not ($generated@@73 $generated@@43)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@37 $generated@@35 $generated@@74 $generated@@67 $generated@@75)  (or (= $generated@@74 $generated@@33) ($generated@@15 ($generated@@38 $generated@@11 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@35 ($generated@@42 $generated@@40 $generated@@41) $generated@@75 $generated@@74) $generated@@3)))))
 :pattern ( ($generated@@37 $generated@@35 $generated@@74 $generated@@67 $generated@@75))
)))
(assert (forall (($generated@@76 Int) ) (! (= ($generated@@44 $generated@@76) $generated@@76)
 :pattern ( ($generated@@44 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@77 $generated@@79 $generated@@78) $generated@@78)
 :pattern ( ($generated@@77 $generated@@79 $generated@@78))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@80 $generated@@82 ($generated@@38 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@38 $generated@@82 $generated@@81))
)))
(assert ($generated@@73 $generated@@3))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (!  (=> (and (and ($generated@@31 $generated@@83) (and (or (not (= $generated@@84 $generated@@33)) (not true)) (= ($generated@@68 $generated@@84) $generated@@67))) ($generated@@15 ($generated@@38 $generated@@11 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@35 ($generated@@42 $generated@@40 $generated@@41) $generated@@83 $generated@@84) $generated@@3)))) ($generated@@37 $generated@@12 ($generated@@38 $generated@@12 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@35 ($generated@@42 $generated@@40 $generated@@41) $generated@@83 $generated@@84) $generated@@43)) $generated@@0 $generated@@83))
 :pattern ( ($generated@@38 $generated@@12 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@35 ($generated@@42 $generated@@40 $generated@@41) $generated@@83 $generated@@84) $generated@@43)))
)))
(assert  (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@85 $generated@@88 $generated@@89 $generated@@90 ($generated@@87 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@93 $generated@@94) $generated@@91)
 :weight 0
)) (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@85 $generated@@95 $generated@@96 $generated@@97 ($generated@@87 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@85 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@85 $generated@@104 $generated@@105 $generated@@106 ($generated@@87 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@85 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)))))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@15 ($generated@@85 $generated@@35 $generated@@40 $generated@@11 ($generated@@86 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))  (=> (and (or (not (= $generated@@117 $generated@@113)) (not true)) ($generated@@15 ($generated@@38 $generated@@11 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@35 ($generated@@42 $generated@@40 $generated@@41) $generated@@114 $generated@@117) $generated@@115)))) (= $generated@@117 $generated@@116)))
 :pattern ( ($generated@@85 $generated@@35 $generated@@40 $generated@@11 ($generated@@86 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))
)))
(assert (forall (($generated@@119 T@U) ) (! (= ($generated@@34 $generated@@35 $generated@@119 $generated@@36)  (and ($generated@@34 $generated@@35 $generated@@119 $generated@@67) (or (not (= $generated@@119 $generated@@33)) (not true))))
 :pattern ( ($generated@@34 $generated@@35 $generated@@119 $generated@@36))
 :pattern ( ($generated@@34 $generated@@35 $generated@@119 $generated@@67))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (and (= ($generated@@120 ($generated@@72 $generated@@121 $generated@@122)) $generated@@121) (= ($generated@@28 ($generated@@72 $generated@@121 $generated@@122)) $generated@@122))
 :pattern ( ($generated@@72 $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@38 $generated@@124 ($generated@@80 $generated@@124 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@80 $generated@@124 $generated@@123))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> (and ($generated@@31 $generated@@125) (and (or (not (= $generated@@126 $generated@@33)) (not true)) (= ($generated@@68 $generated@@126) $generated@@67))) ($generated@@34 $generated@@12 ($generated@@38 $generated@@12 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@35 ($generated@@42 $generated@@40 $generated@@41) $generated@@125 $generated@@126) $generated@@43)) $generated@@0))
 :pattern ( ($generated@@38 $generated@@12 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@35 ($generated@@42 $generated@@40 $generated@@41) $generated@@125 $generated@@126) $generated@@43)))
)))
(assert (= ($generated@@27 $generated@@67) $generated@@6))
(assert (= ($generated@@127 $generated@@67) $generated@@8))
(assert (= ($generated@@27 $generated@@36) $generated@@7))
(assert (= ($generated@@127 $generated@@36) $generated@@8))
(assert (forall (($generated@@128 Int) ) (! (= ($generated@@80 $generated@@12 ($generated@@16 ($generated@@44 $generated@@128))) ($generated@@77 $generated@@41 ($generated@@80 $generated@@12 ($generated@@16 $generated@@128))))
 :pattern ( ($generated@@80 $generated@@12 ($generated@@16 ($generated@@44 $generated@@128))))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@T) ) (! (= ($generated@@80 $generated@@130 ($generated@@77 $generated@@130 $generated@@129)) ($generated@@77 $generated@@41 ($generated@@80 $generated@@130 $generated@@129)))
 :pattern ( ($generated@@80 $generated@@130 ($generated@@77 $generated@@130 $generated@@129)))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (! ($generated@@37 $generated@@12 $generated@@132 $generated@@0 $generated@@131)
 :pattern ( ($generated@@37 $generated@@12 $generated@@132 $generated@@0 $generated@@131))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (! ($generated@@37 $generated@@11 $generated@@134 $generated $generated@@133)
 :pattern ( ($generated@@37 $generated@@11 $generated@@134 $generated $generated@@133))
)))
(assert (forall (($generated@@135 T@U) ) (! ($generated@@34 $generated@@12 $generated@@135 $generated@@0)
 :pattern ( ($generated@@34 $generated@@12 $generated@@135 $generated@@0))
)))
(assert (forall (($generated@@136 T@U) ) (! ($generated@@34 $generated@@11 $generated@@136 $generated)
 :pattern ( ($generated@@34 $generated@@11 $generated@@136 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@137 () Bool)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@142  (=> (and (and (= $generated@@137 ($generated@@15 ($generated@@85 $generated@@35 $generated@@40 $generated@@11 $generated@@138 $generated@@139 $generated@@43))) (= ($generated@@30 $generated@@140 $generated@@139) (>= ($generated@@17 ($generated@@38 $generated@@12 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@35 ($generated@@42 $generated@@40 $generated@@41) $generated@@140 $generated@@139) $generated@@43))) ($generated@@44 0)))) (and ($generated@@34 $generated@@11 ($generated@@14 ($generated@@30 $generated@@140 $generated@@139)) $generated) (= (ControlFlow 0 3) (- 0 2)))) $generated@@137)))
(let (($generated@@143 true))
(let (($generated@@144  (=> (= $generated@@138 ($generated@@86 $generated@@33 $generated@@140 $generated@@3 $generated@@139)) (and (=> (= (ControlFlow 0 4) 1) $generated@@143) (=> (= (ControlFlow 0 4) 3) $generated@@142)))))
(let (($generated@@145  (=> (and ($generated@@31 $generated@@140) ($generated@@141 $generated@@140)) (=> (and (and (or (not (= $generated@@139 $generated@@33)) (not true)) (and ($generated@@34 $generated@@35 $generated@@139 $generated@@36) ($generated@@37 $generated@@35 $generated@@139 $generated@@36 $generated@@140))) (and (= 0 $generated@@29) (= (ControlFlow 0 5) 4))) $generated@@144))))
$generated@@145)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
