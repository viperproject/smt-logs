(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@31 (Int) Int)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@42 () Int)
(declare-fun $generated@@43 (T@U) Int)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 (T@U) Int)
(declare-fun $generated@@47 (Int Int) Int)
(declare-fun $generated@@50 (Int) T@U)
(declare-fun $generated@@53 () T@U)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@T T@T) T@T)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@122 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated) $generated@@0))
(assert (= ($generated@@9 $generated@@28) 3))
(assert (forall (($generated@@30 T@U) ) (!  (=> ($generated@@27 $generated@@28 $generated@@30 $generated@@29) ($generated@@26 $generated@@30))
 :pattern ( ($generated@@26 $generated@@30) ($generated@@27 $generated@@28 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@32 Int) ) (! (= ($generated@@31 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@26 $generated@@37) (= ($generated@@36 $generated@@37) $generated@@4))
 :pattern ( ($generated@@26 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 ($generated@@38 $generated@@41 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@38 $generated@@41 $generated@@40))
)))
(assert  (=> (<= 3 $generated@@42) (forall (($generated@@48 T@U) ) (!  (=> (or ($generated@@44 $generated@@48) (and (< 3 $generated@@42) ($generated@@27 $generated@@28 $generated@@48 $generated@@45))) (and ($generated@@26 $generated@@48) (= ($generated@@43 $generated@@48) (ite (<= ($generated@@46 $generated@@48) ($generated@@31 0)) ($generated@@47 1 ($generated@@31 0)) 1))))
 :pattern ( ($generated@@43 $generated@@48))
))))
(assert  (=> (<= 3 $generated@@42) (forall (($generated@@49 T@U) ) (!  (=> (or ($generated@@44 ($generated@@33 $generated@@28 $generated@@49)) (and (< 3 $generated@@42) ($generated@@27 $generated@@28 $generated@@49 $generated@@45))) (and ($generated@@26 ($generated@@33 $generated@@28 $generated@@49)) (= ($generated@@43 ($generated@@33 $generated@@28 $generated@@49)) (ite (<= ($generated@@31 ($generated@@46 ($generated@@33 $generated@@28 $generated@@49))) ($generated@@31 0)) ($generated@@47 1 ($generated@@31 0)) 1))))
 :weight 3
 :pattern ( ($generated@@43 ($generated@@33 $generated@@28 $generated@@49)))
))))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@26 $generated@@51) (exists (($generated@@52 Int) ) (= $generated@@51 ($generated@@50 $generated@@52))))
 :pattern ( ($generated@@26 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@54 $generated@@45)  (and ($generated@@27 $generated@@28 $generated@@54 $generated@@53) (or (not (= ($generated@@46 $generated@@54) 0)) (not true))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@54 $generated@@45))
)))
(assert (forall (($generated@@55 Int) ($generated@@56 Int) ) (! (= ($generated@@47 $generated@@55 $generated@@56) (div $generated@@55 $generated@@56))
 :pattern ( ($generated@@47 $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@57 $generated@@53)  (and ($generated@@27 $generated@@28 $generated@@57 $generated@@29) (>= ($generated@@46 $generated@@57) ($generated@@31 0))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@57 $generated@@53))
)))
(assert (forall (($generated@@58 Int) ) (! (= ($generated@@36 ($generated@@50 $generated@@58)) $generated@@4)
 :pattern ( ($generated@@50 $generated@@58))
)))
(assert (forall (($generated@@59 Int) ) (! (= ($generated@@46 ($generated@@50 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@50 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@38 $generated@@61 ($generated@@39 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@39 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@62 Int) ) (! (= ($generated@@27 $generated@@28 ($generated@@50 $generated@@62) $generated@@29) ($generated@@27 $generated@@11 ($generated@@15 $generated@@62) $generated))
 :pattern ( ($generated@@27 $generated@@28 ($generated@@50 $generated@@62) $generated@@29))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@63 $generated@@74 $generated@@75 $generated@@76 ($generated@@70 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@79 $generated@@80) $generated@@77)
 :weight 0
)) (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@63 $generated@@81 $generated@@82 $generated@@83 ($generated@@70 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@63 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@96 $generated@@98) (= ($generated@@63 $generated@@90 $generated@@91 $generated@@92 ($generated@@70 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@63 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)))) (= ($generated@@9 $generated@@64) 4)) (= ($generated@@9 $generated@@65) 5)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@67 $generated@@99 $generated@@100 ($generated@@71 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@103) $generated@@101)
 :weight 0
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@108 $generated@@109) (= ($generated@@67 $generated@@104 $generated@@105 ($generated@@71 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@109) ($generated@@67 $generated@@104 $generated@@105 $generated@@107 $generated@@109)))
 :weight 0
))) (= ($generated@@9 $generated@@68) 6)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (= ($generated@@9 ($generated@@69 $generated@@110 $generated@@111)) 7))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@72 ($generated@@69 $generated@@112 $generated@@113)) $generated@@112)
 :pattern ( ($generated@@69 $generated@@112 $generated@@113))
))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@73 ($generated@@69 $generated@@114 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@69 $generated@@114 $generated@@115))
))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@14 ($generated@@63 $generated@@64 $generated@@65 $generated@@10 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@14 ($generated@@38 $generated@@10 ($generated@@67 $generated@@65 $generated@@68 ($generated@@67 $generated@@64 ($generated@@69 $generated@@65 $generated@@68) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@63 $generated@@64 $generated@@65 $generated@@10 ($generated@@66 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (= ($generated@@25 $generated@@45) $generated@@2))
(assert (= ($generated@@122 $generated@@45) $generated@@6))
(assert (= ($generated@@25 $generated@@29) $generated@@3))
(assert (= ($generated@@122 $generated@@29) $generated@@7))
(assert (= ($generated@@25 $generated@@53) $generated@@5))
(assert (= ($generated@@122 $generated@@53) $generated@@8))
(assert (forall (($generated@@123 Int) ) (! (= ($generated@@39 $generated@@11 ($generated@@15 ($generated@@31 $generated@@123))) ($generated@@33 $generated@@68 ($generated@@39 $generated@@11 ($generated@@15 $generated@@123))))
 :pattern ( ($generated@@39 $generated@@11 ($generated@@15 ($generated@@31 $generated@@123))))
)))
(assert (forall (($generated@@124 Int) ) (! (= ($generated@@50 ($generated@@31 $generated@@124)) ($generated@@33 $generated@@28 ($generated@@50 $generated@@124)))
 :pattern ( ($generated@@50 ($generated@@31 $generated@@124)))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@T) ) (! (= ($generated@@39 $generated@@126 ($generated@@33 $generated@@126 $generated@@125)) ($generated@@33 $generated@@68 ($generated@@39 $generated@@126 $generated@@125)))
 :pattern ( ($generated@@39 $generated@@126 ($generated@@33 $generated@@126 $generated@@125)))
)))
(assert (forall (($generated@@127 T@U) ) (! ($generated@@27 $generated@@11 $generated@@127 $generated)
 :pattern ( ($generated@@27 $generated@@11 $generated@@127 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@134 true))
(let (($generated@@135  (=> (and (<= ($generated@@46 $generated@@128) ($generated@@31 0)) (= (ControlFlow 0 3) (- 0 2))) (or (not (= ($generated@@31 0) 0)) (not true)))))
(let (($generated@@136  (=> ($generated@@26 $generated@@128) (and (=> (= (ControlFlow 0 5) 3) $generated@@135) (=> (= (ControlFlow 0 5) 4) $generated@@134)))))
(let (($generated@@137 true))
(let (($generated@@138  (=> (= $generated@@129 ($generated@@66 $generated@@130 $generated@@131 $generated@@1 false)) (and (=> (= (ControlFlow 0 6) 1) $generated@@137) (=> (= (ControlFlow 0 6) 5) $generated@@136)))))
(let (($generated@@139  (=> (and (and (and ($generated@@132 $generated@@131) ($generated@@133 $generated@@131)) ($generated@@27 $generated@@28 $generated@@128 $generated@@45)) (and (= 3 $generated@@42) (= (ControlFlow 0 7) 6))) $generated@@138)))
$generated@@139)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
