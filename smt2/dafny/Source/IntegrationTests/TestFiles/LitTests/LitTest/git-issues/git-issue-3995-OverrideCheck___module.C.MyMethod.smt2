(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@37 () Int)
(declare-fun $generated@@38 (Bool T@U Int) Bool)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (Int) Int)
(declare-fun $generated@@41 (T@U Int) Bool)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@73 (T@U T@U) Bool)
(declare-fun $generated@@80 (T@T T@U) T@U)
(declare-fun $generated@@102 (T@U) T@U)
(declare-fun $generated@@103 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert ($generated@@22 $generated@@23))
(assert (= ($generated@@6 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@28 $generated@@23)  (or (= $generated@@28 $generated@@26) (= ($generated@@27 $generated@@28) $generated@@23)))
 :pattern ( ($generated@@24 $generated@@25 $generated@@28 $generated@@23))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@29 $generated@@25 $generated@@32 $generated@@30 $generated@@33) ($generated@@29 $generated@@25 $generated@@32 $generated@@31 $generated@@33))
 :pattern ( ($generated@@29 $generated@@25 $generated@@32 $generated@@30 $generated@@33))
 :pattern ( ($generated@@29 $generated@@25 $generated@@32 $generated@@31 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@29 $generated@@25 $generated@@35 $generated@@34 $generated@@36) ($generated@@29 $generated@@25 $generated@@35 $generated@@23 $generated@@36))
 :pattern ( ($generated@@29 $generated@@25 $generated@@35 $generated@@34 $generated@@36))
 :pattern ( ($generated@@29 $generated@@25 $generated@@35 $generated@@23 $generated@@36))
)))
(assert  (=> (<= 0 $generated@@37) (forall (($generated@@42 T@U) ($generated@@43 Int) ) (!  (=> (or ($generated@@41 ($generated@@39 $generated@@25 $generated@@42) ($generated@@40 $generated@@43)) (and (< 0 $generated@@37) (and (or (not (= $generated@@42 $generated@@26)) (not true)) ($generated@@24 $generated@@25 $generated@@42 $generated@@34)))) (= ($generated@@38 true ($generated@@39 $generated@@25 $generated@@42) ($generated@@40 $generated@@43)) ($generated@@11 ($generated@@39 $generated@@7 ($generated@@10 true)))))
 :weight 3
 :pattern ( ($generated@@38 true ($generated@@39 $generated@@25 $generated@@42) ($generated@@40 $generated@@43)))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@45 $generated@@52 $generated@@53 ($generated@@49 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@56) $generated@@54)
 :weight 0
)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (or (= $generated@@61 $generated@@62) (= ($generated@@45 $generated@@57 $generated@@58 ($generated@@49 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@59) $generated@@62) ($generated@@45 $generated@@57 $generated@@58 $generated@@60 $generated@@62)))
 :weight 0
))) (= ($generated@@6 $generated@@46) 4)) (= ($generated@@6 $generated@@47) 5)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (= ($generated@@6 ($generated@@48 $generated@@63 $generated@@64)) 6))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@50 ($generated@@48 $generated@@65 $generated@@66)) $generated@@65)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (! (= ($generated@@51 ($generated@@48 $generated@@67 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@48 $generated@@67 $generated@@68))
))))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@29 $generated@@25 $generated@@69 $generated@@31 $generated@@70)  (or (= $generated@@69 $generated@@26) ($generated@@11 ($generated@@44 $generated@@7 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@25 ($generated@@48 $generated@@46 $generated@@47) $generated@@70 $generated@@69) $generated)))))
 :pattern ( ($generated@@29 $generated@@25 $generated@@69 $generated@@31 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@29 $generated@@25 $generated@@71 $generated@@23 $generated@@72)  (or (= $generated@@71 $generated@@26) ($generated@@11 ($generated@@44 $generated@@7 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@25 ($generated@@48 $generated@@46 $generated@@47) $generated@@72 $generated@@71) $generated)))))
 :pattern ( ($generated@@29 $generated@@25 $generated@@71 $generated@@23 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> ($generated@@73 $generated@@74 $generated@@75) (forall (($generated@@76 T@U) ) (!  (=> ($generated@@11 ($generated@@44 $generated@@7 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@25 ($generated@@48 $generated@@46 $generated@@47) $generated@@74 $generated@@76) $generated))) ($generated@@11 ($generated@@44 $generated@@7 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@25 ($generated@@48 $generated@@46 $generated@@47) $generated@@75 $generated@@76) $generated))))
 :pattern ( ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@25 ($generated@@48 $generated@@46 $generated@@47) $generated@@75 $generated@@76) $generated))
)))
 :pattern ( ($generated@@73 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@77 Int) ) (! (= ($generated@@40 $generated@@77) $generated@@77)
 :pattern ( ($generated@@40 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@39 $generated@@79 $generated@@78) $generated@@78)
 :pattern ( ($generated@@39 $generated@@79 $generated@@78))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@80 $generated@@82 ($generated@@44 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@44 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@T) ) (!  (=> ($generated@@73 $generated@@83 $generated@@84) (=> ($generated@@29 $generated@@87 $generated@@85 $generated@@86 $generated@@83) ($generated@@29 $generated@@87 $generated@@85 $generated@@86 $generated@@84)))
 :pattern ( ($generated@@73 $generated@@83 $generated@@84) ($generated@@29 $generated@@87 $generated@@85 $generated@@86 $generated@@83))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@88 $generated@@30)  (and ($generated@@24 $generated@@25 $generated@@88 $generated@@31) (or (not (= $generated@@88 $generated@@26)) (not true))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@88 $generated@@30))
 :pattern ( ($generated@@24 $generated@@25 $generated@@88 $generated@@31))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@89 $generated@@34)  (and ($generated@@24 $generated@@25 $generated@@89 $generated@@23) (or (not (= $generated@@89 $generated@@26)) (not true))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@89 $generated@@34))
 :pattern ( ($generated@@24 $generated@@25 $generated@@89 $generated@@23))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> ($generated@@29 $generated@@25 $generated@@90 $generated@@23 $generated@@91) ($generated@@29 $generated@@25 $generated@@90 $generated@@31 $generated@@91))
 :pattern ( ($generated@@29 $generated@@25 $generated@@90 $generated@@23 $generated@@91))
)))
(assert  (=> (<= 0 $generated@@37) (forall (($generated@@92 T@U) ($generated@@93 Int) ) (!  (=> (or ($generated@@41 $generated@@92 $generated@@93) (and (< 0 $generated@@37) (and (or (not (= $generated@@92 $generated@@26)) (not true)) ($generated@@24 $generated@@25 $generated@@92 $generated@@34)))) (= ($generated@@38 true $generated@@92 $generated@@93) ($generated@@11 ($generated@@39 $generated@@7 ($generated@@10 true)))))
 :pattern ( ($generated@@38 true $generated@@92 $generated@@93))
))))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (=> (or (not (= $generated@@94 $generated@@96)) (not true)) (=> (and ($generated@@73 $generated@@94 $generated@@95) ($generated@@73 $generated@@95 $generated@@96)) ($generated@@73 $generated@@94 $generated@@96)))
 :pattern ( ($generated@@73 $generated@@94 $generated@@95) ($generated@@73 $generated@@95 $generated@@96))
)))
(assert  (=> (<= 0 $generated@@37) (forall (($generated@@97 T@U) ($generated@@98 Int) ) (!  (=> (or ($generated@@41 $generated@@97 ($generated@@40 $generated@@98)) (and (< 0 $generated@@37) (and (or (not (= $generated@@97 $generated@@26)) (not true)) ($generated@@24 $generated@@25 $generated@@97 $generated@@34)))) (= ($generated@@38 true $generated@@97 ($generated@@40 $generated@@98)) ($generated@@11 ($generated@@39 $generated@@7 ($generated@@10 true)))))
 :weight 3
 :pattern ( ($generated@@38 true $generated@@97 ($generated@@40 $generated@@98)))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@T) ) (! (= ($generated@@44 $generated@@100 ($generated@@80 $generated@@100 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@80 $generated@@100 $generated@@99))
)))
(assert (forall (($generated@@101 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@101 $generated@@23) ($generated@@24 $generated@@25 $generated@@101 $generated@@31))
 :pattern ( ($generated@@24 $generated@@25 $generated@@101 $generated@@23))
)))
(assert (= ($generated@@102 $generated@@31) $generated@@0))
(assert (= ($generated@@103 $generated@@31) $generated@@4))
(assert (= ($generated@@102 $generated@@30) $generated@@1))
(assert (= ($generated@@103 $generated@@30) $generated@@4))
(assert (= ($generated@@102 $generated@@23) $generated@@2))
(assert (= ($generated@@103 $generated@@23) $generated@@5))
(assert (= ($generated@@102 $generated@@34) $generated@@3))
(assert (= ($generated@@103 $generated@@34) $generated@@5))
(assert (forall (($generated@@104 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@104 $generated@@31)  (or (= $generated@@104 $generated@@26) ($generated@@22 ($generated@@27 $generated@@104))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@104 $generated@@31))
)))
(assert (forall (($generated@@105 Int) ) (! (= ($generated@@80 $generated@@8 ($generated@@12 ($generated@@40 $generated@@105))) ($generated@@39 $generated@@47 ($generated@@80 $generated@@8 ($generated@@12 $generated@@105))))
 :pattern ( ($generated@@80 $generated@@8 ($generated@@12 ($generated@@40 $generated@@105))))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@T) ) (! (= ($generated@@80 $generated@@107 ($generated@@39 $generated@@107 $generated@@106)) ($generated@@39 $generated@@47 ($generated@@80 $generated@@107 $generated@@106)))
 :pattern ( ($generated@@80 $generated@@107 ($generated@@39 $generated@@107 $generated@@106)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@108 () Bool)
(declare-fun $generated@@109 () T@U)
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 (T@U) Bool)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@114  (=> ($generated@@38 $generated@@108 $generated@@109 $generated@@110) (and (=> (= (ControlFlow 0 2) (- 0 5)) ($generated@@38 $generated@@108 $generated@@109 $generated@@110)) (=> ($generated@@38 $generated@@108 $generated@@109 $generated@@110) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= $generated@@110 $generated@@110)) (=> (<= $generated@@110 $generated@@110) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@115 T@U) ($generated@@116 T@U) ) true)) (=> (forall (($generated@@117 T@U) ($generated@@118 T@U) ) true) (=> (= (ControlFlow 0 2) (- 0 1)) (forall (($generated@@119 T@U) ($generated@@120 T@U) ) true)))))))))))
(let (($generated@@121  (=> (and ($generated@@111 $generated@@112) ($generated@@113 $generated@@112)) (=> (and (and (or (not (= $generated@@109 $generated@@26)) (not true)) (and ($generated@@24 $generated@@25 $generated@@109 $generated@@34) ($generated@@29 $generated@@25 $generated@@109 $generated@@34 $generated@@112))) (and (= 1 $generated@@37) (= (ControlFlow 0 6) 2))) $generated@@114))))
$generated@@121)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
