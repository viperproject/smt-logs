(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@30 (Int) T@U)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 (T@T T@U T@U) Bool)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@45 (T@U) Bool)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@55 (T@U T@U T@U) Bool)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@65 () Int)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@U T@U) Bool)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@93 (T@U) Int)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 () T@T)
(declare-fun $generated@@98 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@99 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@100 (T@T T@T) T@T)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@104 (T@T) T@T)
(declare-fun $generated@@154 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@155 (T@U) Bool)
(declare-fun $generated@@158 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@1))
(assert (= ($generated@@24 $generated@@0) $generated@@2))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ($generated@@28 T@U) ) (!  (=> (and ($generated@@25 $generated@@26 $generated@@27) ($generated@@25 $generated@@27 $generated@@28)) ($generated@@25 $generated@@26 $generated@@28))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27) ($generated@@25 $generated@@27 $generated@@28))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27) ($generated@@25 $generated@@26 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 Int) ($generated@@34 Int) ) (!  (=> (and (and (<= 0 $generated@@33) (<= 0 $generated@@34)) (<= (+ $generated@@33 $generated@@34) ($generated@@31 $generated@@32))) (= ($generated@@29 ($generated@@29 $generated@@32 ($generated@@30 $generated@@33)) ($generated@@30 $generated@@34)) ($generated@@29 $generated@@32 ($generated@@30 (+ $generated@@33 $generated@@34)))))
 :pattern ( ($generated@@29 ($generated@@29 $generated@@32 ($generated@@30 $generated@@33)) ($generated@@30 $generated@@34)))
)))
(assert (= ($generated@@35 $generated@@36) $generated@@6))
(assert (= ($generated@@8 $generated@@38) 3))
(assert ($generated@@37 $generated@@38 $generated@@36 $generated@@39))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 $generated@@41) $generated@@41)
 :pattern ( ($generated@@40 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@43 $generated@@44) (= ($generated@@35 $generated@@44) $generated@@5))
 :pattern ( ($generated@@43 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@45 $generated@@46) (= ($generated@@35 $generated@@46) $generated@@6))
 :pattern ( ($generated@@45 $generated@@46))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@47 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@47 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@45 $generated@@51) (= $generated@@51 $generated@@36))
 :pattern ( ($generated@@45 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (!  (=> ($generated@@43 $generated@@53) (exists (($generated@@54 T@U) ) (= $generated@@53 ($generated@@52 $generated@@54))))
 :pattern ( ($generated@@43 $generated@@53))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@55 ($generated@@56 $generated@@57) $generated@@58 $generated@@59) ($generated@@55 $generated@@57 $generated@@58 $generated@@59))
 :pattern ( ($generated@@55 ($generated@@56 $generated@@57) $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (and ($generated@@60 $generated@@62) (<= ($generated@@31 $generated@@62) ($generated@@31 $generated@@61))) (and (= ($generated@@60 ($generated@@29 $generated@@61 $generated@@62)) ($generated@@60 $generated@@61)) (= ($generated@@31 ($generated@@29 $generated@@61 $generated@@62)) (- ($generated@@31 $generated@@61) ($generated@@31 $generated@@62)))))
 :pattern ( ($generated@@29 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 Int) ) (!  (=> (<= 0 $generated@@63) (and ($generated@@60 ($generated@@30 $generated@@63)) (= ($generated@@31 ($generated@@30 $generated@@63)) $generated@@63)))
 :pattern ( ($generated@@30 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@37 $generated@@38 ($generated@@52 $generated@@64) $generated@@39) ($generated@@37 $generated@@38 $generated@@64 $generated@@39))
 :pattern ( ($generated@@37 $generated@@38 ($generated@@52 $generated@@64) $generated@@39))
)))
(assert (= ($generated@@8 $generated@@66) 4))
(assert  (=> (<= 1 $generated@@65) (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> (or ($generated@@67 ($generated@@40 $generated@@66 $generated@@70) ($generated@@40 $generated@@38 $generated@@71)) (and (< 1 $generated@@65) ($generated@@37 $generated@@38 $generated@@71 $generated@@39))) (and (=> (or (not (= ($generated@@40 $generated@@66 $generated@@70) ($generated@@40 $generated@@66 ($generated@@30 0)))) (not true)) (and (=> ($generated@@13 ($generated@@40 $generated@@9 ($generated@@12 (< 0 ($generated@@31 ($generated@@40 $generated@@66 $generated@@70)))))) (=> ($generated@@13 ($generated@@40 $generated@@9 ($generated@@12 ($generated@@43 ($generated@@40 $generated@@38 $generated@@71))))) (let (($generated@@72 ($generated@@40 $generated@@38 ($generated@@68 ($generated@@40 $generated@@38 $generated@@71)))))
($generated@@67 ($generated@@40 $generated@@66 ($generated@@29 $generated@@70 ($generated@@30 1))) $generated@@72)))) (=> (not ($generated@@13 ($generated@@40 $generated@@9 ($generated@@12 (< 0 ($generated@@31 ($generated@@40 $generated@@66 $generated@@70))))))) (forall (($generated@@73 T@U) ) (!  (=> ($generated@@25 $generated@@73 $generated@@70) ($generated@@67 $generated@@73 ($generated@@40 $generated@@38 $generated@@71)))
 :pattern ( ($generated@@55 ($generated@@56 $generated@@69) $generated@@73 $generated@@71))
 :pattern ( ($generated@@25 $generated@@73 $generated@@70))
))))) (= ($generated@@55 ($generated@@56 $generated@@69) ($generated@@40 $generated@@66 $generated@@70) ($generated@@40 $generated@@38 $generated@@71)) (ite (= ($generated@@40 $generated@@66 $generated@@70) ($generated@@40 $generated@@66 ($generated@@30 0))) true (ite (< 0 ($generated@@31 ($generated@@40 $generated@@66 $generated@@70))) (ite ($generated@@43 ($generated@@40 $generated@@38 $generated@@71)) ($generated@@13 (let (($generated@@74 ($generated@@40 $generated@@38 ($generated@@68 ($generated@@40 $generated@@38 $generated@@71)))))
($generated@@40 $generated@@9 ($generated@@12 ($generated@@55 ($generated@@56 $generated@@69) ($generated@@40 $generated@@66 ($generated@@29 $generated@@70 ($generated@@30 1))) $generated@@74))))) true) (forall (($generated@@75 T@U) ) (!  (=> ($generated@@25 $generated@@75 $generated@@70) ($generated@@55 ($generated@@56 $generated@@69) $generated@@75 ($generated@@40 $generated@@38 $generated@@71)))
 :pattern ( ($generated@@55 ($generated@@56 $generated@@69) $generated@@75 $generated@@71))
 :pattern ( ($generated@@25 $generated@@75 $generated@@70))
)))))))
 :weight 3
 :pattern ( ($generated@@55 ($generated@@56 $generated@@69) ($generated@@40 $generated@@66 $generated@@70) ($generated@@40 $generated@@38 $generated@@71)))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (or ($generated@@25 $generated@@76 $generated@@77) (= $generated@@76 $generated@@77)) ($generated@@25 $generated@@77 $generated@@76))
 :pattern ( ($generated@@25 $generated@@76 $generated@@77) ($generated@@25 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@37 $generated@@38 $generated@@78 $generated@@39) (or ($generated@@43 $generated@@78) ($generated@@45 $generated@@78)))
 :pattern ( ($generated@@45 $generated@@78) ($generated@@37 $generated@@38 $generated@@78 $generated@@39))
 :pattern ( ($generated@@43 $generated@@78) ($generated@@37 $generated@@38 $generated@@78 $generated@@39))
)))
(assert  (=> (<= 1 $generated@@65) (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (=> (or ($generated@@67 $generated@@80 $generated@@81) (and (< 1 $generated@@65) ($generated@@37 $generated@@38 $generated@@81 $generated@@39))) (and (=> (or (not (= $generated@@80 ($generated@@40 $generated@@66 ($generated@@30 0)))) (not true)) (and (=> (< 0 ($generated@@31 $generated@@80)) (=> ($generated@@43 $generated@@81) (let (($generated@@82 ($generated@@68 $generated@@81)))
($generated@@67 ($generated@@29 $generated@@80 ($generated@@30 1)) $generated@@82)))) (=> (not (< 0 ($generated@@31 $generated@@80))) (forall (($generated@@83 T@U) ) (!  (=> ($generated@@25 $generated@@83 $generated@@80) ($generated@@67 $generated@@83 $generated@@81))
 :pattern ( ($generated@@55 $generated@@79 $generated@@83 $generated@@81))
 :pattern ( ($generated@@25 $generated@@83 $generated@@80))
))))) (= ($generated@@55 ($generated@@56 $generated@@79) $generated@@80 $generated@@81) (ite (= $generated@@80 ($generated@@40 $generated@@66 ($generated@@30 0))) true (ite (< 0 ($generated@@31 $generated@@80)) (ite ($generated@@43 $generated@@81) (let (($generated@@84 ($generated@@68 $generated@@81)))
($generated@@55 $generated@@79 ($generated@@29 $generated@@80 ($generated@@30 1)) $generated@@84)) true) (forall (($generated@@85 T@U) ) (!  (=> ($generated@@25 $generated@@85 $generated@@80) ($generated@@55 $generated@@79 $generated@@85 $generated@@81))
 :pattern ( ($generated@@55 $generated@@79 $generated@@85 $generated@@81))
 :pattern ( ($generated@@25 $generated@@85 $generated@@80))
)))))))
 :pattern ( ($generated@@55 ($generated@@56 $generated@@79) $generated@@80 $generated@@81))
))))
(assert (forall (($generated@@86 T@U) ) (! (<= 0 ($generated@@31 $generated@@86))
 :pattern ( ($generated@@31 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@35 ($generated@@52 $generated@@87)) $generated@@5)
 :pattern ( ($generated@@52 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@68 ($generated@@52 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@52 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@47 $generated@@90 ($generated@@48 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@48 $generated@@90 $generated@@89))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ) (!  (and (and (and (=> ($generated@@25 $generated@@91 $generated@@92) (or (not (= $generated@@91 $generated@@92)) (not true))) (=> (and ($generated@@60 $generated@@91) (not ($generated@@60 $generated@@92))) ($generated@@25 $generated@@91 $generated@@92))) (=> (and ($generated@@60 $generated@@91) ($generated@@60 $generated@@92)) (= ($generated@@25 $generated@@91 $generated@@92) (< ($generated@@31 $generated@@91) ($generated@@31 $generated@@92))))) (=> (and ($generated@@25 $generated@@91 $generated@@92) ($generated@@60 $generated@@92)) ($generated@@60 $generated@@91)))
 :pattern ( ($generated@@25 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ) (! (< ($generated@@93 $generated@@94) ($generated@@93 ($generated@@52 $generated@@94)))
 :pattern ( ($generated@@52 $generated@@94))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@95 $generated@@105 $generated@@106 $generated@@107 ($generated@@101 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@95 $generated@@112 $generated@@113 $generated@@114 ($generated@@101 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@95 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@95 $generated@@121 $generated@@122 $generated@@123 ($generated@@101 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@95 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))) (= ($generated@@8 $generated@@96) 5)) (= ($generated@@8 $generated@@97) 6)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@99 $generated@@130 $generated@@131 ($generated@@102 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@134) $generated@@132)
 :weight 0
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@139 $generated@@140) (= ($generated@@99 $generated@@135 $generated@@136 ($generated@@102 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@137) $generated@@140) ($generated@@99 $generated@@135 $generated@@136 $generated@@138 $generated@@140)))
 :weight 0
))) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (= ($generated@@8 ($generated@@100 $generated@@141 $generated@@142)) 7))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@103 ($generated@@100 $generated@@143 $generated@@144)) $generated@@143)
 :pattern ( ($generated@@100 $generated@@143 $generated@@144))
))) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (! (= ($generated@@104 ($generated@@100 $generated@@145 $generated@@146)) $generated@@146)
 :pattern ( ($generated@@100 $generated@@145 $generated@@146))
))))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 Bool) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (= ($generated@@13 ($generated@@95 $generated@@96 $generated@@97 $generated@@9 ($generated@@98 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))  (=> (and (or (not (= $generated@@151 $generated@@147)) (not true)) ($generated@@13 ($generated@@47 $generated@@9 ($generated@@99 $generated@@97 $generated@@66 ($generated@@99 $generated@@96 ($generated@@100 $generated@@97 $generated@@66) $generated@@148 $generated@@151) $generated@@149)))) $generated@@150))
 :pattern ( ($generated@@95 $generated@@96 $generated@@97 $generated@@9 ($generated@@98 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))
)))
(assert (forall (($generated@@153 T@U) ) (!  (=> ($generated@@60 $generated@@153) (= $generated@@153 ($generated@@30 ($generated@@31 $generated@@153))))
 :pattern ( ($generated@@31 $generated@@153))
 :pattern ( ($generated@@60 $generated@@153))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ) (!  (=> (and ($generated@@155 $generated@@157) ($generated@@37 $generated@@38 $generated@@156 $generated@@39)) ($generated@@154 $generated@@38 $generated@@156 $generated@@39 $generated@@157))
 :pattern ( ($generated@@154 $generated@@38 $generated@@156 $generated@@39 $generated@@157))
)))
(assert (= ($generated@@24 $generated@@39) $generated@@4))
(assert (= ($generated@@158 $generated@@39) $generated@@7))
(assert (= $generated@@36 ($generated@@40 $generated@@38 $generated@@36)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (!  (=> (and ($generated@@60 $generated@@160) (<= ($generated@@31 $generated@@160) ($generated@@31 $generated@@159))) (or (and (= $generated@@160 ($generated@@30 0)) (= ($generated@@29 $generated@@159 $generated@@160) $generated@@159)) (and (or (not (= $generated@@160 ($generated@@30 0))) (not true)) ($generated@@25 ($generated@@29 $generated@@159 $generated@@160) $generated@@159))))
 :pattern ( ($generated@@29 $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> (and ($generated@@155 $generated@@162) (and ($generated@@43 $generated@@161) ($generated@@154 $generated@@38 $generated@@161 $generated@@39 $generated@@162))) ($generated@@154 $generated@@38 ($generated@@68 $generated@@161) $generated@@39 $generated@@162))
 :pattern ( ($generated@@154 $generated@@38 ($generated@@68 $generated@@161) $generated@@39 $generated@@162))
)))
(assert (forall (($generated@@163 T@U) ) (! (= ($generated@@52 ($generated@@40 $generated@@38 $generated@@163)) ($generated@@40 $generated@@38 ($generated@@52 $generated@@163)))
 :pattern ( ($generated@@52 ($generated@@40 $generated@@38 $generated@@163)))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@T) ) (! (= ($generated@@48 $generated@@165 ($generated@@40 $generated@@165 $generated@@164)) ($generated@@40 $generated@@66 ($generated@@48 $generated@@165 $generated@@164)))
 :pattern ( ($generated@@48 $generated@@165 ($generated@@40 $generated@@165 $generated@@164)))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (! ($generated@@154 $generated@@9 $generated@@167 $generated $generated@@166)
 :pattern ( ($generated@@154 $generated@@9 $generated@@167 $generated $generated@@166))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ) (! ($generated@@154 $generated@@66 $generated@@169 $generated@@0 $generated@@168)
 :pattern ( ($generated@@154 $generated@@66 $generated@@169 $generated@@0 $generated@@168))
)))
(assert (forall (($generated@@170 T@U) ) (! ($generated@@37 $generated@@9 $generated@@170 $generated)
 :pattern ( ($generated@@37 $generated@@9 $generated@@170 $generated))
)))
(assert (forall (($generated@@171 T@U) ) (! ($generated@@37 $generated@@66 $generated@@171 $generated@@0)
 :pattern ( ($generated@@37 $generated@@66 $generated@@171 $generated@@0))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () T@U)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () T@U)
(declare-fun $generated@@180 () T@U)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let (($generated@@183 true))
(let (($generated@@184 true))
(let (($generated@@185  (=> (or (not (= $generated@@172 ($generated@@52 $generated@@173))) (not true)) (and (=> (= (ControlFlow 0 16) 14) $generated@@184) (=> (= (ControlFlow 0 16) 15) $generated@@183)))))
(let (($generated@@186  (=> (= $generated@@172 ($generated@@52 $generated@@173)) (=> (and (and ($generated@@37 $generated@@38 $generated@@173 $generated@@39) (= $generated@@174 $generated@@173)) (and ($generated@@37 $generated@@38 $generated@@174 $generated@@39) (= $generated@@175 $generated@@174))) (and (=> (= (ControlFlow 0 11) (- 0 13)) ($generated@@60 ($generated@@40 $generated@@66 ($generated@@30 1)))) (=> ($generated@@60 ($generated@@40 $generated@@66 ($generated@@30 1))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (<= ($generated@@31 ($generated@@40 $generated@@66 ($generated@@30 1))) ($generated@@31 $generated@@176))) (=> (<= ($generated@@31 ($generated@@40 $generated@@66 ($generated@@30 1))) ($generated@@31 $generated@@176)) (=> (and (and (= $generated@@177 ($generated@@29 $generated@@176 ($generated@@30 1))) ($generated@@154 $generated@@66 $generated@@177 $generated@@0 $generated@@178)) (and ($generated@@154 $generated@@38 $generated@@175 $generated@@39 $generated@@178) (= (ControlFlow 0 11) (- 0 10)))) (or ($generated@@25 $generated@@177 $generated@@176) (and (= $generated@@177 $generated@@176) (< ($generated@@93 $generated@@175) ($generated@@93 $generated@@172)))))))))))))
(let (($generated@@187  (=> (< 0 ($generated@@31 $generated@@176)) (and (=> (= (ControlFlow 0 17) 11) $generated@@186) (=> (= (ControlFlow 0 17) 16) $generated@@185)))))
(let (($generated@@188 true))
(let (($generated@@189  (=> (and (not ($generated@@25 $generated@@179 $generated@@176)) (= (ControlFlow 0 7) 4)) $generated@@188)))
(let (($generated@@190  (=> ($generated@@25 $generated@@179 $generated@@176) (=> (and ($generated@@154 $generated@@66 $generated@@179 $generated@@0 $generated@@178) ($generated@@154 $generated@@38 $generated@@172 $generated@@39 $generated@@178)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or ($generated@@25 $generated@@179 $generated@@176) (and (= $generated@@179 $generated@@176) (< ($generated@@93 $generated@@172) ($generated@@93 $generated@@172))))) (=> (or ($generated@@25 $generated@@179 $generated@@176) (and (= $generated@@179 $generated@@176) (< ($generated@@93 $generated@@172) ($generated@@93 $generated@@172)))) (=> (and ($generated@@67 $generated@@179 $generated@@172) (= (ControlFlow 0 5) 4)) $generated@@188)))))))
(let (($generated@@191  (and (=> (= (ControlFlow 0 8) 5) $generated@@190) (=> (= (ControlFlow 0 8) 7) $generated@@189))))
(let (($generated@@192 true))
(let (($generated@@193  (=> (not (< 0 ($generated@@31 $generated@@176))) (and (=> (= (ControlFlow 0 9) 8) $generated@@191) (=> (= (ControlFlow 0 9) 3) $generated@@192)))))
(let (($generated@@194  (=> (or (not (= $generated@@176 ($generated@@40 $generated@@66 ($generated@@30 0)))) (not true)) (and (=> (= (ControlFlow 0 18) 17) $generated@@187) (=> (= (ControlFlow 0 18) 9) $generated@@193)))))
(let (($generated@@195 true))
(let (($generated@@196 true))
(let (($generated@@197  (=> (= $generated@@180 ($generated@@98 $generated@@181 $generated@@178 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 19) 1) $generated@@196) (=> (= (ControlFlow 0 19) 2) $generated@@195)) (=> (= (ControlFlow 0 19) 18) $generated@@194)))))
(let (($generated@@198  (=> (and (and (and ($generated@@155 $generated@@178) ($generated@@182 $generated@@178)) ($generated@@37 $generated@@38 $generated@@172 $generated@@39)) (and (= 1 $generated@@65) (= (ControlFlow 0 20) 19))) $generated@@197)))
$generated@@198)))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
