(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@20 (T@U T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 () Bool)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 () Bool)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@38 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@45 (T@U) Bool)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@52 (T@T T@U T@U) Bool)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@66 (T@T T@T) T@T)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@119 (T@U) T@U)
(declare-fun $generated@@120 (T@U) T@U)
(declare-fun $generated@@121 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert ($generated@@18 $generated@@19))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! (= ($generated@@20 $generated@@22 $generated@@21 $generated@@23) ($generated@@20 $generated@@22 $generated@@19 $generated@@23))
 :pattern ( ($generated@@20 $generated@@22 $generated@@21 $generated@@23))
)))
(assert  (=> (<= 3 $generated@@24) (=> (or $generated@@25 (< 3 $generated@@24)) ($generated@@26 $generated@@27 $generated@@21))))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 ($generated@@31 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@34 $generated@@33))
)))
(assert  (=> $generated@@35 (and ($generated@@26 $generated@@36 $generated@@21) ($generated@@37 $generated@@36))))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@20 ($generated@@32 $generated@@42 $generated@@39) $generated@@40 $generated@@41) ($generated@@38 $generated@@42 $generated@@39 $generated@@40 $generated@@41))
 :pattern ( ($generated@@20 ($generated@@32 $generated@@42 $generated@@39) $generated@@40 $generated@@41))
)))
(assert  (=> (<= 2 $generated@@24) (forall (($generated@@44 T@U) ) (!  (=> (or ($generated@@43 $generated@@44) (and (< 2 $generated@@24) ($generated@@26 $generated@@44 $generated@@21))) (= ($generated@@37 $generated@@44) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@6 true)))))
 :pattern ( ($generated@@37 $generated@@44))
))))
(assert  (=> (<= 3 $generated@@24) (forall (($generated@@46 T@U) ) (!  (=> (or $generated@@25 (and (< 3 $generated@@24) ($generated@@45 $generated@@46))) (and $generated@@35 (= $generated@@27 (let (($generated@@47 $generated@@36))
$generated@@47))))
 :pattern ( $generated@@27 ($generated@@45 $generated@@46))
))))
(assert  (=> (<= 3 $generated@@24) (forall (($generated@@48 T@U) ) (!  (=> (or $generated@@25 (and (< 3 $generated@@24) ($generated@@45 $generated@@48))) (and $generated@@35 (= $generated@@27 (let (($generated@@49 $generated@@36))
$generated@@49))))
 :weight 3
 :pattern ( $generated@@27 ($generated@@45 $generated@@48))
))))
(assert (= ($generated@@2 $generated@@50) 3))
(assert  (=> (<= 2 $generated@@24) (forall (($generated@@51 T@U) ) (!  (=> (or ($generated@@43 ($generated@@28 $generated@@50 $generated@@51)) (and (< 2 $generated@@24) ($generated@@26 $generated@@51 $generated@@21))) (= ($generated@@37 ($generated@@28 $generated@@50 $generated@@51)) ($generated@@7 ($generated@@28 $generated@@3 ($generated@@6 true)))))
 :weight 3
 :pattern ( ($generated@@37 ($generated@@28 $generated@@50 $generated@@51)))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@26 ($generated@@32 $generated@@55 $generated@@53) $generated@@54) ($generated@@52 $generated@@55 $generated@@53 $generated@@54))
 :pattern ( ($generated@@26 ($generated@@32 $generated@@55 $generated@@53) $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (!  (=> ($generated@@18 $generated@@56) (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (!  (=> ($generated@@26 $generated@@58 $generated@@56) ($generated@@20 $generated@@58 $generated@@56 $generated@@57))
 :pattern ( ($generated@@20 $generated@@58 $generated@@56 $generated@@57))
)))
 :pattern ( ($generated@@18 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@31 $generated@@60 ($generated@@32 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@32 $generated@@60 $generated@@59))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@61 $generated@@71 $generated@@72 $generated@@73 ($generated@@67 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@76 $generated@@77) $generated@@74)
 :weight 0
)) (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@83 $generated@@85) (= ($generated@@61 $generated@@78 $generated@@79 $generated@@80 ($generated@@67 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@61 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@61 $generated@@87 $generated@@88 $generated@@89 ($generated@@67 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@61 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)))) (= ($generated@@2 $generated@@62) 4)) (= ($generated@@2 $generated@@63) 5)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@65 $generated@@96 $generated@@97 ($generated@@68 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@98) $generated@@100) $generated@@98)
 :weight 0
))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@105 $generated@@106) (= ($generated@@65 $generated@@101 $generated@@102 ($generated@@68 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@65 $generated@@101 $generated@@102 $generated@@104 $generated@@106)))
 :weight 0
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@2 ($generated@@66 $generated@@107 $generated@@108)) 6))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@69 ($generated@@66 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@66 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@70 ($generated@@66 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@66 $generated@@111 $generated@@112))
))))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 Bool) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@7 ($generated@@61 $generated@@62 $generated@@63 $generated@@3 ($generated@@64 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))  (=> (and (or (not (= $generated@@117 $generated@@113)) (not true)) ($generated@@7 ($generated@@31 $generated@@3 ($generated@@65 $generated@@63 $generated@@50 ($generated@@65 $generated@@62 ($generated@@66 $generated@@63 $generated@@50) $generated@@114 $generated@@117) $generated@@115)))) $generated@@116))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63 $generated@@3 ($generated@@64 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))
)))
(assert (= ($generated@@119 $generated@@21) $generated@@0))
(assert (= ($generated@@120 $generated@@21) $generated@@1))
(assert (forall (($generated@@122 T@U) ) (! (= ($generated@@26 $generated@@122 $generated@@21)  (and ($generated@@26 $generated@@122 $generated@@19) ($generated@@121 $generated@@122)))
 :pattern ( ($generated@@26 $generated@@122 $generated@@21))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@32 $generated@@124 ($generated@@28 $generated@@124 $generated@@123)) ($generated@@28 $generated@@50 ($generated@@32 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@32 $generated@@124 ($generated@@28 $generated@@124 $generated@@123)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@130  (=> (= (ControlFlow 0 3) (- 0 2)) (exists (($generated@@131 T@U) )  (and ($generated@@26 $generated@@131 $generated@@21) ($generated@@37 $generated@@131))))))
(let (($generated@@132  (=> (and (not (and ($generated@@26 $generated@@125 $generated@@21) ($generated@@20 $generated@@125 $generated@@21 $generated@@126))) (= (ControlFlow 0 5) 3)) $generated@@130)))
(let (($generated@@133  (=> (and (and (and ($generated@@26 $generated@@125 $generated@@21) ($generated@@20 $generated@@125 $generated@@21 $generated@@126)) ($generated@@20 $generated@@125 $generated@@21 $generated@@126)) (and ($generated@@43 $generated@@125) (= (ControlFlow 0 4) 3))) $generated@@130)))
(let (($generated@@134 true))
(let (($generated@@135  (=> (= $generated@@127 ($generated@@64 $generated@@128 $generated@@126 $generated false)) (and (and (=> (= (ControlFlow 0 6) 1) $generated@@134) (=> (= (ControlFlow 0 6) 4) $generated@@133)) (=> (= (ControlFlow 0 6) 5) $generated@@132)))))
(let (($generated@@136  (=> (and (and ($generated@@45 $generated@@126) ($generated@@129 $generated@@126)) (and (= 3 $generated@@24) (= (ControlFlow 0 7) 6))) $generated@@135)))
$generated@@136)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
