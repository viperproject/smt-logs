(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (Int) T@U)
(declare-fun $generated@@44 (T@U) Int)
(declare-fun $generated@@49 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@53 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T T@T) T@T)
(declare-fun $generated@@56 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@108 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@109 (T@U) Bool)
(declare-fun $generated@@114 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (forall (($generated@@24 T@U) ) (!  (=> ($generated@@22 $generated@@24) ($generated@@23 $generated@@24))
 :pattern ( ($generated@@22 $generated@@24))
)))
(assert (= ($generated@@5 $generated@@26) 3))
(assert (forall (($generated@@28 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@28 $generated@@27) ($generated@@23 $generated@@28))
 :pattern ( ($generated@@23 $generated@@28) ($generated@@25 $generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@29 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@35 T@U) ) (! (= ($generated@@23 $generated@@35) (= ($generated@@34 $generated@@35) $generated@@3))
 :pattern ( ($generated@@23 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ) (!  (=> ($generated@@23 $generated@@41) (exists (($generated@@42 Int) ) (= $generated@@41 ($generated@@40 $generated@@42))))
 :pattern ( ($generated@@23 $generated@@41))
)))
(assert (forall (($generated@@43 Int) ) (! (= ($generated@@34 ($generated@@40 $generated@@43)) $generated@@3)
 :pattern ( ($generated@@40 $generated@@43))
)))
(assert (forall (($generated@@45 Int) ) (! (= ($generated@@44 ($generated@@40 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@40 $generated@@45))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@36 $generated@@47 ($generated@@37 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@37 $generated@@47 $generated@@46))
)))
(assert (forall (($generated@@48 Int) ) (! (= ($generated@@25 $generated@@26 ($generated@@40 $generated@@48) $generated@@27) ($generated@@25 $generated@@7 ($generated@@11 $generated@@48) $generated))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@40 $generated@@48) $generated@@27))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@49 $generated@@60 $generated@@61 $generated@@62 ($generated@@56 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@66 $generated@@63) $generated@@65 $generated@@66) $generated@@63)
 :weight 0
)) (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@72 $generated@@74) (= ($generated@@49 $generated@@67 $generated@@68 $generated@@69 ($generated@@56 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@74 $generated@@75) ($generated@@49 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@74 $generated@@75)))
 :weight 0
)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@49 $generated@@76 $generated@@77 $generated@@78 ($generated@@56 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@49 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)))) (= ($generated@@5 $generated@@50) 4)) (= ($generated@@5 $generated@@51) 5)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@53 $generated@@85 $generated@@86 ($generated@@57 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@87) $generated@@89) $generated@@87)
 :weight 0
))) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@94 $generated@@95) (= ($generated@@53 $generated@@90 $generated@@91 ($generated@@57 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@92) $generated@@95) ($generated@@53 $generated@@90 $generated@@91 $generated@@93 $generated@@95)))
 :weight 0
))) (= ($generated@@5 $generated@@54) 6)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (= ($generated@@5 ($generated@@55 $generated@@96 $generated@@97)) 7))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (! (= ($generated@@58 ($generated@@55 $generated@@98 $generated@@99)) $generated@@98)
 :pattern ( ($generated@@55 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@59 ($generated@@55 $generated@@100 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@55 $generated@@100 $generated@@101))
))))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 Bool) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@10 ($generated@@49 $generated@@50 $generated@@51 $generated@@6 ($generated@@52 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))  (=> (and (or (not (= $generated@@106 $generated@@102)) (not true)) ($generated@@10 ($generated@@36 $generated@@6 ($generated@@53 $generated@@51 $generated@@54 ($generated@@53 $generated@@50 ($generated@@55 $generated@@51 $generated@@54) $generated@@103 $generated@@106) $generated@@104)))) $generated@@105))
 :pattern ( ($generated@@49 $generated@@50 $generated@@51 $generated@@6 ($generated@@52 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (!  (=> (and ($generated@@109 $generated@@111) (and ($generated@@23 $generated@@110) ($generated@@108 $generated@@26 $generated@@110 $generated@@27 $generated@@111))) ($generated@@108 $generated@@7 ($generated@@11 ($generated@@44 $generated@@110)) $generated $generated@@111))
 :pattern ( ($generated@@108 $generated@@7 ($generated@@11 ($generated@@44 $generated@@110)) $generated $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (!  (=> (and ($generated@@109 $generated@@113) ($generated@@25 $generated@@26 $generated@@112 $generated@@27)) ($generated@@108 $generated@@26 $generated@@112 $generated@@27 $generated@@113))
 :pattern ( ($generated@@108 $generated@@26 $generated@@112 $generated@@27 $generated@@113))
)))
(assert (= ($generated@@21 $generated@@27) $generated@@2))
(assert (= ($generated@@114 $generated@@27) $generated@@4))
(assert (forall (($generated@@115 Int) ) (! (= ($generated@@37 $generated@@7 ($generated@@11 ($generated@@29 $generated@@115))) ($generated@@31 $generated@@54 ($generated@@37 $generated@@7 ($generated@@11 $generated@@115))))
 :pattern ( ($generated@@37 $generated@@7 ($generated@@11 ($generated@@29 $generated@@115))))
)))
(assert (forall (($generated@@116 Int) ) (! (= ($generated@@40 ($generated@@29 $generated@@116)) ($generated@@31 $generated@@26 ($generated@@40 $generated@@116)))
 :pattern ( ($generated@@40 ($generated@@29 $generated@@116)))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@T) ) (! (= ($generated@@37 $generated@@118 ($generated@@31 $generated@@118 $generated@@117)) ($generated@@31 $generated@@54 ($generated@@37 $generated@@118 $generated@@117)))
 :pattern ( ($generated@@37 $generated@@118 ($generated@@31 $generated@@118 $generated@@117)))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ) (! ($generated@@108 $generated@@7 $generated@@120 $generated $generated@@119)
 :pattern ( ($generated@@108 $generated@@7 $generated@@120 $generated $generated@@119))
)))
(assert (forall (($generated@@121 T@U) ) (! ($generated@@25 $generated@@7 $generated@@121 $generated)
 :pattern ( ($generated@@25 $generated@@7 $generated@@121 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () Int)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@136 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 24) (let (($generated@@137  (=> (and (and (and ($generated@@23 $generated@@122) (=> (or (not (= ($generated@@44 $generated@@122) 0)) (not true)) (and ($generated@@23 $generated@@122) (=> (or (not (= ($generated@@44 $generated@@122) 1)) (not true)) ($generated@@23 $generated@@122))))) (= (ControlFlow 0 3) (- 0 2))) (and (or (not (= ($generated@@44 $generated@@122) 0)) (not true)) (or (not (= ($generated@@44 $generated@@122) 1)) (not true)))) (= $generated@@123 (- 0 ($generated@@44 $generated@@122))))))
(let (($generated@@138  (=> (and (not (and (or (not (= ($generated@@44 $generated@@122) 0)) (not true)) (or (not (= ($generated@@44 $generated@@122) 1)) (not true)))) (= (ControlFlow 0 5) 3)) $generated@@137)))
(let (($generated@@139  (=> (and (and (or (not (= ($generated@@44 $generated@@122) 0)) (not true)) (or (not (= ($generated@@44 $generated@@122) 1)) (not true))) (and ($generated@@23 $generated@@122) (= (ControlFlow 0 4) 3))) $generated@@137)))
(let (($generated@@140  (=> (= ($generated@@44 $generated@@122) 0) (and (=> (= (ControlFlow 0 7) 4) $generated@@139) (=> (= (ControlFlow 0 7) 5) $generated@@138)))))
(let (($generated@@141  (=> (and (or (not (= ($generated@@44 $generated@@122) 0)) (not true)) ($generated@@23 $generated@@122)) (and (=> (= (ControlFlow 0 6) 4) $generated@@139) (=> (= (ControlFlow 0 6) 5) $generated@@138)))))
(let (($generated@@142  (=> ($generated@@23 $generated@@122) (and (=> (= (ControlFlow 0 8) (- 0 9)) (=> (= ($generated@@44 $generated@@122) ($generated@@29 1)) (= $generated@@123 ($generated@@29 2)))) (=> (and (=> (= ($generated@@44 $generated@@122) ($generated@@29 1)) (= $generated@@123 ($generated@@29 2))) ($generated@@23 $generated@@122)) (and (=> (= (ControlFlow 0 8) 6) $generated@@141) (=> (= (ControlFlow 0 8) 7) $generated@@140)))))))
(let (($generated@@143  (=> (and (or (not (= ($generated@@44 $generated@@122) ($generated@@29 1))) (not true)) (= (ControlFlow 0 11) 8)) $generated@@142)))
(let (($generated@@144  (=> (and (= ($generated@@44 $generated@@122) ($generated@@29 1)) (= (ControlFlow 0 10) 8)) $generated@@142)))
(let (($generated@@145  (=> ($generated@@23 $generated@@122) (and (=> (= (ControlFlow 0 12) (- 0 13)) (=> (= ($generated@@44 $generated@@122) ($generated@@29 0)) (= $generated@@123 ($generated@@29 1)))) (=> (and (=> (= ($generated@@44 $generated@@122) ($generated@@29 0)) (= $generated@@123 ($generated@@29 1))) ($generated@@23 $generated@@122)) (and (=> (= (ControlFlow 0 12) 10) $generated@@144) (=> (= (ControlFlow 0 12) 11) $generated@@143)))))))
(let (($generated@@146  (=> (and (or (not (= ($generated@@44 $generated@@122) ($generated@@29 0))) (not true)) (= (ControlFlow 0 15) 12)) $generated@@145)))
(let (($generated@@147  (=> (and (= ($generated@@44 $generated@@122) ($generated@@29 0)) (= (ControlFlow 0 14) 12)) $generated@@145)))
(let (($generated@@148  (=> ($generated@@23 $generated@@122) (and (=> (= (ControlFlow 0 16) 14) $generated@@147) (=> (= (ControlFlow 0 16) 15) $generated@@146)))))
(let (($generated@@149  (=> (and (= $generated@@123 $generated@@124) (= (ControlFlow 0 18) 16)) $generated@@148)))
(let (($generated@@150  (=> (or (not (= $generated@@125 ($generated@@29 1))) (not true)) (=> (and (= $generated@@126 $generated@@125) ($generated@@25 $generated@@7 ($generated@@11 $generated@@126) $generated)) (=> (and (and (= $generated@@127 $generated@@126) (= $generated@@128 (- 0 $generated@@127))) (and (= $generated@@124 $generated@@128) (= (ControlFlow 0 20) 18))) $generated@@149)))))
(let (($generated@@151  (=> (and (and (= $generated@@125 ($generated@@29 1)) (= $generated@@129 ($generated@@29 2))) (and (= $generated@@124 $generated@@129) (= (ControlFlow 0 19) 18))) $generated@@149)))
(let (($generated@@152  (=> (or (not (= $generated@@125 ($generated@@29 0))) (not true)) (and (=> (= (ControlFlow 0 21) 19) $generated@@151) (=> (= (ControlFlow 0 21) 20) $generated@@150)))))
(let (($generated@@153  (=> (and (and (= $generated@@125 ($generated@@29 0)) (= $generated@@130 ($generated@@29 1))) (and (= $generated@@123 $generated@@130) (= (ControlFlow 0 17) 16))) $generated@@148)))
(let (($generated@@154  (=> (= $generated@@122 ($generated@@40 $generated@@125)) (and (=> (= (ControlFlow 0 22) 17) $generated@@153) (=> (= (ControlFlow 0 22) 21) $generated@@152)))))
(let (($generated@@155 true))
(let (($generated@@156  (=> (and (= $generated@@131 ($generated@@52 $generated@@132 $generated@@133 $generated@@1 false)) (= $generated@@134 ($generated@@29 0))) (and (=> (= (ControlFlow 0 23) 22) $generated@@154) (=> (= (ControlFlow 0 23) 1) $generated@@155)))))
(let (($generated@@157  (=> (and ($generated@@109 $generated@@133) ($generated@@135 $generated@@133)) (=> (and (and (and ($generated@@25 $generated@@26 $generated@@122 $generated@@27) ($generated@@108 $generated@@26 $generated@@122 $generated@@27 $generated@@133)) ($generated@@22 $generated@@122)) (and (= 1 $generated@@136) (= (ControlFlow 0 24) 23))) $generated@@156))))
$generated@@157))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
