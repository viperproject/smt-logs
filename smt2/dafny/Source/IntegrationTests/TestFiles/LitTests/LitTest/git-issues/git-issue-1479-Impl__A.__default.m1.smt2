(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) Bool)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@24 (T@U) Int)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@34 (Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@51 (T@U T@U T@U) Bool)
(declare-fun $generated@@56 (T@U T@U) Bool)
(declare-fun $generated@@59 () T@U)
(declare-fun $generated@@61 (T@U Int) T@U)
(declare-fun $generated@@65 (T@U) Bool)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@81 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 (T@T T@T) T@T)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@87 (T@T) T@T)
(declare-fun $generated@@136 (T@U) T@U)
(declare-fun $generated@@137 (T@U) T@U)
(declare-fun $generated@@140 (T@U) T@U)
(declare-fun $generated@@141 (T@U) T@U)
(declare-fun $generated@@144 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ) (!  (=> ($generated@@21 $generated@@23) ($generated@@22 $generated@@23))
 :pattern ( ($generated@@21 $generated@@23))
)))
(assert (= ($generated@@24 $generated@@25) 0))
(assert (= ($generated@@5 $generated@@27) 3))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@30 $generated@@28 $generated@@31) ($generated@@26 $generated@@27 $generated@@30 $generated@@29 $generated@@31))
 :pattern ( ($generated@@26 $generated@@27 $generated@@30 $generated@@28 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ) (!  (=> ($generated@@32 $generated@@27 $generated@@33 $generated@@29) ($generated@@22 $generated@@33))
 :pattern ( ($generated@@22 $generated@@33) ($generated@@32 $generated@@27 $generated@@33 $generated@@29))
)))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@34 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@22 $generated@@40) (= ($generated@@39 $generated@@40) $generated@@2))
 :pattern ( ($generated@@22 $generated@@40))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 ($generated@@41 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@41 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@22 $generated@@46) (exists (($generated@@47 T@U) ) (= $generated@@46 ($generated@@45 $generated@@47))))
 :pattern ( ($generated@@22 $generated@@46))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@24 ($generated@@48 $generated@@49 $generated@@50)) (+ 1 ($generated@@24 $generated@@49)))
 :pattern ( ($generated@@48 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@51 ($generated@@42 $generated@@55 $generated@@52) $generated@@53 $generated@@54) ($generated@@26 $generated@@55 $generated@@52 $generated@@53 $generated@@54))
 :pattern ( ($generated@@51 ($generated@@42 $generated@@55 $generated@@52) $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ) (!  (=> ($generated@@56 $generated@@57 $generated@@29) (and (= ($generated@@42 $generated@@27 ($generated@@41 $generated@@27 $generated@@57)) $generated@@57) ($generated@@32 $generated@@27 ($generated@@41 $generated@@27 $generated@@57) $generated@@29)))
 :pattern ( ($generated@@56 $generated@@57 $generated@@29))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@56 $generated@@58 $generated@@28) (and (= ($generated@@42 $generated@@27 ($generated@@41 $generated@@27 $generated@@58)) $generated@@58) ($generated@@32 $generated@@27 ($generated@@41 $generated@@27 $generated@@58) $generated@@28)))
 :pattern ( ($generated@@56 $generated@@58 $generated@@28))
)))
(assert (forall (($generated@@60 T@U) ) (! (= ($generated@@32 $generated@@27 ($generated@@45 $generated@@60) $generated@@29) ($generated@@56 $generated@@60 $generated@@59))
 :pattern ( ($generated@@32 $generated@@27 ($generated@@45 $generated@@60) $generated@@29))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 Int) ($generated@@64 T@U) ) (!  (and (=> (= $generated@@63 ($generated@@24 $generated@@62)) (= ($generated@@61 ($generated@@48 $generated@@62 $generated@@64) $generated@@63) $generated@@64)) (=> (or (not (= $generated@@63 ($generated@@24 $generated@@62))) (not true)) (= ($generated@@61 ($generated@@48 $generated@@62 $generated@@64) $generated@@63) ($generated@@61 $generated@@62 $generated@@63))))
 :pattern ( ($generated@@61 ($generated@@48 $generated@@62 $generated@@64) $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> ($generated@@65 $generated@@67) (= ($generated@@26 $generated@@27 ($generated@@45 $generated@@66) $generated@@29 $generated@@67) ($generated@@51 $generated@@66 $generated@@59 $generated@@67)))
 :pattern ( ($generated@@26 $generated@@27 ($generated@@45 $generated@@66) $generated@@29 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@56 ($generated@@42 $generated@@70 $generated@@68) $generated@@69) ($generated@@32 $generated@@70 $generated@@68 $generated@@69))
 :pattern ( ($generated@@56 ($generated@@42 $generated@@70 $generated@@68) $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (<= 0 ($generated@@24 $generated@@71))
 :pattern ( ($generated@@24 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@39 ($generated@@45 $generated@@72)) $generated@@2)
 :pattern ( ($generated@@45 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@73 ($generated@@45 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@45 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@41 $generated@@76 ($generated@@42 $generated@@76 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@42 $generated@@76 $generated@@75))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@77 $generated@@88 $generated@@89 $generated@@90 ($generated@@84 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@93 $generated@@94) $generated@@91)
 :weight 0
)) (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@77 $generated@@95 $generated@@96 $generated@@97 ($generated@@84 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@77 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@77 $generated@@104 $generated@@105 $generated@@106 ($generated@@84 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)))) (= ($generated@@5 $generated@@78) 4)) (= ($generated@@5 $generated@@79) 5)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@81 $generated@@113 $generated@@114 ($generated@@85 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@115) $generated@@117) $generated@@115)
 :weight 0
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@122 $generated@@123) (= ($generated@@81 $generated@@118 $generated@@119 ($generated@@85 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@81 $generated@@118 $generated@@119 $generated@@121 $generated@@123)))
 :weight 0
))) (= ($generated@@5 $generated@@82) 6)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (= ($generated@@5 ($generated@@83 $generated@@124 $generated@@125)) 7))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@86 ($generated@@83 $generated@@126 $generated@@127)) $generated@@126)
 :pattern ( ($generated@@83 $generated@@126 $generated@@127))
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@87 ($generated@@83 $generated@@128 $generated@@129)) $generated@@129)
 :pattern ( ($generated@@83 $generated@@128 $generated@@129))
))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 Bool) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@10 ($generated@@77 $generated@@78 $generated@@79 $generated@@6 ($generated@@80 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))  (=> (and (or (not (= $generated@@134 $generated@@130)) (not true)) ($generated@@10 ($generated@@41 $generated@@6 ($generated@@81 $generated@@79 $generated@@82 ($generated@@81 $generated@@78 ($generated@@83 $generated@@79 $generated@@82) $generated@@131 $generated@@134) $generated@@132)))) $generated@@133))
 :pattern ( ($generated@@77 $generated@@78 $generated@@79 $generated@@6 ($generated@@80 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (and (= ($generated@@136 ($generated@@48 $generated@@138 $generated@@139)) $generated@@138) (= ($generated@@137 ($generated@@48 $generated@@138 $generated@@139)) $generated@@139))
 :pattern ( ($generated@@48 $generated@@138 $generated@@139))
)))
(assert (= ($generated@@140 $generated@@29) $generated@@0))
(assert (= ($generated@@141 $generated@@29) $generated@@3))
(assert (= ($generated@@140 $generated@@28) $generated@@1))
(assert (= ($generated@@141 $generated@@28) $generated@@4))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> (and ($generated@@65 $generated@@143) (and ($generated@@22 $generated@@142) ($generated@@26 $generated@@27 $generated@@142 $generated@@29 $generated@@143))) ($generated@@51 ($generated@@73 $generated@@142) $generated@@59 $generated@@143))
 :pattern ( ($generated@@51 ($generated@@73 $generated@@142) $generated@@59 $generated@@143))
)))
(assert (forall (($generated@@145 T@U) ) (! (= ($generated@@32 $generated@@27 $generated@@145 $generated@@28)  (and ($generated@@32 $generated@@27 $generated@@145 $generated@@29) ($generated@@144 $generated@@145)))
 :pattern ( ($generated@@32 $generated@@27 $generated@@145 $generated@@28))
)))
(assert (forall (($generated@@146 Int) ) (! (= ($generated@@42 $generated@@7 ($generated@@11 ($generated@@34 $generated@@146))) ($generated@@36 $generated@@82 ($generated@@42 $generated@@7 ($generated@@11 $generated@@146))))
 :pattern ( ($generated@@42 $generated@@7 ($generated@@11 ($generated@@34 $generated@@146))))
)))
(assert (forall (($generated@@147 T@U) ) (! (= ($generated@@45 ($generated@@36 $generated@@82 $generated@@147)) ($generated@@36 $generated@@27 ($generated@@45 $generated@@147)))
 :pattern ( ($generated@@45 ($generated@@36 $generated@@82 $generated@@147)))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@T) ) (! (= ($generated@@42 $generated@@149 ($generated@@36 $generated@@149 $generated@@148)) ($generated@@36 $generated@@82 ($generated@@42 $generated@@149 $generated@@148)))
 :pattern ( ($generated@@42 $generated@@149 ($generated@@36 $generated@@149 $generated@@148)))
)))
(assert (forall (($generated@@150 T@U) ) (!  (=> (= ($generated@@24 $generated@@150) 0) (= $generated@@150 $generated@@25))
 :pattern ( ($generated@@24 $generated@@150))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 (T@U) Bool)
(declare-fun $generated@@161 () Bool)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@164  (=> (= $generated@@151 ($generated@@80 $generated@@152 $generated@@153 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 ($generated@@34 0)) (< ($generated@@34 0) ($generated@@24 ($generated@@48 $generated@@25 ($generated@@42 $generated@@27 $generated@@154)))))) (=> (and (<= 0 ($generated@@34 0)) (< ($generated@@34 0) ($generated@@24 ($generated@@48 $generated@@25 ($generated@@42 $generated@@27 $generated@@154))))) (=> (= $generated@@155 ($generated@@41 $generated@@27 ($generated@@61 ($generated@@48 $generated@@25 ($generated@@42 $generated@@27 $generated@@154)) ($generated@@34 0)))) (=> (and ($generated@@32 $generated@@27 $generated@@155 $generated@@28) (= $generated@@156 $generated@@155)) (=> (and (and (= $generated@@157 $generated@@158) ($generated@@56 $generated@@157 $generated@@59)) (and (= $generated@@159 $generated@@157) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@32 $generated@@27 (let (($generated@@165 $generated@@158))
($generated@@45 $generated@@165)) $generated@@28)))))))))
(let (($generated@@166  (=> (and ($generated@@65 $generated@@153) ($generated@@160 $generated@@153)) (=> (and (and (and (and ($generated@@32 $generated@@27 $generated@@154 $generated@@28) ($generated@@26 $generated@@27 $generated@@154 $generated@@28 $generated@@153)) ($generated@@21 $generated@@154)) (and ($generated@@56 $generated@@158 $generated@@59) ($generated@@51 $generated@@158 $generated@@59 $generated@@153))) (and (and (=> $generated@@161 (and ($generated@@32 $generated@@27 $generated@@162 $generated@@28) ($generated@@26 $generated@@27 $generated@@162 $generated@@28 $generated@@153))) true) (and (= 3 $generated@@163) (= (ControlFlow 0 4) 2)))) $generated@@164))))
$generated@@166)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
