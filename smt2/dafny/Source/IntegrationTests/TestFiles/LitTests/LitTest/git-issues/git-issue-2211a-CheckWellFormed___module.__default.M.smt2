(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@23 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@T T@T) T@T)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@30 (T@T) T@T)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@52 (Int) Int)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 () Int)
(declare-fun $generated@@58 (T@U) Bool)
(declare-fun $generated@@59 (T@U) Bool)
(declare-fun $generated@@60 (T@T T@U T@U) Bool)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@U) T@U)
(declare-fun $generated@@63 (T@U Int) T@U)
(declare-fun $generated@@64 (Int) Bool)
(declare-fun $generated@@65 (Int) Bool)
(declare-fun $generated@@66 (Int) Bool)
(declare-fun $generated@@67 (Int) Bool)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@74 (T@U T@U T@U) Bool)
(declare-fun $generated@@75 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@95 (T@U T@U) Bool)
(declare-fun $generated@@105 (T@U) T@U)
(declare-fun $generated@@110 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@111 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@112 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@23 $generated@@32 $generated@@33 ($generated@@29 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@36) $generated@@34)
 :weight 0
)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (!  (or (= $generated@@41 $generated@@42) (= ($generated@@23 $generated@@37 $generated@@38 ($generated@@29 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@42) ($generated@@23 $generated@@37 $generated@@38 $generated@@40 $generated@@42)))
 :weight 0
))) (= ($generated@@3 $generated@@24) 3)) (= ($generated@@3 $generated@@25) 4)) (= ($generated@@3 $generated@@26) 5)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (= ($generated@@3 ($generated@@27 $generated@@43 $generated@@44)) 6))) (forall (($generated@@45 T@T) ($generated@@46 T@T) ) (! (= ($generated@@30 ($generated@@27 $generated@@45 $generated@@46)) $generated@@45)
 :pattern ( ($generated@@27 $generated@@45 $generated@@46))
))) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (! (= ($generated@@31 ($generated@@27 $generated@@47 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@27 $generated@@47 $generated@@48))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> ($generated@@22 $generated@@49 $generated@@50) (forall (($generated@@51 T@U) ) (!  (=> ($generated@@8 ($generated@@28 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@49 $generated@@51) $generated@@2))) ($generated@@8 ($generated@@28 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@51) $generated@@2))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@51) $generated@@2))
)))
 :pattern ( ($generated@@22 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@52 $generated@@53) $generated@@53)
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@56 $generated@@55))
)))
(assert (= ($generated@@3 $generated@@61) 7))
(assert  (=> (<= 1 $generated@@57) (forall (($generated@@68 T@U) ) (!  (=> (or ($generated@@59 $generated@@68) (and (< 1 $generated@@57) ($generated@@60 $generated@@61 $generated@@68 ($generated@@62 $generated)))) (and (forall (($generated@@69 Int) ) (!  (=> (and (<= ($generated@@52 0) $generated@@69) (< $generated@@69 ($generated@@20 $generated@@68))) (and ($generated@@64 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@68 $generated@@69)))) (=> (not ($generated@@65 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@68 $generated@@69))))) ($generated@@66 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@68 $generated@@69)))))))
 :pattern ( ($generated@@28 $generated@@5 ($generated@@63 $generated@@68 $generated@@69)))
)) (= ($generated@@58 $generated@@68) (exists (($generated@@70 Int) ) (!  (and (and (<= ($generated@@52 0) $generated@@70) (< $generated@@70 ($generated@@20 $generated@@68))) (or ($generated@@65 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@68 $generated@@70)))) ($generated@@67 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@68 $generated@@70))))))
 :pattern ( ($generated@@28 $generated@@5 ($generated@@63 $generated@@68 $generated@@70)))
)))))
 :pattern ( ($generated@@58 $generated@@68))
))))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@71 $generated@@73 ($generated@@28 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@28 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@79 $generated@@76) $generated@@77 $generated@@78) ($generated@@75 $generated@@79 $generated@@76 $generated@@77 $generated@@78))
 :pattern ( ($generated@@74 ($generated@@71 $generated@@79 $generated@@76) $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> ($generated@@22 $generated@@80 $generated@@81) (=> ($generated@@74 $generated@@82 $generated@@83 $generated@@80) ($generated@@74 $generated@@82 $generated@@83 $generated@@81)))
 :pattern ( ($generated@@22 $generated@@80 $generated@@81) ($generated@@74 $generated@@82 $generated@@83 $generated@@80))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@T) ) (!  (=> ($generated@@22 $generated@@84 $generated@@85) (=> ($generated@@75 $generated@@88 $generated@@86 $generated@@87 $generated@@84) ($generated@@75 $generated@@88 $generated@@86 $generated@@87 $generated@@85)))
 :pattern ( ($generated@@22 $generated@@84 $generated@@85) ($generated@@75 $generated@@88 $generated@@86 $generated@@87 $generated@@84))
)))
(assert  (=> (<= 1 $generated@@57) (forall (($generated@@89 T@U) ) (!  (=> (or ($generated@@59 ($generated@@54 $generated@@61 $generated@@89)) (and (< 1 $generated@@57) ($generated@@60 $generated@@61 $generated@@89 ($generated@@62 $generated)))) (and (forall (($generated@@90 Int) ) (!  (=> (and (<= ($generated@@52 0) $generated@@90) (< $generated@@90 ($generated@@20 ($generated@@54 $generated@@61 $generated@@89)))) (and ($generated@@64 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 ($generated@@54 $generated@@61 $generated@@89) $generated@@90)))) (=> (not ($generated@@65 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 ($generated@@54 $generated@@61 $generated@@89) $generated@@90))))) ($generated@@66 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 ($generated@@54 $generated@@61 $generated@@89) $generated@@90)))))))
 :pattern ( ($generated@@28 $generated@@5 ($generated@@63 $generated@@89 $generated@@90)))
)) (= ($generated@@58 ($generated@@54 $generated@@61 $generated@@89)) (exists (($generated@@91 Int) ) (!  (and (and (<= ($generated@@52 0) $generated@@91) (< $generated@@91 ($generated@@20 ($generated@@54 $generated@@61 $generated@@89)))) (or ($generated@@65 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 ($generated@@54 $generated@@61 $generated@@89) $generated@@91)))) ($generated@@67 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 ($generated@@54 $generated@@61 $generated@@89) $generated@@91))))))
 :pattern ( ($generated@@28 $generated@@5 ($generated@@63 $generated@@89 $generated@@91)))
)))))
 :weight 3
 :pattern ( ($generated@@58 ($generated@@54 $generated@@61 $generated@@89)))
))))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (=> (or (not (= $generated@@92 $generated@@94)) (not true)) (=> (and ($generated@@22 $generated@@92 $generated@@93) ($generated@@22 $generated@@93 $generated@@94)) ($generated@@22 $generated@@92 $generated@@94)))
 :pattern ( ($generated@@22 $generated@@92 $generated@@93) ($generated@@22 $generated@@93 $generated@@94))
)))
(assert (forall (($generated@@96 T@U) ) (!  (=> ($generated@@95 $generated@@96 $generated) (and (= ($generated@@71 $generated@@5 ($generated@@28 $generated@@5 $generated@@96)) $generated@@96) ($generated@@60 $generated@@5 ($generated@@28 $generated@@5 $generated@@96) $generated)))
 :pattern ( ($generated@@95 $generated@@96 $generated))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@95 ($generated@@71 $generated@@99 $generated@@97) $generated@@98) ($generated@@60 $generated@@99 $generated@@97 $generated@@98))
 :pattern ( ($generated@@95 ($generated@@71 $generated@@99 $generated@@97) $generated@@98))
)))
(assert (forall (($generated@@100 T@U) ) (! (<= 0 ($generated@@20 $generated@@100))
 :pattern ( ($generated@@20 $generated@@100))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@75 $generated@@61 $generated@@101 ($generated@@62 $generated@@102) $generated@@103) (forall (($generated@@104 Int) ) (!  (=> (and (<= 0 $generated@@104) (< $generated@@104 ($generated@@20 $generated@@101))) ($generated@@74 ($generated@@63 $generated@@101 $generated@@104) $generated@@102 $generated@@103))
 :pattern ( ($generated@@63 $generated@@101 $generated@@104))
)))
 :pattern ( ($generated@@75 $generated@@61 $generated@@101 ($generated@@62 $generated@@102) $generated@@103))
)))
(assert (forall (($generated@@106 T@U) ) (! (= ($generated@@105 ($generated@@62 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@62 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ) (! (= ($generated@@19 ($generated@@62 $generated@@107)) $generated@@1)
 :pattern ( ($generated@@62 $generated@@107))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@T) ) (! (= ($generated@@28 $generated@@109 ($generated@@71 $generated@@109 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@71 $generated@@109 $generated@@108))
)))
(assert  (and (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@110 $generated@@113 $generated@@114 $generated@@115 ($generated@@112 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@118 $generated@@119) $generated@@116)
 :weight 0
)) (and (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@125 $generated@@127) (= ($generated@@110 $generated@@120 $generated@@121 $generated@@122 ($generated@@112 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@110 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@110 $generated@@129 $generated@@130 $generated@@131 ($generated@@112 $generated@@129 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@135 $generated@@132) $generated@@136 $generated@@137) ($generated@@110 $generated@@129 $generated@@130 $generated@@131 $generated@@133 $generated@@136 $generated@@137)))
 :weight 0
)))))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 Bool) ($generated@@142 T@U) ($generated@@143 T@U) ) (! (= ($generated@@8 ($generated@@110 $generated@@26 $generated@@24 $generated@@4 ($generated@@111 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))  (=> (and (or (not (= $generated@@142 $generated@@138)) (not true)) ($generated@@8 ($generated@@28 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@139 $generated@@142) $generated@@140)))) $generated@@141))
 :pattern ( ($generated@@110 $generated@@26 $generated@@24 $generated@@4 ($generated@@111 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (!  (=> ($generated@@95 $generated@@144 ($generated@@62 $generated@@145)) (and (= ($generated@@71 $generated@@61 ($generated@@28 $generated@@61 $generated@@144)) $generated@@144) ($generated@@60 $generated@@61 ($generated@@28 $generated@@61 $generated@@144) ($generated@@62 $generated@@145))))
 :pattern ( ($generated@@95 $generated@@144 ($generated@@62 $generated@@145)))
)))
(assert (forall (($generated@@146 Int) ) (! (= ($generated@@71 $generated@@5 ($generated@@9 ($generated@@52 $generated@@146))) ($generated@@54 $generated@@25 ($generated@@71 $generated@@5 ($generated@@9 $generated@@146))))
 :pattern ( ($generated@@71 $generated@@5 ($generated@@9 ($generated@@52 $generated@@146))))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@T) ) (! (= ($generated@@71 $generated@@148 ($generated@@54 $generated@@148 $generated@@147)) ($generated@@54 $generated@@25 ($generated@@71 $generated@@148 $generated@@147)))
 :pattern ( ($generated@@71 $generated@@148 ($generated@@54 $generated@@148 $generated@@147)))
)))
(assert (forall (($generated@@149 T@U) ) (!  (=> (= ($generated@@20 $generated@@149) 0) (= $generated@@149 $generated@@21))
 :pattern ( ($generated@@20 $generated@@149))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (! ($generated@@75 $generated@@5 $generated@@151 $generated $generated@@150)
 :pattern ( ($generated@@75 $generated@@5 $generated@@151 $generated $generated@@150))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (! (= ($generated@@60 $generated@@61 $generated@@152 ($generated@@62 $generated@@153)) (forall (($generated@@154 Int) ) (!  (=> (and (<= 0 $generated@@154) (< $generated@@154 ($generated@@20 $generated@@152))) ($generated@@95 ($generated@@63 $generated@@152 $generated@@154) $generated@@153))
 :pattern ( ($generated@@63 $generated@@152 $generated@@154))
)))
 :pattern ( ($generated@@60 $generated@@61 $generated@@152 ($generated@@62 $generated@@153)))
)))
(assert (forall (($generated@@155 T@U) ) (! ($generated@@60 $generated@@5 $generated@@155 $generated)
 :pattern ( ($generated@@60 $generated@@5 $generated@@155 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () Int)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () Int)
(declare-fun $generated@@161 () Int)
(declare-fun $generated@@162 (Int) Bool)
(declare-fun $generated@@163 (Int) Bool)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 (T@U) Bool)
(declare-fun $generated@@167 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@168 true))
(let (($generated@@169  (=> (not ($generated@@65 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157))))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (and (<= 0 $generated@@157) (< $generated@@157 ($generated@@20 $generated@@156)))) (=> (and (<= 0 $generated@@157) (< $generated@@157 ($generated@@20 $generated@@156))) (=> (= $generated@@158 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157)))) (=> (and (and ($generated@@75 $generated@@5 ($generated@@9 $generated@@158) $generated $generated@@159) ($generated@@66 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157))))) (and ($generated@@67 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157)))) (= (ControlFlow 0 6) 1))) $generated@@168)))))))
(let (($generated@@170  (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= 0 $generated@@157) (< $generated@@157 ($generated@@20 $generated@@156)))) (=> (and (<= 0 $generated@@157) (< $generated@@157 ($generated@@20 $generated@@156))) (=> (= $generated@@160 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157)))) (=> (and (and ($generated@@75 $generated@@5 ($generated@@9 $generated@@160) $generated $generated@@159) ($generated@@64 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157))))) (and ($generated@@65 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157)))) (= (ControlFlow 0 4) 1))) $generated@@168))))))
(let (($generated@@171  (=> (not (or ($generated@@65 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157)))) ($generated@@67 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 $generated@@157) (< $generated@@157 ($generated@@20 $generated@@156)))) (=> (and (<= 0 $generated@@157) (< $generated@@157 ($generated@@20 $generated@@156))) (=> (= $generated@@161 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157)))) (=> (and (and ($generated@@75 $generated@@5 ($generated@@9 $generated@@161) $generated $generated@@159) ($generated@@162 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157))))) (and ($generated@@163 ($generated@@10 ($generated@@28 $generated@@5 ($generated@@63 $generated@@156 $generated@@157)))) (= (ControlFlow 0 2) 1))) $generated@@168)))))))
(let (($generated@@172  (=> (and (<= ($generated@@52 0) $generated@@157) (< $generated@@157 ($generated@@20 $generated@@156))) (and (and (=> (= (ControlFlow 0 8) 2) $generated@@171) (=> (= (ControlFlow 0 8) 4) $generated@@170)) (=> (= (ControlFlow 0 8) 6) $generated@@169)))))
(let (($generated@@173  (=> (and (< $generated@@157 ($generated@@52 0)) (= (ControlFlow 0 10) 8)) $generated@@172)))
(let (($generated@@174  (=> (and (<= ($generated@@52 0) $generated@@157) (= (ControlFlow 0 9) 8)) $generated@@172)))
(let (($generated@@175  (=> (= $generated@@164 ($generated@@111 $generated@@165 $generated@@159 $generated@@2 false)) (and (=> (= (ControlFlow 0 11) 9) $generated@@174) (=> (= (ControlFlow 0 11) 10) $generated@@173)))))
(let (($generated@@176  (=> (and ($generated@@166 $generated@@159) ($generated@@167 $generated@@159)) (=> (and (and ($generated@@60 $generated@@61 $generated@@156 ($generated@@62 $generated)) ($generated@@75 $generated@@61 $generated@@156 ($generated@@62 $generated) $generated@@159)) (and (= 2 $generated@@57) (= (ControlFlow 0 12) 11))) $generated@@175))))
$generated@@176))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
