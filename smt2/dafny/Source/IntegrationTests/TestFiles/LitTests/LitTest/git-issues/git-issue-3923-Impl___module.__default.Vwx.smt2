(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@T T@T) T@T)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@59 (Int) Int)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@64 (T@U) Bool)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@67 (T@U) Bool)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@72 (Int) T@U)
(declare-fun $generated@@75 (Int) T@U)
(declare-fun $generated@@78 (T@T T@U T@U) Bool)
(declare-fun $generated@@85 (T@U) Bool)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 () T@U)
(declare-fun $generated@@94 (T@U) Int)
(declare-fun $generated@@97 (T@U) Int)
(declare-fun $generated@@103 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@104 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@137 (T@U) Bool)
(declare-fun $generated@@144 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28)
 :pattern ( ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@30 $generated@@39 $generated@@40 ($generated@@36 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@43) $generated@@41)
 :weight 0
)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (or (= $generated@@48 $generated@@49) (= ($generated@@30 $generated@@44 $generated@@45 ($generated@@36 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@49) ($generated@@30 $generated@@44 $generated@@45 $generated@@47 $generated@@49)))
 :weight 0
))) (= ($generated@@8 $generated@@31) 3)) (= ($generated@@8 $generated@@32) 4)) (= ($generated@@8 $generated@@33) 5)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (= ($generated@@8 ($generated@@34 $generated@@50 $generated@@51)) 6))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@37 ($generated@@34 $generated@@52 $generated@@53)) $generated@@52)
 :pattern ( ($generated@@34 $generated@@52 $generated@@53))
))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@38 ($generated@@34 $generated@@54 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@34 $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> ($generated@@29 $generated@@56 $generated@@57) (forall (($generated@@58 T@U) ) (!  (=> ($generated@@13 ($generated@@35 $generated@@9 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@56 $generated@@58) $generated@@1))) ($generated@@13 ($generated@@35 $generated@@9 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated@@1))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated@@1))
)))
 :pattern ( ($generated@@29 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@60 Int) ) (! (= ($generated@@59 $generated@@60) $generated@@60)
 :pattern ( ($generated@@59 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@61 $generated@@63 $generated@@62) $generated@@62)
 :pattern ( ($generated@@61 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@64 $generated@@66) (= ($generated@@65 $generated@@66) $generated@@4))
 :pattern ( ($generated@@64 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@67 $generated@@68) (= ($generated@@65 $generated@@68) $generated@@5))
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 ($generated@@35 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@35 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ) (!  (=> ($generated@@64 $generated@@73) (exists (($generated@@74 Int) ) (= $generated@@73 ($generated@@72 $generated@@74))))
 :pattern ( ($generated@@64 $generated@@73))
)))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@67 $generated@@76) (exists (($generated@@77 Int) ) (= $generated@@76 ($generated@@75 $generated@@77))))
 :pattern ( ($generated@@67 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@78 $generated@@10 $generated@@79 $generated@@26) (<= ($generated@@59 0) ($generated@@15 $generated@@79)))
 :pattern ( ($generated@@78 $generated@@10 $generated@@79 $generated@@26))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (!  (=> ($generated@@29 $generated@@80 $generated@@81) (=> ($generated@@25 $generated@@84 $generated@@82 $generated@@83 $generated@@80) ($generated@@25 $generated@@84 $generated@@82 $generated@@83 $generated@@81)))
 :pattern ( ($generated@@29 $generated@@80 $generated@@81) ($generated@@25 $generated@@84 $generated@@82 $generated@@83 $generated@@80))
)))
(assert (forall (($generated@@86 T@U) ) (!  (=> ($generated@@85 $generated@@86) (or ($generated@@64 $generated@@86) ($generated@@67 $generated@@86)))
 :pattern ( ($generated@@85 $generated@@86))
)))
(assert (= ($generated@@8 $generated@@87) 7))
(assert (forall (($generated@@89 T@U) ) (!  (=> ($generated@@78 $generated@@87 $generated@@89 $generated@@88) (or ($generated@@64 $generated@@89) ($generated@@67 $generated@@89)))
 :pattern ( ($generated@@67 $generated@@89) ($generated@@78 $generated@@87 $generated@@89 $generated@@88))
 :pattern ( ($generated@@64 $generated@@89) ($generated@@78 $generated@@87 $generated@@89 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (=> (or (not (= $generated@@90 $generated@@92)) (not true)) (=> (and ($generated@@29 $generated@@90 $generated@@91) ($generated@@29 $generated@@91 $generated@@92)) ($generated@@29 $generated@@90 $generated@@92)))
 :pattern ( ($generated@@29 $generated@@90 $generated@@91) ($generated@@29 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@93 Int) ) (! (= ($generated@@65 ($generated@@72 $generated@@93)) $generated@@4)
 :pattern ( ($generated@@72 $generated@@93))
)))
(assert (forall (($generated@@95 Int) ) (! (= ($generated@@94 ($generated@@72 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@72 $generated@@95))
)))
(assert (forall (($generated@@96 Int) ) (! (= ($generated@@65 ($generated@@75 $generated@@96)) $generated@@5)
 :pattern ( ($generated@@75 $generated@@96))
)))
(assert (forall (($generated@@98 Int) ) (! (= ($generated@@97 ($generated@@75 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@75 $generated@@98))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@T) ) (! (= ($generated@@35 $generated@@100 ($generated@@69 $generated@@100 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@69 $generated@@100 $generated@@99))
)))
(assert (forall (($generated@@101 Int) ) (! (= ($generated@@78 $generated@@87 ($generated@@72 $generated@@101) $generated@@88) ($generated@@78 $generated@@10 ($generated@@14 $generated@@101) $generated))
 :pattern ( ($generated@@78 $generated@@87 ($generated@@72 $generated@@101) $generated@@88))
)))
(assert (forall (($generated@@102 Int) ) (! (= ($generated@@78 $generated@@87 ($generated@@75 $generated@@102) $generated@@88) ($generated@@78 $generated@@10 ($generated@@14 $generated@@102) $generated))
 :pattern ( ($generated@@78 $generated@@87 ($generated@@75 $generated@@102) $generated@@88))
)))
(assert  (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@103 $generated@@106 $generated@@107 $generated@@108 ($generated@@105 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@111 $generated@@112) $generated@@109)
 :weight 0
)) (and (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@103 $generated@@113 $generated@@114 $generated@@115 ($generated@@105 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@103 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@128 $generated@@130) (= ($generated@@103 $generated@@122 $generated@@123 $generated@@124 ($generated@@105 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@128 $generated@@125) $generated@@129 $generated@@130) ($generated@@103 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@129 $generated@@130)))
 :weight 0
)))))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 Bool) ($generated@@135 T@U) ($generated@@136 T@U) ) (! (= ($generated@@13 ($generated@@103 $generated@@33 $generated@@31 $generated@@9 ($generated@@104 $generated@@131 $generated@@132 $generated@@133 $generated@@134) $generated@@135 $generated@@136))  (=> (and (or (not (= $generated@@135 $generated@@131)) (not true)) ($generated@@13 ($generated@@35 $generated@@9 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@132 $generated@@135) $generated@@133)))) $generated@@134))
 :pattern ( ($generated@@103 $generated@@33 $generated@@31 $generated@@9 ($generated@@104 $generated@@131 $generated@@132 $generated@@133 $generated@@134) $generated@@135 $generated@@136))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> (and ($generated@@137 $generated@@139) (and ($generated@@64 $generated@@138) ($generated@@25 $generated@@87 $generated@@138 $generated@@88 $generated@@139))) ($generated@@25 $generated@@10 ($generated@@14 ($generated@@94 $generated@@138)) $generated $generated@@139))
 :pattern ( ($generated@@25 $generated@@10 ($generated@@14 ($generated@@94 $generated@@138)) $generated $generated@@139))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> (and ($generated@@137 $generated@@141) (and ($generated@@67 $generated@@140) ($generated@@25 $generated@@87 $generated@@140 $generated@@88 $generated@@141))) ($generated@@25 $generated@@10 ($generated@@14 ($generated@@97 $generated@@140)) $generated $generated@@141))
 :pattern ( ($generated@@25 $generated@@10 ($generated@@14 ($generated@@97 $generated@@140)) $generated $generated@@141))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> (and ($generated@@137 $generated@@143) ($generated@@78 $generated@@87 $generated@@142 $generated@@88)) ($generated@@25 $generated@@87 $generated@@142 $generated@@88 $generated@@143))
 :pattern ( ($generated@@25 $generated@@87 $generated@@142 $generated@@88 $generated@@143))
)))
(assert (= ($generated@@24 $generated@@26) $generated@@2))
(assert (= ($generated@@144 $generated@@26) $generated@@6))
(assert (= ($generated@@24 $generated@@88) $generated@@3))
(assert (= ($generated@@144 $generated@@88) $generated@@7))
(assert (forall (($generated@@145 Int) ) (! (= ($generated@@69 $generated@@10 ($generated@@14 ($generated@@59 $generated@@145))) ($generated@@61 $generated@@32 ($generated@@69 $generated@@10 ($generated@@14 $generated@@145))))
 :pattern ( ($generated@@69 $generated@@10 ($generated@@14 ($generated@@59 $generated@@145))))
)))
(assert (forall (($generated@@146 Int) ) (! (= ($generated@@72 ($generated@@59 $generated@@146)) ($generated@@61 $generated@@87 ($generated@@72 $generated@@146)))
 :pattern ( ($generated@@72 ($generated@@59 $generated@@146)))
)))
(assert (forall (($generated@@147 Int) ) (! (= ($generated@@75 ($generated@@59 $generated@@147)) ($generated@@61 $generated@@87 ($generated@@75 $generated@@147)))
 :pattern ( ($generated@@75 ($generated@@59 $generated@@147)))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@T) ) (! (= ($generated@@69 $generated@@149 ($generated@@61 $generated@@149 $generated@@148)) ($generated@@61 $generated@@32 ($generated@@69 $generated@@149 $generated@@148)))
 :pattern ( ($generated@@69 $generated@@149 ($generated@@61 $generated@@149 $generated@@148)))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (! ($generated@@25 $generated@@10 $generated@@151 $generated $generated@@150)
 :pattern ( ($generated@@25 $generated@@10 $generated@@151 $generated $generated@@150))
)))
(assert (forall (($generated@@152 T@U) ) (! ($generated@@78 $generated@@10 $generated@@152 $generated)
 :pattern ( ($generated@@78 $generated@@10 $generated@@152 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () Int)
(declare-fun $generated@@155 () Int)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 (T@U) Bool)
(declare-fun $generated@@160 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@161 true))
(let (($generated@@162 true))
(let (($generated@@163  (=> (or (not (= $generated@@153 ($generated@@72 $generated@@154))) (not true)) (and (=> (= (ControlFlow 0 5) 3) $generated@@162) (=> (= (ControlFlow 0 5) 4) $generated@@161)))))
(let (($generated@@164  (=> (= $generated@@153 ($generated@@72 $generated@@154)) (=> (and (<= ($generated@@59 0) $generated@@155) (= (ControlFlow 0 2) (- 0 1))) ($generated@@78 $generated@@10 ($generated@@14 $generated@@154) $generated@@26)))))
(let (($generated@@165  (=> (= $generated@@156 ($generated@@104 $generated@@157 $generated@@158 $generated@@1 false)) (and (=> (= (ControlFlow 0 6) 2) $generated@@164) (=> (= (ControlFlow 0 6) 5) $generated@@163)))))
(let (($generated@@166  (=> (and ($generated@@137 $generated@@158) ($generated@@159 $generated@@158)) (=> (and (and (and (and ($generated@@78 $generated@@87 $generated@@153 $generated@@88) ($generated@@25 $generated@@87 $generated@@153 $generated@@88 $generated@@158)) ($generated@@85 $generated@@153)) (= 1 $generated@@160)) (and (=> ($generated@@64 $generated@@153) (<= ($generated@@59 0) ($generated@@94 $generated@@153))) (= (ControlFlow 0 7) 6))) $generated@@165))))
$generated@@166)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
