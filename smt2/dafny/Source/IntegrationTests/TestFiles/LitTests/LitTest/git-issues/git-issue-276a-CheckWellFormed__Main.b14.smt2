(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (Int) Int)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@17 (T@T T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 ((_ BitVec 32)) Int)
(declare-fun $generated@@28 (Int) T@U)
(declare-fun $generated@@29 (T@U) Int)
(declare-fun $generated@@31 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@T T@T) T@T)
(declare-fun $generated@@38 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 Int) ) (! (= ($generated $generated@@16) $generated@@16)
 :pattern ( ($generated $generated@@16))
)))
(assert (forall (($generated@@18 T@U) ($generated@@19 T@T) ) (! (= ($generated@@17 $generated@@19 $generated@@18) $generated@@18)
 :pattern ( ($generated@@17 $generated@@19 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 ($generated@@20 $generated@@23 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@25 (_ BitVec 32)) ) (!  (and (and (<= 0 ($generated@@24 $generated@@25)) (< ($generated@@24 $generated@@25) 4294967296)) (= ($generated@@24 $generated@@25) (bv2int $generated@@25)))
 :pattern ( ($generated@@24 $generated@@25))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@20 $generated@@27 ($generated@@21 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@21 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@30 Int) ) (!  (=> (or (and (<= 0 $generated@@30) (< $generated@@30 55296)) (and (<= 57344 $generated@@30) (< $generated@@30 1114112))) (= ($generated@@29 ($generated@@28 $generated@@30)) $generated@@30))
 :pattern ( ($generated@@28 $generated@@30))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@31 $generated@@42 $generated@@43 $generated@@44 ($generated@@38 $generated@@42 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@48 $generated@@45) $generated@@47 $generated@@48) $generated@@45)
 :weight 0
)) (and (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@54 $generated@@56) (= ($generated@@31 $generated@@49 $generated@@50 $generated@@51 ($generated@@38 $generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@55 $generated@@52) $generated@@56 $generated@@57) ($generated@@31 $generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@56 $generated@@57)))
 :weight 0
)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (or (= $generated@@64 $generated@@66) (= ($generated@@31 $generated@@58 $generated@@59 $generated@@60 ($generated@@38 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@65 $generated@@66) ($generated@@31 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@65 $generated@@66)))
 :weight 0
)))) (= ($generated@@0 $generated@@32) 3)) (= ($generated@@0 $generated@@33) 4)) (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@35 $generated@@67 $generated@@68 ($generated@@39 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@69) $generated@@71) $generated@@69)
 :weight 0
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@76 $generated@@77) (= ($generated@@35 $generated@@72 $generated@@73 ($generated@@39 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@74) $generated@@77) ($generated@@35 $generated@@72 $generated@@73 $generated@@75 $generated@@77)))
 :weight 0
))) (= ($generated@@0 $generated@@36) 5)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ) (= ($generated@@0 ($generated@@37 $generated@@78 $generated@@79)) 6))) (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@80 $generated@@81)) $generated@@80)
 :pattern ( ($generated@@37 $generated@@80 $generated@@81))
))) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@41 ($generated@@37 $generated@@82 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@37 $generated@@82 $generated@@83))
))))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 Bool) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@5 ($generated@@31 $generated@@32 $generated@@33 $generated@@1 ($generated@@34 $generated@@84 $generated@@85 $generated@@86 $generated@@87) $generated@@88 $generated@@89))  (=> (and (or (not (= $generated@@88 $generated@@84)) (not true)) ($generated@@5 ($generated@@20 $generated@@1 ($generated@@35 $generated@@33 $generated@@36 ($generated@@35 $generated@@32 ($generated@@37 $generated@@33 $generated@@36) $generated@@85 $generated@@88) $generated@@86)))) $generated@@87))
 :pattern ( ($generated@@31 $generated@@32 $generated@@33 $generated@@1 ($generated@@34 $generated@@84 $generated@@85 $generated@@86 $generated@@87) $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ) (!  (and (= ($generated@@28 ($generated@@29 $generated@@90)) $generated@@90) (or (and (<= 0 ($generated@@29 $generated@@90)) (< ($generated@@29 $generated@@90) 55296)) (and (<= 57344 ($generated@@29 $generated@@90)) (< ($generated@@29 $generated@@90) 1114112))))
 :pattern ( ($generated@@29 $generated@@90))
)))
(assert (forall (($generated@@91 Int) ) (! (= ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@91))) ($generated@@17 $generated@@36 ($generated@@21 $generated@@2 ($generated@@6 $generated@@91))))
 :pattern ( ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@91))))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@21 $generated@@93 ($generated@@17 $generated@@93 $generated@@92)) ($generated@@17 $generated@@36 ($generated@@21 $generated@@93 $generated@@92)))
 :pattern ( ($generated@@21 $generated@@93 ($generated@@17 $generated@@93 $generated@@92)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@94 () Int)
(declare-fun $generated@@95 () Int)
(declare-fun $generated@@96 () T@U)
(declare-fun $generated@@97 () T@U)
(declare-fun $generated@@98 () T@U)
(declare-fun $generated@@99 () T@U)
(declare-fun $generated@@100 (T@U) Bool)
(declare-fun $generated@@101 (T@U) Bool)
(declare-fun $generated@@102 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@103 true))
(let (($generated@@104  (=> (and (< $generated@@94 ($generated 0)) (= (ControlFlow 0 8) 4)) $generated@@103)))
(let (($generated@@105  (=> (and (<= ($generated 0) $generated@@94) (= $generated@@95 ($generated 16777215))) (and (=> (= (ControlFlow 0 5) (- 0 7)) (and (<= 0 $generated@@95) (< $generated@@95 4294967296))) (=> (and (<= 0 $generated@@95) (< $generated@@95 4294967296)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (bvult #x00ffffff #x00010000)) (=> (bvult #x00ffffff #x00010000) (=> (= (ControlFlow 0 5) 4) $generated@@103))))))))
(let (($generated@@106  (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated 0) ($generated 0))) (=> (= (ControlFlow 0 2) (- 0 1)) (< 0 ($generated@@29 ($generated@@28 ($generated@@24 #x00ffffff))))))))
(let (($generated@@107  (=> (= $generated@@96 ($generated@@34 $generated@@97 $generated@@98 $generated@@99 false)) (and (and (=> (= (ControlFlow 0 9) 2) $generated@@106) (=> (= (ControlFlow 0 9) 5) $generated@@105)) (=> (= (ControlFlow 0 9) 8) $generated@@104)))))
(let (($generated@@108  (=> (and (and ($generated@@100 $generated@@98) ($generated@@101 $generated@@98)) (and (= 0 $generated@@102) (= (ControlFlow 0 10) 9))) $generated@@107)))
$generated@@108)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 5) (- 6))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
