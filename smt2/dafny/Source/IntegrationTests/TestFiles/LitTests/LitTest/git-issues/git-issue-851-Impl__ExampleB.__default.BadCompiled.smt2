(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@T T@T) T@T)
(declare-fun $generated@@38 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@U) T@U)
(declare-fun $generated@@68 (T@T T@U T@U) Bool)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@112 (T@U) T@U)
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@114 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@23) 3))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@26 $generated@@24 $generated@@27) ($generated@@22 $generated@@23 $generated@@26 $generated@@25 $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 $generated@@26 $generated@@24 $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 $generated@@26 $generated@@25 $generated@@27))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@30 $generated@@28 $generated@@31) ($generated@@22 $generated@@23 $generated@@30 $generated@@29 $generated@@31))
 :pattern ( ($generated@@22 $generated@@23 $generated@@30 $generated@@28 $generated@@31))
 :pattern ( ($generated@@22 $generated@@23 $generated@@30 $generated@@29 $generated@@31))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@34 $generated@@41 $generated@@42 ($generated@@38 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@43) $generated@@45) $generated@@43)
 :weight 0
)) (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (!  (or (= $generated@@50 $generated@@51) (= ($generated@@34 $generated@@46 $generated@@47 ($generated@@38 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@48) $generated@@51) ($generated@@34 $generated@@46 $generated@@47 $generated@@49 $generated@@51)))
 :weight 0
))) (= ($generated@@6 $generated@@35) 4)) (= ($generated@@6 $generated@@36) 5)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (= ($generated@@6 ($generated@@37 $generated@@52 $generated@@53)) 6))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@39 ($generated@@37 $generated@@54 $generated@@55)) $generated@@54)
 :pattern ( ($generated@@37 $generated@@54 $generated@@55))
))) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@56 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@37 $generated@@56 $generated@@57))
))))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@58 $generated@@25 $generated@@59)  (or (= $generated@@58 $generated@@32) ($generated@@11 ($generated@@33 $generated@@7 ($generated@@34 $generated@@35 $generated@@36 ($generated@@34 $generated@@23 ($generated@@37 $generated@@35 $generated@@36) $generated@@59 $generated@@58) $generated)))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@58 $generated@@25 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@60 $generated@@29 $generated@@61)  (or (= $generated@@60 $generated@@32) ($generated@@11 ($generated@@33 $generated@@7 ($generated@@34 $generated@@35 $generated@@36 ($generated@@34 $generated@@23 ($generated@@37 $generated@@35 $generated@@36) $generated@@61 $generated@@60) $generated)))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@60 $generated@@29 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 $generated@@63) $generated@@63)
 :pattern ( ($generated@@62 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@65 $generated@@67 ($generated@@33 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@33 $generated@@67 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@68 $generated@@23 $generated@@69 $generated@@24)  (and ($generated@@68 $generated@@23 $generated@@69 $generated@@25) (or (not (= $generated@@69 $generated@@32)) (not true))))
 :pattern ( ($generated@@68 $generated@@23 $generated@@69 $generated@@24))
 :pattern ( ($generated@@68 $generated@@23 $generated@@69 $generated@@25))
)))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@68 $generated@@23 $generated@@70 $generated@@28)  (and ($generated@@68 $generated@@23 $generated@@70 $generated@@29) (or (not (= $generated@@70 $generated@@32)) (not true))))
 :pattern ( ($generated@@68 $generated@@23 $generated@@70 $generated@@28))
 :pattern ( ($generated@@68 $generated@@23 $generated@@70 $generated@@29))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@71 $generated@@29 $generated@@72) ($generated@@22 $generated@@23 $generated@@71 $generated@@25 $generated@@72))
 :pattern ( ($generated@@22 $generated@@23 $generated@@71 $generated@@29 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ) (! ($generated@@68 $generated@@23 $generated@@73 $generated@@25)
 :pattern ( ($generated@@68 $generated@@23 $generated@@73 $generated@@25))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@33 $generated@@75 ($generated@@65 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@65 $generated@@75 $generated@@74))
)))
(assert  (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@76 $generated@@79 $generated@@80 $generated@@81 ($generated@@78 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@84 $generated@@85) $generated@@82)
 :weight 0
)) (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@76 $generated@@86 $generated@@87 $generated@@88 ($generated@@78 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@76 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@76 $generated@@95 $generated@@96 $generated@@97 ($generated@@78 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@76 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 Bool) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@11 ($generated@@76 $generated@@23 $generated@@35 $generated@@7 ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))  (=> (and (or (not (= $generated@@108 $generated@@104)) (not true)) ($generated@@11 ($generated@@33 $generated@@7 ($generated@@34 $generated@@35 $generated@@36 ($generated@@34 $generated@@23 ($generated@@37 $generated@@35 $generated@@36) $generated@@105 $generated@@108) $generated@@106)))) $generated@@107))
 :pattern ( ($generated@@76 $generated@@23 $generated@@35 $generated@@7 ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ) (!  (=> ($generated@@68 $generated@@23 $generated@@110 $generated@@29) ($generated@@68 $generated@@23 $generated@@110 $generated@@25))
 :pattern ( ($generated@@68 $generated@@23 $generated@@110 $generated@@29))
)))
(assert (= ($generated@@111 $generated@@25) $generated@@0))
(assert (= ($generated@@112 $generated@@25) $generated@@4))
(assert (= ($generated@@111 $generated@@24) $generated@@1))
(assert (= ($generated@@112 $generated@@24) $generated@@4))
(assert (= ($generated@@111 $generated@@28) $generated@@2))
(assert (= ($generated@@112 $generated@@28) $generated@@5))
(assert (= ($generated@@111 $generated@@29) $generated@@3))
(assert (= ($generated@@112 $generated@@29) $generated@@5))
(assert (forall (($generated@@115 T@U) ) (! (= ($generated@@68 $generated@@23 $generated@@115 $generated@@29)  (or (= $generated@@115 $generated@@32) ($generated@@113 ($generated@@114 $generated@@115))))
 :pattern ( ($generated@@68 $generated@@23 $generated@@115 $generated@@29))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@65 $generated@@117 ($generated@@62 $generated@@117 $generated@@116)) ($generated@@62 $generated@@36 ($generated@@65 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@65 $generated@@117 ($generated@@62 $generated@@117 $generated@@116)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 (T@U) Bool)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () Bool)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@128  (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (and ($generated@@68 $generated@@23 $generated@@32 $generated@@28) (= $generated@@32 $generated@@32)) (exists (($generated@@129 T@U) )  (and (and ($generated@@68 $generated@@23 $generated@@129 $generated@@28) ($generated@@22 $generated@@23 $generated@@129 $generated@@28 $generated@@118)) (= $generated@@129 $generated@@129))))) (=> (or (and ($generated@@68 $generated@@23 $generated@@32 $generated@@28) (= $generated@@32 $generated@@32)) (exists (($generated@@130 T@U) )  (and (and ($generated@@68 $generated@@23 $generated@@130 $generated@@28) ($generated@@22 $generated@@23 $generated@@130 $generated@@28 $generated@@118)) (= $generated@@130 $generated@@130)))) (=> (and (=> true (and ($generated@@68 $generated@@23 $generated@@119 $generated@@28) ($generated@@22 $generated@@23 $generated@@119 $generated@@28 $generated@@118))) (= $generated@@119 $generated@@119)) (and (=> (= (ControlFlow 0 2) (- 0 4)) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= $generated@@119 $generated@@32)) (not true))) (=> (or (not (= $generated@@119 $generated@@32)) (not true)) (=> (and (and (and ($generated@@120 $generated@@121) ($generated@@122 $generated@@121)) ($generated@@11 ($generated@@62 $generated@@7 ($generated@@10 false)))) (and (= $generated@@118 $generated@@121) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@11 ($generated@@62 $generated@@7 ($generated@@10 false))))))))))))
(let (($generated@@131  (=> (and (not (and ($generated@@68 $generated@@23 $generated@@123 $generated@@28) ($generated@@22 $generated@@23 $generated@@123 $generated@@28 $generated@@118))) (= (ControlFlow 0 7) 2)) $generated@@128)))
(let (($generated@@132  (=> (and (and ($generated@@68 $generated@@23 $generated@@123 $generated@@28) ($generated@@22 $generated@@23 $generated@@123 $generated@@28 $generated@@118)) (= (ControlFlow 0 6) 2)) $generated@@128)))
(let (($generated@@133  (=> (= $generated@@124 ($generated@@77 $generated@@32 $generated@@118 $generated false)) (and (=> (= (ControlFlow 0 8) 6) $generated@@132) (=> (= (ControlFlow 0 8) 7) $generated@@131)))))
(let (($generated@@134  (=> (and ($generated@@120 $generated@@118) ($generated@@122 $generated@@118)) (=> (and (and (=> $generated@@125 (and ($generated@@68 $generated@@23 $generated@@126 $generated@@28) ($generated@@22 $generated@@23 $generated@@126 $generated@@28 $generated@@118))) true) (and (= 1 $generated@@127) (= (ControlFlow 0 9) 8))) $generated@@133))))
$generated@@134))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
