(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (Int) Bool)
(declare-fun $generated@@28 (T@U) Int)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@36 (Int) Int)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 () Int)
(declare-fun $generated@@48 (T@U) Int)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@50 (Int Int) Int)
(declare-fun $generated@@51 (Int Int) Int)
(declare-fun $generated@@52 (Int Int) Int)
(declare-fun $generated@@54 (Int) T@U)
(declare-fun $generated@@58 (Int) Bool)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@T T@T) T@T)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T) T@T)
(declare-fun $generated@@78 (T@T) T@T)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@136 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@7 $generated@@24) 3))
(assert (forall (($generated@@29 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@29 $generated@@25)  (and ($generated@@23 $generated@@24 $generated@@29 $generated@@26) ($generated@@27 ($generated@@28 $generated@@29))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@29 $generated@@25))
)))
(assert (= ($generated@@30 $generated) $generated@@0))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@31 $generated@@24 $generated@@32 $generated@@25 $generated@@33) ($generated@@31 $generated@@24 $generated@@32 $generated@@26 $generated@@33))
 :pattern ( ($generated@@31 $generated@@24 $generated@@32 $generated@@25 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@35 $generated@@26) ($generated@@34 $generated@@35))
 :pattern ( ($generated@@34 $generated@@35) ($generated@@23 $generated@@24 $generated@@35 $generated@@26))
)))
(assert (forall (($generated@@37 Int) ) (! (= ($generated@@36 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 $generated@@39) $generated@@39)
 :pattern ( ($generated@@38 $generated@@40 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@34 $generated@@42) (= ($generated@@41 $generated@@42) $generated@@3))
 :pattern ( ($generated@@34 $generated@@42))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert  (=> (<= 2 $generated@@47) (forall (($generated@@53 T@U) ) (!  (=> (or ($generated@@49 ($generated@@38 $generated@@24 $generated@@53)) (and (< 2 $generated@@47) ($generated@@23 $generated@@24 $generated@@53 $generated@@25))) (and (and ($generated@@34 ($generated@@38 $generated@@24 $generated@@53)) (=> (or (not (= ($generated@@36 ($generated@@50 ($generated@@28 ($generated@@38 $generated@@24 $generated@@53)) ($generated@@36 2))) ($generated@@36 1))) (not true)) ($generated@@34 ($generated@@38 $generated@@24 $generated@@53)))) (= ($generated@@48 ($generated@@38 $generated@@24 $generated@@53)) (ite (= ($generated@@36 ($generated@@50 ($generated@@28 ($generated@@38 $generated@@24 $generated@@53)) ($generated@@36 2))) ($generated@@36 1)) ($generated@@51 1 ($generated@@36 0)) ($generated@@52 ($generated@@36 ($generated@@28 ($generated@@38 $generated@@24 $generated@@53))) ($generated@@36 2))))))
 :weight 3
 :pattern ( ($generated@@48 ($generated@@38 $generated@@24 $generated@@53)))
))))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@34 $generated@@55) (exists (($generated@@56 Int) ) (= $generated@@55 ($generated@@54 $generated@@56))))
 :pattern ( ($generated@@34 $generated@@55))
)))
(assert  (=> (<= 2 $generated@@47) (forall (($generated@@57 T@U) ) (!  (=> (or ($generated@@49 $generated@@57) (and (< 2 $generated@@47) ($generated@@23 $generated@@24 $generated@@57 $generated@@25))) (and (and ($generated@@34 $generated@@57) (=> (or (not (= ($generated@@50 ($generated@@28 $generated@@57) ($generated@@36 2)) ($generated@@36 1))) (not true)) ($generated@@34 $generated@@57))) (= ($generated@@48 $generated@@57) (ite (= ($generated@@50 ($generated@@28 $generated@@57) ($generated@@36 2)) ($generated@@36 1)) ($generated@@51 1 ($generated@@36 0)) ($generated@@52 ($generated@@28 $generated@@57) ($generated@@36 2))))))
 :pattern ( ($generated@@48 $generated@@57))
))))
(assert  (=> (<= 0 $generated@@47) (forall (($generated@@59 Int) ) (!  (=> (or ($generated@@58 $generated@@59) (< 0 $generated@@47)) (= ($generated@@27 $generated@@59) (= ($generated@@50 $generated@@59 ($generated@@36 2)) ($generated@@36 0))))
 :pattern ( ($generated@@27 $generated@@59))
))))
(assert (forall (($generated@@60 Int) ($generated@@61 Int) ) (! (= ($generated@@51 $generated@@60 $generated@@61) (div $generated@@60 $generated@@61))
 :pattern ( ($generated@@51 $generated@@60 $generated@@61))
)))
(assert  (=> (<= 0 $generated@@47) (forall (($generated@@62 Int) ) (!  (=> (or ($generated@@58 ($generated@@36 $generated@@62)) (< 0 $generated@@47)) (= ($generated@@27 ($generated@@36 $generated@@62)) (= ($generated@@36 ($generated@@50 $generated@@62 ($generated@@36 2))) ($generated@@36 0))))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@36 $generated@@62)))
))))
(assert (forall (($generated@@63 Int) ) (! (= ($generated@@41 ($generated@@54 $generated@@63)) $generated@@3)
 :pattern ( ($generated@@54 $generated@@63))
)))
(assert (forall (($generated@@64 Int) ) (! (= ($generated@@28 ($generated@@54 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@54 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@43 $generated@@66 ($generated@@44 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@44 $generated@@66 $generated@@65))
)))
(assert (forall (($generated@@67 Int) ) (! (= ($generated@@23 $generated@@24 ($generated@@54 $generated@@67) $generated@@26) ($generated@@23 $generated@@9 ($generated@@13 $generated@@67) $generated))
 :pattern ( ($generated@@23 $generated@@24 ($generated@@54 $generated@@67) $generated@@26))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@68 $generated@@79 $generated@@80 $generated@@81 ($generated@@75 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@84 $generated@@85) $generated@@82)
 :weight 0
)) (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@68 $generated@@86 $generated@@87 $generated@@88 ($generated@@75 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@68 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@68 $generated@@95 $generated@@96 $generated@@97 ($generated@@75 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@68 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)))) (= ($generated@@7 $generated@@69) 4)) (= ($generated@@7 $generated@@70) 5)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@72 $generated@@104 $generated@@105 ($generated@@76 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@108) $generated@@106)
 :weight 0
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@113 $generated@@114) (= ($generated@@72 $generated@@109 $generated@@110 ($generated@@76 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@111) $generated@@114) ($generated@@72 $generated@@109 $generated@@110 $generated@@112 $generated@@114)))
 :weight 0
))) (= ($generated@@7 $generated@@73) 6)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (= ($generated@@7 ($generated@@74 $generated@@115 $generated@@116)) 7))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@77 ($generated@@74 $generated@@117 $generated@@118)) $generated@@117)
 :pattern ( ($generated@@74 $generated@@117 $generated@@118))
))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@78 ($generated@@74 $generated@@119 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@74 $generated@@119 $generated@@120))
))))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 Bool) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@12 ($generated@@68 $generated@@69 $generated@@70 $generated@@8 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))  (=> (and (or (not (= $generated@@125 $generated@@121)) (not true)) ($generated@@12 ($generated@@43 $generated@@8 ($generated@@72 $generated@@70 $generated@@73 ($generated@@72 $generated@@69 ($generated@@74 $generated@@70 $generated@@73) $generated@@122 $generated@@125) $generated@@123)))) $generated@@124))
 :pattern ( ($generated@@68 $generated@@69 $generated@@70 $generated@@8 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))
)))
(assert (forall (($generated@@127 Int) ($generated@@128 Int) ) (! (= ($generated@@50 $generated@@127 $generated@@128) (mod $generated@@127 $generated@@128))
 :pattern ( ($generated@@50 $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (and ($generated@@129 $generated@@131) (and ($generated@@34 $generated@@130) ($generated@@31 $generated@@24 $generated@@130 $generated@@26 $generated@@131))) ($generated@@31 $generated@@9 ($generated@@13 ($generated@@28 $generated@@130)) $generated $generated@@131))
 :pattern ( ($generated@@31 $generated@@9 ($generated@@13 ($generated@@28 $generated@@130)) $generated $generated@@131))
)))
(assert (forall (($generated@@132 Int) ($generated@@133 Int) ) (! (= ($generated@@52 $generated@@132 $generated@@133) (* $generated@@132 $generated@@133))
 :pattern ( ($generated@@52 $generated@@132 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (=> (and ($generated@@129 $generated@@135) ($generated@@23 $generated@@24 $generated@@134 $generated@@26)) ($generated@@31 $generated@@24 $generated@@134 $generated@@26 $generated@@135))
 :pattern ( ($generated@@31 $generated@@24 $generated@@134 $generated@@26 $generated@@135))
)))
(assert (= ($generated@@30 $generated@@25) $generated@@2))
(assert (= ($generated@@136 $generated@@25) $generated@@5))
(assert (= ($generated@@30 $generated@@26) $generated@@4))
(assert (= ($generated@@136 $generated@@26) $generated@@6))
(assert (forall (($generated@@137 Int) ) (! (= ($generated@@44 $generated@@9 ($generated@@13 ($generated@@36 $generated@@137))) ($generated@@38 $generated@@73 ($generated@@44 $generated@@9 ($generated@@13 $generated@@137))))
 :pattern ( ($generated@@44 $generated@@9 ($generated@@13 ($generated@@36 $generated@@137))))
)))
(assert (forall (($generated@@138 Int) ) (! (= ($generated@@54 ($generated@@36 $generated@@138)) ($generated@@38 $generated@@24 ($generated@@54 $generated@@138)))
 :pattern ( ($generated@@54 ($generated@@36 $generated@@138)))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@T) ) (! (= ($generated@@44 $generated@@140 ($generated@@38 $generated@@140 $generated@@139)) ($generated@@38 $generated@@73 ($generated@@44 $generated@@140 $generated@@139)))
 :pattern ( ($generated@@44 $generated@@140 ($generated@@38 $generated@@140 $generated@@139)))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (! ($generated@@31 $generated@@9 $generated@@142 $generated $generated@@141)
 :pattern ( ($generated@@31 $generated@@9 $generated@@142 $generated $generated@@141))
)))
(assert (forall (($generated@@143 T@U) ) (! ($generated@@23 $generated@@9 $generated@@143 $generated)
 :pattern ( ($generated@@23 $generated@@9 $generated@@143 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 (T@U) Bool)
(declare-fun $generated@@149 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@150 true))
(let (($generated@@151 true))
(let (($generated@@152  (=> (= $generated@@144 ($generated@@71 $generated@@145 $generated@@146 $generated@@1 false)) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@23 $generated@@24 ($generated@@38 $generated@@24 ($generated@@54 ($generated@@36 2))) $generated@@25)) (=> ($generated@@23 $generated@@24 ($generated@@38 $generated@@24 ($generated@@54 ($generated@@36 2))) $generated@@25) (=> (and (and (= $generated@@147 ($generated@@38 $generated@@24 ($generated@@54 ($generated@@36 2)))) ($generated@@31 $generated@@24 $generated@@147 $generated@@25 $generated@@146)) (and ($generated@@49 $generated@@147) ($generated@@49 $generated@@147))) (and (=> (= (ControlFlow 0 3) 1) $generated@@151) (=> (= (ControlFlow 0 3) 2) $generated@@150))))))))
(let (($generated@@153  (=> (and ($generated@@129 $generated@@146) ($generated@@148 $generated@@146)) (=> (and (and (and ($generated@@23 $generated@@24 $generated@@149 $generated@@25) ($generated@@31 $generated@@24 $generated@@149 $generated@@25 $generated@@146)) true) (and (= 3 $generated@@47) (= (ControlFlow 0 5) 3))) $generated@@152))))
$generated@@153)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
