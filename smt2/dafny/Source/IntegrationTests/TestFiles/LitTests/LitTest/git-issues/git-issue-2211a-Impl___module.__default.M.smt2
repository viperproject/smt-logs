(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 () Int)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U Int) T@U)
(declare-fun $generated@@35 (Int) Bool)
(declare-fun $generated@@36 (Int) Bool)
(declare-fun $generated@@37 (Int) Bool)
(declare-fun $generated@@38 (Int) Bool)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@54 (T@U T@U) Bool)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@75 (T@T T@T) T@T)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@T) T@T)
(declare-fun $generated@@79 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (= ($generated@@3 $generated@@31) 3))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@39 T@U) ) (!  (=> (or ($generated@@29 $generated@@39) (and (< 1 $generated@@27) ($generated@@30 $generated@@31 $generated@@39 ($generated@@32 $generated)))) (and (forall (($generated@@40 Int) ) (!  (=> (and (<= ($generated@@22 0) $generated@@40) (< $generated@@40 ($generated@@20 $generated@@39))) (and ($generated@@35 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@39 $generated@@40)))) (=> (not ($generated@@36 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@39 $generated@@40))))) ($generated@@37 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@39 $generated@@40)))))))
 :pattern ( ($generated@@33 $generated@@5 ($generated@@34 $generated@@39 $generated@@40)))
)) (= ($generated@@28 $generated@@39) (exists (($generated@@41 Int) ) (!  (and (and (<= ($generated@@22 0) $generated@@41) (< $generated@@41 ($generated@@20 $generated@@39))) (or ($generated@@36 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@39 $generated@@41)))) ($generated@@38 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@39 $generated@@41))))))
 :pattern ( ($generated@@33 $generated@@5 ($generated@@34 $generated@@39 $generated@@41)))
)))))
 :pattern ( ($generated@@28 $generated@@39))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 ($generated@@33 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@33 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@50 $generated@@47) $generated@@48 $generated@@49) ($generated@@46 $generated@@50 $generated@@47 $generated@@48 $generated@@49))
 :pattern ( ($generated@@45 ($generated@@42 $generated@@50 $generated@@47) $generated@@48 $generated@@49))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@51 T@U) ) (!  (=> (or ($generated@@29 ($generated@@24 $generated@@31 $generated@@51)) (and (< 1 $generated@@27) ($generated@@30 $generated@@31 $generated@@51 ($generated@@32 $generated)))) (and (forall (($generated@@52 Int) ) (!  (=> (and (<= ($generated@@22 0) $generated@@52) (< $generated@@52 ($generated@@20 ($generated@@24 $generated@@31 $generated@@51)))) (and ($generated@@35 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 ($generated@@24 $generated@@31 $generated@@51) $generated@@52)))) (=> (not ($generated@@36 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 ($generated@@24 $generated@@31 $generated@@51) $generated@@52))))) ($generated@@37 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 ($generated@@24 $generated@@31 $generated@@51) $generated@@52)))))))
 :pattern ( ($generated@@33 $generated@@5 ($generated@@34 $generated@@51 $generated@@52)))
)) (= ($generated@@28 ($generated@@24 $generated@@31 $generated@@51)) (exists (($generated@@53 Int) ) (!  (and (and (<= ($generated@@22 0) $generated@@53) (< $generated@@53 ($generated@@20 ($generated@@24 $generated@@31 $generated@@51)))) (or ($generated@@36 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 ($generated@@24 $generated@@31 $generated@@51) $generated@@53)))) ($generated@@38 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 ($generated@@24 $generated@@31 $generated@@51) $generated@@53))))))
 :pattern ( ($generated@@33 $generated@@5 ($generated@@34 $generated@@51 $generated@@53)))
)))))
 :weight 3
 :pattern ( ($generated@@28 ($generated@@24 $generated@@31 $generated@@51)))
))))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@54 $generated@@55 $generated) (and (= ($generated@@42 $generated@@5 ($generated@@33 $generated@@5 $generated@@55)) $generated@@55) ($generated@@30 $generated@@5 ($generated@@33 $generated@@5 $generated@@55) $generated)))
 :pattern ( ($generated@@54 $generated@@55 $generated))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@54 ($generated@@42 $generated@@58 $generated@@56) $generated@@57) ($generated@@30 $generated@@58 $generated@@56 $generated@@57))
 :pattern ( ($generated@@54 ($generated@@42 $generated@@58 $generated@@56) $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (! (<= 0 ($generated@@20 $generated@@59))
 :pattern ( ($generated@@20 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@46 $generated@@31 $generated@@60 ($generated@@32 $generated@@61) $generated@@62) (forall (($generated@@63 Int) ) (!  (=> (and (<= 0 $generated@@63) (< $generated@@63 ($generated@@20 $generated@@60))) ($generated@@45 ($generated@@34 $generated@@60 $generated@@63) $generated@@61 $generated@@62))
 :pattern ( ($generated@@34 $generated@@60 $generated@@63))
)))
 :pattern ( ($generated@@46 $generated@@31 $generated@@60 ($generated@@32 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@64 ($generated@@32 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@32 $generated@@65))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@19 ($generated@@32 $generated@@66)) $generated@@1)
 :pattern ( ($generated@@32 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@33 $generated@@68 ($generated@@42 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@42 $generated@@68 $generated@@67))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@69 $generated@@80 $generated@@81 $generated@@82 ($generated@@76 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@85 $generated@@86) $generated@@83)
 :weight 0
)) (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@69 $generated@@87 $generated@@88 $generated@@89 ($generated@@76 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@69 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@69 $generated@@96 $generated@@97 $generated@@98 ($generated@@76 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@103 $generated@@104) ($generated@@69 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@103 $generated@@104)))
 :weight 0
)))) (= ($generated@@3 $generated@@70) 4)) (= ($generated@@3 $generated@@71) 5)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@73 $generated@@105 $generated@@106 ($generated@@77 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@107) $generated@@109) $generated@@107)
 :weight 0
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@114 $generated@@115) (= ($generated@@73 $generated@@110 $generated@@111 ($generated@@77 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@112) $generated@@115) ($generated@@73 $generated@@110 $generated@@111 $generated@@113 $generated@@115)))
 :weight 0
))) (= ($generated@@3 $generated@@74) 6)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (= ($generated@@3 ($generated@@75 $generated@@116 $generated@@117)) 7))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@78 ($generated@@75 $generated@@118 $generated@@119)) $generated@@118)
 :pattern ( ($generated@@75 $generated@@118 $generated@@119))
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@79 ($generated@@75 $generated@@120 $generated@@121)) $generated@@121)
 :pattern ( ($generated@@75 $generated@@120 $generated@@121))
))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@8 ($generated@@69 $generated@@70 $generated@@71 $generated@@4 ($generated@@72 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@8 ($generated@@33 $generated@@4 ($generated@@73 $generated@@71 $generated@@74 ($generated@@73 $generated@@70 ($generated@@75 $generated@@71 $generated@@74) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@69 $generated@@70 $generated@@71 $generated@@4 ($generated@@72 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> ($generated@@54 $generated@@128 ($generated@@32 $generated@@129)) (and (= ($generated@@42 $generated@@31 ($generated@@33 $generated@@31 $generated@@128)) $generated@@128) ($generated@@30 $generated@@31 ($generated@@33 $generated@@31 $generated@@128) ($generated@@32 $generated@@129))))
 :pattern ( ($generated@@54 $generated@@128 ($generated@@32 $generated@@129)))
)))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@42 $generated@@5 ($generated@@9 ($generated@@22 $generated@@130))) ($generated@@24 $generated@@74 ($generated@@42 $generated@@5 ($generated@@9 $generated@@130))))
 :pattern ( ($generated@@42 $generated@@5 ($generated@@9 ($generated@@22 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@42 $generated@@132 ($generated@@24 $generated@@132 $generated@@131)) ($generated@@24 $generated@@74 ($generated@@42 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@42 $generated@@132 ($generated@@24 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (!  (=> (= ($generated@@20 $generated@@133) 0) (= $generated@@133 $generated@@21))
 :pattern ( ($generated@@20 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! ($generated@@46 $generated@@5 $generated@@135 $generated $generated@@134)
 :pattern ( ($generated@@46 $generated@@5 $generated@@135 $generated $generated@@134))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@136 ($generated@@32 $generated@@137)) (forall (($generated@@138 Int) ) (!  (=> (and (<= 0 $generated@@138) (< $generated@@138 ($generated@@20 $generated@@136))) ($generated@@54 ($generated@@34 $generated@@136 $generated@@138) $generated@@137))
 :pattern ( ($generated@@34 $generated@@136 $generated@@138))
)))
 :pattern ( ($generated@@30 $generated@@31 $generated@@136 ($generated@@32 $generated@@137)))
)))
(assert (forall (($generated@@139 T@U) ) (! ($generated@@30 $generated@@5 $generated@@139 $generated)
 :pattern ( ($generated@@30 $generated@@5 $generated@@139 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@146 (Int) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@147  (=> (and (and (= $generated@@140 ($generated@@72 $generated@@141 $generated@@142 $generated@@2 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@29 $generated@@143)) (or ($generated@@28 $generated@@143) (exists (($generated@@148 Int) ) (!  (and (and (<= ($generated@@22 0) $generated@@148) (< $generated@@148 ($generated@@20 $generated@@143))) (or ($generated@@36 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@143 $generated@@148)))) ($generated@@38 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@143 $generated@@148))))))
 :pattern ( ($generated@@33 $generated@@5 ($generated@@34 $generated@@143 $generated@@148)))
))))))
(let (($generated@@149  (=> (and ($generated@@144 $generated@@142) ($generated@@145 $generated@@142)) (=> (and (and (and ($generated@@30 $generated@@31 $generated@@143 ($generated@@32 $generated)) ($generated@@46 $generated@@31 $generated@@143 ($generated@@32 $generated) $generated@@142)) (= 2 $generated@@27)) (and (exists (($generated@@150 Int) ) (!  (and (and (<= ($generated@@22 0) $generated@@150) (< $generated@@150 ($generated@@20 $generated@@143))) (or (or ($generated@@36 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@143 $generated@@150)))) ($generated@@38 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@143 $generated@@150))))) ($generated@@146 ($generated@@10 ($generated@@33 $generated@@5 ($generated@@34 $generated@@143 $generated@@150))))))
 :pattern ( ($generated@@33 $generated@@5 ($generated@@34 $generated@@143 $generated@@150)))
)) (= (ControlFlow 0 3) 2))) $generated@@147))))
$generated@@149)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
