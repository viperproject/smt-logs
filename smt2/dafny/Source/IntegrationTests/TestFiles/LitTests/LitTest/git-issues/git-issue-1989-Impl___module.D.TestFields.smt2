(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U) Int)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@T T@T) T@T)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@37 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@59 (T@U) Int)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@62 (T@T T@U T@U) Bool)
(declare-fun $generated@@64 () T@U)
(declare-fun $generated@@67 () T@U)
(declare-fun $generated@@68 (T@U T@U) T@U)
(declare-fun $generated@@69 (T@U) Bool)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@79 (T@U) T@U)
(declare-fun $generated@@86 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@120 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@27 $generated@@40 $generated@@41 ($generated@@37 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@44) $generated@@42)
 :weight 0
)) (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (or (= $generated@@49 $generated@@50) (= ($generated@@27 $generated@@45 $generated@@46 ($generated@@37 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@50) ($generated@@27 $generated@@45 $generated@@46 $generated@@48 $generated@@50)))
 :weight 0
))) (= ($generated@@8 $generated@@28) 3)) (= ($generated@@8 $generated@@29) 4)) (= ($generated@@8 $generated@@30) 5)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (= ($generated@@8 ($generated@@31 $generated@@51 $generated@@52)) 6))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@38 ($generated@@31 $generated@@53 $generated@@54)) $generated@@53)
 :pattern ( ($generated@@31 $generated@@53 $generated@@54))
))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@39 ($generated@@31 $generated@@55 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@31 $generated@@55 $generated@@56))
))))
(assert  (=> (< 0 $generated@@24) (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (!  (=> (and (and ($generated@@32 $generated@@57) (and (or (not (= $generated@@58 $generated@@33)) (not true)) (= ($generated@@34 $generated@@58) $generated@@35))) ($generated@@13 ($generated@@26 $generated@@9 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@57 $generated@@58) $generated@@1)))) ($generated@@36 $generated@@10 ($generated@@14 ($generated@@25 $generated@@58)) $generated $generated@@57))
 :pattern ( ($generated@@25 $generated@@58) ($generated@@26 $generated@@9 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@57 $generated@@58) $generated@@1)))
))))
(assert (= ($generated@@59 $generated@@1) 0))
(assert (= ($generated@@60 $generated) $generated@@0))
(assert (= ($generated@@61 $generated@@1) $generated@@2))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@62 $generated@@30 $generated@@63 $generated@@35)  (or (= $generated@@63 $generated@@33) (= ($generated@@34 $generated@@63) $generated@@35)))
 :pattern ( ($generated@@62 $generated@@30 $generated@@63 $generated@@35))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@36 $generated@@30 $generated@@65 $generated@@64 $generated@@66) ($generated@@36 $generated@@30 $generated@@65 $generated@@35 $generated@@66))
 :pattern ( ($generated@@36 $generated@@30 $generated@@65 $generated@@64 $generated@@66))
 :pattern ( ($generated@@36 $generated@@30 $generated@@65 $generated@@35 $generated@@66))
)))
(assert (= ($generated@@59 $generated@@67) 0))
(assert (= ($generated@@68 $generated@@4 $generated@@7) $generated@@67))
(assert  (not ($generated@@69 $generated@@67)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@36 $generated@@30 $generated@@70 $generated@@35 $generated@@71)  (or (= $generated@@70 $generated@@33) ($generated@@13 ($generated@@26 $generated@@9 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@71 $generated@@70) $generated@@1)))))
 :pattern ( ($generated@@36 $generated@@30 $generated@@70 $generated@@35 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 ($generated@@26 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@26 $generated@@74 $generated@@73))
)))
(assert  (=> (< 0 $generated@@24) (forall (($generated@@75 T@U) ) (!  (=> (and (or (not (= $generated@@75 $generated@@33)) (not true)) (= ($generated@@34 $generated@@75) $generated@@35)) ($generated@@62 $generated@@10 ($generated@@14 ($generated@@25 $generated@@75)) $generated))
 :pattern ( ($generated@@25 $generated@@75))
))))
(assert ($generated@@69 $generated@@1))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> (and (and ($generated@@32 $generated@@76) (and (or (not (= $generated@@77 $generated@@33)) (not true)) (= ($generated@@34 $generated@@77) $generated@@35))) ($generated@@13 ($generated@@26 $generated@@9 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@76 $generated@@77) $generated@@1)))) ($generated@@36 $generated@@10 ($generated@@26 $generated@@10 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@76 $generated@@77) $generated@@67)) $generated $generated@@76))
 :pattern ( ($generated@@26 $generated@@10 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@76 $generated@@77) $generated@@67)))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@62 $generated@@30 $generated@@78 $generated@@64)  (and ($generated@@62 $generated@@30 $generated@@78 $generated@@35) (or (not (= $generated@@78 $generated@@33)) (not true))))
 :pattern ( ($generated@@62 $generated@@30 $generated@@78 $generated@@64))
 :pattern ( ($generated@@62 $generated@@30 $generated@@78 $generated@@35))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (!  (and (= ($generated@@79 ($generated@@68 $generated@@80 $generated@@81)) $generated@@80) (= ($generated@@61 ($generated@@68 $generated@@80 $generated@@81)) $generated@@81))
 :pattern ( ($generated@@68 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@26 $generated@@83 ($generated@@72 $generated@@83 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@72 $generated@@83 $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> (and ($generated@@32 $generated@@84) (and (or (not (= $generated@@85 $generated@@33)) (not true)) (= ($generated@@34 $generated@@85) $generated@@35))) ($generated@@62 $generated@@10 ($generated@@26 $generated@@10 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@84 $generated@@85) $generated@@67)) $generated))
 :pattern ( ($generated@@26 $generated@@10 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@84 $generated@@85) $generated@@67)))
)))
(assert  (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@86 $generated@@89 $generated@@90 $generated@@91 ($generated@@88 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@94 $generated@@95) $generated@@92)
 :weight 0
)) (and (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@86 $generated@@96 $generated@@97 $generated@@98 ($generated@@88 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@103 $generated@@104) ($generated@@86 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@103 $generated@@104)))
 :weight 0
)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@86 $generated@@105 $generated@@106 $generated@@107 ($generated@@88 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@112 $generated@@113) ($generated@@86 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@112 $generated@@113)))
 :weight 0
)))))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 Bool) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@13 ($generated@@86 $generated@@30 $generated@@28 $generated@@9 ($generated@@87 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))  (=> (and (or (not (= $generated@@118 $generated@@114)) (not true)) ($generated@@13 ($generated@@26 $generated@@9 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@115 $generated@@118) $generated@@116)))) $generated@@117))
 :pattern ( ($generated@@86 $generated@@30 $generated@@28 $generated@@9 ($generated@@87 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))
)))
(assert (= ($generated@@60 $generated@@64) $generated@@3))
(assert (= ($generated@@120 $generated@@64) $generated@@6))
(assert (= ($generated@@60 $generated@@35) $generated@@5))
(assert (= ($generated@@120 $generated@@35) $generated@@6))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (! ($generated@@36 $generated@@10 $generated@@122 $generated $generated@@121)
 :pattern ( ($generated@@36 $generated@@10 $generated@@122 $generated $generated@@121))
)))
(assert (forall (($generated@@123 T@U) ) (! ($generated@@62 $generated@@10 $generated@@123 $generated)
 :pattern ( ($generated@@62 $generated@@10 $generated@@123 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@128  (=> (= $generated@@124 ($generated@@87 $generated@@33 $generated@@125 $generated@@1 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@15 ($generated@@26 $generated@@10 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@125 $generated@@126) $generated@@67))) ($generated@@15 ($generated@@26 $generated@@10 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@125 $generated@@126) $generated@@67))))) (=> (= ($generated@@15 ($generated@@26 $generated@@10 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@125 $generated@@126) $generated@@67))) ($generated@@15 ($generated@@26 $generated@@10 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@125 $generated@@126) $generated@@67)))) (=> (= (ControlFlow 0 2) (- 0 1)) (= ($generated@@25 $generated@@126) ($generated@@25 $generated@@126))))))))
(let (($generated@@129  (=> (and ($generated@@32 $generated@@125) ($generated@@127 $generated@@125)) (=> (and (and (or (not (= $generated@@126 $generated@@33)) (not true)) (and ($generated@@62 $generated@@30 $generated@@126 $generated@@64) ($generated@@36 $generated@@30 $generated@@126 $generated@@64 $generated@@125))) (and (= 1 $generated@@24) (= (ControlFlow 0 4) 2))) $generated@@128))))
$generated@@129)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
