(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@23 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@T T@T) T@T)
(declare-fun $generated@@35 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@T T@U T@U) Bool)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@66 (T@U T@U) Bool)
(declare-fun $generated@@70 (T@U T@U T@U) Bool)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@90 (T@U) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@130 (T@U) T@U)
(declare-fun $generated@@131 (T@U) Bool)
(declare-fun $generated@@132 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (forall (($generated@@22 T@U) ) (!  (not ($generated@@20 $generated@@21 $generated@@22))
 :pattern ( ($generated@@20 $generated@@21 $generated@@22))
)))
(assert (= ($generated@@4 $generated@@24) 3))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@27 $generated@@25 $generated@@28) ($generated@@23 $generated@@24 $generated@@27 $generated@@26 $generated@@28))
 :pattern ( ($generated@@23 $generated@@24 $generated@@27 $generated@@25 $generated@@28))
 :pattern ( ($generated@@23 $generated@@24 $generated@@27 $generated@@26 $generated@@28))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@31 $generated@@38 $generated@@39 ($generated@@35 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@42) $generated@@40)
 :weight 0
)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (!  (or (= $generated@@47 $generated@@48) (= ($generated@@31 $generated@@43 $generated@@44 ($generated@@35 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@45) $generated@@48) ($generated@@31 $generated@@43 $generated@@44 $generated@@46 $generated@@48)))
 :weight 0
))) (= ($generated@@4 $generated@@32) 4)) (= ($generated@@4 $generated@@33) 5)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (= ($generated@@4 ($generated@@34 $generated@@49 $generated@@50)) 6))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@36 ($generated@@34 $generated@@51 $generated@@52)) $generated@@51)
 :pattern ( ($generated@@34 $generated@@51 $generated@@52))
))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@37 ($generated@@34 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@34 $generated@@53 $generated@@54))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@55 $generated@@26 $generated@@56)  (or (= $generated@@55 $generated@@29) ($generated@@9 ($generated@@30 $generated@@5 ($generated@@31 $generated@@32 $generated@@33 ($generated@@31 $generated@@24 ($generated@@34 $generated@@32 $generated@@33) $generated@@56 $generated@@55) $generated@@0)))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@55 $generated@@26 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 $generated@@58) $generated@@58)
 :pattern ( ($generated@@57 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 ($generated@@30 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@30 $generated@@62 $generated@@61))
)))
(assert (= ($generated@@4 $generated@@64) 7))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@63 $generated@@64 $generated@@67 ($generated@@65 $generated@@68)) (forall (($generated@@69 T@U) ) (!  (=> ($generated@@20 $generated@@67 $generated@@69) ($generated@@66 $generated@@69 $generated@@68))
 :pattern ( ($generated@@20 $generated@@67 $generated@@69))
)))
 :pattern ( ($generated@@63 $generated@@64 $generated@@67 ($generated@@65 $generated@@68)))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@70 ($generated@@60 $generated@@74 $generated@@71) $generated@@72 $generated@@73) ($generated@@23 $generated@@74 $generated@@71 $generated@@72 $generated@@73))
 :pattern ( ($generated@@70 ($generated@@60 $generated@@74 $generated@@71) $generated@@72 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (!  (=> ($generated@@66 $generated@@75 $generated@@25) (and (= ($generated@@60 $generated@@24 ($generated@@30 $generated@@24 $generated@@75)) $generated@@75) ($generated@@63 $generated@@24 ($generated@@30 $generated@@24 $generated@@75) $generated@@25)))
 :pattern ( ($generated@@66 $generated@@75 $generated@@25))
)))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@66 $generated@@76 $generated@@26) (and (= ($generated@@60 $generated@@24 ($generated@@30 $generated@@24 $generated@@76)) $generated@@76) ($generated@@63 $generated@@24 ($generated@@30 $generated@@24 $generated@@76) $generated@@26)))
 :pattern ( ($generated@@66 $generated@@76 $generated@@26))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@63 $generated@@24 $generated@@77 $generated@@25)  (and ($generated@@63 $generated@@24 $generated@@77 $generated@@26) (or (not (= $generated@@77 $generated@@29)) (not true))))
 :pattern ( ($generated@@63 $generated@@24 $generated@@77 $generated@@25))
 :pattern ( ($generated@@63 $generated@@24 $generated@@77 $generated@@26))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> ($generated@@78 $generated@@79 $generated@@80) (= $generated@@79 $generated@@80))
 :pattern ( ($generated@@78 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@66 ($generated@@60 $generated@@83 $generated@@81) $generated@@82) ($generated@@63 $generated@@83 $generated@@81 $generated@@82))
 :pattern ( ($generated@@66 ($generated@@60 $generated@@83 $generated@@81) $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@23 $generated@@64 $generated@@84 ($generated@@65 $generated@@85) $generated@@86) (forall (($generated@@87 T@U) ) (!  (=> ($generated@@20 $generated@@84 $generated@@87) ($generated@@70 $generated@@87 $generated@@85 $generated@@86))
 :pattern ( ($generated@@20 $generated@@84 $generated@@87))
)))
 :pattern ( ($generated@@23 $generated@@64 $generated@@84 ($generated@@65 $generated@@85) $generated@@86))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@88 ($generated@@65 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@65 $generated@@89))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@90 ($generated@@65 $generated@@91)) $generated)
 :pattern ( ($generated@@65 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@30 $generated@@93 ($generated@@60 $generated@@93 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@60 $generated@@93 $generated@@92))
)))
(assert  (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@94 $generated@@97 $generated@@98 $generated@@99 ($generated@@96 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@102 $generated@@103) $generated@@100)
 :weight 0
)) (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@94 $generated@@104 $generated@@105 $generated@@106 ($generated@@96 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@94 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@94 $generated@@113 $generated@@114 $generated@@115 ($generated@@96 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@94 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@9 ($generated@@94 $generated@@24 $generated@@32 $generated@@5 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@9 ($generated@@30 $generated@@5 ($generated@@31 $generated@@32 $generated@@33 ($generated@@31 $generated@@24 ($generated@@34 $generated@@32 $generated@@33) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@94 $generated@@24 $generated@@32 $generated@@5 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> ($generated@@66 $generated@@128 ($generated@@65 $generated@@129)) (and (= ($generated@@60 $generated@@64 ($generated@@30 $generated@@64 $generated@@128)) $generated@@128) ($generated@@63 $generated@@64 ($generated@@30 $generated@@64 $generated@@128) ($generated@@65 $generated@@129))))
 :pattern ( ($generated@@66 $generated@@128 ($generated@@65 $generated@@129)))
)))
(assert (= ($generated@@90 $generated@@25) $generated@@1))
(assert (= ($generated@@130 $generated@@25) $generated@@3))
(assert (= ($generated@@90 $generated@@26) $generated@@2))
(assert (= ($generated@@130 $generated@@26) $generated@@3))
(assert (forall (($generated@@133 T@U) ) (! (= ($generated@@63 $generated@@24 $generated@@133 $generated@@26)  (or (= $generated@@133 $generated@@29) ($generated@@131 ($generated@@132 $generated@@133))))
 :pattern ( ($generated@@63 $generated@@24 $generated@@133 $generated@@26))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@78 $generated@@134 $generated@@135) (forall (($generated@@136 T@U) ) (! (= ($generated@@20 $generated@@134 $generated@@136) ($generated@@20 $generated@@135 $generated@@136))
 :pattern ( ($generated@@20 $generated@@134 $generated@@136))
 :pattern ( ($generated@@20 $generated@@135 $generated@@136))
)))
 :pattern ( ($generated@@78 $generated@@134 $generated@@135))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@T) ) (! (= ($generated@@60 $generated@@138 ($generated@@57 $generated@@138 $generated@@137)) ($generated@@57 $generated@@33 ($generated@@60 $generated@@138 $generated@@137)))
 :pattern ( ($generated@@60 $generated@@138 ($generated@@57 $generated@@138 $generated@@137)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 (T@U) Bool)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () Bool)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@150  (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (and ($generated@@63 $generated@@24 $generated@@29 $generated@@25) ($generated@@20 $generated@@139 ($generated@@60 $generated@@24 $generated@@29))) (exists (($generated@@151 T@U) )  (and ($generated@@63 $generated@@24 $generated@@151 $generated@@25) ($generated@@20 $generated@@139 ($generated@@60 $generated@@24 $generated@@151)))))) (=> (or (and ($generated@@63 $generated@@24 $generated@@29 $generated@@25) ($generated@@20 $generated@@139 ($generated@@60 $generated@@24 $generated@@29))) (exists (($generated@@152 T@U) )  (and ($generated@@63 $generated@@24 $generated@@152 $generated@@25) ($generated@@20 $generated@@139 ($generated@@60 $generated@@24 $generated@@152))))) (=> (and (=> true (and ($generated@@63 $generated@@24 $generated@@140 $generated@@25) ($generated@@23 $generated@@24 $generated@@140 $generated@@25 $generated@@141))) ($generated@@20 $generated@@139 ($generated@@60 $generated@@24 $generated@@140))) (and (=> (= (ControlFlow 0 2) (- 0 4)) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= $generated@@140 $generated@@29)) (not true))) (=> (or (not (= $generated@@140 $generated@@29)) (not true)) (=> (and (and (and ($generated@@142 $generated@@143) ($generated@@144 $generated@@143)) ($generated@@9 ($generated@@57 $generated@@5 ($generated@@8 false)))) (and (= $generated@@141 $generated@@143) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@9 ($generated@@57 $generated@@5 ($generated@@8 false))))))))))))
(let (($generated@@153  (=> (and (not (and ($generated@@63 $generated@@24 $generated@@145 $generated@@25) ($generated@@23 $generated@@24 $generated@@145 $generated@@25 $generated@@141))) (= (ControlFlow 0 7) 2)) $generated@@150)))
(let (($generated@@154  (=> (and (and ($generated@@63 $generated@@24 $generated@@145 $generated@@25) ($generated@@23 $generated@@24 $generated@@145 $generated@@25 $generated@@141)) (= (ControlFlow 0 6) 2)) $generated@@150)))
(let (($generated@@155  (=> (= $generated@@146 ($generated@@95 $generated@@29 $generated@@141 $generated@@0 false)) (and (=> (= (ControlFlow 0 8) 6) $generated@@154) (=> (= (ControlFlow 0 8) 7) $generated@@153)))))
(let (($generated@@156  (=> (and (and ($generated@@142 $generated@@141) ($generated@@144 $generated@@141)) (and ($generated@@63 $generated@@64 $generated@@139 ($generated@@65 $generated@@25)) ($generated@@23 $generated@@64 $generated@@139 ($generated@@65 $generated@@25) $generated@@141))) (=> (and (and (and (=> $generated@@147 (and ($generated@@63 $generated@@24 $generated@@148 $generated@@25) ($generated@@23 $generated@@24 $generated@@148 $generated@@25 $generated@@141))) true) (= 1 $generated@@149)) (and (not ($generated@@78 $generated@@139 $generated@@21)) (= (ControlFlow 0 9) 8))) $generated@@155))))
$generated@@156))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
