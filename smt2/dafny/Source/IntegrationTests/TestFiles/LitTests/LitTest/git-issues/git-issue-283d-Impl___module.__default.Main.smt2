(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U T@U) Bool)
(declare-fun $generated@@18 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@19 () T@T)
(declare-fun $generated@@20 () T@T)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 (T@T T@T) T@T)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@25 (T@T) T@T)
(declare-fun $generated@@26 (T@T) T@T)
(declare-fun $generated@@47 (Int) Int)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@58 (Int) T@U)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@61 (T@U) Int)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@100 () T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@27 T@T) ($generated@@28 T@T) ($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@18 $generated@@27 $generated@@28 ($generated@@24 $generated@@27 $generated@@28 $generated@@30 $generated@@31 $generated@@29) $generated@@31) $generated@@29)
 :weight 0
)) (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (!  (or (= $generated@@36 $generated@@37) (= ($generated@@18 $generated@@32 $generated@@33 ($generated@@24 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@37) ($generated@@18 $generated@@32 $generated@@33 $generated@@35 $generated@@37)))
 :weight 0
))) (= ($generated@@1 $generated@@19) 3)) (= ($generated@@1 $generated@@20) 4)) (= ($generated@@1 $generated@@21) 5)) (forall (($generated@@38 T@T) ($generated@@39 T@T) ) (= ($generated@@1 ($generated@@22 $generated@@38 $generated@@39)) 6))) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (! (= ($generated@@25 ($generated@@22 $generated@@40 $generated@@41)) $generated@@40)
 :pattern ( ($generated@@22 $generated@@40 $generated@@41))
))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@26 ($generated@@22 $generated@@42 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@22 $generated@@42 $generated@@43))
))))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (!  (=> ($generated@@17 $generated@@44 $generated@@45) (forall (($generated@@46 T@U) ) (!  (=> ($generated@@6 ($generated@@23 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@44 $generated@@46) $generated))) ($generated@@6 ($generated@@23 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@45 $generated@@46) $generated))))
 :pattern ( ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@45 $generated@@46) $generated))
)))
 :pattern ( ($generated@@17 $generated@@44 $generated@@45))
)))
(assert (forall (($generated@@48 Int) ) (! (= ($generated@@47 $generated@@48) $generated@@48)
 :pattern ( ($generated@@47 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 $generated@@50) $generated@@50)
 :pattern ( ($generated@@49 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@52 $generated@@54 ($generated@@23 $generated@@54 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@23 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> (or (not (= $generated@@55 $generated@@57)) (not true)) (=> (and ($generated@@17 $generated@@55 $generated@@56) ($generated@@17 $generated@@56 $generated@@57)) ($generated@@17 $generated@@55 $generated@@57)))
 :pattern ( ($generated@@17 $generated@@55 $generated@@56) ($generated@@17 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@60 Int) ) (! (= ($generated@@59 ($generated@@58 $generated@@60)) $generated@@0)
 :pattern ( ($generated@@58 $generated@@60))
)))
(assert (forall (($generated@@62 Int) ) (! (= ($generated@@61 ($generated@@58 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@58 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@23 $generated@@64 ($generated@@52 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@52 $generated@@64 $generated@@63))
)))
(assert  (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@65 $generated@@68 $generated@@69 $generated@@70 ($generated@@67 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@73 $generated@@74) $generated@@71)
 :weight 0
)) (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@65 $generated@@75 $generated@@76 $generated@@77 ($generated@@67 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@65 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@65 $generated@@84 $generated@@85 $generated@@86 ($generated@@67 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@65 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)))))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 Bool) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@6 ($generated@@65 $generated@@21 $generated@@19 $generated@@2 ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))  (=> (and (or (not (= $generated@@97 $generated@@93)) (not true)) ($generated@@6 ($generated@@23 $generated@@2 ($generated@@18 $generated@@19 $generated@@20 ($generated@@18 $generated@@21 ($generated@@22 $generated@@19 $generated@@20) $generated@@94 $generated@@97) $generated@@95)))) $generated@@96))
 :pattern ( ($generated@@65 $generated@@21 $generated@@19 $generated@@2 ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))
)))
(assert (forall (($generated@@99 Int) ) (! (= ($generated@@52 $generated@@3 ($generated@@7 ($generated@@47 $generated@@99))) ($generated@@49 $generated@@20 ($generated@@52 $generated@@3 ($generated@@7 $generated@@99))))
 :pattern ( ($generated@@52 $generated@@3 ($generated@@7 ($generated@@47 $generated@@99))))
)))
(assert (= ($generated@@1 $generated@@100) 7))
(assert (forall (($generated@@101 Int) ) (! (= ($generated@@58 ($generated@@47 $generated@@101)) ($generated@@49 $generated@@100 ($generated@@58 $generated@@101)))
 :pattern ( ($generated@@58 ($generated@@47 $generated@@101)))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@T) ) (! (= ($generated@@52 $generated@@103 ($generated@@49 $generated@@103 $generated@@102)) ($generated@@49 $generated@@20 ($generated@@52 $generated@@103 $generated@@102)))
 :pattern ( ($generated@@52 $generated@@103 ($generated@@49 $generated@@103 $generated@@102)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
