(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@T T@T) T@T)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@61 (T@U T@U) Bool)
(declare-fun $generated@@65 (Int) Int)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@80 (Int Int) Int)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@122 (T@U) T@U)
(declare-fun $generated@@123 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (= ($generated@@5 $generated@@26) 3))
(assert (forall (($generated@@30 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@30 $generated@@27)  (or (= $generated@@30 $generated@@28) (= ($generated@@29 $generated@@30) $generated@@27)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@30 $generated@@27))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@21 $generated@@26 $generated@@32 $generated@@31 $generated@@33) ($generated@@21 $generated@@26 $generated@@32 $generated@@27 $generated@@33))
 :pattern ( ($generated@@21 $generated@@26 $generated@@32 $generated@@31 $generated@@33))
 :pattern ( ($generated@@21 $generated@@26 $generated@@32 $generated@@27 $generated@@33))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@35 $generated@@42 $generated@@43 ($generated@@39 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@46) $generated@@44)
 :weight 0
)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@51 $generated@@52) (= ($generated@@35 $generated@@47 $generated@@48 ($generated@@39 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@52) ($generated@@35 $generated@@47 $generated@@48 $generated@@50 $generated@@52)))
 :weight 0
))) (= ($generated@@5 $generated@@36) 4)) (= ($generated@@5 $generated@@37) 5)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (= ($generated@@5 ($generated@@38 $generated@@53 $generated@@54)) 6))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@40 ($generated@@38 $generated@@55 $generated@@56)) $generated@@55)
 :pattern ( ($generated@@38 $generated@@55 $generated@@56))
))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@41 ($generated@@38 $generated@@57 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@38 $generated@@57 $generated@@58))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@21 $generated@@26 $generated@@59 $generated@@27 $generated@@60)  (or (= $generated@@59 $generated@@28) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@60 $generated@@59) $generated)))))
 :pattern ( ($generated@@21 $generated@@26 $generated@@59 $generated@@27 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (!  (=> ($generated@@61 $generated@@62 $generated@@63) (forall (($generated@@64 T@U) ) (!  (=> ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@62 $generated@@64) $generated))) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@63 $generated@@64) $generated))))
 :pattern ( ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@63 $generated@@64) $generated))
)))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@66 Int) ) (! (= ($generated@@65 $generated@@66) $generated@@66)
 :pattern ( ($generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@67 $generated@@69 $generated@@68) $generated@@68)
 :pattern ( ($generated@@67 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 ($generated@@34 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@34 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@25 $generated@@7 $generated@@73 $generated@@22) (= ($generated@@12 $generated@@73) ($generated@@65 5)))
 :pattern ( ($generated@@25 $generated@@7 $generated@@73 $generated@@22))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@T) ) (!  (=> ($generated@@61 $generated@@74 $generated@@75) (=> ($generated@@21 $generated@@78 $generated@@76 $generated@@77 $generated@@74) ($generated@@21 $generated@@78 $generated@@76 $generated@@77 $generated@@75)))
 :pattern ( ($generated@@61 $generated@@74 $generated@@75) ($generated@@21 $generated@@78 $generated@@76 $generated@@77 $generated@@74))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@79 $generated@@31)  (and ($generated@@25 $generated@@26 $generated@@79 $generated@@27) (or (not (= $generated@@79 $generated@@28)) (not true))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@79 $generated@@31))
 :pattern ( ($generated@@25 $generated@@26 $generated@@79 $generated@@27))
)))
(assert (forall (($generated@@81 Int) ($generated@@82 Int) ) (! (= ($generated@@80 $generated@@81 $generated@@82) (div $generated@@81 $generated@@82))
 :pattern ( ($generated@@80 $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> (or (not (= $generated@@83 $generated@@85)) (not true)) (=> (and ($generated@@61 $generated@@83 $generated@@84) ($generated@@61 $generated@@84 $generated@@85)) ($generated@@61 $generated@@83 $generated@@85)))
 :pattern ( ($generated@@61 $generated@@83 $generated@@84) ($generated@@61 $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@34 $generated@@87 ($generated@@70 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@70 $generated@@87 $generated@@86))
)))
(assert  (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@88 $generated@@91 $generated@@92 $generated@@93 ($generated@@90 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@90 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@88 $generated@@107 $generated@@108 $generated@@109 ($generated@@90 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@10 ($generated@@88 $generated@@26 $generated@@36 $generated@@6 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@88 $generated@@26 $generated@@36 $generated@@6 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (= ($generated@@122 $generated@@31) $generated@@0))
(assert (= ($generated@@123 $generated@@31) $generated@@3))
(assert (= ($generated@@122 $generated@@22) $generated@@1))
(assert (= ($generated@@123 $generated@@22) $generated@@4))
(assert (= ($generated@@122 $generated@@27) $generated@@2))
(assert (= ($generated@@123 $generated@@27) $generated@@3))
(assert (forall (($generated@@124 Int) ) (! (= ($generated@@70 $generated@@7 ($generated@@11 ($generated@@65 $generated@@124))) ($generated@@67 $generated@@37 ($generated@@70 $generated@@7 ($generated@@11 $generated@@124))))
 :pattern ( ($generated@@70 $generated@@7 ($generated@@11 ($generated@@65 $generated@@124))))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@T) ) (! (= ($generated@@70 $generated@@126 ($generated@@67 $generated@@126 $generated@@125)) ($generated@@67 $generated@@37 ($generated@@70 $generated@@126 $generated@@125)))
 :pattern ( ($generated@@70 $generated@@126 ($generated@@67 $generated@@126 $generated@@125)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 (T@U) Bool)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Bool)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@141 true))
(let (($generated@@142  (=> (or (not (= $generated@@127 ($generated@@65 5))) (not true)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (or (not (= ($generated@@65 0) 0)) (not true))) (=> (or (not (= ($generated@@65 0) 0)) (not true)) (=> (= (ControlFlow 0 9) 7) $generated@@141))))))
(let (($generated@@143  (=> (and (= $generated@@127 ($generated@@65 5)) (= (ControlFlow 0 8) 7)) $generated@@141)))
(let (($generated@@144  (=> (= $generated@@128 $generated@@129) (=> (and ($generated@@25 $generated@@7 ($generated@@11 $generated@@128) $generated@@22) (= $generated@@127 $generated@@128)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (= $generated@@127 ($generated@@65 5))) (=> (= $generated@@127 ($generated@@65 5)) (and (=> (= (ControlFlow 0 11) 8) $generated@@143) (=> (= (ControlFlow 0 11) 9) $generated@@142))))))))
(let (($generated@@145  (=> (and (and (and (not ($generated@@10 ($generated@@67 $generated@@6 ($generated@@9 true)))) (not ($generated@@10 ($generated@@67 $generated@@6 ($generated@@9 true))))) (not ($generated@@10 ($generated@@67 $generated@@6 ($generated@@9 true))))) (= (ControlFlow 0 6) (- 0 5))) false)))
(let (($generated@@146  (and (=> (= (ControlFlow 0 3) (- 0 4)) true) (=> (= (ControlFlow 0 3) (- 0 2)) (or (not (= $generated@@130 $generated@@28)) (not true))))))
(let (($generated@@147 true))
(let (($generated@@148  (=> (and (= $generated@@131 ($generated@@89 $generated@@28 $generated@@132 $generated false)) (= $generated@@129 ($generated@@65 5))) (=> (and (and (or (not (= $generated@@133 $generated@@28)) (not true)) (and ($generated@@25 $generated@@26 $generated@@133 $generated@@31) ($generated@@21 $generated@@26 $generated@@133 $generated@@31 $generated@@132))) (and ($generated@@134 $generated@@135) ($generated@@136 $generated@@135))) (=> (and (and (and (or (not (= $generated@@130 $generated@@28)) (not true)) (and ($generated@@25 $generated@@26 $generated@@130 $generated@@31) ($generated@@21 $generated@@26 $generated@@130 $generated@@31 $generated@@135))) (not ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@132 $generated@@130) $generated))))) (and (forall (($generated@@149 T@U) ) (!  (=> (and (or (not (= $generated@@149 $generated@@28)) (not true)) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@132 $generated@@149) $generated)))) (= ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@135 $generated@@149) ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@132 $generated@@149)))
 :pattern ( ($generated@@35 $generated@@26 ($generated@@38 $generated@@36 $generated@@37) $generated@@135 $generated@@149))
)) ($generated@@61 $generated@@132 $generated@@135))) (and (and (and (=> (= (ControlFlow 0 13) 1) $generated@@147) (=> (= (ControlFlow 0 13) 11) $generated@@144)) (=> (= (ControlFlow 0 13) 3) $generated@@146)) (=> (= (ControlFlow 0 13) 6) $generated@@145)))))))
(let (($generated@@150  (=> (and (and (and ($generated@@134 $generated@@132) ($generated@@136 $generated@@132)) (and (= $generated@@137 ($generated@@65 5)) true)) (and (and (=> $generated@@138 (and ($generated@@25 $generated@@26 $generated@@139 $generated@@31) ($generated@@21 $generated@@26 $generated@@139 $generated@@31 $generated@@132))) true) (and (= 1 $generated@@140) (= (ControlFlow 0 14) 13)))) $generated@@148)))
$generated@@150))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
