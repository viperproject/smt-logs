(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (Int) Bool)
(declare-fun $generated@@28 (T@U) Int)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@44 () Int)
(declare-fun $generated@@45 (T@U) Int)
(declare-fun $generated@@46 (T@U) Bool)
(declare-fun $generated@@47 (Int Int) Int)
(declare-fun $generated@@48 (Int Int) Int)
(declare-fun $generated@@49 (Int Int) Int)
(declare-fun $generated@@51 (Int) T@U)
(declare-fun $generated@@55 (Int) Bool)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@128 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@7 $generated@@24) 3))
(assert (forall (($generated@@29 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@29 $generated@@25)  (and ($generated@@23 $generated@@24 $generated@@29 $generated@@26) ($generated@@27 ($generated@@28 $generated@@29))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@29 $generated@@25))
)))
(assert (= ($generated@@30 $generated) $generated@@0))
(assert (forall (($generated@@32 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@32 $generated@@26) ($generated@@31 $generated@@32))
 :pattern ( ($generated@@31 $generated@@32) ($generated@@23 $generated@@24 $generated@@32 $generated@@26))
)))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@33 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@31 $generated@@39) (= ($generated@@38 $generated@@39) $generated@@3))
 :pattern ( ($generated@@31 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert  (=> (<= 2 $generated@@44) (forall (($generated@@50 T@U) ) (!  (=> (or ($generated@@46 ($generated@@35 $generated@@24 $generated@@50)) (and (< 2 $generated@@44) ($generated@@23 $generated@@24 $generated@@50 $generated@@25))) (and (and ($generated@@31 ($generated@@35 $generated@@24 $generated@@50)) (=> (or (not (= ($generated@@33 ($generated@@47 ($generated@@28 ($generated@@35 $generated@@24 $generated@@50)) ($generated@@33 2))) ($generated@@33 1))) (not true)) ($generated@@31 ($generated@@35 $generated@@24 $generated@@50)))) (= ($generated@@45 ($generated@@35 $generated@@24 $generated@@50)) (ite (= ($generated@@33 ($generated@@47 ($generated@@28 ($generated@@35 $generated@@24 $generated@@50)) ($generated@@33 2))) ($generated@@33 1)) ($generated@@48 1 ($generated@@33 0)) ($generated@@49 ($generated@@33 ($generated@@28 ($generated@@35 $generated@@24 $generated@@50))) ($generated@@33 2))))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@35 $generated@@24 $generated@@50)))
))))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@31 $generated@@52) (exists (($generated@@53 Int) ) (= $generated@@52 ($generated@@51 $generated@@53))))
 :pattern ( ($generated@@31 $generated@@52))
)))
(assert  (=> (<= 2 $generated@@44) (forall (($generated@@54 T@U) ) (!  (=> (or ($generated@@46 $generated@@54) (and (< 2 $generated@@44) ($generated@@23 $generated@@24 $generated@@54 $generated@@25))) (and (and ($generated@@31 $generated@@54) (=> (or (not (= ($generated@@47 ($generated@@28 $generated@@54) ($generated@@33 2)) ($generated@@33 1))) (not true)) ($generated@@31 $generated@@54))) (= ($generated@@45 $generated@@54) (ite (= ($generated@@47 ($generated@@28 $generated@@54) ($generated@@33 2)) ($generated@@33 1)) ($generated@@48 1 ($generated@@33 0)) ($generated@@49 ($generated@@28 $generated@@54) ($generated@@33 2))))))
 :pattern ( ($generated@@45 $generated@@54))
))))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@56 Int) ) (!  (=> (or ($generated@@55 $generated@@56) (< 0 $generated@@44)) (= ($generated@@27 $generated@@56) (= ($generated@@47 $generated@@56 ($generated@@33 2)) ($generated@@33 0))))
 :pattern ( ($generated@@27 $generated@@56))
))))
(assert (forall (($generated@@57 Int) ($generated@@58 Int) ) (! (= ($generated@@48 $generated@@57 $generated@@58) (div $generated@@57 $generated@@58))
 :pattern ( ($generated@@48 $generated@@57 $generated@@58))
)))
(assert  (=> (<= 0 $generated@@44) (forall (($generated@@59 Int) ) (!  (=> (or ($generated@@55 ($generated@@33 $generated@@59)) (< 0 $generated@@44)) (= ($generated@@27 ($generated@@33 $generated@@59)) (= ($generated@@33 ($generated@@47 $generated@@59 ($generated@@33 2))) ($generated@@33 0))))
 :weight 3
 :pattern ( ($generated@@27 ($generated@@33 $generated@@59)))
))))
(assert (forall (($generated@@60 Int) ) (! (= ($generated@@38 ($generated@@51 $generated@@60)) $generated@@3)
 :pattern ( ($generated@@51 $generated@@60))
)))
(assert (forall (($generated@@61 Int) ) (! (= ($generated@@28 ($generated@@51 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@51 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@40 $generated@@63 ($generated@@41 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@41 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@64 Int) ) (! (= ($generated@@23 $generated@@24 ($generated@@51 $generated@@64) $generated@@26) ($generated@@23 $generated@@9 ($generated@@13 $generated@@64) $generated))
 :pattern ( ($generated@@23 $generated@@24 ($generated@@51 $generated@@64) $generated@@26))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@65 $generated@@76 $generated@@77 $generated@@78 ($generated@@72 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@65 $generated@@83 $generated@@84 $generated@@85 ($generated@@72 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@65 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@65 $generated@@92 $generated@@93 $generated@@94 ($generated@@72 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@65 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))) (= ($generated@@7 $generated@@66) 4)) (= ($generated@@7 $generated@@67) 5)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@69 $generated@@101 $generated@@102 ($generated@@73 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@105) $generated@@103)
 :weight 0
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@110 $generated@@111) (= ($generated@@69 $generated@@106 $generated@@107 ($generated@@73 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@69 $generated@@106 $generated@@107 $generated@@109 $generated@@111)))
 :weight 0
))) (= ($generated@@7 $generated@@70) 6)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@7 ($generated@@71 $generated@@112 $generated@@113)) 7))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@71 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@71 $generated@@116 $generated@@117))
))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@12 ($generated@@65 $generated@@66 $generated@@67 $generated@@8 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@12 ($generated@@40 $generated@@8 ($generated@@69 $generated@@67 $generated@@70 ($generated@@69 $generated@@66 ($generated@@71 $generated@@67 $generated@@70) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@65 $generated@@66 $generated@@67 $generated@@8 ($generated@@68 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (forall (($generated@@124 Int) ($generated@@125 Int) ) (! (= ($generated@@47 $generated@@124 $generated@@125) (mod $generated@@124 $generated@@125))
 :pattern ( ($generated@@47 $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@126 Int) ($generated@@127 Int) ) (! (= ($generated@@49 $generated@@126 $generated@@127) (* $generated@@126 $generated@@127))
 :pattern ( ($generated@@49 $generated@@126 $generated@@127))
)))
(assert (= ($generated@@30 $generated@@25) $generated@@2))
(assert (= ($generated@@128 $generated@@25) $generated@@5))
(assert (= ($generated@@30 $generated@@26) $generated@@4))
(assert (= ($generated@@128 $generated@@26) $generated@@6))
(assert (forall (($generated@@129 Int) ) (! (= ($generated@@41 $generated@@9 ($generated@@13 ($generated@@33 $generated@@129))) ($generated@@35 $generated@@70 ($generated@@41 $generated@@9 ($generated@@13 $generated@@129))))
 :pattern ( ($generated@@41 $generated@@9 ($generated@@13 ($generated@@33 $generated@@129))))
)))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@51 ($generated@@33 $generated@@130)) ($generated@@35 $generated@@24 ($generated@@51 $generated@@130)))
 :pattern ( ($generated@@51 ($generated@@33 $generated@@130)))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@41 $generated@@132 ($generated@@35 $generated@@132 $generated@@131)) ($generated@@35 $generated@@70 ($generated@@41 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@41 $generated@@132 ($generated@@35 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (! ($generated@@23 $generated@@9 $generated@@133 $generated)
 :pattern ( ($generated@@23 $generated@@9 $generated@@133 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@140 true))
(let (($generated@@141  (=> (and (= ($generated@@47 ($generated@@28 $generated@@134) ($generated@@33 2)) ($generated@@33 1)) (= (ControlFlow 0 3) (- 0 2))) (or (not (= ($generated@@33 0) 0)) (not true)))))
(let (($generated@@142  (=> ($generated@@31 $generated@@134) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= ($generated@@33 2) 0)) (not true))) (=> (or (not (= ($generated@@33 2) 0)) (not true)) (and (=> (= (ControlFlow 0 5) 3) $generated@@141) (=> (= (ControlFlow 0 5) 4) $generated@@140)))))))
(let (($generated@@143 true))
(let (($generated@@144  (=> (= $generated@@135 ($generated@@68 $generated@@136 $generated@@137 $generated@@1 false)) (and (=> (= (ControlFlow 0 7) 1) $generated@@143) (=> (= (ControlFlow 0 7) 5) $generated@@142)))))
(let (($generated@@145  (=> (and (and (and ($generated@@138 $generated@@137) ($generated@@139 $generated@@137)) ($generated@@23 $generated@@24 $generated@@134 $generated@@25)) (and (= 2 $generated@@44) (= (ControlFlow 0 8) 7))) $generated@@144)))
$generated@@145)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
