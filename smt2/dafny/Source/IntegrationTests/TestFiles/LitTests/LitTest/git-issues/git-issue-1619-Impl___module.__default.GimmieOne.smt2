(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@U Int) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U T@U T@U) Bool)
(declare-fun $generated@@34 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 (T@U T@U) Bool)
(declare-fun $generated@@42 (T@T T@U T@U) Bool)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@U) T@U)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@55 (T@U) T@U)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@63 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@T T@T) T@T)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@17 $generated@@18) 0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! (= ($generated@@24 $generated@@26 $generated@@27)  (and (= ($generated@@17 $generated@@26) ($generated@@17 $generated@@27)) (forall (($generated@@28 Int) ) (!  (=> (and (<= 0 $generated@@28) (< $generated@@28 ($generated@@17 $generated@@26))) (= ($generated@@25 $generated@@26 $generated@@28) ($generated@@25 $generated@@27 $generated@@28)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@28))
 :pattern ( ($generated@@25 $generated@@27 $generated@@28))
))))
 :pattern ( ($generated@@24 $generated@@26 $generated@@27))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 ($generated@@29 $generated@@32 $generated@@31)) $generated@@31)
 :pattern ( ($generated@@29 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@33 ($generated@@30 $generated@@38 $generated@@35) $generated@@36 $generated@@37) ($generated@@34 $generated@@38 $generated@@35 $generated@@36 $generated@@37))
 :pattern ( ($generated@@33 ($generated@@30 $generated@@38 $generated@@35) $generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ) (!  (=> ($generated@@24 $generated@@39 $generated@@40) (= $generated@@39 $generated@@40))
 :pattern ( ($generated@@24 $generated@@39 $generated@@40))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@41 ($generated@@30 $generated@@45 $generated@@43) $generated@@44) ($generated@@42 $generated@@45 $generated@@43 $generated@@44))
 :pattern ( ($generated@@41 ($generated@@30 $generated@@45 $generated@@43) $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (! (<= 0 ($generated@@17 $generated@@46))
 :pattern ( ($generated@@17 $generated@@46))
)))
(assert (= ($generated@@1 $generated@@47) 3))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@34 $generated@@47 $generated@@49 ($generated@@48 $generated@@50) $generated@@51) (forall (($generated@@52 Int) ) (!  (=> (and (<= 0 $generated@@52) (< $generated@@52 ($generated@@17 $generated@@49))) ($generated@@33 ($generated@@25 $generated@@49 $generated@@52) $generated@@50 $generated@@51))
 :pattern ( ($generated@@25 $generated@@49 $generated@@52))
)))
 :pattern ( ($generated@@34 $generated@@47 $generated@@49 ($generated@@48 $generated@@50) $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@53 ($generated@@48 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@48 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@55 ($generated@@48 $generated@@56)) $generated)
 :pattern ( ($generated@@48 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@29 $generated@@58 ($generated@@30 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@30 $generated@@58 $generated@@57))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@59 $generated@@70 $generated@@71 $generated@@72 ($generated@@66 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@75 $generated@@76) $generated@@73)
 :weight 0
)) (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@59 $generated@@77 $generated@@78 $generated@@79 ($generated@@66 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@84 $generated@@85) ($generated@@59 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@84 $generated@@85)))
 :weight 0
)) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@59 $generated@@86 $generated@@87 $generated@@88 ($generated@@66 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@59 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)))) (= ($generated@@1 $generated@@60) 4)) (= ($generated@@1 $generated@@61) 5)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@63 $generated@@95 $generated@@96 ($generated@@67 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@99) $generated@@97)
 :weight 0
))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@104 $generated@@105) (= ($generated@@63 $generated@@100 $generated@@101 ($generated@@67 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@102) $generated@@105) ($generated@@63 $generated@@100 $generated@@101 $generated@@103 $generated@@105)))
 :weight 0
))) (= ($generated@@1 $generated@@64) 6)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (= ($generated@@1 ($generated@@65 $generated@@106 $generated@@107)) 7))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@68 ($generated@@65 $generated@@108 $generated@@109)) $generated@@108)
 :pattern ( ($generated@@65 $generated@@108 $generated@@109))
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@69 ($generated@@65 $generated@@110 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@65 $generated@@110 $generated@@111))
))))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 Bool) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@6 ($generated@@59 $generated@@60 $generated@@61 $generated@@2 ($generated@@62 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))  (=> (and (or (not (= $generated@@116 $generated@@112)) (not true)) ($generated@@6 ($generated@@29 $generated@@2 ($generated@@63 $generated@@61 $generated@@64 ($generated@@63 $generated@@60 ($generated@@65 $generated@@61 $generated@@64) $generated@@113 $generated@@116) $generated@@114)))) $generated@@115))
 :pattern ( ($generated@@59 $generated@@60 $generated@@61 $generated@@2 ($generated@@62 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ) (!  (=> ($generated@@41 $generated@@118 ($generated@@48 $generated@@119)) (and (= ($generated@@30 $generated@@47 ($generated@@29 $generated@@47 $generated@@118)) $generated@@118) ($generated@@42 $generated@@47 ($generated@@29 $generated@@47 $generated@@118) ($generated@@48 $generated@@119))))
 :pattern ( ($generated@@41 $generated@@118 ($generated@@48 $generated@@119)))
)))
(assert (forall (($generated@@120 Int) ) (! (= ($generated@@30 $generated@@3 ($generated@@7 ($generated@@19 $generated@@120))) ($generated@@21 $generated@@64 ($generated@@30 $generated@@3 ($generated@@7 $generated@@120))))
 :pattern ( ($generated@@30 $generated@@3 ($generated@@7 ($generated@@19 $generated@@120))))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@T) ) (! (= ($generated@@30 $generated@@122 ($generated@@21 $generated@@122 $generated@@121)) ($generated@@21 $generated@@64 ($generated@@30 $generated@@122 $generated@@121)))
 :pattern ( ($generated@@30 $generated@@122 ($generated@@21 $generated@@122 $generated@@121)))
)))
(assert (forall (($generated@@123 T@U) ) (!  (=> (= ($generated@@17 $generated@@123) 0) (= $generated@@123 $generated@@18))
 :pattern ( ($generated@@17 $generated@@123))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@42 $generated@@47 $generated@@124 ($generated@@48 $generated@@125)) (forall (($generated@@126 Int) ) (!  (=> (and (<= 0 $generated@@126) (< $generated@@126 ($generated@@17 $generated@@124))) ($generated@@41 ($generated@@25 $generated@@124 $generated@@126) $generated@@125))
 :pattern ( ($generated@@25 $generated@@124 $generated@@126))
)))
 :pattern ( ($generated@@42 $generated@@47 $generated@@124 ($generated@@48 $generated@@125)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () Bool)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@138  (=> (= $generated@@127 ($generated@@62 $generated@@128 $generated@@129 $generated@@0 false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 ($generated@@19 0)) (< ($generated@@19 0) ($generated@@17 $generated@@130)))) (=> (and (<= 0 ($generated@@19 0)) (< ($generated@@19 0) ($generated@@17 $generated@@130))) (=> (and (= $generated@@131 ($generated@@25 $generated@@130 ($generated@@19 0))) (= (ControlFlow 0 2) (- 0 1))) true))))))
(let (($generated@@139  (=> (and (and (and ($generated@@132 $generated@@129) ($generated@@133 $generated@@129)) (and ($generated@@42 $generated@@47 $generated@@130 ($generated@@48 $generated@@134)) ($generated@@34 $generated@@47 $generated@@130 ($generated@@48 $generated@@134) $generated@@129))) (and (and (=> $generated@@135 (and ($generated@@41 $generated@@136 $generated@@134) ($generated@@33 $generated@@136 $generated@@134 $generated@@129))) (= 0 $generated@@137)) (and (not ($generated@@24 $generated@@130 $generated@@18)) (= (ControlFlow 0 4) 2)))) $generated@@138)))
$generated@@139)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
