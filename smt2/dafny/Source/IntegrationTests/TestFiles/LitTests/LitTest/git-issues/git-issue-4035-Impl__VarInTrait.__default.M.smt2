(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 (T@T) Int)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 (Bool) T@U)
(declare-fun $generated@@16 (T@U) Bool)
(declare-fun $generated@@17 (Int) T@U)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@19 (Real) T@U)
(declare-fun $generated@@20 (T@U) Real)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@43 (T@U T@U) T@U)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T T@T) T@T)
(declare-fun $generated@@51 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@78 (T@T T@U) T@U)
(declare-fun $generated@@81 (T@T T@U T@U) Bool)
(declare-fun $generated@@86 (T@U) T@U)
(declare-fun $generated@@93 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@94 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@95 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@127 (T@U) Bool)
(declare-fun $generated@@131 (T@U) T@U)
(declare-fun $generated@@132 (T@U) T@U)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@136 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@11 $generated@@12) 0) (= ($generated@@11 $generated@@13) 1)) (= ($generated@@11 $generated@@14) 2)) (forall (($generated@@21 Bool) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Int) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Real) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10)
)
(assert (= ($generated@@27 $generated) 0))
(assert (= ($generated@@28 $generated) $generated@@0))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ) (! ($generated@@29 $generated@@13 $generated@@31 $generated@@30 $generated@@32)
 :pattern ( ($generated@@29 $generated@@13 $generated@@31 $generated@@30 $generated@@32))
)))
(assert (= ($generated@@11 $generated@@33) 3))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@36 $generated@@34 $generated@@37) ($generated@@29 $generated@@33 $generated@@36 $generated@@35 $generated@@37))
 :pattern ( ($generated@@29 $generated@@33 $generated@@36 $generated@@34 $generated@@37))
 :pattern ( ($generated@@29 $generated@@33 $generated@@36 $generated@@35 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@40 $generated@@38 $generated@@41) ($generated@@29 $generated@@33 $generated@@40 $generated@@39 $generated@@41))
 :pattern ( ($generated@@29 $generated@@33 $generated@@40 $generated@@38 $generated@@41))
 :pattern ( ($generated@@29 $generated@@33 $generated@@40 $generated@@39 $generated@@41))
)))
(assert (= ($generated@@27 $generated@@42) 0))
(assert (= ($generated@@43 $generated@@5 $generated@@10) $generated@@42))
(assert  (not ($generated@@44 $generated@@42)))
(assert  (and (and (and (and (and (and (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@47 $generated@@54 $generated@@55 ($generated@@51 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@56) $generated@@58) $generated@@56)
 :weight 0
)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (or (= $generated@@63 $generated@@64) (= ($generated@@47 $generated@@59 $generated@@60 ($generated@@51 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@61) $generated@@64) ($generated@@47 $generated@@59 $generated@@60 $generated@@62 $generated@@64)))
 :weight 0
))) (= ($generated@@11 $generated@@48) 4)) (= ($generated@@11 $generated@@49) 5)) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (= ($generated@@11 ($generated@@50 $generated@@65 $generated@@66)) 6))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (! (= ($generated@@52 ($generated@@50 $generated@@67 $generated@@68)) $generated@@67)
 :pattern ( ($generated@@50 $generated@@67 $generated@@68))
))) (forall (($generated@@69 T@T) ($generated@@70 T@T) ) (! (= ($generated@@53 ($generated@@50 $generated@@69 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@50 $generated@@69 $generated@@70))
))))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@71 $generated@@35 $generated@@72)  (or (= $generated@@71 $generated@@45) ($generated@@16 ($generated@@46 $generated@@12 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@72 $generated@@71) $generated)))))
 :pattern ( ($generated@@29 $generated@@33 $generated@@71 $generated@@35 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@73 $generated@@39 $generated@@74)  (or (= $generated@@73 $generated@@45) ($generated@@16 ($generated@@46 $generated@@12 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@74 $generated@@73) $generated)))))
 :pattern ( ($generated@@29 $generated@@33 $generated@@73 $generated@@39 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 $generated@@76) $generated@@76)
 :pattern ( ($generated@@75 $generated@@77 $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@78 $generated@@80 ($generated@@46 $generated@@80 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@46 $generated@@80 $generated@@79))
)))
(assert ($generated@@44 $generated))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@81 $generated@@33 $generated@@82 $generated@@34)  (and ($generated@@81 $generated@@33 $generated@@82 $generated@@35) (or (not (= $generated@@82 $generated@@45)) (not true))))
 :pattern ( ($generated@@81 $generated@@33 $generated@@82 $generated@@34))
 :pattern ( ($generated@@81 $generated@@33 $generated@@82 $generated@@35))
)))
(assert (forall (($generated@@83 T@U) ) (! (= ($generated@@81 $generated@@33 $generated@@83 $generated@@38)  (and ($generated@@81 $generated@@33 $generated@@83 $generated@@39) (or (not (= $generated@@83 $generated@@45)) (not true))))
 :pattern ( ($generated@@81 $generated@@33 $generated@@83 $generated@@38))
 :pattern ( ($generated@@81 $generated@@33 $generated@@83 $generated@@39))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> ($generated@@29 $generated@@33 $generated@@84 $generated@@39 $generated@@85) ($generated@@29 $generated@@33 $generated@@84 $generated@@35 $generated@@85))
 :pattern ( ($generated@@29 $generated@@33 $generated@@84 $generated@@39 $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (and (= ($generated@@86 ($generated@@43 $generated@@87 $generated@@88)) $generated@@87) (= ($generated@@28 ($generated@@43 $generated@@87 $generated@@88)) $generated@@88))
 :pattern ( ($generated@@43 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ) (! ($generated@@81 $generated@@33 $generated@@89 $generated@@35)
 :pattern ( ($generated@@81 $generated@@33 $generated@@89 $generated@@35))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@T) ) (! (= ($generated@@46 $generated@@91 ($generated@@78 $generated@@91 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@78 $generated@@91 $generated@@90))
)))
(assert (forall (($generated@@92 T@U) ) (! (= ($generated@@81 $generated@@13 $generated@@92 $generated@@30) ($generated@@16 ($generated@@75 $generated@@12 ($generated@@15 false))))
 :pattern ( ($generated@@81 $generated@@13 $generated@@92 $generated@@30))
)))
(assert  (and (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@93 $generated@@96 $generated@@97 $generated@@98 ($generated@@95 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@101 $generated@@102) $generated@@99)
 :weight 0
)) (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@93 $generated@@103 $generated@@104 $generated@@105 ($generated@@95 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@93 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@93 $generated@@112 $generated@@113 $generated@@114 ($generated@@95 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@93 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)))))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 Bool) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@16 ($generated@@93 $generated@@33 $generated@@48 $generated@@12 ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))  (=> (and (or (not (= $generated@@125 $generated@@121)) (not true)) ($generated@@16 ($generated@@46 $generated@@12 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@122 $generated@@125) $generated@@123)))) $generated@@124))
 :pattern ( ($generated@@93 $generated@@33 $generated@@48 $generated@@12 ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> (and (and ($generated@@127 $generated@@128) (and (or (not (= $generated@@129 $generated@@45)) (not true)) ($generated@@81 $generated@@33 $generated@@129 $generated@@39))) ($generated@@16 ($generated@@46 $generated@@12 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@128 $generated@@129) $generated)))) ($generated@@29 $generated@@13 ($generated@@46 $generated@@13 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@128 $generated@@129) $generated@@42)) $generated@@30 $generated@@128))
 :pattern ( ($generated@@46 $generated@@13 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@128 $generated@@129) $generated@@42)))
)))
(assert (forall (($generated@@130 T@U) ) (!  (=> ($generated@@81 $generated@@33 $generated@@130 $generated@@39) ($generated@@81 $generated@@33 $generated@@130 $generated@@35))
 :pattern ( ($generated@@81 $generated@@33 $generated@@130 $generated@@39))
)))
(assert (= ($generated@@131 $generated@@35) $generated@@1))
(assert (= ($generated@@132 $generated@@35) $generated@@7))
(assert (= ($generated@@131 $generated@@34) $generated@@2))
(assert (= ($generated@@132 $generated@@34) $generated@@7))
(assert (= ($generated@@131 $generated@@38) $generated@@3))
(assert (= ($generated@@132 $generated@@38) $generated@@8))
(assert (= ($generated@@131 $generated@@30) $generated@@4))
(assert (= ($generated@@132 $generated@@30) $generated@@9))
(assert (= ($generated@@131 $generated@@39) $generated@@6))
(assert (= ($generated@@132 $generated@@39) $generated@@8))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (!  (=> (and ($generated@@127 $generated@@133) (and (or (not (= $generated@@134 $generated@@45)) (not true)) ($generated@@81 $generated@@33 $generated@@134 $generated@@39))) ($generated@@81 $generated@@13 ($generated@@46 $generated@@13 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@133 $generated@@134) $generated@@42)) $generated@@30))
 :pattern ( ($generated@@46 $generated@@13 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@133 $generated@@134) $generated@@42)))
)))
(assert (forall (($generated@@137 T@U) ) (! (= ($generated@@81 $generated@@33 $generated@@137 $generated@@39)  (or (= $generated@@137 $generated@@45) ($generated@@135 ($generated@@136 $generated@@137))))
 :pattern ( ($generated@@81 $generated@@33 $generated@@137 $generated@@39))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@T) ) (! (= ($generated@@78 $generated@@139 ($generated@@75 $generated@@139 $generated@@138)) ($generated@@75 $generated@@49 ($generated@@78 $generated@@139 $generated@@138)))
 :pattern ( ($generated@@78 $generated@@139 ($generated@@75 $generated@@139 $generated@@138)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 (T@U) Bool)
(declare-fun $generated@@147 () Bool)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Bool)
(declare-fun $generated@@150 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@151  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@16 ($generated@@75 $generated@@12 ($generated@@15 false))))))
(let (($generated@@152  (=> (and (not ($generated@@81 $generated@@33 $generated@@140 $generated@@38)) (= (ControlFlow 0 9) 2)) $generated@@151)))
(let (($generated@@153  (=> ($generated@@81 $generated@@33 $generated@@140 $generated@@38) (and (=> (= (ControlFlow 0 3) (- 0 8)) ($generated@@81 $generated@@33 $generated@@140 $generated@@38)) (=> ($generated@@81 $generated@@33 $generated@@140 $generated@@38) (and (=> (= (ControlFlow 0 3) (- 0 7)) true) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (not (= $generated@@140 $generated@@45)) (not true))) (=> (or (not (= $generated@@140 $generated@@45)) (not true)) (=> (= $generated@@141 ($generated@@18 ($generated@@46 $generated@@13 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@142 $generated@@140) $generated@@42)))) (and (=> (= (ControlFlow 0 3) (- 0 5)) ($generated@@16 ($generated@@75 $generated@@12 ($generated@@15 false)))) (=> ($generated@@16 ($generated@@75 $generated@@12 ($generated@@15 false))) (=> (= $generated@@143 ($generated@@18 ($generated@@46 $generated@@13 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@142 $generated@@140) $generated@@42)))) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@16 ($generated@@75 $generated@@12 ($generated@@15 false)))) (=> ($generated@@16 ($generated@@75 $generated@@12 ($generated@@15 false))) (=> (and (= $generated@@144 ($generated@@18 ($generated@@46 $generated@@13 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@33 ($generated@@50 $generated@@48 $generated@@49) $generated@@142 $generated@@140) $generated@@42)))) (= (ControlFlow 0 3) 2)) $generated@@151)))))))))))))))
(let (($generated@@154  (=> (= $generated@@145 ($generated@@94 $generated@@45 $generated@@142 $generated false)) (and (=> (= (ControlFlow 0 10) 3) $generated@@153) (=> (= (ControlFlow 0 10) 9) $generated@@152)))))
(let (($generated@@155  (=> (and ($generated@@127 $generated@@142) ($generated@@146 $generated@@142)) (=> (and (and (and ($generated@@81 $generated@@33 $generated@@140 $generated@@34) ($generated@@29 $generated@@33 $generated@@140 $generated@@34 $generated@@142)) (and (=> $generated@@147 (and ($generated@@81 $generated@@33 $generated@@148 $generated@@38) ($generated@@29 $generated@@33 $generated@@148 $generated@@38 $generated@@142))) true)) (and (and (=> $generated@@149 ($generated@@16 ($generated@@75 $generated@@12 ($generated@@15 false)))) true) (and (= 1 $generated@@150) (= (ControlFlow 0 11) 10)))) $generated@@154))))
$generated@@155))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
