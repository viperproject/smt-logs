(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (Int) Int)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@17 (T@T T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@T T@T) T@T)
(declare-fun $generated@@33 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@34 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@36 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 Int) ) (! (= ($generated $generated@@16) $generated@@16)
 :pattern ( ($generated $generated@@16))
)))
(assert (forall (($generated@@18 T@U) ($generated@@19 T@T) ) (! (= ($generated@@17 $generated@@19 $generated@@18) $generated@@18)
 :pattern ( ($generated@@17 $generated@@19 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 ($generated@@20 $generated@@23 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@20 $generated@@25 ($generated@@21 $generated@@25 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@21 $generated@@25 $generated@@24))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@26 $generated@@37 $generated@@38 $generated@@39 ($generated@@33 $generated@@37 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@43 $generated@@40) $generated@@42 $generated@@43) $generated@@40)
 :weight 0
)) (and (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@49 $generated@@51) (= ($generated@@26 $generated@@44 $generated@@45 $generated@@46 ($generated@@33 $generated@@44 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@50 $generated@@47) $generated@@51 $generated@@52) ($generated@@26 $generated@@44 $generated@@45 $generated@@46 $generated@@48 $generated@@51 $generated@@52)))
 :weight 0
)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (or (= $generated@@59 $generated@@61) (= ($generated@@26 $generated@@53 $generated@@54 $generated@@55 ($generated@@33 $generated@@53 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@59 $generated@@56) $generated@@60 $generated@@61) ($generated@@26 $generated@@53 $generated@@54 $generated@@55 $generated@@57 $generated@@60 $generated@@61)))
 :weight 0
)))) (= ($generated@@0 $generated@@27) 3)) (= ($generated@@0 $generated@@28) 4)) (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@30 $generated@@62 $generated@@63 ($generated@@34 $generated@@62 $generated@@63 $generated@@65 $generated@@66 $generated@@64) $generated@@66) $generated@@64)
 :weight 0
))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@71 $generated@@72) (= ($generated@@30 $generated@@67 $generated@@68 ($generated@@34 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@69) $generated@@72) ($generated@@30 $generated@@67 $generated@@68 $generated@@70 $generated@@72)))
 :weight 0
))) (= ($generated@@0 $generated@@31) 5)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ) (= ($generated@@0 ($generated@@32 $generated@@73 $generated@@74)) 6))) (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (! (= ($generated@@35 ($generated@@32 $generated@@75 $generated@@76)) $generated@@75)
 :pattern ( ($generated@@32 $generated@@75 $generated@@76))
))) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (! (= ($generated@@36 ($generated@@32 $generated@@77 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@32 $generated@@77 $generated@@78))
))))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 Bool) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@5 ($generated@@26 $generated@@27 $generated@@28 $generated@@1 ($generated@@29 $generated@@79 $generated@@80 $generated@@81 $generated@@82) $generated@@83 $generated@@84))  (=> (and (or (not (= $generated@@83 $generated@@79)) (not true)) ($generated@@5 ($generated@@20 $generated@@1 ($generated@@30 $generated@@28 $generated@@31 ($generated@@30 $generated@@27 ($generated@@32 $generated@@28 $generated@@31) $generated@@80 $generated@@83) $generated@@81)))) $generated@@82))
 :pattern ( ($generated@@26 $generated@@27 $generated@@28 $generated@@1 ($generated@@29 $generated@@79 $generated@@80 $generated@@81 $generated@@82) $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@85 Int) ) (! (= ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@85))) ($generated@@17 $generated@@31 ($generated@@21 $generated@@2 ($generated@@6 $generated@@85))))
 :pattern ( ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@85))))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@21 $generated@@87 ($generated@@17 $generated@@87 $generated@@86)) ($generated@@17 $generated@@31 ($generated@@21 $generated@@87 $generated@@86)))
 :pattern ( ($generated@@21 $generated@@87 ($generated@@17 $generated@@87 $generated@@86)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@88 () Int)
(declare-fun $generated@@89 () T@U)
(declare-fun $generated@@90 () T@U)
(declare-fun $generated@@91 () T@U)
(declare-fun $generated@@92 () T@U)
(declare-fun $generated@@93 (T@U) Bool)
(declare-fun $generated@@94 (T@U) Bool)
(declare-fun $generated@@95 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@96  (=> (= $generated@@88 ($generated 0)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= ($generated 0) $generated@@88)) (=> (<= ($generated 0) $generated@@88) (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4 true)))))))))
(let (($generated@@97 true))
(let (($generated@@98  (=> (= $generated@@89 ($generated@@29 $generated@@90 $generated@@91 $generated@@92 false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@97) (=> (= (ControlFlow 0 5) 3) $generated@@96)))))
(let (($generated@@99  (=> (and (and ($generated@@93 $generated@@91) ($generated@@94 $generated@@91)) (and (= 0 $generated@@95) (= (ControlFlow 0 6) 5))) $generated@@98)))
$generated@@99)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
