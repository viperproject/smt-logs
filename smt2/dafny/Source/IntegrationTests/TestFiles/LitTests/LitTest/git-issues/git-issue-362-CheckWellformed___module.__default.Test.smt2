(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U T@U) T@U)
(declare-fun $generated@@28 (Int) T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U) Bool)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@37 (T@U) Int)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@58 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@T T@T) T@T)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@114 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (= ($generated@@4 $generated@@25) 3))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@30 T@U) ) (!  (=> (or ($generated@@23 $generated@@30) (and (< 2 $generated@@21) ($generated@@24 $generated@@25 $generated@@30 $generated@@26))) (= ($generated@@22 $generated@@30) (let (($generated@@31 ($generated@@27 $generated@@30 ($generated@@28 ($generated@@29 1)))))
$generated@@31)))
 :pattern ( ($generated@@22 $generated@@30))
))))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@33 T@U) ) (!  (=> (or ($generated@@23 ($generated@@32 $generated@@25 $generated@@33)) (and (< 2 $generated@@21) ($generated@@24 $generated@@25 $generated@@33 $generated@@26))) (= ($generated@@22 ($generated@@32 $generated@@25 $generated@@33)) (let (($generated@@34 ($generated@@27 $generated@@33 ($generated@@28 ($generated@@29 1)))))
$generated@@34)))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@32 $generated@@25 $generated@@33)))
))))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@38 T@U) ) (!  (=> (or ($generated@@36 $generated@@38) (and (< 0 $generated@@21) ($generated@@24 $generated@@25 $generated@@38 $generated))) (= ($generated@@35 $generated@@38)  (and (<= ($generated@@37 ($generated@@32 $generated@@25 ($generated@@28 65))) ($generated@@37 $generated@@38)) (<= ($generated@@37 $generated@@38) ($generated@@37 ($generated@@32 $generated@@25 ($generated@@28 90)))))))
 :pattern ( ($generated@@35 $generated@@38))
))))
(assert (forall (($generated@@39 Int) ) (! (= ($generated@@29 $generated@@39) $generated@@39)
 :pattern ( ($generated@@29 $generated@@39))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@32 $generated@@41 $generated@@40) $generated@@40)
 :pattern ( ($generated@@32 $generated@@41 $generated@@40))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 ($generated@@42 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@42 $generated@@45 $generated@@44))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@46 T@U) ) (!  (=> (or ($generated@@36 ($generated@@32 $generated@@25 $generated@@46)) (and (< 0 $generated@@21) ($generated@@24 $generated@@25 $generated@@46 $generated))) (= ($generated@@35 ($generated@@32 $generated@@25 $generated@@46))  (and (<= ($generated@@37 ($generated@@32 $generated@@25 ($generated@@28 65))) ($generated@@37 ($generated@@32 $generated@@25 $generated@@46))) (<= ($generated@@37 ($generated@@32 $generated@@25 $generated@@46)) ($generated@@37 ($generated@@32 $generated@@25 ($generated@@28 90)))))))
 :weight 3
 :pattern ( ($generated@@35 ($generated@@32 $generated@@25 $generated@@46)))
))))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@27 $generated@@47 $generated@@48) ($generated@@28 (+ ($generated@@37 $generated@@47) ($generated@@37 $generated@@48))))
 :pattern ( ($generated@@27 $generated@@47 $generated@@48))
)))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@49 T@U) ) (!  (=> (or ($generated@@23 $generated@@49) (and (< 2 $generated@@21) ($generated@@24 $generated@@25 $generated@@49 $generated@@26))) ($generated@@24 $generated@@25 ($generated@@22 $generated@@49) $generated@@26))
 :pattern ( ($generated@@22 $generated@@49))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@42 $generated@@51 ($generated@@43 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@43 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@52 $generated@@26) ($generated@@35 $generated@@52))
 :pattern ( ($generated@@24 $generated@@25 $generated@@52 $generated@@26))
)))
(assert (forall (($generated@@53 Int) ) (!  (=> (or (and (<= 0 $generated@@53) (< $generated@@53 55296)) (and (<= 57344 $generated@@53) (< $generated@@53 1114112))) (= ($generated@@37 ($generated@@28 $generated@@53)) $generated@@53))
 :pattern ( ($generated@@28 $generated@@53))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@54 $generated@@65 $generated@@66 $generated@@67 ($generated@@61 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@70 $generated@@71) $generated@@68)
 :weight 0
)) (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@77 $generated@@79) (= ($generated@@54 $generated@@72 $generated@@73 $generated@@74 ($generated@@61 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@54 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@54 $generated@@81 $generated@@82 $generated@@83 ($generated@@61 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@54 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)))) (= ($generated@@4 $generated@@55) 4)) (= ($generated@@4 $generated@@56) 5)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@58 $generated@@90 $generated@@91 ($generated@@62 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@92) $generated@@94) $generated@@92)
 :weight 0
))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@99 $generated@@100) (= ($generated@@58 $generated@@95 $generated@@96 ($generated@@62 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@58 $generated@@95 $generated@@96 $generated@@98 $generated@@100)))
 :weight 0
))) (= ($generated@@4 $generated@@59) 6)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (= ($generated@@4 ($generated@@60 $generated@@101 $generated@@102)) 7))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@63 ($generated@@60 $generated@@103 $generated@@104)) $generated@@103)
 :pattern ( ($generated@@60 $generated@@103 $generated@@104))
))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@64 ($generated@@60 $generated@@105 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@60 $generated@@105 $generated@@106))
))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 Bool) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@9 ($generated@@54 $generated@@55 $generated@@56 $generated@@5 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))  (=> (and (or (not (= $generated@@111 $generated@@107)) (not true)) ($generated@@9 ($generated@@42 $generated@@5 ($generated@@58 $generated@@56 $generated@@59 ($generated@@58 $generated@@55 ($generated@@60 $generated@@56 $generated@@59) $generated@@108 $generated@@111) $generated@@109)))) $generated@@110))
 :pattern ( ($generated@@54 $generated@@55 $generated@@56 $generated@@5 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ) (!  (and (= ($generated@@28 ($generated@@37 $generated@@113)) $generated@@113) (or (and (<= 0 ($generated@@37 $generated@@113)) (< ($generated@@37 $generated@@113) 55296)) (and (<= 57344 ($generated@@37 $generated@@113)) (< ($generated@@37 $generated@@113) 1114112))))
 :pattern ( ($generated@@37 $generated@@113))
)))
(assert (= ($generated@@20 $generated@@26) $generated@@2))
(assert (= ($generated@@114 $generated@@26) $generated@@3))
(assert (forall (($generated@@115 Int) ) (! (= ($generated@@43 $generated@@6 ($generated@@10 ($generated@@29 $generated@@115))) ($generated@@32 $generated@@59 ($generated@@43 $generated@@6 ($generated@@10 $generated@@115))))
 :pattern ( ($generated@@43 $generated@@6 ($generated@@10 ($generated@@29 $generated@@115))))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@43 $generated@@117 ($generated@@32 $generated@@117 $generated@@116)) ($generated@@32 $generated@@59 ($generated@@43 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@43 $generated@@117 ($generated@@32 $generated@@117 $generated@@116)))
)))
(assert (forall (($generated@@118 T@U) ) (! ($generated@@24 $generated@@25 $generated@@118 $generated)
 :pattern ( ($generated@@24 $generated@@25 $generated@@118 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@128  (=> (= $generated@@119 ($generated@@29 1)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (and (<= 0 $generated@@119) (< $generated@@119 55296)) (and (<= 57344 $generated@@119) (< $generated@@119 1114112)))) (=> (or (and (<= 0 $generated@@119) (< $generated@@119 55296)) (and (<= 57344 $generated@@119) (< $generated@@119 1114112))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (and (<= 0 (+ ($generated@@37 $generated@@120) ($generated@@37 ($generated@@28 ($generated@@29 1))))) (< (+ ($generated@@37 $generated@@120) ($generated@@37 ($generated@@28 ($generated@@29 1)))) 55296)) (and (<= 57344 (+ ($generated@@37 $generated@@120) ($generated@@37 ($generated@@28 ($generated@@29 1))))) (< (+ ($generated@@37 $generated@@120) ($generated@@37 ($generated@@28 ($generated@@29 1)))) 1114112)))) (=> (or (and (<= 0 (+ ($generated@@37 $generated@@120) ($generated@@37 ($generated@@28 ($generated@@29 1))))) (< (+ ($generated@@37 $generated@@120) ($generated@@37 ($generated@@28 ($generated@@29 1)))) 55296)) (and (<= 57344 (+ ($generated@@37 $generated@@120) ($generated@@37 ($generated@@28 ($generated@@29 1))))) (< (+ ($generated@@37 $generated@@120) ($generated@@37 ($generated@@28 ($generated@@29 1)))) 1114112))) (=> (= $generated@@121 ($generated@@27 $generated@@120 ($generated@@28 ($generated@@29 1)))) (=> (and ($generated@@24 $generated@@25 $generated@@121 $generated) (= $generated@@122 $generated@@121)) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@8 true)))) (=> ($generated@@9 ($generated@@32 $generated@@5 ($generated@@8 true))) (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@24 $generated@@25 $generated@@122 $generated@@26)))))))))))))
(let (($generated@@129 true))
(let (($generated@@130  (=> (= $generated@@123 ($generated@@57 $generated@@124 $generated@@125 $generated@@1 false)) (and (=> (= (ControlFlow 0 7) 1) $generated@@129) (=> (= (ControlFlow 0 7) 3) $generated@@128)))))
(let (($generated@@131  (=> (and (and (and ($generated@@126 $generated@@125) ($generated@@127 $generated@@125)) ($generated@@24 $generated@@25 $generated@@120 $generated@@26)) (and (= 2 $generated@@21) (= (ControlFlow 0 8) 7))) $generated@@130)))
$generated@@131)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
