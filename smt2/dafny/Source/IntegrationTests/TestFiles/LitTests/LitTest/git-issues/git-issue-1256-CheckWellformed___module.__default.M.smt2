(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (Int) Int)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@54 () Int)
(declare-fun $generated@@55 (T@U T@U) Int)
(declare-fun $generated@@56 (T@U) Bool)
(declare-fun $generated@@57 (T@U T@U) Bool)
(declare-fun $generated@@58 (T@U) Bool)
(declare-fun $generated@@59 (T@U) Int)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 (T@T T@T) T@T)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@81 (T@T) T@T)
(declare-fun $generated@@130 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated) $generated@@0))
(assert (= ($generated@@26 $generated@@27) $generated@@5))
(assert (= ($generated@@9 $generated@@29) 3))
(assert ($generated@@28 $generated@@29 $generated@@27 $generated@@30))
(assert (forall (($generated@@32 Int) ) (! (= ($generated@@31 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@36 $generated@@37) (= ($generated@@26 $generated@@37) $generated@@5))
 :pattern ( ($generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@38 $generated@@39) (= ($generated@@26 $generated@@39) $generated@@6))
 :pattern ( ($generated@@38 $generated@@39))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@41 $generated@@43 ($generated@@40 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@40 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (!  (=> ($generated@@36 $generated@@44) (= $generated@@44 $generated@@27))
 :pattern ( ($generated@@36 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@38 $generated@@46) (exists (($generated@@47 T@U) ) (= $generated@@46 ($generated@@45 $generated@@47))))
 :pattern ( ($generated@@38 $generated@@46))
)))
(assert (= ($generated@@9 $generated@@48) 4))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@28 $generated@@29 ($generated@@45 $generated@@50) $generated@@30) ($generated@@28 $generated@@48 $generated@@50 $generated@@49))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@45 $generated@@50) $generated@@30))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@28 $generated@@48 $generated@@53 $generated@@49)  (and ($generated@@28 $generated@@48 $generated@@53 $generated@@51) (or (not (= $generated@@53 $generated@@52)) (not true))))
 :pattern ( ($generated@@28 $generated@@48 $generated@@53 $generated@@49))
 :pattern ( ($generated@@28 $generated@@48 $generated@@53 $generated@@51))
)))
(assert  (=> (<= 1 $generated@@54) (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> (or ($generated@@57 $generated@@60 $generated@@62) (and (< 1 $generated@@54) (and (and ($generated@@56 $generated@@61) ($generated@@28 $generated@@29 $generated@@62 $generated@@30)) ($generated@@36 $generated@@62)))) (and ($generated@@58 $generated@@62) (= ($generated@@55 $generated@@60 $generated@@62) (let (($generated@@63 ($generated@@59 $generated@@62)))
$generated@@63))))
 :pattern ( ($generated@@55 $generated@@60 $generated@@62) ($generated@@56 $generated@@61))
))))
(assert (forall (($generated@@64 T@U) ) (!  (=> ($generated@@58 $generated@@64) (= ($generated@@59 $generated@@64) (ite ($generated@@36 $generated@@64) 2 ($generated@@31 3))))
 :pattern ( ($generated@@59 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@65 $generated@@30) (or ($generated@@36 $generated@@65) ($generated@@38 $generated@@65)))
 :pattern ( ($generated@@38 $generated@@65) ($generated@@28 $generated@@29 $generated@@65 $generated@@30))
 :pattern ( ($generated@@36 $generated@@65) ($generated@@28 $generated@@29 $generated@@65 $generated@@30))
)))
(assert (forall (($generated@@66 T@U) ) (! ($generated@@28 $generated@@48 $generated@@66 $generated@@51)
 :pattern ( ($generated@@28 $generated@@48 $generated@@66 $generated@@51))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@26 ($generated@@45 $generated@@67)) $generated@@6)
 :pattern ( ($generated@@45 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@68 ($generated@@45 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@45 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@40 $generated@@71 ($generated@@41 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@41 $generated@@71 $generated@@70))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@72 $generated@@82 $generated@@83 $generated@@84 ($generated@@78 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@87 $generated@@88) $generated@@85)
 :weight 0
)) (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@72 $generated@@89 $generated@@90 $generated@@91 ($generated@@78 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@72 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@72 $generated@@98 $generated@@99 $generated@@100 ($generated@@78 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@72 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)))) (= ($generated@@9 $generated@@73) 5)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@75 $generated@@107 $generated@@108 ($generated@@79 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@111) $generated@@109)
 :weight 0
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@116 $generated@@117) (= ($generated@@75 $generated@@112 $generated@@113 ($generated@@79 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@117) ($generated@@75 $generated@@112 $generated@@113 $generated@@115 $generated@@117)))
 :weight 0
))) (= ($generated@@9 $generated@@76) 6)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (= ($generated@@9 ($generated@@77 $generated@@118 $generated@@119)) 7))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@80 ($generated@@77 $generated@@120 $generated@@121)) $generated@@120)
 :pattern ( ($generated@@77 $generated@@120 $generated@@121))
))) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (! (= ($generated@@81 ($generated@@77 $generated@@122 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@77 $generated@@122 $generated@@123))
))))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 Bool) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@14 ($generated@@72 $generated@@48 $generated@@73 $generated@@10 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))  (=> (and (or (not (= $generated@@128 $generated@@124)) (not true)) ($generated@@14 ($generated@@40 $generated@@10 ($generated@@75 $generated@@73 $generated@@76 ($generated@@75 $generated@@48 ($generated@@77 $generated@@73 $generated@@76) $generated@@125 $generated@@128) $generated@@126)))) $generated@@127))
 :pattern ( ($generated@@72 $generated@@48 $generated@@73 $generated@@10 ($generated@@74 $generated@@124 $generated@@125 $generated@@126 $generated@@127) $generated@@128 $generated@@129))
)))
(assert (= ($generated@@25 $generated@@51) $generated@@2))
(assert (= ($generated@@130 $generated@@51) $generated@@7))
(assert (= ($generated@@25 $generated@@49) $generated@@3))
(assert (= ($generated@@130 $generated@@49) $generated@@7))
(assert (= ($generated@@25 $generated@@30) $generated@@4))
(assert (= ($generated@@130 $generated@@30) $generated@@8))
(assert (= $generated@@27 ($generated@@33 $generated@@29 $generated@@27)))
(assert  (=> (<= 1 $generated@@54) (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> (or ($generated@@57 $generated@@131 ($generated@@33 $generated@@29 $generated@@133)) (and (< 1 $generated@@54) (and (and ($generated@@56 $generated@@132) ($generated@@28 $generated@@29 $generated@@133 $generated@@30)) ($generated@@14 ($generated@@33 $generated@@10 ($generated@@13 ($generated@@36 ($generated@@33 $generated@@29 $generated@@133)))))))) (and ($generated@@58 ($generated@@33 $generated@@29 $generated@@133)) (= ($generated@@55 $generated@@131 ($generated@@33 $generated@@29 $generated@@133)) (let (($generated@@134 ($generated@@59 ($generated@@33 $generated@@29 $generated@@133))))
$generated@@134))))
 :weight 3
 :pattern ( ($generated@@55 $generated@@131 ($generated@@33 $generated@@29 $generated@@133)) ($generated@@56 $generated@@132))
))))
(assert (forall (($generated@@135 Int) ) (! (= ($generated@@41 $generated@@11 ($generated@@15 ($generated@@31 $generated@@135))) ($generated@@33 $generated@@76 ($generated@@41 $generated@@11 ($generated@@15 $generated@@135))))
 :pattern ( ($generated@@41 $generated@@11 ($generated@@15 ($generated@@31 $generated@@135))))
)))
(assert (forall (($generated@@136 T@U) ) (! (= ($generated@@45 ($generated@@33 $generated@@48 $generated@@136)) ($generated@@33 $generated@@29 ($generated@@45 $generated@@136)))
 :pattern ( ($generated@@45 ($generated@@33 $generated@@48 $generated@@136)))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@T) ) (! (= ($generated@@41 $generated@@138 ($generated@@33 $generated@@138 $generated@@137)) ($generated@@33 $generated@@76 ($generated@@41 $generated@@138 $generated@@137)))
 :pattern ( ($generated@@41 $generated@@138 ($generated@@33 $generated@@138 $generated@@137)))
)))
(assert (forall (($generated@@139 T@U) ) (! ($generated@@28 $generated@@11 $generated@@139 $generated)
 :pattern ( ($generated@@28 $generated@@11 $generated@@139 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@147  (=> (= (ControlFlow 0 5) (- 0 4)) (or (and ($generated@@28 $generated@@11 ($generated@@15 (ite ($generated@@36 $generated@@140) 2 ($generated@@31 3))) $generated) (= (ite ($generated@@36 $generated@@140) 2 ($generated@@31 3)) (ite ($generated@@36 $generated@@140) 2 ($generated@@31 3)))) (or (and ($generated@@28 $generated@@11 ($generated@@15 ($generated@@31 0)) $generated) (= ($generated@@31 0) (ite ($generated@@36 $generated@@140) 2 ($generated@@31 3)))) (exists (($generated@@148 Int) ) (= $generated@@148 (ite ($generated@@36 $generated@@140) 2 ($generated@@31 3)))))))))
(let (($generated@@149  (=> (and (= $generated@@140 ($generated@@45 $generated@@141)) ($generated@@28 $generated@@48 $generated@@141 $generated@@49)) (=> (and (and (= $generated@@142 $generated@@141) ($generated@@28 $generated@@48 $generated@@142 $generated@@49)) (and (= $generated@@143 $generated@@142) (= (ControlFlow 0 7) 5))) $generated@@147))))
(let (($generated@@150  (=> (and (= $generated@@140 $generated@@27) (= (ControlFlow 0 6) 5)) $generated@@147)))
(let (($generated@@151 true))
(let (($generated@@152  (=> (or (not (= $generated@@140 $generated@@27)) (not true)) (and (=> (= (ControlFlow 0 8) 7) $generated@@149) (=> (= (ControlFlow 0 8) 3) $generated@@151)))))
(let (($generated@@153  (and (=> (= (ControlFlow 0 9) 6) $generated@@150) (=> (= (ControlFlow 0 9) 8) $generated@@152))))
(let (($generated@@154 true))
(let (($generated@@155 true))
(let (($generated@@156  (=> (and (= $generated@@144 ($generated@@74 $generated@@52 $generated@@145 $generated@@1 false)) ($generated@@36 $generated@@140)) (and (and (=> (= (ControlFlow 0 10) 1) $generated@@155) (=> (= (ControlFlow 0 10) 9) $generated@@153)) (=> (= (ControlFlow 0 10) 2) $generated@@154)))))
(let (($generated@@157  (=> (and (and (and ($generated@@56 $generated@@145) ($generated@@146 $generated@@145)) ($generated@@28 $generated@@29 $generated@@140 $generated@@30)) (and (= 1 $generated@@54) (= (ControlFlow 0 11) 10))) $generated@@156)))
$generated@@157)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
