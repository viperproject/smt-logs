(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._module.Datatype () T@U)
(declare-fun |##_module.Datatype.DX| () T@U)
(declare-fun |##_module.Datatype.DY| () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$Datatype () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Datatype.DX| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Datatype () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Datatype.DX_q (T@U) Bool)
(declare-fun _module.Datatype.DY_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.Datatype.DY| (T@U) T@U)
(declare-fun refType () T@T)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun null () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.M (T@U T@U) Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.__default.M#canCall| (T@U T@U) Bool)
(declare-fun |$let#28$canCall| (T@U) Bool)
(declare-fun |$let#28_n| (T@U) Int)
(declare-fun _module.Datatype.o (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.object? Tagclass._System.object Tagclass._module.Datatype |##_module.Datatype.DX| |##_module.Datatype.DY| tytagFamily$object tytagFamily$Datatype)
)
(assert (= (Tag TInt) TagInt))
(assert (= (DatatypeCtorId |#_module.Datatype.DX|) |##_module.Datatype.DX|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert ($Is DatatypeTypeType |#_module.Datatype.DX| Tclass._module.Datatype))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d T@U) ) (! (= (_module.Datatype.DX_q d) (= (DatatypeCtorId d) |##_module.Datatype.DX|))
 :pattern ( (_module.Datatype.DX_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Datatype.DY_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Datatype.DY|))
 :pattern ( (_module.Datatype.DY_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Datatype.DX_q d@@1) (= d@@1 |#_module.Datatype.DX|))
 :pattern ( (_module.Datatype.DX_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Datatype.DY_q d@@2) (exists ((|a#5#0#0| T@U) ) (= d@@2 (|#_module.Datatype.DY| |a#5#0#0|))))
 :pattern ( (_module.Datatype.DY_q d@@2))
)))
(assert (= (Ctor refType) 4))
(assert (forall ((|a#6#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Datatype.DY| |a#6#0#0|) Tclass._module.Datatype) ($Is refType |a#6#0#0| Tclass._System.object))
 :pattern ( ($Is DatatypeTypeType (|#_module.Datatype.DY| |a#6#0#0|) Tclass._module.Datatype))
)))
(assert (forall ((|c#0| T@U) ) (! (= ($Is refType |c#0| Tclass._System.object)  (and ($Is refType |c#0| Tclass._System.object?) (or (not (= |c#0| null)) (not true))))
 :pattern ( ($Is refType |c#0| Tclass._System.object))
 :pattern ( ($Is refType |c#0| Tclass._System.object?))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.M$U T@U) ($Heap T@U) (|dt#0| T@U) ) (!  (=> (or (|_module.__default.M#canCall| _module._default.M$U |dt#0|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is DatatypeTypeType |dt#0| Tclass._module.Datatype)) (_module.Datatype.DX_q |dt#0|)))) (and (|$let#28$canCall| |dt#0|) (= (_module.__default.M _module._default.M$U |dt#0|) (let ((|n#0| (|$let#28_n| |dt#0|)))
|n#0|))))
 :pattern ( (_module.__default.M _module._default.M$U |dt#0|) ($IsGoodHeap $Heap))
))))
(assert (forall ((dt T@U) ) (!  (=> (|$let#28$canCall| dt) (= (|$let#28_n| dt) (ite (_module.Datatype.DX_q dt) 2 (LitInt 3))))
 :pattern ( (|$let#28_n| dt))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 Tclass._module.Datatype) (or (_module.Datatype.DX_q d@@3) (_module.Datatype.DY_q d@@3)))
 :pattern ( (_module.Datatype.DY_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.Datatype))
 :pattern ( (_module.Datatype.DX_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.Datatype))
)))
(assert (forall (($o T@U) ) (! ($Is refType $o Tclass._System.object?)
 :pattern ( ($Is refType $o Tclass._System.object?))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Datatype.DY| |a#4#0#0|)) |##_module.Datatype.DY|)
 :pattern ( (|#_module.Datatype.DY| |a#4#0#0|))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (_module.Datatype.o (|#_module.Datatype.DY| |a#8#0#0|)) |a#8#0#0|)
 :pattern ( (|#_module.Datatype.DY| |a#8#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@0 T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@0 $f))  (=> (and (or (not (= $o@@0 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o@@0) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@0 $f))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.Datatype) Tagclass._module.Datatype))
(assert (= (TagFamily Tclass._module.Datatype) tytagFamily$Datatype))
(assert (= |#_module.Datatype.DX| (Lit DatatypeTypeType |#_module.Datatype.DX|)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.M$U@@0 T@U) ($Heap@@0 T@U) (|dt#0@@0| T@U) ) (!  (=> (or (|_module.__default.M#canCall| _module._default.M$U@@0 (Lit DatatypeTypeType |dt#0@@0|)) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@0) ($Is DatatypeTypeType |dt#0@@0| Tclass._module.Datatype)) (U_2_bool (Lit boolType (bool_2_U (_module.Datatype.DX_q (Lit DatatypeTypeType |dt#0@@0|)))))))) (and (|$let#28$canCall| (Lit DatatypeTypeType |dt#0@@0|)) (= (_module.__default.M _module._default.M$U@@0 (Lit DatatypeTypeType |dt#0@@0|)) (let ((|n#1| (|$let#28_n| (Lit DatatypeTypeType |dt#0@@0|))))
|n#1|))))
 :weight 3
 :pattern ( (_module.__default.M _module._default.M$U@@0 (Lit DatatypeTypeType |dt#0@@0|)) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= (|#_module.Datatype.DY| (Lit refType |a#7#0#0|)) (Lit DatatypeTypeType (|#_module.Datatype.DY| |a#7#0#0|)))
 :pattern ( (|#_module.Datatype.DY| (Lit refType |a#7#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@7)) (Lit BoxType ($Box T@@2 x@@7)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@7)))
)))
(assert (forall ((v T@U) ) (! ($Is intType v TInt)
 :pattern ( ($Is intType v TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |dt#0@@1| () T@U)
(declare-fun |_mcc#0#0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |o#Z#0@0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let ((anon8_correct  (=> (= (ControlFlow 0 5) (- 0 4)) (or (and ($Is intType (int_2_U (ite (_module.Datatype.DX_q |dt#0@@1|) 2 (LitInt 3))) TInt) (= (ite (_module.Datatype.DX_q |dt#0@@1|) 2 (LitInt 3)) (ite (_module.Datatype.DX_q |dt#0@@1|) 2 (LitInt 3)))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (= (LitInt 0) (ite (_module.Datatype.DX_q |dt#0@@1|) 2 (LitInt 3)))) (exists ((|n#3| Int) ) (= |n#3| (ite (_module.Datatype.DX_q |dt#0@@1|) 2 (LitInt 3)))))))))
(let ((anon13_Then_correct  (=> (and (= |dt#0@@1| (|#_module.Datatype.DY| |_mcc#0#0|)) ($Is refType |_mcc#0#0| Tclass._System.object)) (=> (and (and (= |let#0#0#0| |_mcc#0#0|) ($Is refType |let#0#0#0| Tclass._System.object)) (and (= |o#Z#0@0| |let#0#0#0|) (= (ControlFlow 0 7) 5))) anon8_correct))))
(let ((anon12_Then_correct  (=> (and (= |dt#0@@1| |#_module.Datatype.DX|) (= (ControlFlow 0 6) 5)) anon8_correct)))
(let ((anon13_Else_correct true))
(let ((anon12_Else_correct  (=> (or (not (= |dt#0@@1| |#_module.Datatype.DX|)) (not true)) (and (=> (= (ControlFlow 0 8) 7) anon13_Then_correct) (=> (= (ControlFlow 0 8) 3) anon13_Else_correct)))))
(let ((anon11_Then_correct  (and (=> (= (ControlFlow 0 9) 6) anon12_Then_correct) (=> (= (ControlFlow 0 9) 8) anon12_Else_correct))))
(let ((anon11_Else_correct true))
(let ((anon10_Then_correct true))
(let ((anon0_correct  (=> (and (= $_ReadsFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (_module.Datatype.DX_q |dt#0@@1|)) (and (and (=> (= (ControlFlow 0 10) 1) anon10_Then_correct) (=> (= (ControlFlow 0 10) 9) anon11_Then_correct)) (=> (= (ControlFlow 0 10) 2) anon11_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) ($Is DatatypeTypeType |dt#0@@1| Tclass._module.Datatype)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 11) 10))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
