(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.Dt () T@U)
(declare-fun |##_module.Dt.A| () T@U)
(declare-fun |##_module.Dt.B| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$Dt () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Dt.A| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Dt () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Dt.A_q (T@U) Bool)
(declare-fun _module.Dt.B_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |#_module.Dt.B| (T@U) T@U)
(declare-fun |lambda#0| (Int Int Int T@U T@U Bool T@U) T@U)
(declare-fun _module.Dt.b (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Tclass._System.nat () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.SetComprehension (T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |_module.__default.SetComprehension#canCall| (T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet TagSeq alloc Tagclass._System.nat Tagclass._module.Dt |##_module.Dt.A| |##_module.Dt.B| tytagFamily$nat tytagFamily$Dt)
)
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.Dt.A|) |##_module.Dt.A|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert ($Is DatatypeTypeType |#_module.Dt.A| Tclass._module.Dt))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d T@U) ) (! (= (_module.Dt.A_q d) (= (DatatypeCtorId d) |##_module.Dt.A|))
 :pattern ( (_module.Dt.A_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Dt.B_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Dt.B|))
 :pattern ( (_module.Dt.B_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 4)))
(assert (forall ((m@@1 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx) (U_2_bool (MapType0Select BoxType boolType m@@1 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Dt.A_q d@@1) (= d@@1 |#_module.Dt.A|))
 :pattern ( (_module.Dt.A_q d@@1))
)))
(assert (= (Ctor SetType) 5))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Dt.B_q d@@2) (exists ((|a#5#0#0| T@U) ) (= d@@2 (|#_module.Dt.B| |a#5#0#0|))))
 :pattern ( (_module.Dt.B_q d@@2))
)))
(assert (forall ((|l#0| Int) (|l#1| Int) (|l#2| Int) (|l#3| T@U) (|l#4| T@U) (|l#5| Bool) (|l#6| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6|) |$y#0|)) (exists ((|i#0| Int) (|b#0| Int) ) (!  (and (and (<= |l#0| |b#0|) (and (and (and (and (<= |l#1| |i#0|) (< |i#0| |l#2|)) (_module.Dt.B_q ($Unbox DatatypeTypeType (|Seq#Index| |l#3| |i#0|)))) (|Set#IsMember| (_module.Dt.b ($Unbox DatatypeTypeType (|Seq#Index| |l#4| |i#0|))) ($Box intType (int_2_U |b#0|)))) |l#5|)) (= |$y#0| ($Box intType (int_2_U |b#0|))))
 :pattern ( (|Set#IsMember| (_module.Dt.b ($Unbox DatatypeTypeType (|Seq#Index| |l#6| |i#0|))) ($Box intType (int_2_U |b#0|))))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6|) |$y#0|))
)))
(assert (forall ((|x#0| T@U) ) (! (= ($Is intType |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))
 :pattern ( ($Is intType |x#0| Tclass._System.nat))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@1 Tclass._System.nat))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Dt) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass._module.Dt)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Dt))
)))
(assert (= (Ctor SeqType) 6))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|s#0| T@U) ) (!  (=> (or (|_module.__default.SetComprehension#canCall| (Lit SeqType |s#0|)) (and (< 1 $FunctionContextHeight) ($Is SeqType |s#0| (TSeq Tclass._module.Dt)))) (= (_module.__default.SetComprehension (Lit SeqType |s#0|)) (|Set#FromBoogieMap| (|lambda#0| (LitInt 0) (LitInt 0) (|Seq#Length| (Lit SeqType |s#0|)) (Lit SeqType |s#0|) (Lit SeqType |s#0|)  (or (not (= 1 2)) (not true)) |s#0|))))
 :weight 3
 :pattern ( (_module.__default.SetComprehension (Lit SeqType |s#0|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|s#0@@0| T@U) ) (!  (=> (or (|_module.__default.SetComprehension#canCall| |s#0@@0|) (and (< 1 $FunctionContextHeight) ($Is SeqType |s#0@@0| (TSeq Tclass._module.Dt)))) (= (_module.__default.SetComprehension |s#0@@0|) (|Set#FromBoogieMap| (|lambda#0| (LitInt 0) (LitInt 0) (|Seq#Length| |s#0@@0|) |s#0@@0| |s#0@@0|  (or (not (= 1 2)) (not true)) |s#0@@0|))))
 :pattern ( (_module.__default.SetComprehension |s#0@@0|))
))))
(assert (forall ((|a#6#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Dt.B| |a#6#0#0|) Tclass._module.Dt) ($Is SetType |a#6#0#0| (TSet Tclass._System.nat)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Dt.B| |a#6#0#0|) Tclass._module.Dt))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 Tclass._module.Dt) (or (_module.Dt.A_q d@@3) (_module.Dt.B_q d@@3)))
 :pattern ( (_module.Dt.B_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.Dt))
 :pattern ( (_module.Dt.A_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.Dt))
)))
(assert (forall ((v@@0 T@U) (t T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v@@0) t) ($Is T@@1 v@@0 t))
 :pattern ( ($IsBox ($Box T@@1 v@@0) t))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((t@@0 T@U) ) (! (= (Inv0_TSet (TSet t@@0)) t@@0)
 :pattern ( (TSet t@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Tag (TSet t@@1)) TagSet)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Inv0_TSeq (TSeq t@@2)) t@@2)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Tag (TSeq t@@3)) TagSeq)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Dt.B| |a#4#0#0|)) |##_module.Dt.B|)
 :pattern ( (|#_module.Dt.B| |a#4#0#0|))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (_module.Dt.b (|#_module.Dt.B| |a#8#0#0|)) |a#8#0#0|)
 :pattern ( (|#_module.Dt.B| |a#8#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 9))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#2| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o $f))  (=> (and (or (not (= $o |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o) |l#2@@0|)))) |l#3@@0|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#2| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|s#0@@1| T@U) ) (!  (=> (or (|_module.__default.SetComprehension#canCall| |s#0@@1|) (and (< 1 $FunctionContextHeight) ($Is SeqType |s#0@@1| (TSeq Tclass._module.Dt)))) ($Is SetType (_module.__default.SetComprehension |s#0@@1|) (TSet Tclass._System.nat)))
 :pattern ( (_module.__default.SetComprehension |s#0@@1|))
))))
(assert (forall ((bx@@3 T@U) (t@@4 T@U) ) (!  (=> ($IsBox bx@@3 (TSet t@@4)) (and (= ($Box SetType ($Unbox SetType bx@@3)) bx@@3) ($Is SetType ($Unbox SetType bx@@3) (TSet t@@4))))
 :pattern ( ($IsBox bx@@3 (TSet t@@4)))
)))
(assert (forall ((bx@@4 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@4 (TSeq t@@5)) (and (= ($Box SeqType ($Unbox SeqType bx@@4)) bx@@4) ($Is SeqType ($Unbox SeqType bx@@4) (TSeq t@@5))))
 :pattern ( ($IsBox bx@@4 (TSeq t@@5)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._module.Dt) Tagclass._module.Dt))
(assert (= (TagFamily Tclass._module.Dt) tytagFamily$Dt))
(assert (= |#_module.Dt.A| (Lit DatatypeTypeType |#_module.Dt.A|)))
(assert (forall ((|a#9#0#0| T@U) (d@@4 T@U) ) (!  (=> (|Set#IsMember| |a#9#0#0| ($Box DatatypeTypeType d@@4)) (< (DtRank d@@4) (DtRank (|#_module.Dt.B| |a#9#0#0|))))
 :pattern ( (|Set#IsMember| |a#9#0#0| ($Box DatatypeTypeType d@@4)) (|#_module.Dt.B| |a#9#0#0|))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= (|#_module.Dt.B| (Lit SetType |a#7#0#0|)) (Lit DatatypeTypeType (|#_module.Dt.B| |a#7#0#0|)))
 :pattern ( (|#_module.Dt.B| (Lit SetType |a#7#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@1 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@1 (TSeq t0@@2)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@1))) ($IsBox (|Seq#Index| v@@1 i) t0@@2))
 :pattern ( (|Seq#Index| v@@1 i))
)))
 :pattern ( ($Is SeqType v@@1 (TSeq t0@@2)))
)))
(assert (forall ((s@@1 T@U) (i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| s@@1))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@0))) (|Seq#Rank| s@@1)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@0))))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#2@0| () Int)
(declare-fun |s#0@@2| () T@U)
(declare-fun |b#2@0| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 19) (let ((anon14_correct true))
(let ((anon22_Else_correct  (=> (and (not (and (and (and (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|))) (_module.Dt.B_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|)))) (|Set#IsMember| (_module.Dt.b ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|))) ($Box intType (int_2_U |b#2@0|)))) (or (not (= 1 2)) (not true)))) (= (ControlFlow 0 5) 2)) anon14_correct)))
(let ((anon22_Then_correct  (=> (and (and (and (and (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|))) (_module.Dt.B_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|)))) (|Set#IsMember| (_module.Dt.b ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|))) ($Box intType (int_2_U |b#2@0|)))) (or (not (= 1 2)) (not true))) (= (ControlFlow 0 4) 2)) anon14_correct)))
(let ((anon21_Else_correct  (=> (not (and (and (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|))) (_module.Dt.B_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|)))) (|Set#IsMember| (_module.Dt.b ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|))) ($Box intType (int_2_U |b#2@0|))))) (and (=> (= (ControlFlow 0 7) 4) anon22_Then_correct) (=> (= (ControlFlow 0 7) 5) anon22_Else_correct)))))
(let ((anon21_Then_correct  (=> (and (and (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|))) (_module.Dt.B_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|)))) (|Set#IsMember| (_module.Dt.b ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|))) ($Box intType (int_2_U |b#2@0|)))) (and (=> (= (ControlFlow 0 6) 4) anon22_Then_correct) (=> (= (ControlFlow 0 6) 5) anon22_Else_correct)))))
(let ((anon20_Else_correct  (=> (not (and (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|))) (_module.Dt.B_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|))))) (and (=> (= (ControlFlow 0 11) 6) anon21_Then_correct) (=> (= (ControlFlow 0 11) 7) anon21_Else_correct)))))
(let ((anon20_Then_correct  (=> (and (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|))) (_module.Dt.B_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|)))) (and (=> (= (ControlFlow 0 8) (- 0 10)) (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (_module.Dt.B_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|)))) (=> (_module.Dt.B_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@2| |i#2@0|))) (and (=> (= (ControlFlow 0 8) 6) anon21_Then_correct) (=> (= (ControlFlow 0 8) 7) anon21_Else_correct)))))))))
(let ((anon19_Else_correct  (=> (not (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|)))) (and (=> (= (ControlFlow 0 14) 8) anon20_Then_correct) (=> (= (ControlFlow 0 14) 11) anon20_Else_correct)))))
(let ((anon19_Then_correct  (=> (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |s#0@@2|))) (and (=> (= (ControlFlow 0 12) 8) anon20_Then_correct) (=> (= (ControlFlow 0 12) 11) anon20_Else_correct)))))))
(let ((anon18_Else_correct  (=> (< |i#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 16) 12) anon19_Then_correct) (=> (= (ControlFlow 0 16) 14) anon19_Else_correct)))))
(let ((anon18_Then_correct  (=> (<= (LitInt 0) |i#2@0|) (and (=> (= (ControlFlow 0 15) 12) anon19_Then_correct) (=> (= (ControlFlow 0 15) 14) anon19_Else_correct)))))
(let ((anon17_Then_correct  (=> (<= (LitInt 0) |b#2@0|) (and (=> (= (ControlFlow 0 17) 15) anon18_Then_correct) (=> (= (ControlFlow 0 17) 16) anon18_Else_correct)))))
(let ((anon17_Else_correct  (=> (and (< |b#2@0| (LitInt 0)) (= (ControlFlow 0 3) 2)) anon14_correct)))
(let ((anon16_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#2| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 18) 1) anon16_Then_correct) (=> (= (ControlFlow 0 18) 17) anon17_Then_correct)) (=> (= (ControlFlow 0 18) 3) anon17_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is SeqType |s#0@@2| (TSeq Tclass._module.Dt))) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 19) 18))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
