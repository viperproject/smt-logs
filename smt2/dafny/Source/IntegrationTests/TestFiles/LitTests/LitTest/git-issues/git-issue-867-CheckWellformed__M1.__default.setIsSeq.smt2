(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@U) Int)
(declare-fun $generated@@31 (Int) Int)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U T@U) Bool)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 (T@U T@U) Bool)
(declare-fun $generated@@47 (T@U T@U T@U) Bool)
(declare-fun $generated@@48 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@53 (T@U Int) T@U)
(declare-fun $generated@@57 () Int)
(declare-fun $generated@@58 (T@U T@U T@U) Bool)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@U T@U T@U) Bool)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@86 (T@U) T@U)
(declare-fun $generated@@89 (T@U) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@T T@T) T@T)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@104 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (forall (($generated@@23 T@U) ) (!  (not ($generated@@21 $generated@@22 $generated@@23))
 :pattern ( ($generated@@21 $generated@@22 $generated@@23))
)))
(assert (forall (($generated@@26 T@U) ) (!  (not ($generated@@24 $generated@@25 $generated@@26))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26))
)))
(assert (= ($generated@@27 $generated@@25) 0))
(assert (forall (($generated@@29 T@U) ) (!  (and (= (= ($generated@@28 $generated@@29) 0) (= $generated@@29 $generated@@22)) (=> (or (not (= ($generated@@28 $generated@@29) 0)) (not true)) (exists (($generated@@30 T@U) ) (! ($generated@@21 $generated@@29 $generated@@30)
 :pattern ( ($generated@@21 $generated@@29 $generated@@30))
))))
 :pattern ( ($generated@@28 $generated@@29))
)))
(assert (forall (($generated@@32 Int) ) (! (= ($generated@@31 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert (= ($generated@@4 $generated@@41) 3))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@40 $generated@@41 $generated@@44 ($generated@@42 $generated@@45)) (forall (($generated@@46 T@U) ) (!  (=> ($generated@@21 $generated@@44 $generated@@46) ($generated@@43 $generated@@46 $generated@@45))
 :pattern ( ($generated@@21 $generated@@44 $generated@@46))
)))
 :pattern ( ($generated@@40 $generated@@41 $generated@@44 ($generated@@42 $generated@@45)))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@47 ($generated@@37 $generated@@52 $generated@@49) $generated@@50 $generated@@51) ($generated@@48 $generated@@52 $generated@@49 $generated@@50 $generated@@51))
 :pattern ( ($generated@@47 ($generated@@37 $generated@@52 $generated@@49) $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@24 $generated@@54 $generated@@55) (exists (($generated@@56 Int) ) (!  (and (and (<= 0 $generated@@56) (< $generated@@56 ($generated@@27 $generated@@54))) (= ($generated@@53 $generated@@54 $generated@@56) $generated@@55))
 :pattern ( ($generated@@53 $generated@@54 $generated@@56))
)))
 :pattern ( ($generated@@24 $generated@@54 $generated@@55))
)))
(assert (= ($generated@@4 $generated@@59) 4))
(assert  (=> (<= 0 $generated@@57) (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (or ($generated@@60 $generated@@62 ($generated@@33 $generated@@41 $generated@@63) ($generated@@33 $generated@@59 $generated@@64)) (and (< 0 $generated@@57) (and ($generated@@40 $generated@@41 $generated@@63 ($generated@@42 $generated@@62)) ($generated@@40 $generated@@59 $generated@@64 ($generated@@61 $generated@@62))))) (= ($generated@@58 $generated@@62 ($generated@@33 $generated@@41 $generated@@63) ($generated@@33 $generated@@59 $generated@@64))  (=> (= ($generated@@28 ($generated@@33 $generated@@41 $generated@@63)) ($generated@@27 ($generated@@33 $generated@@59 $generated@@64))) (and (forall (($generated@@65 Int) ) (!  (=> (and (<= ($generated@@31 0) $generated@@65) (< $generated@@65 ($generated@@27 ($generated@@33 $generated@@59 $generated@@64)))) ($generated@@21 ($generated@@33 $generated@@41 $generated@@63) ($generated@@53 ($generated@@33 $generated@@59 $generated@@64) $generated@@65)))
 :pattern ( ($generated@@53 $generated@@64 $generated@@65))
)) (forall (($generated@@66 T@U) ) (!  (=> ($generated@@43 $generated@@66 $generated@@62) (=> ($generated@@21 ($generated@@33 $generated@@41 $generated@@63) $generated@@66) ($generated@@24 $generated@@64 $generated@@66)))
 :pattern ( ($generated@@24 $generated@@64 $generated@@66))
 :pattern ( ($generated@@21 $generated@@63 $generated@@66))
))))))
 :weight 3
 :pattern ( ($generated@@58 $generated@@62 ($generated@@33 $generated@@41 $generated@@63) ($generated@@33 $generated@@59 $generated@@64)))
))))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@43 $generated@@67 $generated) (and (= ($generated@@37 $generated@@5 ($generated@@36 $generated@@5 $generated@@67)) $generated@@67) ($generated@@40 $generated@@5 ($generated@@36 $generated@@5 $generated@@67) $generated)))
 :pattern ( ($generated@@43 $generated@@67 $generated))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@43 ($generated@@37 $generated@@70 $generated@@68) $generated@@69) ($generated@@40 $generated@@70 $generated@@68 $generated@@69))
 :pattern ( ($generated@@43 ($generated@@37 $generated@@70 $generated@@68) $generated@@69))
)))
(assert  (=> (<= 0 $generated@@57) (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (=> (or ($generated@@60 $generated@@71 $generated@@72 $generated@@73) (and (< 0 $generated@@57) (and ($generated@@40 $generated@@41 $generated@@72 ($generated@@42 $generated@@71)) ($generated@@40 $generated@@59 $generated@@73 ($generated@@61 $generated@@71))))) (= ($generated@@58 $generated@@71 $generated@@72 $generated@@73)  (=> (= ($generated@@28 $generated@@72) ($generated@@27 $generated@@73)) (and (forall (($generated@@74 Int) ) (!  (=> (and (<= ($generated@@31 0) $generated@@74) (< $generated@@74 ($generated@@27 $generated@@73))) ($generated@@21 $generated@@72 ($generated@@53 $generated@@73 $generated@@74)))
 :pattern ( ($generated@@53 $generated@@73 $generated@@74))
)) (forall (($generated@@75 T@U) ) (!  (=> ($generated@@43 $generated@@75 $generated@@71) (=> ($generated@@21 $generated@@72 $generated@@75) ($generated@@24 $generated@@73 $generated@@75)))
 :pattern ( ($generated@@24 $generated@@73 $generated@@75))
 :pattern ( ($generated@@21 $generated@@72 $generated@@75))
))))))
 :pattern ( ($generated@@58 $generated@@71 $generated@@72 $generated@@73))
))))
(assert (forall (($generated@@76 T@U) ) (! (<= 0 ($generated@@28 $generated@@76))
 :pattern ( ($generated@@28 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ) (! (<= 0 ($generated@@27 $generated@@77))
 :pattern ( ($generated@@27 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@48 $generated@@41 $generated@@78 ($generated@@42 $generated@@79) $generated@@80) (forall (($generated@@81 T@U) ) (!  (=> ($generated@@21 $generated@@78 $generated@@81) ($generated@@47 $generated@@81 $generated@@79 $generated@@80))
 :pattern ( ($generated@@21 $generated@@78 $generated@@81))
)))
 :pattern ( ($generated@@48 $generated@@41 $generated@@78 ($generated@@42 $generated@@79) $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@48 $generated@@59 $generated@@82 ($generated@@61 $generated@@83) $generated@@84) (forall (($generated@@85 Int) ) (!  (=> (and (<= 0 $generated@@85) (< $generated@@85 ($generated@@27 $generated@@82))) ($generated@@47 ($generated@@53 $generated@@82 $generated@@85) $generated@@83 $generated@@84))
 :pattern ( ($generated@@53 $generated@@82 $generated@@85))
)))
 :pattern ( ($generated@@48 $generated@@59 $generated@@82 ($generated@@61 $generated@@83) $generated@@84))
)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@86 ($generated@@42 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@42 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@20 ($generated@@42 $generated@@88)) $generated@@1)
 :pattern ( ($generated@@42 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@89 ($generated@@61 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@61 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@20 ($generated@@61 $generated@@91)) $generated@@2)
 :pattern ( ($generated@@61 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@36 $generated@@93 ($generated@@37 $generated@@93 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@37 $generated@@93 $generated@@92))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@94 $generated@@105 $generated@@106 $generated@@107 ($generated@@101 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@94 $generated@@112 $generated@@113 $generated@@114 ($generated@@101 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@94 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@94 $generated@@121 $generated@@122 $generated@@123 ($generated@@101 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))) (= ($generated@@4 $generated@@95) 5)) (= ($generated@@4 $generated@@96) 6)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@98 $generated@@130 $generated@@131 ($generated@@102 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@134) $generated@@132)
 :weight 0
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@139 $generated@@140) (= ($generated@@98 $generated@@135 $generated@@136 ($generated@@102 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@137) $generated@@140) ($generated@@98 $generated@@135 $generated@@136 $generated@@138 $generated@@140)))
 :weight 0
))) (= ($generated@@4 $generated@@99) 7)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (= ($generated@@4 ($generated@@100 $generated@@141 $generated@@142)) 8))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@103 ($generated@@100 $generated@@143 $generated@@144)) $generated@@143)
 :pattern ( ($generated@@100 $generated@@143 $generated@@144))
))) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (! (= ($generated@@104 ($generated@@100 $generated@@145 $generated@@146)) $generated@@146)
 :pattern ( ($generated@@100 $generated@@145 $generated@@146))
))))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 Bool) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (= ($generated@@9 ($generated@@94 $generated@@95 $generated@@96 $generated@@5 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))  (=> (and (or (not (= $generated@@151 $generated@@147)) (not true)) ($generated@@9 ($generated@@36 $generated@@5 ($generated@@98 $generated@@96 $generated@@99 ($generated@@98 $generated@@95 ($generated@@100 $generated@@96 $generated@@99) $generated@@148 $generated@@151) $generated@@149)))) $generated@@150))
 :pattern ( ($generated@@94 $generated@@95 $generated@@96 $generated@@5 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (!  (=> ($generated@@43 $generated@@153 ($generated@@42 $generated@@154)) (and (= ($generated@@37 $generated@@41 ($generated@@36 $generated@@41 $generated@@153)) $generated@@153) ($generated@@40 $generated@@41 ($generated@@36 $generated@@41 $generated@@153) ($generated@@42 $generated@@154))))
 :pattern ( ($generated@@43 $generated@@153 ($generated@@42 $generated@@154)))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> ($generated@@43 $generated@@155 ($generated@@61 $generated@@156)) (and (= ($generated@@37 $generated@@59 ($generated@@36 $generated@@59 $generated@@155)) $generated@@155) ($generated@@40 $generated@@59 ($generated@@36 $generated@@59 $generated@@155) ($generated@@61 $generated@@156))))
 :pattern ( ($generated@@43 $generated@@155 ($generated@@61 $generated@@156)))
)))
(assert (forall (($generated@@157 Int) ) (! (= ($generated@@37 $generated@@6 ($generated@@10 ($generated@@31 $generated@@157))) ($generated@@33 $generated@@99 ($generated@@37 $generated@@6 ($generated@@10 $generated@@157))))
 :pattern ( ($generated@@37 $generated@@6 ($generated@@10 ($generated@@31 $generated@@157))))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@T) ) (! (= ($generated@@37 $generated@@159 ($generated@@33 $generated@@159 $generated@@158)) ($generated@@33 $generated@@99 ($generated@@37 $generated@@159 $generated@@158)))
 :pattern ( ($generated@@37 $generated@@159 ($generated@@33 $generated@@159 $generated@@158)))
)))
(assert (forall (($generated@@160 T@U) ) (!  (=> (= ($generated@@27 $generated@@160) 0) (= $generated@@160 $generated@@25))
 :pattern ( ($generated@@27 $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (! ($generated@@48 $generated@@5 $generated@@162 $generated $generated@@161)
 :pattern ( ($generated@@48 $generated@@5 $generated@@162 $generated $generated@@161))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (! (= ($generated@@40 $generated@@59 $generated@@163 ($generated@@61 $generated@@164)) (forall (($generated@@165 Int) ) (!  (=> (and (<= 0 $generated@@165) (< $generated@@165 ($generated@@27 $generated@@163))) ($generated@@43 ($generated@@53 $generated@@163 $generated@@165) $generated@@164))
 :pattern ( ($generated@@53 $generated@@163 $generated@@165))
)))
 :pattern ( ($generated@@40 $generated@@59 $generated@@163 ($generated@@61 $generated@@164)))
)))
(assert (forall (($generated@@166 T@U) ) (! ($generated@@40 $generated@@5 $generated@@166 $generated)
 :pattern ( ($generated@@40 $generated@@5 $generated@@166 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () Int)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 (T@U) Bool)
(declare-fun $generated@@176 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 19) (let (($generated@@177 true))
(let (($generated@@178 true))
(let (($generated@@179  (=> (and (not ($generated@@21 $generated@@167 $generated@@168)) (= (ControlFlow 0 8) 2)) $generated@@178)))
(let (($generated@@180  (=> (and ($generated@@21 $generated@@167 $generated@@168) (= (ControlFlow 0 7) 2)) $generated@@178)))
(let (($generated@@181  (=> (and ($generated@@43 $generated@@168 $generated@@169) ($generated@@47 $generated@@168 $generated@@169 $generated@@170)) (and (=> (= (ControlFlow 0 9) 7) $generated@@180) (=> (= (ControlFlow 0 9) 8) $generated@@179)))))
(let (($generated@@182  (=> (and (not (and ($generated@@43 $generated@@168 $generated@@169) ($generated@@47 $generated@@168 $generated@@169 $generated@@170))) (= (ControlFlow 0 6) 2)) $generated@@178)))
(let (($generated@@183  (=> (forall (($generated@@184 Int) ) (!  (=> (and (<= ($generated@@31 0) $generated@@184) (< $generated@@184 ($generated@@27 $generated@@171))) ($generated@@21 $generated@@167 ($generated@@53 $generated@@171 $generated@@184)))
 :pattern ( ($generated@@53 $generated@@171 $generated@@184))
)) (and (=> (= (ControlFlow 0 10) 9) $generated@@181) (=> (= (ControlFlow 0 10) 6) $generated@@182)))))
(let (($generated@@185  (=> (and (not (forall (($generated@@186 Int) ) (!  (=> (and (<= ($generated@@31 0) $generated@@186) (< $generated@@186 ($generated@@27 $generated@@171))) ($generated@@21 $generated@@167 ($generated@@53 $generated@@171 $generated@@186)))
 :pattern ( ($generated@@53 $generated@@171 $generated@@186))
))) (= (ControlFlow 0 5) 2)) $generated@@178)))
(let (($generated@@187  (=> (not (and (<= ($generated@@31 0) $generated@@172) (< $generated@@172 ($generated@@27 $generated@@171)))) (and (=> (= (ControlFlow 0 13) 10) $generated@@183) (=> (= (ControlFlow 0 13) 5) $generated@@185)))))
(let (($generated@@188  (=> (and (<= ($generated@@31 0) $generated@@172) (< $generated@@172 ($generated@@27 $generated@@171))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (and (<= 0 $generated@@172) (< $generated@@172 ($generated@@27 $generated@@171)))) (=> (and (<= 0 $generated@@172) (< $generated@@172 ($generated@@27 $generated@@171))) (and (=> (= (ControlFlow 0 11) 10) $generated@@183) (=> (= (ControlFlow 0 11) 5) $generated@@185)))))))
(let (($generated@@189  (=> (< $generated@@172 ($generated@@31 0)) (and (=> (= (ControlFlow 0 15) 11) $generated@@188) (=> (= (ControlFlow 0 15) 13) $generated@@187)))))
(let (($generated@@190  (=> (<= ($generated@@31 0) $generated@@172) (and (=> (= (ControlFlow 0 14) 11) $generated@@188) (=> (= (ControlFlow 0 14) 13) $generated@@187)))))
(let (($generated@@191  (and (=> (= (ControlFlow 0 16) 14) $generated@@190) (=> (= (ControlFlow 0 16) 15) $generated@@189))))
(let (($generated@@192  (=> (= ($generated@@28 $generated@@167) ($generated@@27 $generated@@171)) (and (=> (= (ControlFlow 0 17) 16) $generated@@191) (=> (= (ControlFlow 0 17) 4) $generated@@177)))))
(let (($generated@@193  (=> (and (or (not (= ($generated@@28 $generated@@167) ($generated@@27 $generated@@171))) (not true)) (= (ControlFlow 0 3) 2)) $generated@@178)))
(let (($generated@@194 true))
(let (($generated@@195  (=> (= $generated@@173 ($generated@@97 $generated@@174 $generated@@170 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 18) 1) $generated@@194) (=> (= (ControlFlow 0 18) 17) $generated@@192)) (=> (= (ControlFlow 0 18) 3) $generated@@193)))))
(let (($generated@@196  (=> (and ($generated@@175 $generated@@170) ($generated@@176 $generated@@170)) (=> (and (and ($generated@@40 $generated@@41 $generated@@167 ($generated@@42 $generated@@169)) ($generated@@40 $generated@@59 $generated@@171 ($generated@@61 $generated@@169))) (and (= 0 $generated@@57) (= (ControlFlow 0 19) 18))) $generated@@195))))
$generated@@196)))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
