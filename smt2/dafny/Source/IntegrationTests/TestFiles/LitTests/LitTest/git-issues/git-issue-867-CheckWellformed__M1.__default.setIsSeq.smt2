(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun M1.__default.setIsSeq (T@U T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun |M1.__default.setIsSeq#canCall| (T@U T@U T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool TagSet TagSeq alloc)
)
(assert (= (Tag TBool) TagBool))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((x@@2 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@2))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@2))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) ) (!  (and (= (= (|Set#Card| s) 0) (= s |Set#Empty|)) (=> (or (not (= (|Set#Card| s) 0)) (not true)) (exists ((x@@3 T@U) ) (! (|Set#IsMember| s x@@3)
 :pattern ( (|Set#IsMember| s x@@3))
))))
 :pattern ( (|Set#Card| s))
)))
(assert (forall ((x@@4 Int) ) (! (= (LitInt x@@4) x@@4)
 :pattern ( (LitInt x@@4))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (= (Ctor SetType) 3))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((s@@0 T@U) (x@@7 T@U) ) (! (= (|Seq#Contains| s@@0 x@@7) (exists ((i Int) ) (!  (and (and (<= 0 i) (< i (|Seq#Length| s@@0))) (= (|Seq#Index| s@@0 i) x@@7))
 :pattern ( (|Seq#Index| s@@0 i))
)))
 :pattern ( (|Seq#Contains| s@@0 x@@7))
)))
(assert (= (Ctor SeqType) 4))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((M1._default.setIsSeq$_T0 T@U) (|t#0| T@U) (|q#0| T@U) ) (!  (=> (or (|M1.__default.setIsSeq#canCall| M1._default.setIsSeq$_T0 (Lit SetType |t#0|) (Lit SeqType |q#0|)) (and (< 0 $FunctionContextHeight) (and ($Is SetType |t#0| (TSet M1._default.setIsSeq$_T0)) ($Is SeqType |q#0| (TSeq M1._default.setIsSeq$_T0))))) (= (M1.__default.setIsSeq M1._default.setIsSeq$_T0 (Lit SetType |t#0|) (Lit SeqType |q#0|))  (=> (= (|Set#Card| (Lit SetType |t#0|)) (|Seq#Length| (Lit SeqType |q#0|))) (and (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit SeqType |q#0|)))) (|Set#IsMember| (Lit SetType |t#0|) (|Seq#Index| (Lit SeqType |q#0|) |i#1|)))
 :pattern ( (|Seq#Index| |q#0| |i#1|))
)) (forall ((|x#1| T@U) ) (!  (=> ($IsBox |x#1| M1._default.setIsSeq$_T0) (=> (|Set#IsMember| (Lit SetType |t#0|) |x#1|) (|Seq#Contains| |q#0| |x#1|)))
 :pattern ( (|Seq#Contains| |q#0| |x#1|))
 :pattern ( (|Set#IsMember| |t#0| |x#1|))
))))))
 :weight 3
 :pattern ( (M1.__default.setIsSeq M1._default.setIsSeq$_T0 (Lit SetType |t#0|) (Lit SeqType |q#0|)))
))))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TBool) (and (= ($Box boolType ($Unbox boolType bx@@0)) bx@@0) ($Is boolType ($Unbox boolType bx@@0) TBool)))
 :pattern ( ($IsBox bx@@0 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((M1._default.setIsSeq$_T0@@0 T@U) (|t#0@@0| T@U) (|q#0@@0| T@U) ) (!  (=> (or (|M1.__default.setIsSeq#canCall| M1._default.setIsSeq$_T0@@0 |t#0@@0| |q#0@@0|) (and (< 0 $FunctionContextHeight) (and ($Is SetType |t#0@@0| (TSet M1._default.setIsSeq$_T0@@0)) ($Is SeqType |q#0@@0| (TSeq M1._default.setIsSeq$_T0@@0))))) (= (M1.__default.setIsSeq M1._default.setIsSeq$_T0@@0 |t#0@@0| |q#0@@0|)  (=> (= (|Set#Card| |t#0@@0|) (|Seq#Length| |q#0@@0|)) (and (forall ((|i#0| Int) ) (!  (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |q#0@@0|))) (|Set#IsMember| |t#0@@0| (|Seq#Index| |q#0@@0| |i#0|)))
 :pattern ( (|Seq#Index| |q#0@@0| |i#0|))
)) (forall ((|x#0| T@U) ) (!  (=> ($IsBox |x#0| M1._default.setIsSeq$_T0@@0) (=> (|Set#IsMember| |t#0@@0| |x#0|) (|Seq#Contains| |q#0@@0| |x#0|)))
 :pattern ( (|Seq#Contains| |q#0@@0| |x#0|))
 :pattern ( (|Set#IsMember| |t#0@@0| |x#0|))
))))))
 :pattern ( (M1.__default.setIsSeq M1._default.setIsSeq$_T0@@0 |t#0@@0| |q#0@@0|))
))))
(assert (forall ((s@@1 T@U) ) (! (<= 0 (|Set#Card| s@@1))
 :pattern ( (|Set#Card| s@@1))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@1) ($IsAllocBox bx@@1 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@1))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0@@1) h@@1) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i@@0) t0@@1 h@@1))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0@@1) h@@1))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@8)) x@@8)
 :pattern ( ($Box T@@3 x@@8))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@2 t1 t2 (MapType0Store t0@@2 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@3 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 (MapType1Store t0@@3 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@2 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@2 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@2)) bx@@2) ($Is SetType ($Unbox SetType bx@@2) (TSet t@@5))))
 :pattern ( ($IsBox bx@@2 (TSet t@@5)))
)))
(assert (forall ((bx@@3 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@3 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@3)) bx@@3) ($Is SeqType ($Unbox SeqType bx@@3) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@3 (TSeq t@@6)))
)))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@10)) (Lit BoxType ($Box T@@4 x@@10)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@10)))
)))
(assert (forall ((s@@3 T@U) ) (!  (=> (= (|Seq#Length| s@@3) 0) (= s@@3 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@3))
)))
(assert (forall ((h@@2 T@U) (v@@4 T@U) ) (! ($IsAlloc boolType v@@4 TBool h@@2)
 :pattern ( ($IsAlloc boolType v@@4 TBool h@@2))
)))
(assert (forall ((v@@5 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@5 (TSeq t0@@4)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@5))) ($IsBox (|Seq#Index| v@@5 i@@1) t0@@4))
 :pattern ( (|Seq#Index| v@@5 i@@1))
)))
 :pattern ( ($Is SeqType v@@5 (TSeq t0@@4)))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is boolType v@@6 TBool)
 :pattern ( ($Is boolType v@@6 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |t#0@@1| () T@U)
(declare-fun |x#2@0| () T@U)
(declare-fun M1._default.setIsSeq$_T0@@1 () T@U)
(declare-fun $Heap () T@U)
(declare-fun |q#0@@1| () T@U)
(declare-fun |i#2@0| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 19) (let ((anon18_Else_correct true))
(let ((anon14_correct true))
(let ((anon23_Else_correct  (=> (and (not (|Set#IsMember| |t#0@@1| |x#2@0|)) (= (ControlFlow 0 8) 2)) anon14_correct)))
(let ((anon23_Then_correct  (=> (and (|Set#IsMember| |t#0@@1| |x#2@0|) (= (ControlFlow 0 7) 2)) anon14_correct)))
(let ((anon22_Then_correct  (=> (and ($IsBox |x#2@0| M1._default.setIsSeq$_T0@@1) ($IsAllocBox |x#2@0| M1._default.setIsSeq$_T0@@1 $Heap)) (and (=> (= (ControlFlow 0 9) 7) anon23_Then_correct) (=> (= (ControlFlow 0 9) 8) anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (and (not (and ($IsBox |x#2@0| M1._default.setIsSeq$_T0@@1) ($IsAllocBox |x#2@0| M1._default.setIsSeq$_T0@@1 $Heap))) (= (ControlFlow 0 6) 2)) anon14_correct)))
(let ((anon21_Then_correct  (=> (forall ((|i#3| Int) ) (!  (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |q#0@@1|))) (|Set#IsMember| |t#0@@1| (|Seq#Index| |q#0@@1| |i#3|)))
 :pattern ( (|Seq#Index| |q#0@@1| |i#3|))
)) (and (=> (= (ControlFlow 0 10) 9) anon22_Then_correct) (=> (= (ControlFlow 0 10) 6) anon22_Else_correct)))))
(let ((anon21_Else_correct  (=> (and (not (forall ((|i#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |q#0@@1|))) (|Set#IsMember| |t#0@@1| (|Seq#Index| |q#0@@1| |i#3@@0|)))
 :pattern ( (|Seq#Index| |q#0@@1| |i#3@@0|))
))) (= (ControlFlow 0 5) 2)) anon14_correct)))
(let ((anon20_Else_correct  (=> (not (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |q#0@@1|)))) (and (=> (= (ControlFlow 0 13) 10) anon21_Then_correct) (=> (= (ControlFlow 0 13) 5) anon21_Else_correct)))))
(let ((anon20_Then_correct  (=> (and (<= (LitInt 0) |i#2@0|) (< |i#2@0| (|Seq#Length| |q#0@@1|))) (and (=> (= (ControlFlow 0 11) (- 0 12)) (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |q#0@@1|)))) (=> (and (<= 0 |i#2@0|) (< |i#2@0| (|Seq#Length| |q#0@@1|))) (and (=> (= (ControlFlow 0 11) 10) anon21_Then_correct) (=> (= (ControlFlow 0 11) 5) anon21_Else_correct)))))))
(let ((anon19_Else_correct  (=> (< |i#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 15) 11) anon20_Then_correct) (=> (= (ControlFlow 0 15) 13) anon20_Else_correct)))))
(let ((anon19_Then_correct  (=> (<= (LitInt 0) |i#2@0|) (and (=> (= (ControlFlow 0 14) 11) anon20_Then_correct) (=> (= (ControlFlow 0 14) 13) anon20_Else_correct)))))
(let ((anon18_Then_correct  (and (=> (= (ControlFlow 0 16) 14) anon19_Then_correct) (=> (= (ControlFlow 0 16) 15) anon19_Else_correct))))
(let ((anon17_Then_correct  (=> (= (|Set#Card| |t#0@@1|) (|Seq#Length| |q#0@@1|)) (and (=> (= (ControlFlow 0 17) 16) anon18_Then_correct) (=> (= (ControlFlow 0 17) 4) anon18_Else_correct)))))
(let ((anon17_Else_correct  (=> (and (or (not (= (|Set#Card| |t#0@@1|) (|Seq#Length| |q#0@@1|))) (not true)) (= (ControlFlow 0 3) 2)) anon14_correct)))
(let ((anon16_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 18) 1) anon16_Then_correct) (=> (= (ControlFlow 0 18) 17) anon17_Then_correct)) (=> (= (ControlFlow 0 18) 3) anon17_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is SetType |t#0@@1| (TSet M1._default.setIsSeq$_T0@@1)) ($Is SeqType |q#0@@1| (TSeq M1._default.setIsSeq$_T0@@1))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 19) 18))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
