(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass.FunctionResultType.Option () T@U)
(declare-fun |##FunctionResultType.Option.None| () T@U)
(declare-fun |##FunctionResultType.Option.Some| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#FunctionResultType.Option.None| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.FunctionResultType.Option (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun FunctionResultType.__default.Search0 (T@U T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |FunctionResultType.__default.Search0#canCall| (T@U T@U T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |#FunctionResultType.Option.Some| (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun FunctionResultType.Option.None_q (T@U) Bool)
(declare-fun FunctionResultType.Option.Some_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Tclass._System.nat () T@U)
(declare-fun BoxType () T@T)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass.FunctionResultType.Option_0 (T@U) T@U)
(declare-fun FunctionResultType.Option.value (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSeq alloc Tagclass._System.nat Tagclass.FunctionResultType.Option |##FunctionResultType.Option.None| |##FunctionResultType.Option.Some| tytagFamily$nat tytagFamily$Option)
)
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#FunctionResultType.Option.None|) |##FunctionResultType.Option.None|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((FunctionResultType.Option$X T@U) ) (! ($Is DatatypeTypeType |#FunctionResultType.Option.None| (Tclass.FunctionResultType.Option FunctionResultType.Option$X))
 :pattern ( ($Is DatatypeTypeType |#FunctionResultType.Option.None| (Tclass.FunctionResultType.Option FunctionResultType.Option$X)))
)))
(assert (= (Ctor SeqType) 4))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((FunctionResultType._default.Search0$T T@U) (|s#0| T@U) (|x#0| T@U) ) (!  (=> (or (|FunctionResultType.__default.Search0#canCall| FunctionResultType._default.Search0$T (Lit SeqType |s#0|) |x#0|) (and (< 1 $FunctionContextHeight) (and ($Is SeqType |s#0| (TSeq FunctionResultType._default.Search0$T)) ($IsBox |x#0| FunctionResultType._default.Search0$T)))) (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T (Lit SeqType |s#0|) |x#0|) (ite (< (|Seq#Length| (Lit SeqType |s#0|)) 12) |#FunctionResultType.Option.None| (ite (= (|Seq#Index| (Lit SeqType |s#0|) (LitInt 9)) |x#0|) (|#FunctionResultType.Option.Some| ($Box intType (int_2_U (LitInt 9)))) (ite (= (|Seq#Index| (Lit SeqType |s#0|) (LitInt 2)) |x#0|) (|#FunctionResultType.Option.Some| ($Box intType (int_2_U (LitInt 2)))) |#FunctionResultType.Option.None|)))))
 :weight 3
 :pattern ( (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T (Lit SeqType |s#0|) |x#0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d T@U) ) (! (= (FunctionResultType.Option.None_q d) (= (DatatypeCtorId d) |##FunctionResultType.Option.None|))
 :pattern ( (FunctionResultType.Option.None_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (FunctionResultType.Option.Some_q d@@0) (= (DatatypeCtorId d@@0) |##FunctionResultType.Option.Some|))
 :pattern ( (FunctionResultType.Option.Some_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (FunctionResultType.Option.None_q d@@1) (= d@@1 |#FunctionResultType.Option.None|))
 :pattern ( (FunctionResultType.Option.None_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (FunctionResultType.Option.Some_q d@@2) (exists ((|a#5#0#0| T@U) ) (= d@@2 (|#FunctionResultType.Option.Some| |a#5#0#0|))))
 :pattern ( (FunctionResultType.Option.Some_q d@@2))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (= (Ctor BoxType) 5))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((FunctionResultType._default.Search0$T@@0 T@U) (|s#0@@0| T@U) (|x#0@@1| T@U) ) (!  (=> (or (|FunctionResultType.__default.Search0#canCall| FunctionResultType._default.Search0$T@@0 (Lit SeqType |s#0@@0|) (Lit BoxType |x#0@@1|)) (and (< 1 $FunctionContextHeight) (and ($Is SeqType |s#0@@0| (TSeq FunctionResultType._default.Search0$T@@0)) ($IsBox |x#0@@1| FunctionResultType._default.Search0$T@@0)))) (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@0 (Lit SeqType |s#0@@0|) (Lit BoxType |x#0@@1|)) (ite (< (|Seq#Length| (Lit SeqType |s#0@@0|)) 12) |#FunctionResultType.Option.None| (ite (= (|Seq#Index| (Lit SeqType |s#0@@0|) (LitInt 9)) (Lit BoxType |x#0@@1|)) (|#FunctionResultType.Option.Some| ($Box intType (int_2_U (LitInt 9)))) (ite (= (|Seq#Index| (Lit SeqType |s#0@@0|) (LitInt 2)) (Lit BoxType |x#0@@1|)) (|#FunctionResultType.Option.Some| ($Box intType (int_2_U (LitInt 2)))) |#FunctionResultType.Option.None|)))))
 :weight 3
 :pattern ( (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@0 (Lit SeqType |s#0@@0|) (Lit BoxType |x#0@@1|)))
))))
(assert (forall ((FunctionResultType.Option$X@@0 T@U) ) (!  (and (= (Tag (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@0)) Tagclass.FunctionResultType.Option) (= (TagFamily (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@0)) tytagFamily$Option))
 :pattern ( (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@0))
)))
(assert (forall ((bx T@U) ) (!  (=> ($IsBox bx Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx)) bx) ($Is intType ($Unbox intType bx) Tclass._System.nat)))
 :pattern ( ($IsBox bx Tclass._System.nat))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((FunctionResultType._default.Search0$T@@1 T@U) (|s#0@@1| T@U) (|x#0@@2| T@U) ) (!  (=> (or (|FunctionResultType.__default.Search0#canCall| FunctionResultType._default.Search0$T@@1 |s#0@@1| |x#0@@2|) (and (< 1 $FunctionContextHeight) (and ($Is SeqType |s#0@@1| (TSeq FunctionResultType._default.Search0$T@@1)) ($IsBox |x#0@@2| FunctionResultType._default.Search0$T@@1)))) (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@1 |s#0@@1| |x#0@@2|) (ite (< (|Seq#Length| |s#0@@1|) 12) |#FunctionResultType.Option.None| (ite (= (|Seq#Index| |s#0@@1| (LitInt 9)) |x#0@@2|) (|#FunctionResultType.Option.Some| ($Box intType (int_2_U (LitInt 9)))) (ite (= (|Seq#Index| |s#0@@1| (LitInt 2)) |x#0@@2|) (|#FunctionResultType.Option.Some| ($Box intType (int_2_U (LitInt 2)))) |#FunctionResultType.Option.None|)))))
 :pattern ( (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@1 |s#0@@1| |x#0@@2|))
))))
(assert (forall ((FunctionResultType.Option$X@@1 T@U) (d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@1)) (or (FunctionResultType.Option.None_q d@@3) (FunctionResultType.Option.Some_q d@@3)))
 :pattern ( (FunctionResultType.Option.Some_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@1)))
 :pattern ( (FunctionResultType.Option.None_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@1)))
)))
(assert (forall ((v T@U) (t T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v) t) ($Is T@@1 v t))
 :pattern ( ($IsBox ($Box T@@1 v) t))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((t@@0 T@U) ) (! (= (Inv0_TSeq (TSeq t@@0)) t@@0)
 :pattern ( (TSeq t@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Tag (TSeq t@@1)) TagSeq)
 :pattern ( (TSeq t@@1))
)))
(assert (forall ((FunctionResultType.Option$X@@2 T@U) ) (! (= (Tclass.FunctionResultType.Option_0 (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@2)) FunctionResultType.Option$X@@2)
 :pattern ( (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@2))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (DatatypeCtorId (|#FunctionResultType.Option.Some| |a#4#0#0|)) |##FunctionResultType.Option.Some|)
 :pattern ( (|#FunctionResultType.Option.Some| |a#4#0#0|))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (FunctionResultType.Option.value (|#FunctionResultType.Option.Some| |a#8#0#0|)) |a#8#0#0|)
 :pattern ( (|#FunctionResultType.Option.Some| |a#8#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall ((FunctionResultType.Option$X@@3 T@U) (|a#6#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#FunctionResultType.Option.Some| |a#6#0#0|) (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@3)) ($IsBox |a#6#0#0| FunctionResultType.Option$X@@3))
 :pattern ( ($Is DatatypeTypeType (|#FunctionResultType.Option.Some| |a#6#0#0|) (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@3)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((FunctionResultType._default.Search0$T@@2 T@U) (|s#0@@2| T@U) (|x#0@@3| T@U) ) (!  (=> (or (|FunctionResultType.__default.Search0#canCall| FunctionResultType._default.Search0$T@@2 |s#0@@2| |x#0@@3|) (and (< 1 $FunctionContextHeight) (and ($Is SeqType |s#0@@2| (TSeq FunctionResultType._default.Search0$T@@2)) ($IsBox |x#0@@3| FunctionResultType._default.Search0$T@@2)))) (and (=> (and (FunctionResultType.Option.Some_q (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@2 |s#0@@2| |x#0@@3|)) (< (U_2_int ($Unbox intType (FunctionResultType.Option.value (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@2 |s#0@@2| |x#0@@3|)))) (|Seq#Length| |s#0@@2|))) (= (|Seq#Index| |s#0@@2| (U_2_int ($Unbox intType (FunctionResultType.Option.value (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@2 |s#0@@2| |x#0@@3|))))) |x#0@@3|)) ($Is DatatypeTypeType (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@2 |s#0@@2| |x#0@@3|) (Tclass.FunctionResultType.Option Tclass._System.nat))))
 :pattern ( (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@2 |s#0@@2| |x#0@@3|))
))))
(assert (forall ((|a#9#0#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#FunctionResultType.Option.Some| |a#9#0#0|)))
 :pattern ( (|#FunctionResultType.Option.Some| |a#9#0#0|))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 6)) (= (Ctor FieldType) 7)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@4 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@4)) (DtRank d@@4))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@4)))
)))
(assert (forall ((bx@@0 T@U) (t@@2 T@U) ) (!  (=> ($IsBox bx@@0 (TSeq t@@2)) (and (= ($Box SeqType ($Unbox SeqType bx@@0)) bx@@0) ($Is SeqType ($Unbox SeqType bx@@0) (TSeq t@@2))))
 :pattern ( ($IsBox bx@@0 (TSeq t@@2)))
)))
(assert (forall ((FunctionResultType.Option$X@@4 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@4))))
 :pattern ( ($IsBox bx@@1 (Tclass.FunctionResultType.Option FunctionResultType.Option$X@@4)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= |#FunctionResultType.Option.None| (Lit DatatypeTypeType |#FunctionResultType.Option.None|)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= (|#FunctionResultType.Option.Some| (Lit BoxType |a#7#0#0|)) (Lit DatatypeTypeType (|#FunctionResultType.Option.Some| |a#7#0#0|)))
 :pattern ( (|#FunctionResultType.Option.Some| (Lit BoxType |a#7#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@0 T@U) (t0@@1 T@U) ) (! (= ($Is SeqType v@@0 (TSeq t0@@1)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@0))) ($IsBox (|Seq#Index| v@@0 i) t0@@1))
 :pattern ( (|Seq#Index| v@@0 i))
)))
 :pattern ( ($Is SeqType v@@0 (TSeq t0@@1)))
)))
(assert (forall ((s@@1 T@U) (i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| s@@1))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@0))) (|Seq#Rank| s@@1)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@0))))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |o#0| () T@U)
(declare-fun |s#0@@3| () T@U)
(declare-fun |x#0@@4| () T@U)
(declare-fun FunctionResultType._default.Search0$T@@3 () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let ((anon5_correct true))
(let ((anon15_Else_correct  (=> (and (=> (and (FunctionResultType.Option.Some_q |o#0|) (< (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|))) (|Seq#Length| |s#0@@3|))) (= (|Seq#Index| |s#0@@3| (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|)))) |x#0@@4|)) (= (ControlFlow 0 18) 13)) anon5_correct)))
(let ((anon15_Then_correct  (=> (FunctionResultType.Option.Some_q |o#0|) (and (=> (= (ControlFlow 0 14) (- 0 17)) (FunctionResultType.Option.Some_q |o#0|)) (=> (FunctionResultType.Option.Some_q |o#0|) (=> (< (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|))) (|Seq#Length| |s#0@@3|)) (and (=> (= (ControlFlow 0 14) (- 0 16)) (FunctionResultType.Option.Some_q |o#0|)) (=> (FunctionResultType.Option.Some_q |o#0|) (and (=> (= (ControlFlow 0 14) (- 0 15)) (and (<= 0 (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|)))) (< (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|))) (|Seq#Length| |s#0@@3|)))) (=> (and (<= 0 (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|)))) (< (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|))) (|Seq#Length| |s#0@@3|))) (=> (and (= (|Seq#Index| |s#0@@3| (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|)))) |x#0@@4|) (= (ControlFlow 0 14) 13)) anon5_correct)))))))))))
(let ((anon14_Then_correct  (=> (and ($Is DatatypeTypeType (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) (Tclass.FunctionResultType.Option Tclass._System.nat)) ($Is DatatypeTypeType |o#0| (Tclass.FunctionResultType.Option Tclass._System.nat))) (and (=> (= (ControlFlow 0 19) 14) anon15_Then_correct) (=> (= (ControlFlow 0 19) 18) anon15_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (=> (and (FunctionResultType.Option.Some_q |o#0|) (< (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|))) (|Seq#Length| |s#0@@3|))) (= (|Seq#Index| |s#0@@3| (U_2_int ($Unbox intType (FunctionResultType.Option.value |o#0|)))) |x#0@@4|)))))
(let ((anon18_Else_correct  (=> (or (not (= (|Seq#Index| |s#0@@3| (LitInt 2)) |x#0@@4|)) (not true)) (=> (and (and (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) (Lit DatatypeTypeType |#FunctionResultType.Option.None|)) ($Is DatatypeTypeType (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) (Tclass.FunctionResultType.Option Tclass._System.nat))) (and (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) |o#0|) (= (ControlFlow 0 8) 2))) GeneratedUnifiedExit_correct))))
(let ((anon18_Then_correct  (=> (= (|Seq#Index| |s#0@@3| (LitInt 2)) |x#0@@4|) (and (=> (= (ControlFlow 0 6) (- 0 7)) ($Is intType (int_2_U (LitInt 2)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 2)) Tclass._System.nat) (=> (and (and (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) (Lit DatatypeTypeType (|#FunctionResultType.Option.Some| ($Box intType (int_2_U (LitInt 2)))))) ($Is DatatypeTypeType (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) (Tclass.FunctionResultType.Option Tclass._System.nat))) (and (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) |o#0|) (= (ControlFlow 0 6) 2))) GeneratedUnifiedExit_correct))))))
(let ((anon17_Else_correct  (=> (or (not (= (|Seq#Index| |s#0@@3| (LitInt 9)) |x#0@@4|)) (not true)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (and (<= 0 (LitInt 2)) (< (LitInt 2) (|Seq#Length| |s#0@@3|)))) (=> (and (<= 0 (LitInt 2)) (< (LitInt 2) (|Seq#Length| |s#0@@3|))) (and (=> (= (ControlFlow 0 9) 6) anon18_Then_correct) (=> (= (ControlFlow 0 9) 8) anon18_Else_correct)))))))
(let ((anon17_Then_correct  (=> (= (|Seq#Index| |s#0@@3| (LitInt 9)) |x#0@@4|) (and (=> (= (ControlFlow 0 4) (- 0 5)) ($Is intType (int_2_U (LitInt 9)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 9)) Tclass._System.nat) (=> (and (and (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) (Lit DatatypeTypeType (|#FunctionResultType.Option.Some| ($Box intType (int_2_U (LitInt 9)))))) ($Is DatatypeTypeType (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) (Tclass.FunctionResultType.Option Tclass._System.nat))) (and (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) |o#0|) (= (ControlFlow 0 4) 2))) GeneratedUnifiedExit_correct))))))
(let ((anon16_Else_correct  (=> (<= 12 (|Seq#Length| |s#0@@3|)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (and (<= 0 (LitInt 9)) (< (LitInt 9) (|Seq#Length| |s#0@@3|)))) (=> (and (<= 0 (LitInt 9)) (< (LitInt 9) (|Seq#Length| |s#0@@3|))) (and (=> (= (ControlFlow 0 11) 4) anon17_Then_correct) (=> (= (ControlFlow 0 11) 9) anon17_Else_correct)))))))
(let ((anon16_Then_correct  (=> (< (|Seq#Length| |s#0@@3|) 12) (=> (and (and (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) (Lit DatatypeTypeType |#FunctionResultType.Option.None|)) ($Is DatatypeTypeType (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) (Tclass.FunctionResultType.Option Tclass._System.nat))) (and (= (FunctionResultType.__default.Search0 FunctionResultType._default.Search0$T@@3 |s#0@@3| |x#0@@4|) |o#0|) (= (ControlFlow 0 3) 2))) GeneratedUnifiedExit_correct))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 20) 19) anon14_Then_correct) (=> (= (ControlFlow 0 20) 3) anon16_Then_correct)) (=> (= (ControlFlow 0 20) 11) anon16_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is SeqType |s#0@@3| (TSeq FunctionResultType._default.Search0$T@@3)) ($IsBox |x#0@@4| FunctionResultType._default.Search0$T@@3)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 21) 20))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
