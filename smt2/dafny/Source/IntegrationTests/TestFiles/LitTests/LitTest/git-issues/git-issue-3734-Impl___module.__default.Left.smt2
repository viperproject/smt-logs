(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun LitInt (Int) Int)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@1))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :qid |DafnyPreludebpl.108:29|
 :skolemid |17|
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :qid |DafnyPreludebpl.102:29|
 :skolemid |15|
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :qid |DafnyPreludebpl.168:18|
 :skolemid |26|
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :qid |DafnyPreludebpl.167:18|
 :skolemid |25|
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :qid |mapAx0:MapType0Select|
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (! (= (Ctor (MapType1Type arg0@@2 arg1)) 6)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :qid |DafnyPreludebpl.156:1|
 :skolemid |549|
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :qid |DafnyPreludebpl.109:15|
 :skolemid |18|
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@7)) (Lit BoxType ($Box T@@2 x@@7)))
 :qid |DafnyPreludebpl.103:18|
 :skolemid |16|
 :pattern ( ($Box T@@2 (Lit T@@2 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun alloc () T@U)
(declare-fun |m#0@0| () Int)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |n#0@0| () (_ BitVec 1))
(declare-fun U_2_bv1 (T@U) (_ BitVec 1))
(declare-fun bv1Type () T@T)
(declare-fun bv1_2_U ((_ BitVec 1)) T@U)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |newtype$check#2@0| () Int)
(declare-fun |a#0@0| () (_ BitVec 7))
(declare-fun U_2_bv7 (T@U) (_ BitVec 7))
(declare-fun bv7Type () T@T)
(declare-fun bv7_2_U ((_ BitVec 7)) T@U)
(declare-fun |newtype$check#3@0| () Int)
(declare-fun |newtype$check#4@0| () Int)
(declare-fun |newtype$check#5@0| () Int)
(declare-fun |newtype$check#6@0| () Int)
(declare-fun |a#0@1| () (_ BitVec 7))
(declare-fun |newtype$check#7@0| () Int)
(declare-fun |newtype$check#8@0| () Int)
(declare-fun |b#0@0| () (_ BitVec 8))
(declare-fun U_2_bv8 (T@U) (_ BitVec 8))
(declare-fun bv8Type () T@T)
(declare-fun bv8_2_U ((_ BitVec 8)) T@U)
(declare-fun |newtype$check#9@0| () Int)
(declare-fun |newtype$check#10@0| () Int)
(declare-fun |newtype$check#11@0| () Int)
(declare-fun |newtype$check#12@0| () Int)
(declare-fun |b#0@1| () (_ BitVec 8))
(declare-fun |newtype$check#13@0| () Int)
(declare-fun |newtype$check#14@0| () Int)
(declare-fun |r#0@0| () (_ BitVec 15))
(declare-fun U_2_bv15 (T@U) (_ BitVec 15))
(declare-fun bv15Type () T@T)
(declare-fun bv15_2_U ((_ BitVec 15)) T@U)
(declare-fun |newtype$check#15@0| () Int)
(declare-fun |newtype$check#16@0| () Int)
(declare-fun |newtype$check#17@0| () Int)
(declare-fun |newtype$check#18@0| () Int)
(declare-fun |r#0@1| () (_ BitVec 15))
(declare-fun |newtype$check#19@0| () Int)
(declare-fun |newtype$check#20@0| () Int)
(declare-fun |s#0@0| () (_ BitVec 16))
(declare-fun U_2_bv16 (T@U) (_ BitVec 16))
(declare-fun bv16Type () T@T)
(declare-fun bv16_2_U ((_ BitVec 16)) T@U)
(declare-fun |newtype$check#21@0| () Int)
(declare-fun |newtype$check#22@0| () Int)
(declare-fun |newtype$check#23@0| () Int)
(declare-fun |newtype$check#24@0| () Int)
(declare-fun |s#0@1| () (_ BitVec 16))
(declare-fun |newtype$check#25@0| () Int)
(declare-fun |newtype$check#26@0| () Int)
(declare-fun |w#0@0| () (_ BitVec 31))
(declare-fun U_2_bv31 (T@U) (_ BitVec 31))
(declare-fun bv31Type () T@T)
(declare-fun bv31_2_U ((_ BitVec 31)) T@U)
(declare-fun |newtype$check#27@0| () Int)
(declare-fun |newtype$check#28@0| () Int)
(declare-fun |newtype$check#29@0| () Int)
(declare-fun |newtype$check#30@0| () Int)
(declare-fun |w#0@1| () (_ BitVec 31))
(declare-fun |newtype$check#31@0| () Int)
(declare-fun |newtype$check#32@0| () Int)
(declare-fun |x#0@0| () (_ BitVec 32))
(declare-fun U_2_bv32 (T@U) (_ BitVec 32))
(declare-fun bv32Type () T@T)
(declare-fun bv32_2_U ((_ BitVec 32)) T@U)
(declare-fun |newtype$check#33@0| () Int)
(declare-fun |newtype$check#34@0| () Int)
(declare-fun |newtype$check#35@0| () Int)
(declare-fun |newtype$check#36@0| () Int)
(declare-fun |x#0@1| () (_ BitVec 32))
(declare-fun |newtype$check#37@0| () Int)
(declare-fun |newtype$check#38@0| () Int)
(declare-fun |y#0@0| () (_ BitVec 63))
(declare-fun U_2_bv63 (T@U) (_ BitVec 63))
(declare-fun bv63Type () T@T)
(declare-fun bv63_2_U ((_ BitVec 63)) T@U)
(declare-fun |newtype$check#39@0| () Int)
(declare-fun |newtype$check#40@0| () Int)
(declare-fun |newtype$check#41@0| () Int)
(declare-fun |newtype$check#42@0| () Int)
(declare-fun |y#0@1| () (_ BitVec 63))
(declare-fun |newtype$check#43@0| () Int)
(declare-fun |newtype$check#44@0| () Int)
(declare-fun |z#0@0| () (_ BitVec 64))
(declare-fun U_2_bv64 (T@U) (_ BitVec 64))
(declare-fun bv64Type () T@T)
(declare-fun bv64_2_U ((_ BitVec 64)) T@U)
(declare-fun |newtype$check#45@0| () Int)
(declare-fun |newtype$check#46@0| () Int)
(declare-fun |newtype$check#47@0| () Int)
(declare-fun |newtype$check#48@0| () Int)
(declare-fun |z#0@1| () (_ BitVec 64))
(declare-fun |newtype$check#49@0| () Int)
(declare-fun |newtype$check#50@0| () Int)
(declare-fun |u#0@0| () (_ BitVec 100))
(declare-fun U_2_bv100 (T@U) (_ BitVec 100))
(declare-fun bv100Type () T@T)
(declare-fun bv100_2_U ((_ BitVec 100)) T@U)
(declare-fun |newtype$check#51@0| () Int)
(declare-fun |newtype$check#52@0| () Int)
(declare-fun |newtype$check#53@0| () Int)
(declare-fun |newtype$check#54@0| () Int)
(declare-fun |u#0@1| () (_ BitVec 100))
(declare-fun |newtype$check#55@0| () Int)
(declare-fun |newtype$check#56@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |m#0| () Int)
(declare-fun $FunctionContextHeight () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor bv1Type) 7) (forall ((arg0@@5 (_ BitVec 1)) ) (! (= (U_2_bv1 (bv1_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_bv1|
 :pattern ( (bv1_2_U arg0@@5))
))) (forall ((x@@8 T@U) ) (! (= (bv1_2_U (U_2_bv1 x@@8)) x@@8)
 :qid |cast:U_2_bv1|
 :pattern ( (U_2_bv1 x@@8))
))) (= (Ctor bv7Type) 8)) (forall ((arg0@@6 (_ BitVec 7)) ) (! (= (U_2_bv7 (bv7_2_U arg0@@6)) arg0@@6)
 :qid |typeInv:U_2_bv7|
 :pattern ( (bv7_2_U arg0@@6))
))) (forall ((x@@9 T@U) ) (! (= (bv7_2_U (U_2_bv7 x@@9)) x@@9)
 :qid |cast:U_2_bv7|
 :pattern ( (U_2_bv7 x@@9))
))) (= (Ctor bv8Type) 9)) (forall ((arg0@@7 (_ BitVec 8)) ) (! (= (U_2_bv8 (bv8_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_bv8|
 :pattern ( (bv8_2_U arg0@@7))
))) (forall ((x@@10 T@U) ) (! (= (bv8_2_U (U_2_bv8 x@@10)) x@@10)
 :qid |cast:U_2_bv8|
 :pattern ( (U_2_bv8 x@@10))
))) (= (Ctor bv15Type) 10)) (forall ((arg0@@8 (_ BitVec 15)) ) (! (= (U_2_bv15 (bv15_2_U arg0@@8)) arg0@@8)
 :qid |typeInv:U_2_bv15|
 :pattern ( (bv15_2_U arg0@@8))
))) (forall ((x@@11 T@U) ) (! (= (bv15_2_U (U_2_bv15 x@@11)) x@@11)
 :qid |cast:U_2_bv15|
 :pattern ( (U_2_bv15 x@@11))
))) (= (Ctor bv16Type) 11)) (forall ((arg0@@9 (_ BitVec 16)) ) (! (= (U_2_bv16 (bv16_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_bv16|
 :pattern ( (bv16_2_U arg0@@9))
))) (forall ((x@@12 T@U) ) (! (= (bv16_2_U (U_2_bv16 x@@12)) x@@12)
 :qid |cast:U_2_bv16|
 :pattern ( (U_2_bv16 x@@12))
))) (= (Ctor bv31Type) 12)) (forall ((arg0@@10 (_ BitVec 31)) ) (! (= (U_2_bv31 (bv31_2_U arg0@@10)) arg0@@10)
 :qid |typeInv:U_2_bv31|
 :pattern ( (bv31_2_U arg0@@10))
))) (forall ((x@@13 T@U) ) (! (= (bv31_2_U (U_2_bv31 x@@13)) x@@13)
 :qid |cast:U_2_bv31|
 :pattern ( (U_2_bv31 x@@13))
))) (= (Ctor bv32Type) 13)) (forall ((arg0@@11 (_ BitVec 32)) ) (! (= (U_2_bv32 (bv32_2_U arg0@@11)) arg0@@11)
 :qid |typeInv:U_2_bv32|
 :pattern ( (bv32_2_U arg0@@11))
))) (forall ((x@@14 T@U) ) (! (= (bv32_2_U (U_2_bv32 x@@14)) x@@14)
 :qid |cast:U_2_bv32|
 :pattern ( (U_2_bv32 x@@14))
))) (= (Ctor bv63Type) 14)) (forall ((arg0@@12 (_ BitVec 63)) ) (! (= (U_2_bv63 (bv63_2_U arg0@@12)) arg0@@12)
 :qid |typeInv:U_2_bv63|
 :pattern ( (bv63_2_U arg0@@12))
))) (forall ((x@@15 T@U) ) (! (= (bv63_2_U (U_2_bv63 x@@15)) x@@15)
 :qid |cast:U_2_bv63|
 :pattern ( (U_2_bv63 x@@15))
))) (= (Ctor bv64Type) 15)) (forall ((arg0@@13 (_ BitVec 64)) ) (! (= (U_2_bv64 (bv64_2_U arg0@@13)) arg0@@13)
 :qid |typeInv:U_2_bv64|
 :pattern ( (bv64_2_U arg0@@13))
))) (forall ((x@@16 T@U) ) (! (= (bv64_2_U (U_2_bv64 x@@16)) x@@16)
 :qid |cast:U_2_bv64|
 :pattern ( (U_2_bv64 x@@16))
))) (= (Ctor bv100Type) 16)) (forall ((arg0@@14 (_ BitVec 100)) ) (! (= (U_2_bv100 (bv100_2_U arg0@@14)) arg0@@14)
 :qid |typeInv:U_2_bv100|
 :pattern ( (bv100_2_U arg0@@14))
))) (forall ((x@@17 T@U) ) (! (= (bv100_2_U (U_2_bv100 x@@17)) x@@17)
 :qid |cast:U_2_bv100|
 :pattern ( (U_2_bv100 x@@17))
))))
(set-info :boogie-vc-id Impl$$_module.__default.Left)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 116) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (= |m#0@0| (LitInt 0)) (= |newtype$check#0@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 115)) (and (<= 0 |newtype$check#0@0|) (< |newtype$check#0@0| 1))) (=> (and (<= 0 |newtype$check#0@0|) (< |newtype$check#0@0| 1)) (and (=> (= (ControlFlow 0 2) (- 0 114)) true) (=> (and (= |n#0@0| (U_2_bv1 (Lit bv1Type (bv1_2_U #b1)))) (= |newtype$check#1@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 113)) (and (<= 0 |newtype$check#1@0|) (< |newtype$check#1@0| 2))) (=> (and (<= 0 |newtype$check#1@0|) (< |newtype$check#1@0| 2)) (and (=> (= (ControlFlow 0 2) (- 0 112)) (bvule #b0 #b1)) (=> (= |newtype$check#2@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 111)) (and (<= 0 |newtype$check#2@0|) (< |newtype$check#2@0| 2))) (=> (and (<= 0 |newtype$check#2@0|) (< |newtype$check#2@0| 2)) (and (=> (= (ControlFlow 0 2) (- 0 110)) (bvule #b1 #b1)) (=> (and (= |a#0@0| (U_2_bv7 (Lit bv7Type (bv7_2_U #b0001100)))) (= |newtype$check#3@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 109)) (and (<= 0 |newtype$check#3@0|) (< |newtype$check#3@0| 8))) (=> (and (<= 0 |newtype$check#3@0|) (< |newtype$check#3@0| 8)) (and (=> (= (ControlFlow 0 2) (- 0 108)) (bvule #b000 #b111)) (=> (= |newtype$check#4@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 107)) (and (<= 0 |newtype$check#4@0|) (< |newtype$check#4@0| 8))) (=> (and (<= 0 |newtype$check#4@0|) (< |newtype$check#4@0| 8)) (and (=> (= (ControlFlow 0 2) (- 0 106)) (bvule #b001 #b111)) (=> (= |newtype$check#5@0| (LitInt 6)) (and (=> (= (ControlFlow 0 2) (- 0 105)) (and (<= 0 |newtype$check#5@0|) (< |newtype$check#5@0| 8))) (=> (and (<= 0 |newtype$check#5@0|) (< |newtype$check#5@0| 8)) (and (=> (= (ControlFlow 0 2) (- 0 104)) (bvule #b110 #b111)) (=> (= |newtype$check#6@0| (LitInt 7)) (and (=> (= (ControlFlow 0 2) (- 0 103)) (and (<= 0 |newtype$check#6@0|) (< |newtype$check#6@0| 8))) (=> (and (<= 0 |newtype$check#6@0|) (< |newtype$check#6@0| 8)) (and (=> (= (ControlFlow 0 2) (- 0 102)) (bvule #b111 #b111)) (=> (and (= |a#0@1| (U_2_bv7 (Lit bv7Type (bv7_2_U (bvsub #b0000000 #b0000001))))) (= |newtype$check#7@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 101)) (and (<= 0 |newtype$check#7@0|) (< |newtype$check#7@0| 8))) (=> (and (<= 0 |newtype$check#7@0|) (< |newtype$check#7@0| 8)) (and (=> (= (ControlFlow 0 2) (- 0 100)) (bvule #b000 #b111)) (=> (= |newtype$check#8@0| (LitInt 6)) (and (=> (= (ControlFlow 0 2) (- 0 99)) (and (<= 0 |newtype$check#8@0|) (< |newtype$check#8@0| 8))) (=> (and (<= 0 |newtype$check#8@0|) (< |newtype$check#8@0| 8)) (and (=> (= (ControlFlow 0 2) (- 0 98)) (bvule #b110 #b111)) (=> (and (= |b#0@0| (U_2_bv8 (Lit bv8Type (bv8_2_U #x0c)))) (= |newtype$check#9@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 97)) (and (<= 0 |newtype$check#9@0|) (< |newtype$check#9@0| 16))) (=> (and (<= 0 |newtype$check#9@0|) (< |newtype$check#9@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 96)) (bvule #b0000 #b1000)) (=> (= |newtype$check#10@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 95)) (and (<= 0 |newtype$check#10@0|) (< |newtype$check#10@0| 16))) (=> (and (<= 0 |newtype$check#10@0|) (< |newtype$check#10@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 94)) (bvule #b0001 #b1000)) (=> (= |newtype$check#11@0| (LitInt 7)) (and (=> (= (ControlFlow 0 2) (- 0 93)) (and (<= 0 |newtype$check#11@0|) (< |newtype$check#11@0| 16))) (=> (and (<= 0 |newtype$check#11@0|) (< |newtype$check#11@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 92)) (bvule #b0111 #b1000)) (=> (= |newtype$check#12@0| (LitInt 8)) (and (=> (= (ControlFlow 0 2) (- 0 91)) (and (<= 0 |newtype$check#12@0|) (< |newtype$check#12@0| 16))) (=> (and (<= 0 |newtype$check#12@0|) (< |newtype$check#12@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 90)) (bvule #b1000 #b1000)) (=> (and (= |b#0@1| (U_2_bv8 (Lit bv8Type (bv8_2_U (bvsub #x00 #x01))))) (= |newtype$check#13@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 89)) (and (<= 0 |newtype$check#13@0|) (< |newtype$check#13@0| 16))) (=> (and (<= 0 |newtype$check#13@0|) (< |newtype$check#13@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 88)) (bvule #b0000 #b1000)) (=> (= |newtype$check#14@0| (LitInt 7)) (and (=> (= (ControlFlow 0 2) (- 0 87)) (and (<= 0 |newtype$check#14@0|) (< |newtype$check#14@0| 16))) (=> (and (<= 0 |newtype$check#14@0|) (< |newtype$check#14@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 86)) (bvule #b0111 #b1000)) (=> (and (= |r#0@0| (U_2_bv15 (Lit bv15Type (bv15_2_U #b000000000001100)))) (= |newtype$check#15@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 85)) (and (<= 0 |newtype$check#15@0|) (< |newtype$check#15@0| 16))) (=> (and (<= 0 |newtype$check#15@0|) (< |newtype$check#15@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 84)) (bvule #b0000 #b1111)) (=> (= |newtype$check#16@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 83)) (and (<= 0 |newtype$check#16@0|) (< |newtype$check#16@0| 16))) (=> (and (<= 0 |newtype$check#16@0|) (< |newtype$check#16@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 82)) (bvule #b0001 #b1111)) (=> (= |newtype$check#17@0| (LitInt 14)) (and (=> (= (ControlFlow 0 2) (- 0 81)) (and (<= 0 |newtype$check#17@0|) (< |newtype$check#17@0| 16))) (=> (and (<= 0 |newtype$check#17@0|) (< |newtype$check#17@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 80)) (bvule #b1110 #b1111)) (=> (= |newtype$check#18@0| (LitInt 15)) (and (=> (= (ControlFlow 0 2) (- 0 79)) (and (<= 0 |newtype$check#18@0|) (< |newtype$check#18@0| 16))) (=> (and (<= 0 |newtype$check#18@0|) (< |newtype$check#18@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 78)) (bvule #b1111 #b1111)) (=> (and (= |r#0@1| (U_2_bv15 (Lit bv15Type (bv15_2_U (bvsub #b000000000000000 #b000000000000001))))) (= |newtype$check#19@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 77)) (and (<= 0 |newtype$check#19@0|) (< |newtype$check#19@0| 16))) (=> (and (<= 0 |newtype$check#19@0|) (< |newtype$check#19@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 76)) (bvule #b0000 #b1111)) (=> (= |newtype$check#20@0| (LitInt 14)) (and (=> (= (ControlFlow 0 2) (- 0 75)) (and (<= 0 |newtype$check#20@0|) (< |newtype$check#20@0| 16))) (=> (and (<= 0 |newtype$check#20@0|) (< |newtype$check#20@0| 16)) (and (=> (= (ControlFlow 0 2) (- 0 74)) (bvule #b1110 #b1111)) (=> (and (= |s#0@0| (U_2_bv16 (Lit bv16Type (bv16_2_U #x000c)))) (= |newtype$check#21@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 73)) (and (<= 0 |newtype$check#21@0|) (< |newtype$check#21@0| 32))) (=> (and (<= 0 |newtype$check#21@0|) (< |newtype$check#21@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 72)) (bvule #b00000 #b10000)) (=> (= |newtype$check#22@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 71)) (and (<= 0 |newtype$check#22@0|) (< |newtype$check#22@0| 32))) (=> (and (<= 0 |newtype$check#22@0|) (< |newtype$check#22@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 70)) (bvule #b00001 #b10000)) (=> (= |newtype$check#23@0| (LitInt 15)) (and (=> (= (ControlFlow 0 2) (- 0 69)) (and (<= 0 |newtype$check#23@0|) (< |newtype$check#23@0| 32))) (=> (and (<= 0 |newtype$check#23@0|) (< |newtype$check#23@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 68)) (bvule #b01111 #b10000)) (=> (= |newtype$check#24@0| (LitInt 16)) (and (=> (= (ControlFlow 0 2) (- 0 67)) (and (<= 0 |newtype$check#24@0|) (< |newtype$check#24@0| 32))) (=> (and (<= 0 |newtype$check#24@0|) (< |newtype$check#24@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 66)) (bvule #b10000 #b10000)) (=> (and (= |s#0@1| (U_2_bv16 (Lit bv16Type (bv16_2_U (bvsub #x0000 #x0001))))) (= |newtype$check#25@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 65)) (and (<= 0 |newtype$check#25@0|) (< |newtype$check#25@0| 32))) (=> (and (<= 0 |newtype$check#25@0|) (< |newtype$check#25@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 64)) (bvule #b00000 #b10000)) (=> (= |newtype$check#26@0| (LitInt 15)) (and (=> (= (ControlFlow 0 2) (- 0 63)) (and (<= 0 |newtype$check#26@0|) (< |newtype$check#26@0| 32))) (=> (and (<= 0 |newtype$check#26@0|) (< |newtype$check#26@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 62)) (bvule #b01111 #b10000)) (=> (and (= |w#0@0| (U_2_bv31 (Lit bv31Type (bv31_2_U #b0000000000000000000000000001100)))) (= |newtype$check#27@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 61)) (and (<= 0 |newtype$check#27@0|) (< |newtype$check#27@0| 32))) (=> (and (<= 0 |newtype$check#27@0|) (< |newtype$check#27@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 60)) (bvule #b00000 #b11111)) (=> (= |newtype$check#28@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 59)) (and (<= 0 |newtype$check#28@0|) (< |newtype$check#28@0| 32))) (=> (and (<= 0 |newtype$check#28@0|) (< |newtype$check#28@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 58)) (bvule #b00001 #b11111)) (=> (= |newtype$check#29@0| (LitInt 30)) (and (=> (= (ControlFlow 0 2) (- 0 57)) (and (<= 0 |newtype$check#29@0|) (< |newtype$check#29@0| 32))) (=> (and (<= 0 |newtype$check#29@0|) (< |newtype$check#29@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 56)) (bvule #b11110 #b11111)) (=> (= |newtype$check#30@0| (LitInt 31)) (and (=> (= (ControlFlow 0 2) (- 0 55)) (and (<= 0 |newtype$check#30@0|) (< |newtype$check#30@0| 32))) (=> (and (<= 0 |newtype$check#30@0|) (< |newtype$check#30@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 54)) (bvule #b11111 #b11111)) (=> (and (= |w#0@1| (U_2_bv31 (Lit bv31Type (bv31_2_U (bvsub #b0000000000000000000000000000000 #b0000000000000000000000000000001))))) (= |newtype$check#31@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 53)) (and (<= 0 |newtype$check#31@0|) (< |newtype$check#31@0| 32))) (=> (and (<= 0 |newtype$check#31@0|) (< |newtype$check#31@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 52)) (bvule #b00000 #b11111)) (=> (= |newtype$check#32@0| (LitInt 30)) (and (=> (= (ControlFlow 0 2) (- 0 51)) (and (<= 0 |newtype$check#32@0|) (< |newtype$check#32@0| 32))) (=> (and (<= 0 |newtype$check#32@0|) (< |newtype$check#32@0| 32)) (and (=> (= (ControlFlow 0 2) (- 0 50)) (bvule #b11110 #b11111)) (=> (and (= |x#0@0| (U_2_bv32 (Lit bv32Type (bv32_2_U #x0000000c)))) (= |newtype$check#33@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 49)) (and (<= 0 |newtype$check#33@0|) (< |newtype$check#33@0| 64))) (=> (and (<= 0 |newtype$check#33@0|) (< |newtype$check#33@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 48)) (bvule #b000000 #b100000)) (=> (= |newtype$check#34@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 47)) (and (<= 0 |newtype$check#34@0|) (< |newtype$check#34@0| 64))) (=> (and (<= 0 |newtype$check#34@0|) (< |newtype$check#34@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 46)) (bvule #b000001 #b100000)) (=> (= |newtype$check#35@0| (LitInt 31)) (and (=> (= (ControlFlow 0 2) (- 0 45)) (and (<= 0 |newtype$check#35@0|) (< |newtype$check#35@0| 64))) (=> (and (<= 0 |newtype$check#35@0|) (< |newtype$check#35@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 44)) (bvule #b011111 #b100000)) (=> (= |newtype$check#36@0| (LitInt 32)) (and (=> (= (ControlFlow 0 2) (- 0 43)) (and (<= 0 |newtype$check#36@0|) (< |newtype$check#36@0| 64))) (=> (and (<= 0 |newtype$check#36@0|) (< |newtype$check#36@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 42)) (bvule #b100000 #b100000)) (=> (and (= |x#0@1| (U_2_bv32 (Lit bv32Type (bv32_2_U (bvsub #x00000000 #x00000001))))) (= |newtype$check#37@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 41)) (and (<= 0 |newtype$check#37@0|) (< |newtype$check#37@0| 64))) (=> (and (<= 0 |newtype$check#37@0|) (< |newtype$check#37@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 40)) (bvule #b000000 #b100000)) (=> (= |newtype$check#38@0| (LitInt 31)) (and (=> (= (ControlFlow 0 2) (- 0 39)) (and (<= 0 |newtype$check#38@0|) (< |newtype$check#38@0| 64))) (=> (and (<= 0 |newtype$check#38@0|) (< |newtype$check#38@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 38)) (bvule #b011111 #b100000)) (=> (and (= |y#0@0| (U_2_bv63 (Lit bv63Type (bv63_2_U #b000000000000000000000000000000000000000000000000000000000001100)))) (= |newtype$check#39@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 37)) (and (<= 0 |newtype$check#39@0|) (< |newtype$check#39@0| 64))) (=> (and (<= 0 |newtype$check#39@0|) (< |newtype$check#39@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 36)) (bvule #b000000 #b111111)) (=> (= |newtype$check#40@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 35)) (and (<= 0 |newtype$check#40@0|) (< |newtype$check#40@0| 64))) (=> (and (<= 0 |newtype$check#40@0|) (< |newtype$check#40@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 34)) (bvule #b000001 #b111111)) (=> (= |newtype$check#41@0| (LitInt 62)) (and (=> (= (ControlFlow 0 2) (- 0 33)) (and (<= 0 |newtype$check#41@0|) (< |newtype$check#41@0| 64))) (=> (and (<= 0 |newtype$check#41@0|) (< |newtype$check#41@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 32)) (bvule #b111110 #b111111)) (=> (= |newtype$check#42@0| (LitInt 62)) (and (=> (= (ControlFlow 0 2) (- 0 31)) (and (<= 0 |newtype$check#42@0|) (< |newtype$check#42@0| 64))) (=> (and (<= 0 |newtype$check#42@0|) (< |newtype$check#42@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 30)) (bvule #b111110 #b111111)) (=> (and (= |y#0@1| (U_2_bv63 (Lit bv63Type (bv63_2_U (bvsub #b000000000000000000000000000000000000000000000000000000000000000 #b000000000000000000000000000000000000000000000000000000000000001))))) (= |newtype$check#43@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 29)) (and (<= 0 |newtype$check#43@0|) (< |newtype$check#43@0| 64))) (=> (and (<= 0 |newtype$check#43@0|) (< |newtype$check#43@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 28)) (bvule #b000000 #b111111)) (=> (= |newtype$check#44@0| (LitInt 62)) (and (=> (= (ControlFlow 0 2) (- 0 27)) (and (<= 0 |newtype$check#44@0|) (< |newtype$check#44@0| 64))) (=> (and (<= 0 |newtype$check#44@0|) (< |newtype$check#44@0| 64)) (and (=> (= (ControlFlow 0 2) (- 0 26)) (bvule #b111110 #b111111)) (=> (and (= |z#0@0| (U_2_bv64 (Lit bv64Type (bv64_2_U #x000000000000000c)))) (= |newtype$check#45@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 25)) (and (<= 0 |newtype$check#45@0|) (< |newtype$check#45@0| 128))) (=> (and (<= 0 |newtype$check#45@0|) (< |newtype$check#45@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 24)) (bvule #b0000000 #b1000000)) (=> (= |newtype$check#46@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 23)) (and (<= 0 |newtype$check#46@0|) (< |newtype$check#46@0| 128))) (=> (and (<= 0 |newtype$check#46@0|) (< |newtype$check#46@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 22)) (bvule #b0000001 #b1000000)) (=> (= |newtype$check#47@0| (LitInt 63)) (and (=> (= (ControlFlow 0 2) (- 0 21)) (and (<= 0 |newtype$check#47@0|) (< |newtype$check#47@0| 128))) (=> (and (<= 0 |newtype$check#47@0|) (< |newtype$check#47@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 20)) (bvule #b0111111 #b1000000)) (=> (= |newtype$check#48@0| (LitInt 64)) (and (=> (= (ControlFlow 0 2) (- 0 19)) (and (<= 0 |newtype$check#48@0|) (< |newtype$check#48@0| 128))) (=> (and (<= 0 |newtype$check#48@0|) (< |newtype$check#48@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 18)) (bvule #b1000000 #b1000000)) (=> (and (= |z#0@1| (U_2_bv64 (Lit bv64Type (bv64_2_U (bvsub #x0000000000000000 #x0000000000000001))))) (= |newtype$check#49@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 17)) (and (<= 0 |newtype$check#49@0|) (< |newtype$check#49@0| 128))) (=> (and (<= 0 |newtype$check#49@0|) (< |newtype$check#49@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 16)) (bvule #b0000000 #b1000000)) (=> (= |newtype$check#50@0| (LitInt 63)) (and (=> (= (ControlFlow 0 2) (- 0 15)) (and (<= 0 |newtype$check#50@0|) (< |newtype$check#50@0| 128))) (=> (and (<= 0 |newtype$check#50@0|) (< |newtype$check#50@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 14)) (bvule #b0111111 #b1000000)) (=> (and (= |u#0@0| (U_2_bv100 (Lit bv100Type (bv100_2_U #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100)))) (= |newtype$check#51@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 13)) (and (<= 0 |newtype$check#51@0|) (< |newtype$check#51@0| 128))) (=> (and (<= 0 |newtype$check#51@0|) (< |newtype$check#51@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 12)) (bvule #b0000000 #b1100100)) (=> (= |newtype$check#52@0| (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 11)) (and (<= 0 |newtype$check#52@0|) (< |newtype$check#52@0| 128))) (=> (and (<= 0 |newtype$check#52@0|) (< |newtype$check#52@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (bvule #b0000001 #b1100100)) (=> (= |newtype$check#53@0| (LitInt 99)) (and (=> (= (ControlFlow 0 2) (- 0 9)) (and (<= 0 |newtype$check#53@0|) (< |newtype$check#53@0| 128))) (=> (and (<= 0 |newtype$check#53@0|) (< |newtype$check#53@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 8)) (bvule #b1100011 #b1100100)) (=> (= |newtype$check#54@0| (LitInt 100)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (and (<= 0 |newtype$check#54@0|) (< |newtype$check#54@0| 128))) (=> (and (<= 0 |newtype$check#54@0|) (< |newtype$check#54@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (bvule #b1100100 #b1100100)) (=> (and (= |u#0@1| (U_2_bv100 (Lit bv100Type (bv100_2_U (bvsub #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001))))) (= |newtype$check#55@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (and (<= 0 |newtype$check#55@0|) (< |newtype$check#55@0| 128))) (=> (and (<= 0 |newtype$check#55@0|) (< |newtype$check#55@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (bvule #b0000000 #b1100100)) (=> (= |newtype$check#56@0| (LitInt 99)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 |newtype$check#56@0|) (< |newtype$check#56@0| 128))) (=> (and (<= 0 |newtype$check#56@0|) (< |newtype$check#56@0| 128)) (=> (= (ControlFlow 0 2) (- 0 1)) (bvule #b1100011 #b1100100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (= 0 |m#0|) true) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 116) 2))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
