(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () Int)
(declare-fun $generated@@0 () Bool)
(declare-fun $generated@@1 () Bool)
(declare-fun $generated@@2 () Int)
(declare-fun $generated@@3 (Int) Int)
(declare-fun $generated@@4 () Int)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@T T@T) T@T)
(declare-fun $generated@@38 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert  (=> (<= 1 $generated) (=> (or $generated@@0 (< 1 $generated)) (and $generated@@1 (= $generated@@2 ($generated@@3 $generated@@4))))))
(assert  (=> (<= 1 $generated) (=> (or $generated@@0 (< 1 $generated)) (and $generated@@1 (= $generated@@2 ($generated@@3 $generated@@4))))))
(assert  (=> (<= 0 $generated) (=> (or $generated@@1 (< 0 $generated)) (= $generated@@4 ($generated@@3 5)))))
(assert  (=> (<= 0 $generated) (=> (or $generated@@1 (< 0 $generated)) (= $generated@@4 ($generated@@3 5)))))
(assert (forall (($generated@@21 Int) ) (! (= ($generated@@3 $generated@@21) $generated@@21)
 :pattern ( ($generated@@3 $generated@@21))
)))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@T) ) (! (= ($generated@@22 $generated@@24 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@24 $generated@@23))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 ($generated@@25 $generated@@28 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@25 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@25 $generated@@30 ($generated@@26 $generated@@30 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@26 $generated@@30 $generated@@29))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@31 $generated@@42 $generated@@43 $generated@@44 ($generated@@38 $generated@@42 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@48 $generated@@45) $generated@@47 $generated@@48) $generated@@45)
 :weight 0
)) (and (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@54 $generated@@56) (= ($generated@@31 $generated@@49 $generated@@50 $generated@@51 ($generated@@38 $generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@55 $generated@@52) $generated@@56 $generated@@57) ($generated@@31 $generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@56 $generated@@57)))
 :weight 0
)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (or (= $generated@@64 $generated@@66) (= ($generated@@31 $generated@@58 $generated@@59 $generated@@60 ($generated@@38 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@65 $generated@@66) ($generated@@31 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@65 $generated@@66)))
 :weight 0
)))) (= ($generated@@5 $generated@@32) 3)) (= ($generated@@5 $generated@@33) 4)) (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@35 $generated@@67 $generated@@68 ($generated@@39 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@69) $generated@@71) $generated@@69)
 :weight 0
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@76 $generated@@77) (= ($generated@@35 $generated@@72 $generated@@73 ($generated@@39 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@74) $generated@@77) ($generated@@35 $generated@@72 $generated@@73 $generated@@75 $generated@@77)))
 :weight 0
))) (= ($generated@@5 $generated@@36) 5)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ) (= ($generated@@5 ($generated@@37 $generated@@78 $generated@@79)) 6))) (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@80 $generated@@81)) $generated@@80)
 :pattern ( ($generated@@37 $generated@@80 $generated@@81))
))) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@41 ($generated@@37 $generated@@82 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@37 $generated@@82 $generated@@83))
))))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 Bool) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@10 ($generated@@31 $generated@@32 $generated@@33 $generated@@6 ($generated@@34 $generated@@84 $generated@@85 $generated@@86 $generated@@87) $generated@@88 $generated@@89))  (=> (and (or (not (= $generated@@88 $generated@@84)) (not true)) ($generated@@10 ($generated@@25 $generated@@6 ($generated@@35 $generated@@33 $generated@@36 ($generated@@35 $generated@@32 ($generated@@37 $generated@@33 $generated@@36) $generated@@85 $generated@@88) $generated@@86)))) $generated@@87))
 :pattern ( ($generated@@31 $generated@@32 $generated@@33 $generated@@6 ($generated@@34 $generated@@84 $generated@@85 $generated@@86 $generated@@87) $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@90 Int) ) (! (= ($generated@@26 $generated@@7 ($generated@@11 ($generated@@3 $generated@@90))) ($generated@@22 $generated@@36 ($generated@@26 $generated@@7 ($generated@@11 $generated@@90))))
 :pattern ( ($generated@@26 $generated@@7 ($generated@@11 ($generated@@3 $generated@@90))))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@T) ) (! (= ($generated@@26 $generated@@92 ($generated@@22 $generated@@92 $generated@@91)) ($generated@@22 $generated@@36 ($generated@@26 $generated@@92 $generated@@91)))
 :pattern ( ($generated@@26 $generated@@92 ($generated@@22 $generated@@92 $generated@@91)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@93 () T@U)
(declare-fun $generated@@94 () T@U)
(declare-fun $generated@@95 () T@U)
(declare-fun $generated@@96 () T@U)
(declare-fun $generated@@97 () Int)
(declare-fun $generated@@98 (T@U) Bool)
(declare-fun $generated@@99 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@100  (=> (and (and (= $generated@@93 ($generated@@34 $generated@@94 $generated@@95 $generated@@96 false)) (= $generated@@97 ($generated@@3 5))) (and $generated@@0 (= (ControlFlow 0 2) (- 0 1)))) (= $generated@@97 ($generated@@3 $generated@@2)))))
(let (($generated@@101  (=> (and (and ($generated@@98 $generated@@95) ($generated@@99 $generated@@95)) (and (= 2 $generated) (= (ControlFlow 0 3) 2))) $generated@@100)))
$generated@@101)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
