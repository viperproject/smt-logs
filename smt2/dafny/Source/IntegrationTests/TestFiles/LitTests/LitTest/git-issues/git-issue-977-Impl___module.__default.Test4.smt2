(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U Int) T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@26 (Int) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@38 (T@T T@U T@U) Bool)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@45 (T@U Int T@U) Bool)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@51 (T@U) Bool)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@58 (Int T@U) Bool)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@71 (T@U Int T@U) Bool)
(declare-fun $generated@@82 (Int T@U) Bool)
(declare-fun $generated@@83 (Int T@U) Bool)
(declare-fun $generated@@84 () T@U)
(declare-fun $generated@@97 (Int T@U) Bool)
(declare-fun $generated@@103 (T@U) Int)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 () T@T)
(declare-fun $generated@@107 () T@T)
(declare-fun $generated@@108 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@109 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@110 () T@T)
(declare-fun $generated@@111 (T@T T@T) T@T)
(declare-fun $generated@@112 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@113 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@114 (T@T) T@T)
(declare-fun $generated@@115 (T@T) T@T)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@167 (T@U) T@U)
(declare-fun $generated@@168 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@30) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (or ($generated@@26 ($generated@@25 $generated@@32)) (and (< 1 $generated@@22) (<= ($generated@@25 0) $generated@@32))) (and (=> (or (not (= ($generated@@25 $generated@@32) ($generated@@25 0))) (not true)) ($generated@@26 ($generated@@25 (- $generated@@32 1)))) (= ($generated@@23 ($generated@@24 $generated@@31) ($generated@@25 $generated@@32)) (ite (= ($generated@@25 $generated@@32) ($generated@@25 0)) $generated@@27 ($generated@@28 ($generated@@29 $generated@@30 ($generated@@23 ($generated@@24 $generated@@31) ($generated@@25 (- $generated@@32 1)))))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@24 $generated@@31) ($generated@@25 $generated@@32)))
))))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (! ($generated@@33 $generated@@8 $generated@@35 $generated@@34 $generated@@36)
 :pattern ( ($generated@@33 $generated@@8 $generated@@35 $generated@@34 $generated@@36))
)))
(assert (= ($generated@@37 $generated@@27) $generated@@3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@40 T@U) ($generated@@41 Int) ) (!  (=> (or ($generated@@26 $generated@@41) (and (< 1 $generated@@22) (<= ($generated@@25 0) $generated@@41))) ($generated@@38 $generated@@30 ($generated@@23 $generated@@40 $generated@@41) $generated@@39))
 :pattern ( ($generated@@23 $generated@@40 $generated@@41))
))))
(assert ($generated@@38 $generated@@30 $generated@@27 $generated@@39))
(assert (forall (($generated@@42 Int) ) (! (= ($generated@@25 $generated@@42) $generated@@42)
 :pattern ( ($generated@@25 $generated@@42))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@29 $generated@@44 $generated@@43) $generated@@43)
 :pattern ( ($generated@@29 $generated@@44 $generated@@43))
)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 Int) ) (!  (=> (and ($generated@@38 $generated@@30 $generated@@47 $generated@@39) (= $generated@@48 0)) ($generated@@45 $generated@@46 $generated@@48 $generated@@47))
 :pattern ( ($generated@@45 $generated@@46 $generated@@48 $generated@@47))
))))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@49 $generated@@50) (= ($generated@@37 $generated@@50) $generated@@2))
 :pattern ( ($generated@@49 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ) (! (= ($generated@@51 $generated@@52) (= ($generated@@37 $generated@@52) $generated@@3))
 :pattern ( ($generated@@51 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 ($generated@@53 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@53 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (!  (=> ($generated@@51 $generated@@57) (= $generated@@57 $generated@@27))
 :pattern ( ($generated@@51 $generated@@57))
)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@60 T@U) ($generated@@61 Int) ($generated@@62 T@U) ) (!  (=> (or ($generated@@58 ($generated@@25 $generated@@61) $generated@@62) (and (< 2 $generated@@22) (and (<= ($generated@@25 0) $generated@@61) ($generated@@38 $generated@@30 $generated@@62 $generated@@39)))) (and (=> (< 0 $generated@@61) (=> ($generated@@49 $generated@@62) (let (($generated@@63 ($generated@@59 $generated@@62)))
($generated@@58 (- $generated@@61 1) $generated@@63)))) (= ($generated@@45 ($generated@@24 $generated@@60) ($generated@@25 $generated@@61) $generated@@62)  (=> (< 0 $generated@@61) (ite ($generated@@49 $generated@@62) (let (($generated@@64 ($generated@@59 $generated@@62)))
($generated@@45 ($generated@@24 $generated@@60) (- $generated@@61 1) $generated@@64)) true)))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@24 $generated@@60) ($generated@@25 $generated@@61) $generated@@62))
))))
(assert (forall (($generated@@65 T@U) ) (!  (=> ($generated@@49 $generated@@65) (exists (($generated@@66 T@U) ) (= $generated@@65 ($generated@@28 $generated@@66))))
 :pattern ( ($generated@@49 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@38 $generated@@8 $generated@@67 $generated@@34) (<= ($generated@@25 0) ($generated@@13 $generated@@67)))
 :pattern ( ($generated@@38 $generated@@8 $generated@@67 $generated@@34))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 Int) ($generated@@70 T@U) ) (! (= ($generated@@45 ($generated@@24 $generated@@68) $generated@@69 $generated@@70) ($generated@@45 $generated@@68 $generated@@69 $generated@@70))
 :pattern ( ($generated@@45 ($generated@@24 $generated@@68) $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 Int) ($generated@@74 T@U) ) (! (= ($generated@@71 ($generated@@24 $generated@@72) $generated@@73 $generated@@74) ($generated@@71 $generated@@72 $generated@@73 $generated@@74))
 :pattern ( ($generated@@71 ($generated@@24 $generated@@72) $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@38 $generated@@30 ($generated@@28 $generated@@75) $generated@@39) ($generated@@38 $generated@@30 $generated@@75 $generated@@39))
 :pattern ( ($generated@@38 $generated@@30 ($generated@@28 $generated@@75) $generated@@39))
)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@76 T@U) ($generated@@77 Int) ($generated@@78 T@U) ) (!  (=> (or ($generated@@58 $generated@@77 $generated@@78) (and (< 2 $generated@@22) (and (<= ($generated@@25 0) $generated@@77) ($generated@@38 $generated@@30 $generated@@78 $generated@@39)))) (and (=> (< 0 $generated@@77) (=> ($generated@@49 $generated@@78) (let (($generated@@79 ($generated@@59 $generated@@78)))
($generated@@58 (- $generated@@77 1) $generated@@79)))) (= ($generated@@45 ($generated@@24 $generated@@76) $generated@@77 $generated@@78)  (=> (< 0 $generated@@77) (ite ($generated@@49 $generated@@78) (let (($generated@@80 ($generated@@59 $generated@@78)))
($generated@@45 $generated@@76 (- $generated@@77 1) $generated@@80)) true)))))
 :pattern ( ($generated@@45 ($generated@@24 $generated@@76) $generated@@77 $generated@@78))
))))
(assert (forall (($generated@@81 T@U) ) (!  (=> ($generated@@38 $generated@@30 $generated@@81 $generated@@39) (or ($generated@@49 $generated@@81) ($generated@@51 $generated@@81)))
 :pattern ( ($generated@@51 $generated@@81) ($generated@@38 $generated@@30 $generated@@81 $generated@@39))
 :pattern ( ($generated@@49 $generated@@81) ($generated@@38 $generated@@30 $generated@@81 $generated@@39))
)))
(assert  (=> (<= 3 $generated@@22) (forall (($generated@@85 Int) ($generated@@86 T@U) ) (!  (=> (or ($generated@@83 ($generated@@25 $generated@@85) ($generated@@29 $generated@@30 $generated@@86)) (and (< 3 $generated@@22) (and (<= ($generated@@25 0) $generated@@85) ($generated@@38 $generated@@30 $generated@@86 $generated@@39)))) (and ($generated@@58 ($generated@@25 $generated@@85) ($generated@@29 $generated@@30 $generated@@86)) (= ($generated@@82 ($generated@@25 $generated@@85) ($generated@@29 $generated@@30 $generated@@86)) ($generated@@11 ($generated@@29 $generated@@7 ($generated@@10 ($generated@@45 ($generated@@24 $generated@@84) ($generated@@25 $generated@@85) ($generated@@29 $generated@@30 $generated@@86))))))))
 :weight 3
 :pattern ( ($generated@@82 ($generated@@25 $generated@@85) ($generated@@29 $generated@@30 $generated@@86)))
))))
(assert  (=> (<= 3 $generated@@22) (forall (($generated@@87 Int) ($generated@@88 T@U) ) (!  (=> (or ($generated@@83 $generated@@87 $generated@@88) (and (< 3 $generated@@22) (and (<= ($generated@@25 0) $generated@@87) ($generated@@38 $generated@@30 $generated@@88 $generated@@39)))) (and ($generated@@58 $generated@@87 $generated@@88) (= ($generated@@82 $generated@@87 $generated@@88) ($generated@@45 ($generated@@24 $generated@@84) $generated@@87 $generated@@88))))
 :pattern ( ($generated@@82 $generated@@87 $generated@@88))
))))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@89 T@U) ($generated@@90 Int) ) (!  (=> (or ($generated@@26 $generated@@90) (and (< 1 $generated@@22) (<= ($generated@@25 0) $generated@@90))) (and (=> (or (not (= $generated@@90 ($generated@@25 0))) (not true)) ($generated@@26 (- $generated@@90 1))) (= ($generated@@23 ($generated@@24 $generated@@89) $generated@@90) (ite (= $generated@@90 ($generated@@25 0)) $generated@@27 ($generated@@28 ($generated@@23 $generated@@89 (- $generated@@90 1)))))))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@89) $generated@@90))
))))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@37 ($generated@@28 $generated@@91)) $generated@@2)
 :pattern ( ($generated@@28 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ) (! (= ($generated@@59 ($generated@@28 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@28 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@T) ) (! (= ($generated@@53 $generated@@94 ($generated@@54 $generated@@94 $generated@@93)) $generated@@93)
 :pattern ( ($generated@@54 $generated@@94 $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 Int) ) (! (= ($generated@@23 ($generated@@24 $generated@@95) $generated@@96) ($generated@@23 $generated@@95 $generated@@96))
 :pattern ( ($generated@@23 ($generated@@24 $generated@@95) $generated@@96))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@98 T@U) ($generated@@99 Int) ($generated@@100 T@U) ) (!  (=> (or ($generated@@97 $generated@@99 $generated@@100) (and (< 1 $generated@@22) (and (<= ($generated@@25 0) $generated@@99) ($generated@@38 $generated@@30 $generated@@100 $generated@@39)))) (and (=> (or (not (= $generated@@99 ($generated@@25 0))) (not true)) (=> ($generated@@49 $generated@@100) (let (($generated@@101 ($generated@@59 $generated@@100)))
($generated@@97 (- $generated@@99 1) $generated@@101)))) (= ($generated@@71 ($generated@@24 $generated@@98) $generated@@99 $generated@@100) (ite (= $generated@@99 ($generated@@25 0)) true (ite ($generated@@49 $generated@@100) (let (($generated@@102 ($generated@@59 $generated@@100)))
($generated@@71 $generated@@98 (- $generated@@99 1) $generated@@102)) true)))))
 :pattern ( ($generated@@71 ($generated@@24 $generated@@98) $generated@@99 $generated@@100))
))))
(assert (forall (($generated@@104 T@U) ) (! (< ($generated@@103 $generated@@104) ($generated@@103 ($generated@@28 $generated@@104)))
 :pattern ( ($generated@@28 $generated@@104))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@105 $generated@@116 $generated@@117 $generated@@118 ($generated@@112 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@121 $generated@@122) $generated@@119)
 :weight 0
)) (and (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@128 $generated@@130) (= ($generated@@105 $generated@@123 $generated@@124 $generated@@125 ($generated@@112 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@129 $generated@@126) $generated@@130 $generated@@131) ($generated@@105 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@130 $generated@@131)))
 :weight 0
)) (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@138 $generated@@140) (= ($generated@@105 $generated@@132 $generated@@133 $generated@@134 ($generated@@112 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@138 $generated@@135) $generated@@139 $generated@@140) ($generated@@105 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@139 $generated@@140)))
 :weight 0
)))) (= ($generated@@6 $generated@@106) 4)) (= ($generated@@6 $generated@@107) 5)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@109 $generated@@141 $generated@@142 ($generated@@113 $generated@@141 $generated@@142 $generated@@144 $generated@@145 $generated@@143) $generated@@145) $generated@@143)
 :weight 0
))) (forall (($generated@@146 T@T) ($generated@@147 T@T) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ) (!  (or (= $generated@@150 $generated@@151) (= ($generated@@109 $generated@@146 $generated@@147 ($generated@@113 $generated@@146 $generated@@147 $generated@@149 $generated@@150 $generated@@148) $generated@@151) ($generated@@109 $generated@@146 $generated@@147 $generated@@149 $generated@@151)))
 :weight 0
))) (= ($generated@@6 $generated@@110) 6)) (forall (($generated@@152 T@T) ($generated@@153 T@T) ) (= ($generated@@6 ($generated@@111 $generated@@152 $generated@@153)) 7))) (forall (($generated@@154 T@T) ($generated@@155 T@T) ) (! (= ($generated@@114 ($generated@@111 $generated@@154 $generated@@155)) $generated@@154)
 :pattern ( ($generated@@111 $generated@@154 $generated@@155))
))) (forall (($generated@@156 T@T) ($generated@@157 T@T) ) (! (= ($generated@@115 ($generated@@111 $generated@@156 $generated@@157)) $generated@@157)
 :pattern ( ($generated@@111 $generated@@156 $generated@@157))
))))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 Bool) ($generated@@162 T@U) ($generated@@163 T@U) ) (! (= ($generated@@11 ($generated@@105 $generated@@106 $generated@@107 $generated@@7 ($generated@@108 $generated@@158 $generated@@159 $generated@@160 $generated@@161) $generated@@162 $generated@@163))  (=> (and (or (not (= $generated@@162 $generated@@158)) (not true)) ($generated@@11 ($generated@@53 $generated@@7 ($generated@@109 $generated@@107 $generated@@110 ($generated@@109 $generated@@106 ($generated@@111 $generated@@107 $generated@@110) $generated@@159 $generated@@162) $generated@@160)))) $generated@@161))
 :pattern ( ($generated@@105 $generated@@106 $generated@@107 $generated@@7 ($generated@@108 $generated@@158 $generated@@159 $generated@@160 $generated@@161) $generated@@162 $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (!  (=> (and ($generated@@164 $generated@@166) ($generated@@38 $generated@@30 $generated@@165 $generated@@39)) ($generated@@33 $generated@@30 $generated@@165 $generated@@39 $generated@@166))
 :pattern ( ($generated@@33 $generated@@30 $generated@@165 $generated@@39 $generated@@166))
)))
(assert (= ($generated@@167 $generated@@34) $generated@@0))
(assert (= ($generated@@168 $generated@@34) $generated@@4))
(assert (= ($generated@@167 $generated@@39) $generated@@1))
(assert (= ($generated@@168 $generated@@39) $generated@@5))
(assert (= $generated@@27 ($generated@@29 $generated@@30 $generated@@27)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@169 T@U) ($generated@@170 Int) ($generated@@171 T@U) ) (!  (=> (or ($generated@@58 ($generated@@25 $generated@@170) ($generated@@29 $generated@@30 $generated@@171)) (and (< 2 $generated@@22) (and (<= ($generated@@25 0) $generated@@170) ($generated@@38 $generated@@30 $generated@@171 $generated@@39)))) (and (=> (< 0 $generated@@170) (=> ($generated@@11 ($generated@@29 $generated@@7 ($generated@@10 ($generated@@49 ($generated@@29 $generated@@30 $generated@@171))))) (let (($generated@@172 ($generated@@29 $generated@@30 ($generated@@59 ($generated@@29 $generated@@30 $generated@@171)))))
($generated@@58 (- $generated@@170 1) $generated@@172)))) (= ($generated@@45 ($generated@@24 $generated@@169) ($generated@@25 $generated@@170) ($generated@@29 $generated@@30 $generated@@171))  (=> (< 0 $generated@@170) (ite ($generated@@49 ($generated@@29 $generated@@30 $generated@@171)) (let (($generated@@173 ($generated@@29 $generated@@30 ($generated@@59 ($generated@@29 $generated@@30 $generated@@171)))))
($generated@@45 ($generated@@24 $generated@@169) (- $generated@@170 1) $generated@@173)) true)))))
 :weight 3
 :pattern ( ($generated@@45 ($generated@@24 $generated@@169) ($generated@@25 $generated@@170) ($generated@@29 $generated@@30 $generated@@171)))
))))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@U) ) (!  (=> (and ($generated@@164 $generated@@175) (and ($generated@@49 $generated@@174) ($generated@@33 $generated@@30 $generated@@174 $generated@@39 $generated@@175))) ($generated@@33 $generated@@30 ($generated@@59 $generated@@174) $generated@@39 $generated@@175))
 :pattern ( ($generated@@33 $generated@@30 ($generated@@59 $generated@@174) $generated@@39 $generated@@175))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@176 T@U) ($generated@@177 Int) ($generated@@178 T@U) ) (!  (=> (or ($generated@@97 ($generated@@25 $generated@@177) ($generated@@29 $generated@@30 $generated@@178)) (and (< 1 $generated@@22) (and (<= ($generated@@25 0) $generated@@177) ($generated@@38 $generated@@30 $generated@@178 $generated@@39)))) (and (=> (or (not (= ($generated@@25 $generated@@177) ($generated@@25 0))) (not true)) (=> ($generated@@11 ($generated@@29 $generated@@7 ($generated@@10 ($generated@@49 ($generated@@29 $generated@@30 $generated@@178))))) (let (($generated@@179 ($generated@@29 $generated@@30 ($generated@@59 ($generated@@29 $generated@@30 $generated@@178)))))
($generated@@97 ($generated@@25 (- $generated@@177 1)) $generated@@179)))) (= ($generated@@71 ($generated@@24 $generated@@176) ($generated@@25 $generated@@177) ($generated@@29 $generated@@30 $generated@@178)) (ite (= ($generated@@25 $generated@@177) ($generated@@25 0)) true (ite ($generated@@49 ($generated@@29 $generated@@30 $generated@@178)) ($generated@@11 (let (($generated@@180 ($generated@@29 $generated@@30 ($generated@@59 ($generated@@29 $generated@@30 $generated@@178)))))
($generated@@29 $generated@@7 ($generated@@10 ($generated@@71 ($generated@@24 $generated@@176) ($generated@@25 (- $generated@@177 1)) $generated@@180))))) true)))))
 :weight 3
 :pattern ( ($generated@@71 ($generated@@24 $generated@@176) ($generated@@25 $generated@@177) ($generated@@29 $generated@@30 $generated@@178)))
))))
(assert (forall (($generated@@181 Int) ) (! (= ($generated@@54 $generated@@8 ($generated@@12 ($generated@@25 $generated@@181))) ($generated@@29 $generated@@110 ($generated@@54 $generated@@8 ($generated@@12 $generated@@181))))
 :pattern ( ($generated@@54 $generated@@8 ($generated@@12 ($generated@@25 $generated@@181))))
)))
(assert (forall (($generated@@182 T@U) ) (! (= ($generated@@28 ($generated@@29 $generated@@30 $generated@@182)) ($generated@@29 $generated@@30 ($generated@@28 $generated@@182)))
 :pattern ( ($generated@@28 ($generated@@29 $generated@@30 $generated@@182)))
)))
(assert (forall (($generated@@183 T@U) ($generated@@184 T@T) ) (! (= ($generated@@54 $generated@@184 ($generated@@29 $generated@@184 $generated@@183)) ($generated@@29 $generated@@110 ($generated@@54 $generated@@184 $generated@@183)))
 :pattern ( ($generated@@54 $generated@@184 ($generated@@29 $generated@@184 $generated@@183)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@185 () Int)
(declare-fun $generated@@186 () Int)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 () T@U)
(declare-fun $generated@@189 () Int)
(declare-fun $generated@@190 () Int)
(declare-fun $generated@@191 () T@U)
(declare-fun $generated@@192 () T@U)
(declare-fun $generated@@193 (T@U) Bool)
(declare-fun $generated@@194 () T@U)
(declare-fun $generated@@195 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@196  (=> (and (and (and (= $generated@@185 (ite (< $generated@@186 0) 0 $generated@@186)) ($generated@@33 $generated@@8 ($generated@@12 $generated@@185) $generated@@34 $generated@@187)) (and ($generated@@26 (ite (< $generated@@186 0) 0 $generated@@186)) (= $generated@@188 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186))))) (and (and ($generated@@33 $generated@@30 $generated@@188 $generated@@39 $generated@@187) ($generated@@58 $generated@@189 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186)))) (and ($generated@@26 (ite (< $generated@@186 0) 0 $generated@@186)) ($generated@@58 $generated@@189 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@58 $generated@@189 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186))) (or ($generated@@45 ($generated@@24 $generated@@84) $generated@@189 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186))) (=> (< 0 $generated@@189) (=> ($generated@@49 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186))) (let (($generated@@197 ($generated@@59 ($generated@@23 ($generated@@24 ($generated@@24 $generated@@84)) (ite (< $generated@@186 0) 0 $generated@@186)))))
($generated@@45 ($generated@@24 ($generated@@24 $generated@@84)) (- $generated@@189 1) $generated@@197))))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> ($generated@@58 $generated@@189 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186))) (or ($generated@@45 ($generated@@24 $generated@@84) $generated@@189 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186))) (=> (< 0 $generated@@189) (=> (not ($generated@@49 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186)))) ($generated@@11 ($generated@@29 $generated@@7 ($generated@@10 true))))))))))))
(let (($generated@@198  (=> (<= 0 $generated@@186) (and (=> (= (ControlFlow 0 6) (- 0 7)) ($generated@@38 $generated@@8 ($generated@@12 $generated@@186) $generated@@34)) (=> ($generated@@38 $generated@@8 ($generated@@12 $generated@@186) $generated@@34) (=> (= (ControlFlow 0 6) 2) $generated@@196))))))
(let (($generated@@199  (=> (< $generated@@186 0) (and (=> (= (ControlFlow 0 4) (- 0 5)) ($generated@@38 $generated@@8 ($generated@@12 ($generated@@25 0)) $generated@@34)) (=> ($generated@@38 $generated@@8 ($generated@@12 ($generated@@25 0)) $generated@@34) (=> (= (ControlFlow 0 4) 2) $generated@@196))))))
(let (($generated@@200  (=> (= $generated@@190 (ite (< $generated@@186 0) 0 $generated@@186)) (=> (and (and ($generated@@33 $generated@@8 ($generated@@12 $generated@@190) $generated@@34 $generated@@191) ($generated@@26 (ite (< $generated@@186 0) 0 $generated@@186))) (and ($generated@@26 (ite (< $generated@@186 0) 0 $generated@@186)) (= $generated@@192 ($generated@@23 ($generated@@24 $generated@@84) (ite (< $generated@@186 0) 0 $generated@@186))))) (=> (and (and (and (and ($generated@@164 $generated@@187) ($generated@@193 $generated@@187)) ($generated@@58 $generated@@189 $generated@@192)) (and (and ($generated@@58 $generated@@189 $generated@@192) (and ($generated@@45 ($generated@@24 $generated@@84) $generated@@189 $generated@@192) (=> (< 0 $generated@@189) (ite ($generated@@49 $generated@@192) (let (($generated@@201 ($generated@@59 $generated@@192)))
($generated@@45 ($generated@@24 $generated@@84) (- $generated@@189 1) $generated@@201)) true)))) ($generated@@97 $generated@@189 $generated@@192))) (and (and (and ($generated@@97 $generated@@189 $generated@@192) (and ($generated@@71 ($generated@@24 $generated@@84) $generated@@189 $generated@@192) (ite (= $generated@@189 ($generated@@25 0)) true (ite ($generated@@49 $generated@@192) (let (($generated@@202 ($generated@@59 $generated@@192)))
($generated@@71 ($generated@@24 $generated@@84) (- $generated@@189 1) $generated@@202)) true)))) ($generated@@83 $generated@@189 $generated@@192)) (and (and ($generated@@83 $generated@@189 $generated@@192) (and ($generated@@82 $generated@@189 $generated@@192) ($generated@@45 ($generated@@24 $generated@@84) $generated@@189 $generated@@192))) (and (= $generated@@191 $generated@@187) ($generated@@33 $generated@@8 ($generated@@12 $generated@@189) $generated@@34 $generated@@187))))) (and (=> (= (ControlFlow 0 8) 4) $generated@@199) (=> (= (ControlFlow 0 8) 6) $generated@@198)))))))
(let (($generated@@203  (=> (<= 0 $generated@@186) (and (=> (= (ControlFlow 0 11) (- 0 12)) ($generated@@38 $generated@@8 ($generated@@12 $generated@@186) $generated@@34)) (=> ($generated@@38 $generated@@8 ($generated@@12 $generated@@186) $generated@@34) (=> (= (ControlFlow 0 11) 8) $generated@@200))))))
(let (($generated@@204  (=> (< $generated@@186 0) (and (=> (= (ControlFlow 0 9) (- 0 10)) ($generated@@38 $generated@@8 ($generated@@12 ($generated@@25 0)) $generated@@34)) (=> ($generated@@38 $generated@@8 ($generated@@12 ($generated@@25 0)) $generated@@34) (=> (= (ControlFlow 0 9) 8) $generated@@200))))))
(let (($generated@@205  (=> (= $generated@@194 ($generated@@108 $generated@@195 $generated@@191 $generated false)) (and (=> (= (ControlFlow 0 13) 9) $generated@@204) (=> (= (ControlFlow 0 13) 11) $generated@@203)))))
(let (($generated@@206  (=> (and (and (and ($generated@@164 $generated@@191) ($generated@@193 $generated@@191)) (<= ($generated@@25 0) $generated@@189)) (and (= 5 $generated@@22) (= (ControlFlow 0 14) 13))) $generated@@205)))
$generated@@206)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
