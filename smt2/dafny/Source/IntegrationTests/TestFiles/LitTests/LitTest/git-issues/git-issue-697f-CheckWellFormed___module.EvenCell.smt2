(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (Int) T@U)
(declare-fun $generated@@41 () Int)
(declare-fun $generated@@42 (Int) Bool)
(declare-fun $generated@@43 (Int) Bool)
(declare-fun $generated@@44 (Int Int) Int)
(declare-fun $generated@@48 (T@U) Int)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@T T@T) T@T)
(declare-fun $generated@@60 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@114 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@115 (T@U) Bool)
(declare-fun $generated@@120 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@24) 3))
(assert (forall (($generated@@26 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@26 $generated@@25) ($generated@@22 $generated@@26))
 :pattern ( ($generated@@22 $generated@@26) ($generated@@23 $generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@27 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@33 T@U) ) (! (= ($generated@@22 $generated@@33) (= ($generated@@32 $generated@@33) $generated@@2))
 :pattern ( ($generated@@22 $generated@@33))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 ($generated@@34 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@34 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@39 T@U) ) (!  (=> ($generated@@22 $generated@@39) (exists (($generated@@40 Int) ) (= $generated@@39 ($generated@@38 $generated@@40))))
 :pattern ( ($generated@@22 $generated@@39))
)))
(assert  (=> (<= 0 $generated@@41) (forall (($generated@@45 Int) ) (!  (=> (or ($generated@@43 $generated@@45) (< 0 $generated@@41)) (= ($generated@@42 $generated@@45) (= ($generated@@44 $generated@@45 ($generated@@27 2)) ($generated@@27 0))))
 :pattern ( ($generated@@42 $generated@@45))
))))
(assert  (=> (<= 0 $generated@@41) (forall (($generated@@46 Int) ) (!  (=> (or ($generated@@43 ($generated@@27 $generated@@46)) (< 0 $generated@@41)) (= ($generated@@42 ($generated@@27 $generated@@46)) (= ($generated@@27 ($generated@@44 $generated@@46 ($generated@@27 2))) ($generated@@27 0))))
 :weight 3
 :pattern ( ($generated@@42 ($generated@@27 $generated@@46)))
))))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@32 ($generated@@38 $generated@@47)) $generated@@2)
 :pattern ( ($generated@@38 $generated@@47))
)))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@48 ($generated@@38 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@38 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@34 $generated@@51 ($generated@@35 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@35 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@52 Int) ) (! (= ($generated@@23 $generated@@24 ($generated@@38 $generated@@52) $generated@@25) ($generated@@23 $generated@@7 ($generated@@11 $generated@@52) $generated))
 :pattern ( ($generated@@23 $generated@@24 ($generated@@38 $generated@@52) $generated@@25))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@53 $generated@@64 $generated@@65 $generated@@66 ($generated@@60 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@69 $generated@@70) $generated@@67)
 :weight 0
)) (and (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (or (= $generated@@76 $generated@@78) (= ($generated@@53 $generated@@71 $generated@@72 $generated@@73 ($generated@@60 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@78 $generated@@79) ($generated@@53 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@78 $generated@@79)))
 :weight 0
)) (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@86 $generated@@88) (= ($generated@@53 $generated@@80 $generated@@81 $generated@@82 ($generated@@60 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@53 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)))) (= ($generated@@5 $generated@@54) 4)) (= ($generated@@5 $generated@@55) 5)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@57 $generated@@89 $generated@@90 ($generated@@61 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@91) $generated@@93) $generated@@91)
 :weight 0
))) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@98 $generated@@99) (= ($generated@@57 $generated@@94 $generated@@95 ($generated@@61 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@96) $generated@@99) ($generated@@57 $generated@@94 $generated@@95 $generated@@97 $generated@@99)))
 :weight 0
))) (= ($generated@@5 $generated@@58) 6)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (= ($generated@@5 ($generated@@59 $generated@@100 $generated@@101)) 7))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@62 ($generated@@59 $generated@@102 $generated@@103)) $generated@@102)
 :pattern ( ($generated@@59 $generated@@102 $generated@@103))
))) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (! (= ($generated@@63 ($generated@@59 $generated@@104 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@59 $generated@@104 $generated@@105))
))))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 Bool) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@10 ($generated@@53 $generated@@54 $generated@@55 $generated@@6 ($generated@@56 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))  (=> (and (or (not (= $generated@@110 $generated@@106)) (not true)) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@57 $generated@@55 $generated@@58 ($generated@@57 $generated@@54 ($generated@@59 $generated@@55 $generated@@58) $generated@@107 $generated@@110) $generated@@108)))) $generated@@109))
 :pattern ( ($generated@@53 $generated@@54 $generated@@55 $generated@@6 ($generated@@56 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))
)))
(assert (forall (($generated@@112 Int) ($generated@@113 Int) ) (! (= ($generated@@44 $generated@@112 $generated@@113) (mod $generated@@112 $generated@@113))
 :pattern ( ($generated@@44 $generated@@112 $generated@@113))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ) (!  (=> (and ($generated@@115 $generated@@117) (and ($generated@@22 $generated@@116) ($generated@@114 $generated@@24 $generated@@116 $generated@@25 $generated@@117))) ($generated@@114 $generated@@7 ($generated@@11 ($generated@@48 $generated@@116)) $generated $generated@@117))
 :pattern ( ($generated@@114 $generated@@7 ($generated@@11 ($generated@@48 $generated@@116)) $generated $generated@@117))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ) (!  (=> (and ($generated@@115 $generated@@119) ($generated@@23 $generated@@24 $generated@@118 $generated@@25)) ($generated@@114 $generated@@24 $generated@@118 $generated@@25 $generated@@119))
 :pattern ( ($generated@@114 $generated@@24 $generated@@118 $generated@@25 $generated@@119))
)))
(assert (= ($generated@@21 $generated@@25) $generated@@3))
(assert (= ($generated@@120 $generated@@25) $generated@@4))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@35 $generated@@7 ($generated@@11 ($generated@@27 $generated@@121))) ($generated@@29 $generated@@58 ($generated@@35 $generated@@7 ($generated@@11 $generated@@121))))
 :pattern ( ($generated@@35 $generated@@7 ($generated@@11 ($generated@@27 $generated@@121))))
)))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@38 ($generated@@27 $generated@@122)) ($generated@@29 $generated@@24 ($generated@@38 $generated@@122)))
 :pattern ( ($generated@@38 ($generated@@27 $generated@@122)))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@35 $generated@@124 ($generated@@29 $generated@@124 $generated@@123)) ($generated@@29 $generated@@58 ($generated@@35 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@35 $generated@@124 ($generated@@29 $generated@@124 $generated@@123)))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! ($generated@@114 $generated@@7 $generated@@126 $generated $generated@@125)
 :pattern ( ($generated@@114 $generated@@7 $generated@@126 $generated $generated@@125))
)))
(assert (forall (($generated@@127 T@U) ) (! ($generated@@23 $generated@@7 $generated@@127 $generated)
 :pattern ( ($generated@@23 $generated@@7 $generated@@127 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@132  (=> (and (and (and ($generated@@22 ($generated@@29 $generated@@24 ($generated@@38 ($generated@@27 0)))) ($generated@@43 ($generated@@27 ($generated@@48 ($generated@@29 $generated@@24 ($generated@@38 ($generated@@27 0))))))) (= (ControlFlow 0 3) (- 0 2))) ($generated@@43 ($generated@@27 ($generated@@48 ($generated@@29 $generated@@24 ($generated@@38 ($generated@@27 0))))))) (or ($generated@@10 ($generated@@29 $generated@@6 ($generated@@9 ($generated@@42 ($generated@@27 ($generated@@48 ($generated@@29 $generated@@24 ($generated@@38 ($generated@@27 0))))))))) (= ($generated@@27 ($generated@@44 ($generated@@48 ($generated@@29 $generated@@24 ($generated@@38 ($generated@@27 0)))) ($generated@@27 2))) ($generated@@27 0))))))
(let (($generated@@133 true))
(let (($generated@@134  (=> (= $generated@@128 ($generated@@56 $generated@@129 $generated@@130 $generated@@1 false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@133) (=> (= (ControlFlow 0 4) 3) $generated@@132)))))
(let (($generated@@135  (=> (and (and ($generated@@115 $generated@@130) ($generated@@131 $generated@@130)) (and (= 1 $generated@@41) (= (ControlFlow 0 5) 4))) $generated@@134)))
$generated@@135)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
