(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@T T@U T@U) Bool)
(declare-fun $generated@@0 () T@T)
(declare-fun $generated@@1 (Int) T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@18 () T@T)
(declare-fun $generated@@19 ((_ BitVec 2)) T@U)
(declare-fun $generated@@20 (T@U) (_ BitVec 2))
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 ((_ BitVec 8)) T@U)
(declare-fun $generated@@26 (T@U) (_ BitVec 8))
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 ((_ BitVec 16)) T@U)
(declare-fun $generated@@32 (T@U) (_ BitVec 16))
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 ((_ BitVec 19)) T@U)
(declare-fun $generated@@38 (T@U) (_ BitVec 19))
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 ((_ BitVec 32)) T@U)
(declare-fun $generated@@44 (T@U) (_ BitVec 32))
(declare-fun $generated@@48 (Int) Int)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@U) Int)
(declare-fun $generated@@61 () (_ BitVec 19))
(declare-fun $generated@@62 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@T T@T) T@T)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@121 () Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@0) 1)) (= ($generated@@2 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (forall (($generated@@17 T@U) ) (! ($generated $generated@@0 $generated@@17 ($generated@@1 0))
 :pattern ( ($generated $generated@@0 $generated@@17 ($generated@@1 0)))
)))
(assert  (and (and (= ($generated@@2 $generated@@18) 3) (forall (($generated@@21 (_ BitVec 2)) ) (! (= ($generated@@20 ($generated@@19 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@19 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@22))
))))
(assert (forall (($generated@@23 T@U) ) (! ($generated $generated@@18 $generated@@23 ($generated@@1 2))
 :pattern ( ($generated $generated@@18 $generated@@23 ($generated@@1 2)))
)))
(assert  (and (and (= ($generated@@2 $generated@@24) 4) (forall (($generated@@27 (_ BitVec 8)) ) (! (= ($generated@@26 ($generated@@25 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@25 $generated@@27))
))) (forall (($generated@@28 T@U) ) (! (= ($generated@@25 ($generated@@26 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@26 $generated@@28))
))))
(assert (forall (($generated@@29 T@U) ) (! ($generated $generated@@24 $generated@@29 ($generated@@1 8))
 :pattern ( ($generated $generated@@24 $generated@@29 ($generated@@1 8)))
)))
(assert  (and (and (= ($generated@@2 $generated@@30) 5) (forall (($generated@@33 (_ BitVec 16)) ) (! (= ($generated@@32 ($generated@@31 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@33))
))) (forall (($generated@@34 T@U) ) (! (= ($generated@@31 ($generated@@32 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@34))
))))
(assert (forall (($generated@@35 T@U) ) (! ($generated $generated@@30 $generated@@35 ($generated@@1 16))
 :pattern ( ($generated $generated@@30 $generated@@35 ($generated@@1 16)))
)))
(assert  (and (and (= ($generated@@2 $generated@@36) 6) (forall (($generated@@39 (_ BitVec 19)) ) (! (= ($generated@@38 ($generated@@37 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@37 $generated@@39))
))) (forall (($generated@@40 T@U) ) (! (= ($generated@@37 ($generated@@38 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@38 $generated@@40))
))))
(assert (forall (($generated@@41 T@U) ) (! ($generated $generated@@36 $generated@@41 ($generated@@1 19))
 :pattern ( ($generated $generated@@36 $generated@@41 ($generated@@1 19)))
)))
(assert  (and (and (= ($generated@@2 $generated@@42) 7) (forall (($generated@@45 (_ BitVec 32)) ) (! (= ($generated@@44 ($generated@@43 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@45))
))) (forall (($generated@@46 T@U) ) (! (= ($generated@@43 ($generated@@44 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@44 $generated@@46))
))))
(assert (forall (($generated@@47 T@U) ) (! ($generated $generated@@42 $generated@@47 ($generated@@1 32))
 :pattern ( ($generated $generated@@42 $generated@@47 ($generated@@1 32)))
)))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@48 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 ($generated@@53 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@53 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@58 Int) ) (! (= ($generated@@57 ($generated@@1 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@1 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@53 $generated@@60 ($generated@@54 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@54 $generated@@60 $generated@@59))
)))
(assert (= $generated@@61 ($generated@@38 ($generated@@50 $generated@@36 ($generated@@37 #b0000000000011001011)))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@62 $generated@@73 $generated@@74 $generated@@75 ($generated@@69 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@78 $generated@@79) $generated@@76)
 :weight 0
)) (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@62 $generated@@80 $generated@@81 $generated@@82 ($generated@@69 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@62 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@62 $generated@@89 $generated@@90 $generated@@91 ($generated@@69 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@62 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)))) (= ($generated@@2 $generated@@63) 8)) (= ($generated@@2 $generated@@64) 9)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@66 $generated@@98 $generated@@99 ($generated@@70 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@102) $generated@@100)
 :weight 0
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@107 $generated@@108) (= ($generated@@66 $generated@@103 $generated@@104 ($generated@@70 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@108) ($generated@@66 $generated@@103 $generated@@104 $generated@@106 $generated@@108)))
 :weight 0
))) (= ($generated@@2 $generated@@67) 10)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (= ($generated@@2 ($generated@@68 $generated@@109 $generated@@110)) 11))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@71 ($generated@@68 $generated@@111 $generated@@112)) $generated@@111)
 :pattern ( ($generated@@68 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@72 ($generated@@68 $generated@@113 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@68 $generated@@113 $generated@@114))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 Bool) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@6 ($generated@@62 $generated@@63 $generated@@64 $generated@@3 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))  (=> (and (or (not (= $generated@@119 $generated@@115)) (not true)) ($generated@@6 ($generated@@53 $generated@@3 ($generated@@66 $generated@@64 $generated@@67 ($generated@@66 $generated@@63 ($generated@@68 $generated@@64 $generated@@67) $generated@@116 $generated@@119) $generated@@117)))) $generated@@118))
 :pattern ( ($generated@@62 $generated@@63 $generated@@64 $generated@@3 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))
)))
(assert  (=> (< 0 $generated@@121) ($generated $generated@@36 ($generated@@37 $generated@@61) ($generated@@1 19))))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@54 $generated@@0 ($generated@@7 ($generated@@48 $generated@@122))) ($generated@@50 $generated@@67 ($generated@@54 $generated@@0 ($generated@@7 $generated@@122))))
 :pattern ( ($generated@@54 $generated@@0 ($generated@@7 ($generated@@48 $generated@@122))))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@54 $generated@@124 ($generated@@50 $generated@@124 $generated@@123)) ($generated@@50 $generated@@67 ($generated@@54 $generated@@124 $generated@@123)))
 :pattern ( ($generated@@54 $generated@@124 ($generated@@50 $generated@@124 $generated@@123)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@132 true))
(let (($generated@@133  (=> (and (not (=> true (= $generated@@61 ($generated@@38 ($generated@@50 $generated@@36 ($generated@@37 #b0000000000011001100)))))) (= (ControlFlow 0 7) 4)) $generated@@132)))
(let (($generated@@134  (=> (and (=> true (= $generated@@61 ($generated@@38 ($generated@@50 $generated@@36 ($generated@@37 #b0000000000011001100))))) (= (ControlFlow 0 6) 4)) $generated@@132)))
(let (($generated@@135  (=> (not ($generated@@6 ($generated@@50 $generated@@3 ($generated@@5 true)))) (and (=> (= (ControlFlow 0 9) 6) $generated@@134) (=> (= (ControlFlow 0 9) 7) $generated@@133)))))
(let (($generated@@136  (=> ($generated@@6 ($generated@@50 $generated@@3 ($generated@@5 true))) (and (=> (= (ControlFlow 0 8) 6) $generated@@134) (=> (= (ControlFlow 0 8) 7) $generated@@133)))))
(let (($generated@@137  (=> (<= ($generated@@48 (- 0 128)) $generated@@125) (and (=> (= (ControlFlow 0 10) 8) $generated@@136) (=> (= (ControlFlow 0 10) 9) $generated@@135)))))
(let (($generated@@138  (=> (and (< $generated@@125 ($generated@@48 (- 0 128))) (= (ControlFlow 0 5) 4)) $generated@@132)))
(let (($generated@@139  (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@48 (- 0 128)) ($generated@@48 0))) (=> (= (ControlFlow 0 2) (- 0 1)) (< 0 (ite  (=> true (= $generated@@61 ($generated@@38 ($generated@@50 $generated@@36 ($generated@@37 #b0000000000011001100))))) 128 1234))))))
(let (($generated@@140  (=> (= $generated@@126 ($generated@@65 $generated@@127 $generated@@128 $generated@@129 false)) (and (and (=> (= (ControlFlow 0 11) 2) $generated@@139) (=> (= (ControlFlow 0 11) 10) $generated@@137)) (=> (= (ControlFlow 0 11) 5) $generated@@138)))))
(let (($generated@@141  (=> (and (and ($generated@@130 $generated@@128) ($generated@@131 $generated@@128)) (and (= 1 $generated@@121) (= (ControlFlow 0 12) 11))) $generated@@140)))
$generated@@141)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
