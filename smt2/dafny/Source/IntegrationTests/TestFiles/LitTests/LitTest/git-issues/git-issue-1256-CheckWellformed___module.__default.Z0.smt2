(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Bool)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U T@U T@U) Bool)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@40 (T@U T@U) Bool)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@48 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@T T@T) T@T)
(declare-fun $generated@@55 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 (T@U) Int)
(declare-fun $generated@@109 (T@U) Bool)
(declare-fun $generated@@110 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ) (!  (=> ($generated@@20 $generated@@22) ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))))
 :pattern ( ($generated@@19 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ) (!  (=> ($generated@@24 $generated@@26) (and (and (<= ($generated@@25 0) ($generated@@23 $generated@@26)) (< ($generated@@23 $generated@@26) 100)) (< ($generated@@23 $generated@@26) ($generated@@25 200))))
 :pattern ( ($generated@@23 $generated@@26))
)))
(assert (forall (($generated@@27 Int) ) (! (= ($generated@@25 $generated@@27) $generated@@27)
 :pattern ( ($generated@@25 $generated@@27))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@21 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@21 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 ($generated@@30 $generated@@33 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@30 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@34 ($generated@@31 $generated@@39 $generated@@36) $generated@@37 $generated@@38) ($generated@@35 $generated@@39 $generated@@36 $generated@@37 $generated@@38))
 :pattern ( ($generated@@34 ($generated@@31 $generated@@39 $generated@@36) $generated@@37 $generated@@38))
)))
(assert (forall (($generated@@42 T@U) ) (!  (=> ($generated@@40 $generated@@42 $generated) (and (= ($generated@@31 $generated@@4 ($generated@@30 $generated@@4 $generated@@42)) $generated@@42) ($generated@@41 $generated@@4 ($generated@@30 $generated@@4 $generated@@42) $generated)))
 :pattern ( ($generated@@40 $generated@@42 $generated))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@40 ($generated@@31 $generated@@45 $generated@@43) $generated@@44) ($generated@@41 $generated@@45 $generated@@43 $generated@@44))
 :pattern ( ($generated@@40 ($generated@@31 $generated@@45 $generated@@43) $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@T) ) (! (= ($generated@@30 $generated@@47 ($generated@@31 $generated@@47 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@31 $generated@@47 $generated@@46))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@48 $generated@@59 $generated@@60 $generated@@61 ($generated@@55 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@65 $generated@@62) $generated@@64 $generated@@65) $generated@@62)
 :weight 0
)) (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (or (= $generated@@71 $generated@@73) (= ($generated@@48 $generated@@66 $generated@@67 $generated@@68 ($generated@@55 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@72 $generated@@69) $generated@@73 $generated@@74) ($generated@@48 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@73 $generated@@74)))
 :weight 0
)) (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@81 $generated@@83) (= ($generated@@48 $generated@@75 $generated@@76 $generated@@77 ($generated@@55 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@48 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)))) (= ($generated@@2 $generated@@49) 3)) (= ($generated@@2 $generated@@50) 4)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@52 $generated@@84 $generated@@85 ($generated@@56 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@86) $generated@@88) $generated@@86)
 :weight 0
))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@93 $generated@@94) (= ($generated@@52 $generated@@89 $generated@@90 ($generated@@56 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@91) $generated@@94) ($generated@@52 $generated@@89 $generated@@90 $generated@@92 $generated@@94)))
 :weight 0
))) (= ($generated@@2 $generated@@53) 5)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (= ($generated@@2 ($generated@@54 $generated@@95 $generated@@96)) 6))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@57 ($generated@@54 $generated@@97 $generated@@98)) $generated@@97)
 :pattern ( ($generated@@54 $generated@@97 $generated@@98))
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (! (= ($generated@@58 ($generated@@54 $generated@@99 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@54 $generated@@99 $generated@@100))
))))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 Bool) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@7 ($generated@@48 $generated@@49 $generated@@50 $generated@@3 ($generated@@51 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))  (=> (and (or (not (= $generated@@105 $generated@@101)) (not true)) ($generated@@7 ($generated@@30 $generated@@3 ($generated@@52 $generated@@50 $generated@@53 ($generated@@52 $generated@@49 ($generated@@54 $generated@@50 $generated@@53) $generated@@102 $generated@@105) $generated@@103)))) $generated@@104))
 :pattern ( ($generated@@48 $generated@@49 $generated@@50 $generated@@3 ($generated@@51 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))
)))
(assert  (=> (<= 0 $generated@@107) (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (!  (=> (or ($generated@@110 $generated@@111) (and (< 0 $generated@@107) ($generated@@109 $generated@@112))) (and ($generated@@24 $generated@@111) (= ($generated@@108 $generated@@111) (let (($generated@@113 ($generated@@23 $generated@@111)))
$generated@@113))))
 :pattern ( ($generated@@108 $generated@@111) ($generated@@109 $generated@@112))
))))
(assert  (=> (<= 0 $generated@@107) (forall (($generated@@114 T@U) ($generated@@115 T@U) ) (!  (=> (or ($generated@@110 $generated@@114) (and (< 0 $generated@@107) ($generated@@109 $generated@@115))) (and ($generated@@24 $generated@@114) (= ($generated@@108 $generated@@114) (let (($generated@@116 ($generated@@23 $generated@@114)))
$generated@@116))))
 :weight 3
 :pattern ( ($generated@@108 $generated@@114) ($generated@@109 $generated@@115))
))))
(assert (forall (($generated@@117 Int) ) (! (= ($generated@@31 $generated@@4 ($generated@@8 ($generated@@25 $generated@@117))) ($generated@@21 $generated@@53 ($generated@@31 $generated@@4 ($generated@@8 $generated@@117))))
 :pattern ( ($generated@@31 $generated@@4 ($generated@@8 ($generated@@25 $generated@@117))))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@T) ) (! (= ($generated@@31 $generated@@119 ($generated@@21 $generated@@119 $generated@@118)) ($generated@@21 $generated@@53 ($generated@@31 $generated@@119 $generated@@118)))
 :pattern ( ($generated@@31 $generated@@119 ($generated@@21 $generated@@119 $generated@@118)))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ) (! ($generated@@35 $generated@@4 $generated@@121 $generated $generated@@120)
 :pattern ( ($generated@@35 $generated@@4 $generated@@121 $generated $generated@@120))
)))
(assert (forall (($generated@@122 T@U) ) (! ($generated@@41 $generated@@4 $generated@@122 $generated)
 :pattern ( ($generated@@41 $generated@@4 $generated@@122 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let (($generated@@130  (=> (= (ControlFlow 0 4) (- 0 3)) (or (and ($generated@@41 $generated@@4 ($generated@@8 (- ($generated@@25 200) 1)) $generated) (and (and (<= ($generated@@25 0) (- ($generated@@25 200) 1)) (< (- ($generated@@25 200) 1) 100)) (< (- ($generated@@25 200) 1) ($generated@@25 200)))) (or (and ($generated@@41 $generated@@4 ($generated@@8 ($generated@@25 (- 100 1))) $generated) (and (and (<= ($generated@@25 0) ($generated@@25 (- 100 1))) (< (- 100 1) 100)) (< (- 100 1) ($generated@@25 200)))) (or (and ($generated@@41 $generated@@4 ($generated@@8 ($generated@@25 0)) $generated) (and (and (<= ($generated@@25 0) ($generated@@25 0)) (< 0 100)) (< 0 ($generated@@25 200)))) (or (and ($generated@@41 $generated@@4 ($generated@@8 ($generated@@25 0)) $generated) (and (and (<= ($generated@@25 0) ($generated@@25 0)) (< 0 100)) (< 0 ($generated@@25 200)))) (exists (($generated@@131 Int) )  (and (and (<= ($generated@@25 0) $generated@@131) (< $generated@@131 100)) (< $generated@@131 ($generated@@25 200)))))))))))
(let (($generated@@132  (and (=> (= (ControlFlow 0 6) (- 0 7)) ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (=> ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))) (=> (and (and ($generated@@40 $generated@@123 $generated@@124) ($generated@@34 $generated@@123 $generated@@124 $generated@@125)) (and ($generated@@20 $generated@@124) (= (ControlFlow 0 6) 4))) $generated@@130)))))
(let (($generated@@133  (=> (and (not (and ($generated@@40 $generated@@123 $generated@@124) ($generated@@34 $generated@@123 $generated@@124 $generated@@125))) (= (ControlFlow 0 9) 6)) $generated@@132)))
(let (($generated@@134  (=> (and (and ($generated@@40 $generated@@123 $generated@@124) ($generated@@34 $generated@@123 $generated@@124 $generated@@125)) (= (ControlFlow 0 8) 6)) $generated@@132)))
(let (($generated@@135  (=> (and (<= ($generated@@25 0) $generated@@126) (< $generated@@126 100)) (and (=> (= (ControlFlow 0 10) 8) $generated@@134) (=> (= (ControlFlow 0 10) 9) $generated@@133)))))
(let (($generated@@136  (=> (and (not (and (<= ($generated@@25 0) $generated@@126) (< $generated@@126 100))) (= (ControlFlow 0 5) 4)) $generated@@130)))
(let (($generated@@137  (=> (< $generated@@126 ($generated@@25 0)) (and (=> (= (ControlFlow 0 12) 10) $generated@@135) (=> (= (ControlFlow 0 12) 5) $generated@@136)))))
(let (($generated@@138  (=> (<= ($generated@@25 0) $generated@@126) (and (=> (= (ControlFlow 0 11) 10) $generated@@135) (=> (= (ControlFlow 0 11) 5) $generated@@136)))))
(let (($generated@@139  (and (=> (= (ControlFlow 0 13) 11) $generated@@138) (=> (= (ControlFlow 0 13) 12) $generated@@137))))
(let (($generated@@140 true))
(let (($generated@@141 true))
(let (($generated@@142  (=> (= $generated@@127 ($generated@@51 $generated@@128 $generated@@125 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 14) 1) $generated@@141) (=> (= (ControlFlow 0 14) 13) $generated@@139)) (=> (= (ControlFlow 0 14) 2) $generated@@140)))))
(let (($generated@@143  (=> (and (and ($generated@@109 $generated@@125) ($generated@@129 $generated@@125)) (and (= 0 $generated@@107) (= (ControlFlow 0 15) 14))) $generated@@142)))
$generated@@143))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
