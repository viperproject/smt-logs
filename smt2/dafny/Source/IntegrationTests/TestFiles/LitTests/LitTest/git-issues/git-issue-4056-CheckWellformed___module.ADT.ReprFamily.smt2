(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._module.ADT? () T@U)
(declare-fun Tagclass._module.ADT () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$ADT () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun refType () T@T)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass._module.ADT () T@U)
(declare-fun Tclass._module.ADT? () T@U)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.ADT.ReprFamily (T@U T@U T@U Int) T@U)
(declare-fun |_module.ADT.ReprFamily#canCall| (T@U T@U Int) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun implements$_module.ADT (T@U) Bool)
(declare-fun dtype (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._System.nat Tagclass._System.object? Tagclass._System.object Tagclass._module.ADT? Tagclass._module.ADT tytagFamily$nat tytagFamily$object tytagFamily$ADT)
)
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@0) ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.ADT $h@@1) ($IsAlloc refType |c#0@@0| Tclass._module.ADT? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.ADT $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.ADT? $h@@1))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o Tclass._System.object? $h@@2)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o Tclass._System.object? $h@@2))
)))
(assert (forall (($o@@0 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.ADT? $h@@3)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.ADT? $h@@3))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor SetType) 7))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) ($Heap T@U) (this T@U) (|n#0| Int) ) (!  (=> (or (|_module.ADT.ReprFamily#canCall| $Heap this |n#0|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.ADT) ($IsAlloc refType this Tclass._module.ADT $Heap)))) (<= (LitInt 0) |n#0|)))) (and (=> (> |n#0| 0) (|Set#Subset| (_module.ADT.ReprFamily $ly $Heap this (- |n#0| 1)) (_module.ADT.ReprFamily $ly $Heap this |n#0|))) ($Is SetType (_module.ADT.ReprFamily $ly $Heap this |n#0|) (TSet Tclass._System.object))))
 :pattern ( (_module.ADT.ReprFamily $ly $Heap this |n#0|))
))))
(assert (forall ((a T@U) (b T@U) ) (! (= (|Set#Subset| a b) (forall ((o@@0 T@U) ) (!  (=> (|Set#IsMember| a o@@0) (|Set#IsMember| b o@@0))
 :pattern ( (|Set#IsMember| a o@@0))
 :pattern ( (|Set#IsMember| b o@@0))
)))
 :pattern ( (|Set#Subset| a b))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) (or (= $o@@1 |l#3|) (|Set#IsMember| |l#4| ($Box refType $o@@1)))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4|) $o@@1 $f))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@0 Tclass._System.nat))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@1 Tclass._System.object?))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.ADT?) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.ADT?)))
 :pattern ( ($IsBox bx@@3 Tclass._module.ADT?))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.ADT) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._module.ADT)))
 :pattern ( ($IsBox bx@@4 Tclass._module.ADT))
)))
(assert (forall ((|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| Tclass._System.object)  (and ($Is refType |c#0@@1| Tclass._System.object?) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@1| Tclass._System.object?))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.ADT)  (and ($Is refType |c#0@@2| Tclass._module.ADT?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.ADT))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.ADT?))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@0 T@U) ($Heap@@0 T@U) (this@@0 T@U) (|n#0@@0| Int) ) (!  (=> (or (|_module.ADT.ReprFamily#canCall| $Heap@@0 this@@0 |n#0@@0|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@0) (or (not (= this@@0 null)) (not true))) ($IsAlloc refType this@@0 Tclass._module.ADT $Heap@@0)) (<= (LitInt 0) |n#0@@0|)))) ($IsAlloc SetType (_module.ADT.ReprFamily $ly@@0 $Heap@@0 this@@0 |n#0@@0|) (TSet Tclass._System.object) $Heap@@0))
 :pattern ( ($IsAlloc SetType (_module.ADT.ReprFamily $ly@@0 $Heap@@0 this@@0 |n#0@@0|) (TSet Tclass._System.object) $Heap@@0))
))))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@2 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@5) ($IsAllocBox bx@@5 t0@@2 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@5))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@2) h@@0))
)))
(assert (forall (($o@@2 T@U) ) (! ($Is refType $o@@2 Tclass._System.object?)
 :pattern ( ($Is refType $o@@2 Tclass._System.object?))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall (($ly@@1 T@U) ($Heap@@1 T@U) (this@@1 T@U) (|n#0@@1| Int) ) (! (= (_module.ADT.ReprFamily ($LS $ly@@1) $Heap@@1 this@@1 |n#0@@1|) (_module.ADT.ReprFamily $ly@@1 $Heap@@1 this@@1 |n#0@@1|))
 :pattern ( (_module.ADT.ReprFamily ($LS $ly@@1) $Heap@@1 this@@1 |n#0@@1|))
)))
(assert (forall ((bx@@6 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@6 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@6)) bx@@6) ($Is SetType ($Unbox SetType bx@@6) (TSet t@@3))))
 :pattern ( ($IsBox bx@@6 (TSet t@@3)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.ADT?) Tagclass._module.ADT?))
(assert (= (TagFamily Tclass._module.ADT?) tytagFamily$ADT))
(assert (= (Tag Tclass._module.ADT) Tagclass._module.ADT))
(assert (= (TagFamily Tclass._module.ADT) tytagFamily$ADT))
(assert (forall (($o@@3 T@U) ) (! (= ($Is refType $o@@3 Tclass._module.ADT?)  (or (= $o@@3 null) (implements$_module.ADT (dtype $o@@3))))
 :pattern ( ($Is refType $o@@3 Tclass._module.ADT?))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |n#0@@2| () Int)
(declare-fun $LZ () T@U)
(declare-fun $Heap@@2 () T@U)
(declare-fun this@@2 () T@U)
(declare-fun |##n#2@0| () Int)
(declare-fun |b$reqreads#0@1| () Bool)
(declare-fun |##n#0@0| () Int)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 19) (let ((anon8_correct true))
(let ((anon12_Else_correct  (=> (and (=> (> |n#0@@2| 0) (|Set#Subset| (_module.ADT.ReprFamily ($LS $LZ) $Heap@@2 this@@2 (- |n#0@@2| 1)) (_module.ADT.ReprFamily ($LS $LZ) $Heap@@2 this@@2 |n#0@@2|))) (= (ControlFlow 0 9) 2)) anon8_correct)))
(let ((anon12_Then_correct  (=> (> |n#0@@2| 0) (=> (and ($IsAllocBox ($Box refType this@@2) Tclass._module.ADT? $Heap@@2) ($IsAlloc intType (int_2_U |n#0@@2|) Tclass._System.nat $Heap@@2)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (or (<= 0 |n#0@@2|) (= |n#0@@2| |n#0@@2|))) (=> (or (<= 0 |n#0@@2|) (= |n#0@@2| |n#0@@2|)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (or (and (= this@@2 this@@2) (= |n#0@@2| |n#0@@2|)) (< |n#0@@2| |n#0@@2|))) (=> (or (and (= this@@2 this@@2) (= |n#0@@2| |n#0@@2|)) (< |n#0@@2| |n#0@@2|)) (=> (and (or (and (= this@@2 this@@2) (= |n#0@@2| |n#0@@2|)) (|_module.ADT.ReprFamily#canCall| $Heap@@2 this@@2 |n#0@@2|)) ($IsAllocBox ($Box refType this@@2) Tclass._module.ADT? $Heap@@2)) (and (=> (= (ControlFlow 0 3) (- 0 6)) ($Is intType (int_2_U (- |n#0@@2| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |n#0@@2| 1)) Tclass._System.nat) (=> (and (= |##n#2@0| (- |n#0@@2| 1)) ($IsAlloc intType (int_2_U |##n#2@0|) Tclass._System.nat $Heap@@2)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (<= 0 |n#0@@2|) (= |##n#2@0| |n#0@@2|))) (=> (or (<= 0 |n#0@@2|) (= |##n#2@0| |n#0@@2|)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (and (= this@@2 this@@2) (= (- |n#0@@2| 1) |n#0@@2|)) (< |##n#2@0| |n#0@@2|))) (=> (or (and (= this@@2 this@@2) (= (- |n#0@@2| 1) |n#0@@2|)) (< |##n#2@0| |n#0@@2|)) (=> (or (and (= this@@2 this@@2) (= (- |n#0@@2| 1) |n#0@@2|)) (|_module.ADT.ReprFamily#canCall| $Heap@@2 this@@2 (- |n#0@@2| 1))) (=> (and (|Set#Subset| (_module.ADT.ReprFamily ($LS $LZ) $Heap@@2 this@@2 (- |n#0@@2| 1)) (_module.ADT.ReprFamily ($LS $LZ) $Heap@@2 this@@2 |n#0@@2|)) (= (ControlFlow 0 3) 2)) anon8_correct))))))))))))))))))
(let ((anon11_Then_correct  (=> ($Is SetType (_module.ADT.ReprFamily ($LS $LZ) $Heap@@2 this@@2 |n#0@@2|) (TSet Tclass._System.object)) (and (=> (= (ControlFlow 0 10) 3) anon12_Then_correct) (=> (= (ControlFlow 0 10) 9) anon12_Else_correct)))))
(let ((anon11_Else_correct true))
(let ((anon4_correct  (and (=> (= (ControlFlow 0 11) (- 0 12)) |b$reqreads#0@1|) (=> |b$reqreads#0@1| (and (=> (= (ControlFlow 0 11) 10) anon11_Then_correct) (=> (= (ControlFlow 0 11) 1) anon11_Else_correct))))))
(let ((anon10_Else_correct  (=> (and (or (not (= |n#0@@2| (LitInt 0))) (not true)) ($IsAllocBox ($Box refType this@@2) Tclass._module.ADT? $Heap@@2)) (and (=> (= (ControlFlow 0 14) (- 0 17)) ($Is intType (int_2_U (- |n#0@@2| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- |n#0@@2| 1)) Tclass._System.nat) (=> (= |##n#0@0| (- |n#0@@2| 1)) (=> (and ($IsAlloc intType (int_2_U |##n#0@0|) Tclass._System.nat $Heap@@2) (= |b$reqreads#0@0| (forall (($o@@4 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@4) alloc)))) (or (= $o@@4 this@@2) (|Set#IsMember| (ite (= |##n#0@0| (LitInt 0)) |Set#Empty| (_module.ADT.ReprFamily ($LS $LZ) $Heap@@2 this@@2 (- |##n#0@0| 1))) ($Box refType $o@@4)))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@4 $f@@0)))))) (and (=> (= (ControlFlow 0 14) (- 0 16)) (or (<= 0 |n#0@@2|) (= |##n#0@0| |n#0@@2|))) (=> (or (<= 0 |n#0@@2|) (= |##n#0@0| |n#0@@2|)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (< |##n#0@0| |n#0@@2|)) (=> (< |##n#0@0| |n#0@@2|) (=> (|_module.ADT.ReprFamily#canCall| $Heap@@2 this@@2 (- |n#0@@2| 1)) (=> (and (= |b$reqreads#0@1| |b$reqreads#0@0|) (= (ControlFlow 0 14) 11)) anon4_correct)))))))))))))
(let ((anon10_Then_correct  (=> (= |n#0@@2| (LitInt 0)) (=> (and (= |b$reqreads#0@1| true) (= (ControlFlow 0 13) 11)) anon4_correct))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@2 alloc this@@2 (ite (= |n#0@@2| (LitInt 0)) |Set#Empty| (_module.ADT.ReprFamily ($LS $LZ) $Heap@@2 this@@2 (- |n#0@@2| 1))))) (and (=> (= (ControlFlow 0 18) 13) anon10_Then_correct) (=> (= (ControlFlow 0 18) 14) anon10_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (=> (and (and (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 Tclass._module.ADT) ($IsAlloc refType this@@2 Tclass._module.ADT $Heap@@2))) (<= (LitInt 0) |n#0@@2|)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 19) 18))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
