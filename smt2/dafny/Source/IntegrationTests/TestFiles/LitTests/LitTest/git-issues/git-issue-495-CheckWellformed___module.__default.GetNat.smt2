(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 () Int)
(declare-fun $generated@@41 (T@U) Int)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@43 (T@U) Int)
(declare-fun $generated@@46 (Int) T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@57 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@T T@T) T@T)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@116 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (= ($generated@@7 $generated@@26) 3))
(assert (forall (($generated@@28 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@28 $generated@@27) ($generated@@24 $generated@@28))
 :pattern ( ($generated@@24 $generated@@28) ($generated@@25 $generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@29 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@35 T@U) ) (! (= ($generated@@24 $generated@@35) (= ($generated@@34 $generated@@35) $generated@@4))
 :pattern ( ($generated@@24 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert  (=> (<= 1 $generated@@40) (forall (($generated@@44 T@U) ) (!  (=> (or ($generated@@42 ($generated@@31 $generated@@26 $generated@@44)) (and (< 1 $generated@@40) ($generated@@25 $generated@@26 $generated@@44 $generated@@27))) (and ($generated@@24 ($generated@@31 $generated@@26 $generated@@44)) (= ($generated@@41 ($generated@@31 $generated@@26 $generated@@44)) (let (($generated@@45 ($generated@@29 ($generated@@43 ($generated@@31 $generated@@26 $generated@@44)))))
$generated@@45))))
 :weight 3
 :pattern ( ($generated@@41 ($generated@@31 $generated@@26 $generated@@44)))
))))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@24 $generated@@47) (exists (($generated@@48 Int) ) (= $generated@@47 ($generated@@46 $generated@@48))))
 :pattern ( ($generated@@24 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@25 $generated@@9 $generated@@50 $generated@@49) (<= ($generated@@29 0) ($generated@@14 $generated@@50)))
 :pattern ( ($generated@@25 $generated@@9 $generated@@50 $generated@@49))
)))
(assert  (=> (<= 1 $generated@@40) (forall (($generated@@51 T@U) ) (!  (=> (or ($generated@@42 $generated@@51) (and (< 1 $generated@@40) ($generated@@25 $generated@@26 $generated@@51 $generated@@27))) (<= ($generated@@29 0) ($generated@@41 $generated@@51)))
 :pattern ( ($generated@@41 $generated@@51))
))))
(assert (forall (($generated@@52 Int) ) (! (= ($generated@@34 ($generated@@46 $generated@@52)) $generated@@4)
 :pattern ( ($generated@@46 $generated@@52))
)))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@43 ($generated@@46 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@46 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@36 $generated@@55 ($generated@@37 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@37 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@25 $generated@@26 ($generated@@46 $generated@@56) $generated@@27) ($generated@@25 $generated@@9 ($generated@@13 $generated@@56) $generated))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@46 $generated@@56) $generated@@27))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@57 $generated@@68 $generated@@69 $generated@@70 ($generated@@64 $generated@@68 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@74 $generated@@71) $generated@@73 $generated@@74) $generated@@71)
 :weight 0
)) (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@57 $generated@@75 $generated@@76 $generated@@77 ($generated@@64 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@57 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@57 $generated@@84 $generated@@85 $generated@@86 ($generated@@64 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@57 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)))) (= ($generated@@7 $generated@@58) 4)) (= ($generated@@7 $generated@@59) 5)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@61 $generated@@93 $generated@@94 ($generated@@65 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@97) $generated@@95)
 :weight 0
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@102 $generated@@103) (= ($generated@@61 $generated@@98 $generated@@99 ($generated@@65 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@103) ($generated@@61 $generated@@98 $generated@@99 $generated@@101 $generated@@103)))
 :weight 0
))) (= ($generated@@7 $generated@@62) 6)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ) (= ($generated@@7 ($generated@@63 $generated@@104 $generated@@105)) 7))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (! (= ($generated@@66 ($generated@@63 $generated@@106 $generated@@107)) $generated@@106)
 :pattern ( ($generated@@63 $generated@@106 $generated@@107))
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@67 ($generated@@63 $generated@@108 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@63 $generated@@108 $generated@@109))
))))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 Bool) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@12 ($generated@@57 $generated@@58 $generated@@59 $generated@@8 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))  (=> (and (or (not (= $generated@@114 $generated@@110)) (not true)) ($generated@@12 ($generated@@36 $generated@@8 ($generated@@61 $generated@@59 $generated@@62 ($generated@@61 $generated@@58 ($generated@@63 $generated@@59 $generated@@62) $generated@@111 $generated@@114) $generated@@112)))) $generated@@113))
 :pattern ( ($generated@@57 $generated@@58 $generated@@59 $generated@@8 ($generated@@60 $generated@@110 $generated@@111 $generated@@112 $generated@@113) $generated@@114 $generated@@115))
)))
(assert (= ($generated@@23 $generated@@49) $generated@@2))
(assert (= ($generated@@116 $generated@@49) $generated@@5))
(assert (= ($generated@@23 $generated@@27) $generated@@3))
(assert (= ($generated@@116 $generated@@27) $generated@@6))
(assert (forall (($generated@@117 Int) ) (! (= ($generated@@37 $generated@@9 ($generated@@13 ($generated@@29 $generated@@117))) ($generated@@31 $generated@@62 ($generated@@37 $generated@@9 ($generated@@13 $generated@@117))))
 :pattern ( ($generated@@37 $generated@@9 ($generated@@13 ($generated@@29 $generated@@117))))
)))
(assert (forall (($generated@@118 Int) ) (! (= ($generated@@46 ($generated@@29 $generated@@118)) ($generated@@31 $generated@@26 ($generated@@46 $generated@@118)))
 :pattern ( ($generated@@46 ($generated@@29 $generated@@118)))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@T) ) (! (= ($generated@@37 $generated@@120 ($generated@@31 $generated@@120 $generated@@119)) ($generated@@31 $generated@@62 ($generated@@37 $generated@@120 $generated@@119)))
 :pattern ( ($generated@@37 $generated@@120 ($generated@@31 $generated@@120 $generated@@119)))
)))
(assert  (=> (<= 1 $generated@@40) (forall (($generated@@121 T@U) ) (!  (=> (or ($generated@@42 $generated@@121) (and (< 1 $generated@@40) ($generated@@25 $generated@@26 $generated@@121 $generated@@27))) (and ($generated@@24 $generated@@121) (= ($generated@@41 $generated@@121) (let (($generated@@122 ($generated@@43 $generated@@121)))
$generated@@122))))
 :pattern ( ($generated@@41 $generated@@121))
))))
(assert (forall (($generated@@123 T@U) ) (! ($generated@@25 $generated@@9 $generated@@123 $generated)
 :pattern ( ($generated@@25 $generated@@9 $generated@@123 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 (T@U) Bool)
(declare-fun $generated@@130 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@131 true))
(let (($generated@@132  (=> (and (= $generated@@124 ($generated@@46 $generated@@125)) (= (ControlFlow 0 3) (- 0 2))) ($generated@@25 $generated@@9 ($generated@@13 $generated@@125) $generated@@49))))
(let (($generated@@133 true))
(let (($generated@@134  (=> (= $generated@@126 ($generated@@60 $generated@@127 $generated@@128 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 5) 1) $generated@@133) (=> (= (ControlFlow 0 5) 3) $generated@@132)) (=> (= (ControlFlow 0 5) 4) $generated@@131)))))
(let (($generated@@135  (=> (and (and (and ($generated@@129 $generated@@128) ($generated@@130 $generated@@128)) ($generated@@25 $generated@@26 $generated@@124 $generated@@27)) (and (= 1 $generated@@40) (= (ControlFlow 0 6) 5))) $generated@@134)))
$generated@@135))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
