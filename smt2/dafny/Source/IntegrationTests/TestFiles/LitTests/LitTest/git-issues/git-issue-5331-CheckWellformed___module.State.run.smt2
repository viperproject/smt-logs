(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.Ins? () T@U)
(declare-fun Tagclass._module.Ins () T@U)
(declare-fun Tagclass._module.State () T@U)
(declare-fun |##_module.State.S| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$Ins () T@U)
(declare-fun tytagFamily$State () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.State.fetch (T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.State () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Ins () T@U)
(declare-fun _module.State.step (T@U) T@U)
(declare-fun Tclass._module.Ins? () T@U)
(declare-fun _module.State.S_q (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun _module.State.fetch__ (T@U) T@U)
(declare-fun _module.State.run (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.State.run#canCall| (T@U) Bool)
(declare-fun _module.State.clock (T@U) Int)
(declare-fun |#_module.State.S| (Int) T@U)
(declare-fun _module.Ins.step (T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |_module.State.fetch__#canCall| (T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |_module.Ins.step#canCall| (T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun implements$_module.Ins (T@U) Bool)
(declare-fun dtype (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.nat Tagclass._module.Ins? Tagclass._module.Ins Tagclass._module.State |##_module.State.S| tytagFamily$nat tytagFamily$Ins tytagFamily$State)
)
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert  (and (= (Ctor DatatypeTypeType) 3) (= (Ctor refType) 4)))
(assert  (=> (< 2 $FunctionContextHeight) (forall (($h@@0 T@U) ($o T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType $o Tclass._module.State)) ($IsAlloc DatatypeTypeType $o Tclass._module.State $h@@0)) ($IsAlloc refType (_module.State.fetch $o) Tclass._module.Ins $h@@0))
 :pattern ( (_module.State.fetch $o) ($IsAlloc DatatypeTypeType $o Tclass._module.State $h@@0))
))))
(assert  (=> (< 3 $FunctionContextHeight) (forall (($h@@1 T@U) ($o@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@1) ($Is DatatypeTypeType $o@@0 Tclass._module.State)) ($IsAlloc DatatypeTypeType $o@@0 Tclass._module.State $h@@1)) ($IsAlloc DatatypeTypeType (_module.State.step $o@@0) Tclass._module.State $h@@1))
 :pattern ( (_module.State.step $o@@0) ($IsAlloc DatatypeTypeType $o@@0 Tclass._module.State $h@@1))
))))
(assert (forall ((|c#0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Ins $h@@2) ($IsAlloc refType |c#0| Tclass._module.Ins? $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Ins $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Ins? $h@@2))
)))
(assert (forall ((d T@U) ) (!  (=> ($Is DatatypeTypeType d Tclass._module.State) (_module.State.S_q d))
 :pattern ( (_module.State.S_q d) ($Is DatatypeTypeType d Tclass._module.State))
)))
(assert  (=> (< 2 $FunctionContextHeight) (forall (($o@@1 T@U) ) (!  (=> ($Is DatatypeTypeType $o@@1 Tclass._module.State) ($Is refType (_module.State.fetch $o@@1) Tclass._module.Ins))
 :pattern ( (_module.State.fetch $o@@1))
))))
(assert  (=> (< 3 $FunctionContextHeight) (forall (($o@@2 T@U) ) (!  (=> ($Is DatatypeTypeType $o@@2 Tclass._module.State) ($Is DatatypeTypeType (_module.State.step $o@@2) Tclass._module.State))
 :pattern ( (_module.State.step $o@@2))
))))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@3 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.Ins? $h@@3)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.Ins? $h@@3))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.State.S_q d@@0) (= (DatatypeCtorId d@@0) |##_module.State.S|))
 :pattern ( (_module.State.S_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((this T@U) ) (! (= (_module.State.fetch this) (_module.State.fetch__ this))
 :pattern ( (_module.State.fetch this))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly T@U) (this@@0 T@U) ) (!  (=> (or (|_module.State.run#canCall| this@@0) (and (< 4 $FunctionContextHeight) ($Is DatatypeTypeType this@@0 Tclass._module.State))) (and (and (_module.State.S_q this@@0) (=> (or (not (= (_module.State.clock this@@0) (LitInt 0))) (not true)) (and (_module.State.S_q this@@0) (|_module.State.run#canCall| (let ((|dt_update#clock#0#0| (- (_module.State.clock this@@0) 1)))
(|#_module.State.S| |dt_update#clock#0#0|)))))) (= (_module.State.run ($LS $ly) this@@0) (ite (= (_module.State.clock this@@0) (LitInt 0)) this@@0 (_module.State.run $ly (let ((|dt_update#clock#0#0@@0| (- (_module.State.clock this@@0) 1)))
(|#_module.State.S| |dt_update#clock#0#0@@0|)))))))
 :pattern ( (_module.State.run ($LS $ly) this@@0))
))))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.State.S_q d@@1) (exists ((|a#1#0#0| Int) ) (= d@@1 (|#_module.State.S| |a#1#0#0|))))
 :pattern ( (_module.State.S_q d@@1))
)))
(assert (forall ((this@@1 T@U) ) (! (= (_module.State.step this@@1) (_module.Ins.step (_module.State.fetch this@@1) this@@1))
 :pattern ( (_module.State.step this@@1))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((|a#2#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.State.S| |a#2#0#0|) Tclass._module.State) ($Is intType (int_2_U |a#2#0#0|) Tclass._System.nat))
 :pattern ( ($Is DatatypeTypeType (|#_module.State.S| |a#2#0#0|) Tclass._module.State))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.Ins)  (and ($Is refType |c#0@@0| Tclass._module.Ins?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Ins))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Ins?))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (this@@2 T@U) ) (!  (=> (and (or (|_module.State.fetch__#canCall| this@@2) (and (< 1 $FunctionContextHeight) ($IsAlloc DatatypeTypeType this@@2 Tclass._module.State $Heap))) ($IsGoodHeap $Heap)) ($IsAlloc refType (_module.State.fetch__ this@@2) Tclass._module.Ins $Heap))
 :pattern ( ($IsAlloc refType (_module.State.fetch__ this@@2) Tclass._module.Ins $Heap))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly@@0 T@U) (this@@3 T@U) ) (!  (=> (or (|_module.State.run#canCall| (Lit DatatypeTypeType this@@3)) (and (< 4 $FunctionContextHeight) ($Is DatatypeTypeType this@@3 Tclass._module.State))) (and (and (_module.State.S_q (Lit DatatypeTypeType this@@3)) (=> (or (not (= (LitInt (_module.State.clock (Lit DatatypeTypeType this@@3))) (LitInt 0))) (not true)) (and (_module.State.S_q (Lit DatatypeTypeType this@@3)) (|_module.State.run#canCall| (let ((|dt_update#clock#0#1| (LitInt (- (_module.State.clock (Lit DatatypeTypeType this@@3)) 1))))
(Lit DatatypeTypeType (|#_module.State.S| |dt_update#clock#0#1|))))))) (= (_module.State.run ($LS $ly@@0) (Lit DatatypeTypeType this@@3)) (ite (= (LitInt (_module.State.clock (Lit DatatypeTypeType this@@3))) (LitInt 0)) this@@3 (_module.State.run ($LS $ly@@0) (let ((|dt_update#clock#0#1@@0| (LitInt (- (_module.State.clock (Lit DatatypeTypeType this@@3)) 1))))
(Lit DatatypeTypeType (|#_module.State.S| |dt_update#clock#0#1@@0|))))))))
 :weight 3
 :pattern ( (_module.State.run ($LS $ly@@0) (Lit DatatypeTypeType this@@3)))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly@@1 T@U) (this@@4 T@U) ) (!  (=> (or (|_module.State.run#canCall| this@@4) (and (< 4 $FunctionContextHeight) ($Is DatatypeTypeType this@@4 Tclass._module.State))) ($Is DatatypeTypeType (_module.State.run $ly@@1 this@@4) Tclass._module.State))
 :pattern ( (_module.State.run $ly@@1 this@@4))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@5 T@U) ) (!  (=> (or (|_module.State.fetch__#canCall| this@@5) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType this@@5 Tclass._module.State))) ($Is refType (_module.State.fetch__ this@@5) Tclass._module.Ins))
 :pattern ( (_module.State.fetch__ this@@5))
))))
(assert (forall ((|a#0#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.State.S| |a#0#0#0|)) |##_module.State.S|)
 :pattern ( (|#_module.State.S| |a#0#0#0|))
)))
(assert (forall ((|a#4#0#0| Int) ) (! (= (_module.State.clock (|#_module.State.S| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#_module.State.S| |a#4#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall (($ly@@2 T@U) (this@@6 T@U) ) (! (= (_module.State.run ($LS $ly@@2) this@@6) (_module.State.run $ly@@2 this@@6))
 :pattern ( (_module.State.run ($LS $ly@@2) this@@6))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@4 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@4 $f))  (=> (and (or (not (= $o@@4 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@4) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@4 $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@7 T@U) (|s#0| T@U) ) (!  (=> (or (|_module.Ins.step#canCall| this@@7 |s#0|) (and (< 1 $FunctionContextHeight) (and (and (or (not (= this@@7 null)) (not true)) ($Is refType this@@7 Tclass._module.Ins)) ($Is DatatypeTypeType |s#0| Tclass._module.State)))) ($Is DatatypeTypeType (_module.Ins.step this@@7 |s#0|) Tclass._module.State))
 :pattern ( (_module.Ins.step this@@7 |s#0|))
))))
(assert (forall ((d@@2 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) ($Is DatatypeTypeType d@@2 Tclass._module.State)) ($IsAlloc DatatypeTypeType d@@2 Tclass._module.State $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType d@@2 Tclass._module.State $h@@4))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._module.Ins?) Tagclass._module.Ins?))
(assert (= (TagFamily Tclass._module.Ins?) tytagFamily$Ins))
(assert (= (Tag Tclass._module.Ins) Tagclass._module.Ins))
(assert (= (TagFamily Tclass._module.Ins) tytagFamily$Ins))
(assert (= (Tag Tclass._module.State) Tagclass._module.State))
(assert (= (TagFamily Tclass._module.State) tytagFamily$State))
(assert (forall (($o@@5 T@U) ) (! (= ($Is refType $o@@5 Tclass._module.Ins?)  (or (= $o@@5 null) (implements$_module.Ins (dtype $o@@5))))
 :pattern ( ($Is refType $o@@5 Tclass._module.Ins?))
)))
(assert (forall ((d@@3 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.State.S_q d@@3) ($IsAlloc DatatypeTypeType d@@3 Tclass._module.State $h@@5))) ($IsAlloc intType (int_2_U (_module.State.clock d@@3)) Tclass._System.nat $h@@5))
 :pattern ( ($IsAlloc intType (int_2_U (_module.State.clock d@@3)) Tclass._System.nat $h@@5))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#3#0#0| Int) ) (! (= (|#_module.State.S| (LitInt |a#3#0#0|)) (Lit DatatypeTypeType (|#_module.State.S| |a#3#0#0|)))
 :pattern ( (|#_module.State.S| (LitInt |a#3#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@7)) (Lit BoxType ($Box T@@3 x@@7)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun this@@8 () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |dt_update_tmp#0#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () Int)
(declare-fun |dt_update#clock#0#Z#0@0| () Int)
(declare-fun $Heap@@0 () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((anon8_Else_correct  (=> (or (not (= (_module.State.clock this@@8) (LitInt 0))) (not true)) (=> (and (and (= |let#0#0#0| (_module.State.step this@@8)) ($Is DatatypeTypeType |let#0#0#0| Tclass._module.State)) (and (= |dt_update_tmp#0#Z#0@0| |let#0#0#0|) (_module.State.S_q this@@8))) (and (=> (= (ControlFlow 0 4) (- 0 6)) ($Is intType (int_2_U (- (_module.State.clock this@@8) 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- (_module.State.clock this@@8) 1)) Tclass._System.nat) (=> (= |let#1#0#0| (- (_module.State.clock this@@8) 1)) (=> (and (and (_module.State.S_q this@@8) ($Is intType (int_2_U |let#1#0#0|) Tclass._System.nat)) (and (= |dt_update#clock#0#Z#0@0| |let#1#0#0|) ($IsAllocBox ($Box DatatypeTypeType (let ((|dt_update#clock#0#2| (- (_module.State.clock this@@8) 1)))
(|#_module.State.S| |dt_update#clock#0#2|))) Tclass._module.State $Heap@@0))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (<= 0 (_module.State.clock this@@8)) (= (_module.State.clock (let ((|dt_update#clock#0#2@@0| (- (_module.State.clock this@@8) 1)))
(|#_module.State.S| |dt_update#clock#0#2@@0|))) (_module.State.clock this@@8)))) (=> (or (<= 0 (_module.State.clock this@@8)) (= (_module.State.clock (let ((|dt_update#clock#0#2@@1| (- (_module.State.clock this@@8) 1)))
(|#_module.State.S| |dt_update#clock#0#2@@1|))) (_module.State.clock this@@8))) (=> (= (ControlFlow 0 4) (- 0 3)) (< (_module.State.clock (let ((|dt_update#clock#0#2@@2| (- (_module.State.clock this@@8) 1)))
(|#_module.State.S| |dt_update#clock#0#2@@2|))) (_module.State.clock this@@8)))))))))))))
(let ((anon8_Then_correct true))
(let ((anon7_Else_correct  (=> (_module.State.S_q this@@8) (and (=> (= (ControlFlow 0 7) 2) anon8_Then_correct) (=> (= (ControlFlow 0 7) 4) anon8_Else_correct)))))
(let ((anon7_Then_correct true))
(let ((anon0_correct  (=> (and (= $_ReadsFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (_module.State.S_q this@@8)) (and (=> (= (ControlFlow 0 8) 1) anon7_Then_correct) (=> (= (ControlFlow 0 8) 7) anon7_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and ($Is DatatypeTypeType this@@8 Tclass._module.State) ($IsAlloc DatatypeTypeType this@@8 Tclass._module.State $Heap@@0)) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 9) 8))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
