(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@36 (T@U) Bool)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@39 (Int) Int)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@U T@U) Bool)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@T T@T) T@T)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@120 (T@U) Bool)
(declare-fun $generated@@123 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@27 T@U) ) (!  (=> (or ($generated@@25 $generated@@27) (< 0 $generated@@23)) ($generated@@26 ($generated@@24 $generated@@27) $generated@@27))
 :pattern ( ($generated@@24 $generated@@27))
))))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! ($generated@@28 $generated@@8 $generated@@30 $generated@@29 $generated@@31)
 :pattern ( ($generated@@28 $generated@@8 $generated@@30 $generated@@29 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (! ($generated@@28 $generated@@8 $generated@@33 $generated@@32 $generated@@34)
 :pattern ( ($generated@@28 $generated@@8 $generated@@33 $generated@@32 $generated@@34))
)))
(assert (forall (($generated@@38 T@U) ) (!  (=> ($generated@@36 $generated@@38) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@10 true))))
 :pattern ( ($generated@@35 $generated@@38))
)))
(assert (forall (($generated@@40 Int) ) (! (= ($generated@@39 $generated@@40) $generated@@40)
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@37 $generated@@42 $generated@@41) $generated@@41)
 :pattern ( ($generated@@37 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 ($generated@@43 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@43 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@51 $generated@@48) $generated@@49 $generated@@50) ($generated@@28 $generated@@51 $generated@@48 $generated@@49 $generated@@50))
 :pattern ( ($generated@@47 ($generated@@44 $generated@@51 $generated@@48) $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ) (!  (=> ($generated@@26 $generated@@53 $generated@@29) (and (= ($generated@@44 $generated@@8 ($generated@@43 $generated@@8 $generated@@53)) $generated@@53) ($generated@@52 $generated@@8 ($generated@@43 $generated@@8 $generated@@53) $generated@@29)))
 :pattern ( ($generated@@26 $generated@@53 $generated@@29))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@26 $generated@@54 $generated@@32) (and (= ($generated@@44 $generated@@8 ($generated@@43 $generated@@8 $generated@@54)) $generated@@54) ($generated@@52 $generated@@8 ($generated@@43 $generated@@8 $generated@@54) $generated@@32)))
 :pattern ( ($generated@@26 $generated@@54 $generated@@32))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@26 $generated@@55 $generated) (and (= ($generated@@44 $generated@@8 ($generated@@43 $generated@@8 $generated@@55)) $generated@@55) ($generated@@52 $generated@@8 ($generated@@43 $generated@@8 $generated@@55) $generated)))
 :pattern ( ($generated@@26 $generated@@55 $generated))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@26 ($generated@@44 $generated@@58 $generated@@56) $generated@@57) ($generated@@52 $generated@@58 $generated@@56 $generated@@57))
 :pattern ( ($generated@@26 ($generated@@44 $generated@@58 $generated@@56) $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@43 $generated@@60 ($generated@@44 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@44 $generated@@60 $generated@@59))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@61 $generated@@72 $generated@@73 $generated@@74 ($generated@@68 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@77 $generated@@78) $generated@@75)
 :weight 0
)) (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@61 $generated@@79 $generated@@80 $generated@@81 ($generated@@68 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@61 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@61 $generated@@88 $generated@@89 $generated@@90 ($generated@@68 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@61 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)))) (= ($generated@@6 $generated@@62) 3)) (= ($generated@@6 $generated@@63) 4)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@65 $generated@@97 $generated@@98 ($generated@@69 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@101) $generated@@99)
 :weight 0
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@65 $generated@@102 $generated@@103 ($generated@@69 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@65 $generated@@102 $generated@@103 $generated@@105 $generated@@107)))
 :weight 0
))) (= ($generated@@6 $generated@@66) 5)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (= ($generated@@6 ($generated@@67 $generated@@108 $generated@@109)) 6))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@70 ($generated@@67 $generated@@110 $generated@@111)) $generated@@110)
 :pattern ( ($generated@@67 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@71 ($generated@@67 $generated@@112 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@67 $generated@@112 $generated@@113))
))))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 Bool) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@11 ($generated@@61 $generated@@62 $generated@@63 $generated@@7 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))  (=> (and (or (not (= $generated@@118 $generated@@114)) (not true)) ($generated@@11 ($generated@@43 $generated@@7 ($generated@@65 $generated@@63 $generated@@66 ($generated@@65 $generated@@62 ($generated@@67 $generated@@63 $generated@@66) $generated@@115 $generated@@118) $generated@@116)))) $generated@@117))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63 $generated@@7 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))
)))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> (and (or ($generated@@25 $generated@@122) (< 0 $generated@@23)) ($generated@@120 $generated@@121)) ($generated@@47 ($generated@@24 $generated@@122) $generated@@122 $generated@@121))
 :pattern ( ($generated@@47 ($generated@@24 $generated@@122) $generated@@122 $generated@@121))
))))
(assert (= ($generated@@22 $generated@@29) $generated@@2))
(assert (= ($generated@@123 $generated@@29) $generated@@4))
(assert (= ($generated@@22 $generated@@32) $generated@@3))
(assert (= ($generated@@123 $generated@@32) $generated@@5))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (!  (=> (or ($generated@@25 $generated@@124) (and (< 0 $generated@@23) ($generated@@120 $generated@@125))) (and ($generated@@36 $generated@@124) (= ($generated@@24 $generated@@124) (let (($generated@@126 ($generated@@35 $generated@@124)))
$generated@@126))))
 :pattern ( ($generated@@24 $generated@@124) ($generated@@120 $generated@@125))
))))
(assert  (=> (<= 0 $generated@@23) (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> (or ($generated@@25 $generated@@127) (and (< 0 $generated@@23) ($generated@@120 $generated@@128))) (and ($generated@@36 $generated@@127) (= ($generated@@24 $generated@@127) (let (($generated@@129 ($generated@@35 $generated@@127)))
$generated@@129))))
 :weight 3
 :pattern ( ($generated@@24 $generated@@127) ($generated@@120 $generated@@128))
))))
(assert (forall (($generated@@130 T@U) ) (! (= ($generated@@52 $generated@@8 $generated@@130 $generated@@29)  (and (<= ($generated@@39 0) ($generated@@13 $generated@@130)) (< ($generated@@13 $generated@@130) 256)))
 :pattern ( ($generated@@52 $generated@@8 $generated@@130 $generated@@29))
)))
(assert (forall (($generated@@131 T@U) ) (! (= ($generated@@52 $generated@@8 $generated@@131 $generated@@32)  (and (<= ($generated@@39 1000) ($generated@@13 $generated@@131)) (< ($generated@@13 $generated@@131) 2000)))
 :pattern ( ($generated@@52 $generated@@8 $generated@@131 $generated@@32))
)))
(assert (forall (($generated@@132 Int) ) (! (= ($generated@@44 $generated@@8 ($generated@@12 ($generated@@39 $generated@@132))) ($generated@@37 $generated@@66 ($generated@@44 $generated@@8 ($generated@@12 $generated@@132))))
 :pattern ( ($generated@@44 $generated@@8 ($generated@@12 ($generated@@39 $generated@@132))))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@T) ) (! (= ($generated@@44 $generated@@134 ($generated@@37 $generated@@134 $generated@@133)) ($generated@@37 $generated@@66 ($generated@@44 $generated@@134 $generated@@133)))
 :pattern ( ($generated@@44 $generated@@134 ($generated@@37 $generated@@134 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (! ($generated@@28 $generated@@8 $generated@@136 $generated $generated@@135)
 :pattern ( ($generated@@28 $generated@@8 $generated@@136 $generated $generated@@135))
)))
(assert (forall (($generated@@137 T@U) ) (! ($generated@@52 $generated@@8 $generated@@137 $generated)
 :pattern ( ($generated@@52 $generated@@8 $generated@@137 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@147  (=> (and (= $generated@@138 ($generated@@64 $generated@@139 $generated@@140 $generated@@1 false)) ($generated@@25 $generated)) (=> (and (and (and ($generated@@25 $generated) (= $generated@@141 ($generated@@39 ($generated@@13 ($generated@@43 $generated@@8 ($generated@@24 $generated)))))) (and ($generated@@25 $generated@@29) ($generated@@25 $generated@@29))) (and (and (= $generated@@142 ($generated@@39 ($generated@@13 ($generated@@43 $generated@@8 ($generated@@24 $generated@@29))))) ($generated@@25 $generated@@32)) (and ($generated@@25 $generated@@32) (= $generated@@143 ($generated@@39 ($generated@@13 ($generated@@43 $generated@@8 ($generated@@24 $generated@@32)))))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= $generated@@141 $generated@@142)) (=> (= $generated@@141 $generated@@142) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= $generated@@141 $generated@@143)) (=> (= $generated@@141 $generated@@143) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@10 false))))))))))))
(let (($generated@@148  (=> (and ($generated@@120 $generated@@140) ($generated@@144 $generated@@140)) (=> (and (and (<= ($generated@@39 0) $generated@@145) (< $generated@@145 256)) true) (=> (and (and (and (<= ($generated@@39 1000) $generated@@146) (< $generated@@146 2000)) true) (and (= 1 $generated@@23) (= (ControlFlow 0 5) 2))) $generated@@147)))))
$generated@@148)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
