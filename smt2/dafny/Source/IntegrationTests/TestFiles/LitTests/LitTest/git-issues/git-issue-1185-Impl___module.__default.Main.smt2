(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@U T@U) T@U)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@34 (T@U T@U) T@U)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@40 () Int)
(declare-fun $generated@@41 (T@U T@U) Bool)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@43 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@T T@U T@U) Bool)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@U) T@U)
(declare-fun $generated@@47 (T@U T@U) Bool)
(declare-fun $generated@@52 (Int) Int)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@U T@U) Bool)
(declare-fun $generated@@65 (T@U T@U T@U) Bool)
(declare-fun $generated@@66 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@71 (T@U T@U) Int)
(declare-fun $generated@@72 (T@U T@U) Bool)
(declare-fun $generated@@97 (T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 () T@T)
(declare-fun $generated@@104 () T@T)
(declare-fun $generated@@105 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@106 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@107 () T@T)
(declare-fun $generated@@108 (T@T T@T) T@T)
(declare-fun $generated@@109 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@110 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@111 (T@T) T@T)
(declare-fun $generated@@112 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! ($generated@@21 ($generated@@20 $generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@20 $generated@@22 $generated@@23))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ($generated@@26 T@U) ) (!  (=> ($generated@@21 $generated@@24 $generated@@26) ($generated@@21 ($generated@@20 $generated@@24 $generated@@25) $generated@@26))
 :pattern ( ($generated@@20 $generated@@24 $generated@@25) ($generated@@21 $generated@@24 $generated@@26))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29)  (or (= $generated@@29 $generated@@28) ($generated@@21 $generated@@27 $generated@@29)))
 :pattern ( ($generated@@21 ($generated@@20 $generated@@27 $generated@@28) $generated@@29))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> ($generated@@31 $generated@@32 $generated@@33) ($generated@@21 $generated@@33 ($generated@@30 $generated@@32 $generated@@33)))
 :pattern ( ($generated@@30 $generated@@32 $generated@@33))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (!  (=> ($generated@@35 $generated@@36 $generated@@37) ($generated@@21 $generated@@37 ($generated@@34 $generated@@36 $generated@@37)))
 :pattern ( ($generated@@34 $generated@@36 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (!  (not ($generated@@21 $generated@@38 $generated@@39))
 :pattern ( ($generated@@21 $generated@@38 $generated@@39))
)))
(assert (= ($generated@@3 $generated@@45) 3))
(assert  (=> (<= 0 $generated@@40) (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> (or ($generated@@43 $generated@@48 $generated@@50) (and (< 0 $generated@@40) (and (and ($generated@@42 $generated@@49) ($generated@@44 $generated@@45 $generated@@50 ($generated@@46 $generated@@48))) (not ($generated@@47 $generated@@50 $generated@@38))))) (and ($generated@@31 $generated@@48 $generated@@50) (= ($generated@@41 $generated@@48 $generated@@50) (let (($generated@@51 ($generated@@30 $generated@@48 $generated@@50)))
(= $generated@@51 $generated@@51)))))
 :pattern ( ($generated@@41 $generated@@48 $generated@@50) ($generated@@42 $generated@@49))
))))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@52 $generated@@53) $generated@@53)
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 ($generated@@57 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@57 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@44 $generated@@45 $generated@@62 ($generated@@46 $generated@@63)) (forall (($generated@@64 T@U) ) (!  (=> ($generated@@21 $generated@@62 $generated@@64) ($generated@@61 $generated@@64 $generated@@63))
 :pattern ( ($generated@@21 $generated@@62 $generated@@64))
)))
 :pattern ( ($generated@@44 $generated@@45 $generated@@62 ($generated@@46 $generated@@63)))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@65 ($generated@@58 $generated@@70 $generated@@67) $generated@@68 $generated@@69) ($generated@@66 $generated@@70 $generated@@67 $generated@@68 $generated@@69))
 :pattern ( ($generated@@65 ($generated@@58 $generated@@70 $generated@@67) $generated@@68 $generated@@69))
)))
(assert  (=> (<= 0 $generated@@40) (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> (or ($generated@@72 $generated@@73 $generated@@75) (and (< 0 $generated@@40) (and (and ($generated@@42 $generated@@74) ($generated@@44 $generated@@45 $generated@@75 ($generated@@46 $generated@@73))) (not ($generated@@47 $generated@@75 $generated@@38))))) (and ($generated@@35 $generated@@73 $generated@@75) (= ($generated@@71 $generated@@73 $generated@@75) (let (($generated@@76 (let (($generated@@77 ($generated@@34 $generated@@73 $generated@@75)))
(= $generated@@77 $generated@@77))))
(ite $generated@@76 6 8)))))
 :pattern ( ($generated@@71 $generated@@73 $generated@@75) ($generated@@42 $generated@@74))
))))
(assert  (=> (<= 0 $generated@@40) (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> (or ($generated@@43 $generated@@78 ($generated@@54 $generated@@45 $generated@@80)) (and (< 0 $generated@@40) (and (and ($generated@@42 $generated@@79) ($generated@@44 $generated@@45 $generated@@80 ($generated@@46 $generated@@78))) (not ($generated@@47 $generated@@80 $generated@@38))))) (and ($generated@@31 $generated@@78 ($generated@@54 $generated@@45 $generated@@80)) (= ($generated@@41 $generated@@78 ($generated@@54 $generated@@45 $generated@@80)) (let (($generated@@81 ($generated@@30 $generated@@78 ($generated@@54 $generated@@45 $generated@@80))))
(= $generated@@81 $generated@@81)))))
 :weight 3
 :pattern ( ($generated@@41 $generated@@78 ($generated@@54 $generated@@45 $generated@@80)) ($generated@@42 $generated@@79))
))))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> ($generated@@47 $generated@@82 $generated@@83) (= $generated@@82 $generated@@83))
 :pattern ( ($generated@@47 $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ) (!  (=> ($generated@@61 $generated@@84 $generated) (and (= ($generated@@58 $generated@@5 ($generated@@57 $generated@@5 $generated@@84)) $generated@@84) ($generated@@44 $generated@@5 ($generated@@57 $generated@@5 $generated@@84) $generated)))
 :pattern ( ($generated@@61 $generated@@84 $generated))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@61 ($generated@@58 $generated@@87 $generated@@85) $generated@@86) ($generated@@44 $generated@@87 $generated@@85 $generated@@86))
 :pattern ( ($generated@@61 ($generated@@58 $generated@@87 $generated@@85) $generated@@86))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@66 $generated@@45 $generated@@88 ($generated@@46 $generated@@89) $generated@@90) (forall (($generated@@91 T@U) ) (!  (=> ($generated@@21 $generated@@88 $generated@@91) ($generated@@65 $generated@@91 $generated@@89 $generated@@90))
 :pattern ( ($generated@@21 $generated@@88 $generated@@91))
)))
 :pattern ( ($generated@@66 $generated@@45 $generated@@88 ($generated@@46 $generated@@89) $generated@@90))
)))
(assert  (=> (<= 0 $generated@@40) (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (=> (or ($generated@@72 $generated@@92 ($generated@@54 $generated@@45 $generated@@94)) (and (< 0 $generated@@40) (and (and ($generated@@42 $generated@@93) ($generated@@44 $generated@@45 $generated@@94 ($generated@@46 $generated@@92))) (not ($generated@@47 $generated@@94 $generated@@38))))) (and ($generated@@35 $generated@@92 ($generated@@54 $generated@@45 $generated@@94)) (= ($generated@@71 $generated@@92 ($generated@@54 $generated@@45 $generated@@94)) (let (($generated@@95 (let (($generated@@96 ($generated@@34 $generated@@92 ($generated@@54 $generated@@45 $generated@@94))))
(= $generated@@96 $generated@@96))))
(ite $generated@@95 6 8)))))
 :weight 3
 :pattern ( ($generated@@71 $generated@@92 ($generated@@54 $generated@@45 $generated@@94)) ($generated@@42 $generated@@93))
))))
(assert (forall (($generated@@98 T@U) ) (! (= ($generated@@97 ($generated@@46 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@46 $generated@@98))
)))
(assert (forall (($generated@@99 T@U) ) (! (= ($generated@@19 ($generated@@46 $generated@@99)) $generated@@1)
 :pattern ( ($generated@@46 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@T) ) (! (= ($generated@@57 $generated@@101 ($generated@@58 $generated@@101 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@58 $generated@@101 $generated@@100))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@102 $generated@@113 $generated@@114 $generated@@115 ($generated@@109 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@118 $generated@@119) $generated@@116)
 :weight 0
)) (and (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@125 $generated@@127) (= ($generated@@102 $generated@@120 $generated@@121 $generated@@122 ($generated@@109 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@102 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@102 $generated@@129 $generated@@130 $generated@@131 ($generated@@109 $generated@@129 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@135 $generated@@132) $generated@@136 $generated@@137) ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@133 $generated@@136 $generated@@137)))
 :weight 0
)))) (= ($generated@@3 $generated@@103) 4)) (= ($generated@@3 $generated@@104) 5)) (forall (($generated@@138 T@T) ($generated@@139 T@T) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ) (! (= ($generated@@106 $generated@@138 $generated@@139 ($generated@@110 $generated@@138 $generated@@139 $generated@@141 $generated@@142 $generated@@140) $generated@@142) $generated@@140)
 :weight 0
))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ) (!  (or (= $generated@@147 $generated@@148) (= ($generated@@106 $generated@@143 $generated@@144 ($generated@@110 $generated@@143 $generated@@144 $generated@@146 $generated@@147 $generated@@145) $generated@@148) ($generated@@106 $generated@@143 $generated@@144 $generated@@146 $generated@@148)))
 :weight 0
))) (= ($generated@@3 $generated@@107) 6)) (forall (($generated@@149 T@T) ($generated@@150 T@T) ) (= ($generated@@3 ($generated@@108 $generated@@149 $generated@@150)) 7))) (forall (($generated@@151 T@T) ($generated@@152 T@T) ) (! (= ($generated@@111 ($generated@@108 $generated@@151 $generated@@152)) $generated@@151)
 :pattern ( ($generated@@108 $generated@@151 $generated@@152))
))) (forall (($generated@@153 T@T) ($generated@@154 T@T) ) (! (= ($generated@@112 ($generated@@108 $generated@@153 $generated@@154)) $generated@@154)
 :pattern ( ($generated@@108 $generated@@153 $generated@@154))
))))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 Bool) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (= ($generated@@8 ($generated@@102 $generated@@103 $generated@@104 $generated@@4 ($generated@@105 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))  (=> (and (or (not (= $generated@@159 $generated@@155)) (not true)) ($generated@@8 ($generated@@57 $generated@@4 ($generated@@106 $generated@@104 $generated@@107 ($generated@@106 $generated@@103 ($generated@@108 $generated@@104 $generated@@107) $generated@@156 $generated@@159) $generated@@157)))) $generated@@158))
 :pattern ( ($generated@@102 $generated@@103 $generated@@104 $generated@@4 ($generated@@105 $generated@@155 $generated@@156 $generated@@157 $generated@@158) $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> ($generated@@61 $generated@@161 ($generated@@46 $generated@@162)) (and (= ($generated@@58 $generated@@45 ($generated@@57 $generated@@45 $generated@@161)) $generated@@161) ($generated@@44 $generated@@45 ($generated@@57 $generated@@45 $generated@@161) ($generated@@46 $generated@@162))))
 :pattern ( ($generated@@61 $generated@@161 ($generated@@46 $generated@@162)))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (! (= ($generated@@47 $generated@@163 $generated@@164) (forall (($generated@@165 T@U) ) (! (= ($generated@@21 $generated@@163 $generated@@165) ($generated@@21 $generated@@164 $generated@@165))
 :pattern ( ($generated@@21 $generated@@163 $generated@@165))
 :pattern ( ($generated@@21 $generated@@164 $generated@@165))
)))
 :pattern ( ($generated@@47 $generated@@163 $generated@@164))
)))
(assert (forall (($generated@@166 Int) ) (! (= ($generated@@58 $generated@@5 ($generated@@9 ($generated@@52 $generated@@166))) ($generated@@54 $generated@@107 ($generated@@58 $generated@@5 ($generated@@9 $generated@@166))))
 :pattern ( ($generated@@58 $generated@@5 ($generated@@9 ($generated@@52 $generated@@166))))
)))
(assert (forall (($generated@@167 T@U) ($generated@@168 T@T) ) (! (= ($generated@@58 $generated@@168 ($generated@@54 $generated@@168 $generated@@167)) ($generated@@54 $generated@@107 ($generated@@58 $generated@@168 $generated@@167)))
 :pattern ( ($generated@@58 $generated@@168 ($generated@@54 $generated@@168 $generated@@167)))
)))
(assert (forall (($generated@@169 T@U) ($generated@@170 T@U) ) (! ($generated@@66 $generated@@5 $generated@@170 $generated $generated@@169)
 :pattern ( ($generated@@66 $generated@@5 $generated@@170 $generated $generated@@169))
)))
(assert (forall (($generated@@171 T@U) ) (! ($generated@@44 $generated@@5 $generated@@171 $generated)
 :pattern ( ($generated@@44 $generated@@5 $generated@@171 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () Bool)
(declare-fun $generated@@177 (T@U) Bool)
(declare-fun $generated@@178 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@179  (=> (= $generated@@172 ($generated@@105 $generated@@173 $generated@@174 $generated@@2 false)) (=> (and (= $generated@@175 ($generated@@54 $generated@@45 ($generated@@20 ($generated@@20 $generated@@38 ($generated@@58 $generated@@5 ($generated@@9 ($generated@@52 12)))) ($generated@@58 $generated@@5 ($generated@@9 ($generated@@52 20)))))) ($generated@@66 $generated@@45 $generated@@175 ($generated@@46 $generated) $generated@@174)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (not ($generated@@47 $generated@@175 $generated@@38))) (=> (and (not ($generated@@47 $generated@@175 $generated@@38)) ($generated@@43 $generated $generated@@175)) (=> (and (and ($generated@@43 $generated $generated@@175) (= $generated@@176 ($generated@@41 $generated $generated@@175))) (and ($generated@@66 $generated@@45 $generated@@175 ($generated@@46 $generated) $generated@@174) (= (ControlFlow 0 2) (- 0 1)))) (not ($generated@@47 $generated@@175 $generated@@38)))))))))
(let (($generated@@180  (=> (and ($generated@@42 $generated@@174) ($generated@@177 $generated@@174)) (=> (and (and (and ($generated@@44 $generated@@45 $generated@@178 ($generated@@46 $generated)) ($generated@@66 $generated@@45 $generated@@178 ($generated@@46 $generated) $generated@@174)) true) (and (= 1 $generated@@40) (= (ControlFlow 0 4) 2))) $generated@@179))))
$generated@@180)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
