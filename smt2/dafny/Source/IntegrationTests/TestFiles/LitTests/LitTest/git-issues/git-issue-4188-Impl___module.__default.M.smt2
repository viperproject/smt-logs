(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.T1 () T@U)
(declare-fun Tagclass._module.T2 () T@U)
(declare-fun Tagclass._module.T3 () T@U)
(declare-fun Tagclass._module.T4 () T@U)
(declare-fun tytagFamily$T1 () T@U)
(declare-fun tytagFamily$T2 () T@U)
(declare-fun tytagFamily$T3 () T@U)
(declare-fun tytagFamily$T4 () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.T1 () T@U)
(declare-fun Tclass._module.T2 () T@U)
(declare-fun Tclass._module.T3 () T@U)
(declare-fun Tclass._module.T4 () T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._module.T1 Tagclass._module.T2 Tagclass._module.T3 Tagclass._module.T4 tytagFamily$T1 tytagFamily$T2 tytagFamily$T3 tytagFamily$T4)
)
(assert (forall ((|c1#0| T@U) ($h T@U) ) (! ($IsAlloc intType |c1#0| Tclass._module.T1 $h)
 :pattern ( ($IsAlloc intType |c1#0| Tclass._module.T1 $h))
)))
(assert (forall ((|c1#0@@0| T@U) ($h@@0 T@U) ) (! ($IsAlloc intType |c1#0@@0| Tclass._module.T2 $h@@0)
 :pattern ( ($IsAlloc intType |c1#0@@0| Tclass._module.T2 $h@@0))
)))
(assert (forall ((|n#0| T@U) ($h@@1 T@U) ) (! ($IsAlloc intType |n#0| Tclass._module.T3 $h@@1)
 :pattern ( ($IsAlloc intType |n#0| Tclass._module.T3 $h@@1))
)))
(assert (forall ((|i#0| T@U) ($h@@2 T@U) ) (! ($IsAlloc intType |i#0| Tclass._module.T4 $h@@2)
 :pattern ( ($IsAlloc intType |i#0| Tclass._module.T4 $h@@2))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (= (Ctor SetType) 3))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((|c0#0| T@U) ) (! (= ($Is intType |c0#0| Tclass._module.T1) (<= (LitInt 0) (U_2_int |c0#0|)))
 :pattern ( ($Is intType |c0#0| Tclass._module.T1))
)))
(assert (forall ((|n#0@@0| T@U) ) (! (= ($Is intType |n#0@@0| Tclass._module.T3) (<= (LitInt 0) (U_2_int |n#0@@0|)))
 :pattern ( ($Is intType |n#0@@0| Tclass._module.T3))
)))
(assert (forall ((|i#0@@0| T@U) ) (! (= ($Is intType |i#0@@0| Tclass._module.T4) (<= (LitInt 0) (U_2_int |i#0@@0|)))
 :pattern ( ($Is intType |i#0@@0| Tclass._module.T4))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.T1) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) Tclass._module.T1)))
 :pattern ( ($IsBox bx@@0 Tclass._module.T1))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.T2) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._module.T2)))
 :pattern ( ($IsBox bx@@1 Tclass._module.T2))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.T3) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) Tclass._module.T3)))
 :pattern ( ($IsBox bx@@2 Tclass._module.T3))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.T4) (and (= ($Box intType ($Unbox intType bx@@3)) bx@@3) ($Is intType ($Unbox intType bx@@3) Tclass._module.T4)))
 :pattern ( ($IsBox bx@@3 Tclass._module.T4))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@4) ($IsAllocBox bx@@4 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@4))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((|c0#0@@0| T@U) ) (! (= ($Is intType |c0#0@@0| Tclass._module.T2) (U_2_bool (Lit boolType (bool_2_U true))))
 :pattern ( ($Is intType |c0#0@@0| Tclass._module.T2))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@1 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@1 t1 t2 (MapType0Store t0@@1 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@2 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 (MapType1Store t0@@2 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@5 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@5 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@5)) bx@@5) ($Is SetType ($Unbox SetType bx@@5) (TSet t@@3))))
 :pattern ( ($IsBox bx@@5 (TSet t@@3)))
)))
(assert (= (Tag Tclass._module.T1) Tagclass._module.T1))
(assert (= (TagFamily Tclass._module.T1) tytagFamily$T1))
(assert (= (Tag Tclass._module.T2) Tagclass._module.T2))
(assert (= (TagFamily Tclass._module.T2) tytagFamily$T2))
(assert (= (Tag Tclass._module.T3) Tagclass._module.T3))
(assert (= (TagFamily Tclass._module.T3) tytagFamily$T3))
(assert (= (Tag Tclass._module.T4) Tagclass._module.T4))
(assert (= (TagFamily Tclass._module.T4) tytagFamily$T4))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Equal| a@@0 b@@0) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@0 o@@0) (|Set#IsMember| b@@0 o@@0))
 :pattern ( (|Set#IsMember| a@@0 o@@0))
 :pattern ( (|Set#IsMember| b@@0 o@@0))
)))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |s4#0| () T@U)
(declare-fun |i4#1@0| () Int)
(declare-fun |s3#0| () T@U)
(declare-fun |i3#0@0| () Int)
(declare-fun |i3#1@0| () Int)
(declare-fun |s2#0| () T@U)
(declare-fun |i2#0@0| () Int)
(declare-fun |s1#0| () T@U)
(declare-fun |i1#0@0| () Int)
(declare-fun |i1#1@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |i1#0| () Int)
(declare-fun |i3#0| () Int)
(declare-fun |i4#0| () Int)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let ((anon8_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T4) (|Set#IsMember| |s4#0| ($Box intType (int_2_U (LitInt 0))))) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T4) (|Set#IsMember| |s4#0| ($Box intType (int_2_U (LitInt 0))))) (exists ((|$as#i40#0| T@U) )  (and (<= (LitInt 0) (U_2_int |$as#i40#0|)) (|Set#IsMember| |s4#0| ($Box intType |$as#i40#0|)))))))))
(let ((anon12_Else_correct  (=> (and (< |i4#1@0| (LitInt 0)) (= (ControlFlow 0 4) 2)) anon8_correct)))
(let ((anon12_Then_correct  (=> (and (<= (LitInt 0) |i4#1@0|) (= (ControlFlow 0 3) 2)) anon8_correct)))
(let ((anon6_correct  (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T3) (|Set#IsMember| |s3#0| ($Box intType (int_2_U (LitInt 0))))) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T3) (|Set#IsMember| |s3#0| ($Box intType (int_2_U (LitInt 0))))) (exists ((|$as#i30#0| T@U) )  (and (<= (LitInt 0) (U_2_int |$as#i30#0|)) (|Set#IsMember| |s3#0| ($Box intType |$as#i30#0|))))))) (=> (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T3) (|Set#IsMember| |s3#0| ($Box intType (int_2_U (LitInt 0))))) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T3) (|Set#IsMember| |s3#0| ($Box intType (int_2_U (LitInt 0))))) (exists ((|$as#i30#0@@0| Int) )  (and (<= (LitInt 0) |$as#i30#0@@0|) (|Set#IsMember| |s3#0| ($Box intType (int_2_U |$as#i30#0@@0|))))))) (=> (and (<= (LitInt 0) |i3#0@0|) (|Set#IsMember| |s3#0| ($Box intType (int_2_U |i3#0@0|)))) (and (=> (= (ControlFlow 0 5) 3) anon12_Then_correct) (=> (= (ControlFlow 0 5) 4) anon12_Else_correct)))))))
(let ((anon11_Else_correct  (=> (and (< |i3#1@0| (LitInt 0)) (= (ControlFlow 0 8) 5)) anon6_correct)))
(let ((anon11_Then_correct  (=> (and (<= (LitInt 0) |i3#1@0|) (= (ControlFlow 0 7) 5)) anon6_correct)))
(let ((anon4_correct  (and (=> (= (ControlFlow 0 9) (- 0 10)) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T2) (|Set#IsMember| |s2#0| ($Box intType (int_2_U (LitInt 0))))) (exists ((|$as#i20#0| T@U) )  (and (U_2_bool (Lit boolType (bool_2_U true))) (|Set#IsMember| |s2#0| ($Box intType |$as#i20#0|)))))) (=> (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T2) (|Set#IsMember| |s2#0| ($Box intType (int_2_U (LitInt 0))))) (exists ((|$as#i20#0@@0| Int) )  (and (U_2_bool (Lit boolType (bool_2_U true))) (|Set#IsMember| |s2#0| ($Box intType (int_2_U |$as#i20#0@@0|)))))) (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (|Set#IsMember| |s2#0| ($Box intType (int_2_U |i2#0@0|)))) (and (=> (= (ControlFlow 0 9) 7) anon11_Then_correct) (=> (= (ControlFlow 0 9) 8) anon11_Else_correct)))))))
(let ((anon10_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 12) 9)) anon4_correct)))
(let ((anon10_Then_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (= (ControlFlow 0 11) 9)) anon4_correct)))
(let ((anon2_correct  (and (=> (= (ControlFlow 0 13) (- 0 14)) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T1) (|Set#IsMember| |s1#0| ($Box intType (int_2_U (LitInt 0))))) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T1) (|Set#IsMember| |s1#0| ($Box intType (int_2_U (LitInt 0))))) (exists ((|$as#i10#0| T@U) )  (and (<= (LitInt 0) (U_2_int |$as#i10#0|)) (|Set#IsMember| |s1#0| ($Box intType |$as#i10#0|))))))) (=> (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T1) (|Set#IsMember| |s1#0| ($Box intType (int_2_U (LitInt 0))))) (or (and ($Is intType (int_2_U (LitInt 0)) Tclass._module.T1) (|Set#IsMember| |s1#0| ($Box intType (int_2_U (LitInt 0))))) (exists ((|$as#i10#0@@0| Int) )  (and (<= (LitInt 0) |$as#i10#0@@0|) (|Set#IsMember| |s1#0| ($Box intType (int_2_U |$as#i10#0@@0|))))))) (=> (and (<= (LitInt 0) |i1#0@0|) (|Set#IsMember| |s1#0| ($Box intType (int_2_U |i1#0@0|)))) (and (=> (= (ControlFlow 0 13) 11) anon10_Then_correct) (=> (= (ControlFlow 0 13) 12) anon10_Else_correct)))))))
(let ((anon9_Else_correct  (=> (and (< |i1#1@0| (LitInt 0)) (= (ControlFlow 0 16) 13)) anon2_correct)))
(let ((anon9_Then_correct  (=> (and (<= (LitInt 0) |i1#1@0|) (= (ControlFlow 0 15) 13)) anon2_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 17) 15) anon9_Then_correct) (=> (= (ControlFlow 0 17) 16) anon9_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is SetType |s1#0| (TSet Tclass._module.T1)) ($IsAlloc SetType |s1#0| (TSet Tclass._module.T1) $Heap))) (and (and ($Is SetType |s2#0| (TSet Tclass._module.T2)) ($IsAlloc SetType |s2#0| (TSet Tclass._module.T2) $Heap)) (and ($Is SetType |s3#0| (TSet Tclass._module.T3)) ($IsAlloc SetType |s3#0| (TSet Tclass._module.T3) $Heap)))) (=> (and (and (and (and ($Is SetType |s4#0| (TSet Tclass._module.T4)) ($IsAlloc SetType |s4#0| (TSet Tclass._module.T4) $Heap)) (and (<= (LitInt 0) |i1#0|) true)) (and (and (U_2_bool (Lit boolType (bool_2_U true))) true) (and (<= (LitInt 0) |i3#0|) true))) (and (and (and (<= (LitInt 0) |i4#0|) true) (and (= 1 $FunctionContextHeight) (not (|Set#Equal| |s1#0| |Set#Empty|)))) (and (and (not (|Set#Equal| |s2#0| |Set#Empty|)) (not (|Set#Equal| |s3#0| |Set#Empty|))) (and (not (|Set#Equal| |s4#0| |Set#Empty|)) (= (ControlFlow 0 18) 17))))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
