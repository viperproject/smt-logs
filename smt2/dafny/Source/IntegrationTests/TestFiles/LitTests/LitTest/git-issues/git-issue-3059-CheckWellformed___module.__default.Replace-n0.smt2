(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@34 (T@U Int) T@U)
(declare-fun $generated@@35 (T@U Int T@U) T@U)
(declare-fun $generated@@40 (Int) Int)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@U T@U) Bool)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 (T@T T@T) T@T)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T) T@T)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@134 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@5 $generated@@25) 3))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@29 T@U) ) (!  (=> (or ($generated@@23 $generated@@29) (and (< 1 $generated@@21) (and ($generated@@24 $generated@@25 $generated@@29 $generated@@26) (> ($generated@@27 $generated@@29) 0)))) (and ($generated@@10 ($generated@@28 $generated@@6 ($generated@@9 false))) ($generated@@24 $generated@@25 ($generated@@22 $generated@@29) $generated@@26)))
 :pattern ( ($generated@@22 $generated@@29))
))))
(assert (= ($generated@@30 $generated) $generated@@0))
(assert (forall (($generated@@33 T@U) ) (!  (not ($generated@@31 $generated@@32 $generated@@33))
 :pattern ( ($generated@@31 $generated@@32 $generated@@33))
)))
(assert (= ($generated@@27 $generated@@32) 0))
(assert (forall (($generated@@36 T@U) ($generated@@37 Int) ($generated@@38 T@U) ($generated@@39 Int) ) (!  (=> (and (<= 0 $generated@@39) (< $generated@@39 ($generated@@27 $generated@@36))) (and (=> (= $generated@@37 $generated@@39) (= ($generated@@34 ($generated@@35 $generated@@36 $generated@@37 $generated@@38) $generated@@39) $generated@@38)) (=> (or (not (= $generated@@37 $generated@@39)) (not true)) (= ($generated@@34 ($generated@@35 $generated@@36 $generated@@37 $generated@@38) $generated@@39) ($generated@@34 $generated@@36 $generated@@39)))))
 :pattern ( ($generated@@34 ($generated@@35 $generated@@36 $generated@@37 $generated@@38) $generated@@39))
)))
(assert (forall (($generated@@41 Int) ) (! (= ($generated@@40 $generated@@41) $generated@@41)
 :pattern ( ($generated@@40 $generated@@41))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@28 $generated@@43 $generated@@42) $generated@@42)
 :pattern ( ($generated@@28 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@46 $generated@@26)  (and ($generated@@24 $generated@@25 $generated@@46 ($generated@@44 $generated)) (forall (($generated@@47 Int) )  (=> ($generated@@31 $generated@@46 ($generated@@45 $generated@@7 ($generated@@11 $generated@@47))) (= $generated@@47 ($generated@@40 0))))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@46 $generated@@26))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@45 $generated@@50 ($generated@@48 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@48 $generated@@50 $generated@@49))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@51 T@U) ) (!  (=> (or ($generated@@23 $generated@@51) (and (< 1 $generated@@21) (and ($generated@@24 $generated@@25 $generated@@51 $generated@@26) (> ($generated@@27 $generated@@51) 0)))) (= ($generated@@22 $generated@@51) (let (($generated@@52 ($generated@@35 $generated@@51 ($generated@@40 0) ($generated@@45 $generated@@7 ($generated@@11 ($generated@@40 1))))))
$generated@@52)))
 :pattern ( ($generated@@22 $generated@@51))
))))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@53 $generated@@54 $generated@@26) (and (= ($generated@@45 $generated@@25 ($generated@@48 $generated@@25 $generated@@54)) $generated@@54) ($generated@@24 $generated@@25 ($generated@@48 $generated@@25 $generated@@54) $generated@@26)))
 :pattern ( ($generated@@53 $generated@@54 $generated@@26))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@31 $generated@@55 $generated@@56) (exists (($generated@@57 Int) ) (!  (and (and (<= 0 $generated@@57) (< $generated@@57 ($generated@@27 $generated@@55))) (= ($generated@@34 $generated@@55 $generated@@57) $generated@@56))
 :pattern ( ($generated@@34 $generated@@55 $generated@@57))
)))
 :pattern ( ($generated@@31 $generated@@55 $generated@@56))
)))
(assert  (=> (<= 1 $generated@@21) (forall (($generated@@58 T@U) ) (!  (=> (or ($generated@@23 ($generated@@28 $generated@@25 $generated@@58)) (and (< 1 $generated@@21) (and ($generated@@24 $generated@@25 $generated@@58 $generated@@26) (> ($generated@@27 ($generated@@28 $generated@@25 $generated@@58)) 0)))) (= ($generated@@22 ($generated@@28 $generated@@25 $generated@@58)) (let (($generated@@59 ($generated@@35 ($generated@@28 $generated@@25 $generated@@58) ($generated@@40 0) ($generated@@45 $generated@@7 ($generated@@11 ($generated@@40 1))))))
$generated@@59)))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@28 $generated@@25 $generated@@58)))
))))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@53 $generated@@60 $generated) (and (= ($generated@@45 $generated@@7 ($generated@@48 $generated@@7 $generated@@60)) $generated@@60) ($generated@@24 $generated@@7 ($generated@@48 $generated@@7 $generated@@60) $generated)))
 :pattern ( ($generated@@53 $generated@@60 $generated))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@53 ($generated@@45 $generated@@63 $generated@@61) $generated@@62) ($generated@@24 $generated@@63 $generated@@61 $generated@@62))
 :pattern ( ($generated@@53 ($generated@@45 $generated@@63 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ) (! (<= 0 ($generated@@27 $generated@@64))
 :pattern ( ($generated@@27 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@65 ($generated@@44 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@44 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@30 ($generated@@44 $generated@@67)) $generated@@1)
 :pattern ( ($generated@@44 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@48 $generated@@69 ($generated@@45 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@45 $generated@@69 $generated@@68))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@70 $generated@@81 $generated@@82 $generated@@83 ($generated@@77 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@86 $generated@@87) $generated@@84)
 :weight 0
)) (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@70 $generated@@88 $generated@@89 $generated@@90 ($generated@@77 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@70 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@70 $generated@@97 $generated@@98 $generated@@99 ($generated@@77 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)))) (= ($generated@@5 $generated@@71) 4)) (= ($generated@@5 $generated@@72) 5)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@74 $generated@@106 $generated@@107 ($generated@@78 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@110) $generated@@108)
 :weight 0
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@74 $generated@@111 $generated@@112 ($generated@@78 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@74 $generated@@111 $generated@@112 $generated@@114 $generated@@116)))
 :weight 0
))) (= ($generated@@5 $generated@@75) 6)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (= ($generated@@5 ($generated@@76 $generated@@117 $generated@@118)) 7))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@79 ($generated@@76 $generated@@119 $generated@@120)) $generated@@119)
 :pattern ( ($generated@@76 $generated@@119 $generated@@120))
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (! (= ($generated@@80 ($generated@@76 $generated@@121 $generated@@122)) $generated@@122)
 :pattern ( ($generated@@76 $generated@@121 $generated@@122))
))))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 Bool) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@10 ($generated@@70 $generated@@71 $generated@@72 $generated@@6 ($generated@@73 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))  (=> (and (or (not (= $generated@@127 $generated@@123)) (not true)) ($generated@@10 ($generated@@48 $generated@@6 ($generated@@74 $generated@@72 $generated@@75 ($generated@@74 $generated@@71 ($generated@@76 $generated@@72 $generated@@75) $generated@@124 $generated@@127) $generated@@125)))) $generated@@126))
 :pattern ( ($generated@@70 $generated@@71 $generated@@72 $generated@@6 ($generated@@73 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 Int) ($generated@@131 T@U) ) (!  (=> (and (<= 0 $generated@@130) (< $generated@@130 ($generated@@27 $generated@@129))) (= ($generated@@27 ($generated@@35 $generated@@129 $generated@@130 $generated@@131)) ($generated@@27 $generated@@129)))
 :pattern ( ($generated@@27 ($generated@@35 $generated@@129 $generated@@130 $generated@@131)))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> ($generated@@53 $generated@@132 ($generated@@44 $generated@@133)) (and (= ($generated@@45 $generated@@25 ($generated@@48 $generated@@25 $generated@@132)) $generated@@132) ($generated@@24 $generated@@25 ($generated@@48 $generated@@25 $generated@@132) ($generated@@44 $generated@@133))))
 :pattern ( ($generated@@53 $generated@@132 ($generated@@44 $generated@@133)))
)))
(assert (= ($generated@@30 $generated@@26) $generated@@3))
(assert (= ($generated@@134 $generated@@26) $generated@@4))
(assert (forall (($generated@@135 Int) ) (! (= ($generated@@45 $generated@@7 ($generated@@11 ($generated@@40 $generated@@135))) ($generated@@28 $generated@@75 ($generated@@45 $generated@@7 ($generated@@11 $generated@@135))))
 :pattern ( ($generated@@45 $generated@@7 ($generated@@11 ($generated@@40 $generated@@135))))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@T) ) (! (= ($generated@@45 $generated@@137 ($generated@@28 $generated@@137 $generated@@136)) ($generated@@28 $generated@@75 ($generated@@45 $generated@@137 $generated@@136)))
 :pattern ( ($generated@@45 $generated@@137 ($generated@@28 $generated@@137 $generated@@136)))
)))
(assert (forall (($generated@@138 T@U) ) (!  (=> (= ($generated@@27 $generated@@138) 0) (= $generated@@138 $generated@@32))
 :pattern ( ($generated@@27 $generated@@138))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@139 ($generated@@44 $generated@@140)) (forall (($generated@@141 Int) ) (!  (=> (and (<= 0 $generated@@141) (< $generated@@141 ($generated@@27 $generated@@139))) ($generated@@53 ($generated@@34 $generated@@139 $generated@@141) $generated@@140))
 :pattern ( ($generated@@34 $generated@@139 $generated@@141))
)))
 :pattern ( ($generated@@24 $generated@@25 $generated@@139 ($generated@@44 $generated@@140)))
)))
(assert (forall (($generated@@142 T@U) ) (! ($generated@@24 $generated@@7 $generated@@142 $generated)
 :pattern ( ($generated@@24 $generated@@7 $generated@@142 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 (T@U) Bool)
(declare-fun $generated@@150 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@151  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@10 ($generated@@28 $generated@@6 ($generated@@9 false))))))
(let (($generated@@152  (and (=> (= (ControlFlow 0 4) (- 0 8)) (and (<= 0 ($generated@@40 0)) (< ($generated@@40 0) ($generated@@27 $generated@@143)))) (=> (and (<= 0 ($generated@@40 0)) (< ($generated@@40 0) ($generated@@27 $generated@@143))) (=> (= $generated@@144 ($generated@@35 $generated@@143 ($generated@@40 0) ($generated@@45 $generated@@7 ($generated@@11 ($generated@@40 1))))) (=> (and ($generated@@24 $generated@@25 $generated@@144 ($generated@@44 $generated)) (= $generated@@145 $generated@@144)) (and (=> (= (ControlFlow 0 4) (- 0 7)) (and (<= 0 ($generated@@40 0)) (< ($generated@@40 0) ($generated@@27 $generated@@145)))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (not (= ($generated@@12 ($generated@@48 $generated@@7 ($generated@@34 $generated@@145 ($generated@@40 0)))) 0)) (not true))) (=> (or (not (= ($generated@@12 ($generated@@48 $generated@@7 ($generated@@34 $generated@@145 ($generated@@40 0)))) 0)) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 5)) ($generated@@24 $generated@@25 $generated@@145 $generated@@26)) (=> ($generated@@24 $generated@@25 $generated@@145 $generated@@26) (=> (= ($generated@@22 $generated@@143) $generated@@145) (=> (and ($generated@@24 $generated@@25 ($generated@@22 $generated@@143) $generated@@26) (= (ControlFlow 0 4) 3)) $generated@@151)))))))))))))
(let (($generated@@153 true))
(let (($generated@@154  (=> (and (= $generated@@146 ($generated@@73 $generated@@147 $generated@@148 $generated@@2 false)) (> ($generated@@27 $generated@@143) 0)) (and (=> (= (ControlFlow 0 9) 1) $generated@@153) (=> (= (ControlFlow 0 9) 4) $generated@@152)))))
(let (($generated@@155  (=> (and (and (and ($generated@@149 $generated@@148) ($generated@@150 $generated@@148)) ($generated@@24 $generated@@25 $generated@@143 $generated@@26)) (and (= 1 $generated@@21) (= (ControlFlow 0 10) 9))) $generated@@154)))
$generated@@155))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
