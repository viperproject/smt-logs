(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (Int) Int)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@17 (T@T T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 ((_ BitVec 8)) Int)
(declare-fun $generated@@28 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@32 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@T T@T) T@T)
(declare-fun $generated@@35 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 Int) ) (! (= ($generated $generated@@16) $generated@@16)
 :pattern ( ($generated $generated@@16))
)))
(assert (forall (($generated@@18 T@U) ($generated@@19 T@T) ) (! (= ($generated@@17 $generated@@19 $generated@@18) $generated@@18)
 :pattern ( ($generated@@17 $generated@@19 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 ($generated@@20 $generated@@23 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@25 (_ BitVec 8)) ) (!  (and (and (<= 0 ($generated@@24 $generated@@25)) (< ($generated@@24 $generated@@25) 256)) (= ($generated@@24 $generated@@25) (bv2int $generated@@25)))
 :pattern ( ($generated@@24 $generated@@25))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@20 $generated@@27 ($generated@@21 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@21 $generated@@27 $generated@@26))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@28 $generated@@39 $generated@@40 $generated@@41 ($generated@@35 $generated@@39 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@45 $generated@@42) $generated@@44 $generated@@45) $generated@@42)
 :weight 0
)) (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (!  (or (= $generated@@51 $generated@@53) (= ($generated@@28 $generated@@46 $generated@@47 $generated@@48 ($generated@@35 $generated@@46 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@52 $generated@@49) $generated@@53 $generated@@54) ($generated@@28 $generated@@46 $generated@@47 $generated@@48 $generated@@50 $generated@@53 $generated@@54)))
 :weight 0
)) (forall (($generated@@55 T@T) ($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@61 $generated@@63) (= ($generated@@28 $generated@@55 $generated@@56 $generated@@57 ($generated@@35 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@61 $generated@@58) $generated@@62 $generated@@63) ($generated@@28 $generated@@55 $generated@@56 $generated@@57 $generated@@59 $generated@@62 $generated@@63)))
 :weight 0
)))) (= ($generated@@0 $generated@@29) 3)) (= ($generated@@0 $generated@@30) 4)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@32 $generated@@64 $generated@@65 ($generated@@36 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@66) $generated@@68) $generated@@66)
 :weight 0
))) (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (or (= $generated@@73 $generated@@74) (= ($generated@@32 $generated@@69 $generated@@70 ($generated@@36 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@71) $generated@@74) ($generated@@32 $generated@@69 $generated@@70 $generated@@72 $generated@@74)))
 :weight 0
))) (= ($generated@@0 $generated@@33) 5)) (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (= ($generated@@0 ($generated@@34 $generated@@75 $generated@@76)) 6))) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (! (= ($generated@@37 ($generated@@34 $generated@@77 $generated@@78)) $generated@@77)
 :pattern ( ($generated@@34 $generated@@77 $generated@@78))
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@38 ($generated@@34 $generated@@79 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@34 $generated@@79 $generated@@80))
))))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 Bool) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@5 ($generated@@28 $generated@@29 $generated@@30 $generated@@1 ($generated@@31 $generated@@81 $generated@@82 $generated@@83 $generated@@84) $generated@@85 $generated@@86))  (=> (and (or (not (= $generated@@85 $generated@@81)) (not true)) ($generated@@5 ($generated@@20 $generated@@1 ($generated@@32 $generated@@30 $generated@@33 ($generated@@32 $generated@@29 ($generated@@34 $generated@@30 $generated@@33) $generated@@82 $generated@@85) $generated@@83)))) $generated@@84))
 :pattern ( ($generated@@28 $generated@@29 $generated@@30 $generated@@1 ($generated@@31 $generated@@81 $generated@@82 $generated@@83 $generated@@84) $generated@@85 $generated@@86))
)))
(assert (forall (($generated@@87 Int) ) (! (= ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@87))) ($generated@@17 $generated@@33 ($generated@@21 $generated@@2 ($generated@@6 $generated@@87))))
 :pattern ( ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@87))))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@21 $generated@@89 ($generated@@17 $generated@@89 $generated@@88)) ($generated@@17 $generated@@33 ($generated@@21 $generated@@89 $generated@@88)))
 :pattern ( ($generated@@21 $generated@@89 ($generated@@17 $generated@@89 $generated@@88)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@90 () T@U)
(declare-fun $generated@@91 () T@U)
(declare-fun $generated@@92 () T@U)
(declare-fun $generated@@93 () T@U)
(declare-fun $generated@@94 () Int)
(declare-fun $generated@@95 () (_ BitVec 8))
(declare-fun $generated@@96 () Int)
(declare-fun $generated@@97 (T@U) Bool)
(declare-fun $generated@@98 (T@U) Bool)
(declare-fun $generated@@99 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@100  (=> (and (= $generated@@90 ($generated@@31 $generated@@91 $generated@@92 $generated@@93 false)) (= $generated@@94 ($generated 239))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 $generated@@94) (< $generated@@94 256))) (=> (and (<= 0 $generated@@94) (< $generated@@94 256)) (=> (= $generated@@95 ((_ int2bv 8) $generated@@94)) (=> (and (= $generated@@96 ($generated@@24 $generated@@95)) (= (ControlFlow 0 2) (- 0 1))) (= $generated@@96 $generated@@94))))))))
(let (($generated@@101  (=> (and (and ($generated@@97 $generated@@92) ($generated@@98 $generated@@92)) (and (= 0 $generated@@99) (= (ControlFlow 0 4) 2))) $generated@@100)))
$generated@@101)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
