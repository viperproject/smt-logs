(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@T T@T) T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@30 (T@T) T@T)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@52 (Int) Int)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@U) T@U)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@106 (Int Int) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (forall (($generated@@17 T@U) ) (!  (not ($generated $generated@@0 $generated@@17))
 :pattern ( ($generated $generated@@0 $generated@@17))
)))
(assert (forall (($generated@@19 T@U) ) (!  (and (= (= ($generated@@18 $generated@@19) 0) (= $generated@@19 $generated@@0)) (=> (or (not (= ($generated@@18 $generated@@19) 0)) (not true)) (exists (($generated@@20 T@U) ) (! ($generated $generated@@19 $generated@@20)
 :pattern ( ($generated $generated@@19 $generated@@20))
))))
 :pattern ( ($generated@@18 $generated@@19))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@22 $generated@@32 $generated@@33 ($generated@@29 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@36) $generated@@34)
 :weight 0
)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (!  (or (= $generated@@41 $generated@@42) (= ($generated@@22 $generated@@37 $generated@@38 ($generated@@29 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@42) ($generated@@22 $generated@@37 $generated@@38 $generated@@40 $generated@@42)))
 :weight 0
))) (= ($generated@@1 $generated@@23) 3)) (= ($generated@@1 $generated@@24) 4)) (= ($generated@@1 $generated@@25) 5)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (= ($generated@@1 ($generated@@26 $generated@@43 $generated@@44)) 6))) (forall (($generated@@45 T@T) ($generated@@46 T@T) ) (! (= ($generated@@30 ($generated@@26 $generated@@45 $generated@@46)) $generated@@45)
 :pattern ( ($generated@@26 $generated@@45 $generated@@46))
))) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (! (= ($generated@@31 ($generated@@26 $generated@@47 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@26 $generated@@47 $generated@@48))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> ($generated@@21 $generated@@49 $generated@@50) (forall (($generated@@51 T@U) ) (!  (=> ($generated@@6 ($generated@@28 $generated@@2 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@49 $generated@@51) $generated@@27))) ($generated@@6 ($generated@@28 $generated@@2 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@50 $generated@@51) $generated@@27))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@50 $generated@@51) $generated@@27))
)))
 :pattern ( ($generated@@21 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@52 $generated@@53) $generated@@53)
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@28 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@28 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated ($generated@@60 $generated@@61) $generated@@62) ($generated@@6 ($generated@@22 $generated@@24 $generated@@2 $generated@@61 $generated@@62)))
 :pattern ( ($generated ($generated@@60 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (!  (=> (or (not (= $generated@@63 $generated@@65)) (not true)) (=> (and ($generated@@21 $generated@@63 $generated@@64) ($generated@@21 $generated@@64 $generated@@65)) ($generated@@21 $generated@@63 $generated@@65)))
 :pattern ( ($generated@@21 $generated@@63 $generated@@64) ($generated@@21 $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@66 T@U) ) (! (<= 0 ($generated@@18 $generated@@66))
 :pattern ( ($generated@@18 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@28 $generated@@68 ($generated@@57 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@57 $generated@@68 $generated@@67))
)))
(assert  (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@69 $generated@@72 $generated@@73 $generated@@74 ($generated@@71 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@77 $generated@@78) $generated@@75)
 :weight 0
)) (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@69 $generated@@79 $generated@@80 $generated@@81 ($generated@@71 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@69 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@69 $generated@@88 $generated@@89 $generated@@90 ($generated@@71 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@69 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)))))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 Bool) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@6 ($generated@@69 $generated@@25 $generated@@23 $generated@@2 ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))  (=> (and (or (not (= $generated@@101 $generated@@97)) (not true)) ($generated@@6 ($generated@@28 $generated@@2 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@98 $generated@@101) $generated@@99)))) $generated@@100))
 :pattern ( ($generated@@69 $generated@@25 $generated@@23 $generated@@2 ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 Int) ) (! (= ($generated@@57 $generated@@3 ($generated@@7 ($generated@@52 $generated@@103))) ($generated@@54 $generated@@24 ($generated@@57 $generated@@3 ($generated@@7 $generated@@103))))
 :pattern ( ($generated@@57 $generated@@3 ($generated@@7 ($generated@@52 $generated@@103))))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@T) ) (! (= ($generated@@57 $generated@@105 ($generated@@54 $generated@@105 $generated@@104)) ($generated@@54 $generated@@24 ($generated@@57 $generated@@105 $generated@@104)))
 :pattern ( ($generated@@57 $generated@@105 ($generated@@54 $generated@@105 $generated@@104)))
)))
(assert (forall (($generated@@107 Int) ($generated@@108 Int) ($generated@@109 T@U) ) (! (= ($generated@@6 ($generated@@22 $generated@@24 $generated@@2 ($generated@@106 $generated@@107 $generated@@108) $generated@@109)) (exists (($generated@@110 Int) )  (and (and (<= $generated@@107 $generated@@110) (< $generated@@110 $generated@@108)) (= $generated@@109 ($generated@@57 $generated@@3 ($generated@@7 $generated@@110))))))
 :pattern ( ($generated@@22 $generated@@24 $generated@@2 ($generated@@106 $generated@@107 $generated@@108) $generated@@109))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@111 () Bool)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let (($generated@@124 true))
(let (($generated@@125 true))
(let (($generated@@126  (=> $generated@@111 (and (=> (= (ControlFlow 0 6) 4) $generated@@125) (=> (= (ControlFlow 0 6) 5) $generated@@124)))))
(let (($generated@@127 true))
(let (($generated@@128  (and (=> (= (ControlFlow 0 7) 3) $generated@@127) (=> (= (ControlFlow 0 7) 6) $generated@@126))))
(let (($generated@@129 true))
(let (($generated@@130  (=> (and (and (and (and (and (not false) (<= 0 $generated@@112)) (<= 0 $generated@@113)) (= $generated@@114 0)) (<= 0 $generated@@115)) (and (and (and (<= $generated@@114 $generated@@113) (<= $generated@@113 $generated@@115)) (forall (($generated@@131 T@U) ) (!  (=> (and (or (not (= $generated@@131 $generated@@117)) (not true)) ($generated@@6 ($generated@@28 $generated@@2 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@116 $generated@@131) $generated@@27)))) (= ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@116 $generated@@131) ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@116 $generated@@131)))
 :pattern ( ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@116 $generated@@131))
))) (and ($generated@@21 $generated@@116 $generated@@116) (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> (and (or (not (= $generated@@132 $generated@@117)) (not true)) ($generated@@6 ($generated@@28 $generated@@2 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@116 $generated@@132) $generated@@27)))) (or (= ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@116 $generated@@132) $generated@@133) ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@116 $generated@@132) $generated@@133)) ($generated@@6 ($generated@@69 $generated@@25 $generated@@23 $generated@@2 $generated@@118 $generated@@132 $generated@@133))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@116 $generated@@132) $generated@@133))
))))) (and (=> (= (ControlFlow 0 8) 2) $generated@@129) (=> (= (ControlFlow 0 8) 7) $generated@@128)))))
(let (($generated@@134  (=> (= $generated@@115 ($generated@@18 ($generated@@60 ($generated@@106 ($generated@@52 0) 3)))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (<= $generated@@114 $generated@@115)) (=> (<= $generated@@114 $generated@@115) (=> (= (ControlFlow 0 9) 8) $generated@@130))))))
(let (($generated@@135  (=> (and (not (and (<= ($generated@@52 0) $generated@@119) (< $generated@@119 3))) (= (ControlFlow 0 12) 9)) $generated@@134)))
(let (($generated@@136  (=> (and (and (<= ($generated@@52 0) $generated@@119) (< $generated@@119 3)) (= (ControlFlow 0 11) 9)) $generated@@134)))
(let (($generated@@137  (=> (< $generated@@119 ($generated@@52 0)) (and (=> (= (ControlFlow 0 14) 11) $generated@@136) (=> (= (ControlFlow 0 14) 12) $generated@@135)))))
(let (($generated@@138  (=> (<= ($generated@@52 0) $generated@@119) (and (=> (= (ControlFlow 0 13) 11) $generated@@136) (=> (= (ControlFlow 0 13) 12) $generated@@135)))))
(let (($generated@@139  (and (=> (= (ControlFlow 0 15) 13) $generated@@138) (=> (= (ControlFlow 0 15) 14) $generated@@137))))
(let (($generated@@140 true))
(let (($generated@@141  (=> (= $generated@@118 ($generated@@70 $generated@@117 $generated@@116 $generated@@27 false)) (=> (and (= $generated@@120 ($generated@@52 0)) (= $generated@@114 ($generated@@52 0))) (and (=> (= (ControlFlow 0 16) 15) $generated@@139) (=> (= (ControlFlow 0 16) 1) $generated@@140))))))
(let (($generated@@142  (=> (and (and ($generated@@121 $generated@@116) ($generated@@122 $generated@@116)) (and (= 0 $generated@@123) (= (ControlFlow 0 17) 16))) $generated@@141)))
$generated@@142)))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
