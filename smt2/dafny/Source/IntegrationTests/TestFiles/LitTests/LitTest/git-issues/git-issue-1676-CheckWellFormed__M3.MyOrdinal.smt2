(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@23 (Int) T@U)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@U) Int)
(declare-fun $generated@@34 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 (T@T T@T) T@T)
(declare-fun $generated@@41 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@42 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@44 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@U) ($generated@@18 T@U) ) (!  (=> (and ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18)) ($generated $generated@@16 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@17 $generated@@18))
 :pattern ( ($generated $generated@@16 $generated@@17) ($generated $generated@@16 $generated@@18))
)))
(assert (forall (($generated@@21 T@U) ($generated@@22 T@T) ) (! (= ($generated@@20 $generated@@22 ($generated@@19 $generated@@22 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@19 $generated@@22 $generated@@21))
)))
(assert (forall (($generated@@26 Int) ) (!  (=> (<= 0 $generated@@26) (and ($generated@@24 ($generated@@23 $generated@@26)) (= ($generated@@25 ($generated@@23 $generated@@26)) $generated@@26)))
 :pattern ( ($generated@@23 $generated@@26))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (!  (or (or ($generated $generated@@27 $generated@@28) (= $generated@@27 $generated@@28)) ($generated $generated@@28 $generated@@27))
 :pattern ( ($generated $generated@@27 $generated@@28) ($generated $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ) (! (<= 0 ($generated@@25 $generated@@29))
 :pattern ( ($generated@@25 $generated@@29))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@19 $generated@@31 ($generated@@20 $generated@@31 $generated@@30)) $generated@@30)
 :pattern ( ($generated@@20 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (!  (and (and (and (=> ($generated $generated@@32 $generated@@33) (or (not (= $generated@@32 $generated@@33)) (not true))) (=> (and ($generated@@24 $generated@@32) (not ($generated@@24 $generated@@33))) ($generated $generated@@32 $generated@@33))) (=> (and ($generated@@24 $generated@@32) ($generated@@24 $generated@@33)) (= ($generated $generated@@32 $generated@@33) (< ($generated@@25 $generated@@32) ($generated@@25 $generated@@33))))) (=> (and ($generated $generated@@32 $generated@@33) ($generated@@24 $generated@@33)) ($generated@@24 $generated@@32)))
 :pattern ( ($generated $generated@@32 $generated@@33))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@34 $generated@@45 $generated@@46 $generated@@47 ($generated@@41 $generated@@45 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@51 $generated@@48) $generated@@50 $generated@@51) $generated@@48)
 :weight 0
)) (and (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (or (= $generated@@57 $generated@@59) (= ($generated@@34 $generated@@52 $generated@@53 $generated@@54 ($generated@@41 $generated@@52 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@58 $generated@@55) $generated@@59 $generated@@60) ($generated@@34 $generated@@52 $generated@@53 $generated@@54 $generated@@56 $generated@@59 $generated@@60)))
 :weight 0
)) (forall (($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (or (= $generated@@67 $generated@@69) (= ($generated@@34 $generated@@61 $generated@@62 $generated@@63 ($generated@@41 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@66 $generated@@67 $generated@@64) $generated@@68 $generated@@69) ($generated@@34 $generated@@61 $generated@@62 $generated@@63 $generated@@65 $generated@@68 $generated@@69)))
 :weight 0
)))) (= ($generated@@0 $generated@@35) 3)) (= ($generated@@0 $generated@@36) 4)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@38 $generated@@70 $generated@@71 ($generated@@42 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@72) $generated@@74) $generated@@72)
 :weight 0
))) (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@79 $generated@@80) (= ($generated@@38 $generated@@75 $generated@@76 ($generated@@42 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@77) $generated@@80) ($generated@@38 $generated@@75 $generated@@76 $generated@@78 $generated@@80)))
 :weight 0
))) (= ($generated@@0 $generated@@39) 5)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ) (= ($generated@@0 ($generated@@40 $generated@@81 $generated@@82)) 6))) (forall (($generated@@83 T@T) ($generated@@84 T@T) ) (! (= ($generated@@43 ($generated@@40 $generated@@83 $generated@@84)) $generated@@83)
 :pattern ( ($generated@@40 $generated@@83 $generated@@84))
))) (forall (($generated@@85 T@T) ($generated@@86 T@T) ) (! (= ($generated@@44 ($generated@@40 $generated@@85 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@40 $generated@@85 $generated@@86))
))))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 Bool) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@5 ($generated@@34 $generated@@35 $generated@@36 $generated@@1 ($generated@@37 $generated@@87 $generated@@88 $generated@@89 $generated@@90) $generated@@91 $generated@@92))  (=> (and (or (not (= $generated@@91 $generated@@87)) (not true)) ($generated@@5 ($generated@@19 $generated@@1 ($generated@@38 $generated@@36 $generated@@39 ($generated@@38 $generated@@35 ($generated@@40 $generated@@36 $generated@@39) $generated@@88 $generated@@91) $generated@@89)))) $generated@@90))
 :pattern ( ($generated@@34 $generated@@35 $generated@@36 $generated@@1 ($generated@@37 $generated@@87 $generated@@88 $generated@@89 $generated@@90) $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ) (!  (=> ($generated@@24 $generated@@93) (= $generated@@93 ($generated@@23 ($generated@@25 $generated@@93))))
 :pattern ( ($generated@@25 $generated@@93))
 :pattern ( ($generated@@24 $generated@@93))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@94 () T@U)
(declare-fun $generated@@95 () T@U)
(declare-fun $generated@@96 () T@U)
(declare-fun $generated@@97 () T@U)
(declare-fun $generated@@98 () T@U)
(declare-fun $generated@@99 (T@U) Bool)
(declare-fun $generated@@100 (T@U) Bool)
(declare-fun $generated@@101 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@102 true))
(let (($generated@@103  (=> (and (not (or (= ($generated@@23 1000) $generated@@94) ($generated ($generated@@23 1000) $generated@@94))) (= (ControlFlow 0 6) 4)) $generated@@102)))
(let (($generated@@104  (=> (and (or (= ($generated@@23 1000) $generated@@94) ($generated ($generated@@23 1000) $generated@@94)) (= (ControlFlow 0 5) 4)) $generated@@102)))
(let (($generated@@105  (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (= ($generated@@23 1000) ($generated@@23 1001)) ($generated ($generated@@23 1000) ($generated@@23 1001)))) (=> (= (ControlFlow 0 2) (- 0 1)) ($generated ($generated@@23 1001) ($generated@@23 1200))))))
(let (($generated@@106  (=> (= $generated@@95 ($generated@@37 $generated@@96 $generated@@97 $generated@@98 false)) (and (and (=> (= (ControlFlow 0 7) 2) $generated@@105) (=> (= (ControlFlow 0 7) 5) $generated@@104)) (=> (= (ControlFlow 0 7) 6) $generated@@103)))))
(let (($generated@@107  (=> (and (and ($generated@@99 $generated@@97) ($generated@@100 $generated@@97)) (and (= 0 $generated@@101) (= (ControlFlow 0 8) 7))) $generated@@106)))
$generated@@107)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
