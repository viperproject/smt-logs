(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@T T@T) T@T)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@32 (T@T) T@T)
(declare-fun $generated@@53 (T@U) Bool)
(declare-fun $generated@@54 (T@U) T@U)
(declare-fun $generated@@56 (T@U) Bool)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@61 (Int) T@U)
(declare-fun $generated@@64 (Int) T@U)
(declare-fun $generated@@67 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@73 (T@U) Bool)
(declare-fun $generated@@75 (T@T T@U T@U) Bool)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 () T@U)
(declare-fun $generated@@83 (T@U) Int)
(declare-fun $generated@@86 (T@U) Int)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@133 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@24 $generated@@33 $generated@@34 ($generated@@30 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@37) $generated@@35)
 :weight 0
)) (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (or (= $generated@@42 $generated@@43) (= ($generated@@24 $generated@@38 $generated@@39 ($generated@@30 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@43) ($generated@@24 $generated@@38 $generated@@39 $generated@@41 $generated@@43)))
 :weight 0
))) (= ($generated@@6 $generated@@25) 3)) (= ($generated@@6 $generated@@26) 4)) (= ($generated@@6 $generated@@27) 5)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (= ($generated@@6 ($generated@@28 $generated@@44 $generated@@45)) 6))) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (! (= ($generated@@31 ($generated@@28 $generated@@46 $generated@@47)) $generated@@46)
 :pattern ( ($generated@@28 $generated@@46 $generated@@47))
))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@32 ($generated@@28 $generated@@48 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@28 $generated@@48 $generated@@49))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (!  (=> ($generated@@23 $generated@@50 $generated@@51) (forall (($generated@@52 T@U) ) (!  (=> ($generated@@11 ($generated@@29 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@50 $generated@@52) $generated@@1))) ($generated@@11 ($generated@@29 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@51 $generated@@52) $generated@@1))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@51 $generated@@52) $generated@@1))
)))
 :pattern ( ($generated@@23 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@53 $generated@@55) (= ($generated@@54 $generated@@55) $generated@@3))
 :pattern ( ($generated@@53 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@56 $generated@@57) (= ($generated@@54 $generated@@57) $generated@@4))
 :pattern ( ($generated@@56 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 ($generated@@29 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@29 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@62 T@U) ) (!  (=> ($generated@@53 $generated@@62) (exists (($generated@@63 Int) ) (= $generated@@62 ($generated@@61 $generated@@63))))
 :pattern ( ($generated@@53 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ) (!  (=> ($generated@@56 $generated@@65) (exists (($generated@@66 Int) ) (= $generated@@65 ($generated@@64 $generated@@66))))
 :pattern ( ($generated@@56 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@T) ) (!  (=> ($generated@@23 $generated@@68 $generated@@69) (=> ($generated@@67 $generated@@72 $generated@@70 $generated@@71 $generated@@68) ($generated@@67 $generated@@72 $generated@@70 $generated@@71 $generated@@69)))
 :pattern ( ($generated@@23 $generated@@68 $generated@@69) ($generated@@67 $generated@@72 $generated@@70 $generated@@71 $generated@@68))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@73 $generated@@74) (or ($generated@@53 $generated@@74) ($generated@@56 $generated@@74)))
 :pattern ( ($generated@@73 $generated@@74))
)))
(assert (= ($generated@@6 $generated@@76) 7))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@75 $generated@@76 $generated@@78 $generated@@77) (or ($generated@@53 $generated@@78) ($generated@@56 $generated@@78)))
 :pattern ( ($generated@@56 $generated@@78) ($generated@@75 $generated@@76 $generated@@78 $generated@@77))
 :pattern ( ($generated@@53 $generated@@78) ($generated@@75 $generated@@76 $generated@@78 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (=> (or (not (= $generated@@79 $generated@@81)) (not true)) (=> (and ($generated@@23 $generated@@79 $generated@@80) ($generated@@23 $generated@@80 $generated@@81)) ($generated@@23 $generated@@79 $generated@@81)))
 :pattern ( ($generated@@23 $generated@@79 $generated@@80) ($generated@@23 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 Int) ) (! (= ($generated@@54 ($generated@@61 $generated@@82)) $generated@@3)
 :pattern ( ($generated@@61 $generated@@82))
)))
(assert (forall (($generated@@84 Int) ) (! (= ($generated@@83 ($generated@@61 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@61 $generated@@84))
)))
(assert (forall (($generated@@85 Int) ) (! (= ($generated@@54 ($generated@@64 $generated@@85)) $generated@@4)
 :pattern ( ($generated@@64 $generated@@85))
)))
(assert (forall (($generated@@87 Int) ) (! (= ($generated@@86 ($generated@@64 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@64 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@29 $generated@@89 ($generated@@58 $generated@@89 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@58 $generated@@89 $generated@@88))
)))
(assert (forall (($generated@@90 Int) ) (! (= ($generated@@75 $generated@@76 ($generated@@61 $generated@@90) $generated@@77) ($generated@@75 $generated@@8 ($generated@@12 $generated@@90) $generated))
 :pattern ( ($generated@@75 $generated@@76 ($generated@@61 $generated@@90) $generated@@77))
)))
(assert (forall (($generated@@91 Int) ) (! (= ($generated@@75 $generated@@76 ($generated@@64 $generated@@91) $generated@@77) ($generated@@75 $generated@@8 ($generated@@12 $generated@@91) $generated))
 :pattern ( ($generated@@75 $generated@@76 ($generated@@64 $generated@@91) $generated@@77))
)))
(assert  (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@92 $generated@@95 $generated@@96 $generated@@97 ($generated@@94 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@100 $generated@@101) $generated@@98)
 :weight 0
)) (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@92 $generated@@102 $generated@@103 $generated@@104 ($generated@@94 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@92 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@92 $generated@@111 $generated@@112 $generated@@113 ($generated@@94 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@92 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@11 ($generated@@92 $generated@@27 $generated@@25 $generated@@7 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@11 ($generated@@29 $generated@@7 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@92 $generated@@27 $generated@@25 $generated@@7 ($generated@@93 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> (and ($generated@@126 $generated@@128) (and ($generated@@53 $generated@@127) ($generated@@67 $generated@@76 $generated@@127 $generated@@77 $generated@@128))) ($generated@@67 $generated@@8 ($generated@@12 ($generated@@83 $generated@@127)) $generated $generated@@128))
 :pattern ( ($generated@@67 $generated@@8 ($generated@@12 ($generated@@83 $generated@@127)) $generated $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (!  (=> (and ($generated@@126 $generated@@130) (and ($generated@@56 $generated@@129) ($generated@@67 $generated@@76 $generated@@129 $generated@@77 $generated@@130))) ($generated@@67 $generated@@8 ($generated@@12 ($generated@@86 $generated@@129)) $generated $generated@@130))
 :pattern ( ($generated@@67 $generated@@8 ($generated@@12 ($generated@@86 $generated@@129)) $generated $generated@@130))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (!  (=> (and ($generated@@126 $generated@@132) ($generated@@75 $generated@@76 $generated@@131 $generated@@77)) ($generated@@67 $generated@@76 $generated@@131 $generated@@77 $generated@@132))
 :pattern ( ($generated@@67 $generated@@76 $generated@@131 $generated@@77 $generated@@132))
)))
(assert (= ($generated@@22 $generated@@77) $generated@@2))
(assert (= ($generated@@133 $generated@@77) $generated@@5))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! ($generated@@67 $generated@@8 $generated@@135 $generated $generated@@134)
 :pattern ( ($generated@@67 $generated@@8 $generated@@135 $generated $generated@@134))
)))
(assert (forall (($generated@@136 T@U) ) (! ($generated@@75 $generated@@8 $generated@@136 $generated)
 :pattern ( ($generated@@75 $generated@@8 $generated@@136 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
