(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@27 () Int)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@34 (Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@U T@U T@U) Bool)
(declare-fun $generated@@49 (Int Int) Int)
(declare-fun $generated@@50 (Int Int) Bool)
(declare-fun $generated@@56 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@60 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@115 (T@U) T@U)
(declare-fun $generated@@116 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! ($generated@@20 $generated@@6 $generated@@22 $generated@@21 $generated@@23)
 :pattern ( ($generated@@20 $generated@@6 $generated@@22 $generated@@21 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (! ($generated@@20 $generated@@6 $generated@@25 $generated@@24 $generated@@26)
 :pattern ( ($generated@@20 $generated@@6 $generated@@25 $generated@@24 $generated@@26))
)))
(assert  (=> (< 0 $generated@@27) (forall (($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (and (and ($generated@@29 $generated@@31) ($generated@@30 $generated@@6 ($generated@@10 $generated@@32) $generated@@24)) ($generated@@20 $generated@@6 ($generated@@10 $generated@@32) $generated@@24 $generated@@31)) ($generated@@20 $generated@@6 ($generated@@10 ($generated@@28 $generated@@32)) $generated@@21 $generated@@31))
 :pattern ( ($generated@@28 $generated@@32) ($generated@@20 $generated@@6 ($generated@@10 $generated@@32) $generated@@24 $generated@@31))
))))
(assert  (=> (< 0 $generated@@27) (forall (($generated@@33 Int) ) (!  (=> ($generated@@30 $generated@@6 ($generated@@10 $generated@@33) $generated@@24) ($generated@@30 $generated@@6 ($generated@@10 ($generated@@28 $generated@@33)) $generated@@21))
 :pattern ( ($generated@@28 $generated@@33))
))))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@34 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@39 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@39 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ) (! (= ($generated@@30 $generated@@6 $generated@@43 $generated@@21) (<= ($generated@@34 0) ($generated@@11 $generated@@43)))
 :pattern ( ($generated@@30 $generated@@6 $generated@@43 $generated@@21))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@44 ($generated@@40 $generated@@48 $generated@@45) $generated@@46 $generated@@47) ($generated@@20 $generated@@48 $generated@@45 $generated@@46 $generated@@47))
 :pattern ( ($generated@@44 ($generated@@40 $generated@@48 $generated@@45) $generated@@46 $generated@@47))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@51 Int) ($generated@@52 Int) ) (!  (=> (or ($generated@@50 $generated@@51 $generated@@52) (and (< 1 $generated@@27) (and (and ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))) (<= ($generated@@34 0) $generated@@52)) (or (not (= $generated@@52 7)) (not true))))) (and (= ($generated@@49 $generated@@51 $generated@@52) ($generated@@28 $generated@@51)) (<= ($generated@@34 0) ($generated@@49 $generated@@51 $generated@@52))))
 :pattern ( ($generated@@49 $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@39 $generated@@54 ($generated@@40 $generated@@54 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@40 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@30 $generated@@6 $generated@@55 $generated@@24) ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))))
 :pattern ( ($generated@@30 $generated@@6 $generated@@55 $generated@@24))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@56 $generated@@67 $generated@@68 $generated@@69 ($generated@@63 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@72 $generated@@73) $generated@@70)
 :weight 0
)) (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@56 $generated@@74 $generated@@75 $generated@@76 ($generated@@63 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@56 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@56 $generated@@83 $generated@@84 $generated@@85 ($generated@@63 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@56 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)))) (= ($generated@@4 $generated@@57) 3)) (= ($generated@@4 $generated@@58) 4)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@60 $generated@@92 $generated@@93 ($generated@@64 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@96) $generated@@94)
 :weight 0
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@60 $generated@@97 $generated@@98 ($generated@@64 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@60 $generated@@97 $generated@@98 $generated@@100 $generated@@102)))
 :weight 0
))) (= ($generated@@4 $generated@@61) 5)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (= ($generated@@4 ($generated@@62 $generated@@103 $generated@@104)) 6))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@65 ($generated@@62 $generated@@105 $generated@@106)) $generated@@105)
 :pattern ( ($generated@@62 $generated@@105 $generated@@106))
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@66 ($generated@@62 $generated@@107 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@62 $generated@@107 $generated@@108))
))))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 Bool) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@9 ($generated@@56 $generated@@57 $generated@@58 $generated@@5 ($generated@@59 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))  (=> (and (or (not (= $generated@@113 $generated@@109)) (not true)) ($generated@@9 ($generated@@39 $generated@@5 ($generated@@60 $generated@@58 $generated@@61 ($generated@@60 $generated@@57 ($generated@@62 $generated@@58 $generated@@61) $generated@@110 $generated@@113) $generated@@111)))) $generated@@112))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58 $generated@@5 ($generated@@59 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))
)))
(assert (= ($generated@@115 $generated@@21) $generated@@0))
(assert (= ($generated@@116 $generated@@21) $generated@@2))
(assert (= ($generated@@115 $generated@@24) $generated@@1))
(assert (= ($generated@@116 $generated@@24) $generated@@3))
(assert (forall (($generated@@117 Int) ) (! (= ($generated@@40 $generated@@6 ($generated@@10 ($generated@@34 $generated@@117))) ($generated@@36 $generated@@61 ($generated@@40 $generated@@6 ($generated@@10 $generated@@117))))
 :pattern ( ($generated@@40 $generated@@6 ($generated@@10 ($generated@@34 $generated@@117))))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@T) ) (! (= ($generated@@40 $generated@@119 ($generated@@36 $generated@@119 $generated@@118)) ($generated@@36 $generated@@61 ($generated@@40 $generated@@119 $generated@@118)))
 :pattern ( ($generated@@40 $generated@@119 ($generated@@36 $generated@@119 $generated@@118)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@126 true))
(let (($generated@@127  (=> (<= ($generated@@34 0) ($generated@@49 $generated@@120 $generated@@121)) (=> (and ($generated@@44 ($generated@@40 $generated@@6 ($generated@@10 $generated@@120)) $generated@@24 $generated@@122) ($generated@@20 $generated@@6 ($generated@@10 $generated@@121) $generated@@21 $generated@@122)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (not (= $generated@@121 7)) (not true))) (=> (or (not (= $generated@@121 7)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (<= 0 $generated@@120) (= $generated@@120 $generated@@120))) (=> (or (<= 0 $generated@@120) (= $generated@@120 $generated@@120)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (or (<= 0 $generated@@121) (< $generated@@120 $generated@@120)) (= $generated@@121 $generated@@121))) (=> (or (or (<= 0 $generated@@121) (< $generated@@120 $generated@@120)) (= $generated@@121 $generated@@121)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@120 $generated@@120) (= $generated@@121 $generated@@121)) (or (< $generated@@120 $generated@@120) (and (= $generated@@120 $generated@@120) (< $generated@@121 $generated@@121)))))))))))))))
(let (($generated@@128  (=> (and (= $generated@@123 ($generated@@59 $generated@@124 $generated@@122 $generated false)) (or (not (= $generated@@121 7)) (not true))) (and (=> (= (ControlFlow 0 7) 2) $generated@@127) (=> (= (ControlFlow 0 7) 6) $generated@@126)))))
(let (($generated@@129  (=> (and ($generated@@29 $generated@@122) ($generated@@125 $generated@@122)) (=> (and (and ($generated@@9 ($generated@@36 $generated@@5 ($generated@@8 true))) (<= ($generated@@34 0) $generated@@121)) (and (= 1 $generated@@27) (= (ControlFlow 0 8) 7))) $generated@@128))))
$generated@@129)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
