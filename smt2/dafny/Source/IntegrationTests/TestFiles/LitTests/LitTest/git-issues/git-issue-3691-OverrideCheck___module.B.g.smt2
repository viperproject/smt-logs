(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@35 () Int)
(declare-fun $generated@@36 (T@U T@U) Bool)
(declare-fun $generated@@37 (T@U T@U) Bool)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@39 (T@T T@U T@U) Bool)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 (T@T T@T) T@T)
(declare-fun $generated@@48 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@73 (T@U T@U) Bool)
(declare-fun $generated@@81 (T@T T@U) T@U)
(declare-fun $generated@@91 (T@U) T@U)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@95 (T@U) T@U)
(declare-fun $generated@@105 (T@U) T@U)
(declare-fun $generated@@107 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@23) 3))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@27 ($generated@@24 $generated@@26) $generated@@28) ($generated@@22 $generated@@23 $generated@@27 ($generated@@25 $generated@@26) $generated@@28))
 :pattern ( ($generated@@22 $generated@@23 $generated@@27 ($generated@@24 $generated@@26) $generated@@28))
 :pattern ( ($generated@@22 $generated@@23 $generated@@27 ($generated@@25 $generated@@26) $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ) ($generated@@29 ($generated@@25 $generated@@30))))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@33 $generated@@31 $generated@@34) ($generated@@22 $generated@@23 $generated@@33 $generated@@32 $generated@@34))
 :pattern ( ($generated@@22 $generated@@23 $generated@@33 $generated@@31 $generated@@34))
 :pattern ( ($generated@@22 $generated@@23 $generated@@33 $generated@@32 $generated@@34))
)))
(assert  (=> (<= 0 $generated@@35) (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (!  (=> (or ($generated@@37 $generated@@41 $generated@@42) (and (< 0 $generated@@35) (and (or (not (= $generated@@42 $generated@@38)) (not true)) ($generated@@39 $generated@@23 $generated@@42 ($generated@@24 $generated@@41))))) (= ($generated@@36 $generated@@41 $generated@@42) ($generated@@11 ($generated@@40 $generated@@7 ($generated@@10 true)))))
 :pattern ( ($generated@@36 $generated@@41 $generated@@42))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@44 $generated@@51 $generated@@52 ($generated@@48 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@55) $generated@@53)
 :weight 0
)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (or (= $generated@@60 $generated@@61) (= ($generated@@44 $generated@@56 $generated@@57 ($generated@@48 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@58) $generated@@61) ($generated@@44 $generated@@56 $generated@@57 $generated@@59 $generated@@61)))
 :weight 0
))) (= ($generated@@6 $generated@@45) 4)) (= ($generated@@6 $generated@@46) 5)) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (= ($generated@@6 ($generated@@47 $generated@@62 $generated@@63)) 6))) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (! (= ($generated@@49 ($generated@@47 $generated@@64 $generated@@65)) $generated@@64)
 :pattern ( ($generated@@47 $generated@@64 $generated@@65))
))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@50 ($generated@@47 $generated@@66 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@47 $generated@@66 $generated@@67))
))))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@69 ($generated@@25 $generated@@68) $generated@@70)  (or (= $generated@@69 $generated@@38) ($generated@@11 ($generated@@43 $generated@@7 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@23 ($generated@@47 $generated@@45 $generated@@46) $generated@@70 $generated@@69) $generated)))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@69 ($generated@@25 $generated@@68) $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@71 $generated@@32 $generated@@72)  (or (= $generated@@71 $generated@@38) ($generated@@11 ($generated@@43 $generated@@7 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@23 ($generated@@47 $generated@@45 $generated@@46) $generated@@72 $generated@@71) $generated)))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@71 $generated@@32 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> ($generated@@73 $generated@@74 $generated@@75) (forall (($generated@@76 T@U) ) (!  (=> ($generated@@11 ($generated@@43 $generated@@7 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@23 ($generated@@47 $generated@@45 $generated@@46) $generated@@74 $generated@@76) $generated))) ($generated@@11 ($generated@@43 $generated@@7 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@23 ($generated@@47 $generated@@45 $generated@@46) $generated@@75 $generated@@76) $generated))))
 :pattern ( ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@23 ($generated@@47 $generated@@45 $generated@@46) $generated@@75 $generated@@76) $generated))
)))
 :pattern ( ($generated@@73 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@40 $generated@@78 $generated@@77) $generated@@77)
 :pattern ( ($generated@@40 $generated@@78 $generated@@77))
)))
(assert  (=> (<= 0 $generated@@35) (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> (or ($generated@@37 $generated@@79 ($generated@@40 $generated@@23 $generated@@80)) (and (< 0 $generated@@35) (and (or (not (= $generated@@80 $generated@@38)) (not true)) ($generated@@39 $generated@@23 $generated@@80 ($generated@@24 $generated@@79))))) (= ($generated@@36 $generated@@79 ($generated@@40 $generated@@23 $generated@@80)) ($generated@@11 ($generated@@40 $generated@@7 ($generated@@10 true)))))
 :weight 3
 :pattern ( ($generated@@36 $generated@@79 ($generated@@40 $generated@@23 $generated@@80)))
))))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@81 $generated@@83 ($generated@@43 $generated@@83 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@43 $generated@@83 $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@39 $generated@@23 $generated@@85 ($generated@@24 $generated@@84))  (and ($generated@@39 $generated@@23 $generated@@85 ($generated@@25 $generated@@84)) (or (not (= $generated@@85 $generated@@38)) (not true))))
 :pattern ( ($generated@@39 $generated@@23 $generated@@85 ($generated@@24 $generated@@84)))
 :pattern ( ($generated@@39 $generated@@23 $generated@@85 ($generated@@25 $generated@@84)))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@T) ) (!  (=> ($generated@@73 $generated@@86 $generated@@87) (=> ($generated@@22 $generated@@90 $generated@@88 $generated@@89 $generated@@86) ($generated@@22 $generated@@90 $generated@@88 $generated@@89 $generated@@87)))
 :pattern ( ($generated@@73 $generated@@86 $generated@@87) ($generated@@22 $generated@@90 $generated@@88 $generated@@89 $generated@@86))
)))
(assert (forall (($generated@@93 T@U) ) (!  (and (= ($generated@@91 ($generated@@25 $generated@@93)) $generated@@2) (= ($generated@@92 ($generated@@25 $generated@@93)) $generated@@5))
 :pattern ( ($generated@@25 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ) (!  (and (= ($generated@@91 ($generated@@24 $generated@@94)) $generated@@3) (= ($generated@@92 ($generated@@24 $generated@@94)) $generated@@5))
 :pattern ( ($generated@@24 $generated@@94))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@39 $generated@@23 $generated@@97 ($generated@@25 $generated@@96))  (or (= $generated@@97 $generated@@38) (= ($generated@@95 $generated@@97) ($generated@@25 $generated@@96))))
 :pattern ( ($generated@@39 $generated@@23 $generated@@97 ($generated@@25 $generated@@96)))
)))
(assert (forall (($generated@@98 T@U) ) (! (= ($generated@@39 $generated@@23 $generated@@98 $generated@@31)  (and ($generated@@39 $generated@@23 $generated@@98 $generated@@32) (or (not (= $generated@@98 $generated@@38)) (not true))))
 :pattern ( ($generated@@39 $generated@@23 $generated@@98 $generated@@31))
 :pattern ( ($generated@@39 $generated@@23 $generated@@98 $generated@@32))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (=> ($generated@@22 $generated@@23 $generated@@100 ($generated@@25 $generated@@99) $generated@@101) ($generated@@22 $generated@@23 $generated@@100 $generated@@32 $generated@@101))
 :pattern ( ($generated@@22 $generated@@23 $generated@@100 ($generated@@25 $generated@@99) $generated@@101))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (or (not (= $generated@@102 $generated@@104)) (not true)) (=> (and ($generated@@73 $generated@@102 $generated@@103) ($generated@@73 $generated@@103 $generated@@104)) ($generated@@73 $generated@@102 $generated@@104)))
 :pattern ( ($generated@@73 $generated@@102 $generated@@103) ($generated@@73 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@106 T@U) ) (! (= ($generated@@105 ($generated@@25 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@25 $generated@@106))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@107 ($generated@@24 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@24 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@43 $generated@@110 ($generated@@81 $generated@@110 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@81 $generated@@110 $generated@@109))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (!  (=> ($generated@@39 $generated@@23 $generated@@112 ($generated@@25 $generated@@111)) ($generated@@39 $generated@@23 $generated@@112 $generated@@32))
 :pattern ( ($generated@@39 $generated@@23 $generated@@112 ($generated@@25 $generated@@111)))
)))
(assert (= ($generated@@91 $generated@@32) $generated@@0))
(assert (= ($generated@@92 $generated@@32) $generated@@4))
(assert (= ($generated@@91 $generated@@31) $generated@@1))
(assert (= ($generated@@92 $generated@@31) $generated@@4))
(assert (forall (($generated@@113 T@U) ) (! (= ($generated@@39 $generated@@23 $generated@@113 $generated@@32)  (or (= $generated@@113 $generated@@38) ($generated@@29 ($generated@@95 $generated@@113))))
 :pattern ( ($generated@@39 $generated@@23 $generated@@113 $generated@@32))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@81 $generated@@115 ($generated@@40 $generated@@115 $generated@@114)) ($generated@@40 $generated@@46 ($generated@@81 $generated@@115 $generated@@114)))
 :pattern ( ($generated@@81 $generated@@115 ($generated@@40 $generated@@115 $generated@@114)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@116 (T@U) Bool)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 (T@U) Bool)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@122  (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall (($generated@@123 T@U) ($generated@@124 T@U) ) true)) (=> (forall (($generated@@125 T@U) ($generated@@126 T@U) ) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@127 T@U) ($generated@@128 T@U) ) true)) (=> (forall (($generated@@129 T@U) ($generated@@130 T@U) ) true) (=> (and (and (and ($generated@@116 $generated@@117) ($generated@@118 $generated@@117)) (and (forall (($generated@@131 T@U) ) (!  (=> (and (or (not (= $generated@@131 $generated@@38)) (not true)) ($generated@@11 ($generated@@43 $generated@@7 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@23 ($generated@@47 $generated@@45 $generated@@46) $generated@@119 $generated@@131) $generated)))) (= ($generated@@44 $generated@@23 ($generated@@47 $generated@@45 $generated@@46) $generated@@117 $generated@@131) ($generated@@44 $generated@@23 ($generated@@47 $generated@@45 $generated@@46) $generated@@119 $generated@@131)))
 :pattern ( ($generated@@44 $generated@@23 ($generated@@47 $generated@@45 $generated@@46) $generated@@117 $generated@@131))
)) ($generated@@73 $generated@@119 $generated@@117))) (and (and ($generated@@36 $generated@@120 $generated@@121) (= (ControlFlow 0 2) (- 0 1))) ($generated@@37 $generated@@120 $generated@@121))) (or ($generated@@36 $generated@@120 $generated@@121) ($generated@@11 ($generated@@40 $generated@@7 ($generated@@10 true))))))))))))
(let (($generated@@132  (=> (and ($generated@@116 $generated@@119) ($generated@@118 $generated@@119)) (=> (and (and (or (not (= $generated@@121 $generated@@38)) (not true)) (and ($generated@@39 $generated@@23 $generated@@121 ($generated@@24 $generated@@120)) ($generated@@22 $generated@@23 $generated@@121 ($generated@@24 $generated@@120) $generated@@119))) (and (= 1 $generated@@35) (= (ControlFlow 0 6) 2))) $generated@@122))))
$generated@@132)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
