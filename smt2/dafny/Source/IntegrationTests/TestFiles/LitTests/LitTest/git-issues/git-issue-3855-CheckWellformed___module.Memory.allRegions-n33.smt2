(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Object () T@U)
(declare-fun Tagclass._module.Region () T@U)
(declare-fun Tagclass._module.Memory () T@U)
(declare-fun Tagclass._module.Memory? () T@U)
(declare-fun Tagclass._module.Object? () T@U)
(declare-fun tytagFamily$Object () T@U)
(declare-fun tytagFamily$Region () T@U)
(declare-fun tytagFamily$Memory () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Object.region (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.Object? () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Region () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Tclass._module.Memory? () T@U)
(declare-fun Tclass._module.Object () T@U)
(declare-fun Tclass._module.Memory () T@U)
(declare-fun _module.Memory.allRegions (T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun |_module.Memory.allRegions#canCall| (T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun |lambda#122| (T@U T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._module.Object Tagclass._module.Region Tagclass._module.Memory Tagclass._module.Memory? Tagclass._module.Object? tytagFamily$Object tytagFamily$Region tytagFamily$Memory)
)
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (< 2 $FunctionContextHeight) (forall (($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) Tclass._module.Object?)) ($Is DatatypeTypeType (_module.Object.region $o) Tclass._module.Region))
 :pattern ( (_module.Object.region $o))
))))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert  (=> (< 2 $FunctionContextHeight) (forall (($h T@U) ($o@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap $h) (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) Tclass._module.Object?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@0) alloc)))) ($IsAlloc DatatypeTypeType (_module.Object.region $o@@0) Tclass._module.Region $h))
 :pattern ( (_module.Object.region $o@@0) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@0) alloc)))
))))
(assert (forall (($o@@1 T@U) ) (! (= ($Is refType $o@@1 Tclass._module.Object?)  (or (= $o@@1 null) (= (dtype $o@@1) Tclass._module.Object?)))
 :pattern ( ($Is refType $o@@1 Tclass._module.Object?))
)))
(assert (forall (($o@@2 T@U) ) (! (= ($Is refType $o@@2 Tclass._module.Memory?)  (or (= $o@@2 null) (= (dtype $o@@2) Tclass._module.Memory?)))
 :pattern ( ($Is refType $o@@2 Tclass._module.Memory?))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Object $h@@0) ($IsAlloc refType |c#0| Tclass._module.Object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Object $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Object? $h@@0))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Memory $h@@1) ($IsAlloc refType |c#0@@0| Tclass._module.Memory? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Memory $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Memory? $h@@1))
)))
(assert (= (Ctor SetType) 8))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this T@U) (|os#0| T@U) ) (!  (=> (or (|_module.Memory.allRegions#canCall| this (Lit SetType |os#0|)) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this null)) (not true)) ($Is refType this Tclass._module.Memory)) ($Is SetType |os#0| (TSet Tclass._module.Object))))) (= (_module.Memory.allRegions this (Lit SetType |os#0|)) (|Set#FromBoogieMap| (|lambda#122| Tclass._module.Object (Lit SetType |os#0|) |os#0|))))
 :weight 3
 :pattern ( (_module.Memory.allRegions this (Lit SetType |os#0|)))
))))
(assert (forall (($o@@3 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.Object? $h@@2)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.Object? $h@@2))
)))
(assert (forall (($o@@4 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass._module.Memory? $h@@3)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._module.Memory? $h@@3))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|Set#Subset| a b) (forall ((o T@U) ) (!  (=> (|Set#IsMember| a o) (|Set#IsMember| b o))
 :pattern ( (|Set#IsMember| a o))
 :pattern ( (|Set#IsMember| b o))
)))
 :pattern ( (|Set#Subset| a b))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((m@@1 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx) (U_2_bool (MapType0Select BoxType boolType m@@1 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Object) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.Object)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Object))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Region) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass._module.Region)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Region))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.Memory) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.Memory)))
 :pattern ( ($IsBox bx@@3 Tclass._module.Memory))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.Memory?) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._module.Memory?)))
 :pattern ( ($IsBox bx@@4 Tclass._module.Memory?))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._module.Object?) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._module.Object?)))
 :pattern ( ($IsBox bx@@5 Tclass._module.Object?))
)))
(assert (forall ((|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| Tclass._module.Object)  (and ($Is refType |c#0@@1| Tclass._module.Object?) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| Tclass._module.Object))
 :pattern ( ($Is refType |c#0@@1| Tclass._module.Object?))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.Memory)  (and ($Is refType |c#0@@2| Tclass._module.Memory?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Memory))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Memory?))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@0 T@U) (|os#0@@0| T@U) ) (!  (=> (or (|_module.Memory.allRegions#canCall| this@@0 |os#0@@0|) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 Tclass._module.Memory)) ($Is SetType |os#0@@0| (TSet Tclass._module.Object))))) (and (forall ((|o#0| T@U) ) (!  (=> (and ($Is refType |o#0| Tclass._module.Object) (|Set#IsMember| |os#0@@0| ($Box refType |o#0|))) (|Set#IsMember| (_module.Memory.allRegions this@@0 |os#0@@0|) ($Box DatatypeTypeType (_module.Object.region |o#0|))))
 :pattern ( (_module.Object.region |o#0|))
 :pattern ( (|Set#IsMember| |os#0@@0| ($Box refType |o#0|)))
)) ($Is SetType (_module.Memory.allRegions this@@0 |os#0@@0|) (TSet Tclass._module.Region))))
 :pattern ( (_module.Memory.allRegions this@@0 |os#0@@0|))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#122| |l#0| |l#1| |l#2|) |$y#0|)) (exists ((|o#1| T@U) ) (!  (and (and ($Is refType |o#1| |l#0|) (|Set#IsMember| |l#1| ($Box refType |o#1|))) (= |$y#0| ($Box DatatypeTypeType (_module.Object.region |o#1|))))
 :pattern ( (_module.Object.region |o#1|))
 :pattern ( (|Set#IsMember| |l#2| ($Box refType |o#1|)))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#122| |l#0| |l#1| |l#2|) |$y#0|))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (|Set#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@1 T@U) (|os#0@@1| T@U) ) (!  (=> (or (|_module.Memory.allRegions#canCall| (Lit refType this@@1) (Lit SetType |os#0@@1|)) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 Tclass._module.Memory)) ($Is SetType |os#0@@1| (TSet Tclass._module.Object))))) (= (_module.Memory.allRegions (Lit refType this@@1) (Lit SetType |os#0@@1|)) (|Set#FromBoogieMap| (|lambda#122| Tclass._module.Object (Lit SetType |os#0@@1|) |os#0@@1|))))
 :weight 3
 :pattern ( (_module.Memory.allRegions (Lit refType this@@1) (Lit SetType |os#0@@1|)))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap T@U) (this@@2 T@U) (|os#0@@2| T@U) ) (!  (=> (and (or (|_module.Memory.allRegions#canCall| this@@2 |os#0@@2|) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this@@2 null)) (not true)) ($IsAlloc refType this@@2 Tclass._module.Memory $Heap)) (and ($Is SetType |os#0@@2| (TSet Tclass._module.Object)) ($IsAlloc SetType |os#0@@2| (TSet Tclass._module.Object) $Heap))))) ($IsGoodHeap $Heap)) ($IsAlloc SetType (_module.Memory.allRegions this@@2 |os#0@@2|) (TSet Tclass._module.Region) $Heap))
 :pattern ( ($IsAlloc SetType (_module.Memory.allRegions this@@2 |os#0@@2|) (TSet Tclass._module.Region) $Heap))
))))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@6 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@6) ($IsAllocBox bx@@6 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@6))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3| Bool) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o@@5) |l#2@@0|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3|) $o@@5 $f))
)))
(assert (forall ((bx@@7 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@7 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@7)) bx@@7) ($Is SetType ($Unbox SetType bx@@7) (TSet t@@3))))
 :pattern ( ($IsBox bx@@7 (TSet t@@3)))
)))
(assert (= (Tag Tclass._module.Object) Tagclass._module.Object))
(assert (= (TagFamily Tclass._module.Object) tytagFamily$Object))
(assert (= (Tag Tclass._module.Region) Tagclass._module.Region))
(assert (= (TagFamily Tclass._module.Region) tytagFamily$Region))
(assert (= (Tag Tclass._module.Memory) Tagclass._module.Memory))
(assert (= (TagFamily Tclass._module.Memory) tytagFamily$Memory))
(assert (= (Tag Tclass._module.Memory?) Tagclass._module.Memory?))
(assert (= (TagFamily Tclass._module.Memory?) tytagFamily$Memory))
(assert (= (Tag Tclass._module.Object?) Tagclass._module.Object?))
(assert (= (TagFamily Tclass._module.Object?) tytagFamily$Object))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@1 o@@0) (|Set#IsMember| b@@1 o@@0))
 :pattern ( (|Set#IsMember| a@@1 o@@0))
 :pattern ( (|Set#IsMember| b@@1 o@@0))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((this@@3 T@U) (|os#0@@3| T@U) ) (!  (=> (or (|_module.Memory.allRegions#canCall| this@@3 |os#0@@3|) (and (< 3 $FunctionContextHeight) (and (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass._module.Memory)) ($Is SetType |os#0@@3| (TSet Tclass._module.Object))))) (= (_module.Memory.allRegions this@@3 |os#0@@3|) (|Set#FromBoogieMap| (|lambda#122| Tclass._module.Object |os#0@@3| |os#0@@3|))))
 :pattern ( (_module.Memory.allRegions this@@3 |os#0@@3|))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |os#0@@4| () T@U)
(declare-fun |o#5@0| () T@U)
(declare-fun this@@4 () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |o#6@0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let ((anon5_correct true))
(let ((anon12_Else_correct  (=> (and (=> (|Set#IsMember| |os#0@@4| ($Box refType |o#5@0|)) (|Set#IsMember| (_module.Memory.allRegions this@@4 |os#0@@4|) ($Box DatatypeTypeType (_module.Object.region |o#5@0|)))) (= (ControlFlow 0 13) 9)) anon5_correct)))
(let ((anon12_Then_correct  (=> (|Set#IsMember| |os#0@@4| ($Box refType |o#5@0|)) (and (=> (= (ControlFlow 0 10) (- 0 12)) (or (not (= |o#5@0| null)) (not true))) (=> (or (not (= |o#5@0| null)) (not true)) (=> (and ($IsAllocBox ($Box refType this@@4) Tclass._module.Memory? $Heap@@0) ($IsAlloc SetType |os#0@@4| (TSet Tclass._module.Object) $Heap@@0)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (or (and (= this@@4 this@@4) (|Set#Equal| |os#0@@4| |os#0@@4|)) (and (|Set#Subset| |os#0@@4| |os#0@@4|) (not (|Set#Subset| |os#0@@4| |os#0@@4|))))) (=> (or (and (= this@@4 this@@4) (|Set#Equal| |os#0@@4| |os#0@@4|)) (and (|Set#Subset| |os#0@@4| |os#0@@4|) (not (|Set#Subset| |os#0@@4| |os#0@@4|)))) (=> (or (and (= this@@4 this@@4) (|Set#Equal| |os#0@@4| |os#0@@4|)) (|_module.Memory.allRegions#canCall| this@@4 |os#0@@4|)) (=> (and (|Set#IsMember| (_module.Memory.allRegions this@@4 |os#0@@4|) ($Box DatatypeTypeType (_module.Object.region |o#5@0|))) (= (ControlFlow 0 10) 9)) anon5_correct))))))))))
(let ((anon11_Then_correct  (=> ($Is SetType (_module.Memory.allRegions this@@4 |os#0@@4|) (TSet Tclass._module.Region)) (=> (and ($Is refType |o#5@0| Tclass._module.Object) ($IsAlloc refType |o#5@0| Tclass._module.Object $Heap@@0)) (and (=> (= (ControlFlow 0 14) 10) anon12_Then_correct) (=> (= (ControlFlow 0 14) 13) anon12_Else_correct))))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (forall ((|o#4| T@U) ) (!  (=> (and ($Is refType |o#4| Tclass._module.Object) (|Set#IsMember| |os#0@@4| ($Box refType |o#4|))) (|Set#IsMember| (_module.Memory.allRegions this@@4 |os#0@@4|) ($Box DatatypeTypeType (_module.Object.region |o#4|))))
 :pattern ( (_module.Object.region |o#4|))
 :pattern ( (|Set#IsMember| |os#0@@4| ($Box refType |o#4|)))
)))))
(let ((anon9_correct  (=> (= (_module.Memory.allRegions this@@4 |os#0@@4|) (|Set#FromBoogieMap| (|lambda#122| Tclass._module.Object |os#0@@4| |os#0@@4|))) (=> (and ($Is SetType (_module.Memory.allRegions this@@4 |os#0@@4|) (TSet Tclass._module.Region)) (= (ControlFlow 0 3) 2)) GeneratedUnifiedExit_correct))))
(let ((anon14_Else_correct  (=> (and (not (|Set#IsMember| |os#0@@4| ($Box refType |o#6@0|))) (= (ControlFlow 0 7) 3)) anon9_correct)))
(let ((anon14_Then_correct  (=> (|Set#IsMember| |os#0@@4| ($Box refType |o#6@0|)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= |o#6@0| null)) (not true))) (=> (or (not (= |o#6@0| null)) (not true)) (=> (= (ControlFlow 0 5) 3) anon9_correct))))))
(let ((anon13_Then_correct  (=> (and ($Is refType |o#6@0| Tclass._module.Object) ($IsAlloc refType |o#6@0| Tclass._module.Object $Heap@@0)) (and (=> (= (ControlFlow 0 8) 5) anon14_Then_correct) (=> (= (ControlFlow 0 8) 7) anon14_Else_correct)))))
(let ((anon13_Else_correct  (=> (and (not (and ($Is refType |o#6@0| Tclass._module.Object) ($IsAlloc refType |o#6@0| Tclass._module.Object $Heap@@0))) (= (ControlFlow 0 4) 3)) anon9_correct)))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (and (and (=> (= (ControlFlow 0 15) 14) anon11_Then_correct) (=> (= (ControlFlow 0 15) 8) anon13_Then_correct)) (=> (= (ControlFlow 0 15) 4) anon13_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and (and (or (not (= this@@4 null)) (not true)) (and ($Is refType this@@4 Tclass._module.Memory) ($IsAlloc refType this@@4 Tclass._module.Memory $Heap@@0))) ($Is SetType |os#0@@4| (TSet Tclass._module.Object))) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 16) 15))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
