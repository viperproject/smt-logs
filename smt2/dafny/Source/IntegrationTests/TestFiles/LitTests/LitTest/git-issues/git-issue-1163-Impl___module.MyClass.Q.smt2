(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagIMap () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._module.MyClass? () T@U)
(declare-fun Tagclass._module.MyClass? () T@U)
(declare-fun Tagclass._module.MyClass () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$MyClass () T@U)
(declare-fun field$y () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun SetType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |lambda#2| (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun Tclass._module.MyClass? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass._module.MyClass () T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _module.MyClass.y () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.MyClass.R (T@U T@U T@U) T@U)
(declare-fun |_module.MyClass.R#canCall| (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |lambda#3| (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |lambda#39| (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |IMap#Empty| () T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |lambda#5| (T@U) T@U)
(declare-fun |lambda#34| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun IMapType () T@T)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun |ISet#Empty| () T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |lambda#33| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |$let#0_p| (T@U T@U) T@U)
(declare-fun |$let#0$canCall| (T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |lambda#26| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet TagISet TagIMap alloc allocName Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc1 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._module.MyClass? Tagclass._module.MyClass? Tagclass._module.MyClass tytagFamily$object |tytagFamily$_#Func1| |tytagFamily$_tuple#2| tytagFamily$MyClass field$y)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 3))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (= (Ctor SetType) 7)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (h T@U) (r T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType rd heap bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx))
)))
(assert (forall ((|l#0| T@U) (|$l#1_1_1_0#heap#0| T@U) (|$l#1_1_1_0#x#0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#2| |l#0|) |$l#1_1_1_0#heap#0| |$l#1_1_1_0#x#0|)) ($IsBox |$l#1_1_1_0#x#0| |l#0|))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#2| |l#0|) |$l#1_1_1_0#heap#0| |$l#1_1_1_0#x#0|))
)))
(assert (forall ((a T@U) (b T@U) (t T@U) ) (! (= (|IMap#Domain| (|IMap#Glue| a b t)) a)
 :pattern ( (|IMap#Domain| (|IMap#Glue| a b t)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (t@@0 T@U) ) (! (= (|IMap#Elements| (|IMap#Glue| a@@0 b@@0 t@@0)) b@@0)
 :pattern ( (|IMap#Elements| (|IMap#Glue| a@@0 b@@0 t@@0)))
)))
(assert (= (Ctor DatatypeTypeType) 8))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.MyClass?)  (or (= $o null) (= (dtype $o) Tclass._module.MyClass?)))
 :pattern ( ($Is refType $o Tclass._module.MyClass?))
)))
(assert (= (Ctor HandleTypeType) 9))
(assert (forall ((f T@U) (t0@@2 T@U) (t1@@2 T@U) (u0@@2 T@U) (u1@@2 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 u0@@2) ($IsBox bx@@0 t0@@2))
 :pattern ( ($IsBox bx@@0 u0@@2))
 :pattern ( ($IsBox bx@@0 t0@@2))
))) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 t1@@2) ($IsBox bx@@1 u1@@2))
 :pattern ( ($IsBox bx@@1 t1@@2))
 :pattern ( ($IsBox bx@@1 u1@@2))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h) ($IsAlloc refType |c#0| Tclass._System.object? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.MyClass $h@@0) ($IsAlloc refType |c#0@@0| Tclass._module.MyClass? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.MyClass $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.MyClass? $h@@0))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (= (FDim _module.MyClass.y) 0))
(assert (= (FieldOfDecl class._module.MyClass? field$y) _module.MyClass.y))
(assert  (not ($IsGhostField _module.MyClass.y)))
(assert (forall (($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._System.object? $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._System.object? $h@@1))
)))
(assert (forall (($o@@1 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.MyClass? $h@@2)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@2 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.MyClass? $h@@2))
)))
(assert (forall ((h@@0 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@0 k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@0 o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h@@0 k))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (this T@U) (|c#0@@1| T@U) ) (!  (=> (or (|_module.MyClass.R#canCall| $Heap this |c#0@@1|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap) (or (not (= this null)) (not true))) ($IsAlloc refType this Tclass._module.MyClass $Heap)) (and ($Is refType |c#0@@1| Tclass._module.MyClass) ($IsAlloc refType |c#0@@1| Tclass._module.MyClass $Heap))))) ($IsAlloc refType (_module.MyClass.R $Heap this |c#0@@1|) Tclass._module.MyClass $Heap))
 :pattern ( ($IsAlloc refType (_module.MyClass.R $Heap this |c#0@@1|) Tclass._module.MyClass $Heap))
))))
(assert (forall ((|l#0@@0| T@U) (|$l#1_1_1_0#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#3| |l#0@@0|) |$l#1_1_1_0#o#0|)) (= |$l#1_1_1_0#o#0| |l#0@@0|))
 :pattern ( (MapType1Select refType boolType (|lambda#3| |l#0@@0|) |$l#1_1_1_0#o#0|))
)))
(assert (forall ((v T@U) (t0@@3 T@U) ) (! (= ($Is (MapType1Type BoxType boolType) v (TISet t0@@3)) (forall ((bx@@2 T@U) ) (!  (=> (U_2_bool (MapType1Select BoxType boolType v bx@@2)) ($IsBox bx@@2 t0@@3))
 :pattern ( (MapType1Select BoxType boolType v bx@@2))
)))
 :pattern ( ($Is (MapType1Type BoxType boolType) v (TISet t0@@3)))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((t0@@4 T@U) (t1@@3 T@U) (heap@@0 T@U) (f@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@0 t0@@4) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@4 t1@@3)))) (= (|Set#Equal| (Reads1 t0@@4 t1@@3 $OneHeap f@@0 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@4 t1@@3 heap@@0 f@@0 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@4 t1@@3 $OneHeap f@@0 bx0@@0) ($IsGoodHeap heap@@0))
 :pattern ( (Reads1 t0@@4 t1@@3 heap@@0 f@@0 bx0@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (this@@0 T@U) (|c#0@@2| T@U) ) (!  (=> (or (|_module.MyClass.R#canCall| $Heap@@0 this@@0 |c#0@@2|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass._module.MyClass) ($IsAlloc refType this@@0 Tclass._module.MyClass $Heap@@0)))) ($Is refType |c#0@@2| Tclass._module.MyClass)))) (= (_module.MyClass.R $Heap@@0 this@@0 |c#0@@2|) this@@0))
 :pattern ( (_module.MyClass.R $Heap@@0 this@@0 |c#0@@2|) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@3 T@U) ) (!  (=> ($IsGoodHeap $h@@3) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@3)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@3) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@3))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@3))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((|l#0@@1| T@U) (|$l#0_0#heap#0| T@U) (|$l#0_0#p#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#39| |l#0@@1|) |$l#0_0#heap#0| |$l#0_0#p#0|) (SetRef_to_SetBox (|lambda#3| (_module.MyClass.R |$l#0_0#heap#0| |l#0@@1| ($Unbox refType |$l#0_0#p#0|)))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#39| |l#0@@1|) |$l#0_0#heap#0| |$l#0_0#p#0|))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((t0@@5 T@U) (t1@@4 T@U) (h0 T@U) (h1 T@U) (f@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@1 t0@@5) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@5 t1@@4)))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads1 t0@@5 t1@@4 h0 f@@1 bx0@@1) ($Box refType o@@1))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0 o@@1) fld) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires1 t0@@5 t1@@4 h0 f@@1 bx0@@1) (Requires1 t0@@5 t1@@4 h1 f@@1 bx0@@1)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@5 t1@@4 h1 f@@1 bx0@@1))
)))
(assert (forall ((t0@@6 T@U) (t1@@5 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@2 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@6) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@6 t1@@5)))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@6 t1@@5 h1@@0 f@@2 bx0@@2) ($Box refType o@@2))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires1 t0@@6 t1@@5 h0@@0 f@@2 bx0@@2) (Requires1 t0@@6 t1@@5 h1@@0 f@@2 bx0@@2)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@6 t1@@5 h1@@0 f@@2 bx0@@2))
)))
(assert (forall ((v@@0 T@U) (t0@@7 T@U) ) (! (= ($Is SetType v@@0 (TSet t0@@7)) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@0 bx@@3) ($IsBox bx@@3 t0@@7))
 :pattern ( (|Set#IsMember| v@@0 bx@@3))
)))
 :pattern ( ($Is SetType v@@0 (TSet t0@@7)))
)))
(assert (= (Ctor LayerTypeType) 10))
(assert (forall ((f@@3 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@3 ly) (MapType1Select LayerTypeType A f@@3 ly))
 :pattern ( (AtLayer A f@@3 ly))
)))
(assert ($IsGhostField alloc))
(assert ($IsGoodHeap $OneHeap))
(assert (forall (($h@@4 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) Tclass._module.MyClass?))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@4 $o@@2) alloc)))) ($IsAlloc intType ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@4 $o@@2) _module.MyClass.y)) TInt $h@@4))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@4 $o@@2) _module.MyClass.y)))
)))
(assert (forall ((v@@1 T@U) (t@@1 T@U) (h@@1 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@1) t@@1 h@@1) ($IsAlloc T@@1 v@@1 t@@1 h@@1))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@1) t@@1 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@0 T@U) (bx@@4 T@U) (t@@2 T@U) ) (!  (=> ($HeapSucc h@@2 k@@0) (=> ($IsAllocBox bx@@4 t@@2 h@@2) ($IsAllocBox bx@@4 t@@2 k@@0)))
 :pattern ( ($HeapSucc h@@2 k@@0) ($IsAllocBox bx@@4 t@@2 h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@1 T@U) (v@@2 T@U) (t@@3 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@3 k@@1) (=> ($IsAlloc T@@2 v@@2 t@@3 h@@3) ($IsAlloc T@@2 v@@2 t@@3 k@@1)))
 :pattern ( ($HeapSucc h@@3 k@@1) ($IsAlloc T@@2 v@@2 t@@3 h@@3))
)))
(assert (forall ((t0@@8 T@U) (t1@@6 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@8) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@8 t1@@6)))) (forall ((o@@3 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@8 t1@@6 h0@@1 f@@4 bx0@@3) ($Box refType o@@3))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@1 o@@3) fld@@1) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@1 o@@3) fld@@1))))) (= (Reads1 t0@@8 t1@@6 h0@@1 f@@4 bx0@@3) (Reads1 t0@@8 t1@@6 h1@@1 f@@4 bx0@@3)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@8 t1@@6 h1@@1 f@@4 bx0@@3))
)))
(assert (forall ((t0@@9 T@U) (t1@@7 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@5 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@9) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@9 t1@@7)))) (forall ((o@@4 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@9 t1@@7 h1@@2 f@@5 bx0@@4) ($Box refType o@@4))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@2 o@@4) fld@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@2 o@@4) fld@@2))))) (= (Reads1 t0@@9 t1@@7 h0@@2 f@@5 bx0@@4) (Reads1 t0@@9 t1@@7 h1@@2 f@@5 bx0@@4)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@9 t1@@7 h1@@2 f@@5 bx0@@4))
)))
(assert (forall ((t0@@10 T@U) (t1@@8 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@6 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@10) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@10 t1@@8)))) (forall ((o@@5 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@8 h0@@3 f@@6 bx0@@5) ($Box refType o@@5))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@3 o@@5) fld@@3) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@3 o@@5) fld@@3))))) (= (Apply1 t0@@10 t1@@8 h0@@3 f@@6 bx0@@5) (Apply1 t0@@10 t1@@8 h1@@3 f@@6 bx0@@5)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@10 t1@@8 h1@@3 f@@6 bx0@@5))
)))
(assert (forall ((t0@@11 T@U) (t1@@9 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@7 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@11) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@11 t1@@9)))) (forall ((o@@6 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@11 t1@@9 h1@@4 f@@7 bx0@@6) ($Box refType o@@6))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@4 o@@6) fld@@4) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@4 o@@6) fld@@4))))) (= (Apply1 t0@@11 t1@@9 h0@@4 f@@7 bx0@@6) (Apply1 t0@@11 t1@@9 h1@@4 f@@7 bx0@@6)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@11 t1@@9 h1@@4 f@@7 bx0@@6))
)))
(assert (forall ((u T@U) ) (!  (not (U_2_bool (MapType1Select BoxType boolType (|IMap#Domain| |IMap#Empty|) u)))
 :pattern ( (MapType1Select BoxType boolType (|IMap#Domain| |IMap#Empty|) u))
)))
(assert (forall ((|l#0@@2| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@2| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0@@2|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) (= $o@@3 |l#3|)))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@2| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(assert (forall ((s T@U) (bx@@5 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@5) (U_2_bool (MapType1Select refType boolType s ($Unbox refType bx@@5))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@5))
)))
(assert (forall ((t0@@12 T@U) (t1@@10 T@U) (heap@@1 T@U) (h@@4 T@U) (r@@0 T@U) (rd@@0 T@U) (bx0@@7 T@U) ) (! (= (Apply1 t0@@12 t1@@10 heap@@1 (Handle1 h@@4 r@@0 rd@@0) bx0@@7) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType h@@4 heap@@1 bx0@@7))
 :pattern ( (Apply1 t0@@12 t1@@10 heap@@1 (Handle1 h@@4 r@@0 rd@@0) bx0@@7))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@6 Tclass._System.object?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.MyClass?) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._module.MyClass?)))
 :pattern ( ($IsBox bx@@8 Tclass._module.MyClass?))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.MyClass) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass._module.MyClass)))
 :pattern ( ($IsBox bx@@9 Tclass._module.MyClass))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass._System.object)  (and ($Is refType |c#0@@3| Tclass._System.object?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@3| Tclass._System.object?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.MyClass)  (and ($Is refType |c#0@@4| Tclass._module.MyClass?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.MyClass))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.MyClass?))
)))
(assert (forall ((m@@4 T@U) ) (!  (or (= m@@4 |IMap#Empty|) (exists ((k@@2 T@U) ) (U_2_bool (MapType1Select BoxType boolType (|IMap#Domain| m@@4) k@@2))))
 :pattern ( (|IMap#Domain| m@@4))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |IMap#Empty|) (exists ((v@@3 T@U) ) (U_2_bool (MapType1Select BoxType boolType (|IMap#Values| m@@5) v@@3))))
 :pattern ( (|IMap#Values| m@@5))
)))
(assert (forall ((f@@8 T@U) (t0@@13 T@U) (t1@@11 T@U) (h@@5 T@U) ) (!  (=> (and ($IsGoodHeap h@@5) ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@13 t1@@11) h@@5)) (forall ((bx0@@8 T@U) ) (!  (=> (and ($IsAllocBox bx0@@8 t0@@13 h@@5) (Requires1 t0@@13 t1@@11 h@@5 f@@8 bx0@@8)) ($IsAllocBox (Apply1 t0@@13 t1@@11 h@@5 f@@8 bx0@@8) t1@@11 h@@5))
 :pattern ( (Apply1 t0@@13 t1@@11 h@@5 f@@8 bx0@@8))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@13 t1@@11) h@@5))
)))
(assert (forall ((|l#0@@3| T@U) (|$l#1_1_1_0#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#5| |l#0@@3|) |$l#1_1_1_0#ly#0|) |l#0@@3|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#5| |l#0@@3|) |$l#1_1_1_0#ly#0|))
)))
(assert (forall ((|l#0@@4| T@U) (|$w#1_1_0_0| T@U) ) (! (= (MapType1Select BoxType BoxType (|lambda#34| |l#0@@4|) |$w#1_1_0_0|) |l#0@@4|)
 :pattern ( (MapType1Select BoxType BoxType (|lambda#34| |l#0@@4|) |$w#1_1_0_0|))
)))
(assert (forall ((v@@4 T@U) (t0@@14 T@U) (h@@6 T@U) ) (! (= ($IsAlloc (MapType1Type BoxType boolType) v@@4 (TISet t0@@14) h@@6) (forall ((bx@@10 T@U) ) (!  (=> (U_2_bool (MapType1Select BoxType boolType v@@4 bx@@10)) ($IsAllocBox bx@@10 t0@@14 h@@6))
 :pattern ( (MapType1Select BoxType boolType v@@4 bx@@10))
)))
 :pattern ( ($IsAlloc (MapType1Type BoxType boolType) v@@4 (TISet t0@@14) h@@6))
)))
(assert (forall ((m@@6 T@U) (item T@U) ) (! (= (U_2_bool (MapType1Select BoxType boolType (|IMap#Items| m@@6) item))  (and (U_2_bool (MapType1Select BoxType boolType (|IMap#Domain| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType1Select BoxType BoxType (|IMap#Elements| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (MapType1Select BoxType boolType (|IMap#Items| m@@6) item))
)))
(assert (forall ((m@@7 T@U) (v@@5 T@U) ) (! (= (U_2_bool (MapType1Select BoxType boolType (|IMap#Values| m@@7) v@@5)) (exists ((u@@0 T@U) ) (!  (and (U_2_bool (MapType1Select BoxType boolType (|IMap#Domain| m@@7) u@@0)) (= v@@5 (MapType1Select BoxType BoxType (|IMap#Elements| m@@7) u@@0)))
 :pattern ( (MapType1Select BoxType boolType (|IMap#Domain| m@@7) u@@0))
 :pattern ( (MapType1Select BoxType BoxType (|IMap#Elements| m@@7) u@@0))
)))
 :pattern ( (MapType1Select BoxType boolType (|IMap#Values| m@@7) v@@5))
)))
(assert (= (Ctor IMapType) 11))
(assert (forall ((v@@6 T@U) (t0@@15 T@U) (t1@@12 T@U) (h@@7 T@U) ) (! (= ($IsAlloc IMapType v@@6 (TIMap t0@@15 t1@@12) h@@7) (forall ((bx@@11 T@U) ) (!  (=> (U_2_bool (MapType1Select BoxType boolType (|IMap#Domain| v@@6) bx@@11)) (and ($IsAllocBox (MapType1Select BoxType BoxType (|IMap#Elements| v@@6) bx@@11) t1@@12 h@@7) ($IsAllocBox bx@@11 t0@@15 h@@7)))
 :pattern ( (MapType1Select BoxType BoxType (|IMap#Elements| v@@6) bx@@11))
 :pattern ( (MapType1Select BoxType boolType (|IMap#Domain| v@@6) bx@@11))
)))
 :pattern ( ($IsAlloc IMapType v@@6 (TIMap t0@@15 t1@@12) h@@7))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (|Set#Equal| a@@1 b@@1) (= a@@1 b@@1))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (or (not (= a@@2 c)) (not true)) (=> (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) ($HeapSucc a@@2 c)))
 :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))
)))
(assert (forall ((f@@9 T@U) (t0@@16 T@U) (t1@@13 T@U) ) (! (= ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@16 t1@@13)) (forall ((h@@8 T@U) (bx0@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@8) ($IsBox bx0@@9 t0@@16)) (Requires1 t0@@16 t1@@13 h@@8 f@@9 bx0@@9)) ($IsBox (Apply1 t0@@16 t1@@13 h@@8 f@@9 bx0@@9) t1@@13))
 :pattern ( (Apply1 t0@@16 t1@@13 h@@8 f@@9 bx0@@9))
)))
 :pattern ( ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@16 t1@@13)))
)))
(assert (forall ((m@@8 T@U) ) (! (= (= m@@8 |IMap#Empty|) (= (|IMap#Domain| m@@8) |ISet#Empty|))
 :pattern ( (|IMap#Domain| m@@8))
)))
(assert (forall ((m@@9 T@U) ) (! (= (= m@@9 |IMap#Empty|) (= (|IMap#Values| m@@9) |ISet#Empty|))
 :pattern ( (|IMap#Values| m@@9))
)))
(assert (forall ((m@@10 T@U) ) (! (= (= m@@10 |IMap#Empty|) (= (|IMap#Items| m@@10) |ISet#Empty|))
 :pattern ( (|IMap#Items| m@@10))
)))
(assert (forall ((m@@11 T@U) ) (!  (or (= m@@11 |IMap#Empty|) (exists ((k@@3 T@U) (v@@7 T@U) ) (U_2_bool (MapType1Select BoxType boolType (|IMap#Items| m@@11) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@3 v@@7))))))
 :pattern ( (|IMap#Items| m@@11))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 TInt) (and (= ($Box intType ($Unbox intType bx@@12)) bx@@12) ($Is intType ($Unbox intType bx@@12) TInt)))
 :pattern ( ($IsBox bx@@12 TInt))
)))
(assert (forall ((v@@8 T@U) (t@@4 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@8) t@@4) ($Is T@@3 v@@8 t@@4))
 :pattern ( ($IsBox ($Box T@@3 v@@8) t@@4))
)))
(assert (forall ((t0@@17 T@U) (t1@@14 T@U) (heap@@2 T@U) (h@@9 T@U) (r@@1 T@U) (rd@@1 T@U) (bx0@@10 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType r@@1 heap@@2 bx0@@10)) (Requires1 t0@@17 t1@@14 heap@@2 (Handle1 h@@9 r@@1 rd@@1) bx0@@10))
 :pattern ( (Requires1 t0@@17 t1@@14 heap@@2 (Handle1 h@@9 r@@1 rd@@1) bx0@@10))
)))
(assert (forall ((v@@9 T@U) (t0@@18 T@U) (h@@10 T@U) ) (! (= ($IsAlloc SetType v@@9 (TSet t0@@18) h@@10) (forall ((bx@@13 T@U) ) (!  (=> (|Set#IsMember| v@@9 bx@@13) ($IsAllocBox bx@@13 t0@@18 h@@10))
 :pattern ( (|Set#IsMember| v@@9 bx@@13))
)))
 :pattern ( ($IsAlloc SetType v@@9 (TSet t0@@18) h@@10))
)))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (! (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)
 :pattern ( (TIMap t@@5 u@@1))
)))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (! (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)
 :pattern ( (TIMap t@@6 u@@2))
)))
(assert (forall ((t@@7 T@U) (u@@3 T@U) ) (! (= (Tag (TIMap t@@7 u@@3)) TagIMap)
 :pattern ( (TIMap t@@7 u@@3))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$R@@0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall (($o@@4 T@U) ) (! ($Is refType $o@@4 Tclass._System.object?)
 :pattern ( ($Is refType $o@@4 Tclass._System.object?))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Inv0_TSet (TSet t@@8)) t@@8)
 :pattern ( (TSet t@@8))
)))
(assert (forall ((t@@9 T@U) ) (! (= (Tag (TSet t@@9)) TagSet)
 :pattern ( (TSet t@@9))
)))
(assert (forall ((t@@10 T@U) ) (! (= (Inv0_TISet (TISet t@@10)) t@@10)
 :pattern ( (TISet t@@10))
)))
(assert (forall ((t@@11 T@U) ) (! (= (Tag (TISet t@@11)) TagISet)
 :pattern ( (TISet t@@11))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((v@@10 T@U) (t0@@19 T@U) (t1@@15 T@U) ) (! (= ($Is IMapType v@@10 (TIMap t0@@19 t1@@15)) (forall ((bx@@14 T@U) ) (!  (=> (U_2_bool (MapType1Select BoxType boolType (|IMap#Domain| v@@10) bx@@14)) (and ($IsBox (MapType1Select BoxType BoxType (|IMap#Elements| v@@10) bx@@14) t1@@15) ($IsBox bx@@14 t0@@19)))
 :pattern ( (MapType1Select BoxType BoxType (|IMap#Elements| v@@10) bx@@14))
 :pattern ( (MapType1Select BoxType boolType (|IMap#Domain| v@@10) bx@@14))
)))
 :pattern ( ($Is IMapType v@@10 (TIMap t0@@19 t1@@15)))
)))
(assert (forall (($h@@5 T@U) ($o@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) Tclass._module.MyClass?))) ($Is intType ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@5 $o@@5) _module.MyClass.y)) TInt))
 :pattern ( ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@5 $o@@5) _module.MyClass.y)))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((|l#0@@5| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| T@U) (|l#4| T@U) (|$w#1_1_0_0@@0| T@U) ) (! (= (U_2_bool (MapType1Select BoxType boolType (|lambda#33| |l#0@@5| |l#1@@0| |l#2@@0| |l#3@@0| |l#4|) |$w#1_1_0_0@@0|))  (and (and ($IsBox |$w#1_1_0_0@@0| |l#0@@5|) ($IsAllocBox |$w#1_1_0_0@@0| |l#1@@0| |l#2@@0|)) (= (_module.MyClass.R |l#3@@0| |l#4| ($Unbox refType |$w#1_1_0_0@@0|)) ($Unbox refType |$w#1_1_0_0@@0|))))
 :pattern ( (MapType1Select BoxType boolType (|lambda#33| |l#0@@5| |l#1@@0| |l#2@@0| |l#3@@0| |l#4|) |$w#1_1_0_0@@0|))
)))
(assert (forall (($heap T@U) (this@@1 T@U) ) (!  (=> (|$let#0$canCall| $heap this@@1) (and ($Is refType (|$let#0_p| $heap this@@1) Tclass._module.MyClass) (= (_module.MyClass.R $heap this@@1 (|$let#0_p| $heap this@@1)) (|$let#0_p| $heap this@@1))))
 :pattern ( (|$let#0_p| $heap this@@1))
)))
(assert (forall ((f@@10 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@10 ($LS ly@@0)) (AtLayer A@@0 f@@10 ly@@0))
 :pattern ( (AtLayer A@@0 f@@10 ($LS ly@@0)))
)))
(assert (forall ((f@@11 T@U) (t0@@20 T@U) (t1@@16 T@U) (h@@11 T@U) ) (!  (=> ($IsGoodHeap h@@11) (= ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@20 t1@@16) h@@11) (forall ((bx0@@11 T@U) ) (!  (=> (and (and ($IsBox bx0@@11 t0@@20) ($IsAllocBox bx0@@11 t0@@20 h@@11)) (Requires1 t0@@20 t1@@16 h@@11 f@@11 bx0@@11)) (forall ((r@@2 T@U) ) (!  (=> (and (or (not (= r@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@20 t1@@16 h@@11 f@@11 bx0@@11) ($Box refType r@@2))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@11 r@@2) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@20 t1@@16 h@@11 f@@11 bx0@@11) ($Box refType r@@2)))
)))
 :pattern ( (Apply1 t0@@20 t1@@16 h@@11 f@@11 bx0@@11))
 :pattern ( (Reads1 t0@@20 t1@@16 h@@11 f@@11 bx0@@11))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@20 t1@@16) h@@11))
)))
(assert (forall ((bx@@15 T@U) (s@@0 T@U) (t@@12 T@U) ) (!  (=> ($IsBox bx@@15 (TIMap s@@0 t@@12)) (and (= ($Box IMapType ($Unbox IMapType bx@@15)) bx@@15) ($Is IMapType ($Unbox IMapType bx@@15) (TIMap s@@0 t@@12))))
 :pattern ( ($IsBox bx@@15 (TIMap s@@0 t@@12)))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) (bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@16)) bx@@16) ($Is HandleTypeType ($Unbox HandleTypeType bx@@16) (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))))
 :pattern ( ($IsBox bx@@16 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@17)) bx@@17) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@17) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@17 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((o@@7 T@U) ) (!  (not (U_2_bool (MapType1Select BoxType boolType |ISet#Empty| o@@7)))
 :pattern ( (MapType1Select BoxType boolType |ISet#Empty| o@@7))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) (t0@@21 T@U) (t1@@17 T@U) ) (!  (=> (forall ((bx@@18 T@U) )  (=> (U_2_bool (MapType1Select BoxType boolType a@@3 bx@@18)) (and ($IsBox bx@@18 t0@@21) ($IsBox (MapType1Select BoxType BoxType b@@3 bx@@18) t1@@17)))) ($Is IMapType (|IMap#Glue| a@@3 b@@3 (TIMap t0@@21 t1@@17)) (TIMap t0@@21 t1@@17)))
 :pattern ( (|IMap#Glue| a@@3 b@@3 (TIMap t0@@21 t1@@17)))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((t0@@22 T@U) (t1@@18 T@U) (heap@@3 T@U) (f@@12 T@U) (bx0@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@3) (and ($IsBox bx0@@12 t0@@22) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@22 t1@@18)))) (|Set#Equal| (Reads1 t0@@22 t1@@18 $OneHeap f@@12 bx0@@12) |Set#Empty|)) (= (Requires1 t0@@22 t1@@18 $OneHeap f@@12 bx0@@12) (Requires1 t0@@22 t1@@18 heap@@3 f@@12 bx0@@12)))
 :pattern ( (Requires1 t0@@22 t1@@18 $OneHeap f@@12 bx0@@12) ($IsGoodHeap heap@@3))
 :pattern ( (Requires1 t0@@22 t1@@18 heap@@3 f@@12 bx0@@12))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@19 T@U) (t@@13 T@U) ) (!  (=> ($IsBox bx@@19 (TSet t@@13)) (and (= ($Box SetType ($Unbox SetType bx@@19)) bx@@19) ($Is SetType ($Unbox SetType bx@@19) (TSet t@@13))))
 :pattern ( ($IsBox bx@@19 (TSet t@@13)))
)))
(assert (forall ((bx@@20 T@U) (t@@14 T@U) ) (!  (=> ($IsBox bx@@20 (TISet t@@14)) (and (= ($Box (MapType1Type BoxType boolType) ($Unbox (MapType1Type BoxType boolType) bx@@20)) bx@@20) ($Is (MapType1Type BoxType boolType) ($Unbox (MapType1Type BoxType boolType) bx@@20) (TISet t@@14))))
 :pattern ( ($IsBox bx@@20 (TISet t@@14)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.MyClass?) Tagclass._module.MyClass?))
(assert (= (TagFamily Tclass._module.MyClass?) tytagFamily$MyClass))
(assert (= (Tag Tclass._module.MyClass) Tagclass._module.MyClass))
(assert (= (TagFamily Tclass._module.MyClass) tytagFamily$MyClass))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@2 T@U) (|c#0@@5| T@U) ) (!  (=> (or (|_module.MyClass.R#canCall| $Heap@@1 this@@2 |c#0@@5|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 Tclass._module.MyClass) ($IsAlloc refType this@@2 Tclass._module.MyClass $Heap@@1)))) (and ($Is refType |c#0@@5| Tclass._module.MyClass) ($IsAlloc refType |c#0@@5| Tclass._module.MyClass $Heap@@1))))) ($Is refType (_module.MyClass.R $Heap@@1 this@@2 |c#0@@5|) Tclass._module.MyClass))
 :pattern ( (_module.MyClass.R $Heap@@1 this@@2 |c#0@@5|))
))))
(assert (forall ((s@@1 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@1) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@1))
)))
(assert (forall (($h0 T@U) ($h1 T@U) (this@@3 T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 Tclass._module.MyClass))) (or (|_module.MyClass.R#canCall| $h0 this@@3 |c#0@@6|) ($Is refType |c#0@@6| Tclass._module.MyClass))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@6 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@6 null)) (not true)) (= $o@@6 this@@3)) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h0 $o@@6) $f@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h1 $o@@6) $f@@0)))) (= (_module.MyClass.R $h0 this@@3 |c#0@@6|) (_module.MyClass.R $h1 this@@3 |c#0@@6|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.MyClass.R $h1 this@@3 |c#0@@6|))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|Set#Equal| a@@4 b@@4) (forall ((o@@8 T@U) ) (! (= (|Set#IsMember| a@@4 o@@8) (|Set#IsMember| b@@4 o@@8))
 :pattern ( (|Set#IsMember| a@@4 o@@8))
 :pattern ( (|Set#IsMember| b@@4 o@@8))
)))
 :pattern ( (|Set#Equal| a@@4 b@@4))
)))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@6)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@6))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@6))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@6))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@7)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@7))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@7))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@7))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((h@@12 T@U) (v@@11 T@U) ) (! ($IsAlloc intType v@@11 TInt h@@12)
 :pattern ( ($IsAlloc intType v@@11 TInt h@@12))
)))
(assert (forall ((|l#0@@6| T@U) (|$l#0#heap#0| T@U) (|$l#0#p#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#26| |l#0@@6|) |$l#0#heap#0| |$l#0#p#0|) |l#0@@6|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#26| |l#0@@6|) |$l#0#heap#0| |$l#0#p#0|))
)))
(assert (forall ((v@@12 T@U) (t0@@23 T@U) (t1@@19 T@U) ) (!  (=> ($Is IMapType v@@12 (TIMap t0@@23 t1@@19)) (and (and ($Is (MapType1Type BoxType boolType) (|IMap#Domain| v@@12) (TISet t0@@23)) ($Is (MapType1Type BoxType boolType) (|IMap#Values| v@@12) (TISet t1@@19))) ($Is (MapType1Type BoxType boolType) (|IMap#Items| v@@12) (TISet (Tclass._System.Tuple2 t0@@23 t1@@19)))))
 :pattern ( ($Is IMapType v@@12 (TIMap t0@@23 t1@@19)))
)))
(assert (forall ((v@@13 T@U) ) (! ($Is intType v@@13 TInt)
 :pattern ( ($Is intType v@@13 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |p#0_0@0| () T@U)
(declare-fun |$Heap_at_$lambdaHeap#0_0@0| () T@U)
(declare-fun |$_Frame#l0_0@0| () T@U)
(declare-fun this@@4 () T@U)
(declare-fun |b$reqreads#0_0@0| () Bool)
(declare-fun |lambdaResult#0_0| () Int)
(declare-fun $Heap@@2 () T@U)
(declare-fun |p#1_0_0@0| () T@U)
(declare-fun |p#1_1_0_0@0| () T@U)
(declare-fun |p#1_1_1_0_1@0| () T@U)
(declare-fun |p#1_1_1_1_1@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |h#0_0| () T@U)
(declare-fun |s#1_0_0| () T@U)
(declare-fun |m#1_1_0_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 45) (let ((anon4_correct true))
(let ((anon25_Else_correct  (=> (and (not (and ($Is refType |p#0_0@0| Tclass._module.MyClass) ($IsAlloc refType |p#0_0@0| Tclass._module.MyClass |$Heap_at_$lambdaHeap#0_0@0|))) (= (ControlFlow 0 41) 36)) anon4_correct)))
(let ((anon25_Then_correct  (=> (and (and ($Is refType |p#0_0@0| Tclass._module.MyClass) ($IsAlloc refType |p#0_0@0| Tclass._module.MyClass |$Heap_at_$lambdaHeap#0_0@0|)) (= |$_Frame#l0_0@0| (|lambda#0| null |$Heap_at_$lambdaHeap#0_0@0| alloc (_module.MyClass.R |$Heap_at_$lambdaHeap#0_0@0| this@@4 |p#0_0@0|)))) (and (=> (= (ControlFlow 0 37) (- 0 40)) ($IsAlloc refType this@@4 Tclass._module.MyClass |$Heap_at_$lambdaHeap#0_0@0|)) (=> ($IsAlloc refType this@@4 Tclass._module.MyClass |$Heap_at_$lambdaHeap#0_0@0|) (and (=> (= (ControlFlow 0 37) (- 0 39)) ($IsAlloc refType |p#0_0@0| Tclass._module.MyClass |$Heap_at_$lambdaHeap#0_0@0|)) (=> ($IsAlloc refType |p#0_0@0| Tclass._module.MyClass |$Heap_at_$lambdaHeap#0_0@0|) (=> (and (= |b$reqreads#0_0@0| (forall (($o@@7 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$Heap_at_$lambdaHeap#0_0@0| $o@@7) alloc)))) (= $o@@7 this@@4)) (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0_0@0| $o@@7 $f@@1))))) (|_module.MyClass.R#canCall| |$Heap_at_$lambdaHeap#0_0@0| this@@4 |p#0_0@0|)) (and (=> (= (ControlFlow 0 37) (- 0 38)) |b$reqreads#0_0@0|) (=> |b$reqreads#0_0@0| (=> (= |lambdaResult#0_0| (LitInt 5)) (=> (and ($Is intType (int_2_U |lambdaResult#0_0|) TInt) (= (ControlFlow 0 37) 36)) anon4_correct))))))))))))
(let ((anon24_Then_correct  (=> (and ($IsGoodHeap |$Heap_at_$lambdaHeap#0_0@0|) (or (= $Heap@@2 |$Heap_at_$lambdaHeap#0_0@0|) ($HeapSucc $Heap@@2 |$Heap_at_$lambdaHeap#0_0@0|))) (and (=> (= (ControlFlow 0 42) 37) anon25_Then_correct) (=> (= (ControlFlow 0 42) 41) anon25_Else_correct)))))
(let ((anon24_Else_correct true))
(let ((anon23_Then_correct  (and (=> (= (ControlFlow 0 43) 42) anon24_Then_correct) (=> (= (ControlFlow 0 43) 35) anon24_Else_correct))))
(let ((anon10_correct true))
(let ((anon28_Else_correct  (=> (and (or (not (= (_module.MyClass.R $Heap@@2 this@@4 |p#1_0_0@0|) |p#1_0_0@0|)) (not true)) (= (ControlFlow 0 29) 26)) anon10_correct)))
(let ((anon28_Then_correct  (=> (and (= (_module.MyClass.R $Heap@@2 this@@4 |p#1_0_0@0|) |p#1_0_0@0|) (= (ControlFlow 0 28) 26)) anon10_correct)))
(let ((anon27_Then_correct  (=> (and ($Is refType |p#1_0_0@0| Tclass._module.MyClass) ($IsAlloc refType |p#1_0_0@0| Tclass._module.MyClass $Heap@@2)) (and (=> (= (ControlFlow 0 30) (- 0 32)) ($IsAlloc refType this@@4 Tclass._module.MyClass $Heap@@2)) (=> ($IsAlloc refType this@@4 Tclass._module.MyClass $Heap@@2) (and (=> (= (ControlFlow 0 30) (- 0 31)) ($IsAlloc refType |p#1_0_0@0| Tclass._module.MyClass $Heap@@2)) (=> ($IsAlloc refType |p#1_0_0@0| Tclass._module.MyClass $Heap@@2) (=> (|_module.MyClass.R#canCall| $Heap@@2 this@@4 |p#1_0_0@0|) (and (=> (= (ControlFlow 0 30) 28) anon28_Then_correct) (=> (= (ControlFlow 0 30) 29) anon28_Else_correct))))))))))
(let ((anon27_Else_correct  (=> (and (not (and ($Is refType |p#1_0_0@0| Tclass._module.MyClass) ($IsAlloc refType |p#1_0_0@0| Tclass._module.MyClass $Heap@@2))) (= (ControlFlow 0 27) 26)) anon10_correct)))
(let ((anon26_Then_correct  (and (=> (= (ControlFlow 0 33) 30) anon27_Then_correct) (=> (= (ControlFlow 0 33) 27) anon27_Else_correct))))
(let ((anon15_correct true))
(let ((anon31_Else_correct  (=> (and (or (not (= (_module.MyClass.R $Heap@@2 this@@4 |p#1_1_0_0@0|) |p#1_1_0_0@0|)) (not true)) (= (ControlFlow 0 20) 17)) anon15_correct)))
(let ((anon31_Then_correct  (=> (and (= (_module.MyClass.R $Heap@@2 this@@4 |p#1_1_0_0@0|) |p#1_1_0_0@0|) (= (ControlFlow 0 19) 17)) anon15_correct)))
(let ((anon30_Then_correct  (=> (and ($Is refType |p#1_1_0_0@0| Tclass._module.MyClass) ($IsAlloc refType |p#1_1_0_0@0| Tclass._module.MyClass $Heap@@2)) (and (=> (= (ControlFlow 0 21) (- 0 23)) ($IsAlloc refType this@@4 Tclass._module.MyClass $Heap@@2)) (=> ($IsAlloc refType this@@4 Tclass._module.MyClass $Heap@@2) (and (=> (= (ControlFlow 0 21) (- 0 22)) ($IsAlloc refType |p#1_1_0_0@0| Tclass._module.MyClass $Heap@@2)) (=> ($IsAlloc refType |p#1_1_0_0@0| Tclass._module.MyClass $Heap@@2) (=> (|_module.MyClass.R#canCall| $Heap@@2 this@@4 |p#1_1_0_0@0|) (and (=> (= (ControlFlow 0 21) 19) anon31_Then_correct) (=> (= (ControlFlow 0 21) 20) anon31_Else_correct))))))))))
(let ((anon30_Else_correct  (=> (and (not (and ($Is refType |p#1_1_0_0@0| Tclass._module.MyClass) ($IsAlloc refType |p#1_1_0_0@0| Tclass._module.MyClass $Heap@@2))) (= (ControlFlow 0 18) 17)) anon15_correct)))
(let ((anon29_Then_correct  (and (=> (= (ControlFlow 0 24) 21) anon30_Then_correct) (=> (= (ControlFlow 0 24) 18) anon30_Else_correct))))
(let ((anon19_correct  (and (=> (= (ControlFlow 0 8) (- 0 10)) (or (and ($Is refType null Tclass._module.MyClass) (= (_module.MyClass.R $Heap@@2 this@@4 null) null)) (exists ((|p#1_1_1_0_0| T@U) )  (and ($Is refType |p#1_1_1_0_0| Tclass._module.MyClass) (= (_module.MyClass.R $Heap@@2 this@@4 |p#1_1_1_0_0|) |p#1_1_1_0_0|))))) (=> (or (and ($Is refType null Tclass._module.MyClass) (= (_module.MyClass.R $Heap@@2 this@@4 null) null)) (exists ((|p#1_1_1_0_0@@0| T@U) )  (and ($Is refType |p#1_1_1_0_0@@0| Tclass._module.MyClass) (= (_module.MyClass.R $Heap@@2 this@@4 |p#1_1_1_0_0@@0|) |p#1_1_1_0_0@@0|)))) (=> (and (and ($Is refType |p#1_1_1_0_1@0| Tclass._module.MyClass) ($IsAlloc refType |p#1_1_1_0_1@0| Tclass._module.MyClass $Heap@@2)) (= (_module.MyClass.R $Heap@@2 this@@4 |p#1_1_1_0_1@0|) |p#1_1_1_0_1@0|)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (not (= |p#1_1_1_0_1@0| null)) (not true))) (=> (or (not (= |p#1_1_1_0_1@0| null)) (not true)) (=> (= (ControlFlow 0 8) (- 0 7)) ($IsAlloc refType |p#1_1_1_0_1@0| Tclass._module.MyClass $Heap@@2)))))))))
(let ((anon33_Else_correct  (=> (and (not (and ($Is refType |p#1_1_1_0_1@0| Tclass._module.MyClass) ($IsAlloc refType |p#1_1_1_0_1@0| Tclass._module.MyClass $Heap@@2))) (= (ControlFlow 0 14) 8)) anon19_correct)))
(let ((anon33_Then_correct  (=> (and ($Is refType |p#1_1_1_0_1@0| Tclass._module.MyClass) ($IsAlloc refType |p#1_1_1_0_1@0| Tclass._module.MyClass $Heap@@2)) (and (=> (= (ControlFlow 0 11) (- 0 13)) ($IsAlloc refType this@@4 Tclass._module.MyClass $Heap@@2)) (=> ($IsAlloc refType this@@4 Tclass._module.MyClass $Heap@@2) (and (=> (= (ControlFlow 0 11) (- 0 12)) ($IsAlloc refType |p#1_1_1_0_1@0| Tclass._module.MyClass $Heap@@2)) (=> ($IsAlloc refType |p#1_1_1_0_1@0| Tclass._module.MyClass $Heap@@2) (=> (and (|_module.MyClass.R#canCall| $Heap@@2 this@@4 |p#1_1_1_0_1@0|) (= (ControlFlow 0 11) 8)) anon19_correct))))))))
(let ((anon32_Then_correct  (and (=> (= (ControlFlow 0 15) 11) anon33_Then_correct) (=> (= (ControlFlow 0 15) 14) anon33_Else_correct))))
(let ((anon22_correct true))
(let ((anon34_Else_correct  (=> (and (not (and ($Is refType |p#1_1_1_1_1@0| Tclass._module.MyClass) ($IsAlloc refType |p#1_1_1_1_1@0| Tclass._module.MyClass $Heap@@2))) (= (ControlFlow 0 5) 1)) anon22_correct)))
(let ((anon34_Then_correct  (=> (and ($Is refType |p#1_1_1_1_1@0| Tclass._module.MyClass) ($IsAlloc refType |p#1_1_1_1_1@0| Tclass._module.MyClass $Heap@@2)) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($IsAlloc refType this@@4 Tclass._module.MyClass $Heap@@2)) (=> ($IsAlloc refType this@@4 Tclass._module.MyClass $Heap@@2) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($IsAlloc refType |p#1_1_1_1_1@0| Tclass._module.MyClass $Heap@@2)) (=> ($IsAlloc refType |p#1_1_1_1_1@0| Tclass._module.MyClass $Heap@@2) (=> (and (|_module.MyClass.R#canCall| $Heap@@2 this@@4 |p#1_1_1_1_1@0|) (= (ControlFlow 0 2) 1)) anon22_correct))))))))
(let ((anon32_Else_correct  (and (=> (= (ControlFlow 0 6) 2) anon34_Then_correct) (=> (= (ControlFlow 0 6) 5) anon34_Else_correct))))
(let ((anon29_Else_correct  (and (=> (= (ControlFlow 0 16) 15) anon32_Then_correct) (=> (= (ControlFlow 0 16) 6) anon32_Else_correct))))
(let ((anon26_Else_correct  (and (=> (= (ControlFlow 0 25) 24) anon29_Then_correct) (=> (= (ControlFlow 0 25) 16) anon29_Else_correct))))
(let ((anon23_Else_correct  (and (=> (= (ControlFlow 0 34) 33) anon26_Then_correct) (=> (= (ControlFlow 0 34) 25) anon26_Else_correct))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@2 alloc this@@4)) (and (=> (= (ControlFlow 0 44) 43) anon23_Then_correct) (=> (= (ControlFlow 0 44) 34) anon23_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (and (or (not (= this@@4 null)) (not true)) (and ($Is refType this@@4 Tclass._module.MyClass) ($IsAlloc refType this@@4 Tclass._module.MyClass $Heap@@2)))) (=> (and (and (and (and ($Is HandleTypeType |h#0_0| (Tclass._System.___hFunc1 Tclass._module.MyClass TInt)) ($IsAlloc HandleTypeType |h#0_0| (Tclass._System.___hFunc1 Tclass._module.MyClass TInt) $Heap@@2)) true) (and (and ($Is (MapType1Type BoxType boolType) |s#1_0_0| (TISet Tclass._module.MyClass)) ($IsAlloc (MapType1Type BoxType boolType) |s#1_0_0| (TISet Tclass._module.MyClass) $Heap@@2)) true)) (and (and (and ($Is IMapType |m#1_1_0_0| (TIMap Tclass._module.MyClass TInt)) ($IsAlloc IMapType |m#1_1_0_0| (TIMap Tclass._module.MyClass TInt) $Heap@@2)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 45) 44)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
