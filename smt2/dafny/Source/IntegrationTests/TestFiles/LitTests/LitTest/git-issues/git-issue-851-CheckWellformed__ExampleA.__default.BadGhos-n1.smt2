(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@U) Bool)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 (T@T T@T) T@T)
(declare-fun $generated@@40 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@42 (T@T) T@T)
(declare-fun $generated@@64 () Bool)
(declare-fun $generated@@65 (T@U) Bool)
(declare-fun $generated@@66 () Bool)
(declare-fun $generated@@67 () Bool)
(declare-fun $generated@@68 () T@U)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U) Bool)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@86 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@118 (T@U) T@U)
(declare-fun $generated@@119 (T@U) Bool)
(declare-fun $generated@@120 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@23) 3))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@26 $generated@@24 $generated@@27) ($generated@@22 $generated@@23 $generated@@26 $generated@@25 $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 $generated@@26 $generated@@24 $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 $generated@@26 $generated@@25 $generated@@27))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@34 T@U) ) (!  (=> (or ($generated@@30 $generated@@34) (and (< 0 $generated@@28) (and (or (not (= $generated@@34 $generated@@31)) (not true)) ($generated@@32 $generated@@23 $generated@@34 $generated@@24)))) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 false))))
 :pattern ( ($generated@@29 $generated@@34))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@36 $generated@@43 $generated@@44 ($generated@@40 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@45) $generated@@47) $generated@@45)
 :weight 0
)) (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (!  (or (= $generated@@52 $generated@@53) (= ($generated@@36 $generated@@48 $generated@@49 ($generated@@40 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@50) $generated@@53) ($generated@@36 $generated@@48 $generated@@49 $generated@@51 $generated@@53)))
 :weight 0
))) (= ($generated@@5 $generated@@37) 4)) (= ($generated@@5 $generated@@38) 5)) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (= ($generated@@5 ($generated@@39 $generated@@54 $generated@@55)) 6))) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (! (= ($generated@@41 ($generated@@39 $generated@@56 $generated@@57)) $generated@@56)
 :pattern ( ($generated@@39 $generated@@56 $generated@@57))
))) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (! (= ($generated@@42 ($generated@@39 $generated@@58 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@39 $generated@@58 $generated@@59))
))))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@60 $generated@@25 $generated@@61)  (or (= $generated@@60 $generated@@31) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@36 $generated@@37 $generated@@38 ($generated@@36 $generated@@23 ($generated@@39 $generated@@37 $generated@@38) $generated@@61 $generated@@60) $generated@@1)))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@60 $generated@@25 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@33 $generated@@63 $generated@@62) $generated@@62)
 :pattern ( ($generated@@33 $generated@@63 $generated@@62))
)))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@69 T@U) ) (!  (=> (or $generated@@66 (and (< 1 $generated@@28) ($generated@@65 $generated@@69))) (and (and $generated@@67 ($generated@@30 $generated@@68)) (= $generated@@64 (let (($generated@@70 $generated@@68))
($generated@@29 $generated@@70)))))
 :pattern ( $generated@@64 ($generated@@65 $generated@@69))
))))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@71 T@U) ) (!  (=> (or $generated@@66 (and (< 1 $generated@@28) ($generated@@65 $generated@@71))) (and (and $generated@@67 ($generated@@30 $generated@@68)) (= $generated@@64 (let (($generated@@72 $generated@@68))
($generated@@29 $generated@@72)))))
 :weight 3
 :pattern ( $generated@@64 ($generated@@65 $generated@@71))
))))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 ($generated@@35 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@35 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@76 ($generated@@73 $generated@@80 $generated@@77) $generated@@78 $generated@@79) ($generated@@22 $generated@@80 $generated@@77 $generated@@78 $generated@@79))
 :pattern ( ($generated@@76 ($generated@@73 $generated@@80 $generated@@77) $generated@@78 $generated@@79))
)))
(assert  (=> (<= 1 $generated@@28) (=> (or $generated@@66 (< 1 $generated@@28)) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 false))))))
(assert (forall (($generated@@81 T@U) ) (! (= ($generated@@32 $generated@@23 $generated@@81 $generated@@24)  (and ($generated@@32 $generated@@23 $generated@@81 $generated@@25) (or (not (= $generated@@81 $generated@@31)) (not true))))
 :pattern ( ($generated@@32 $generated@@23 $generated@@81 $generated@@24))
 :pattern ( ($generated@@32 $generated@@23 $generated@@81 $generated@@25))
)))
(assert  (=> $generated@@67 (and ($generated@@32 $generated@@23 $generated@@68 $generated@@24) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 true))))))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@35 $generated@@83 ($generated@@73 $generated@@83 $generated@@82)) $generated@@82)
 :pattern ( ($generated@@73 $generated@@83 $generated@@82))
)))
(assert  (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@84 $generated@@87 $generated@@88 $generated@@89 ($generated@@86 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@92 $generated@@93) $generated@@90)
 :weight 0
)) (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@84 $generated@@94 $generated@@95 $generated@@96 ($generated@@86 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@84 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@84 $generated@@103 $generated@@104 $generated@@105 ($generated@@86 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@84 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)))))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 Bool) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@10 ($generated@@84 $generated@@23 $generated@@37 $generated@@6 ($generated@@85 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))  (=> (and (or (not (= $generated@@116 $generated@@112)) (not true)) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@36 $generated@@37 $generated@@38 ($generated@@36 $generated@@23 ($generated@@39 $generated@@37 $generated@@38) $generated@@113 $generated@@116) $generated@@114)))) $generated@@115))
 :pattern ( ($generated@@84 $generated@@23 $generated@@37 $generated@@6 ($generated@@85 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))
)))
(assert (= ($generated@@21 $generated@@24) $generated@@2))
(assert (= ($generated@@118 $generated@@24) $generated@@4))
(assert (= ($generated@@21 $generated@@25) $generated@@3))
(assert (= ($generated@@118 $generated@@25) $generated@@4))
(assert (forall (($generated@@121 T@U) ) (! (= ($generated@@32 $generated@@23 $generated@@121 $generated@@25)  (or (= $generated@@121 $generated@@31) ($generated@@119 ($generated@@120 $generated@@121))))
 :pattern ( ($generated@@32 $generated@@23 $generated@@121 $generated@@25))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@T) ) (! (= ($generated@@73 $generated@@123 ($generated@@33 $generated@@123 $generated@@122)) ($generated@@33 $generated@@38 ($generated@@73 $generated@@123 $generated@@122)))
 :pattern ( ($generated@@73 $generated@@123 ($generated@@33 $generated@@123 $generated@@122)))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (! ($generated@@22 $generated@@6 $generated@@125 $generated $generated@@124)
 :pattern ( ($generated@@22 $generated@@6 $generated@@125 $generated $generated@@124))
)))
(assert (forall (($generated@@126 T@U) ) (! ($generated@@32 $generated@@6 $generated@@126 $generated)
 :pattern ( ($generated@@32 $generated@@6 $generated@@126 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@131  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 false))))))
(let (($generated@@132  (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (and ($generated@@32 $generated@@23 $generated@@31 $generated@@24) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 true)))) (exists (($generated@@133 T@U) )  (and ($generated@@32 $generated@@23 $generated@@133 $generated@@24) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 true))))))) (=> (or (and ($generated@@32 $generated@@23 $generated@@31 $generated@@24) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 true)))) (exists (($generated@@134 T@U) )  (and ($generated@@32 $generated@@23 $generated@@134 $generated@@24) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 true)))))) (=> (and ($generated@@32 $generated@@23 $generated@@127 $generated@@24) ($generated@@22 $generated@@23 $generated@@127 $generated@@24 $generated@@128)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (not (= $generated@@127 $generated@@31)) (not true))) (=> (or (not (= $generated@@127 $generated@@31)) (not true)) (=> ($generated@@76 ($generated@@73 $generated@@23 $generated@@127) $generated@@25 $generated@@128) (=> (and ($generated@@30 $generated@@127) $generated@@67) (=> (and (and (= $generated@@64 ($generated@@29 $generated@@127)) ($generated@@30 $generated@@127)) (and ($generated@@32 $generated@@6 ($generated@@9 $generated@@64) $generated) (= (ControlFlow 0 4) 3))) $generated@@131))))))))))
(let (($generated@@135  (=> (and (not (and ($generated@@32 $generated@@23 $generated@@127 $generated@@24) ($generated@@22 $generated@@23 $generated@@127 $generated@@24 $generated@@128))) (= (ControlFlow 0 8) 4)) $generated@@132)))
(let (($generated@@136  (=> (and (and ($generated@@32 $generated@@23 $generated@@127 $generated@@24) ($generated@@22 $generated@@23 $generated@@127 $generated@@24 $generated@@128)) (= (ControlFlow 0 7) 4)) $generated@@132)))
(let (($generated@@137 true))
(let (($generated@@138  (=> (= $generated@@129 ($generated@@85 $generated@@31 $generated@@128 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@137) (=> (= (ControlFlow 0 9) 7) $generated@@136)) (=> (= (ControlFlow 0 9) 8) $generated@@135)))))
(let (($generated@@139  (=> (and (and ($generated@@65 $generated@@128) ($generated@@130 $generated@@128)) (and (= 1 $generated@@28) (= (ControlFlow 0 10) 9))) $generated@@138)))
$generated@@139))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 4) (- 6))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
