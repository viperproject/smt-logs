(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U) Int)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@T T@T) T@T)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@62 () T@U)
(declare-fun $generated@@67 (Int) Int)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@81 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@113 (T@U) T@U)
(declare-fun $generated@@114 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert  (=> (< 0 $generated@@21) (forall (($generated@@28 T@U) ) (!  (=> (and (or (not (= $generated@@28 $generated@@23)) (not true)) (= ($generated@@24 $generated@@28) $generated@@25)) ($generated@@26 $generated@@7 ($generated@@11 ($generated@@22 $generated@@28)) $generated@@27))
 :pattern ( ($generated@@22 $generated@@28))
))))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (! ($generated@@29 $generated@@7 $generated@@30 $generated@@27 $generated@@31)
 :pattern ( ($generated@@29 $generated@@7 $generated@@30 $generated@@27 $generated@@31))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@33 $generated@@42 $generated@@43 ($generated@@39 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@46) $generated@@44)
 :weight 0
)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@51 $generated@@52) (= ($generated@@33 $generated@@47 $generated@@48 ($generated@@39 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@52) ($generated@@33 $generated@@47 $generated@@48 $generated@@50 $generated@@52)))
 :weight 0
))) (= ($generated@@5 $generated@@34) 3)) (= ($generated@@5 $generated@@35) 4)) (= ($generated@@5 $generated@@36) 5)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (= ($generated@@5 ($generated@@37 $generated@@53 $generated@@54)) 6))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@55 $generated@@56)) $generated@@55)
 :pattern ( ($generated@@37 $generated@@55 $generated@@56))
))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@41 ($generated@@37 $generated@@57 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@37 $generated@@57 $generated@@58))
))))
(assert  (=> (< 0 $generated@@21) (forall (($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> (and (and ($generated@@38 $generated@@59) (and (or (not (= $generated@@60 $generated@@23)) (not true)) (= ($generated@@24 $generated@@60) $generated@@25))) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@59 $generated@@60) $generated)))) ($generated@@29 $generated@@7 ($generated@@11 ($generated@@22 $generated@@60)) $generated@@27 $generated@@59))
 :pattern ( ($generated@@22 $generated@@60) ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@59 $generated@@60) $generated)))
))))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@26 $generated@@36 $generated@@61 $generated@@25)  (or (= $generated@@61 $generated@@23) (= ($generated@@24 $generated@@61) $generated@@25)))
 :pattern ( ($generated@@26 $generated@@36 $generated@@61 $generated@@25))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@29 $generated@@36 $generated@@63 $generated@@62 $generated@@64) ($generated@@29 $generated@@36 $generated@@63 $generated@@25 $generated@@64))
 :pattern ( ($generated@@29 $generated@@36 $generated@@63 $generated@@62 $generated@@64))
 :pattern ( ($generated@@29 $generated@@36 $generated@@63 $generated@@25 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@29 $generated@@36 $generated@@65 $generated@@25 $generated@@66)  (or (= $generated@@65 $generated@@23) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@66 $generated@@65) $generated)))))
 :pattern ( ($generated@@29 $generated@@36 $generated@@65 $generated@@25 $generated@@66))
)))
(assert (forall (($generated@@68 Int) ) (! (= ($generated@@67 $generated@@68) $generated@@68)
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 $generated@@70) $generated@@70)
 :pattern ( ($generated@@69 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 ($generated@@32 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@32 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@26 $generated@@7 $generated@@75 $generated@@27) (<= ($generated@@67 0) ($generated@@12 $generated@@75)))
 :pattern ( ($generated@@26 $generated@@7 $generated@@75 $generated@@27))
)))
(assert (forall (($generated@@76 T@U) ) (! (= ($generated@@26 $generated@@36 $generated@@76 $generated@@62)  (and ($generated@@26 $generated@@36 $generated@@76 $generated@@25) (or (not (= $generated@@76 $generated@@23)) (not true))))
 :pattern ( ($generated@@26 $generated@@36 $generated@@76 $generated@@62))
 :pattern ( ($generated@@26 $generated@@36 $generated@@76 $generated@@25))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@32 $generated@@78 ($generated@@72 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@72 $generated@@78 $generated@@77))
)))
(assert  (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@79 $generated@@82 $generated@@83 $generated@@84 ($generated@@81 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@87 $generated@@88) $generated@@85)
 :weight 0
)) (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@79 $generated@@89 $generated@@90 $generated@@91 ($generated@@81 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@79 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@79 $generated@@98 $generated@@99 $generated@@100 ($generated@@81 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@79 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 Bool) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@10 ($generated@@79 $generated@@36 $generated@@34 $generated@@6 ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))  (=> (and (or (not (= $generated@@111 $generated@@107)) (not true)) ($generated@@10 ($generated@@32 $generated@@6 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@36 ($generated@@37 $generated@@34 $generated@@35) $generated@@108 $generated@@111) $generated@@109)))) $generated@@110))
 :pattern ( ($generated@@79 $generated@@36 $generated@@34 $generated@@6 ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))
)))
(assert (= ($generated@@113 $generated@@27) $generated@@0))
(assert (= ($generated@@114 $generated@@27) $generated@@3))
(assert (= ($generated@@113 $generated@@62) $generated@@1))
(assert (= ($generated@@114 $generated@@62) $generated@@4))
(assert (= ($generated@@113 $generated@@25) $generated@@2))
(assert (= ($generated@@114 $generated@@25) $generated@@4))
(assert (forall (($generated@@115 Int) ) (! (= ($generated@@72 $generated@@7 ($generated@@11 ($generated@@67 $generated@@115))) ($generated@@69 $generated@@35 ($generated@@72 $generated@@7 ($generated@@11 $generated@@115))))
 :pattern ( ($generated@@72 $generated@@7 ($generated@@11 ($generated@@67 $generated@@115))))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@72 $generated@@117 ($generated@@69 $generated@@117 $generated@@116)) ($generated@@69 $generated@@35 ($generated@@72 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@72 $generated@@117 ($generated@@69 $generated@@117 $generated@@116)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@124 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@125  (=> (= $generated@@118 ($generated@@80 $generated@@23 $generated@@119 $generated false)) (=> (and (= $generated@@120 ($generated@@22 $generated@@121)) (= (ControlFlow 0 2) (- 0 1))) (= $generated@@120 $generated@@122)))))
(let (($generated@@126  (=> (and ($generated@@38 $generated@@119) ($generated@@123 $generated@@119)) (=> (and (and (and (or (not (= $generated@@121 $generated@@23)) (not true)) (and ($generated@@26 $generated@@36 $generated@@121 $generated@@62) ($generated@@29 $generated@@36 $generated@@121 $generated@@62 $generated@@119))) (<= ($generated@@67 0) $generated@@122)) (and (and (<= ($generated@@67 0) $generated@@124) (= 1 $generated@@21)) (and (or (not (= $generated@@122 9)) (not true)) (= (ControlFlow 0 3) 2)))) $generated@@125))))
$generated@@126)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
