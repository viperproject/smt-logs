(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 () Int)
(declare-fun $generated@@41 (T@U T@U Int) Int)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 (T@U Int) Bool)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@T T@T) T@T)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@77 (T@T) T@T)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@129 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28)
 :pattern ( ($generated@@25 $generated@@10 $generated@@27 $generated@@26 $generated@@28))
)))
(assert (= ($generated@@29 $generated@@30) $generated@@4))
(assert (= ($generated@@29 $generated@@31) $generated@@5))
(assert (= ($generated@@8 $generated@@33) 3))
(assert ($generated@@32 $generated@@33 $generated@@30 $generated@@34))
(assert ($generated@@32 $generated@@33 $generated@@31 $generated@@34))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@35 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 $generated@@38) $generated@@38)
 :pattern ( ($generated@@37 $generated@@39 $generated@@38))
)))
(assert  (=> (<= 1 $generated@@40) (forall (($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 Int) ) (!  (=> (or ($generated@@43 ($generated@@37 $generated@@33 $generated@@46) ($generated@@35 $generated@@47)) (and (< 1 $generated@@40) (and ($generated@@32 $generated@@33 $generated@@46 $generated@@34) (<= ($generated@@35 0) $generated@@47)))) (and (=> (or (not (= ($generated@@35 $generated@@47) ($generated@@35 0))) (not true)) (and (=> ($generated@@13 ($generated@@37 $generated@@9 ($generated@@12 ($generated@@44 ($generated@@37 $generated@@33 $generated@@46))))) ($generated@@43 ($generated@@37 $generated@@33 $generated@@46) ($generated@@35 (- $generated@@47 1)))) (=> (not ($generated@@13 ($generated@@37 $generated@@9 ($generated@@12 ($generated@@44 ($generated@@37 $generated@@33 $generated@@46)))))) ($generated@@43 ($generated@@37 $generated@@33 $generated@@46) ($generated@@35 (- $generated@@47 1)))))) (= ($generated@@41 ($generated@@42 $generated@@45) ($generated@@37 $generated@@33 $generated@@46) ($generated@@35 $generated@@47)) (ite (= ($generated@@35 $generated@@47) ($generated@@35 0)) 6 (ite ($generated@@44 ($generated@@37 $generated@@33 $generated@@46)) ($generated@@41 ($generated@@42 $generated@@45) ($generated@@37 $generated@@33 $generated@@46) ($generated@@35 (- $generated@@47 1))) ($generated@@41 ($generated@@42 $generated@@45) ($generated@@37 $generated@@33 $generated@@46) ($generated@@35 (- $generated@@47 1))))))))
 :weight 3
 :pattern ( ($generated@@41 ($generated@@42 $generated@@45) ($generated@@37 $generated@@33 $generated@@46) ($generated@@35 $generated@@47)))
))))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@44 $generated@@48) (= ($generated@@29 $generated@@48) $generated@@4))
 :pattern ( ($generated@@44 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@49 $generated@@50) (= ($generated@@29 $generated@@50) $generated@@5))
 :pattern ( ($generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@52 $generated@@54 ($generated@@51 $generated@@54 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@51 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@44 $generated@@55) (= $generated@@55 $generated@@30))
 :pattern ( ($generated@@44 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ) (!  (=> ($generated@@49 $generated@@56) (= $generated@@56 $generated@@31))
 :pattern ( ($generated@@49 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@32 $generated@@10 $generated@@57 $generated@@26) (<= ($generated@@35 0) ($generated@@15 $generated@@57)))
 :pattern ( ($generated@@32 $generated@@10 $generated@@57 $generated@@26))
)))
(assert  (=> (<= 1 $generated@@40) (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 Int) ) (!  (=> (or ($generated@@43 $generated@@59 $generated@@60) (and (< 1 $generated@@40) (and ($generated@@32 $generated@@33 $generated@@59 $generated@@34) (<= ($generated@@35 0) $generated@@60)))) (and (=> (or (not (= $generated@@60 ($generated@@35 0))) (not true)) (and (=> ($generated@@44 $generated@@59) ($generated@@43 $generated@@59 (- $generated@@60 1))) (=> (not ($generated@@44 $generated@@59)) ($generated@@43 $generated@@59 (- $generated@@60 1))))) (= ($generated@@41 ($generated@@42 $generated@@58) $generated@@59 $generated@@60) (ite (= $generated@@60 ($generated@@35 0)) 6 (ite ($generated@@44 $generated@@59) ($generated@@41 $generated@@58 $generated@@59 (- $generated@@60 1)) ($generated@@41 $generated@@58 $generated@@59 (- $generated@@60 1)))))))
 :pattern ( ($generated@@41 ($generated@@42 $generated@@58) $generated@@59 $generated@@60))
))))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 Int) ) (! (= ($generated@@41 ($generated@@42 $generated@@61) $generated@@62 $generated@@63) ($generated@@41 $generated@@61 $generated@@62 $generated@@63))
 :pattern ( ($generated@@41 ($generated@@42 $generated@@61) $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ) (!  (=> ($generated@@32 $generated@@33 $generated@@64 $generated@@34) (or ($generated@@44 $generated@@64) ($generated@@49 $generated@@64)))
 :pattern ( ($generated@@49 $generated@@64) ($generated@@32 $generated@@33 $generated@@64 $generated@@34))
 :pattern ( ($generated@@44 $generated@@64) ($generated@@32 $generated@@33 $generated@@64 $generated@@34))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@51 $generated@@66 ($generated@@52 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@52 $generated@@66 $generated@@65))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@67 $generated@@78 $generated@@79 $generated@@80 ($generated@@74 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@67 $generated@@85 $generated@@86 $generated@@87 ($generated@@74 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@67 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@67 $generated@@94 $generated@@95 $generated@@96 ($generated@@74 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@67 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))) (= ($generated@@8 $generated@@68) 4)) (= ($generated@@8 $generated@@69) 5)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@71 $generated@@103 $generated@@104 ($generated@@75 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@107) $generated@@105)
 :weight 0
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@112 $generated@@113) (= ($generated@@71 $generated@@108 $generated@@109 ($generated@@75 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@110) $generated@@113) ($generated@@71 $generated@@108 $generated@@109 $generated@@111 $generated@@113)))
 :weight 0
))) (= ($generated@@8 $generated@@72) 6)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (= ($generated@@8 ($generated@@73 $generated@@114 $generated@@115)) 7))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@76 ($generated@@73 $generated@@116 $generated@@117)) $generated@@116)
 :pattern ( ($generated@@73 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@77 ($generated@@73 $generated@@118 $generated@@119)) $generated@@119)
 :pattern ( ($generated@@73 $generated@@118 $generated@@119))
))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@13 ($generated@@67 $generated@@68 $generated@@69 $generated@@9 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@13 ($generated@@51 $generated@@9 ($generated@@71 $generated@@69 $generated@@72 ($generated@@71 $generated@@68 ($generated@@73 $generated@@69 $generated@@72) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@67 $generated@@68 $generated@@69 $generated@@9 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> (and ($generated@@126 $generated@@128) ($generated@@32 $generated@@33 $generated@@127 $generated@@34)) ($generated@@25 $generated@@33 $generated@@127 $generated@@34 $generated@@128))
 :pattern ( ($generated@@25 $generated@@33 $generated@@127 $generated@@34 $generated@@128))
)))
(assert (= ($generated@@24 $generated@@26) $generated@@2))
(assert (= ($generated@@129 $generated@@26) $generated@@6))
(assert (= ($generated@@24 $generated@@34) $generated@@3))
(assert (= ($generated@@129 $generated@@34) $generated@@7))
(assert (= $generated@@30 ($generated@@37 $generated@@33 $generated@@30)))
(assert (= $generated@@31 ($generated@@37 $generated@@33 $generated@@31)))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@52 $generated@@10 ($generated@@14 ($generated@@35 $generated@@130))) ($generated@@37 $generated@@72 ($generated@@52 $generated@@10 ($generated@@14 $generated@@130))))
 :pattern ( ($generated@@52 $generated@@10 ($generated@@14 ($generated@@35 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@52 $generated@@132 ($generated@@37 $generated@@132 $generated@@131)) ($generated@@37 $generated@@72 ($generated@@52 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@52 $generated@@132 ($generated@@37 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (! ($generated@@25 $generated@@10 $generated@@134 $generated $generated@@133)
 :pattern ( ($generated@@25 $generated@@10 $generated@@134 $generated $generated@@133))
)))
(assert (forall (($generated@@135 T@U) ) (! ($generated@@32 $generated@@10 $generated@@135 $generated)
 :pattern ( ($generated@@32 $generated@@10 $generated@@135 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 (T@U) Int)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let (($generated@@145 true))
(let (($generated@@146  (=> (and (= $generated@@136 $generated@@31) ($generated@@25 $generated@@33 $generated@@136 $generated@@34 $generated@@137)) (and (=> (= (ControlFlow 0 8) (- 0 10)) ($generated@@32 $generated@@10 ($generated@@14 (- $generated@@138 1)) $generated@@26)) (=> ($generated@@32 $generated@@10 ($generated@@14 (- $generated@@138 1)) $generated@@26) (=> (and (= $generated@@139 (- $generated@@138 1)) ($generated@@25 $generated@@10 ($generated@@14 $generated@@139) $generated@@26 $generated@@137)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (or (<= 0 $generated@@138) (< ($generated@@140 $generated@@136) ($generated@@140 $generated@@136))) (= $generated@@139 $generated@@138))) (=> (or (or (<= 0 $generated@@138) (< ($generated@@140 $generated@@136) ($generated@@140 $generated@@136))) (= $generated@@139 $generated@@138)) (=> (= (ControlFlow 0 8) (- 0 7)) (or (< ($generated@@140 $generated@@136) ($generated@@140 $generated@@136)) (and (= ($generated@@140 $generated@@136) ($generated@@140 $generated@@136)) (< $generated@@139 $generated@@138))))))))))))
(let (($generated@@147  (=> (or (not (= $generated@@136 $generated@@30)) (not true)) (and (=> (= (ControlFlow 0 12) 8) $generated@@146) (=> (= (ControlFlow 0 12) 11) $generated@@145)))))
(let (($generated@@148  (=> (and (= $generated@@136 $generated@@30) ($generated@@25 $generated@@33 $generated@@136 $generated@@34 $generated@@137)) (and (=> (= (ControlFlow 0 4) (- 0 6)) ($generated@@32 $generated@@10 ($generated@@14 (- $generated@@138 1)) $generated@@26)) (=> ($generated@@32 $generated@@10 ($generated@@14 (- $generated@@138 1)) $generated@@26) (=> (and (= $generated@@141 (- $generated@@138 1)) ($generated@@25 $generated@@10 ($generated@@14 $generated@@141) $generated@@26 $generated@@137)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (or (<= 0 $generated@@138) (< ($generated@@140 $generated@@136) ($generated@@140 $generated@@136))) (= $generated@@141 $generated@@138))) (=> (or (or (<= 0 $generated@@138) (< ($generated@@140 $generated@@136) ($generated@@140 $generated@@136))) (= $generated@@141 $generated@@138)) (=> (= (ControlFlow 0 4) (- 0 3)) (or (< ($generated@@140 $generated@@136) ($generated@@140 $generated@@136)) (and (= ($generated@@140 $generated@@136) ($generated@@140 $generated@@136)) (< $generated@@141 $generated@@138))))))))))))
(let (($generated@@149  (=> (or (not (= $generated@@138 ($generated@@35 0))) (not true)) (and (=> (= (ControlFlow 0 13) 4) $generated@@148) (=> (= (ControlFlow 0 13) 12) $generated@@147)))))
(let (($generated@@150 true))
(let (($generated@@151 true))
(let (($generated@@152  (=> (= $generated@@142 ($generated@@70 $generated@@143 $generated@@137 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 14) 1) $generated@@151) (=> (= (ControlFlow 0 14) 2) $generated@@150)) (=> (= (ControlFlow 0 14) 13) $generated@@149)))))
(let (($generated@@153  (=> (and ($generated@@126 $generated@@137) ($generated@@144 $generated@@137)) (=> (and (and ($generated@@32 $generated@@33 $generated@@136 $generated@@34) (<= ($generated@@35 0) $generated@@138)) (and (= 1 $generated@@40) (= (ControlFlow 0 15) 14))) $generated@@152))))
$generated@@153))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
