(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 (T@U Int) Int)
(declare-fun $generated@@32 (T@U Int) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U T@U) Bool)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@T T@T) T@T)
(declare-fun $generated@@43 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@72 (T@U) Int)
(declare-fun $generated@@76 (T@U T@U T@U) Bool)
(declare-fun $generated@@81 (T@U) Bool)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@124 (T@U) T@U)
(declare-fun $generated@@125 (T@U) T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (= ($generated@@5 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (! (= ($generated@@21 $generated@@25 $generated@@28 $generated@@26 $generated@@29) ($generated@@21 $generated@@25 $generated@@28 $generated@@27 $generated@@29))
 :pattern ( ($generated@@21 $generated@@25 $generated@@28 $generated@@26 $generated@@29))
 :pattern ( ($generated@@21 $generated@@25 $generated@@28 $generated@@27 $generated@@29))
)))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@36 T@U) ($generated@@37 Int) ) (!  (=> (or ($generated@@32 $generated@@36 $generated@@37) (and (< 1 $generated@@30) (and (and (and (or (not (= $generated@@36 $generated@@33)) (not true)) ($generated@@34 $generated@@25 $generated@@36 $generated@@26)) (<= ($generated@@35 0) $generated@@37)) (or (not (= $generated@@37 7)) (not true))))) (= ($generated@@31 $generated@@36 $generated@@37) $generated@@37))
 :pattern ( ($generated@@31 $generated@@36 $generated@@37))
))))
(assert  (and (and (and (and (and (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@39 $generated@@46 $generated@@47 ($generated@@43 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@48) $generated@@50) $generated@@48)
 :weight 0
)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (or (= $generated@@55 $generated@@56) (= ($generated@@39 $generated@@51 $generated@@52 ($generated@@43 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@56) ($generated@@39 $generated@@51 $generated@@52 $generated@@54 $generated@@56)))
 :weight 0
))) (= ($generated@@5 $generated@@40) 4)) (= ($generated@@5 $generated@@41) 5)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@5 ($generated@@42 $generated@@57 $generated@@58)) 6))) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@44 ($generated@@42 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@42 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@42 $generated@@61 $generated@@62))
))))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@21 $generated@@25 $generated@@63 $generated@@27 $generated@@64)  (or (= $generated@@63 $generated@@33) ($generated@@10 ($generated@@38 $generated@@6 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@25 ($generated@@42 $generated@@40 $generated@@41) $generated@@64 $generated@@63) $generated)))))
 :pattern ( ($generated@@21 $generated@@25 $generated@@63 $generated@@27 $generated@@64))
)))
(assert (forall (($generated@@65 Int) ) (! (= ($generated@@35 $generated@@65) $generated@@65)
 :pattern ( ($generated@@35 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 $generated@@67) $generated@@67)
 :pattern ( ($generated@@66 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 ($generated@@38 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@38 $generated@@71 $generated@@70))
)))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@73 T@U) ($generated@@74 Int) ) (!  (=> (or ($generated@@32 $generated@@73 $generated@@74) (and (< 1 $generated@@30) (and (and (and (or (not (= $generated@@73 $generated@@33)) (not true)) ($generated@@34 $generated@@25 $generated@@73 $generated@@26)) (<= ($generated@@35 0) $generated@@74)) (or (not (= $generated@@74 7)) (not true))))) (and (= ($generated@@31 $generated@@73 $generated@@74) ($generated@@72 $generated@@73)) (<= ($generated@@35 0) ($generated@@31 $generated@@73 $generated@@74))))
 :pattern ( ($generated@@31 $generated@@73 $generated@@74))
))))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@34 $generated@@7 $generated@@75 $generated@@22) (<= ($generated@@35 0) ($generated@@12 $generated@@75)))
 :pattern ( ($generated@@34 $generated@@7 $generated@@75 $generated@@22))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@76 ($generated@@69 $generated@@80 $generated@@77) $generated@@78 $generated@@79) ($generated@@21 $generated@@80 $generated@@77 $generated@@78 $generated@@79))
 :pattern ( ($generated@@76 ($generated@@69 $generated@@80 $generated@@77) $generated@@78 $generated@@79))
)))
(assert  (=> (< 0 $generated@@30) (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> (and (and ($generated@@81 $generated@@82) (and (or (not (= $generated@@83 $generated@@33)) (not true)) ($generated@@34 $generated@@25 $generated@@83 $generated@@27))) ($generated@@10 ($generated@@38 $generated@@6 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@25 ($generated@@42 $generated@@40 $generated@@41) $generated@@82 $generated@@83) $generated)))) ($generated@@21 $generated@@7 ($generated@@11 ($generated@@72 $generated@@83)) $generated@@22 $generated@@82))
 :pattern ( ($generated@@72 $generated@@83) ($generated@@38 $generated@@6 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@25 ($generated@@42 $generated@@40 $generated@@41) $generated@@82 $generated@@83) $generated)))
))))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@84 T@U) ($generated@@85 Int) ) (!  (=> (or ($generated@@32 $generated@@84 ($generated@@35 $generated@@85)) (and (< 1 $generated@@30) (and (and (and (or (not (= $generated@@84 $generated@@33)) (not true)) ($generated@@34 $generated@@25 $generated@@84 $generated@@26)) (<= ($generated@@35 0) $generated@@85)) ($generated@@10 ($generated@@66 $generated@@6 ($generated@@9  (or (not (= $generated@@85 7)) (not true)))))))) (= ($generated@@31 $generated@@84 ($generated@@35 $generated@@85)) ($generated@@35 $generated@@85)))
 :weight 3
 :pattern ( ($generated@@31 $generated@@84 ($generated@@35 $generated@@85)))
))))
(assert  (=> (< 0 $generated@@30) (forall (($generated@@86 T@U) ) (!  (=> (and (or (not (= $generated@@86 $generated@@33)) (not true)) ($generated@@34 $generated@@25 $generated@@86 $generated@@27)) ($generated@@34 $generated@@7 ($generated@@11 ($generated@@72 $generated@@86)) $generated@@22))
 :pattern ( ($generated@@72 $generated@@86))
))))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@34 $generated@@25 $generated@@87 $generated@@26)  (and ($generated@@34 $generated@@25 $generated@@87 $generated@@27) (or (not (= $generated@@87 $generated@@33)) (not true))))
 :pattern ( ($generated@@34 $generated@@25 $generated@@87 $generated@@26))
 :pattern ( ($generated@@34 $generated@@25 $generated@@87 $generated@@27))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@38 $generated@@89 ($generated@@69 $generated@@89 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@69 $generated@@89 $generated@@88))
)))
(assert  (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@90 $generated@@93 $generated@@94 $generated@@95 ($generated@@92 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@98 $generated@@99) $generated@@96)
 :weight 0
)) (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@90 $generated@@100 $generated@@101 $generated@@102 ($generated@@92 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@90 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@90 $generated@@109 $generated@@110 $generated@@111 ($generated@@92 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@90 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@10 ($generated@@90 $generated@@25 $generated@@40 $generated@@6 ($generated@@91 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@10 ($generated@@38 $generated@@6 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@25 ($generated@@42 $generated@@40 $generated@@41) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@90 $generated@@25 $generated@@40 $generated@@6 ($generated@@91 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (= ($generated@@124 $generated@@22) $generated@@0))
(assert (= ($generated@@125 $generated@@22) $generated@@3))
(assert (= ($generated@@124 $generated@@27) $generated@@1))
(assert (= ($generated@@125 $generated@@27) $generated@@4))
(assert (= ($generated@@124 $generated@@26) $generated@@2))
(assert (= ($generated@@125 $generated@@26) $generated@@4))
(assert (forall (($generated@@128 T@U) ) (! (= ($generated@@34 $generated@@25 $generated@@128 $generated@@27)  (or (= $generated@@128 $generated@@33) ($generated@@126 ($generated@@127 $generated@@128))))
 :pattern ( ($generated@@34 $generated@@25 $generated@@128 $generated@@27))
)))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@129 T@U) ($generated@@130 Int) ) (!  (=> (or ($generated@@32 ($generated@@66 $generated@@25 $generated@@129) ($generated@@35 $generated@@130)) (and (< 1 $generated@@30) (and (and (and (or (not (= $generated@@129 $generated@@33)) (not true)) ($generated@@34 $generated@@25 $generated@@129 $generated@@26)) (<= ($generated@@35 0) $generated@@130)) ($generated@@10 ($generated@@66 $generated@@6 ($generated@@9  (or (not (= $generated@@130 7)) (not true)))))))) (= ($generated@@31 ($generated@@66 $generated@@25 $generated@@129) ($generated@@35 $generated@@130)) ($generated@@35 $generated@@130)))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@66 $generated@@25 $generated@@129) ($generated@@35 $generated@@130)))
))))
(assert (forall (($generated@@131 Int) ) (! (= ($generated@@69 $generated@@7 ($generated@@11 ($generated@@35 $generated@@131))) ($generated@@66 $generated@@41 ($generated@@69 $generated@@7 ($generated@@11 $generated@@131))))
 :pattern ( ($generated@@69 $generated@@7 ($generated@@11 ($generated@@35 $generated@@131))))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@T) ) (! (= ($generated@@69 $generated@@133 ($generated@@66 $generated@@133 $generated@@132)) ($generated@@66 $generated@@41 ($generated@@69 $generated@@133 $generated@@132)))
 :pattern ( ($generated@@69 $generated@@133 ($generated@@66 $generated@@133 $generated@@132)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@139  (=> (= (ControlFlow 0 6) (- 0 5)) (= ($generated@@31 $generated@@134 $generated@@135) ($generated@@72 $generated@@134)))))
(let (($generated@@140  (=> (= ($generated@@31 $generated@@134 $generated@@135) $generated@@135) (=> (and ($generated@@34 $generated@@7 ($generated@@11 ($generated@@31 $generated@@134 $generated@@135)) $generated@@22) (= (ControlFlow 0 7) 6)) $generated@@139))))
(let (($generated@@141  (=> (<= ($generated@@35 0) ($generated@@31 $generated@@134 $generated@@135)) (=> (and ($generated@@76 ($generated@@69 $generated@@25 $generated@@134) $generated@@27 $generated@@136) ($generated@@21 $generated@@7 ($generated@@11 $generated@@135) $generated@@22 $generated@@136)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= $generated@@135 7)) (not true))) (=> (or (not (= $generated@@135 7)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@135) (= $generated@@135 $generated@@135))) (=> (or (<= 0 $generated@@135) (= $generated@@135 $generated@@135)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@134 $generated@@134) (= $generated@@135 $generated@@135)) (< $generated@@135 $generated@@135)))))))))))
(let (($generated@@142  (=> (and (= $generated@@137 ($generated@@91 $generated@@33 $generated@@136 $generated false)) (or (not (= $generated@@135 7)) (not true))) (and (=> (= (ControlFlow 0 8) 2) $generated@@141) (=> (= (ControlFlow 0 8) 7) $generated@@140)))))
(let (($generated@@143  (=> (and ($generated@@81 $generated@@136) ($generated@@138 $generated@@136)) (=> (and (and (and (or (not (= $generated@@134 $generated@@33)) (not true)) (and ($generated@@34 $generated@@25 $generated@@134 $generated@@26) ($generated@@21 $generated@@25 $generated@@134 $generated@@26 $generated@@136))) (<= ($generated@@35 0) $generated@@135)) (and (= 1 $generated@@30) (= (ControlFlow 0 9) 8))) $generated@@142))))
$generated@@143))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
