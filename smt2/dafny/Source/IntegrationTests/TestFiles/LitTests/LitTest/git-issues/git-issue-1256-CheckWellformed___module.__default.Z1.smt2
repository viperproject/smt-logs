(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U T@U) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@U T@U) Int)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U T@U) Bool)
(declare-fun $generated@@50 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@55 (T@T T@T) T@T)
(declare-fun $generated@@56 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (= ($generated@@2 $generated@@22) 3))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (!  (=> (or ($generated@@24 $generated@@28 ($generated@@21 $generated@@22 $generated@@30)) (and (< 0 $generated@@19) (and ($generated@@23 $generated@@29) ($generated@@25 $generated@@30 $generated@@28)))) (and ($generated@@26 $generated@@28 ($generated@@21 $generated@@22 $generated@@30)) (= ($generated@@20 $generated@@28 ($generated@@21 $generated@@22 $generated@@30)) (let (($generated@@31 ($generated@@27 $generated@@28 ($generated@@21 $generated@@22 $generated@@30))))
$generated@@31))))
 :weight 3
 :pattern ( ($generated@@20 $generated@@28 ($generated@@21 $generated@@22 $generated@@30)) ($generated@@23 $generated@@29))
))))
(assert (forall (($generated@@33 Int) ) (! (= ($generated@@32 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@33))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@21 $generated@@35 $generated@@34) $generated@@34)
 :pattern ( ($generated@@21 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ) (!  (=> ($generated@@25 $generated@@41 $generated) (and (= ($generated@@37 $generated@@4 ($generated@@36 $generated@@4 $generated@@41)) $generated@@41) ($generated@@40 $generated@@4 ($generated@@36 $generated@@4 $generated@@41) $generated)))
 :pattern ( ($generated@@25 $generated@@41 $generated))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@25 ($generated@@37 $generated@@44 $generated@@42) $generated@@43) ($generated@@40 $generated@@44 $generated@@42 $generated@@43))
 :pattern ( ($generated@@25 ($generated@@37 $generated@@44 $generated@@42) $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@36 $generated@@46 ($generated@@37 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@37 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> ($generated@@26 $generated@@47 $generated@@48) (and (and (<= ($generated@@32 0) ($generated@@27 $generated@@47 $generated@@48)) (< ($generated@@27 $generated@@47 $generated@@48) 100)) (= $generated@@48 (let (($generated@@49 $generated@@48))
$generated@@49))))
 :pattern ( ($generated@@27 $generated@@47 $generated@@48))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@50 $generated@@60 $generated@@61 $generated@@62 ($generated@@56 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@66 $generated@@63) $generated@@65 $generated@@66) $generated@@63)
 :weight 0
)) (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@72 $generated@@74) (= ($generated@@50 $generated@@67 $generated@@68 $generated@@69 ($generated@@56 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@74 $generated@@75) ($generated@@50 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@74 $generated@@75)))
 :weight 0
)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@50 $generated@@76 $generated@@77 $generated@@78 ($generated@@56 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@50 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)))) (= ($generated@@2 $generated@@51) 4)) (= ($generated@@2 $generated@@52) 5)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@54 $generated@@85 $generated@@86 ($generated@@57 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@87) $generated@@89) $generated@@87)
 :weight 0
))) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@94 $generated@@95) (= ($generated@@54 $generated@@90 $generated@@91 ($generated@@57 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@92) $generated@@95) ($generated@@54 $generated@@90 $generated@@91 $generated@@93 $generated@@95)))
 :weight 0
))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (= ($generated@@2 ($generated@@55 $generated@@96 $generated@@97)) 6))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (! (= ($generated@@58 ($generated@@55 $generated@@98 $generated@@99)) $generated@@98)
 :pattern ( ($generated@@55 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@59 ($generated@@55 $generated@@100 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@55 $generated@@100 $generated@@101))
))))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 Bool) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@7 ($generated@@50 $generated@@51 $generated@@52 $generated@@3 ($generated@@53 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))  (=> (and (or (not (= $generated@@106 $generated@@102)) (not true)) ($generated@@7 ($generated@@36 $generated@@3 ($generated@@54 $generated@@52 $generated@@22 ($generated@@54 $generated@@51 ($generated@@55 $generated@@52 $generated@@22) $generated@@103 $generated@@106) $generated@@104)))) $generated@@105))
 :pattern ( ($generated@@50 $generated@@51 $generated@@52 $generated@@3 ($generated@@53 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (=> (or ($generated@@24 $generated@@108 $generated@@110) (and (< 0 $generated@@19) (and ($generated@@23 $generated@@109) ($generated@@25 $generated@@110 $generated@@108)))) (and ($generated@@26 $generated@@108 $generated@@110) (= ($generated@@20 $generated@@108 $generated@@110) (let (($generated@@111 ($generated@@27 $generated@@108 $generated@@110)))
$generated@@111))))
 :pattern ( ($generated@@20 $generated@@108 $generated@@110) ($generated@@23 $generated@@109))
))))
(assert (forall (($generated@@112 Int) ) (! (= ($generated@@37 $generated@@4 ($generated@@8 ($generated@@32 $generated@@112))) ($generated@@21 $generated@@22 ($generated@@37 $generated@@4 ($generated@@8 $generated@@112))))
 :pattern ( ($generated@@37 $generated@@4 ($generated@@8 ($generated@@32 $generated@@112))))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@T) ) (! (= ($generated@@37 $generated@@114 ($generated@@21 $generated@@114 $generated@@113)) ($generated@@21 $generated@@22 ($generated@@37 $generated@@114 $generated@@113)))
 :pattern ( ($generated@@37 $generated@@114 ($generated@@21 $generated@@114 $generated@@113)))
)))
(assert (forall (($generated@@115 T@U) ) (! ($generated@@40 $generated@@4 $generated@@115 $generated)
 :pattern ( ($generated@@40 $generated@@4 $generated@@115 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@125  (=> (= (ControlFlow 0 4) (- 0 3)) (or (and ($generated@@40 $generated@@4 ($generated@@8 ($generated@@32 (- 100 1))) $generated) (and (and (<= ($generated@@32 0) ($generated@@32 (- 100 1))) (< (- 100 1) 100)) (= $generated@@116 (let (($generated@@126 $generated@@116))
$generated@@126)))) (or (and ($generated@@40 $generated@@4 ($generated@@8 ($generated@@32 0)) $generated) (and (and (<= ($generated@@32 0) ($generated@@32 0)) (< 0 100)) (= $generated@@116 (let (($generated@@127 $generated@@116))
$generated@@127)))) (or (and ($generated@@40 $generated@@4 ($generated@@8 ($generated@@32 0)) $generated) (and (and (<= ($generated@@32 0) ($generated@@32 0)) (< 0 100)) (= $generated@@116 (let (($generated@@128 $generated@@116))
$generated@@128)))) (exists (($generated@@129 Int) )  (and (and (<= ($generated@@32 0) $generated@@129) (< $generated@@129 100)) (= $generated@@116 (let (($generated@@130 $generated@@116))
$generated@@130))))))))))
(let (($generated@@131  (=> (and (not (and (<= ($generated@@32 0) $generated@@117) (< $generated@@117 100))) (= (ControlFlow 0 6) 4)) $generated@@125)))
(let (($generated@@132  (=> (and (<= ($generated@@32 0) $generated@@117) (< $generated@@117 100)) (=> (and (and (= $generated@@118 $generated@@116) ($generated@@25 $generated@@118 $generated@@119)) (and (= $generated@@120 $generated@@118) (= (ControlFlow 0 5) 4))) $generated@@125))))
(let (($generated@@133  (=> (< $generated@@117 ($generated@@32 0)) (and (=> (= (ControlFlow 0 8) 5) $generated@@132) (=> (= (ControlFlow 0 8) 6) $generated@@131)))))
(let (($generated@@134  (=> (<= ($generated@@32 0) $generated@@117) (and (=> (= (ControlFlow 0 7) 5) $generated@@132) (=> (= (ControlFlow 0 7) 6) $generated@@131)))))
(let (($generated@@135  (and (=> (= (ControlFlow 0 9) 7) $generated@@134) (=> (= (ControlFlow 0 9) 8) $generated@@133))))
(let (($generated@@136 true))
(let (($generated@@137 true))
(let (($generated@@138  (=> (= $generated@@121 ($generated@@53 $generated@@122 $generated@@123 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 10) 1) $generated@@137) (=> (= (ControlFlow 0 10) 9) $generated@@135)) (=> (= (ControlFlow 0 10) 2) $generated@@136)))))
(let (($generated@@139  (=> (and (and (and ($generated@@23 $generated@@123) ($generated@@124 $generated@@123)) ($generated@@25 $generated@@116 $generated@@119)) (and (= 0 $generated@@19) (= (ControlFlow 0 11) 10))) $generated@@138)))
$generated@@139)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
