(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 () Int)
(declare-fun $generated@@32 (T@U Int T@U) Int)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U) Bool)
(declare-fun $generated@@35 (T@U Int T@U) Bool)
(declare-fun $generated@@36 (T@U T@U) Bool)
(declare-fun $generated@@37 (T@U T@U Int T@U) Bool)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@39 (T@U T@U) Int)
(declare-fun $generated@@45 (T@T T@U T@U) Bool)
(declare-fun $generated@@50 (T@U T@U T@U) Bool)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@124 (T@U) T@U)
(declare-fun $generated@@125 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21)
 :pattern ( ($generated@@18 $generated@@4 $generated@@20 $generated@@19 $generated@@21))
)))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 ($generated@@27 $generated@@30 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@27 $generated@@30 $generated@@29))
)))
(assert (= ($generated@@2 $generated@@33) 3))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 Int) ($generated@@43 T@U) ) (!  (=> (or ($generated@@35 $generated@@40 ($generated@@22 $generated@@42) ($generated@@24 $generated@@33 $generated@@43)) (and (< 1 $generated@@31) (and (and (and ($generated@@34 $generated@@41) (<= ($generated@@22 0) $generated@@42)) ($generated@@36 $generated@@43 $generated@@40)) ($generated@@37 $generated@@40 $generated@@40 ($generated@@22 $generated@@42) ($generated@@24 $generated@@33 $generated@@43))))) (and ($generated@@38 $generated@@40 ($generated@@24 $generated@@33 $generated@@43)) (= ($generated@@32 $generated@@40 ($generated@@22 $generated@@42) ($generated@@24 $generated@@33 $generated@@43)) (let (($generated@@44 ($generated@@39 $generated@@40 ($generated@@24 $generated@@33 $generated@@43))))
$generated@@44))))
 :weight 3
 :pattern ( ($generated@@32 $generated@@40 ($generated@@22 $generated@@42) ($generated@@24 $generated@@33 $generated@@43)) ($generated@@34 $generated@@41))
))))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@45 $generated@@4 $generated@@46 $generated@@19) (<= ($generated@@22 0) ($generated@@9 $generated@@46)))
 :pattern ( ($generated@@45 $generated@@4 $generated@@46 $generated@@19))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@47 T@U) ($generated@@48 Int) ($generated@@49 T@U) ) (!  (=> (or ($generated@@35 $generated@@47 $generated@@48 $generated@@49) (and (< 1 $generated@@31) (and (and (<= ($generated@@22 0) $generated@@48) ($generated@@36 $generated@@49 $generated@@47)) ($generated@@37 $generated@@47 $generated@@47 $generated@@48 $generated@@49)))) (<= ($generated@@22 0) ($generated@@32 $generated@@47 $generated@@48 $generated@@49)))
 :pattern ( ($generated@@32 $generated@@47 $generated@@48 $generated@@49))
))))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@50 ($generated@@28 $generated@@54 $generated@@51) $generated@@52 $generated@@53) ($generated@@18 $generated@@54 $generated@@51 $generated@@52 $generated@@53))
 :pattern ( ($generated@@50 ($generated@@28 $generated@@54 $generated@@51) $generated@@52 $generated@@53))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 Int) ($generated@@58 T@U) ) (!  (=> (or ($generated@@35 $generated@@55 $generated@@57 $generated@@58) (and (< 1 $generated@@31) (and (and (and ($generated@@34 $generated@@56) (<= ($generated@@22 0) $generated@@57)) ($generated@@36 $generated@@58 $generated@@55)) ($generated@@37 $generated@@55 $generated@@55 $generated@@57 $generated@@58)))) (and ($generated@@38 $generated@@55 $generated@@58) (= ($generated@@32 $generated@@55 $generated@@57 $generated@@58) (let (($generated@@59 ($generated@@39 $generated@@55 $generated@@58)))
$generated@@59))))
 :pattern ( ($generated@@32 $generated@@55 $generated@@57 $generated@@58) ($generated@@34 $generated@@56))
))))
(assert (forall (($generated@@60 T@U) ) (!  (=> ($generated@@36 $generated@@60 $generated@@19) (and (= ($generated@@28 $generated@@4 ($generated@@27 $generated@@4 $generated@@60)) $generated@@60) ($generated@@45 $generated@@4 ($generated@@27 $generated@@4 $generated@@60) $generated@@19)))
 :pattern ( ($generated@@36 $generated@@60 $generated@@19))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@36 ($generated@@28 $generated@@63 $generated@@61) $generated@@62) ($generated@@45 $generated@@63 $generated@@61 $generated@@62))
 :pattern ( ($generated@@36 ($generated@@28 $generated@@63 $generated@@61) $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@27 $generated@@65 ($generated@@28 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@28 $generated@@65 $generated@@64))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@66 $generated@@76 $generated@@77 $generated@@78 ($generated@@72 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@66 $generated@@83 $generated@@84 $generated@@85 ($generated@@72 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@66 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@66 $generated@@92 $generated@@93 $generated@@94 ($generated@@72 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@66 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))) (= ($generated@@2 $generated@@67) 4)) (= ($generated@@2 $generated@@68) 5)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@70 $generated@@101 $generated@@102 ($generated@@73 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@105) $generated@@103)
 :weight 0
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@110 $generated@@111) (= ($generated@@70 $generated@@106 $generated@@107 ($generated@@73 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@70 $generated@@106 $generated@@107 $generated@@109 $generated@@111)))
 :weight 0
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@2 ($generated@@71 $generated@@112 $generated@@113)) 6))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@71 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@71 $generated@@116 $generated@@117))
))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@7 ($generated@@66 $generated@@67 $generated@@68 $generated@@3 ($generated@@69 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@7 ($generated@@27 $generated@@3 ($generated@@70 $generated@@68 $generated@@33 ($generated@@70 $generated@@67 ($generated@@71 $generated@@68 $generated@@33) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@66 $generated@@67 $generated@@68 $generated@@3 ($generated@@69 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (= ($generated@@124 $generated@@19) $generated@@0))
(assert (= ($generated@@125 $generated@@19) $generated@@1))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (=> ($generated@@38 $generated@@126 $generated@@127) (and (<= ($generated@@22 0) ($generated@@39 $generated@@126 $generated@@127)) (and (<= ($generated@@22 0) ($generated@@39 $generated@@126 $generated@@127)) ($generated@@37 $generated@@126 $generated@@126 ($generated@@39 $generated@@126 $generated@@127) $generated@@127))))
 :pattern ( ($generated@@39 $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 Int) ) (! (= ($generated@@28 $generated@@4 ($generated@@8 ($generated@@22 $generated@@128))) ($generated@@24 $generated@@33 ($generated@@28 $generated@@4 ($generated@@8 $generated@@128))))
 :pattern ( ($generated@@28 $generated@@4 ($generated@@8 ($generated@@22 $generated@@128))))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@T) ) (! (= ($generated@@28 $generated@@130 ($generated@@24 $generated@@130 $generated@@129)) ($generated@@24 $generated@@33 ($generated@@28 $generated@@130 $generated@@129)))
 :pattern ( ($generated@@28 $generated@@130 ($generated@@24 $generated@@130 $generated@@129)))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 Int) ($generated@@134 T@U) ) (!  (=> (or ($generated@@35 $generated@@131 ($generated@@22 $generated@@133) $generated@@134) (and (< 1 $generated@@31) (and (and (and ($generated@@34 $generated@@132) (<= ($generated@@22 0) $generated@@133)) ($generated@@36 $generated@@134 $generated@@131)) ($generated@@37 $generated@@131 $generated@@131 ($generated@@22 $generated@@133) $generated@@134)))) (and ($generated@@38 $generated@@131 $generated@@134) (= ($generated@@32 $generated@@131 ($generated@@22 $generated@@133) $generated@@134) (let (($generated@@135 ($generated@@39 $generated@@131 $generated@@134)))
$generated@@135))))
 :weight 3
 :pattern ( ($generated@@32 $generated@@131 ($generated@@22 $generated@@133) $generated@@134) ($generated@@34 $generated@@132))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 (T@U T@U Int T@U) Bool)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@145  (=> (= (ControlFlow 0 3) (- 0 2)) (or (and ($generated@@45 $generated@@4 ($generated@@8 ($generated@@22 0)) $generated@@19) (and (<= ($generated@@22 0) ($generated@@22 0)) ($generated@@37 $generated@@136 $generated@@136 ($generated@@22 0) $generated@@137))) (or (and ($generated@@45 $generated@@4 ($generated@@8 ($generated@@22 0)) $generated@@19) (and (<= ($generated@@22 0) ($generated@@22 0)) ($generated@@37 $generated@@136 $generated@@136 ($generated@@22 0) $generated@@137))) (or (and ($generated@@45 $generated@@4 ($generated@@8 ($generated@@22 0)) $generated@@19) (and (<= ($generated@@22 0) ($generated@@22 0)) ($generated@@37 $generated@@136 $generated@@136 ($generated@@22 0) $generated@@137))) (exists (($generated@@146 Int) )  (and (<= ($generated@@22 0) $generated@@146) (and (<= ($generated@@22 0) $generated@@146) ($generated@@37 $generated@@136 $generated@@136 $generated@@146 $generated@@137))))))))))
(let (($generated@@147  (=> (and (< $generated@@138 ($generated@@22 0)) (= (ControlFlow 0 6) 3)) $generated@@145)))
(let (($generated@@148  (=> (<= ($generated@@22 0) $generated@@138) (=> (and (and ($generated@@18 $generated@@4 ($generated@@8 $generated@@138) $generated@@19 $generated@@139) ($generated@@50 $generated@@137 $generated@@136 $generated@@139)) (and ($generated@@140 $generated@@136 $generated@@136 $generated@@138 $generated@@137) (= (ControlFlow 0 5) 3))) $generated@@145))))
(let (($generated@@149  (=> (<= ($generated@@22 0) $generated@@138) (and (=> (= (ControlFlow 0 7) 5) $generated@@148) (=> (= (ControlFlow 0 7) 6) $generated@@147)))))
(let (($generated@@150  (=> (and (< $generated@@138 ($generated@@22 0)) (= (ControlFlow 0 4) 3)) $generated@@145)))
(let (($generated@@151 true))
(let (($generated@@152  (=> (= $generated@@141 ($generated@@69 $generated@@142 $generated@@139 $generated false)) (=> (and (and ($generated@@18 $generated@@4 ($generated@@8 $generated@@143) $generated@@19 $generated@@139) ($generated@@50 $generated@@137 $generated@@136 $generated@@139)) (and ($generated@@140 $generated@@136 $generated@@136 $generated@@143 $generated@@137) ($generated@@37 $generated@@136 $generated@@136 $generated@@143 $generated@@137))) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@151) (=> (= (ControlFlow 0 8) 7) $generated@@149)) (=> (= (ControlFlow 0 8) 4) $generated@@150))))))
(let (($generated@@153  (=> (and ($generated@@34 $generated@@139) ($generated@@144 $generated@@139)) (=> (and (and (<= ($generated@@22 0) $generated@@143) ($generated@@36 $generated@@137 $generated@@136)) (and (= 1 $generated@@31) (= (ControlFlow 0 9) 8))) $generated@@152))))
$generated@@153)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
