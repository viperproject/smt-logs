(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@42 (T@T T@U T@U) Bool)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@45 (T@U T@U) Bool)
(declare-fun $generated@@49 (T@U T@U T@U) Bool)
(declare-fun $generated@@50 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@55 (T@U Int Int T@U) T@U)
(declare-fun $generated@@62 (T@U T@U) Bool)
(declare-fun $generated@@65 (T@U Int T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@87 (T@T T@T) T@T)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T) T@T)
(declare-fun $generated@@90 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 ($generated@@20 $generated@@23 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@23 $generated@@22))
)))
(assert  (and (and (forall (($generated@@29 T@T) ($generated@@30 T@T) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@26 $generated@@29 $generated@@30 ($generated@@28 $generated@@29 $generated@@30 $generated@@32 $generated@@33 $generated@@31) $generated@@33) $generated@@31)
 :weight 0
)) (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (= $generated@@38 $generated@@39) (= ($generated@@26 $generated@@34 $generated@@35 ($generated@@28 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@39) ($generated@@26 $generated@@34 $generated@@35 $generated@@37 $generated@@39)))
 :weight 0
))) (= ($generated@@3 $generated@@27) 3)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@24 ($generated@@25 $generated@@40) $generated@@41) ($generated@@8 ($generated@@26 $generated@@27 $generated@@4 $generated@@40 $generated@@41)))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@40) $generated@@41))
)))
(assert (= ($generated@@3 $generated@@43) 4))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@42 $generated@@43 $generated@@46 ($generated@@44 $generated@@47)) (forall (($generated@@48 T@U) ) (!  (=> ($generated@@24 $generated@@46 $generated@@48) ($generated@@45 $generated@@48 $generated@@47))
 :pattern ( ($generated@@24 $generated@@46 $generated@@48))
)))
 :pattern ( ($generated@@42 $generated@@43 $generated@@46 ($generated@@44 $generated@@47)))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@49 ($generated@@21 $generated@@54 $generated@@51) $generated@@52 $generated@@53) ($generated@@50 $generated@@54 $generated@@51 $generated@@52 $generated@@53))
 :pattern ( ($generated@@49 ($generated@@21 $generated@@54 $generated@@51) $generated@@52 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 Int) ($generated@@58 Int) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@8 ($generated@@26 $generated@@27 $generated@@4 ($generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59) $generated@@60)) (exists (($generated@@61 Int) ) (!  (and ($generated@@24 $generated@@56 ($generated@@21 $generated@@5 ($generated@@9 $generated@@61))) (= $generated@@60 ($generated@@21 $generated@@5 ($generated@@9 (ite (< $generated@@61 $generated@@57) $generated@@61 $generated@@58)))))
 :pattern ( ($generated@@24 $generated@@59 ($generated@@21 $generated@@5 ($generated@@9 $generated@@61))))
)))
 :pattern ( ($generated@@26 $generated@@27 $generated@@4 ($generated@@55 $generated@@56 $generated@@57 $generated@@58 $generated@@59) $generated@@60))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> ($generated@@62 $generated@@63 $generated@@64) (= $generated@@63 $generated@@64))
 :pattern ( ($generated@@62 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 Int) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@8 ($generated@@26 $generated@@27 $generated@@4 ($generated@@65 $generated@@66 $generated@@67 $generated@@68) $generated@@69))  (and ($generated@@45 $generated@@69 $generated@@66) (and (< ($generated@@10 ($generated@@20 $generated@@5 $generated@@69)) $generated@@67) ($generated@@24 $generated@@68 $generated@@69))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@4 ($generated@@65 $generated@@66 $generated@@67 $generated@@68) $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@45 $generated@@70 $generated) (and (= ($generated@@21 $generated@@5 ($generated@@20 $generated@@5 $generated@@70)) $generated@@70) ($generated@@42 $generated@@5 ($generated@@20 $generated@@5 $generated@@70) $generated)))
 :pattern ( ($generated@@45 $generated@@70 $generated))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@45 ($generated@@21 $generated@@73 $generated@@71) $generated@@72) ($generated@@42 $generated@@73 $generated@@71 $generated@@72))
 :pattern ( ($generated@@45 ($generated@@21 $generated@@73 $generated@@71) $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@50 $generated@@43 $generated@@74 ($generated@@44 $generated@@75) $generated@@76) (forall (($generated@@77 T@U) ) (!  (=> ($generated@@24 $generated@@74 $generated@@77) ($generated@@49 $generated@@77 $generated@@75 $generated@@76))
 :pattern ( ($generated@@24 $generated@@74 $generated@@77))
)))
 :pattern ( ($generated@@50 $generated@@43 $generated@@74 ($generated@@44 $generated@@75) $generated@@76))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@78 ($generated@@44 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@44 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@19 ($generated@@44 $generated@@80)) $generated@@1)
 :pattern ( ($generated@@44 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@20 $generated@@82 ($generated@@21 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@21 $generated@@82 $generated@@81))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@83 $generated@@91 $generated@@92 $generated@@93 ($generated@@88 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@83 $generated@@98 $generated@@99 $generated@@100 ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@83 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@83 $generated@@107 $generated@@108 $generated@@109 ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@83 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))) (= ($generated@@3 $generated@@84) 5)) (= ($generated@@3 $generated@@85) 6)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (= ($generated@@3 ($generated@@87 $generated@@116 $generated@@117)) 7))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@89 ($generated@@87 $generated@@118 $generated@@119)) $generated@@118)
 :pattern ( ($generated@@87 $generated@@118 $generated@@119))
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@90 ($generated@@87 $generated@@120 $generated@@121)) $generated@@121)
 :pattern ( ($generated@@87 $generated@@120 $generated@@121))
))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@8 ($generated@@83 $generated@@84 $generated@@85 $generated@@4 ($generated@@86 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@8 ($generated@@20 $generated@@4 ($generated@@26 $generated@@85 $generated@@27 ($generated@@26 $generated@@84 ($generated@@87 $generated@@85 $generated@@27) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@83 $generated@@84 $generated@@85 $generated@@4 ($generated@@86 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> ($generated@@45 $generated@@128 ($generated@@44 $generated@@129)) (and (= ($generated@@21 $generated@@43 ($generated@@20 $generated@@43 $generated@@128)) $generated@@128) ($generated@@42 $generated@@43 ($generated@@20 $generated@@43 $generated@@128) ($generated@@44 $generated@@129))))
 :pattern ( ($generated@@45 $generated@@128 ($generated@@44 $generated@@129)))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@62 $generated@@130 $generated@@131) (forall (($generated@@132 T@U) ) (! (= ($generated@@24 $generated@@130 $generated@@132) ($generated@@24 $generated@@131 $generated@@132))
 :pattern ( ($generated@@24 $generated@@130 $generated@@132))
 :pattern ( ($generated@@24 $generated@@131 $generated@@132))
)))
 :pattern ( ($generated@@62 $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (! ($generated@@50 $generated@@5 $generated@@134 $generated $generated@@133)
 :pattern ( ($generated@@50 $generated@@5 $generated@@134 $generated $generated@@133))
)))
(assert (forall (($generated@@135 T@U) ) (! ($generated@@42 $generated@@5 $generated@@135 $generated)
 :pattern ( ($generated@@42 $generated@@5 $generated@@135 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 (T@U) Bool)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@146  (=> (= (ControlFlow 0 4) (- 0 3)) ($generated@@62 ($generated@@25 ($generated@@65 $generated 7 $generated@@136)) ($generated@@25 ($generated@@55 $generated@@136 7 $generated@@137 $generated@@136))))))
(let (($generated@@147  (=> (and (<= 7 $generated@@138) (= (ControlFlow 0 7) 4)) $generated@@146)))
(let (($generated@@148  (=> (and (< $generated@@138 7) (= (ControlFlow 0 6) 4)) $generated@@146)))
(let (($generated@@149  (=> ($generated@@24 $generated@@136 ($generated@@21 $generated@@5 ($generated@@9 $generated@@138))) (and (=> (= (ControlFlow 0 8) 6) $generated@@148) (=> (= (ControlFlow 0 8) 7) $generated@@147)))))
(let (($generated@@150  (=> (and (not ($generated@@24 $generated@@136 ($generated@@21 $generated@@5 ($generated@@9 $generated@@138)))) (= (ControlFlow 0 5) 4)) $generated@@146)))
(let (($generated@@151  (and (=> (= (ControlFlow 0 9) 8) $generated@@149) (=> (= (ControlFlow 0 9) 5) $generated@@150))))
(let (($generated@@152 true))
(let (($generated@@153  (=> (not (and (< $generated@@139 7) ($generated@@24 $generated@@136 ($generated@@21 $generated@@5 ($generated@@9 $generated@@139))))) (and (=> (= (ControlFlow 0 11) 9) $generated@@151) (=> (= (ControlFlow 0 11) 2) $generated@@152)))))
(let (($generated@@154  (=> (and (< $generated@@139 7) ($generated@@24 $generated@@136 ($generated@@21 $generated@@5 ($generated@@9 $generated@@139)))) (and (=> (= (ControlFlow 0 10) 9) $generated@@151) (=> (= (ControlFlow 0 10) 2) $generated@@152)))))
(let (($generated@@155  (=> (<= 7 $generated@@139) (and (=> (= (ControlFlow 0 13) 10) $generated@@154) (=> (= (ControlFlow 0 13) 11) $generated@@153)))))
(let (($generated@@156  (=> (< $generated@@139 7) (and (=> (= (ControlFlow 0 12) 10) $generated@@154) (=> (= (ControlFlow 0 12) 11) $generated@@153)))))
(let (($generated@@157  (and (=> (= (ControlFlow 0 14) 12) $generated@@156) (=> (= (ControlFlow 0 14) 13) $generated@@155))))
(let (($generated@@158 true))
(let (($generated@@159  (=> (= $generated@@140 ($generated@@86 $generated@@141 $generated@@142 $generated@@2 false)) (and (=> (= (ControlFlow 0 15) 14) $generated@@157) (=> (= (ControlFlow 0 15) 1) $generated@@158)))))
(let (($generated@@160  (=> (and (and (and ($generated@@143 $generated@@142) ($generated@@144 $generated@@142)) (and ($generated@@42 $generated@@43 $generated@@136 ($generated@@44 $generated)) ($generated@@50 $generated@@43 $generated@@136 ($generated@@44 $generated) $generated@@142))) (and (and (= 0 $generated@@145) ($generated@@24 $generated@@136 ($generated@@21 $generated@@5 ($generated@@9 $generated@@137)))) (and (< $generated@@137 7) (= (ControlFlow 0 16) 15)))) $generated@@159)))
$generated@@160))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
