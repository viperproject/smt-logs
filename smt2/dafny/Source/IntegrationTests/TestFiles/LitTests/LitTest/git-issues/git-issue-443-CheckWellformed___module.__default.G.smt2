(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (T@U T@U) Int)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U T@U T@U) Bool)
(declare-fun $generated@@40 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@U T@U) Bool)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@58 (T@T T@T) T@T)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (!  (=> (or ($generated@@23 $generated@@26 $generated@@27) (and (< 0 $generated@@21) ($generated@@24 $generated@@27 $generated@@26))) (= ($generated@@22 $generated@@26 $generated@@27) ($generated@@25 15)))
 :pattern ( ($generated@@22 $generated@@26 $generated@@27))
))))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@25 $generated@@28) $generated@@28)
 :pattern ( ($generated@@25 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (= ($generated@@4 $generated@@32) 3))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (!  (=> (or ($generated@@23 $generated@@33 ($generated@@29 $generated@@32 $generated@@34)) (and (< 0 $generated@@21) ($generated@@24 $generated@@34 $generated@@33))) (= ($generated@@22 $generated@@33 ($generated@@29 $generated@@32 $generated@@34)) ($generated@@25 15)))
 :weight 3
 :pattern ( ($generated@@22 $generated@@33 ($generated@@29 $generated@@32 $generated@@34)))
))))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@44 $generated@@41) $generated@@42 $generated@@43) ($generated@@40 $generated@@44 $generated@@41 $generated@@42 $generated@@43))
 :pattern ( ($generated@@39 ($generated@@36 $generated@@44 $generated@@41) $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@24 $generated@@46 $generated@@0) (and (= ($generated@@36 $generated@@6 ($generated@@35 $generated@@6 $generated@@46)) $generated@@46) ($generated@@45 $generated@@6 ($generated@@35 $generated@@6 $generated@@46) $generated@@0)))
 :pattern ( ($generated@@24 $generated@@46 $generated@@0))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@24 $generated@@47 $generated) (and (= ($generated@@36 $generated@@5 ($generated@@35 $generated@@5 $generated@@47)) $generated@@47) ($generated@@45 $generated@@5 ($generated@@35 $generated@@5 $generated@@47) $generated)))
 :pattern ( ($generated@@24 $generated@@47 $generated))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@24 ($generated@@36 $generated@@50 $generated@@48) $generated@@49) ($generated@@45 $generated@@50 $generated@@48 $generated@@49))
 :pattern ( ($generated@@24 ($generated@@36 $generated@@50 $generated@@48) $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@35 $generated@@52 ($generated@@36 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@36 $generated@@52 $generated@@51))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@53 $generated@@63 $generated@@64 $generated@@65 ($generated@@59 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@68 $generated@@69) $generated@@66)
 :weight 0
)) (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@75 $generated@@77) (= ($generated@@53 $generated@@70 $generated@@71 $generated@@72 ($generated@@59 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@77 $generated@@78) ($generated@@53 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@77 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@53 $generated@@79 $generated@@80 $generated@@81 ($generated@@59 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@53 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)))) (= ($generated@@4 $generated@@54) 4)) (= ($generated@@4 $generated@@55) 5)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@57 $generated@@88 $generated@@89 ($generated@@60 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@92) $generated@@90)
 :weight 0
))) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@57 $generated@@93 $generated@@94 ($generated@@60 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@57 $generated@@93 $generated@@94 $generated@@96 $generated@@98)))
 :weight 0
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (= ($generated@@4 ($generated@@58 $generated@@99 $generated@@100)) 6))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (! (= ($generated@@61 ($generated@@58 $generated@@101 $generated@@102)) $generated@@101)
 :pattern ( ($generated@@58 $generated@@101 $generated@@102))
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@62 ($generated@@58 $generated@@103 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@58 $generated@@103 $generated@@104))
))))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 Bool) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@9 ($generated@@53 $generated@@54 $generated@@55 $generated@@5 ($generated@@56 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))  (=> (and (or (not (= $generated@@109 $generated@@105)) (not true)) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@57 $generated@@55 $generated@@32 ($generated@@57 $generated@@54 ($generated@@58 $generated@@55 $generated@@32) $generated@@106 $generated@@109) $generated@@107)))) $generated@@108))
 :pattern ( ($generated@@53 $generated@@54 $generated@@55 $generated@@5 ($generated@@56 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))
)))
(assert (forall (($generated@@111 Int) ) (! (= ($generated@@36 $generated@@6 ($generated@@10 ($generated@@25 $generated@@111))) ($generated@@29 $generated@@32 ($generated@@36 $generated@@6 ($generated@@10 $generated@@111))))
 :pattern ( ($generated@@36 $generated@@6 ($generated@@10 ($generated@@25 $generated@@111))))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@T) ) (! (= ($generated@@36 $generated@@113 ($generated@@29 $generated@@113 $generated@@112)) ($generated@@29 $generated@@32 ($generated@@36 $generated@@113 $generated@@112)))
 :pattern ( ($generated@@36 $generated@@113 ($generated@@29 $generated@@113 $generated@@112)))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ) (! ($generated@@40 $generated@@6 $generated@@115 $generated@@0 $generated@@114)
 :pattern ( ($generated@@40 $generated@@6 $generated@@115 $generated@@0 $generated@@114))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ) (! ($generated@@40 $generated@@5 $generated@@117 $generated $generated@@116)
 :pattern ( ($generated@@40 $generated@@5 $generated@@117 $generated $generated@@116))
)))
(assert (forall (($generated@@118 T@U) ) (! ($generated@@45 $generated@@6 $generated@@118 $generated@@0)
 :pattern ( ($generated@@45 $generated@@6 $generated@@118 $generated@@0))
)))
(assert (forall (($generated@@119 T@U) ) (! ($generated@@45 $generated@@5 $generated@@119 $generated)
 :pattern ( ($generated@@45 $generated@@5 $generated@@119 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () Bool)
(declare-fun $generated@@122 () Bool)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 (T@U) Bool)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () Bool)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () Bool)
(declare-fun $generated@@132 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@133 true))
(let (($generated@@134  (and (=> (= (ControlFlow 0 3) (- 0 10)) true) (and (=> (= (ControlFlow 0 3) (- 0 9)) true) (and (=> (= (ControlFlow 0 3) (- 0 8)) (= $generated@@120 $generated@@120)) (=> (= $generated@@120 $generated@@120) (and (=> (= (ControlFlow 0 3) (- 0 7)) true) (and (=> (= (ControlFlow 0 3) (- 0 6)) (= $generated@@120 $generated@@120)) (=> (= $generated@@120 $generated@@120) (and (=> (= (ControlFlow 0 3) (- 0 5)) true) (and (=> (= (ControlFlow 0 3) (- 0 4)) (= $generated@@120 $generated@@120)) (=> (= $generated@@120 $generated@@120) (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@9 ($generated@@29 $generated@@5 ($generated@@8 (< 20 30)))))))))))))))))
(let (($generated@@135  (=> (= $generated@@121 ($generated@@9 ($generated@@29 $generated@@5 ($generated@@8 false)))) (=> (and ($generated@@45 $generated@@5 ($generated@@8 $generated@@121) $generated) (= $generated@@122 $generated@@121)) (and (=> (= (ControlFlow 0 12) 3) $generated@@134) (=> (= (ControlFlow 0 12) 11) $generated@@133))))))
(let (($generated@@136 true))
(let (($generated@@137  (=> (= $generated@@123 ($generated@@56 $generated@@124 $generated@@125 $generated@@3 false)) (and (=> (= (ControlFlow 0 13) 1) $generated@@136) (=> (= (ControlFlow 0 13) 12) $generated@@135)))))
(let (($generated@@138  (=> (and (and (and (and ($generated@@126 $generated@@125) ($generated@@127 $generated@@125)) ($generated@@24 $generated@@120 $generated@@128)) (and (=> $generated@@129 (and ($generated@@24 $generated@@130 $generated@@128) ($generated@@39 $generated@@130 $generated@@128 $generated@@125))) true)) (and (and (=> $generated@@131 (and ($generated@@24 $generated@@132 $generated@@128) ($generated@@39 $generated@@132 $generated@@128 $generated@@125))) true) (and (= 0 $generated@@21) (= (ControlFlow 0 14) 13)))) $generated@@137)))
$generated@@138)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
