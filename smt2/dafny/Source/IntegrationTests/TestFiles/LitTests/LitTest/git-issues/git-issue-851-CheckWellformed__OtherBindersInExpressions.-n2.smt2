(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 () Bool)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 (Int Int) Int)
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@45 (T@T T@U T@U) Bool)
(declare-fun $generated@@56 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@60 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert  (=> (<= 0 $generated@@21) (=> (or $generated@@22 (< 0 $generated@@21)) (= $generated@@23 ($generated@@24 40)))))
(assert  (=> (<= 0 $generated@@21) (=> (or $generated@@22 (< 0 $generated@@21)) (= $generated@@23 ($generated@@24 40)))))
(assert ($generated@@25 $generated@@26))
(assert (forall (($generated@@27 Int) ) (! (= ($generated@@24 $generated@@27) $generated@@27)
 :pattern ( ($generated@@24 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 ($generated@@31 $generated@@34 $generated@@33)) $generated@@33)
 :pattern ( ($generated@@31 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@35 ($generated@@32 $generated@@40 $generated@@37) $generated@@38 $generated@@39) ($generated@@36 $generated@@40 $generated@@37 $generated@@38 $generated@@39))
 :pattern ( ($generated@@35 ($generated@@32 $generated@@40 $generated@@37) $generated@@38 $generated@@39))
)))
(assert (forall (($generated@@42 Int) ($generated@@43 Int) ) (! (= ($generated@@41 $generated@@42 $generated@@43) (div $generated@@42 $generated@@43))
 :pattern ( ($generated@@41 $generated@@42 $generated@@43))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@44 $generated@@46 $generated@@0) (and (= ($generated@@32 $generated@@6 ($generated@@31 $generated@@6 $generated@@46)) $generated@@46) ($generated@@45 $generated@@6 ($generated@@31 $generated@@6 $generated@@46) $generated@@0)))
 :pattern ( ($generated@@44 $generated@@46 $generated@@0))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@44 $generated@@47 $generated) (and (= ($generated@@32 $generated@@5 ($generated@@31 $generated@@5 $generated@@47)) $generated@@47) ($generated@@45 $generated@@5 ($generated@@31 $generated@@5 $generated@@47) $generated)))
 :pattern ( ($generated@@44 $generated@@47 $generated))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@44 ($generated@@32 $generated@@50 $generated@@48) $generated@@49) ($generated@@45 $generated@@50 $generated@@48 $generated@@49))
 :pattern ( ($generated@@44 ($generated@@32 $generated@@50 $generated@@48) $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@25 $generated@@51) (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (!  (=> ($generated@@44 $generated@@53 $generated@@51) ($generated@@35 $generated@@53 $generated@@51 $generated@@52))
 :pattern ( ($generated@@35 $generated@@53 $generated@@51 $generated@@52))
)))
 :pattern ( ($generated@@25 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@31 $generated@@55 ($generated@@32 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@32 $generated@@55 $generated@@54))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@56 $generated@@67 $generated@@68 $generated@@69 ($generated@@63 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@72 $generated@@73) $generated@@70)
 :weight 0
)) (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@56 $generated@@74 $generated@@75 $generated@@76 ($generated@@63 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@56 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@56 $generated@@83 $generated@@84 $generated@@85 ($generated@@63 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@56 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)))) (= ($generated@@4 $generated@@57) 3)) (= ($generated@@4 $generated@@58) 4)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@60 $generated@@92 $generated@@93 ($generated@@64 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@96) $generated@@94)
 :weight 0
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@60 $generated@@97 $generated@@98 ($generated@@64 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@60 $generated@@97 $generated@@98 $generated@@100 $generated@@102)))
 :weight 0
))) (= ($generated@@4 $generated@@61) 5)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (= ($generated@@4 ($generated@@62 $generated@@103 $generated@@104)) 6))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@65 ($generated@@62 $generated@@105 $generated@@106)) $generated@@105)
 :pattern ( ($generated@@62 $generated@@105 $generated@@106))
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@66 ($generated@@62 $generated@@107 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@62 $generated@@107 $generated@@108))
))))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 Bool) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@9 ($generated@@56 $generated@@57 $generated@@58 $generated@@5 ($generated@@59 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))  (=> (and (or (not (= $generated@@113 $generated@@109)) (not true)) ($generated@@9 ($generated@@31 $generated@@5 ($generated@@60 $generated@@58 $generated@@61 ($generated@@60 $generated@@57 ($generated@@62 $generated@@58 $generated@@61) $generated@@110 $generated@@113) $generated@@111)))) $generated@@112))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58 $generated@@5 ($generated@@59 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 Int) ) (! (= ($generated@@32 $generated@@6 ($generated@@10 ($generated@@24 $generated@@115))) ($generated@@28 $generated@@61 ($generated@@32 $generated@@6 ($generated@@10 $generated@@115))))
 :pattern ( ($generated@@32 $generated@@6 ($generated@@10 ($generated@@24 $generated@@115))))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@32 $generated@@117 ($generated@@28 $generated@@117 $generated@@116)) ($generated@@28 $generated@@61 ($generated@@32 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@32 $generated@@117 ($generated@@28 $generated@@117 $generated@@116)))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ) (! ($generated@@36 $generated@@6 $generated@@119 $generated@@0 $generated@@118)
 :pattern ( ($generated@@36 $generated@@6 $generated@@119 $generated@@0 $generated@@118))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ) (! ($generated@@36 $generated@@5 $generated@@121 $generated $generated@@120)
 :pattern ( ($generated@@36 $generated@@5 $generated@@121 $generated $generated@@120))
)))
(assert (forall (($generated@@122 T@U) ) (! ($generated@@45 $generated@@6 $generated@@122 $generated@@0)
 :pattern ( ($generated@@45 $generated@@6 $generated@@122 $generated@@0))
)))
(assert (forall (($generated@@123 T@U) ) (! ($generated@@45 $generated@@5 $generated@@123 $generated)
 :pattern ( ($generated@@45 $generated@@5 $generated@@123 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 (T@U) Bool)
(declare-fun $generated@@129 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@130 true))
(let (($generated@@131  (=> (and (not (and ($generated@@44 $generated@@124 $generated@@26) ($generated@@35 $generated@@124 $generated@@26 $generated@@125))) (= (ControlFlow 0 5) 2)) $generated@@130)))
(let (($generated@@132  (=> (and ($generated@@44 $generated@@124 $generated@@26) ($generated@@35 $generated@@124 $generated@@26 $generated@@125)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (not (= ($generated@@24 0) 0)) (not true))) (=> (or (not (= ($generated@@24 0) 0)) (not true)) (=> (= (ControlFlow 0 3) 2) $generated@@130))))))
(let (($generated@@133 true))
(let (($generated@@134  (=> (= $generated@@126 ($generated@@59 $generated@@127 $generated@@125 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 6) 1) $generated@@133) (=> (= (ControlFlow 0 6) 3) $generated@@132)) (=> (= (ControlFlow 0 6) 5) $generated@@131)))))
(let (($generated@@135  (=> (and (and ($generated@@128 $generated@@125) ($generated@@129 $generated@@125)) (and (= 0 $generated@@21) (= (ControlFlow 0 7) 6))) $generated@@134)))
$generated@@135)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
