(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 () Int)
(declare-fun $generated@@22 (Int) T@U)
(declare-fun $generated@@23 (Int) Bool)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@37 (T@U T@U) Bool)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@41 () Bool)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U) Bool)
(declare-fun $generated@@64 (T@U) Bool)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@75 (T@T T@T) T@T)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@T) T@T)
(declare-fun $generated@@79 (T@T) T@T)
(declare-fun $generated@@130 (T@U) T@U)
(declare-fun $generated@@131 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@5 $generated@@27) 3))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@30 Int) ) (!  (=> (or ($generated@@23 $generated@@30) (and (< 2 $generated@@21) (and (<= ($generated@@24 0) $generated@@30) (exists (($generated@@31 T@U) ) (!  (and ($generated@@26 $generated@@27 $generated@@31 $generated@@28) ($generated@@25 $generated@@31))
 :pattern ( ($generated@@25 $generated@@31))
))))) ($generated@@26 $generated@@27 ($generated@@22 $generated@@30) $generated@@29))
 :pattern ( ($generated@@22 $generated@@30))
))))
(assert (= ($generated@@32 $generated@@33) $generated@@2))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@34 $generated@@27 $generated@@35 $generated@@29 $generated@@36) ($generated@@34 $generated@@27 $generated@@35 $generated@@28 $generated@@36))
 :pattern ( ($generated@@34 $generated@@27 $generated@@35 $generated@@29 $generated@@36))
)))
(assert ($generated@@26 $generated@@27 $generated@@33 $generated@@28))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@37 $generated@@38 $generated@@39) (= $generated@@38 $generated@@39))
 :pattern ( ($generated@@37 $generated@@38 $generated@@39))
)))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@43 T@U) ($generated@@44 Int) ) (!  (=> (or ($generated@@23 $generated@@44) (and (< 2 $generated@@21) (and (and ($generated@@40 $generated@@43) (<= ($generated@@24 0) $generated@@44)) (exists (($generated@@45 T@U) ) (!  (and ($generated@@26 $generated@@27 $generated@@45 $generated@@28) ($generated@@25 $generated@@45))
 :pattern ( ($generated@@25 $generated@@45))
))))) (and $generated@@41 (= ($generated@@22 $generated@@44) (let (($generated@@46 $generated@@42))
$generated@@46))))
 :pattern ( ($generated@@22 $generated@@44) ($generated@@40 $generated@@43))
))))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@24 $generated@@47) $generated@@47)
 :pattern ( ($generated@@24 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@52 $generated@@54 ($generated@@51 $generated@@54 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@51 $generated@@54 $generated@@53))
)))
(assert  (=> (<= 2 $generated@@21) (forall (($generated@@55 T@U) ($generated@@56 Int) ) (!  (=> (or ($generated@@23 ($generated@@24 $generated@@56)) (and (< 2 $generated@@21) (and (and ($generated@@40 $generated@@55) (<= ($generated@@24 0) $generated@@56)) (exists (($generated@@57 T@U) ) (!  (and ($generated@@26 $generated@@27 $generated@@57 $generated@@28) ($generated@@25 $generated@@57))
 :pattern ( ($generated@@25 $generated@@57))
))))) (and $generated@@41 (= ($generated@@22 ($generated@@24 $generated@@56)) (let (($generated@@58 $generated@@42))
$generated@@58))))
 :weight 3
 :pattern ( ($generated@@22 ($generated@@24 $generated@@56)) ($generated@@40 $generated@@55))
))))
(assert  (=> $generated@@41 (and ($generated@@26 $generated@@27 $generated@@42 $generated@@28) ($generated@@25 $generated@@42))))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@59 ($generated@@52 $generated@@63 $generated@@60) $generated@@61 $generated@@62) ($generated@@34 $generated@@63 $generated@@60 $generated@@61 $generated@@62))
 :pattern ( ($generated@@59 ($generated@@52 $generated@@63 $generated@@60) $generated@@61 $generated@@62))
)))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@65 T@U) ) (!  (=> (or ($generated@@64 $generated@@65) (and (< 0 $generated@@21) ($generated@@26 $generated@@27 $generated@@65 $generated@@28))) (= ($generated@@25 $generated@@65) ($generated@@10 ($generated@@48 $generated@@6 ($generated@@9 false)))))
 :pattern ( ($generated@@25 $generated@@65))
))))
(assert  (=> (<= 0 $generated@@21) (forall (($generated@@66 T@U) ) (!  (=> (or ($generated@@64 ($generated@@48 $generated@@27 $generated@@66)) (and (< 0 $generated@@21) ($generated@@26 $generated@@27 $generated@@66 $generated@@28))) (= ($generated@@25 ($generated@@48 $generated@@27 $generated@@66)) ($generated@@10 ($generated@@48 $generated@@6 ($generated@@9 false)))))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@48 $generated@@27 $generated@@66)))
))))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@51 $generated@@68 ($generated@@52 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@52 $generated@@68 $generated@@67))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@69 $generated@@80 $generated@@81 $generated@@82 ($generated@@76 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@85 $generated@@86) $generated@@83)
 :weight 0
)) (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@69 $generated@@87 $generated@@88 $generated@@89 ($generated@@76 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@69 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@69 $generated@@96 $generated@@97 $generated@@98 ($generated@@76 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@103 $generated@@104) ($generated@@69 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@103 $generated@@104)))
 :weight 0
)))) (= ($generated@@5 $generated@@70) 4)) (= ($generated@@5 $generated@@71) 5)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@73 $generated@@105 $generated@@106 ($generated@@77 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@107) $generated@@109) $generated@@107)
 :weight 0
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@114 $generated@@115) (= ($generated@@73 $generated@@110 $generated@@111 ($generated@@77 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@112) $generated@@115) ($generated@@73 $generated@@110 $generated@@111 $generated@@113 $generated@@115)))
 :weight 0
))) (= ($generated@@5 $generated@@74) 6)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (= ($generated@@5 ($generated@@75 $generated@@116 $generated@@117)) 7))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@78 ($generated@@75 $generated@@118 $generated@@119)) $generated@@118)
 :pattern ( ($generated@@75 $generated@@118 $generated@@119))
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ) (! (= ($generated@@79 ($generated@@75 $generated@@120 $generated@@121)) $generated@@121)
 :pattern ( ($generated@@75 $generated@@120 $generated@@121))
))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@10 ($generated@@69 $generated@@70 $generated@@71 $generated@@6 ($generated@@72 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@10 ($generated@@51 $generated@@6 ($generated@@73 $generated@@71 $generated@@74 ($generated@@73 $generated@@70 ($generated@@75 $generated@@71 $generated@@74) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@69 $generated@@70 $generated@@71 $generated@@6 ($generated@@72 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> (and ($generated@@40 $generated@@129) ($generated@@26 $generated@@27 $generated@@128 $generated@@28)) ($generated@@34 $generated@@27 $generated@@128 $generated@@28 $generated@@129))
 :pattern ( ($generated@@34 $generated@@27 $generated@@128 $generated@@28 $generated@@129))
)))
(assert (= ($generated@@130 $generated@@28) $generated@@0))
(assert (= ($generated@@131 $generated@@28) $generated@@3))
(assert (= ($generated@@130 $generated@@29) $generated@@1))
(assert (= ($generated@@131 $generated@@29) $generated@@4))
(assert (= $generated@@33 ($generated@@48 $generated@@27 $generated@@33)))
(assert (forall (($generated@@132 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@132 $generated@@29)  (and ($generated@@26 $generated@@27 $generated@@132 $generated@@28) ($generated@@25 $generated@@132)))
 :pattern ( ($generated@@26 $generated@@27 $generated@@132 $generated@@29))
)))
(assert (forall (($generated@@133 Int) ) (! (= ($generated@@52 $generated@@7 ($generated@@11 ($generated@@24 $generated@@133))) ($generated@@48 $generated@@74 ($generated@@52 $generated@@7 ($generated@@11 $generated@@133))))
 :pattern ( ($generated@@52 $generated@@7 ($generated@@11 ($generated@@24 $generated@@133))))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@T) ) (! (= ($generated@@52 $generated@@135 ($generated@@48 $generated@@135 $generated@@134)) ($generated@@48 $generated@@74 ($generated@@52 $generated@@135 $generated@@134)))
 :pattern ( ($generated@@52 $generated@@135 ($generated@@48 $generated@@135 $generated@@134)))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (! ($generated@@37 $generated@@136 $generated@@137)
 :pattern ( ($generated@@37 $generated@@136 $generated@@137))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 (T@U) Bool)
(declare-fun $generated@@145 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@146  (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (and ($generated@@26 $generated@@27 ($generated@@48 $generated@@27 $generated@@33) $generated@@28) ($generated@@10 ($generated@@48 $generated@@6 ($generated@@9 ($generated@@25 ($generated@@48 $generated@@27 $generated@@33)))))) (exists (($generated@@147 T@U) )  (and ($generated@@26 $generated@@27 $generated@@147 $generated@@28) ($generated@@25 $generated@@147))))) (=> (or (and ($generated@@26 $generated@@27 ($generated@@48 $generated@@27 $generated@@33) $generated@@28) ($generated@@10 ($generated@@48 $generated@@6 ($generated@@9 ($generated@@25 ($generated@@48 $generated@@27 $generated@@33)))))) (exists (($generated@@148 T@U) )  (and ($generated@@26 $generated@@27 $generated@@148 $generated@@28) ($generated@@25 $generated@@148)))) (=> (and (and (and ($generated@@26 $generated@@27 $generated@@138 $generated@@28) ($generated@@34 $generated@@27 $generated@@138 $generated@@28 $generated@@139)) ($generated@@25 $generated@@138)) (and (and ($generated@@26 $generated@@27 $generated@@140 $generated@@28) ($generated@@34 $generated@@27 $generated@@140 $generated@@28 $generated@@139)) (and ($generated@@64 $generated@@140) ($generated@@25 $generated@@140)))) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@37 $generated@@138 $generated@@140)) (=> ($generated@@37 $generated@@138 $generated@@140) (=> (and $generated@@41 (= (ControlFlow 0 3) (- 0 2))) ($generated@@26 $generated@@27 $generated@@138 $generated@@29)))))))))
(let (($generated@@149  (=> (and (not (and ($generated@@26 $generated@@27 $generated@@138 $generated@@28) ($generated@@34 $generated@@27 $generated@@138 $generated@@28 $generated@@139))) (= (ControlFlow 0 7) 3)) $generated@@146)))
(let (($generated@@150  (=> (and (and (and ($generated@@26 $generated@@27 $generated@@138 $generated@@28) ($generated@@34 $generated@@27 $generated@@138 $generated@@28 $generated@@139)) ($generated@@59 ($generated@@52 $generated@@27 $generated@@138) $generated@@28 $generated@@139)) (and ($generated@@64 $generated@@138) (= (ControlFlow 0 6) 3))) $generated@@146)))
(let (($generated@@151 true))
(let (($generated@@152  (=> (= $generated@@141 ($generated@@72 $generated@@142 $generated@@139 $generated false)) (=> (and (and (and ($generated@@26 $generated@@27 $generated@@143 $generated@@28) ($generated@@34 $generated@@27 $generated@@143 $generated@@28 $generated@@139)) ($generated@@59 ($generated@@52 $generated@@27 $generated@@143) $generated@@28 $generated@@139)) (and ($generated@@64 $generated@@143) ($generated@@25 $generated@@143))) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@151) (=> (= (ControlFlow 0 8) 6) $generated@@150)) (=> (= (ControlFlow 0 8) 7) $generated@@149))))))
(let (($generated@@153  (=> (and (and (and ($generated@@40 $generated@@139) ($generated@@144 $generated@@139)) (<= ($generated@@24 0) $generated@@145)) (and (= 2 $generated@@21) (= (ControlFlow 0 9) 8))) $generated@@152)))
$generated@@153)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
