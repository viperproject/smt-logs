(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._module.ClassA () T@U)
(declare-fun Tagclass._module.Tr2? () T@U)
(declare-fun Tagclass._module.Tr2 () T@U)
(declare-fun Tagclass._module.ClassA? () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun tytagFamily$ClassA () T@U)
(declare-fun tytagFamily$Tr2 () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Tr2.w (T@U T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.Tr2? (T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun _module.Tr2.y (T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun bv8Type () T@T)
(declare-fun bv8_2_U ((_ BitVec 8)) T@U)
(declare-fun U_2_bv8 (T@U) (_ BitVec 8))
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._module.ClassA (T@U) T@U)
(declare-fun Tclass._module.ClassA? (T@U) T@U)
(declare-fun implements$_module.Tr2 (T@U T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tclass._module.Tr2 (T@U T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.Tr2?_0 (T@U) T@U)
(declare-fun Tclass._module.Tr2?_1 (T@U) T@U)
(declare-fun Tclass._module.Tr2_0 (T@U) T@U)
(declare-fun Tclass._module.Tr2_1 (T@U) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._module.ClassA_0 (T@U) T@U)
(declare-fun Tclass._module.ClassA?_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.array? Tagclass._System.array Tagclass._module.ClassA Tagclass._module.Tr2? Tagclass._module.Tr2 Tagclass._module.ClassA? tytagFamily$array tytagFamily$ClassA tytagFamily$Tr2)
)
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((_module.Tr2$W T@U) (_module.Tr2$Y T@U) ($h T@U) ($o T@U) ) (!  (=> (and (and ($IsGoodHeap $h) (and (or (not (= $o null)) (not true)) ($Is refType $o (Tclass._module.Tr2? _module.Tr2$W _module.Tr2$Y)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) alloc)))) ($IsAllocBox (_module.Tr2.w _module.Tr2$W _module.Tr2$Y $o) _module.Tr2$W $h))
 :pattern ( (_module.Tr2.w _module.Tr2$W _module.Tr2$Y $o) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) alloc)))
))))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((_module.Tr2$W@@0 T@U) (_module.Tr2$Y@@0 T@U) ($h@@0 T@U) ($o@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@0) (and (or (not (= $o@@0 null)) (not true)) ($Is refType $o@@0 (Tclass._module.Tr2? _module.Tr2$W@@0 _module.Tr2$Y@@0)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))) ($IsAllocBox (_module.Tr2.y _module.Tr2$W@@0 _module.Tr2$Y@@0 $o@@0) _module.Tr2$Y@@0 $h@@0))
 :pattern ( (_module.Tr2.y _module.Tr2$W@@0 _module.Tr2$Y@@0 $o@@0) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))
))))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((_module.Tr2$W@@1 T@U) (_module.Tr2$Y@@1 T@U) ($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) ($Is refType $o@@1 (Tclass._module.Tr2? _module.Tr2$W@@1 _module.Tr2$Y@@1))) ($IsBox (_module.Tr2.w _module.Tr2$W@@1 _module.Tr2$Y@@1 $o@@1) _module.Tr2$W@@1))
 :pattern ( (_module.Tr2.w _module.Tr2$W@@1 _module.Tr2$Y@@1 $o@@1))
))))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((_module.Tr2$W@@2 T@U) (_module.Tr2$Y@@2 T@U) ($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) ($Is refType $o@@2 (Tclass._module.Tr2? _module.Tr2$W@@2 _module.Tr2$Y@@2))) ($IsBox (_module.Tr2.y _module.Tr2$W@@2 _module.Tr2$Y@@2 $o@@2) _module.Tr2$Y@@2))
 :pattern ( (_module.Tr2.y _module.Tr2$W@@2 _module.Tr2$Y@@2 $o@@2))
))))
(assert (forall ((v T@U) (h T@U) ) (! ($IsAlloc intType v (TBitvector 0) h)
 :pattern ( ($IsAlloc intType v (TBitvector 0) h))
)))
(assert  (and (and (= (Ctor bv8Type) 7) (forall ((arg0@@5 (_ BitVec 8)) ) (! (= (U_2_bv8 (bv8_2_U arg0@@5)) arg0@@5)
 :pattern ( (bv8_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (! (= (bv8_2_U (U_2_bv8 x@@2)) x@@2)
 :pattern ( (U_2_bv8 x@@2))
))))
(assert (forall ((v@@0 T@U) (heap T@U) ) (! ($IsAlloc bv8Type v@@0 (TBitvector 8) heap)
 :pattern ( ($IsAlloc bv8Type v@@0 (TBitvector 8) heap))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 (TBitvector 0))
 :pattern ( ($Is intType v@@1 (TBitvector 0)))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is bv8Type v@@2 (TBitvector 8))
 :pattern ( ($Is bv8Type v@@2 (TBitvector 8)))
)))
(assert (forall ((_System.array$arg T@U) (|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg) $h@@1) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg) $h@@1))
)))
(assert (forall ((_module.ClassA$Q T@U) (|c#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass._module.ClassA _module.ClassA$Q) $h@@2) ($IsAlloc refType |c#0@@0| (Tclass._module.ClassA? _module.ClassA$Q) $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.ClassA _module.ClassA$Q) $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.ClassA? _module.ClassA$Q) $h@@2))
)))
(assert (forall ((_System.array$arg@@0 T@U) ($o@@3 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@3 (Tclass._System.array? _System.array$arg@@0) $h@@3)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 (Tclass._System.array? _System.array$arg@@0) $h@@3))
)))
(assert (forall ((_module.ClassA$Q@@0 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@4 (Tclass._module.ClassA? _module.ClassA$Q@@0) $h@@4)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 (Tclass._module.ClassA? _module.ClassA$Q@@0) $h@@4))
)))
(assert (forall ((_module.ClassA$Q@@1 T@U) ) (implements$_module.Tr2 (Tclass._module.ClassA? _module.ClassA$Q@@1) _module.ClassA$Q@@1 (Tclass._System.array (TBitvector 8)))))
(assert (forall ((h@@0 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@0 k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@0 o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h@@0 k))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@3)) x@@3)
 :pattern ( ($Unbox T x@@3))
)))
(assert (forall ((_module.ClassA$Q@@2 T@U) ($o@@5 T@U) ) (!  (=> ($Is refType $o@@5 (Tclass._module.ClassA? _module.ClassA$Q@@2)) ($Is refType $o@@5 (Tclass._module.Tr2? _module.ClassA$Q@@2 (Tclass._System.array (TBitvector 8)))))
 :pattern ( ($Is refType $o@@5 (Tclass._module.ClassA? _module.ClassA$Q@@2)))
)))
(assert (forall ((_module.ClassA$Q@@3 T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._module.ClassA? _module.ClassA$Q@@3)) ($IsBox bx (Tclass._module.Tr2? _module.ClassA$Q@@3 (Tclass._System.array (TBitvector 8)))))
 :pattern ( ($IsBox bx (Tclass._module.ClassA? _module.ClassA$Q@@3)))
)))
(assert (forall ((_module.Tr2$W@@3 T@U) (_module.Tr2$Y@@3 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._module.Tr2 _module.Tr2$W@@3 _module.Tr2$Y@@3))  (and ($Is refType |c#0@@1| (Tclass._module.Tr2? _module.Tr2$W@@3 _module.Tr2$Y@@3)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Tr2 _module.Tr2$W@@3 _module.Tr2$Y@@3)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Tr2? _module.Tr2$W@@3 _module.Tr2$Y@@3)))
)))
(assert (forall ((_System.array$arg@@1 T@U) (|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| (Tclass._System.array _System.array$arg@@1))  (and ($Is refType |c#0@@2| (Tclass._System.array? _System.array$arg@@1)) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| (Tclass._System.array _System.array$arg@@1)))
 :pattern ( ($Is refType |c#0@@2| (Tclass._System.array? _System.array$arg@@1)))
)))
(assert (forall ((_module.ClassA$Q@@4 T@U) (|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| (Tclass._module.ClassA _module.ClassA$Q@@4))  (and ($Is refType |c#0@@3| (Tclass._module.ClassA? _module.ClassA$Q@@4)) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| (Tclass._module.ClassA _module.ClassA$Q@@4)))
 :pattern ( ($Is refType |c#0@@3| (Tclass._module.ClassA? _module.ClassA$Q@@4)))
)))
(assert (forall ((v@@3 T@U) (t T@U) (h@@1 T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v@@3) t h@@1) ($IsAlloc T@@0 v@@3 t h@@1))
 :pattern ( ($IsAllocBox ($Box T@@0 v@@3) t h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@2 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@2) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@2 k@@0) ($IsAllocBox bx@@0 t@@0 h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@1 T@U) (v@@4 T@U) (t@@1 T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@3 k@@1) (=> ($IsAlloc T@@1 v@@4 t@@1 h@@3) ($IsAlloc T@@1 v@@4 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@3 k@@1) ($IsAlloc T@@1 v@@4 t@@1 h@@3))
)))
(assert (forall ((_System.array$arg@@2 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@2)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@2)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((_System.array$arg@@3 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@3)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@3)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@3))
)))
(assert (forall ((_module.ClassA$Q@@5 T@U) ) (!  (and (= (Tag (Tclass._module.ClassA _module.ClassA$Q@@5)) Tagclass._module.ClassA) (= (TagFamily (Tclass._module.ClassA _module.ClassA$Q@@5)) tytagFamily$ClassA))
 :pattern ( (Tclass._module.ClassA _module.ClassA$Q@@5))
)))
(assert (forall ((_module.ClassA$Q@@6 T@U) ) (!  (and (= (Tag (Tclass._module.ClassA? _module.ClassA$Q@@6)) Tagclass._module.ClassA?) (= (TagFamily (Tclass._module.ClassA? _module.ClassA$Q@@6)) tytagFamily$ClassA))
 :pattern ( (Tclass._module.ClassA? _module.ClassA$Q@@6))
)))
(assert (forall ((_module.Tr2$W@@4 T@U) (_module.Tr2$Y@@4 T@U) (|c#0@@4| T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType |c#0@@4| (Tclass._module.Tr2 _module.Tr2$W@@4 _module.Tr2$Y@@4) $h@@5) ($IsAlloc refType |c#0@@4| (Tclass._module.Tr2? _module.Tr2$W@@4 _module.Tr2$Y@@4) $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@4| (Tclass._module.Tr2 _module.Tr2$W@@4 _module.Tr2$Y@@4) $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@4| (Tclass._module.Tr2? _module.Tr2$W@@4 _module.Tr2$Y@@4) $h@@5))
)))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@6 T@U) ) (! (= ($Is refType $o@@6 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@6 null) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@4))))
 :pattern ( ($Is refType $o@@6 (Tclass._System.array? _System.array$arg@@4)))
)))
(assert (forall ((_module.ClassA$Q@@7 T@U) ($o@@7 T@U) ) (! (= ($Is refType $o@@7 (Tclass._module.ClassA? _module.ClassA$Q@@7))  (or (= $o@@7 null) (= (dtype $o@@7) (Tclass._module.ClassA? _module.ClassA$Q@@7))))
 :pattern ( ($Is refType $o@@7 (Tclass._module.ClassA? _module.ClassA$Q@@7)))
)))
(assert (forall ((_module.Tr2$W@@5 T@U) (_module.Tr2$Y@@5 T@U) ($o@@8 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@8 (Tclass._module.Tr2? _module.Tr2$W@@5 _module.Tr2$Y@@5) $h@@6)  (or (= $o@@8 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@8) alloc)))))
 :pattern ( ($IsAlloc refType $o@@8 (Tclass._module.Tr2? _module.Tr2$W@@5 _module.Tr2$Y@@5) $h@@6))
)))
(assert (forall ((_module.ClassA$Q@@8 T@U) (bx@@1 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsAllocBox bx@@1 (Tclass._module.ClassA? _module.ClassA$Q@@8) $h@@7) ($IsGoodHeap $h@@7)) ($IsAllocBox bx@@1 (Tclass._module.Tr2? _module.ClassA$Q@@8 (Tclass._System.array (TBitvector 8))) $h@@7))
 :pattern ( ($IsAllocBox bx@@1 (Tclass._module.ClassA? _module.ClassA$Q@@8) $h@@7))
)))
(assert (forall ((_module.ClassA$Q@@9 T@U) ($o@@9 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@9 (Tclass._module.ClassA? _module.ClassA$Q@@9) $heap) ($IsAlloc refType $o@@9 (Tclass._module.Tr2? _module.ClassA$Q@@9 (Tclass._System.array (TBitvector 8))) $heap))
 :pattern ( ($IsAlloc refType $o@@9 (Tclass._module.ClassA? _module.ClassA$Q@@9) $heap))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((v@@5 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@5) t@@2) ($Is T@@2 v@@5 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@5) t@@2))
)))
(assert (forall ((_module.Tr2$W@@6 T@U) (_module.Tr2$Y@@6 T@U) ) (! (= (Tclass._module.Tr2?_0 (Tclass._module.Tr2? _module.Tr2$W@@6 _module.Tr2$Y@@6)) _module.Tr2$W@@6)
 :pattern ( (Tclass._module.Tr2? _module.Tr2$W@@6 _module.Tr2$Y@@6))
)))
(assert (forall ((_module.Tr2$W@@7 T@U) (_module.Tr2$Y@@7 T@U) ) (! (= (Tclass._module.Tr2?_1 (Tclass._module.Tr2? _module.Tr2$W@@7 _module.Tr2$Y@@7)) _module.Tr2$Y@@7)
 :pattern ( (Tclass._module.Tr2? _module.Tr2$W@@7 _module.Tr2$Y@@7))
)))
(assert (forall ((_module.Tr2$W@@8 T@U) (_module.Tr2$Y@@8 T@U) ) (! (= (Tclass._module.Tr2_0 (Tclass._module.Tr2 _module.Tr2$W@@8 _module.Tr2$Y@@8)) _module.Tr2$W@@8)
 :pattern ( (Tclass._module.Tr2 _module.Tr2$W@@8 _module.Tr2$Y@@8))
)))
(assert (forall ((_module.Tr2$W@@9 T@U) (_module.Tr2$Y@@9 T@U) ) (! (= (Tclass._module.Tr2_1 (Tclass._module.Tr2 _module.Tr2$W@@9 _module.Tr2$Y@@9)) _module.Tr2$Y@@9)
 :pattern ( (Tclass._module.Tr2 _module.Tr2$W@@9 _module.Tr2$Y@@9))
)))
(assert (forall ((_module.Tr2$W@@10 T@U) (_module.Tr2$Y@@10 T@U) ($o@@10 T@U) ) (! (= ($Is refType $o@@10 (Tclass._module.Tr2? _module.Tr2$W@@10 _module.Tr2$Y@@10))  (or (= $o@@10 null) (implements$_module.Tr2 (dtype $o@@10) _module.Tr2$W@@10 _module.Tr2$Y@@10)))
 :pattern ( ($Is refType $o@@10 (Tclass._module.Tr2? _module.Tr2$W@@10 _module.Tr2$Y@@10)))
)))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w)
 :pattern ( (TBitvector w))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@5)) _System.array$arg@@5)
 :pattern ( (Tclass._System.array? _System.array$arg@@5))
)))
(assert (forall ((_System.array$arg@@6 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@6)) _System.array$arg@@6)
 :pattern ( (Tclass._System.array _System.array$arg@@6))
)))
(assert (forall ((_module.ClassA$Q@@10 T@U) ) (! (= (Tclass._module.ClassA_0 (Tclass._module.ClassA _module.ClassA$Q@@10)) _module.ClassA$Q@@10)
 :pattern ( (Tclass._module.ClassA _module.ClassA$Q@@10))
)))
(assert (forall ((_module.ClassA$Q@@11 T@U) ) (! (= (Tclass._module.ClassA?_0 (Tclass._module.ClassA? _module.ClassA$Q@@11)) _module.ClassA$Q@@11)
 :pattern ( (Tclass._module.ClassA? _module.ClassA$Q@@11))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((_module.Tr2$W@@11 T@U) (_module.Tr2$Y@@11 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._module.Tr2? _module.Tr2$W@@11 _module.Tr2$Y@@11)) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) (Tclass._module.Tr2? _module.Tr2$W@@11 _module.Tr2$Y@@11))))
 :pattern ( ($IsBox bx@@2 (Tclass._module.Tr2? _module.Tr2$W@@11 _module.Tr2$Y@@11)))
)))
(assert (forall ((_module.Tr2$W@@12 T@U) (_module.Tr2$Y@@12 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._module.Tr2 _module.Tr2$W@@12 _module.Tr2$Y@@12)) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) (Tclass._module.Tr2 _module.Tr2$W@@12 _module.Tr2$Y@@12))))
 :pattern ( ($IsBox bx@@3 (Tclass._module.Tr2 _module.Tr2$W@@12 _module.Tr2$Y@@12)))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@11 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@11 $f))  (=> (and (or (not (= $o@@11 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@11) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@11 $f))
)))
(assert (forall ((_module.Tr2$W@@13 T@U) (_module.Tr2$Y@@13 T@U) ) (!  (and (= (Tag (Tclass._module.Tr2? _module.Tr2$W@@13 _module.Tr2$Y@@13)) Tagclass._module.Tr2?) (= (TagFamily (Tclass._module.Tr2? _module.Tr2$W@@13 _module.Tr2$Y@@13)) tytagFamily$Tr2))
 :pattern ( (Tclass._module.Tr2? _module.Tr2$W@@13 _module.Tr2$Y@@13))
)))
(assert (forall ((_module.Tr2$W@@14 T@U) (_module.Tr2$Y@@14 T@U) ) (!  (and (= (Tag (Tclass._module.Tr2 _module.Tr2$W@@14 _module.Tr2$Y@@14)) Tagclass._module.Tr2) (= (TagFamily (Tclass._module.Tr2 _module.Tr2$W@@14 _module.Tr2$Y@@14)) tytagFamily$Tr2))
 :pattern ( (Tclass._module.Tr2 _module.Tr2$W@@14 _module.Tr2$Y@@14))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (TBitvector 0)) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) (TBitvector 0))))
 :pattern ( ($IsBox bx@@4 (TBitvector 0)))
)))
(assert (forall ((_System.array$arg@@7 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._System.array? _System.array$arg@@7)) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) (Tclass._System.array? _System.array$arg@@7))))
 :pattern ( ($IsBox bx@@5 (Tclass._System.array? _System.array$arg@@7)))
)))
(assert (forall ((_System.array$arg@@8 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._System.array _System.array$arg@@8)) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) (Tclass._System.array _System.array$arg@@8))))
 :pattern ( ($IsBox bx@@6 (Tclass._System.array _System.array$arg@@8)))
)))
(assert (forall ((_module.ClassA$Q@@12 T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._module.ClassA _module.ClassA$Q@@12)) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) (Tclass._module.ClassA _module.ClassA$Q@@12))))
 :pattern ( ($IsBox bx@@7 (Tclass._module.ClassA _module.ClassA$Q@@12)))
)))
(assert (forall ((_module.ClassA$Q@@13 T@U) (bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (Tclass._module.ClassA? _module.ClassA$Q@@13)) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) (Tclass._module.ClassA? _module.ClassA$Q@@13))))
 :pattern ( ($IsBox bx@@8 (Tclass._module.ClassA? _module.ClassA$Q@@13)))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (TBitvector 8)) (and (= ($Box bv8Type ($Unbox bv8Type bx@@9)) bx@@9) ($Is bv8Type ($Unbox bv8Type bx@@9) (TBitvector 8))))
 :pattern ( ($IsBox bx@@9 (TBitvector 8)))
)))
(assert (forall ((h@@4 T@U) (r T@U) (f T@U) (x@@5 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@5))) ($HeapSucc h@@4 (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@5))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@5)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |q#0| () T@U)
(declare-fun _module.ClassA$Q@@14 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= (ControlFlow 0 2) (- 0 1))) true)))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($IsBox |q#0| _module.ClassA$Q@@14) ($IsAllocBox |q#0| _module.ClassA$Q@@14 $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 3) 2))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
