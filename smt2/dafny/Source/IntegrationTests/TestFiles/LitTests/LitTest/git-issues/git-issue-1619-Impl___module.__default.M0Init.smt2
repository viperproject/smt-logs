(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 () T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (T@U Bool T@U) Bool)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@U T@U) Bool)
(declare-fun $generated@@27 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@T T@T) T@T)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@34 (T@T) T@T)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@58 (T@U T@U) Bool)
(declare-fun $generated@@59 (T@U Int) T@U)
(declare-fun $generated@@65 (T@T T@U) T@U)
(declare-fun $generated@@68 (T@U T@U T@U) Bool)
(declare-fun $generated@@69 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@88 (T@T T@U T@U) Bool)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 (T@U) T@U)
(declare-fun $generated@@99 (T@U) T@U)
(declare-fun $generated@@101 (T@U) T@U)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@17 $generated@@18) 0))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@24 T@U) ($generated@@25 T@U) ) (!  (=> (or ($generated@@21 $generated@@24 $generated@@25) (and (< 0 $generated@@19) ($generated@@22 $generated@@25 $generated@@24))) (= ($generated@@20 $generated@@24 true $generated@@25) ($generated@@6 ($generated@@23 $generated@@2 ($generated@@5 true)))))
 :pattern ( ($generated@@20 $generated@@24 true $generated@@25))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@27 $generated@@36 $generated@@37 ($generated@@33 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@38) $generated@@40) $generated@@38)
 :weight 0
)) (forall (($generated@@41 T@T) ($generated@@42 T@T) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (!  (or (= $generated@@45 $generated@@46) (= ($generated@@27 $generated@@41 $generated@@42 ($generated@@33 $generated@@41 $generated@@42 $generated@@44 $generated@@45 $generated@@43) $generated@@46) ($generated@@27 $generated@@41 $generated@@42 $generated@@44 $generated@@46)))
 :weight 0
))) (= ($generated@@1 $generated@@28) 3)) (= ($generated@@1 $generated@@29) 4)) (= ($generated@@1 $generated@@30) 5)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (= ($generated@@1 ($generated@@31 $generated@@47 $generated@@48)) 6))) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (! (= ($generated@@34 ($generated@@31 $generated@@49 $generated@@50)) $generated@@49)
 :pattern ( ($generated@@31 $generated@@49 $generated@@50))
))) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (! (= ($generated@@35 ($generated@@31 $generated@@51 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@31 $generated@@51 $generated@@52))
))))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> ($generated@@26 $generated@@53 $generated@@54) (forall (($generated@@55 T@U) ) (!  (=> ($generated@@6 ($generated@@32 $generated@@2 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@53 $generated@@55) $generated@@0))) ($generated@@6 ($generated@@32 $generated@@2 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated@@0))))
 :pattern ( ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@54 $generated@@55) $generated@@0))
)))
 :pattern ( ($generated@@26 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@23 $generated@@57 $generated@@56) $generated@@56)
 :pattern ( ($generated@@23 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@58 $generated@@60 $generated@@61)  (and (= ($generated@@17 $generated@@60) ($generated@@17 $generated@@61)) (forall (($generated@@62 Int) ) (!  (=> (and (<= 0 $generated@@62) (< $generated@@62 ($generated@@17 $generated@@60))) (= ($generated@@59 $generated@@60 $generated@@62) ($generated@@59 $generated@@61 $generated@@62)))
 :pattern ( ($generated@@59 $generated@@60 $generated@@62))
 :pattern ( ($generated@@59 $generated@@61 $generated@@62))
))))
 :pattern ( ($generated@@58 $generated@@60 $generated@@61))
)))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (or ($generated@@21 $generated@@63 ($generated@@23 $generated@@29 $generated@@64)) (and (< 0 $generated@@19) ($generated@@22 $generated@@64 $generated@@63))) (= ($generated@@20 $generated@@63 true ($generated@@23 $generated@@29 $generated@@64)) ($generated@@6 ($generated@@23 $generated@@2 ($generated@@5 true)))))
 :weight 3
 :pattern ( ($generated@@20 $generated@@63 true ($generated@@23 $generated@@29 $generated@@64)))
))))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@65 $generated@@67 ($generated@@32 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@32 $generated@@67 $generated@@66))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@68 ($generated@@65 $generated@@73 $generated@@70) $generated@@71 $generated@@72) ($generated@@69 $generated@@73 $generated@@70 $generated@@71 $generated@@72))
 :pattern ( ($generated@@68 ($generated@@65 $generated@@73 $generated@@70) $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> ($generated@@26 $generated@@74 $generated@@75) (=> ($generated@@68 $generated@@76 $generated@@77 $generated@@74) ($generated@@68 $generated@@76 $generated@@77 $generated@@75)))
 :pattern ( ($generated@@26 $generated@@74 $generated@@75) ($generated@@68 $generated@@76 $generated@@77 $generated@@74))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (!  (=> ($generated@@26 $generated@@78 $generated@@79) (=> ($generated@@69 $generated@@82 $generated@@80 $generated@@81 $generated@@78) ($generated@@69 $generated@@82 $generated@@80 $generated@@81 $generated@@79)))
 :pattern ( ($generated@@26 $generated@@78 $generated@@79) ($generated@@69 $generated@@82 $generated@@80 $generated@@81 $generated@@78))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (!  (=> ($generated@@58 $generated@@83 $generated@@84) (= $generated@@83 $generated@@84))
 :pattern ( ($generated@@58 $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (=> (or (not (= $generated@@85 $generated@@87)) (not true)) (=> (and ($generated@@26 $generated@@85 $generated@@86) ($generated@@26 $generated@@86 $generated@@87)) ($generated@@26 $generated@@85 $generated@@87)))
 :pattern ( ($generated@@26 $generated@@85 $generated@@86) ($generated@@26 $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@T) ) (! (= ($generated@@22 ($generated@@65 $generated@@91 $generated@@89) $generated@@90) ($generated@@88 $generated@@91 $generated@@89 $generated@@90))
 :pattern ( ($generated@@22 ($generated@@65 $generated@@91 $generated@@89) $generated@@90))
)))
(assert (forall (($generated@@92 T@U) ) (! (<= 0 ($generated@@17 $generated@@92))
 :pattern ( ($generated@@17 $generated@@92))
)))
(assert (= ($generated@@1 $generated@@93) 7))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@69 $generated@@93 $generated@@95 ($generated@@94 $generated@@96) $generated@@97) (forall (($generated@@98 Int) ) (!  (=> (and (<= 0 $generated@@98) (< $generated@@98 ($generated@@17 $generated@@95))) ($generated@@68 ($generated@@59 $generated@@95 $generated@@98) $generated@@96 $generated@@97))
 :pattern ( ($generated@@59 $generated@@95 $generated@@98))
)))
 :pattern ( ($generated@@69 $generated@@93 $generated@@95 ($generated@@94 $generated@@96) $generated@@97))
)))
(assert (forall (($generated@@100 T@U) ) (! (= ($generated@@99 ($generated@@94 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@94 $generated@@100))
)))
(assert (forall (($generated@@102 T@U) ) (! (= ($generated@@101 ($generated@@94 $generated@@102)) $generated)
 :pattern ( ($generated@@94 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@T) ) (! (= ($generated@@32 $generated@@104 ($generated@@65 $generated@@104 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@65 $generated@@104 $generated@@103))
)))
(assert  (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@105 $generated@@108 $generated@@109 $generated@@110 ($generated@@107 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@113 $generated@@114) $generated@@111)
 :weight 0
)) (and (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@105 $generated@@115 $generated@@116 $generated@@117 ($generated@@107 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@105 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@105 $generated@@124 $generated@@125 $generated@@126 ($generated@@107 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@131 $generated@@132) ($generated@@105 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@131 $generated@@132)))
 :weight 0
)))))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 Bool) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@6 ($generated@@105 $generated@@30 $generated@@28 $generated@@2 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))  (=> (and (or (not (= $generated@@137 $generated@@133)) (not true)) ($generated@@6 ($generated@@32 $generated@@2 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@134 $generated@@137) $generated@@135)))) $generated@@136))
 :pattern ( ($generated@@105 $generated@@30 $generated@@28 $generated@@2 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> ($generated@@22 $generated@@139 ($generated@@94 $generated@@140)) (and (= ($generated@@65 $generated@@93 ($generated@@32 $generated@@93 $generated@@139)) $generated@@139) ($generated@@88 $generated@@93 ($generated@@32 $generated@@93 $generated@@139) ($generated@@94 $generated@@140))))
 :pattern ( ($generated@@22 $generated@@139 ($generated@@94 $generated@@140)))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@T) ) (! (= ($generated@@65 $generated@@142 ($generated@@23 $generated@@142 $generated@@141)) ($generated@@23 $generated@@29 ($generated@@65 $generated@@142 $generated@@141)))
 :pattern ( ($generated@@65 $generated@@142 ($generated@@23 $generated@@142 $generated@@141)))
)))
(assert (forall (($generated@@143 T@U) ) (!  (=> (= ($generated@@17 $generated@@143) 0) (= $generated@@143 $generated@@18))
 :pattern ( ($generated@@17 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@88 $generated@@93 $generated@@144 ($generated@@94 $generated@@145)) (forall (($generated@@146 Int) ) (!  (=> (and (<= 0 $generated@@146) (< $generated@@146 ($generated@@17 $generated@@144))) ($generated@@22 ($generated@@59 $generated@@144 $generated@@146) $generated@@145))
 :pattern ( ($generated@@59 $generated@@144 $generated@@146))
)))
 :pattern ( ($generated@@88 $generated@@93 $generated@@144 ($generated@@94 $generated@@145)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Bool)
(declare-fun $generated@@158 () Bool)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () Bool)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () Bool)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () Bool)
(declare-fun $generated@@168 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let (($generated@@169  (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) true))))
(let (($generated@@170  (=> (and ($generated@@58 $generated@@147 $generated@@18) (= (ControlFlow 0 6) 2)) $generated@@169)))
(let (($generated@@171  (=> (not ($generated@@58 $generated@@147 $generated@@18)) (=> (and ($generated@@22 $generated@@148 $generated@@149) ($generated@@68 $generated@@148 $generated@@149 $generated@@150)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (not ($generated@@58 $generated@@147 $generated@@18))) (=> (not ($generated@@58 $generated@@147 $generated@@18)) (=> (and ($generated@@151 $generated@@152) ($generated@@153 $generated@@152)) (=> (and (and (and ($generated@@22 $generated@@154 $generated@@155) ($generated@@68 $generated@@154 $generated@@155 $generated@@152)) (forall (($generated@@172 T@U) ) (!  (=> (and (or (not (= $generated@@172 $generated@@156)) (not true)) ($generated@@6 ($generated@@32 $generated@@2 ($generated@@27 $generated@@28 $generated@@29 ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@150 $generated@@172) $generated@@0)))) (= ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@152 $generated@@172) ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@150 $generated@@172)))
 :pattern ( ($generated@@27 $generated@@30 ($generated@@31 $generated@@28 $generated@@29) $generated@@152 $generated@@172))
))) (and ($generated@@26 $generated@@150 $generated@@152) (= (ControlFlow 0 4) 2))) $generated@@169))))))))
(let (($generated@@173  (and (=> (= (ControlFlow 0 7) (- 0 8)) (exists (($generated@@174 T@U) )  (and (and ($generated@@22 $generated@@174 $generated@@155) ($generated@@68 $generated@@174 $generated@@155 $generated@@150)) (=> $generated@@157 ($generated@@20 $generated@@155 $generated@@158 $generated@@174))))) (=> (exists (($generated@@175 T@U) )  (and (and ($generated@@22 $generated@@175 $generated@@155) ($generated@@68 $generated@@175 $generated@@155 $generated@@150)) (=> $generated@@157 ($generated@@20 $generated@@155 $generated@@158 $generated@@175)))) (=> (and (=> true (and ($generated@@22 $generated@@159 $generated@@155) ($generated@@68 $generated@@159 $generated@@155 $generated@@150))) (=> $generated@@157 ($generated@@20 $generated@@155 $generated@@158 $generated@@159))) (and (=> (= (ControlFlow 0 7) 4) $generated@@171) (=> (= (ControlFlow 0 7) 6) $generated@@170)))))))
(let (($generated@@176  (=> (and (=> $generated@@157 ($generated@@21 $generated@@155 $generated@@160)) (= (ControlFlow 0 10) 7)) $generated@@173)))
(let (($generated@@177  (=> (and (not $generated@@157) (= (ControlFlow 0 12) 10)) $generated@@176)))
(let (($generated@@178  (=> (and (and $generated@@157 ($generated@@68 $generated@@160 $generated@@155 $generated@@150)) (and ($generated@@21 $generated@@155 $generated@@160) (= (ControlFlow 0 11) 10))) $generated@@176)))
(let (($generated@@179  (=> (and ($generated@@22 $generated@@160 $generated@@155) ($generated@@68 $generated@@160 $generated@@155 $generated@@150)) (and (=> (= (ControlFlow 0 13) 11) $generated@@178) (=> (= (ControlFlow 0 13) 12) $generated@@177)))))
(let (($generated@@180  (=> (and (not (and ($generated@@22 $generated@@160 $generated@@155) ($generated@@68 $generated@@160 $generated@@155 $generated@@150))) (= (ControlFlow 0 9) 7)) $generated@@173)))
(let (($generated@@181  (=> (and (forall (($generated@@182 T@U) ) (!  (=> ($generated@@22 $generated@@182 $generated@@155) ($generated@@21 $generated@@155 $generated@@182))
 :pattern ( ($generated@@20 $generated@@155 $generated@@158 $generated@@182))
)) (= $generated@@157 (exists (($generated@@183 T@U) ) (!  (and (and ($generated@@22 $generated@@183 $generated@@155) ($generated@@68 $generated@@183 $generated@@155 $generated@@150)) ($generated@@20 $generated@@155 $generated@@158 $generated@@183))
 :pattern ( ($generated@@20 $generated@@155 $generated@@158 $generated@@183))
)))) (and (=> (= (ControlFlow 0 14) 13) $generated@@179) (=> (= (ControlFlow 0 14) 9) $generated@@180)))))
(let (($generated@@184  (=> (and (not (and ($generated@@22 $generated@@161 $generated@@155) ($generated@@68 $generated@@161 $generated@@155 $generated@@150))) (= (ControlFlow 0 16) 14)) $generated@@181)))
(let (($generated@@185  (=> (and (and (and ($generated@@22 $generated@@161 $generated@@155) ($generated@@68 $generated@@161 $generated@@155 $generated@@150)) ($generated@@68 $generated@@161 $generated@@155 $generated@@150)) (and ($generated@@21 $generated@@155 $generated@@161) (= (ControlFlow 0 15) 14))) $generated@@181)))
(let (($generated@@186  (=> (= $generated@@162 ($generated@@106 $generated@@156 $generated@@150 $generated@@0 false)) (and (=> (= (ControlFlow 0 17) 15) $generated@@185) (=> (= (ControlFlow 0 17) 16) $generated@@184)))))
(let (($generated@@187  (=> (and ($generated@@151 $generated@@150) ($generated@@153 $generated@@150)) (=> (and (and (and (and ($generated@@88 $generated@@93 $generated@@147 ($generated@@94 $generated@@155)) ($generated@@69 $generated@@93 $generated@@147 ($generated@@94 $generated@@155) $generated@@150)) (=> $generated@@163 (and ($generated@@22 $generated@@164 $generated@@155) ($generated@@68 $generated@@164 $generated@@155 $generated@@150)))) (and (=> $generated@@165 (and ($generated@@22 $generated@@166 $generated@@155) ($generated@@68 $generated@@166 $generated@@155 $generated@@150))) true)) (and (and (=> $generated@@167 (and ($generated@@22 $generated@@168 $generated@@155) ($generated@@68 $generated@@168 $generated@@155 $generated@@150))) true) (and (= 1 $generated@@19) (= (ControlFlow 0 18) 17)))) $generated@@186))))
$generated@@187)))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 7) (- 8))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
