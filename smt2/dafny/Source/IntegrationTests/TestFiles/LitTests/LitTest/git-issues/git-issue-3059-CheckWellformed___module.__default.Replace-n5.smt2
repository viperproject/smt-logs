(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@30 (T@U T@U) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@35 (T@U T@U Int) T@U)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@U T@U) Bool)
(declare-fun $generated@@59 (T@U) Int)
(declare-fun $generated@@70 () T@U)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@T T@T) T@T)
(declare-fun $generated@@86 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T) T@T)
(declare-fun $generated@@89 (T@T) T@T)
(declare-fun $generated@@140 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@26) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@29 T@U) ) (!  (=> (or ($generated@@24 $generated@@29) (and (< 1 $generated@@22) ($generated@@25 $generated@@26 $generated@@29 $generated@@27))) ($generated@@25 $generated@@26 ($generated@@23 $generated@@29) ($generated@@28 $generated)))
 :pattern ( ($generated@@23 $generated@@29))
))))
(assert (forall (($generated@@33 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@33 $generated@@27)  (and ($generated@@25 $generated@@26 $generated@@33 ($generated@@28 $generated)) (forall (($generated@@34 Int) )  (=> (> ($generated@@30 $generated@@33 ($generated@@31 $generated@@7 ($generated@@11 $generated@@34))) 0) (= ($generated@@30 $generated@@33 ($generated@@31 $generated@@7 ($generated@@11 $generated@@34))) ($generated@@32 2))))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@33 $generated@@27))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@36 T@U) ) (!  (=> (or ($generated@@24 $generated@@36) (and (< 1 $generated@@22) ($generated@@25 $generated@@26 $generated@@36 $generated@@27))) (= ($generated@@23 $generated@@36) (let (($generated@@37 ($generated@@35 $generated@@36 ($generated@@31 $generated@@7 ($generated@@11 ($generated@@32 0))) ($generated@@32 1))))
$generated@@37)))
 :pattern ( ($generated@@23 $generated@@36))
))))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 Int) ($generated@@41 T@U) ) (!  (=> (<= 0 $generated@@40) (and (=> (= $generated@@39 $generated@@41) (= ($generated@@30 ($generated@@35 $generated@@38 $generated@@39 $generated@@40) $generated@@41) $generated@@40)) (=> (or (not (= $generated@@39 $generated@@41)) (not true)) (= ($generated@@30 ($generated@@35 $generated@@38 $generated@@39 $generated@@40) $generated@@41) ($generated@@30 $generated@@38 $generated@@41)))))
 :pattern ( ($generated@@30 ($generated@@35 $generated@@38 $generated@@39 $generated@@40) $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@43 ($generated@@28 $generated@@44)) ($generated@@42 $generated@@43))
 :pattern ( ($generated@@25 $generated@@26 $generated@@43 ($generated@@28 $generated@@44)))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@46 T@U) ) (!  (=> (or ($generated@@24 ($generated@@45 $generated@@26 $generated@@46)) (and (< 1 $generated@@22) ($generated@@25 $generated@@26 $generated@@46 $generated@@27))) (= ($generated@@23 ($generated@@45 $generated@@26 $generated@@46)) (let (($generated@@47 ($generated@@35 ($generated@@45 $generated@@26 $generated@@46) ($generated@@31 $generated@@7 ($generated@@11 ($generated@@32 0))) ($generated@@32 1))))
$generated@@47)))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@45 $generated@@26 $generated@@46)))
))))
(assert (forall (($generated@@48 Int) ) (! (= ($generated@@32 $generated@@48) $generated@@48)
 :pattern ( ($generated@@32 $generated@@48))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@45 $generated@@50 $generated@@49) $generated@@49)
 :pattern ( ($generated@@45 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@31 $generated@@53 ($generated@@51 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@51 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@54 $generated@@55 $generated@@27) (and (= ($generated@@31 $generated@@26 ($generated@@51 $generated@@26 $generated@@55)) $generated@@55) ($generated@@25 $generated@@26 ($generated@@51 $generated@@26 $generated@@55) $generated@@27)))
 :pattern ( ($generated@@54 $generated@@55 $generated@@27))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@56 ($generated@@28 $generated@@57)) (forall (($generated@@58 T@U) ) (!  (=> (< 0 ($generated@@30 $generated@@56 $generated@@58)) ($generated@@54 $generated@@58 $generated@@57))
 :pattern ( ($generated@@30 $generated@@56 $generated@@58))
)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@56 ($generated@@28 $generated@@57)))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 Int) ) (!  (=> (<= 0 $generated@@62) (= ($generated@@59 ($generated@@35 $generated@@60 $generated@@61 $generated@@62)) (+ (- ($generated@@59 $generated@@60) ($generated@@30 $generated@@60 $generated@@61)) $generated@@62)))
 :pattern ( ($generated@@59 ($generated@@35 $generated@@60 $generated@@61 $generated@@62)))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@54 $generated@@63 $generated) (and (= ($generated@@31 $generated@@7 ($generated@@51 $generated@@7 $generated@@63)) $generated@@63) ($generated@@25 $generated@@7 ($generated@@51 $generated@@7 $generated@@63) $generated)))
 :pattern ( ($generated@@54 $generated@@63 $generated))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@54 ($generated@@31 $generated@@66 $generated@@64) $generated@@65) ($generated@@25 $generated@@66 $generated@@64 $generated@@65))
 :pattern ( ($generated@@54 ($generated@@31 $generated@@66 $generated@@64) $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@42 $generated@@67) (forall (($generated@@68 T@U) ) (!  (and (<= 0 ($generated@@30 $generated@@67 $generated@@68)) (<= ($generated@@30 $generated@@67 $generated@@68) ($generated@@59 $generated@@67)))
 :pattern ( ($generated@@30 $generated@@67 $generated@@68))
)))
 :pattern ( ($generated@@42 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (! (<= 0 ($generated@@59 $generated@@69))
 :pattern ( ($generated@@59 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@30 $generated@@70 $generated@@71) 0)
 :pattern ( ($generated@@30 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@72 ($generated@@28 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@28 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@21 ($generated@@28 $generated@@74)) $generated@@1)
 :pattern ( ($generated@@28 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@T) ) (! (= ($generated@@51 $generated@@76 ($generated@@31 $generated@@76 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@31 $generated@@76 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ) (!  (and (= (= ($generated@@59 $generated@@77) 0) (= $generated@@77 $generated@@70)) (=> (or (not (= ($generated@@59 $generated@@77) 0)) (not true)) (exists (($generated@@78 T@U) ) (! (< 0 ($generated@@30 $generated@@77 $generated@@78))
 :pattern ( ($generated@@30 $generated@@77 $generated@@78))
))))
 :pattern ( ($generated@@59 $generated@@77))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@79 $generated@@90 $generated@@91 $generated@@92 ($generated@@86 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@95 $generated@@96) $generated@@93)
 :weight 0
)) (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@102 $generated@@104) (= ($generated@@79 $generated@@97 $generated@@98 $generated@@99 ($generated@@86 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@79 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@112 $generated@@114) (= ($generated@@79 $generated@@106 $generated@@107 $generated@@108 ($generated@@86 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@79 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)))) (= ($generated@@5 $generated@@80) 4)) (= ($generated@@5 $generated@@81) 5)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@83 $generated@@115 $generated@@116 ($generated@@87 $generated@@115 $generated@@116 $generated@@118 $generated@@119 $generated@@117) $generated@@119) $generated@@117)
 :weight 0
))) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@124 $generated@@125) (= ($generated@@83 $generated@@120 $generated@@121 ($generated@@87 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@122) $generated@@125) ($generated@@83 $generated@@120 $generated@@121 $generated@@123 $generated@@125)))
 :weight 0
))) (= ($generated@@5 $generated@@84) 6)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (= ($generated@@5 ($generated@@85 $generated@@126 $generated@@127)) 7))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@88 ($generated@@85 $generated@@128 $generated@@129)) $generated@@128)
 :pattern ( ($generated@@85 $generated@@128 $generated@@129))
))) (forall (($generated@@130 T@T) ($generated@@131 T@T) ) (! (= ($generated@@89 ($generated@@85 $generated@@130 $generated@@131)) $generated@@131)
 :pattern ( ($generated@@85 $generated@@130 $generated@@131))
))))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 Bool) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@10 ($generated@@79 $generated@@80 $generated@@81 $generated@@6 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))  (=> (and (or (not (= $generated@@136 $generated@@132)) (not true)) ($generated@@10 ($generated@@51 $generated@@6 ($generated@@83 $generated@@81 $generated@@84 ($generated@@83 $generated@@80 ($generated@@85 $generated@@81 $generated@@84) $generated@@133 $generated@@136) $generated@@134)))) $generated@@135))
 :pattern ( ($generated@@79 $generated@@80 $generated@@81 $generated@@6 ($generated@@82 $generated@@132 $generated@@133 $generated@@134 $generated@@135) $generated@@136 $generated@@137))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> ($generated@@54 $generated@@138 ($generated@@28 $generated@@139)) (and (= ($generated@@31 $generated@@26 ($generated@@51 $generated@@26 $generated@@138)) $generated@@138) ($generated@@25 $generated@@26 ($generated@@51 $generated@@26 $generated@@138) ($generated@@28 $generated@@139))))
 :pattern ( ($generated@@54 $generated@@138 ($generated@@28 $generated@@139)))
)))
(assert (= ($generated@@21 $generated@@27) $generated@@3))
(assert (= ($generated@@140 $generated@@27) $generated@@4))
(assert (forall (($generated@@141 Int) ) (! (= ($generated@@31 $generated@@7 ($generated@@11 ($generated@@32 $generated@@141))) ($generated@@45 $generated@@84 ($generated@@31 $generated@@7 ($generated@@11 $generated@@141))))
 :pattern ( ($generated@@31 $generated@@7 ($generated@@11 ($generated@@32 $generated@@141))))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@T) ) (! (= ($generated@@31 $generated@@143 ($generated@@45 $generated@@143 $generated@@142)) ($generated@@45 $generated@@84 ($generated@@31 $generated@@143 $generated@@142)))
 :pattern ( ($generated@@31 $generated@@143 ($generated@@45 $generated@@143 $generated@@142)))
)))
(assert (forall (($generated@@144 T@U) ) (! ($generated@@25 $generated@@7 $generated@@144 $generated)
 :pattern ( ($generated@@25 $generated@@7 $generated@@144 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@153  (and (=> (= (ControlFlow 0 3) (- 0 4)) (<= 0 ($generated@@32 1))) (=> (<= 0 ($generated@@32 1)) (=> (and (and (= $generated@@145 ($generated@@35 $generated@@146 ($generated@@31 $generated@@7 ($generated@@11 ($generated@@32 0))) ($generated@@32 1))) ($generated@@25 $generated@@26 $generated@@145 ($generated@@28 $generated))) (and (= $generated@@147 $generated@@145) (= (ControlFlow 0 3) (- 0 2)))) (or (not (= ($generated@@30 $generated@@147 ($generated@@31 $generated@@7 ($generated@@11 ($generated@@32 0)))) 0)) (not true)))))))
(let (($generated@@154 true))
(let (($generated@@155  (=> (= $generated@@148 ($generated@@82 $generated@@149 $generated@@150 $generated@@2 false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@154) (=> (= (ControlFlow 0 5) 3) $generated@@153)))))
(let (($generated@@156  (=> (and (and (and ($generated@@151 $generated@@150) ($generated@@152 $generated@@150)) ($generated@@25 $generated@@26 $generated@@146 $generated@@27)) (and (= 1 $generated@@22) (= (ControlFlow 0 6) 5))) $generated@@155)))
$generated@@156)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
