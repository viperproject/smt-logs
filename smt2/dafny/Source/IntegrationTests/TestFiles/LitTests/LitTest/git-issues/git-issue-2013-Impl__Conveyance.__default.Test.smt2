(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass.Conveyance.Car () T@U)
(declare-fun Tagclass.Conveyance.Error () T@U)
(declare-fun Tagclass.Conveyance.Vehicle () T@U)
(declare-fun Tagclass.Conveyance.CovariantResult () T@U)
(declare-fun Tagclass.Conveyance.NonVariantResult () T@U)
(declare-fun Tagclass.Conveyance.Vehicle? () T@U)
(declare-fun Tagclass.Conveyance.Car? () T@U)
(declare-fun Tagclass.Conveyance.Error? () T@U)
(declare-fun Tagclass.Conveyance.FlatTireError? () T@U)
(declare-fun Tagclass.Conveyance.FlatTireError () T@U)
(declare-fun |##Conveyance.NonVariantResult.NVSuccess| () T@U)
(declare-fun |##Conveyance.NonVariantResult.NVFailure| () T@U)
(declare-fun |##Conveyance.CovariantResult.CVSuccess| () T@U)
(declare-fun |##Conveyance.CovariantResult.CVFailure| () T@U)
(declare-fun tytagFamily$Car () T@U)
(declare-fun tytagFamily$Error () T@U)
(declare-fun tytagFamily$Vehicle () T@U)
(declare-fun tytagFamily$CovariantResult () T@U)
(declare-fun tytagFamily$NonVariantResult () T@U)
(declare-fun tytagFamily$FlatTireError () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun implements$Conveyance.Vehicle (T@U) Bool)
(declare-fun Tclass.Conveyance.Car? () T@U)
(declare-fun implements$Conveyance.Error (T@U) Bool)
(declare-fun Tclass.Conveyance.FlatTireError? () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass.Conveyance.Vehicle? () T@U)
(declare-fun Tclass.Conveyance.Error? () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass.Conveyance.Vehicle () T@U)
(declare-fun Tclass.Conveyance.Car () T@U)
(declare-fun Tclass.Conveyance.Error () T@U)
(declare-fun Tclass.Conveyance.FlatTireError () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun Conveyance.NonVariantResult.NVSuccess_q (T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun Conveyance.NonVariantResult.NVFailure_q (T@U) Bool)
(declare-fun Conveyance.CovariantResult.CVSuccess_q (T@U) Bool)
(declare-fun Conveyance.CovariantResult.CVFailure_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#Conveyance.NonVariantResult.NVSuccess| (T@U) T@U)
(declare-fun |#Conveyance.NonVariantResult.NVFailure| (T@U) T@U)
(declare-fun |#Conveyance.CovariantResult.CVSuccess| (T@U) T@U)
(declare-fun |#Conveyance.CovariantResult.CVFailure| (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.Conveyance.NonVariantResult (T@U T@U) T@U)
(declare-fun Tclass.Conveyance.CovariantResult (T@U T@U) T@U)
(declare-fun Tclass.Conveyance.CovariantResult_0 (T@U) T@U)
(declare-fun Tclass.Conveyance.CovariantResult_1 (T@U) T@U)
(declare-fun Tclass.Conveyance.NonVariantResult_0 (T@U) T@U)
(declare-fun Tclass.Conveyance.NonVariantResult_1 (T@U) T@U)
(declare-fun Conveyance.NonVariantResult.value (T@U) T@U)
(declare-fun Conveyance.NonVariantResult.error (T@U) T@U)
(declare-fun Conveyance.CovariantResult.value (T@U) T@U)
(declare-fun Conveyance.CovariantResult.error (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass.Conveyance.Car Tagclass.Conveyance.Error Tagclass.Conveyance.Vehicle Tagclass.Conveyance.CovariantResult Tagclass.Conveyance.NonVariantResult Tagclass.Conveyance.Vehicle? Tagclass.Conveyance.Car? Tagclass.Conveyance.Error? Tagclass.Conveyance.FlatTireError? Tagclass.Conveyance.FlatTireError |##Conveyance.NonVariantResult.NVSuccess| |##Conveyance.NonVariantResult.NVFailure| |##Conveyance.CovariantResult.CVSuccess| |##Conveyance.CovariantResult.CVFailure| tytagFamily$Car tytagFamily$Error tytagFamily$Vehicle tytagFamily$CovariantResult tytagFamily$NonVariantResult tytagFamily$FlatTireError)
)
(assert (implements$Conveyance.Vehicle Tclass.Conveyance.Car?))
(assert (implements$Conveyance.Error Tclass.Conveyance.FlatTireError?))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass.Conveyance.Car?)  (or (= $o null) (= (dtype $o) Tclass.Conveyance.Car?)))
 :pattern ( ($Is refType $o Tclass.Conveyance.Car?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass.Conveyance.FlatTireError?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass.Conveyance.FlatTireError?)))
 :pattern ( ($Is refType $o@@0 Tclass.Conveyance.FlatTireError?))
)))
(assert (forall ((bx T@U) ($h T@U) ) (!  (=> (and ($IsAllocBox bx Tclass.Conveyance.Car? $h) ($IsGoodHeap $h)) ($IsAllocBox bx Tclass.Conveyance.Vehicle? $h))
 :pattern ( ($IsAllocBox bx Tclass.Conveyance.Car? $h))
)))
(assert (forall ((bx@@0 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass.Conveyance.FlatTireError? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx@@0 Tclass.Conveyance.Error? $h@@0))
 :pattern ( ($IsAllocBox bx@@0 Tclass.Conveyance.FlatTireError? $h@@0))
)))
(assert (forall ((|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass.Conveyance.Vehicle $h@@1) ($IsAlloc refType |c#0| Tclass.Conveyance.Vehicle? $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass.Conveyance.Vehicle $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass.Conveyance.Vehicle? $h@@1))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass.Conveyance.Car $h@@2) ($IsAlloc refType |c#0@@0| Tclass.Conveyance.Car? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.Conveyance.Car $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.Conveyance.Car? $h@@2))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass.Conveyance.Error $h@@3) ($IsAlloc refType |c#0@@1| Tclass.Conveyance.Error? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.Conveyance.Error $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.Conveyance.Error? $h@@3))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass.Conveyance.FlatTireError $h@@4) ($IsAlloc refType |c#0@@2| Tclass.Conveyance.FlatTireError? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass.Conveyance.FlatTireError $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass.Conveyance.FlatTireError? $h@@4))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@1 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass.Conveyance.Vehicle? $h@@5)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass.Conveyance.Vehicle? $h@@5))
)))
(assert (forall (($o@@2 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass.Conveyance.Car? $h@@6)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass.Conveyance.Car? $h@@6))
)))
(assert (forall (($o@@3 T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass.Conveyance.Error? $h@@7)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass.Conveyance.Error? $h@@7))
)))
(assert (forall (($o@@4 T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass.Conveyance.FlatTireError? $h@@8)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass.Conveyance.FlatTireError? $h@@8))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((d T@U) ) (! (= (Conveyance.NonVariantResult.NVSuccess_q d) (= (DatatypeCtorId d) |##Conveyance.NonVariantResult.NVSuccess|))
 :pattern ( (Conveyance.NonVariantResult.NVSuccess_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (Conveyance.NonVariantResult.NVFailure_q d@@0) (= (DatatypeCtorId d@@0) |##Conveyance.NonVariantResult.NVFailure|))
 :pattern ( (Conveyance.NonVariantResult.NVFailure_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (Conveyance.CovariantResult.CVSuccess_q d@@1) (= (DatatypeCtorId d@@1) |##Conveyance.CovariantResult.CVSuccess|))
 :pattern ( (Conveyance.CovariantResult.CVSuccess_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (Conveyance.CovariantResult.CVFailure_q d@@2) (= (DatatypeCtorId d@@2) |##Conveyance.CovariantResult.CVFailure|))
 :pattern ( (Conveyance.CovariantResult.CVFailure_q d@@2))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (Conveyance.NonVariantResult.NVSuccess_q d@@3) (exists ((|a#1#0#0| T@U) ) (= d@@3 (|#Conveyance.NonVariantResult.NVSuccess| |a#1#0#0|))))
 :pattern ( (Conveyance.NonVariantResult.NVSuccess_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (Conveyance.NonVariantResult.NVFailure_q d@@4) (exists ((|a#7#0#0| T@U) ) (= d@@4 (|#Conveyance.NonVariantResult.NVFailure| |a#7#0#0|))))
 :pattern ( (Conveyance.NonVariantResult.NVFailure_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (Conveyance.CovariantResult.CVSuccess_q d@@5) (exists ((|a#13#0#0| T@U) ) (= d@@5 (|#Conveyance.CovariantResult.CVSuccess| |a#13#0#0|))))
 :pattern ( (Conveyance.CovariantResult.CVSuccess_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (Conveyance.CovariantResult.CVFailure_q d@@6) (exists ((|a#19#0#0| T@U) ) (= d@@6 (|#Conveyance.CovariantResult.CVFailure| |a#19#0#0|))))
 :pattern ( (Conveyance.CovariantResult.CVFailure_q d@@6))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v) t h@@0) ($IsAlloc T@@0 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@0 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@1 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@1 t@@0 h@@1) ($IsAllocBox bx@@1 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@1 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@1 v@@0 t@@1 h@@2) ($IsAlloc T@@1 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@1 v@@0 t@@1 h@@2))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass.Conveyance.Car) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass.Conveyance.Car)))
 :pattern ( ($IsBox bx@@2 Tclass.Conveyance.Car))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass.Conveyance.Error) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass.Conveyance.Error)))
 :pattern ( ($IsBox bx@@3 Tclass.Conveyance.Error))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass.Conveyance.Vehicle) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass.Conveyance.Vehicle)))
 :pattern ( ($IsBox bx@@4 Tclass.Conveyance.Vehicle))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass.Conveyance.Vehicle?) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass.Conveyance.Vehicle?)))
 :pattern ( ($IsBox bx@@5 Tclass.Conveyance.Vehicle?))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass.Conveyance.Car?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass.Conveyance.Car?)))
 :pattern ( ($IsBox bx@@6 Tclass.Conveyance.Car?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass.Conveyance.Error?) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass.Conveyance.Error?)))
 :pattern ( ($IsBox bx@@7 Tclass.Conveyance.Error?))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass.Conveyance.FlatTireError?) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass.Conveyance.FlatTireError?)))
 :pattern ( ($IsBox bx@@8 Tclass.Conveyance.FlatTireError?))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass.Conveyance.FlatTireError) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass.Conveyance.FlatTireError)))
 :pattern ( ($IsBox bx@@9 Tclass.Conveyance.FlatTireError))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass.Conveyance.Vehicle)  (and ($Is refType |c#0@@3| Tclass.Conveyance.Vehicle?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass.Conveyance.Vehicle))
 :pattern ( ($Is refType |c#0@@3| Tclass.Conveyance.Vehicle?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass.Conveyance.Car)  (and ($Is refType |c#0@@4| Tclass.Conveyance.Car?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass.Conveyance.Car))
 :pattern ( ($Is refType |c#0@@4| Tclass.Conveyance.Car?))
)))
(assert (forall ((|c#0@@5| T@U) ) (! (= ($Is refType |c#0@@5| Tclass.Conveyance.Error)  (and ($Is refType |c#0@@5| Tclass.Conveyance.Error?) (or (not (= |c#0@@5| null)) (not true))))
 :pattern ( ($Is refType |c#0@@5| Tclass.Conveyance.Error))
 :pattern ( ($Is refType |c#0@@5| Tclass.Conveyance.Error?))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass.Conveyance.FlatTireError)  (and ($Is refType |c#0@@6| Tclass.Conveyance.FlatTireError?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass.Conveyance.FlatTireError))
 :pattern ( ($Is refType |c#0@@6| Tclass.Conveyance.FlatTireError?))
)))
(assert (forall (($o@@5 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@5 Tclass.Conveyance.Car? $heap) ($IsAlloc refType $o@@5 Tclass.Conveyance.Vehicle? $heap))
 :pattern ( ($IsAlloc refType $o@@5 Tclass.Conveyance.Car? $heap))
)))
(assert (forall (($o@@6 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@6 Tclass.Conveyance.FlatTireError? $heap@@0) ($IsAlloc refType $o@@6 Tclass.Conveyance.Error? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@6 Tclass.Conveyance.FlatTireError? $heap@@0))
)))
(assert (= (Ctor DatatypeTypeType) 7))
(assert (forall ((Conveyance.NonVariantResult$T T@U) (Conveyance.NonVariantResult$E T@U) (d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T Conveyance.NonVariantResult$E)) (or (Conveyance.NonVariantResult.NVSuccess_q d@@7) (Conveyance.NonVariantResult.NVFailure_q d@@7)))
 :pattern ( (Conveyance.NonVariantResult.NVFailure_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T Conveyance.NonVariantResult$E)))
 :pattern ( (Conveyance.NonVariantResult.NVSuccess_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T Conveyance.NonVariantResult$E)))
)))
(assert (forall ((Conveyance.CovariantResult$T T@U) (Conveyance.CovariantResult$E T@U) (d@@8 T@U) ) (!  (=> ($Is DatatypeTypeType d@@8 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T Conveyance.CovariantResult$E)) (or (Conveyance.CovariantResult.CVSuccess_q d@@8) (Conveyance.CovariantResult.CVFailure_q d@@8)))
 :pattern ( (Conveyance.CovariantResult.CVFailure_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T Conveyance.CovariantResult$E)))
 :pattern ( (Conveyance.CovariantResult.CVSuccess_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T Conveyance.CovariantResult$E)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@2) ($Is T@@2 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@2))
)))
(assert (forall ((Conveyance.CovariantResult$T@@0 T@U) (Conveyance.CovariantResult$E@@0 T@U) ) (! (= (Tclass.Conveyance.CovariantResult_0 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@0 Conveyance.CovariantResult$E@@0)) Conveyance.CovariantResult$T@@0)
 :pattern ( (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@0 Conveyance.CovariantResult$E@@0))
)))
(assert (forall ((Conveyance.CovariantResult$T@@1 T@U) (Conveyance.CovariantResult$E@@1 T@U) ) (! (= (Tclass.Conveyance.CovariantResult_1 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@1 Conveyance.CovariantResult$E@@1)) Conveyance.CovariantResult$E@@1)
 :pattern ( (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@1 Conveyance.CovariantResult$E@@1))
)))
(assert (forall ((Conveyance.NonVariantResult$T@@0 T@U) (Conveyance.NonVariantResult$E@@0 T@U) ) (! (= (Tclass.Conveyance.NonVariantResult_0 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@0 Conveyance.NonVariantResult$E@@0)) Conveyance.NonVariantResult$T@@0)
 :pattern ( (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@0 Conveyance.NonVariantResult$E@@0))
)))
(assert (forall ((Conveyance.NonVariantResult$T@@1 T@U) (Conveyance.NonVariantResult$E@@1 T@U) ) (! (= (Tclass.Conveyance.NonVariantResult_1 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@1 Conveyance.NonVariantResult$E@@1)) Conveyance.NonVariantResult$E@@1)
 :pattern ( (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@1 Conveyance.NonVariantResult$E@@1))
)))
(assert (forall ((Conveyance.NonVariantResult$T@@2 T@U) (Conveyance.NonVariantResult$E@@2 T@U) (|a#2#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#Conveyance.NonVariantResult.NVSuccess| |a#2#0#0|) (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@2 Conveyance.NonVariantResult$E@@2)) ($IsBox |a#2#0#0| Conveyance.NonVariantResult$T@@2))
 :pattern ( ($Is DatatypeTypeType (|#Conveyance.NonVariantResult.NVSuccess| |a#2#0#0|) (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@2 Conveyance.NonVariantResult$E@@2)))
)))
(assert (forall ((Conveyance.NonVariantResult$T@@3 T@U) (Conveyance.NonVariantResult$E@@3 T@U) (|a#8#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#Conveyance.NonVariantResult.NVFailure| |a#8#0#0|) (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@3 Conveyance.NonVariantResult$E@@3)) ($IsBox |a#8#0#0| Conveyance.NonVariantResult$E@@3))
 :pattern ( ($Is DatatypeTypeType (|#Conveyance.NonVariantResult.NVFailure| |a#8#0#0|) (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@3 Conveyance.NonVariantResult$E@@3)))
)))
(assert (forall ((Conveyance.CovariantResult$T@@2 T@U) (Conveyance.CovariantResult$E@@2 T@U) (|a#14#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#Conveyance.CovariantResult.CVSuccess| |a#14#0#0|) (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@2 Conveyance.CovariantResult$E@@2)) ($IsBox |a#14#0#0| Conveyance.CovariantResult$T@@2))
 :pattern ( ($Is DatatypeTypeType (|#Conveyance.CovariantResult.CVSuccess| |a#14#0#0|) (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@2 Conveyance.CovariantResult$E@@2)))
)))
(assert (forall ((Conveyance.CovariantResult$T@@3 T@U) (Conveyance.CovariantResult$E@@3 T@U) (|a#20#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#Conveyance.CovariantResult.CVFailure| |a#20#0#0|) (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@3 Conveyance.CovariantResult$E@@3)) ($IsBox |a#20#0#0| Conveyance.CovariantResult$E@@3))
 :pattern ( ($Is DatatypeTypeType (|#Conveyance.CovariantResult.CVFailure| |a#20#0#0|) (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@3 Conveyance.CovariantResult$E@@3)))
)))
(assert (forall ((|a#0#0#0| T@U) ) (! (= (DatatypeCtorId (|#Conveyance.NonVariantResult.NVSuccess| |a#0#0#0|)) |##Conveyance.NonVariantResult.NVSuccess|)
 :pattern ( (|#Conveyance.NonVariantResult.NVSuccess| |a#0#0#0|))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (Conveyance.NonVariantResult.value (|#Conveyance.NonVariantResult.NVSuccess| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#Conveyance.NonVariantResult.NVSuccess| |a#4#0#0|))
)))
(assert (forall ((|a#6#0#0| T@U) ) (! (= (DatatypeCtorId (|#Conveyance.NonVariantResult.NVFailure| |a#6#0#0|)) |##Conveyance.NonVariantResult.NVFailure|)
 :pattern ( (|#Conveyance.NonVariantResult.NVFailure| |a#6#0#0|))
)))
(assert (forall ((|a#10#0#0| T@U) ) (! (= (Conveyance.NonVariantResult.error (|#Conveyance.NonVariantResult.NVFailure| |a#10#0#0|)) |a#10#0#0|)
 :pattern ( (|#Conveyance.NonVariantResult.NVFailure| |a#10#0#0|))
)))
(assert (forall ((|a#12#0#0| T@U) ) (! (= (DatatypeCtorId (|#Conveyance.CovariantResult.CVSuccess| |a#12#0#0|)) |##Conveyance.CovariantResult.CVSuccess|)
 :pattern ( (|#Conveyance.CovariantResult.CVSuccess| |a#12#0#0|))
)))
(assert (forall ((|a#16#0#0| T@U) ) (! (= (Conveyance.CovariantResult.value (|#Conveyance.CovariantResult.CVSuccess| |a#16#0#0|)) |a#16#0#0|)
 :pattern ( (|#Conveyance.CovariantResult.CVSuccess| |a#16#0#0|))
)))
(assert (forall ((|a#18#0#0| T@U) ) (! (= (DatatypeCtorId (|#Conveyance.CovariantResult.CVFailure| |a#18#0#0|)) |##Conveyance.CovariantResult.CVFailure|)
 :pattern ( (|#Conveyance.CovariantResult.CVFailure| |a#18#0#0|))
)))
(assert (forall ((|a#22#0#0| T@U) ) (! (= (Conveyance.CovariantResult.error (|#Conveyance.CovariantResult.CVFailure| |a#22#0#0|)) |a#22#0#0|)
 :pattern ( (|#Conveyance.CovariantResult.CVFailure| |a#22#0#0|))
)))
(assert (forall ((x@@3 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@3)) x@@3)
 :pattern ( ($Box T@@3 x@@3))
)))
(assert (forall ((Conveyance.CovariantResult$T@@4 T@U) (Conveyance.CovariantResult$E@@4 T@U) (bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@4 Conveyance.CovariantResult$E@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@10)) bx@@10) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@10) (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@4 Conveyance.CovariantResult$E@@4))))
 :pattern ( ($IsBox bx@@10 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@4 Conveyance.CovariantResult$E@@4)))
)))
(assert (forall ((Conveyance.NonVariantResult$T@@4 T@U) (Conveyance.NonVariantResult$E@@4 T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@4 Conveyance.NonVariantResult$E@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@11)) bx@@11) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@11) (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@4 Conveyance.NonVariantResult$E@@4))))
 :pattern ( ($IsBox bx@@11 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@4 Conveyance.NonVariantResult$E@@4)))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#Conveyance.NonVariantResult.NVSuccess| |a#5#0#0|)))
 :pattern ( (|#Conveyance.NonVariantResult.NVSuccess| |a#5#0#0|))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (< (BoxRank |a#11#0#0|) (DtRank (|#Conveyance.NonVariantResult.NVFailure| |a#11#0#0|)))
 :pattern ( (|#Conveyance.NonVariantResult.NVFailure| |a#11#0#0|))
)))
(assert (forall ((|a#17#0#0| T@U) ) (! (< (BoxRank |a#17#0#0|) (DtRank (|#Conveyance.CovariantResult.CVSuccess| |a#17#0#0|)))
 :pattern ( (|#Conveyance.CovariantResult.CVSuccess| |a#17#0#0|))
)))
(assert (forall ((|a#23#0#0| T@U) ) (! (< (BoxRank |a#23#0#0|) (DtRank (|#Conveyance.CovariantResult.CVFailure| |a#23#0#0|)))
 :pattern ( (|#Conveyance.CovariantResult.CVFailure| |a#23#0#0|))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@7 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))  (=> (and (or (not (= $o@@7 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))
)))
(assert (forall ((Conveyance.CovariantResult$T@@5 T@U) (Conveyance.CovariantResult$E@@5 T@U) ) (!  (and (= (Tag (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@5 Conveyance.CovariantResult$E@@5)) Tagclass.Conveyance.CovariantResult) (= (TagFamily (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@5 Conveyance.CovariantResult$E@@5)) tytagFamily$CovariantResult))
 :pattern ( (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@5 Conveyance.CovariantResult$E@@5))
)))
(assert (forall ((Conveyance.NonVariantResult$T@@5 T@U) (Conveyance.NonVariantResult$E@@5 T@U) ) (!  (and (= (Tag (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@5 Conveyance.NonVariantResult$E@@5)) Tagclass.Conveyance.NonVariantResult) (= (TagFamily (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@5 Conveyance.NonVariantResult$E@@5)) tytagFamily$NonVariantResult))
 :pattern ( (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@5 Conveyance.NonVariantResult$E@@5))
)))
(assert (forall ((d@@9 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@9)) (DtRank d@@9))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@9)))
)))
(assert (forall (($o@@8 T@U) ) (!  (=> ($Is refType $o@@8 Tclass.Conveyance.Car?) ($Is refType $o@@8 Tclass.Conveyance.Vehicle?))
 :pattern ( ($Is refType $o@@8 Tclass.Conveyance.Car?))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 Tclass.Conveyance.Car?) ($IsBox bx@@12 Tclass.Conveyance.Vehicle?))
 :pattern ( ($IsBox bx@@12 Tclass.Conveyance.Car?))
)))
(assert (forall (($o@@9 T@U) ) (!  (=> ($Is refType $o@@9 Tclass.Conveyance.FlatTireError?) ($Is refType $o@@9 Tclass.Conveyance.Error?))
 :pattern ( ($Is refType $o@@9 Tclass.Conveyance.FlatTireError?))
)))
(assert (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 Tclass.Conveyance.FlatTireError?) ($IsBox bx@@13 Tclass.Conveyance.Error?))
 :pattern ( ($IsBox bx@@13 Tclass.Conveyance.FlatTireError?))
)))
(assert (= (Tag Tclass.Conveyance.Car) Tagclass.Conveyance.Car))
(assert (= (TagFamily Tclass.Conveyance.Car) tytagFamily$Car))
(assert (= (Tag Tclass.Conveyance.Error) Tagclass.Conveyance.Error))
(assert (= (TagFamily Tclass.Conveyance.Error) tytagFamily$Error))
(assert (= (Tag Tclass.Conveyance.Vehicle) Tagclass.Conveyance.Vehicle))
(assert (= (TagFamily Tclass.Conveyance.Vehicle) tytagFamily$Vehicle))
(assert (= (Tag Tclass.Conveyance.Vehicle?) Tagclass.Conveyance.Vehicle?))
(assert (= (TagFamily Tclass.Conveyance.Vehicle?) tytagFamily$Vehicle))
(assert (= (Tag Tclass.Conveyance.Car?) Tagclass.Conveyance.Car?))
(assert (= (TagFamily Tclass.Conveyance.Car?) tytagFamily$Car))
(assert (= (Tag Tclass.Conveyance.Error?) Tagclass.Conveyance.Error?))
(assert (= (TagFamily Tclass.Conveyance.Error?) tytagFamily$Error))
(assert (= (Tag Tclass.Conveyance.FlatTireError?) Tagclass.Conveyance.FlatTireError?))
(assert (= (TagFamily Tclass.Conveyance.FlatTireError?) tytagFamily$FlatTireError))
(assert (= (Tag Tclass.Conveyance.FlatTireError) Tagclass.Conveyance.FlatTireError))
(assert (= (TagFamily Tclass.Conveyance.FlatTireError) tytagFamily$FlatTireError))
(assert (forall (($o@@10 T@U) ) (! (= ($Is refType $o@@10 Tclass.Conveyance.Vehicle?)  (or (= $o@@10 null) (implements$Conveyance.Vehicle (dtype $o@@10))))
 :pattern ( ($Is refType $o@@10 Tclass.Conveyance.Vehicle?))
)))
(assert (forall (($o@@11 T@U) ) (! (= ($Is refType $o@@11 Tclass.Conveyance.Error?)  (or (= $o@@11 null) (implements$Conveyance.Error (dtype $o@@11))))
 :pattern ( ($Is refType $o@@11 Tclass.Conveyance.Error?))
)))
(assert (forall ((d@@10 T@U) (Conveyance.NonVariantResult$T@@6 T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (Conveyance.NonVariantResult.NVSuccess_q d@@10) (exists ((Conveyance.NonVariantResult$E@@6 T@U) ) (! ($IsAlloc DatatypeTypeType d@@10 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@6 Conveyance.NonVariantResult$E@@6) $h@@9)
 :pattern ( ($IsAlloc DatatypeTypeType d@@10 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@6 Conveyance.NonVariantResult$E@@6) $h@@9))
)))) ($IsAllocBox (Conveyance.NonVariantResult.value d@@10) Conveyance.NonVariantResult$T@@6 $h@@9))
 :pattern ( ($IsAllocBox (Conveyance.NonVariantResult.value d@@10) Conveyance.NonVariantResult$T@@6 $h@@9))
)))
(assert (forall ((d@@11 T@U) (Conveyance.NonVariantResult$E@@7 T@U) ($h@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (Conveyance.NonVariantResult.NVFailure_q d@@11) (exists ((Conveyance.NonVariantResult$T@@7 T@U) ) (! ($IsAlloc DatatypeTypeType d@@11 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@7 Conveyance.NonVariantResult$E@@7) $h@@10)
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@7 Conveyance.NonVariantResult$E@@7) $h@@10))
)))) ($IsAllocBox (Conveyance.NonVariantResult.error d@@11) Conveyance.NonVariantResult$E@@7 $h@@10))
 :pattern ( ($IsAllocBox (Conveyance.NonVariantResult.error d@@11) Conveyance.NonVariantResult$E@@7 $h@@10))
)))
(assert (forall ((d@@12 T@U) (Conveyance.CovariantResult$T@@6 T@U) ($h@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (Conveyance.CovariantResult.CVSuccess_q d@@12) (exists ((Conveyance.CovariantResult$E@@6 T@U) ) (! ($IsAlloc DatatypeTypeType d@@12 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@6 Conveyance.CovariantResult$E@@6) $h@@11)
 :pattern ( ($IsAlloc DatatypeTypeType d@@12 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@6 Conveyance.CovariantResult$E@@6) $h@@11))
)))) ($IsAllocBox (Conveyance.CovariantResult.value d@@12) Conveyance.CovariantResult$T@@6 $h@@11))
 :pattern ( ($IsAllocBox (Conveyance.CovariantResult.value d@@12) Conveyance.CovariantResult$T@@6 $h@@11))
)))
(assert (forall ((d@@13 T@U) (Conveyance.CovariantResult$E@@7 T@U) ($h@@12 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (Conveyance.CovariantResult.CVFailure_q d@@13) (exists ((Conveyance.CovariantResult$T@@7 T@U) ) (! ($IsAlloc DatatypeTypeType d@@13 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@7 Conveyance.CovariantResult$E@@7) $h@@12)
 :pattern ( ($IsAlloc DatatypeTypeType d@@13 (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@7 Conveyance.CovariantResult$E@@7) $h@@12))
)))) ($IsAllocBox (Conveyance.CovariantResult.error d@@13) Conveyance.CovariantResult$E@@7 $h@@12))
 :pattern ( ($IsAllocBox (Conveyance.CovariantResult.error d@@13) Conveyance.CovariantResult$E@@7 $h@@12))
)))
(assert (forall ((Conveyance.NonVariantResult$T@@8 T@U) (Conveyance.NonVariantResult$E@@8 T@U) (|a#2#0#0@@0| T@U) ($h@@13 T@U) ) (!  (=> ($IsGoodHeap $h@@13) (= ($IsAlloc DatatypeTypeType (|#Conveyance.NonVariantResult.NVSuccess| |a#2#0#0@@0|) (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@8 Conveyance.NonVariantResult$E@@8) $h@@13) ($IsAllocBox |a#2#0#0@@0| Conveyance.NonVariantResult$T@@8 $h@@13)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Conveyance.NonVariantResult.NVSuccess| |a#2#0#0@@0|) (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@8 Conveyance.NonVariantResult$E@@8) $h@@13))
)))
(assert (forall ((Conveyance.NonVariantResult$T@@9 T@U) (Conveyance.NonVariantResult$E@@9 T@U) (|a#8#0#0@@0| T@U) ($h@@14 T@U) ) (!  (=> ($IsGoodHeap $h@@14) (= ($IsAlloc DatatypeTypeType (|#Conveyance.NonVariantResult.NVFailure| |a#8#0#0@@0|) (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@9 Conveyance.NonVariantResult$E@@9) $h@@14) ($IsAllocBox |a#8#0#0@@0| Conveyance.NonVariantResult$E@@9 $h@@14)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Conveyance.NonVariantResult.NVFailure| |a#8#0#0@@0|) (Tclass.Conveyance.NonVariantResult Conveyance.NonVariantResult$T@@9 Conveyance.NonVariantResult$E@@9) $h@@14))
)))
(assert (forall ((Conveyance.CovariantResult$T@@8 T@U) (Conveyance.CovariantResult$E@@8 T@U) (|a#14#0#0@@0| T@U) ($h@@15 T@U) ) (!  (=> ($IsGoodHeap $h@@15) (= ($IsAlloc DatatypeTypeType (|#Conveyance.CovariantResult.CVSuccess| |a#14#0#0@@0|) (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@8 Conveyance.CovariantResult$E@@8) $h@@15) ($IsAllocBox |a#14#0#0@@0| Conveyance.CovariantResult$T@@8 $h@@15)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Conveyance.CovariantResult.CVSuccess| |a#14#0#0@@0|) (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@8 Conveyance.CovariantResult$E@@8) $h@@15))
)))
(assert (forall ((Conveyance.CovariantResult$T@@9 T@U) (Conveyance.CovariantResult$E@@9 T@U) (|a#20#0#0@@0| T@U) ($h@@16 T@U) ) (!  (=> ($IsGoodHeap $h@@16) (= ($IsAlloc DatatypeTypeType (|#Conveyance.CovariantResult.CVFailure| |a#20#0#0@@0|) (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@9 Conveyance.CovariantResult$E@@9) $h@@16) ($IsAllocBox |a#20#0#0@@0| Conveyance.CovariantResult$E@@9 $h@@16)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Conveyance.CovariantResult.CVFailure| |a#20#0#0@@0|) (Tclass.Conveyance.CovariantResult Conveyance.CovariantResult$T@@9 Conveyance.CovariantResult$E@@9) $h@@16))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun call1formal@this () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun call1formal@this@0 () T@U)
(declare-fun call1formal@this@@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun call1formal@this@0@@0 () T@U)
(declare-fun |cvSuccess#0@0| () T@U)
(declare-fun |cvFailure#0@0| () T@U)
(declare-fun |nvSuccess#0@0| () T@U)
(declare-fun |nvFailure#0@0| () T@U)
(declare-fun |nvCarSuccess#0@0| () T@U)
(declare-fun |cvCarSuccess#0@0| () T@U)
(declare-fun |defass#myCar#0| () Bool)
(declare-fun |myCar#0| () T@U)
(declare-fun |defass#error#0| () Bool)
(declare-fun |error#0| () T@U)
(declare-fun |defass#cvSuccess#0| () Bool)
(declare-fun |cvSuccess#0| () T@U)
(declare-fun |defass#cvFailure#0| () Bool)
(declare-fun |cvFailure#0| () T@U)
(declare-fun |defass#nvSuccess#0| () Bool)
(declare-fun |nvSuccess#0| () T@U)
(declare-fun |defass#nvFailure#0| () Bool)
(declare-fun |nvFailure#0| () T@U)
(declare-fun |defass#nvCarSuccess#0| () Bool)
(declare-fun |nvCarSuccess#0| () T@U)
(declare-fun |defass#cvCarSuccess#0| () Bool)
(declare-fun |cvCarSuccess#0| () T@U)
(declare-fun |defass#cvVehicleSuccess#0| () Bool)
(declare-fun |cvVehicleSuccess#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (and (or (not (= call1formal@this null)) (not true)) (and ($Is refType call1formal@this Tclass.Conveyance.Car) ($IsAlloc refType call1formal@this Tclass.Conveyance.Car $Heap))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and (and (and (or (not (= call1formal@this@0 null)) (not true)) (and ($Is refType call1formal@this@0 Tclass.Conveyance.Car) ($IsAlloc refType call1formal@this@0 Tclass.Conveyance.Car $Heap@0))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap call1formal@this@0) alloc))))) (and (forall (($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@12) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@12) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@12)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@12))
)) ($HeapSucc $Heap $Heap@0))) (and (and (or (not (= call1formal@this@@0 null)) (not true)) (and ($Is refType call1formal@this@@0 Tclass.Conveyance.FlatTireError) ($IsAlloc refType call1formal@this@@0 Tclass.Conveyance.FlatTireError $Heap))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)))) (and (and (and (or (not (= call1formal@this@0@@0 null)) (not true)) (and ($Is refType call1formal@this@0@@0 Tclass.Conveyance.FlatTireError) ($IsAlloc refType call1formal@this@0@@0 Tclass.Conveyance.FlatTireError $Heap@1))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call1formal@this@0@@0) alloc))))) (and (forall (($o@@13 T@U) ) (!  (=> (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@13) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@13) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@13)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@13))
)) ($HeapSucc $Heap@0 $Heap@1)))) (and (=> (= (ControlFlow 0 2) (- 0 10)) true) (=> (= |cvSuccess#0@0| (|#Conveyance.CovariantResult.CVSuccess| ($Box refType call1formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 9)) true) (=> (= |cvFailure#0@0| (|#Conveyance.CovariantResult.CVFailure| ($Box refType call1formal@this@0@@0))) (and (=> (= (ControlFlow 0 2) (- 0 8)) true) (=> (= |nvSuccess#0@0| (|#Conveyance.NonVariantResult.NVSuccess| ($Box refType call1formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 7)) true) (=> (= |nvFailure#0@0| (|#Conveyance.NonVariantResult.NVFailure| ($Box refType call1formal@this@0@@0))) (and (=> (= (ControlFlow 0 2) (- 0 6)) true) (=> (= |nvCarSuccess#0@0| (|#Conveyance.NonVariantResult.NVSuccess| ($Box refType call1formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (=> (= |cvCarSuccess#0@0| (|#Conveyance.CovariantResult.CVSuccess| ($Box refType call1formal@this@0))) (and (=> (= (ControlFlow 0 2) (- 0 4)) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) true))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (=> |defass#myCar#0| (and ($Is refType |myCar#0| Tclass.Conveyance.Car) ($IsAlloc refType |myCar#0| Tclass.Conveyance.Car $Heap))) true) (and (=> |defass#error#0| (and ($Is refType |error#0| Tclass.Conveyance.Error) ($IsAlloc refType |error#0| Tclass.Conveyance.Error $Heap))) true)) (=> (and (and (and (and (=> |defass#cvSuccess#0| (and ($Is DatatypeTypeType |cvSuccess#0| (Tclass.Conveyance.CovariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error)) ($IsAlloc DatatypeTypeType |cvSuccess#0| (Tclass.Conveyance.CovariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error) $Heap))) true) (and (=> |defass#cvFailure#0| (and ($Is DatatypeTypeType |cvFailure#0| (Tclass.Conveyance.CovariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error)) ($IsAlloc DatatypeTypeType |cvFailure#0| (Tclass.Conveyance.CovariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error) $Heap))) true)) (and (and (=> |defass#nvSuccess#0| (and ($Is DatatypeTypeType |nvSuccess#0| (Tclass.Conveyance.NonVariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error)) ($IsAlloc DatatypeTypeType |nvSuccess#0| (Tclass.Conveyance.NonVariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error) $Heap))) true) (and (=> |defass#nvFailure#0| (and ($Is DatatypeTypeType |nvFailure#0| (Tclass.Conveyance.NonVariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error)) ($IsAlloc DatatypeTypeType |nvFailure#0| (Tclass.Conveyance.NonVariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error) $Heap))) true))) (and (and (and (=> |defass#nvCarSuccess#0| (and ($Is DatatypeTypeType |nvCarSuccess#0| (Tclass.Conveyance.NonVariantResult Tclass.Conveyance.Car Tclass.Conveyance.Error)) ($IsAlloc DatatypeTypeType |nvCarSuccess#0| (Tclass.Conveyance.NonVariantResult Tclass.Conveyance.Car Tclass.Conveyance.Error) $Heap))) true) (and (=> |defass#cvCarSuccess#0| (and ($Is DatatypeTypeType |cvCarSuccess#0| (Tclass.Conveyance.CovariantResult Tclass.Conveyance.Car Tclass.Conveyance.Error)) ($IsAlloc DatatypeTypeType |cvCarSuccess#0| (Tclass.Conveyance.CovariantResult Tclass.Conveyance.Car Tclass.Conveyance.Error) $Heap))) true)) (and (and (=> |defass#cvVehicleSuccess#0| (and ($Is DatatypeTypeType |cvVehicleSuccess#0| (Tclass.Conveyance.CovariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error)) ($IsAlloc DatatypeTypeType |cvVehicleSuccess#0| (Tclass.Conveyance.CovariantResult Tclass.Conveyance.Vehicle Tclass.Conveyance.Error) $Heap))) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 11) 2))))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
