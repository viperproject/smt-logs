(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (Int) Bool)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@23 (Int) Bool)
(declare-fun $generated@@24 (Int Int) Int)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U T@U) Bool)
(declare-fun $generated@@41 (Int) Bool)
(declare-fun $generated@@42 (Int) Bool)
(declare-fun $generated@@46 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@T T@T) T@T)
(declare-fun $generated@@53 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@109 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@25 Int) ) (!  (=> (or ($generated@@23 ($generated@@22 $generated@@25)) (and (< 0 $generated@@20) (<= ($generated@@22 0) $generated@@25))) (= ($generated@@21 ($generated@@22 $generated@@25)) (= ($generated@@22 ($generated@@24 $generated@@25 ($generated@@22 2))) ($generated@@22 0))))
 :weight 3
 :pattern ( ($generated@@21 ($generated@@22 $generated@@25)))
))))
(assert (= ($generated@@26 $generated) $generated@@0))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (! ($generated@@27 $generated@@6 $generated@@29 $generated@@28 $generated@@30)
 :pattern ( ($generated@@27 $generated@@6 $generated@@29 $generated@@28 $generated@@30))
)))
(assert (forall (($generated@@31 Int) ) (! (= ($generated@@22 $generated@@31) $generated@@31)
 :pattern ( ($generated@@22 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@T) ) (! (= ($generated@@32 $generated@@34 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@34 $generated@@33))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@6 $generated@@40 $generated@@28) (<= ($generated@@22 0) ($generated@@11 $generated@@40)))
 :pattern ( ($generated@@39 $generated@@6 $generated@@40 $generated@@28))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@43 Int) ) (!  (=> (or ($generated@@42 $generated@@43) (< 0 $generated@@20)) (= ($generated@@41 $generated@@43) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@8 true)))))
 :pattern ( ($generated@@41 $generated@@43))
))))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@35 $generated@@45 ($generated@@36 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@36 $generated@@45 $generated@@44))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@46 $generated@@57 $generated@@58 $generated@@59 ($generated@@53 $generated@@57 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@63 $generated@@60) $generated@@62 $generated@@63) $generated@@60)
 :weight 0
)) (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ) (!  (or (= $generated@@69 $generated@@71) (= ($generated@@46 $generated@@64 $generated@@65 $generated@@66 ($generated@@53 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@70 $generated@@67) $generated@@71 $generated@@72) ($generated@@46 $generated@@64 $generated@@65 $generated@@66 $generated@@68 $generated@@71 $generated@@72)))
 :weight 0
)) (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@46 $generated@@73 $generated@@74 $generated@@75 ($generated@@53 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@80 $generated@@81) ($generated@@46 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@80 $generated@@81)))
 :weight 0
)))) (= ($generated@@4 $generated@@47) 3)) (= ($generated@@4 $generated@@48) 4)) (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (! (= ($generated@@50 $generated@@82 $generated@@83 ($generated@@54 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@84) $generated@@86) $generated@@84)
 :weight 0
))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@91 $generated@@92) (= ($generated@@50 $generated@@87 $generated@@88 ($generated@@54 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@92) ($generated@@50 $generated@@87 $generated@@88 $generated@@90 $generated@@92)))
 :weight 0
))) (= ($generated@@4 $generated@@51) 5)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (= ($generated@@4 ($generated@@52 $generated@@93 $generated@@94)) 6))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (! (= ($generated@@55 ($generated@@52 $generated@@95 $generated@@96)) $generated@@95)
 :pattern ( ($generated@@52 $generated@@95 $generated@@96))
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@56 ($generated@@52 $generated@@97 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@52 $generated@@97 $generated@@98))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 Bool) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@9 ($generated@@46 $generated@@47 $generated@@48 $generated@@5 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))  (=> (and (or (not (= $generated@@103 $generated@@99)) (not true)) ($generated@@9 ($generated@@35 $generated@@5 ($generated@@50 $generated@@48 $generated@@51 ($generated@@50 $generated@@47 ($generated@@52 $generated@@48 $generated@@51) $generated@@100 $generated@@103) $generated@@101)))) $generated@@102))
 :pattern ( ($generated@@46 $generated@@47 $generated@@48 $generated@@5 ($generated@@49 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 Int) ($generated@@106 Int) ) (! (= ($generated@@24 $generated@@105 $generated@@106) (mod $generated@@105 $generated@@106))
 :pattern ( ($generated@@24 $generated@@105 $generated@@106))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@107 Int) ) (!  (=> (or ($generated@@42 ($generated@@22 $generated@@107)) (< 0 $generated@@20)) (= ($generated@@41 ($generated@@22 $generated@@107)) ($generated@@9 ($generated@@32 $generated@@5 ($generated@@8 true)))))
 :weight 3
 :pattern ( ($generated@@41 ($generated@@22 $generated@@107)))
))))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@108 Int) ) (!  (=> (or ($generated@@23 $generated@@108) (and (< 0 $generated@@20) (<= ($generated@@22 0) $generated@@108))) (= ($generated@@21 $generated@@108) (= ($generated@@24 $generated@@108 ($generated@@22 2)) ($generated@@22 0))))
 :pattern ( ($generated@@21 $generated@@108))
))))
(assert (= ($generated@@26 $generated@@28) $generated@@2))
(assert (= ($generated@@109 $generated@@28) $generated@@3))
(assert (forall (($generated@@110 Int) ) (! (= ($generated@@36 $generated@@6 ($generated@@10 ($generated@@22 $generated@@110))) ($generated@@32 $generated@@51 ($generated@@36 $generated@@6 ($generated@@10 $generated@@110))))
 :pattern ( ($generated@@36 $generated@@6 ($generated@@10 ($generated@@22 $generated@@110))))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@T) ) (! (= ($generated@@36 $generated@@112 ($generated@@32 $generated@@112 $generated@@111)) ($generated@@32 $generated@@51 ($generated@@36 $generated@@112 $generated@@111)))
 :pattern ( ($generated@@36 $generated@@112 ($generated@@32 $generated@@112 $generated@@111)))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! ($generated@@27 $generated@@6 $generated@@114 $generated $generated@@113)
 :pattern ( ($generated@@27 $generated@@6 $generated@@114 $generated $generated@@113))
)))
(assert (forall (($generated@@115 T@U) ) (! ($generated@@39 $generated@@6 $generated@@115 $generated)
 :pattern ( ($generated@@39 $generated@@6 $generated@@115 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 52) (let (($generated@@128  (=> (and (forall (($generated@@129 Int) ) (!  (=> (<= ($generated@@22 0) $generated@@129) ($generated@@23 $generated@@129))
 :pattern ( ($generated@@21 $generated@@129))
)) (= (ControlFlow 0 6) (- 0 5))) (forall (($generated@@130 Int) ) (!  (=> (<= ($generated@@22 0) $generated@@130) (=> ($generated@@21 $generated@@130) true))
 :pattern ( ($generated@@21 $generated@@130))
)))))
(let (($generated@@131  (=> (and (not ($generated@@21 $generated@@116)) (= (ControlFlow 0 9) 6)) $generated@@128)))
(let (($generated@@132  (=> (and ($generated@@21 $generated@@116) (= (ControlFlow 0 8) 6)) $generated@@128)))
(let (($generated@@133  (=> (<= ($generated@@22 0) $generated@@116) (=> (and ($generated@@27 $generated@@6 ($generated@@10 $generated@@116) $generated@@28 $generated@@117) ($generated@@23 $generated@@116)) (and (=> (= (ControlFlow 0 10) 8) $generated@@132) (=> (= (ControlFlow 0 10) 9) $generated@@131))))))
(let (($generated@@134  (=> (and (< $generated@@116 ($generated@@22 0)) (= (ControlFlow 0 7) 6)) $generated@@128)))
(let (($generated@@135  (=> (forall (($generated@@136 Int) ) (!  (=> (<= ($generated@@22 0) $generated@@136) ($generated@@23 $generated@@136))
 :pattern ( ($generated@@21 $generated@@136))
)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (forall (($generated@@137 Int) ) (!  (=> (and (<= ($generated@@22 0) $generated@@137) ($generated@@21 $generated@@137)) (= $generated@@137 $generated@@137))
 :pattern ( ($generated@@21 $generated@@137))
))) (=> (forall (($generated@@138 Int) ) (!  (=> (and (<= ($generated@@22 0) $generated@@138) ($generated@@21 $generated@@138)) (= $generated@@138 $generated@@138))
 :pattern ( ($generated@@21 $generated@@138))
)) (and (=> (= (ControlFlow 0 11) 10) $generated@@133) (=> (= (ControlFlow 0 11) 7) $generated@@134)))))))
(let (($generated@@139  (=> (and (not ($generated@@21 $generated@@118)) (= (ControlFlow 0 15) 11)) $generated@@135)))
(let (($generated@@140  (=> (and ($generated@@21 $generated@@118) (= (ControlFlow 0 14) 11)) $generated@@135)))
(let (($generated@@141  (=> (<= ($generated@@22 0) $generated@@118) (=> (and ($generated@@27 $generated@@6 ($generated@@10 $generated@@118) $generated@@28 $generated@@117) ($generated@@23 $generated@@118)) (and (=> (= (ControlFlow 0 16) 14) $generated@@140) (=> (= (ControlFlow 0 16) 15) $generated@@139))))))
(let (($generated@@142  (=> (and (< $generated@@118 ($generated@@22 0)) (= (ControlFlow 0 13) 11)) $generated@@135)))
(let (($generated@@143  (=> (forall (($generated@@144 Int) ) (!  (and ($generated@@23 $generated@@144) (=> ($generated@@21 $generated@@144) ($generated@@42 $generated@@144)))
 :pattern ( ($generated@@41 $generated@@144))
 :pattern ( ($generated@@21 $generated@@144))
)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (forall (($generated@@145 Int) ) (!  (=> ($generated@@21 $generated@@145) ($generated@@41 $generated@@145))
 :pattern ( ($generated@@41 $generated@@145))
 :pattern ( ($generated@@21 $generated@@145))
))) (=> (forall (($generated@@146 Int) ) (!  (=> ($generated@@21 $generated@@146) ($generated@@41 $generated@@146))
 :pattern ( ($generated@@41 $generated@@146))
 :pattern ( ($generated@@21 $generated@@146))
)) (and (=> (= (ControlFlow 0 17) 16) $generated@@141) (=> (= (ControlFlow 0 17) 13) $generated@@142)))))))
(let (($generated@@147  (=> (and (not ($generated@@21 $generated@@119)) (= (ControlFlow 0 20) 17)) $generated@@143)))
(let (($generated@@148  (=> (and (and ($generated@@21 $generated@@119) ($generated@@27 $generated@@6 ($generated@@10 $generated@@119) $generated $generated@@117)) (and ($generated@@42 $generated@@119) (= (ControlFlow 0 19) 17))) $generated@@143)))
(let (($generated@@149  (and (=> (= (ControlFlow 0 21) (- 0 22)) ($generated@@39 $generated@@6 ($generated@@10 $generated@@119) $generated@@28)) (=> ($generated@@39 $generated@@6 ($generated@@10 $generated@@119) $generated@@28) (=> (and ($generated@@27 $generated@@6 ($generated@@10 $generated@@119) $generated@@28 $generated@@117) ($generated@@23 $generated@@119)) (and (=> (= (ControlFlow 0 21) 19) $generated@@148) (=> (= (ControlFlow 0 21) 20) $generated@@147)))))))
(let (($generated@@150 true))
(let (($generated@@151  (=> (forall (($generated@@152 Int) ) (!  (and ($generated@@23 $generated@@152) (=> ($generated@@21 $generated@@152) (=> (<= ($generated@@22 0) $generated@@152) ($generated@@42 $generated@@152))))
 :pattern ( ($generated@@41 $generated@@152))
 :pattern ( ($generated@@21 $generated@@152))
)) (and (=> (= (ControlFlow 0 23) (- 0 24)) (forall (($generated@@153 Int) ) (!  (=> (and ($generated@@21 $generated@@153) (<= ($generated@@22 0) $generated@@153)) ($generated@@41 $generated@@153))
 :pattern ( ($generated@@41 $generated@@153))
 :pattern ( ($generated@@21 $generated@@153))
))) (=> (forall (($generated@@154 Int) ) (!  (=> (and ($generated@@21 $generated@@154) (<= ($generated@@22 0) $generated@@154)) ($generated@@41 $generated@@154))
 :pattern ( ($generated@@41 $generated@@154))
 :pattern ( ($generated@@21 $generated@@154))
)) (and (=> (= (ControlFlow 0 23) 21) $generated@@149) (=> (= (ControlFlow 0 23) 4) $generated@@150)))))))
(let (($generated@@155  (=> (and (not (and ($generated@@21 $generated@@120) (<= ($generated@@22 0) $generated@@120))) (= (ControlFlow 0 26) 23)) $generated@@151)))
(let (($generated@@156  (=> (and (and (and ($generated@@21 $generated@@120) (<= ($generated@@22 0) $generated@@120)) ($generated@@27 $generated@@6 ($generated@@10 $generated@@120) $generated $generated@@117)) (and ($generated@@42 $generated@@120) (= (ControlFlow 0 25) 23))) $generated@@151)))
(let (($generated@@157  (=> (not ($generated@@21 $generated@@120)) (and (=> (= (ControlFlow 0 28) 25) $generated@@156) (=> (= (ControlFlow 0 28) 26) $generated@@155)))))
(let (($generated@@158  (=> ($generated@@21 $generated@@120) (and (=> (= (ControlFlow 0 27) 25) $generated@@156) (=> (= (ControlFlow 0 27) 26) $generated@@155)))))
(let (($generated@@159  (and (=> (= (ControlFlow 0 29) (- 0 30)) ($generated@@39 $generated@@6 ($generated@@10 $generated@@120) $generated@@28)) (=> ($generated@@39 $generated@@6 ($generated@@10 $generated@@120) $generated@@28) (=> (and ($generated@@27 $generated@@6 ($generated@@10 $generated@@120) $generated@@28 $generated@@117) ($generated@@23 $generated@@120)) (and (=> (= (ControlFlow 0 29) 27) $generated@@158) (=> (= (ControlFlow 0 29) 28) $generated@@157)))))))
(let (($generated@@160 true))
(let (($generated@@161  (=> (forall (($generated@@162 Int) ) (!  (=> (<= ($generated@@22 0) $generated@@162) (and ($generated@@23 $generated@@162) (=> ($generated@@21 $generated@@162) ($generated@@42 $generated@@162))))
 :pattern ( ($generated@@41 $generated@@162))
 :pattern ( ($generated@@21 $generated@@162))
)) (and (=> (= (ControlFlow 0 31) (- 0 32)) (forall (($generated@@163 Int) ) (!  (=> (and (<= ($generated@@22 0) $generated@@163) ($generated@@21 $generated@@163)) ($generated@@41 $generated@@163))
 :pattern ( ($generated@@41 $generated@@163))
 :pattern ( ($generated@@21 $generated@@163))
))) (=> (forall (($generated@@164 Int) ) (!  (=> (and (<= ($generated@@22 0) $generated@@164) ($generated@@21 $generated@@164)) ($generated@@41 $generated@@164))
 :pattern ( ($generated@@41 $generated@@164))
 :pattern ( ($generated@@21 $generated@@164))
)) (and (=> (= (ControlFlow 0 31) 29) $generated@@159) (=> (= (ControlFlow 0 31) 3) $generated@@160)))))))
(let (($generated@@165  (=> (and (not (and (<= ($generated@@22 0) $generated@@121) ($generated@@21 $generated@@121))) (= (ControlFlow 0 34) 31)) $generated@@161)))
(let (($generated@@166  (=> (and (and (and (<= ($generated@@22 0) $generated@@121) ($generated@@21 $generated@@121)) ($generated@@27 $generated@@6 ($generated@@10 $generated@@121) $generated $generated@@117)) (and ($generated@@42 $generated@@121) (= (ControlFlow 0 33) 31))) $generated@@161)))
(let (($generated@@167  (=> (< $generated@@121 ($generated@@22 0)) (and (=> (= (ControlFlow 0 37) 33) $generated@@166) (=> (= (ControlFlow 0 37) 34) $generated@@165)))))
(let (($generated@@168  (=> (<= ($generated@@22 0) $generated@@121) (and (=> (= (ControlFlow 0 35) (- 0 36)) ($generated@@39 $generated@@6 ($generated@@10 $generated@@121) $generated@@28)) (=> ($generated@@39 $generated@@6 ($generated@@10 $generated@@121) $generated@@28) (=> (and ($generated@@27 $generated@@6 ($generated@@10 $generated@@121) $generated@@28 $generated@@117) ($generated@@23 $generated@@121)) (and (=> (= (ControlFlow 0 35) 33) $generated@@166) (=> (= (ControlFlow 0 35) 34) $generated@@165))))))))
(let (($generated@@169  (and (=> (= (ControlFlow 0 38) 35) $generated@@168) (=> (= (ControlFlow 0 38) 37) $generated@@167))))
(let (($generated@@170 true))
(let (($generated@@171  (=> (forall (($generated@@172 Int) ) (!  (and ($generated@@23 $generated@@172) (=> ($generated@@21 $generated@@172) ($generated@@42 $generated@@172)))
 :pattern ( ($generated@@41 $generated@@172))
 :pattern ( ($generated@@21 $generated@@172))
)) (and (=> (= (ControlFlow 0 39) (- 0 40)) (forall (($generated@@173 Int) ) (!  (=> ($generated@@21 $generated@@173) ($generated@@41 $generated@@173))
 :pattern ( ($generated@@41 $generated@@173))
 :pattern ( ($generated@@21 $generated@@173))
))) (=> (forall (($generated@@174 Int) ) (!  (=> ($generated@@21 $generated@@174) ($generated@@41 $generated@@174))
 :pattern ( ($generated@@41 $generated@@174))
 :pattern ( ($generated@@21 $generated@@174))
)) (and (=> (= (ControlFlow 0 39) 38) $generated@@169) (=> (= (ControlFlow 0 39) 2) $generated@@170)))))))
(let (($generated@@175  (=> (and (not ($generated@@21 $generated@@122)) (= (ControlFlow 0 42) 39)) $generated@@171)))
(let (($generated@@176  (=> (and (and ($generated@@21 $generated@@122) ($generated@@27 $generated@@6 ($generated@@10 $generated@@122) $generated $generated@@117)) (and ($generated@@42 $generated@@122) (= (ControlFlow 0 41) 39))) $generated@@171)))
(let (($generated@@177  (and (=> (= (ControlFlow 0 43) (- 0 44)) ($generated@@39 $generated@@6 ($generated@@10 $generated@@122) $generated@@28)) (=> ($generated@@39 $generated@@6 ($generated@@10 $generated@@122) $generated@@28) (=> (and ($generated@@27 $generated@@6 ($generated@@10 $generated@@122) $generated@@28 $generated@@117) ($generated@@23 $generated@@122)) (and (=> (= (ControlFlow 0 43) 41) $generated@@176) (=> (= (ControlFlow 0 43) 42) $generated@@175)))))))
(let (($generated@@178 true))
(let (($generated@@179  (=> (forall (($generated@@180 Int) ) (!  (=> (<= ($generated@@22 0) $generated@@180) (and ($generated@@23 $generated@@180) (=> ($generated@@21 $generated@@180) ($generated@@42 $generated@@180))))
 :pattern ( ($generated@@41 $generated@@180))
 :pattern ( ($generated@@21 $generated@@180))
)) (and (=> (= (ControlFlow 0 45) (- 0 46)) (forall (($generated@@181 Int) ) (!  (=> (<= ($generated@@22 0) $generated@@181) (=> ($generated@@21 $generated@@181) ($generated@@41 $generated@@181)))
 :pattern ( ($generated@@41 $generated@@181))
 :pattern ( ($generated@@21 $generated@@181))
))) (=> (forall (($generated@@182 Int) ) (!  (=> (<= ($generated@@22 0) $generated@@182) (=> ($generated@@21 $generated@@182) ($generated@@41 $generated@@182)))
 :pattern ( ($generated@@41 $generated@@182))
 :pattern ( ($generated@@21 $generated@@182))
)) (and (=> (= (ControlFlow 0 45) 43) $generated@@177) (=> (= (ControlFlow 0 45) 1) $generated@@178)))))))
(let (($generated@@183  (=> (and (not ($generated@@21 $generated@@123)) (= (ControlFlow 0 49) 45)) $generated@@179)))
(let (($generated@@184  (=> (and (and ($generated@@21 $generated@@123) ($generated@@27 $generated@@6 ($generated@@10 $generated@@123) $generated $generated@@117)) (and ($generated@@42 $generated@@123) (= (ControlFlow 0 48) 45))) $generated@@179)))
(let (($generated@@185  (=> (<= ($generated@@22 0) $generated@@123) (=> (and ($generated@@27 $generated@@6 ($generated@@10 $generated@@123) $generated@@28 $generated@@117) ($generated@@23 $generated@@123)) (and (=> (= (ControlFlow 0 50) 48) $generated@@184) (=> (= (ControlFlow 0 50) 49) $generated@@183))))))
(let (($generated@@186  (=> (and (< $generated@@123 ($generated@@22 0)) (= (ControlFlow 0 47) 45)) $generated@@179)))
(let (($generated@@187  (=> (= $generated@@124 ($generated@@49 $generated@@125 $generated@@117 $generated@@1 false)) (and (=> (= (ControlFlow 0 51) 50) $generated@@185) (=> (= (ControlFlow 0 51) 47) $generated@@186)))))
(let (($generated@@188  (=> (and (and ($generated@@126 $generated@@117) ($generated@@127 $generated@@117)) (and (= 1 $generated@@20) (= (ControlFlow 0 52) 51))) $generated@@187)))
$generated@@188))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 43) (- 44))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 29) (- 30))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 21) (- 22))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
