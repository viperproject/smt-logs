(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.EvenNat (Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun |_module.__default.EvenNat#canCall| (Int) Bool)
(declare-fun Mod (Int Int) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _module.__default.TrueInt (Int) Bool)
(declare-fun |_module.__default.TrueInt#canCall| (Int) Bool)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.nat tytagFamily$nat)
)
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0| Int) ) (!  (=> (or (|_module.__default.EvenNat#canCall| (LitInt |n#0|)) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0|))) (= (_module.__default.EvenNat (LitInt |n#0|)) (= (LitInt (Mod |n#0| (LitInt 2))) (LitInt 0))))
 :weight 3
 :pattern ( (_module.__default.EvenNat (LitInt |n#0|)))
))))
(assert (= (Tag TInt) TagInt))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0@@1| Int) ) (!  (=> (or (|_module.__default.TrueInt#canCall| |x#0@@1|) (< 0 $FunctionContextHeight)) (= (_module.__default.TrueInt |x#0@@1|) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (_module.__default.TrueInt |x#0@@1|))
))))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mod x@@6 y) (mod x@@6 y))
 :pattern ( (Mod x@@6 y))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|x#0@@2| Int) ) (!  (=> (or (|_module.__default.TrueInt#canCall| (LitInt |x#0@@2|)) (< 0 $FunctionContextHeight)) (= (_module.__default.TrueInt (LitInt |x#0@@2|)) (U_2_bool (Lit boolType (bool_2_U true)))))
 :weight 3
 :pattern ( (_module.__default.TrueInt (LitInt |x#0@@2|)))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0@@0| Int) ) (!  (=> (or (|_module.__default.EvenNat#canCall| |n#0@@0|) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0@@0|))) (= (_module.__default.EvenNat |n#0@@0|) (= (Mod |n#0@@0| (LitInt 2)) (LitInt 0))))
 :pattern ( (_module.__default.EvenNat |n#0@@0|))
))))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@8)) (Lit BoxType ($Box T@@2 x@@8)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@8)))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :pattern ( ($IsAlloc intType v TInt h))
)))
(assert (forall ((v@@0 T@U) ) (! ($Is intType v@@0 TInt)
 :pattern ( ($Is intType v@@0 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |n#6@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |n#4@0| () Int)
(declare-fun |n#2@0| () Int)
(declare-fun |x#4@0| () Int)
(declare-fun |x#2@0| () Int)
(declare-fun |x#0@0| () Int)
(declare-fun |n#0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 52) (let ((anon25_correct  (=> (and (forall ((|n#7| Int) ) (!  (=> (<= (LitInt 0) |n#7|) (|_module.__default.EvenNat#canCall| |n#7|))
 :pattern ( (_module.__default.EvenNat |n#7|))
)) (= (ControlFlow 0 6) (- 0 5))) (forall ((|n#7@@0| Int) ) (!  (=> (<= (LitInt 0) |n#7@@0|) (=> (_module.__default.EvenNat |n#7@@0|) true))
 :pattern ( (_module.__default.EvenNat |n#7@@0|))
)))))
(let ((anon41_Else_correct  (=> (and (not (_module.__default.EvenNat |n#6@0|)) (= (ControlFlow 0 9) 6)) anon25_correct)))
(let ((anon41_Then_correct  (=> (and (_module.__default.EvenNat |n#6@0|) (= (ControlFlow 0 8) 6)) anon25_correct)))
(let ((anon40_Then_correct  (=> (<= (LitInt 0) |n#6@0|) (=> (and ($IsAlloc intType (int_2_U |n#6@0|) Tclass._System.nat $Heap) (|_module.__default.EvenNat#canCall| |n#6@0|)) (and (=> (= (ControlFlow 0 10) 8) anon41_Then_correct) (=> (= (ControlFlow 0 10) 9) anon41_Else_correct))))))
(let ((anon40_Else_correct  (=> (and (< |n#6@0| (LitInt 0)) (= (ControlFlow 0 7) 6)) anon25_correct)))
(let ((anon22_correct  (=> (forall ((|n#5| Int) ) (!  (=> (<= (LitInt 0) |n#5|) (|_module.__default.EvenNat#canCall| |n#5|))
 :pattern ( (_module.__default.EvenNat |n#5|))
)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (forall ((|n#5@@0| Int) ) (!  (=> (and (<= (LitInt 0) |n#5@@0|) (_module.__default.EvenNat |n#5@@0|)) (= |n#5@@0| |n#5@@0|))
 :pattern ( (_module.__default.EvenNat |n#5@@0|))
))) (=> (forall ((|n#5@@1| Int) ) (!  (=> (and (<= (LitInt 0) |n#5@@1|) (_module.__default.EvenNat |n#5@@1|)) (= |n#5@@1| |n#5@@1|))
 :pattern ( (_module.__default.EvenNat |n#5@@1|))
)) (and (=> (= (ControlFlow 0 11) 10) anon40_Then_correct) (=> (= (ControlFlow 0 11) 7) anon40_Else_correct)))))))
(let ((anon39_Else_correct  (=> (and (not (_module.__default.EvenNat |n#4@0|)) (= (ControlFlow 0 15) 11)) anon22_correct)))
(let ((anon39_Then_correct  (=> (and (_module.__default.EvenNat |n#4@0|) (= (ControlFlow 0 14) 11)) anon22_correct)))
(let ((anon38_Then_correct  (=> (<= (LitInt 0) |n#4@0|) (=> (and ($IsAlloc intType (int_2_U |n#4@0|) Tclass._System.nat $Heap) (|_module.__default.EvenNat#canCall| |n#4@0|)) (and (=> (= (ControlFlow 0 16) 14) anon39_Then_correct) (=> (= (ControlFlow 0 16) 15) anon39_Else_correct))))))
(let ((anon38_Else_correct  (=> (and (< |n#4@0| (LitInt 0)) (= (ControlFlow 0 13) 11)) anon22_correct)))
(let ((anon19_correct  (=> (forall ((|n#3| Int) ) (!  (and (|_module.__default.EvenNat#canCall| |n#3|) (=> (_module.__default.EvenNat |n#3|) (|_module.__default.TrueInt#canCall| |n#3|)))
 :pattern ( (_module.__default.TrueInt |n#3|))
 :pattern ( (_module.__default.EvenNat |n#3|))
)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (forall ((|n#3@@0| Int) ) (!  (=> (_module.__default.EvenNat |n#3@@0|) (_module.__default.TrueInt |n#3@@0|))
 :pattern ( (_module.__default.TrueInt |n#3@@0|))
 :pattern ( (_module.__default.EvenNat |n#3@@0|))
))) (=> (forall ((|n#3@@1| Int) ) (!  (=> (_module.__default.EvenNat |n#3@@1|) (_module.__default.TrueInt |n#3@@1|))
 :pattern ( (_module.__default.TrueInt |n#3@@1|))
 :pattern ( (_module.__default.EvenNat |n#3@@1|))
)) (and (=> (= (ControlFlow 0 17) 16) anon38_Then_correct) (=> (= (ControlFlow 0 17) 13) anon38_Else_correct)))))))
(let ((anon37_Else_correct  (=> (and (not (_module.__default.EvenNat |n#2@0|)) (= (ControlFlow 0 20) 17)) anon19_correct)))
(let ((anon37_Then_correct  (=> (and (and (_module.__default.EvenNat |n#2@0|) ($IsAlloc intType (int_2_U |n#2@0|) TInt $Heap)) (and (|_module.__default.TrueInt#canCall| |n#2@0|) (= (ControlFlow 0 19) 17))) anon19_correct)))
(let ((anon36_Then_correct  (and (=> (= (ControlFlow 0 21) (- 0 22)) ($Is intType (int_2_U |n#2@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |n#2@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |n#2@0|) Tclass._System.nat $Heap) (|_module.__default.EvenNat#canCall| |n#2@0|)) (and (=> (= (ControlFlow 0 21) 19) anon37_Then_correct) (=> (= (ControlFlow 0 21) 20) anon37_Else_correct)))))))
(let ((anon36_Else_correct true))
(let ((anon16_correct  (=> (forall ((|x#5| Int) ) (!  (and (|_module.__default.EvenNat#canCall| |x#5|) (=> (_module.__default.EvenNat |x#5|) (=> (<= (LitInt 0) |x#5|) (|_module.__default.TrueInt#canCall| |x#5|))))
 :pattern ( (_module.__default.TrueInt |x#5|))
 :pattern ( (_module.__default.EvenNat |x#5|))
)) (and (=> (= (ControlFlow 0 23) (- 0 24)) (forall ((|x#5@@0| Int) ) (!  (=> (and (_module.__default.EvenNat |x#5@@0|) (<= (LitInt 0) |x#5@@0|)) (_module.__default.TrueInt |x#5@@0|))
 :pattern ( (_module.__default.TrueInt |x#5@@0|))
 :pattern ( (_module.__default.EvenNat |x#5@@0|))
))) (=> (forall ((|x#5@@1| Int) ) (!  (=> (and (_module.__default.EvenNat |x#5@@1|) (<= (LitInt 0) |x#5@@1|)) (_module.__default.TrueInt |x#5@@1|))
 :pattern ( (_module.__default.TrueInt |x#5@@1|))
 :pattern ( (_module.__default.EvenNat |x#5@@1|))
)) (and (=> (= (ControlFlow 0 23) 21) anon36_Then_correct) (=> (= (ControlFlow 0 23) 4) anon36_Else_correct)))))))
(let ((anon35_Else_correct  (=> (and (not (and (_module.__default.EvenNat |x#4@0|) (<= (LitInt 0) |x#4@0|))) (= (ControlFlow 0 26) 23)) anon16_correct)))
(let ((anon35_Then_correct  (=> (and (and (and (_module.__default.EvenNat |x#4@0|) (<= (LitInt 0) |x#4@0|)) ($IsAlloc intType (int_2_U |x#4@0|) TInt $Heap)) (and (|_module.__default.TrueInt#canCall| |x#4@0|) (= (ControlFlow 0 25) 23))) anon16_correct)))
(let ((anon34_Else_correct  (=> (not (_module.__default.EvenNat |x#4@0|)) (and (=> (= (ControlFlow 0 28) 25) anon35_Then_correct) (=> (= (ControlFlow 0 28) 26) anon35_Else_correct)))))
(let ((anon34_Then_correct  (=> (_module.__default.EvenNat |x#4@0|) (and (=> (= (ControlFlow 0 27) 25) anon35_Then_correct) (=> (= (ControlFlow 0 27) 26) anon35_Else_correct)))))
(let ((anon33_Then_correct  (and (=> (= (ControlFlow 0 29) (- 0 30)) ($Is intType (int_2_U |x#4@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |x#4@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |x#4@0|) Tclass._System.nat $Heap) (|_module.__default.EvenNat#canCall| |x#4@0|)) (and (=> (= (ControlFlow 0 29) 27) anon34_Then_correct) (=> (= (ControlFlow 0 29) 28) anon34_Else_correct)))))))
(let ((anon33_Else_correct true))
(let ((anon11_correct  (=> (forall ((|x#3| Int) ) (!  (=> (<= (LitInt 0) |x#3|) (and (|_module.__default.EvenNat#canCall| |x#3|) (=> (_module.__default.EvenNat |x#3|) (|_module.__default.TrueInt#canCall| |x#3|))))
 :pattern ( (_module.__default.TrueInt |x#3|))
 :pattern ( (_module.__default.EvenNat |x#3|))
)) (and (=> (= (ControlFlow 0 31) (- 0 32)) (forall ((|x#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |x#3@@0|) (_module.__default.EvenNat |x#3@@0|)) (_module.__default.TrueInt |x#3@@0|))
 :pattern ( (_module.__default.TrueInt |x#3@@0|))
 :pattern ( (_module.__default.EvenNat |x#3@@0|))
))) (=> (forall ((|x#3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |x#3@@1|) (_module.__default.EvenNat |x#3@@1|)) (_module.__default.TrueInt |x#3@@1|))
 :pattern ( (_module.__default.TrueInt |x#3@@1|))
 :pattern ( (_module.__default.EvenNat |x#3@@1|))
)) (and (=> (= (ControlFlow 0 31) 29) anon33_Then_correct) (=> (= (ControlFlow 0 31) 3) anon33_Else_correct)))))))
(let ((anon32_Else_correct  (=> (and (not (and (<= (LitInt 0) |x#2@0|) (_module.__default.EvenNat |x#2@0|))) (= (ControlFlow 0 34) 31)) anon11_correct)))
(let ((anon32_Then_correct  (=> (and (and (and (<= (LitInt 0) |x#2@0|) (_module.__default.EvenNat |x#2@0|)) ($IsAlloc intType (int_2_U |x#2@0|) TInt $Heap)) (and (|_module.__default.TrueInt#canCall| |x#2@0|) (= (ControlFlow 0 33) 31))) anon11_correct)))
(let ((anon31_Else_correct  (=> (< |x#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 37) 33) anon32_Then_correct) (=> (= (ControlFlow 0 37) 34) anon32_Else_correct)))))
(let ((anon31_Then_correct  (=> (<= (LitInt 0) |x#2@0|) (and (=> (= (ControlFlow 0 35) (- 0 36)) ($Is intType (int_2_U |x#2@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |x#2@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |x#2@0|) Tclass._System.nat $Heap) (|_module.__default.EvenNat#canCall| |x#2@0|)) (and (=> (= (ControlFlow 0 35) 33) anon32_Then_correct) (=> (= (ControlFlow 0 35) 34) anon32_Else_correct))))))))
(let ((anon30_Then_correct  (and (=> (= (ControlFlow 0 38) 35) anon31_Then_correct) (=> (= (ControlFlow 0 38) 37) anon31_Else_correct))))
(let ((anon30_Else_correct true))
(let ((anon6_correct  (=> (forall ((|x#1| Int) ) (!  (and (|_module.__default.EvenNat#canCall| |x#1|) (=> (_module.__default.EvenNat |x#1|) (|_module.__default.TrueInt#canCall| |x#1|)))
 :pattern ( (_module.__default.TrueInt |x#1|))
 :pattern ( (_module.__default.EvenNat |x#1|))
)) (and (=> (= (ControlFlow 0 39) (- 0 40)) (forall ((|x#1@@0| Int) ) (!  (=> (_module.__default.EvenNat |x#1@@0|) (_module.__default.TrueInt |x#1@@0|))
 :pattern ( (_module.__default.TrueInt |x#1@@0|))
 :pattern ( (_module.__default.EvenNat |x#1@@0|))
))) (=> (forall ((|x#1@@1| Int) ) (!  (=> (_module.__default.EvenNat |x#1@@1|) (_module.__default.TrueInt |x#1@@1|))
 :pattern ( (_module.__default.TrueInt |x#1@@1|))
 :pattern ( (_module.__default.EvenNat |x#1@@1|))
)) (and (=> (= (ControlFlow 0 39) 38) anon30_Then_correct) (=> (= (ControlFlow 0 39) 2) anon30_Else_correct)))))))
(let ((anon29_Else_correct  (=> (and (not (_module.__default.EvenNat |x#0@0|)) (= (ControlFlow 0 42) 39)) anon6_correct)))
(let ((anon29_Then_correct  (=> (and (and (_module.__default.EvenNat |x#0@0|) ($IsAlloc intType (int_2_U |x#0@0|) TInt $Heap)) (and (|_module.__default.TrueInt#canCall| |x#0@0|) (= (ControlFlow 0 41) 39))) anon6_correct)))
(let ((anon28_Then_correct  (and (=> (= (ControlFlow 0 43) (- 0 44)) ($Is intType (int_2_U |x#0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |x#0@0|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |x#0@0|) Tclass._System.nat $Heap) (|_module.__default.EvenNat#canCall| |x#0@0|)) (and (=> (= (ControlFlow 0 43) 41) anon29_Then_correct) (=> (= (ControlFlow 0 43) 42) anon29_Else_correct)))))))
(let ((anon28_Else_correct true))
(let ((anon3_correct  (=> (forall ((|n#1| Int) ) (!  (=> (<= (LitInt 0) |n#1|) (and (|_module.__default.EvenNat#canCall| |n#1|) (=> (_module.__default.EvenNat |n#1|) (|_module.__default.TrueInt#canCall| |n#1|))))
 :pattern ( (_module.__default.TrueInt |n#1|))
 :pattern ( (_module.__default.EvenNat |n#1|))
)) (and (=> (= (ControlFlow 0 45) (- 0 46)) (forall ((|n#1@@0| Int) ) (!  (=> (<= (LitInt 0) |n#1@@0|) (=> (_module.__default.EvenNat |n#1@@0|) (_module.__default.TrueInt |n#1@@0|)))
 :pattern ( (_module.__default.TrueInt |n#1@@0|))
 :pattern ( (_module.__default.EvenNat |n#1@@0|))
))) (=> (forall ((|n#1@@1| Int) ) (!  (=> (<= (LitInt 0) |n#1@@1|) (=> (_module.__default.EvenNat |n#1@@1|) (_module.__default.TrueInt |n#1@@1|)))
 :pattern ( (_module.__default.TrueInt |n#1@@1|))
 :pattern ( (_module.__default.EvenNat |n#1@@1|))
)) (and (=> (= (ControlFlow 0 45) 43) anon28_Then_correct) (=> (= (ControlFlow 0 45) 1) anon28_Else_correct)))))))
(let ((anon27_Else_correct  (=> (and (not (_module.__default.EvenNat |n#0@0|)) (= (ControlFlow 0 49) 45)) anon3_correct)))
(let ((anon27_Then_correct  (=> (and (and (_module.__default.EvenNat |n#0@0|) ($IsAlloc intType (int_2_U |n#0@0|) TInt $Heap)) (and (|_module.__default.TrueInt#canCall| |n#0@0|) (= (ControlFlow 0 48) 45))) anon3_correct)))
(let ((anon26_Then_correct  (=> (<= (LitInt 0) |n#0@0|) (=> (and ($IsAlloc intType (int_2_U |n#0@0|) Tclass._System.nat $Heap) (|_module.__default.EvenNat#canCall| |n#0@0|)) (and (=> (= (ControlFlow 0 50) 48) anon27_Then_correct) (=> (= (ControlFlow 0 50) 49) anon27_Else_correct))))))
(let ((anon26_Else_correct  (=> (and (< |n#0@0| (LitInt 0)) (= (ControlFlow 0 47) 45)) anon3_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 51) 50) anon26_Then_correct) (=> (= (ControlFlow 0 51) 47) anon26_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 52) 51))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 43) (- 44))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 29) (- 30))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 21) (- 22))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
