(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U Int) Bool)
(declare-fun $generated@@24 (T@U Int) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 (T@T T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@30 (Int Int) Int)
(declare-fun $generated@@31 (T@U T@U Int) Bool)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@37 (T@U Int) Bool)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 () T@U)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@T T@T) T@T)
(declare-fun $generated@@61 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T) T@T)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@91 (T@T T@U) T@U)
(declare-fun $generated@@112 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@113 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@114 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@152 (T@U) T@U)
(declare-fun $generated@@153 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@27) 3))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (or ($generated@@24 $generated@@35 $generated@@36) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@35 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@35 $generated@@28)) (<= ($generated@@29 0) $generated@@36)))) (or (= $generated@@36 ($generated@@29 0)) (= (= ($generated@@30 $generated@@36 ($generated@@29 2)) ($generated@@29 1)) ($generated@@31 ($generated@@32 $generated@@33) $generated@@35 (- $generated@@36 1)))))
 :pattern ( ($generated@@23 $generated@@34 $generated@@35 $generated@@36))
))))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 Int) ) (!  (=> (or ($generated@@37 $generated@@39 ($generated@@29 $generated@@40)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@39 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@39 $generated@@28)) (<= ($generated@@29 0) $generated@@40)))) (and (=> (or (not (= ($generated@@29 $generated@@40) ($generated@@29 0))) (not true)) ($generated@@24 $generated@@39 ($generated@@29 (- $generated@@40 1)))) (= ($generated@@31 ($generated@@32 $generated@@38) $generated@@39 ($generated@@29 $generated@@40))  (or (= ($generated@@29 $generated@@40) ($generated@@29 0)) ($generated@@23 ($generated@@32 $generated@@38) $generated@@39 ($generated@@29 (- $generated@@40 1)))))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@32 $generated@@38) $generated@@39 ($generated@@29 $generated@@40)))
))))
(assert ($generated@@41 $generated@@42))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@44 $generated@@42)  (or (= $generated@@44 $generated@@25) (= ($generated@@43 $generated@@44) $generated@@42)))
 :pattern ( ($generated@@26 $generated@@27 $generated@@44 $generated@@42))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 Int) ) (!  (=> (or ($generated@@24 $generated@@47 ($generated@@29 $generated@@48)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@47 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@47 $generated@@28)) (<= ($generated@@29 0) $generated@@48)))) (and (=> ($generated@@11 ($generated@@45 $generated@@7 ($generated@@10  (or (not (= $generated@@48 0)) (not true))))) ($generated@@37 $generated@@47 ($generated@@29 (- $generated@@48 1)))) (= ($generated@@23 ($generated@@32 $generated@@46) $generated@@47 ($generated@@29 $generated@@48))  (and (or (not (= $generated@@48 0)) (not true)) ($generated@@31 ($generated@@32 $generated@@46) $generated@@47 ($generated@@29 (- $generated@@48 1)))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@32 $generated@@46) $generated@@47 ($generated@@29 $generated@@48)))
))))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@49 $generated@@27 $generated@@52 $generated@@50 $generated@@53) ($generated@@49 $generated@@27 $generated@@52 $generated@@51 $generated@@53))
 :pattern ( ($generated@@49 $generated@@27 $generated@@52 $generated@@50 $generated@@53))
 :pattern ( ($generated@@49 $generated@@27 $generated@@52 $generated@@51 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@49 $generated@@27 $generated@@54 $generated@@28 $generated@@55) ($generated@@49 $generated@@27 $generated@@54 $generated@@42 $generated@@55))
 :pattern ( ($generated@@49 $generated@@27 $generated@@54 $generated@@28 $generated@@55))
 :pattern ( ($generated@@49 $generated@@27 $generated@@54 $generated@@42 $generated@@55))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@57 $generated@@64 $generated@@65 ($generated@@61 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@66) $generated@@68) $generated@@66)
 :weight 0
)) (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (or (= $generated@@73 $generated@@74) (= ($generated@@57 $generated@@69 $generated@@70 ($generated@@61 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@71) $generated@@74) ($generated@@57 $generated@@69 $generated@@70 $generated@@72 $generated@@74)))
 :weight 0
))) (= ($generated@@6 $generated@@58) 4)) (= ($generated@@6 $generated@@59) 5)) (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (= ($generated@@6 ($generated@@60 $generated@@75 $generated@@76)) 6))) (forall (($generated@@77 T@T) ($generated@@78 T@T) ) (! (= ($generated@@62 ($generated@@60 $generated@@77 $generated@@78)) $generated@@77)
 :pattern ( ($generated@@60 $generated@@77 $generated@@78))
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ) (! (= ($generated@@63 ($generated@@60 $generated@@79 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@60 $generated@@79 $generated@@80))
))))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@49 $generated@@27 $generated@@81 $generated@@51 $generated@@82)  (or (= $generated@@81 $generated@@25) ($generated@@11 ($generated@@56 $generated@@7 ($generated@@57 $generated@@58 $generated@@59 ($generated@@57 $generated@@27 ($generated@@60 $generated@@58 $generated@@59) $generated@@82 $generated@@81) $generated)))))
 :pattern ( ($generated@@49 $generated@@27 $generated@@81 $generated@@51 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@49 $generated@@27 $generated@@83 $generated@@42 $generated@@84)  (or (= $generated@@83 $generated@@25) ($generated@@11 ($generated@@56 $generated@@7 ($generated@@57 $generated@@58 $generated@@59 ($generated@@57 $generated@@27 ($generated@@60 $generated@@58 $generated@@59) $generated@@84 $generated@@83) $generated)))))
 :pattern ( ($generated@@49 $generated@@27 $generated@@83 $generated@@42 $generated@@84))
)))
(assert (forall (($generated@@85 Int) ) (! (= ($generated@@29 $generated@@85) $generated@@85)
 :pattern ( ($generated@@29 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@45 $generated@@87 $generated@@86) $generated@@86)
 :pattern ( ($generated@@45 $generated@@87 $generated@@86))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 Int) ) (!  (=> (or ($generated@@37 $generated@@89 $generated@@90) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@89 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@89 $generated@@28)) (<= ($generated@@29 0) $generated@@90)))) (and (=> (or (not (= $generated@@90 ($generated@@29 0))) (not true)) ($generated@@24 $generated@@89 (- $generated@@90 1))) (= ($generated@@31 ($generated@@32 $generated@@88) $generated@@89 $generated@@90)  (or (= $generated@@90 ($generated@@29 0)) ($generated@@23 $generated@@88 $generated@@89 (- $generated@@90 1))))))
 :pattern ( ($generated@@31 ($generated@@32 $generated@@88) $generated@@89 $generated@@90))
))))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@91 $generated@@93 ($generated@@56 $generated@@93 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@56 $generated@@93 $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 Int) ) (! (= ($generated@@31 ($generated@@32 $generated@@94) $generated@@95 $generated@@96) ($generated@@31 $generated@@94 $generated@@95 $generated@@96))
 :pattern ( ($generated@@31 ($generated@@32 $generated@@94) $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 Int) ) (! (= ($generated@@23 ($generated@@32 $generated@@97) $generated@@98 $generated@@99) ($generated@@23 $generated@@97 $generated@@98 $generated@@99))
 :pattern ( ($generated@@23 ($generated@@32 $generated@@97) $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@100 $generated@@50)  (and ($generated@@26 $generated@@27 $generated@@100 $generated@@51) (or (not (= $generated@@100 $generated@@25)) (not true))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@100 $generated@@50))
 :pattern ( ($generated@@26 $generated@@27 $generated@@100 $generated@@51))
)))
(assert (forall (($generated@@101 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@101 $generated@@28)  (and ($generated@@26 $generated@@27 $generated@@101 $generated@@42) (or (not (= $generated@@101 $generated@@25)) (not true))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@101 $generated@@28))
 :pattern ( ($generated@@26 $generated@@27 $generated@@101 $generated@@42))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ) (!  (=> ($generated@@49 $generated@@27 $generated@@102 $generated@@42 $generated@@103) ($generated@@49 $generated@@27 $generated@@102 $generated@@51 $generated@@103))
 :pattern ( ($generated@@49 $generated@@27 $generated@@102 $generated@@42 $generated@@103))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 Int) ) (!  (=> (or ($generated@@37 ($generated@@45 $generated@@27 $generated@@105) ($generated@@29 $generated@@106)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@105 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@105 $generated@@28)) (<= ($generated@@29 0) $generated@@106)))) (and (=> (or (not (= ($generated@@29 $generated@@106) ($generated@@29 0))) (not true)) ($generated@@24 ($generated@@45 $generated@@27 $generated@@105) ($generated@@29 (- $generated@@106 1)))) (= ($generated@@31 ($generated@@32 $generated@@104) ($generated@@45 $generated@@27 $generated@@105) ($generated@@29 $generated@@106))  (or (= ($generated@@29 $generated@@106) ($generated@@29 0)) ($generated@@23 ($generated@@32 $generated@@104) ($generated@@45 $generated@@27 $generated@@105) ($generated@@29 (- $generated@@106 1)))))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@32 $generated@@104) ($generated@@45 $generated@@27 $generated@@105) ($generated@@29 $generated@@106)))
))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@T) ) (! (= ($generated@@56 $generated@@108 ($generated@@91 $generated@@108 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@91 $generated@@108 $generated@@107))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 Int) ) (!  (=> (or ($generated@@24 $generated@@110 $generated@@111) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@110 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@110 $generated@@28)) (<= ($generated@@29 0) $generated@@111)))) (and (=> (or (not (= $generated@@111 0)) (not true)) ($generated@@37 $generated@@110 (- $generated@@111 1))) (= ($generated@@23 ($generated@@32 $generated@@109) $generated@@110 $generated@@111)  (and (or (not (= $generated@@111 0)) (not true)) ($generated@@31 $generated@@109 $generated@@110 (- $generated@@111 1))))))
 :pattern ( ($generated@@23 ($generated@@32 $generated@@109) $generated@@110 $generated@@111))
))))
(assert  (and (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@112 $generated@@115 $generated@@116 $generated@@117 ($generated@@114 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@120 $generated@@121) $generated@@118)
 :weight 0
)) (and (forall (($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@112 $generated@@122 $generated@@123 $generated@@124 ($generated@@114 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@128 $generated@@125) $generated@@129 $generated@@130) ($generated@@112 $generated@@122 $generated@@123 $generated@@124 $generated@@126 $generated@@129 $generated@@130)))
 :weight 0
)) (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@112 $generated@@131 $generated@@132 $generated@@133 ($generated@@114 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@112 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
)))))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 Bool) ($generated@@144 T@U) ($generated@@145 T@U) ) (! (= ($generated@@11 ($generated@@112 $generated@@27 $generated@@58 $generated@@7 ($generated@@113 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@144 $generated@@145))  (=> (and (or (not (= $generated@@144 $generated@@140)) (not true)) ($generated@@11 ($generated@@56 $generated@@7 ($generated@@57 $generated@@58 $generated@@59 ($generated@@57 $generated@@27 ($generated@@60 $generated@@58 $generated@@59) $generated@@141 $generated@@144) $generated@@142)))) $generated@@143))
 :pattern ( ($generated@@112 $generated@@27 $generated@@58 $generated@@7 ($generated@@113 $generated@@140 $generated@@141 $generated@@142 $generated@@143) $generated@@144 $generated@@145))
)))
(assert (forall (($generated@@146 Int) ($generated@@147 Int) ) (! (= ($generated@@30 $generated@@146 $generated@@147) (mod $generated@@146 $generated@@147))
 :pattern ( ($generated@@30 $generated@@146 $generated@@147))
)))
(assert  (=> (<= 0 $generated@@22) (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 Int) ) (!  (=> (or ($generated@@24 ($generated@@45 $generated@@27 $generated@@149) ($generated@@29 $generated@@150)) (and (< 0 $generated@@22) (and (and (or (not (= $generated@@149 $generated@@25)) (not true)) ($generated@@26 $generated@@27 $generated@@149 $generated@@28)) (<= ($generated@@29 0) $generated@@150)))) (and (=> ($generated@@11 ($generated@@45 $generated@@7 ($generated@@10  (or (not (= $generated@@150 0)) (not true))))) ($generated@@37 ($generated@@45 $generated@@27 $generated@@149) ($generated@@29 (- $generated@@150 1)))) (= ($generated@@23 ($generated@@32 $generated@@148) ($generated@@45 $generated@@27 $generated@@149) ($generated@@29 $generated@@150)) ($generated@@11 ($generated@@45 $generated@@7 ($generated@@10  (and (or (not (= $generated@@150 0)) (not true)) ($generated@@31 ($generated@@32 $generated@@148) ($generated@@45 $generated@@27 $generated@@149) ($generated@@29 (- $generated@@150 1))))))))))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@32 $generated@@148) ($generated@@45 $generated@@27 $generated@@149) ($generated@@29 $generated@@150)))
))))
(assert (forall (($generated@@151 T@U) ) (!  (=> ($generated@@26 $generated@@27 $generated@@151 $generated@@42) ($generated@@26 $generated@@27 $generated@@151 $generated@@51))
 :pattern ( ($generated@@26 $generated@@27 $generated@@151 $generated@@42))
)))
(assert (= ($generated@@152 $generated@@51) $generated@@0))
(assert (= ($generated@@153 $generated@@51) $generated@@4))
(assert (= ($generated@@152 $generated@@50) $generated@@1))
(assert (= ($generated@@153 $generated@@50) $generated@@4))
(assert (= ($generated@@152 $generated@@42) $generated@@2))
(assert (= ($generated@@153 $generated@@42) $generated@@5))
(assert (= ($generated@@152 $generated@@28) $generated@@3))
(assert (= ($generated@@153 $generated@@28) $generated@@5))
(assert (forall (($generated@@154 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@154 $generated@@51)  (or (= $generated@@154 $generated@@25) ($generated@@41 ($generated@@43 $generated@@154))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@154 $generated@@51))
)))
(assert (forall (($generated@@155 Int) ) (! (= ($generated@@91 $generated@@8 ($generated@@12 ($generated@@29 $generated@@155))) ($generated@@45 $generated@@59 ($generated@@91 $generated@@8 ($generated@@12 $generated@@155))))
 :pattern ( ($generated@@91 $generated@@8 ($generated@@12 ($generated@@29 $generated@@155))))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@T) ) (! (= ($generated@@91 $generated@@157 ($generated@@45 $generated@@157 $generated@@156)) ($generated@@45 $generated@@59 ($generated@@91 $generated@@157 $generated@@156)))
 :pattern ( ($generated@@91 $generated@@157 ($generated@@45 $generated@@157 $generated@@156)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@158 () Int)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 (T@U) Bool)
(declare-fun $generated@@163 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@164  (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= $generated@@158 $generated@@158)) (=> (<= $generated@@158 $generated@@158) (=> (= $generated@@159 ($generated@@113 $generated@@25 $generated@@160 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@165 T@U) ($generated@@166 T@U) ) true)) (=> (forall (($generated@@167 T@U) ($generated@@168 T@U) ) true) (=> (and (or (= $generated@@158 ($generated@@29 0)) (= (= ($generated@@30 $generated@@158 ($generated@@29 2)) ($generated@@29 1)) ($generated@@31 ($generated@@32 $generated@@33) $generated@@161 (- $generated@@158 1)))) (= (ControlFlow 0 2) (- 0 1))) (or (= $generated@@158 ($generated@@29 0)) (= (= ($generated@@30 $generated@@158 ($generated@@29 2)) ($generated@@29 1)) ($generated@@31 ($generated@@32 ($generated@@32 $generated@@33)) $generated@@161 (- $generated@@158 1))))))))))))
(let (($generated@@169  (=> (and ($generated@@162 $generated@@160) ($generated@@163 $generated@@160)) (=> (and (and (and (or (not (= $generated@@161 $generated@@25)) (not true)) (and ($generated@@26 $generated@@27 $generated@@161 $generated@@28) ($generated@@49 $generated@@27 $generated@@161 $generated@@28 $generated@@160))) (<= ($generated@@29 0) $generated@@158)) (and (= 0 $generated@@22) (= (ControlFlow 0 5) 2))) $generated@@164))))
$generated@@169)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
