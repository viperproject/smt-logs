(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 () T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@U Int) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@26 (T@U) Int)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U T@U) T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@36 (T@U T@U) Bool)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@53 () Int)
(declare-fun $generated@@54 (T@U) T@U)
(declare-fun $generated@@59 (Int) T@U)
(declare-fun $generated@@60 (T@U) Int)
(declare-fun $generated@@62 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 (T@T T@T) T@T)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@72 (T@T) T@T)
(declare-fun $generated@@121 (T@U) T@U)
(declare-fun $generated@@122 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@3 $generated@@22) 3))
(assert (= $generated@@20 ($generated@@21 $generated@@22 ($generated@@23 $generated@@24 ($generated@@25 4)))))
(assert (= ($generated@@26 $generated@@27) 0))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@25 $generated@@28) $generated@@28)
 :pattern ( ($generated@@25 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (= ($generated@@3 $generated@@33) 4))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> (and ($generated@@32 $generated@@33 $generated@@37 ($generated@@35 $generated@@39)) ($generated@@36 $generated@@38 $generated@@39)) ($generated@@32 $generated@@33 ($generated@@34 $generated@@37 $generated@@38) ($generated@@35 $generated@@39)))
 :pattern ( ($generated@@32 $generated@@33 ($generated@@34 $generated@@37 $generated@@38) ($generated@@35 $generated@@39)))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@21 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@21 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@26 ($generated@@34 $generated@@43 $generated@@44)) (+ 1 ($generated@@26 $generated@@43)))
 :pattern ( ($generated@@34 $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 Int) ($generated@@47 T@U) ) (!  (and (=> (= $generated@@46 ($generated@@26 $generated@@45)) (= ($generated@@23 ($generated@@34 $generated@@45 $generated@@47) $generated@@46) $generated@@47)) (=> (or (not (= $generated@@46 ($generated@@26 $generated@@45))) (not true)) (= ($generated@@23 ($generated@@34 $generated@@45 $generated@@47) $generated@@46) ($generated@@23 $generated@@45 $generated@@46))))
 :pattern ( ($generated@@23 ($generated@@34 $generated@@45 $generated@@47) $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ) (!  (=> ($generated@@36 $generated@@48 $generated) (and (= ($generated@@40 $generated@@22 ($generated@@21 $generated@@22 $generated@@48)) $generated@@48) ($generated@@32 $generated@@22 ($generated@@21 $generated@@22 $generated@@48) $generated)))
 :pattern ( ($generated@@36 $generated@@48 $generated))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@36 ($generated@@40 $generated@@51 $generated@@49) $generated@@50) ($generated@@32 $generated@@51 $generated@@49 $generated@@50))
 :pattern ( ($generated@@36 ($generated@@40 $generated@@51 $generated@@49) $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ) (! (<= 0 ($generated@@26 $generated@@52))
 :pattern ( ($generated@@26 $generated@@52))
)))
(assert  (=> (< 1 $generated@@53) ($generated@@32 $generated@@22 $generated@@20 $generated)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@54 ($generated@@35 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@35 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@19 ($generated@@35 $generated@@56)) $generated@@1)
 :pattern ( ($generated@@35 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@21 $generated@@58 ($generated@@40 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@40 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@61 Int) ) (!  (=> (or (and (<= 0 $generated@@61) (< $generated@@61 55296)) (and (<= 57344 $generated@@61) (< $generated@@61 1114112))) (= ($generated@@60 ($generated@@59 $generated@@61)) $generated@@61))
 :pattern ( ($generated@@59 $generated@@61))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@62 $generated@@73 $generated@@74 $generated@@75 ($generated@@69 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@78 $generated@@79) $generated@@76)
 :weight 0
)) (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@62 $generated@@80 $generated@@81 $generated@@82 ($generated@@69 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@62 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@62 $generated@@89 $generated@@90 $generated@@91 ($generated@@69 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@62 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)))) (= ($generated@@3 $generated@@63) 5)) (= ($generated@@3 $generated@@64) 6)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@66 $generated@@98 $generated@@99 ($generated@@70 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@100) $generated@@102) $generated@@100)
 :weight 0
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@107 $generated@@108) (= ($generated@@66 $generated@@103 $generated@@104 ($generated@@70 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@108) ($generated@@66 $generated@@103 $generated@@104 $generated@@106 $generated@@108)))
 :weight 0
))) (= ($generated@@3 $generated@@67) 7)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (= ($generated@@3 ($generated@@68 $generated@@109 $generated@@110)) 8))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@71 ($generated@@68 $generated@@111 $generated@@112)) $generated@@111)
 :pattern ( ($generated@@68 $generated@@111 $generated@@112))
))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@72 ($generated@@68 $generated@@113 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@68 $generated@@113 $generated@@114))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 Bool) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@8 ($generated@@62 $generated@@63 $generated@@64 $generated@@4 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))  (=> (and (or (not (= $generated@@119 $generated@@115)) (not true)) ($generated@@8 ($generated@@21 $generated@@4 ($generated@@66 $generated@@64 $generated@@67 ($generated@@66 $generated@@63 ($generated@@68 $generated@@64 $generated@@67) $generated@@116 $generated@@119) $generated@@117)))) $generated@@118))
 :pattern ( ($generated@@62 $generated@@63 $generated@@64 $generated@@4 ($generated@@65 $generated@@115 $generated@@116 $generated@@117 $generated@@118) $generated@@119 $generated@@120))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (!  (and (= ($generated@@121 ($generated@@34 $generated@@123 $generated@@124)) $generated@@123) (= ($generated@@122 ($generated@@34 $generated@@123 $generated@@124)) $generated@@124))
 :pattern ( ($generated@@34 $generated@@123 $generated@@124))
)))
(assert  (=> (< 0 $generated@@53) ($generated@@32 $generated@@33 $generated@@24 ($generated@@35 $generated))))
(assert (= $generated@@24 ($generated@@29 $generated@@33 ($generated@@34 ($generated@@34 ($generated@@34 ($generated@@34 ($generated@@34 $generated@@27 ($generated@@40 $generated@@22 ($generated@@59 97))) ($generated@@40 $generated@@22 ($generated@@59 98))) ($generated@@40 $generated@@22 ($generated@@59 99))) ($generated@@40 $generated@@22 ($generated@@59 100))) ($generated@@40 $generated@@22 ($generated@@59 101))))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> ($generated@@36 $generated@@125 ($generated@@35 $generated@@126)) (and (= ($generated@@40 $generated@@33 ($generated@@21 $generated@@33 $generated@@125)) $generated@@125) ($generated@@32 $generated@@33 ($generated@@21 $generated@@33 $generated@@125) ($generated@@35 $generated@@126))))
 :pattern ( ($generated@@36 $generated@@125 ($generated@@35 $generated@@126)))
)))
(assert (forall (($generated@@127 T@U) ) (!  (and (= ($generated@@59 ($generated@@60 $generated@@127)) $generated@@127) (or (and (<= 0 ($generated@@60 $generated@@127)) (< ($generated@@60 $generated@@127) 55296)) (and (<= 57344 ($generated@@60 $generated@@127)) (< ($generated@@60 $generated@@127) 1114112))))
 :pattern ( ($generated@@60 $generated@@127))
)))
(assert (forall (($generated@@128 Int) ) (! (= ($generated@@40 $generated@@5 ($generated@@9 ($generated@@25 $generated@@128))) ($generated@@29 $generated@@67 ($generated@@40 $generated@@5 ($generated@@9 $generated@@128))))
 :pattern ( ($generated@@40 $generated@@5 ($generated@@9 ($generated@@25 $generated@@128))))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@T) ) (! (= ($generated@@40 $generated@@130 ($generated@@29 $generated@@130 $generated@@129)) ($generated@@29 $generated@@67 ($generated@@40 $generated@@130 $generated@@129)))
 :pattern ( ($generated@@40 $generated@@130 ($generated@@29 $generated@@130 $generated@@129)))
)))
(assert (forall (($generated@@131 T@U) ) (!  (=> (= ($generated@@26 $generated@@131) 0) (= $generated@@131 $generated@@27))
 :pattern ( ($generated@@26 $generated@@131))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@132 ($generated@@35 $generated@@133)) (forall (($generated@@134 Int) ) (!  (=> (and (<= 0 $generated@@134) (< $generated@@134 ($generated@@26 $generated@@132))) ($generated@@36 ($generated@@23 $generated@@132 $generated@@134) $generated@@133))
 :pattern ( ($generated@@23 $generated@@132 $generated@@134))
)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@132 ($generated@@35 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ) (! ($generated@@32 $generated@@22 $generated@@135 $generated)
 :pattern ( ($generated@@32 $generated@@22 $generated@@135 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@142 true))
(let (($generated@@143  (=> (and (> ($generated@@60 $generated@@20) ($generated@@60 ($generated@@29 $generated@@22 ($generated@@59 97)))) (= (ControlFlow 0 7) 4)) $generated@@142)))
(let (($generated@@144  (=> (and (>= ($generated@@60 ($generated@@29 $generated@@22 ($generated@@59 97))) ($generated@@60 $generated@@20)) (= (ControlFlow 0 6) 4)) $generated@@142)))
(let (($generated@@145  (=> (<= ($generated@@25 0) $generated@@136) (and (=> (= (ControlFlow 0 8) 6) $generated@@144) (=> (= (ControlFlow 0 8) 7) $generated@@143)))))
(let (($generated@@146  (=> (and (< $generated@@136 ($generated@@25 0)) (= (ControlFlow 0 5) 4)) $generated@@142)))
(let (($generated@@147  (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@25 0) ($generated@@25 0))) (=> (= (ControlFlow 0 2) (- 0 1)) (< 0 (ite (>= ($generated@@60 ($generated@@29 $generated@@22 ($generated@@59 97))) ($generated@@60 $generated@@20)) 30 40))))))
(let (($generated@@148  (=> (= $generated@@137 ($generated@@65 $generated@@138 $generated@@139 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 9) 2) $generated@@147) (=> (= (ControlFlow 0 9) 8) $generated@@145)) (=> (= (ControlFlow 0 9) 5) $generated@@146)))))
(let (($generated@@149  (=> (and (and ($generated@@140 $generated@@139) ($generated@@141 $generated@@139)) (and (= 2 $generated@@53) (= (ControlFlow 0 10) 9))) $generated@@148)))
$generated@@149)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
