(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 () Int)
(declare-fun $generated@@41 (T@U) Int)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@44 (Int Int) Int)
(declare-fun $generated@@45 (T@U) Int)
(declare-fun $generated@@46 (Int Int) Int)
(declare-fun $generated@@47 (Int Int) Int)
(declare-fun $generated@@49 (Int) T@U)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@65 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@T T@T) T@T)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@71 (T@T) T@T)
(declare-fun $generated@@124 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (= ($generated@@7 $generated@@26) 3))
(assert (forall (($generated@@28 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@28 $generated@@27) ($generated@@24 $generated@@28))
 :pattern ( ($generated@@24 $generated@@28) ($generated@@25 $generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@29 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@35 T@U) ) (! (= ($generated@@24 $generated@@35) (= ($generated@@34 $generated@@35) $generated@@4))
 :pattern ( ($generated@@24 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert  (=> (<= 2 $generated@@40) (forall (($generated@@48 T@U) ) (!  (=> (or ($generated@@42 ($generated@@31 $generated@@26 $generated@@48)) (and (< 2 $generated@@40) ($generated@@25 $generated@@26 $generated@@48 $generated@@43))) (and (and ($generated@@24 ($generated@@31 $generated@@26 $generated@@48)) (=> (or (not (= ($generated@@29 ($generated@@44 ($generated@@45 ($generated@@31 $generated@@26 $generated@@48)) ($generated@@29 2))) ($generated@@29 1))) (not true)) ($generated@@24 ($generated@@31 $generated@@26 $generated@@48)))) (= ($generated@@41 ($generated@@31 $generated@@26 $generated@@48)) (ite (= ($generated@@29 ($generated@@44 ($generated@@45 ($generated@@31 $generated@@26 $generated@@48)) ($generated@@29 2))) ($generated@@29 1)) ($generated@@46 1 ($generated@@29 0)) ($generated@@47 ($generated@@29 ($generated@@45 ($generated@@31 $generated@@26 $generated@@48))) ($generated@@29 2))))))
 :weight 3
 :pattern ( ($generated@@41 ($generated@@31 $generated@@26 $generated@@48)))
))))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@24 $generated@@50) (exists (($generated@@51 Int) ) (= $generated@@50 ($generated@@49 $generated@@51))))
 :pattern ( ($generated@@24 $generated@@50))
)))
(assert  (=> (<= 2 $generated@@40) (forall (($generated@@52 T@U) ) (!  (=> (or ($generated@@42 $generated@@52) (and (< 2 $generated@@40) ($generated@@25 $generated@@26 $generated@@52 $generated@@43))) (and (and ($generated@@24 $generated@@52) (=> (or (not (= ($generated@@44 ($generated@@45 $generated@@52) ($generated@@29 2)) ($generated@@29 1))) (not true)) ($generated@@24 $generated@@52))) (= ($generated@@41 $generated@@52) (ite (= ($generated@@44 ($generated@@45 $generated@@52) ($generated@@29 2)) ($generated@@29 1)) ($generated@@46 1 ($generated@@29 0)) ($generated@@47 ($generated@@45 $generated@@52) ($generated@@29 2))))))
 :pattern ( ($generated@@41 $generated@@52))
))))
(assert (forall (($generated@@53 Int) ($generated@@54 Int) ) (! (= ($generated@@46 $generated@@53 $generated@@54) (div $generated@@53 $generated@@54))
 :pattern ( ($generated@@46 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@55 Int) ) (! (= ($generated@@34 ($generated@@49 $generated@@55)) $generated@@4)
 :pattern ( ($generated@@49 $generated@@55))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@45 ($generated@@49 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@49 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@36 $generated@@58 ($generated@@37 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@37 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@59 $generated@@43)  (and ($generated@@25 $generated@@26 $generated@@59 $generated@@27) (= ($generated@@44 ($generated@@45 $generated@@59) ($generated@@29 2)) ($generated@@29 0))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@59 $generated@@43))
)))
(assert (forall (($generated@@60 Int) ) (! (= ($generated@@25 $generated@@26 ($generated@@49 $generated@@60) $generated@@27) ($generated@@25 $generated@@9 ($generated@@13 $generated@@60) $generated))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@49 $generated@@60) $generated@@27))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@61 $generated@@72 $generated@@73 $generated@@74 ($generated@@68 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@77 $generated@@78) $generated@@75)
 :weight 0
)) (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@61 $generated@@79 $generated@@80 $generated@@81 ($generated@@68 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@61 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@61 $generated@@88 $generated@@89 $generated@@90 ($generated@@68 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@61 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)))) (= ($generated@@7 $generated@@62) 4)) (= ($generated@@7 $generated@@63) 5)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@65 $generated@@97 $generated@@98 ($generated@@69 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@101) $generated@@99)
 :weight 0
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@106 $generated@@107) (= ($generated@@65 $generated@@102 $generated@@103 ($generated@@69 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@107) ($generated@@65 $generated@@102 $generated@@103 $generated@@105 $generated@@107)))
 :weight 0
))) (= ($generated@@7 $generated@@66) 6)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (= ($generated@@7 ($generated@@67 $generated@@108 $generated@@109)) 7))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@70 ($generated@@67 $generated@@110 $generated@@111)) $generated@@110)
 :pattern ( ($generated@@67 $generated@@110 $generated@@111))
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (! (= ($generated@@71 ($generated@@67 $generated@@112 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@67 $generated@@112 $generated@@113))
))))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 Bool) ($generated@@118 T@U) ($generated@@119 T@U) ) (! (= ($generated@@12 ($generated@@61 $generated@@62 $generated@@63 $generated@@8 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))  (=> (and (or (not (= $generated@@118 $generated@@114)) (not true)) ($generated@@12 ($generated@@36 $generated@@8 ($generated@@65 $generated@@63 $generated@@66 ($generated@@65 $generated@@62 ($generated@@67 $generated@@63 $generated@@66) $generated@@115 $generated@@118) $generated@@116)))) $generated@@117))
 :pattern ( ($generated@@61 $generated@@62 $generated@@63 $generated@@8 ($generated@@64 $generated@@114 $generated@@115 $generated@@116 $generated@@117) $generated@@118 $generated@@119))
)))
(assert (forall (($generated@@120 Int) ($generated@@121 Int) ) (! (= ($generated@@44 $generated@@120 $generated@@121) (mod $generated@@120 $generated@@121))
 :pattern ( ($generated@@44 $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@122 Int) ($generated@@123 Int) ) (! (= ($generated@@47 $generated@@122 $generated@@123) (* $generated@@122 $generated@@123))
 :pattern ( ($generated@@47 $generated@@122 $generated@@123))
)))
(assert (= ($generated@@23 $generated@@43) $generated@@2))
(assert (= ($generated@@124 $generated@@43) $generated@@5))
(assert (= ($generated@@23 $generated@@27) $generated@@3))
(assert (= ($generated@@124 $generated@@27) $generated@@6))
(assert (forall (($generated@@125 Int) ) (! (= ($generated@@37 $generated@@9 ($generated@@13 ($generated@@29 $generated@@125))) ($generated@@31 $generated@@66 ($generated@@37 $generated@@9 ($generated@@13 $generated@@125))))
 :pattern ( ($generated@@37 $generated@@9 ($generated@@13 ($generated@@29 $generated@@125))))
)))
(assert (forall (($generated@@126 Int) ) (! (= ($generated@@49 ($generated@@29 $generated@@126)) ($generated@@31 $generated@@26 ($generated@@49 $generated@@126)))
 :pattern ( ($generated@@49 ($generated@@29 $generated@@126)))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@T) ) (! (= ($generated@@37 $generated@@128 ($generated@@31 $generated@@128 $generated@@127)) ($generated@@31 $generated@@66 ($generated@@37 $generated@@128 $generated@@127)))
 :pattern ( ($generated@@37 $generated@@128 ($generated@@31 $generated@@128 $generated@@127)))
)))
(assert (forall (($generated@@129 T@U) ) (! ($generated@@25 $generated@@9 $generated@@129 $generated)
 :pattern ( ($generated@@25 $generated@@9 $generated@@129 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 (T@U) Bool)
(declare-fun $generated@@135 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@136 true))
(let (($generated@@137  (=> (and (= ($generated@@44 ($generated@@45 $generated@@130) ($generated@@29 2)) ($generated@@29 1)) (= (ControlFlow 0 3) (- 0 2))) (or (not (= ($generated@@29 0) 0)) (not true)))))
(let (($generated@@138  (=> ($generated@@24 $generated@@130) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (not (= ($generated@@29 2) 0)) (not true))) (=> (or (not (= ($generated@@29 2) 0)) (not true)) (and (=> (= (ControlFlow 0 5) 3) $generated@@137) (=> (= (ControlFlow 0 5) 4) $generated@@136)))))))
(let (($generated@@139 true))
(let (($generated@@140  (=> (= $generated@@131 ($generated@@64 $generated@@132 $generated@@133 $generated@@1 false)) (and (=> (= (ControlFlow 0 7) 1) $generated@@139) (=> (= (ControlFlow 0 7) 5) $generated@@138)))))
(let (($generated@@141  (=> (and (and (and ($generated@@134 $generated@@133) ($generated@@135 $generated@@133)) ($generated@@25 $generated@@26 $generated@@130 $generated@@43)) (and (= 2 $generated@@40) (= (ControlFlow 0 8) 7))) $generated@@140)))
$generated@@141)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
