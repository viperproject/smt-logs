(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 (T@T) Int)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 (Bool) T@U)
(declare-fun $generated@@16 (T@U) Bool)
(declare-fun $generated@@17 (Int) T@U)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@19 (Real) T@U)
(declare-fun $generated@@20 (T@U) Real)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 (T@T T@U T@U) Bool)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@47 () T@U)
(declare-fun $generated@@48 (T@U T@U) T@U)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@T T@T) T@T)
(declare-fun $generated@@55 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@79 (T@T T@U) T@U)
(declare-fun $generated@@82 (T@T T@U) T@U)
(declare-fun $generated@@85 (T@U) Bool)
(declare-fun $generated@@94 (T@U) T@U)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@103 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@136 (T@U) T@U)
(declare-fun $generated@@137 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@11 $generated@@12) 0) (= ($generated@@11 $generated@@13) 1)) (= ($generated@@11 $generated@@14) 2)) (forall (($generated@@21 Bool) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Int) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Real) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10)
)
(assert (= ($generated@@27 $generated) 0))
(assert (= ($generated@@28 $generated) $generated@@0))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ) (! ($generated@@29 $generated@@13 $generated@@31 $generated@@30 $generated@@32)
 :pattern ( ($generated@@29 $generated@@13 $generated@@31 $generated@@30 $generated@@32))
)))
(assert ($generated@@33 $generated@@34))
(assert (= ($generated@@11 $generated@@36) 3))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@35 $generated@@36 $generated@@39 $generated@@34)  (or (= $generated@@39 $generated@@37) (= ($generated@@38 $generated@@39) $generated@@34)))
 :pattern ( ($generated@@35 $generated@@36 $generated@@39 $generated@@34))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@29 $generated@@36 $generated@@42 $generated@@40 $generated@@43) ($generated@@29 $generated@@36 $generated@@42 $generated@@41 $generated@@43))
 :pattern ( ($generated@@29 $generated@@36 $generated@@42 $generated@@40 $generated@@43))
 :pattern ( ($generated@@29 $generated@@36 $generated@@42 $generated@@41 $generated@@43))
)))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@29 $generated@@36 $generated@@45 $generated@@44 $generated@@46) ($generated@@29 $generated@@36 $generated@@45 $generated@@34 $generated@@46))
 :pattern ( ($generated@@29 $generated@@36 $generated@@45 $generated@@44 $generated@@46))
 :pattern ( ($generated@@29 $generated@@36 $generated@@45 $generated@@34 $generated@@46))
)))
(assert (= ($generated@@27 $generated@@47) 0))
(assert (= ($generated@@48 $generated@@5 $generated@@10) $generated@@47))
(assert  (not ($generated@@49 $generated@@47)))
(assert  (and (and (and (and (and (and (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@51 $generated@@58 $generated@@59 ($generated@@55 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@60) $generated@@62) $generated@@60)
 :weight 0
)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (or (= $generated@@67 $generated@@68) (= ($generated@@51 $generated@@63 $generated@@64 ($generated@@55 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@65) $generated@@68) ($generated@@51 $generated@@63 $generated@@64 $generated@@66 $generated@@68)))
 :weight 0
))) (= ($generated@@11 $generated@@52) 4)) (= ($generated@@11 $generated@@53) 5)) (forall (($generated@@69 T@T) ($generated@@70 T@T) ) (= ($generated@@11 ($generated@@54 $generated@@69 $generated@@70)) 6))) (forall (($generated@@71 T@T) ($generated@@72 T@T) ) (! (= ($generated@@56 ($generated@@54 $generated@@71 $generated@@72)) $generated@@71)
 :pattern ( ($generated@@54 $generated@@71 $generated@@72))
))) (forall (($generated@@73 T@T) ($generated@@74 T@T) ) (! (= ($generated@@57 ($generated@@54 $generated@@73 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@54 $generated@@73 $generated@@74))
))))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@29 $generated@@36 $generated@@75 $generated@@41 $generated@@76)  (or (= $generated@@75 $generated@@37) ($generated@@16 ($generated@@50 $generated@@12 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@76 $generated@@75) $generated)))))
 :pattern ( ($generated@@29 $generated@@36 $generated@@75 $generated@@41 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@29 $generated@@36 $generated@@77 $generated@@34 $generated@@78)  (or (= $generated@@77 $generated@@37) ($generated@@16 ($generated@@50 $generated@@12 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@78 $generated@@77) $generated)))))
 :pattern ( ($generated@@29 $generated@@36 $generated@@77 $generated@@34 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@79 $generated@@81 $generated@@80) $generated@@80)
 :pattern ( ($generated@@79 $generated@@81 $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@82 $generated@@84 ($generated@@50 $generated@@84 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@50 $generated@@84 $generated@@83))
)))
(assert ($generated@@49 $generated))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (!  (=> (and ($generated@@85 $generated@@86) (and (or (not (= $generated@@87 $generated@@37)) (not true)) (= ($generated@@38 $generated@@87) $generated@@34))) ($generated@@35 $generated@@13 ($generated@@50 $generated@@13 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@86 $generated@@87) $generated@@47)) $generated@@30))
 :pattern ( ($generated@@50 $generated@@13 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@86 $generated@@87) $generated@@47)))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@35 $generated@@36 $generated@@88 $generated@@40)  (and ($generated@@35 $generated@@36 $generated@@88 $generated@@41) (or (not (= $generated@@88 $generated@@37)) (not true))))
 :pattern ( ($generated@@35 $generated@@36 $generated@@88 $generated@@40))
 :pattern ( ($generated@@35 $generated@@36 $generated@@88 $generated@@41))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@35 $generated@@36 $generated@@89 $generated@@44)  (and ($generated@@35 $generated@@36 $generated@@89 $generated@@34) (or (not (= $generated@@89 $generated@@37)) (not true))))
 :pattern ( ($generated@@35 $generated@@36 $generated@@89 $generated@@44))
 :pattern ( ($generated@@35 $generated@@36 $generated@@89 $generated@@34))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (!  (=> (and (and ($generated@@85 $generated@@90) (and (or (not (= $generated@@91 $generated@@37)) (not true)) (= ($generated@@38 $generated@@91) $generated@@34))) ($generated@@16 ($generated@@50 $generated@@12 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@90 $generated@@91) $generated)))) ($generated@@29 $generated@@13 ($generated@@50 $generated@@13 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@90 $generated@@91) $generated@@47)) $generated@@30 $generated@@90))
 :pattern ( ($generated@@50 $generated@@13 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@90 $generated@@91) $generated@@47)))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ) (!  (=> ($generated@@29 $generated@@36 $generated@@92 $generated@@34 $generated@@93) ($generated@@29 $generated@@36 $generated@@92 $generated@@41 $generated@@93))
 :pattern ( ($generated@@29 $generated@@36 $generated@@92 $generated@@34 $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ) (!  (and (= ($generated@@94 ($generated@@48 $generated@@95 $generated@@96)) $generated@@95) (= ($generated@@28 ($generated@@48 $generated@@95 $generated@@96)) $generated@@96))
 :pattern ( ($generated@@48 $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ) (! ($generated@@35 $generated@@36 $generated@@97 $generated@@41)
 :pattern ( ($generated@@35 $generated@@36 $generated@@97 $generated@@41))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@50 $generated@@99 ($generated@@82 $generated@@99 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@82 $generated@@99 $generated@@98))
)))
(assert (forall (($generated@@100 T@U) ) (! (= ($generated@@35 $generated@@13 $generated@@100 $generated@@30) ($generated@@16 ($generated@@79 $generated@@12 ($generated@@15 false))))
 :pattern ( ($generated@@35 $generated@@13 $generated@@100 $generated@@30))
)))
(assert  (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@101 $generated@@104 $generated@@105 $generated@@106 ($generated@@103 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@109 $generated@@110) $generated@@107)
 :weight 0
)) (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@101 $generated@@111 $generated@@112 $generated@@113 ($generated@@103 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@101 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@101 $generated@@120 $generated@@121 $generated@@122 ($generated@@103 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@101 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@16 ($generated@@101 $generated@@36 $generated@@52 $generated@@12 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@16 ($generated@@50 $generated@@12 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@101 $generated@@36 $generated@@52 $generated@@12 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ) (!  (=> ($generated@@35 $generated@@36 $generated@@135 $generated@@34) ($generated@@35 $generated@@36 $generated@@135 $generated@@41))
 :pattern ( ($generated@@35 $generated@@36 $generated@@135 $generated@@34))
)))
(assert (= ($generated@@136 $generated@@41) $generated@@1))
(assert (= ($generated@@137 $generated@@41) $generated@@7))
(assert (= ($generated@@136 $generated@@40) $generated@@2))
(assert (= ($generated@@137 $generated@@40) $generated@@7))
(assert (= ($generated@@136 $generated@@44) $generated@@3))
(assert (= ($generated@@137 $generated@@44) $generated@@8))
(assert (= ($generated@@136 $generated@@30) $generated@@4))
(assert (= ($generated@@137 $generated@@30) $generated@@9))
(assert (= ($generated@@136 $generated@@34) $generated@@6))
(assert (= ($generated@@137 $generated@@34) $generated@@8))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@T) ) (! (= ($generated@@82 $generated@@139 ($generated@@79 $generated@@139 $generated@@138)) ($generated@@79 $generated@@53 ($generated@@82 $generated@@139 $generated@@138)))
 :pattern ( ($generated@@82 $generated@@139 ($generated@@79 $generated@@139 $generated@@138)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 (T@U) Bool)
(declare-fun $generated@@147 () Bool)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Bool)
(declare-fun $generated@@150 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@151  (=> (= (ControlFlow 0 2) (- 0 1)) ($generated@@16 ($generated@@79 $generated@@12 ($generated@@15 false))))))
(let (($generated@@152  (=> (and (not ($generated@@35 $generated@@36 $generated@@140 $generated@@44)) (= (ControlFlow 0 9) 2)) $generated@@151)))
(let (($generated@@153  (=> ($generated@@35 $generated@@36 $generated@@140 $generated@@44) (and (=> (= (ControlFlow 0 3) (- 0 8)) ($generated@@35 $generated@@36 $generated@@140 $generated@@44)) (=> ($generated@@35 $generated@@36 $generated@@140 $generated@@44) (and (=> (= (ControlFlow 0 3) (- 0 7)) true) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (not (= $generated@@140 $generated@@37)) (not true))) (=> (or (not (= $generated@@140 $generated@@37)) (not true)) (=> (= $generated@@141 ($generated@@18 ($generated@@50 $generated@@13 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@142 $generated@@140) $generated@@47)))) (and (=> (= (ControlFlow 0 3) (- 0 5)) ($generated@@16 ($generated@@79 $generated@@12 ($generated@@15 false)))) (=> ($generated@@16 ($generated@@79 $generated@@12 ($generated@@15 false))) (=> (= $generated@@143 ($generated@@18 ($generated@@50 $generated@@13 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@142 $generated@@140) $generated@@47)))) (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@16 ($generated@@79 $generated@@12 ($generated@@15 false)))) (=> ($generated@@16 ($generated@@79 $generated@@12 ($generated@@15 false))) (=> (and (= $generated@@144 ($generated@@18 ($generated@@50 $generated@@13 ($generated@@51 $generated@@52 $generated@@53 ($generated@@51 $generated@@36 ($generated@@54 $generated@@52 $generated@@53) $generated@@142 $generated@@140) $generated@@47)))) (= (ControlFlow 0 3) 2)) $generated@@151)))))))))))))))
(let (($generated@@154  (=> (= $generated@@145 ($generated@@102 $generated@@37 $generated@@142 $generated false)) (and (=> (= (ControlFlow 0 10) 3) $generated@@153) (=> (= (ControlFlow 0 10) 9) $generated@@152)))))
(let (($generated@@155  (=> (and ($generated@@85 $generated@@142) ($generated@@146 $generated@@142)) (=> (and (and (and ($generated@@35 $generated@@36 $generated@@140 $generated@@40) ($generated@@29 $generated@@36 $generated@@140 $generated@@40 $generated@@142)) (and (=> $generated@@147 (and ($generated@@35 $generated@@36 $generated@@148 $generated@@44) ($generated@@29 $generated@@36 $generated@@148 $generated@@44 $generated@@142))) true)) (and (and (=> $generated@@149 ($generated@@16 ($generated@@79 $generated@@12 ($generated@@15 false)))) true) (and (= 1 $generated@@150) (= (ControlFlow 0 11) 10)))) $generated@@154))))
$generated@@155))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
