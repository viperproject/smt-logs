(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U T@U T@U) Bool)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@T T@T) T@T)
(declare-fun $generated@@43 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@67 (Int) Int)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@U T@U) Bool)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@79 (T@T T@U T@U) Bool)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 (T@U) T@U)
(declare-fun $generated@@82 (T@U T@U) Bool)
(declare-fun $generated@@98 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@104 (Int Int) Int)
(declare-fun $generated@@115 (T@U) T@U)
(declare-fun $generated@@117 (T@U) T@U)
(declare-fun $generated@@121 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@122 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@123 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@159 (T@U) T@U)
(declare-fun $generated@@160 (T@U) Bool)
(declare-fun $generated@@161 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (!  (=> (and ($generated@@23 $generated@@27 $generated@@24 $generated@@28) ($generated@@25 $generated@@28)) ($generated@@23 $generated@@27 $generated@@26 $generated@@28))
 :pattern ( ($generated@@23 $generated@@27 $generated@@24 $generated@@28))
)))
(assert (= ($generated@@7 $generated@@30) 3))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@32 $generated@@31 $generated@@33) ($generated@@29 $generated@@30 $generated@@32 $generated@@26 $generated@@33))
 :pattern ( ($generated@@29 $generated@@30 $generated@@32 $generated@@31 $generated@@33))
 :pattern ( ($generated@@29 $generated@@30 $generated@@32 $generated@@26 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@35 $generated@@34 $generated@@36) ($generated@@29 $generated@@30 $generated@@35 $generated@@24 $generated@@36))
 :pattern ( ($generated@@29 $generated@@30 $generated@@35 $generated@@34 $generated@@36))
 :pattern ( ($generated@@29 $generated@@30 $generated@@35 $generated@@24 $generated@@36))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@39 $generated@@46 $generated@@47 ($generated@@43 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@48) $generated@@50) $generated@@48)
 :weight 0
)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (or (= $generated@@55 $generated@@56) (= ($generated@@39 $generated@@51 $generated@@52 ($generated@@43 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@56) ($generated@@39 $generated@@51 $generated@@52 $generated@@54 $generated@@56)))
 :weight 0
))) (= ($generated@@7 $generated@@40) 4)) (= ($generated@@7 $generated@@41) 5)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@7 ($generated@@42 $generated@@57 $generated@@58)) 6))) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@44 ($generated@@42 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@42 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@45 ($generated@@42 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@42 $generated@@61 $generated@@62))
))))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@63 $generated@@26 $generated@@64)  (or (= $generated@@63 $generated@@37) ($generated@@12 ($generated@@38 $generated@@8 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@30 ($generated@@42 $generated@@40 $generated@@41) $generated@@64 $generated@@63) $generated@@0)))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@63 $generated@@26 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@65 $generated@@24 $generated@@66)  (or (= $generated@@65 $generated@@37) ($generated@@12 ($generated@@38 $generated@@8 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@30 ($generated@@42 $generated@@40 $generated@@41) $generated@@66 $generated@@65) $generated@@0)))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@65 $generated@@24 $generated@@66))
)))
(assert (forall (($generated@@68 Int) ) (! (= ($generated@@67 $generated@@68) $generated@@68)
 :pattern ( ($generated@@67 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 $generated@@70) $generated@@70)
 :pattern ( ($generated@@69 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 ($generated@@38 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@38 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@75 ($generated@@76 $generated@@77) $generated@@78) ($generated@@12 ($generated@@39 $generated@@41 $generated@@8 $generated@@77 $generated@@78)))
 :pattern ( ($generated@@75 ($generated@@76 $generated@@77) $generated@@78))
)))
(assert (= ($generated@@7 $generated@@80) 7))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@79 $generated@@80 $generated@@83 ($generated@@81 $generated@@84)) (forall (($generated@@85 T@U) ) (!  (=> ($generated@@75 $generated@@83 $generated@@85) ($generated@@82 $generated@@85 $generated@@84))
 :pattern ( ($generated@@75 $generated@@83 $generated@@85))
)))
 :pattern ( ($generated@@79 $generated@@80 $generated@@83 ($generated@@81 $generated@@84)))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@23 ($generated@@72 $generated@@89 $generated@@86) $generated@@87 $generated@@88) ($generated@@29 $generated@@89 $generated@@86 $generated@@87 $generated@@88))
 :pattern ( ($generated@@23 ($generated@@72 $generated@@89 $generated@@86) $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ) (!  (=> ($generated@@82 $generated@@90 $generated@@26) (and (= ($generated@@72 $generated@@30 ($generated@@38 $generated@@30 $generated@@90)) $generated@@90) ($generated@@79 $generated@@30 ($generated@@38 $generated@@30 $generated@@90) $generated@@26)))
 :pattern ( ($generated@@82 $generated@@90 $generated@@26))
)))
(assert (forall (($generated@@91 T@U) ) (!  (=> ($generated@@82 $generated@@91 $generated@@31) (and (= ($generated@@72 $generated@@30 ($generated@@38 $generated@@30 $generated@@91)) $generated@@91) ($generated@@79 $generated@@30 ($generated@@38 $generated@@30 $generated@@91) $generated@@31)))
 :pattern ( ($generated@@82 $generated@@91 $generated@@31))
)))
(assert (forall (($generated@@92 T@U) ) (!  (=> ($generated@@82 $generated@@92 $generated@@34) (and (= ($generated@@72 $generated@@30 ($generated@@38 $generated@@30 $generated@@92)) $generated@@92) ($generated@@79 $generated@@30 ($generated@@38 $generated@@30 $generated@@92) $generated@@34)))
 :pattern ( ($generated@@82 $generated@@92 $generated@@34))
)))
(assert (forall (($generated@@93 T@U) ) (!  (=> ($generated@@82 $generated@@93 $generated@@24) (and (= ($generated@@72 $generated@@30 ($generated@@38 $generated@@30 $generated@@93)) $generated@@93) ($generated@@79 $generated@@30 ($generated@@38 $generated@@30 $generated@@93) $generated@@24)))
 :pattern ( ($generated@@82 $generated@@93 $generated@@24))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@79 $generated@@30 $generated@@94 $generated@@31)  (and ($generated@@79 $generated@@30 $generated@@94 $generated@@26) (or (not (= $generated@@94 $generated@@37)) (not true))))
 :pattern ( ($generated@@79 $generated@@30 $generated@@94 $generated@@31))
 :pattern ( ($generated@@79 $generated@@30 $generated@@94 $generated@@26))
)))
(assert (forall (($generated@@95 T@U) ) (! (= ($generated@@79 $generated@@30 $generated@@95 $generated@@34)  (and ($generated@@79 $generated@@30 $generated@@95 $generated@@24) (or (not (= $generated@@95 $generated@@37)) (not true))))
 :pattern ( ($generated@@79 $generated@@30 $generated@@95 $generated@@34))
 :pattern ( ($generated@@79 $generated@@30 $generated@@95 $generated@@24))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@96 $generated@@24 $generated@@97) ($generated@@29 $generated@@30 $generated@@96 $generated@@26 $generated@@97))
 :pattern ( ($generated@@29 $generated@@30 $generated@@96 $generated@@24 $generated@@97))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 Bool) ($generated@@103 T@U) ) (! (= ($generated@@12 ($generated@@39 $generated@@41 $generated@@8 ($generated@@98 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103))  (and (and ($generated@@82 $generated@@103 $generated@@99) ($generated@@23 $generated@@103 $generated@@100 $generated@@101)) $generated@@102))
 :pattern ( ($generated@@39 $generated@@41 $generated@@8 ($generated@@98 $generated@@99 $generated@@100 $generated@@101 $generated@@102) $generated@@103))
)))
(assert (forall (($generated@@105 Int) ($generated@@106 Int) ) (! (= ($generated@@104 $generated@@105 $generated@@106) (div $generated@@105 $generated@@106))
 :pattern ( ($generated@@104 $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@T) ) (! (= ($generated@@82 ($generated@@72 $generated@@109 $generated@@107) $generated@@108) ($generated@@79 $generated@@109 $generated@@107 $generated@@108))
 :pattern ( ($generated@@82 ($generated@@72 $generated@@109 $generated@@107) $generated@@108))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@29 $generated@@80 $generated@@110 ($generated@@81 $generated@@111) $generated@@112) (forall (($generated@@113 T@U) ) (!  (=> ($generated@@75 $generated@@110 $generated@@113) ($generated@@23 $generated@@113 $generated@@111 $generated@@112))
 :pattern ( ($generated@@75 $generated@@110 $generated@@113))
)))
 :pattern ( ($generated@@29 $generated@@80 $generated@@110 ($generated@@81 $generated@@111) $generated@@112))
)))
(assert (forall (($generated@@114 T@U) ) (! ($generated@@79 $generated@@30 $generated@@114 $generated@@26)
 :pattern ( ($generated@@79 $generated@@30 $generated@@114 $generated@@26))
)))
(assert (forall (($generated@@116 T@U) ) (! (= ($generated@@115 ($generated@@81 $generated@@116)) $generated@@116)
 :pattern ( ($generated@@81 $generated@@116))
)))
(assert (forall (($generated@@118 T@U) ) (! (= ($generated@@117 ($generated@@81 $generated@@118)) $generated)
 :pattern ( ($generated@@81 $generated@@118))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@T) ) (! (= ($generated@@38 $generated@@120 ($generated@@72 $generated@@120 $generated@@119)) $generated@@119)
 :pattern ( ($generated@@72 $generated@@120 $generated@@119))
)))
(assert  (and (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@121 $generated@@124 $generated@@125 $generated@@126 ($generated@@123 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@129 $generated@@130) $generated@@127)
 :weight 0
)) (and (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ) (!  (or (= $generated@@136 $generated@@138) (= ($generated@@121 $generated@@131 $generated@@132 $generated@@133 ($generated@@123 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@138 $generated@@139) ($generated@@121 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@138 $generated@@139)))
 :weight 0
)) (forall (($generated@@140 T@T) ($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ) (!  (or (= $generated@@146 $generated@@148) (= ($generated@@121 $generated@@140 $generated@@141 $generated@@142 ($generated@@123 $generated@@140 $generated@@141 $generated@@142 $generated@@144 $generated@@145 $generated@@146 $generated@@143) $generated@@147 $generated@@148) ($generated@@121 $generated@@140 $generated@@141 $generated@@142 $generated@@144 $generated@@147 $generated@@148)))
 :weight 0
)))))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 Bool) ($generated@@153 T@U) ($generated@@154 T@U) ) (! (= ($generated@@12 ($generated@@121 $generated@@30 $generated@@40 $generated@@8 ($generated@@122 $generated@@149 $generated@@150 $generated@@151 $generated@@152) $generated@@153 $generated@@154))  (=> (and (or (not (= $generated@@153 $generated@@149)) (not true)) ($generated@@12 ($generated@@38 $generated@@8 ($generated@@39 $generated@@40 $generated@@41 ($generated@@39 $generated@@30 ($generated@@42 $generated@@40 $generated@@41) $generated@@150 $generated@@153) $generated@@151)))) $generated@@152))
 :pattern ( ($generated@@121 $generated@@30 $generated@@40 $generated@@8 ($generated@@122 $generated@@149 $generated@@150 $generated@@151 $generated@@152) $generated@@153 $generated@@154))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> ($generated@@82 $generated@@155 ($generated@@81 $generated@@156)) (and (= ($generated@@72 $generated@@80 ($generated@@38 $generated@@80 $generated@@155)) $generated@@155) ($generated@@79 $generated@@80 ($generated@@38 $generated@@80 $generated@@155) ($generated@@81 $generated@@156))))
 :pattern ( ($generated@@82 $generated@@155 ($generated@@81 $generated@@156)))
)))
(assert (forall (($generated@@157 T@U) ) (!  (=> ($generated@@79 $generated@@30 $generated@@157 $generated@@24) ($generated@@79 $generated@@30 $generated@@157 $generated@@26))
 :pattern ( ($generated@@79 $generated@@30 $generated@@157 $generated@@24))
)))
(assert (forall (($generated@@158 T@U) ) (!  (=> ($generated@@82 $generated@@158 $generated@@24) ($generated@@82 $generated@@158 $generated@@26))
 :pattern ( ($generated@@82 $generated@@158 $generated@@24))
)))
(assert (= ($generated@@117 $generated@@26) $generated@@1))
(assert (= ($generated@@159 $generated@@26) $generated@@5))
(assert (= ($generated@@117 $generated@@31) $generated@@2))
(assert (= ($generated@@159 $generated@@31) $generated@@5))
(assert (= ($generated@@117 $generated@@34) $generated@@3))
(assert (= ($generated@@159 $generated@@34) $generated@@6))
(assert (= ($generated@@117 $generated@@24) $generated@@4))
(assert (= ($generated@@159 $generated@@24) $generated@@6))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@79 $generated@@30 $generated@@162 $generated@@24)  (or (= $generated@@162 $generated@@37) ($generated@@160 ($generated@@161 $generated@@162))))
 :pattern ( ($generated@@79 $generated@@30 $generated@@162 $generated@@24))
)))
(assert (forall (($generated@@163 Int) ) (! (= ($generated@@72 $generated@@9 ($generated@@13 ($generated@@67 $generated@@163))) ($generated@@69 $generated@@41 ($generated@@72 $generated@@9 ($generated@@13 $generated@@163))))
 :pattern ( ($generated@@72 $generated@@9 ($generated@@13 ($generated@@67 $generated@@163))))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@T) ) (! (= ($generated@@72 $generated@@165 ($generated@@69 $generated@@165 $generated@@164)) ($generated@@69 $generated@@41 ($generated@@72 $generated@@165 $generated@@164)))
 :pattern ( ($generated@@72 $generated@@165 ($generated@@69 $generated@@165 $generated@@164)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 (T@U) Bool)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@174  (=> (and (= $generated@@166 ($generated@@76 ($generated@@98 $generated@@34 $generated@@34 $generated@@167 (= ($generated@@67 ($generated@@104 5 ($generated@@67 0))) ($generated@@67 19))))) (= (ControlFlow 0 2) (- 0 1))) (or (not (= ($generated@@67 0) 0)) (not true)))))
(let (($generated@@175  (=> (and (or (not (= ($generated@@67 ($generated@@104 5 ($generated@@67 0))) ($generated@@67 19))) (not true)) (= (ControlFlow 0 5) 2)) $generated@@174)))
(let (($generated@@176  (=> (and (= ($generated@@67 ($generated@@104 5 ($generated@@67 0))) ($generated@@67 19)) (= (ControlFlow 0 4) 2)) $generated@@174)))
(let (($generated@@177  (=> (and ($generated@@79 $generated@@30 $generated@@168 $generated@@34) ($generated@@29 $generated@@30 $generated@@168 $generated@@34 $generated@@167)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (or (not (= $generated@@168 $generated@@37)) (not true))) (=> (or (not (= $generated@@168 $generated@@37)) (not true)) (=> (and (and ($generated@@25 $generated@@169) ($generated@@170 $generated@@169)) (and ($generated@@12 ($generated@@69 $generated@@8 ($generated@@11 false))) (= $generated@@167 $generated@@169))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (or (not (= ($generated@@67 0) 0)) (not true))) (=> (or (not (= ($generated@@67 0) 0)) (not true)) (and (=> (= (ControlFlow 0 6) 4) $generated@@176) (=> (= (ControlFlow 0 6) 5) $generated@@175))))))))))
(let (($generated@@178  (=> (and (not (and ($generated@@79 $generated@@30 $generated@@168 $generated@@34) ($generated@@29 $generated@@30 $generated@@168 $generated@@34 $generated@@167))) (= (ControlFlow 0 3) 2)) $generated@@174)))
(let (($generated@@179  (=> (= $generated@@171 ($generated@@122 $generated@@37 $generated@@167 $generated@@0 false)) (and (=> (= (ControlFlow 0 9) 6) $generated@@177) (=> (= (ControlFlow 0 9) 3) $generated@@178)))))
(let (($generated@@180  (=> (and ($generated@@25 $generated@@167) ($generated@@170 $generated@@167)) (=> (and (and (and ($generated@@79 $generated@@80 $generated@@172 ($generated@@81 $generated@@34)) ($generated@@29 $generated@@80 $generated@@172 ($generated@@81 $generated@@34) $generated@@167)) true) (and (= 1 $generated@@173) (= (ControlFlow 0 10) 9))) $generated@@179))))
$generated@@180))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
