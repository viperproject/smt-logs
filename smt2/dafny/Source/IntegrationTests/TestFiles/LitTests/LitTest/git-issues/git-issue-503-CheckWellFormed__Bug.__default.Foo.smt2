(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass.Bug.input () T@U)
(declare-fun Tagclass.P.t () T@U)
(declare-fun Tagclass.Option.t () T@U)
(declare-fun |##Bug.input.Input| () T@U)
(declare-fun |##Option.t.None| () T@U)
(declare-fun |##Option.t.Some| () T@U)
(declare-fun tytagFamily$input () T@U)
(declare-fun tytagFamily$t () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#Option.t.None| () T@U)
(declare-fun Bug.input.Input_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.Bug.input () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass.Option.t (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun Option.t.None_q (T@U) Bool)
(declare-fun Option.t.Some_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#Bug.input.Input| (T@U) T@U)
(declare-fun |#Option.t.Some| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tclass.P.t () T@U)
(declare-fun Tclass.Option.t_0 (T@U) T@U)
(declare-fun Bug.input.z (T@U) T@U)
(declare-fun Option.t._h0 (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun BoxRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool alloc Tagclass.Bug.input Tagclass.P.t Tagclass.Option.t |##Bug.input.Input| |##Option.t.None| |##Option.t.Some| tytagFamily$input tytagFamily$t)
)
(assert (= (Tag TBool) TagBool))
(assert (= (DatatypeCtorId |#Option.t.None|) |##Option.t.None|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((d T@U) ) (!  (=> ($Is DatatypeTypeType d Tclass.Bug.input) (Bug.input.Input_q d))
 :pattern ( (Bug.input.Input_q d) ($Is DatatypeTypeType d Tclass.Bug.input))
)))
(assert (forall ((Option.t$A T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#Option.t.None| (Tclass.Option.t Option.t$A) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#Option.t.None| (Tclass.Option.t Option.t$A) $h))
)))
(assert (forall ((Option.t$A@@0 T@U) ) (! ($Is DatatypeTypeType |#Option.t.None| (Tclass.Option.t Option.t$A@@0))
 :pattern ( ($Is DatatypeTypeType |#Option.t.None| (Tclass.Option.t Option.t$A@@0)))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((d@@0 T@U) ) (! (= (Bug.input.Input_q d@@0) (= (DatatypeCtorId d@@0) |##Bug.input.Input|))
 :pattern ( (Bug.input.Input_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (Option.t.None_q d@@1) (= (DatatypeCtorId d@@1) |##Option.t.None|))
 :pattern ( (Option.t.None_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (Option.t.Some_q d@@2) (= (DatatypeCtorId d@@2) |##Option.t.Some|))
 :pattern ( (Option.t.Some_q d@@2))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (Option.t.None_q d@@3) (= d@@3 |#Option.t.None|))
 :pattern ( (Option.t.None_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (Bug.input.Input_q d@@4) (exists ((|a#1#0#0| T@U) ) (= d@@4 (|#Bug.input.Input| |a#1#0#0|))))
 :pattern ( (Bug.input.Input_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (Option.t.Some_q d@@5) (exists ((|a#11#0#0| T@U) ) (= d@@5 (|#Option.t.Some| |a#11#0#0|))))
 :pattern ( (Option.t.Some_q d@@5))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((Option.t$A@@1 T@U) ) (!  (and (= (Tag (Tclass.Option.t Option.t$A@@1)) Tagclass.Option.t) (= (TagFamily (Tclass.Option.t Option.t$A@@1)) tytagFamily$t))
 :pattern ( (Tclass.Option.t Option.t$A@@1))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass.Bug.input) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass.Bug.input)))
 :pattern ( ($IsBox bx@@0 Tclass.Bug.input))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass.P.t) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) Tclass.P.t)))
 :pattern ( ($IsBox bx@@1 Tclass.P.t))
)))
(assert (forall ((Option.t$A@@2 T@U) (|a#12#0#0| T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) (= ($IsAlloc DatatypeTypeType (|#Option.t.Some| |a#12#0#0|) (Tclass.Option.t Option.t$A@@2) $h@@0) ($IsAllocBox |a#12#0#0| Option.t$A@@2 $h@@0)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Option.t.Some| |a#12#0#0|) (Tclass.Option.t Option.t$A@@2) $h@@0))
)))
(assert (forall ((|a#2#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#Bug.input.Input| |a#2#0#0|) Tclass.Bug.input) ($Is DatatypeTypeType |a#2#0#0| (Tclass.Option.t Tclass.P.t)))
 :pattern ( ($Is DatatypeTypeType (|#Bug.input.Input| |a#2#0#0|) Tclass.Bug.input))
)))
(assert (forall ((Option.t$A@@3 T@U) (d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 (Tclass.Option.t Option.t$A@@3)) (or (Option.t.None_q d@@6) (Option.t.Some_q d@@6)))
 :pattern ( (Option.t.Some_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass.Option.t Option.t$A@@3)))
 :pattern ( (Option.t.None_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass.Option.t Option.t$A@@3)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TBool) (and (= ($Box boolType ($Unbox boolType bx@@2)) bx@@2) ($Is boolType ($Unbox boolType bx@@2) TBool)))
 :pattern ( ($IsBox bx@@2 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((Option.t$A@@4 T@U) ) (! (= (Tclass.Option.t_0 (Tclass.Option.t Option.t$A@@4)) Option.t$A@@4)
 :pattern ( (Tclass.Option.t Option.t$A@@4))
)))
(assert (forall ((|a#0#0#0| T@U) ) (! (= (DatatypeCtorId (|#Bug.input.Input| |a#0#0#0|)) |##Bug.input.Input|)
 :pattern ( (|#Bug.input.Input| |a#0#0#0|))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (Bug.input.z (|#Bug.input.Input| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#Bug.input.Input| |a#4#0#0|))
)))
(assert (forall ((|a#10#0#0| T@U) ) (! (= (DatatypeCtorId (|#Option.t.Some| |a#10#0#0|)) |##Option.t.Some|)
 :pattern ( (|#Option.t.Some| |a#10#0#0|))
)))
(assert (forall ((|a#14#0#0| T@U) ) (! (= (Option.t._h0 (|#Option.t.Some| |a#14#0#0|)) |a#14#0#0|)
 :pattern ( (|#Option.t.Some| |a#14#0#0|))
)))
(assert (forall ((x@@4 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@4)) x@@4)
 :pattern ( ($Box T@@4 x@@4))
)))
(assert (forall ((Option.t$A@@5 T@U) (|a#12#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#Option.t.Some| |a#12#0#0@@0|) (Tclass.Option.t Option.t$A@@5)) ($IsBox |a#12#0#0@@0| Option.t$A@@5))
 :pattern ( ($Is DatatypeTypeType (|#Option.t.Some| |a#12#0#0@@0|) (Tclass.Option.t Option.t$A@@5)))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (< (DtRank |a#5#0#0|) (DtRank (|#Bug.input.Input| |a#5#0#0|)))
 :pattern ( (|#Bug.input.Input| |a#5#0#0|))
)))
(assert (forall ((|a#15#0#0| T@U) ) (! (< (BoxRank |a#15#0#0|) (DtRank (|#Option.t.Some| |a#15#0#0|)))
 :pattern ( (|#Option.t.Some| |a#15#0#0|))
)))
(assert (forall ((d@@7 T@U) (Option.t$A@@6 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (Option.t.Some_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass.Option.t Option.t$A@@6) $h@@1))) ($IsAllocBox (Option.t._h0 d@@7) Option.t$A@@6 $h@@1))
 :pattern ( ($IsAllocBox (Option.t._h0 d@@7) Option.t$A@@6 $h@@1))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#5| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#5| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@8 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@8)) (DtRank d@@8))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@8)))
)))
(assert (forall ((Option.t$A@@7 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass.Option.t Option.t$A@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) (Tclass.Option.t Option.t$A@@7))))
 :pattern ( ($IsBox bx@@3 (Tclass.Option.t Option.t$A@@7)))
)))
(assert (forall ((d@@9 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) ($Is DatatypeTypeType d@@9 Tclass.Bug.input)) ($IsAlloc DatatypeTypeType d@@9 Tclass.Bug.input $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType d@@9 Tclass.Bug.input $h@@2))
)))
(assert (forall ((d@@10 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) ($Is DatatypeTypeType d@@10 Tclass.P.t)) ($IsAlloc DatatypeTypeType d@@10 Tclass.P.t $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType d@@10 Tclass.P.t $h@@3))
)))
(assert (= (Tag Tclass.Bug.input) Tagclass.Bug.input))
(assert (= (TagFamily Tclass.Bug.input) tytagFamily$input))
(assert (= (Tag Tclass.P.t) Tagclass.P.t))
(assert (= (TagFamily Tclass.P.t) tytagFamily$t))
(assert (= |#Option.t.None| (Lit DatatypeTypeType |#Option.t.None|)))
(assert (forall ((|a#3#0#0| T@U) ) (! (= (|#Bug.input.Input| (Lit DatatypeTypeType |a#3#0#0|)) (Lit DatatypeTypeType (|#Bug.input.Input| |a#3#0#0|)))
 :pattern ( (|#Bug.input.Input| (Lit DatatypeTypeType |a#3#0#0|)))
)))
(assert (forall ((|a#13#0#0| T@U) ) (! (= (|#Option.t.Some| (Lit BoxType |a#13#0#0|)) (Lit DatatypeTypeType (|#Option.t.Some| |a#13#0#0|)))
 :pattern ( (|#Option.t.Some| (Lit BoxType |a#13#0#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@5)) (Lit BoxType ($Box T@@5 x@@5)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@5)))
)))
(assert (forall ((d@@11 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (Bug.input.Input_q d@@11) ($IsAlloc DatatypeTypeType d@@11 Tclass.Bug.input $h@@4))) ($IsAlloc DatatypeTypeType (Bug.input.z d@@11) (Tclass.Option.t Tclass.P.t) $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (Bug.input.z d@@11) (Tclass.Option.t Tclass.P.t) $h@@4))
)))
(assert (forall ((h@@3 T@U) (v@@2 T@U) ) (! ($IsAlloc boolType v@@2 TBool h@@3)
 :pattern ( ($IsAlloc boolType v@@2 TBool h@@3))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is boolType v@@3 TBool)
 :pattern ( ($Is boolType v@@3 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |_mcc#0#0| () T@U)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |lambdaResult#0| () Bool)
(declare-fun |x#0@0| () T@U)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun |$_Frame#l0@0| () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let ((anon14_Else_correct true))
(let ((anon14_Then_correct  (=> (and (= |_mcc#0#0| |#Option.t.None|) (= (ControlFlow 0 7) (- 0 6))) false)))
(let ((anon13_Else_correct  (=> (or (not (= |_mcc#0#0| (|#Option.t.Some| ($Box DatatypeTypeType |_mcc#1#0|)))) (not true)) (and (=> (= (ControlFlow 0 9) 7) anon14_Then_correct) (=> (= (ControlFlow 0 9) 8) anon14_Else_correct)))))
(let ((anon12_Else_correct true))
(let ((anon8_correct true))
(let ((anon13_Then_correct  (=> (= |_mcc#0#0| (|#Option.t.Some| ($Box DatatypeTypeType |_mcc#1#0|))) (=> (and (and ($Is DatatypeTypeType |_mcc#1#0| Tclass.P.t) (= |lambdaResult#0| (U_2_bool (Lit boolType (bool_2_U true))))) (and ($Is boolType (bool_2_U |lambdaResult#0|) TBool) (= (ControlFlow 0 5) 2))) anon8_correct))))
(let ((anon12_Then_correct  (=> (and (= |x#0@0| (|#Bug.input.Input| |_mcc#0#0|)) ($Is DatatypeTypeType |_mcc#0#0| (Tclass.Option.t Tclass.P.t))) (and (=> (= (ControlFlow 0 10) 5) anon13_Then_correct) (=> (= (ControlFlow 0 10) 9) anon13_Else_correct)))))
(let ((anon11_Then_correct  (=> (and (and ($Is DatatypeTypeType |x#0@0| Tclass.Bug.input) ($IsAlloc DatatypeTypeType |x#0@0| Tclass.Bug.input |$lambdaHeap#0@0|)) (= |$_Frame#l0@0| (|lambda#5| null |$lambdaHeap#0@0| alloc false))) (and (=> (= (ControlFlow 0 11) 10) anon12_Then_correct) (=> (= (ControlFlow 0 11) 4) anon12_Else_correct)))))
(let ((anon11_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |x#0@0| Tclass.Bug.input) ($IsAlloc DatatypeTypeType |x#0@0| Tclass.Bug.input |$lambdaHeap#0@0|))) (= (ControlFlow 0 3) 2)) anon8_correct)))
(let ((anon10_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap |$lambdaHeap#0@0|) ($HeapSucc $Heap |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 12) 11) anon11_Then_correct) (=> (= (ControlFlow 0 12) 3) anon11_Else_correct)))))
(let ((anon10_Else_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#5| null $Heap alloc false)) (and (=> (= (ControlFlow 0 13) 12) anon10_Then_correct) (=> (= (ControlFlow 0 13) 1) anon10_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 14) 13))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 7) (- 6))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
