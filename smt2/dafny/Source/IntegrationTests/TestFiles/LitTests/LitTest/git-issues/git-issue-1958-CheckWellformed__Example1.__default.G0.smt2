(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (Int) T@U)
(declare-fun $generated@@26 (Int) Bool)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@28 (Int) T@U)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@45 (T@U) Int)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@51 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@111 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert  (=> (<= 2 $generated@@24) (forall (($generated@@29 Int) ) (!  (=> (or ($generated@@26 $generated@@29) (and (< 2 $generated@@24) (<= ($generated@@27 0) $generated@@29))) (= ($generated@@25 $generated@@29) ($generated@@28 $generated@@29)))
 :pattern ( ($generated@@25 $generated@@29))
))))
(assert (= ($generated@@7 $generated@@31) 3))
(assert  (=> (<= 2 $generated@@24) (forall (($generated@@33 Int) ) (!  (=> (or ($generated@@26 $generated@@33) (and (< 2 $generated@@24) (<= ($generated@@27 0) $generated@@33))) ($generated@@30 $generated@@31 ($generated@@25 $generated@@33) $generated@@32))
 :pattern ( ($generated@@25 $generated@@33))
))))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@27 $generated@@34) $generated@@34)
 :pattern ( ($generated@@27 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@39 $generated@@41 ($generated@@38 $generated@@41 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@38 $generated@@41 $generated@@40))
)))
(assert  (=> (<= 2 $generated@@24) (forall (($generated@@42 Int) ) (!  (=> (or ($generated@@26 ($generated@@27 $generated@@42)) (and (< 2 $generated@@24) (<= ($generated@@27 0) $generated@@42))) (= ($generated@@25 ($generated@@27 $generated@@42)) ($generated@@35 $generated@@31 ($generated@@28 ($generated@@27 $generated@@42)))))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@27 $generated@@42)))
))))
(assert (forall (($generated@@44 Int) ) (! (= ($generated@@43 ($generated@@28 $generated@@44)) $generated@@3)
 :pattern ( ($generated@@28 $generated@@44))
)))
(assert (forall (($generated@@46 Int) ) (! (= ($generated@@45 ($generated@@28 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@28 $generated@@46))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@38 $generated@@48 ($generated@@39 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@39 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@50 Int) ) (! (= ($generated@@30 $generated@@31 ($generated@@28 $generated@@50) $generated@@49) ($generated@@30 $generated@@9 ($generated@@13 $generated@@50) $generated))
 :pattern ( ($generated@@30 $generated@@31 ($generated@@28 $generated@@50) $generated@@49))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@51 $generated@@62 $generated@@63 $generated@@64 ($generated@@58 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@67 $generated@@68) $generated@@65)
 :weight 0
)) (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@51 $generated@@69 $generated@@70 $generated@@71 ($generated@@58 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@76 $generated@@77) ($generated@@51 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@76 $generated@@77)))
 :weight 0
)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@51 $generated@@78 $generated@@79 $generated@@80 ($generated@@58 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@51 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)))) (= ($generated@@7 $generated@@52) 4)) (= ($generated@@7 $generated@@53) 5)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@55 $generated@@87 $generated@@88 ($generated@@59 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@91) $generated@@89)
 :weight 0
))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@96 $generated@@97) (= ($generated@@55 $generated@@92 $generated@@93 ($generated@@59 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@97) ($generated@@55 $generated@@92 $generated@@93 $generated@@95 $generated@@97)))
 :weight 0
))) (= ($generated@@7 $generated@@56) 6)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (= ($generated@@7 ($generated@@57 $generated@@98 $generated@@99)) 7))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@60 ($generated@@57 $generated@@100 $generated@@101)) $generated@@100)
 :pattern ( ($generated@@57 $generated@@100 $generated@@101))
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@61 ($generated@@57 $generated@@102 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@57 $generated@@102 $generated@@103))
))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 Bool) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@12 ($generated@@51 $generated@@52 $generated@@53 $generated@@8 ($generated@@54 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))  (=> (and (or (not (= $generated@@108 $generated@@104)) (not true)) ($generated@@12 ($generated@@38 $generated@@8 ($generated@@55 $generated@@53 $generated@@56 ($generated@@55 $generated@@52 ($generated@@57 $generated@@53 $generated@@56) $generated@@105 $generated@@108) $generated@@106)))) $generated@@107))
 :pattern ( ($generated@@51 $generated@@52 $generated@@53 $generated@@8 ($generated@@54 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))
)))
(assert (= ($generated@@23 $generated@@32) $generated@@2))
(assert (= ($generated@@110 $generated@@32) $generated@@5))
(assert (= ($generated@@23 $generated@@49) $generated@@4))
(assert (= ($generated@@110 $generated@@49) $generated@@6))
(assert (forall (($generated@@112 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@112 $generated@@32)  (and ($generated@@30 $generated@@31 $generated@@112 $generated@@49) ($generated@@111 $generated@@112)))
 :pattern ( ($generated@@30 $generated@@31 $generated@@112 $generated@@32))
)))
(assert (forall (($generated@@113 Int) ) (! (= ($generated@@39 $generated@@9 ($generated@@13 ($generated@@27 $generated@@113))) ($generated@@35 $generated@@56 ($generated@@39 $generated@@9 ($generated@@13 $generated@@113))))
 :pattern ( ($generated@@39 $generated@@9 ($generated@@13 ($generated@@27 $generated@@113))))
)))
(assert (forall (($generated@@114 Int) ) (! (= ($generated@@28 ($generated@@27 $generated@@114)) ($generated@@35 $generated@@31 ($generated@@28 $generated@@114)))
 :pattern ( ($generated@@28 ($generated@@27 $generated@@114)))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@T) ) (! (= ($generated@@39 $generated@@116 ($generated@@35 $generated@@116 $generated@@115)) ($generated@@35 $generated@@56 ($generated@@39 $generated@@116 $generated@@115)))
 :pattern ( ($generated@@39 $generated@@116 ($generated@@35 $generated@@116 $generated@@115)))
)))
(assert (forall (($generated@@117 T@U) ) (! ($generated@@30 $generated@@9 $generated@@117 $generated)
 :pattern ( ($generated@@30 $generated@@9 $generated@@117 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@124  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@30 $generated@@31 ($generated@@28 $generated@@118) $generated@@32))))
(let (($generated@@125 true))
(let (($generated@@126  (=> (= $generated@@119 ($generated@@54 $generated@@120 $generated@@121 $generated@@1 false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@125) (=> (= (ControlFlow 0 4) 3) $generated@@124)))))
(let (($generated@@127  (=> (and (and (and ($generated@@122 $generated@@121) ($generated@@123 $generated@@121)) (<= ($generated@@27 0) $generated@@118)) (and (= 2 $generated@@24) (= (ControlFlow 0 5) 4))) $generated@@126)))
$generated@@127)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
