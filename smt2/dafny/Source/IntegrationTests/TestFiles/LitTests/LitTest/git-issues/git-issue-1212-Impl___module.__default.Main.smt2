(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun Tagclass._module.K () T@U)
(declare-fun Tagclass._module.K? () T@U)
(declare-fun Tagclass._module.H () T@U)
(declare-fun class._module.H? () T@U)
(declare-fun Tagclass._module.H? () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun tytagFamily$K () T@U)
(declare-fun tytagFamily$H () T@U)
(declare-fun field$data () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.H (T@U) T@U)
(declare-fun Tclass._module.H? (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass._module.K? () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.K () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun _module.H.data () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun implements$_module.H (T@U T@U) Bool)
(declare-fun Div (Int Int) Int)
(declare-fun DeclType (T@U) T@U)
(declare-fun Tclass._module.H_0 (T@U) T@U)
(declare-fun Tclass._module.H?_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc allocName |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 Tagclass._module.K Tagclass._module.K? Tagclass._module.H class._module.H? Tagclass._module.H? |tytagFamily$_tuple#0| tytagFamily$K tytagFamily$H field$data)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((d T@U) ) (!  (=> (|$IsA#_System.Tuple0| d) (_System.Tuple0.___hMake0_q d))
 :pattern ( (|$IsA#_System.Tuple0| d))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_module.H$Y T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.H _module.H$Y) $h) ($IsAlloc refType |c#0| (Tclass._module.H? _module.H$Y) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.H _module.H$Y) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.H? _module.H$Y) $h))
)))
(assert (forall ((bx T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.K? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx (Tclass._module.H? TInt) $h@@0))
 :pattern ( ($IsAllocBox bx Tclass._module.K? $h@@0))
)))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.K?)  (or (= $o null) (= (dtype $o) Tclass._module.K?)))
 :pattern ( ($Is refType $o Tclass._module.K?))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.K $h@@1) ($IsAlloc refType |c#0@@0| Tclass._module.K? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.K $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.K? $h@@1))
)))
(assert (= (Ctor DatatypeTypeType) 4))
(assert (forall ((d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 Tclass._System.Tuple0) (_System.Tuple0.___hMake0_q d@@0))
 :pattern ( (_System.Tuple0.___hMake0_q d@@0) ($Is DatatypeTypeType d@@0 Tclass._System.Tuple0))
)))
(assert ($Is DatatypeTypeType |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.H$Y@@0 T@U) ($o@@0 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._module.H? _module.H$Y@@0) $h@@2)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._module.H? _module.H$Y@@0) $h@@2))
)))
(assert (= (FDim _module.H.data) 0))
(assert (= (FieldOfDecl class._module.H? field$data) _module.H.data))
(assert  (not ($IsGhostField _module.H.data)))
(assert (forall (($o@@1 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.K? $h@@3)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.K? $h@@3))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_System.Tuple0#Equal| a b) (= a b))
 :pattern ( (|_System.Tuple0#Equal| a b))
)))
(assert (forall (($o@@2 T@U) ) (!  (=> ($Is refType $o@@2 Tclass._module.K?) ($Is refType $o@@2 (Tclass._module.H? TInt)))
 :pattern ( ($Is refType $o@@2 Tclass._module.K?))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.K?) ($IsBox bx@@0 (Tclass._module.H? TInt)))
 :pattern ( ($IsBox bx@@0 Tclass._module.K?))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_System.Tuple0.___hMake0_q d@@1) (= (DatatypeCtorId d@@1) |##_System._tuple#0._#Make0|))
 :pattern ( (_System.Tuple0.___hMake0_q d@@1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_System.Tuple0.___hMake0_q d@@2) (= d@@2 |#_System._tuple#0._#Make0|))
 :pattern ( (_System.Tuple0.___hMake0_q d@@2))
)))
(assert (forall ((_module.H$Y@@1 T@U) ($h@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@3 null)) (not true)) ($Is refType $o@@3 (Tclass._module.H? _module.H$Y@@1)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) _module.H.data) _module.H$Y@@1 $h@@4))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) _module.H.data) (Tclass._module.H? _module.H$Y@@1))
)))
(assert ($IsGhostField alloc))
(assert (forall ((_module.H$Y@@2 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._module.H _module.H$Y@@2))  (and ($Is refType |c#0@@1| (Tclass._module.H? _module.H$Y@@2)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.H _module.H$Y@@2)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.H? _module.H$Y@@2)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@1 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@1 t@@0 h@@1) ($IsAllocBox bx@@1 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@1 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_module.H$Y@@3 T@U) ) (!  (and (= (Tag (Tclass._module.H _module.H$Y@@3)) Tagclass._module.H) (= (TagFamily (Tclass._module.H _module.H$Y@@3)) tytagFamily$H))
 :pattern ( (Tclass._module.H _module.H$Y@@3))
)))
(assert (forall ((_module.H$Y@@4 T@U) ) (!  (and (= (Tag (Tclass._module.H? _module.H$Y@@4)) Tagclass._module.H?) (= (TagFamily (Tclass._module.H? _module.H$Y@@4)) tytagFamily$H))
 :pattern ( (Tclass._module.H? _module.H$Y@@4))
)))
(assert (forall ((h@@3 T@U) (k@@2 T@U) ) (!  (=> ($HeapSuccGhost h@@3 k@@2) (and ($HeapSucc h@@3 k@@2) (forall ((o@@0 T@U) (f T@U) ) (!  (=> (not ($IsGhostField f)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 o@@0) f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k@@2 o@@0) f)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k@@2 o@@0) f))
))))
 :pattern ( ($HeapSuccGhost h@@3 k@@2))
)))
(assert (forall ((_module.H$Y@@5 T@U) ($h@@5 T@U) ($o@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@4 null)) (not true)) ($Is refType $o@@4 (Tclass._module.H? _module.H$Y@@5)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) _module.H.data) _module.H$Y@@5))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@4) _module.H.data) (Tclass._module.H? _module.H$Y@@5))
)))
(assert (implements$_module.H Tclass._module.K? TInt))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.Tuple0) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass._System.Tuple0)))
 :pattern ( ($IsBox bx@@2 Tclass._System.Tuple0))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.K) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.K)))
 :pattern ( ($IsBox bx@@3 Tclass._module.K))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.K?) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._module.K?)))
 :pattern ( ($IsBox bx@@4 Tclass._module.K?))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.K)  (and ($Is refType |c#0@@2| Tclass._module.K?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.K))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.K?))
)))
(assert (forall (($o@@5 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@5 Tclass._module.K? $heap) ($IsAlloc refType $o@@5 (Tclass._module.H? TInt) $heap))
 :pattern ( ($IsAlloc refType $o@@5 Tclass._module.K? $heap))
)))
(assert (forall ((x@@5 Int) (y Int) ) (! (= (Div x@@5 y) (div x@@5 y))
 :pattern ( (Div x@@5 y))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TInt) (and (= ($Box intType ($Unbox intType bx@@5)) bx@@5) ($Is intType ($Unbox intType bx@@5) TInt)))
 :pattern ( ($IsBox bx@@5 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((_module.H$Y@@6 T@U) ) (! (= (Tclass._module.H_0 (Tclass._module.H _module.H$Y@@6)) _module.H$Y@@6)
 :pattern ( (Tclass._module.H _module.H$Y@@6))
)))
(assert (forall ((_module.H$Y@@7 T@U) ) (! (= (Tclass._module.H?_0 (Tclass._module.H? _module.H$Y@@7)) _module.H$Y@@7)
 :pattern ( (Tclass._module.H? _module.H$Y@@7))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert (forall ((_module.H$Y@@8 T@U) ($o@@6 T@U) ) (! (= ($Is refType $o@@6 (Tclass._module.H? _module.H$Y@@8))  (or (= $o@@6 null) (implements$_module.H (dtype $o@@6) _module.H$Y@@8)))
 :pattern ( ($Is refType $o@@6 (Tclass._module.H? _module.H$Y@@8)))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@7 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))  (=> (and (or (not (= $o@@7 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))
)))
(assert (forall ((_module.H$Y@@9 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._module.H _module.H$Y@@9)) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) (Tclass._module.H _module.H$Y@@9))))
 :pattern ( ($IsBox bx@@6 (Tclass._module.H _module.H$Y@@9)))
)))
(assert (forall ((_module.H$Y@@10 T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._module.H? _module.H$Y@@10)) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) (Tclass._module.H? _module.H$Y@@10))))
 :pattern ( ($IsBox bx@@7 (Tclass._module.H? _module.H$Y@@10)))
)))
(assert (forall ((h@@4 T@U) (r T@U) (f@@0 T@U) (x@@7 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f@@0 x@@7))) ($HeapSucc h@@4 (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f@@0 x@@7))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f@@0 x@@7)))
)))
(assert (forall ((d@@3 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) ($Is DatatypeTypeType d@@3 Tclass._System.Tuple0)) ($IsAlloc DatatypeTypeType d@@3 Tclass._System.Tuple0 $h@@6))
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 Tclass._System.Tuple0 $h@@6))
)))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (= (Tag Tclass._module.K) Tagclass._module.K))
(assert (= (TagFamily Tclass._module.K) tytagFamily$K))
(assert (= (Tag Tclass._module.K?) Tagclass._module.K?))
(assert (= (TagFamily Tclass._module.K?) tytagFamily$K))
(assert (= |#_System._tuple#0._#Make0| (Lit DatatypeTypeType |#_System._tuple#0._#Make0|)))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((x@@9 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@9)) (Lit BoxType ($Box T@@5 x@@9)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@9)))
)))
(assert (forall ((h@@5 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@5)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@5))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (|_System.Tuple0#Equal| a@@1 b@@1)
 :pattern ( (|_System.Tuple0#Equal| a@@1 b@@1))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $nw@0 () T@U)
(declare-fun |call2formal@b#0@0| () T@U)
(declare-fun |x#0@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@3 () T@U)
(declare-fun $Heap () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |call2formal@b#0| () T@U)
(declare-fun |defass#k#0| () Bool)
(declare-fun |k#0| () T@U)
(declare-fun |defass#a#0| () Bool)
(declare-fun |a#0| () T@U)
(declare-fun |defass#b#0| () Bool)
(declare-fun |b#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 25) (let ((anon2_correct  (and (=> (= (ControlFlow 0 2) (- 0 15)) (= $nw@0 $nw@0)) (and (=> (= (ControlFlow 0 2) (- 0 14)) (= $nw@0 |call2formal@b#0@0|)) (=> (and (= $nw@0 $nw@0) (= $nw@0 |call2formal@b#0@0|)) (and (=> (= (ControlFlow 0 2) (- 0 13)) true) (and (=> (= (ControlFlow 0 2) (- 0 12)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (=> (= |x#0@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) _module.H.data)))) (and (=> (= (ControlFlow 0 2) (- 0 11)) true) (and (=> (= (ControlFlow 0 2) (- 0 10)) (forall (($o@@8 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8) alloc)))) (= $o@@8 $nw@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@8 $f@@0))))) (=> (forall (($o@@9 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@9) alloc)))) (= $o@@9 $nw@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@9 $f@@1)))) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@0) _module.H.data))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) _module.H.data))))) (not true))) (and (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@10) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@10)) (= $o@@10 $nw@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@10))
)) ($HeapSucc $Heap@1 $Heap@2))) (and (=> (= (ControlFlow 0 2) (- 0 9)) true) (and (=> (= (ControlFlow 0 2) (- 0 8)) ($IsAlloc refType |call2formal@b#0@0| (Tclass._module.H Tclass._System.Tuple0) $Heap@1)) (=> ($IsAlloc refType |call2formal@b#0@0| (Tclass._module.H Tclass._System.Tuple0) $Heap@1) (and (=> (= (ControlFlow 0 2) (- 0 7)) ($IsAlloc refType |call2formal@b#0@0| (Tclass._module.H Tclass._System.Tuple0) $Heap@1)) (=> ($IsAlloc refType |call2formal@b#0@0| (Tclass._module.H Tclass._System.Tuple0) $Heap@1) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (|$IsA#_System.Tuple0| ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |call2formal@b#0@0|) _module.H.data))) (|$IsA#_System.Tuple0| ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |call2formal@b#0@0|) _module.H.data)))) (and (|_System.Tuple0#Equal| ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |call2formal@b#0@0|) _module.H.data)) ($Unbox DatatypeTypeType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |call2formal@b#0@0|) _module.H.data))) (= $Heap@2 $Heap@3))) (and (=> (= (ControlFlow 0 2) (- 0 6)) true) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) _module.H.data))) |x#0@0|)) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@0) _module.H.data))) |x#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 3)) (U_2_bool (Lit boolType (bool_2_U false)))) (=> (U_2_bool (Lit boolType (bool_2_U false))) (=> (= (ControlFlow 0 2) (- 0 1)) (or (not (= (LitInt 0) 0)) (not true)))))))))))))))))))))))))))))
(let ((anon3_Else_correct  (=> (and (or (not (= $nw@0 $nw@0)) (not true)) (= (ControlFlow 0 19) 2)) anon2_correct)))
(let ((anon3_Then_correct  (=> (= $nw@0 $nw@0) (and (=> (= (ControlFlow 0 16) (- 0 18)) true) (and (=> (= (ControlFlow 0 16) (- 0 17)) true) (=> (= (ControlFlow 0 16) 2) anon2_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 Tclass._module.K?)) (=> (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc)))) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (=> (= (ControlFlow 0 20) (- 0 24)) true) (and (=> (= (ControlFlow 0 20) (- 0 23)) true) (=> (and (and ($Is refType |call2formal@b#0| (Tclass._module.H Tclass._System.Tuple0)) ($IsAlloc refType |call2formal@b#0| (Tclass._module.H Tclass._System.Tuple0) $Heap)) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (=> (and (and (and ($Is refType |call2formal@b#0@0| (Tclass._module.H Tclass._System.Tuple0)) ($IsAlloc refType |call2formal@b#0@0| (Tclass._module.H Tclass._System.Tuple0) $Heap@1)) (= |call2formal@b#0@0| $nw@0)) (and (forall (($o@@11 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@11) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@11) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@11)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@11))
)) ($HeapSuccGhost $Heap@0 $Heap@1))) (and (=> (= (ControlFlow 0 20) (- 0 22)) true) (and (=> (= (ControlFlow 0 20) (- 0 21)) true) (and (=> (= (ControlFlow 0 20) 16) anon3_Then_correct) (=> (= (ControlFlow 0 20) 19) anon3_Else_correct)))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (=> |defass#k#0| (and ($Is refType |k#0| Tclass._module.K) ($IsAlloc refType |k#0| Tclass._module.K $Heap))) true) (and (=> |defass#a#0| (and ($Is refType |a#0| (Tclass._module.H TInt)) ($IsAlloc refType |a#0| (Tclass._module.H TInt) $Heap))) true)) (and (and (=> |defass#b#0| (and ($Is refType |b#0| (Tclass._module.H Tclass._System.Tuple0)) ($IsAlloc refType |b#0| (Tclass._module.H Tclass._System.Tuple0) $Heap))) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 25) 20)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
