(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (Int) Int)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 (T@T T@T) T@T)
(declare-fun $generated@@38 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@90 (T@U) T@U)
(declare-fun $generated@@91 () T@U)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@93 () T@U)
(declare-fun $generated@@94 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (forall (($generated@@21 Int) ) (! (= ($generated@@20 $generated@@21) $generated@@21)
 :pattern ( ($generated@@20 $generated@@21))
)))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@T) ) (! (= ($generated@@22 $generated@@24 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@24 $generated@@23))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 ($generated@@25 $generated@@28 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@25 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@25 $generated@@30 ($generated@@26 $generated@@30 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@26 $generated@@30 $generated@@29))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@31 $generated@@42 $generated@@43 $generated@@44 ($generated@@38 $generated@@42 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@48 $generated@@45) $generated@@47 $generated@@48) $generated@@45)
 :weight 0
)) (and (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@54 $generated@@56) (= ($generated@@31 $generated@@49 $generated@@50 $generated@@51 ($generated@@38 $generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@55 $generated@@52) $generated@@56 $generated@@57) ($generated@@31 $generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@56 $generated@@57)))
 :weight 0
)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (or (= $generated@@64 $generated@@66) (= ($generated@@31 $generated@@58 $generated@@59 $generated@@60 ($generated@@38 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@65 $generated@@66) ($generated@@31 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@65 $generated@@66)))
 :weight 0
)))) (= ($generated@@4 $generated@@32) 3)) (= ($generated@@4 $generated@@33) 4)) (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@35 $generated@@67 $generated@@68 ($generated@@39 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@69) $generated@@71) $generated@@69)
 :weight 0
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@76 $generated@@77) (= ($generated@@35 $generated@@72 $generated@@73 ($generated@@39 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@74) $generated@@77) ($generated@@35 $generated@@72 $generated@@73 $generated@@75 $generated@@77)))
 :weight 0
))) (= ($generated@@4 $generated@@36) 5)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ) (= ($generated@@4 ($generated@@37 $generated@@78 $generated@@79)) 6))) (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@80 $generated@@81)) $generated@@80)
 :pattern ( ($generated@@37 $generated@@80 $generated@@81))
))) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@41 ($generated@@37 $generated@@82 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@37 $generated@@82 $generated@@83))
))))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 Bool) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@9 ($generated@@31 $generated@@32 $generated@@33 $generated@@5 ($generated@@34 $generated@@84 $generated@@85 $generated@@86 $generated@@87) $generated@@88 $generated@@89))  (=> (and (or (not (= $generated@@88 $generated@@84)) (not true)) ($generated@@9 ($generated@@25 $generated@@5 ($generated@@35 $generated@@33 $generated@@36 ($generated@@35 $generated@@32 ($generated@@37 $generated@@33 $generated@@36) $generated@@85 $generated@@88) $generated@@86)))) $generated@@87))
 :pattern ( ($generated@@31 $generated@@32 $generated@@33 $generated@@5 ($generated@@34 $generated@@84 $generated@@85 $generated@@86 $generated@@87) $generated@@88 $generated@@89))
)))
(assert (= ($generated@@90 $generated@@91) $generated@@0))
(assert (= ($generated@@92 $generated@@91) $generated@@2))
(assert (= ($generated@@90 $generated@@93) $generated@@1))
(assert (= ($generated@@92 $generated@@93) $generated@@3))
(assert (forall (($generated@@95 T@U) ) (! (= ($generated@@94 $generated@@6 $generated@@95 $generated@@93)  (and (<= ($generated@@20 2) ($generated@@11 $generated@@95)) (< ($generated@@11 $generated@@95) 7)))
 :pattern ( ($generated@@94 $generated@@6 $generated@@95 $generated@@93))
)))
(assert (forall (($generated@@96 T@U) ) (! (= ($generated@@94 $generated@@6 $generated@@96 $generated@@91)  (and (<= ($generated@@20 2) ($generated@@11 $generated@@96)) (< ($generated@@11 $generated@@96) 7)))
 :pattern ( ($generated@@94 $generated@@6 $generated@@96 $generated@@91))
)))
(assert (forall (($generated@@97 Int) ) (! (= ($generated@@26 $generated@@6 ($generated@@10 ($generated@@20 $generated@@97))) ($generated@@22 $generated@@36 ($generated@@26 $generated@@6 ($generated@@10 $generated@@97))))
 :pattern ( ($generated@@26 $generated@@6 ($generated@@10 ($generated@@20 $generated@@97))))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@26 $generated@@99 ($generated@@22 $generated@@99 $generated@@98)) ($generated@@22 $generated@@36 ($generated@@26 $generated@@99 $generated@@98)))
 :pattern ( ($generated@@26 $generated@@99 ($generated@@22 $generated@@99 $generated@@98)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@100 () Int)
(declare-fun $generated@@101 () Int)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Bool)
(declare-fun $generated@@105 () Int)
(declare-fun $generated@@106 () Bool)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 () T@U)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 () Int)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@114 (T@U) Bool)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@123  (and (=> (= (ControlFlow 0 2) (- 0 7)) ($generated@@94 $generated@@6 ($generated@@10 ($generated@@20 3)) $generated@@93)) (=> ($generated@@94 $generated@@6 ($generated@@10 ($generated@@20 3)) $generated@@93) (=> (= $generated@@100 ($generated@@20 3)) (and (=> (= (ControlFlow 0 2) (- 0 6)) ($generated@@94 $generated@@6 ($generated@@10 ($generated@@20 3)) $generated@@91)) (=> ($generated@@94 $generated@@6 ($generated@@10 ($generated@@20 3)) $generated@@91) (=> (= $generated@@101 ($generated@@20 3)) (=> (and (and (<= ($generated@@20 2) $generated@@102) (< $generated@@102 7)) (=> true (and (<= ($generated@@20 2) $generated@@103) (< $generated@@103 7)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (< $generated@@102 9)) (=> (< $generated@@102 9) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (< $generated@@103 12)))))))))))))))
(let (($generated@@124  (and (=> (= (ControlFlow 0 8) (- 0 12)) $generated@@104) (=> $generated@@104 (and (=> (= (ControlFlow 0 8) (- 0 11)) (< $generated@@105 9)) (=> (< $generated@@105 9) (and (=> (= (ControlFlow 0 8) (- 0 10)) $generated@@106) (=> $generated@@106 (and (=> (= (ControlFlow 0 8) (- 0 9)) (< $generated@@107 10)) (=> (< $generated@@107 10) (=> (= (ControlFlow 0 8) 2) $generated@@123)))))))))))
(let (($generated@@125  (=> (= $generated@@108 ($generated@@34 $generated@@109 $generated@@110 $generated false)) (=> (and (=> $generated@@104 (and (<= ($generated@@20 2) $generated@@111) (< $generated@@111 7))) (=> $generated@@106 (and (<= ($generated@@20 2) $generated@@112) (< $generated@@112 7)))) (=> (and (and (<= ($generated@@20 2) $generated@@105) (< $generated@@105 7)) (=> $generated@@106 (and (<= ($generated@@20 2) $generated@@107) (< $generated@@107 7)))) (and (=> (= (ControlFlow 0 13) 8) $generated@@124) (=> (= (ControlFlow 0 13) 2) $generated@@123)))))))
(let (($generated@@126  (=> (and (and (and ($generated@@113 $generated@@110) ($generated@@114 $generated@@110)) (<= ($generated@@20 0) $generated@@115)) (and (and (=> $generated@@104 (and (<= ($generated@@20 2) $generated@@116) (< $generated@@116 7))) true) (and (=> $generated@@106 (and (<= ($generated@@20 2) $generated@@117) (< $generated@@117 7))) true))) (=> (and (and (and (and (<= ($generated@@20 2) $generated@@118) (< $generated@@118 7)) true) (and (=> $generated@@106 (and (<= ($generated@@20 2) $generated@@119) (< $generated@@119 7))) true)) (and (and (and (<= ($generated@@20 2) $generated@@120) (< $generated@@120 7)) true) (and (and (=> $generated@@106 (and (<= ($generated@@20 2) $generated@@121) (< $generated@@121 7))) true) (and (= 1 $generated@@122) (= (ControlFlow 0 14) 13))))) $generated@@125))))
$generated@@126)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 12))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 8) (- 10))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
