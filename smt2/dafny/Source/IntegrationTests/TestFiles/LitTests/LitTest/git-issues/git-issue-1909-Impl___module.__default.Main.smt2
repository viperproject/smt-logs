(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@34 (Int Int Int) T@U)
(declare-fun $generated@@35 (T@U) Int)
(declare-fun $generated@@36 (T@U) Int)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@48 (T@U) Int)
(declare-fun $generated@@55 (Int Int Int) T@U)
(declare-fun $generated@@59 (T@U) Int)
(declare-fun $generated@@63 (T@U) Int)
(declare-fun $generated@@67 (T@U) Int)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@72 (T@U) Bool)
(declare-fun $generated@@77 (T@U) T@U)
(declare-fun $generated@@78 (T@U) Bool)
(declare-fun $generated@@79 () T@U)
(declare-fun $generated@@80 (T@U) Bool)
(declare-fun $generated@@102 (T@T T@U) T@U)
(declare-fun $generated@@103 (T@T T@U) T@U)
(declare-fun $generated@@129 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@130 () T@T)
(declare-fun $generated@@131 () T@T)
(declare-fun $generated@@132 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@133 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@134 () T@T)
(declare-fun $generated@@135 (T@T T@T) T@T)
(declare-fun $generated@@136 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@137 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@138 (T@T) T@T)
(declare-fun $generated@@139 (T@T) T@T)
(declare-fun $generated@@188 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@189 (T@U) Bool)
(declare-fun $generated@@206 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (= ($generated@@8 $generated@@28) 3))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@37 T@U) ) (!  (=> (or ($generated@@29 ($generated@@27 $generated@@28 $generated@@37)) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@37 $generated@@31))) (and (let (($generated@@38 ($generated@@27 $generated@@28 $generated@@37)))
 (and ($generated@@32 $generated@@38) ($generated@@32 $generated@@38))) (= ($generated@@26 ($generated@@27 $generated@@28 $generated@@37)) (let (($generated@@39 ($generated@@27 $generated@@28 $generated@@37)))
(let (($generated@@40 ($generated@@33 42)))
($generated@@27 $generated@@28 ($generated@@34 ($generated@@33 ($generated@@35 $generated@@39)) $generated@@40 ($generated@@33 ($generated@@36 $generated@@39)))))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@28 $generated@@37)))
))))
(assert (forall (($generated@@42 Int) ($generated@@43 Int) ($generated@@44 Int) ) (! (= ($generated@@41 ($generated@@34 $generated@@42 $generated@@43 $generated@@44)) $generated@@4)
 :pattern ( ($generated@@34 $generated@@42 $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@45 Int) ($generated@@46 Int) ($generated@@47 Int) ) (! (= ($generated@@35 ($generated@@34 $generated@@45 $generated@@46 $generated@@47)) $generated@@45)
 :pattern ( ($generated@@34 $generated@@45 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 Int) ($generated@@50 Int) ($generated@@51 Int) ) (! (= ($generated@@48 ($generated@@34 $generated@@49 $generated@@50 $generated@@51)) $generated@@50)
 :pattern ( ($generated@@34 $generated@@49 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@52 Int) ($generated@@53 Int) ($generated@@54 Int) ) (! (= ($generated@@36 ($generated@@34 $generated@@52 $generated@@53 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@34 $generated@@52 $generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 Int) ($generated@@57 Int) ($generated@@58 Int) ) (! (= ($generated@@41 ($generated@@55 $generated@@56 $generated@@57 $generated@@58)) $generated@@5)
 :pattern ( ($generated@@55 $generated@@56 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@60 Int) ($generated@@61 Int) ($generated@@62 Int) ) (! (= ($generated@@59 ($generated@@55 $generated@@60 $generated@@61 $generated@@62)) $generated@@60)
 :pattern ( ($generated@@55 $generated@@60 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 Int) ($generated@@65 Int) ($generated@@66 Int) ) (! (= ($generated@@63 ($generated@@55 $generated@@64 $generated@@65 $generated@@66)) $generated@@65)
 :pattern ( ($generated@@55 $generated@@64 $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@68 Int) ($generated@@69 Int) ($generated@@70 Int) ) (! (= ($generated@@67 ($generated@@55 $generated@@68 $generated@@69 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@55 $generated@@68 $generated@@69 $generated@@70))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@73 T@U) ) (!  (=> (or ($generated@@72 ($generated@@27 $generated@@28 $generated@@73)) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@73 $generated@@31))) (= ($generated@@71 ($generated@@27 $generated@@28 $generated@@73)) (let (($generated@@74 ($generated@@33 90)))
(let (($generated@@75 ($generated@@33 100)))
(let (($generated@@76 ($generated@@33 42)))
($generated@@27 $generated@@28 ($generated@@34 $generated@@75 $generated@@76 $generated@@74)))))))
 :weight 3
 :pattern ( ($generated@@71 ($generated@@27 $generated@@28 $generated@@73)))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@81 T@U) ) (!  (=> (or ($generated@@78 ($generated@@27 $generated@@28 $generated@@81)) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@81 $generated@@79))) (and (let (($generated@@82 ($generated@@27 $generated@@28 $generated@@81)))
 (and ($generated@@80 $generated@@82) ($generated@@80 $generated@@82))) (= ($generated@@77 ($generated@@27 $generated@@28 $generated@@81)) (let (($generated@@83 ($generated@@27 $generated@@28 $generated@@81)))
(let (($generated@@84 ($generated@@33 3)))
($generated@@27 $generated@@28 ($generated@@55 $generated@@84 ($generated@@33 ($generated@@63 $generated@@83)) ($generated@@33 ($generated@@67 $generated@@83)))))))))
 :weight 3
 :pattern ( ($generated@@77 ($generated@@27 $generated@@28 $generated@@81)))
))))
(assert (forall (($generated@@85 T@U) ) (!  (=> ($generated@@30 $generated@@28 $generated@@85 $generated@@31) ($generated@@32 $generated@@85))
 :pattern ( ($generated@@32 $generated@@85) ($generated@@30 $generated@@28 $generated@@85 $generated@@31))
)))
(assert (forall (($generated@@86 T@U) ) (!  (=> ($generated@@30 $generated@@28 $generated@@86 $generated@@79) ($generated@@80 $generated@@86))
 :pattern ( ($generated@@80 $generated@@86) ($generated@@30 $generated@@28 $generated@@86 $generated@@79))
)))
(assert (forall (($generated@@87 Int) ($generated@@88 Int) ($generated@@89 Int) ) (! (= ($generated@@30 $generated@@28 ($generated@@34 $generated@@87 $generated@@88 $generated@@89) $generated@@31)  (and (and ($generated@@30 $generated@@10 ($generated@@14 $generated@@87) $generated) ($generated@@30 $generated@@10 ($generated@@14 $generated@@88) $generated)) ($generated@@30 $generated@@10 ($generated@@14 $generated@@89) $generated)))
 :pattern ( ($generated@@30 $generated@@28 ($generated@@34 $generated@@87 $generated@@88 $generated@@89) $generated@@31))
)))
(assert (forall (($generated@@90 Int) ($generated@@91 Int) ($generated@@92 Int) ) (! (= ($generated@@30 $generated@@28 ($generated@@55 $generated@@90 $generated@@91 $generated@@92) $generated@@79)  (and (and ($generated@@30 $generated@@10 ($generated@@14 $generated@@90) $generated) ($generated@@30 $generated@@10 ($generated@@14 $generated@@91) $generated)) ($generated@@30 $generated@@10 ($generated@@14 $generated@@92) $generated)))
 :pattern ( ($generated@@30 $generated@@28 ($generated@@55 $generated@@90 $generated@@91 $generated@@92) $generated@@79))
)))
(assert (forall (($generated@@93 Int) ) (! (= ($generated@@33 $generated@@93) $generated@@93)
 :pattern ( ($generated@@33 $generated@@93))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@27 $generated@@95 $generated@@94) $generated@@94)
 :pattern ( ($generated@@27 $generated@@95 $generated@@94))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@96 T@U) ) (!  (=> (or ($generated@@29 $generated@@96) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@96 $generated@@31))) (and (let (($generated@@97 $generated@@96))
 (and ($generated@@32 $generated@@97) ($generated@@32 $generated@@97))) (= ($generated@@26 $generated@@96) (let (($generated@@98 $generated@@96))
(let (($generated@@99 ($generated@@33 42)))
($generated@@34 ($generated@@35 $generated@@98) $generated@@99 ($generated@@36 $generated@@98)))))))
 :pattern ( ($generated@@26 $generated@@96))
))))
(assert (forall (($generated@@100 T@U) ) (! (= ($generated@@32 $generated@@100) (= ($generated@@41 $generated@@100) $generated@@4))
 :pattern ( ($generated@@32 $generated@@100))
)))
(assert (forall (($generated@@101 T@U) ) (! (= ($generated@@80 $generated@@101) (= ($generated@@41 $generated@@101) $generated@@5))
 :pattern ( ($generated@@80 $generated@@101))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@T) ) (! (= ($generated@@103 $generated@@105 ($generated@@102 $generated@@105 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@102 $generated@@105 $generated@@104))
)))
(assert (forall (($generated@@106 T@U) ) (!  (=> ($generated@@32 $generated@@106) (exists (($generated@@107 Int) ($generated@@108 Int) ($generated@@109 Int) ) (= $generated@@106 ($generated@@34 $generated@@107 $generated@@108 $generated@@109))))
 :pattern ( ($generated@@32 $generated@@106))
)))
(assert (forall (($generated@@110 T@U) ) (!  (=> ($generated@@80 $generated@@110) (exists (($generated@@111 Int) ($generated@@112 Int) ($generated@@113 Int) ) (= $generated@@110 ($generated@@55 $generated@@111 $generated@@112 $generated@@113))))
 :pattern ( ($generated@@80 $generated@@110))
)))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@114 T@U) ) (!  (=> (or ($generated@@78 $generated@@114) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@114 $generated@@79))) (and (let (($generated@@115 $generated@@114))
 (and ($generated@@80 $generated@@115) ($generated@@80 $generated@@115))) (= ($generated@@77 $generated@@114) (let (($generated@@116 $generated@@114))
(let (($generated@@117 ($generated@@33 3)))
($generated@@55 $generated@@117 ($generated@@63 $generated@@116) ($generated@@67 $generated@@116)))))))
 :pattern ( ($generated@@77 $generated@@114))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@118 T@U) ) (!  (=> (or ($generated@@29 $generated@@118) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@118 $generated@@31))) ($generated@@30 $generated@@28 ($generated@@26 $generated@@118) $generated@@31))
 :pattern ( ($generated@@26 $generated@@118))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@119 T@U) ) (!  (=> (or ($generated@@72 $generated@@119) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@119 $generated@@31))) ($generated@@30 $generated@@28 ($generated@@71 $generated@@119) $generated@@31))
 :pattern ( ($generated@@71 $generated@@119))
))))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@120 T@U) ) (!  (=> (or ($generated@@78 $generated@@120) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@120 $generated@@79))) ($generated@@30 $generated@@28 ($generated@@77 $generated@@120) $generated@@79))
 :pattern ( ($generated@@77 $generated@@120))
))))
(assert (forall (($generated@@121 Int) ($generated@@122 Int) ($generated@@123 Int) ) (! (= ($generated@@34 ($generated@@33 $generated@@121) ($generated@@33 $generated@@122) ($generated@@33 $generated@@123)) ($generated@@27 $generated@@28 ($generated@@34 $generated@@121 $generated@@122 $generated@@123)))
 :pattern ( ($generated@@34 ($generated@@33 $generated@@121) ($generated@@33 $generated@@122) ($generated@@33 $generated@@123)))
)))
(assert (forall (($generated@@124 Int) ($generated@@125 Int) ($generated@@126 Int) ) (! (= ($generated@@55 ($generated@@33 $generated@@124) ($generated@@33 $generated@@125) ($generated@@33 $generated@@126)) ($generated@@27 $generated@@28 ($generated@@55 $generated@@124 $generated@@125 $generated@@126)))
 :pattern ( ($generated@@55 ($generated@@33 $generated@@124) ($generated@@33 $generated@@125) ($generated@@33 $generated@@126)))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@T) ) (! (= ($generated@@102 $generated@@128 ($generated@@103 $generated@@128 $generated@@127)) $generated@@127)
 :pattern ( ($generated@@103 $generated@@128 $generated@@127))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@140 T@T) ($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@129 $generated@@140 $generated@@141 $generated@@142 ($generated@@136 $generated@@140 $generated@@141 $generated@@142 $generated@@144 $generated@@145 $generated@@146 $generated@@143) $generated@@145 $generated@@146) $generated@@143)
 :weight 0
)) (and (forall (($generated@@147 T@T) ($generated@@148 T@T) ($generated@@149 T@T) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ) (!  (or (= $generated@@152 $generated@@154) (= ($generated@@129 $generated@@147 $generated@@148 $generated@@149 ($generated@@136 $generated@@147 $generated@@148 $generated@@149 $generated@@151 $generated@@152 $generated@@153 $generated@@150) $generated@@154 $generated@@155) ($generated@@129 $generated@@147 $generated@@148 $generated@@149 $generated@@151 $generated@@154 $generated@@155)))
 :weight 0
)) (forall (($generated@@156 T@T) ($generated@@157 T@T) ($generated@@158 T@T) ($generated@@159 T@U) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ) (!  (or (= $generated@@162 $generated@@164) (= ($generated@@129 $generated@@156 $generated@@157 $generated@@158 ($generated@@136 $generated@@156 $generated@@157 $generated@@158 $generated@@160 $generated@@161 $generated@@162 $generated@@159) $generated@@163 $generated@@164) ($generated@@129 $generated@@156 $generated@@157 $generated@@158 $generated@@160 $generated@@163 $generated@@164)))
 :weight 0
)))) (= ($generated@@8 $generated@@130) 4)) (= ($generated@@8 $generated@@131) 5)) (forall (($generated@@165 T@T) ($generated@@166 T@T) ($generated@@167 T@U) ($generated@@168 T@U) ($generated@@169 T@U) ) (! (= ($generated@@133 $generated@@165 $generated@@166 ($generated@@137 $generated@@165 $generated@@166 $generated@@168 $generated@@169 $generated@@167) $generated@@169) $generated@@167)
 :weight 0
))) (forall (($generated@@170 T@T) ($generated@@171 T@T) ($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 T@U) ) (!  (or (= $generated@@174 $generated@@175) (= ($generated@@133 $generated@@170 $generated@@171 ($generated@@137 $generated@@170 $generated@@171 $generated@@173 $generated@@174 $generated@@172) $generated@@175) ($generated@@133 $generated@@170 $generated@@171 $generated@@173 $generated@@175)))
 :weight 0
))) (= ($generated@@8 $generated@@134) 6)) (forall (($generated@@176 T@T) ($generated@@177 T@T) ) (= ($generated@@8 ($generated@@135 $generated@@176 $generated@@177)) 7))) (forall (($generated@@178 T@T) ($generated@@179 T@T) ) (! (= ($generated@@138 ($generated@@135 $generated@@178 $generated@@179)) $generated@@178)
 :pattern ( ($generated@@135 $generated@@178 $generated@@179))
))) (forall (($generated@@180 T@T) ($generated@@181 T@T) ) (! (= ($generated@@139 ($generated@@135 $generated@@180 $generated@@181)) $generated@@181)
 :pattern ( ($generated@@135 $generated@@180 $generated@@181))
))))
(assert (forall (($generated@@182 T@U) ($generated@@183 T@U) ($generated@@184 T@U) ($generated@@185 Bool) ($generated@@186 T@U) ($generated@@187 T@U) ) (! (= ($generated@@13 ($generated@@129 $generated@@130 $generated@@131 $generated@@9 ($generated@@132 $generated@@182 $generated@@183 $generated@@184 $generated@@185) $generated@@186 $generated@@187))  (=> (and (or (not (= $generated@@186 $generated@@182)) (not true)) ($generated@@13 ($generated@@102 $generated@@9 ($generated@@133 $generated@@131 $generated@@134 ($generated@@133 $generated@@130 ($generated@@135 $generated@@131 $generated@@134) $generated@@183 $generated@@186) $generated@@184)))) $generated@@185))
 :pattern ( ($generated@@129 $generated@@130 $generated@@131 $generated@@9 ($generated@@132 $generated@@182 $generated@@183 $generated@@184 $generated@@185) $generated@@186 $generated@@187))
)))
(assert (forall (($generated@@190 T@U) ($generated@@191 T@U) ) (!  (=> (and ($generated@@189 $generated@@191) (and ($generated@@32 $generated@@190) ($generated@@188 $generated@@28 $generated@@190 $generated@@31 $generated@@191))) ($generated@@188 $generated@@10 ($generated@@14 ($generated@@35 $generated@@190)) $generated $generated@@191))
 :pattern ( ($generated@@188 $generated@@10 ($generated@@14 ($generated@@35 $generated@@190)) $generated $generated@@191))
)))
(assert (forall (($generated@@192 T@U) ($generated@@193 T@U) ) (!  (=> (and ($generated@@189 $generated@@193) (and ($generated@@32 $generated@@192) ($generated@@188 $generated@@28 $generated@@192 $generated@@31 $generated@@193))) ($generated@@188 $generated@@10 ($generated@@14 ($generated@@48 $generated@@192)) $generated $generated@@193))
 :pattern ( ($generated@@188 $generated@@10 ($generated@@14 ($generated@@48 $generated@@192)) $generated $generated@@193))
)))
(assert (forall (($generated@@194 T@U) ($generated@@195 T@U) ) (!  (=> (and ($generated@@189 $generated@@195) (and ($generated@@32 $generated@@194) ($generated@@188 $generated@@28 $generated@@194 $generated@@31 $generated@@195))) ($generated@@188 $generated@@10 ($generated@@14 ($generated@@36 $generated@@194)) $generated $generated@@195))
 :pattern ( ($generated@@188 $generated@@10 ($generated@@14 ($generated@@36 $generated@@194)) $generated $generated@@195))
)))
(assert (forall (($generated@@196 T@U) ($generated@@197 T@U) ) (!  (=> (and ($generated@@189 $generated@@197) (and ($generated@@80 $generated@@196) ($generated@@188 $generated@@28 $generated@@196 $generated@@79 $generated@@197))) ($generated@@188 $generated@@10 ($generated@@14 ($generated@@59 $generated@@196)) $generated $generated@@197))
 :pattern ( ($generated@@188 $generated@@10 ($generated@@14 ($generated@@59 $generated@@196)) $generated $generated@@197))
)))
(assert (forall (($generated@@198 T@U) ($generated@@199 T@U) ) (!  (=> (and ($generated@@189 $generated@@199) (and ($generated@@80 $generated@@198) ($generated@@188 $generated@@28 $generated@@198 $generated@@79 $generated@@199))) ($generated@@188 $generated@@10 ($generated@@14 ($generated@@63 $generated@@198)) $generated $generated@@199))
 :pattern ( ($generated@@188 $generated@@10 ($generated@@14 ($generated@@63 $generated@@198)) $generated $generated@@199))
)))
(assert (forall (($generated@@200 T@U) ($generated@@201 T@U) ) (!  (=> (and ($generated@@189 $generated@@201) (and ($generated@@80 $generated@@200) ($generated@@188 $generated@@28 $generated@@200 $generated@@79 $generated@@201))) ($generated@@188 $generated@@10 ($generated@@14 ($generated@@67 $generated@@200)) $generated $generated@@201))
 :pattern ( ($generated@@188 $generated@@10 ($generated@@14 ($generated@@67 $generated@@200)) $generated $generated@@201))
)))
(assert (forall (($generated@@202 T@U) ($generated@@203 T@U) ) (!  (=> (and ($generated@@189 $generated@@203) ($generated@@30 $generated@@28 $generated@@202 $generated@@31)) ($generated@@188 $generated@@28 $generated@@202 $generated@@31 $generated@@203))
 :pattern ( ($generated@@188 $generated@@28 $generated@@202 $generated@@31 $generated@@203))
)))
(assert (forall (($generated@@204 T@U) ($generated@@205 T@U) ) (!  (=> (and ($generated@@189 $generated@@205) ($generated@@30 $generated@@28 $generated@@204 $generated@@79)) ($generated@@188 $generated@@28 $generated@@204 $generated@@79 $generated@@205))
 :pattern ( ($generated@@188 $generated@@28 $generated@@204 $generated@@79 $generated@@205))
)))
(assert (= ($generated@@24 $generated@@31) $generated@@2))
(assert (= ($generated@@206 $generated@@31) $generated@@6))
(assert (= ($generated@@24 $generated@@79) $generated@@3))
(assert (= ($generated@@206 $generated@@79) $generated@@7))
(assert  (=> (<= 1 $generated@@25) (forall (($generated@@207 T@U) ) (!  (=> (or ($generated@@72 $generated@@207) (and (< 1 $generated@@25) ($generated@@30 $generated@@28 $generated@@207 $generated@@31))) (= ($generated@@71 $generated@@207) (let (($generated@@208 ($generated@@33 90)))
(let (($generated@@209 ($generated@@33 100)))
(let (($generated@@210 ($generated@@33 42)))
($generated@@27 $generated@@28 ($generated@@34 $generated@@209 $generated@@210 $generated@@208)))))))
 :pattern ( ($generated@@71 $generated@@207))
))))
(assert (forall (($generated@@211 Int) ) (! (= ($generated@@103 $generated@@10 ($generated@@14 ($generated@@33 $generated@@211))) ($generated@@27 $generated@@134 ($generated@@103 $generated@@10 ($generated@@14 $generated@@211))))
 :pattern ( ($generated@@103 $generated@@10 ($generated@@14 ($generated@@33 $generated@@211))))
)))
(assert (forall (($generated@@212 T@U) ($generated@@213 T@T) ) (! (= ($generated@@103 $generated@@213 ($generated@@27 $generated@@213 $generated@@212)) ($generated@@27 $generated@@134 ($generated@@103 $generated@@213 $generated@@212)))
 :pattern ( ($generated@@103 $generated@@213 ($generated@@27 $generated@@213 $generated@@212)))
)))
(assert (forall (($generated@@214 T@U) ($generated@@215 T@U) ) (! ($generated@@188 $generated@@10 $generated@@215 $generated $generated@@214)
 :pattern ( ($generated@@188 $generated@@10 $generated@@215 $generated $generated@@214))
)))
(assert (forall (($generated@@216 T@U) ) (! ($generated@@30 $generated@@10 $generated@@216 $generated)
 :pattern ( ($generated@@30 $generated@@10 $generated@@216 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@217 () T@U)
(declare-fun $generated@@218 () T@U)
(declare-fun $generated@@219 () T@U)
(declare-fun $generated@@220 () T@U)
(declare-fun $generated@@221 () T@U)
(declare-fun $generated@@222 () T@U)
(declare-fun $generated@@223 () T@U)
(declare-fun $generated@@224 () T@U)
(declare-fun $generated@@225 () T@U)
(declare-fun $generated@@226 (T@U) Bool)
(declare-fun $generated@@227 () T@U)
(declare-fun $generated@@228 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@229  (=> (and ($generated@@32 $generated@@217) (=> (= ($generated@@48 $generated@@217) ($generated@@33 42)) ($generated@@32 $generated@@217))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (= ($generated@@48 $generated@@217) ($generated@@33 42))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= ($generated@@36 $generated@@217) ($generated@@33 90))) (=> (and (and (and (= ($generated@@48 $generated@@217) ($generated@@33 42)) (= ($generated@@36 $generated@@217) ($generated@@33 90))) (= $generated@@218 ($generated@@27 $generated@@28 ($generated@@55 ($generated@@33 0) ($generated@@33 5) ($generated@@33 7))))) (and ($generated@@80 $generated@@218) ($generated@@80 $generated@@218))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (= ($generated@@63 $generated@@218) ($generated@@33 5))) (=> (= ($generated@@63 $generated@@218) ($generated@@33 5)) (=> (= $generated@@219 ($generated@@27 $generated@@28 ($generated@@55 ($generated@@33 88) ($generated@@33 89) ($generated@@33 90)))) (=> (and ($generated@@80 $generated@@219) ($generated@@80 $generated@@219)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= ($generated@@63 $generated@@219) ($generated@@33 89))) (=> (= ($generated@@63 $generated@@219) ($generated@@33 89)) (=> (and (and (and ($generated@@188 $generated@@28 $generated@@219 $generated@@79 $generated@@220) ($generated@@78 $generated@@219)) (and ($generated@@80 ($generated@@77 $generated@@219)) ($generated@@78 $generated@@219))) (and (and (= $generated@@221 ($generated@@77 $generated@@219)) ($generated@@80 $generated@@221)) (and ($generated@@80 $generated@@221) (= (ControlFlow 0 2) (- 0 1))))) (= ($generated@@63 $generated@@221) ($generated@@33 89)))))))))))))))
(let (($generated@@230  (=> (and (or (not (= ($generated@@48 $generated@@217) ($generated@@33 42))) (not true)) (= (ControlFlow 0 8) 2)) $generated@@229)))
(let (($generated@@231  (=> (= ($generated@@48 $generated@@217) ($generated@@33 42)) (=> (and ($generated@@32 $generated@@217) (= (ControlFlow 0 7) 2)) $generated@@229))))
(let (($generated@@232  (=> (and ($generated@@32 $generated@@222) (=> (= ($generated@@48 $generated@@222) ($generated@@33 42)) ($generated@@32 $generated@@222))) (and (=> (= (ControlFlow 0 9) (- 0 11)) (= ($generated@@48 $generated@@222) ($generated@@33 42))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (= ($generated@@36 $generated@@222) ($generated@@33 23))) (=> (and (and (and (= ($generated@@48 $generated@@222) ($generated@@33 42)) (= ($generated@@36 $generated@@222) ($generated@@33 23))) (and ($generated@@188 $generated@@28 $generated@@222 $generated@@31 $generated@@220) ($generated@@72 $generated@@222))) (and (and ($generated@@32 ($generated@@71 $generated@@222)) ($generated@@72 $generated@@222)) (and (= $generated@@217 ($generated@@71 $generated@@222)) ($generated@@32 $generated@@217)))) (and (=> (= (ControlFlow 0 9) 7) $generated@@231) (=> (= (ControlFlow 0 9) 8) $generated@@230))))))))
(let (($generated@@233  (=> (and (or (not (= ($generated@@48 $generated@@222) ($generated@@33 42))) (not true)) (= (ControlFlow 0 13) 9)) $generated@@232)))
(let (($generated@@234  (=> (= ($generated@@48 $generated@@222) ($generated@@33 42)) (=> (and ($generated@@32 $generated@@222) (= (ControlFlow 0 12) 9)) $generated@@232))))
(let (($generated@@235  (=> (and (and (= $generated@@223 ($generated@@132 $generated@@224 $generated@@220 $generated@@1 false)) (= $generated@@225 ($generated@@27 $generated@@28 ($generated@@34 ($generated@@33 19) ($generated@@33 21) ($generated@@33 23))))) (and ($generated@@32 $generated@@225) ($generated@@32 $generated@@225))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (= ($generated@@48 $generated@@225) ($generated@@33 21))) (=> (= ($generated@@48 $generated@@225) ($generated@@33 21)) (=> (and ($generated@@188 $generated@@28 $generated@@225 $generated@@31 $generated@@220) ($generated@@29 $generated@@225)) (=> (and (and ($generated@@32 ($generated@@26 $generated@@225)) ($generated@@29 $generated@@225)) (and (= $generated@@222 ($generated@@26 $generated@@225)) ($generated@@32 $generated@@222))) (and (=> (= (ControlFlow 0 14) 12) $generated@@234) (=> (= (ControlFlow 0 14) 13) $generated@@233)))))))))
(let (($generated@@236  (=> (and ($generated@@189 $generated@@220) ($generated@@226 $generated@@220)) (=> (and (and ($generated@@30 $generated@@28 $generated@@227 $generated@@31) ($generated@@188 $generated@@28 $generated@@227 $generated@@31 $generated@@220)) true) (=> (and (and (and ($generated@@30 $generated@@28 $generated@@228 $generated@@79) ($generated@@188 $generated@@28 $generated@@228 $generated@@79 $generated@@220)) true) (and (= 2 $generated@@25) (= (ControlFlow 0 16) 14))) $generated@@235)))))
$generated@@236)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
