(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagISet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun |##_module.ImapSimulator_.ImapSimulator| () T@U)
(declare-fun Tagclass._module.ImapSimulator__ () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun tytagFamily$ImapSimulator_ () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.ImapSimulator__.Valid (T@U T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.ImapSimulator__.Valid#canCall| (T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.ImapSimulator__ (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun _module.ImapSimulator__.apply (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun _module.ImapSimulator__.input (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.ImapSimulator__.ImapSimulator_q (T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun HandleTypeType () T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |#_module.ImapSimulator_.ImapSimulator| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._module.ImapSimulator___0 (T@U) T@U)
(declare-fun Tclass._module.ImapSimulator___1 (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool TagISet alloc Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 |##_module.ImapSimulator_.ImapSimulator| Tagclass._module.ImapSimulator__ |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| tytagFamily$ImapSimulator_)
)
(assert  (and (and (and (and (and (and (and (= (Ctor DatatypeTypeType) 3) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 4)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 5))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))) (= (Ctor HandleTypeType) 6)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.ImapSimulator_$A T@U) (_module.ImapSimulator_$B T@U) ($Heap T@U) (this T@U) ) (!  (=> (or (|_module.ImapSimulator__.Valid#canCall| _module.ImapSimulator_$A _module.ImapSimulator_$B (Lit DatatypeTypeType this)) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and ($Is DatatypeTypeType this (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A _module.ImapSimulator_$B)) ($IsAlloc DatatypeTypeType this (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A _module.ImapSimulator_$B) $Heap))))) (and (forall ((|i#1| T@U) ) (!  (=> ($IsBox |i#1| _module.ImapSimulator_$A) (and (_module.ImapSimulator__.ImapSimulator_q (Lit DatatypeTypeType this)) (=> (U_2_bool (MapType0Select BoxType boolType (Lit (MapType0Type BoxType boolType) (_module.ImapSimulator__.input (Lit DatatypeTypeType this))) |i#1|)) (and (_module.ImapSimulator__.ImapSimulator_q (Lit DatatypeTypeType this)) true))))
 :pattern ( (Requires1 _module.ImapSimulator_$A _module.ImapSimulator_$B $Heap (_module.ImapSimulator__.apply this) |i#1|))
 :pattern ( (MapType0Select BoxType boolType (_module.ImapSimulator__.input this) |i#1|))
)) (= (_module.ImapSimulator__.Valid _module.ImapSimulator_$A _module.ImapSimulator_$B (Lit DatatypeTypeType this)) (forall ((|i#1@@0| T@U) ) (!  (=> (and ($IsBox |i#1@@0| _module.ImapSimulator_$A) (U_2_bool (MapType0Select BoxType boolType (Lit (MapType0Type BoxType boolType) (_module.ImapSimulator__.input (Lit DatatypeTypeType this))) |i#1@@0|))) (Requires1 _module.ImapSimulator_$A _module.ImapSimulator_$B $Heap (Lit HandleTypeType (_module.ImapSimulator__.apply (Lit DatatypeTypeType this))) |i#1@@0|))
 :pattern ( (Requires1 _module.ImapSimulator_$A _module.ImapSimulator_$B $Heap (_module.ImapSimulator__.apply this) |i#1@@0|))
 :pattern ( (MapType0Select BoxType boolType (_module.ImapSimulator__.input this) |i#1@@0|))
)))))
 :weight 3
 :pattern ( (_module.ImapSimulator__.Valid _module.ImapSimulator_$A _module.ImapSimulator_$B (Lit DatatypeTypeType this)) ($IsGoodHeap $Heap))
))))
(assert (= (Tag TBool) TagBool))
(assert (forall ((_module.ImapSimulator_$A@@0 T@U) (_module.ImapSimulator_$B@@0 T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@0 _module.ImapSimulator_$B@@0)) (_module.ImapSimulator__.ImapSimulator_q d))
 :pattern ( (_module.ImapSimulator__.ImapSimulator_q d) ($Is DatatypeTypeType d (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@0 _module.ImapSimulator_$B@@0)))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((f T@U) (t0@@0 T@U) (t1@@0 T@U) (u0@@0 T@U) (u1@@0 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@0 t1@@0)) (forall ((bx T@U) ) (!  (=> ($IsBox bx u0@@0) ($IsBox bx t0@@0))
 :pattern ( ($IsBox bx u0@@0))
 :pattern ( ($IsBox bx t0@@0))
))) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 t1@@0) ($IsBox bx@@0 u1@@0))
 :pattern ( ($IsBox bx@@0 t1@@0))
 :pattern ( ($IsBox bx@@0 u1@@0))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@0 u1@@0)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@0 t1@@0)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@0 u1@@0)))
)))
(assert (forall ((d@@0 T@U) (_module.ImapSimulator_$A@@1 T@U) (_module.ImapSimulator_$B@@1 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (_module.ImapSimulator__.ImapSimulator_q d@@0) ($IsAlloc DatatypeTypeType d@@0 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@1 _module.ImapSimulator_$B@@1) $h))) ($IsAlloc HandleTypeType (_module.ImapSimulator__.apply d@@0) (Tclass._System.___hPartialFunc1 _module.ImapSimulator_$A@@1 _module.ImapSimulator_$B@@1) $h))
 :pattern ( ($IsAlloc HandleTypeType (_module.ImapSimulator__.apply d@@0) (Tclass._System.___hPartialFunc1 _module.ImapSimulator_$A@@1 _module.ImapSimulator_$B@@1) $h))
)))
(assert (forall ((v T@U) (t0@@1 T@U) ) (! (= ($Is (MapType0Type BoxType boolType) v (TISet t0@@1)) (forall ((bx@@1 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType v bx@@1)) ($IsBox bx@@1 t0@@1))
 :pattern ( (MapType0Select BoxType boolType v bx@@1))
)))
 :pattern ( ($Is (MapType0Type BoxType boolType) v (TISet t0@@1)))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((t0@@2 T@U) (t1@@1 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@2) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@2 t1@@1)))) (= (|Set#Equal| (Reads1 t0@@2 t1@@1 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@2 t1@@1 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@2 t1@@1 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@2 t1@@1 heap f@@0 bx0))
)))
(assert (forall ((_module.ImapSimulator_$A@@2 T@U) (_module.ImapSimulator_$B@@2 T@U) (|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.ImapSimulator_.ImapSimulator| |a#14#0#0| |a#14#1#0|) (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@2 _module.ImapSimulator_$B@@2))  (and ($Is (MapType0Type BoxType boolType) |a#14#0#0| (TISet _module.ImapSimulator_$A@@2)) ($Is HandleTypeType |a#14#1#0| (Tclass._System.___hPartialFunc1 _module.ImapSimulator_$A@@2 _module.ImapSimulator_$B@@2))))
 :pattern ( ($Is DatatypeTypeType (|#_module.ImapSimulator_.ImapSimulator| |a#14#0#0| |a#14#1#0|) (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@2 _module.ImapSimulator_$B@@2)))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.ImapSimulator__.ImapSimulator_q d@@1) (= (DatatypeCtorId d@@1) |##_module.ImapSimulator_.ImapSimulator|))
 :pattern ( (_module.ImapSimulator__.ImapSimulator_q d@@1))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.ImapSimulator__.ImapSimulator_q d@@2) (exists ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (= d@@2 (|#_module.ImapSimulator_.ImapSimulator| |a#13#0#0| |a#13#1#0|))))
 :pattern ( (_module.ImapSimulator__.ImapSimulator_q d@@2))
)))
(assert (forall ((_module.ImapSimulator_$A@@3 T@U) (_module.ImapSimulator_$B@@3 T@U) (|a#14#0#0@@0| T@U) (|a#14#1#0@@0| T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) (= ($IsAlloc DatatypeTypeType (|#_module.ImapSimulator_.ImapSimulator| |a#14#0#0@@0| |a#14#1#0@@0|) (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@3 _module.ImapSimulator_$B@@3) $h@@0)  (and ($IsAlloc (MapType0Type BoxType boolType) |a#14#0#0@@0| (TISet _module.ImapSimulator_$A@@3) $h@@0) ($IsAlloc HandleTypeType |a#14#1#0@@0| (Tclass._System.___hPartialFunc1 _module.ImapSimulator_$A@@3 _module.ImapSimulator_$B@@3) $h@@0))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.ImapSimulator_.ImapSimulator| |a#14#0#0@@0| |a#14#1#0@@0|) (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@3 _module.ImapSimulator_$B@@3) $h@@0))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) (|f#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@1) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc1 |#$T0| |#$R|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@1))
)))
(assert (forall ((f@@1 T@U) (t0@@3 T@U) (t1@@2 T@U) (h@@0 T@U) ) (!  (=> (and ($IsGoodHeap h@@0) ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@3 t1@@2) h@@0)) (forall ((bx0@@0 T@U) ) (!  (=> (and ($IsAllocBox bx0@@0 t0@@3 h@@0) (Requires1 t0@@3 t1@@2 h@@0 f@@1 bx0@@0)) ($IsAllocBox (Apply1 t0@@3 t1@@2 h@@0 f@@1 bx0@@0) t1@@2 h@@0))
 :pattern ( (Apply1 t0@@3 t1@@2 h@@0 f@@1 bx0@@0))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@3 t1@@2) h@@0))
)))
(assert (forall ((v@@1 T@U) (t0@@4 T@U) (h@@1 T@U) ) (! (= ($IsAlloc (MapType0Type BoxType boolType) v@@1 (TISet t0@@4) h@@1) (forall ((bx@@2 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType v@@1 bx@@2)) ($IsAllocBox bx@@2 t0@@4 h@@1))
 :pattern ( (MapType0Select BoxType boolType v@@1 bx@@2))
)))
 :pattern ( ($IsAlloc (MapType0Type BoxType boolType) v@@1 (TISet t0@@4) h@@1))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.ImapSimulator_$A@@4 T@U) (_module.ImapSimulator_$B@@4 T@U) ($Heap@@0 T@U) (this@@0 T@U) ) (!  (=> (or (|_module.ImapSimulator__.Valid#canCall| _module.ImapSimulator_$A@@4 _module.ImapSimulator_$B@@4 this@@0) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (and ($Is DatatypeTypeType this@@0 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@4 _module.ImapSimulator_$B@@4)) ($IsAlloc DatatypeTypeType this@@0 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@4 _module.ImapSimulator_$B@@4) $Heap@@0))))) (and (forall ((|i#0| T@U) ) (!  (=> ($IsBox |i#0| _module.ImapSimulator_$A@@4) (and (_module.ImapSimulator__.ImapSimulator_q this@@0) (=> (U_2_bool (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@0) |i#0|)) (and (_module.ImapSimulator__.ImapSimulator_q this@@0) true))))
 :pattern ( (Requires1 _module.ImapSimulator_$A@@4 _module.ImapSimulator_$B@@4 $Heap@@0 (_module.ImapSimulator__.apply this@@0) |i#0|))
 :pattern ( (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@0) |i#0|))
)) (= (_module.ImapSimulator__.Valid _module.ImapSimulator_$A@@4 _module.ImapSimulator_$B@@4 this@@0) (forall ((|i#0@@0| T@U) ) (!  (=> (and ($IsBox |i#0@@0| _module.ImapSimulator_$A@@4) (U_2_bool (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@0) |i#0@@0|))) (Requires1 _module.ImapSimulator_$A@@4 _module.ImapSimulator_$B@@4 $Heap@@0 (_module.ImapSimulator__.apply this@@0) |i#0@@0|))
 :pattern ( (Requires1 _module.ImapSimulator_$A@@4 _module.ImapSimulator_$B@@4 $Heap@@0 (_module.ImapSimulator__.apply this@@0) |i#0@@0|))
 :pattern ( (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@0) |i#0@@0|))
)))))
 :pattern ( (_module.ImapSimulator__.Valid _module.ImapSimulator_$A@@4 _module.ImapSimulator_$B@@4 this@@0) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((f@@2 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (! (= ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@5 t1@@3)) (forall ((h@@2 T@U) (bx0@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@2) ($IsBox bx0@@1 t0@@5)) (Requires1 t0@@5 t1@@3 h@@2 f@@2 bx0@@1)) ($IsBox (Apply1 t0@@5 t1@@3 h@@2 f@@2 bx0@@1) t1@@3))
 :pattern ( (Apply1 t0@@5 t1@@3 h@@2 f@@2 bx0@@1))
)))
 :pattern ( ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@5 t1@@3)))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 TBool) (and (= ($Box boolType ($Unbox boolType bx@@3)) bx@@3) ($Is boolType ($Unbox boolType bx@@3) TBool)))
 :pattern ( ($IsBox bx@@3 TBool))
)))
(assert (forall ((v@@2 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@2) t@@0) ($Is T@@2 v@@2 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@2) t@@0))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@2| |#$R@@2|)) |#$T0@@2|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |#$R@@3|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.ImapSimulator_.ImapSimulator| |a#12#0#0| |a#12#1#0|)) |##_module.ImapSimulator_.ImapSimulator|)
 :pattern ( (|#_module.ImapSimulator_.ImapSimulator| |a#12#0#0| |a#12#1#0|))
)))
(assert (forall ((_module.ImapSimulator_$A@@5 T@U) (_module.ImapSimulator_$B@@5 T@U) ) (! (= (Tclass._module.ImapSimulator___0 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@5 _module.ImapSimulator_$B@@5)) _module.ImapSimulator_$A@@5)
 :pattern ( (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@5 _module.ImapSimulator_$B@@5))
)))
(assert (forall ((_module.ImapSimulator_$A@@6 T@U) (_module.ImapSimulator_$B@@6 T@U) ) (! (= (Tclass._module.ImapSimulator___1 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@6 _module.ImapSimulator_$B@@6)) _module.ImapSimulator_$B@@6)
 :pattern ( (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@6 _module.ImapSimulator_$B@@6))
)))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (! (= (_module.ImapSimulator__.input (|#_module.ImapSimulator_.ImapSimulator| |a#16#0#0| |a#16#1#0|)) |a#16#0#0|)
 :pattern ( (|#_module.ImapSimulator_.ImapSimulator| |a#16#0#0| |a#16#1#0|))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (! (= (_module.ImapSimulator__.apply (|#_module.ImapSimulator_.ImapSimulator| |a#18#0#0| |a#18#1#0|)) |a#18#1#0|)
 :pattern ( (|#_module.ImapSimulator_.ImapSimulator| |a#18#0#0| |a#18#1#0|))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TISet (TISet t@@1)) t@@1)
 :pattern ( (TISet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TISet t@@2)) TagISet)
 :pattern ( (TISet t@@2))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) (d@@3 T@U) ) (!  (=> (U_2_bool (MapType0Select BoxType boolType |a#17#0#0| ($Box DatatypeTypeType d@@3))) (< (DtRank d@@3) (DtRank (|#_module.ImapSimulator_.ImapSimulator| |a#17#0#0| |a#17#1#0|))))
 :pattern ( (MapType0Select BoxType boolType |a#17#0#0| ($Box DatatypeTypeType d@@3)) (|#_module.ImapSimulator_.ImapSimulator| |a#17#0#0| |a#17#1#0|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) (|f#0@@0| T@U) ) (! (= ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|))  (and ($Is HandleTypeType |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@4| |#$R@@4|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@4|) (|Set#Equal| (Reads1 |#$T0@@4| |#$R@@4| $OneHeap |f#0@@0| |x0#0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)))
)))
(assert  (and (= (Ctor refType) 7) (= (Ctor FieldType) 8)))
(assert (forall ((f@@3 T@U) (t0@@6 T@U) (t1@@4 T@U) (h@@3 T@U) ) (!  (=> ($IsGoodHeap h@@3) (= ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@6 t1@@4) h@@3) (forall ((bx0@@2 T@U) ) (!  (=> (and (and ($IsBox bx0@@2 t0@@6) ($IsAllocBox bx0@@2 t0@@6 h@@3)) (Requires1 t0@@6 t1@@4 h@@3 f@@3 bx0@@2)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads1 t0@@6 t1@@4 h@@3 f@@3 bx0@@2) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@6 t1@@4 h@@3 f@@3 bx0@@2) ($Box refType r)))
)))
 :pattern ( (Apply1 t0@@6 t1@@4 h@@3 f@@3 bx0@@2))
 :pattern ( (Reads1 t0@@6 t1@@4 h@@3 f@@3 bx0@@2))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@6 t1@@4) h@@3))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@5|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@4)) bx@@4) ($Is HandleTypeType ($Unbox HandleTypeType bx@@4) (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@5|))))
 :pattern ( ($IsBox bx@@4 (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@5|)))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@5)) bx@@5) ($Is HandleTypeType ($Unbox HandleTypeType bx@@5) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))))
 :pattern ( ($IsBox bx@@5 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))
)))
(assert (forall ((_module.ImapSimulator_$A@@7 T@U) (_module.ImapSimulator_$B@@7 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@7 _module.ImapSimulator_$B@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@6)) bx@@6) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@6) (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@7 _module.ImapSimulator_$B@@7))))
 :pattern ( ($IsBox bx@@6 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@7 _module.ImapSimulator_$B@@7)))
)))
(assert  (and (forall ((t0@@7 T@T) (t1@@5 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@7 t1@@5 t2 (MapType1Store t0@@7 t1@@5 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2 (MapType1Store u0@@1 u1@@1 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|))
)))
(assert (forall ((_module.ImapSimulator_$A@@8 T@U) (_module.ImapSimulator_$B@@8 T@U) ) (!  (and (= (Tag (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@8 _module.ImapSimulator_$B@@8)) Tagclass._module.ImapSimulator__) (= (TagFamily (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@8 _module.ImapSimulator_$B@@8)) tytagFamily$ImapSimulator_))
 :pattern ( (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@8 _module.ImapSimulator_$B@@8))
)))
(assert (forall ((t0@@8 T@U) (t1@@6 T@U) (heap@@0 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@3 t0@@8) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@8 t1@@6)))) (|Set#Equal| (Reads1 t0@@8 t1@@6 $OneHeap f@@4 bx0@@3) |Set#Empty|)) (= (Requires1 t0@@8 t1@@6 $OneHeap f@@4 bx0@@3) (Requires1 t0@@8 t1@@6 heap@@0 f@@4 bx0@@3)))
 :pattern ( (Requires1 t0@@8 t1@@6 $OneHeap f@@4 bx0@@3) ($IsGoodHeap heap@@0))
 :pattern ( (Requires1 t0@@8 t1@@6 heap@@0 f@@4 bx0@@3))
)))
(assert (forall ((bx@@7 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@7 (TISet t@@3)) (and (= ($Box (MapType0Type BoxType boolType) ($Unbox (MapType0Type BoxType boolType) bx@@7)) bx@@7) ($Is (MapType0Type BoxType boolType) ($Unbox (MapType0Type BoxType boolType) bx@@7) (TISet t@@3))))
 :pattern ( ($IsBox bx@@7 (TISet t@@3)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Equal| a@@0 b@@0) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@0 o@@0) (|Set#IsMember| b@@0 o@@0))
 :pattern ( (|Set#IsMember| a@@0 o@@0))
 :pattern ( (|Set#IsMember| b@@0 o@@0))
)))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (! (= (|#_module.ImapSimulator_.ImapSimulator| (Lit (MapType0Type BoxType boolType) |a#15#0#0|) (Lit HandleTypeType |a#15#1#0|)) (Lit DatatypeTypeType (|#_module.ImapSimulator_.ImapSimulator| |a#15#0#0| |a#15#1#0|)))
 :pattern ( (|#_module.ImapSimulator_.ImapSimulator| (Lit (MapType0Type BoxType boolType) |a#15#0#0|) (Lit HandleTypeType |a#15#1#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((d@@4 T@U) (_module.ImapSimulator_$A@@9 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.ImapSimulator__.ImapSimulator_q d@@4) (exists ((_module.ImapSimulator_$B@@9 T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@9 _module.ImapSimulator_$B@@9) $h@@2)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@9 _module.ImapSimulator_$B@@9) $h@@2))
)))) ($IsAlloc (MapType0Type BoxType boolType) (_module.ImapSimulator__.input d@@4) (TISet _module.ImapSimulator_$A@@9) $h@@2))
 :pattern ( ($IsAlloc (MapType0Type BoxType boolType) (_module.ImapSimulator__.input d@@4) (TISet _module.ImapSimulator_$A@@9) $h@@2))
)))
(assert (forall ((h@@4 T@U) (v@@3 T@U) ) (! ($IsAlloc boolType v@@3 TBool h@@4)
 :pattern ( ($IsAlloc boolType v@@3 TBool h@@4))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is boolType v@@4 TBool)
 :pattern ( ($Is boolType v@@4 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module.ImapSimulator_$A@@10 () T@U)
(declare-fun _module.ImapSimulator_$B@@10 () T@U)
(declare-fun this@@1 () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun |b$reqreads#0@1| () Bool)
(declare-fun |i#2@0| () T@U)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let ((anon6_correct  (=> (and (and (= (_module.ImapSimulator__.Valid _module.ImapSimulator_$A@@10 _module.ImapSimulator_$B@@10 this@@1) (forall ((|i#3| T@U) ) (!  (=> (and ($IsBox |i#3| _module.ImapSimulator_$A@@10) (U_2_bool (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@1) |i#3|))) (Requires1 _module.ImapSimulator_$A@@10 _module.ImapSimulator_$B@@10 $Heap@@1 (_module.ImapSimulator__.apply this@@1) |i#3|))
 :pattern ( (Requires1 _module.ImapSimulator_$A@@10 _module.ImapSimulator_$B@@10 $Heap@@1 (_module.ImapSimulator__.apply this@@1) |i#3|))
 :pattern ( (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@1) |i#3|))
))) (forall ((|i#3@@0| T@U) ) (!  (=> ($IsBox |i#3@@0| _module.ImapSimulator_$A@@10) (and (_module.ImapSimulator__.ImapSimulator_q this@@1) (=> (U_2_bool (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@1) |i#3@@0|)) (and (_module.ImapSimulator__.ImapSimulator_q this@@1) true))))
 :pattern ( (Requires1 _module.ImapSimulator_$A@@10 _module.ImapSimulator_$B@@10 $Heap@@1 (_module.ImapSimulator__.apply this@@1) |i#3@@0|))
 :pattern ( (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@1) |i#3@@0|))
))) (and ($Is boolType (bool_2_U (_module.ImapSimulator__.Valid _module.ImapSimulator_$A@@10 _module.ImapSimulator_$B@@10 this@@1)) TBool) (= (ControlFlow 0 3) (- 0 2)))) |b$reqreads#0@1|)))
(let ((anon10_Else_correct  (=> (not (U_2_bool (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@1) |i#2@0|))) (=> (and (= |b$reqreads#0@1| true) (= (ControlFlow 0 6) 3)) anon6_correct))))
(let ((anon10_Then_correct  (=> (U_2_bool (MapType0Select BoxType boolType (_module.ImapSimulator__.input this@@1) |i#2@0|)) (=> (and (_module.ImapSimulator__.ImapSimulator_q this@@1) ($IsAllocBox ($Box HandleTypeType (_module.ImapSimulator__.apply this@@1)) (Tclass._System.___hFunc1 _module.ImapSimulator_$A@@10 _module.ImapSimulator_$B@@10) $Heap@@1)) (=> (and (and ($IsAllocBox |i#2@0| _module.ImapSimulator_$A@@10 $Heap@@1) (= |b$reqreads#0@0| (forall (($o@@0 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@0) alloc)))) (|Set#IsMember| (Reads1 _module.ImapSimulator_$A@@10 _module.ImapSimulator_$B@@10 $Heap@@1 (_module.ImapSimulator__.apply this@@1) |i#2@0|) ($Box refType $o@@0))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@0 $f@@0)))))) (and (= |b$reqreads#0@1| |b$reqreads#0@0|) (= (ControlFlow 0 5) 3))) anon6_correct)))))
(let ((anon9_Then_correct  (=> (and (and ($IsBox |i#2@0| _module.ImapSimulator_$A@@10) ($IsAllocBox |i#2@0| _module.ImapSimulator_$A@@10 $Heap@@1)) (_module.ImapSimulator__.ImapSimulator_q this@@1)) (and (=> (= (ControlFlow 0 7) 5) anon10_Then_correct) (=> (= (ControlFlow 0 7) 6) anon10_Else_correct)))))
(let ((anon9_Else_correct  (=> (not (and ($IsBox |i#2@0| _module.ImapSimulator_$A@@10) ($IsAllocBox |i#2@0| _module.ImapSimulator_$A@@10 $Heap@@1))) (=> (and (= |b$reqreads#0@1| true) (= (ControlFlow 0 4) 3)) anon6_correct))))
(let ((anon8_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (and (and (=> (= (ControlFlow 0 8) 1) anon8_Then_correct) (=> (= (ControlFlow 0 8) 7) anon9_Then_correct)) (=> (= (ControlFlow 0 8) 4) anon9_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and ($Is DatatypeTypeType this@@1 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@10 _module.ImapSimulator_$B@@10)) ($IsAlloc DatatypeTypeType this@@1 (Tclass._module.ImapSimulator__ _module.ImapSimulator_$A@@10 _module.ImapSimulator_$B@@10) $Heap@@1)) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 9) 8))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
