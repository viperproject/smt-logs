(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 () T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@U Int) T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (Int) Int)
(declare-fun $generated@@26 (T@U) Int)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U T@U) T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@36 (T@U T@U) Bool)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@45 ((_ BitVec 8)) Int)
(declare-fun $generated@@55 () Int)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@61 (Int) T@U)
(declare-fun $generated@@62 (T@U) Int)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 () T@T)
(declare-fun $generated@@67 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@68 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 (T@T T@T) T@T)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T) T@T)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@123 (T@U) T@U)
(declare-fun $generated@@124 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@3 $generated@@22) 3))
(assert (= $generated@@20 ($generated@@21 $generated@@22 ($generated@@23 $generated@@24 ($generated@@25 4)))))
(assert (= ($generated@@26 $generated@@27) 0))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@25 $generated@@28) $generated@@28)
 :pattern ( ($generated@@25 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (= ($generated@@3 $generated@@33) 4))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> (and ($generated@@32 $generated@@33 $generated@@37 ($generated@@35 $generated@@39)) ($generated@@36 $generated@@38 $generated@@39)) ($generated@@32 $generated@@33 ($generated@@34 $generated@@37 $generated@@38) ($generated@@35 $generated@@39)))
 :pattern ( ($generated@@32 $generated@@33 ($generated@@34 $generated@@37 $generated@@38) ($generated@@35 $generated@@39)))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@21 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@21 $generated@@42 $generated@@41))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@26 ($generated@@34 $generated@@43 $generated@@44)) (+ 1 ($generated@@26 $generated@@43)))
 :pattern ( ($generated@@34 $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@46 (_ BitVec 8)) ) (!  (and (and (<= 0 ($generated@@45 $generated@@46)) (< ($generated@@45 $generated@@46) 256)) (= ($generated@@45 $generated@@46) (bv2int $generated@@46)))
 :pattern ( ($generated@@45 $generated@@46))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 Int) ($generated@@49 T@U) ) (!  (and (=> (= $generated@@48 ($generated@@26 $generated@@47)) (= ($generated@@23 ($generated@@34 $generated@@47 $generated@@49) $generated@@48) $generated@@49)) (=> (or (not (= $generated@@48 ($generated@@26 $generated@@47))) (not true)) (= ($generated@@23 ($generated@@34 $generated@@47 $generated@@49) $generated@@48) ($generated@@23 $generated@@47 $generated@@48))))
 :pattern ( ($generated@@23 ($generated@@34 $generated@@47 $generated@@49) $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@36 $generated@@50 $generated) (and (= ($generated@@40 $generated@@22 ($generated@@21 $generated@@22 $generated@@50)) $generated@@50) ($generated@@32 $generated@@22 ($generated@@21 $generated@@22 $generated@@50) $generated)))
 :pattern ( ($generated@@36 $generated@@50 $generated))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@36 ($generated@@40 $generated@@53 $generated@@51) $generated@@52) ($generated@@32 $generated@@53 $generated@@51 $generated@@52))
 :pattern ( ($generated@@36 ($generated@@40 $generated@@53 $generated@@51) $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (! (<= 0 ($generated@@26 $generated@@54))
 :pattern ( ($generated@@26 $generated@@54))
)))
(assert  (=> (< 1 $generated@@55) ($generated@@32 $generated@@22 $generated@@20 $generated)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@56 ($generated@@35 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@35 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@19 ($generated@@35 $generated@@58)) $generated@@1)
 :pattern ( ($generated@@35 $generated@@58))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@21 $generated@@60 ($generated@@40 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@40 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@63 Int) ) (!  (=> (or (and (<= 0 $generated@@63) (< $generated@@63 55296)) (and (<= 57344 $generated@@63) (< $generated@@63 1114112))) (= ($generated@@62 ($generated@@61 $generated@@63)) $generated@@63))
 :pattern ( ($generated@@61 $generated@@63))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@64 $generated@@75 $generated@@76 $generated@@77 ($generated@@71 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@80 $generated@@81) $generated@@78)
 :weight 0
)) (and (forall (($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@64 $generated@@82 $generated@@83 $generated@@84 ($generated@@71 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@88 $generated@@85) $generated@@89 $generated@@90) ($generated@@64 $generated@@82 $generated@@83 $generated@@84 $generated@@86 $generated@@89 $generated@@90)))
 :weight 0
)) (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (or (= $generated@@97 $generated@@99) (= ($generated@@64 $generated@@91 $generated@@92 $generated@@93 ($generated@@71 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@98 $generated@@99) ($generated@@64 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@98 $generated@@99)))
 :weight 0
)))) (= ($generated@@3 $generated@@65) 5)) (= ($generated@@3 $generated@@66) 6)) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@68 $generated@@100 $generated@@101 ($generated@@72 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@102) $generated@@104) $generated@@102)
 :weight 0
))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@109 $generated@@110) (= ($generated@@68 $generated@@105 $generated@@106 ($generated@@72 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@107) $generated@@110) ($generated@@68 $generated@@105 $generated@@106 $generated@@108 $generated@@110)))
 :weight 0
))) (= ($generated@@3 $generated@@69) 7)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (= ($generated@@3 ($generated@@70 $generated@@111 $generated@@112)) 8))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (! (= ($generated@@73 ($generated@@70 $generated@@113 $generated@@114)) $generated@@113)
 :pattern ( ($generated@@70 $generated@@113 $generated@@114))
))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@74 ($generated@@70 $generated@@115 $generated@@116)) $generated@@116)
 :pattern ( ($generated@@70 $generated@@115 $generated@@116))
))))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 Bool) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@8 ($generated@@64 $generated@@65 $generated@@66 $generated@@4 ($generated@@67 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))  (=> (and (or (not (= $generated@@121 $generated@@117)) (not true)) ($generated@@8 ($generated@@21 $generated@@4 ($generated@@68 $generated@@66 $generated@@69 ($generated@@68 $generated@@65 ($generated@@70 $generated@@66 $generated@@69) $generated@@118 $generated@@121) $generated@@119)))) $generated@@120))
 :pattern ( ($generated@@64 $generated@@65 $generated@@66 $generated@@4 ($generated@@67 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (and (= ($generated@@123 ($generated@@34 $generated@@125 $generated@@126)) $generated@@125) (= ($generated@@124 ($generated@@34 $generated@@125 $generated@@126)) $generated@@126))
 :pattern ( ($generated@@34 $generated@@125 $generated@@126))
)))
(assert  (=> (< 0 $generated@@55) ($generated@@32 $generated@@33 $generated@@24 ($generated@@35 $generated))))
(assert (= $generated@@24 ($generated@@29 $generated@@33 ($generated@@34 ($generated@@34 ($generated@@34 ($generated@@34 ($generated@@34 $generated@@27 ($generated@@40 $generated@@22 ($generated@@61 97))) ($generated@@40 $generated@@22 ($generated@@61 98))) ($generated@@40 $generated@@22 ($generated@@61 99))) ($generated@@40 $generated@@22 ($generated@@61 100))) ($generated@@40 $generated@@22 ($generated@@61 101))))))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (!  (=> ($generated@@36 $generated@@127 ($generated@@35 $generated@@128)) (and (= ($generated@@40 $generated@@33 ($generated@@21 $generated@@33 $generated@@127)) $generated@@127) ($generated@@32 $generated@@33 ($generated@@21 $generated@@33 $generated@@127) ($generated@@35 $generated@@128))))
 :pattern ( ($generated@@36 $generated@@127 ($generated@@35 $generated@@128)))
)))
(assert (forall (($generated@@129 T@U) ) (!  (and (= ($generated@@61 ($generated@@62 $generated@@129)) $generated@@129) (or (and (<= 0 ($generated@@62 $generated@@129)) (< ($generated@@62 $generated@@129) 55296)) (and (<= 57344 ($generated@@62 $generated@@129)) (< ($generated@@62 $generated@@129) 1114112))))
 :pattern ( ($generated@@62 $generated@@129))
)))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@40 $generated@@5 ($generated@@9 ($generated@@25 $generated@@130))) ($generated@@29 $generated@@69 ($generated@@40 $generated@@5 ($generated@@9 $generated@@130))))
 :pattern ( ($generated@@40 $generated@@5 ($generated@@9 ($generated@@25 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@40 $generated@@132 ($generated@@29 $generated@@132 $generated@@131)) ($generated@@29 $generated@@69 ($generated@@40 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@40 $generated@@132 ($generated@@29 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (!  (=> (= ($generated@@26 $generated@@133) 0) (= $generated@@133 $generated@@27))
 :pattern ( ($generated@@26 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@134 ($generated@@35 $generated@@135)) (forall (($generated@@136 Int) ) (!  (=> (and (<= 0 $generated@@136) (< $generated@@136 ($generated@@26 $generated@@134))) ($generated@@36 ($generated@@23 $generated@@134 $generated@@136) $generated@@135))
 :pattern ( ($generated@@23 $generated@@134 $generated@@136))
)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@134 ($generated@@35 $generated@@135)))
)))
(assert (forall (($generated@@137 T@U) ) (! ($generated@@32 $generated@@22 $generated@@137 $generated)
 :pattern ( ($generated@@32 $generated@@22 $generated@@137 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 (T@U) Bool)
(declare-fun $generated@@144 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@145 true))
(let (($generated@@146  (=> (and (< $generated@@138 ($generated@@25 0)) (= (ControlFlow 0 7) 4)) $generated@@145)))
(let (($generated@@147  (=> (and (<= ($generated@@25 0) $generated@@138) (= $generated@@139 ($generated@@62 $generated@@20))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (and (<= 0 $generated@@139) (< $generated@@139 256))) (=> (and (<= 0 $generated@@139) (< $generated@@139 256)) (=> (= (ControlFlow 0 5) 4) $generated@@145))))))
(let (($generated@@148  (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@25 0) ($generated@@25 0))) (=> (= (ControlFlow 0 2) (- 0 1)) (< 0 ($generated@@45 ((_ int2bv 8) ($generated@@62 $generated@@20))))))))
(let (($generated@@149  (=> (= $generated@@140 ($generated@@67 $generated@@141 $generated@@142 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 8) 2) $generated@@148) (=> (= (ControlFlow 0 8) 5) $generated@@147)) (=> (= (ControlFlow 0 8) 7) $generated@@146)))))
(let (($generated@@150  (=> (and (and ($generated@@143 $generated@@142) ($generated@@144 $generated@@142)) (and (= 2 $generated@@55) (= (ControlFlow 0 9) 8))) $generated@@149)))
$generated@@150)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
