(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@27 () Int)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (T@T T@U T@U) Bool)
(declare-fun $generated@@34 (T@U T@U) Bool)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 (T@T T@T) T@T)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@42 (T@T) T@T)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@64 (Int Int) Int)
(declare-fun $generated@@65 (Int Int) Bool)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@67 (Int) Int)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@77 (T@U T@U T@U) Bool)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@103 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@135 (Int Int) Int)
(declare-fun $generated@@138 (T@U) T@U)
(declare-fun $generated@@139 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! ($generated@@20 $generated@@6 $generated@@22 $generated@@21 $generated@@23)
 :pattern ( ($generated@@20 $generated@@6 $generated@@22 $generated@@21 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (! ($generated@@20 $generated@@6 $generated@@25 $generated@@24 $generated@@26)
 :pattern ( ($generated@@20 $generated@@6 $generated@@25 $generated@@24 $generated@@26))
)))
(assert  (=> (< 0 $generated@@27) (forall (($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (and (and ($generated@@29 $generated@@31) ($generated@@30 $generated@@6 ($generated@@10 $generated@@32) $generated@@24)) ($generated@@20 $generated@@6 ($generated@@10 $generated@@32) $generated@@24 $generated@@31)) ($generated@@20 $generated@@6 ($generated@@10 ($generated@@28 $generated@@32)) $generated@@21 $generated@@31))
 :pattern ( ($generated@@28 $generated@@32) ($generated@@20 $generated@@6 ($generated@@10 $generated@@32) $generated@@24 $generated@@31))
))))
(assert  (=> (< 0 $generated@@27) (forall (($generated@@33 Int) ) (!  (=> ($generated@@30 $generated@@6 ($generated@@10 $generated@@33) $generated@@24) ($generated@@30 $generated@@6 ($generated@@10 ($generated@@28 $generated@@33)) $generated@@21))
 :pattern ( ($generated@@28 $generated@@33))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@35 $generated@@44 $generated@@45 ($generated@@41 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@48) $generated@@46)
 :weight 0
)) (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ) (!  (or (= $generated@@53 $generated@@54) (= ($generated@@35 $generated@@49 $generated@@50 ($generated@@41 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@51) $generated@@54) ($generated@@35 $generated@@49 $generated@@50 $generated@@52 $generated@@54)))
 :weight 0
))) (= ($generated@@4 $generated@@36) 3)) (= ($generated@@4 $generated@@37) 4)) (= ($generated@@4 $generated@@38) 5)) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (= ($generated@@4 ($generated@@39 $generated@@55 $generated@@56)) 6))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@42 ($generated@@39 $generated@@57 $generated@@58)) $generated@@57)
 :pattern ( ($generated@@39 $generated@@57 $generated@@58))
))) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@43 ($generated@@39 $generated@@59 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@39 $generated@@59 $generated@@60))
))))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> ($generated@@34 $generated@@61 $generated@@62) (forall (($generated@@63 T@U) ) (!  (=> ($generated@@9 ($generated@@40 $generated@@5 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@38 ($generated@@39 $generated@@36 $generated@@37) $generated@@61 $generated@@63) $generated))) ($generated@@9 ($generated@@40 $generated@@5 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@38 ($generated@@39 $generated@@36 $generated@@37) $generated@@62 $generated@@63) $generated))))
 :pattern ( ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@38 ($generated@@39 $generated@@36 $generated@@37) $generated@@62 $generated@@63) $generated))
)))
 :pattern ( ($generated@@34 $generated@@61 $generated@@62))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@68 Int) ($generated@@69 Int) ) (!  (=> (or ($generated@@65 $generated@@68 $generated@@69) (and (< 1 $generated@@27) (and (and ($generated@@9 ($generated@@66 $generated@@5 ($generated@@8 true))) (<= ($generated@@67 0) $generated@@69)) (or (not (= $generated@@69 7)) (not true))))) (= ($generated@@64 $generated@@68 $generated@@69) $generated@@69))
 :pattern ( ($generated@@64 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 Int) ) (! (= ($generated@@67 $generated@@70) $generated@@70)
 :pattern ( ($generated@@67 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@66 $generated@@72 $generated@@71) $generated@@71)
 :pattern ( ($generated@@66 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 ($generated@@40 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@40 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ) (! (= ($generated@@30 $generated@@6 $generated@@76 $generated@@21) (<= ($generated@@67 0) ($generated@@11 $generated@@76)))
 :pattern ( ($generated@@30 $generated@@6 $generated@@76 $generated@@21))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@77 ($generated@@73 $generated@@81 $generated@@78) $generated@@79 $generated@@80) ($generated@@20 $generated@@81 $generated@@78 $generated@@79 $generated@@80))
 :pattern ( ($generated@@77 ($generated@@73 $generated@@81 $generated@@78) $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> ($generated@@34 $generated@@82 $generated@@83) (=> ($generated@@77 $generated@@84 $generated@@85 $generated@@82) ($generated@@77 $generated@@84 $generated@@85 $generated@@83)))
 :pattern ( ($generated@@34 $generated@@82 $generated@@83) ($generated@@77 $generated@@84 $generated@@85 $generated@@82))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@T) ) (!  (=> ($generated@@34 $generated@@86 $generated@@87) (=> ($generated@@20 $generated@@90 $generated@@88 $generated@@89 $generated@@86) ($generated@@20 $generated@@90 $generated@@88 $generated@@89 $generated@@87)))
 :pattern ( ($generated@@34 $generated@@86 $generated@@87) ($generated@@20 $generated@@90 $generated@@88 $generated@@89 $generated@@86))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@91 Int) ($generated@@92 Int) ) (!  (=> (or ($generated@@65 $generated@@91 $generated@@92) (and (< 1 $generated@@27) (and (and ($generated@@9 ($generated@@66 $generated@@5 ($generated@@8 true))) (<= ($generated@@67 0) $generated@@92)) (or (not (= $generated@@92 7)) (not true))))) (and (= ($generated@@64 $generated@@91 $generated@@92) ($generated@@28 $generated@@91)) (<= ($generated@@67 0) ($generated@@64 $generated@@91 $generated@@92))))
 :pattern ( ($generated@@64 $generated@@91 $generated@@92))
))))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@93 Int) ($generated@@94 Int) ) (!  (=> (or ($generated@@65 $generated@@93 ($generated@@67 $generated@@94)) (and (< 1 $generated@@27) (and (and ($generated@@9 ($generated@@66 $generated@@5 ($generated@@8 true))) (<= ($generated@@67 0) $generated@@94)) ($generated@@9 ($generated@@66 $generated@@5 ($generated@@8  (or (not (= $generated@@94 7)) (not true)))))))) (= ($generated@@64 $generated@@93 ($generated@@67 $generated@@94)) ($generated@@67 $generated@@94)))
 :weight 3
 :pattern ( ($generated@@64 $generated@@93 ($generated@@67 $generated@@94)))
))))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (=> (or (not (= $generated@@95 $generated@@97)) (not true)) (=> (and ($generated@@34 $generated@@95 $generated@@96) ($generated@@34 $generated@@96 $generated@@97)) ($generated@@34 $generated@@95 $generated@@97)))
 :pattern ( ($generated@@34 $generated@@95 $generated@@96) ($generated@@34 $generated@@96 $generated@@97))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@40 $generated@@99 ($generated@@73 $generated@@99 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@73 $generated@@99 $generated@@98))
)))
(assert (forall (($generated@@100 T@U) ) (! (= ($generated@@30 $generated@@6 $generated@@100 $generated@@24) ($generated@@9 ($generated@@66 $generated@@5 ($generated@@8 true))))
 :pattern ( ($generated@@30 $generated@@6 $generated@@100 $generated@@24))
)))
(assert  (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@101 $generated@@104 $generated@@105 $generated@@106 ($generated@@103 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@109 $generated@@110) $generated@@107)
 :weight 0
)) (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@101 $generated@@111 $generated@@112 $generated@@113 ($generated@@103 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@101 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@101 $generated@@120 $generated@@121 $generated@@122 ($generated@@103 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@101 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@9 ($generated@@101 $generated@@38 $generated@@36 $generated@@5 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@9 ($generated@@40 $generated@@5 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@38 ($generated@@39 $generated@@36 $generated@@37) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@101 $generated@@38 $generated@@36 $generated@@5 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@136 Int) ($generated@@137 Int) ) (! (= ($generated@@135 $generated@@136 $generated@@137) (* $generated@@136 $generated@@137))
 :pattern ( ($generated@@135 $generated@@136 $generated@@137))
)))
(assert (= ($generated@@138 $generated@@21) $generated@@0))
(assert (= ($generated@@139 $generated@@21) $generated@@2))
(assert (= ($generated@@138 $generated@@24) $generated@@1))
(assert (= ($generated@@139 $generated@@24) $generated@@3))
(assert (forall (($generated@@140 Int) ) (! (= ($generated@@73 $generated@@6 ($generated@@10 ($generated@@67 $generated@@140))) ($generated@@66 $generated@@37 ($generated@@73 $generated@@6 ($generated@@10 $generated@@140))))
 :pattern ( ($generated@@73 $generated@@6 ($generated@@10 ($generated@@67 $generated@@140))))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@T) ) (! (= ($generated@@73 $generated@@142 ($generated@@66 $generated@@142 $generated@@141)) ($generated@@66 $generated@@37 ($generated@@73 $generated@@142 $generated@@141)))
 :pattern ( ($generated@@73 $generated@@142 ($generated@@66 $generated@@142 $generated@@141)))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@143 Int) ($generated@@144 Int) ) (!  (=> (or ($generated@@65 ($generated@@67 $generated@@143) ($generated@@67 $generated@@144)) (and (< 1 $generated@@27) (and (and ($generated@@9 ($generated@@66 $generated@@5 ($generated@@8 true))) (<= ($generated@@67 0) $generated@@144)) ($generated@@9 ($generated@@66 $generated@@5 ($generated@@8  (or (not (= $generated@@144 7)) (not true)))))))) (= ($generated@@64 ($generated@@67 $generated@@143) ($generated@@67 $generated@@144)) ($generated@@67 $generated@@144)))
 :weight 3
 :pattern ( ($generated@@64 ($generated@@67 $generated@@143) ($generated@@67 $generated@@144)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@153 () Int)
(declare-fun $generated@@154 () Int)
(declare-fun $generated@@155 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@156 true))
(let (($generated@@157  (=> (and (and (or (not (= $generated@@145 9)) (not true)) (= $generated@@146 ($generated@@28 $generated@@147))) (and (<= ($generated@@67 0) $generated@@148) (= (ControlFlow 0 2) (- 0 1)))) (or (not (= $generated@@146 9)) (not true)))))
(let (($generated@@158  (=> (and (= $generated@@149 ($generated@@102 $generated@@150 $generated@@151 $generated false)) (= $generated@@145 ($generated@@28 $generated@@147))) (and (=> (= (ControlFlow 0 4) 2) $generated@@157) (=> (= (ControlFlow 0 4) 3) $generated@@156)))))
(let (($generated@@159  (=> (and (and ($generated@@29 $generated@@151) ($generated@@152 $generated@@151)) ($generated@@9 ($generated@@66 $generated@@5 ($generated@@8 true)))) (=> (and (and (and (<= ($generated@@67 0) $generated@@153) true) (and (<= ($generated@@67 0) $generated@@154) true)) (and (and (<= ($generated@@67 0) $generated@@155) true) (and (= 2 $generated@@27) (= (ControlFlow 0 5) 4)))) $generated@@158))))
$generated@@159)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
