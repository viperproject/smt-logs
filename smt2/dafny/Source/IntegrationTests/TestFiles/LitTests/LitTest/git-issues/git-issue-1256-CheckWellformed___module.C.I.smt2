(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun _module.C.S (T@U T@U T@U) T@U)
(declare-fun TSet (T@U) T@U)
(declare-fun |_module.C.S#canCall| (T@U T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun _module.C.I (T@U T@U) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |_module.C.I#canCall| (T@U T@U) Bool)
(declare-fun |$let#46$canCall| (T@U T@U) Bool)
(declare-fun |$let#46_n| (T@U T@U) Int)
(declare-fun LitInt (Int) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc Tagclass._System.nat tytagFamily$nat)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (= (Ctor SetType) 3))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (_module.C$X T@U) (_module.C.S$Y T@U) (|y#0| T@U) ) (!  (=> (and (or (|_module.C.S#canCall| _module.C$X _module.C.S$Y |y#0|) (and (< 0 $FunctionContextHeight) (and ($IsBox |y#0| _module.C.S$Y) ($IsAllocBox |y#0| _module.C.S$Y $Heap)))) ($IsGoodHeap $Heap)) ($IsAlloc SetType (_module.C.S _module.C$X _module.C.S$Y |y#0|) (TSet _module.C.S$Y) $Heap))
 :pattern ( ($IsAlloc SetType (_module.C.S _module.C$X _module.C.S$Y |y#0|) (TSet _module.C.S$Y) $Heap))
))))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (Ctor BoxType) 4))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.C$X@@0 T@U) ($Heap@@0 T@U) (|x#0@@0| T@U) ) (!  (=> (or (|_module.C.I#canCall| _module.C$X@@0 (Lit BoxType |x#0@@0|)) (and (< 1 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) ($IsBox |x#0@@0| _module.C$X@@0)))) (and (and (|$let#46$canCall| _module.C$X@@0 (Lit BoxType |x#0@@0|)) (|_module.C.S#canCall| _module.C$X@@0 _module.C$X@@0 (Lit BoxType |x#0@@0|))) (= (_module.C.I _module.C$X@@0 (Lit BoxType |x#0@@0|)) (let ((|n#1| (|$let#46_n| _module.C$X@@0 (Lit BoxType |x#0@@0|))))
(ite (|Set#IsMember| (Lit SetType (_module.C.S _module.C$X@@0 _module.C$X@@0 (Lit BoxType |x#0@@0|))) (Lit BoxType |x#0@@0|)) |n#1| (+ |n#1| 1))))))
 :weight 3
 :pattern ( (_module.C.I _module.C$X@@0 (Lit BoxType |x#0@@0|)) ($IsGoodHeap $Heap@@0))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.C$X@@1 T@U) (_module.C.S$Y@@0 T@U) (|y#0@@0| T@U) ) (!  (=> (or (|_module.C.S#canCall| _module.C$X@@1 _module.C.S$Y@@0 (Lit BoxType |y#0@@0|)) (and (< 0 $FunctionContextHeight) ($IsBox |y#0@@0| _module.C.S$Y@@0))) (= (_module.C.S _module.C$X@@1 _module.C.S$Y@@0 (Lit BoxType |y#0@@0|)) (Lit SetType (|Set#UnionOne| |Set#Empty| (Lit BoxType |y#0@@0|)))))
 :weight 3
 :pattern ( (_module.C.S _module.C$X@@1 _module.C.S$Y@@0 (Lit BoxType |y#0@@0|)))
))))
(assert (forall ((_module.C$X@@2 T@U) (x@@5 T@U) ) (!  (=> (|$let#46$canCall| _module.C$X@@2 x@@5) (and (<= (LitInt 0) (|$let#46_n| _module.C$X@@2 x@@5)) (and ($IsBox x@@5 _module.C$X@@2) (|Set#IsMember| (_module.C.S _module.C$X@@2 _module.C$X@@2 x@@5) x@@5))))
 :pattern ( (|$let#46_n| _module.C$X@@2 x@@5))
)))
(assert (forall ((x@@6 Int) ) (! (= (LitInt x@@6) x@@6)
 :pattern ( (LitInt x@@6))
)))
(assert (forall ((x@@7 T@U) (T T@T) ) (! (= (Lit T x@@7) x@@7)
 :pattern ( (Lit T x@@7))
)))
(assert (forall ((x@@8 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@8)) x@@8)
 :pattern ( ($Unbox T@@0 x@@8))
)))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((|x#0@@1| T@U) ) (! (= ($Is intType |x#0@@1| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@1|)))
 :pattern ( ($Is intType |x#0@@1| Tclass._System.nat))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@0 Tclass._System.nat))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.C$X@@3 T@U) (_module.C.S$Y@@1 T@U) (|y#0@@1| T@U) ) (!  (=> (or (|_module.C.S#canCall| _module.C$X@@3 _module.C.S$Y@@1 |y#0@@1|) (and (< 0 $FunctionContextHeight) ($IsBox |y#0@@1| _module.C.S$Y@@1))) ($Is SetType (_module.C.S _module.C$X@@3 _module.C.S$Y@@1 |y#0@@1|) (TSet _module.C.S$Y@@1)))
 :pattern ( (_module.C.S _module.C$X@@3 _module.C.S$Y@@1 |y#0@@1|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.C$X@@4 T@U) ($Heap@@1 T@U) (|x#0@@2| T@U) ) (!  (=> (or (|_module.C.I#canCall| _module.C$X@@4 |x#0@@2|) (and (< 1 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@1) ($IsBox |x#0@@2| _module.C$X@@4)))) (and (and (|$let#46$canCall| _module.C$X@@4 |x#0@@2|) (|_module.C.S#canCall| _module.C$X@@4 _module.C$X@@4 |x#0@@2|)) (= (_module.C.I _module.C$X@@4 |x#0@@2|) (let ((|n#0| (|$let#46_n| _module.C$X@@4 |x#0@@2|)))
(ite (|Set#IsMember| (_module.C.S _module.C$X@@4 _module.C$X@@4 |x#0@@2|) |x#0@@2|) |n#0| (+ |n#0| 1))))))
 :pattern ( (_module.C.I _module.C$X@@4 |x#0@@2|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@2) ($IsAllocBox bx@@2 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@2))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@9 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@9)) x@@9)
 :pattern ( ($Box T@@3 x@@9))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((t0@@1 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@1 t1 t2 (MapType0Store t0@@1 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@2 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 (MapType1Store t0@@2 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@3 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@3 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@3)) bx@@3) ($Is SetType ($Unbox SetType bx@@3) (TSet t@@3))))
 :pattern ( ($IsBox bx@@3 (TSet t@@3)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.C$X@@5 T@U) (_module.C.S$Y@@2 T@U) (|y#0@@2| T@U) ) (!  (=> (or (|_module.C.S#canCall| _module.C$X@@5 _module.C.S$Y@@2 |y#0@@2|) (and (< 0 $FunctionContextHeight) ($IsBox |y#0@@2| _module.C.S$Y@@2))) (= (_module.C.S _module.C$X@@5 _module.C.S$Y@@2 |y#0@@2|) (|Set#UnionOne| |Set#Empty| |y#0@@2|)))
 :pattern ( (_module.C.S _module.C$X@@5 _module.C.S$Y@@2 |y#0@@2|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.C$X@@6 T@U) (|x#0@@3| T@U) ) (!  (=> (or (|_module.C.I#canCall| _module.C$X@@6 |x#0@@3|) (and (< 1 $FunctionContextHeight) ($IsBox |x#0@@3| _module.C$X@@6))) (<= (LitInt 0) (_module.C.I _module.C$X@@6 |x#0@@3|)))
 :pattern ( (_module.C.I _module.C$X@@6 |x#0@@3|))
))))
(assert (forall ((x@@10 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@10))) (Lit BoxType ($Box intType (int_2_U x@@10))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@10))))
)))
(assert (forall ((x@@11 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@11)) (Lit BoxType ($Box T@@4 x@@11)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@11)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module.C$X@@7 () T@U)
(declare-fun |x#0@@4| () T@U)
(declare-fun |n#2@0| () Int)
(declare-fun $Heap@@2 () T@U)
(declare-fun |z#0@0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let ((anon12_correct  (=> (and (|$let#46$canCall| _module.C$X@@7 |x#0@@4|) (= (ControlFlow 0 4) (- 0 3))) ($Is intType (int_2_U (ite (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|) |n#2@0| (+ |n#2@0| 1))) Tclass._System.nat))))
(let ((anon19_Else_correct  (=> (and (not (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|)) (= (ControlFlow 0 6) 4)) anon12_correct)))
(let ((anon19_Then_correct  (=> (and (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|) (= (ControlFlow 0 5) 4)) anon12_correct)))
(let ((anon9_correct  (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (<= (LitInt 0) (LitInt 0)) (and ($IsBox |x#0@@4| _module.C$X@@7) (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|)))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (<= (LitInt 0) (LitInt 0)) (and ($IsBox |x#0@@4| _module.C$X@@7) (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|)))) (exists ((|n#3| Int) )  (and (<= (LitInt 0) |n#3|) (and ($IsBox |x#0@@4| _module.C$X@@7) (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|))))))) (=> (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (<= (LitInt 0) (LitInt 0)) (and ($IsBox |x#0@@4| _module.C$X@@7) (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|)))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (<= (LitInt 0) (LitInt 0)) (and ($IsBox |x#0@@4| _module.C$X@@7) (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|)))) (exists ((|n#3@@0| Int) )  (and (<= (LitInt 0) |n#3@@0|) (and ($IsBox |x#0@@4| _module.C$X@@7) (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|)))))) (=> (and (and (<= (LitInt 0) |n#2@0|) (and ($IsBox |x#0@@4| _module.C$X@@7) (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |x#0@@4|))) (and ($IsAllocBox |x#0@@4| _module.C$X@@7 $Heap@@2) (|_module.C.S#canCall| _module.C$X@@7 _module.C$X@@7 |x#0@@4|))) (and (=> (= (ControlFlow 0 7) 5) anon19_Then_correct) (=> (= (ControlFlow 0 7) 6) anon19_Else_correct)))))))
(let ((anon18_Else_correct  (=> (and (not (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |z#0@0|)) (= (ControlFlow 0 12) 7)) anon9_correct)))
(let ((anon18_Then_correct  (=> (and (|Set#IsMember| (_module.C.S _module.C$X@@7 _module.C$X@@7 |x#0@@4|) |z#0@0|) (= (ControlFlow 0 11) 7)) anon9_correct)))
(let ((anon17_Then_correct  (=> (and (and ($IsBox |z#0@0| _module.C$X@@7) ($IsAllocBox |z#0@0| _module.C$X@@7 $Heap@@2)) (and ($IsAllocBox |x#0@@4| _module.C$X@@7 $Heap@@2) (|_module.C.S#canCall| _module.C$X@@7 _module.C$X@@7 |x#0@@4|))) (and (=> (= (ControlFlow 0 13) 11) anon18_Then_correct) (=> (= (ControlFlow 0 13) 12) anon18_Else_correct)))))
(let ((anon17_Else_correct  (=> (and (not (and ($IsBox |z#0@0| _module.C$X@@7) ($IsAllocBox |z#0@0| _module.C$X@@7 $Heap@@2))) (= (ControlFlow 0 10) 7)) anon9_correct)))
(let ((anon16_Then_correct  (=> (<= (LitInt 0) |n#2@0|) (and (=> (= (ControlFlow 0 14) 13) anon17_Then_correct) (=> (= (ControlFlow 0 14) 10) anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (and (< |n#2@0| (LitInt 0)) (= (ControlFlow 0 9) 7)) anon9_correct)))
(let ((anon15_Then_correct  (and (=> (= (ControlFlow 0 15) 14) anon16_Then_correct) (=> (= (ControlFlow 0 15) 9) anon16_Else_correct))))
(let ((anon15_Else_correct true))
(let ((anon14_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@2 alloc false)) (and (and (=> (= (ControlFlow 0 16) 1) anon14_Then_correct) (=> (= (ControlFlow 0 16) 15) anon15_Then_correct)) (=> (= (ControlFlow 0 16) 2) anon15_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) ($IsBox |x#0@@4| _module.C$X@@7)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 17) 16))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
