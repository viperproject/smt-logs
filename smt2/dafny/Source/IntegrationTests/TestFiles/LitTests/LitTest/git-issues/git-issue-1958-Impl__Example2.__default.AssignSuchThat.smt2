(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) Bool)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@20 (T@U T@U T@U) Bool)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@36 () Int)
(declare-fun $generated@@37 (T@U) Bool)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (T@U T@U) Bool)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@43 (T@T T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@112 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert ($generated@@18 $generated@@19))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ) (! (= ($generated@@20 $generated@@22 $generated@@21 $generated@@23) ($generated@@20 $generated@@22 $generated@@19 $generated@@23))
 :pattern ( ($generated@@20 $generated@@22 $generated@@21 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 ($generated@@27 $generated@@30 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@27 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@20 ($generated@@28 $generated@@35 $generated@@32) $generated@@33 $generated@@34) ($generated@@31 $generated@@35 $generated@@32 $generated@@33 $generated@@34))
 :pattern ( ($generated@@20 ($generated@@28 $generated@@35 $generated@@32) $generated@@33 $generated@@34))
)))
(assert  (=> (<= 2 $generated@@36) (forall (($generated@@40 T@U) ) (!  (=> (or ($generated@@38 $generated@@40) (and (< 2 $generated@@36) ($generated@@39 $generated@@40 $generated@@21))) (= ($generated@@37 $generated@@40) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@6 true)))))
 :pattern ( ($generated@@37 $generated@@40))
))))
(assert (= ($generated@@2 $generated@@41) 3))
(assert  (=> (<= 2 $generated@@36) (forall (($generated@@42 T@U) ) (!  (=> (or ($generated@@38 ($generated@@24 $generated@@41 $generated@@42)) (and (< 2 $generated@@36) ($generated@@39 $generated@@42 $generated@@21))) (= ($generated@@37 ($generated@@24 $generated@@41 $generated@@42)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@6 true)))))
 :weight 3
 :pattern ( ($generated@@37 ($generated@@24 $generated@@41 $generated@@42)))
))))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@39 ($generated@@28 $generated@@46 $generated@@44) $generated@@45) ($generated@@43 $generated@@46 $generated@@44 $generated@@45))
 :pattern ( ($generated@@39 ($generated@@28 $generated@@46 $generated@@44) $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@18 $generated@@47) (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (!  (=> ($generated@@39 $generated@@49 $generated@@47) ($generated@@20 $generated@@49 $generated@@47 $generated@@48))
 :pattern ( ($generated@@20 $generated@@49 $generated@@47 $generated@@48))
)))
 :pattern ( ($generated@@18 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@27 $generated@@51 ($generated@@28 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@28 $generated@@51 $generated@@50))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@52 $generated@@62 $generated@@63 $generated@@64 ($generated@@58 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@67 $generated@@68) $generated@@65)
 :weight 0
)) (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@52 $generated@@69 $generated@@70 $generated@@71 ($generated@@58 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@76 $generated@@77) ($generated@@52 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@76 $generated@@77)))
 :weight 0
)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@52 $generated@@78 $generated@@79 $generated@@80 ($generated@@58 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@52 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)))) (= ($generated@@2 $generated@@53) 4)) (= ($generated@@2 $generated@@54) 5)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@56 $generated@@87 $generated@@88 ($generated@@59 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@91) $generated@@89)
 :weight 0
))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@96 $generated@@97) (= ($generated@@56 $generated@@92 $generated@@93 ($generated@@59 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@97) ($generated@@56 $generated@@92 $generated@@93 $generated@@95 $generated@@97)))
 :weight 0
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (= ($generated@@2 ($generated@@57 $generated@@98 $generated@@99)) 6))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@60 ($generated@@57 $generated@@100 $generated@@101)) $generated@@100)
 :pattern ( ($generated@@57 $generated@@100 $generated@@101))
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@61 ($generated@@57 $generated@@102 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@57 $generated@@102 $generated@@103))
))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 Bool) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@7 ($generated@@52 $generated@@53 $generated@@54 $generated@@3 ($generated@@55 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))  (=> (and (or (not (= $generated@@108 $generated@@104)) (not true)) ($generated@@7 ($generated@@27 $generated@@3 ($generated@@56 $generated@@54 $generated@@41 ($generated@@56 $generated@@53 ($generated@@57 $generated@@54 $generated@@41) $generated@@105 $generated@@108) $generated@@106)))) $generated@@107))
 :pattern ( ($generated@@52 $generated@@53 $generated@@54 $generated@@3 ($generated@@55 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))
)))
(assert (= ($generated@@110 $generated@@21) $generated@@0))
(assert (= ($generated@@111 $generated@@21) $generated@@1))
(assert (forall (($generated@@113 T@U) ) (! (= ($generated@@39 $generated@@113 $generated@@21)  (and ($generated@@39 $generated@@113 $generated@@19) ($generated@@112 $generated@@113)))
 :pattern ( ($generated@@39 $generated@@113 $generated@@21))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@28 $generated@@115 ($generated@@24 $generated@@115 $generated@@114)) ($generated@@24 $generated@@41 ($generated@@28 $generated@@115 $generated@@114)))
 :pattern ( ($generated@@28 $generated@@115 ($generated@@24 $generated@@115 $generated@@114)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 (T@U) Bool)
(declare-fun $generated@@121 (T@U) Bool)
(declare-fun $generated@@122 () Bool)
(declare-fun $generated@@123 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@124  (=> (= (ControlFlow 0 2) (- 0 1)) (exists (($generated@@125 T@U) )  (and ($generated@@39 $generated@@125 $generated@@21) ($generated@@37 $generated@@125))))))
(let (($generated@@126  (=> (and (not (and ($generated@@39 $generated@@116 $generated@@21) ($generated@@20 $generated@@116 $generated@@21 $generated@@117))) (= (ControlFlow 0 4) 2)) $generated@@124)))
(let (($generated@@127  (=> (and ($generated@@39 $generated@@116 $generated@@21) ($generated@@20 $generated@@116 $generated@@21 $generated@@117)) (=> (and (and ($generated@@20 $generated@@116 $generated@@21 $generated@@117) ($generated@@38 $generated@@116)) (and ($generated@@38 $generated@@116) (= (ControlFlow 0 3) 2))) $generated@@124))))
(let (($generated@@128  (=> (= $generated@@118 ($generated@@55 $generated@@119 $generated@@117 $generated false)) (and (=> (= (ControlFlow 0 5) 3) $generated@@127) (=> (= (ControlFlow 0 5) 4) $generated@@126)))))
(let (($generated@@129  (=> (and ($generated@@120 $generated@@117) ($generated@@121 $generated@@117)) (=> (and (and (=> $generated@@122 (and ($generated@@39 $generated@@123 $generated@@21) ($generated@@20 $generated@@123 $generated@@21 $generated@@117))) true) (and (= 3 $generated@@36) (= (ControlFlow 0 6) 5))) $generated@@128))))
$generated@@129))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
