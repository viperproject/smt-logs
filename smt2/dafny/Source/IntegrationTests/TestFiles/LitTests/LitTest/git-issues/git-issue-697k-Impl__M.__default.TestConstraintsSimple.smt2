(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U T@U) Bool)
(declare-fun $generated@@40 (T@U T@U) Bool)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@42 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@U) T@U)
(declare-fun $generated@@60 (T@U T@U) Bool)
(declare-fun $generated@@64 (T@U T@U T@U) Bool)
(declare-fun $generated@@69 (T@U Int Int T@U) T@U)
(declare-fun $generated@@70 (T@U T@U) Bool)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@87 (T@U) T@U)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 () T@T)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@94 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@95 (T@T T@T) T@T)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@97 (T@T) T@T)
(declare-fun $generated@@98 (T@T) T@T)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 (T@U T@U) Bool)
(declare-fun $generated@@142 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! ($generated@@21 $generated@@7 $generated@@26 $generated@@25 $generated@@27)
 :pattern ( ($generated@@21 $generated@@7 $generated@@26 $generated@@25 $generated@@27))
)))
(assert (forall (($generated@@29 Int) ) (! (= ($generated@@28 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 ($generated@@33 $generated@@36 $generated@@35)) $generated@@35)
 :pattern ( ($generated@@33 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ) (! (= ($generated@@37 $generated@@7 $generated@@38 $generated@@22)  (or (not (= ($generated@@12 $generated@@38) 30)) (not true)))
 :pattern ( ($generated@@37 $generated@@7 $generated@@38 $generated@@22))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@37 $generated@@7 $generated@@39 $generated@@25)  (or (not (= ($generated@@12 $generated@@39) 31)) (not true)))
 :pattern ( ($generated@@37 $generated@@7 $generated@@39 $generated@@25))
)))
(assert  (and (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@42 $generated@@45 $generated@@46 ($generated@@44 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@49) $generated@@47)
 :weight 0
)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (= $generated@@54 $generated@@55) (= ($generated@@42 $generated@@50 $generated@@51 ($generated@@44 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@55) ($generated@@42 $generated@@50 $generated@@51 $generated@@53 $generated@@55)))
 :weight 0
))) (= ($generated@@5 $generated@@43) 3)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@40 ($generated@@41 $generated@@56) $generated@@57) ($generated@@10 ($generated@@42 $generated@@43 $generated@@6 $generated@@56 $generated@@57)))
 :pattern ( ($generated@@40 ($generated@@41 $generated@@56) $generated@@57))
)))
(assert (= ($generated@@5 $generated@@58) 4))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (! (= ($generated@@37 $generated@@58 $generated@@61 ($generated@@59 $generated@@62)) (forall (($generated@@63 T@U) ) (!  (=> ($generated@@40 $generated@@61 $generated@@63) ($generated@@60 $generated@@63 $generated@@62))
 :pattern ( ($generated@@40 $generated@@61 $generated@@63))
)))
 :pattern ( ($generated@@37 $generated@@58 $generated@@61 ($generated@@59 $generated@@62)))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@64 ($generated@@34 $generated@@68 $generated@@65) $generated@@66 $generated@@67) ($generated@@21 $generated@@68 $generated@@65 $generated@@66 $generated@@67))
 :pattern ( ($generated@@64 ($generated@@34 $generated@@68 $generated@@65) $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 Int) ($generated@@73 Int) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@10 ($generated@@42 $generated@@43 $generated@@6 ($generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@74) $generated@@75))  (and ($generated@@60 $generated@@75 $generated@@71) (and (and (<= $generated@@72 ($generated@@12 ($generated@@33 $generated@@7 $generated@@75))) (< ($generated@@12 ($generated@@33 $generated@@7 $generated@@75)) $generated@@73)) ($generated@@70 $generated@@74 $generated@@75))))
 :pattern ( ($generated@@42 $generated@@43 $generated@@6 ($generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@74) $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ) (!  (=> ($generated@@60 $generated@@76 $generated@@22) (and (= ($generated@@34 $generated@@7 ($generated@@33 $generated@@7 $generated@@76)) $generated@@76) ($generated@@37 $generated@@7 ($generated@@33 $generated@@7 $generated@@76) $generated@@22)))
 :pattern ( ($generated@@60 $generated@@76 $generated@@22))
)))
(assert (forall (($generated@@77 T@U) ) (!  (=> ($generated@@60 $generated@@77 $generated@@25) (and (= ($generated@@34 $generated@@7 ($generated@@33 $generated@@7 $generated@@77)) $generated@@77) ($generated@@37 $generated@@7 ($generated@@33 $generated@@7 $generated@@77) $generated@@25)))
 :pattern ( ($generated@@60 $generated@@77 $generated@@25))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@T) ) (! (= ($generated@@60 ($generated@@34 $generated@@80 $generated@@78) $generated@@79) ($generated@@37 $generated@@80 $generated@@78 $generated@@79))
 :pattern ( ($generated@@60 ($generated@@34 $generated@@80 $generated@@78) $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@21 $generated@@58 $generated@@81 ($generated@@59 $generated@@82) $generated@@83) (forall (($generated@@84 T@U) ) (!  (=> ($generated@@40 $generated@@81 $generated@@84) ($generated@@64 $generated@@84 $generated@@82 $generated@@83))
 :pattern ( ($generated@@40 $generated@@81 $generated@@84))
)))
 :pattern ( ($generated@@21 $generated@@58 $generated@@81 ($generated@@59 $generated@@82) $generated@@83))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@85 ($generated@@59 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@59 $generated@@86))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@87 ($generated@@59 $generated@@88)) $generated)
 :pattern ( ($generated@@59 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@33 $generated@@90 ($generated@@34 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@34 $generated@@90 $generated@@89))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@91 $generated@@99 $generated@@100 $generated@@101 ($generated@@96 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@104 $generated@@105) $generated@@102)
 :weight 0
)) (and (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@91 $generated@@106 $generated@@107 $generated@@108 ($generated@@96 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@112 $generated@@109) $generated@@113 $generated@@114) ($generated@@91 $generated@@106 $generated@@107 $generated@@108 $generated@@110 $generated@@113 $generated@@114)))
 :weight 0
)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@91 $generated@@115 $generated@@116 $generated@@117 ($generated@@96 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@91 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)))) (= ($generated@@5 $generated@@92) 5)) (= ($generated@@5 $generated@@93) 6)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (= ($generated@@5 ($generated@@95 $generated@@124 $generated@@125)) 7))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@97 ($generated@@95 $generated@@126 $generated@@127)) $generated@@126)
 :pattern ( ($generated@@95 $generated@@126 $generated@@127))
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@98 ($generated@@95 $generated@@128 $generated@@129)) $generated@@129)
 :pattern ( ($generated@@95 $generated@@128 $generated@@129))
))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 Bool) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@10 ($generated@@91 $generated@@92 $generated@@93 $generated@@6 ($generated@@94 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))  (=> (and (or (not (= $generated@@134 $generated@@130)) (not true)) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@42 $generated@@93 $generated@@43 ($generated@@42 $generated@@92 ($generated@@95 $generated@@93 $generated@@43) $generated@@131 $generated@@134) $generated@@132)))) $generated@@133))
 :pattern ( ($generated@@91 $generated@@92 $generated@@93 $generated@@6 ($generated@@94 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))
)))
(assert  (=> (<= 0 $generated@@136) (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> (or ($generated@@137 $generated@@138 $generated@@139) (and (< 0 $generated@@136) ($generated@@60 $generated@@139 $generated@@138))) (= ($generated@@70 $generated@@138 $generated@@139) ($generated@@10 ($generated@@30 $generated@@6 ($generated@@9 true)))))
 :pattern ( ($generated@@70 $generated@@138 $generated@@139))
))))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> ($generated@@60 $generated@@140 ($generated@@59 $generated@@141)) (and (= ($generated@@34 $generated@@58 ($generated@@33 $generated@@58 $generated@@140)) $generated@@140) ($generated@@37 $generated@@58 ($generated@@33 $generated@@58 $generated@@140) ($generated@@59 $generated@@141))))
 :pattern ( ($generated@@60 $generated@@140 ($generated@@59 $generated@@141)))
)))
(assert (= ($generated@@87 $generated@@22) $generated@@1))
(assert (= ($generated@@142 $generated@@22) $generated@@3))
(assert (= ($generated@@87 $generated@@25) $generated@@2))
(assert (= ($generated@@142 $generated@@25) $generated@@4))
(assert (forall (($generated@@143 Int) ) (! (= ($generated@@34 $generated@@7 ($generated@@11 ($generated@@28 $generated@@143))) ($generated@@30 $generated@@43 ($generated@@34 $generated@@7 ($generated@@11 $generated@@143))))
 :pattern ( ($generated@@34 $generated@@7 ($generated@@11 ($generated@@28 $generated@@143))))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@T) ) (! (= ($generated@@34 $generated@@145 ($generated@@30 $generated@@145 $generated@@144)) ($generated@@30 $generated@@43 ($generated@@34 $generated@@145 $generated@@144)))
 :pattern ( ($generated@@34 $generated@@145 ($generated@@30 $generated@@145 $generated@@144)))
)))
(assert  (=> (<= 0 $generated@@136) (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (!  (=> (or ($generated@@137 $generated@@146 ($generated@@30 $generated@@43 $generated@@147)) (and (< 0 $generated@@136) ($generated@@60 $generated@@147 $generated@@146))) (= ($generated@@70 $generated@@146 ($generated@@30 $generated@@43 $generated@@147)) ($generated@@10 ($generated@@30 $generated@@6 ($generated@@9 true)))))
 :weight 3
 :pattern ( ($generated@@70 $generated@@146 ($generated@@30 $generated@@43 $generated@@147)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () Int)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 (T@U) Bool)
(declare-fun $generated@@159 (T@U) Bool)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 22) (let (($generated@@162 true))
(let (($generated@@163  (=> (and (not (and (and (<= ($generated@@28 29) $generated@@148) (< $generated@@148 33)) ($generated@@70 $generated@@25 ($generated@@34 $generated@@7 ($generated@@11 $generated@@148))))) (= (ControlFlow 0 4) 1)) $generated@@162)))
(let (($generated@@164  (=> (and (and (and (<= ($generated@@28 29) $generated@@148) (< $generated@@148 33)) ($generated@@70 $generated@@25 ($generated@@34 $generated@@7 ($generated@@11 $generated@@148)))) (= (ControlFlow 0 3) 1)) $generated@@162)))
(let (($generated@@165  (=> (not (and (<= ($generated@@28 29) $generated@@148) (< $generated@@148 33))) (and (=> (= (ControlFlow 0 6) 3) $generated@@164) (=> (= (ControlFlow 0 6) 4) $generated@@163)))))
(let (($generated@@166  (=> (and (and (<= ($generated@@28 29) $generated@@148) (< $generated@@148 33)) (and ($generated@@21 $generated@@7 ($generated@@11 $generated@@148) $generated@@25 $generated@@149) ($generated@@137 $generated@@25 ($generated@@34 $generated@@7 ($generated@@11 $generated@@148))))) (and (=> (= (ControlFlow 0 5) 3) $generated@@164) (=> (= (ControlFlow 0 5) 4) $generated@@163)))))
(let (($generated@@167  (=> (< $generated@@148 ($generated@@28 29)) (and (=> (= (ControlFlow 0 9) 5) $generated@@166) (=> (= (ControlFlow 0 9) 6) $generated@@165)))))
(let (($generated@@168  (=> (and (<= ($generated@@28 29) $generated@@148) (= $generated@@150 ($generated@@28 33))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (not (= $generated@@150 31)) (not true))) (=> (or (not (= $generated@@150 31)) (not true)) (and (=> (= (ControlFlow 0 7) 5) $generated@@166) (=> (= (ControlFlow 0 7) 6) $generated@@165)))))))
(let (($generated@@169  (=> (and (or (not (= $generated@@148 31)) (not true)) (= $generated@@151 ($generated@@28 29))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (or (not (= $generated@@151 31)) (not true))) (=> (or (not (= $generated@@151 31)) (not true)) (and (=> (= (ControlFlow 0 10) 7) $generated@@168) (=> (= (ControlFlow 0 10) 9) $generated@@167)))))))
(let (($generated@@170  (=> (and (= $generated@@148 31) (= (ControlFlow 0 2) 1)) $generated@@162)))
(let (($generated@@171  (=> (and (forall (($generated@@172 T@U) ) (!  (=> (or (not (= ($generated@@12 $generated@@172) 30)) (not true)) (=> (and (<= ($generated@@28 29) ($generated@@12 $generated@@172)) (< ($generated@@12 $generated@@172) 33)) ($generated@@137 $generated@@22 ($generated@@34 $generated@@7 $generated@@172))))
 :pattern ( ($generated@@70 $generated@@22 ($generated@@34 $generated@@7 $generated@@172)))
)) (= $generated@@152 ($generated@@41 ($generated@@69 $generated@@22 ($generated@@28 29) 33 $generated@@22)))) (and (=> (= (ControlFlow 0 12) 10) $generated@@169) (=> (= (ControlFlow 0 12) 2) $generated@@170)))))
(let (($generated@@173  (=> (and (not (and (and (<= ($generated@@28 29) $generated@@153) (< $generated@@153 33)) ($generated@@70 $generated@@22 ($generated@@34 $generated@@7 ($generated@@11 $generated@@153))))) (= (ControlFlow 0 15) 12)) $generated@@171)))
(let (($generated@@174  (=> (and (and (and (<= ($generated@@28 29) $generated@@153) (< $generated@@153 33)) ($generated@@70 $generated@@22 ($generated@@34 $generated@@7 ($generated@@11 $generated@@153)))) (= (ControlFlow 0 14) 12)) $generated@@171)))
(let (($generated@@175  (=> (not (and (<= ($generated@@28 29) $generated@@153) (< $generated@@153 33))) (and (=> (= (ControlFlow 0 17) 14) $generated@@174) (=> (= (ControlFlow 0 17) 15) $generated@@173)))))
(let (($generated@@176  (=> (and (and (<= ($generated@@28 29) $generated@@153) (< $generated@@153 33)) (and ($generated@@21 $generated@@7 ($generated@@11 $generated@@153) $generated@@22 $generated@@149) ($generated@@137 $generated@@22 ($generated@@34 $generated@@7 ($generated@@11 $generated@@153))))) (and (=> (= (ControlFlow 0 16) 14) $generated@@174) (=> (= (ControlFlow 0 16) 15) $generated@@173)))))
(let (($generated@@177  (=> (< $generated@@153 ($generated@@28 29)) (and (=> (= (ControlFlow 0 19) 16) $generated@@176) (=> (= (ControlFlow 0 19) 17) $generated@@175)))))
(let (($generated@@178  (=> (<= ($generated@@28 29) $generated@@153) (and (=> (= (ControlFlow 0 18) 16) $generated@@176) (=> (= (ControlFlow 0 18) 17) $generated@@175)))))
(let (($generated@@179  (=> (or (not (= $generated@@153 30)) (not true)) (and (=> (= (ControlFlow 0 20) 18) $generated@@178) (=> (= (ControlFlow 0 20) 19) $generated@@177)))))
(let (($generated@@180  (=> (and (= $generated@@153 30) (= (ControlFlow 0 13) 12)) $generated@@171)))
(let (($generated@@181  (=> (= $generated@@154 ($generated@@94 $generated@@155 $generated@@149 $generated@@0 false)) (=> (and (and ($generated@@37 $generated@@58 $generated@@156 ($generated@@59 $generated@@22)) ($generated@@21 $generated@@58 $generated@@156 ($generated@@59 $generated@@22) $generated@@149)) (and ($generated@@37 $generated@@58 $generated@@157 ($generated@@59 $generated@@25)) ($generated@@21 $generated@@58 $generated@@157 ($generated@@59 $generated@@25) $generated@@149))) (and (=> (= (ControlFlow 0 21) 20) $generated@@179) (=> (= (ControlFlow 0 21) 13) $generated@@180))))))
(let (($generated@@182  (=> (and ($generated@@158 $generated@@149) ($generated@@159 $generated@@149)) (=> (and (and ($generated@@37 $generated@@58 $generated@@160 ($generated@@59 $generated@@22)) ($generated@@21 $generated@@58 $generated@@160 ($generated@@59 $generated@@22) $generated@@149)) true) (=> (and (and (and ($generated@@37 $generated@@58 $generated@@161 ($generated@@59 $generated@@25)) ($generated@@21 $generated@@58 $generated@@161 ($generated@@59 $generated@@25) $generated@@149)) true) (and (= 1 $generated@@136) (= (ControlFlow 0 22) 21))) $generated@@181)))))
$generated@@182)))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
