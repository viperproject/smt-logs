(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (T@U) Bool)
(declare-fun $generated@@22 () Bool)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@29 (T@U) Bool)
(declare-fun $generated@@30 (Int) Bool)
(declare-fun $generated@@31 (Int) Int)
(declare-fun $generated@@32 (T@U) Int)
(declare-fun $generated@@33 (T@U T@U) Bool)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@45 (Int) T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T) T@T)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@73 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T) T@T)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@128 () Bool)
(declare-fun $generated@@129 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@134 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert  (=> (<= 2 $generated@@20) (=> (exists (($generated@@23 T@U) ) (! ($generated@@21 $generated@@23)
 :pattern ( ($generated@@21 $generated@@23))
)) $generated@@22)))
(assert (= ($generated@@24 $generated) $generated@@1))
(assert (= ($generated@@24 $generated@@0) $generated@@2))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ($generated@@28 T@U) ) (!  (=> (and ($generated@@25 $generated@@26 $generated@@27) ($generated@@25 $generated@@27 $generated@@28)) ($generated@@25 $generated@@26 $generated@@28))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27) ($generated@@25 $generated@@27 $generated@@28))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27) ($generated@@25 $generated@@26 $generated@@28))
)))
(assert  (=> (<= 2 $generated@@20) (forall (($generated@@34 T@U) ) (!  (=> (or ($generated@@29 $generated@@34) (and (< 2 $generated@@20) ($generated@@30 ($generated@@31 12)))) (and (=> (=> (< 0 ($generated@@32 $generated@@34)) true) (=> (= ($generated@@31 0) ($generated@@32 $generated@@34)) (forall (($generated@@35 T@U) ) (!  (=> ($generated@@33 $generated@@35 $generated@@34) ($generated@@29 $generated@@35))
 :pattern ( ($generated@@21 $generated@@35))
)))) (= ($generated@@21 $generated@@34)  (and (=> (< 0 ($generated@@32 $generated@@34)) true) (=> (= ($generated@@31 0) ($generated@@32 $generated@@34)) (exists (($generated@@36 T@U) ) (!  (and ($generated@@33 $generated@@36 $generated@@34) ($generated@@21 $generated@@36))
 :pattern ( ($generated@@21 $generated@@36))
)))))))
 :pattern ( ($generated@@21 $generated@@34))
))))
(assert (= ($generated@@4 $generated@@38) 3))
(assert  (=> (<= 2 $generated@@20) (forall (($generated@@39 T@U) ) (!  (=> (or ($generated@@29 ($generated@@37 $generated@@38 $generated@@39)) (and (< 2 $generated@@20) ($generated@@30 ($generated@@31 12)))) (and (=> (=> (< 0 ($generated@@32 $generated@@39)) true) (=> (= ($generated@@31 0) ($generated@@32 $generated@@39)) (forall (($generated@@40 T@U) ) (!  (=> ($generated@@33 $generated@@40 $generated@@39) ($generated@@29 $generated@@40))
 :pattern ( ($generated@@21 $generated@@40))
)))) (= ($generated@@21 ($generated@@37 $generated@@38 $generated@@39))  (and (=> (< 0 ($generated@@32 $generated@@39)) true) (=> (= ($generated@@31 0) ($generated@@32 $generated@@39)) (exists (($generated@@41 T@U) ) (!  (and ($generated@@33 $generated@@41 $generated@@39) ($generated@@21 $generated@@41))
 :pattern ( ($generated@@21 $generated@@41))
)))))))
 :weight 3
 :pattern ( ($generated@@21 ($generated@@37 $generated@@38 $generated@@39)))
))))
(assert (forall (($generated@@42 Int) ) (! (= ($generated@@31 $generated@@42) $generated@@42)
 :pattern ( ($generated@@31 $generated@@42))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@37 $generated@@44 $generated@@43) $generated@@43)
 :pattern ( ($generated@@37 $generated@@44 $generated@@43))
)))
(assert  (=> (<= 2 $generated@@20) (forall (($generated@@46 T@U) ) (!  (=> (= $generated@@46 ($generated@@45 0)) (not ($generated@@21 $generated@@46)))
 :pattern ( ($generated@@21 $generated@@46))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 ($generated@@47 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@47 $generated@@50 $generated@@49))
)))
(assert  (=> (<= 2 $generated@@20) (=> $generated@@22 (exists (($generated@@51 T@U) ) (! ($generated@@21 $generated@@51)
 :pattern ( ($generated@@21 $generated@@51))
)))))
(assert (forall (($generated@@53 Int) ) (!  (=> (<= 0 $generated@@53) (and ($generated@@52 ($generated@@45 $generated@@53)) (= ($generated@@32 ($generated@@45 $generated@@53)) $generated@@53)))
 :pattern ( ($generated@@45 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (or ($generated@@25 $generated@@54 $generated@@55) (= $generated@@54 $generated@@55)) ($generated@@25 $generated@@55 $generated@@54))
 :pattern ( ($generated@@25 $generated@@54 $generated@@55) ($generated@@25 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@33 $generated@@56 $generated@@57) ($generated@@25 $generated@@56 $generated@@57))
 :pattern ( ($generated@@33 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ) (! (<= 0 ($generated@@32 $generated@@58))
 :pattern ( ($generated@@32 $generated@@58))
)))
(assert  (=> (<= 2 $generated@@20) (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (!  (=> ($generated@@25 $generated@@59 $generated@@60) (=> ($generated@@21 $generated@@59) ($generated@@21 $generated@@60)))
 :pattern ( ($generated@@21 $generated@@59) ($generated@@33 $generated@@59 $generated@@61) ($generated@@33 $generated@@60 $generated@@61))
))))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@47 $generated@@63 ($generated@@48 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@48 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (!  (and (and (and (=> ($generated@@25 $generated@@64 $generated@@65) (or (not (= $generated@@64 $generated@@65)) (not true))) (=> (and ($generated@@52 $generated@@64) (not ($generated@@52 $generated@@65))) ($generated@@25 $generated@@64 $generated@@65))) (=> (and ($generated@@52 $generated@@64) ($generated@@52 $generated@@65)) (= ($generated@@25 $generated@@64 $generated@@65) (< ($generated@@32 $generated@@64) ($generated@@32 $generated@@65))))) (=> (and ($generated@@25 $generated@@64 $generated@@65) ($generated@@52 $generated@@65)) ($generated@@52 $generated@@64)))
 :pattern ( ($generated@@25 $generated@@64 $generated@@65))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@66 $generated@@76 $generated@@77 $generated@@78 ($generated@@72 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@66 $generated@@83 $generated@@84 $generated@@85 ($generated@@72 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@66 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@66 $generated@@92 $generated@@93 $generated@@94 ($generated@@72 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@66 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))) (= ($generated@@4 $generated@@67) 4)) (= ($generated@@4 $generated@@68) 5)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@70 $generated@@101 $generated@@102 ($generated@@73 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@105) $generated@@103)
 :weight 0
))) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@110 $generated@@111) (= ($generated@@70 $generated@@106 $generated@@107 ($generated@@73 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@111) ($generated@@70 $generated@@106 $generated@@107 $generated@@109 $generated@@111)))
 :weight 0
))) (forall (($generated@@112 T@T) ($generated@@113 T@T) ) (= ($generated@@4 ($generated@@71 $generated@@112 $generated@@113)) 6))) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (! (= ($generated@@74 ($generated@@71 $generated@@114 $generated@@115)) $generated@@114)
 :pattern ( ($generated@@71 $generated@@114 $generated@@115))
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@75 ($generated@@71 $generated@@116 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@71 $generated@@116 $generated@@117))
))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@9 ($generated@@66 $generated@@67 $generated@@68 $generated@@5 ($generated@@69 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@9 ($generated@@47 $generated@@5 ($generated@@70 $generated@@68 $generated@@38 ($generated@@70 $generated@@67 ($generated@@71 $generated@@68 $generated@@38) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@66 $generated@@67 $generated@@68 $generated@@5 ($generated@@69 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (forall (($generated@@124 T@U) ) (!  (=> ($generated@@52 $generated@@124) (= $generated@@124 ($generated@@45 ($generated@@32 $generated@@124))))
 :pattern ( ($generated@@32 $generated@@124))
 :pattern ( ($generated@@52 $generated@@124))
)))
(assert (forall (($generated@@125 Int) ) (! (= ($generated@@48 $generated@@6 ($generated@@10 ($generated@@31 $generated@@125))) ($generated@@37 $generated@@38 ($generated@@48 $generated@@6 ($generated@@10 $generated@@125))))
 :pattern ( ($generated@@48 $generated@@6 ($generated@@10 ($generated@@31 $generated@@125))))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@T) ) (! (= ($generated@@48 $generated@@127 ($generated@@37 $generated@@127 $generated@@126)) ($generated@@37 $generated@@38 ($generated@@48 $generated@@127 $generated@@126)))
 :pattern ( ($generated@@48 $generated@@127 ($generated@@37 $generated@@127 $generated@@126)))
)))
(assert  (=> (<= 1 $generated@@20) (=> (or $generated@@128 (and (< 1 $generated@@20) ($generated@@30 ($generated@@31 12)))) (= $generated@@22 ($generated@@9 ($generated@@37 $generated@@5 ($generated@@8 true)))))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (! ($generated@@129 $generated@@6 $generated@@131 $generated@@0 $generated@@130)
 :pattern ( ($generated@@129 $generated@@6 $generated@@131 $generated@@0 $generated@@130))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (! ($generated@@129 $generated@@5 $generated@@133 $generated $generated@@132)
 :pattern ( ($generated@@129 $generated@@5 $generated@@133 $generated $generated@@132))
)))
(assert (forall (($generated@@135 T@U) ) (! ($generated@@134 $generated@@6 $generated@@135 $generated@@0)
 :pattern ( ($generated@@134 $generated@@6 $generated@@135 $generated@@0))
)))
(assert (forall (($generated@@136 T@U) ) (! ($generated@@134 $generated@@5 $generated@@136 $generated)
 :pattern ( ($generated@@134 $generated@@5 $generated@@136 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 (Int) Bool)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 (T@U) Bool)
(declare-fun $generated@@144 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@145 true))
(let (($generated@@146  (=> (= $generated@@137 ($generated@@31 12)) (=> (and (and ($generated@@129 $generated@@6 ($generated@@10 $generated@@137) $generated@@0 $generated@@138) ($generated@@139 ($generated@@31 12))) (and ($generated@@139 ($generated@@31 12)) (= (ControlFlow 0 3) (- 0 2)))) ($generated@@30 ($generated@@31 12))))))
(let (($generated@@147 true))
(let (($generated@@148  (=> (and (and (= $generated@@140 ($generated@@69 $generated@@141 $generated@@138 $generated@@3 false)) (= $generated@@142 ($generated@@31 12))) (and ($generated@@129 $generated@@6 ($generated@@10 $generated@@142) $generated@@0 $generated@@138) ($generated@@139 ($generated@@31 12)))) (and (and (=> (= (ControlFlow 0 5) 1) $generated@@147) (=> (= (ControlFlow 0 5) 3) $generated@@146)) (=> (= (ControlFlow 0 5) 4) $generated@@145)))))
(let (($generated@@149  (=> (and (and ($generated@@143 $generated@@138) ($generated@@144 $generated@@138)) (and (= 1 $generated@@20) (= (ControlFlow 0 6) 5))) $generated@@148)))
$generated@@149))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
