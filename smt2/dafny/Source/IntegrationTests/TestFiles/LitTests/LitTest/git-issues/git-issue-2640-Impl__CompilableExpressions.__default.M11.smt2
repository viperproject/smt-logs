(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 () Bool)
(declare-fun $generated@@32 (Int) Bool)
(declare-fun $generated@@33 () Int)
(declare-fun $generated@@34 (Int) Int)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@43 (T@U) Bool)
(declare-fun $generated@@45 (T@T T@U) T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@56 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@60 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(declare-fun $generated@@116 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@117 (T@U) Bool)
(declare-fun $generated@@120 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (= ($generated@@24 $generated@@25) $generated@@3))
(assert (= ($generated@@24 $generated@@26) $generated@@4))
(assert (= ($generated@@24 $generated@@27) $generated@@5))
(assert (= ($generated@@7 $generated@@29) 3))
(assert ($generated@@28 $generated@@29 $generated@@25 $generated@@30))
(assert ($generated@@28 $generated@@29 $generated@@26 $generated@@30))
(assert ($generated@@28 $generated@@29 $generated@@27 $generated@@30))
(assert  (=> $generated@@31 ($generated@@32 $generated@@33)))
(assert (forall (($generated@@35 Int) ) (! (= ($generated@@34 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@36 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@40) (= ($generated@@24 $generated@@40) $generated@@3))
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@42 T@U) ) (! (= ($generated@@41 $generated@@42) (= ($generated@@24 $generated@@42) $generated@@4))
 :pattern ( ($generated@@41 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@43 $generated@@44) (= ($generated@@24 $generated@@44) $generated@@5))
 :pattern ( ($generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 ($generated@@45 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@45 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@39 $generated@@49) (= $generated@@49 $generated@@25))
 :pattern ( ($generated@@39 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated@@41 $generated@@50) (= $generated@@50 $generated@@26))
 :pattern ( ($generated@@41 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@43 $generated@@51) (= $generated@@51 $generated@@27))
 :pattern ( ($generated@@43 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@45 $generated@@53 ($generated@@46 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@46 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@54 $generated@@55) (or (or ($generated@@39 $generated@@55) ($generated@@41 $generated@@55)) ($generated@@43 $generated@@55)))
 :pattern ( ($generated@@54 $generated@@55))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@56 $generated@@67 $generated@@68 $generated@@69 ($generated@@63 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@72 $generated@@73) $generated@@70)
 :weight 0
)) (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@56 $generated@@74 $generated@@75 $generated@@76 ($generated@@63 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@56 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@56 $generated@@83 $generated@@84 $generated@@85 ($generated@@63 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@56 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)))) (= ($generated@@7 $generated@@57) 4)) (= ($generated@@7 $generated@@58) 5)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@60 $generated@@92 $generated@@93 ($generated@@64 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@96) $generated@@94)
 :weight 0
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@60 $generated@@97 $generated@@98 ($generated@@64 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@60 $generated@@97 $generated@@98 $generated@@100 $generated@@102)))
 :weight 0
))) (= ($generated@@7 $generated@@61) 6)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (= ($generated@@7 ($generated@@62 $generated@@103 $generated@@104)) 7))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@65 ($generated@@62 $generated@@105 $generated@@106)) $generated@@105)
 :pattern ( ($generated@@62 $generated@@105 $generated@@106))
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@66 ($generated@@62 $generated@@107 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@62 $generated@@107 $generated@@108))
))))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 Bool) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@12 ($generated@@56 $generated@@57 $generated@@58 $generated@@8 ($generated@@59 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))  (=> (and (or (not (= $generated@@113 $generated@@109)) (not true)) ($generated@@12 ($generated@@45 $generated@@8 ($generated@@60 $generated@@58 $generated@@61 ($generated@@60 $generated@@57 ($generated@@62 $generated@@58 $generated@@61) $generated@@110 $generated@@113) $generated@@111)))) $generated@@112))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58 $generated@@8 ($generated@@59 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@115 $generated@@30) (or (or ($generated@@39 $generated@@115) ($generated@@41 $generated@@115)) ($generated@@43 $generated@@115)))
 :pattern ( ($generated@@43 $generated@@115) ($generated@@28 $generated@@29 $generated@@115 $generated@@30))
 :pattern ( ($generated@@41 $generated@@115) ($generated@@28 $generated@@29 $generated@@115 $generated@@30))
 :pattern ( ($generated@@39 $generated@@115) ($generated@@28 $generated@@29 $generated@@115 $generated@@30))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ) (!  (=> (and ($generated@@117 $generated@@119) ($generated@@28 $generated@@29 $generated@@118 $generated@@30)) ($generated@@116 $generated@@29 $generated@@118 $generated@@30 $generated@@119))
 :pattern ( ($generated@@116 $generated@@29 $generated@@118 $generated@@30 $generated@@119))
)))
(assert (= ($generated@@23 $generated@@30) $generated@@2))
(assert (= ($generated@@120 $generated@@30) $generated@@6))
(assert (= $generated@@25 ($generated@@36 $generated@@29 $generated@@25)))
(assert (= $generated@@26 ($generated@@36 $generated@@29 $generated@@26)))
(assert (= $generated@@27 ($generated@@36 $generated@@29 $generated@@27)))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@46 $generated@@9 ($generated@@13 ($generated@@34 $generated@@121))) ($generated@@36 $generated@@61 ($generated@@46 $generated@@9 ($generated@@13 $generated@@121))))
 :pattern ( ($generated@@46 $generated@@9 ($generated@@13 ($generated@@34 $generated@@121))))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@T) ) (! (= ($generated@@46 $generated@@123 ($generated@@36 $generated@@123 $generated@@122)) ($generated@@36 $generated@@61 ($generated@@46 $generated@@123 $generated@@122)))
 :pattern ( ($generated@@46 $generated@@123 ($generated@@36 $generated@@123 $generated@@122)))
)))
(assert (forall (($generated@@124 T@U) ($generated@@125 T@U) ) (! ($generated@@116 $generated@@9 $generated@@125 $generated $generated@@124)
 :pattern ( ($generated@@116 $generated@@9 $generated@@125 $generated $generated@@124))
)))
(assert (forall (($generated@@126 T@U) ) (! ($generated@@28 $generated@@9 $generated@@126 $generated)
 :pattern ( ($generated@@28 $generated@@9 $generated@@126 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (Int) Bool)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 (T@U) Bool)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let (($generated@@137 true))
(let (($generated@@138 true))
(let (($generated@@139  (=> (or (not (= (ite (= (let (($generated@@140 $generated@@33))
$generated@@140) ($generated@@34 0)) $generated@@127 $generated@@127) $generated@@26)) (not true)) (and (=> (= (ControlFlow 0 6) 4) $generated@@138) (=> (= (ControlFlow 0 6) 5) $generated@@137)))))
(let (($generated@@141 true))
(let (($generated@@142  (=> (or (not (= (ite (= (let (($generated@@143 $generated@@33))
$generated@@143) ($generated@@34 0)) $generated@@127 $generated@@127) $generated@@25)) (not true)) (and (=> (= (ControlFlow 0 7) 3) $generated@@141) (=> (= (ControlFlow 0 7) 6) $generated@@139)))))
(let (($generated@@144 true))
(let (($generated@@145  (=> $generated@@31 (and (=> (= (ControlFlow 0 8) 2) $generated@@144) (=> (= (ControlFlow 0 8) 7) $generated@@142)))))
(let (($generated@@146  (=> (and (or (not (= (let (($generated@@147 $generated@@33))
$generated@@147) ($generated@@34 0))) (not true)) (= (ControlFlow 0 10) 8)) $generated@@145)))
(let (($generated@@148  (=> (and (= (let (($generated@@149 $generated@@33))
$generated@@149) ($generated@@34 0)) (= (ControlFlow 0 9) 8)) $generated@@145)))
(let (($generated@@150  (=> (and ($generated@@116 $generated@@9 ($generated@@13 $generated@@128) $generated $generated@@129) ($generated@@130 $generated@@128)) (and (=> (= (ControlFlow 0 11) (- 0 13)) (or (and ($generated@@28 $generated@@9 ($generated@@13 ($generated@@34 0)) $generated) ($generated@@32 ($generated@@34 0))) (exists (($generated@@151 Int) ) ($generated@@32 $generated@@151)))) (=> (or (and ($generated@@28 $generated@@9 ($generated@@13 ($generated@@34 0)) $generated) ($generated@@32 ($generated@@34 0))) (exists (($generated@@152 Int) ) ($generated@@32 $generated@@152))) (=> ($generated@@32 $generated@@128) (=> (and ($generated@@130 $generated@@131) ($generated@@32 $generated@@131)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (= $generated@@128 $generated@@131)) (=> (= $generated@@128 $generated@@131) (=> $generated@@31 (and (=> (= (ControlFlow 0 11) 9) $generated@@148) (=> (= (ControlFlow 0 11) 10) $generated@@146))))))))))))
(let (($generated@@153 true))
(let (($generated@@154  (=> (= $generated@@132 ($generated@@59 $generated@@133 $generated@@129 $generated@@1 false)) (and (=> (= (ControlFlow 0 14) 11) $generated@@150) (=> (= (ControlFlow 0 14) 1) $generated@@153)))))
(let (($generated@@155  (=> (and ($generated@@117 $generated@@129) ($generated@@134 $generated@@129)) (=> (and (and (and (and ($generated@@28 $generated@@29 $generated@@127 $generated@@30) ($generated@@116 $generated@@29 $generated@@127 $generated@@30 $generated@@129)) ($generated@@54 $generated@@127)) (= 1 $generated@@135)) (and ($generated@@32 $generated@@136) (= (ControlFlow 0 15) 14))) $generated@@154))))
$generated@@155))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 11) (- 12))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
