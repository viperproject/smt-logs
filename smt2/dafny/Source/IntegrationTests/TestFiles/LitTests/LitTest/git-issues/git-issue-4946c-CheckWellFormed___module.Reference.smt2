(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@41 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@T T@T) T@T)
(declare-fun $generated@@47 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@48 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@100 (T@U) T@U)
(declare-fun $generated@@101 (T@U) T@U)
(declare-fun $generated@@102 (T@U) Bool)
(declare-fun $generated@@103 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@T) ) (! (= ($generated@@22 $generated@@24 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@24 $generated@@23))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@T) ) (! (= ($generated@@26 $generated@@28 ($generated@@25 $generated@@28 $generated@@27)) $generated@@27)
 :pattern ( ($generated@@25 $generated@@28 $generated@@27))
)))
(assert (= ($generated@@6 $generated@@30) 3))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@34 $generated@@31)  (and ($generated@@29 $generated@@30 $generated@@34 $generated@@32) (or (not (= $generated@@34 $generated@@33)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@34 $generated@@31))
 :pattern ( ($generated@@29 $generated@@30 $generated@@34 $generated@@32))
)))
(assert (forall (($generated@@37 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@37 $generated@@35)  (and ($generated@@29 $generated@@30 $generated@@37 $generated@@36) (or (not (= $generated@@37 $generated@@33)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@37 $generated@@35))
 :pattern ( ($generated@@29 $generated@@30 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@38 T@U) ) (! ($generated@@29 $generated@@30 $generated@@38 $generated@@32)
 :pattern ( ($generated@@29 $generated@@30 $generated@@38 $generated@@32))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@25 $generated@@40 ($generated@@26 $generated@@40 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@26 $generated@@40 $generated@@39))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@41 $generated@@51 $generated@@52 $generated@@53 ($generated@@47 $generated@@51 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@57 $generated@@54) $generated@@56 $generated@@57) $generated@@54)
 :weight 0
)) (and (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (or (= $generated@@63 $generated@@65) (= ($generated@@41 $generated@@58 $generated@@59 $generated@@60 ($generated@@47 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@65 $generated@@66) ($generated@@41 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@65 $generated@@66)))
 :weight 0
)) (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@73 $generated@@75) (= ($generated@@41 $generated@@67 $generated@@68 $generated@@69 ($generated@@47 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@74 $generated@@75) ($generated@@41 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@74 $generated@@75)))
 :weight 0
)))) (= ($generated@@6 $generated@@42) 4)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@44 $generated@@76 $generated@@77 ($generated@@48 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@78) $generated@@80) $generated@@78)
 :weight 0
))) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@85 $generated@@86) (= ($generated@@44 $generated@@81 $generated@@82 ($generated@@48 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@44 $generated@@81 $generated@@82 $generated@@84 $generated@@86)))
 :weight 0
))) (= ($generated@@6 $generated@@45) 5)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (= ($generated@@6 ($generated@@46 $generated@@87 $generated@@88)) 6))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@49 ($generated@@46 $generated@@89 $generated@@90)) $generated@@89)
 :pattern ( ($generated@@46 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (! (= ($generated@@50 ($generated@@46 $generated@@91 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@46 $generated@@91 $generated@@92))
))))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 Bool) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@11 ($generated@@41 $generated@@30 $generated@@42 $generated@@7 ($generated@@43 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))  (=> (and (or (not (= $generated@@97 $generated@@93)) (not true)) ($generated@@11 ($generated@@25 $generated@@7 ($generated@@44 $generated@@42 $generated@@45 ($generated@@44 $generated@@30 ($generated@@46 $generated@@42 $generated@@45) $generated@@94 $generated@@97) $generated@@95)))) $generated@@96))
 :pattern ( ($generated@@41 $generated@@30 $generated@@42 $generated@@7 ($generated@@43 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))
)))
(assert (forall (($generated@@99 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@99 $generated@@36) ($generated@@29 $generated@@30 $generated@@99 $generated@@32))
 :pattern ( ($generated@@29 $generated@@30 $generated@@99 $generated@@36))
)))
(assert (= ($generated@@100 $generated@@32) $generated@@0))
(assert (= ($generated@@101 $generated@@32) $generated@@4))
(assert (= ($generated@@100 $generated@@31) $generated@@1))
(assert (= ($generated@@101 $generated@@31) $generated@@4))
(assert (= ($generated@@100 $generated@@36) $generated@@2))
(assert (= ($generated@@101 $generated@@36) $generated@@5))
(assert (= ($generated@@100 $generated@@35) $generated@@3))
(assert (= ($generated@@101 $generated@@35) $generated@@5))
(assert (forall (($generated@@104 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@104 $generated@@36)  (or (= $generated@@104 $generated@@33) ($generated@@102 ($generated@@103 $generated@@104))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@104 $generated@@36))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@26 $generated@@106 ($generated@@22 $generated@@106 $generated@@105)) ($generated@@22 $generated@@45 ($generated@@26 $generated@@106 $generated@@105)))
 :pattern ( ($generated@@26 $generated@@106 ($generated@@22 $generated@@106 $generated@@105)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@107 () T@U)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 (T@U) Bool)
(declare-fun $generated@@110 (T@U) Bool)
(declare-fun $generated@@111 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@112  (and (=> (= (ControlFlow 0 3) (- 0 4)) ($generated@@29 $generated@@30 $generated@@33 $generated@@35)) (=> ($generated@@29 $generated@@30 $generated@@33 $generated@@35) (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@11 ($generated@@22 $generated@@7 ($generated@@10 true))))))))
(let (($generated@@113 true))
(let (($generated@@114  (=> (= $generated@@107 ($generated@@43 $generated@@33 $generated@@108 $generated false)) (and (=> (= (ControlFlow 0 5) 1) $generated@@113) (=> (= (ControlFlow 0 5) 3) $generated@@112)))))
(let (($generated@@115  (=> (and (and ($generated@@109 $generated@@108) ($generated@@110 $generated@@108)) (and (= 1 $generated@@111) (= (ControlFlow 0 6) 5))) $generated@@114)))
$generated@@115)))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 4))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
