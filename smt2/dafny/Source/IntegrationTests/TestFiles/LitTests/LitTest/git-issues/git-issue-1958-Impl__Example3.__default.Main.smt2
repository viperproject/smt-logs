(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@27 () Int)
(declare-fun $generated@@28 (Int) T@U)
(declare-fun $generated@@29 (Int) Bool)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 (Int) T@U)
(declare-fun $generated@@41 (Int) Bool)
(declare-fun $generated@@45 (T@U) Bool)
(declare-fun $generated@@47 (T@U) Bool)
(declare-fun $generated@@48 () Bool)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@U) Bool)
(declare-fun $generated@@76 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@80 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 (T@T T@T) T@T)
(declare-fun $generated@@83 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@139 (T@U) T@U)
(declare-fun $generated@@140 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ) (! ($generated@@23 $generated@@9 $generated@@25 $generated@@24 $generated@@26)
 :pattern ( ($generated@@23 $generated@@9 $generated@@25 $generated@@24 $generated@@26))
)))
(assert (= ($generated@@7 $generated@@33) 3))
(assert  (=> (<= 2 $generated@@27) (forall (($generated@@36 Int) ) (!  (=> (or ($generated@@29 $generated@@36) (and (< 2 $generated@@27) (and (<= ($generated@@30 0) $generated@@36) (exists (($generated@@37 T@U) ) (!  (and ($generated@@32 $generated@@33 $generated@@37 $generated@@34) ($generated@@31 $generated@@37))
 :pattern ( ($generated@@31 $generated@@37))
))))) ($generated@@32 $generated@@33 ($generated@@28 $generated@@36) $generated@@35))
 :pattern ( ($generated@@28 $generated@@36))
))))
(assert (= ($generated@@38 $generated@@39) $generated@@3))
(assert  (=> (<= 3 $generated@@27) (forall (($generated@@42 Int) ) (!  (=> (or ($generated@@41 $generated@@42) (and (< 3 $generated@@27) (<= ($generated@@30 0) $generated@@42))) ($generated@@32 $generated@@33 ($generated@@40 $generated@@42) $generated@@35))
 :pattern ( ($generated@@40 $generated@@42))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@23 $generated@@33 $generated@@43 $generated@@35 $generated@@44) ($generated@@23 $generated@@33 $generated@@43 $generated@@34 $generated@@44))
 :pattern ( ($generated@@23 $generated@@33 $generated@@43 $generated@@35 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@32 $generated@@33 $generated@@46 $generated@@34) ($generated@@45 $generated@@46))
 :pattern ( ($generated@@45 $generated@@46) ($generated@@32 $generated@@33 $generated@@46 $generated@@34))
)))
(assert ($generated@@32 $generated@@33 $generated@@39 $generated@@34))
(assert  (=> (<= 2 $generated@@27) (forall (($generated@@50 T@U) ($generated@@51 Int) ) (!  (=> (or ($generated@@29 $generated@@51) (and (< 2 $generated@@27) (and (and ($generated@@47 $generated@@50) (<= ($generated@@30 0) $generated@@51)) (exists (($generated@@52 T@U) ) (!  (and ($generated@@32 $generated@@33 $generated@@52 $generated@@34) ($generated@@31 $generated@@52))
 :pattern ( ($generated@@31 $generated@@52))
))))) (and $generated@@48 (= ($generated@@28 $generated@@51) (let (($generated@@53 $generated@@49))
$generated@@53))))
 :pattern ( ($generated@@28 $generated@@51) ($generated@@47 $generated@@50))
))))
(assert (forall (($generated@@54 Int) ) (! (= ($generated@@30 $generated@@54) $generated@@54)
 :pattern ( ($generated@@30 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 $generated@@56) $generated@@56)
 :pattern ( ($generated@@55 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@45 $generated@@58) (= ($generated@@38 $generated@@58) $generated@@3))
 :pattern ( ($generated@@45 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 ($generated@@59 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@59 $generated@@62 $generated@@61))
)))
(assert  (=> (<= 2 $generated@@27) (forall (($generated@@63 T@U) ($generated@@64 Int) ) (!  (=> (or ($generated@@29 ($generated@@30 $generated@@64)) (and (< 2 $generated@@27) (and (and ($generated@@47 $generated@@63) (<= ($generated@@30 0) $generated@@64)) (exists (($generated@@65 T@U) ) (!  (and ($generated@@32 $generated@@33 $generated@@65 $generated@@34) ($generated@@31 $generated@@65))
 :pattern ( ($generated@@31 $generated@@65))
))))) (and $generated@@48 (= ($generated@@28 ($generated@@30 $generated@@64)) (let (($generated@@66 $generated@@49))
$generated@@66))))
 :weight 3
 :pattern ( ($generated@@28 ($generated@@30 $generated@@64)) ($generated@@47 $generated@@63))
))))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@45 $generated@@67) (= $generated@@67 $generated@@39))
 :pattern ( ($generated@@45 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@32 $generated@@9 $generated@@68 $generated@@24) (<= ($generated@@30 0) ($generated@@14 $generated@@68)))
 :pattern ( ($generated@@32 $generated@@9 $generated@@68 $generated@@24))
)))
(assert  (=> $generated@@48 (and ($generated@@32 $generated@@33 $generated@@49 $generated@@34) ($generated@@31 $generated@@49))))
(assert  (=> (<= 3 $generated@@27) (forall (($generated@@69 Int) ) (!  (=> (or ($generated@@41 $generated@@69) (and (< 3 $generated@@27) (<= ($generated@@30 0) $generated@@69))) (and ($generated@@29 $generated@@69) (= ($generated@@40 $generated@@69) (let (($generated@@70 ($generated@@28 $generated@@69)))
$generated@@70))))
 :pattern ( ($generated@@40 $generated@@69))
))))
(assert  (=> (<= 0 $generated@@27) (forall (($generated@@72 T@U) ) (!  (=> (or ($generated@@71 $generated@@72) (and (< 0 $generated@@27) ($generated@@32 $generated@@33 $generated@@72 $generated@@34))) (= ($generated@@31 $generated@@72) ($generated@@12 ($generated@@55 $generated@@8 ($generated@@11 false)))))
 :pattern ( ($generated@@31 $generated@@72))
))))
(assert  (=> (<= 0 $generated@@27) (forall (($generated@@73 T@U) ) (!  (=> (or ($generated@@71 ($generated@@55 $generated@@33 $generated@@73)) (and (< 0 $generated@@27) ($generated@@32 $generated@@33 $generated@@73 $generated@@34))) (= ($generated@@31 ($generated@@55 $generated@@33 $generated@@73)) ($generated@@12 ($generated@@55 $generated@@8 ($generated@@11 false)))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@55 $generated@@33 $generated@@73)))
))))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@59 $generated@@75 ($generated@@60 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@60 $generated@@75 $generated@@74))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (! (= ($generated@@76 $generated@@87 $generated@@88 $generated@@89 ($generated@@83 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@92 $generated@@93) $generated@@90)
 :weight 0
)) (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@76 $generated@@94 $generated@@95 $generated@@96 ($generated@@83 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@76 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@76 $generated@@103 $generated@@104 $generated@@105 ($generated@@83 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)))) (= ($generated@@7 $generated@@77) 4)) (= ($generated@@7 $generated@@78) 5)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@80 $generated@@112 $generated@@113 ($generated@@84 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@114) $generated@@116) $generated@@114)
 :weight 0
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (!  (or (= $generated@@121 $generated@@122) (= ($generated@@80 $generated@@117 $generated@@118 ($generated@@84 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@119) $generated@@122) ($generated@@80 $generated@@117 $generated@@118 $generated@@120 $generated@@122)))
 :weight 0
))) (= ($generated@@7 $generated@@81) 6)) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (= ($generated@@7 ($generated@@82 $generated@@123 $generated@@124)) 7))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (! (= ($generated@@85 ($generated@@82 $generated@@125 $generated@@126)) $generated@@125)
 :pattern ( ($generated@@82 $generated@@125 $generated@@126))
))) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (! (= ($generated@@86 ($generated@@82 $generated@@127 $generated@@128)) $generated@@128)
 :pattern ( ($generated@@82 $generated@@127 $generated@@128))
))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@12 ($generated@@76 $generated@@77 $generated@@78 $generated@@8 ($generated@@79 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@12 ($generated@@59 $generated@@8 ($generated@@80 $generated@@78 $generated@@81 ($generated@@80 $generated@@77 ($generated@@82 $generated@@78 $generated@@81) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@76 $generated@@77 $generated@@78 $generated@@8 ($generated@@79 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert  (=> (<= 3 $generated@@27) (forall (($generated@@135 Int) ) (!  (=> (or ($generated@@41 ($generated@@30 $generated@@135)) (and (< 3 $generated@@27) (<= ($generated@@30 0) $generated@@135))) (and ($generated@@29 ($generated@@30 $generated@@135)) (= ($generated@@40 ($generated@@30 $generated@@135)) (let (($generated@@136 ($generated@@55 $generated@@33 ($generated@@28 ($generated@@30 $generated@@135)))))
$generated@@136))))
 :weight 3
 :pattern ( ($generated@@40 ($generated@@30 $generated@@135)))
))))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> (and ($generated@@47 $generated@@138) ($generated@@32 $generated@@33 $generated@@137 $generated@@34)) ($generated@@23 $generated@@33 $generated@@137 $generated@@34 $generated@@138))
 :pattern ( ($generated@@23 $generated@@33 $generated@@137 $generated@@34 $generated@@138))
)))
(assert (= ($generated@@139 $generated@@24) $generated@@0))
(assert (= ($generated@@140 $generated@@24) $generated@@4))
(assert (= ($generated@@139 $generated@@34) $generated@@1))
(assert (= ($generated@@140 $generated@@34) $generated@@5))
(assert (= ($generated@@139 $generated@@35) $generated@@2))
(assert (= ($generated@@140 $generated@@35) $generated@@6))
(assert (= $generated@@39 ($generated@@55 $generated@@33 $generated@@39)))
(assert (forall (($generated@@141 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@141 $generated@@35)  (and ($generated@@32 $generated@@33 $generated@@141 $generated@@34) ($generated@@31 $generated@@141)))
 :pattern ( ($generated@@32 $generated@@33 $generated@@141 $generated@@35))
)))
(assert (forall (($generated@@142 Int) ) (! (= ($generated@@60 $generated@@9 ($generated@@13 ($generated@@30 $generated@@142))) ($generated@@55 $generated@@81 ($generated@@60 $generated@@9 ($generated@@13 $generated@@142))))
 :pattern ( ($generated@@60 $generated@@9 ($generated@@13 ($generated@@30 $generated@@142))))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@T) ) (! (= ($generated@@60 $generated@@144 ($generated@@55 $generated@@144 $generated@@143)) ($generated@@55 $generated@@81 ($generated@@60 $generated@@144 $generated@@143)))
 :pattern ( ($generated@@60 $generated@@144 ($generated@@55 $generated@@144 $generated@@143)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 (T@U) Bool)
(declare-fun $generated@@151 () Bool)
(declare-fun $generated@@152 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@153  (=> (= $generated@@145 ($generated@@79 $generated@@146 $generated@@147 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@32 $generated@@9 ($generated@@13 ($generated@@30 15)) $generated@@24)) (=> ($generated@@32 $generated@@9 ($generated@@13 ($generated@@30 15)) $generated@@24) (=> (= $generated@@148 ($generated@@30 15)) (=> (and ($generated@@23 $generated@@9 ($generated@@13 $generated@@148) $generated@@24 $generated@@147) ($generated@@41 ($generated@@30 15))) (=> (and (and ($generated@@45 ($generated@@55 $generated@@33 ($generated@@40 ($generated@@30 15)))) ($generated@@41 ($generated@@30 15))) (and (= $generated@@149 ($generated@@55 $generated@@33 ($generated@@40 ($generated@@30 15)))) (= (ControlFlow 0 2) (- 0 1)))) true))))))))
(let (($generated@@154  (=> (and ($generated@@47 $generated@@147) ($generated@@150 $generated@@147)) (=> (and (and (=> $generated@@151 (and ($generated@@32 $generated@@33 $generated@@152 $generated@@35) ($generated@@23 $generated@@33 $generated@@152 $generated@@35 $generated@@147))) true) (and (= 4 $generated@@27) (= (ControlFlow 0 4) 2))) $generated@@153))))
$generated@@154)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
