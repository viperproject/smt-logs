(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@39 () Int)
(declare-fun $generated@@40 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 () Int)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@47 (T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) Bool)
(declare-fun $generated@@62 (T@U) T@U)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@71 (T@U) Int)
(declare-fun $generated@@72 (T@U) Int)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@81 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 (T@T T@T) T@T)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@T) T@T)
(declare-fun $generated@@87 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@24) 3))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (!  (=> ($generated@@23 $generated@@24 $generated@@27 ($generated@@25 $generated@@26)) ($generated@@22 $generated@@27))
 :pattern ( ($generated@@22 $generated@@27) ($generated@@23 $generated@@24 $generated@@27 ($generated@@25 $generated@@26)))
)))
(assert (forall (($generated@@29 Int) ) (! (= ($generated@@28 $generated@@29) $generated@@29)
 :pattern ( ($generated@@28 $generated@@29))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 $generated@@31) $generated@@31)
 :pattern ( ($generated@@30 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@22 $generated@@34) (= ($generated@@33 $generated@@34) $generated@@3))
 :pattern ( ($generated@@22 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert  (=> (< 0 $generated@@39) (forall (($generated@@43 T@U) ) (!  (=> ($generated@@42 $generated@@43) ($generated@@40 $generated@@7 ($generated@@11 $generated@@41) $generated $generated@@43))
 :pattern ( ($generated@@40 $generated@@7 ($generated@@11 $generated@@41) $generated $generated@@43))
))))
(assert (forall (($generated@@45 T@U) ) (!  (=> ($generated@@22 $generated@@45) (exists (($generated@@46 T@U) ) (= $generated@@45 ($generated@@44 $generated@@46))))
 :pattern ( ($generated@@22 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@47 ($generated@@36 $generated@@51 $generated@@48) $generated@@49 $generated@@50) ($generated@@40 $generated@@51 $generated@@48 $generated@@49 $generated@@50))
 :pattern ( ($generated@@47 ($generated@@36 $generated@@51 $generated@@48) $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ) (!  (and (= ($generated@@21 ($generated@@25 $generated@@53)) $generated@@2) (= ($generated@@52 ($generated@@25 $generated@@53)) $generated@@4))
 :pattern ( ($generated@@25 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> ($generated@@42 $generated@@56) (= ($generated@@40 $generated@@24 ($generated@@44 $generated@@55) ($generated@@25 $generated@@54) $generated@@56) ($generated@@47 $generated@@55 $generated@@54 $generated@@56)))
 :pattern ( ($generated@@40 $generated@@24 ($generated@@44 $generated@@55) ($generated@@25 $generated@@54) $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@57 $generated@@58 $generated) (and (= ($generated@@36 $generated@@7 ($generated@@35 $generated@@7 $generated@@58)) $generated@@58) ($generated@@23 $generated@@7 ($generated@@35 $generated@@7 $generated@@58) $generated)))
 :pattern ( ($generated@@57 $generated@@58 $generated))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@57 ($generated@@36 $generated@@61 $generated@@59) $generated@@60) ($generated@@23 $generated@@61 $generated@@59 $generated@@60))
 :pattern ( ($generated@@57 ($generated@@36 $generated@@61 $generated@@59) $generated@@60))
)))
(assert  (=> (< 0 $generated@@39) ($generated@@23 $generated@@7 ($generated@@11 $generated@@41) $generated)))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@62 ($generated@@25 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@25 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@33 ($generated@@44 $generated@@64)) $generated@@3)
 :pattern ( ($generated@@44 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@65 ($generated@@44 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@44 $generated@@66))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@35 $generated@@68 ($generated@@36 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@36 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@23 $generated@@24 ($generated@@44 $generated@@70) ($generated@@25 $generated@@69)) ($generated@@57 $generated@@70 $generated@@69))
 :pattern ( ($generated@@23 $generated@@24 ($generated@@44 $generated@@70) ($generated@@25 $generated@@69)))
)))
(assert (= $generated@@41 ($generated@@28 1)))
(assert (forall (($generated@@73 T@U) ) (! (< ($generated@@71 $generated@@73) ($generated@@72 ($generated@@44 $generated@@73)))
 :pattern ( ($generated@@44 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> (and ($generated@@42 $generated@@76) (and ($generated@@22 $generated@@74) ($generated@@40 $generated@@24 $generated@@74 ($generated@@25 $generated@@75) $generated@@76))) ($generated@@47 ($generated@@65 $generated@@74) $generated@@75 $generated@@76))
 :pattern ( ($generated@@47 ($generated@@65 $generated@@74) $generated@@75 $generated@@76))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@77 $generated@@88 $generated@@89 $generated@@90 ($generated@@84 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@93 $generated@@94) $generated@@91)
 :weight 0
)) (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@77 $generated@@95 $generated@@96 $generated@@97 ($generated@@84 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@77 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@77 $generated@@104 $generated@@105 $generated@@106 ($generated@@84 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@77 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)))) (= ($generated@@5 $generated@@78) 4)) (= ($generated@@5 $generated@@79) 5)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@81 $generated@@113 $generated@@114 ($generated@@85 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@115) $generated@@117) $generated@@115)
 :weight 0
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@122 $generated@@123) (= ($generated@@81 $generated@@118 $generated@@119 ($generated@@85 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@123) ($generated@@81 $generated@@118 $generated@@119 $generated@@121 $generated@@123)))
 :weight 0
))) (= ($generated@@5 $generated@@82) 6)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (= ($generated@@5 ($generated@@83 $generated@@124 $generated@@125)) 7))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@86 ($generated@@83 $generated@@126 $generated@@127)) $generated@@126)
 :pattern ( ($generated@@83 $generated@@126 $generated@@127))
))) (forall (($generated@@128 T@T) ($generated@@129 T@T) ) (! (= ($generated@@87 ($generated@@83 $generated@@128 $generated@@129)) $generated@@129)
 :pattern ( ($generated@@83 $generated@@128 $generated@@129))
))))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 Bool) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@10 ($generated@@77 $generated@@78 $generated@@79 $generated@@6 ($generated@@80 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))  (=> (and (or (not (= $generated@@134 $generated@@130)) (not true)) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@81 $generated@@79 $generated@@82 ($generated@@81 $generated@@78 ($generated@@83 $generated@@79 $generated@@82) $generated@@131 $generated@@134) $generated@@132)))) $generated@@133))
 :pattern ( ($generated@@77 $generated@@78 $generated@@79 $generated@@6 ($generated@@80 $generated@@130 $generated@@131 $generated@@132 $generated@@133) $generated@@134 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ) (! (= ($generated@@71 ($generated@@36 $generated@@24 $generated@@136)) ($generated@@72 $generated@@136))
 :pattern ( ($generated@@71 ($generated@@36 $generated@@24 $generated@@136)))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> ($generated@@57 $generated@@138 ($generated@@25 $generated@@137)) (and (= ($generated@@36 $generated@@24 ($generated@@35 $generated@@24 $generated@@138)) $generated@@138) ($generated@@23 $generated@@24 ($generated@@35 $generated@@24 $generated@@138) ($generated@@25 $generated@@137))))
 :pattern ( ($generated@@57 $generated@@138 ($generated@@25 $generated@@137)))
)))
(assert (forall (($generated@@139 Int) ) (! (= ($generated@@36 $generated@@7 ($generated@@11 ($generated@@28 $generated@@139))) ($generated@@30 $generated@@82 ($generated@@36 $generated@@7 ($generated@@11 $generated@@139))))
 :pattern ( ($generated@@36 $generated@@7 ($generated@@11 ($generated@@28 $generated@@139))))
)))
(assert (forall (($generated@@140 T@U) ) (! (= ($generated@@44 ($generated@@30 $generated@@82 $generated@@140)) ($generated@@30 $generated@@24 ($generated@@44 $generated@@140)))
 :pattern ( ($generated@@44 ($generated@@30 $generated@@82 $generated@@140)))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@T) ) (! (= ($generated@@36 $generated@@142 ($generated@@30 $generated@@142 $generated@@141)) ($generated@@30 $generated@@82 ($generated@@36 $generated@@142 $generated@@141)))
 :pattern ( ($generated@@36 $generated@@142 ($generated@@30 $generated@@142 $generated@@141)))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (! ($generated@@40 $generated@@7 $generated@@144 $generated $generated@@143)
 :pattern ( ($generated@@40 $generated@@7 $generated@@144 $generated $generated@@143))
)))
(assert (forall (($generated@@145 T@U) ) (! ($generated@@23 $generated@@7 $generated@@145 $generated)
 :pattern ( ($generated@@23 $generated@@7 $generated@@145 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@153 true))
(let (($generated@@154  (=> (and (= $generated@@146 ($generated@@28 1)) (= (ControlFlow 0 3) (- 0 2))) (= $generated@@41 ($generated@@28 1)))))
(let (($generated@@155  (=> (= $generated@@147 ($generated@@44 ($generated@@36 $generated@@7 ($generated@@11 $generated@@146)))) (and (=> (= (ControlFlow 0 5) 3) $generated@@154) (=> (= (ControlFlow 0 5) 4) $generated@@153)))))
(let (($generated@@156 true))
(let (($generated@@157  (=> (= $generated@@148 ($generated@@80 $generated@@149 $generated@@150 $generated@@1 false)) (=> (and ($generated@@23 $generated@@24 $generated@@147 ($generated@@25 $generated)) ($generated@@40 $generated@@24 $generated@@147 ($generated@@25 $generated) $generated@@150)) (and (=> (= (ControlFlow 0 6) 5) $generated@@155) (=> (= (ControlFlow 0 6) 1) $generated@@156))))))
(let (($generated@@158  (=> (and ($generated@@42 $generated@@150) ($generated@@151 $generated@@150)) (=> (and (and (and ($generated@@23 $generated@@24 $generated@@152 ($generated@@25 $generated)) ($generated@@40 $generated@@24 $generated@@152 ($generated@@25 $generated) $generated@@150)) true) (and (= 1 $generated@@39) (= (ControlFlow 0 7) 6))) $generated@@157))))
$generated@@158)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
