(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.RemoveKeys (T@U T@U Bool T@U T@U) T@U)
(declare-fun |_module.__default.RemoveKeys#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun MapType () T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 |tytagFamily$_tuple#2|)
)
(assert  (and (= (Ctor MapType) 3) (= (Ctor SetType) 4)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.RemoveKeys$X T@U) (_module._default.RemoveKeys$Y T@U) (|m#0| T@U) (|xs#0| T@U) ) (!  (=> (or (|_module.__default.RemoveKeys#canCall| _module._default.RemoveKeys$X _module._default.RemoveKeys$Y |m#0| |xs#0|) (and (< 0 $FunctionContextHeight) (and ($Is MapType |m#0| (TMap _module._default.RemoveKeys$X _module._default.RemoveKeys$Y)) ($Is SetType |xs#0| (TSet _module._default.RemoveKeys$X))))) (= (_module.__default.RemoveKeys _module._default.RemoveKeys$X _module._default.RemoveKeys$Y true |m#0| |xs#0|) (|Map#Subtract| |m#0| |xs#0|)))
 :pattern ( (_module.__default.RemoveKeys _module._default.RemoveKeys$X _module._default.RemoveKeys$Y true |m#0| |xs#0|))
))))
(assert (forall ((a T@U) (b T@U) (y T@U) ) (!  (=> (|Set#IsMember| b y) (not (|Set#IsMember| (|Set#Difference| a b) y)))
 :pattern ( (|Set#Difference| a b) (|Set#IsMember| b y))
)))
(assert (= (Ctor DatatypeTypeType) 5))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@0 b@@0) o)  (and (|Set#IsMember| a@@0 o) (not (|Set#IsMember| b@@0 o))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@0 b@@0) o))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 6)))
(assert (forall ((m@@1 T@U) (s T@U) (u T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| (|Map#Subtract| m@@1 s)) u) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Subtract| m@@1 s)) u) (MapType0Select BoxType BoxType (|Map#Elements| m@@1) u)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Subtract| m@@1 s)) u))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.RemoveKeys$X@@0 T@U) (_module._default.RemoveKeys$Y@@0 T@U) ($reveal Bool) (|m#0@@0| T@U) (|xs#0@@0| T@U) ) (!  (=> (or (|_module.__default.RemoveKeys#canCall| _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 |m#0@@0| |xs#0@@0|) (and (< 0 $FunctionContextHeight) (and ($Is MapType |m#0@@0| (TMap _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0)) ($Is SetType |xs#0@@0| (TSet _module._default.RemoveKeys$X@@0))))) (and (and (and (and (forall ((|x#0| T@U) ) (!  (=> ($IsBox |x#0| _module._default.RemoveKeys$X@@0) (and (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@0|) |x#0|) (not (|Set#IsMember| |xs#0@@0| |x#0|))) (|Set#IsMember| (|Map#Domain| (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|)) |x#0|)) (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@0|) |x#0|) (not (|Set#IsMember| |xs#0@@0| |x#0|))) (= (MapType0Select BoxType BoxType (|Map#Elements| (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|)) |x#0|) (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@0|) |x#0|)))))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|)) |x#0|))
)) (forall ((|x#1| T@U) ) (!  (=> ($IsBox |x#1| _module._default.RemoveKeys$X@@0) (and (=> (|Set#IsMember| (|Map#Domain| (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|)) |x#1|) (|Set#IsMember| (|Map#Domain| |m#0@@0|) |x#1|)) (=> (|Set#IsMember| (|Map#Domain| (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|)) |x#1|) (not (|Set#IsMember| |xs#0@@0| |x#1|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|)) |x#1|))
))) (|Set#Equal| (|Map#Domain| (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|)) (|Set#Difference| (|Map#Domain| |m#0@@0|) |xs#0@@0|))) (forall ((|x#2| T@U) ) (!  (=> (and ($IsBox |x#2| _module._default.RemoveKeys$X@@0) (|Set#IsMember| (|Map#Domain| |m#0@@0|) |x#2|)) (= (|Set#IsMember| |xs#0@@0| |x#2|)  (not (|Set#IsMember| (|Map#Domain| (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|)) |x#2|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|)) |x#2|))
 :pattern ( (|Set#IsMember| |xs#0@@0| |x#2|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@0|) |x#2|))
))) ($Is MapType (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|) (TMap _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0))))
 :pattern ( (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@0 _module._default.RemoveKeys$Y@@0 $reveal |m#0@@0| |xs#0@@0|))
))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (|Set#Equal| a@@1 b@@1) (= a@@1 b@@1))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.RemoveKeys$X@@1 T@U) (_module._default.RemoveKeys$Y@@1 T@U) (|m#0@@1| T@U) (|xs#0@@1| T@U) ) (!  (=> (or (|_module.__default.RemoveKeys#canCall| _module._default.RemoveKeys$X@@1 _module._default.RemoveKeys$Y@@1 (Lit MapType |m#0@@1|) (Lit SetType |xs#0@@1|)) (and (< 0 $FunctionContextHeight) (and ($Is MapType |m#0@@1| (TMap _module._default.RemoveKeys$X@@1 _module._default.RemoveKeys$Y@@1)) ($Is SetType |xs#0@@1| (TSet _module._default.RemoveKeys$X@@1))))) (= (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@1 _module._default.RemoveKeys$Y@@1 true (Lit MapType |m#0@@1|) (Lit SetType |xs#0@@1|)) (|Map#Subtract| |m#0@@1| |xs#0@@1|)))
 :weight 3
 :pattern ( (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@1 _module._default.RemoveKeys$Y@@1 true (Lit MapType |m#0@@1|) (Lit SetType |xs#0@@1|)))
))))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@0) ($IsAllocBox bx@@0 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@0))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) (u@@0 T@U) ) (! (= (Inv0_TMap (TMap t@@1 u@@0)) t@@1)
 :pattern ( (TMap t@@1 u@@0))
)))
(assert (forall ((t@@2 T@U) (u@@1 T@U) ) (! (= (Inv1_TMap (TMap t@@2 u@@1)) u@@1)
 :pattern ( (TMap t@@2 u@@1))
)))
(assert (forall ((t@@3 T@U) (u@@2 T@U) ) (! (= (Tag (TMap t@@3 u@@2)) TagMap)
 :pattern ( (TMap t@@3 u@@2))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSet (TSet t@@4)) t@@4)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSet t@@5)) TagSet)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (t1@@0 T@U) (h@@1 T@U) ) (! (= ($IsAlloc MapType v@@3 (TMap t0@@2 t1@@0) h@@1) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@3) bx@@1) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@3) bx@@1) t1@@0 h@@1) ($IsAllocBox bx@@1 t0@@2 h@@1)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@3) bx@@1))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@3) bx@@1))
)))
 :pattern ( ($IsAlloc MapType v@@3 (TMap t0@@2 t1@@0) h@@1))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((u@@3 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@3))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@3))
)))
(assert (forall ((bx@@2 T@U) (s@@0 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@2 (TMap s@@0 t@@6)) (and (= ($Box MapType ($Unbox MapType bx@@2)) bx@@2) ($Is MapType ($Unbox MapType bx@@2) (TMap s@@0 t@@6))))
 :pattern ( ($IsBox bx@@2 (TMap s@@0 t@@6)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.RemoveKeys$X@@2 T@U) (_module._default.RemoveKeys$Y@@2 T@U) ($reveal@@0 Bool) (|m#0@@2| T@U) (|xs#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.RemoveKeys#canCall| _module._default.RemoveKeys$X@@2 _module._default.RemoveKeys$Y@@2 |m#0@@2| |xs#0@@2|) (and (< 0 $FunctionContextHeight) (and (and ($Is MapType |m#0@@2| (TMap _module._default.RemoveKeys$X@@2 _module._default.RemoveKeys$Y@@2)) ($IsAlloc MapType |m#0@@2| (TMap _module._default.RemoveKeys$X@@2 _module._default.RemoveKeys$Y@@2) $Heap)) (and ($Is SetType |xs#0@@2| (TSet _module._default.RemoveKeys$X@@2)) ($IsAlloc SetType |xs#0@@2| (TSet _module._default.RemoveKeys$X@@2) $Heap))))) ($IsGoodHeap $Heap)) ($IsAlloc MapType (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@2 _module._default.RemoveKeys$Y@@2 $reveal@@0 |m#0@@2| |xs#0@@2|) (TMap _module._default.RemoveKeys$X@@2 _module._default.RemoveKeys$Y@@2) $Heap))
 :pattern ( ($IsAlloc MapType (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@2 _module._default.RemoveKeys$Y@@2 $reveal@@0 |m#0@@2| |xs#0@@2|) (TMap _module._default.RemoveKeys$X@@2 _module._default.RemoveKeys$Y@@2) $Heap))
))))
(assert  (and (and (and (and (and (and (forall ((t0@@3 T@T) (t1@@1 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@1 t2 (MapType1Store t0@@3 t1@@1 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 9))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@5) k)))
 :pattern ( (|Map#Domain| m@@5))
)))
(assert (forall ((m@@6 T@U) ) (!  (or (= m@@6 |Map#Empty|) (exists ((v@@4 T@U) ) (|Set#IsMember| (|Map#Values| m@@6) v@@4)))
 :pattern ( (|Map#Values| m@@6))
)))
(assert (forall ((m@@7 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@7) item)  (and (|Set#IsMember| (|Map#Domain| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@7) item))
)))
(assert (forall ((m@@8 T@U) (v@@5 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@8) v@@5) (exists ((u@@4 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@8) u@@4) (= v@@5 (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@4)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@8) u@@4))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@4))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@8) v@@5))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@4 T@U) (t@@7 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@7)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@7))))
 :pattern ( ($IsBox bx@@4 (TSet t@@7)))
)))
(assert (forall ((m@@9 T@U) (s@@1 T@U) ) (! (= (|Map#Domain| (|Map#Subtract| m@@9 s@@1)) (|Set#Difference| (|Map#Domain| m@@9) s@@1))
 :pattern ( (|Map#Domain| (|Map#Subtract| m@@9 s@@1)))
)))
(assert (forall ((v@@6 T@U) (t0@@4 T@U) (t1@@2 T@U) ) (! (= ($Is MapType v@@6 (TMap t0@@4 t1@@2)) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@6) bx@@5) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@6) bx@@5) t1@@2) ($IsBox bx@@5 t0@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@6) bx@@5))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@6) bx@@5))
)))
 :pattern ( ($Is MapType v@@6 (TMap t0@@4 t1@@2)))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (= (|Set#Equal| a@@2 b@@2) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@2 o@@0) (|Set#IsMember| b@@2 o@@0))
 :pattern ( (|Set#IsMember| a@@2 o@@0))
 :pattern ( (|Set#IsMember| b@@2 o@@0))
)))
 :pattern ( (|Set#Equal| a@@2 b@@2))
)))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@0)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@0))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@0))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@0))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@1)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@1))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@1))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@1))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((m@@10 T@U) ) (!  (or (= m@@10 |Map#Empty|) (exists ((k@@0 T@U) (v@@7 T@U) ) (|Set#IsMember| (|Map#Items| m@@10) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@7)))))
 :pattern ( (|Map#Items| m@@10))
)))
(assert (forall ((v@@8 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (!  (=> ($Is MapType v@@8 (TMap t0@@5 t1@@3)) (and (and ($Is SetType (|Map#Domain| v@@8) (TSet t0@@5)) ($Is SetType (|Map#Values| v@@8) (TSet t1@@3))) ($Is SetType (|Map#Items| v@@8) (TSet (Tclass._System.Tuple2 t0@@5 t1@@3)))))
 :pattern ( ($Is MapType v@@8 (TMap t0@@5 t1@@3)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |m#0@@3| () T@U)
(declare-fun |x#8@0| () T@U)
(declare-fun |xs#0@@3| () T@U)
(declare-fun |m'#0| () T@U)
(declare-fun _module._default.RemoveKeys$X@@3 () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |x#7@0| () T@U)
(declare-fun |x#6@0| () T@U)
(declare-fun _module._default.RemoveKeys$Y@@3 () T@U)
(declare-fun reveal__module._default.RemoveKeys () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((anon11_correct true))
(let ((anon17_Else_correct  (=> (and (=> (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#8@0|) (= (|Set#IsMember| |xs#0@@3| |x#8@0|)  (not (|Set#IsMember| (|Map#Domain| |m'#0|) |x#8@0|)))) (= (ControlFlow 0 9) 7)) anon11_correct)))
(let ((anon17_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#8@0|) (=> (and (= (|Set#IsMember| |xs#0@@3| |x#8@0|)  (not (|Set#IsMember| (|Map#Domain| |m'#0|) |x#8@0|))) (= (ControlFlow 0 8) 7)) anon11_correct))))
(let ((anon8_correct  (=> (and (and (forall ((|x#4| T@U) ) (!  (=> ($IsBox |x#4| _module._default.RemoveKeys$X@@3) (and (=> (|Set#IsMember| (|Map#Domain| |m'#0|) |x#4|) (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#4|)) (=> (|Set#IsMember| (|Map#Domain| |m'#0|) |x#4|) (not (|Set#IsMember| |xs#0@@3| |x#4|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m'#0|) |x#4|))
)) (|Set#Equal| (|Map#Domain| |m'#0|) (|Set#Difference| (|Map#Domain| |m#0@@3|) |xs#0@@3|))) (and ($IsBox |x#8@0| _module._default.RemoveKeys$X@@3) ($IsAllocBox |x#8@0| _module._default.RemoveKeys$X@@3 $Heap@@0))) (and (=> (= (ControlFlow 0 10) 8) anon17_Then_correct) (=> (= (ControlFlow 0 10) 9) anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (and (=> (|Set#IsMember| (|Map#Domain| |m'#0|) |x#7@0|) (and (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#7@0|) (not (|Set#IsMember| |xs#0@@3| |x#7@0|)))) (= (ControlFlow 0 12) 10)) anon8_correct)))
(let ((anon16_Then_correct  (=> (and (and (|Set#IsMember| (|Map#Domain| |m'#0|) |x#7@0|) (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#7@0|)) (and (not (|Set#IsMember| |xs#0@@3| |x#7@0|)) (= (ControlFlow 0 11) 10))) anon8_correct)))
(let ((anon5_correct  (=> (forall ((|x#3| T@U) ) (!  (=> ($IsBox |x#3| _module._default.RemoveKeys$X@@3) (and (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#3|) (not (|Set#IsMember| |xs#0@@3| |x#3|))) (|Set#IsMember| (|Map#Domain| |m'#0|) |x#3|)) (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#3|) (not (|Set#IsMember| |xs#0@@3| |x#3|))) (= (MapType0Select BoxType BoxType (|Map#Elements| |m'#0|) |x#3|) (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@3|) |x#3|)))))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| |m'#0|) |x#3|))
)) (=> (and ($IsBox |x#7@0| _module._default.RemoveKeys$X@@3) ($IsAllocBox |x#7@0| _module._default.RemoveKeys$X@@3 $Heap@@0)) (and (=> (= (ControlFlow 0 13) 11) anon16_Then_correct) (=> (= (ControlFlow 0 13) 12) anon16_Else_correct))))))
(let ((anon15_Else_correct  (=> (and (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#6@0|) (not (|Set#IsMember| |xs#0@@3| |x#6@0|))) (and (|Set#IsMember| (|Map#Domain| |m'#0|) |x#6@0|) (= (MapType0Select BoxType BoxType (|Map#Elements| |m'#0|) |x#6@0|) (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@3|) |x#6@0|)))) (= (ControlFlow 0 17) 13)) anon5_correct)))
(let ((anon15_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#6@0|) (=> (and (not (|Set#IsMember| |xs#0@@3| |x#6@0|)) (|Set#IsMember| (|Map#Domain| |m'#0|) |x#6@0|)) (and (=> (= (ControlFlow 0 14) (- 0 16)) (|Set#IsMember| (|Map#Domain| |m'#0|) |x#6@0|)) (=> (|Set#IsMember| (|Map#Domain| |m'#0|) |x#6@0|) (and (=> (= (ControlFlow 0 14) (- 0 15)) (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#6@0|)) (=> (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#6@0|) (=> (and (= (MapType0Select BoxType BoxType (|Map#Elements| |m'#0|) |x#6@0|) (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@3|) |x#6@0|)) (= (ControlFlow 0 14) 13)) anon5_correct)))))))))
(let ((anon14_Then_correct  (=> (and (and ($Is MapType (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@3 _module._default.RemoveKeys$Y@@3 reveal__module._default.RemoveKeys |m#0@@3| |xs#0@@3|) (TMap _module._default.RemoveKeys$X@@3 _module._default.RemoveKeys$Y@@3)) ($Is MapType |m'#0| (TMap _module._default.RemoveKeys$X@@3 _module._default.RemoveKeys$Y@@3))) (and ($IsBox |x#6@0| _module._default.RemoveKeys$X@@3) ($IsAllocBox |x#6@0| _module._default.RemoveKeys$X@@3 $Heap@@0))) (and (=> (= (ControlFlow 0 18) 14) anon15_Then_correct) (=> (= (ControlFlow 0 18) 17) anon15_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 5)) (forall ((|x#3@@0| T@U) ) (!  (=> ($IsBox |x#3@@0| _module._default.RemoveKeys$X@@3) (and (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#3@@0|) (not (|Set#IsMember| |xs#0@@3| |x#3@@0|))) (|Set#IsMember| (|Map#Domain| |m'#0|) |x#3@@0|)) (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#3@@0|) (not (|Set#IsMember| |xs#0@@3| |x#3@@0|))) (= (MapType0Select BoxType BoxType (|Map#Elements| |m'#0|) |x#3@@0|) (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@3|) |x#3@@0|)))))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| |m'#0|) |x#3@@0|))
))) (=> (forall ((|x#3@@1| T@U) ) (!  (=> ($IsBox |x#3@@1| _module._default.RemoveKeys$X@@3) (and (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#3@@1|) (not (|Set#IsMember| |xs#0@@3| |x#3@@1|))) (|Set#IsMember| (|Map#Domain| |m'#0|) |x#3@@1|)) (=> (and (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#3@@1|) (not (|Set#IsMember| |xs#0@@3| |x#3@@1|))) (= (MapType0Select BoxType BoxType (|Map#Elements| |m'#0|) |x#3@@1|) (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@3|) |x#3@@1|)))))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| |m'#0|) |x#3@@1|))
)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall ((|x#4@@0| T@U) ) (!  (=> ($IsBox |x#4@@0| _module._default.RemoveKeys$X@@3) (and (=> (|Set#IsMember| (|Map#Domain| |m'#0|) |x#4@@0|) (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#4@@0|)) (=> (|Set#IsMember| (|Map#Domain| |m'#0|) |x#4@@0|) (not (|Set#IsMember| |xs#0@@3| |x#4@@0|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m'#0|) |x#4@@0|))
))) (=> (forall ((|x#4@@1| T@U) ) (!  (=> ($IsBox |x#4@@1| _module._default.RemoveKeys$X@@3) (and (=> (|Set#IsMember| (|Map#Domain| |m'#0|) |x#4@@1|) (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#4@@1|)) (=> (|Set#IsMember| (|Map#Domain| |m'#0|) |x#4@@1|) (not (|Set#IsMember| |xs#0@@3| |x#4@@1|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m'#0|) |x#4@@1|))
)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (|Set#Equal| (|Map#Domain| |m'#0|) (|Set#Difference| (|Map#Domain| |m#0@@3|) |xs#0@@3|))) (=> (|Set#Equal| (|Map#Domain| |m'#0|) (|Set#Difference| (|Map#Domain| |m#0@@3|) |xs#0@@3|)) (=> (= (ControlFlow 0 2) (- 0 1)) (forall ((|x#5| T@U) ) (!  (=> (and ($IsBox |x#5| _module._default.RemoveKeys$X@@3) (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#5|)) (= (|Set#IsMember| |xs#0@@3| |x#5|)  (not (|Set#IsMember| (|Map#Domain| |m'#0|) |x#5|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m'#0|) |x#5|))
 :pattern ( (|Set#IsMember| |xs#0@@3| |x#5|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#5|))
)))))))))))
(let ((anon14_Else_correct  (=> (and (and (= (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@3 _module._default.RemoveKeys$Y@@3 reveal__module._default.RemoveKeys |m#0@@3| |xs#0@@3|) (|Map#Subtract| |m#0@@3| |xs#0@@3|)) ($Is MapType (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@3 _module._default.RemoveKeys$Y@@3 reveal__module._default.RemoveKeys |m#0@@3| |xs#0@@3|) (TMap _module._default.RemoveKeys$X@@3 _module._default.RemoveKeys$Y@@3))) (and (= (_module.__default.RemoveKeys _module._default.RemoveKeys$X@@3 _module._default.RemoveKeys$Y@@3 reveal__module._default.RemoveKeys |m#0@@3| |xs#0@@3|) |m'#0|) (= (ControlFlow 0 6) 2))) GeneratedUnifiedExit_correct)))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (and (=> (= (ControlFlow 0 19) 18) anon14_Then_correct) (=> (= (ControlFlow 0 19) 6) anon14_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and ($Is MapType |m#0@@3| (TMap _module._default.RemoveKeys$X@@3 _module._default.RemoveKeys$Y@@3)) ($Is SetType |xs#0@@3| (TSet _module._default.RemoveKeys$X@@3))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 20) 19))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
