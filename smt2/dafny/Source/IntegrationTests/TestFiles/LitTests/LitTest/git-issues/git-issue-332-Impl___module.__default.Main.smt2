(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U T@U) Bool)
(declare-fun $generated@@20 () T@T)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@T T@T) T@T)
(declare-fun $generated@@34 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) Bool)
(declare-fun $generated@@60 (Int) Int)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@U) T@U)
(declare-fun $generated@@68 (T@U T@U T@U) Bool)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@122 (T@U) T@U)
(declare-fun $generated@@123 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@3 $generated@@20) 3))
(assert (forall (($generated@@24 T@U) ) (! (= ($generated@@19 $generated@@20 $generated@@24 $generated@@21)  (or (= $generated@@24 $generated@@22) (= ($generated@@23 $generated@@24) $generated@@21)))
 :pattern ( ($generated@@19 $generated@@20 $generated@@24 $generated@@21))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! (= ($generated@@25 $generated@@20 $generated@@27 $generated@@26 $generated@@28) ($generated@@25 $generated@@20 $generated@@27 $generated@@21 $generated@@28))
 :pattern ( ($generated@@25 $generated@@20 $generated@@27 $generated@@26 $generated@@28))
 :pattern ( ($generated@@25 $generated@@20 $generated@@27 $generated@@21 $generated@@28))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@30 $generated@@37 $generated@@38 ($generated@@34 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@41) $generated@@39)
 :weight 0
)) (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (or (= $generated@@46 $generated@@47) (= ($generated@@30 $generated@@42 $generated@@43 ($generated@@34 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@47) ($generated@@30 $generated@@42 $generated@@43 $generated@@45 $generated@@47)))
 :weight 0
))) (= ($generated@@3 $generated@@31) 4)) (= ($generated@@3 $generated@@32) 5)) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (= ($generated@@3 ($generated@@33 $generated@@48 $generated@@49)) 6))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@35 ($generated@@33 $generated@@50 $generated@@51)) $generated@@50)
 :pattern ( ($generated@@33 $generated@@50 $generated@@51))
))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@36 ($generated@@33 $generated@@52 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@33 $generated@@52 $generated@@53))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@25 $generated@@20 $generated@@54 $generated@@21 $generated@@55)  (or (= $generated@@54 $generated@@22) ($generated@@8 ($generated@@29 $generated@@4 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@55 $generated@@54) $generated)))))
 :pattern ( ($generated@@25 $generated@@20 $generated@@54 $generated@@21 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (!  (=> ($generated@@56 $generated@@57 $generated@@58) (forall (($generated@@59 T@U) ) (!  (=> ($generated@@8 ($generated@@29 $generated@@4 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@57 $generated@@59) $generated))) ($generated@@8 ($generated@@29 $generated@@4 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@58 $generated@@59) $generated))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@58 $generated@@59) $generated))
)))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@61 Int) ) (! (= ($generated@@60 $generated@@61) $generated@@61)
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 $generated@@63) $generated@@63)
 :pattern ( ($generated@@62 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@65 $generated@@67 ($generated@@29 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@29 $generated@@67 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@68 ($generated@@65 $generated@@72 $generated@@69) $generated@@70 $generated@@71) ($generated@@25 $generated@@72 $generated@@69 $generated@@70 $generated@@71))
 :pattern ( ($generated@@68 ($generated@@65 $generated@@72 $generated@@69) $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (!  (=> ($generated@@56 $generated@@73 $generated@@74) (=> ($generated@@68 $generated@@75 $generated@@76 $generated@@73) ($generated@@68 $generated@@75 $generated@@76 $generated@@74)))
 :pattern ( ($generated@@56 $generated@@73 $generated@@74) ($generated@@68 $generated@@75 $generated@@76 $generated@@73))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (!  (=> ($generated@@56 $generated@@77 $generated@@78) (=> ($generated@@25 $generated@@81 $generated@@79 $generated@@80 $generated@@77) ($generated@@25 $generated@@81 $generated@@79 $generated@@80 $generated@@78)))
 :pattern ( ($generated@@56 $generated@@77 $generated@@78) ($generated@@25 $generated@@81 $generated@@79 $generated@@80 $generated@@77))
)))
(assert (forall (($generated@@82 T@U) ) (! (= ($generated@@19 $generated@@20 $generated@@82 $generated@@26)  (and ($generated@@19 $generated@@20 $generated@@82 $generated@@21) (or (not (= $generated@@82 $generated@@22)) (not true))))
 :pattern ( ($generated@@19 $generated@@20 $generated@@82 $generated@@26))
 :pattern ( ($generated@@19 $generated@@20 $generated@@82 $generated@@21))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> (or (not (= $generated@@83 $generated@@85)) (not true)) (=> (and ($generated@@56 $generated@@83 $generated@@84) ($generated@@56 $generated@@84 $generated@@85)) ($generated@@56 $generated@@83 $generated@@85)))
 :pattern ( ($generated@@56 $generated@@83 $generated@@84) ($generated@@56 $generated@@84 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@29 $generated@@87 ($generated@@65 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@65 $generated@@87 $generated@@86))
)))
(assert  (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@88 $generated@@91 $generated@@92 $generated@@93 ($generated@@90 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@90 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@88 $generated@@107 $generated@@108 $generated@@109 ($generated@@90 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@8 ($generated@@88 $generated@@20 $generated@@31 $generated@@4 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@8 ($generated@@29 $generated@@4 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@88 $generated@@20 $generated@@31 $generated@@4 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (= ($generated@@122 $generated@@26) $generated@@0))
(assert (= ($generated@@123 $generated@@26) $generated@@2))
(assert (= ($generated@@122 $generated@@21) $generated@@1))
(assert (= ($generated@@123 $generated@@21) $generated@@2))
(assert (forall (($generated@@124 Int) ) (! (= ($generated@@65 $generated@@5 ($generated@@9 ($generated@@60 $generated@@124))) ($generated@@62 $generated@@32 ($generated@@65 $generated@@5 ($generated@@9 $generated@@124))))
 :pattern ( ($generated@@65 $generated@@5 ($generated@@9 ($generated@@60 $generated@@124))))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@T) ) (! (= ($generated@@65 $generated@@126 ($generated@@62 $generated@@126 $generated@@125)) ($generated@@62 $generated@@32 ($generated@@65 $generated@@126 $generated@@125)))
 :pattern ( ($generated@@65 $generated@@126 ($generated@@62 $generated@@126 $generated@@125)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 (T@U) Bool)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () Bool)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@138  (=> (and (= $generated@@127 ($generated@@89 $generated@@22 $generated@@128 $generated false)) (= $generated@@129 ($generated@@60 15))) (=> (and (and (or (not (= $generated@@130 $generated@@22)) (not true)) (and ($generated@@19 $generated@@20 $generated@@130 $generated@@26) ($generated@@25 $generated@@20 $generated@@130 $generated@@26 $generated@@128))) (and ($generated@@131 $generated@@132) ($generated@@133 $generated@@132))) (=> (and (and (and (or (not (= $generated@@134 $generated@@22)) (not true)) (and ($generated@@19 $generated@@20 $generated@@134 $generated@@26) ($generated@@25 $generated@@20 $generated@@134 $generated@@26 $generated@@132))) (not ($generated@@8 ($generated@@29 $generated@@4 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@128 $generated@@134) $generated))))) (and (forall (($generated@@139 T@U) ) (!  (=> (and (or (not (= $generated@@139 $generated@@22)) (not true)) ($generated@@8 ($generated@@29 $generated@@4 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@128 $generated@@139) $generated)))) (= ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@132 $generated@@139) ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@128 $generated@@139)))
 :pattern ( ($generated@@30 $generated@@20 ($generated@@33 $generated@@31 $generated@@32) $generated@@132 $generated@@139))
)) ($generated@@56 $generated@@128 $generated@@132))) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (or (not (= $generated@@134 $generated@@22)) (not true)))))))))
(let (($generated@@140  (=> (and ($generated@@131 $generated@@128) ($generated@@133 $generated@@128)) (=> (and (and (=> $generated@@135 (and ($generated@@19 $generated@@20 $generated@@136 $generated@@26) ($generated@@25 $generated@@20 $generated@@136 $generated@@26 $generated@@128))) true) (and (= 0 $generated@@137) (= (ControlFlow 0 4) 2))) $generated@@138))))
$generated@@140)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
