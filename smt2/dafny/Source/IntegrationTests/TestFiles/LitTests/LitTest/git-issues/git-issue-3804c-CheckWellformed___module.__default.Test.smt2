(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Test (Bool) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.__default.Test#canCall| (Bool) Bool)
(declare-fun _module.__default.P (Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc)
)
(assert (= (Tag TInt) TagInt))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|x#0| T@U) ) (!  (=> (or (|_module.__default.Test#canCall| (U_2_bool (Lit boolType |x#0|))) (and (< 1 $FunctionContextHeight) (ite (U_2_bool |x#0|) (_module.__default.P (LitInt 1)) (_module.__default.P (LitInt 2))))) (= (_module.__default.Test (U_2_bool (Lit boolType |x#0|))) (let ((|x#2| (ite (= (U_2_bool (Lit boolType |x#0|)) (U_2_bool (Lit boolType (bool_2_U true)))) 1 2)))
|x#2|)))
 :qid |gitissue3804cdfy.6:15|
 :weight 3
 :skolemid |484|
 :pattern ( (_module.__default.Test (U_2_bool (Lit boolType |x#0|))))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :qid |DafnyPreludebpl.108:29|
 :skolemid |17|
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :qid |DafnyPreludebpl.102:29|
 :skolemid |15|
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :qid |DafnyPreludebpl.168:18|
 :skolemid |26|
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|x#0@@0| Bool) ) (!  (=> (or (|_module.__default.Test#canCall| |x#0@@0|) (and (< 1 $FunctionContextHeight) (ite |x#0@@0| (_module.__default.P (LitInt 1)) (_module.__default.P (LitInt 2))))) (= (_module.__default.Test |x#0@@0|) (let ((|x#1| (ite (= |x#0@@0| (U_2_bool (Lit boolType (bool_2_U true)))) 1 2)))
|x#1|)))
 :qid |gitissue3804cdfy.6:15|
 :skolemid |483|
 :pattern ( (_module.__default.Test |x#0@@0|))
))))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :qid |DafnyPreludebpl.167:18|
 :skolemid |25|
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :qid |mapAx0:MapType0Select|
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (! (= (Ctor (MapType1Type arg0@@2 arg1)) 6)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :qid |DafnyPreludebpl.156:1|
 :skolemid |504|
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :qid |DafnyPreludebpl.109:15|
 :skolemid |18|
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@7)) (Lit BoxType ($Box T@@2 x@@7)))
 :qid |DafnyPreludebpl.103:18|
 :skolemid |16|
 :pattern ( ($Box T@@2 (Lit T@@2 x@@7)))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :qid |DafnyPreludebpl.289:14|
 :skolemid |61|
 :pattern ( ($IsAlloc intType v TInt h))
)))
(assert (forall ((v@@0 T@U) ) (! ($Is intType v@@0 TInt)
 :qid |DafnyPreludebpl.228:14|
 :skolemid |40|
 :pattern ( ($Is intType v@@0 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x#0@@1| () Bool)
(declare-fun |_module.__default.P#canCall| (Int) Bool)
(declare-fun |##i#2@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |##i#4@0| () Int)
(declare-fun |##i#6@0| () Int)
(declare-fun |##i#8@0| () Int)
(declare-fun |##i#10@0| () Int)
(declare-fun |##i#12@0| () Int)
(declare-fun |##i#14@0| () Int)
(declare-fun |x#Z#0@0| () Int)
(declare-fun |let#0#0#0| () Int)
(declare-fun |##i#11@0| () Int)
(declare-fun |##i#9@0| () Int)
(declare-fun |##i#7@0| () Int)
(declare-fun |##i#17@0| () Int)
(declare-fun |##i#16@0| () Int)
(declare-fun |##i#15@0| () Int)
(declare-fun |##i#13@0| () Int)
(declare-fun |##i#5@0| () Int)
(declare-fun |##i#3@0| () Int)
(declare-fun |##i#1@0| () Int)
(declare-fun |##i#0@0| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-info :boogie-vc-id CheckWellformed$$_module.__default.Test)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 62) (let ((anon63_Else_correct true))
(let ((anon63_Then_correct  (=> (= (ControlFlow 0 53) (- 0 52)) (=> |x#0@@1| (_module.__default.P (LitInt 1))))))
(let ((anon9_correct  (=> (=> |x#0@@1| (|_module.__default.P#canCall| (LitInt 1))) (and (=> (= (ControlFlow 0 55) 53) anon63_Then_correct) (=> (= (ControlFlow 0 55) 54) anon63_Else_correct)))))
(let ((anon62_Else_correct  (=> (and (not |x#0@@1|) (= (ControlFlow 0 57) 55)) anon9_correct)))
(let ((anon62_Then_correct  (=> |x#0@@1| (=> (and (and (= |##i#2@0| (LitInt 1)) ($IsAlloc intType (int_2_U |##i#2@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 1)) (= (ControlFlow 0 56) 55))) anon9_correct))))
(let ((anon61_Then_correct  (=> (ite |x#0@@1| (_module.__default.P (LitInt 1)) (_module.__default.P (LitInt 2))) (and (=> (= (ControlFlow 0 58) 56) anon62_Then_correct) (=> (= (ControlFlow 0 58) 57) anon62_Else_correct)))))
(let ((anon68_Else_correct true))
(let ((anon68_Then_correct  (=> (= (ControlFlow 0 43) (- 0 42)) (=> (not |x#0@@1|) (_module.__default.P (LitInt 2))))))
(let ((anon19_correct  (=> (=> (not |x#0@@1|) (|_module.__default.P#canCall| (LitInt 2))) (and (=> (= (ControlFlow 0 45) 43) anon68_Then_correct) (=> (= (ControlFlow 0 45) 44) anon68_Else_correct)))))
(let ((anon67_Else_correct  (=> (and |x#0@@1| (= (ControlFlow 0 47) 45)) anon19_correct)))
(let ((anon67_Then_correct  (=> (not |x#0@@1|) (=> (and (and (= |##i#4@0| (LitInt 2)) ($IsAlloc intType (int_2_U |##i#4@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 2)) (= (ControlFlow 0 46) 45))) anon19_correct))))
(let ((anon66_Then_correct  (=> (ite |x#0@@1| (_module.__default.P (LitInt 1)) (_module.__default.P (LitInt 2))) (and (=> (= (ControlFlow 0 48) 46) anon67_Then_correct) (=> (= (ControlFlow 0 48) 47) anon67_Else_correct)))))
(let ((anon73_Else_correct true))
(let ((anon73_Then_correct  (=> (= (ControlFlow 0 35) (- 0 34)) (_module.__default.P (LitInt 1)))))
(let ((anon72_Then_correct  (=> (=> |x#0@@1| (_module.__default.P (LitInt 1))) (=> (and (and (= |##i#6@0| (LitInt 1)) ($IsAlloc intType (int_2_U |##i#6@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 1)) (|_module.__default.P#canCall| (LitInt 1)))) (and (=> (= (ControlFlow 0 37) 35) anon73_Then_correct) (=> (= (ControlFlow 0 37) 36) anon73_Else_correct))))))
(let ((anon76_Else_correct true))
(let ((anon76_Then_correct  (=> (= (ControlFlow 0 30) (- 0 29)) (_module.__default.P (LitInt 1)))))
(let ((anon75_Then_correct  (=> (=> (not |x#0@@1|) (_module.__default.P (LitInt 2))) (=> (and (and (= |##i#8@0| (LitInt 1)) ($IsAlloc intType (int_2_U |##i#8@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 1)) (|_module.__default.P#canCall| (LitInt 1)))) (and (=> (= (ControlFlow 0 32) 30) anon76_Then_correct) (=> (= (ControlFlow 0 32) 31) anon76_Else_correct))))))
(let ((anon78_Then_correct  (=> (and (_module.__default.P (LitInt 1)) (= |##i#10@0| (LitInt 1))) (=> (and (and ($IsAlloc intType (int_2_U |##i#10@0|) TInt $Heap) (|_module.__default.P#canCall| (LitInt 1))) (and (|_module.__default.P#canCall| (LitInt 1)) (= (ControlFlow 0 26) (- 0 25)))) (_module.__default.P (LitInt 1))))))
(let ((anon77_Then_correct true))
(let ((anon74_Then_correct true))
(let ((anon80_Else_correct true))
(let ((anon80_Then_correct  (=> (= (ControlFlow 0 18) (- 0 17)) (_module.__default.P (LitInt 2)))))
(let ((anon79_Then_correct  (=> (=> (not |x#0@@1|) (_module.__default.P (LitInt 2))) (=> (and (and (= |##i#12@0| (LitInt 2)) ($IsAlloc intType (int_2_U |##i#12@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 2)) (|_module.__default.P#canCall| (LitInt 2)))) (and (=> (= (ControlFlow 0 20) 18) anon80_Then_correct) (=> (= (ControlFlow 0 20) 19) anon80_Else_correct))))))
(let ((anon83_Else_correct true))
(let ((anon83_Then_correct  (=> (= (ControlFlow 0 13) (- 0 12)) (_module.__default.P (LitInt 2)))))
(let ((anon82_Then_correct  (=> (=> |x#0@@1| (_module.__default.P (LitInt 1))) (=> (and (and (= |##i#14@0| (LitInt 2)) ($IsAlloc intType (int_2_U |##i#14@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 2)) (|_module.__default.P#canCall| (LitInt 2)))) (and (=> (= (ControlFlow 0 15) 13) anon83_Then_correct) (=> (= (ControlFlow 0 15) 14) anon83_Else_correct))))))
(let ((anon57_correct  (=> (= |x#Z#0@0| |let#0#0#0|) (=> (and (and ($IsAlloc intType (int_2_U |x#Z#0@0|) TInt $Heap) (|_module.__default.P#canCall| |x#Z#0@0|)) (and (|_module.__default.P#canCall| |x#Z#0@0|) (= (ControlFlow 0 9) (- 0 8)))) (_module.__default.P |x#Z#0@0|)))))
(let ((anon78_Else_correct  (=> (and (and (and (= |##i#11@0| (LitInt 1)) ($IsAlloc intType (int_2_U |##i#11@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 1)) (|_module.__default.P#canCall| (LitInt 1)))) (and (and (_module.__default.P (LitInt 1)) (= |let#0#0#0| (LitInt 1))) (and ($Is intType (int_2_U |let#0#0#0|) TInt) (= (ControlFlow 0 27) 9)))) anon57_correct)))
(let ((anon75_Else_correct  (=> (and (and (= |##i#9@0| (LitInt 1)) ($IsAlloc intType (int_2_U |##i#9@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 1)) (|_module.__default.P#canCall| (LitInt 1)))) (and (and (=> (= (ControlFlow 0 28) 24) anon77_Then_correct) (=> (= (ControlFlow 0 28) 26) anon78_Then_correct)) (=> (= (ControlFlow 0 28) 27) anon78_Else_correct)))))
(let ((anon72_Else_correct  (=> (and (and (= |##i#7@0| (LitInt 1)) ($IsAlloc intType (int_2_U |##i#7@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 1)) (|_module.__default.P#canCall| (LitInt 1)))) (and (and (=> (= (ControlFlow 0 33) 23) anon74_Then_correct) (=> (= (ControlFlow 0 33) 32) anon75_Then_correct)) (=> (= (ControlFlow 0 33) 28) anon75_Else_correct)))))
(let ((anon71_Then_correct  (=> (= |x#0@@1| (U_2_bool (Lit boolType (bool_2_U true)))) (and (=> (= (ControlFlow 0 38) 37) anon72_Then_correct) (=> (= (ControlFlow 0 38) 33) anon72_Else_correct)))))
(let ((anon85_Else_correct  (=> (and (and (and (= |##i#17@0| (LitInt 2)) ($IsAlloc intType (int_2_U |##i#17@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 2)) (|_module.__default.P#canCall| (LitInt 2)))) (and (and (_module.__default.P (LitInt 2)) (= |let#0#0#0| (LitInt 2))) (and ($Is intType (int_2_U |let#0#0#0|) TInt) (= (ControlFlow 0 10) 9)))) anon57_correct)))
(let ((anon85_Then_correct  (=> (and (_module.__default.P (LitInt 2)) (= |##i#16@0| (LitInt 2))) (=> (and (and ($IsAlloc intType (int_2_U |##i#16@0|) TInt $Heap) (|_module.__default.P#canCall| (LitInt 2))) (and (|_module.__default.P#canCall| (LitInt 2)) (= (ControlFlow 0 7) (- 0 6)))) (_module.__default.P (LitInt 2))))))
(let ((anon84_Then_correct true))
(let ((anon82_Else_correct  (=> (and (and (= |##i#15@0| (LitInt 2)) ($IsAlloc intType (int_2_U |##i#15@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 2)) (|_module.__default.P#canCall| (LitInt 2)))) (and (and (=> (= (ControlFlow 0 11) 5) anon84_Then_correct) (=> (= (ControlFlow 0 11) 7) anon85_Then_correct)) (=> (= (ControlFlow 0 11) 10) anon85_Else_correct)))))
(let ((anon81_Then_correct true))
(let ((anon79_Else_correct  (=> (and (and (= |##i#13@0| (LitInt 2)) ($IsAlloc intType (int_2_U |##i#13@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 2)) (|_module.__default.P#canCall| (LitInt 2)))) (and (and (=> (= (ControlFlow 0 16) 4) anon81_Then_correct) (=> (= (ControlFlow 0 16) 15) anon82_Then_correct)) (=> (= (ControlFlow 0 16) 11) anon82_Else_correct)))))
(let ((anon71_Else_correct  (=> (= |x#0@@1|  (not (U_2_bool (Lit boolType (bool_2_U true))))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (= |x#0@@1| (U_2_bool (Lit boolType (bool_2_U false))))) (=> (= |x#0@@1| (U_2_bool (Lit boolType (bool_2_U false)))) (and (=> (= (ControlFlow 0 21) 20) anon79_Then_correct) (=> (= (ControlFlow 0 21) 16) anon79_Else_correct)))))))
(let ((anon70_Then_correct true))
(let ((anon24_correct  (=> (=> (not |x#0@@1|) (|_module.__default.P#canCall| (LitInt 2))) (and (and (=> (= (ControlFlow 0 39) 3) anon70_Then_correct) (=> (= (ControlFlow 0 39) 38) anon71_Then_correct)) (=> (= (ControlFlow 0 39) 21) anon71_Else_correct)))))
(let ((anon69_Else_correct  (=> (and |x#0@@1| (= (ControlFlow 0 41) 39)) anon24_correct)))
(let ((anon69_Then_correct  (=> (not |x#0@@1|) (=> (and (and (= |##i#5@0| (LitInt 2)) ($IsAlloc intType (int_2_U |##i#5@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 2)) (= (ControlFlow 0 40) 39))) anon24_correct))))
(let ((anon65_Then_correct true))
(let ((anon14_correct  (=> (=> |x#0@@1| (|_module.__default.P#canCall| (LitInt 1))) (and (and (and (=> (= (ControlFlow 0 49) 2) anon65_Then_correct) (=> (= (ControlFlow 0 49) 48) anon66_Then_correct)) (=> (= (ControlFlow 0 49) 40) anon69_Then_correct)) (=> (= (ControlFlow 0 49) 41) anon69_Else_correct)))))
(let ((anon64_Else_correct  (=> (and (not |x#0@@1|) (= (ControlFlow 0 51) 49)) anon14_correct)))
(let ((anon64_Then_correct  (=> |x#0@@1| (=> (and (and (= |##i#3@0| (LitInt 1)) ($IsAlloc intType (int_2_U |##i#3@0|) TInt $Heap)) (and (|_module.__default.P#canCall| (LitInt 1)) (= (ControlFlow 0 50) 49))) anon14_correct))))
(let ((anon60_Then_correct true))
(let ((anon59_Else_correct  (=> (and (and (not |x#0@@1|) (= |##i#1@0| (LitInt 2))) (and ($IsAlloc intType (int_2_U |##i#1@0|) TInt $Heap) (|_module.__default.P#canCall| (LitInt 2)))) (and (and (and (=> (= (ControlFlow 0 60) 1) anon60_Then_correct) (=> (= (ControlFlow 0 60) 58) anon61_Then_correct)) (=> (= (ControlFlow 0 60) 50) anon64_Then_correct)) (=> (= (ControlFlow 0 60) 51) anon64_Else_correct)))))
(let ((anon59_Then_correct  (=> (and (and |x#0@@1| (= |##i#0@0| (LitInt 1))) (and ($IsAlloc intType (int_2_U |##i#0@0|) TInt $Heap) (|_module.__default.P#canCall| (LitInt 1)))) (and (and (and (=> (= (ControlFlow 0 59) 1) anon60_Then_correct) (=> (= (ControlFlow 0 59) 58) anon61_Then_correct)) (=> (= (ControlFlow 0 59) 50) anon64_Then_correct)) (=> (= (ControlFlow 0 59) 51) anon64_Else_correct)))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 61) 59) anon59_Then_correct) (=> (= (ControlFlow 0 61) 60) anon59_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 62) 61))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 13) (- 12))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 30) (- 29))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
