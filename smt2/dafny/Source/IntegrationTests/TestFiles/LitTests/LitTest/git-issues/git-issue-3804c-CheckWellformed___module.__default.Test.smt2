(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (Bool) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@22 (Bool) Bool)
(declare-fun $generated@@23 (Int) Bool)
(declare-fun $generated@@24 (Int) Int)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@42 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T) T@T)
(declare-fun $generated@@45 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@100 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@103 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@25 T@U) ) (!  (=> (or ($generated@@22 ($generated@@7 ($generated@@21 $generated@@3 $generated@@25))) (and (< 1 $generated@@19) (ite ($generated@@7 $generated@@25) ($generated@@23 ($generated@@24 1)) ($generated@@23 ($generated@@24 2))))) (= ($generated@@20 ($generated@@7 ($generated@@21 $generated@@3 $generated@@25))) (let (($generated@@26 (ite (= ($generated@@7 ($generated@@21 $generated@@3 $generated@@25)) ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) 1 2)))
$generated@@26)))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@7 ($generated@@21 $generated@@3 $generated@@25))))
))))
(assert (forall (($generated@@27 Int) ) (! (= ($generated@@24 $generated@@27) $generated@@27)
 :pattern ( ($generated@@24 $generated@@27))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@21 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@21 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 ($generated@@30 $generated@@33 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@30 $generated@@33 $generated@@32))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@34 Bool) ) (!  (=> (or ($generated@@22 $generated@@34) (and (< 1 $generated@@19) (ite $generated@@34 ($generated@@23 ($generated@@24 1)) ($generated@@23 ($generated@@24 2))))) (= ($generated@@20 $generated@@34) (let (($generated@@35 (ite (= $generated@@34 ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) 1 2)))
$generated@@35)))
 :pattern ( ($generated@@20 $generated@@34))
))))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@30 $generated@@37 ($generated@@31 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@31 $generated@@37 $generated@@36))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@38 $generated@@49 $generated@@50 $generated@@51 ($generated@@45 $generated@@49 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@55 $generated@@52) $generated@@54 $generated@@55) $generated@@52)
 :weight 0
)) (and (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (or (= $generated@@61 $generated@@63) (= ($generated@@38 $generated@@56 $generated@@57 $generated@@58 ($generated@@45 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@62 $generated@@59) $generated@@63 $generated@@64) ($generated@@38 $generated@@56 $generated@@57 $generated@@58 $generated@@60 $generated@@63 $generated@@64)))
 :weight 0
)) (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@71 $generated@@73) (= ($generated@@38 $generated@@65 $generated@@66 $generated@@67 ($generated@@45 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@72 $generated@@73) ($generated@@38 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@72 $generated@@73)))
 :weight 0
)))) (= ($generated@@2 $generated@@39) 3)) (= ($generated@@2 $generated@@40) 4)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@42 $generated@@74 $generated@@75 ($generated@@46 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@76) $generated@@78) $generated@@76)
 :weight 0
))) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@83 $generated@@84) (= ($generated@@42 $generated@@79 $generated@@80 ($generated@@46 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@81) $generated@@84) ($generated@@42 $generated@@79 $generated@@80 $generated@@82 $generated@@84)))
 :weight 0
))) (= ($generated@@2 $generated@@43) 5)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ) (= ($generated@@2 ($generated@@44 $generated@@85 $generated@@86)) 6))) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@87 $generated@@88)) $generated@@87)
 :pattern ( ($generated@@44 $generated@@87 $generated@@88))
))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@48 ($generated@@44 $generated@@89 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@44 $generated@@89 $generated@@90))
))))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 Bool) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@7 ($generated@@38 $generated@@39 $generated@@40 $generated@@3 ($generated@@41 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))  (=> (and (or (not (= $generated@@95 $generated@@91)) (not true)) ($generated@@7 ($generated@@30 $generated@@3 ($generated@@42 $generated@@40 $generated@@43 ($generated@@42 $generated@@39 ($generated@@44 $generated@@40 $generated@@43) $generated@@92 $generated@@95) $generated@@93)))) $generated@@94))
 :pattern ( ($generated@@38 $generated@@39 $generated@@40 $generated@@3 ($generated@@41 $generated@@91 $generated@@92 $generated@@93 $generated@@94) $generated@@95 $generated@@96))
)))
(assert (forall (($generated@@97 Int) ) (! (= ($generated@@31 $generated@@4 ($generated@@8 ($generated@@24 $generated@@97))) ($generated@@21 $generated@@43 ($generated@@31 $generated@@4 ($generated@@8 $generated@@97))))
 :pattern ( ($generated@@31 $generated@@4 ($generated@@8 ($generated@@24 $generated@@97))))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@31 $generated@@99 ($generated@@21 $generated@@99 $generated@@98)) ($generated@@21 $generated@@43 ($generated@@31 $generated@@99 $generated@@98)))
 :pattern ( ($generated@@31 $generated@@99 ($generated@@21 $generated@@99 $generated@@98)))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ) (! ($generated@@100 $generated@@4 $generated@@102 $generated $generated@@101)
 :pattern ( ($generated@@100 $generated@@4 $generated@@102 $generated $generated@@101))
)))
(assert (forall (($generated@@104 T@U) ) (! ($generated@@103 $generated@@4 $generated@@104 $generated)
 :pattern ( ($generated@@103 $generated@@4 $generated@@104 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@105 () Bool)
(declare-fun $generated@@106 (Int) Bool)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 () Int)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 62) (let (($generated@@132 true))
(let (($generated@@133  (=> (= (ControlFlow 0 53) (- 0 52)) (=> $generated@@105 ($generated@@23 ($generated@@24 1))))))
(let (($generated@@134  (=> (=> $generated@@105 ($generated@@106 ($generated@@24 1))) (and (=> (= (ControlFlow 0 55) 53) $generated@@133) (=> (= (ControlFlow 0 55) 54) $generated@@132)))))
(let (($generated@@135  (=> (and (not $generated@@105) (= (ControlFlow 0 57) 55)) $generated@@134)))
(let (($generated@@136  (=> $generated@@105 (=> (and (and (= $generated@@107 ($generated@@24 1)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@107) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 1)) (= (ControlFlow 0 56) 55))) $generated@@134))))
(let (($generated@@137  (=> (ite $generated@@105 ($generated@@23 ($generated@@24 1)) ($generated@@23 ($generated@@24 2))) (and (=> (= (ControlFlow 0 58) 56) $generated@@136) (=> (= (ControlFlow 0 58) 57) $generated@@135)))))
(let (($generated@@138 true))
(let (($generated@@139  (=> (= (ControlFlow 0 43) (- 0 42)) (=> (not $generated@@105) ($generated@@23 ($generated@@24 2))))))
(let (($generated@@140  (=> (=> (not $generated@@105) ($generated@@106 ($generated@@24 2))) (and (=> (= (ControlFlow 0 45) 43) $generated@@139) (=> (= (ControlFlow 0 45) 44) $generated@@138)))))
(let (($generated@@141  (=> (and $generated@@105 (= (ControlFlow 0 47) 45)) $generated@@140)))
(let (($generated@@142  (=> (not $generated@@105) (=> (and (and (= $generated@@109 ($generated@@24 2)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@109) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 2)) (= (ControlFlow 0 46) 45))) $generated@@140))))
(let (($generated@@143  (=> (ite $generated@@105 ($generated@@23 ($generated@@24 1)) ($generated@@23 ($generated@@24 2))) (and (=> (= (ControlFlow 0 48) 46) $generated@@142) (=> (= (ControlFlow 0 48) 47) $generated@@141)))))
(let (($generated@@144 true))
(let (($generated@@145  (=> (= (ControlFlow 0 35) (- 0 34)) ($generated@@23 ($generated@@24 1)))))
(let (($generated@@146  (=> (=> $generated@@105 ($generated@@23 ($generated@@24 1))) (=> (and (and (= $generated@@110 ($generated@@24 1)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@110) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 1)) ($generated@@106 ($generated@@24 1)))) (and (=> (= (ControlFlow 0 37) 35) $generated@@145) (=> (= (ControlFlow 0 37) 36) $generated@@144))))))
(let (($generated@@147 true))
(let (($generated@@148  (=> (= (ControlFlow 0 30) (- 0 29)) ($generated@@23 ($generated@@24 1)))))
(let (($generated@@149  (=> (=> (not $generated@@105) ($generated@@23 ($generated@@24 2))) (=> (and (and (= $generated@@111 ($generated@@24 1)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@111) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 1)) ($generated@@106 ($generated@@24 1)))) (and (=> (= (ControlFlow 0 32) 30) $generated@@148) (=> (= (ControlFlow 0 32) 31) $generated@@147))))))
(let (($generated@@150  (=> (and ($generated@@23 ($generated@@24 1)) (= $generated@@112 ($generated@@24 1))) (=> (and (and ($generated@@100 $generated@@4 ($generated@@8 $generated@@112) $generated $generated@@108) ($generated@@106 ($generated@@24 1))) (and ($generated@@106 ($generated@@24 1)) (= (ControlFlow 0 26) (- 0 25)))) ($generated@@23 ($generated@@24 1))))))
(let (($generated@@151 true))
(let (($generated@@152 true))
(let (($generated@@153 true))
(let (($generated@@154  (=> (= (ControlFlow 0 18) (- 0 17)) ($generated@@23 ($generated@@24 2)))))
(let (($generated@@155  (=> (=> (not $generated@@105) ($generated@@23 ($generated@@24 2))) (=> (and (and (= $generated@@113 ($generated@@24 2)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@113) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 2)) ($generated@@106 ($generated@@24 2)))) (and (=> (= (ControlFlow 0 20) 18) $generated@@154) (=> (= (ControlFlow 0 20) 19) $generated@@153))))))
(let (($generated@@156 true))
(let (($generated@@157  (=> (= (ControlFlow 0 13) (- 0 12)) ($generated@@23 ($generated@@24 2)))))
(let (($generated@@158  (=> (=> $generated@@105 ($generated@@23 ($generated@@24 1))) (=> (and (and (= $generated@@114 ($generated@@24 2)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@114) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 2)) ($generated@@106 ($generated@@24 2)))) (and (=> (= (ControlFlow 0 15) 13) $generated@@157) (=> (= (ControlFlow 0 15) 14) $generated@@156))))))
(let (($generated@@159  (=> (= $generated@@115 $generated@@116) (=> (and (and ($generated@@100 $generated@@4 ($generated@@8 $generated@@115) $generated $generated@@108) ($generated@@106 $generated@@115)) (and ($generated@@106 $generated@@115) (= (ControlFlow 0 9) (- 0 8)))) ($generated@@23 $generated@@115)))))
(let (($generated@@160  (=> (and (and (and (= $generated@@117 ($generated@@24 1)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@117) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 1)) ($generated@@106 ($generated@@24 1)))) (and (and ($generated@@23 ($generated@@24 1)) (= $generated@@116 ($generated@@24 1))) (and ($generated@@103 $generated@@4 ($generated@@8 $generated@@116) $generated) (= (ControlFlow 0 27) 9)))) $generated@@159)))
(let (($generated@@161  (=> (and (and (= $generated@@118 ($generated@@24 1)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@118) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 1)) ($generated@@106 ($generated@@24 1)))) (and (and (=> (= (ControlFlow 0 28) 24) $generated@@151) (=> (= (ControlFlow 0 28) 26) $generated@@150)) (=> (= (ControlFlow 0 28) 27) $generated@@160)))))
(let (($generated@@162  (=> (and (and (= $generated@@119 ($generated@@24 1)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@119) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 1)) ($generated@@106 ($generated@@24 1)))) (and (and (=> (= (ControlFlow 0 33) 23) $generated@@152) (=> (= (ControlFlow 0 33) 32) $generated@@149)) (=> (= (ControlFlow 0 33) 28) $generated@@161)))))
(let (($generated@@163  (=> (= $generated@@105 ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true)))) (and (=> (= (ControlFlow 0 38) 37) $generated@@146) (=> (= (ControlFlow 0 38) 33) $generated@@162)))))
(let (($generated@@164  (=> (and (and (and (= $generated@@120 ($generated@@24 2)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@120) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 2)) ($generated@@106 ($generated@@24 2)))) (and (and ($generated@@23 ($generated@@24 2)) (= $generated@@116 ($generated@@24 2))) (and ($generated@@103 $generated@@4 ($generated@@8 $generated@@116) $generated) (= (ControlFlow 0 10) 9)))) $generated@@159)))
(let (($generated@@165  (=> (and ($generated@@23 ($generated@@24 2)) (= $generated@@121 ($generated@@24 2))) (=> (and (and ($generated@@100 $generated@@4 ($generated@@8 $generated@@121) $generated $generated@@108) ($generated@@106 ($generated@@24 2))) (and ($generated@@106 ($generated@@24 2)) (= (ControlFlow 0 7) (- 0 6)))) ($generated@@23 ($generated@@24 2))))))
(let (($generated@@166 true))
(let (($generated@@167  (=> (and (and (= $generated@@122 ($generated@@24 2)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@122) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 2)) ($generated@@106 ($generated@@24 2)))) (and (and (=> (= (ControlFlow 0 11) 5) $generated@@166) (=> (= (ControlFlow 0 11) 7) $generated@@165)) (=> (= (ControlFlow 0 11) 10) $generated@@164)))))
(let (($generated@@168 true))
(let (($generated@@169  (=> (and (and (= $generated@@123 ($generated@@24 2)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@123) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 2)) ($generated@@106 ($generated@@24 2)))) (and (and (=> (= (ControlFlow 0 16) 4) $generated@@168) (=> (= (ControlFlow 0 16) 15) $generated@@158)) (=> (= (ControlFlow 0 16) 11) $generated@@167)))))
(let (($generated@@170  (=> (= $generated@@105  (not ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 true))))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (= $generated@@105 ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 false))))) (=> (= $generated@@105 ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6 false)))) (and (=> (= (ControlFlow 0 21) 20) $generated@@155) (=> (= (ControlFlow 0 21) 16) $generated@@169)))))))
(let (($generated@@171 true))
(let (($generated@@172  (=> (=> (not $generated@@105) ($generated@@106 ($generated@@24 2))) (and (and (=> (= (ControlFlow 0 39) 3) $generated@@171) (=> (= (ControlFlow 0 39) 38) $generated@@163)) (=> (= (ControlFlow 0 39) 21) $generated@@170)))))
(let (($generated@@173  (=> (and $generated@@105 (= (ControlFlow 0 41) 39)) $generated@@172)))
(let (($generated@@174  (=> (not $generated@@105) (=> (and (and (= $generated@@124 ($generated@@24 2)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@124) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 2)) (= (ControlFlow 0 40) 39))) $generated@@172))))
(let (($generated@@175 true))
(let (($generated@@176  (=> (=> $generated@@105 ($generated@@106 ($generated@@24 1))) (and (and (and (=> (= (ControlFlow 0 49) 2) $generated@@175) (=> (= (ControlFlow 0 49) 48) $generated@@143)) (=> (= (ControlFlow 0 49) 40) $generated@@174)) (=> (= (ControlFlow 0 49) 41) $generated@@173)))))
(let (($generated@@177  (=> (and (not $generated@@105) (= (ControlFlow 0 51) 49)) $generated@@176)))
(let (($generated@@178  (=> $generated@@105 (=> (and (and (= $generated@@125 ($generated@@24 1)) ($generated@@100 $generated@@4 ($generated@@8 $generated@@125) $generated $generated@@108)) (and ($generated@@106 ($generated@@24 1)) (= (ControlFlow 0 50) 49))) $generated@@176))))
(let (($generated@@179 true))
(let (($generated@@180  (=> (and (and (not $generated@@105) (= $generated@@126 ($generated@@24 2))) (and ($generated@@100 $generated@@4 ($generated@@8 $generated@@126) $generated $generated@@108) ($generated@@106 ($generated@@24 2)))) (and (and (and (=> (= (ControlFlow 0 60) 1) $generated@@179) (=> (= (ControlFlow 0 60) 58) $generated@@137)) (=> (= (ControlFlow 0 60) 50) $generated@@178)) (=> (= (ControlFlow 0 60) 51) $generated@@177)))))
(let (($generated@@181  (=> (and (and $generated@@105 (= $generated@@127 ($generated@@24 1))) (and ($generated@@100 $generated@@4 ($generated@@8 $generated@@127) $generated $generated@@108) ($generated@@106 ($generated@@24 1)))) (and (and (and (=> (= (ControlFlow 0 59) 1) $generated@@179) (=> (= (ControlFlow 0 59) 58) $generated@@137)) (=> (= (ControlFlow 0 59) 50) $generated@@178)) (=> (= (ControlFlow 0 59) 51) $generated@@177)))))
(let (($generated@@182  (=> (= $generated@@128 ($generated@@41 $generated@@129 $generated@@108 $generated@@1 false)) (and (=> (= (ControlFlow 0 61) 59) $generated@@181) (=> (= (ControlFlow 0 61) 60) $generated@@180)))))
(let (($generated@@183  (=> (and (and ($generated@@130 $generated@@108) ($generated@@131 $generated@@108)) (and (= 1 $generated@@19) (= (ControlFlow 0 62) 61))) $generated@@182)))
$generated@@183)))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 13) (- 12))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 30) (- 29))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
