(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (Int) Bool)
(declare-fun $generated@@29 (T@U) Int)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@32 (T@U T@U) T@U)
(declare-fun $generated@@33 (T@U T@U) Bool)
(declare-fun $generated@@42 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@U T@U) T@U)
(declare-fun $generated@@45 (T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 () T@U)
(declare-fun $generated@@63 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@66 (T@U) Bool)
(declare-fun $generated@@68 (Int) Int)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@T T@U) T@U)
(declare-fun $generated@@79 (T@U) T@U)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@87 () Int)
(declare-fun $generated@@88 (T@U) Int)
(declare-fun $generated@@89 (T@U) Bool)
(declare-fun $generated@@90 (Int Int) Int)
(declare-fun $generated@@91 (Int Int) Int)
(declare-fun $generated@@92 (Int Int) Int)
(declare-fun $generated@@94 (Int) T@U)
(declare-fun $generated@@98 (T@U T@U T@U) Bool)
(declare-fun $generated@@103 (Int) Bool)
(declare-fun $generated@@118 (T@U) T@U)
(declare-fun $generated@@126 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@127 () T@T)
(declare-fun $generated@@128 () T@T)
(declare-fun $generated@@129 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@130 (T@T T@T) T@T)
(declare-fun $generated@@131 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@132 (T@T) T@T)
(declare-fun $generated@@133 (T@T) T@T)
(declare-fun $generated@@173 (T@U) Bool)
(declare-fun $generated@@182 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@8 $generated@@25) 3))
(assert (forall (($generated@@30 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@30 $generated@@26)  (and ($generated@@24 $generated@@25 $generated@@30 $generated@@27) ($generated@@28 ($generated@@29 $generated@@30))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@30 $generated@@26))
)))
(assert (= ($generated@@31 $generated) $generated@@0))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! ($generated@@33 ($generated@@32 $generated@@34 $generated@@35) $generated@@35)
 :pattern ( ($generated@@32 $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (=> ($generated@@33 $generated@@36 $generated@@38) ($generated@@33 ($generated@@32 $generated@@36 $generated@@37) $generated@@38))
 :pattern ( ($generated@@32 $generated@@36 $generated@@37) ($generated@@33 $generated@@36 $generated@@38))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@33 ($generated@@32 $generated@@39 $generated@@40) $generated@@41)  (or (= $generated@@41 $generated@@40) ($generated@@33 $generated@@39 $generated@@41)))
 :pattern ( ($generated@@33 ($generated@@32 $generated@@39 $generated@@40) $generated@@41))
)))
(assert  (and (and (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@42 $generated@@47 $generated@@48 ($generated@@46 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@51) $generated@@49)
 :weight 0
)) (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (!  (or (= $generated@@56 $generated@@57) (= ($generated@@42 $generated@@52 $generated@@53 ($generated@@46 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@57) ($generated@@42 $generated@@52 $generated@@53 $generated@@55 $generated@@57)))
 :weight 0
))) (= ($generated@@8 $generated@@43) 4)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@13 ($generated@@42 $generated@@43 $generated@@9 ($generated@@44 $generated@@58 $generated@@59) $generated@@60))  (and ($generated@@45 $generated@@60 $generated@@58) ($generated@@33 $generated@@59 $generated@@60)))
 :pattern ( ($generated@@42 $generated@@43 $generated@@9 ($generated@@44 $generated@@58 $generated@@59) $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ) (!  (not ($generated@@33 $generated@@61 $generated@@62))
 :pattern ( ($generated@@33 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@63 $generated@@25 $generated@@64 $generated@@26 $generated@@65) ($generated@@63 $generated@@25 $generated@@64 $generated@@27 $generated@@65))
 :pattern ( ($generated@@63 $generated@@25 $generated@@64 $generated@@26 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@67 $generated@@27) ($generated@@66 $generated@@67))
 :pattern ( ($generated@@66 $generated@@67) ($generated@@24 $generated@@25 $generated@@67 $generated@@27))
)))
(assert (forall (($generated@@69 Int) ) (! (= ($generated@@68 $generated@@69) $generated@@69)
 :pattern ( ($generated@@68 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 $generated@@71) $generated@@71)
 :pattern ( ($generated@@70 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@66 $generated@@74) (= ($generated@@73 $generated@@74) $generated@@5))
 :pattern ( ($generated@@66 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@76 $generated@@78 ($generated@@75 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@75 $generated@@78 $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@33 ($generated@@79 $generated@@80) $generated@@81) ($generated@@13 ($generated@@42 $generated@@43 $generated@@9 $generated@@80 $generated@@81)))
 :pattern ( ($generated@@33 ($generated@@79 $generated@@80) $generated@@81))
)))
(assert (= ($generated@@8 $generated@@82) 5))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@24 $generated@@82 $generated@@84 ($generated@@83 $generated@@85)) (forall (($generated@@86 T@U) ) (!  (=> ($generated@@33 $generated@@84 $generated@@86) ($generated@@45 $generated@@86 $generated@@85))
 :pattern ( ($generated@@33 $generated@@84 $generated@@86))
)))
 :pattern ( ($generated@@24 $generated@@82 $generated@@84 ($generated@@83 $generated@@85)))
)))
(assert  (=> (<= 2 $generated@@87) (forall (($generated@@93 T@U) ) (!  (=> (or ($generated@@89 ($generated@@70 $generated@@25 $generated@@93)) (and (< 2 $generated@@87) ($generated@@24 $generated@@25 $generated@@93 $generated@@26))) (and (and ($generated@@66 ($generated@@70 $generated@@25 $generated@@93)) (=> (or (not (= ($generated@@68 ($generated@@90 ($generated@@29 ($generated@@70 $generated@@25 $generated@@93)) ($generated@@68 2))) ($generated@@68 1))) (not true)) ($generated@@66 ($generated@@70 $generated@@25 $generated@@93)))) (= ($generated@@88 ($generated@@70 $generated@@25 $generated@@93)) (ite (= ($generated@@68 ($generated@@90 ($generated@@29 ($generated@@70 $generated@@25 $generated@@93)) ($generated@@68 2))) ($generated@@68 1)) ($generated@@91 1 ($generated@@68 0)) ($generated@@92 ($generated@@68 ($generated@@29 ($generated@@70 $generated@@25 $generated@@93))) ($generated@@68 2))))))
 :weight 3
 :pattern ( ($generated@@88 ($generated@@70 $generated@@25 $generated@@93)))
))))
(assert (forall (($generated@@95 T@U) ) (!  (=> ($generated@@66 $generated@@95) (exists (($generated@@96 Int) ) (= $generated@@95 ($generated@@94 $generated@@96))))
 :pattern ( ($generated@@66 $generated@@95))
)))
(assert  (=> (<= 2 $generated@@87) (forall (($generated@@97 T@U) ) (!  (=> (or ($generated@@89 $generated@@97) (and (< 2 $generated@@87) ($generated@@24 $generated@@25 $generated@@97 $generated@@26))) (and (and ($generated@@66 $generated@@97) (=> (or (not (= ($generated@@90 ($generated@@29 $generated@@97) ($generated@@68 2)) ($generated@@68 1))) (not true)) ($generated@@66 $generated@@97))) (= ($generated@@88 $generated@@97) (ite (= ($generated@@90 ($generated@@29 $generated@@97) ($generated@@68 2)) ($generated@@68 1)) ($generated@@91 1 ($generated@@68 0)) ($generated@@92 ($generated@@29 $generated@@97) ($generated@@68 2))))))
 :pattern ( ($generated@@88 $generated@@97))
))))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@T) ) (! (= ($generated@@98 ($generated@@76 $generated@@102 $generated@@99) $generated@@100 $generated@@101) ($generated@@63 $generated@@102 $generated@@99 $generated@@100 $generated@@101))
 :pattern ( ($generated@@98 ($generated@@76 $generated@@102 $generated@@99) $generated@@100 $generated@@101))
)))
(assert  (=> (<= 0 $generated@@87) (forall (($generated@@104 Int) ) (!  (=> (or ($generated@@103 $generated@@104) (< 0 $generated@@87)) (= ($generated@@28 $generated@@104) (= ($generated@@90 $generated@@104 ($generated@@68 2)) ($generated@@68 0))))
 :pattern ( ($generated@@28 $generated@@104))
))))
(assert (forall (($generated@@105 T@U) ) (!  (=> ($generated@@45 $generated@@105 $generated@@26) (and (= ($generated@@76 $generated@@25 ($generated@@75 $generated@@25 $generated@@105)) $generated@@105) ($generated@@24 $generated@@25 ($generated@@75 $generated@@25 $generated@@105) $generated@@26)))
 :pattern ( ($generated@@45 $generated@@105 $generated@@26))
)))
(assert (forall (($generated@@106 T@U) ) (!  (=> ($generated@@45 $generated@@106 $generated@@27) (and (= ($generated@@76 $generated@@25 ($generated@@75 $generated@@25 $generated@@106)) $generated@@106) ($generated@@24 $generated@@25 ($generated@@75 $generated@@25 $generated@@106) $generated@@27)))
 :pattern ( ($generated@@45 $generated@@106 $generated@@27))
)))
(assert (forall (($generated@@107 Int) ($generated@@108 Int) ) (! (= ($generated@@91 $generated@@107 $generated@@108) (div $generated@@107 $generated@@108))
 :pattern ( ($generated@@91 $generated@@107 $generated@@108))
)))
(assert  (=> (<= 0 $generated@@87) (forall (($generated@@109 Int) ) (!  (=> (or ($generated@@103 ($generated@@68 $generated@@109)) (< 0 $generated@@87)) (= ($generated@@28 ($generated@@68 $generated@@109)) (= ($generated@@68 ($generated@@90 $generated@@109 ($generated@@68 2))) ($generated@@68 0))))
 :weight 3
 :pattern ( ($generated@@28 ($generated@@68 $generated@@109)))
))))
(assert (forall (($generated@@110 T@U) ) (!  (=> ($generated@@45 $generated@@110 $generated) (and (= ($generated@@76 $generated@@10 ($generated@@75 $generated@@10 $generated@@110)) $generated@@110) ($generated@@24 $generated@@10 ($generated@@75 $generated@@10 $generated@@110) $generated)))
 :pattern ( ($generated@@45 $generated@@110 $generated))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@T) ) (! (= ($generated@@45 ($generated@@76 $generated@@113 $generated@@111) $generated@@112) ($generated@@24 $generated@@113 $generated@@111 $generated@@112))
 :pattern ( ($generated@@45 ($generated@@76 $generated@@113 $generated@@111) $generated@@112))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@63 $generated@@82 $generated@@114 ($generated@@83 $generated@@115) $generated@@116) (forall (($generated@@117 T@U) ) (!  (=> ($generated@@33 $generated@@114 $generated@@117) ($generated@@98 $generated@@117 $generated@@115 $generated@@116))
 :pattern ( ($generated@@33 $generated@@114 $generated@@117))
)))
 :pattern ( ($generated@@63 $generated@@82 $generated@@114 ($generated@@83 $generated@@115) $generated@@116))
)))
(assert (forall (($generated@@119 T@U) ) (! (= ($generated@@118 ($generated@@83 $generated@@119)) $generated@@119)
 :pattern ( ($generated@@83 $generated@@119))
)))
(assert (forall (($generated@@120 T@U) ) (! (= ($generated@@31 ($generated@@83 $generated@@120)) $generated@@1)
 :pattern ( ($generated@@83 $generated@@120))
)))
(assert (forall (($generated@@121 Int) ) (! (= ($generated@@73 ($generated@@94 $generated@@121)) $generated@@5)
 :pattern ( ($generated@@94 $generated@@121))
)))
(assert (forall (($generated@@122 Int) ) (! (= ($generated@@29 ($generated@@94 $generated@@122)) $generated@@122)
 :pattern ( ($generated@@94 $generated@@122))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@75 $generated@@124 ($generated@@76 $generated@@124 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@76 $generated@@124 $generated@@123))
)))
(assert (forall (($generated@@125 Int) ) (! (= ($generated@@24 $generated@@25 ($generated@@94 $generated@@125) $generated@@27) ($generated@@24 $generated@@10 ($generated@@14 $generated@@125) $generated))
 :pattern ( ($generated@@24 $generated@@25 ($generated@@94 $generated@@125) $generated@@27))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@126 $generated@@134 $generated@@135 $generated@@136 ($generated@@131 $generated@@134 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@140 $generated@@137) $generated@@139 $generated@@140) $generated@@137)
 :weight 0
)) (and (forall (($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@T) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ) (!  (or (= $generated@@146 $generated@@148) (= ($generated@@126 $generated@@141 $generated@@142 $generated@@143 ($generated@@131 $generated@@141 $generated@@142 $generated@@143 $generated@@145 $generated@@146 $generated@@147 $generated@@144) $generated@@148 $generated@@149) ($generated@@126 $generated@@141 $generated@@142 $generated@@143 $generated@@145 $generated@@148 $generated@@149)))
 :weight 0
)) (forall (($generated@@150 T@T) ($generated@@151 T@T) ($generated@@152 T@T) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ) (!  (or (= $generated@@156 $generated@@158) (= ($generated@@126 $generated@@150 $generated@@151 $generated@@152 ($generated@@131 $generated@@150 $generated@@151 $generated@@152 $generated@@154 $generated@@155 $generated@@156 $generated@@153) $generated@@157 $generated@@158) ($generated@@126 $generated@@150 $generated@@151 $generated@@152 $generated@@154 $generated@@157 $generated@@158)))
 :weight 0
)))) (= ($generated@@8 $generated@@127) 6)) (= ($generated@@8 $generated@@128) 7)) (forall (($generated@@159 T@T) ($generated@@160 T@T) ) (= ($generated@@8 ($generated@@130 $generated@@159 $generated@@160)) 8))) (forall (($generated@@161 T@T) ($generated@@162 T@T) ) (! (= ($generated@@132 ($generated@@130 $generated@@161 $generated@@162)) $generated@@161)
 :pattern ( ($generated@@130 $generated@@161 $generated@@162))
))) (forall (($generated@@163 T@T) ($generated@@164 T@T) ) (! (= ($generated@@133 ($generated@@130 $generated@@163 $generated@@164)) $generated@@164)
 :pattern ( ($generated@@130 $generated@@163 $generated@@164))
))))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ($generated@@167 T@U) ($generated@@168 Bool) ($generated@@169 T@U) ($generated@@170 T@U) ) (! (= ($generated@@13 ($generated@@126 $generated@@127 $generated@@128 $generated@@9 ($generated@@129 $generated@@165 $generated@@166 $generated@@167 $generated@@168) $generated@@169 $generated@@170))  (=> (and (or (not (= $generated@@169 $generated@@165)) (not true)) ($generated@@13 ($generated@@75 $generated@@9 ($generated@@42 $generated@@128 $generated@@43 ($generated@@42 $generated@@127 ($generated@@130 $generated@@128 $generated@@43) $generated@@166 $generated@@169) $generated@@167)))) $generated@@168))
 :pattern ( ($generated@@126 $generated@@127 $generated@@128 $generated@@9 ($generated@@129 $generated@@165 $generated@@166 $generated@@167 $generated@@168) $generated@@169 $generated@@170))
)))
(assert (forall (($generated@@171 Int) ($generated@@172 Int) ) (! (= ($generated@@90 $generated@@171 $generated@@172) (mod $generated@@171 $generated@@172))
 :pattern ( ($generated@@90 $generated@@171 $generated@@172))
)))
(assert (forall (($generated@@174 T@U) ($generated@@175 T@U) ) (!  (=> (and ($generated@@173 $generated@@175) (and ($generated@@66 $generated@@174) ($generated@@63 $generated@@25 $generated@@174 $generated@@27 $generated@@175))) ($generated@@63 $generated@@10 ($generated@@14 ($generated@@29 $generated@@174)) $generated $generated@@175))
 :pattern ( ($generated@@63 $generated@@10 ($generated@@14 ($generated@@29 $generated@@174)) $generated $generated@@175))
)))
(assert (forall (($generated@@176 Int) ($generated@@177 Int) ) (! (= ($generated@@92 $generated@@176 $generated@@177) (* $generated@@176 $generated@@177))
 :pattern ( ($generated@@92 $generated@@176 $generated@@177))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (!  (=> ($generated@@45 $generated@@178 ($generated@@83 $generated@@179)) (and (= ($generated@@76 $generated@@82 ($generated@@75 $generated@@82 $generated@@178)) $generated@@178) ($generated@@24 $generated@@82 ($generated@@75 $generated@@82 $generated@@178) ($generated@@83 $generated@@179))))
 :pattern ( ($generated@@45 $generated@@178 ($generated@@83 $generated@@179)))
)))
(assert (forall (($generated@@180 T@U) ($generated@@181 T@U) ) (!  (=> (and ($generated@@173 $generated@@181) ($generated@@24 $generated@@25 $generated@@180 $generated@@27)) ($generated@@63 $generated@@25 $generated@@180 $generated@@27 $generated@@181))
 :pattern ( ($generated@@63 $generated@@25 $generated@@180 $generated@@27 $generated@@181))
)))
(assert (= ($generated@@31 $generated@@26) $generated@@3))
(assert (= ($generated@@182 $generated@@26) $generated@@6))
(assert (= ($generated@@31 $generated@@27) $generated@@4))
(assert (= ($generated@@182 $generated@@27) $generated@@7))
(assert (forall (($generated@@183 Int) ) (! (= ($generated@@76 $generated@@10 ($generated@@14 ($generated@@68 $generated@@183))) ($generated@@70 $generated@@43 ($generated@@76 $generated@@10 ($generated@@14 $generated@@183))))
 :pattern ( ($generated@@76 $generated@@10 ($generated@@14 ($generated@@68 $generated@@183))))
)))
(assert (forall (($generated@@184 Int) ) (! (= ($generated@@94 ($generated@@68 $generated@@184)) ($generated@@70 $generated@@25 ($generated@@94 $generated@@184)))
 :pattern ( ($generated@@94 ($generated@@68 $generated@@184)))
)))
(assert (forall (($generated@@185 T@U) ($generated@@186 T@T) ) (! (= ($generated@@76 $generated@@186 ($generated@@70 $generated@@186 $generated@@185)) ($generated@@70 $generated@@43 ($generated@@76 $generated@@186 $generated@@185)))
 :pattern ( ($generated@@76 $generated@@186 ($generated@@70 $generated@@186 $generated@@185)))
)))
(assert (forall (($generated@@187 T@U) ($generated@@188 T@U) ) (! ($generated@@63 $generated@@10 $generated@@188 $generated $generated@@187)
 :pattern ( ($generated@@63 $generated@@10 $generated@@188 $generated $generated@@187))
)))
(assert (forall (($generated@@189 T@U) ) (! ($generated@@24 $generated@@10 $generated@@189 $generated)
 :pattern ( ($generated@@24 $generated@@10 $generated@@189 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@190 () Bool)
(declare-fun $generated@@191 () Bool)
(declare-fun $generated@@192 () T@U)
(declare-fun $generated@@193 () Bool)
(declare-fun $generated@@194 () T@U)
(declare-fun $generated@@195 () T@U)
(declare-fun $generated@@196 () T@U)
(declare-fun $generated@@197 () T@U)
(declare-fun $generated@@198 () T@U)
(declare-fun $generated@@199 () T@U)
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 () T@U)
(declare-fun $generated@@202 (T@U) Bool)
(declare-fun $generated@@203 () T@U)
(declare-fun $generated@@204 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 31) (let (($generated@@205 true))
(let (($generated@@206  (=> (and (not (and $generated@@190 $generated@@191)) (= (ControlFlow 0 3) 1)) $generated@@205)))
(let (($generated@@207  (=> (and (and $generated@@190 $generated@@191) (= (ControlFlow 0 2) 1)) $generated@@205)))
(let (($generated@@208  (=> (not $generated@@190) (and (=> (= (ControlFlow 0 5) 2) $generated@@207) (=> (= (ControlFlow 0 5) 3) $generated@@206)))))
(let (($generated@@209  (=> $generated@@190 (and (=> (= (ControlFlow 0 4) 2) $generated@@207) (=> (= (ControlFlow 0 4) 3) $generated@@206)))))
(let (($generated@@210  (=> (and (forall (($generated@@211 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@211 $generated@@26) (=> ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@211)) ($generated@@66 $generated@@211)))
 :pattern ( ($generated@@29 $generated@@211))
 :pattern ( ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@211)))
)) (= $generated@@193 (exists (($generated@@212 T@U) ) (!  (and ($generated@@24 $generated@@25 $generated@@212 $generated@@26) (and ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@212)) (= ($generated@@29 $generated@@212) ($generated@@68 3))))
 :pattern ( ($generated@@29 $generated@@212))
 :pattern ( ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@212)))
)))) (and (=> (= (ControlFlow 0 6) (- 0 9)) $generated@@190) (=> $generated@@190 (and (=> (= (ControlFlow 0 6) (- 0 8)) $generated@@191) (=> $generated@@191 (and (=> (= (ControlFlow 0 6) (- 0 7)) (not $generated@@193)) (=> (not $generated@@193) (and (=> (= (ControlFlow 0 6) 4) $generated@@209) (=> (= (ControlFlow 0 6) 5) $generated@@208)))))))))))
(let (($generated@@213  (=> (and (not ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@194))) (= (ControlFlow 0 12) 6)) $generated@@210)))
(let (($generated@@214  (=> ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@194)) (=> (and ($generated@@66 $generated@@194) (= (ControlFlow 0 11) 6)) $generated@@210))))
(let (($generated@@215  (=> (and ($generated@@24 $generated@@25 $generated@@194 $generated@@26) ($generated@@63 $generated@@25 $generated@@194 $generated@@26 $generated@@195)) (and (=> (= (ControlFlow 0 13) 11) $generated@@214) (=> (= (ControlFlow 0 13) 12) $generated@@213)))))
(let (($generated@@216  (=> (and (not (and ($generated@@24 $generated@@25 $generated@@194 $generated@@26) ($generated@@63 $generated@@25 $generated@@194 $generated@@26 $generated@@195))) (= (ControlFlow 0 10) 6)) $generated@@210)))
(let (($generated@@217  (=> (and (forall (($generated@@218 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@218 $generated@@26) (=> ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@218)) ($generated@@66 $generated@@218)))
 :pattern ( ($generated@@29 $generated@@218))
 :pattern ( ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@218)))
)) (= $generated@@191 (forall (($generated@@219 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@219 $generated@@26) (=> ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@219)) (= ($generated@@90 ($generated@@29 $generated@@219) ($generated@@68 2)) ($generated@@68 0))))
 :pattern ( ($generated@@29 $generated@@219))
 :pattern ( ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@219)))
)))) (and (=> (= (ControlFlow 0 14) 13) $generated@@215) (=> (= (ControlFlow 0 14) 10) $generated@@216)))))
(let (($generated@@220  (=> (and (not ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@196))) (= (ControlFlow 0 18) 14)) $generated@@217)))
(let (($generated@@221  (=> (and ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@196)) ($generated@@66 $generated@@196)) (and (=> (= (ControlFlow 0 16) (- 0 17)) (or (not (= ($generated@@68 2) 0)) (not true))) (=> (or (not (= ($generated@@68 2) 0)) (not true)) (=> (= (ControlFlow 0 16) 14) $generated@@217))))))
(let (($generated@@222  (=> (and ($generated@@24 $generated@@25 $generated@@196 $generated@@26) ($generated@@63 $generated@@25 $generated@@196 $generated@@26 $generated@@195)) (and (=> (= (ControlFlow 0 19) 16) $generated@@221) (=> (= (ControlFlow 0 19) 18) $generated@@220)))))
(let (($generated@@223  (=> (and (not (and ($generated@@24 $generated@@25 $generated@@196 $generated@@26) ($generated@@63 $generated@@25 $generated@@196 $generated@@26 $generated@@195))) (= (ControlFlow 0 15) 14)) $generated@@217)))
(let (($generated@@224  (=> (and (forall (($generated@@225 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@225 $generated@@26) (=> ($generated@@33 $generated@@197 ($generated@@76 $generated@@25 $generated@@225)) ($generated@@89 $generated@@225)))
 :pattern ( ($generated@@88 $generated@@225))
 :pattern ( ($generated@@33 $generated@@197 ($generated@@76 $generated@@25 $generated@@225)))
)) (= $generated@@190 (forall (($generated@@226 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@226 $generated@@26) (=> ($generated@@33 $generated@@197 ($generated@@76 $generated@@25 $generated@@226)) (> ($generated@@88 $generated@@226) 0)))
 :pattern ( ($generated@@88 $generated@@226))
 :pattern ( ($generated@@33 $generated@@197 ($generated@@76 $generated@@25 $generated@@226)))
)))) (and (=> (= (ControlFlow 0 20) 19) $generated@@222) (=> (= (ControlFlow 0 20) 15) $generated@@223)))))
(let (($generated@@227  (=> (and (not ($generated@@33 $generated@@197 ($generated@@76 $generated@@25 $generated@@198))) (= (ControlFlow 0 23) 20)) $generated@@224)))
(let (($generated@@228  (=> (and (and ($generated@@33 $generated@@197 ($generated@@76 $generated@@25 $generated@@198)) ($generated@@63 $generated@@25 $generated@@198 $generated@@26 $generated@@195)) (and ($generated@@89 $generated@@198) (= (ControlFlow 0 22) 20))) $generated@@224)))
(let (($generated@@229  (=> (and ($generated@@24 $generated@@25 $generated@@198 $generated@@26) ($generated@@63 $generated@@25 $generated@@198 $generated@@26 $generated@@195)) (and (=> (= (ControlFlow 0 24) 22) $generated@@228) (=> (= (ControlFlow 0 24) 23) $generated@@227)))))
(let (($generated@@230  (=> (and (not (and ($generated@@24 $generated@@25 $generated@@198 $generated@@26) ($generated@@63 $generated@@25 $generated@@198 $generated@@26 $generated@@195))) (= (ControlFlow 0 21) 20)) $generated@@224)))
(let (($generated@@231  (=> (= $generated@@197 ($generated@@79 ($generated@@44 $generated@@26 $generated@@192))) (and (=> (= (ControlFlow 0 25) 24) $generated@@229) (=> (= (ControlFlow 0 25) 21) $generated@@230)))))
(let (($generated@@232  (=> (and (not ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@199))) (= (ControlFlow 0 28) 25)) $generated@@231)))
(let (($generated@@233  (=> (and ($generated@@33 $generated@@192 ($generated@@76 $generated@@25 $generated@@199)) (= (ControlFlow 0 27) 25)) $generated@@231)))
(let (($generated@@234  (=> (and ($generated@@24 $generated@@25 $generated@@199 $generated@@26) ($generated@@63 $generated@@25 $generated@@199 $generated@@26 $generated@@195)) (and (=> (= (ControlFlow 0 29) 27) $generated@@233) (=> (= (ControlFlow 0 29) 28) $generated@@232)))))
(let (($generated@@235  (=> (and (not (and ($generated@@24 $generated@@25 $generated@@199 $generated@@26) ($generated@@63 $generated@@25 $generated@@199 $generated@@26 $generated@@195))) (= (ControlFlow 0 26) 25)) $generated@@231)))
(let (($generated@@236  (=> (and (= $generated@@200 ($generated@@129 $generated@@201 $generated@@195 $generated@@2 false)) (= $generated@@192 ($generated@@70 $generated@@82 ($generated@@32 ($generated@@32 ($generated@@32 ($generated@@32 $generated@@61 ($generated@@76 $generated@@25 ($generated@@70 $generated@@25 ($generated@@94 ($generated@@68 1))))) ($generated@@76 $generated@@25 ($generated@@70 $generated@@25 ($generated@@94 ($generated@@68 2))))) ($generated@@76 $generated@@25 ($generated@@70 $generated@@25 ($generated@@94 ($generated@@68 3))))) ($generated@@76 $generated@@25 ($generated@@70 $generated@@25 ($generated@@94 ($generated@@68 4)))))))) (and (=> (= (ControlFlow 0 30) 29) $generated@@234) (=> (= (ControlFlow 0 30) 26) $generated@@235)))))
(let (($generated@@237  (=> (and ($generated@@173 $generated@@195) ($generated@@202 $generated@@195)) (=> (and (and ($generated@@24 $generated@@82 $generated@@203 ($generated@@83 $generated@@27)) ($generated@@63 $generated@@82 $generated@@203 ($generated@@83 $generated@@27) $generated@@195)) true) (=> (and (and (and ($generated@@24 $generated@@82 $generated@@204 ($generated@@83 $generated@@26)) ($generated@@63 $generated@@82 $generated@@204 ($generated@@83 $generated@@26) $generated@@195)) true) (and (= 3 $generated@@87) (= (ControlFlow 0 31) 30))) $generated@@236)))))
$generated@@237))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
