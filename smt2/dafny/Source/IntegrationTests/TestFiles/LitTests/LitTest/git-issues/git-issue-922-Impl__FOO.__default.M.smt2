(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U Int) T@U)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) Int)
(declare-fun $generated@@28 (T@U) Int)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@33 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@44 (Int) Int)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@U T@U T@U) Bool)
(declare-fun $generated@@61 (T@U T@U) Bool)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@79 (T@U) T@U)
(declare-fun $generated@@83 (T@U) Int)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@89 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 (T@T T@T) T@T)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@94 (T@T) T@T)
(declare-fun $generated@@95 (T@T) T@T)
(declare-fun $generated@@146 (T@U) Bool)
(declare-fun $generated@@149 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (= ($generated@@8 $generated@@30) 3))
(assert (forall (($generated@@31 T@U) ($generated@@32 Int) ) (!  (=> (and (<= 0 $generated@@32) (< $generated@@32 ($generated@@27 $generated@@31))) (< ($generated@@28 ($generated@@29 $generated@@30 ($generated@@25 $generated@@31 $generated@@32))) ($generated@@28 ($generated@@26 $generated@@31))))
 :pattern ( ($generated@@25 $generated@@31 $generated@@32) ($generated@@26 $generated@@31))
)))
(assert (= ($generated@@8 $generated@@34) 4))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@33 $generated@@34 $generated@@37 $generated@@35 $generated@@38) ($generated@@33 $generated@@34 $generated@@37 ($generated@@36 $generated) $generated@@38))
 :pattern ( ($generated@@33 $generated@@34 $generated@@37 $generated@@35 $generated@@38))
)))
(assert (= ($generated@@27 $generated@@39) 0))
(assert (forall (($generated@@43 T@U) ) (!  (=> ($generated@@41 $generated@@30 $generated@@43 $generated@@42) ($generated@@40 $generated@@43))
 :pattern ( ($generated@@40 $generated@@43) ($generated@@41 $generated@@30 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@45 Int) ) (! (= ($generated@@44 $generated@@45) $generated@@45)
 :pattern ( ($generated@@44 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@46 $generated@@48 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@48 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@40 $generated@@50) (= ($generated@@49 $generated@@50) $generated@@5))
 :pattern ( ($generated@@40 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@29 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@29 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@40 $generated@@54) (exists (($generated@@55 T@U) ) (= $generated@@54 ($generated@@26 $generated@@55))))
 :pattern ( ($generated@@40 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@56 ($generated@@51 $generated@@60 $generated@@57) $generated@@58 $generated@@59) ($generated@@33 $generated@@60 $generated@@57 $generated@@58 $generated@@59))
 :pattern ( ($generated@@56 ($generated@@51 $generated@@60 $generated@@57) $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@62 T@U) ) (!  (=> ($generated@@61 $generated@@62 $generated@@35) (and (= ($generated@@51 $generated@@34 ($generated@@29 $generated@@34 $generated@@62)) $generated@@62) ($generated@@41 $generated@@34 ($generated@@29 $generated@@34 $generated@@62) $generated@@35)))
 :pattern ( ($generated@@61 $generated@@62 $generated@@35))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@61 $generated@@63 $generated@@42) (and (= ($generated@@51 $generated@@30 ($generated@@29 $generated@@30 $generated@@63)) $generated@@63) ($generated@@41 $generated@@30 ($generated@@29 $generated@@30 $generated@@63) $generated@@42)))
 :pattern ( ($generated@@61 $generated@@63 $generated@@42))
)))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@41 $generated@@30 ($generated@@26 $generated@@64) $generated@@42) ($generated@@41 $generated@@34 $generated@@64 $generated@@35))
 :pattern ( ($generated@@41 $generated@@30 ($generated@@26 $generated@@64) $generated@@42))
)))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@41 $generated@@34 $generated@@65 $generated@@35)  (and ($generated@@41 $generated@@34 $generated@@65 ($generated@@36 $generated)) (<= ($generated@@44 1) ($generated@@27 $generated@@65))))
 :pattern ( ($generated@@41 $generated@@34 $generated@@65 $generated@@35))
)))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@61 $generated@@66 $generated) (and (= ($generated@@51 $generated@@10 ($generated@@29 $generated@@10 $generated@@66)) $generated@@66) ($generated@@41 $generated@@10 ($generated@@29 $generated@@10 $generated@@66) $generated)))
 :pattern ( ($generated@@61 $generated@@66 $generated))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@61 ($generated@@51 $generated@@69 $generated@@67) $generated@@68) ($generated@@41 $generated@@69 $generated@@67 $generated@@68))
 :pattern ( ($generated@@61 ($generated@@51 $generated@@69 $generated@@67) $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ) (! (<= 0 ($generated@@27 $generated@@70))
 :pattern ( ($generated@@27 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@33 $generated@@34 $generated@@71 ($generated@@36 $generated@@72) $generated@@73) (forall (($generated@@74 Int) ) (!  (=> (and (<= 0 $generated@@74) (< $generated@@74 ($generated@@27 $generated@@71))) ($generated@@56 ($generated@@25 $generated@@71 $generated@@74) $generated@@72 $generated@@73))
 :pattern ( ($generated@@25 $generated@@71 $generated@@74))
)))
 :pattern ( ($generated@@33 $generated@@34 $generated@@71 ($generated@@36 $generated@@72) $generated@@73))
)))
(assert (forall (($generated@@76 T@U) ) (! (= ($generated@@75 ($generated@@36 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@36 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ) (! (= ($generated@@24 ($generated@@36 $generated@@77)) $generated@@1)
 :pattern ( ($generated@@36 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (! (= ($generated@@49 ($generated@@26 $generated@@78)) $generated@@5)
 :pattern ( ($generated@@26 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@79 ($generated@@26 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@26 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@29 $generated@@82 ($generated@@51 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@51 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@84 T@U) ) (! (< ($generated@@83 $generated@@84) ($generated@@28 ($generated@@26 $generated@@84)))
 :pattern ( ($generated@@26 $generated@@84))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@85 $generated@@96 $generated@@97 $generated@@98 ($generated@@92 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@101 $generated@@102) $generated@@99)
 :weight 0
)) (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@85 $generated@@103 $generated@@104 $generated@@105 ($generated@@92 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@85 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@85 $generated@@112 $generated@@113 $generated@@114 ($generated@@92 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@85 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)))) (= ($generated@@8 $generated@@86) 5)) (= ($generated@@8 $generated@@87) 6)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@89 $generated@@121 $generated@@122 ($generated@@93 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@123) $generated@@125) $generated@@123)
 :weight 0
))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@130 $generated@@131) (= ($generated@@89 $generated@@126 $generated@@127 ($generated@@93 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@128) $generated@@131) ($generated@@89 $generated@@126 $generated@@127 $generated@@129 $generated@@131)))
 :weight 0
))) (= ($generated@@8 $generated@@90) 7)) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (= ($generated@@8 ($generated@@91 $generated@@132 $generated@@133)) 8))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (! (= ($generated@@94 ($generated@@91 $generated@@134 $generated@@135)) $generated@@134)
 :pattern ( ($generated@@91 $generated@@134 $generated@@135))
))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (! (= ($generated@@95 ($generated@@91 $generated@@136 $generated@@137)) $generated@@137)
 :pattern ( ($generated@@91 $generated@@136 $generated@@137))
))))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 Bool) ($generated@@142 T@U) ($generated@@143 T@U) ) (! (= ($generated@@13 ($generated@@85 $generated@@86 $generated@@87 $generated@@9 ($generated@@88 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))  (=> (and (or (not (= $generated@@142 $generated@@138)) (not true)) ($generated@@13 ($generated@@29 $generated@@9 ($generated@@89 $generated@@87 $generated@@90 ($generated@@89 $generated@@86 ($generated@@91 $generated@@87 $generated@@90) $generated@@139 $generated@@142) $generated@@140)))) $generated@@141))
 :pattern ( ($generated@@85 $generated@@86 $generated@@87 $generated@@9 ($generated@@88 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (!  (=> ($generated@@61 $generated@@144 ($generated@@36 $generated@@145)) (and (= ($generated@@51 $generated@@34 ($generated@@29 $generated@@34 $generated@@144)) $generated@@144) ($generated@@41 $generated@@34 ($generated@@29 $generated@@34 $generated@@144) ($generated@@36 $generated@@145))))
 :pattern ( ($generated@@61 $generated@@144 ($generated@@36 $generated@@145)))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ) (!  (=> (and ($generated@@146 $generated@@148) ($generated@@41 $generated@@30 $generated@@147 $generated@@42)) ($generated@@33 $generated@@30 $generated@@147 $generated@@42 $generated@@148))
 :pattern ( ($generated@@33 $generated@@30 $generated@@147 $generated@@42 $generated@@148))
)))
(assert (= ($generated@@24 $generated@@35) $generated@@3))
(assert (= ($generated@@149 $generated@@35) $generated@@6))
(assert (= ($generated@@24 $generated@@42) $generated@@4))
(assert (= ($generated@@149 $generated@@42) $generated@@7))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (!  (=> (and ($generated@@146 $generated@@151) (and ($generated@@40 $generated@@150) ($generated@@33 $generated@@30 $generated@@150 $generated@@42 $generated@@151))) ($generated@@33 $generated@@34 ($generated@@79 $generated@@150) $generated@@35 $generated@@151))
 :pattern ( ($generated@@33 $generated@@34 ($generated@@79 $generated@@150) $generated@@35 $generated@@151))
)))
(assert (forall (($generated@@152 Int) ) (! (= ($generated@@51 $generated@@10 ($generated@@14 ($generated@@44 $generated@@152))) ($generated@@46 $generated@@90 ($generated@@51 $generated@@10 ($generated@@14 $generated@@152))))
 :pattern ( ($generated@@51 $generated@@10 ($generated@@14 ($generated@@44 $generated@@152))))
)))
(assert (forall (($generated@@153 T@U) ) (! (= ($generated@@26 ($generated@@46 $generated@@34 $generated@@153)) ($generated@@46 $generated@@30 ($generated@@26 $generated@@153)))
 :pattern ( ($generated@@26 ($generated@@46 $generated@@34 $generated@@153)))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@T) ) (! (= ($generated@@51 $generated@@155 ($generated@@46 $generated@@155 $generated@@154)) ($generated@@46 $generated@@90 ($generated@@51 $generated@@155 $generated@@154)))
 :pattern ( ($generated@@51 $generated@@155 ($generated@@46 $generated@@155 $generated@@154)))
)))
(assert (forall (($generated@@156 T@U) ) (!  (=> (= ($generated@@27 $generated@@156) 0) (= $generated@@156 $generated@@39))
 :pattern ( ($generated@@27 $generated@@156))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (! ($generated@@33 $generated@@10 $generated@@158 $generated $generated@@157)
 :pattern ( ($generated@@33 $generated@@10 $generated@@158 $generated $generated@@157))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (! (= ($generated@@41 $generated@@34 $generated@@159 ($generated@@36 $generated@@160)) (forall (($generated@@161 Int) ) (!  (=> (and (<= 0 $generated@@161) (< $generated@@161 ($generated@@27 $generated@@159))) ($generated@@61 ($generated@@25 $generated@@159 $generated@@161) $generated@@160))
 :pattern ( ($generated@@25 $generated@@159 $generated@@161))
)))
 :pattern ( ($generated@@41 $generated@@34 $generated@@159 ($generated@@36 $generated@@160)))
)))
(assert (forall (($generated@@162 T@U) ($generated@@163 Int) ) (!  (=> (and (<= 0 $generated@@163) (< $generated@@163 ($generated@@27 $generated@@162))) (< ($generated@@28 ($generated@@29 $generated@@30 ($generated@@25 $generated@@162 $generated@@163))) ($generated@@83 $generated@@162)))
 :pattern ( ($generated@@28 ($generated@@29 $generated@@30 ($generated@@25 $generated@@162 $generated@@163))))
)))
(assert (forall (($generated@@164 T@U) ) (! ($generated@@41 $generated@@10 $generated@@164 $generated)
 :pattern ( ($generated@@41 $generated@@10 $generated@@164 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 (T@U) Bool)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@171  (=> (and (= $generated@@165 ($generated@@88 $generated@@166 $generated@@167 $generated@@2 false)) (= (ControlFlow 0 2) (- 0 1))) ($generated@@41 $generated@@34 ($generated@@46 $generated@@34 $generated@@39) $generated@@35))))
(let (($generated@@172  (=> (and ($generated@@146 $generated@@167) ($generated@@168 $generated@@167)) (=> (and (and (and ($generated@@41 $generated@@30 $generated@@169 $generated@@42) ($generated@@33 $generated@@30 $generated@@169 $generated@@42 $generated@@167)) true) (and (= 2 $generated@@170) (= (ControlFlow 0 3) 2))) $generated@@171))))
$generated@@172)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
