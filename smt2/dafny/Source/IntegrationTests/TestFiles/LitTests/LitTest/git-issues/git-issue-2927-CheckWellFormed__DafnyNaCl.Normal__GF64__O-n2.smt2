(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) Int)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@26 () Int)
(declare-fun $generated@@27 (Int) Int)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 () Int)
(declare-fun $generated@@35 (Int Int) Int)
(declare-fun $generated@@36 () Int)
(declare-fun $generated@@37 () Int)
(declare-fun $generated@@39 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 () Int)
(declare-fun $generated@@48 () Int)
(declare-fun $generated@@49 () Int)
(declare-fun $generated@@50 (T@U T@U) Bool)
(declare-fun $generated@@53 (Int Int) Int)
(declare-fun $generated@@54 () Int)
(declare-fun $generated@@60 () Int)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@T T@T) T@T)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@131 (T@U) T@U)
(declare-fun $generated@@136 (T@U Int) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (= ($generated@@24 $generated@@25) 0))
(assert (= $generated@@26 ($generated@@27 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@27 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@38 T@U) ) (! (= ($generated@@32 $generated@@9 $generated@@38 $generated@@33)  (and (and (<= ($generated@@27 (- 0 9223372036854775808)) ($generated@@14 $generated@@38)) (< ($generated@@14 $generated@@38) 9223372036854775808)) (and (<= (- 0 $generated@@34) ($generated@@14 $generated@@38)) (<= ($generated@@14 $generated@@38) ($generated@@35 $generated@@36 $generated@@37)))))
 :pattern ( ($generated@@32 $generated@@9 $generated@@38 $generated@@33))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@40 $generated@@42 ($generated@@39 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@39 $generated@@42 $generated@@41))
)))
(assert (= ($generated@@7 $generated@@43) 3))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@32 $generated@@43 $generated@@47 $generated@@44)  (and ($generated@@32 $generated@@43 $generated@@47 ($generated@@45 $generated@@33)) (= ($generated@@24 $generated@@47) $generated@@46)))
 :pattern ( ($generated@@32 $generated@@43 $generated@@47 $generated@@44))
)))
(assert (= $generated@@36 (+ ($generated@@35 $generated@@48 ($generated@@27 15)) 1)))
(assert (= $generated@@49 ($generated@@27 (- 57896044618658097711785492504343953926634992332820282019728792003956564819968 19))))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@50 $generated@@51 $generated@@33) (and (= ($generated@@40 $generated@@9 ($generated@@39 $generated@@9 $generated@@51)) $generated@@51) ($generated@@32 $generated@@9 ($generated@@39 $generated@@9 $generated@@51) $generated@@33)))
 :pattern ( ($generated@@50 $generated@@51 $generated@@33))
)))
(assert (forall (($generated@@52 T@U) ) (!  (=> ($generated@@50 $generated@@52 $generated@@44) (and (= ($generated@@40 $generated@@43 ($generated@@39 $generated@@43 $generated@@52)) $generated@@52) ($generated@@32 $generated@@43 ($generated@@39 $generated@@43 $generated@@52) $generated@@44)))
 :pattern ( ($generated@@50 $generated@@52 $generated@@44))
)))
(assert (= $generated@@48 ($generated@@53 $generated@@26 $generated@@49)))
(assert (= $generated@@37 ($generated@@35 $generated@@54 $generated@@54)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@50 $generated@@55 $generated) (and (= ($generated@@40 $generated@@9 ($generated@@39 $generated@@9 $generated@@55)) $generated@@55) ($generated@@32 $generated@@9 ($generated@@39 $generated@@9 $generated@@55) $generated)))
 :pattern ( ($generated@@50 $generated@@55 $generated))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@50 ($generated@@40 $generated@@58 $generated@@56) $generated@@57) ($generated@@32 $generated@@58 $generated@@56 $generated@@57))
 :pattern ( ($generated@@50 ($generated@@40 $generated@@58 $generated@@56) $generated@@57))
)))
(assert (forall (($generated@@59 T@U) ) (! (<= 0 ($generated@@24 $generated@@59))
 :pattern ( ($generated@@24 $generated@@59))
)))
(assert  (=> (< 0 $generated@@60) ($generated@@32 $generated@@9 ($generated@@13 $generated@@26) $generated)))
(assert  (=> (< 0 $generated@@60) ($generated@@32 $generated@@9 ($generated@@13 $generated@@49) $generated)))
(assert  (=> (< 0 $generated@@60) ($generated@@32 $generated@@9 ($generated@@13 $generated@@46) $generated)))
(assert  (=> (< 0 $generated@@60) ($generated@@32 $generated@@9 ($generated@@13 $generated@@34) $generated)))
(assert  (=> (< 0 $generated@@60) ($generated@@32 $generated@@9 ($generated@@13 $generated@@54) $generated)))
(assert  (=> (< 1 $generated@@60) ($generated@@32 $generated@@9 ($generated@@13 $generated@@48) $generated)))
(assert  (=> (< 1 $generated@@60) ($generated@@32 $generated@@9 ($generated@@13 $generated@@37) $generated)))
(assert  (=> (< 2 $generated@@60) ($generated@@32 $generated@@9 ($generated@@13 $generated@@36) $generated)))
(assert (forall (($generated@@62 T@U) ) (! (= ($generated@@61 ($generated@@45 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@23 ($generated@@45 $generated@@63)) $generated@@1)
 :pattern ( ($generated@@45 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@39 $generated@@65 ($generated@@40 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@40 $generated@@65 $generated@@64))
)))
(assert (= $generated@@46 ($generated@@27 16)))
(assert (= $generated@@54 ($generated@@27 65535)))
(assert (= $generated@@34 ($generated@@27 65536)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@66 $generated@@77 $generated@@78 $generated@@79 ($generated@@73 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@82 $generated@@83) $generated@@80)
 :weight 0
)) (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@66 $generated@@84 $generated@@85 $generated@@86 ($generated@@73 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@66 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@66 $generated@@93 $generated@@94 $generated@@95 ($generated@@73 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)))) (= ($generated@@7 $generated@@67) 4)) (= ($generated@@7 $generated@@68) 5)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@70 $generated@@102 $generated@@103 ($generated@@74 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@106) $generated@@104)
 :weight 0
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@111 $generated@@112) (= ($generated@@70 $generated@@107 $generated@@108 ($generated@@74 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@112) ($generated@@70 $generated@@107 $generated@@108 $generated@@110 $generated@@112)))
 :weight 0
))) (= ($generated@@7 $generated@@71) 6)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (= ($generated@@7 ($generated@@72 $generated@@113 $generated@@114)) 7))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@75 ($generated@@72 $generated@@115 $generated@@116)) $generated@@115)
 :pattern ( ($generated@@72 $generated@@115 $generated@@116))
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@76 ($generated@@72 $generated@@117 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@72 $generated@@117 $generated@@118))
))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@12 ($generated@@66 $generated@@67 $generated@@68 $generated@@8 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@12 ($generated@@39 $generated@@8 ($generated@@70 $generated@@68 $generated@@71 ($generated@@70 $generated@@67 ($generated@@72 $generated@@68 $generated@@71) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@66 $generated@@67 $generated@@68 $generated@@8 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@125 Int) ($generated@@126 Int) ) (! (= ($generated@@53 $generated@@125 $generated@@126) (mod $generated@@125 $generated@@126))
 :pattern ( ($generated@@53 $generated@@125 $generated@@126))
)))
(assert (forall (($generated@@127 Int) ($generated@@128 Int) ) (! (= ($generated@@35 $generated@@127 $generated@@128) (* $generated@@127 $generated@@128))
 :pattern ( ($generated@@35 $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ) (!  (=> ($generated@@50 $generated@@129 ($generated@@45 $generated@@130)) (and (= ($generated@@40 $generated@@43 ($generated@@39 $generated@@43 $generated@@129)) $generated@@129) ($generated@@32 $generated@@43 ($generated@@39 $generated@@43 $generated@@129) ($generated@@45 $generated@@130))))
 :pattern ( ($generated@@50 $generated@@129 ($generated@@45 $generated@@130)))
)))
(assert (= ($generated@@23 $generated@@33) $generated@@3))
(assert (= ($generated@@131 $generated@@33) $generated@@5))
(assert (= ($generated@@23 $generated@@44) $generated@@4))
(assert (= ($generated@@131 $generated@@44) $generated@@6))
(assert (forall (($generated@@132 Int) ) (! (= ($generated@@40 $generated@@9 ($generated@@13 ($generated@@27 $generated@@132))) ($generated@@29 $generated@@71 ($generated@@40 $generated@@9 ($generated@@13 $generated@@132))))
 :pattern ( ($generated@@40 $generated@@9 ($generated@@13 ($generated@@27 $generated@@132))))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@T) ) (! (= ($generated@@40 $generated@@134 ($generated@@29 $generated@@134 $generated@@133)) ($generated@@29 $generated@@71 ($generated@@40 $generated@@134 $generated@@133)))
 :pattern ( ($generated@@40 $generated@@134 ($generated@@29 $generated@@134 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ) (!  (=> (= ($generated@@24 $generated@@135) 0) (= $generated@@135 $generated@@25))
 :pattern ( ($generated@@24 $generated@@135))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@32 $generated@@43 $generated@@137 ($generated@@45 $generated@@138)) (forall (($generated@@139 Int) ) (!  (=> (and (<= 0 $generated@@139) (< $generated@@139 ($generated@@24 $generated@@137))) ($generated@@50 ($generated@@136 $generated@@137 $generated@@139) $generated@@138))
 :pattern ( ($generated@@136 $generated@@137 $generated@@139))
)))
 :pattern ( ($generated@@32 $generated@@43 $generated@@137 ($generated@@45 $generated@@138)))
)))
(assert (forall (($generated@@140 T@U) ) (! ($generated@@32 $generated@@9 $generated@@140 $generated)
 :pattern ( ($generated@@32 $generated@@9 $generated@@140 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 (T@U) Bool)
(declare-fun $generated@@150 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let (($generated@@151 true))
(let (($generated@@152  (=> (and (< ($generated@@14 ($generated@@39 $generated@@9 ($generated@@136 $generated@@141 $generated@@142))) ($generated@@27 0)) (= (ControlFlow 0 10) 2)) $generated@@151)))
(let (($generated@@153  (=> (<= ($generated@@27 0) ($generated@@14 ($generated@@39 $generated@@9 ($generated@@136 $generated@@141 $generated@@142)))) (and (=> (= (ControlFlow 0 4) (- 0 9)) (and (<= 0 $generated@@142) (< $generated@@142 ($generated@@24 $generated@@141)))) (=> (and (<= 0 $generated@@142) (< $generated@@142 ($generated@@24 $generated@@141))) (=> (= $generated@@143 $generated@@54) (and (=> (= (ControlFlow 0 4) (- 0 8)) (and (<= ($generated@@27 (- 0 9223372036854775808)) $generated@@143) (< $generated@@143 9223372036854775808))) (=> (and (<= ($generated@@27 (- 0 9223372036854775808)) $generated@@143) (< $generated@@143 9223372036854775808)) (and (=> (= (ControlFlow 0 4) (- 0 7)) (and (<= (- 0 $generated@@34) $generated@@143) (<= $generated@@143 ($generated@@35 $generated@@36 $generated@@37)))) (=> (and (<= (- 0 $generated@@34) $generated@@143) (<= $generated@@143 ($generated@@35 $generated@@36 $generated@@37))) (=> (= $generated@@144 $generated@@54) (and (=> (= (ControlFlow 0 4) (- 0 6)) (and (<= ($generated@@27 (- 0 9223372036854775808)) $generated@@144) (< $generated@@144 9223372036854775808))) (=> (and (<= ($generated@@27 (- 0 9223372036854775808)) $generated@@144) (< $generated@@144 9223372036854775808)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= (- 0 $generated@@34) $generated@@144) (<= $generated@@144 ($generated@@35 $generated@@36 $generated@@37)))) (=> (and (<= (- 0 $generated@@34) $generated@@144) (<= $generated@@144 ($generated@@35 $generated@@36 $generated@@37))) (=> (= (ControlFlow 0 4) 2) $generated@@151))))))))))))))))
(let (($generated@@154  (=> (and (and (<= ($generated@@27 0) $generated@@142) (and (<= ($generated@@27 0) $generated@@142) (< $generated@@142 $generated@@46))) (= $generated@@145 ($generated@@27 0))) (and (=> (= (ControlFlow 0 11) (- 0 13)) (and (<= ($generated@@27 (- 0 9223372036854775808)) $generated@@145) (< $generated@@145 9223372036854775808))) (=> (and (<= ($generated@@27 (- 0 9223372036854775808)) $generated@@145) (< $generated@@145 9223372036854775808)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (and (<= 0 $generated@@142) (< $generated@@142 ($generated@@24 $generated@@141)))) (=> (and (<= 0 $generated@@142) (< $generated@@142 ($generated@@24 $generated@@141))) (and (=> (= (ControlFlow 0 11) 4) $generated@@153) (=> (= (ControlFlow 0 11) 10) $generated@@152)))))))))
(let (($generated@@155  (=> (and (not (and (<= ($generated@@27 0) $generated@@142) (and (<= ($generated@@27 0) $generated@@142) (< $generated@@142 $generated@@46)))) (= (ControlFlow 0 3) 2)) $generated@@151)))
(let (($generated@@156  (=> ($generated@@32 $generated@@43 $generated@@141 $generated@@44) (and (=> (= (ControlFlow 0 14) 11) $generated@@154) (=> (= (ControlFlow 0 14) 3) $generated@@155)))))
(let (($generated@@157 true))
(let (($generated@@158  (=> (= $generated@@146 ($generated@@69 $generated@@147 $generated@@148 $generated@@2 false)) (and (=> (= (ControlFlow 0 15) 14) $generated@@156) (=> (= (ControlFlow 0 15) 1) $generated@@157)))))
(let (($generated@@159  (=> (and (and ($generated@@149 $generated@@148) ($generated@@150 $generated@@148)) (and (= 6 $generated@@60) (= (ControlFlow 0 16) 15))) $generated@@158)))
$generated@@159))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
