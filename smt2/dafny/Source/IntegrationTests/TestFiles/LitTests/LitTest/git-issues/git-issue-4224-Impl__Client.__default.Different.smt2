(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@T T@T) T@T)
(declare-fun $generated@@37 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@39 (T@T) T@T)
(declare-fun $generated@@60 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@T T@U T@U) Bool)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@1))
(assert (= ($generated@@23 $generated@@0) $generated@@2))
(assert (= ($generated@@7 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@29 ($generated@@26 $generated@@28) $generated@@30) ($generated@@24 $generated@@25 $generated@@29 ($generated@@27 $generated@@28) $generated@@30))
 :pattern ( ($generated@@24 $generated@@25 $generated@@29 ($generated@@26 $generated@@28) $generated@@30))
 :pattern ( ($generated@@24 $generated@@25 $generated@@29 ($generated@@27 $generated@@28) $generated@@30))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@40 T@T) ($generated@@41 T@T) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@33 $generated@@40 $generated@@41 ($generated@@37 $generated@@40 $generated@@41 $generated@@43 $generated@@44 $generated@@42) $generated@@44) $generated@@42)
 :weight 0
)) (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (or (= $generated@@49 $generated@@50) (= ($generated@@33 $generated@@45 $generated@@46 ($generated@@37 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@50) ($generated@@33 $generated@@45 $generated@@46 $generated@@48 $generated@@50)))
 :weight 0
))) (= ($generated@@7 $generated@@34) 4)) (= ($generated@@7 $generated@@35) 5)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ) (= ($generated@@7 ($generated@@36 $generated@@51 $generated@@52)) 6))) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (! (= ($generated@@38 ($generated@@36 $generated@@53 $generated@@54)) $generated@@53)
 :pattern ( ($generated@@36 $generated@@53 $generated@@54))
))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@39 ($generated@@36 $generated@@55 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@36 $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@58 ($generated@@27 $generated@@57) $generated@@59)  (or (= $generated@@58 $generated@@31) ($generated@@12 ($generated@@32 $generated@@8 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@25 ($generated@@36 $generated@@34 $generated@@35) $generated@@59 $generated@@58) $generated@@3)))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@58 ($generated@@27 $generated@@57) $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@60 $generated@@62 ($generated@@32 $generated@@62 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@32 $generated@@62 $generated@@61))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@63 $generated@@25 $generated@@65 ($generated@@26 $generated@@64))  (and ($generated@@63 $generated@@25 $generated@@65 ($generated@@27 $generated@@64)) (or (not (= $generated@@65 $generated@@31)) (not true))))
 :pattern ( ($generated@@63 $generated@@25 $generated@@65 ($generated@@26 $generated@@64)))
 :pattern ( ($generated@@63 $generated@@25 $generated@@65 ($generated@@27 $generated@@64)))
)))
(assert (forall (($generated@@67 T@U) ) (!  (and (= ($generated@@23 ($generated@@26 $generated@@67)) $generated@@4) (= ($generated@@66 ($generated@@26 $generated@@67)) $generated@@6))
 :pattern ( ($generated@@26 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ) (!  (and (= ($generated@@23 ($generated@@27 $generated@@68)) $generated@@5) (= ($generated@@66 ($generated@@27 $generated@@68)) $generated@@6))
 :pattern ( ($generated@@27 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@63 $generated@@25 $generated@@71 ($generated@@27 $generated@@70))  (or (= $generated@@71 $generated@@31) (= ($generated@@69 $generated@@71) ($generated@@27 $generated@@70))))
 :pattern ( ($generated@@63 $generated@@25 $generated@@71 ($generated@@27 $generated@@70)))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@72 ($generated@@26 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@26 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@74 ($generated@@27 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@27 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@32 $generated@@77 ($generated@@60 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@60 $generated@@77 $generated@@76))
)))
(assert  (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@78 $generated@@81 $generated@@82 $generated@@83 ($generated@@80 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@86 $generated@@87) $generated@@84)
 :weight 0
)) (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@78 $generated@@88 $generated@@89 $generated@@90 ($generated@@80 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@78 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@78 $generated@@97 $generated@@98 $generated@@99 ($generated@@80 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@78 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)))))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 Bool) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@12 ($generated@@78 $generated@@25 $generated@@34 $generated@@8 ($generated@@79 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))  (=> (and (or (not (= $generated@@110 $generated@@106)) (not true)) ($generated@@12 ($generated@@32 $generated@@8 ($generated@@33 $generated@@34 $generated@@35 ($generated@@33 $generated@@25 ($generated@@36 $generated@@34 $generated@@35) $generated@@107 $generated@@110) $generated@@108)))) $generated@@109))
 :pattern ( ($generated@@78 $generated@@25 $generated@@34 $generated@@8 ($generated@@79 $generated@@106 $generated@@107 $generated@@108 $generated@@109) $generated@@110 $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (! ($generated@@24 $generated@@9 $generated@@113 $generated $generated@@112)
 :pattern ( ($generated@@24 $generated@@9 $generated@@113 $generated $generated@@112))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ) (! ($generated@@24 $generated@@10 $generated@@115 $generated@@0 $generated@@114)
 :pattern ( ($generated@@24 $generated@@10 $generated@@115 $generated@@0 $generated@@114))
)))
(assert (forall (($generated@@116 T@U) ) (! ($generated@@63 $generated@@9 $generated@@116 $generated)
 :pattern ( ($generated@@63 $generated@@9 $generated@@116 $generated))
)))
(assert (forall (($generated@@117 T@U) ) (! ($generated@@63 $generated@@10 $generated@@117 $generated@@0)
 :pattern ( ($generated@@63 $generated@@10 $generated@@117 $generated@@0))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@124 (T@U) T@U)
(declare-fun $generated@@125 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@126  (=> (and (= $generated@@118 ($generated@@79 $generated@@31 $generated@@119 $generated@@3 false)) (= (ControlFlow 0 2) (- 0 1))) (or (not (= $generated@@120 $generated@@121)) (not true)))))
(let (($generated@@127  (=> (and (and (and ($generated@@122 $generated@@119) ($generated@@123 $generated@@119)) (and ($generated@@63 $generated@@25 $generated@@120 ($generated@@26 ($generated@@124 $generated))) ($generated@@24 $generated@@25 $generated@@120 ($generated@@26 ($generated@@124 $generated)) $generated@@119))) (and (and ($generated@@63 $generated@@25 $generated@@121 ($generated@@26 ($generated@@124 $generated@@0))) ($generated@@24 $generated@@25 $generated@@121 ($generated@@26 ($generated@@124 $generated@@0)) $generated@@119)) (and (= 1 $generated@@125) (= (ControlFlow 0 3) 2)))) $generated@@126)))
$generated@@127)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
