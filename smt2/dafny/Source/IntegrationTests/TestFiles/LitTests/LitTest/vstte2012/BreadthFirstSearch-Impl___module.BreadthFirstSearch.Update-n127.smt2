(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.List () T@U)
(declare-fun Tagclass._module.BreadthFirstSearch? () T@U)
(declare-fun Tagclass._module.BreadthFirstSearch () T@U)
(declare-fun |##_module.List.Nil| () T@U)
(declare-fun |##_module.List.Cons| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$List () T@U)
(declare-fun tytagFamily$BreadthFirstSearch () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.BreadthFirstSearch.Find (T@U T@U T@U T@U T@U) T@U)
(declare-fun |_module.BreadthFirstSearch.Find#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.BreadthFirstSearch (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType () T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Tclass._module.List (T@U) T@U)
(declare-fun _module.BreadthFirstSearch.ValidMap (T@U T@U T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun _module.BreadthFirstSearch.IsPath (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.BreadthFirstSearch? (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.List.Nil| () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |_module.List#Equal| (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun _module.List.Cons_q (T@U) Bool)
(declare-fun _module.List.head (T@U) T@U)
(declare-fun _module.List.tail (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |#_module.List.Cons| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |_module.BreadthFirstSearch.IsPath#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun _module.List.Nil_q (T@U) Bool)
(declare-fun |_module.BreadthFirstSearch.Succ#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.BreadthFirstSearch.Succ (T@U T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun dtype (T@U) T@U)
(declare-fun |_module.BreadthFirstSearch.ValidMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |$IsA#_module.List| (T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._module.List_0 (T@U) T@U)
(declare-fun Tclass._module.BreadthFirstSearch?_0 (T@U) T@U)
(declare-fun Tclass._module.BreadthFirstSearch_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.List Tagclass._module.BreadthFirstSearch? Tagclass._module.BreadthFirstSearch |##_module.List.Nil| |##_module.List.Cons| |tytagFamily$_tuple#2| tytagFamily$List tytagFamily$BreadthFirstSearch)
)
(assert  (and (and (= (Ctor refType) 3) (= (Ctor MapType) 4)) (= (Ctor DatatypeTypeType) 5)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex T@U) (this T@U) (|source#0| T@U) (|x#0| T@U) (|m#0| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.Find#canCall| _module.BreadthFirstSearch$Vertex this |source#0| |x#0| |m#0|) (and (< 3 $FunctionContextHeight) (and (and (and (and (and (or (not (= this null)) (not true)) ($Is refType this (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex))) ($IsBox |source#0| _module.BreadthFirstSearch$Vertex)) ($IsBox |x#0| _module.BreadthFirstSearch$Vertex)) ($Is MapType |m#0| (TMap _module.BreadthFirstSearch$Vertex (Tclass._module.List _module.BreadthFirstSearch$Vertex)))) (and (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex this |source#0| |m#0|) (|Set#IsMember| (|Map#Domain| |m#0|) |x#0|))))) (and (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex ($LS $LZ) this |source#0| |x#0| (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex this |source#0| |x#0| |m#0|)) ($Is DatatypeTypeType (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex this |source#0| |x#0| |m#0|) (Tclass._module.List _module.BreadthFirstSearch$Vertex))))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex this |source#0| |x#0| |m#0|))
))))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@0) $h) ($IsAlloc refType |c#0| (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@0) $h))
)))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (DatatypeCtorId |#_module.List.Nil|) |##_module.List.Nil|))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert (forall ((_module.List$T T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T) $h@@0))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 6)) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@1 T@U) ($o T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@1) $h@@1)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@1) $h@@1))
)))
(assert (forall ((_module.List$T@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.List.Nil| (Tclass._module.List _module.List$T@@0)))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|_module.List#Equal| a@@7 b@@4) (= a@@7 b@@4))
 :pattern ( (|_module.List#Equal| a@@7 b@@4))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) ) (!  (=> (and (_module.List.Cons_q a@@8) (_module.List.Cons_q b@@5)) (= (|_module.List#Equal| a@@8 b@@5)  (and (= (_module.List.head a@@8) (_module.List.head b@@5)) (|_module.List#Equal| (_module.List.tail a@@8) (_module.List.tail b@@5)))))
 :pattern ( (|_module.List#Equal| a@@8 b@@5) (_module.List.Cons_q a@@8))
 :pattern ( (|_module.List#Equal| a@@8 b@@5) (_module.List.Cons_q b@@5))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((_module.List$T@@1 T@U) (|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1))  (and ($IsBox |a#6#0#0| _module.List$T@@1) ($Is DatatypeTypeType |a#6#1#0| (Tclass._module.List _module.List$T@@1))))
 :pattern ( ($Is DatatypeTypeType (|#_module.List.Cons| |a#6#0#0| |a#6#1#0|) (Tclass._module.List _module.List$T@@1)))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (! (= (|Set#Subset| a@@9 b@@6) (forall ((o@@3 T@U) ) (!  (=> (|Set#IsMember| a@@9 o@@3) (|Set#IsMember| b@@6 o@@3))
 :pattern ( (|Set#IsMember| a@@9 o@@3))
 :pattern ( (|Set#IsMember| b@@6 o@@3))
)))
 :pattern ( (|Set#Subset| a@@9 b@@6))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@2 T@U) ($ly T@U) (this@@0 T@U) (|source#0@@0| T@U) (|dest#0| T@U) (|p#0| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.IsPath#canCall| _module.BreadthFirstSearch$Vertex@@2 this@@0 |source#0@@0| |dest#0| (Lit DatatypeTypeType |p#0|)) (and (< 1 $FunctionContextHeight) (and (and (and (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@2))) ($IsBox |source#0@@0| _module.BreadthFirstSearch$Vertex@@2)) ($IsBox |dest#0| _module.BreadthFirstSearch$Vertex@@2)) ($Is DatatypeTypeType |p#0| (Tclass._module.List _module.BreadthFirstSearch$Vertex@@2))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |p#0|)))))) (let ((|tail#3| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |p#0|)))))
(let ((|v#3| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |p#0|)))))
 (and (|_module.BreadthFirstSearch.Succ#canCall| _module.BreadthFirstSearch$Vertex@@2 this@@0 |v#3|) (=> (|Set#IsMember| (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@2 this@@0 |v#3|) |dest#0|) (|_module.BreadthFirstSearch.IsPath#canCall| _module.BreadthFirstSearch$Vertex@@2 this@@0 |source#0@@0| |v#3| |tail#3|)))))) (= (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@2 ($LS $ly) this@@0 |source#0@@0| |dest#0| (Lit DatatypeTypeType |p#0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |p#0|)) (= |source#0@@0| |dest#0|) (let ((|tail#2| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |p#0|)))))
(let ((|v#2| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |p#0|)))))
 (and (|Set#IsMember| (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@2 this@@0 |v#2|) |dest#0|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@2 ($LS $ly) this@@0 |source#0@@0| |v#2| |tail#2|))))))))
 :weight 3
 :pattern ( (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@2 ($LS $ly) this@@0 |source#0@@0| |dest#0| (Lit DatatypeTypeType |p#0|)))
))))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@2)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@2) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@2))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@2))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.List.Nil_q d@@1) (= (DatatypeCtorId d@@1) |##_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.List.Cons_q d@@2) (= (DatatypeCtorId d@@2) |##_module.List.Cons|))
 :pattern ( (_module.List.Cons_q d@@2))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (! (= (|Set#Disjoint| a@@10 b@@7) (forall ((o@@4 T@U) ) (!  (or (not (|Set#IsMember| a@@10 o@@4)) (not (|Set#IsMember| b@@7 o@@4)))
 :pattern ( (|Set#IsMember| a@@10 o@@4))
 :pattern ( (|Set#IsMember| b@@7 o@@4))
)))
 :pattern ( (|Set#Disjoint| a@@10 b@@7))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@3) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@3 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.List.Cons_q d@@4) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@4 (|#_module.List.Cons| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.List.Cons_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.List.Nil_q d@@5) (= d@@5 |#_module.List.Nil|))
 :pattern ( (_module.List.Nil_q d@@5))
)))
(assert (= (Ctor SetType) 9))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@3 T@U) (this@@1 T@U) (|source#0@@1| T@U) (|x#0@@0| T@U) (|m#0@@0| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.Find#canCall| _module.BreadthFirstSearch$Vertex@@3 this@@1 |source#0@@1| |x#0@@0| |m#0@@0|) (and (< 3 $FunctionContextHeight) (and (and (and (and (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@3))) ($IsBox |source#0@@1| _module.BreadthFirstSearch$Vertex@@3)) ($IsBox |x#0@@0| _module.BreadthFirstSearch$Vertex@@3)) ($Is MapType |m#0@@0| (TMap _module.BreadthFirstSearch$Vertex@@3 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@3)))) (and (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@3 this@@1 |source#0@@1| |m#0@@0|) (|Set#IsMember| (|Map#Domain| |m#0@@0|) |x#0@@0|))))) (= (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@3 this@@1 |source#0@@1| |x#0@@0| |m#0@@0|) ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@0|) |x#0@@0|))))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@3 this@@1 |source#0@@1| |x#0@@0| |m#0@@0|))
))))
(assert ($IsGhostField alloc))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@4 T@U) (this@@2 T@U) (|x#0@@1| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.Succ#canCall| _module.BreadthFirstSearch$Vertex@@4 this@@2 |x#0@@1|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@4))) ($IsBox |x#0@@1| _module.BreadthFirstSearch$Vertex@@4)))) ($Is SetType (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@4 this@@2 |x#0@@1|) (TSet _module.BreadthFirstSearch$Vertex@@4)))
 :pattern ( (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@4 this@@2 |x#0@@1|))
))))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@5 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@5))  (and ($Is refType |c#0@@0| (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@5)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@5)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@5)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@6 T@U) ($ly@@0 T@U) (this@@3 T@U) (|source#0@@2| T@U) (|dest#0@@0| T@U) (|p#0@@0| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.IsPath#canCall| _module.BreadthFirstSearch$Vertex@@6 (Lit refType this@@3) (Lit BoxType |source#0@@2|) (Lit BoxType |dest#0@@0|) (Lit DatatypeTypeType |p#0@@0|)) (and (< 1 $FunctionContextHeight) (and (and (and (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@6))) ($IsBox |source#0@@2| _module.BreadthFirstSearch$Vertex@@6)) ($IsBox |dest#0@@0| _module.BreadthFirstSearch$Vertex@@6)) ($Is DatatypeTypeType |p#0@@0| (Tclass._module.List _module.BreadthFirstSearch$Vertex@@6))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.List.Nil_q (Lit DatatypeTypeType |p#0@@0|)))))) (let ((|tail#5| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |p#0@@0|)))))
(let ((|v#5| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |p#0@@0|)))))
 (and (|_module.BreadthFirstSearch.Succ#canCall| _module.BreadthFirstSearch$Vertex@@6 (Lit refType this@@3) |v#5|) (=> (|Set#IsMember| (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@6 (Lit refType this@@3) |v#5|) (Lit BoxType |dest#0@@0|)) (|_module.BreadthFirstSearch.IsPath#canCall| _module.BreadthFirstSearch$Vertex@@6 (Lit refType this@@3) (Lit BoxType |source#0@@2|) |v#5| |tail#5|)))))) (= (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@6 ($LS $ly@@0) (Lit refType this@@3) (Lit BoxType |source#0@@2|) (Lit BoxType |dest#0@@0|) (Lit DatatypeTypeType |p#0@@0|)) (ite (_module.List.Nil_q (Lit DatatypeTypeType |p#0@@0|)) (= (Lit BoxType |source#0@@2|) (Lit BoxType |dest#0@@0|)) (let ((|tail#4| (Lit DatatypeTypeType (_module.List.tail (Lit DatatypeTypeType |p#0@@0|)))))
(let ((|v#4| (Lit BoxType (_module.List.head (Lit DatatypeTypeType |p#0@@0|)))))
 (and (|Set#IsMember| (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@6 (Lit refType this@@3) |v#4|) (Lit BoxType |dest#0@@0|)) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@6 ($LS $ly@@0) (Lit refType this@@3) (Lit BoxType |source#0@@2|) |v#4| |tail#4|))))))))
 :weight 3
 :pattern ( (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@6 ($LS $ly@@0) (Lit refType this@@3) (Lit BoxType |source#0@@2|) (Lit BoxType |dest#0@@0|) (Lit DatatypeTypeType |p#0@@0|)))
))))
(assert (forall ((_module.List$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.List _module.List$T@@2)) Tagclass._module.List) (= (TagFamily (Tclass._module.List _module.List$T@@2)) tytagFamily$List))
 :pattern ( (Tclass._module.List _module.List$T@@2))
)))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@7 T@U) ) (!  (and (= (Tag (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@7)) Tagclass._module.BreadthFirstSearch?) (= (TagFamily (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@7)) tytagFamily$BreadthFirstSearch))
 :pattern ( (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@7))
)))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@8 T@U) ) (!  (and (= (Tag (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@8)) Tagclass._module.BreadthFirstSearch) (= (TagFamily (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@8)) tytagFamily$BreadthFirstSearch))
 :pattern ( (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@8))
)))
(assert (forall ((h@@3 T@U) (k@@2 T@U) ) (!  (=> ($HeapSuccGhost h@@3 k@@2) (and ($HeapSucc h@@3 k@@2) (forall ((o@@5 T@U) (f T@U) ) (!  (=> (not ($IsGhostField f)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 o@@5) f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k@@2 o@@5) f)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k@@2 o@@5) f))
))))
 :pattern ( ($HeapSuccGhost h@@3 k@@2))
)))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@9 T@U) ($o@@0 T@U) ) (! (= ($Is refType $o@@0 (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@9))  (or (= $o@@0 null) (= (dtype $o@@0) (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@9))))
 :pattern ( ($Is refType $o@@0 (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@9)))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) (o@@6 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@11 b@@8) o@@6)  (or (|Set#IsMember| a@@11 o@@6) (|Set#IsMember| b@@8 o@@6)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@11 b@@8) o@@6))
)))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (!  (=> (|Set#Disjoint| a@@12 b@@9) (and (= (|Set#Difference| (|Set#Union| a@@12 b@@9) a@@12) b@@9) (= (|Set#Difference| (|Set#Union| a@@12 b@@9) b@@9) a@@12)))
 :pattern ( (|Set#Union| a@@12 b@@9))
)))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@10 T@U) ($ly@@1 T@U) (this@@4 T@U) (|source#0@@3| T@U) (|dest#0@@1| T@U) (|p#0@@1| T@U) ) (! (= (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@10 ($LS $ly@@1) this@@4 |source#0@@3| |dest#0@@1| |p#0@@1|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@10 $ly@@1 this@@4 |source#0@@3| |dest#0@@1| |p#0@@1|))
 :pattern ( (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@10 ($LS $ly@@1) this@@4 |source#0@@3| |dest#0@@1| |p#0@@1|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@11 T@U) (this@@5 T@U) (|source#0@@4| T@U) (|m#0@@1| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@11 (Lit refType this@@5) (Lit BoxType |source#0@@4|) (Lit MapType |m#0@@1|)) (and (< 2 $FunctionContextHeight) (and (and (and (or (not (= this@@5 null)) (not true)) ($Is refType this@@5 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@11))) ($IsBox |source#0@@4| _module.BreadthFirstSearch$Vertex@@11)) ($Is MapType |m#0@@1| (TMap _module.BreadthFirstSearch$Vertex@@11 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@11)))))) (and (forall ((|v#2@@0| T@U) ) (!  (=> ($IsBox |v#2@@0| _module.BreadthFirstSearch$Vertex@@11) (=> (|Set#IsMember| (|Map#Domain| |m#0@@1|) |v#2@@0|) (|_module.BreadthFirstSearch.IsPath#canCall| _module.BreadthFirstSearch$Vertex@@11 (Lit refType this@@5) (Lit BoxType |source#0@@4|) |v#2@@0| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |m#0@@1|)) |v#2@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@1|) |v#2@@0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@1|) |v#2@@0|))
)) (= (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@11 (Lit refType this@@5) (Lit BoxType |source#0@@4|) (Lit MapType |m#0@@1|)) (forall ((|v#2@@1| T@U) ) (!  (=> ($IsBox |v#2@@1| _module.BreadthFirstSearch$Vertex@@11) (=> (|Set#IsMember| (|Map#Domain| |m#0@@1|) |v#2@@1|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@11 ($LS $LZ) (Lit refType this@@5) (Lit BoxType |source#0@@4|) |v#2@@1| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |m#0@@1|)) |v#2@@1|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@1|) |v#2@@1|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@1|) |v#2@@1|))
)))))
 :weight 3
 :pattern ( (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@11 (Lit refType this@@5) (Lit BoxType |source#0@@4|) (Lit MapType |m#0@@1|)))
))))
(assert (forall ((d@@6 T@U) ) (!  (=> (|$IsA#_module.List| d@@6) (or (_module.List.Nil_q d@@6) (_module.List.Cons_q d@@6)))
 :pattern ( (|$IsA#_module.List| d@@6))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@12 T@U) (this@@6 T@U) (|source#0@@5| T@U) (|x#0@@2| T@U) (|m#0@@2| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.Find#canCall| _module.BreadthFirstSearch$Vertex@@12 this@@6 |source#0@@5| |x#0@@2| (Lit MapType |m#0@@2|)) (and (< 3 $FunctionContextHeight) (and (and (and (and (and (or (not (= this@@6 null)) (not true)) ($Is refType this@@6 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@12))) ($IsBox |source#0@@5| _module.BreadthFirstSearch$Vertex@@12)) ($IsBox |x#0@@2| _module.BreadthFirstSearch$Vertex@@12)) ($Is MapType |m#0@@2| (TMap _module.BreadthFirstSearch$Vertex@@12 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@12)))) (and (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@12 this@@6 |source#0@@5| (Lit MapType |m#0@@2|)) (|Set#IsMember| (|Map#Domain| |m#0@@2|) |x#0@@2|))))) (= (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@12 this@@6 |source#0@@5| |x#0@@2| (Lit MapType |m#0@@2|)) ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |m#0@@2|)) |x#0@@2|))))
 :weight 3
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@12 this@@6 |source#0@@5| |x#0@@2| (Lit MapType |m#0@@2|)))
))))
(assert (forall ((_module.List$T@@3 T@U) (d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 (Tclass._module.List _module.List$T@@3)) (or (_module.List.Nil_q d@@7) (_module.List.Cons_q d@@7)))
 :pattern ( (_module.List.Cons_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass._module.List _module.List$T@@3)))
 :pattern ( (_module.List.Nil_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass._module.List _module.List$T@@3)))
)))
(assert (forall ((a@@13 T@U) (b@@10 T@U) ) (!  (=> (|Set#Equal| a@@13 b@@10) (= a@@13 b@@10))
 :pattern ( (|Set#Equal| a@@13 b@@10))
)))
(assert (forall ((a@@14 T@U) (b@@11 T@U) (c T@U) ) (!  (=> (or (not (= a@@14 c)) (not true)) (=> (and ($HeapSucc a@@14 b@@11) ($HeapSucc b@@11 c)) ($HeapSucc a@@14 c)))
 :pattern ( ($HeapSucc a@@14 b@@11) ($HeapSucc b@@11 c))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (_module.BreadthFirstSearch$Vertex@@13 T@U) (this@@7 T@U) (|x#0@@3| T@U) ) (!  (=> (and (or (|_module.BreadthFirstSearch.Succ#canCall| _module.BreadthFirstSearch$Vertex@@13 this@@7 |x#0@@3|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@7 null)) (not true)) ($IsAlloc refType this@@7 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@13) $Heap)) (and ($IsBox |x#0@@3| _module.BreadthFirstSearch$Vertex@@13) ($IsAllocBox |x#0@@3| _module.BreadthFirstSearch$Vertex@@13 $Heap))))) ($IsGoodHeap $Heap)) ($IsAlloc SetType (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@13 this@@7 |x#0@@3|) (TSet _module.BreadthFirstSearch$Vertex@@13) $Heap))
 :pattern ( ($IsAlloc SetType (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@13 this@@7 |x#0@@3|) (TSet _module.BreadthFirstSearch$Vertex@@13) $Heap))
))))
(assert (forall ((a@@15 T@U) (b@@12 T@U) ) (!  (=> (and (_module.List.Nil_q a@@15) (_module.List.Nil_q b@@12)) (|_module.List#Equal| a@@15 b@@12))
 :pattern ( (|_module.List#Equal| a@@15 b@@12) (_module.List.Nil_q a@@15))
 :pattern ( (|_module.List#Equal| a@@15 b@@12) (_module.List.Nil_q b@@12))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@4) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@1) ($IsAllocBox bx@@1 t0@@1 h@@4))
 :pattern ( (|Set#IsMember| v@@3 bx@@1))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@4))
)))
(assert (forall ((t@@3 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@3 u)) t@@3)
 :pattern ( (TMap t@@3 u))
)))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)
 :pattern ( (TMap t@@4 u@@0))
)))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@5 u@@1)) TagMap)
 :pattern ( (TMap t@@5 u@@1))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|)) |a#6#1#0@@0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0@@0| |a#6#1#0@@0|))
)))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) ) (! (= (DatatypeCtorId (|#_module.List.Cons| |a#4#0#0@@0| |a#4#1#0@@0|)) |##_module.List.Cons|)
 :pattern ( (|#_module.List.Cons| |a#4#0#0@@0| |a#4#1#0@@0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.List.head (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.List.Cons| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.List.tail (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.List.Cons| |a#10#0#0| |a#10#1#0|))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@0 T@U) (_module.BreadthFirstSearch$Vertex@@14 T@U) (this@@8 T@U) (|source#0@@6| T@U) (|x#0@@4| T@U) (|m#0@@3| T@U) ) (!  (=> (and (or (|_module.BreadthFirstSearch.Find#canCall| _module.BreadthFirstSearch$Vertex@@14 this@@8 |source#0@@6| |x#0@@4| |m#0@@3|) (and (< 3 $FunctionContextHeight) (and (and (and (and (and (or (not (= this@@8 null)) (not true)) ($IsAlloc refType this@@8 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@14) $Heap@@0)) (and ($IsBox |source#0@@6| _module.BreadthFirstSearch$Vertex@@14) ($IsAllocBox |source#0@@6| _module.BreadthFirstSearch$Vertex@@14 $Heap@@0))) (and ($IsBox |x#0@@4| _module.BreadthFirstSearch$Vertex@@14) ($IsAllocBox |x#0@@4| _module.BreadthFirstSearch$Vertex@@14 $Heap@@0))) (and ($Is MapType |m#0@@3| (TMap _module.BreadthFirstSearch$Vertex@@14 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@14))) ($IsAlloc MapType |m#0@@3| (TMap _module.BreadthFirstSearch$Vertex@@14 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@14)) $Heap@@0))) (and (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@14 this@@8 |source#0@@6| |m#0@@3|) (|Set#IsMember| (|Map#Domain| |m#0@@3|) |x#0@@4|))))) ($IsGoodHeap $Heap@@0)) ($IsAlloc DatatypeTypeType (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@14 this@@8 |source#0@@6| |x#0@@4| |m#0@@3|) (Tclass._module.List _module.BreadthFirstSearch$Vertex@@14) $Heap@@0))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@14 this@@8 |source#0@@6| |x#0@@4| |m#0@@3|) (Tclass._module.List _module.BreadthFirstSearch$Vertex@@14) $Heap@@0))
))))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSet (TSet t@@6)) t@@6)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSet t@@7)) TagSet)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((_module.List$T@@4 T@U) ) (! (= (Tclass._module.List_0 (Tclass._module.List _module.List$T@@4)) _module.List$T@@4)
 :pattern ( (Tclass._module.List _module.List$T@@4))
)))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@15 T@U) ) (! (= (Tclass._module.BreadthFirstSearch?_0 (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@15)) _module.BreadthFirstSearch$Vertex@@15)
 :pattern ( (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@15))
)))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@16 T@U) ) (! (= (Tclass._module.BreadthFirstSearch_0 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@16)) _module.BreadthFirstSearch$Vertex@@16)
 :pattern ( (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@16))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@7)) x@@7)
 :pattern ( ($Box T@@4 x@@7))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) (t1@@0 T@U) (h@@5 T@U) ) (! (= ($IsAlloc MapType v@@4 (TMap t0@@2 t1@@0) h@@5) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@4) bx@@2) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@2) t1@@0 h@@5) ($IsAllocBox bx@@2 t0@@2 h@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@4) bx@@2))
)))
 :pattern ( ($IsAlloc MapType v@@4 (TMap t0@@2 t1@@0) h@@5))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@17 T@U) (this@@9 T@U) (|source#0@@7| T@U) (|x#0@@5| T@U) (|m#0@@4| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.Find#canCall| _module.BreadthFirstSearch$Vertex@@17 (Lit refType this@@9) (Lit BoxType |source#0@@7|) (Lit BoxType |x#0@@5|) (Lit MapType |m#0@@4|)) (and (< 3 $FunctionContextHeight) (and (and (and (and (and (or (not (= this@@9 null)) (not true)) ($Is refType this@@9 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@17))) ($IsBox |source#0@@7| _module.BreadthFirstSearch$Vertex@@17)) ($IsBox |x#0@@5| _module.BreadthFirstSearch$Vertex@@17)) ($Is MapType |m#0@@4| (TMap _module.BreadthFirstSearch$Vertex@@17 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@17)))) (and (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@17 (Lit refType this@@9) (Lit BoxType |source#0@@7|) (Lit MapType |m#0@@4|)) (|Set#IsMember| (|Map#Domain| |m#0@@4|) |x#0@@5|))))) (= (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@17 (Lit refType this@@9) (Lit BoxType |source#0@@7|) (Lit BoxType |x#0@@5|) (Lit MapType |m#0@@4|)) ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |m#0@@4|)) (Lit BoxType |x#0@@5|)))))
 :weight 3
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@17 (Lit refType this@@9) (Lit BoxType |source#0@@7|) (Lit BoxType |x#0@@5|) (Lit MapType |m#0@@4|)))
))))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0@@0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.List.Cons| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((a@@16 T@U) (b@@13 T@U) ) (! (= (|Set#Union| a@@16 (|Set#Union| a@@16 b@@13)) (|Set#Union| a@@16 b@@13))
 :pattern ( (|Set#Union| a@@16 (|Set#Union| a@@16 b@@13)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@18 T@U) (this@@10 T@U) (|source#0@@8| T@U) (|m#0@@5| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@18 this@@10 |source#0@@8| |m#0@@5|) (and (< 2 $FunctionContextHeight) (and (and (and (or (not (= this@@10 null)) (not true)) ($Is refType this@@10 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@18))) ($IsBox |source#0@@8| _module.BreadthFirstSearch$Vertex@@18)) ($Is MapType |m#0@@5| (TMap _module.BreadthFirstSearch$Vertex@@18 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@18)))))) (and (forall ((|v#0| T@U) ) (!  (=> ($IsBox |v#0| _module.BreadthFirstSearch$Vertex@@18) (=> (|Set#IsMember| (|Map#Domain| |m#0@@5|) |v#0|) (|_module.BreadthFirstSearch.IsPath#canCall| _module.BreadthFirstSearch$Vertex@@18 this@@10 |source#0@@8| |v#0| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@5|) |v#0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@5|) |v#0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@5|) |v#0|))
)) (= (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@18 this@@10 |source#0@@8| |m#0@@5|) (forall ((|v#0@@0| T@U) ) (!  (=> ($IsBox |v#0@@0| _module.BreadthFirstSearch$Vertex@@18) (=> (|Set#IsMember| (|Map#Domain| |m#0@@5|) |v#0@@0|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@18 ($LS $LZ) this@@10 |source#0@@8| |v#0@@0| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@5|) |v#0@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@5|) |v#0@@0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@5|) |v#0@@0|))
)))))
 :pattern ( (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@18 this@@10 |source#0@@8| |m#0@@5|))
))))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((bx@@3 T@U) (s T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@3 (TMap s t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@3)) bx@@3) ($Is MapType ($Unbox MapType bx@@3) (TMap s t@@8))))
 :pattern ( ($IsBox bx@@3 (TMap s t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((d@@8 T@U) (_module.List$T@@5 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.List.Cons_q d@@8) ($IsAlloc DatatypeTypeType d@@8 (Tclass._module.List _module.List$T@@5) $h@@3))) ($IsAllocBox (_module.List.head d@@8) _module.List$T@@5 $h@@3))
 :pattern ( ($IsAllocBox (_module.List.head d@@8) _module.List$T@@5 $h@@3))
)))
(assert  (and (forall ((t0@@3 T@T) (t1@@1 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@1 t2 (MapType1Store t0@@3 t1@@1 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@4 T@U) ) (!  (or (= m@@4 |Map#Empty|) (exists ((k@@3 T@U) ) (|Set#IsMember| (|Map#Domain| m@@4) k@@3)))
 :pattern ( (|Map#Domain| m@@4))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((v@@5 T@U) ) (|Set#IsMember| (|Map#Values| m@@5) v@@5)))
 :pattern ( (|Map#Values| m@@5))
)))
(assert (forall ((m@@6 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@6) item)  (and (|Set#IsMember| (|Map#Domain| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@6) item))
)))
(assert (forall ((m@@7 T@U) (v@@6 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@7) v@@6) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@7) u@@3) (= v@@6 (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@7) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@7) v@@6))
)))
(assert (forall ((m@@8 T@U) (u@@4 T@U) (|u'| T@U) (v@@7 T@U) ) (!  (and (=> (= |u'| u@@4) (and (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) v@@7))) (=> (or (not (= |u'| u@@4)) (not true)) (and (= (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) (|Set#IsMember| (|Map#Domain| m@@8) |u'|)) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@7)) |u'|) (MapType0Select BoxType BoxType (|Map#Elements| m@@8) |u'|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@8 u@@4 v@@7)) |u'|))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@8 u@@4 v@@7)) |u'|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@19 T@U) ($ly@@2 T@U) (this@@11 T@U) (|source#0@@9| T@U) (|dest#0@@2| T@U) (|p#0@@2| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.IsPath#canCall| _module.BreadthFirstSearch$Vertex@@19 this@@11 |source#0@@9| |dest#0@@2| |p#0@@2|) (and (< 1 $FunctionContextHeight) (and (and (and (and (or (not (= this@@11 null)) (not true)) ($Is refType this@@11 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@19))) ($IsBox |source#0@@9| _module.BreadthFirstSearch$Vertex@@19)) ($IsBox |dest#0@@2| _module.BreadthFirstSearch$Vertex@@19)) ($Is DatatypeTypeType |p#0@@2| (Tclass._module.List _module.BreadthFirstSearch$Vertex@@19))))) (and (=> (not (_module.List.Nil_q |p#0@@2|)) (let ((|tail#1| (_module.List.tail |p#0@@2|)))
(let ((|v#1| (_module.List.head |p#0@@2|)))
 (and (|_module.BreadthFirstSearch.Succ#canCall| _module.BreadthFirstSearch$Vertex@@19 this@@11 |v#1|) (=> (|Set#IsMember| (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@19 this@@11 |v#1|) |dest#0@@2|) (|_module.BreadthFirstSearch.IsPath#canCall| _module.BreadthFirstSearch$Vertex@@19 this@@11 |source#0@@9| |v#1| |tail#1|)))))) (= (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@19 ($LS $ly@@2) this@@11 |source#0@@9| |dest#0@@2| |p#0@@2|) (ite (_module.List.Nil_q |p#0@@2|) (= |source#0@@9| |dest#0@@2|) (let ((|tail#0| (_module.List.tail |p#0@@2|)))
(let ((|v#0@@1| (_module.List.head |p#0@@2|)))
 (and (|Set#IsMember| (_module.BreadthFirstSearch.Succ _module.BreadthFirstSearch$Vertex@@19 this@@11 |v#0@@1|) |dest#0@@2|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@19 $ly@@2 this@@11 |source#0@@9| |v#0@@1| |tail#0|))))))))
 :pattern ( (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@19 ($LS $ly@@2) this@@11 |source#0@@9| |dest#0@@2| |p#0@@2|))
))))
(assert (forall ((d@@9 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@9)) (DtRank d@@9))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@9)))
)))
(assert (forall ((bx@@5 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@5 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@5)) bx@@5) ($Is SetType ($Unbox SetType bx@@5) (TSet t@@9))))
 :pattern ( ($IsBox bx@@5 (TSet t@@9)))
)))
(assert (forall ((_module.List$T@@6 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._module.List _module.List$T@@6)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@6)) bx@@6) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@6) (Tclass._module.List _module.List$T@@6))))
 :pattern ( ($IsBox bx@@6 (Tclass._module.List _module.List$T@@6)))
)))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@20 T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@20)) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@20))))
 :pattern ( ($IsBox bx@@7 (Tclass._module.BreadthFirstSearch? _module.BreadthFirstSearch$Vertex@@20)))
)))
(assert (forall ((_module.BreadthFirstSearch$Vertex@@21 T@U) (bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@21)) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@21))))
 :pattern ( ($IsBox bx@@8 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@21)))
)))
(assert (forall ((v@@8 T@U) (t0@@4 T@U) (t1@@2 T@U) ) (! (= ($Is MapType v@@8 (TMap t0@@4 t1@@2)) (forall ((bx@@9 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@8) bx@@9) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@8) bx@@9) t1@@2) ($IsBox bx@@9 t0@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@8) bx@@9))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@8) bx@@9))
)))
 :pattern ( ($Is MapType v@@8 (TMap t0@@4 t1@@2)))
)))
(assert (forall ((d@@10 T@U) (_module.List$T@@7 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.List.Cons_q d@@10) ($IsAlloc DatatypeTypeType d@@10 (Tclass._module.List _module.List$T@@7) $h@@4))) ($IsAlloc DatatypeTypeType (_module.List.tail d@@10) (Tclass._module.List _module.List$T@@7) $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.List.tail d@@10) (Tclass._module.List _module.List$T@@7) $h@@4))
)))
(assert (= |#_module.List.Nil| (Lit DatatypeTypeType |#_module.List.Nil|)))
(assert (forall ((a@@17 T@U) (b@@14 T@U) ) (! (= (|Set#Equal| a@@17 b@@14) (forall ((o@@7 T@U) ) (! (= (|Set#IsMember| a@@17 o@@7) (|Set#IsMember| b@@14 o@@7))
 :pattern ( (|Set#IsMember| a@@17 o@@7))
 :pattern ( (|Set#IsMember| b@@14 o@@7))
)))
 :pattern ( (|Set#Equal| a@@17 b@@14))
)))
(assert (forall ((d@@11 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_System.Tuple2.___hMake2_q d@@11) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@5)
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@5))
)))) ($IsAllocBox (_System.Tuple2._0 d@@11) |_System._tuple#2$T0@@6| $h@@5))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@11) |_System._tuple#2$T0@@6| $h@@5))
)))
(assert (forall ((d@@12 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_System.Tuple2.___hMake2_q d@@12) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@6)
 :pattern ( ($IsAlloc DatatypeTypeType d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@6))
)))) ($IsAllocBox (_System.Tuple2._1 d@@12) |_System._tuple#2$T1@@7| $h@@6))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@12) |_System._tuple#2$T1@@7| $h@@6))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0@@0| T@U) ) (! (= (|#_module.List.Cons| (Lit BoxType |a#7#0#0@@0|) (Lit DatatypeTypeType |a#7#1#0@@0|)) (Lit DatatypeTypeType (|#_module.List.Cons| |a#7#0#0@@0| |a#7#1#0@@0|)))
 :pattern ( (|#_module.List.Cons| (Lit BoxType |a#7#0#0@@0|) (Lit DatatypeTypeType |a#7#1#0@@0|)))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((_module.List$T@@8 T@U) (|a#6#0#0@@1| T@U) (|a#6#1#0@@1| T@U) ($h@@7 T@U) ) (!  (=> ($IsGoodHeap $h@@7) (= ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@1| |a#6#1#0@@1|) (Tclass._module.List _module.List$T@@8) $h@@7)  (and ($IsAllocBox |a#6#0#0@@1| _module.List$T@@8 $h@@7) ($IsAlloc DatatypeTypeType |a#6#1#0@@1| (Tclass._module.List _module.List$T@@8) $h@@7))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.List.Cons| |a#6#0#0@@1| |a#6#1#0@@1|) (Tclass._module.List _module.List$T@@8) $h@@7))
)))
(assert (forall ((m@@9 T@U) ) (!  (or (= m@@9 |Map#Empty|) (exists ((k@@4 T@U) (v@@9 T@U) ) (|Set#IsMember| (|Map#Items| m@@9) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@4 v@@9)))))
 :pattern ( (|Map#Items| m@@9))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((_module.BreadthFirstSearch$Vertex@@22 T@U) (this@@12 T@U) (|source#0@@10| T@U) (|m#0@@6| T@U) ) (!  (=> (or (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@22 this@@12 |source#0@@10| (Lit MapType |m#0@@6|)) (and (< 2 $FunctionContextHeight) (and (and (and (or (not (= this@@12 null)) (not true)) ($Is refType this@@12 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@22))) ($IsBox |source#0@@10| _module.BreadthFirstSearch$Vertex@@22)) ($Is MapType |m#0@@6| (TMap _module.BreadthFirstSearch$Vertex@@22 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@22)))))) (and (forall ((|v#1@@0| T@U) ) (!  (=> ($IsBox |v#1@@0| _module.BreadthFirstSearch$Vertex@@22) (=> (|Set#IsMember| (|Map#Domain| |m#0@@6|) |v#1@@0|) (|_module.BreadthFirstSearch.IsPath#canCall| _module.BreadthFirstSearch$Vertex@@22 this@@12 |source#0@@10| |v#1@@0| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |m#0@@6|)) |v#1@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@6|) |v#1@@0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@6|) |v#1@@0|))
)) (= (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@22 this@@12 |source#0@@10| (Lit MapType |m#0@@6|)) (forall ((|v#1@@1| T@U) ) (!  (=> ($IsBox |v#1@@1| _module.BreadthFirstSearch$Vertex@@22) (=> (|Set#IsMember| (|Map#Domain| |m#0@@6|) |v#1@@1|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@22 ($LS $LZ) this@@12 |source#0@@10| |v#1@@1| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |m#0@@6|)) |v#1@@1|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |m#0@@6|) |v#1@@1|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |m#0@@6|) |v#1@@1|))
)))))
 :weight 3
 :pattern ( (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@22 this@@12 |source#0@@10| (Lit MapType |m#0@@6|)))
))))
(assert (forall ((v@@10 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (!  (=> ($Is MapType v@@10 (TMap t0@@5 t1@@3)) (and (and ($Is SetType (|Map#Domain| v@@10) (TSet t0@@5)) ($Is SetType (|Map#Values| v@@10) (TSet t1@@3))) ($Is SetType (|Map#Items| v@@10) (TSet (Tclass._System.Tuple2 t0@@5 t1@@3)))))
 :pattern ( ($Is MapType v@@10 (TMap t0@@5 t1@@3)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module.BreadthFirstSearch$Vertex@@23 () T@U)
(declare-fun this@@13 () T@U)
(declare-fun |source#0@@11| () T@U)
(declare-fun |newPaths#0@1| () T@U)
(declare-fun |paths#0| () T@U)
(declare-fun |vSuccs#0| () T@U)
(declare-fun |v#0@@2| () T@U)
(declare-fun |pathToV#0| () T@U)
(declare-fun |succ#1_0@0| () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun |newPaths#0@0| () T@U)
(declare-fun |vSuccs##1_0@0| () T@U)
(declare-fun |call8formal@newPaths#0| () T@U)
(declare-fun call0formal@_module.BreadthFirstSearch$Vertex () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call8formal@newPaths#0@0| () T@U)
(declare-fun |succ#1_1@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |newPaths#0| () T@U)
(declare-fun |defass#succ#1_0| () Bool)
(declare-fun |succ#1_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |newPaths#0@1|) (or (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |newPaths#0@1|) (forall ((|v#7| T@U) ) (!  (=> ($IsBox |v#7| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |newPaths#0@1|) |v#7|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS ($LS $LZ)) this@@13 |source#0@@11| |v#7| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |newPaths#0@1|) |v#7|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |newPaths#0@1|) |v#7|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |newPaths#0@1|) |v#7|))
))))) (=> (=> (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |newPaths#0@1|) (or (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |newPaths#0@1|) (forall ((|v#7@@0| T@U) ) (!  (=> ($IsBox |v#7@@0| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |newPaths#0@1|) |v#7@@0|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS ($LS $LZ)) this@@13 |source#0@@11| |v#7@@0| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |newPaths#0@1|) |v#7@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |newPaths#0@1|) |v#7@@0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |newPaths#0@1|) |v#7@@0|))
)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (|Set#Equal| (|Map#Domain| |newPaths#0@1|) (|Set#Union| (|Map#Domain| |paths#0|) |vSuccs#0|))) (=> (|Set#Equal| (|Map#Domain| |newPaths#0@1|) (|Set#Union| (|Map#Domain| |paths#0|) |vSuccs#0|)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall ((|x#1| T@U) ) (!  (=> ($IsBox |x#1| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |paths#0|) |x#1|) (|_module.List#Equal| (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1| |paths#0|) (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1| |newPaths#0@1|))))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1| |newPaths#0@1|))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1| |paths#0|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |paths#0|) |x#1|))
))) (=> (forall ((|x#1@@0| T@U) ) (!  (=> ($IsBox |x#1@@0| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |paths#0|) |x#1@@0|) (|_module.List#Equal| (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@0| |paths#0|) (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@0| |newPaths#0@1|))))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@0| |newPaths#0@1|))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@0| |paths#0|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |paths#0|) |x#1@@0|))
)) (=> (= (ControlFlow 0 2) (- 0 1)) (forall ((|x#3| T@U) ) (!  (=> ($IsBox |x#3| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| |vSuccs#0| |x#3|) (|_module.List#Equal| (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#3| |newPaths#0@1|) (|#_module.List.Cons| |v#0@@2| |pathToV#0|))))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#3| |newPaths#0@1|))
 :pattern ( (|Set#IsMember| |vSuccs#0| |x#3|))
)))))))))))
(let ((anon4_correct  (and (=> (= (ControlFlow 0 7) (- 0 16)) (exists ((|$as#succ1_0#1_0| T@U) )  (and ($IsBox |$as#succ1_0#1_0| _module.BreadthFirstSearch$Vertex@@23) (|Set#IsMember| |vSuccs#0| |$as#succ1_0#1_0|)))) (=> (exists ((|$as#succ1_0#1_0@@0| T@U) )  (and ($IsBox |$as#succ1_0#1_0@@0| _module.BreadthFirstSearch$Vertex@@23) (|Set#IsMember| |vSuccs#0| |$as#succ1_0#1_0@@0|))) (=> (and (=> true (and ($IsBox |succ#1_0@0| _module.BreadthFirstSearch$Vertex@@23) ($IsAllocBox |succ#1_0@0| _module.BreadthFirstSearch$Vertex@@23 $Heap@@1))) (|Set#IsMember| |vSuccs#0| |succ#1_0@0|)) (and (=> (= (ControlFlow 0 7) (- 0 15)) true) (=> (= |newPaths#0@0| (|Map#Build| |paths#0| |succ#1_0@0| ($Box DatatypeTypeType (|#_module.List.Cons| |v#0@@2| |pathToV#0|)))) (and (=> (= (ControlFlow 0 7) (- 0 14)) true) (and (=> (= (ControlFlow 0 7) (- 0 13)) (|Set#Equal| (|Map#Domain| |newPaths#0@0|) (|Set#Union| (|Map#Domain| |paths#0|) (|Set#UnionOne| |Set#Empty| |succ#1_0@0|)))) (=> (|Set#Equal| (|Map#Domain| |newPaths#0@0|) (|Set#Union| (|Map#Domain| |paths#0|) (|Set#UnionOne| |Set#Empty| |succ#1_0@0|))) (and (=> (= (ControlFlow 0 7) (- 0 12)) true) (=> (= |vSuccs##1_0@0| (|Set#Difference| |vSuccs#0| (|Set#UnionOne| |Set#Empty| |succ#1_0@0|))) (and (=> (= (ControlFlow 0 7) (- 0 11)) (or (and (|Set#Subset| |vSuccs##1_0@0| |vSuccs#0|) (not (|Set#Subset| |vSuccs#0| |vSuccs##1_0@0|))) (and (|Set#Equal| |vSuccs##1_0@0| |vSuccs#0|) (or (and (|Set#Subset| (|Map#Domain| |newPaths#0@0|) (|Map#Domain| |paths#0|)) (not (|Set#Subset| (|Map#Domain| |paths#0|) (|Map#Domain| |newPaths#0@0|)))) (and (|Set#Equal| (|Map#Domain| |newPaths#0@0|) (|Map#Domain| |paths#0|)) (< (DtRank |pathToV#0|) (DtRank |pathToV#0|))))))) (=> (or (and (|Set#Subset| |vSuccs##1_0@0| |vSuccs#0|) (not (|Set#Subset| |vSuccs#0| |vSuccs##1_0@0|))) (and (|Set#Equal| |vSuccs##1_0@0| |vSuccs#0|) (or (and (|Set#Subset| (|Map#Domain| |newPaths#0@0|) (|Map#Domain| |paths#0|)) (not (|Set#Subset| (|Map#Domain| |paths#0|) (|Map#Domain| |newPaths#0@0|)))) (and (|Set#Equal| (|Map#Domain| |newPaths#0@0|) (|Map#Domain| |paths#0|)) (< (DtRank |pathToV#0|) (DtRank |pathToV#0|)))))) (=> (and ($Is MapType |call8formal@newPaths#0| (TMap call0formal@_module.BreadthFirstSearch$Vertex (Tclass._module.List call0formal@_module.BreadthFirstSearch$Vertex))) ($IsAlloc MapType |call8formal@newPaths#0| (TMap call0formal@_module.BreadthFirstSearch$Vertex (Tclass._module.List call0formal@_module.BreadthFirstSearch$Vertex)) $Heap@@1)) (and (=> (= (ControlFlow 0 7) (- 0 10)) (=> (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |newPaths#0@0|) (or (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |newPaths#0@0|) (forall ((|v#4@@0| T@U) ) (!  (=> ($IsBox |v#4@@0| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |newPaths#0@0|) |v#4@@0|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS ($LS $LZ)) this@@13 |source#0@@11| |v#4@@0| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |newPaths#0@0|) |v#4@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |newPaths#0@0|) |v#4@@0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |newPaths#0@0|) |v#4@@0|))
))))) (=> (=> (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |newPaths#0@0|) (or (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |newPaths#0@0|) (forall ((|v#4@@1| T@U) ) (!  (=> ($IsBox |v#4@@1| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |newPaths#0@0|) |v#4@@1|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS ($LS $LZ)) this@@13 |source#0@@11| |v#4@@1| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |newPaths#0@0|) |v#4@@1|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |newPaths#0@0|) |v#4@@1|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |newPaths#0@0|) |v#4@@1|))
)))) (and (=> (= (ControlFlow 0 7) (- 0 9)) (|Set#Disjoint| |vSuccs##1_0@0| (|Map#Domain| |newPaths#0@0|))) (=> (|Set#Disjoint| |vSuccs##1_0@0| (|Map#Domain| |newPaths#0@0|)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (forall ((|succ#1| T@U) ) (!  (=> ($IsBox |succ#1| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| |vSuccs##1_0@0| |succ#1|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS ($LS $LZ)) this@@13 |source#0@@11| |succ#1| (|#_module.List.Cons| |v#0@@2| |pathToV#0|))))
 :pattern ( (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS ($LS $LZ)) this@@13 |source#0@@11| |succ#1| (|#_module.List.Cons| |v#0@@2| |pathToV#0|)))
 :pattern ( (|Set#IsMember| |vSuccs##1_0@0| |succ#1|))
))) (=> (forall ((|succ#1@@0| T@U) ) (!  (=> ($IsBox |succ#1@@0| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| |vSuccs##1_0@0| |succ#1@@0|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS ($LS $LZ)) this@@13 |source#0@@11| |succ#1@@0| (|#_module.List.Cons| |v#0@@2| |pathToV#0|))))
 :pattern ( (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS ($LS $LZ)) this@@13 |source#0@@11| |succ#1@@0| (|#_module.List.Cons| |v#0@@2| |pathToV#0|)))
 :pattern ( (|Set#IsMember| |vSuccs##1_0@0| |succ#1@@0|))
)) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (and ($Is MapType |call8formal@newPaths#0@0| (TMap _module.BreadthFirstSearch$Vertex@@23 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@23))) ($IsAlloc MapType |call8formal@newPaths#0@0| (TMap _module.BreadthFirstSearch$Vertex@@23 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@23)) $Heap@0)) (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |call8formal@newPaths#0@0|)) (and (and (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |call8formal@newPaths#0@0|) (and (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |call8formal@newPaths#0@0|) (forall ((|v#5@@0| T@U) ) (!  (=> ($IsBox |v#5@@0| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |call8formal@newPaths#0@0|) |v#5@@0|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS $LZ) this@@13 |source#0@@11| |v#5@@0| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |call8formal@newPaths#0@0|) |v#5@@0|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |call8formal@newPaths#0@0|) |v#5@@0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |call8formal@newPaths#0@0|) |v#5@@0|))
)))) (|Set#Equal| (|Map#Domain| |call8formal@newPaths#0@0|) (|Set#Union| (|Map#Domain| |newPaths#0@0|) |vSuccs##1_0@0|)))) (and (and (and (forall ((|x#1@@1| T@U) ) (!  (=> ($IsBox |x#1@@1| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |newPaths#0@0|) |x#1@@1|) (and (and (|$IsA#_module.List| (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@1| |newPaths#0@0|)) (|$IsA#_module.List| (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@1| |call8formal@newPaths#0@0|))) (and (|_module.BreadthFirstSearch.Find#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@1| |newPaths#0@0|) (|_module.BreadthFirstSearch.Find#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@1| |call8formal@newPaths#0@0|)))))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@1| |call8formal@newPaths#0@0|))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@1| |newPaths#0@0|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |newPaths#0@0|) |x#1@@1|))
)) (forall ((|x#1@@2| T@U) ) (!  (=> ($IsBox |x#1@@2| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |newPaths#0@0|) |x#1@@2|) (|_module.List#Equal| (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@2| |newPaths#0@0|) (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@2| |call8formal@newPaths#0@0|))))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@2| |call8formal@newPaths#0@0|))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#1@@2| |newPaths#0@0|))
 :pattern ( (|Set#IsMember| (|Map#Domain| |newPaths#0@0|) |x#1@@2|))
))) (and (forall ((|x#3@@0| T@U) ) (!  (=> ($IsBox |x#3@@0| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| |vSuccs##1_0@0| |x#3@@0|) (and (|$IsA#_module.List| (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#3@@0| |call8formal@newPaths#0@0|)) (|_module.BreadthFirstSearch.Find#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#3@@0| |call8formal@newPaths#0@0|))))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#3@@0| |call8formal@newPaths#0@0|))
 :pattern ( (|Set#IsMember| |vSuccs##1_0@0| |x#3@@0|))
)) (forall ((|x#3@@1| T@U) ) (!  (=> ($IsBox |x#3@@1| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| |vSuccs##1_0@0| |x#3@@1|) (|_module.List#Equal| (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#3@@1| |call8formal@newPaths#0@0|) (|#_module.List.Cons| |v#0@@2| |pathToV#0|))))
 :pattern ( (_module.BreadthFirstSearch.Find _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |x#3@@1| |call8formal@newPaths#0@0|))
 :pattern ( (|Set#IsMember| |vSuccs##1_0@0| |x#3@@1|))
)))) (and (and (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@2)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@2))
)) ($HeapSuccGhost $Heap@@1 $Heap@0)) (and (= |newPaths#0@1| |call8formal@newPaths#0@0|) (= (ControlFlow 0 7) 2))))) GeneratedUnifiedExit_correct)))))))))))))))))))))))
(let ((anon6_Else_correct  (=> (and (not (and ($IsBox |succ#1_1@0| _module.BreadthFirstSearch$Vertex@@23) ($IsAllocBox |succ#1_1@0| _module.BreadthFirstSearch$Vertex@@23 $Heap@@1))) (= (ControlFlow 0 18) 7)) anon4_correct)))
(let ((anon6_Then_correct  (=> (and (and ($IsBox |succ#1_1@0| _module.BreadthFirstSearch$Vertex@@23) ($IsAllocBox |succ#1_1@0| _module.BreadthFirstSearch$Vertex@@23 $Heap@@1)) (= (ControlFlow 0 17) 7)) anon4_correct)))
(let ((anon5_Else_correct  (=> (not (|Set#Equal| |vSuccs#0| |Set#Empty|)) (and (=> (= (ControlFlow 0 19) 17) anon6_Then_correct) (=> (= (ControlFlow 0 19) 18) anon6_Else_correct)))))
(let ((anon5_Then_correct  (=> (|Set#Equal| |vSuccs#0| |Set#Empty|) (=> (and (= |newPaths#0@1| |paths#0|) (= (ControlFlow 0 6) 2)) GeneratedUnifiedExit_correct))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (and (=> (= (ControlFlow 0 20) 6) anon5_Then_correct) (=> (= (ControlFlow 0 20) 19) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (and (or (not (= this@@13 null)) (not true)) (and ($Is refType this@@13 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@23)) ($IsAlloc refType this@@13 (Tclass._module.BreadthFirstSearch _module.BreadthFirstSearch$Vertex@@23) $Heap@@1)))) (=> (and (and (and ($Is SetType |vSuccs#0| (TSet _module.BreadthFirstSearch$Vertex@@23)) ($IsAlloc SetType |vSuccs#0| (TSet _module.BreadthFirstSearch$Vertex@@23) $Heap@@1)) (and ($IsBox |source#0@@11| _module.BreadthFirstSearch$Vertex@@23) ($IsAllocBox |source#0@@11| _module.BreadthFirstSearch$Vertex@@23 $Heap@@1))) (and (and ($Is MapType |paths#0| (TMap _module.BreadthFirstSearch$Vertex@@23 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@23))) ($IsAlloc MapType |paths#0| (TMap _module.BreadthFirstSearch$Vertex@@23 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@23)) $Heap@@1)) (and ($IsBox |v#0@@2| _module.BreadthFirstSearch$Vertex@@23) ($IsAllocBox |v#0@@2| _module.BreadthFirstSearch$Vertex@@23 $Heap@@1)))) (=> (and (and (and (and (and ($Is DatatypeTypeType |pathToV#0| (Tclass._module.List _module.BreadthFirstSearch$Vertex@@23)) ($IsAlloc DatatypeTypeType |pathToV#0| (Tclass._module.List _module.BreadthFirstSearch$Vertex@@23) $Heap@@1)) (|$IsA#_module.List| |pathToV#0|)) (and ($Is MapType |newPaths#0| (TMap _module.BreadthFirstSearch$Vertex@@23 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@23))) ($IsAlloc MapType |newPaths#0| (TMap _module.BreadthFirstSearch$Vertex@@23 (Tclass._module.List _module.BreadthFirstSearch$Vertex@@23)) $Heap@@1))) (and (and (=> |defass#succ#1_0| (and ($IsBox |succ#1_0| _module.BreadthFirstSearch$Vertex@@23) ($IsAllocBox |succ#1_0| _module.BreadthFirstSearch$Vertex@@23 $Heap@@1))) true) (= 4 $FunctionContextHeight))) (and (and (and (|_module.BreadthFirstSearch.ValidMap#canCall| _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |paths#0|) (and (_module.BreadthFirstSearch.ValidMap _module.BreadthFirstSearch$Vertex@@23 this@@13 |source#0@@11| |paths#0|) (forall ((|v#6| T@U) ) (!  (=> ($IsBox |v#6| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| (|Map#Domain| |paths#0|) |v#6|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS $LZ) this@@13 |source#0@@11| |v#6| ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |paths#0|) |v#6|)))))
 :pattern ( ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |paths#0|) |v#6|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |paths#0|) |v#6|))
)))) (|Set#Disjoint| |vSuccs#0| (|Map#Domain| |paths#0|))) (and (forall ((|succ#1@@1| T@U) ) (!  (=> ($IsBox |succ#1@@1| _module.BreadthFirstSearch$Vertex@@23) (=> (|Set#IsMember| |vSuccs#0| |succ#1@@1|) (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS $LZ) this@@13 |source#0@@11| |succ#1@@1| (|#_module.List.Cons| |v#0@@2| |pathToV#0|))))
 :pattern ( (_module.BreadthFirstSearch.IsPath _module.BreadthFirstSearch$Vertex@@23 ($LS $LZ) this@@13 |source#0@@11| |succ#1@@1| (|#_module.List.Cons| |v#0@@2| |pathToV#0|)))
 :pattern ( (|Set#IsMember| |vSuccs#0| |succ#1@@1|))
)) (= (ControlFlow 0 21) 20)))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
