(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Tree () T@U)
(declare-fun Tagclass._module.Result () T@U)
(declare-fun |##_module.Tree.Leaf| () T@U)
(declare-fun |##_module.Tree.Node| () T@U)
(declare-fun |##_module.Result.Fail| () T@U)
(declare-fun |##_module.Result.Res| () T@U)
(declare-fun tytagFamily$Tree () T@U)
(declare-fun tytagFamily$Result () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.Tree.Node| (T@U T@U) T@U)
(declare-fun Tclass._module.Tree () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.Result.Res| (T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Tree.Leaf| () T@U)
(declare-fun |#_module.Result.Fail| () T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun Tclass._module.Result () T@U)
(declare-fun |_module.Tree#Equal| (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.Tree.Leaf_q (T@U) Bool)
(declare-fun _module.Tree.Node_q (T@U) Bool)
(declare-fun _module.Result.Fail_q (T@U) Bool)
(declare-fun _module.Result.Res_q (T@U) Bool)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.toList (T@U Int T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.toList#canCall| (Int T@U) Bool)
(declare-fun _module.Tree._h1 (T@U) T@U)
(declare-fun _module.Tree._h0 (T@U) T@U)
(declare-fun _module.__default.build__rec (T@U Int T@U) T@U)
(declare-fun _module.Result.t (T@U) T@U)
(declare-fun _module.Result.sOut (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun |_module.__default.build__rec#canCall| (Int T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc Tagclass._module.Tree Tagclass._module.Result |##_module.Tree.Leaf| |##_module.Tree.Node| |##_module.Result.Fail| |##_module.Result.Res| tytagFamily$Tree tytagFamily$Result)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tree.Node| |a#6#0#0| |a#6#1#0|) Tclass._module.Tree)  (and ($Is DatatypeTypeType |a#6#0#0| Tclass._module.Tree) ($Is DatatypeTypeType |a#6#1#0| Tclass._module.Tree)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tree.Node| |a#6#0#0| |a#6#1#0|) Tclass._module.Tree))
)))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#23#1#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#23#1#0| i))) (DtRank (|#_module.Result.Res| |a#23#0#0| |a#23#1#0|))))
 :pattern ( (|Seq#Index| |a#23#1#0| i) (|#_module.Result.Res| |a#23#0#0| |a#23#1#0|))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.Tree.Leaf|) |##_module.Tree.Leaf|))
(assert (= (DatatypeCtorId |#_module.Result.Fail|) |##_module.Result.Fail|))
(assert (forall ((s T@U) (v T@U) (n Int) ) (!  (=> (and (<= 0 n) (<= n (|Seq#Length| s))) (= (|Seq#Drop| (|Seq#Build| s v) n) (|Seq#Build| (|Seq#Drop| s n) v)))
 :pattern ( (|Seq#Drop| (|Seq#Build| s v) n))
)))
(assert (forall ((s@@0 T@U) (t T@U) (n@@0 Int) ) (!  (=> (= n@@0 (|Seq#Length| s@@0)) (and (= (|Seq#Take| (|Seq#Append| s@@0 t) n@@0) s@@0) (= (|Seq#Drop| (|Seq#Append| s@@0 t) n@@0) t)))
 :pattern ( (|Seq#Take| (|Seq#Append| s@@0 t) n@@0))
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@0 t) n@@0))
)))
(assert ($Is DatatypeTypeType |#_module.Tree.Leaf| Tclass._module.Tree))
(assert ($Is DatatypeTypeType |#_module.Result.Fail| Tclass._module.Result))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.Tree#Equal| a b) (= a b))
 :pattern ( (|_module.Tree#Equal| a b))
)))
(assert (forall ((s@@1 T@U) (n@@1 Int) ) (!  (=> (= n@@1 0) (= (|Seq#Drop| s@@1 n@@1) s@@1))
 :pattern ( (|Seq#Drop| s@@1 n@@1))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor SeqType) 4))
(assert (forall ((s@@2 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> (and ($Is SeqType s@@2 (TSeq t@@0)) ($IsBox bx t@@0)) ($Is SeqType (|Seq#Build| s@@2 bx) (TSeq t@@0)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@2 bx) (TSeq t@@0)))
)))
(assert (forall ((s@@3 T@U) (n@@2 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@2)) (< j (|Seq#Length| s@@3))) (= (|Seq#Index| (|Seq#Take| s@@3 n@@2) j) (|Seq#Index| s@@3 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@3 n@@2) j))
 :pattern ( (|Seq#Index| s@@3 j) (|Seq#Take| s@@3 n@@2))
)))
(assert (forall ((s@@4 T@U) (n@@3 Int) ) (!  (=> (and (<= 0 n@@3) (<= n@@3 (|Seq#Length| s@@4))) (= (|Seq#Length| (|Seq#Drop| s@@4 n@@3)) (- (|Seq#Length| s@@4) n@@3)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@4 n@@3)))
)))
(assert (forall ((d T@U) ) (! (= (_module.Tree.Leaf_q d) (= (DatatypeCtorId d) |##_module.Tree.Leaf|))
 :pattern ( (_module.Tree.Leaf_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Tree.Node_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Tree.Node|))
 :pattern ( (_module.Tree.Node_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Result.Fail_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Result.Fail|))
 :pattern ( (_module.Result.Fail_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Result.Res_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Result.Res|))
 :pattern ( (_module.Result.Res_q d@@2))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0))) (= (|Seq#Index| s0 j@@0) (|Seq#Index| s1 j@@0)))
 :pattern ( (|Seq#Index| s0 j@@0))
 :pattern ( (|Seq#Index| s1 j@@0))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((s@@5 T@U) (i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| s@@5))) (< (|Seq#Rank| (|Seq#Take| s@@5 i@@0)) (|Seq#Rank| s@@5)))
 :pattern ( (|Seq#Rank| (|Seq#Take| s@@5 i@@0)))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Tree.Node_q d@@3) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@3 (|#_module.Tree.Node| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.Tree.Node_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Result.Res_q d@@4) (exists ((|a#17#0#0| T@U) (|a#17#1#0| T@U) ) (= d@@4 (|#_module.Result.Res| |a#17#0#0| |a#17#1#0|))))
 :pattern ( (_module.Result.Res_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.Tree.Leaf_q d@@5) (= d@@5 |#_module.Tree.Leaf|))
 :pattern ( (_module.Tree.Leaf_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (_module.Result.Fail_q d@@6) (= d@@6 |#_module.Result.Fail|))
 :pattern ( (_module.Result.Fail_q d@@6))
)))
(assert (forall ((s@@6 T@U) (i@@1 Int) ) (!  (=> (and (< 0 i@@1) (<= i@@1 (|Seq#Length| s@@6))) (< (|Seq#Rank| (|Seq#Drop| s@@6 i@@1)) (|Seq#Rank| s@@6)))
 :pattern ( (|Seq#Rank| (|Seq#Drop| s@@6 i@@1)))
)))
(assert (forall ((s@@7 T@U) (v@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@7 v@@0)) (+ 1 (|Seq#Length| s@@7)))
 :pattern ( (|Seq#Build| s@@7 v@@0))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Result.Res| |a#18#0#0| |a#18#1#0|) Tclass._module.Result)  (and ($Is DatatypeTypeType |a#18#0#0| Tclass._module.Tree) ($Is SeqType |a#18#1#0| (TSeq TInt))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Result.Res| |a#18#0#0| |a#18#1#0|) Tclass._module.Result))
)))
(assert (forall ((v@@1 T@U) (t@@1 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@1) t@@1 h) ($IsAlloc T@@1 v@@1 t@@1 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@1) t@@1 h))
)))
(assert (forall ((s@@8 T@U) (n@@4 Int) (j@@1 Int) ) (!  (=> (and (and (<= 0 n@@4) (<= 0 j@@1)) (< j@@1 (- (|Seq#Length| s@@8) n@@4))) (= (|Seq#Index| (|Seq#Drop| s@@8 n@@4) j@@1) (|Seq#Index| s@@8 (+ j@@1 n@@4))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@8 n@@4) j@@1))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Tree) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass._module.Tree)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Tree))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Result) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) Tclass._module.Result)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Result))
)))
(assert (forall ((s@@9 T@U) (i@@2 Int) (v@@2 T@U) ) (!  (and (=> (= i@@2 (|Seq#Length| s@@9)) (= (|Seq#Index| (|Seq#Build| s@@9 v@@2) i@@2) v@@2)) (=> (or (not (= i@@2 (|Seq#Length| s@@9))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@9 v@@2) i@@2) (|Seq#Index| s@@9 i@@2))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@9 v@@2) i@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) (|d#0| Int) (|t#0| T@U) ) (!  (=> (or (|_module.__default.toList#canCall| |d#0| (Lit DatatypeTypeType |t#0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0| Tclass._module.Tree))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0|)))))) (let ((|r#3| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0|)))))
(let ((|l#3| (Lit DatatypeTypeType (_module.Tree._h0 (Lit DatatypeTypeType |t#0|)))))
 (and (|_module.__default.toList#canCall| (+ |d#0| 1) |l#3|) (|_module.__default.toList#canCall| (+ |d#0| 1) |r#3|))))) (= (_module.__default.toList ($LS $ly) |d#0| (Lit DatatypeTypeType |t#0|)) (ite (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0|)) (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U |d#0|))) (let ((|r#2| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0|)))))
(let ((|l#2| (Lit DatatypeTypeType (_module.Tree._h0 (Lit DatatypeTypeType |t#0|)))))
(|Seq#Append| (_module.__default.toList ($LS $ly) (+ |d#0| 1) |l#2|) (_module.__default.toList ($LS $ly) (+ |d#0| 1) |r#2|))))))))
 :weight 3
 :pattern ( (_module.__default.toList ($LS $ly) |d#0| (Lit DatatypeTypeType |t#0|)))
))))
(assert (forall (($ly@@0 T@U) (|d#0@@0| Int) (|t#0@@0| T@U) ) (! (= (_module.__default.toList ($LS $ly@@0) |d#0@@0| |t#0@@0|) (_module.__default.toList $ly@@0 |d#0@@0| |t#0@@0|))
 :pattern ( (_module.__default.toList ($LS $ly@@0) |d#0@@0| |t#0@@0|))
)))
(assert (forall (($ly@@1 T@U) (|d#0@@1| Int) (|s#0| T@U) ) (! (= (_module.__default.build__rec ($LS $ly@@1) |d#0@@1| |s#0|) (_module.__default.build__rec $ly@@1 |d#0@@1| |s#0|))
 :pattern ( (_module.__default.build__rec ($LS $ly@@1) |d#0@@1| |s#0|))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (|Seq#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|Seq#Equal| a@@0 b@@0))
)))
(assert (forall ((s@@10 T@U) (n@@5 Int) ) (!  (=> (and (<= 0 n@@5) (<= n@@5 (|Seq#Length| s@@10))) (= (|Seq#Length| (|Seq#Take| s@@10 n@@5)) n@@5))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@10 n@@5)))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 Tclass._module.Tree) (or (_module.Tree.Leaf_q d@@7) (_module.Tree.Node_q d@@7)))
 :pattern ( (_module.Tree.Node_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.Tree))
 :pattern ( (_module.Tree.Leaf_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.Tree))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> ($Is DatatypeTypeType d@@8 Tclass._module.Result) (or (_module.Result.Fail_q d@@8) (_module.Result.Res_q d@@8)))
 :pattern ( (_module.Result.Res_q d@@8) ($Is DatatypeTypeType d@@8 Tclass._module.Result))
 :pattern ( (_module.Result.Fail_q d@@8) ($Is DatatypeTypeType d@@8 Tclass._module.Result))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.Tree.Node_q a@@1) (_module.Tree.Node_q b@@1)) (= (|_module.Tree#Equal| a@@1 b@@1)  (and (|_module.Tree#Equal| (_module.Tree._h0 a@@1) (_module.Tree._h0 b@@1)) (|_module.Tree#Equal| (_module.Tree._h1 a@@1) (_module.Tree._h1 b@@1)))))
 :pattern ( (|_module.Tree#Equal| a@@1 b@@1) (_module.Tree.Node_q a@@1))
 :pattern ( (|_module.Tree#Equal| a@@1 b@@1) (_module.Tree.Node_q b@@1))
)))
(assert (forall ((v@@3 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@3) t@@2) ($Is T@@2 v@@3 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@3) t@@2))
)))
(assert (forall ((s@@11 T@U) ) (! (<= 0 (|Seq#Length| s@@11))
 :pattern ( (|Seq#Length| s@@11))
)))
(assert (forall ((s@@12 T@U) (i@@3 Int) (j@@2 Int) ) (!  (=> (and (and (<= 0 i@@3) (< i@@3 j@@2)) (<= j@@2 (|Seq#Length| s@@12))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@12 i@@3) (|Seq#Drop| s@@12 j@@2))) (|Seq#Rank| s@@12)))
 :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@12 i@@3) (|Seq#Drop| s@@12 j@@2))))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.Tree.Leaf_q a@@2) (_module.Tree.Leaf_q b@@2)) (|_module.Tree#Equal| a@@2 b@@2))
 :pattern ( (|_module.Tree#Equal| a@@2 b@@2) (_module.Tree.Leaf_q a@@2))
 :pattern ( (|_module.Tree#Equal| a@@2 b@@2) (_module.Tree.Leaf_q b@@2))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tree.Node| |a#4#0#0| |a#4#1#0|)) |##_module.Tree.Node|)
 :pattern ( (|#_module.Tree.Node| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.Tree._h0 (|#_module.Tree.Node| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.Tree.Node| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.Tree._h1 (|#_module.Tree.Node| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.Tree.Node| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Result.Res| |a#16#0#0| |a#16#1#0|)) |##_module.Result.Res|)
 :pattern ( (|#_module.Result.Res| |a#16#0#0| |a#16#1#0|))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (! (= (_module.Result.t (|#_module.Result.Res| |a#20#0#0| |a#20#1#0|)) |a#20#0#0|)
 :pattern ( (|#_module.Result.Res| |a#20#0#0| |a#20#1#0|))
)))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) ) (! (= (_module.Result.sOut (|#_module.Result.Res| |a#22#0#0| |a#22#1#0|)) |a#22#1#0|)
 :pattern ( (|#_module.Result.Res| |a#22#0#0| |a#22#1#0|))
)))
(assert (forall ((v@@4 T@U) (t0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0) h@@0) (forall ((i@@4 Int) ) (!  (=> (and (<= 0 i@@4) (< i@@4 (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i@@4) t0 h@@0))
 :pattern ( (|Seq#Index| v@@4 i@@4))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0) h@@0))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@2 T@U) (|d#0@@2| Int) (|s#0@@0| T@U) ) (!  (=> (or (|_module.__default.build__rec#canCall| |d#0@@2| |s#0@@0|) (and (< 2 $FunctionContextHeight) ($Is SeqType |s#0@@0| (TSeq TInt)))) (and (and (=> (_module.Result.Res_q (_module.__default.build__rec $ly@@2 |d#0@@2| |s#0@@0|)) (and (< (|Seq#Length| (_module.Result.sOut (_module.__default.build__rec $ly@@2 |d#0@@2| |s#0@@0|))) (|Seq#Length| |s#0@@0|)) (|Seq#Equal| (_module.Result.sOut (_module.__default.build__rec $ly@@2 |d#0@@2| |s#0@@0|)) (|Seq#Drop| |s#0@@0| (- (|Seq#Length| |s#0@@0|) (|Seq#Length| (_module.Result.sOut (_module.__default.build__rec $ly@@2 |d#0@@2| |s#0@@0|)))))))) (=> (_module.Result.Res_q (_module.__default.build__rec $ly@@2 |d#0@@2| |s#0@@0|)) (|Seq#Equal| (_module.__default.toList ($LS $LZ) |d#0@@2| (_module.Result.t (_module.__default.build__rec $ly@@2 |d#0@@2| |s#0@@0|))) (|Seq#Take| |s#0@@0| (- (|Seq#Length| |s#0@@0|) (|Seq#Length| (_module.Result.sOut (_module.__default.build__rec $ly@@2 |d#0@@2| |s#0@@0|)))))))) ($Is DatatypeTypeType (_module.__default.build__rec $ly@@2 |d#0@@2| |s#0@@0|) Tclass._module.Result)))
 :pattern ( (_module.__default.build__rec $ly@@2 |d#0@@2| |s#0@@0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@3 T@U) (|d#0@@3| Int) (|t#0@@1| T@U) ) (!  (=> (or (|_module.__default.toList#canCall| |d#0@@3| |t#0@@1|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@1| Tclass._module.Tree))) (and (=> (not (_module.Tree.Leaf_q |t#0@@1|)) (let ((|r#1| (_module.Tree._h1 |t#0@@1|)))
(let ((|l#1| (_module.Tree._h0 |t#0@@1|)))
 (and (|_module.__default.toList#canCall| (+ |d#0@@3| 1) |l#1|) (|_module.__default.toList#canCall| (+ |d#0@@3| 1) |r#1|))))) (= (_module.__default.toList ($LS $ly@@3) |d#0@@3| |t#0@@1|) (ite (_module.Tree.Leaf_q |t#0@@1|) (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U |d#0@@3|))) (let ((|r#0| (_module.Tree._h1 |t#0@@1|)))
(let ((|l#0| (_module.Tree._h0 |t#0@@1|)))
(|Seq#Append| (_module.__default.toList $ly@@3 (+ |d#0@@3| 1) |l#0|) (_module.__default.toList $ly@@3 (+ |d#0@@3| 1) |r#0|))))))))
 :pattern ( (_module.__default.toList ($LS $ly@@3) |d#0@@3| |t#0@@1|))
))))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (DtRank |a#9#0#0|) (DtRank (|#_module.Tree.Node| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.Tree.Node| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.Tree.Node| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.Tree.Node| |a#11#0#0| |a#11#1#0|))
)))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) ) (! (< (DtRank |a#21#0#0|) (DtRank (|#_module.Result.Res| |a#21#0#0| |a#21#1#0|)))
 :pattern ( (|#_module.Result.Res| |a#21#0#0| |a#21#1#0|))
)))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| T@U) ) (! (< (|Seq#Rank| |a#24#1#0|) (DtRank (|#_module.Result.Res| |a#24#0#0| |a#24#1#0|)))
 :pattern ( (|#_module.Result.Res| |a#24#0#0| |a#24#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@4 T@U) (|d#0@@4| Int) (|t#0@@2| T@U) ) (!  (=> (or (|_module.__default.toList#canCall| (LitInt |d#0@@4|) (Lit DatatypeTypeType |t#0@@2|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@2| Tclass._module.Tree))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0@@2|)))))) (let ((|r#5| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0@@2|)))))
(let ((|l#5| (Lit DatatypeTypeType (_module.Tree._h0 (Lit DatatypeTypeType |t#0@@2|)))))
 (and (|_module.__default.toList#canCall| (LitInt (+ |d#0@@4| 1)) |l#5|) (|_module.__default.toList#canCall| (LitInt (+ |d#0@@4| 1)) |r#5|))))) (= (_module.__default.toList ($LS $ly@@4) (LitInt |d#0@@4|) (Lit DatatypeTypeType |t#0@@2|)) (ite (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0@@2|)) (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U (LitInt |d#0@@4|)))) (let ((|r#4| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0@@2|)))))
(let ((|l#4| (Lit DatatypeTypeType (_module.Tree._h0 (Lit DatatypeTypeType |t#0@@2|)))))
(|Seq#Append| (_module.__default.toList ($LS $ly@@4) (LitInt (+ |d#0@@4| 1)) |l#4|) (_module.__default.toList ($LS $ly@@4) (LitInt (+ |d#0@@4| 1)) |r#4|))))))))
 :weight 3
 :pattern ( (_module.__default.toList ($LS $ly@@4) (LitInt |d#0@@4|) (Lit DatatypeTypeType |t#0@@2|)))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o $f))  (=> (and (or (not (= $o |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@0| $o) |l#2@@0|)))) |l#3@@0|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@5 T@U) (|d#0@@5| Int) (|t#0@@3| T@U) ) (!  (=> (or (|_module.__default.toList#canCall| |d#0@@5| |t#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@3| Tclass._module.Tree))) (and (and (and (not (|Seq#Equal| (_module.__default.toList $ly@@5 |d#0@@5| |t#0@@3|) |Seq#Empty|)) (>= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.toList $ly@@5 |d#0@@5| |t#0@@3|) (LitInt 0)))) |d#0@@5|)) (= (= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.toList $ly@@5 |d#0@@5| |t#0@@3|) (LitInt 0)))) |d#0@@5|) (|_module.Tree#Equal| |t#0@@3| |#_module.Tree.Leaf|))) ($Is SeqType (_module.__default.toList $ly@@5 |d#0@@5| |t#0@@3|) (TSeq TInt))))
 :pattern ( (_module.__default.toList $ly@@5 |d#0@@5| |t#0@@3|))
))))
(assert (forall ((s@@13 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@13 val@@4)) s@@13) (= (|Seq#Build_inv1| (|Seq#Build| s@@13 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@13 val@@4))
)))
(assert (forall ((bx@@3 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@3 (TSeq t@@5)) (and (= ($Box SeqType ($Unbox SeqType bx@@3)) bx@@3) ($Is SeqType ($Unbox SeqType bx@@3) (TSeq t@@5))))
 :pattern ( ($IsBox bx@@3 (TSeq t@@5)))
)))
(assert (forall ((d@@9 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) ($Is DatatypeTypeType d@@9 Tclass._module.Tree)) ($IsAlloc DatatypeTypeType d@@9 Tclass._module.Tree $h))
 :pattern ( ($IsAlloc DatatypeTypeType d@@9 Tclass._module.Tree $h))
)))
(assert (forall ((d@@10 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d@@10 Tclass._module.Result)) ($IsAlloc DatatypeTypeType d@@10 Tclass._module.Result $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d@@10 Tclass._module.Result $h@@0))
)))
(assert (= (Tag Tclass._module.Tree) Tagclass._module.Tree))
(assert (= (TagFamily Tclass._module.Tree) tytagFamily$Tree))
(assert (= (Tag Tclass._module.Result) Tagclass._module.Result))
(assert (= (TagFamily Tclass._module.Result) tytagFamily$Result))
(assert (forall ((s@@14 T@U) (n@@6 Int) (k Int) ) (!  (=> (and (and (<= 0 n@@6) (<= n@@6 k)) (< k (|Seq#Length| s@@14))) (= (|Seq#Index| (|Seq#Drop| s@@14 n@@6) (- k n@@6)) (|Seq#Index| s@@14 k)))
 :weight 25
 :pattern ( (|Seq#Index| s@@14 k) (|Seq#Drop| s@@14 n@@6))
)))
(assert (= |#_module.Tree.Leaf| (Lit DatatypeTypeType |#_module.Tree.Leaf|)))
(assert (= |#_module.Result.Fail| (Lit DatatypeTypeType |#_module.Result.Fail|)))
(assert (forall ((d@@11 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Result.Res_q d@@11) ($IsAlloc DatatypeTypeType d@@11 Tclass._module.Result $h@@1))) ($IsAlloc SeqType (_module.Result.sOut d@@11) (TSeq TInt) $h@@1))
 :pattern ( ($IsAlloc SeqType (_module.Result.sOut d@@11) (TSeq TInt) $h@@1))
)))
(assert (forall ((s@@15 T@U) (m@@4 Int) (n@@7 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@7)) (<= (+ m@@4 n@@7) (|Seq#Length| s@@15))) (= (|Seq#Drop| (|Seq#Drop| s@@15 m@@4) n@@7) (|Seq#Drop| s@@15 (+ m@@4 n@@7))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@15 m@@4) n@@7))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@6 T@U) (|d#0@@6| Int) (|s#0@@1| T@U) ) (!  (=> (or (|_module.__default.build__rec#canCall| |d#0@@6| |s#0@@1|) (and (< 2 $FunctionContextHeight) ($Is SeqType |s#0@@1| (TSeq TInt)))) (and (=> (not (or (|Seq#Equal| |s#0@@1| |Seq#Empty|) (< (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| (LitInt 0)))) |d#0@@6|))) (=> (or (not (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| (LitInt 0)))) |d#0@@6|)) (not true)) (and (|_module.__default.build__rec#canCall| (+ |d#0@@6| 1) |s#0@@1|) (let ((|left#0| (_module.__default.build__rec $ly@@6 (+ |d#0@@6| 1) |s#0@@1|)))
 (=> (not (_module.Result.Fail_q |left#0|)) (|_module.__default.build__rec#canCall| (+ |d#0@@6| 1) (_module.Result.sOut |left#0|))))))) (= (_module.__default.build__rec ($LS $ly@@6) |d#0@@6| |s#0@@1|) (ite  (or (|Seq#Equal| |s#0@@1| |Seq#Empty|) (< (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| (LitInt 0)))) |d#0@@6|)) |#_module.Result.Fail| (ite (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@1| (LitInt 0)))) |d#0@@6|) (|#_module.Result.Res| (Lit DatatypeTypeType |#_module.Tree.Leaf|) (|Seq#Drop| |s#0@@1| (LitInt 1))) (let ((|left#0@@0| (_module.__default.build__rec $ly@@6 (+ |d#0@@6| 1) |s#0@@1|)))
(ite (_module.Result.Fail_q |left#0@@0|) |#_module.Result.Fail| (let ((|right#0| (_module.__default.build__rec $ly@@6 (+ |d#0@@6| 1) (_module.Result.sOut |left#0@@0|))))
(ite (_module.Result.Fail_q |right#0|) |#_module.Result.Fail| (|#_module.Result.Res| (|#_module.Tree.Node| (_module.Result.t |left#0@@0|) (_module.Result.t |right#0|)) (_module.Result.sOut |right#0|)))))))))))
 :pattern ( (_module.__default.build__rec ($LS $ly@@6) |d#0@@6| |s#0@@1|))
))))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@8 Int) ) (!  (and (=> (< n@@8 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@8) (|Seq#Index| s0@@1 n@@8))) (=> (<= (|Seq#Length| s0@@1) n@@8) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@8) (|Seq#Index| s1@@1 (- n@@8 (|Seq#Length| s0@@1))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@8))
)))
(assert (forall ((d@@12 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Tree.Node_q d@@12) ($IsAlloc DatatypeTypeType d@@12 Tclass._module.Tree $h@@2))) ($IsAlloc DatatypeTypeType (_module.Tree._h0 d@@12) Tclass._module.Tree $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree._h0 d@@12) Tclass._module.Tree $h@@2))
)))
(assert (forall ((d@@13 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.Tree.Node_q d@@13) ($IsAlloc DatatypeTypeType d@@13 Tclass._module.Tree $h@@3))) ($IsAlloc DatatypeTypeType (_module.Tree._h1 d@@13) Tclass._module.Tree $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree._h1 d@@13) Tclass._module.Tree $h@@3))
)))
(assert (forall ((d@@14 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.Result.Res_q d@@14) ($IsAlloc DatatypeTypeType d@@14 Tclass._module.Result $h@@4))) ($IsAlloc DatatypeTypeType (_module.Result.t d@@14) Tclass._module.Tree $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Result.t d@@14) Tclass._module.Tree $h@@4))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@7 T@U) (|d#0@@7| Int) (|s#0@@2| T@U) ) (!  (=> (or (|_module.__default.build__rec#canCall| (LitInt |d#0@@7|) (Lit SeqType |s#0@@2|)) (and (< 2 $FunctionContextHeight) ($Is SeqType |s#0@@2| (TSeq TInt)))) (and (=> (not (or (|Seq#Equal| |s#0@@2| |Seq#Empty|) (< (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@2|) (LitInt 0)))) |d#0@@7|))) (=> (or (not (= (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@2|) (LitInt 0)))) (LitInt |d#0@@7|))) (not true)) (and (|_module.__default.build__rec#canCall| (LitInt (+ |d#0@@7| 1)) (Lit SeqType |s#0@@2|)) (let ((|left#1| (Lit DatatypeTypeType (_module.__default.build__rec ($LS $ly@@7) (LitInt (+ |d#0@@7| 1)) (Lit SeqType |s#0@@2|)))))
 (=> (not (_module.Result.Fail_q |left#1|)) (|_module.__default.build__rec#canCall| (LitInt (+ |d#0@@7| 1)) (_module.Result.sOut |left#1|))))))) (= (_module.__default.build__rec ($LS $ly@@7) (LitInt |d#0@@7|) (Lit SeqType |s#0@@2|)) (ite  (or (|Seq#Equal| |s#0@@2| |Seq#Empty|) (< (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@2|) (LitInt 0)))) |d#0@@7|)) |#_module.Result.Fail| (ite (= (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |s#0@@2|) (LitInt 0)))) (LitInt |d#0@@7|)) (|#_module.Result.Res| (Lit DatatypeTypeType |#_module.Tree.Leaf|) (Lit SeqType (|Seq#Drop| (Lit SeqType |s#0@@2|) (LitInt 1)))) (let ((|left#1@@0| (Lit DatatypeTypeType (_module.__default.build__rec ($LS $ly@@7) (LitInt (+ |d#0@@7| 1)) (Lit SeqType |s#0@@2|)))))
(ite (_module.Result.Fail_q |left#1@@0|) |#_module.Result.Fail| (let ((|right#1| (Lit DatatypeTypeType (_module.__default.build__rec ($LS $ly@@7) (LitInt (+ |d#0@@7| 1)) (Lit SeqType (_module.Result.sOut |left#1@@0|))))))
(ite (_module.Result.Fail_q |right#1|) |#_module.Result.Fail| (|#_module.Result.Res| (Lit DatatypeTypeType (|#_module.Tree.Node| (Lit DatatypeTypeType (_module.Result.t |left#1@@0|)) (Lit DatatypeTypeType (_module.Result.t |right#1|)))) (Lit SeqType (_module.Result.sOut |right#1|))))))))))))
 :weight 3
 :pattern ( (_module.__default.build__rec ($LS $ly@@7) (LitInt |d#0@@7|) (Lit SeqType |s#0@@2|)))
))))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.Tree.Node| (Lit DatatypeTypeType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.Tree.Node| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.Tree.Node| (Lit DatatypeTypeType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (! (= (|#_module.Result.Res| (Lit DatatypeTypeType |a#19#0#0|) (Lit SeqType |a#19#1#0|)) (Lit DatatypeTypeType (|#_module.Result.Res| |a#19#0#0| |a#19#1#0|)))
 :pattern ( (|#_module.Result.Res| (Lit DatatypeTypeType |a#19#0#0|) (Lit SeqType |a#19#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((s@@16 T@U) ) (!  (=> (= (|Seq#Length| s@@16) 0) (= s@@16 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@16))
)))
(assert (forall ((s@@17 T@U) (n@@9 Int) ) (!  (=> (= n@@9 0) (= (|Seq#Take| s@@17 n@@9) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@17 n@@9))
)))
(assert (forall ((h@@1 T@U) (v@@5 T@U) ) (! ($IsAlloc intType v@@5 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@5 TInt h@@1))
)))
(assert (forall ((v@@6 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@2)) (forall ((i@@5 Int) ) (!  (=> (and (<= 0 i@@5) (< i@@5 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@5) t0@@2))
 :pattern ( (|Seq#Index| v@@6 i@@5))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@2)))
)))
(assert (forall ((s@@18 T@U) (i@@6 Int) ) (!  (=> (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@18))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@18 i@@6))) (|Seq#Rank| s@@18)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@18 i@@6))))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is intType v@@7 TInt)
 :pattern ( ($Is intType v@@7 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |d#0@@8| () Int)
(declare-fun |s#0@@3| () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon25_Then_correct  (=> ($Is DatatypeTypeType (_module.__default.build__rec ($LS $LZ) |d#0@@8| |s#0@@3|) Tclass._module.Result) (=> (and (and ($IsAlloc intType (int_2_U |d#0@@8|) TInt $Heap) ($IsAlloc SeqType |s#0@@3| (TSeq TInt) $Heap)) (and (or (<= 0 (|Seq#Length| |s#0@@3|)) (= (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|))) (or (or (<= 0 (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|))) (< (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|))) (= (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)) (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)))))) (=> (and (and (and (and (or (and (= |d#0@@8| |d#0@@8|) (|Seq#Equal| |s#0@@3| |s#0@@3|)) (or (< (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|)) (and (= (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|)) (< (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)) (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)))))) (or (and (= |d#0@@8| |d#0@@8|) (|Seq#Equal| |s#0@@3| |s#0@@3|)) (|_module.__default.build__rec#canCall| |d#0@@8| |s#0@@3|))) (and (_module.Result.Res_q (_module.__default.build__rec ($LS $LZ) |d#0@@8| |s#0@@3|)) ($IsAlloc intType (int_2_U |d#0@@8|) TInt $Heap))) (and (and ($IsAlloc SeqType |s#0@@3| (TSeq TInt) $Heap) (or (<= 0 (|Seq#Length| |s#0@@3|)) (= (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|)))) (and (or (or (<= 0 (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|))) (< (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|))) (= (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)) (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)))) (or (and (= |d#0@@8| |d#0@@8|) (|Seq#Equal| |s#0@@3| |s#0@@3|)) (or (< (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|)) (and (= (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|)) (< (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)) (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|))))))))) (and (and (and (or (and (= |d#0@@8| |d#0@@8|) (|Seq#Equal| |s#0@@3| |s#0@@3|)) (|_module.__default.build__rec#canCall| |d#0@@8| |s#0@@3|)) (_module.Result.Res_q (_module.__default.build__rec ($LS $LZ) |d#0@@8| |s#0@@3|))) (and (< (|Seq#Length| (_module.Result.sOut (_module.__default.build__rec ($LS $LZ) |d#0@@8| |s#0@@3|))) (|Seq#Length| |s#0@@3|)) ($IsAlloc intType (int_2_U |d#0@@8|) TInt $Heap))) (and (and ($IsAlloc SeqType |s#0@@3| (TSeq TInt) $Heap) (or (<= 0 (|Seq#Length| |s#0@@3|)) (= (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|)))) (and (or (or (<= 0 (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|))) (< (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|))) (= (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)) (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)))) (= (ControlFlow 0 2) (- 0 1)))))) (or (and (= |d#0@@8| |d#0@@8|) (|Seq#Equal| |s#0@@3| |s#0@@3|)) (or (< (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|)) (and (= (|Seq#Length| |s#0@@3|) (|Seq#Length| |s#0@@3|)) (< (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)) (ite (|Seq#Equal| |s#0@@3| |Seq#Empty|) 0 (- (U_2_int ($Unbox intType (|Seq#Index| |s#0@@3| (LitInt 0)))) |d#0@@8|)))))))))))
(let ((anon24_Else_correct  (=> (not (|Seq#Equal| |s#0@@3| |Seq#Empty|)) (=> (and (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@3|))) (= (ControlFlow 0 4) 2)) anon25_Then_correct))))
(let ((anon24_Then_correct  (=> (and (|Seq#Equal| |s#0@@3| |Seq#Empty|) (= (ControlFlow 0 3) 2)) anon25_Then_correct)))
(let ((anon0_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is SeqType |s#0@@3| (TSeq TInt))) (and (= 2 $FunctionContextHeight) (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)))) (and (=> (= (ControlFlow 0 5) 3) anon24_Then_correct) (=> (= (ControlFlow 0 5) 4) anon24_Else_correct)))))
anon0_correct)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
