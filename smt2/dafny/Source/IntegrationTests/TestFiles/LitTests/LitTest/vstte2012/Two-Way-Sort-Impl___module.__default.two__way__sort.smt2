(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |MultiSet#Multiplicity| (T@U T@U) Int)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| () T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt alloc Tagclass._System.array? Tagclass._System.array tytagFamily$array)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) ) (! ($IsGoodMultiSet (|MultiSet#FromSeq| s))
 :pattern ( (|MultiSet#FromSeq| s))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@1 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) _System.array$arg@@2 $h@@1))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@2 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@2 $f))  (=> (and (or (not (= $o@@2 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@2) |l#2|)))) (= $o@@2 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@2 $f))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@3 T@U) ) (! (= ($Is refType $o@@3 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@3 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((s@@0 T@U) (x@@5 T@U) ) (! (= (exists ((i Int) ) (!  (and (and (<= 0 i) (< i (|Seq#Length| s@@0))) (= x@@5 (|Seq#Index| s@@0 i)))
 :pattern ( (|Seq#Index| s@@0 i))
)) (< 0 (|MultiSet#Multiplicity| (|MultiSet#FromSeq| s@@0) x@@5)))
 :pattern ( (|MultiSet#Multiplicity| (|MultiSet#FromSeq| s@@0) x@@5))
)))
(assert (forall ((h@@3 T@U) (a T@U) ) (! (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| (|Seq#FromArray| h@@3 a)))) (= (|Seq#Index| (|Seq#FromArray| h@@3 a) i@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 a) (IndexField i@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 a) (IndexField i@@0)))
 :pattern ( (|Seq#Index| (|Seq#FromArray| h@@3 a) i@@0))
))
 :pattern ( (|Seq#FromArray| h@@3 a))
)))
(assert (forall ((a@@0 T@U) (b T@U) ) (!  (=> (|MultiSet#Equal| a@@0 b) (= a@@0 b))
 :pattern ( (|MultiSet#Equal| a@@0 b))
)))
(assert (forall ((a@@1 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@1 c)) (not true)) (=> (and ($HeapSucc a@@1 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@1 c)))
 :pattern ( ($HeapSucc a@@1 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TBool) (and (= ($Box boolType ($Unbox boolType bx@@1)) bx@@1) ($Is boolType ($Unbox boolType bx@@1) TBool)))
 :pattern ( ($IsBox bx@@1 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((ms T@U) ) (! (= ($IsGoodMultiSet ms) (forall ((bx@@2 T@U) ) (!  (and (<= 0 (|MultiSet#Multiplicity| ms bx@@2)) (<= (|MultiSet#Multiplicity| ms bx@@2) (|MultiSet#Card| ms)))
 :pattern ( (|MultiSet#Multiplicity| ms bx@@2))
)))
 :pattern ( ($IsGoodMultiSet ms))
)))
(assert (forall ((o@@0 T@U) ) (! (<= 0 (_System.array.Length o@@0))
 :pattern ( (_System.array.Length o@@0))
)))
(assert (forall ((s@@1 T@U) ) (! (<= 0 (|MultiSet#Card| s@@1))
 :pattern ( (|MultiSet#Card| s@@1))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((o@@1 T@U) ) (! (= (|MultiSet#Multiplicity| |MultiSet#Empty| o@@1) 0)
 :pattern ( (|MultiSet#Multiplicity| |MultiSet#Empty| o@@1))
)))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1)
 :pattern ( (IndexField i@@1))
)))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2)
 :pattern ( (IndexField i@@2))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@2 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@4)) TInt $h@@2))
 :pattern ( (_System.array.Length $o@@4) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@4) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@3 T@U) ($o@@5 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@5)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@5) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@5) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert (forall ((s@@3 T@U) ) (!  (and (= (= (|MultiSet#Card| s@@3) 0) (= s@@3 |MultiSet#Empty|)) (=> (or (not (= (|MultiSet#Card| s@@3) 0)) (not true)) (exists ((x@@7 T@U) ) (! (< 0 (|MultiSet#Multiplicity| s@@3 x@@7))
 :pattern ( (|MultiSet#Multiplicity| s@@3 x@@7))
))))
 :pattern ( (|MultiSet#Card| s@@3))
)))
(assert (forall ((h0 T@U) (h1 T@U) (a@@2 T@U) ) (!  (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select refType (MapType0Type FieldType BoxType) h0 a@@2) (MapType0Select refType (MapType0Type FieldType BoxType) h1 a@@2))) (= (|Seq#FromArray| h0 a@@2) (|Seq#FromArray| h1 a@@2)))
 :pattern ( (|Seq#FromArray| h1 a@@2) ($HeapSucc h0 h1))
)))
(assert (forall ((h@@4 T@U) (a@@3 T@U) ) (! (= (|Seq#Length| (|Seq#FromArray| h@@4 a@@3)) (_System.array.Length a@@3))
 :pattern ( (|Seq#Length| (|Seq#FromArray| h@@4 a@@3)))
)))
(assert (forall ((s@@4 T@U) ) (! (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@4)) (|Seq#Length| s@@4))
 :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@4)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@3 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@4 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (= (|MultiSet#FromSeq| |Seq#Empty|) |MultiSet#Empty|))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((x@@9 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@9)) (Lit BoxType ($Box T@@5 x@@9)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@9)))
)))
(assert (forall ((s@@5 T@U) ) (!  (=> (= (|Seq#Length| s@@5) 0) (= s@@5 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@5))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (! (= (|MultiSet#Equal| a@@4 b@@1) (forall ((o@@2 T@U) ) (! (= (|MultiSet#Multiplicity| a@@4 o@@2) (|MultiSet#Multiplicity| b@@1 o@@2))
 :pattern ( (|MultiSet#Multiplicity| a@@4 o@@2))
 :pattern ( (|MultiSet#Multiplicity| b@@1 o@@2))
)))
 :pattern ( (|MultiSet#Equal| a@@4 b@@1))
)))
(assert (forall ((h@@5 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@5)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@5))
)))
(assert (forall ((h@@6 T@U) (v@@3 T@U) ) (! ($IsAlloc boolType v@@3 TBool h@@6)
 :pattern ( ($IsAlloc boolType v@@3 TBool h@@6))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 TInt)
 :pattern ( ($Is intType v@@4 TInt))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is boolType v@@5 TBool)
 :pattern ( ($Is boolType v@@5 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |j#0@1| () Int)
(declare-fun $Heap () T@U)
(declare-fun |n#2@0| () Int)
(declare-fun |i#0@1| () Int)
(declare-fun |m#2@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun $Heap@3 () T@U)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |j#0@4| () Int)
(declare-fun |i#0@4| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |i#0@3| () Int)
(declare-fun |j#0@3| () Int)
(declare-fun |j#0@2| () Int)
(declare-fun |i#0@2| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |i#0@0| () Int)
(declare-fun |j#0@0| () Int)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 68) (let ((anon16_correct  (=> (forall ((|n#3| Int) ) (!  (=> (and (< |j#0@1| |n#3|) (< |n#3| (_System.array.Length |a#0|))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |n#3|)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |n#3|))))
)) (and (=> (= (ControlFlow 0 32) (- 0 34)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 32) (- 0 33)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (=> (= (ControlFlow 0 32) (- 0 31)) ($IsAlloc refType |a#0| (Tclass._System.array? TBool) $Heap)))))))))
(let ((anon34_Else_correct  (=> (and (not (and (< |j#0@1| |n#2@0|) (< |n#2@0| (_System.array.Length |a#0|)))) (= (ControlFlow 0 38) 32)) anon16_correct)))
(let ((anon34_Then_correct  (=> (and (< |j#0@1| |n#2@0|) (< |n#2@0| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 35) (- 0 37)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (and (<= 0 |n#2@0|) (< |n#2@0| (_System.array.Length |a#0|)))) (=> (= (ControlFlow 0 35) 32) anon16_correct)))))))
(let ((anon33_Else_correct  (=> (<= |n#2@0| |j#0@1|) (and (=> (= (ControlFlow 0 41) 35) anon34_Then_correct) (=> (= (ControlFlow 0 41) 38) anon34_Else_correct)))))
(let ((anon33_Then_correct  (=> (< |j#0@1| |n#2@0|) (and (=> (= (ControlFlow 0 39) (- 0 40)) (or (not (= |a#0| null)) (not true))) (and (=> (= (ControlFlow 0 39) 35) anon34_Then_correct) (=> (= (ControlFlow 0 39) 38) anon34_Else_correct))))))
(let ((anon32_Then_correct  (and (=> (= (ControlFlow 0 42) 39) anon33_Then_correct) (=> (= (ControlFlow 0 42) 41) anon33_Else_correct))))
(let ((anon32_Else_correct true))
(let ((anon11_correct  (=> (forall ((|m#3| Int) ) (!  (=> (and (<= (LitInt 0) |m#3|) (< |m#3| |i#0@1|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |m#3|))))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |m#3|))))
)) (and (=> (= (ControlFlow 0 43) 42) anon32_Then_correct) (=> (= (ControlFlow 0 43) 30) anon32_Else_correct)))))
(let ((anon31_Else_correct  (=> (and (not (and (<= (LitInt 0) |m#2@0|) (< |m#2@0| |i#0@1|))) (= (ControlFlow 0 47) 43)) anon11_correct)))
(let ((anon31_Then_correct  (=> (and (<= (LitInt 0) |m#2@0|) (< |m#2@0| |i#0@1|)) (and (=> (= (ControlFlow 0 44) (- 0 46)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 45)) (and (<= 0 |m#2@0|) (< |m#2@0| (_System.array.Length |a#0|)))) (=> (= (ControlFlow 0 44) 43) anon11_correct)))))))
(let ((anon30_Else_correct  (=> (< |m#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 49) 44) anon31_Then_correct) (=> (= (ControlFlow 0 49) 47) anon31_Else_correct)))))
(let ((anon30_Then_correct  (=> (<= (LitInt 0) |m#2@0|) (and (=> (= (ControlFlow 0 48) 44) anon31_Then_correct) (=> (= (ControlFlow 0 48) 47) anon31_Else_correct)))))
(let ((anon29_Then_correct  (and (=> (= (ControlFlow 0 50) 48) anon30_Then_correct) (=> (= (ControlFlow 0 50) 49) anon30_Else_correct))))
(let ((anon29_Else_correct true))
(let ((anon6_correct  (=> (and (and (<= (LitInt 0) |i#0@1|) (<= |i#0@1| (+ |j#0@1| 1))) (<= (+ |j#0@1| 1) (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 51) 50) anon29_Then_correct) (=> (= (ControlFlow 0 51) 29) anon29_Else_correct)))))
(let ((anon28_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#0@1|) (<= |i#0@1| (+ |j#0@1| 1)))) (= (ControlFlow 0 54) 51)) anon6_correct)))
(let ((anon28_Then_correct  (=> (and (<= (LitInt 0) |i#0@1|) (<= |i#0@1| (+ |j#0@1| 1))) (and (=> (= (ControlFlow 0 52) (- 0 53)) (or (not (= |a#0| null)) (not true))) (=> (= (ControlFlow 0 52) 51) anon6_correct)))))
(let ((anon27_Else_correct  (=> (< |i#0@1| (LitInt 0)) (and (=> (= (ControlFlow 0 56) 52) anon28_Then_correct) (=> (= (ControlFlow 0 56) 54) anon28_Else_correct)))))
(let ((anon27_Then_correct  (=> (<= (LitInt 0) |i#0@1|) (and (=> (= (ControlFlow 0 55) 52) anon28_Then_correct) (=> (= (ControlFlow 0 55) 54) anon28_Else_correct)))))
(let ((anon26_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 57) 55) anon27_Then_correct) (=> (= (ControlFlow 0 57) 56) anon27_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 25) (- 0 26)) (forall ((|m#1| Int) (|n#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |m#1|) (< |m#1| |n#1|)) (< |n#1| (_System.array.Length |a#0|))) (or (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |m#1|))))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |n#1|))))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |n#1|))) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |m#1|))))
))) (=> (forall ((|m#1@@0| Int) (|n#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |m#1@@0|) (< |m#1@@0| |n#1@@0|)) (< |n#1@@0| (_System.array.Length |a#0|))) (or (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |m#1@@0|))))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |n#1@@0|))))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |n#1@@0|))) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |a#0|) (IndexField |m#1@@0|))))
)) (=> (= (ControlFlow 0 25) (- 0 24)) (|MultiSet#Equal| (|MultiSet#FromSeq| (|Seq#FromArray| $Heap@3 |a#0|)) (|MultiSet#FromSeq| (|Seq#FromArray| $Heap |a#0|))))))))
(let ((anon35_Then_correct  (=> (< |j#0@1| |i#0@1|) (=> (and (= $Heap@3 $Heap@0) (= (ControlFlow 0 27) 25)) GeneratedUnifiedExit_correct))))
(let ((anon24_correct  (and (=> (= (ControlFlow 0 3) (- 0 10)) (or (<= 0 |$decr$loop#00@1|) (= (- |j#0@4| |i#0@4|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- |j#0@4| |i#0@4|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 3) (- 0 9)) (< (- |j#0@4| |i#0@4|) |$decr$loop#00@1|)) (=> (< (- |j#0@4| |i#0@4|) |$decr$loop#00@1|) (and (=> (= (ControlFlow 0 3) (- 0 8)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@4|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@4|)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (=> |$w$loop#0@0| (<= |i#0@4| (+ |j#0@4| 1)))) (=> (=> |$w$loop#0@0| (<= |i#0@4| (+ |j#0@4| 1))) (and (=> (= (ControlFlow 0 3) (- 0 6)) (=> |$w$loop#0@0| (<= (+ |j#0@4| 1) (_System.array.Length |a#0|)))) (=> (=> |$w$loop#0@0| (<= (+ |j#0@4| 1) (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> |$w$loop#0@0| (forall ((|m#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |m#3@@0|) (< |m#3@@0| |i#0@4|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |m#3@@0|))))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |m#3@@0|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|m#3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |m#3@@1|) (< |m#3@@1| |i#0@4|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |m#3@@1|))))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |m#3@@1|))))
))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#0@0| (forall ((|n#3@@0| Int) ) (!  (=> (and (< |j#0@4| |n#3@@0|) (< |n#3@@0| (_System.array.Length |a#0|))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |n#3@@0|)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |n#3@@0|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#3@@1| Int) ) (!  (=> (and (< |j#0@4| |n#3@@1|) (< |n#3@@1| (_System.array.Length |a#0|))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |n#3@@1|)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 |a#0|) (IndexField |n#3@@1|))))
))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#0@0| (|MultiSet#Equal| (|MultiSet#FromSeq| (|Seq#FromArray| $Heap@2 |a#0|)) (|MultiSet#FromSeq| (|Seq#FromArray| $Heap |a#0|)))))))))))))))))))))
(let ((anon37_Else_correct  (=> (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |j#0@1|))))) (and (=> (= (ControlFlow 0 13) (- 0 17)) (forall (($o@@6 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6) alloc)))) (= $o@@6 |a#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@6 $f@@0))))) (=> (forall (($o@@7 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@7) alloc)))) (= $o@@7 |a#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@7 $f@@1)))) (and (=> (= (ControlFlow 0 13) (- 0 16)) (<= (LitInt 0) |i#0@1|)) (=> (<= (LitInt 0) |i#0@1|) (and (=> (= (ControlFlow 0 13) (- 0 15)) (< |i#0@1| |j#0@1|)) (=> (< |i#0@1| |j#0@1|) (and (=> (= (ControlFlow 0 13) (- 0 14)) (< |j#0@1| (_System.array.Length |a#0|))) (=> (< |j#0@1| (_System.array.Length |a#0|)) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0|) (IndexField |i#0@1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |j#0@1|))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0|) (IndexField |j#0@1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |i#0@1|)))) (and (forall ((|m#1@@1| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |m#1@@1|) (< |m#1@@1| (_System.array.Length |a#0|))) (or (not (= |m#1@@1| |i#0@1|)) (not true))) (or (not (= |m#1@@1| |j#0@1|)) (not true))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0|) (IndexField |m#1@@1|)) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |m#1@@1|))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |m#1@@1|)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |a#0|) (IndexField |m#1@@1|)))
)) (|MultiSet#Equal| (|MultiSet#FromSeq| (|Seq#FromArray| $Heap@1 |a#0|)) (|MultiSet#FromSeq| (|Seq#FromArray| $Heap@0 |a#0|))))) (=> (and (and (and (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@8) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@8)) (= $o@@8 |a#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8))
)) ($HeapSucc $Heap@0 $Heap@1)) (and (= |i#0@3| (+ |i#0@1| 1)) (= |j#0@3| (- |j#0@1| 1)))) (and (and (= |i#0@4| |i#0@3|) (= |j#0@4| |j#0@3|)) (and (= $Heap@2 $Heap@1) (= (ControlFlow 0 13) 3)))) anon24_correct))))))))))))))
(let ((anon37_Then_correct  (=> (and (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |j#0@1|)))) (= |j#0@2| (- |j#0@1| 1))) (=> (and (and (= |i#0@4| |i#0@1|) (= |j#0@4| |j#0@2|)) (and (= $Heap@2 $Heap@0) (= (ControlFlow 0 12) 3))) anon24_correct))))
(let ((anon36_Else_correct  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |i#0@1|)))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (and (<= 0 |j#0@1|) (< |j#0@1| (_System.array.Length |a#0|)))) (=> (and (<= 0 |j#0@1|) (< |j#0@1| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 18) 12) anon37_Then_correct) (=> (= (ControlFlow 0 18) 13) anon37_Else_correct)))))))))
(let ((anon36_Then_correct  (=> (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |i#0@1|))))) (= |i#0@2| (+ |i#0@1| 1))) (=> (and (and (= |i#0@4| |i#0@2|) (= |j#0@4| |j#0@1|)) (and (= $Heap@2 $Heap@0) (= (ControlFlow 0 11) 3))) anon24_correct))))
(let ((anon35_Else_correct  (=> (and (<= |i#0@1| |j#0@1|) (= |$decr$loop#00@1| (- |j#0@1| |i#0@1|))) (and (=> (= (ControlFlow 0 21) (- 0 23)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (and (=> (= (ControlFlow 0 21) (- 0 22)) (and (<= 0 |i#0@1|) (< |i#0@1| (_System.array.Length |a#0|)))) (=> (and (<= 0 |i#0@1|) (< |i#0@1| (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 21) 11) anon36_Then_correct) (=> (= (ControlFlow 0 21) 18) anon36_Else_correct)))))))))
(let ((anon26_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 28) 27) anon35_Then_correct) (=> (= (ControlFlow 0 28) 21) anon35_Else_correct)))))
(let ((anon25_LoopBody_correct  (and (=> (= (ControlFlow 0 58) 57) anon26_Then_correct) (=> (= (ControlFlow 0 58) 28) anon26_Else_correct))))
(let ((anon25_LoopDone_correct true))
(let ((anon25_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (not false) (<= 0 |i#0@1|)) (and (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@1|)) (=> |$w$loop#0@0| (<= |i#0@1| (+ |j#0@1| 1))))) (=> (and (and (and (=> |$w$loop#0@0| (<= (+ |j#0@1| 1) (_System.array.Length |a#0|))) (=> |$w$loop#0@0| (forall ((|m#3@@2| Int) ) (!  (=> (and (<= (LitInt 0) |m#3@@2|) (< |m#3@@2| |i#0@1|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |m#3@@2|))))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |m#3@@2|))))
)))) (and (=> |$w$loop#0@0| (forall ((|n#3@@2| Int) ) (!  (=> (and (< |j#0@1| |n#3@@2|) (< |n#3@@2| (_System.array.Length |a#0|))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |n#3@@2|)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |a#0|) (IndexField |n#3@@2|))))
))) (=> |$w$loop#0@0| (|MultiSet#Equal| (|MultiSet#FromSeq| (|Seq#FromArray| $Heap@0 |a#0|)) (|MultiSet#FromSeq| (|Seq#FromArray| $Heap |a#0|)))))) (and (and (forall (($o@@9 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@9) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@9) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@9)) (= $o@@9 |a#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@9))
)) ($HeapSucc $Heap $Heap@0)) (and (forall (($o@@10 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@10) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@10) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@10) $f@@2)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@10 $f@@2))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@10) $f@@2))
)) (<= (- |j#0@1| |i#0@1|) |$decr_init$loop#00@0|)))) (and (=> (= (ControlFlow 0 59) 1) anon25_LoopDone_correct) (=> (= (ControlFlow 0 59) 58) anon25_LoopBody_correct)))))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc |a#0|)) (= |i#0@0| (LitInt 0))) (and (=> (= (ControlFlow 0 60) (- 0 67)) (or (not (= |a#0| null)) (not true))) (=> (or (not (= |a#0| null)) (not true)) (=> (and (= |j#0@0| (- (_System.array.Length |a#0|) 1)) (= |$decr_init$loop#00@0| (- |j#0@0| |i#0@0|))) (and (=> (= (ControlFlow 0 60) (- 0 66)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@0|)) (and (=> (= (ControlFlow 0 60) (- 0 65)) (=> |$w$loop#0@0| (<= |i#0@0| (+ |j#0@0| 1)))) (=> (=> |$w$loop#0@0| (<= |i#0@0| (+ |j#0@0| 1))) (and (=> (= (ControlFlow 0 60) (- 0 64)) (=> |$w$loop#0@0| (<= (+ |j#0@0| 1) (_System.array.Length |a#0|)))) (=> (=> |$w$loop#0@0| (<= (+ |j#0@0| 1) (_System.array.Length |a#0|))) (and (=> (= (ControlFlow 0 60) (- 0 63)) (=> |$w$loop#0@0| (forall ((|m#3@@3| Int) ) (!  (=> (and (<= (LitInt 0) |m#3@@3|) (< |m#3@@3| |i#0@0|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |m#3@@3|))))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |m#3@@3|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|m#3@@4| Int) ) (!  (=> (and (<= (LitInt 0) |m#3@@4|) (< |m#3@@4| |i#0@0|)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |m#3@@4|))))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |m#3@@4|))))
))) (and (=> (= (ControlFlow 0 60) (- 0 62)) (=> |$w$loop#0@0| (forall ((|n#3@@3| Int) ) (!  (=> (and (< |j#0@0| |n#3@@3|) (< |n#3@@3| (_System.array.Length |a#0|))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |n#3@@3|)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |n#3@@3|))))
)))) (=> (=> |$w$loop#0@0| (forall ((|n#3@@4| Int) ) (!  (=> (and (< |j#0@0| |n#3@@4|) (< |n#3@@4| (_System.array.Length |a#0|))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |n#3@@4|)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |a#0|) (IndexField |n#3@@4|))))
))) (and (=> (= (ControlFlow 0 60) (- 0 61)) (=> |$w$loop#0@0| (|MultiSet#Equal| (|MultiSet#FromSeq| (|Seq#FromArray| $Heap |a#0|)) (|MultiSet#FromSeq| (|Seq#FromArray| $Heap |a#0|))))) (=> (=> |$w$loop#0@0| (|MultiSet#Equal| (|MultiSet#FromSeq| (|Seq#FromArray| $Heap |a#0|)) (|MultiSet#FromSeq| (|Seq#FromArray| $Heap |a#0|)))) (=> (= (ControlFlow 0 60) 59) anon25_LoopHead_correct)))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is refType |a#0| (Tclass._System.array TBool)) ($IsAlloc refType |a#0| (Tclass._System.array TBool) $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 68) 60))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
