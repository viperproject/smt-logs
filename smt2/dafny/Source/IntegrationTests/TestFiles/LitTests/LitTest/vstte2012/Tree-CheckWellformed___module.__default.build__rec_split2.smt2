(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@U Int) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@U T@U) Bool)
(declare-fun $generated@@39 (T@T T@U T@U) Bool)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@46 (T@U) T@U)
(declare-fun $generated@@51 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@55 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@T T@T) T@T)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@59 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T) T@T)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@110 () T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@27 $generated@@29 $generated@@30)  (and (= ($generated@@20 $generated@@29) ($generated@@20 $generated@@30)) (forall (($generated@@31 Int) ) (!  (=> (and (<= 0 $generated@@31) (< $generated@@31 ($generated@@20 $generated@@29))) (= ($generated@@28 $generated@@29 $generated@@31) ($generated@@28 $generated@@30 $generated@@31)))
 :pattern ( ($generated@@28 $generated@@29 $generated@@31))
 :pattern ( ($generated@@28 $generated@@30 $generated@@31))
))))
 :pattern ( ($generated@@27 $generated@@29 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 ($generated@@32 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (!  (=> ($generated@@27 $generated@@36 $generated@@37) (= $generated@@36 $generated@@37))
 :pattern ( ($generated@@27 $generated@@36 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (!  (=> ($generated@@38 $generated@@40 $generated) (and (= ($generated@@33 $generated@@5 ($generated@@32 $generated@@5 $generated@@40)) $generated@@40) ($generated@@39 $generated@@5 ($generated@@32 $generated@@5 $generated@@40) $generated)))
 :pattern ( ($generated@@38 $generated@@40 $generated))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@38 ($generated@@33 $generated@@43 $generated@@41) $generated@@42) ($generated@@39 $generated@@43 $generated@@41 $generated@@42))
 :pattern ( ($generated@@38 ($generated@@33 $generated@@43 $generated@@41) $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ) (! (<= 0 ($generated@@20 $generated@@44))
 :pattern ( ($generated@@20 $generated@@44))
)))
(assert (forall (($generated@@47 T@U) ) (! (= ($generated@@46 ($generated@@45 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@45 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@19 ($generated@@45 $generated@@48)) $generated@@1)
 :pattern ( ($generated@@45 $generated@@48))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@32 $generated@@50 ($generated@@33 $generated@@50 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@33 $generated@@50 $generated@@49))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@51 $generated@@62 $generated@@63 $generated@@64 ($generated@@58 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@67 $generated@@68) $generated@@65)
 :weight 0
)) (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@51 $generated@@69 $generated@@70 $generated@@71 ($generated@@58 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@76 $generated@@77) ($generated@@51 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@76 $generated@@77)))
 :weight 0
)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@51 $generated@@78 $generated@@79 $generated@@80 ($generated@@58 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@51 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)))) (= ($generated@@3 $generated@@52) 3)) (= ($generated@@3 $generated@@53) 4)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@55 $generated@@87 $generated@@88 ($generated@@59 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@89) $generated@@91) $generated@@89)
 :weight 0
))) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@96 $generated@@97) (= ($generated@@55 $generated@@92 $generated@@93 ($generated@@59 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@97) ($generated@@55 $generated@@92 $generated@@93 $generated@@95 $generated@@97)))
 :weight 0
))) (= ($generated@@3 $generated@@56) 5)) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (= ($generated@@3 ($generated@@57 $generated@@98 $generated@@99)) 6))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@60 ($generated@@57 $generated@@100 $generated@@101)) $generated@@100)
 :pattern ( ($generated@@57 $generated@@100 $generated@@101))
))) (forall (($generated@@102 T@T) ($generated@@103 T@T) ) (! (= ($generated@@61 ($generated@@57 $generated@@102 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@57 $generated@@102 $generated@@103))
))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 Bool) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@8 ($generated@@51 $generated@@52 $generated@@53 $generated@@4 ($generated@@54 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))  (=> (and (or (not (= $generated@@108 $generated@@104)) (not true)) ($generated@@8 ($generated@@32 $generated@@4 ($generated@@55 $generated@@53 $generated@@56 ($generated@@55 $generated@@52 ($generated@@57 $generated@@53 $generated@@56) $generated@@105 $generated@@108) $generated@@106)))) $generated@@107))
 :pattern ( ($generated@@51 $generated@@52 $generated@@53 $generated@@4 ($generated@@54 $generated@@104 $generated@@105 $generated@@106 $generated@@107) $generated@@108 $generated@@109))
)))
(assert (= ($generated@@3 $generated@@110) 7))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (!  (=> ($generated@@38 $generated@@111 ($generated@@45 $generated@@112)) (and (= ($generated@@33 $generated@@110 ($generated@@32 $generated@@110 $generated@@111)) $generated@@111) ($generated@@39 $generated@@110 ($generated@@32 $generated@@110 $generated@@111) ($generated@@45 $generated@@112))))
 :pattern ( ($generated@@38 $generated@@111 ($generated@@45 $generated@@112)))
)))
(assert (forall (($generated@@113 Int) ) (! (= ($generated@@33 $generated@@5 ($generated@@9 ($generated@@22 $generated@@113))) ($generated@@24 $generated@@56 ($generated@@33 $generated@@5 ($generated@@9 $generated@@113))))
 :pattern ( ($generated@@33 $generated@@5 ($generated@@9 ($generated@@22 $generated@@113))))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@33 $generated@@115 ($generated@@24 $generated@@115 $generated@@114)) ($generated@@24 $generated@@56 ($generated@@33 $generated@@115 $generated@@114)))
 :pattern ( ($generated@@33 $generated@@115 ($generated@@24 $generated@@115 $generated@@114)))
)))
(assert (forall (($generated@@116 T@U) ) (!  (=> (= ($generated@@20 $generated@@116) 0) (= $generated@@116 $generated@@21))
 :pattern ( ($generated@@20 $generated@@116))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@39 $generated@@110 $generated@@117 ($generated@@45 $generated@@118)) (forall (($generated@@119 Int) ) (!  (=> (and (<= 0 $generated@@119) (< $generated@@119 ($generated@@20 $generated@@117))) ($generated@@38 ($generated@@28 $generated@@117 $generated@@119) $generated@@118))
 :pattern ( ($generated@@28 $generated@@117 $generated@@119))
)))
 :pattern ( ($generated@@39 $generated@@110 $generated@@117 ($generated@@45 $generated@@118)))
)))
(assert (forall (($generated@@120 T@U) ) (! ($generated@@39 $generated@@5 $generated@@120 $generated)
 :pattern ( ($generated@@39 $generated@@5 $generated@@120 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@129  (=> (and (not (or ($generated@@27 $generated@@121 $generated@@21) (< ($generated@@10 ($generated@@32 $generated@@5 ($generated@@28 $generated@@121 ($generated@@22 0)))) $generated@@122))) (= (ControlFlow 0 2) (- 0 1))) (and (<= 0 ($generated@@22 0)) (< ($generated@@22 0) ($generated@@20 $generated@@121))))))
(let (($generated@@130  (=> (and ($generated@@27 $generated@@121 $generated@@21) (= (ControlFlow 0 4) 2)) $generated@@129)))
(let (($generated@@131  (=> (not ($generated@@27 $generated@@121 $generated@@21)) (=> (and (and (<= 0 ($generated@@22 0)) (< ($generated@@22 0) ($generated@@20 $generated@@121))) (= (ControlFlow 0 3) 2)) $generated@@129))))
(let (($generated@@132  (=> (not ($generated@@27 $generated@@121 $generated@@21)) (=> (and (<= 0 ($generated@@22 0)) (< ($generated@@22 0) ($generated@@20 $generated@@121))) (and (=> (= (ControlFlow 0 6) 3) $generated@@131) (=> (= (ControlFlow 0 6) 4) $generated@@130))))))
(let (($generated@@133  (=> ($generated@@27 $generated@@121 $generated@@21) (and (=> (= (ControlFlow 0 5) 3) $generated@@131) (=> (= (ControlFlow 0 5) 4) $generated@@130)))))
(let (($generated@@134  (=> (and (and (and ($generated@@123 $generated@@124) ($generated@@125 $generated@@124)) ($generated@@39 $generated@@110 $generated@@121 ($generated@@45 $generated))) (and (= 2 $generated@@126) (= $generated@@127 ($generated@@54 $generated@@128 $generated@@124 $generated@@2 false)))) (and (=> (= (ControlFlow 0 7) 5) $generated@@133) (=> (= (ControlFlow 0 7) 6) $generated@@132)))))
$generated@@134)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
