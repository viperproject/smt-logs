(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) Bool)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 (T@U) T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@41 (T@U T@U) T@U)
(declare-fun $generated@@44 (T@U) T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@47 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@79 (T@U) Int)
(declare-fun $generated@@84 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@88 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@89 () T@T)
(declare-fun $generated@@90 (T@T T@T) T@T)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@T) T@T)
(declare-fun $generated@@94 (T@T) T@T)
(declare-fun $generated@@144 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@148 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (= ($generated@@7 $generated@@29) 3))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> (or ($generated@@27 $generated@@36) (and (< 1 $generated@@24) ($generated@@28 $generated@@29 $generated@@36 $generated@@30))) (and (=> (not ($generated@@31 $generated@@36)) (=> (not ($generated@@32 $generated@@36)) (let (($generated@@37 ($generated@@33 $generated@@36)))
(let (($generated@@38 ($generated@@34 $generated@@36)))
 (and ($generated@@27 $generated@@38) (=> (not ($generated@@25 $generated@@35 $generated@@38)) ($generated@@27 $generated@@37))))))) (= ($generated@@25 ($generated@@26 $generated@@35) $generated@@36) (ite ($generated@@31 $generated@@36) true (ite ($generated@@32 $generated@@36) false (let (($generated@@39 ($generated@@33 $generated@@36)))
(let (($generated@@40 ($generated@@34 $generated@@36)))
 (or ($generated@@25 $generated@@35 $generated@@40) ($generated@@25 $generated@@35 $generated@@39)))))))))
 :pattern ( ($generated@@25 ($generated@@26 $generated@@35) $generated@@36))
))))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@28 $generated@@29 ($generated@@41 $generated@@42 $generated@@43) $generated@@30)  (and ($generated@@28 $generated@@29 $generated@@42 $generated@@30) ($generated@@28 $generated@@29 $generated@@43 $generated@@30)))
 :pattern ( ($generated@@28 $generated@@29 ($generated@@41 $generated@@42 $generated@@43) $generated@@30))
)))
(assert (= ($generated@@44 $generated@@45) $generated@@3))
(assert (= ($generated@@44 $generated@@46) $generated@@4))
(assert ($generated@@28 $generated@@29 $generated@@45 $generated@@30))
(assert ($generated@@28 $generated@@29 $generated@@46 $generated@@30))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@47 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@47 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@31 $generated@@50) (= ($generated@@44 $generated@@50) $generated@@3))
 :pattern ( ($generated@@31 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@32 $generated@@51) (= ($generated@@44 $generated@@51) $generated@@4))
 :pattern ( ($generated@@32 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@52 $generated@@53) (= ($generated@@44 $generated@@53) $generated@@5))
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 ($generated@@54 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@54 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@52 $generated@@58) (exists (($generated@@59 T@U) ($generated@@60 T@U) ) (= $generated@@58 ($generated@@41 $generated@@59 $generated@@60))))
 :pattern ( ($generated@@52 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ) (!  (=> ($generated@@31 $generated@@61) (= $generated@@61 $generated@@45))
 :pattern ( ($generated@@31 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ) (!  (=> ($generated@@32 $generated@@62) (= $generated@@62 $generated@@46))
 :pattern ( ($generated@@32 $generated@@62))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (or ($generated@@27 ($generated@@47 $generated@@29 $generated@@64)) (and (< 1 $generated@@24) ($generated@@28 $generated@@29 $generated@@64 $generated@@30))) (and (=> (not ($generated@@12 ($generated@@47 $generated@@8 ($generated@@11 ($generated@@31 ($generated@@47 $generated@@29 $generated@@64)))))) (=> (not ($generated@@12 ($generated@@47 $generated@@8 ($generated@@11 ($generated@@32 ($generated@@47 $generated@@29 $generated@@64)))))) (let (($generated@@65 ($generated@@47 $generated@@29 ($generated@@33 ($generated@@47 $generated@@29 $generated@@64)))))
(let (($generated@@66 ($generated@@47 $generated@@29 ($generated@@34 ($generated@@47 $generated@@29 $generated@@64)))))
 (and ($generated@@27 $generated@@66) (=> (not ($generated@@25 ($generated@@26 $generated@@63) $generated@@66)) ($generated@@27 $generated@@65))))))) (= ($generated@@25 ($generated@@26 $generated@@63) ($generated@@47 $generated@@29 $generated@@64)) (ite ($generated@@31 ($generated@@47 $generated@@29 $generated@@64)) true (ite ($generated@@32 ($generated@@47 $generated@@29 $generated@@64)) false ($generated@@12 (let (($generated@@67 ($generated@@47 $generated@@29 ($generated@@33 ($generated@@47 $generated@@29 $generated@@64)))))
(let (($generated@@68 ($generated@@47 $generated@@29 ($generated@@34 ($generated@@47 $generated@@29 $generated@@64)))))
($generated@@47 $generated@@8 ($generated@@11  (or ($generated@@25 ($generated@@26 $generated@@63) $generated@@68) ($generated@@25 ($generated@@26 $generated@@63) $generated@@67))))))))))))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@26 $generated@@63) ($generated@@47 $generated@@29 $generated@@64)))
))))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@25 ($generated@@26 $generated@@69) $generated@@70) ($generated@@25 $generated@@69 $generated@@70))
 :pattern ( ($generated@@25 ($generated@@26 $generated@@69) $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@44 ($generated@@41 $generated@@71 $generated@@72)) $generated@@5)
 :pattern ( ($generated@@41 $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@34 ($generated@@41 $generated@@73 $generated@@74)) $generated@@73)
 :pattern ( ($generated@@41 $generated@@73 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@33 ($generated@@41 $generated@@75 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@41 $generated@@75 $generated@@76))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@54 $generated@@78 ($generated@@55 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@55 $generated@@78 $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (< ($generated@@79 $generated@@80) ($generated@@79 ($generated@@41 $generated@@80 $generated@@81)))
 :pattern ( ($generated@@41 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (! (< ($generated@@79 $generated@@83) ($generated@@79 ($generated@@41 $generated@@82 $generated@@83)))
 :pattern ( ($generated@@41 $generated@@82 $generated@@83))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@84 $generated@@95 $generated@@96 $generated@@97 ($generated@@91 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@100 $generated@@101) $generated@@98)
 :weight 0
)) (and (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@107 $generated@@109) (= ($generated@@84 $generated@@102 $generated@@103 $generated@@104 ($generated@@91 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@84 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@84 $generated@@111 $generated@@112 $generated@@113 ($generated@@91 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@84 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)))) (= ($generated@@7 $generated@@85) 4)) (= ($generated@@7 $generated@@86) 5)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@88 $generated@@120 $generated@@121 ($generated@@92 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@122) $generated@@124) $generated@@122)
 :weight 0
))) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (!  (or (= $generated@@129 $generated@@130) (= ($generated@@88 $generated@@125 $generated@@126 ($generated@@92 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@127) $generated@@130) ($generated@@88 $generated@@125 $generated@@126 $generated@@128 $generated@@130)))
 :weight 0
))) (= ($generated@@7 $generated@@89) 6)) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (= ($generated@@7 ($generated@@90 $generated@@131 $generated@@132)) 7))) (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (! (= ($generated@@93 ($generated@@90 $generated@@133 $generated@@134)) $generated@@133)
 :pattern ( ($generated@@90 $generated@@133 $generated@@134))
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ) (! (= ($generated@@94 ($generated@@90 $generated@@135 $generated@@136)) $generated@@136)
 :pattern ( ($generated@@90 $generated@@135 $generated@@136))
))))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 Bool) ($generated@@141 T@U) ($generated@@142 T@U) ) (! (= ($generated@@12 ($generated@@84 $generated@@85 $generated@@86 $generated@@8 ($generated@@87 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))  (=> (and (or (not (= $generated@@141 $generated@@137)) (not true)) ($generated@@12 ($generated@@54 $generated@@8 ($generated@@88 $generated@@86 $generated@@89 ($generated@@88 $generated@@85 ($generated@@90 $generated@@86 $generated@@89) $generated@@138 $generated@@141) $generated@@139)))) $generated@@140))
 :pattern ( ($generated@@84 $generated@@85 $generated@@86 $generated@@8 ($generated@@87 $generated@@137 $generated@@138 $generated@@139 $generated@@140) $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@143 $generated@@30) (or (or ($generated@@31 $generated@@143) ($generated@@32 $generated@@143)) ($generated@@52 $generated@@143)))
 :pattern ( ($generated@@52 $generated@@143) ($generated@@28 $generated@@29 $generated@@143 $generated@@30))
 :pattern ( ($generated@@32 $generated@@143) ($generated@@28 $generated@@29 $generated@@143 $generated@@30))
 :pattern ( ($generated@@31 $generated@@143) ($generated@@28 $generated@@29 $generated@@143 $generated@@30))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (!  (=> (and ($generated@@145 $generated@@147) ($generated@@28 $generated@@29 $generated@@146 $generated@@30)) ($generated@@144 $generated@@29 $generated@@146 $generated@@30 $generated@@147))
 :pattern ( ($generated@@144 $generated@@29 $generated@@146 $generated@@30 $generated@@147))
)))
(assert (= ($generated@@23 $generated@@30) $generated@@2))
(assert (= ($generated@@148 $generated@@30) $generated@@6))
(assert (= $generated@@45 ($generated@@47 $generated@@29 $generated@@45)))
(assert (= $generated@@46 ($generated@@47 $generated@@29 $generated@@46)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@U) ) (!  (=> (and ($generated@@145 $generated@@150) (and ($generated@@52 $generated@@149) ($generated@@144 $generated@@29 $generated@@149 $generated@@30 $generated@@150))) ($generated@@144 $generated@@29 ($generated@@34 $generated@@149) $generated@@30 $generated@@150))
 :pattern ( ($generated@@144 $generated@@29 ($generated@@34 $generated@@149) $generated@@30 $generated@@150))
)))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (!  (=> (and ($generated@@145 $generated@@152) (and ($generated@@52 $generated@@151) ($generated@@144 $generated@@29 $generated@@151 $generated@@30 $generated@@152))) ($generated@@144 $generated@@29 ($generated@@33 $generated@@151) $generated@@30 $generated@@152))
 :pattern ( ($generated@@144 $generated@@29 ($generated@@33 $generated@@151) $generated@@30 $generated@@152))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (! (= ($generated@@41 ($generated@@47 $generated@@29 $generated@@153) ($generated@@47 $generated@@29 $generated@@154)) ($generated@@47 $generated@@29 ($generated@@41 $generated@@153 $generated@@154)))
 :pattern ( ($generated@@41 ($generated@@47 $generated@@29 $generated@@153) ($generated@@47 $generated@@29 $generated@@154)))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@T) ) (! (= ($generated@@55 $generated@@156 ($generated@@47 $generated@@156 $generated@@155)) ($generated@@47 $generated@@89 ($generated@@55 $generated@@156 $generated@@155)))
 :pattern ( ($generated@@55 $generated@@156 ($generated@@47 $generated@@156 $generated@@155)))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (! ($generated@@144 $generated@@8 $generated@@158 $generated $generated@@157)
 :pattern ( ($generated@@144 $generated@@8 $generated@@158 $generated $generated@@157))
)))
(assert (forall (($generated@@159 T@U) ) (! ($generated@@28 $generated@@8 $generated@@159 $generated)
 :pattern ( ($generated@@28 $generated@@8 $generated@@159 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@172 true))
(let (($generated@@173  (=> (and ($generated@@25 ($generated@@26 $generated@@160) $generated@@161) (= (ControlFlow 0 8) 5)) $generated@@172)))
(let (($generated@@174  (=> (and (not ($generated@@25 ($generated@@26 $generated@@160) $generated@@161)) ($generated@@144 $generated@@29 $generated@@162 $generated@@30 $generated@@163)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (< ($generated@@79 $generated@@162) ($generated@@79 $generated@@164))) (=> (< ($generated@@79 $generated@@162) ($generated@@79 $generated@@164)) (=> (and ($generated@@27 $generated@@162) (= (ControlFlow 0 6) 5)) $generated@@172))))))
(let (($generated@@175  (=> (and (= $generated@@164 ($generated@@41 $generated@@165 $generated@@166)) ($generated@@28 $generated@@29 $generated@@165 $generated@@30)) (=> (and (and (and ($generated@@28 $generated@@29 $generated@@166 $generated@@30) (= $generated@@167 $generated@@166)) (and ($generated@@28 $generated@@29 $generated@@167 $generated@@30) (= $generated@@162 $generated@@167))) (and (and (= $generated@@168 $generated@@165) ($generated@@28 $generated@@29 $generated@@168 $generated@@30)) (and (= $generated@@161 $generated@@168) ($generated@@144 $generated@@29 $generated@@161 $generated@@30 $generated@@163)))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (< ($generated@@79 $generated@@161) ($generated@@79 $generated@@164))) (=> (< ($generated@@79 $generated@@161) ($generated@@79 $generated@@164)) (=> ($generated@@27 $generated@@161) (and (=> (= (ControlFlow 0 9) 6) $generated@@174) (=> (= (ControlFlow 0 9) 8) $generated@@173)))))))))
(let (($generated@@176 true))
(let (($generated@@177  (=> (or (not (= $generated@@164 $generated@@46)) (not true)) (and (=> (= (ControlFlow 0 11) 9) $generated@@175) (=> (= (ControlFlow 0 11) 4) $generated@@176)))))
(let (($generated@@178 true))
(let (($generated@@179  (=> (or (not (= $generated@@164 $generated@@45)) (not true)) (and (=> (= (ControlFlow 0 12) 3) $generated@@178) (=> (= (ControlFlow 0 12) 11) $generated@@177)))))
(let (($generated@@180 true))
(let (($generated@@181 true))
(let (($generated@@182  (=> (= $generated@@169 ($generated@@87 $generated@@170 $generated@@163 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 13) 1) $generated@@181) (=> (= (ControlFlow 0 13) 2) $generated@@180)) (=> (= (ControlFlow 0 13) 12) $generated@@179)))))
(let (($generated@@183  (=> (and (and (and ($generated@@145 $generated@@163) ($generated@@171 $generated@@163)) ($generated@@28 $generated@@29 $generated@@164 $generated@@30)) (and (= 1 $generated@@24) (= (ControlFlow 0 14) 13))) $generated@@182)))
$generated@@183)))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
