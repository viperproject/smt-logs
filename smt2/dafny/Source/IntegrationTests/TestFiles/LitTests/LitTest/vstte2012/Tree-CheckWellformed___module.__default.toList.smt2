(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Tree () T@U)
(declare-fun |##_module.Tree.Leaf| () T@U)
(declare-fun |##_module.Tree.Node| () T@U)
(declare-fun tytagFamily$Tree () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.Tree.Node| (T@U T@U) T@U)
(declare-fun Tclass._module.Tree () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Tree.Leaf| () T@U)
(declare-fun |_module.Tree#Equal| (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.Tree.Leaf_q (T@U) Bool)
(declare-fun _module.Tree.Node_q (T@U) Bool)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.toList (T@U Int T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.toList#canCall| (Int T@U) Bool)
(declare-fun _module.Tree._h1 (T@U) T@U)
(declare-fun _module.Tree._h0 (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc Tagclass._module.Tree |##_module.Tree.Leaf| |##_module.Tree.Node| tytagFamily$Tree)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tree.Node| |a#6#0#0| |a#6#1#0|) Tclass._module.Tree)  (and ($Is DatatypeTypeType |a#6#0#0| Tclass._module.Tree) ($Is DatatypeTypeType |a#6#1#0| Tclass._module.Tree)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tree.Node| |a#6#0#0| |a#6#1#0|) Tclass._module.Tree))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.Tree.Leaf|) |##_module.Tree.Leaf|))
(assert ($Is DatatypeTypeType |#_module.Tree.Leaf| Tclass._module.Tree))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.Tree#Equal| a b) (= a b))
 :pattern ( (|_module.Tree#Equal| a b))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor SeqType) 4))
(assert (forall ((s T@U) (bx T@U) (t T@U) ) (!  (=> (and ($Is SeqType s (TSeq t)) ($IsBox bx t)) ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
)))
(assert (forall ((d T@U) ) (! (= (_module.Tree.Leaf_q d) (= (DatatypeCtorId d) |##_module.Tree.Leaf|))
 :pattern ( (_module.Tree.Leaf_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Tree.Node_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Tree.Node|))
 :pattern ( (_module.Tree.Node_q d@@0))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0))) (= (|Seq#Index| s0 j) (|Seq#Index| s1 j)))
 :pattern ( (|Seq#Index| s0 j))
 :pattern ( (|Seq#Index| s1 j))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Tree.Node_q d@@1) (exists ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (= d@@1 (|#_module.Tree.Node| |a#5#0#0| |a#5#1#0|))))
 :pattern ( (_module.Tree.Node_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Tree.Leaf_q d@@2) (= d@@2 |#_module.Tree.Leaf|))
 :pattern ( (_module.Tree.Leaf_q d@@2))
)))
(assert (forall ((s@@0 T@U) (v T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@0 v)) (+ 1 (|Seq#Length| s@@0)))
 :pattern ( (|Seq#Build| s@@0 v))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@0 h) ($IsAlloc T@@1 v@@0 t@@0 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@0 h))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Tree) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass._module.Tree)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Tree))
)))
(assert (forall ((s@@1 T@U) (i Int) (v@@1 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@1)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@1) i) v@@1)) (=> (or (not (= i (|Seq#Length| s@@1))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@1) i) (|Seq#Index| s@@1 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@1 v@@1) i))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) (|d#0| Int) (|t#0| T@U) ) (!  (=> (or (|_module.__default.toList#canCall| |d#0| (Lit DatatypeTypeType |t#0|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0| Tclass._module.Tree))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0|)))))) (let ((|r#3| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0|)))))
(let ((|l#3| (Lit DatatypeTypeType (_module.Tree._h0 (Lit DatatypeTypeType |t#0|)))))
 (and (|_module.__default.toList#canCall| (+ |d#0| 1) |l#3|) (|_module.__default.toList#canCall| (+ |d#0| 1) |r#3|))))) (= (_module.__default.toList ($LS $ly) |d#0| (Lit DatatypeTypeType |t#0|)) (ite (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0|)) (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U |d#0|))) (let ((|r#2| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0|)))))
(let ((|l#2| (Lit DatatypeTypeType (_module.Tree._h0 (Lit DatatypeTypeType |t#0|)))))
(|Seq#Append| (_module.__default.toList ($LS $ly) (+ |d#0| 1) |l#2|) (_module.__default.toList ($LS $ly) (+ |d#0| 1) |r#2|))))))))
 :weight 3
 :pattern ( (_module.__default.toList ($LS $ly) |d#0| (Lit DatatypeTypeType |t#0|)))
))))
(assert (forall (($ly@@0 T@U) (|d#0@@0| Int) (|t#0@@0| T@U) ) (! (= (_module.__default.toList ($LS $ly@@0) |d#0@@0| |t#0@@0|) (_module.__default.toList $ly@@0 |d#0@@0| |t#0@@0|))
 :pattern ( (_module.__default.toList ($LS $ly@@0) |d#0@@0| |t#0@@0|))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (|Seq#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|Seq#Equal| a@@0 b@@0))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 Tclass._module.Tree) (or (_module.Tree.Leaf_q d@@3) (_module.Tree.Node_q d@@3)))
 :pattern ( (_module.Tree.Node_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.Tree))
 :pattern ( (_module.Tree.Leaf_q d@@3) ($Is DatatypeTypeType d@@3 Tclass._module.Tree))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.Tree.Node_q a@@1) (_module.Tree.Node_q b@@1)) (= (|_module.Tree#Equal| a@@1 b@@1)  (and (|_module.Tree#Equal| (_module.Tree._h0 a@@1) (_module.Tree._h0 b@@1)) (|_module.Tree#Equal| (_module.Tree._h1 a@@1) (_module.Tree._h1 b@@1)))))
 :pattern ( (|_module.Tree#Equal| a@@1 b@@1) (_module.Tree.Node_q a@@1))
 :pattern ( (|_module.Tree#Equal| a@@1 b@@1) (_module.Tree.Node_q b@@1))
)))
(assert (forall ((v@@2 T@U) (t@@1 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@2) t@@1) ($Is T@@2 v@@2 t@@1))
 :pattern ( ($IsBox ($Box T@@2 v@@2) t@@1))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.Tree.Leaf_q a@@2) (_module.Tree.Leaf_q b@@2)) (|_module.Tree#Equal| a@@2 b@@2))
 :pattern ( (|_module.Tree#Equal| a@@2 b@@2) (_module.Tree.Leaf_q a@@2))
 :pattern ( (|_module.Tree#Equal| a@@2 b@@2) (_module.Tree.Leaf_q b@@2))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tree.Node| |a#4#0#0| |a#4#1#0|)) |##_module.Tree.Node|)
 :pattern ( (|#_module.Tree.Node| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (! (= (_module.Tree._h0 (|#_module.Tree.Node| |a#8#0#0| |a#8#1#0|)) |a#8#0#0|)
 :pattern ( (|#_module.Tree.Node| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (! (= (_module.Tree._h1 (|#_module.Tree.Node| |a#10#0#0| |a#10#1#0|)) |a#10#1#0|)
 :pattern ( (|#_module.Tree.Node| |a#10#0#0| |a#10#1#0|))
)))
(assert (forall ((v@@3 T@U) (t0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0) h@@0) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i@@0) t0 h@@0))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0) h@@0))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Inv0_TSeq (TSeq t@@2)) t@@2)
 :pattern ( (TSeq t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Tag (TSeq t@@3)) TagSeq)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@1 T@U) (|d#0@@1| Int) (|t#0@@1| T@U) ) (!  (=> (or (|_module.__default.toList#canCall| |d#0@@1| |t#0@@1|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@1| Tclass._module.Tree))) (and (=> (not (_module.Tree.Leaf_q |t#0@@1|)) (let ((|r#1| (_module.Tree._h1 |t#0@@1|)))
(let ((|l#1| (_module.Tree._h0 |t#0@@1|)))
 (and (|_module.__default.toList#canCall| (+ |d#0@@1| 1) |l#1|) (|_module.__default.toList#canCall| (+ |d#0@@1| 1) |r#1|))))) (= (_module.__default.toList ($LS $ly@@1) |d#0@@1| |t#0@@1|) (ite (_module.Tree.Leaf_q |t#0@@1|) (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U |d#0@@1|))) (let ((|r#0| (_module.Tree._h1 |t#0@@1|)))
(let ((|l#0| (_module.Tree._h0 |t#0@@1|)))
(|Seq#Append| (_module.__default.toList $ly@@1 (+ |d#0@@1| 1) |l#0|) (_module.__default.toList $ly@@1 (+ |d#0@@1| 1) |r#0|))))))))
 :pattern ( (_module.__default.toList ($LS $ly@@1) |d#0@@1| |t#0@@1|))
))))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (! (< (DtRank |a#9#0#0|) (DtRank (|#_module.Tree.Node| |a#9#0#0| |a#9#1#0|)))
 :pattern ( (|#_module.Tree.Node| |a#9#0#0| |a#9#1#0|))
)))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (! (< (DtRank |a#11#1#0|) (DtRank (|#_module.Tree.Node| |a#11#0#0| |a#11#1#0|)))
 :pattern ( (|#_module.Tree.Node| |a#11#0#0| |a#11#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@2 T@U) (|d#0@@2| Int) (|t#0@@2| T@U) ) (!  (=> (or (|_module.__default.toList#canCall| (LitInt |d#0@@2|) (Lit DatatypeTypeType |t#0@@2|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@2| Tclass._module.Tree))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0@@2|)))))) (let ((|r#5| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0@@2|)))))
(let ((|l#5| (Lit DatatypeTypeType (_module.Tree._h0 (Lit DatatypeTypeType |t#0@@2|)))))
 (and (|_module.__default.toList#canCall| (LitInt (+ |d#0@@2| 1)) |l#5|) (|_module.__default.toList#canCall| (LitInt (+ |d#0@@2| 1)) |r#5|))))) (= (_module.__default.toList ($LS $ly@@2) (LitInt |d#0@@2|) (Lit DatatypeTypeType |t#0@@2|)) (ite (_module.Tree.Leaf_q (Lit DatatypeTypeType |t#0@@2|)) (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U (LitInt |d#0@@2|)))) (let ((|r#4| (Lit DatatypeTypeType (_module.Tree._h1 (Lit DatatypeTypeType |t#0@@2|)))))
(let ((|l#4| (Lit DatatypeTypeType (_module.Tree._h0 (Lit DatatypeTypeType |t#0@@2|)))))
(|Seq#Append| (_module.__default.toList ($LS $ly@@2) (LitInt (+ |d#0@@2| 1)) |l#4|) (_module.__default.toList ($LS $ly@@2) (LitInt (+ |d#0@@2| 1)) |r#4|))))))))
 :weight 3
 :pattern ( (_module.__default.toList ($LS $ly@@2) (LitInt |d#0@@2|) (Lit DatatypeTypeType |t#0@@2|)))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@0 t1 t2 (MapType0Store t0@@0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (forall ((t0@@1 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 (MapType1Store t0@@1 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o $f))  (=> (and (or (not (= $o |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@0| $o) |l#2@@0|)))) |l#3@@0|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@3 T@U) (|d#0@@3| Int) (|t#0@@3| T@U) ) (!  (=> (or (|_module.__default.toList#canCall| |d#0@@3| |t#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |t#0@@3| Tclass._module.Tree))) (and (and (and (not (|Seq#Equal| (_module.__default.toList $ly@@3 |d#0@@3| |t#0@@3|) |Seq#Empty|)) (>= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.toList $ly@@3 |d#0@@3| |t#0@@3|) (LitInt 0)))) |d#0@@3|)) (= (= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.toList $ly@@3 |d#0@@3| |t#0@@3|) (LitInt 0)))) |d#0@@3|) (|_module.Tree#Equal| |t#0@@3| |#_module.Tree.Leaf|))) ($Is SeqType (_module.__default.toList $ly@@3 |d#0@@3| |t#0@@3|) (TSeq TInt))))
 :pattern ( (_module.__default.toList $ly@@3 |d#0@@3| |t#0@@3|))
))))
(assert (forall ((s@@3 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@3 val@@4)) s@@3) (= (|Seq#Build_inv1| (|Seq#Build| s@@3 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@3 val@@4))
)))
(assert (forall ((bx@@2 T@U) (t@@4 T@U) ) (!  (=> ($IsBox bx@@2 (TSeq t@@4)) (and (= ($Box SeqType ($Unbox SeqType bx@@2)) bx@@2) ($Is SeqType ($Unbox SeqType bx@@2) (TSeq t@@4))))
 :pattern ( ($IsBox bx@@2 (TSeq t@@4)))
)))
(assert (forall ((d@@4 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) ($Is DatatypeTypeType d@@4 Tclass._module.Tree)) ($IsAlloc DatatypeTypeType d@@4 Tclass._module.Tree $h))
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 Tclass._module.Tree $h))
)))
(assert (= (Tag Tclass._module.Tree) Tagclass._module.Tree))
(assert (= (TagFamily Tclass._module.Tree) tytagFamily$Tree))
(assert (= |#_module.Tree.Leaf| (Lit DatatypeTypeType |#_module.Tree.Leaf|)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n Int) ) (!  (and (=> (< n (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n) (|Seq#Index| s0@@1 n))) (=> (<= (|Seq#Length| s0@@1) n) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n) (|Seq#Index| s1@@1 (- n (|Seq#Length| s0@@1))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n))
)))
(assert (forall ((d@@5 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.Tree.Node_q d@@5) ($IsAlloc DatatypeTypeType d@@5 Tclass._module.Tree $h@@0))) ($IsAlloc DatatypeTypeType (_module.Tree._h0 d@@5) Tclass._module.Tree $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree._h0 d@@5) Tclass._module.Tree $h@@0))
)))
(assert (forall ((d@@6 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Tree.Node_q d@@6) ($IsAlloc DatatypeTypeType d@@6 Tclass._module.Tree $h@@1))) ($IsAlloc DatatypeTypeType (_module.Tree._h1 d@@6) Tclass._module.Tree $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree._h1 d@@6) Tclass._module.Tree $h@@1))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (= (|#_module.Tree.Node| (Lit DatatypeTypeType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)) (Lit DatatypeTypeType (|#_module.Tree.Node| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_module.Tree.Node| (Lit DatatypeTypeType |a#7#0#0|) (Lit DatatypeTypeType |a#7#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((s@@4 T@U) ) (!  (=> (= (|Seq#Length| s@@4) 0) (= s@@4 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert (forall ((h@@1 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@1))
)))
(assert (forall ((v@@5 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@5 (TSeq t0@@2)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@5))) ($IsBox (|Seq#Index| v@@5 i@@1) t0@@2))
 :pattern ( (|Seq#Index| v@@5 i@@1))
)))
 :pattern ( ($Is SeqType v@@5 (TSeq t0@@2)))
)))
(assert (forall ((s@@5 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@5))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))) (|Seq#Rank| s@@5)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is intType v@@6 TInt)
 :pattern ( ($Is intType v@@6 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $LZ () T@U)
(declare-fun |d#0@@4| () Int)
(declare-fun |t#0@@4| () T@U)
(declare-fun |_mcc#0#0| () T@U)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |r#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |l#Z#0@0| () T@U)
(declare-fun |##d#3@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun |##d#4@0| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 9) (- 0 11)) (not (|Seq#Equal| (_module.__default.toList ($LS ($LS $LZ)) |d#0@@4| |t#0@@4|) |Seq#Empty|))) (=> (not (|Seq#Equal| (_module.__default.toList ($LS ($LS $LZ)) |d#0@@4| |t#0@@4|) |Seq#Empty|)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (>= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.toList ($LS ($LS $LZ)) |d#0@@4| |t#0@@4|) (LitInt 0)))) |d#0@@4|)) (=> (>= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.toList ($LS ($LS $LZ)) |d#0@@4| |t#0@@4|) (LitInt 0)))) |d#0@@4|) (=> (= (ControlFlow 0 9) (- 0 8)) (= (= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.toList ($LS ($LS $LZ)) |d#0@@4| |t#0@@4|) (LitInt 0)))) |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |#_module.Tree.Leaf|)))))))))
(let ((anon10_Then_correct  (=> (and (and (= |t#0@@4| (|#_module.Tree.Node| |_mcc#0#0| |_mcc#1#0|)) ($Is DatatypeTypeType |_mcc#0#0| Tclass._module.Tree)) (and ($Is DatatypeTypeType |_mcc#1#0| Tclass._module.Tree) (= |let#0#0#0| |_mcc#1#0|))) (=> (and (and (and ($Is DatatypeTypeType |let#0#0#0| Tclass._module.Tree) (= |r#Z#0@0| |let#0#0#0|)) (and (= |let#1#0#0| |_mcc#0#0|) ($Is DatatypeTypeType |let#1#0#0| Tclass._module.Tree))) (and (and (= |l#Z#0@0| |let#1#0#0|) (= |##d#3@0| (+ |d#0@@4| 1))) (and ($IsAlloc intType (int_2_U |##d#3@0|) TInt $Heap) ($IsAlloc DatatypeTypeType |l#Z#0@0| Tclass._module.Tree $Heap)))) (and (=> (= (ControlFlow 0 13) (- 0 15)) (< (DtRank |l#Z#0@0|) (DtRank |t#0@@4|))) (=> (< (DtRank |l#Z#0@0|) (DtRank |t#0@@4|)) (=> (and (and (|_module.__default.toList#canCall| (+ |d#0@@4| 1) |l#Z#0@0|) (= |##d#4@0| (+ |d#0@@4| 1))) (and ($IsAlloc intType (int_2_U |##d#4@0|) TInt $Heap) ($IsAlloc DatatypeTypeType |r#Z#0@0| Tclass._module.Tree $Heap))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (< (DtRank |r#Z#0@0|) (DtRank |t#0@@4|))) (=> (< (DtRank |r#Z#0@0|) (DtRank |t#0@@4|)) (=> (and (|_module.__default.toList#canCall| (+ |d#0@@4| 1) |r#Z#0@0|) (= (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|) (|Seq#Append| (_module.__default.toList ($LS $LZ) (+ |d#0@@4| 1) |l#Z#0@0|) (_module.__default.toList ($LS $LZ) (+ |d#0@@4| 1) |r#Z#0@0|)))) (=> (and (and (|_module.__default.toList#canCall| (+ |d#0@@4| 1) |l#Z#0@0|) (|_module.__default.toList#canCall| (+ |d#0@@4| 1) |r#Z#0@0|)) (and ($Is SeqType (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|) (TSeq TInt)) (= (ControlFlow 0 13) 9))) GeneratedUnifiedExit_correct)))))))))))
(let ((anon9_Then_correct  (=> (and (and (= |t#0@@4| |#_module.Tree.Leaf|) (= (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|) (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U |d#0@@4|))))) (and ($Is SeqType (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|) (TSeq TInt)) (= (ControlFlow 0 12) 9))) GeneratedUnifiedExit_correct)))
(let ((anon10_Else_correct true))
(let ((anon9_Else_correct  (=> (or (not (= |t#0@@4| |#_module.Tree.Leaf|)) (not true)) (and (=> (= (ControlFlow 0 16) 13) anon10_Then_correct) (=> (= (ControlFlow 0 16) 7) anon10_Else_correct)))))
(let ((anon8_Then_correct  (=> ($Is SeqType (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|) (TSeq TInt)) (=> (and ($IsAlloc intType (int_2_U |d#0@@4|) TInt $Heap) ($IsAlloc DatatypeTypeType |t#0@@4| Tclass._module.Tree $Heap)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (or (and (= |d#0@@4| |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |t#0@@4|)) (< (DtRank |t#0@@4|) (DtRank |t#0@@4|)))) (=> (or (and (= |d#0@@4| |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |t#0@@4|)) (< (DtRank |t#0@@4|) (DtRank |t#0@@4|))) (=> (and (and (or (and (= |d#0@@4| |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |t#0@@4|)) (|_module.__default.toList#canCall| |d#0@@4| |t#0@@4|)) (not (|Seq#Equal| (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|) |Seq#Empty|))) (and ($IsAlloc intType (int_2_U |d#0@@4|) TInt $Heap) ($IsAlloc DatatypeTypeType |t#0@@4| Tclass._module.Tree $Heap))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (and (= |d#0@@4| |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |t#0@@4|)) (< (DtRank |t#0@@4|) (DtRank |t#0@@4|)))) (=> (or (and (= |d#0@@4| |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |t#0@@4|)) (< (DtRank |t#0@@4|) (DtRank |t#0@@4|))) (=> (or (and (= |d#0@@4| |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |t#0@@4|)) (|_module.__default.toList#canCall| |d#0@@4| |t#0@@4|)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|))))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|)))) (=> (>= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|) (LitInt 0)))) |d#0@@4|) (=> (and ($IsAlloc intType (int_2_U |d#0@@4|) TInt $Heap) ($IsAlloc DatatypeTypeType |t#0@@4| Tclass._module.Tree $Heap)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (and (= |d#0@@4| |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |t#0@@4|)) (< (DtRank |t#0@@4|) (DtRank |t#0@@4|)))) (=> (or (and (= |d#0@@4| |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |t#0@@4|)) (< (DtRank |t#0@@4|) (DtRank |t#0@@4|))) (=> (and (or (and (= |d#0@@4| |d#0@@4|) (|_module.Tree#Equal| |t#0@@4| |t#0@@4|)) (|_module.__default.toList#canCall| |d#0@@4| |t#0@@4|)) (= (ControlFlow 0 2) (- 0 1))) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| (_module.__default.toList ($LS $LZ) |d#0@@4| |t#0@@4|)))))))))))))))))))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 17) 2) anon8_Then_correct) (=> (= (ControlFlow 0 17) 12) anon9_Then_correct)) (=> (= (ControlFlow 0 17) 16) anon9_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is DatatypeTypeType |t#0@@4| Tclass._module.Tree)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 18) 17))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
