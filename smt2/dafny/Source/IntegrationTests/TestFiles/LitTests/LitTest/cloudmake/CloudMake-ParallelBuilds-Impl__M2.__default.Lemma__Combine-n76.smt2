(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass.M2.State () T@U)
(declare-fun Tagclass.M2.WFCertificate () T@U)
(declare-fun |##M2.WFCertificate.Cert| () T@U)
(declare-fun |##M2.State.StateCons| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$State () T@U)
(declare-fun tytagFamily$WFCertificate () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun M2.__default.Combine (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |M2.__default.Combine#canCall| (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Tclass.M2.State () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun |$let#13$canCall| (T@U) Bool)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |$let#13_st| (T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |M2.__default.Union#canCall| (T@U T@U) Bool)
(declare-fun M2.__default.Union (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun MapType () T@T)
(declare-fun M2.State.m (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Tclass.M2.Path () T@U)
(declare-fun Tclass.M2.Artifact () T@U)
(declare-fun M2.State.StateCons_q (T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun M2.__default.LocInv__Cmd (T@U) T@U)
(declare-fun |M2.__default.LocInv__Cmd#canCall| (T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun M2.__default.LocInv__Exp (T@U) T@U)
(declare-fun |M2.__default.LocInv__Exp#canCall| (T@U) Bool)
(declare-fun M2.__default.FindCert (T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |M2.__default.FindCert#canCall| (T@U T@U) Bool)
(declare-fun Tclass.M2.WFCertificate () T@U)
(declare-fun M2.WFCertificate.p (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |$let#9$canCall| (T@U T@U) Bool)
(declare-fun |$let#9_c| (T@U T@U) T@U)
(declare-fun M2.__default.CollectDependencies (T@U T@U T@U T@U T@U) T@U)
(declare-fun |M2.__default.CollectDependencies#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun M2.__default.CheckWellFounded (T@U T@U T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun M2.__default.LocInv__Deps (T@U) T@U)
(declare-fun M2.WFCertificate.certs (T@U) T@U)
(declare-fun M2.__default.GetSt (T@U T@U) T@U)
(declare-fun M2.__default.DomSt (T@U) T@U)
(declare-fun |M2.__default.DomSt#canCall| (T@U) Bool)
(declare-fun |M2.__default.GetSt#canCall| (T@U T@U) Bool)
(declare-fun M2.WFCertificate.Cert_q (T@U) Bool)
(declare-fun |M2.__default.OracleWF#canCall| (T@U T@U T@U) Bool)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun |lambda#19| (T@U T@U) T@U)
(declare-fun |lambda#20| (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |$IsA#M2.State| (T@U) Bool)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun M2.__default.Oracle (T@U T@U) T@U)
(declare-fun |M2.__default.Oracle#canCall| (T@U T@U) Bool)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun M2.__default.OracleWF (T@U T@U T@U T@U) T@U)
(declare-fun |M2.__default.LocInv__Deps#canCall| (T@U) Bool)
(declare-fun |M2.__default.RunTool#canCall| (T@U T@U T@U) Bool)
(declare-fun M2.__default.RunTool (T@U T@U T@U) T@U)
(declare-fun |#M2.WFCertificate.Cert| (T@U T@U) T@U)
(declare-fun M2.__default.GetCert (T@U) T@U)
(declare-fun |M2.__default.GetCert#canCall| (T@U) Bool)
(declare-fun M2.__default.WellFounded (T@U) Bool)
(declare-fun |$let#3$canCall| (T@U) Bool)
(declare-fun |$let#3_c| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun |M2.__default.WellFounded#canCall| (T@U) Bool)
(declare-fun |M2.__default.CheckWellFounded#canCall| (T@U T@U) Bool)
(declare-fun |M2.State#Equal| (T@U T@U) Bool)
(declare-fun M2.__default.OracleArbitrary (T@U) T@U)
(declare-fun |M2.__default.OracleArbitrary#canCall| (T@U) Bool)
(declare-fun |$let#6$canCall| () Bool)
(declare-fun |$let#6_a| () T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun M2.__default.ValidState (T@U) Bool)
(declare-fun |M2.__default.ValidState#canCall| (T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |#M2.State.StateCons| (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun charType () T@T)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun M2.__default.Extends (T@U T@U) Bool)
(declare-fun |M2.__default.Extends#canCall| (T@U T@U) Bool)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TagChar TagSet TagSeq TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass.M2.State Tagclass.M2.WFCertificate |##M2.WFCertificate.Cert| |##M2.State.StateCons| |tytagFamily$_tuple#2| tytagFamily$State tytagFamily$WFCertificate)
)
(assert  (and (= (Ctor SetType) 3) (= (Ctor DatatypeTypeType) 4)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly T@U) ($Heap T@U) (|sts#0| T@U) ) (!  (=> (or (|M2.__default.Combine#canCall| |sts#0|) (and (< 4 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is SetType |sts#0| (TSet Tclass.M2.State))) (not (|Set#Equal| |sts#0| |Set#Empty|))))) (and (and (|$let#13$canCall| |sts#0|) (=> (not (|Set#Equal| |sts#0| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType (|$let#13_st| |sts#0|))))) (and (|M2.__default.Combine#canCall| (|Set#Difference| |sts#0| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType (|$let#13_st| |sts#0|))))) (|M2.__default.Union#canCall| (|$let#13_st| |sts#0|) (M2.__default.Combine $ly (|Set#Difference| |sts#0| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType (|$let#13_st| |sts#0|))))))))) (= (M2.__default.Combine ($LS $ly) |sts#0|) (let ((|st#0| (|$let#13_st| |sts#0|)))
(ite (|Set#Equal| |sts#0| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0|))) |st#0| (M2.__default.Union |st#0| (M2.__default.Combine $ly (|Set#Difference| |sts#0| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0|))))))))))
 :pattern ( (M2.__default.Combine ($LS $ly) |sts#0|) ($IsGoodHeap $Heap))
))))
(assert (= (Ctor MapType) 5))
(assert (forall ((d T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (M2.State.StateCons_q d) ($IsAlloc DatatypeTypeType d Tclass.M2.State $h))) ($IsAlloc MapType (M2.State.m d) (TMap Tclass.M2.Path Tclass.M2.Artifact) $h))
 :pattern ( ($IsAlloc MapType (M2.State.m d) (TMap Tclass.M2.Path Tclass.M2.Artifact) $h))
)))
(assert (= (Tag TChar) TagChar))
(assert (= (Ctor SeqType) 6))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|p#0| T@U) ) (!  (=> (or (|M2.__default.LocInv__Cmd#canCall| |p#0|) (and (< 0 $FunctionContextHeight) ($IsBox |p#0| Tclass.M2.Path))) ($Is SeqType (M2.__default.LocInv__Cmd |p#0|) (TSeq TChar)))
 :pattern ( (M2.__default.LocInv__Cmd |p#0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|p#0@@0| T@U) ) (!  (=> (or (|M2.__default.LocInv__Exp#canCall| |p#0@@0|) (and (< 0 $FunctionContextHeight) ($IsBox |p#0@@0| Tclass.M2.Path))) ($Is SeqType (M2.__default.LocInv__Exp |p#0@@0|) (TSeq TChar)))
 :pattern ( (M2.__default.LocInv__Exp |p#0@@0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|d#0| T@U) (|certs#0| T@U) ) (!  (=> (or (|M2.__default.FindCert#canCall| |d#0| (Lit SetType |certs#0|)) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@0) ($IsBox |d#0| Tclass.M2.Path)) ($Is SetType |certs#0| (TSet Tclass.M2.WFCertificate))) (exists ((|c#3| T@U) ) (!  (and ($Is DatatypeTypeType |c#3| Tclass.M2.WFCertificate) (and (|Set#IsMember| (Lit SetType |certs#0|) ($Box DatatypeTypeType |c#3|)) (= (M2.WFCertificate.p |c#3|) |d#0|)))
 :pattern ( (M2.WFCertificate.p |c#3|))
 :pattern ( (|Set#IsMember| |certs#0| ($Box DatatypeTypeType |c#3|)))
))))) (and (|$let#9$canCall| (Lit SetType |certs#0|) |d#0|) (= (M2.__default.FindCert |d#0| (Lit SetType |certs#0|)) (let ((|c#4| (|$let#9_c| (Lit SetType |certs#0|) |d#0|)))
|c#4|))))
 :weight 3
 :pattern ( (M2.__default.FindCert |d#0| (Lit SetType |certs#0|)) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@0 T@U) (|p#0@@1| T@U) (|cert#0| T@U) (|deps#0| T@U) (|st#0@@0| T@U) ) (!  (=> (or (|M2.__default.CollectDependencies#canCall| |p#0@@1| (Lit DatatypeTypeType |cert#0|) |deps#0| |st#0@@0|) (and (< 3 $FunctionContextHeight) (and (and (and (and ($IsBox |p#0@@1| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0| Tclass.M2.WFCertificate)) ($Is SetType |deps#0| (TSet Tclass.M2.Path))) ($Is DatatypeTypeType |st#0@@0| Tclass.M2.State)) (and (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@1| (Lit DatatypeTypeType |cert#0|)) (|Set#Equal| |deps#0| (M2.__default.LocInv__Deps |p#0@@1|)))))) (and (forall ((|d#0@@0| T@U) ) (!  (=> ($IsBox |d#0@@0| Tclass.M2.Path) (=> (|Set#IsMember| |deps#0| |d#0@@0|) (and (and (|M2.__default.DomSt#canCall| |st#0@@0|) (=> (|Set#IsMember| (M2.__default.DomSt |st#0@@0|) |d#0@@0|) (|M2.__default.GetSt#canCall| |d#0@@0| |st#0@@0|))) (=> (not (|Set#IsMember| (M2.__default.DomSt |st#0@@0|) |d#0@@0|)) (and (and (M2.WFCertificate.Cert_q (Lit DatatypeTypeType |cert#0|)) (|M2.__default.FindCert#canCall| |d#0@@0| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0|))))) (|M2.__default.OracleWF#canCall| |d#0@@0| (M2.__default.FindCert |d#0@@0| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0|)))) |st#0@@0|))))))
 :pattern ( (M2.__default.FindCert |d#0@@0| (M2.WFCertificate.certs |cert#0|)))
 :pattern ( (M2.__default.GetSt |d#0@@0| |st#0@@0|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@0|) |d#0@@0|))
 :pattern ( (|Set#IsMember| |deps#0| |d#0@@0|))
)) (= (M2.__default.CollectDependencies ($LS $ly@@0) |p#0@@1| (Lit DatatypeTypeType |cert#0|) |deps#0| |st#0@@0|) (|Map#Glue| (|Set#FromBoogieMap| (|lambda#19| Tclass.M2.Path |deps#0|)) (|lambda#20| (M2.__default.DomSt |st#0@@0|) |st#0@@0| ($LS $ly@@0) (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0|))) |st#0@@0|) (TMap Tclass.M2.Path Tclass.M2.Artifact)))))
 :weight 3
 :pattern ( (M2.__default.CollectDependencies ($LS $ly@@0) |p#0@@1| (Lit DatatypeTypeType |cert#0|) |deps#0| |st#0@@0|))
))))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 7)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|p#0@@2| T@U) (|st#0@@1| T@U) ) (!  (=> (or (|M2.__default.GetSt#canCall| |p#0@@2| |st#0@@1|) (and (< 2 $FunctionContextHeight) (and (and ($IsBox |p#0@@2| Tclass.M2.Path) ($Is DatatypeTypeType |st#0@@1| Tclass.M2.State)) (|Set#IsMember| (M2.__default.DomSt |st#0@@1|) |p#0@@2|)))) (and (M2.State.StateCons_q |st#0@@1|) (= (M2.__default.GetSt |p#0@@2| |st#0@@1|) (MapType0Select BoxType BoxType (|Map#Elements| (M2.State.m |st#0@@1|)) |p#0@@2|))))
 :pattern ( (M2.__default.GetSt |p#0@@2| |st#0@@1|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@1 T@U) (|p#0@@3| T@U) (|cert#0@@0| T@U) (|deps#0@@0| T@U) (|st#0@@2| T@U) ) (!  (=> (or (|M2.__default.CollectDependencies#canCall| |p#0@@3| |cert#0@@0| |deps#0@@0| |st#0@@2|) (and (< 3 $FunctionContextHeight) (and (and (and (and ($IsBox |p#0@@3| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@0| Tclass.M2.WFCertificate)) ($Is SetType |deps#0@@0| (TSet Tclass.M2.Path))) ($Is DatatypeTypeType |st#0@@2| Tclass.M2.State)) (and (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@3| |cert#0@@0|) (|Set#Equal| |deps#0@@0| (M2.__default.LocInv__Deps |p#0@@3|)))))) (and (forall ((|d#0@@1| T@U) ) (!  (=> ($IsBox |d#0@@1| Tclass.M2.Path) (=> (|Set#IsMember| |deps#0@@0| |d#0@@1|) (and (and (|M2.__default.DomSt#canCall| |st#0@@2|) (=> (|Set#IsMember| (M2.__default.DomSt |st#0@@2|) |d#0@@1|) (|M2.__default.GetSt#canCall| |d#0@@1| |st#0@@2|))) (=> (not (|Set#IsMember| (M2.__default.DomSt |st#0@@2|) |d#0@@1|)) (and (and (M2.WFCertificate.Cert_q |cert#0@@0|) (|M2.__default.FindCert#canCall| |d#0@@1| (M2.WFCertificate.certs |cert#0@@0|))) (|M2.__default.OracleWF#canCall| |d#0@@1| (M2.__default.FindCert |d#0@@1| (M2.WFCertificate.certs |cert#0@@0|)) |st#0@@2|))))))
 :pattern ( (M2.__default.FindCert |d#0@@1| (M2.WFCertificate.certs |cert#0@@0|)))
 :pattern ( (M2.__default.GetSt |d#0@@1| |st#0@@2|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@2|) |d#0@@1|))
 :pattern ( (|Set#IsMember| |deps#0@@0| |d#0@@1|))
)) (= (M2.__default.CollectDependencies ($LS $ly@@1) |p#0@@3| |cert#0@@0| |deps#0@@0| |st#0@@2|) (|Map#Glue| (|Set#FromBoogieMap| (|lambda#19| Tclass.M2.Path |deps#0@@0|)) (|lambda#20| (M2.__default.DomSt |st#0@@2|) |st#0@@2| $ly@@1 (M2.WFCertificate.certs |cert#0@@0|) |st#0@@2|) (TMap Tclass.M2.Path Tclass.M2.Artifact)))))
 :pattern ( (M2.__default.CollectDependencies ($LS $ly@@1) |p#0@@3| |cert#0@@0| |deps#0@@0| |st#0@@2|))
))))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|st#0@@3| T@U) ) (!  (=> (or (|M2.__default.DomSt#canCall| |st#0@@3|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |st#0@@3| Tclass.M2.State))) (and (forall ((|p#0@@4| T@U) ) (!  (=> ($IsBox |p#0@@4| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.DomSt |st#0@@3|) |p#0@@4|) (|Set#IsMember| (|Map#Domain| (M2.State.m |st#0@@3|)) |p#0@@4|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| (M2.State.m |st#0@@3|)) |p#0@@4|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@3|) |p#0@@4|))
)) ($Is SetType (M2.__default.DomSt |st#0@@3|) (TSet Tclass.M2.Path))))
 :pattern ( (M2.__default.DomSt |st#0@@3|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|st#0@@4| T@U) ) (!  (=> (or (|M2.__default.DomSt#canCall| |st#0@@4|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |st#0@@4| Tclass.M2.State))) (and (M2.State.StateCons_q |st#0@@4|) (= (M2.__default.DomSt |st#0@@4|) (|Set#FromBoogieMap| (|lambda#19| Tclass.M2.Path (|Map#Domain| (M2.State.m |st#0@@4|)))))))
 :pattern ( (M2.__default.DomSt |st#0@@4|))
))))
(assert (forall ((d@@0 T@U) ) (!  (=> (|$IsA#M2.State| d@@0) (M2.State.StateCons_q d@@0))
 :pattern ( (|$IsA#M2.State| d@@0))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@1 T@U) ($ly@@2 T@U) (|sts#0@@0| T@U) ) (!  (=> (and (or (|M2.__default.Combine#canCall| |sts#0@@0|) (and (< 4 $FunctionContextHeight) (and (and ($Is SetType |sts#0@@0| (TSet Tclass.M2.State)) ($IsAlloc SetType |sts#0@@0| (TSet Tclass.M2.State) $Heap@@1)) (not (|Set#Equal| |sts#0@@0| |Set#Empty|))))) ($IsGoodHeap $Heap@@1)) ($IsAlloc DatatypeTypeType (M2.__default.Combine $ly@@2 |sts#0@@0|) Tclass.M2.State $Heap@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (M2.__default.Combine $ly@@2 |sts#0@@0|) Tclass.M2.State $Heap@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$w#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#19| |l#0| |l#1|) |$w#0|))  (and ($IsBox |$w#0| |l#0|) (|Set#IsMember| |l#1| |$w#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#19| |l#0| |l#1|) |$w#0|))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (t T@U) ) (! (= (|Map#Domain| (|Map#Glue| a@@4 b@@1 t)) a@@4)
 :pattern ( (|Map#Domain| (|Map#Glue| a@@4 b@@1 t)))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) (t@@0 T@U) ) (! (= (|Map#Elements| (|Map#Glue| a@@5 b@@2 t@@0)) b@@2)
 :pattern ( (|Map#Elements| (|Map#Glue| a@@5 b@@2 t@@0)))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@3 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@6 b@@3) y@@2)))
 :pattern ( (|Set#Difference| a@@6 b@@3) (|Set#IsMember| b@@3 y@@2))
)))
(assert ($AlwaysAllocated Tclass.M2.Path))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d@@1 T@U) ) (!  (=> ($Is DatatypeTypeType d@@1 (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d@@1))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1) ($Is DatatypeTypeType d@@1 (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|p#0@@5| T@U) (|st#0@@5| T@U) ) (!  (=> (or (|M2.__default.GetSt#canCall| (Lit BoxType |p#0@@5|) (Lit DatatypeTypeType |st#0@@5|)) (and (< 2 $FunctionContextHeight) (and (and ($IsBox |p#0@@5| Tclass.M2.Path) ($Is DatatypeTypeType |st#0@@5| Tclass.M2.State)) (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@5|))) (Lit BoxType |p#0@@5|))))) (and (M2.State.StateCons_q (Lit DatatypeTypeType |st#0@@5|)) (= (M2.__default.GetSt (Lit BoxType |p#0@@5|) (Lit DatatypeTypeType |st#0@@5|)) (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType (M2.State.m (Lit DatatypeTypeType |st#0@@5|)))) (Lit BoxType |p#0@@5|)))))
 :weight 3
 :pattern ( (M2.__default.GetSt (Lit BoxType |p#0@@5|) (Lit DatatypeTypeType |st#0@@5|)))
))))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|p#0@@6| T@U) (|st#0@@6| T@U) ) (!  (=> (or (|M2.__default.Oracle#canCall| |p#0@@6| |st#0@@6|) (and (< 4 $FunctionContextHeight) (and ($IsBox |p#0@@6| Tclass.M2.Path) ($Is DatatypeTypeType |st#0@@6| Tclass.M2.State)))) ($IsBox (M2.__default.Oracle |p#0@@6| |st#0@@6|) Tclass.M2.Artifact))
 :pattern ( (M2.__default.Oracle |p#0@@6| |st#0@@6|))
))))
(assert (forall (($ly@@3 T@U) (|p#0@@7| T@U) (|cert#0@@1| T@U) (|deps#0@@1| T@U) (|st#0@@7| T@U) ) (! (= (M2.__default.CollectDependencies ($LS $ly@@3) |p#0@@7| |cert#0@@1| |deps#0@@1| |st#0@@7|) (M2.__default.CollectDependencies $ly@@3 |p#0@@7| |cert#0@@1| |deps#0@@1| |st#0@@7|))
 :pattern ( (M2.__default.CollectDependencies ($LS $ly@@3) |p#0@@7| |cert#0@@1| |deps#0@@1| |st#0@@7|))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@4 T@U) (|p#0@@8| T@U) (|cert#0@@2| T@U) (|st#0@@8| T@U) ) (!  (=> (or (|M2.__default.OracleWF#canCall| |p#0@@8| |cert#0@@2| |st#0@@8|) (and (< 3 $FunctionContextHeight) (and (and (and ($IsBox |p#0@@8| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@2| Tclass.M2.WFCertificate)) ($Is DatatypeTypeType |st#0@@8| Tclass.M2.State)) (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@8| |cert#0@@2|)))) (and (and (and (and (|M2.__default.LocInv__Cmd#canCall| |p#0@@8|) (|M2.__default.LocInv__Deps#canCall| |p#0@@8|)) (|M2.__default.LocInv__Exp#canCall| |p#0@@8|)) (let ((|e#0| (M2.__default.LocInv__Exp |p#0@@8|)))
(let ((|deps#0@@2| (M2.__default.LocInv__Deps |p#0@@8|)))
(let ((|cmd#0| (M2.__default.LocInv__Cmd |p#0@@8|)))
 (and (|M2.__default.CollectDependencies#canCall| |p#0@@8| |cert#0@@2| |deps#0@@2| |st#0@@8|) (|M2.__default.RunTool#canCall| |cmd#0| (M2.__default.CollectDependencies $ly@@4 |p#0@@8| |cert#0@@2| |deps#0@@2| |st#0@@8|) |e#0|)))))) (= (M2.__default.OracleWF ($LS $ly@@4) |p#0@@8| |cert#0@@2| |st#0@@8|) (let ((|e#0@@0| (M2.__default.LocInv__Exp |p#0@@8|)))
(let ((|deps#0@@3| (M2.__default.LocInv__Deps |p#0@@8|)))
(let ((|cmd#0@@0| (M2.__default.LocInv__Cmd |p#0@@8|)))
(M2.__default.RunTool |cmd#0@@0| (M2.__default.CollectDependencies $ly@@4 |p#0@@8| |cert#0@@2| |deps#0@@3| |st#0@@8|) |e#0@@0|)))))))
 :pattern ( (M2.__default.OracleWF ($LS $ly@@4) |p#0@@8| |cert#0@@2| |st#0@@8|))
))))
(assert (forall ((|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#M2.WFCertificate.Cert| |a#2#0#0| |a#2#1#0|) Tclass.M2.WFCertificate)  (and ($IsBox |a#2#0#0| Tclass.M2.Path) ($Is SetType |a#2#1#0| (TSet Tclass.M2.WFCertificate))))
 :pattern ( ($Is DatatypeTypeType (|#M2.WFCertificate.Cert| |a#2#0#0| |a#2#1#0|) Tclass.M2.WFCertificate))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@7 b@@4) b@@4) (|Set#Union| a@@7 b@@4))
 :pattern ( (|Set#Union| (|Set#Union| a@@7 b@@4) b@@4))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@8 b@@5) o@@1)  (and (|Set#IsMember| a@@8 o@@1) (not (|Set#IsMember| b@@5 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@8 b@@5) o@@1))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@2 T@U) (|p#0@@9| T@U) ) (!  (=> (or (|M2.__default.GetCert#canCall| |p#0@@9|) (and (< 3 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@2) ($IsBox |p#0@@9| Tclass.M2.Path)) (M2.__default.WellFounded |p#0@@9|)))) (and (|$let#3$canCall| |p#0@@9|) (= (M2.__default.GetCert |p#0@@9|) (let ((|c#0| (|$let#3_c| |p#0@@9|)))
|c#0|))))
 :pattern ( (M2.__default.GetCert |p#0@@9|) ($IsGoodHeap $Heap@@2))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@3 T@U) (|cmd#0@@1| T@U) (|deps#0@@4| T@U) (|exp#0| T@U) ) (!  (=> (and (or (|M2.__default.RunTool#canCall| |cmd#0@@1| |deps#0@@4| |exp#0|) (and (< 0 $FunctionContextHeight) (and (and (and ($Is SeqType |cmd#0@@1| (TSeq TChar)) ($IsAlloc SeqType |cmd#0@@1| (TSeq TChar) $Heap@@3)) (and ($Is MapType |deps#0@@4| (TMap Tclass.M2.Path Tclass.M2.Artifact)) ($IsAlloc MapType |deps#0@@4| (TMap Tclass.M2.Path Tclass.M2.Artifact) $Heap@@3))) (and ($Is SeqType |exp#0| (TSeq TChar)) ($IsAlloc SeqType |exp#0| (TSeq TChar) $Heap@@3))))) ($IsGoodHeap $Heap@@3)) ($IsAllocBox (M2.__default.RunTool |cmd#0@@1| |deps#0@@4| |exp#0|) Tclass.M2.Artifact $Heap@@3))
 :pattern ( ($IsAllocBox (M2.__default.RunTool |cmd#0@@1| |deps#0@@4| |exp#0|) Tclass.M2.Artifact $Heap@@3))
))))
(assert (forall ((d@@2 T@U) ) (!  (=> ($Is DatatypeTypeType d@@2 Tclass.M2.WFCertificate) (M2.WFCertificate.Cert_q d@@2))
 :pattern ( (M2.WFCertificate.Cert_q d@@2) ($Is DatatypeTypeType d@@2 Tclass.M2.WFCertificate))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 Tclass.M2.State) (M2.State.StateCons_q d@@3))
 :pattern ( (M2.State.StateCons_q d@@3) ($Is DatatypeTypeType d@@3 Tclass.M2.State))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|st#0@@9| T@U) (|st'#0| T@U) ) (!  (=> (or (|M2.__default.Union#canCall| |st#0@@9| |st'#0|) (and (< 3 $FunctionContextHeight) (and ($Is DatatypeTypeType |st#0@@9| Tclass.M2.State) ($Is DatatypeTypeType |st'#0| Tclass.M2.State)))) (and (let ((|result#0| (M2.__default.Union |st#0@@9| |st'#0|)))
 (and (|Set#Equal| (M2.__default.DomSt |result#0|) (|Set#Union| (M2.__default.DomSt |st#0@@9|) (M2.__default.DomSt |st'#0|))) (forall ((|p#0@@10| T@U) ) (!  (=> ($IsBox |p#0@@10| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.DomSt |result#0|) |p#0@@10|) (= (M2.__default.GetSt |p#0@@10| |result#0|) (M2.__default.GetSt |p#0@@10| (ite (|Set#IsMember| (M2.__default.DomSt |st#0@@9|) |p#0@@10|) |st#0@@9| |st'#0|)))))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@9|) |p#0@@10|))
 :pattern ( (M2.__default.GetSt |p#0@@10| |result#0|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |result#0|) |p#0@@10|))
)))) ($Is DatatypeTypeType (M2.__default.Union |st#0@@9| |st'#0|) Tclass.M2.State)))
 :pattern ( (M2.__default.Union |st#0@@9| |st'#0|))
))))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0@@0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0@@0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|p#0@@11| T@U) ) (!  (=> (or (|M2.__default.WellFounded#canCall| |p#0@@11|) (and (< 2 $FunctionContextHeight) ($IsBox |p#0@@11| Tclass.M2.Path))) (and (forall ((|cert#0@@3| T@U) ) (!  (=> ($Is DatatypeTypeType |cert#0@@3| Tclass.M2.WFCertificate) (|M2.__default.CheckWellFounded#canCall| |p#0@@11| |cert#0@@3|))
 :pattern ( (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@11| |cert#0@@3|))
)) (= (M2.__default.WellFounded |p#0@@11|) (exists ((|cert#0@@4| T@U) ) (!  (and ($Is DatatypeTypeType |cert#0@@4| Tclass.M2.WFCertificate) (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@11| |cert#0@@4|))
 :pattern ( (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@11| |cert#0@@4|))
)))))
 :pattern ( (M2.__default.WellFounded |p#0@@11|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|p#0@@12| T@U) (|st#0@@10| T@U) ) (!  (=> (or (|M2.__default.GetSt#canCall| |p#0@@12| |st#0@@10|) (and (< 2 $FunctionContextHeight) (and (and ($IsBox |p#0@@12| Tclass.M2.Path) ($Is DatatypeTypeType |st#0@@10| Tclass.M2.State)) (|Set#IsMember| (M2.__default.DomSt |st#0@@10|) |p#0@@12|)))) ($IsBox (M2.__default.GetSt |p#0@@12| |st#0@@10|) Tclass.M2.Artifact))
 :pattern ( (M2.__default.GetSt |p#0@@12| |st#0@@10|))
))))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (! (= (|M2.State#Equal| a@@9 b@@6) (= a@@9 b@@6))
 :pattern ( (|M2.State#Equal| a@@9 b@@6))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@4 T@U) (|p#0@@13| T@U) (|st#0@@11| T@U) ) (!  (=> (and (or (|M2.__default.GetSt#canCall| |p#0@@13| |st#0@@11|) (and (< 2 $FunctionContextHeight) (and (and (and ($IsBox |p#0@@13| Tclass.M2.Path) ($IsAllocBox |p#0@@13| Tclass.M2.Path $Heap@@4)) (and ($Is DatatypeTypeType |st#0@@11| Tclass.M2.State) ($IsAlloc DatatypeTypeType |st#0@@11| Tclass.M2.State $Heap@@4))) (|Set#IsMember| (M2.__default.DomSt |st#0@@11|) |p#0@@13|)))) ($IsGoodHeap $Heap@@4)) ($IsAllocBox (M2.__default.GetSt |p#0@@13| |st#0@@11|) Tclass.M2.Artifact $Heap@@4))
 :pattern ( ($IsAllocBox (M2.__default.GetSt |p#0@@13| |st#0@@11|) Tclass.M2.Artifact $Heap@@4))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@5 T@U) (|p#0@@14| T@U) ) (!  (=> (or (|M2.__default.OracleArbitrary#canCall| |p#0@@14|) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@5) ($IsBox |p#0@@14| Tclass.M2.Path)))) (and |$let#6$canCall| (= (M2.__default.OracleArbitrary |p#0@@14|) (let ((|a#0| |$let#6_a|))
|a#0|))))
 :pattern ( (M2.__default.OracleArbitrary |p#0@@14|) ($IsGoodHeap $Heap@@5))
))))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) (t0@@0 T@U) (t1@@0 T@U) ) (!  (=> (forall ((bx T@U) )  (=> (|Set#IsMember| a@@10 bx) (and ($IsBox bx t0@@0) ($IsBox (MapType0Select BoxType BoxType b@@7 bx) t1@@0)))) ($Is MapType (|Map#Glue| a@@10 b@@7 (TMap t0@@0 t1@@0)) (TMap t0@@0 t1@@0)))
 :pattern ( (|Map#Glue| a@@10 b@@7 (TMap t0@@0 t1@@0)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@5 T@U) (|p#0@@15| T@U) (|cert#0@@5| T@U) (|st#0@@12| T@U) ) (!  (=> (or (|M2.__default.OracleWF#canCall| |p#0@@15| |cert#0@@5| |st#0@@12|) (and (< 3 $FunctionContextHeight) (and (and (and ($IsBox |p#0@@15| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@5| Tclass.M2.WFCertificate)) ($Is DatatypeTypeType |st#0@@12| Tclass.M2.State)) (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@15| |cert#0@@5|)))) ($IsBox (M2.__default.OracleWF $ly@@5 |p#0@@15| |cert#0@@5| |st#0@@12|) Tclass.M2.Artifact))
 :pattern ( (M2.__default.OracleWF $ly@@5 |p#0@@15| |cert#0@@5| |st#0@@12|))
))))
(assert (forall ((a@@11 T@U) (b@@8 T@U) ) (! (= (|Set#Subset| a@@11 b@@8) (forall ((o@@2 T@U) ) (!  (=> (|Set#IsMember| a@@11 o@@2) (|Set#IsMember| b@@8 o@@2))
 :pattern ( (|Set#IsMember| a@@11 o@@2))
 :pattern ( (|Set#IsMember| b@@8 o@@2))
)))
 :pattern ( (|Set#Subset| a@@11 b@@8))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@1| T@U) (|a#2#1#0@@1| T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@1| |a#2#1#0@@1|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@0)  (and ($IsAllocBox |a#2#0#0@@1| |_System._tuple#2$T0@@1| $h@@0) ($IsAllocBox |a#2#1#0@@1| |_System._tuple#2$T1@@1| $h@@0))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@1| |a#2#1#0@@1|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@0))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@6 T@U) (|p#0@@16| T@U) (|cert#0@@6| T@U) (|deps#0@@5| T@U) (|st#0@@13| T@U) ) (!  (=> (or (|M2.__default.CollectDependencies#canCall| (Lit BoxType |p#0@@16|) (Lit DatatypeTypeType |cert#0@@6|) (Lit SetType |deps#0@@5|) (Lit DatatypeTypeType |st#0@@13|)) (and (< 3 $FunctionContextHeight) (and (and (and (and ($IsBox |p#0@@16| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@6| Tclass.M2.WFCertificate)) ($Is SetType |deps#0@@5| (TSet Tclass.M2.Path))) ($Is DatatypeTypeType |st#0@@13| Tclass.M2.State)) (and (M2.__default.CheckWellFounded ($LS $LZ) (Lit BoxType |p#0@@16|) (Lit DatatypeTypeType |cert#0@@6|)) (|Set#Equal| |deps#0@@5| (M2.__default.LocInv__Deps (Lit BoxType |p#0@@16|))))))) (and (forall ((|d#0@@2| T@U) ) (!  (=> ($IsBox |d#0@@2| Tclass.M2.Path) (=> (|Set#IsMember| (Lit SetType |deps#0@@5|) |d#0@@2|) (and (and (|M2.__default.DomSt#canCall| (Lit DatatypeTypeType |st#0@@13|)) (=> (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@13|))) |d#0@@2|) (|M2.__default.GetSt#canCall| |d#0@@2| (Lit DatatypeTypeType |st#0@@13|)))) (=> (not (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@13|))) |d#0@@2|)) (and (and (M2.WFCertificate.Cert_q (Lit DatatypeTypeType |cert#0@@6|)) (|M2.__default.FindCert#canCall| |d#0@@2| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@6|))))) (|M2.__default.OracleWF#canCall| |d#0@@2| (M2.__default.FindCert |d#0@@2| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@6|)))) (Lit DatatypeTypeType |st#0@@13|)))))))
 :pattern ( (M2.__default.FindCert |d#0@@2| (M2.WFCertificate.certs |cert#0@@6|)))
 :pattern ( (M2.__default.GetSt |d#0@@2| |st#0@@13|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@13|) |d#0@@2|))
 :pattern ( (|Set#IsMember| |deps#0@@5| |d#0@@2|))
)) (= (M2.__default.CollectDependencies ($LS $ly@@6) (Lit BoxType |p#0@@16|) (Lit DatatypeTypeType |cert#0@@6|) (Lit SetType |deps#0@@5|) (Lit DatatypeTypeType |st#0@@13|)) (|Map#Glue| (|Set#FromBoogieMap| (|lambda#19| Tclass.M2.Path (Lit SetType |deps#0@@5|))) (|lambda#20| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@13|))) (Lit DatatypeTypeType |st#0@@13|) ($LS $ly@@6) (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@6|))) (Lit DatatypeTypeType |st#0@@13|)) (TMap Tclass.M2.Path Tclass.M2.Artifact)))))
 :weight 3
 :pattern ( (M2.__default.CollectDependencies ($LS $ly@@6) (Lit BoxType |p#0@@16|) (Lit DatatypeTypeType |cert#0@@6|) (Lit SetType |deps#0@@5|) (Lit DatatypeTypeType |st#0@@13|)))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|st#0@@14| T@U) ) (!  (=> (or (|M2.__default.ValidState#canCall| |st#0@@14|) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |st#0@@14| Tclass.M2.State))) (and (forall ((|p#0@@17| T@U) ) (!  (=> ($IsBox |p#0@@17| Tclass.M2.Path) (and (|M2.__default.DomSt#canCall| |st#0@@14|) (=> (|Set#IsMember| (M2.__default.DomSt |st#0@@14|) |p#0@@17|) (|M2.__default.WellFounded#canCall| |p#0@@17|))))
 :pattern ( (M2.__default.WellFounded |p#0@@17|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@14|) |p#0@@17|))
)) (= (M2.__default.ValidState |st#0@@14|) (forall ((|p#0@@18| T@U) ) (!  (=> ($IsBox |p#0@@18| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.DomSt |st#0@@14|) |p#0@@18|) (M2.__default.WellFounded |p#0@@18|)))
 :pattern ( (M2.__default.WellFounded |p#0@@18|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@14|) |p#0@@18|))
)))))
 :pattern ( (M2.__default.ValidState |st#0@@14|))
))))
(assert (forall ((d@@4 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@4) (= (DatatypeCtorId d@@4) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (M2.WFCertificate.Cert_q d@@5) (= (DatatypeCtorId d@@5) |##M2.WFCertificate.Cert|))
 :pattern ( (M2.WFCertificate.Cert_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (M2.State.StateCons_q d@@6) (= (DatatypeCtorId d@@6) |##M2.State.StateCons|))
 :pattern ( (M2.State.StateCons_q d@@6))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (! (= (|Set#Disjoint| a@@12 b@@9) (forall ((o@@3 T@U) ) (!  (or (not (|Set#IsMember| a@@12 o@@3)) (not (|Set#IsMember| b@@9 o@@3)))
 :pattern ( (|Set#IsMember| a@@12 o@@3))
 :pattern ( (|Set#IsMember| b@@9 o@@3))
)))
 :pattern ( (|Set#Disjoint| a@@12 b@@9))
)))
(assert (forall ((m@@1 T@U) (bx@@0 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@0)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|p#0@@19| T@U) (|st#0@@15| T@U) ) (!  (=> (or (|M2.__default.Oracle#canCall| |p#0@@19| |st#0@@15|) (and (< 4 $FunctionContextHeight) (and ($IsBox |p#0@@19| Tclass.M2.Path) ($Is DatatypeTypeType |st#0@@15| Tclass.M2.State)))) (and (and (and (|M2.__default.WellFounded#canCall| |p#0@@19|) (=> (M2.__default.WellFounded |p#0@@19|) (and (|M2.__default.GetCert#canCall| |p#0@@19|) (|M2.__default.OracleWF#canCall| |p#0@@19| (M2.__default.GetCert |p#0@@19|) |st#0@@15|)))) (=> (not (M2.__default.WellFounded |p#0@@19|)) (|M2.__default.OracleArbitrary#canCall| |p#0@@19|))) (= (M2.__default.Oracle |p#0@@19| |st#0@@15|) (ite (M2.__default.WellFounded |p#0@@19|) (M2.__default.OracleWF ($LS $LZ) |p#0@@19| (M2.__default.GetCert |p#0@@19|) |st#0@@15|) (M2.__default.OracleArbitrary |p#0@@19|)))))
 :pattern ( (M2.__default.Oracle |p#0@@19| |st#0@@15|))
))))
(assert (forall ((d@@7 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@7) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@7 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (M2.WFCertificate.Cert_q d@@8) (exists ((|a#1#0#0@@0| T@U) (|a#1#1#0@@0| T@U) ) (= d@@8 (|#M2.WFCertificate.Cert| |a#1#0#0@@0| |a#1#1#0@@0|))))
 :pattern ( (M2.WFCertificate.Cert_q d@@8))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|st#0@@16| T@U) ) (!  (=> (or (|M2.__default.DomSt#canCall| (Lit DatatypeTypeType |st#0@@16|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |st#0@@16| Tclass.M2.State))) (and (M2.State.StateCons_q (Lit DatatypeTypeType |st#0@@16|)) (= (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@16|)) (|Set#FromBoogieMap| (|lambda#19| Tclass.M2.Path (|Map#Domain| (M2.State.m (Lit DatatypeTypeType |st#0@@16|))))))))
 :weight 3
 :pattern ( (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@16|)))
))))
(assert (forall ((v T@U) (t0@@1 T@U) ) (! (= ($Is SetType v (TSet t0@@1)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v bx@@1) ($IsBox bx@@1 t0@@1))
 :pattern ( (|Set#IsMember| v bx@@1))
)))
 :pattern ( ($Is SetType v (TSet t0@@1)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@6 T@U) (|p#0@@20| T@U) ) (!  (=> (or (|M2.__default.OracleArbitrary#canCall| (Lit BoxType |p#0@@20|)) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@6) ($IsBox |p#0@@20| Tclass.M2.Path)))) (and |$let#6$canCall| (= (M2.__default.OracleArbitrary (Lit BoxType |p#0@@20|)) (let ((|a#1| |$let#6_a|))
|a#1|))))
 :weight 3
 :pattern ( (M2.__default.OracleArbitrary (Lit BoxType |p#0@@20|)) ($IsGoodHeap $Heap@@6))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@7 T@U) (|p#0@@21| T@U) (|cert#0@@7| T@U) (|st#0@@17| T@U) ) (!  (=> (or (|M2.__default.OracleWF#canCall| |p#0@@21| (Lit DatatypeTypeType |cert#0@@7|) |st#0@@17|) (and (< 3 $FunctionContextHeight) (and (and (and ($IsBox |p#0@@21| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@7| Tclass.M2.WFCertificate)) ($Is DatatypeTypeType |st#0@@17| Tclass.M2.State)) (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@21| (Lit DatatypeTypeType |cert#0@@7|))))) (and (and (and (and (|M2.__default.LocInv__Cmd#canCall| |p#0@@21|) (|M2.__default.LocInv__Deps#canCall| |p#0@@21|)) (|M2.__default.LocInv__Exp#canCall| |p#0@@21|)) (let ((|e#1| (M2.__default.LocInv__Exp |p#0@@21|)))
(let ((|deps#1| (M2.__default.LocInv__Deps |p#0@@21|)))
(let ((|cmd#1| (M2.__default.LocInv__Cmd |p#0@@21|)))
 (and (|M2.__default.CollectDependencies#canCall| |p#0@@21| (Lit DatatypeTypeType |cert#0@@7|) |deps#1| |st#0@@17|) (|M2.__default.RunTool#canCall| |cmd#1| (M2.__default.CollectDependencies ($LS $ly@@7) |p#0@@21| (Lit DatatypeTypeType |cert#0@@7|) |deps#1| |st#0@@17|) |e#1|)))))) (= (M2.__default.OracleWF ($LS $ly@@7) |p#0@@21| (Lit DatatypeTypeType |cert#0@@7|) |st#0@@17|) (let ((|e#1@@0| (M2.__default.LocInv__Exp |p#0@@21|)))
(let ((|deps#1@@0| (M2.__default.LocInv__Deps |p#0@@21|)))
(let ((|cmd#1@@0| (M2.__default.LocInv__Cmd |p#0@@21|)))
(M2.__default.RunTool |cmd#1@@0| (M2.__default.CollectDependencies ($LS $ly@@7) |p#0@@21| (Lit DatatypeTypeType |cert#0@@7|) |deps#1@@0| |st#0@@17|) |e#1@@0|)))))))
 :weight 3
 :pattern ( (M2.__default.OracleWF ($LS $ly@@7) |p#0@@21| (Lit DatatypeTypeType |cert#0@@7|) |st#0@@17|))
))))
(assert (forall ((d@@9 T@U) ) (!  (=> (M2.State.StateCons_q d@@9) (exists ((|a#8#0#0| T@U) ) (= d@@9 (|#M2.State.StateCons| |a#8#0#0|))))
 :pattern ( (M2.State.StateCons_q d@@9))
)))
(assert (forall ((p T@U) ) (!  (=> (|$let#3$canCall| p) (and ($Is DatatypeTypeType (|$let#3_c| p) Tclass.M2.WFCertificate) (M2.__default.CheckWellFounded ($LS $LZ) p (|$let#3_c| p))))
 :pattern ( (|$let#3_c| p))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@7 T@U) (|d#0@@3| T@U) (|certs#0@@0| T@U) ) (!  (=> (or (|M2.__default.FindCert#canCall| |d#0@@3| |certs#0@@0|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@7) ($IsBox |d#0@@3| Tclass.M2.Path)) ($Is SetType |certs#0@@0| (TSet Tclass.M2.WFCertificate))) (exists ((|c#1| T@U) ) (!  (and ($Is DatatypeTypeType |c#1| Tclass.M2.WFCertificate) (and (|Set#IsMember| |certs#0@@0| ($Box DatatypeTypeType |c#1|)) (= (M2.WFCertificate.p |c#1|) |d#0@@3|)))
 :pattern ( (M2.WFCertificate.p |c#1|))
 :pattern ( (|Set#IsMember| |certs#0@@0| ($Box DatatypeTypeType |c#1|)))
))))) (and (|$let#9$canCall| |certs#0@@0| |d#0@@3|) (= (M2.__default.FindCert |d#0@@3| |certs#0@@0|) (let ((|c#2| (|$let#9_c| |certs#0@@0| |d#0@@3|)))
|c#2|))))
 :pattern ( (M2.__default.FindCert |d#0@@3| |certs#0@@0|) ($IsGoodHeap $Heap@@7))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@8 T@U) ($ly@@8 T@U) (|p#0@@22| T@U) (|cert#0@@8| T@U) (|st#0@@18| T@U) ) (!  (=> (and (or (|M2.__default.OracleWF#canCall| |p#0@@22| |cert#0@@8| |st#0@@18|) (and (< 3 $FunctionContextHeight) (and (and (and (and ($IsBox |p#0@@22| Tclass.M2.Path) ($IsAllocBox |p#0@@22| Tclass.M2.Path $Heap@@8)) (and ($Is DatatypeTypeType |cert#0@@8| Tclass.M2.WFCertificate) ($IsAlloc DatatypeTypeType |cert#0@@8| Tclass.M2.WFCertificate $Heap@@8))) (and ($Is DatatypeTypeType |st#0@@18| Tclass.M2.State) ($IsAlloc DatatypeTypeType |st#0@@18| Tclass.M2.State $Heap@@8))) (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@22| |cert#0@@8|)))) ($IsGoodHeap $Heap@@8)) ($IsAllocBox (M2.__default.OracleWF $ly@@8 |p#0@@22| |cert#0@@8| |st#0@@18|) Tclass.M2.Artifact $Heap@@8))
 :pattern ( ($IsAllocBox (M2.__default.OracleWF $ly@@8 |p#0@@22| |cert#0@@8| |st#0@@18|) Tclass.M2.Artifact $Heap@@8))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|p#0@@23| T@U) ) (!  (=> (or (|M2.__default.WellFounded#canCall| (Lit BoxType |p#0@@23|)) (and (< 2 $FunctionContextHeight) ($IsBox |p#0@@23| Tclass.M2.Path))) (and (forall ((|cert#1| T@U) ) (!  (=> ($Is DatatypeTypeType |cert#1| Tclass.M2.WFCertificate) (|M2.__default.CheckWellFounded#canCall| (Lit BoxType |p#0@@23|) |cert#1|))
 :pattern ( (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@23| |cert#1|))
)) (= (M2.__default.WellFounded (Lit BoxType |p#0@@23|)) (exists ((|cert#1@@0| T@U) ) (!  (and ($Is DatatypeTypeType |cert#1@@0| Tclass.M2.WFCertificate) (M2.__default.CheckWellFounded ($LS $LZ) (Lit BoxType |p#0@@23|) |cert#1@@0|))
 :pattern ( (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@23| |cert#1@@0|))
)))))
 :weight 3
 :pattern ( (M2.__default.WellFounded (Lit BoxType |p#0@@23|)))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|st#0@@19| T@U) ) (!  (=> (or (|M2.__default.ValidState#canCall| (Lit DatatypeTypeType |st#0@@19|)) (and (< 3 $FunctionContextHeight) ($Is DatatypeTypeType |st#0@@19| Tclass.M2.State))) (and (forall ((|p#1| T@U) ) (!  (=> ($IsBox |p#1| Tclass.M2.Path) (and (|M2.__default.DomSt#canCall| (Lit DatatypeTypeType |st#0@@19|)) (=> (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@19|))) |p#1|) (|M2.__default.WellFounded#canCall| |p#1|))))
 :pattern ( (M2.__default.WellFounded |p#1|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@19|) |p#1|))
)) (= (M2.__default.ValidState (Lit DatatypeTypeType |st#0@@19|)) (forall ((|p#1@@0| T@U) ) (!  (=> ($IsBox |p#1@@0| Tclass.M2.Path) (=> (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@19|))) |p#1@@0|) (M2.__default.WellFounded |p#1@@0|)))
 :pattern ( (M2.__default.WellFounded |p#1@@0|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@19|) |p#1@@0|))
)))))
 :weight 3
 :pattern ( (M2.__default.ValidState (Lit DatatypeTypeType |st#0@@19|)))
))))
(assert (forall (($ly@@9 T@U) (|p#0@@24| T@U) (|cert#0@@9| T@U) ) (! (= (M2.__default.CheckWellFounded ($LS $ly@@9) |p#0@@24| |cert#0@@9|) (M2.__default.CheckWellFounded $ly@@9 |p#0@@24| |cert#0@@9|))
 :pattern ( (M2.__default.CheckWellFounded ($LS $ly@@9) |p#0@@24| |cert#0@@9|))
)))
(assert (forall ((v@@0 T@U) (t@@1 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@1 h) ($IsAlloc T@@1 v@@0 t@@1 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@1 h))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|cmd#0@@2| T@U) (|deps#0@@6| T@U) (|exp#0@@0| T@U) ) (!  (=> (or (|M2.__default.RunTool#canCall| |cmd#0@@2| |deps#0@@6| |exp#0@@0|) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |cmd#0@@2| (TSeq TChar)) ($Is MapType |deps#0@@6| (TMap Tclass.M2.Path Tclass.M2.Artifact))) ($Is SeqType |exp#0@@0| (TSeq TChar))))) ($IsBox (M2.__default.RunTool |cmd#0@@2| |deps#0@@6| |exp#0@@0|) Tclass.M2.Artifact))
 :pattern ( (M2.__default.RunTool |cmd#0@@2| |deps#0@@6| |exp#0@@0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@10 T@U) (|p#0@@25| T@U) (|cert#0@@10| T@U) ) (!  (=> (or (|M2.__default.CheckWellFounded#canCall| |p#0@@25| (Lit DatatypeTypeType |cert#0@@10|)) (and (< 1 $FunctionContextHeight) (and ($IsBox |p#0@@25| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@10| Tclass.M2.WFCertificate)))) (and (and (M2.WFCertificate.Cert_q (Lit DatatypeTypeType |cert#0@@10|)) (=> (= (Lit BoxType (M2.WFCertificate.p (Lit DatatypeTypeType |cert#0@@10|))) |p#0@@25|) (and (forall ((|d#1| T@U) ) (!  (=> ($IsBox |d#1| Tclass.M2.Path) (and (|M2.__default.LocInv__Deps#canCall| |p#0@@25|) (=> (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@25|) |d#1|) (forall ((|c#2@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |c#2@@0| Tclass.M2.WFCertificate) (and (M2.WFCertificate.Cert_q (Lit DatatypeTypeType |cert#0@@10|)) (=> (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@10|))) ($Box DatatypeTypeType |c#2@@0|)) (M2.WFCertificate.Cert_q |c#2@@0|))))
 :pattern ( (M2.WFCertificate.p |c#2@@0|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@10|) ($Box DatatypeTypeType |c#2@@0|)))
)))))
 :pattern ( (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@25|) |d#1|))
)) (=> (forall ((|d#1@@0| T@U) ) (!  (=> ($IsBox |d#1@@0| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@25|) |d#1@@0|) (exists ((|c#2@@1| T@U) ) (!  (and ($Is DatatypeTypeType |c#2@@1| Tclass.M2.WFCertificate) (and (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@10|))) ($Box DatatypeTypeType |c#2@@1|)) (= (M2.WFCertificate.p |c#2@@1|) |d#1@@0|)))
 :pattern ( (M2.WFCertificate.p |c#2@@1|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@10|) ($Box DatatypeTypeType |c#2@@1|)))
))))
 :pattern ( (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@25|) |d#1@@0|))
)) (forall ((|c#3@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |c#3@@0| Tclass.M2.WFCertificate) (and (M2.WFCertificate.Cert_q (Lit DatatypeTypeType |cert#0@@10|)) (=> (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@10|))) ($Box DatatypeTypeType |c#3@@0|)) (and (M2.WFCertificate.Cert_q |c#3@@0|) (|M2.__default.CheckWellFounded#canCall| (M2.WFCertificate.p |c#3@@0|) |c#3@@0|)))))
 :pattern ( (M2.WFCertificate.p |c#3@@0|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@10|) ($Box DatatypeTypeType |c#3@@0|)))
)))))) (= (M2.__default.CheckWellFounded ($LS $ly@@10) |p#0@@25| (Lit DatatypeTypeType |cert#0@@10|))  (and (and (= (Lit BoxType (M2.WFCertificate.p (Lit DatatypeTypeType |cert#0@@10|))) |p#0@@25|) (forall ((|d#1@@1| T@U) ) (!  (=> ($IsBox |d#1@@1| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@25|) |d#1@@1|) (exists ((|c#2@@2| T@U) ) (!  (and ($Is DatatypeTypeType |c#2@@2| Tclass.M2.WFCertificate) (and (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@10|))) ($Box DatatypeTypeType |c#2@@2|)) (= (M2.WFCertificate.p |c#2@@2|) |d#1@@1|)))
 :pattern ( (M2.WFCertificate.p |c#2@@2|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@10|) ($Box DatatypeTypeType |c#2@@2|)))
))))
 :pattern ( (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@25|) |d#1@@1|))
))) (forall ((|c#3@@1| T@U) ) (!  (=> ($Is DatatypeTypeType |c#3@@1| Tclass.M2.WFCertificate) (=> (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@10|))) ($Box DatatypeTypeType |c#3@@1|)) (M2.__default.CheckWellFounded ($LS $ly@@10) (M2.WFCertificate.p |c#3@@1|) |c#3@@1|)))
 :pattern ( (M2.WFCertificate.p |c#3@@1|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@10|) ($Box DatatypeTypeType |c#3@@1|)))
))))))
 :weight 3
 :pattern ( (M2.__default.CheckWellFounded ($LS $ly@@10) |p#0@@25| (Lit DatatypeTypeType |cert#0@@10|)))
))))
(assert (forall ((sts T@U) ) (!  (=> (|$let#13$canCall| sts) (and ($Is DatatypeTypeType (|$let#13_st| sts) Tclass.M2.State) (|Set#IsMember| sts ($Box DatatypeTypeType (|$let#13_st| sts)))))
 :pattern ( (|$let#13_st| sts))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|p#0@@26| T@U) (|st#0@@20| T@U) ) (!  (=> (or (|M2.__default.GetSt#canCall| |p#0@@26| (Lit DatatypeTypeType |st#0@@20|)) (and (< 2 $FunctionContextHeight) (and (and ($IsBox |p#0@@26| Tclass.M2.Path) ($Is DatatypeTypeType |st#0@@20| Tclass.M2.State)) (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@20|))) |p#0@@26|)))) (and (M2.State.StateCons_q (Lit DatatypeTypeType |st#0@@20|)) (= (M2.__default.GetSt |p#0@@26| (Lit DatatypeTypeType |st#0@@20|)) (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType (M2.State.m (Lit DatatypeTypeType |st#0@@20|)))) |p#0@@26|))))
 :weight 3
 :pattern ( (M2.__default.GetSt |p#0@@26| (Lit DatatypeTypeType |st#0@@20|)))
))))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass.M2.State) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass.M2.State)))
 :pattern ( ($IsBox bx@@2 Tclass.M2.State))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass.M2.WFCertificate) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) Tclass.M2.WFCertificate)))
 :pattern ( ($IsBox bx@@3 Tclass.M2.WFCertificate))
)))
(assert (forall ((|a#13#0#0| T@U) (bx@@4 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#13#0#0|) bx@@4) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |a#13#0#0|) bx@@4))) (DtRank (|#M2.State.StateCons| |a#13#0#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#13#0#0|) bx@@4) (|#M2.State.StateCons| |a#13#0#0|))
)))
(assert (forall ((m@@2 T@U) (|m'| T@U) ) (! (= (|Map#Equal| m@@2 |m'|)  (and (forall ((u T@U) ) (= (|Set#IsMember| (|Map#Domain| m@@2) u) (|Set#IsMember| (|Map#Domain| |m'|) u))) (forall ((u@@0 T@U) )  (=> (|Set#IsMember| (|Map#Domain| m@@2) u@@0) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@2) u@@0) (MapType0Select BoxType BoxType (|Map#Elements| |m'|) u@@0))))))
 :pattern ( (|Map#Equal| m@@2 |m'|))
)))
(assert (forall ((certs T@U) (d@@10 T@U) ) (!  (=> (|$let#9$canCall| certs d@@10) (and ($Is DatatypeTypeType (|$let#9_c| certs d@@10) Tclass.M2.WFCertificate) (and (|Set#IsMember| certs ($Box DatatypeTypeType (|$let#9_c| certs d@@10))) (= (M2.WFCertificate.p (|$let#9_c| certs d@@10)) d@@10))))
 :pattern ( (|$let#9_c| certs d@@10))
)))
(assert (forall ((a@@13 T@U) (b@@10 T@U) (o@@4 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@13 b@@10) o@@4)  (or (|Set#IsMember| a@@13 o@@4) (|Set#IsMember| b@@10 o@@4)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@13 b@@10) o@@4))
)))
(assert (forall ((a@@14 T@U) (b@@11 T@U) ) (!  (=> (|Set#Disjoint| a@@14 b@@11) (and (= (|Set#Difference| (|Set#Union| a@@14 b@@11) a@@14) b@@11) (= (|Set#Difference| (|Set#Union| a@@14 b@@11) b@@11) a@@14)))
 :pattern ( (|Set#Union| a@@14 b@@11))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@9 T@U) ($ly@@11 T@U) (|p#0@@27| T@U) (|cert#0@@11| T@U) (|deps#0@@7| T@U) (|st#0@@21| T@U) ) (!  (=> (and (or (|M2.__default.CollectDependencies#canCall| |p#0@@27| |cert#0@@11| |deps#0@@7| |st#0@@21|) (and (< 3 $FunctionContextHeight) (and (and (and (and (and ($IsBox |p#0@@27| Tclass.M2.Path) ($IsAllocBox |p#0@@27| Tclass.M2.Path $Heap@@9)) (and ($Is DatatypeTypeType |cert#0@@11| Tclass.M2.WFCertificate) ($IsAlloc DatatypeTypeType |cert#0@@11| Tclass.M2.WFCertificate $Heap@@9))) (and ($Is SetType |deps#0@@7| (TSet Tclass.M2.Path)) ($IsAlloc SetType |deps#0@@7| (TSet Tclass.M2.Path) $Heap@@9))) (and ($Is DatatypeTypeType |st#0@@21| Tclass.M2.State) ($IsAlloc DatatypeTypeType |st#0@@21| Tclass.M2.State $Heap@@9))) (and (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@27| |cert#0@@11|) (|Set#Equal| |deps#0@@7| (M2.__default.LocInv__Deps |p#0@@27|)))))) ($IsGoodHeap $Heap@@9)) ($IsAlloc MapType (M2.__default.CollectDependencies $ly@@11 |p#0@@27| |cert#0@@11| |deps#0@@7| |st#0@@21|) (TMap Tclass.M2.Path Tclass.M2.Artifact) $Heap@@9))
 :pattern ( ($IsAlloc MapType (M2.__default.CollectDependencies $ly@@11 |p#0@@27| |cert#0@@11| |deps#0@@7| |st#0@@21|) (TMap Tclass.M2.Path Tclass.M2.Artifact) $Heap@@9))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@10 T@U) (|p#0@@28| T@U) ) (!  (=> (or (|M2.__default.GetCert#canCall| (Lit BoxType |p#0@@28|)) (and (< 3 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@10) ($IsBox |p#0@@28| Tclass.M2.Path)) (U_2_bool (Lit boolType (bool_2_U (M2.__default.WellFounded (Lit BoxType |p#0@@28|)))))))) (and (|$let#3$canCall| (Lit BoxType |p#0@@28|)) (= (M2.__default.GetCert (Lit BoxType |p#0@@28|)) (let ((|c#1@@0| (|$let#3_c| (Lit BoxType |p#0@@28|))))
|c#1@@0|))))
 :weight 3
 :pattern ( (M2.__default.GetCert (Lit BoxType |p#0@@28|)) ($IsGoodHeap $Heap@@10))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly@@12 T@U) ($Heap@@11 T@U) (|sts#0@@1| T@U) ) (!  (=> (or (|M2.__default.Combine#canCall| (Lit SetType |sts#0@@1|)) (and (< 4 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@11) ($Is SetType |sts#0@@1| (TSet Tclass.M2.State))) (not (|Set#Equal| |sts#0@@1| |Set#Empty|))))) (and (and (|$let#13$canCall| (Lit SetType |sts#0@@1|)) (=> (not (|Set#Equal| |sts#0@@1| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType (|$let#13_st| (Lit SetType |sts#0@@1|)))))) (and (|M2.__default.Combine#canCall| (|Set#Difference| |sts#0@@1| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType (|$let#13_st| (Lit SetType |sts#0@@1|)))))) (|M2.__default.Union#canCall| (|$let#13_st| (Lit SetType |sts#0@@1|)) (M2.__default.Combine ($LS $ly@@12) (|Set#Difference| |sts#0@@1| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType (|$let#13_st| (Lit SetType |sts#0@@1|)))))))))) (= (M2.__default.Combine ($LS $ly@@12) (Lit SetType |sts#0@@1|)) (let ((|st#1| (|$let#13_st| (Lit SetType |sts#0@@1|))))
(ite (|Set#Equal| |sts#0@@1| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#1|))) |st#1| (M2.__default.Union |st#1| (M2.__default.Combine ($LS $ly@@12) (|Set#Difference| |sts#0@@1| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#1|))))))))))
 :weight 3
 :pattern ( (M2.__default.Combine ($LS $ly@@12) (Lit SetType |sts#0@@1|)) ($IsGoodHeap $Heap@@11))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|p#0@@29| T@U) (|st#0@@22| T@U) ) (!  (=> (or (|M2.__default.Oracle#canCall| |p#0@@29| (Lit DatatypeTypeType |st#0@@22|)) (and (< 4 $FunctionContextHeight) (and ($IsBox |p#0@@29| Tclass.M2.Path) ($Is DatatypeTypeType |st#0@@22| Tclass.M2.State)))) (and (and (and (|M2.__default.WellFounded#canCall| |p#0@@29|) (=> (M2.__default.WellFounded |p#0@@29|) (and (|M2.__default.GetCert#canCall| |p#0@@29|) (|M2.__default.OracleWF#canCall| |p#0@@29| (M2.__default.GetCert |p#0@@29|) (Lit DatatypeTypeType |st#0@@22|))))) (=> (not (M2.__default.WellFounded |p#0@@29|)) (|M2.__default.OracleArbitrary#canCall| |p#0@@29|))) (= (M2.__default.Oracle |p#0@@29| (Lit DatatypeTypeType |st#0@@22|)) (ite (M2.__default.WellFounded |p#0@@29|) (M2.__default.OracleWF ($LS $LZ) |p#0@@29| (M2.__default.GetCert |p#0@@29|) (Lit DatatypeTypeType |st#0@@22|)) (M2.__default.OracleArbitrary |p#0@@29|)))))
 :weight 3
 :pattern ( (M2.__default.Oracle |p#0@@29| (Lit DatatypeTypeType |st#0@@22|)))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|p#0@@30| T@U) ) (!  (=> (or (|M2.__default.GetCert#canCall| |p#0@@30|) (and (< 3 $FunctionContextHeight) (and ($IsBox |p#0@@30| Tclass.M2.Path) (M2.__default.WellFounded |p#0@@30|)))) (and (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@30| (M2.__default.GetCert |p#0@@30|)) ($Is DatatypeTypeType (M2.__default.GetCert |p#0@@30|) Tclass.M2.WFCertificate)))
 :pattern ( (M2.__default.GetCert |p#0@@30|))
))))
(assert (forall ((a@@15 T@U) (b@@12 T@U) ) (!  (=> (|Set#Equal| a@@15 b@@12) (= a@@15 b@@12))
 :pattern ( (|Set#Equal| a@@15 b@@12))
)))
(assert (forall ((m@@3 T@U) (|m'@@0| T@U) ) (!  (=> (|Map#Equal| m@@3 |m'@@0|) (= m@@3 |m'@@0|))
 :pattern ( (|Map#Equal| m@@3 |m'@@0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@13 T@U) (|p#0@@31| T@U) (|cert#0@@12| T@U) ) (!  (=> (or (|M2.__default.CheckWellFounded#canCall| (Lit BoxType |p#0@@31|) (Lit DatatypeTypeType |cert#0@@12|)) (and (< 1 $FunctionContextHeight) (and ($IsBox |p#0@@31| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@12| Tclass.M2.WFCertificate)))) (and (and (M2.WFCertificate.Cert_q (Lit DatatypeTypeType |cert#0@@12|)) (=> (= (Lit BoxType (M2.WFCertificate.p (Lit DatatypeTypeType |cert#0@@12|))) (Lit BoxType |p#0@@31|)) (and (forall ((|d#2| T@U) ) (!  (=> ($IsBox |d#2| Tclass.M2.Path) (and (|M2.__default.LocInv__Deps#canCall| (Lit BoxType |p#0@@31|)) (=> (|Set#IsMember| (M2.__default.LocInv__Deps (Lit BoxType |p#0@@31|)) |d#2|) (forall ((|c#4@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |c#4@@0| Tclass.M2.WFCertificate) (and (M2.WFCertificate.Cert_q (Lit DatatypeTypeType |cert#0@@12|)) (=> (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@12|))) ($Box DatatypeTypeType |c#4@@0|)) (M2.WFCertificate.Cert_q |c#4@@0|))))
 :pattern ( (M2.WFCertificate.p |c#4@@0|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@12|) ($Box DatatypeTypeType |c#4@@0|)))
)))))
 :pattern ( (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@31|) |d#2|))
)) (=> (forall ((|d#2@@0| T@U) ) (!  (=> ($IsBox |d#2@@0| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.LocInv__Deps (Lit BoxType |p#0@@31|)) |d#2@@0|) (exists ((|c#4@@1| T@U) ) (!  (and ($Is DatatypeTypeType |c#4@@1| Tclass.M2.WFCertificate) (and (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@12|))) ($Box DatatypeTypeType |c#4@@1|)) (= (M2.WFCertificate.p |c#4@@1|) |d#2@@0|)))
 :pattern ( (M2.WFCertificate.p |c#4@@1|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@12|) ($Box DatatypeTypeType |c#4@@1|)))
))))
 :pattern ( (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@31|) |d#2@@0|))
)) (forall ((|c#5| T@U) ) (!  (=> ($Is DatatypeTypeType |c#5| Tclass.M2.WFCertificate) (and (M2.WFCertificate.Cert_q (Lit DatatypeTypeType |cert#0@@12|)) (=> (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@12|))) ($Box DatatypeTypeType |c#5|)) (and (M2.WFCertificate.Cert_q |c#5|) (|M2.__default.CheckWellFounded#canCall| (M2.WFCertificate.p |c#5|) |c#5|)))))
 :pattern ( (M2.WFCertificate.p |c#5|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@12|) ($Box DatatypeTypeType |c#5|)))
)))))) (= (M2.__default.CheckWellFounded ($LS $ly@@13) (Lit BoxType |p#0@@31|) (Lit DatatypeTypeType |cert#0@@12|))  (and (and (= (Lit BoxType (M2.WFCertificate.p (Lit DatatypeTypeType |cert#0@@12|))) (Lit BoxType |p#0@@31|)) (forall ((|d#2@@1| T@U) ) (!  (=> ($IsBox |d#2@@1| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.LocInv__Deps (Lit BoxType |p#0@@31|)) |d#2@@1|) (exists ((|c#4@@2| T@U) ) (!  (and ($Is DatatypeTypeType |c#4@@2| Tclass.M2.WFCertificate) (and (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@12|))) ($Box DatatypeTypeType |c#4@@2|)) (= (M2.WFCertificate.p |c#4@@2|) |d#2@@1|)))
 :pattern ( (M2.WFCertificate.p |c#4@@2|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@12|) ($Box DatatypeTypeType |c#4@@2|)))
))))
 :pattern ( (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@31|) |d#2@@1|))
))) (forall ((|c#5@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |c#5@@0| Tclass.M2.WFCertificate) (=> (|Set#IsMember| (Lit SetType (M2.WFCertificate.certs (Lit DatatypeTypeType |cert#0@@12|))) ($Box DatatypeTypeType |c#5@@0|)) (M2.__default.CheckWellFounded ($LS $ly@@13) (M2.WFCertificate.p |c#5@@0|) |c#5@@0|)))
 :pattern ( (M2.WFCertificate.p |c#5@@0|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@12|) ($Box DatatypeTypeType |c#5@@0|)))
))))))
 :weight 3
 :pattern ( (M2.__default.CheckWellFounded ($LS $ly@@13) (Lit BoxType |p#0@@31|) (Lit DatatypeTypeType |cert#0@@12|)))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|p#0@@32| T@U) ) (!  (=> (or (|M2.__default.OracleArbitrary#canCall| |p#0@@32|) (and (< 0 $FunctionContextHeight) ($IsBox |p#0@@32| Tclass.M2.Path))) ($IsBox (M2.__default.OracleArbitrary |p#0@@32|) Tclass.M2.Artifact))
 :pattern ( (M2.__default.OracleArbitrary |p#0@@32|))
))))
(assert (forall ((|a#9#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#M2.State.StateCons| |a#9#0#0|) Tclass.M2.State) ($Is MapType |a#9#0#0| (TMap Tclass.M2.Path Tclass.M2.Artifact)))
 :pattern ( ($Is DatatypeTypeType (|#M2.State.StateCons| |a#9#0#0|) Tclass.M2.State))
)))
(assert (= (Ctor charType) 8))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TChar) (and (= ($Box charType ($Unbox charType bx@@5)) bx@@5) ($Is charType ($Unbox charType bx@@5) TChar)))
 :pattern ( ($IsBox bx@@5 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@2) ($Is T@@2 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@2))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@0 T@U) (v@@2 T@U) ) (!  (=> ($IsBox v@@2 ty) ($IsAllocBox v@@2 ty h@@0))
 :pattern ( ($IsAllocBox v@@2 ty h@@0))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@2) h@@1) (forall ((bx@@6 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@6) ($IsAllocBox bx@@6 t0@@2 h@@1))
 :pattern ( (|Set#IsMember| v@@3 bx@@6))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@2) h@@1))
)))
(assert (forall ((t@@3 T@U) (u@@1 T@U) ) (! (= (Inv0_TMap (TMap t@@3 u@@1)) t@@3)
 :pattern ( (TMap t@@3 u@@1))
)))
(assert (forall ((t@@4 T@U) (u@@2 T@U) ) (! (= (Inv1_TMap (TMap t@@4 u@@2)) u@@2)
 :pattern ( (TMap t@@4 u@@2))
)))
(assert (forall ((t@@5 T@U) (u@@3 T@U) ) (! (= (Tag (TMap t@@5 u@@3)) TagMap)
 :pattern ( (TMap t@@5 u@@3))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#0#0#0@@0| T@U) (|a#0#1#0@@0| T@U) ) (! (= (DatatypeCtorId (|#M2.WFCertificate.Cert| |a#0#0#0@@0| |a#0#1#0@@0|)) |##M2.WFCertificate.Cert|)
 :pattern ( (|#M2.WFCertificate.Cert| |a#0#0#0@@0| |a#0#1#0@@0|))
)))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) ) (! (= (M2.WFCertificate.p (|#M2.WFCertificate.Cert| |a#4#0#0@@0| |a#4#1#0@@0|)) |a#4#0#0@@0|)
 :pattern ( (|#M2.WFCertificate.Cert| |a#4#0#0@@0| |a#4#1#0@@0|))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (= (M2.WFCertificate.certs (|#M2.WFCertificate.Cert| |a#5#0#0| |a#5#1#0|)) |a#5#1#0|)
 :pattern ( (|#M2.WFCertificate.Cert| |a#5#0#0| |a#5#1#0|))
)))
(assert  (=> |$let#6$canCall| (and ($IsBox |$let#6_a| Tclass.M2.Artifact) (U_2_bool (Lit boolType (bool_2_U true))))))
(assert (forall ((v@@4 T@U) (t0@@3 T@U) (h@@2 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@3) h@@2) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i) t0@@3 h@@2))
 :pattern ( (|Seq#Index| v@@4 i))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@3) h@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@12 T@U) (|p#0@@33| T@U) ) (!  (=> (and (or (|M2.__default.OracleArbitrary#canCall| |p#0@@33|) (and (< 0 $FunctionContextHeight) (and ($IsBox |p#0@@33| Tclass.M2.Path) ($IsAllocBox |p#0@@33| Tclass.M2.Path $Heap@@12)))) ($IsGoodHeap $Heap@@12)) ($IsAllocBox (M2.__default.OracleArbitrary |p#0@@33|) Tclass.M2.Artifact $Heap@@12))
 :pattern ( ($IsAllocBox (M2.__default.OracleArbitrary |p#0@@33|) Tclass.M2.Artifact $Heap@@12))
))))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSet (TSet t@@6)) t@@6)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSet t@@7)) TagSet)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Inv0_TSeq (TSeq t@@8)) t@@8)
 :pattern ( (TSeq t@@8))
)))
(assert (forall ((t@@9 T@U) ) (! (= (Tag (TSeq t@@9)) TagSeq)
 :pattern ( (TSeq t@@9))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= (DatatypeCtorId (|#M2.State.StateCons| |a#7#0#0|)) |##M2.State.StateCons|)
 :pattern ( (|#M2.State.StateCons| |a#7#0#0|))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (= (M2.State.m (|#M2.State.StateCons| |a#11#0#0|)) |a#11#0#0|)
 :pattern ( (|#M2.State.StateCons| |a#11#0#0|))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@7)) x@@7)
 :pattern ( ($Box T@@3 x@@7))
)))
(assert (forall ((v@@5 T@U) (t0@@4 T@U) (t1@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc MapType v@@5 (TMap t0@@4 t1@@1) h@@3) (forall ((bx@@7 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@5) bx@@7) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@5) bx@@7) t1@@1 h@@3) ($IsAllocBox bx@@7 t0@@4 h@@3)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@5) bx@@7))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@5) bx@@7))
)))
 :pattern ( ($IsAlloc MapType v@@5 (TMap t0@@4 t1@@1) h@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@14 T@U) (|p#0@@34| T@U) (|cert#0@@13| T@U) ) (!  (=> (or (|M2.__default.CheckWellFounded#canCall| |p#0@@34| |cert#0@@13|) (and (< 1 $FunctionContextHeight) (and ($IsBox |p#0@@34| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@13| Tclass.M2.WFCertificate)))) (and (and (M2.WFCertificate.Cert_q |cert#0@@13|) (=> (= (M2.WFCertificate.p |cert#0@@13|) |p#0@@34|) (and (forall ((|d#0@@4| T@U) ) (!  (=> ($IsBox |d#0@@4| Tclass.M2.Path) (and (|M2.__default.LocInv__Deps#canCall| |p#0@@34|) (=> (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@34|) |d#0@@4|) (forall ((|c#0@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |c#0@@0| Tclass.M2.WFCertificate) (and (M2.WFCertificate.Cert_q |cert#0@@13|) (=> (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#0@@0|)) (M2.WFCertificate.Cert_q |c#0@@0|))))
 :pattern ( (M2.WFCertificate.p |c#0@@0|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#0@@0|)))
)))))
 :pattern ( (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@34|) |d#0@@4|))
)) (=> (forall ((|d#0@@5| T@U) ) (!  (=> ($IsBox |d#0@@5| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@34|) |d#0@@5|) (exists ((|c#0@@1| T@U) ) (!  (and ($Is DatatypeTypeType |c#0@@1| Tclass.M2.WFCertificate) (and (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#0@@1|)) (= (M2.WFCertificate.p |c#0@@1|) |d#0@@5|)))
 :pattern ( (M2.WFCertificate.p |c#0@@1|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#0@@1|)))
))))
 :pattern ( (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@34|) |d#0@@5|))
)) (forall ((|c#1@@1| T@U) ) (!  (=> ($Is DatatypeTypeType |c#1@@1| Tclass.M2.WFCertificate) (and (M2.WFCertificate.Cert_q |cert#0@@13|) (=> (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#1@@1|)) (and (M2.WFCertificate.Cert_q |c#1@@1|) (|M2.__default.CheckWellFounded#canCall| (M2.WFCertificate.p |c#1@@1|) |c#1@@1|)))))
 :pattern ( (M2.WFCertificate.p |c#1@@1|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#1@@1|)))
)))))) (= (M2.__default.CheckWellFounded ($LS $ly@@14) |p#0@@34| |cert#0@@13|)  (and (and (= (M2.WFCertificate.p |cert#0@@13|) |p#0@@34|) (forall ((|d#0@@6| T@U) ) (!  (=> ($IsBox |d#0@@6| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@34|) |d#0@@6|) (exists ((|c#0@@2| T@U) ) (!  (and ($Is DatatypeTypeType |c#0@@2| Tclass.M2.WFCertificate) (and (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#0@@2|)) (= (M2.WFCertificate.p |c#0@@2|) |d#0@@6|)))
 :pattern ( (M2.WFCertificate.p |c#0@@2|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#0@@2|)))
))))
 :pattern ( (|Set#IsMember| (M2.__default.LocInv__Deps |p#0@@34|) |d#0@@6|))
))) (forall ((|c#1@@2| T@U) ) (!  (=> ($Is DatatypeTypeType |c#1@@2| Tclass.M2.WFCertificate) (=> (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#1@@2|)) (M2.__default.CheckWellFounded $ly@@14 (M2.WFCertificate.p |c#1@@2|) |c#1@@2|)))
 :pattern ( (M2.WFCertificate.p |c#1@@2|))
 :pattern ( (|Set#IsMember| (M2.WFCertificate.certs |cert#0@@13|) ($Box DatatypeTypeType |c#1@@2|)))
))))))
 :pattern ( (M2.__default.CheckWellFounded ($LS $ly@@14) |p#0@@34| |cert#0@@13|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|d#0@@7| T@U) (|certs#0@@1| T@U) ) (!  (=> (or (|M2.__default.FindCert#canCall| |d#0@@7| |certs#0@@1|) (and (< 1 $FunctionContextHeight) (and (and ($IsBox |d#0@@7| Tclass.M2.Path) ($Is SetType |certs#0@@1| (TSet Tclass.M2.WFCertificate))) (exists ((|c#0@@3| T@U) ) (!  (and ($Is DatatypeTypeType |c#0@@3| Tclass.M2.WFCertificate) (and (|Set#IsMember| |certs#0@@1| ($Box DatatypeTypeType |c#0@@3|)) (= (M2.WFCertificate.p |c#0@@3|) |d#0@@7|)))
 :pattern ( (M2.WFCertificate.p |c#0@@3|))
 :pattern ( (|Set#IsMember| |certs#0@@1| ($Box DatatypeTypeType |c#0@@3|)))
))))) ($Is DatatypeTypeType (M2.__default.FindCert |d#0@@7| |certs#0@@1|) Tclass.M2.WFCertificate))
 :pattern ( (M2.__default.FindCert |d#0@@7| |certs#0@@1|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|p#0@@35| T@U) ) (!  (=> (or (|M2.__default.LocInv__Deps#canCall| |p#0@@35|) (and (< 0 $FunctionContextHeight) ($IsBox |p#0@@35| Tclass.M2.Path))) ($Is SetType (M2.__default.LocInv__Deps |p#0@@35|) (TSet Tclass.M2.Path)))
 :pattern ( (M2.__default.LocInv__Deps |p#0@@35|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@13 T@U) (|d#0@@8| T@U) (|certs#0@@2| T@U) ) (!  (=> (or (|M2.__default.FindCert#canCall| (Lit BoxType |d#0@@8|) (Lit SetType |certs#0@@2|)) (and (< 1 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@13) ($IsBox |d#0@@8| Tclass.M2.Path)) ($Is SetType |certs#0@@2| (TSet Tclass.M2.WFCertificate))) (exists ((|c#5@@1| T@U) ) (!  (and ($Is DatatypeTypeType |c#5@@1| Tclass.M2.WFCertificate) (and (|Set#IsMember| (Lit SetType |certs#0@@2|) ($Box DatatypeTypeType |c#5@@1|)) (= (M2.WFCertificate.p |c#5@@1|) (Lit BoxType |d#0@@8|))))
 :pattern ( (M2.WFCertificate.p |c#5@@1|))
 :pattern ( (|Set#IsMember| |certs#0@@2| ($Box DatatypeTypeType |c#5@@1|)))
))))) (and (|$let#9$canCall| (Lit SetType |certs#0@@2|) (Lit BoxType |d#0@@8|)) (= (M2.__default.FindCert (Lit BoxType |d#0@@8|) (Lit SetType |certs#0@@2|)) (let ((|c#6| (|$let#9_c| (Lit SetType |certs#0@@2|) (Lit BoxType |d#0@@8|))))
|c#6|))))
 :weight 3
 :pattern ( (M2.__default.FindCert (Lit BoxType |d#0@@8|) (Lit SetType |certs#0@@2|)) ($IsGoodHeap $Heap@@13))
))))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0@@0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0@@0| |a#5#1#0@@0|))
)))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0@@0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0@@0| |a#7#1#0|))
)))
(assert (forall ((|a#9#0#0@@0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#M2.State.StateCons| |a#9#0#0@@0|) Tclass.M2.State $h@@1) ($IsAlloc MapType |a#9#0#0@@0| (TMap Tclass.M2.Path Tclass.M2.Artifact) $h@@1)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#M2.State.StateCons| |a#9#0#0@@0|) Tclass.M2.State $h@@1))
)))
(assert (forall (($ly@@15 T@U) (|sts#0@@2| T@U) ) (! (= (M2.__default.Combine ($LS $ly@@15) |sts#0@@2|) (M2.__default.Combine $ly@@15 |sts#0@@2|))
 :pattern ( (M2.__default.Combine ($LS $ly@@15) |sts#0@@2|))
)))
(assert (forall ((a@@16 T@U) (b@@13 T@U) ) (! (= (|Set#Union| a@@16 (|Set#Union| a@@16 b@@13)) (|Set#Union| a@@16 b@@13))
 :pattern ( (|Set#Union| a@@16 (|Set#Union| a@@16 b@@13)))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@16 T@U) (|p#0@@36| T@U) (|cert#0@@14| T@U) (|deps#0@@8| T@U) (|st#0@@23| T@U) ) (!  (=> (or (|M2.__default.CollectDependencies#canCall| |p#0@@36| |cert#0@@14| |deps#0@@8| |st#0@@23|) (and (< 3 $FunctionContextHeight) (and (and (and (and ($IsBox |p#0@@36| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@14| Tclass.M2.WFCertificate)) ($Is SetType |deps#0@@8| (TSet Tclass.M2.Path))) ($Is DatatypeTypeType |st#0@@23| Tclass.M2.State)) (and (M2.__default.CheckWellFounded ($LS $LZ) |p#0@@36| |cert#0@@14|) (|Set#Equal| |deps#0@@8| (M2.__default.LocInv__Deps |p#0@@36|)))))) ($Is MapType (M2.__default.CollectDependencies $ly@@16 |p#0@@36| |cert#0@@14| |deps#0@@8| |st#0@@23|) (TMap Tclass.M2.Path Tclass.M2.Artifact)))
 :pattern ( (M2.__default.CollectDependencies $ly@@16 |p#0@@36| |cert#0@@14| |deps#0@@8| |st#0@@23|))
))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((|st#0@@24| T@U) (|st'#0@@0| T@U) ) (!  (=> (or (|M2.__default.Extends#canCall| (Lit DatatypeTypeType |st#0@@24|) (Lit DatatypeTypeType |st'#0@@0|)) (and (< 5 $FunctionContextHeight) (and ($Is DatatypeTypeType |st#0@@24| Tclass.M2.State) ($Is DatatypeTypeType |st'#0@@0| Tclass.M2.State)))) (and (and (and (|M2.__default.DomSt#canCall| (Lit DatatypeTypeType |st#0@@24|)) (|M2.__default.DomSt#canCall| (Lit DatatypeTypeType |st'#0@@0|))) (=> (|Set#Subset| (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@24|)) (M2.__default.DomSt (Lit DatatypeTypeType |st'#0@@0|))) (and (forall ((|p#2| T@U) ) (!  (=> ($IsBox |p#2| Tclass.M2.Path) (and (|M2.__default.DomSt#canCall| (Lit DatatypeTypeType |st#0@@24|)) (=> (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@24|))) |p#2|) (and (|M2.__default.GetSt#canCall| |p#2| (Lit DatatypeTypeType |st'#0@@0|)) (|M2.__default.GetSt#canCall| |p#2| (Lit DatatypeTypeType |st#0@@24|))))))
 :pattern ( (M2.__default.GetSt |p#2| |st#0@@24|))
 :pattern ( (M2.__default.GetSt |p#2| |st'#0@@0|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@24|) |p#2|))
)) (=> (forall ((|p#2@@0| T@U) ) (!  (=> ($IsBox |p#2@@0| Tclass.M2.Path) (=> (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@24|))) |p#2@@0|) (= (M2.__default.GetSt |p#2@@0| (Lit DatatypeTypeType |st'#0@@0|)) (M2.__default.GetSt |p#2@@0| (Lit DatatypeTypeType |st#0@@24|)))))
 :pattern ( (M2.__default.GetSt |p#2@@0| |st#0@@24|))
 :pattern ( (M2.__default.GetSt |p#2@@0| |st'#0@@0|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@24|) |p#2@@0|))
)) (forall ((|p#3| T@U) ) (!  (=> ($IsBox |p#3| Tclass.M2.Path) (and (|M2.__default.DomSt#canCall| (Lit DatatypeTypeType |st#0@@24|)) (=> (not (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@24|))) |p#3|)) (and (|M2.__default.DomSt#canCall| (Lit DatatypeTypeType |st'#0@@0|)) (=> (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st'#0@@0|))) |p#3|) (and (|M2.__default.GetSt#canCall| |p#3| (Lit DatatypeTypeType |st'#0@@0|)) (|M2.__default.Oracle#canCall| |p#3| (Lit DatatypeTypeType |st#0@@24|))))))))
 :pattern ( (M2.__default.Oracle |p#3| |st#0@@24|))
 :pattern ( (M2.__default.GetSt |p#3| |st'#0@@0|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st'#0@@0|) |p#3|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@24|) |p#3|))
)))))) (= (M2.__default.Extends (Lit DatatypeTypeType |st#0@@24|) (Lit DatatypeTypeType |st'#0@@0|))  (and (and (|Set#Subset| (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@24|)) (M2.__default.DomSt (Lit DatatypeTypeType |st'#0@@0|))) (forall ((|p#2@@1| T@U) ) (!  (=> ($IsBox |p#2@@1| Tclass.M2.Path) (=> (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@24|))) |p#2@@1|) (= (M2.__default.GetSt |p#2@@1| (Lit DatatypeTypeType |st'#0@@0|)) (M2.__default.GetSt |p#2@@1| (Lit DatatypeTypeType |st#0@@24|)))))
 :pattern ( (M2.__default.GetSt |p#2@@1| |st#0@@24|))
 :pattern ( (M2.__default.GetSt |p#2@@1| |st'#0@@0|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@24|) |p#2@@1|))
))) (forall ((|p#3@@0| T@U) ) (!  (=> ($IsBox |p#3@@0| Tclass.M2.Path) (=> (and (not (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st#0@@24|))) |p#3@@0|)) (|Set#IsMember| (Lit SetType (M2.__default.DomSt (Lit DatatypeTypeType |st'#0@@0|))) |p#3@@0|)) (= (M2.__default.GetSt |p#3@@0| (Lit DatatypeTypeType |st'#0@@0|)) (M2.__default.Oracle |p#3@@0| (Lit DatatypeTypeType |st#0@@24|)))))
 :pattern ( (M2.__default.Oracle |p#3@@0| |st#0@@24|))
 :pattern ( (M2.__default.GetSt |p#3@@0| |st'#0@@0|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st'#0@@0|) |p#3@@0|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@24|) |p#3@@0|))
))))))
 :weight 3
 :pattern ( (M2.__default.Extends (Lit DatatypeTypeType |st#0@@24|) (Lit DatatypeTypeType |st'#0@@0|)))
))))
(assert (forall ((u@@4 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@4))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@4))
)))
(assert (forall (($ly@@17 T@U) (|p#0@@37| T@U) (|cert#0@@15| T@U) (|st#0@@25| T@U) ) (! (= (M2.__default.OracleWF ($LS $ly@@17) |p#0@@37| |cert#0@@15| |st#0@@25|) (M2.__default.OracleWF $ly@@17 |p#0@@37| |cert#0@@15| |st#0@@25|))
 :pattern ( (M2.__default.OracleWF ($LS $ly@@17) |p#0@@37| |cert#0@@15| |st#0@@25|))
)))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@8 (TMap s@@0 t@@10)) (and (= ($Box MapType ($Unbox MapType bx@@8)) bx@@8) ($Is MapType ($Unbox MapType bx@@8) (TMap s@@0 t@@10))))
 :pattern ( ($IsBox bx@@8 (TMap s@@0 t@@10)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@9)) bx@@9) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@9) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@5 T@T) (t1@@2 T@T) (t2 T@T) (val@@1 T@U) (m@@4 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@5 t1@@2 t2 (MapType1Store t0@@5 t1@@2 t2 m@@4 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@5 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@5 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@5 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@6 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@6 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@6 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 9)) (= (Ctor FieldType) 10)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 11))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#4| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#4| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o $f))
)))
(assert (forall ((a@@17 T@U) (b@@14 T@U) ) (! (= (|M2.State#Equal| a@@17 b@@14) (|Map#Equal| (M2.State.m a@@17) (M2.State.m b@@14)))
 :pattern ( (|M2.State#Equal| a@@17 b@@14))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@0| T@U) (|l#3@@0| T@U) (|l#4| T@U) (|$w#0@@0| T@U) ) (! (= (MapType0Select BoxType BoxType (|lambda#20| |l#0@@1| |l#1@@1| |l#2@@0| |l#3@@0| |l#4|) |$w#0@@0|) (ite (|Set#IsMember| |l#0@@1| |$w#0@@0|) (M2.__default.GetSt |$w#0@@0| |l#1@@1|) (M2.__default.OracleWF |l#2@@0| |$w#0@@0| (M2.__default.FindCert |$w#0@@0| |l#3@@0|) |l#4|)))
 :pattern ( (MapType0Select BoxType BoxType (|lambda#20| |l#0@@1| |l#1@@1| |l#2@@0| |l#3@@0| |l#4|) |$w#0@@0|))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($Heap@@14 T@U) (|st#0@@26| T@U) (|st'#0@@1| T@U) ) (!  (=> (and (or (|M2.__default.Union#canCall| |st#0@@26| |st'#0@@1|) (and (< 3 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |st#0@@26| Tclass.M2.State) ($IsAlloc DatatypeTypeType |st#0@@26| Tclass.M2.State $Heap@@14)) (and ($Is DatatypeTypeType |st'#0@@1| Tclass.M2.State) ($IsAlloc DatatypeTypeType |st'#0@@1| Tclass.M2.State $Heap@@14))))) ($IsGoodHeap $Heap@@14)) ($IsAlloc DatatypeTypeType (M2.__default.Union |st#0@@26| |st'#0@@1|) Tclass.M2.State $Heap@@14))
 :pattern ( ($IsAlloc DatatypeTypeType (M2.__default.Union |st#0@@26| |st'#0@@1|) Tclass.M2.State $Heap@@14))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($Heap@@15 T@U) (|p#0@@38| T@U) (|st#0@@27| T@U) ) (!  (=> (and (or (|M2.__default.Oracle#canCall| |p#0@@38| |st#0@@27|) (and (< 4 $FunctionContextHeight) (and (and ($IsBox |p#0@@38| Tclass.M2.Path) ($IsAllocBox |p#0@@38| Tclass.M2.Path $Heap@@15)) (and ($Is DatatypeTypeType |st#0@@27| Tclass.M2.State) ($IsAlloc DatatypeTypeType |st#0@@27| Tclass.M2.State $Heap@@15))))) ($IsGoodHeap $Heap@@15)) ($IsAllocBox (M2.__default.Oracle |p#0@@38| |st#0@@27|) Tclass.M2.Artifact $Heap@@15))
 :pattern ( ($IsAllocBox (M2.__default.Oracle |p#0@@38| |st#0@@27|) Tclass.M2.Artifact $Heap@@15))
))))
(assert (forall ((m@@7 T@U) ) (!  (or (= m@@7 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@7) k)))
 :pattern ( (|Map#Domain| m@@7))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |Map#Empty|) (exists ((v@@6 T@U) ) (|Set#IsMember| (|Map#Values| m@@8) v@@6)))
 :pattern ( (|Map#Values| m@@8))
)))
(assert (forall ((m@@9 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@9) item)  (and (|Set#IsMember| (|Map#Domain| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@9) item))
)))
(assert (forall ((m@@10 T@U) (v@@7 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@10) v@@7) (exists ((u@@5 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@10) u@@5) (= v@@7 (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@5)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@10) u@@5))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@5))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@10) v@@7))
)))
(assert (forall ((d@@11 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@11)) (DtRank d@@11))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@11)))
)))
(assert (forall ((bx@@10 T@U) (t@@11 T@U) ) (!  (=> ($IsBox bx@@10 (TSet t@@11)) (and (= ($Box SetType ($Unbox SetType bx@@10)) bx@@10) ($Is SetType ($Unbox SetType bx@@10) (TSet t@@11))))
 :pattern ( ($IsBox bx@@10 (TSet t@@11)))
)))
(assert (forall ((bx@@11 T@U) (t@@12 T@U) ) (!  (=> ($IsBox bx@@11 (TSeq t@@12)) (and (= ($Box SeqType ($Unbox SeqType bx@@11)) bx@@11) ($Is SeqType ($Unbox SeqType bx@@11) (TSeq t@@12))))
 :pattern ( ($IsBox bx@@11 (TSeq t@@12)))
)))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((|st#0@@28| T@U) (|st'#0@@2| T@U) ) (!  (=> (or (|M2.__default.Extends#canCall| |st#0@@28| |st'#0@@2|) (and (< 5 $FunctionContextHeight) (and ($Is DatatypeTypeType |st#0@@28| Tclass.M2.State) ($Is DatatypeTypeType |st'#0@@2| Tclass.M2.State)))) (and (and (and (|M2.__default.DomSt#canCall| |st#0@@28|) (|M2.__default.DomSt#canCall| |st'#0@@2|)) (=> (|Set#Subset| (M2.__default.DomSt |st#0@@28|) (M2.__default.DomSt |st'#0@@2|)) (and (forall ((|p#0@@39| T@U) ) (!  (=> ($IsBox |p#0@@39| Tclass.M2.Path) (and (|M2.__default.DomSt#canCall| |st#0@@28|) (=> (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#0@@39|) (and (|M2.__default.GetSt#canCall| |p#0@@39| |st'#0@@2|) (|M2.__default.GetSt#canCall| |p#0@@39| |st#0@@28|)))))
 :pattern ( (M2.__default.GetSt |p#0@@39| |st#0@@28|))
 :pattern ( (M2.__default.GetSt |p#0@@39| |st'#0@@2|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#0@@39|))
)) (=> (forall ((|p#0@@40| T@U) ) (!  (=> ($IsBox |p#0@@40| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#0@@40|) (= (M2.__default.GetSt |p#0@@40| |st'#0@@2|) (M2.__default.GetSt |p#0@@40| |st#0@@28|))))
 :pattern ( (M2.__default.GetSt |p#0@@40| |st#0@@28|))
 :pattern ( (M2.__default.GetSt |p#0@@40| |st'#0@@2|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#0@@40|))
)) (forall ((|p#1@@1| T@U) ) (!  (=> ($IsBox |p#1@@1| Tclass.M2.Path) (and (|M2.__default.DomSt#canCall| |st#0@@28|) (=> (not (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#1@@1|)) (and (|M2.__default.DomSt#canCall| |st'#0@@2|) (=> (|Set#IsMember| (M2.__default.DomSt |st'#0@@2|) |p#1@@1|) (and (|M2.__default.GetSt#canCall| |p#1@@1| |st'#0@@2|) (|M2.__default.Oracle#canCall| |p#1@@1| |st#0@@28|)))))))
 :pattern ( (M2.__default.Oracle |p#1@@1| |st#0@@28|))
 :pattern ( (M2.__default.GetSt |p#1@@1| |st'#0@@2|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st'#0@@2|) |p#1@@1|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#1@@1|))
)))))) (= (M2.__default.Extends |st#0@@28| |st'#0@@2|)  (and (and (|Set#Subset| (M2.__default.DomSt |st#0@@28|) (M2.__default.DomSt |st'#0@@2|)) (forall ((|p#0@@41| T@U) ) (!  (=> ($IsBox |p#0@@41| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#0@@41|) (= (M2.__default.GetSt |p#0@@41| |st'#0@@2|) (M2.__default.GetSt |p#0@@41| |st#0@@28|))))
 :pattern ( (M2.__default.GetSt |p#0@@41| |st#0@@28|))
 :pattern ( (M2.__default.GetSt |p#0@@41| |st'#0@@2|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#0@@41|))
))) (forall ((|p#1@@2| T@U) ) (!  (=> ($IsBox |p#1@@2| Tclass.M2.Path) (=> (and (not (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#1@@2|)) (|Set#IsMember| (M2.__default.DomSt |st'#0@@2|) |p#1@@2|)) (= (M2.__default.GetSt |p#1@@2| |st'#0@@2|) (M2.__default.Oracle |p#1@@2| |st#0@@28|))))
 :pattern ( (M2.__default.Oracle |p#1@@2| |st#0@@28|))
 :pattern ( (M2.__default.GetSt |p#1@@2| |st'#0@@2|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st'#0@@2|) |p#1@@2|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |st#0@@28|) |p#1@@2|))
))))))
 :pattern ( (M2.__default.Extends |st#0@@28| |st'#0@@2|))
))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|p#0@@42| T@U) (|st#0@@29| T@U) ) (!  (=> (or (|M2.__default.Oracle#canCall| (Lit BoxType |p#0@@42|) (Lit DatatypeTypeType |st#0@@29|)) (and (< 4 $FunctionContextHeight) (and ($IsBox |p#0@@42| Tclass.M2.Path) ($Is DatatypeTypeType |st#0@@29| Tclass.M2.State)))) (and (and (and (|M2.__default.WellFounded#canCall| (Lit BoxType |p#0@@42|)) (=> (U_2_bool (Lit boolType (bool_2_U (M2.__default.WellFounded (Lit BoxType |p#0@@42|))))) (and (|M2.__default.GetCert#canCall| (Lit BoxType |p#0@@42|)) (|M2.__default.OracleWF#canCall| (Lit BoxType |p#0@@42|) (Lit DatatypeTypeType (M2.__default.GetCert (Lit BoxType |p#0@@42|))) (Lit DatatypeTypeType |st#0@@29|))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (M2.__default.WellFounded (Lit BoxType |p#0@@42|)))))) (|M2.__default.OracleArbitrary#canCall| (Lit BoxType |p#0@@42|)))) (= (M2.__default.Oracle (Lit BoxType |p#0@@42|) (Lit DatatypeTypeType |st#0@@29|)) (ite (M2.__default.WellFounded (Lit BoxType |p#0@@42|)) (M2.__default.OracleWF ($LS $LZ) (Lit BoxType |p#0@@42|) (Lit DatatypeTypeType (M2.__default.GetCert (Lit BoxType |p#0@@42|))) (Lit DatatypeTypeType |st#0@@29|)) (M2.__default.OracleArbitrary (Lit BoxType |p#0@@42|))))))
 :weight 3
 :pattern ( (M2.__default.Oracle (Lit BoxType |p#0@@42|) (Lit DatatypeTypeType |st#0@@29|)))
))))
(assert (forall ((v@@8 T@U) (t0@@6 T@U) (t1@@3 T@U) ) (! (= ($Is MapType v@@8 (TMap t0@@6 t1@@3)) (forall ((bx@@12 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@8) bx@@12) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@8) bx@@12) t1@@3) ($IsBox bx@@12 t0@@6)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@8) bx@@12))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@8) bx@@12))
)))
 :pattern ( ($Is MapType v@@8 (TMap t0@@6 t1@@3)))
)))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) (d@@12 T@U) ) (!  (=> (|Set#IsMember| |a#6#1#0@@0| ($Box DatatypeTypeType d@@12)) (< (DtRank d@@12) (DtRank (|#M2.WFCertificate.Cert| |a#6#0#0@@0| |a#6#1#0@@0|))))
 :pattern ( (|Set#IsMember| |a#6#1#0@@0| ($Box DatatypeTypeType d@@12)) (|#M2.WFCertificate.Cert| |a#6#0#0@@0| |a#6#1#0@@0|))
)))
(assert (forall ((d@@13 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) ($Is DatatypeTypeType d@@13 Tclass.M2.WFCertificate)) ($IsAlloc DatatypeTypeType d@@13 Tclass.M2.WFCertificate $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType d@@13 Tclass.M2.WFCertificate $h@@2))
)))
(assert (= (Tag Tclass.M2.State) Tagclass.M2.State))
(assert (= (TagFamily Tclass.M2.State) tytagFamily$State))
(assert (= (Tag Tclass.M2.WFCertificate) Tagclass.M2.WFCertificate))
(assert (= (TagFamily Tclass.M2.WFCertificate) tytagFamily$WFCertificate))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@18 T@U) (|p#0@@43| T@U) (|cert#0@@16| T@U) (|st#0@@30| T@U) ) (!  (=> (or (|M2.__default.OracleWF#canCall| (Lit BoxType |p#0@@43|) (Lit DatatypeTypeType |cert#0@@16|) (Lit DatatypeTypeType |st#0@@30|)) (and (< 3 $FunctionContextHeight) (and (and (and ($IsBox |p#0@@43| Tclass.M2.Path) ($Is DatatypeTypeType |cert#0@@16| Tclass.M2.WFCertificate)) ($Is DatatypeTypeType |st#0@@30| Tclass.M2.State)) (U_2_bool (Lit boolType (bool_2_U (M2.__default.CheckWellFounded ($LS $LZ) (Lit BoxType |p#0@@43|) (Lit DatatypeTypeType |cert#0@@16|)))))))) (and (and (and (and (|M2.__default.LocInv__Cmd#canCall| (Lit BoxType |p#0@@43|)) (|M2.__default.LocInv__Deps#canCall| (Lit BoxType |p#0@@43|))) (|M2.__default.LocInv__Exp#canCall| (Lit BoxType |p#0@@43|))) (let ((|e#2| (M2.__default.LocInv__Exp (Lit BoxType |p#0@@43|))))
(let ((|deps#2| (M2.__default.LocInv__Deps (Lit BoxType |p#0@@43|))))
(let ((|cmd#2| (M2.__default.LocInv__Cmd (Lit BoxType |p#0@@43|))))
 (and (|M2.__default.CollectDependencies#canCall| (Lit BoxType |p#0@@43|) (Lit DatatypeTypeType |cert#0@@16|) |deps#2| (Lit DatatypeTypeType |st#0@@30|)) (|M2.__default.RunTool#canCall| |cmd#2| (M2.__default.CollectDependencies ($LS $ly@@18) (Lit BoxType |p#0@@43|) (Lit DatatypeTypeType |cert#0@@16|) |deps#2| (Lit DatatypeTypeType |st#0@@30|)) |e#2|)))))) (= (M2.__default.OracleWF ($LS $ly@@18) (Lit BoxType |p#0@@43|) (Lit DatatypeTypeType |cert#0@@16|) (Lit DatatypeTypeType |st#0@@30|)) (let ((|e#2@@0| (M2.__default.LocInv__Exp (Lit BoxType |p#0@@43|))))
(let ((|deps#2@@0| (M2.__default.LocInv__Deps (Lit BoxType |p#0@@43|))))
(let ((|cmd#2@@0| (M2.__default.LocInv__Cmd (Lit BoxType |p#0@@43|))))
(M2.__default.RunTool |cmd#2@@0| (M2.__default.CollectDependencies ($LS $ly@@18) (Lit BoxType |p#0@@43|) (Lit DatatypeTypeType |cert#0@@16|) |deps#2@@0| (Lit DatatypeTypeType |st#0@@30|)) |e#2@@0|)))))))
 :weight 3
 :pattern ( (M2.__default.OracleWF ($LS $ly@@18) (Lit BoxType |p#0@@43|) (Lit DatatypeTypeType |cert#0@@16|) (Lit DatatypeTypeType |st#0@@30|)))
))))
(assert (forall ((a@@18 T@U) (b@@15 T@U) ) (! (= (|Set#Equal| a@@18 b@@15) (forall ((o@@5 T@U) ) (! (= (|Set#IsMember| a@@18 o@@5) (|Set#IsMember| b@@15 o@@5))
 :pattern ( (|Set#IsMember| a@@18 o@@5))
 :pattern ( (|Set#IsMember| b@@15 o@@5))
)))
 :pattern ( (|Set#Equal| a@@18 b@@15))
)))
(assert (forall ((d@@14 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_System.Tuple2.___hMake2_q d@@14) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@14 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@14 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@3))
)))) ($IsAllocBox (_System.Tuple2._0 d@@14) |_System._tuple#2$T0@@6| $h@@3))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@14) |_System._tuple#2$T0@@6| $h@@3))
)))
(assert (forall ((d@@15 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_System.Tuple2.___hMake2_q d@@15) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@4)
 :pattern ( ($IsAlloc DatatypeTypeType d@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@4))
)))) ($IsAllocBox (_System.Tuple2._1 d@@15) |_System._tuple#2$T1@@7| $h@@4))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@15) |_System._tuple#2$T1@@7| $h@@4))
)))
(assert (forall ((d@@16 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (M2.WFCertificate.Cert_q d@@16) ($IsAlloc DatatypeTypeType d@@16 Tclass.M2.WFCertificate $h@@5))) ($IsAllocBox (M2.WFCertificate.p d@@16) Tclass.M2.Path $h@@5))
 :pattern ( ($IsAllocBox (M2.WFCertificate.p d@@16) Tclass.M2.Path $h@@5))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((|a#3#0#0@@0| T@U) (|a#3#1#0@@0| T@U) ) (! (= (|#M2.WFCertificate.Cert| (Lit BoxType |a#3#0#0@@0|) (Lit SetType |a#3#1#0@@0|)) (Lit DatatypeTypeType (|#M2.WFCertificate.Cert| |a#3#0#0@@0| |a#3#1#0@@0|)))
 :pattern ( (|#M2.WFCertificate.Cert| (Lit BoxType |a#3#0#0@@0|) (Lit SetType |a#3#1#0@@0|)))
)))
(assert (forall ((|a#10#0#0| T@U) ) (! (= (|#M2.State.StateCons| (Lit MapType |a#10#0#0|)) (Lit DatatypeTypeType (|#M2.State.StateCons| |a#10#0#0|)))
 :pattern ( (|#M2.State.StateCons| (Lit MapType |a#10#0#0|)))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert (forall ((|a#12#0#0| T@U) (d@@17 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#12#0#0|) ($Box DatatypeTypeType d@@17)) (< (DtRank d@@17) (DtRank (|#M2.State.StateCons| |a#12#0#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#12#0#0|) ($Box DatatypeTypeType d@@17)) (|#M2.State.StateCons| |a#12#0#0|))
)))
(assert (forall ((s@@1 T@U) ) (!  (=> (= (|Seq#Length| s@@1) 0) (= s@@1 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert  (=> (<= 4 $FunctionContextHeight) (forall (($ly@@19 T@U) (|sts#0@@3| T@U) ) (!  (=> (or (|M2.__default.Combine#canCall| |sts#0@@3|) (and (< 4 $FunctionContextHeight) (and ($Is SetType |sts#0@@3| (TSet Tclass.M2.State)) (not (|Set#Equal| |sts#0@@3| |Set#Empty|))))) ($Is DatatypeTypeType (M2.__default.Combine $ly@@19 |sts#0@@3|) Tclass.M2.State))
 :pattern ( (M2.__default.Combine $ly@@19 |sts#0@@3|))
))))
(assert (forall ((d@@18 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (M2.WFCertificate.Cert_q d@@18) ($IsAlloc DatatypeTypeType d@@18 Tclass.M2.WFCertificate $h@@6))) ($IsAlloc SetType (M2.WFCertificate.certs d@@18) (TSet Tclass.M2.WFCertificate) $h@@6))
 :pattern ( ($IsAlloc SetType (M2.WFCertificate.certs d@@18) (TSet Tclass.M2.WFCertificate) $h@@6))
)))
(assert (forall ((h@@4 T@U) (v@@9 T@U) ) (! ($IsAlloc charType v@@9 TChar h@@4)
 :pattern ( ($IsAlloc charType v@@9 TChar h@@4))
)))
(assert (forall ((v@@10 T@U) (t0@@7 T@U) ) (! (= ($Is SeqType v@@10 (TSeq t0@@7)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@10))) ($IsBox (|Seq#Index| v@@10 i@@0) t0@@7))
 :pattern ( (|Seq#Index| v@@10 i@@0))
)))
 :pattern ( ($Is SeqType v@@10 (TSeq t0@@7)))
)))
(assert (forall ((m@@11 T@U) ) (!  (or (= m@@11 |Map#Empty|) (exists ((k@@0 T@U) (v@@11 T@U) ) (|Set#IsMember| (|Map#Items| m@@11) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@11)))))
 :pattern ( (|Map#Items| m@@11))
)))
(assert (forall ((s@@2 T@U) (i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| s@@2))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@2 i@@1))) (|Seq#Rank| s@@2)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@2 i@@1))))
)))
(assert (forall ((v@@12 T@U) (t0@@8 T@U) (t1@@4 T@U) ) (!  (=> ($Is MapType v@@12 (TMap t0@@8 t1@@4)) (and (and ($Is SetType (|Map#Domain| v@@12) (TSet t0@@8)) ($Is SetType (|Map#Values| v@@12) (TSet t1@@4))) ($Is SetType (|Map#Items| v@@12) (TSet (Tclass._System.Tuple2 t0@@8 t1@@4)))))
 :pattern ( ($Is MapType v@@12 (TMap t0@@8 t1@@4)))
)))
(assert (forall ((v@@13 T@U) ) (! ($Is charType v@@13 TChar)
 :pattern ( ($Is charType v@@13 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |sts#0@@4| () T@U)
(declare-fun |st#0_0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |##sts#0_1@0| () T@U)
(declare-fun |##st'#0_0@0| () T@U)
(declare-fun |parent#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap@@16 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let ((anon11_Else_correct true))
(let ((anon11_Then_correct true))
(let ((anon4_correct  (=> (=> (|Set#IsMember| |sts#0@@4| ($Box DatatypeTypeType |st#0_0@0|)) (=> (not (|Set#Equal| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|)))) (and (and (|$IsA#M2.State| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (|$IsA#M2.State| (M2.__default.Union |st#0_0@0| (M2.__default.Combine ($LS $LZ) (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|))))))) (and (|M2.__default.Combine#canCall| |sts#0@@4|) (and (|M2.__default.Combine#canCall| (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|)))) (|M2.__default.Union#canCall| |st#0_0@0| (M2.__default.Combine ($LS $LZ) (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|)))))))))) (=> (and (|Set#IsMember| |sts#0@@4| ($Box DatatypeTypeType |st#0_0@0|)) (or (|Set#Equal| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|))) (|M2.State#Equal| (M2.__default.Combine ($LS $LZ) |sts#0@@4|) (M2.__default.Union |st#0_0@0| (M2.__default.Combine ($LS $LZ) (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|)))))))) (and (=> (= (ControlFlow 0 9) 7) anon11_Then_correct) (=> (= (ControlFlow 0 9) 8) anon11_Else_correct))))))
(let ((anon10_Else_correct  (=> (and (|Set#Equal| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|))) (= (ControlFlow 0 12) 9)) anon4_correct)))
(let ((anon10_Then_correct  (=> (and (and (and (and (not (|Set#Equal| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|)))) ($IsAlloc SetType |sts#0@@4| (TSet Tclass.M2.State) $Heap@0)) (and (not (|Set#Equal| |sts#0@@4| |Set#Empty|)) (|M2.__default.Combine#canCall| |sts#0@@4|))) (and (and (M2.State.StateCons_q (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) ($IsAlloc DatatypeTypeType |st#0_0@0| Tclass.M2.State $Heap@0)) (and (= |##sts#0_1@0| (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|)))) ($IsAlloc SetType |##sts#0_1@0| (TSet Tclass.M2.State) $Heap@0)))) (and (and (and (not (|Set#Equal| |##sts#0_1@0| |Set#Empty|)) (|M2.__default.Combine#canCall| (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|))))) (and (M2.State.StateCons_q (M2.__default.Combine ($LS $LZ) (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|))))) (= |##st'#0_0@0| (M2.__default.Combine ($LS $LZ) (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|))))))) (and (and ($IsAlloc DatatypeTypeType |##st'#0_0@0| Tclass.M2.State $Heap@0) (|M2.__default.Union#canCall| |st#0_0@0| (M2.__default.Combine ($LS $LZ) (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|)))))) (and (M2.State.StateCons_q (M2.__default.Union |st#0_0@0| (M2.__default.Combine ($LS $LZ) (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_0@0|)))))) (= (ControlFlow 0 11) 9))))) anon4_correct)))
(let ((anon9_Then_correct  (=> (|Set#IsMember| |sts#0@@4| ($Box DatatypeTypeType |st#0_0@0|)) (and (=> (= (ControlFlow 0 13) 11) anon10_Then_correct) (=> (= (ControlFlow 0 13) 12) anon10_Else_correct)))))
(let ((anon9_Else_correct  (=> (and (not (|Set#IsMember| |sts#0@@4| ($Box DatatypeTypeType |st#0_0@0|))) (= (ControlFlow 0 10) 9)) anon4_correct)))
(let ((anon8_Then_correct  (=> ($Is DatatypeTypeType |st#0_0@0| Tclass.M2.State) (and (=> (= (ControlFlow 0 14) 13) anon9_Then_correct) (=> (= (ControlFlow 0 14) 10) anon9_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 2) (- 0 5)) (=> false (=> (|M2.__default.ValidState#canCall| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (or (M2.__default.ValidState (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (forall ((|p#3@@1| T@U) ) (!  (=> ($IsBox |p#3@@1| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.DomSt (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)) |p#3@@1|) (M2.__default.WellFounded |p#3@@1|)))
 :pattern ( (M2.__default.WellFounded |p#3@@1|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)) |p#3@@1|))
)))))) (=> (=> false (=> (|M2.__default.ValidState#canCall| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (or (M2.__default.ValidState (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (forall ((|p#3@@2| T@U) ) (!  (=> ($IsBox |p#3@@2| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.DomSt (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)) |p#3@@2|) (M2.__default.WellFounded |p#3@@2|)))
 :pattern ( (M2.__default.WellFounded |p#3@@2|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)) |p#3@@2|))
))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> false (=> (|M2.__default.Extends#canCall| |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (or (M2.__default.Extends |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (|Set#Subset| (M2.__default.DomSt |parent#0|) (M2.__default.DomSt (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|))))))) (=> (=> false (=> (|M2.__default.Extends#canCall| |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (or (M2.__default.Extends |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (|Set#Subset| (M2.__default.DomSt |parent#0|) (M2.__default.DomSt (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> false (=> (|M2.__default.Extends#canCall| |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (or (M2.__default.Extends |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (forall ((|p#4| T@U) ) (!  (=> ($IsBox |p#4| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.DomSt |parent#0|) |p#4|) (= (M2.__default.GetSt |p#4| (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)) (M2.__default.GetSt |p#4| |parent#0|))))
 :pattern ( (M2.__default.GetSt |p#4| |parent#0|))
 :pattern ( (M2.__default.GetSt |p#4| (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |parent#0|) |p#4|))
)))))) (=> (=> false (=> (|M2.__default.Extends#canCall| |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (or (M2.__default.Extends |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (forall ((|p#4@@0| T@U) ) (!  (=> ($IsBox |p#4@@0| Tclass.M2.Path) (=> (|Set#IsMember| (M2.__default.DomSt |parent#0|) |p#4@@0|) (= (M2.__default.GetSt |p#4@@0| (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)) (M2.__default.GetSt |p#4@@0| |parent#0|))))
 :pattern ( (M2.__default.GetSt |p#4@@0| |parent#0|))
 :pattern ( (M2.__default.GetSt |p#4@@0| (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |parent#0|) |p#4@@0|))
))))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> false (=> (|M2.__default.Extends#canCall| |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (or (M2.__default.Extends |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)) (forall ((|p#5| T@U) ) (!  (=> ($IsBox |p#5| Tclass.M2.Path) (=> (and (not (|Set#IsMember| (M2.__default.DomSt |parent#0|) |p#5|)) (|Set#IsMember| (M2.__default.DomSt (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)) |p#5|)) (= (M2.__default.GetSt |p#5| (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)) (M2.__default.Oracle |p#5| |parent#0|))))
 :pattern ( (M2.__default.Oracle |p#5| |parent#0|))
 :pattern ( (M2.__default.GetSt |p#5| (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt (M2.__default.Combine ($LS ($LS $LZ)) |sts#0@@4|)) |p#5|))
 :pattern ( (|Set#IsMember| (M2.__default.DomSt |parent#0|) |p#5|))
))))))))))))))
(let ((anon8_Else_correct  (=> (and (forall ((|st#0_1| T@U) ) (!  (=> (and ($Is DatatypeTypeType |st#0_1| Tclass.M2.State) (and (|Set#IsMember| |sts#0@@4| ($Box DatatypeTypeType |st#0_1|)) (or (|Set#Equal| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_1|))) (|M2.State#Equal| (M2.__default.Combine ($LS $LZ) |sts#0@@4|) (M2.__default.Union |st#0_1| (M2.__default.Combine ($LS $LZ) (|Set#Difference| |sts#0@@4| (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_1|))))))))) (M2.__default.Extends |parent#0| (M2.__default.Combine ($LS $LZ) |sts#0@@4|)))
 :pattern ( (|Set#UnionOne| |Set#Empty| ($Box DatatypeTypeType |st#0_1|)))
 :pattern ( (|Set#IsMember| |sts#0@@4| ($Box DatatypeTypeType |st#0_1|)))
)) (= (ControlFlow 0 6) 2)) GeneratedUnifiedExit_correct)))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#4| null $Heap@@16 alloc false)) (|$IsA#M2.State| |parent#0|)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@16 $Heap@0) (forall ((|$ih#sts0#0| T@U) ) (!  (=> (and (and ($Is SetType |$ih#sts0#0| (TSet Tclass.M2.State)) (and (not (|Set#Equal| |$ih#sts0#0| |Set#Empty|)) (forall ((|st#2| T@U) ) (!  (=> ($Is DatatypeTypeType |st#2| Tclass.M2.State) (and (=> (|Set#IsMember| |$ih#sts0#0| ($Box DatatypeTypeType |st#2|)) (M2.__default.ValidState |st#2|)) (=> (|Set#IsMember| |$ih#sts0#0| ($Box DatatypeTypeType |st#2|)) (M2.__default.Extends |parent#0| |st#2|))))
 :pattern ( (M2.__default.Extends |parent#0| |st#2|))
 :pattern ( (M2.__default.ValidState |st#2|))
 :pattern ( (|Set#IsMember| |$ih#sts0#0| ($Box DatatypeTypeType |st#2|)))
)))) (and (|Set#Subset| |$ih#sts0#0| |sts#0@@4|) (not (|Set#Subset| |sts#0@@4| |$ih#sts0#0|)))) (and (M2.__default.ValidState (M2.__default.Combine ($LS $LZ) |$ih#sts0#0|)) (M2.__default.Extends |parent#0| (M2.__default.Combine ($LS $LZ) |$ih#sts0#0|))))
 :pattern ( (M2.__default.Combine ($LS $LZ) |$ih#sts0#0|))
)))) (and (=> (= (ControlFlow 0 15) 14) anon8_Then_correct) (=> (= (ControlFlow 0 15) 6) anon8_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@16) ($IsHeapAnchor $Heap@@16)) (and ($Is SetType |sts#0@@4| (TSet Tclass.M2.State)) ($IsAlloc SetType |sts#0@@4| (TSet Tclass.M2.State) $Heap@@16))) (=> (and (and (and ($Is DatatypeTypeType |parent#0| Tclass.M2.State) ($IsAlloc DatatypeTypeType |parent#0| Tclass.M2.State $Heap@@16)) (|$IsA#M2.State| |parent#0|)) (and (and (= 6 $FunctionContextHeight) (not (|Set#Equal| |sts#0@@4| |Set#Empty|))) (and (forall ((|st#1@@0| T@U) ) (!  (=> ($Is DatatypeTypeType |st#1@@0| Tclass.M2.State) (and (=> (|Set#IsMember| |sts#0@@4| ($Box DatatypeTypeType |st#1@@0|)) (M2.__default.ValidState |st#1@@0|)) (=> (|Set#IsMember| |sts#0@@4| ($Box DatatypeTypeType |st#1@@0|)) (M2.__default.Extends |parent#0| |st#1@@0|))))
 :pattern ( (M2.__default.Extends |parent#0| |st#1@@0|))
 :pattern ( (M2.__default.ValidState |st#1@@0|))
 :pattern ( (|Set#IsMember| |sts#0@@4| ($Box DatatypeTypeType |st#1@@0|)))
)) (= (ControlFlow 0 16) 15)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
