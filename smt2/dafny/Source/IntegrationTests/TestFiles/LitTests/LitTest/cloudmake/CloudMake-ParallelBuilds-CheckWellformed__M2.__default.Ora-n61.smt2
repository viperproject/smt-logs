(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U) Bool)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 () Int)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (T@U) Bool)
(declare-fun $generated@@20 (T@U) Bool)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 () Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@38 (T@U T@U T@U) Bool)
(declare-fun $generated@@39 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@46 (T@T T@U T@U) Bool)
(declare-fun $generated@@57 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@61 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T) T@T)
(declare-fun $generated@@63 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@64 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@65 (T@T) T@T)
(declare-fun $generated@@66 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert ($generated $generated@@0))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@24 T@U) ($generated@@25 T@U) ) (!  (=> (or ($generated@@20 $generated@@25) (and (< 0 $generated@@17) (and ($generated@@19 $generated@@24) ($generated@@21 $generated@@25 $generated@@0)))) (and $generated@@22 (= ($generated@@18 $generated@@25) (let (($generated@@26 $generated@@23))
$generated@@26))))
 :pattern ( ($generated@@18 $generated@@25) ($generated@@19 $generated@@24))
))))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 $generated@@28) $generated@@28)
 :pattern ( ($generated@@27 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 ($generated@@30 $generated@@33 $generated@@32)) $generated@@32)
 :pattern ( ($generated@@30 $generated@@33 $generated@@32))
)))
(assert (= ($generated@@1 $generated@@34) 3))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> (or ($generated@@20 ($generated@@27 $generated@@34 $generated@@36)) (and (< 0 $generated@@17) (and ($generated@@19 $generated@@35) ($generated@@21 $generated@@36 $generated@@0)))) (and $generated@@22 (= ($generated@@18 ($generated@@27 $generated@@34 $generated@@36)) (let (($generated@@37 $generated@@23))
$generated@@37))))
 :weight 3
 :pattern ( ($generated@@18 ($generated@@27 $generated@@34 $generated@@36)) ($generated@@19 $generated@@35))
))))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@38 ($generated@@31 $generated@@43 $generated@@40) $generated@@41 $generated@@42) ($generated@@39 $generated@@43 $generated@@40 $generated@@41 $generated@@42))
 :pattern ( ($generated@@38 ($generated@@31 $generated@@43 $generated@@40) $generated@@41 $generated@@42))
)))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@45 T@U) ) (!  (=> (or ($generated@@20 $generated@@45) (and (< 0 $generated@@17) ($generated@@21 $generated@@45 $generated@@0))) ($generated@@21 ($generated@@18 $generated@@45) $generated@@44))
 :pattern ( ($generated@@18 $generated@@45))
))))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@21 ($generated@@31 $generated@@49 $generated@@47) $generated@@48) ($generated@@46 $generated@@49 $generated@@47 $generated@@48))
 :pattern ( ($generated@@21 ($generated@@31 $generated@@49 $generated@@47) $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (!  (=> ($generated $generated@@50) (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (!  (=> ($generated@@21 $generated@@52 $generated@@50) ($generated@@38 $generated@@52 $generated@@50 $generated@@51))
 :pattern ( ($generated@@38 $generated@@52 $generated@@50 $generated@@51))
)))
 :pattern ( ($generated $generated@@50))
)))
(assert  (=> $generated@@22 (and ($generated@@21 $generated@@23 $generated@@44) ($generated@@6 ($generated@@27 $generated@@2 ($generated@@5 true))))))
(assert  (=> (<= 0 $generated@@17) (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> (and (or ($generated@@20 $generated@@54) (and (< 0 $generated@@17) (and ($generated@@21 $generated@@54 $generated@@0) ($generated@@38 $generated@@54 $generated@@0 $generated@@53)))) ($generated@@19 $generated@@53)) ($generated@@38 ($generated@@18 $generated@@54) $generated@@44 $generated@@53))
 :pattern ( ($generated@@38 ($generated@@18 $generated@@54) $generated@@44 $generated@@53))
))))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@30 $generated@@56 ($generated@@31 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@31 $generated@@56 $generated@@55))
)))
(assert  (and (and (and (and (and (and (and (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@57 $generated@@67 $generated@@68 $generated@@69 ($generated@@63 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@72 $generated@@73) $generated@@70)
 :weight 0
)) (and (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@79 $generated@@81) (= ($generated@@57 $generated@@74 $generated@@75 $generated@@76 ($generated@@63 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@57 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@57 $generated@@83 $generated@@84 $generated@@85 ($generated@@63 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@57 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)))) (= ($generated@@1 $generated@@58) 4)) (= ($generated@@1 $generated@@59) 5)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@61 $generated@@92 $generated@@93 ($generated@@64 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@94) $generated@@96) $generated@@94)
 :weight 0
))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@101 $generated@@102) (= ($generated@@61 $generated@@97 $generated@@98 ($generated@@64 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@99) $generated@@102) ($generated@@61 $generated@@97 $generated@@98 $generated@@100 $generated@@102)))
 :weight 0
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (= ($generated@@1 ($generated@@62 $generated@@103 $generated@@104)) 6))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@65 ($generated@@62 $generated@@105 $generated@@106)) $generated@@105)
 :pattern ( ($generated@@62 $generated@@105 $generated@@106))
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@66 ($generated@@62 $generated@@107 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@62 $generated@@107 $generated@@108))
))))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 Bool) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@6 ($generated@@57 $generated@@58 $generated@@59 $generated@@2 ($generated@@60 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))  (=> (and (or (not (= $generated@@113 $generated@@109)) (not true)) ($generated@@6 ($generated@@30 $generated@@2 ($generated@@61 $generated@@59 $generated@@34 ($generated@@61 $generated@@58 ($generated@@62 $generated@@59 $generated@@34) $generated@@110 $generated@@113) $generated@@111)))) $generated@@112))
 :pattern ( ($generated@@57 $generated@@58 $generated@@59 $generated@@2 ($generated@@60 $generated@@109 $generated@@110 $generated@@111 $generated@@112) $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@T) ) (! (= ($generated@@31 $generated@@116 ($generated@@27 $generated@@116 $generated@@115)) ($generated@@27 $generated@@34 ($generated@@31 $generated@@116 $generated@@115)))
 :pattern ( ($generated@@31 $generated@@116 ($generated@@27 $generated@@116 $generated@@115)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@124  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@6 ($generated@@27 $generated@@2 ($generated@@5 true))))))
(let (($generated@@125  (=> (and (not (and ($generated@@21 $generated@@117 $generated@@44) ($generated@@38 $generated@@117 $generated@@44 $generated@@118))) (= (ControlFlow 0 5) 3)) $generated@@124)))
(let (($generated@@126  (=> (and (and ($generated@@21 $generated@@117 $generated@@44) ($generated@@38 $generated@@117 $generated@@44 $generated@@118)) (= (ControlFlow 0 4) 3)) $generated@@124)))
(let (($generated@@127 true))
(let (($generated@@128  (=> (= $generated@@119 ($generated@@60 $generated@@120 $generated@@118 $generated@@121 false)) (and (and (=> (= (ControlFlow 0 6) 1) $generated@@127) (=> (= (ControlFlow 0 6) 4) $generated@@126)) (=> (= (ControlFlow 0 6) 5) $generated@@125)))))
(let (($generated@@129  (=> (and (and (and ($generated@@19 $generated@@118) ($generated@@122 $generated@@118)) ($generated@@21 $generated@@123 $generated@@0)) (and (= 0 $generated@@17) (= (ControlFlow 0 7) 6))) $generated@@128)))
$generated@@129)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
