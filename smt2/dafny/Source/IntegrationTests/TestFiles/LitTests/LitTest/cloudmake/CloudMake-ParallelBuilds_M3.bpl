// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds-@PROC@.smt2 /normalizeNames:0 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2
     && TagFamily(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == tytagFamily$_#Func2);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx) } 
  Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx)
     == Set#IsMember(rd[heap, bx0, bx1], bx));

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r)) } 
            r != null && Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hPartialFunc2
     && TagFamily(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#PartialFunc2);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hTotalFunc2
     && TagFamily(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#TotalFunc2);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc3: TyTag;

// Tclass._System.___hFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hFunc3
     && TagFamily(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#Func3);

function Tclass._System.___hFunc3_0(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_0(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hFunc3_1(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_1(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hFunc3_2(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_2(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hFunc3_3(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_3(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)));

function Handle3([Heap,Box,Box,Box]Box, [Heap,Box,Box,Box]bool, [Heap,Box,Box,Box]Set)
   : HandleType;

function Apply3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Box;

function Requires3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : bool;

function Reads3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)
     == h[heap, bx0, bx1, bx2]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  r[heap, bx0, bx1, bx2]
     ==> Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx: Box :: 
  { Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx) } 
  Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2], bx));

function {:inline} Requires3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

function {:inline} Reads3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// empty-reads property for Reads3 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     ==> (Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
       <==> Set#Equal(Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2), Set#Empty(): Set)));

// empty-reads property for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
     ==> Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, u0: Ty, u1: Ty, u2: Ty, u3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)), $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, t3) } { $IsBox(bx, u3) } 
        $IsBox(bx, t3) ==> $IsBox(bx, u3))
     ==> $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box :: 
        { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
          { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r)) } 
            r != null && Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsAllocBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3, h)));

function Tclass._System.___hPartialFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc3: TyTag;

// Tclass._System.___hPartialFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hPartialFunc3
     && TagFamily(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#PartialFunc3);

function Tclass._System.___hPartialFunc3_0(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_0(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc3_1(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_1(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc3_2(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_2(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc3_3(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_3(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Set#Equal(Reads3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hTotalFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc3: TyTag;

// Tclass._System.___hTotalFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hTotalFunc3
     && TagFamily(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#TotalFunc3);

function Tclass._System.___hTotalFunc3_0(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_0(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc3_1(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_1(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc3_2(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_2(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc3_3(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_3(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Requires3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc4: TyTag;

// Tclass._System.___hFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hFunc4
     && TagFamily(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#Func4);

function Tclass._System.___hFunc4_0(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_0(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hFunc4_1(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_1(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hFunc4_2(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_2(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hFunc4_3(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_3(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hFunc4_4(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_4(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

function Handle4([Heap,Box,Box,Box,Box]Box, [Heap,Box,Box,Box,Box]bool, [Heap,Box,Box,Box,Box]Set)
   : HandleType;

function Apply4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Box;

function Requires4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : bool;

function Reads4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)
     == h[heap, bx0, bx1, bx2, bx3]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  r[heap, bx0, bx1, bx2, bx3]
     ==> Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx: Box :: 
  { Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx) } 
  Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3], bx));

function {:inline} Requires4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

function {:inline} Reads4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// empty-reads property for Reads4 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     ==> (Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
       <==> Set#Equal(Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)));

// empty-reads property for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
     ==> Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)), $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, t4) } { $IsBox(bx, u4) } 
        $IsBox(bx, t4) ==> $IsBox(bx, u4))
     ==> $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
        { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
          { Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsAllocBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4, h)));

function Tclass._System.___hPartialFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc4: TyTag;

// Tclass._System.___hPartialFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hPartialFunc4
     && TagFamily(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#PartialFunc4);

function Tclass._System.___hPartialFunc4_0(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_0(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc4_1(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_1(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc4_2(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_2(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc4_3(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_3(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc4_4(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_4(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Set#Equal(Reads4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hTotalFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc4: TyTag;

// Tclass._System.___hTotalFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hTotalFunc4
     && TagFamily(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#TotalFunc4);

function Tclass._System.___hTotalFunc4_0(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_0(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc4_1(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_1(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc4_2(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_2(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc4_3(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_3(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc4_4(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_4(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Requires4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc5: TyTag;

// Tclass._System.___hFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == Tagclass._System.___hFunc5
     && TagFamily(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == tytagFamily$_#Func5);

function Tclass._System.___hFunc5_0(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_0(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hFunc5_1(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_1(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hFunc5_2(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_2(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hFunc5_3(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_3(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hFunc5_4(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_4(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hFunc5_5(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_5(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

function Handle5([Heap,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : Box;

function Requires5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : bool;

function Reads5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Apply5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4) } 
  Apply5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4)
     == h[heap, bx0, bx1, bx2, bx3, bx4]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Requires5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4) } 
  r[heap, bx0, bx1, bx2, bx3, bx4]
     ==> Requires5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx: Box :: 
  { Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4), 
      bx) } 
  Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4], bx));

function {:inline} Requires5#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box)
   : bool
{
  true
}

function {:inline} Reads5#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box)
   : bool
{
  true
}

// frame axiom for Reads5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Reads5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Apply5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Apply5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// empty-reads property for Reads5 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), $IsGoodHeap(heap) } 
    { Reads5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
     ==> (Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set)));

// empty-reads property for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Requires5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), $IsGoodHeap(heap) } 
    { Requires5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set)
     ==> Requires5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty :: 
  { $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5)) } 
  $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
      { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
         ==> $IsBox(Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), t5)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty :: 
  { $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5)), $Is(f, Tclass._System.___hFunc5(u0, u1, u2, u3, u4, u5)) } 
  $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, t5) } { $IsBox(bx, u5) } 
        $IsBox(bx, t5) ==> $IsBox(bx, u5))
     ==> $Is(f, Tclass._System.___hFunc5(u0, u1, u2, u3, u4, u5)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
        { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
          { Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
      { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
         ==> $IsAllocBox(Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), t5, h)));

function Tclass._System.___hPartialFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc5: TyTag;

// Tclass._System.___hPartialFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == Tagclass._System.___hPartialFunc5
     && TagFamily(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == tytagFamily$_#PartialFunc5);

function Tclass._System.___hPartialFunc5_0(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_0(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc5_1(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_1(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc5_2(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_2(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc5_3(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_3(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc5_4(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_4(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc5_5(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_5(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

// $Is axiom for subset type _System._#PartialFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
           ==> Set#Equal(Reads5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0, x4#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h));

function Tclass._System.___hTotalFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc5: TyTag;

// Tclass._System.___hTotalFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == Tagclass._System.___hTotalFunc5
     && TagFamily(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == tytagFamily$_#TotalFunc5);

function Tclass._System.___hTotalFunc5_0(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_0(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc5_1(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_1(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc5_2(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_2(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc5_3(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_3(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc5_4(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_4(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc5_5(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_5(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

// $Is axiom for subset type _System._#TotalFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
           ==> Requires5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0, x4#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h));

const unique class.M3.__default: ClassName;

// function declaration for M3._default.Union
function M3.__default.Union(st#0: DatatypeType, st'#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.Union
axiom 4 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType, st'#0: DatatypeType :: 
    { M3.__default.Union(st#0, st'#0) } 
    M3.__default.Union#canCall(st#0, st'#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(st#0, Tclass.M3.State())
           && $Is(st'#0, Tclass.M3.State()))
       ==> (var result#0 := M3.__default.Union(st#0, st'#0); 
          Set#Equal(M3.__default.DomSt(result#0), 
              Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)))
             && (forall p#0: DatatypeType :: 
              { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
                { M3.__default.GetSt(p#0, result#0) } 
                { Set#IsMember(M3.__default.DomSt(result#0), $Box(p#0)) } 
              $Is(p#0, Tclass.M3.Path())
                 ==> 
                Set#IsMember(M3.__default.DomSt(result#0), $Box(p#0))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#0, result#0), 
                  M3.__default.GetSt(p#0, (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) then st#0 else st'#0)))))
         && $Is(M3.__default.Union(st#0, st'#0), Tclass.M3.State()));
// definition axiom for M3.__default.Union (revealed)
axiom {:id "id2220"} 4 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType, st'#0: DatatypeType :: 
    { M3.__default.Union(st#0, st'#0) } 
    M3.__default.Union#canCall(st#0, st'#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(st#0, Tclass.M3.State())
           && $Is(st'#0, Tclass.M3.State()))
       ==> (forall p#1: DatatypeType :: 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) } 
            { Set#IsMember(Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)), $Box(p#1)) } 
          $Is(p#1, Tclass.M3.Path())
             ==> M3.__default.DomSt#canCall(st#0)
               && M3.__default.DomSt#canCall(st'#0)
               && (Set#IsMember(Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)), $Box(p#1))
                 ==> M3.__default.DomSt#canCall(st#0)
                   && M3.__default.GetSt#canCall(p#1, (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) then st#0 else st'#0))))
         && M3.__default.Union(st#0, st'#0)
           == #M3.State.StateCons(Map#Glue(Set#FromBoogieMap((lambda $w#0: Box :: 
                  $IsBox($w#0, Tclass.M3.Path())
                     && Set#IsMember(Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)), $w#0))), 
              (lambda $w#0: Box :: 
                $Box(M3.__default.GetSt($Unbox($w#0): DatatypeType, 
                    (if Set#IsMember(M3.__default.DomSt(st#0), $w#0) then st#0 else st'#0)))), 
              TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))));
// definition axiom for M3.__default.Union for all literals (revealed)
axiom {:id "id2221"} 4 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType, st'#0: DatatypeType :: 
    {:weight 3} { M3.__default.Union(Lit(st#0), Lit(st'#0)) } 
    M3.__default.Union#canCall(Lit(st#0), Lit(st'#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(st#0, Tclass.M3.State())
           && $Is(st'#0, Tclass.M3.State()))
       ==> (forall p#1: DatatypeType :: 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) } 
            { Set#IsMember(Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)), $Box(p#1)) } 
          $Is(p#1, Tclass.M3.Path())
             ==> M3.__default.DomSt#canCall(Lit(st#0))
               && M3.__default.DomSt#canCall(Lit(st'#0))
               && (Set#IsMember(Set#Union(M3.__default.DomSt(Lit(st#0)), M3.__default.DomSt(Lit(st'#0))), 
                  $Box(p#1))
                 ==> M3.__default.DomSt#canCall(Lit(st#0))
                   && M3.__default.GetSt#canCall(p#1, 
                    (if Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#1))
                       then st#0
                       else st'#0))))
         && M3.__default.Union(Lit(st#0), Lit(st'#0))
           == #M3.State.StateCons(Map#Glue(Set#FromBoogieMap((lambda $w#1: Box :: 
                  $IsBox($w#1, Tclass.M3.Path())
                     && Set#IsMember(Set#Union(M3.__default.DomSt(Lit(st#0)), M3.__default.DomSt(Lit(st'#0))), $w#1))), 
              (lambda $w#1: Box :: 
                $Box(M3.__default.GetSt($Unbox($w#1): DatatypeType, 
                    (if Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $w#1) then st#0 else st'#0)))), 
              TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))));
}

function M3.__default.Union#canCall(st#0: DatatypeType, st'#0: DatatypeType) : bool;

function Tclass.M3.State() : Ty
uses {
// Tclass.M3.State Tag
axiom Tag(Tclass.M3.State()) == Tagclass.M3.State
   && TagFamily(Tclass.M3.State()) == tytagFamily$State;
}

const unique Tagclass.M3.State: TyTag;

// Box/unbox axiom for Tclass.M3.State
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.State()) } 
  $IsBox(bx, Tclass.M3.State())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.State()));

function Tclass.M3.Path() : Ty
uses {
// Tclass.M3.Path Tag
axiom Tag(Tclass.M3.Path()) == Tagclass.M3.Path
   && TagFamily(Tclass.M3.Path()) == tytagFamily$Path;
}

const unique Tagclass.M3.Path: TyTag;

// Box/unbox axiom for Tclass.M3.Path
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Path()) } 
  $IsBox(bx, Tclass.M3.Path())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Path()));

function M3.__default.Union#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.Union
axiom (forall st#0: DatatypeType, st'#0: DatatypeType :: 
  { M3.__default.Union#requires(st#0, st'#0) } 
  $Is(st#0, Tclass.M3.State()) && $Is(st'#0, Tclass.M3.State())
     ==> M3.__default.Union#requires(st#0, st'#0) == true);

function Tclass.M3.Artifact() : Ty
uses {
// Tclass.M3.Artifact Tag
axiom Tag(Tclass.M3.Artifact()) == Tagclass.M3.Artifact
   && TagFamily(Tclass.M3.Artifact()) == tytagFamily$Artifact;
}

const unique Tagclass.M3.Artifact: TyTag;

// Box/unbox axiom for Tclass.M3.Artifact
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Artifact()) } 
  $IsBox(bx, Tclass.M3.Artifact())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Artifact()));

procedure {:verboseName "M3.Union (well-formedness)"} CheckWellformed$$M3.__default.Union(st#0: DatatypeType where $Is(st#0, Tclass.M3.State()), 
    st'#0: DatatypeType where $Is(st'#0, Tclass.M3.State()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id2222"} (var result#1 := M3.__default.Union(st#0, st'#0); 
    Set#Equal(M3.__default.DomSt(result#1), 
      Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0))));
  ensures {:id "id2223"} (var result#1 := M3.__default.Union(st#0, st'#0); 
    (forall p#2: DatatypeType :: 
      { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
        { M3.__default.GetSt(p#2, result#1) } 
        { Set#IsMember(M3.__default.DomSt(result#1), $Box(p#2)) } 
      $Is(p#2, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(result#1), $Box(p#2))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, result#1), 
          M3.__default.GetSt(p#2, (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) then st#0 else st'#0)))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.Union (well-formedness)"} CheckWellformed$$M3.__default.Union(st#0: DatatypeType, st'#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##st#0: DatatypeType;
  var ##st'#0: DatatypeType;
  var ##st#1: DatatypeType;
  var ##st#2: DatatypeType;
  var ##st#3: DatatypeType;
  var p#3: DatatypeType;
  var ##st#4: DatatypeType;
  var ##p#0: DatatypeType;
  var ##st#5: DatatypeType;
  var ##p#1: DatatypeType;
  var ##st#6: DatatypeType;
  var ##st#7: DatatypeType;
  var p#4: DatatypeType;
  var ##st#8: DatatypeType;
  var ##st#9: DatatypeType;
  var ##p#2: DatatypeType;
  var ##st#10: DatatypeType;
  var ##st#11: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M3.__default.Union(st#0, st'#0), Tclass.M3.State());
        havoc result#Z#0;
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##st#0, Tclass.M3.State(), $Heap);
        ##st'#0 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##st'#0, Tclass.M3.State(), $Heap);
        assert {:id "id2224"} (M3.State#Equal(st#0, st#0) && M3.State#Equal(st'#0, st'#0))
           || 
          DtRank(##st#0) < DtRank(st#0)
           || (DtRank(##st#0) == DtRank(st#0) && DtRank(##st'#0) < DtRank(st'#0));
        assume (M3.State#Equal(st#0, st#0) && M3.State#Equal(st'#0, st'#0))
           || M3.__default.Union#canCall(st#0, st'#0);
        assume M3.State.StateCons_q(M3.__default.Union(st#0, st'#0));
        assume {:id "id2225"} let#0#0#0 == M3.__default.Union(st#0, st'#0);
        assume M3.__default.Union#canCall(st#0, st'#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, Tclass.M3.State());
        assume {:id "id2226"} result#Z#0 == let#0#0#0;
        ##st#1 := result#Z#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##st#1, Tclass.M3.State(), $Heap);
        assume M3.__default.DomSt#canCall(result#Z#0);
        ##st#2 := st#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##st#2, Tclass.M3.State(), $Heap);
        assume M3.__default.DomSt#canCall(st#0);
        ##st#3 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##st#3, Tclass.M3.State(), $Heap);
        assume M3.__default.DomSt#canCall(st'#0);
        if (Set#Equal(M3.__default.DomSt(result#Z#0), 
          Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0))))
        {
            // Begin Comprehension WF check
            havoc p#3;
            if ($Is(p#3, Tclass.M3.Path()) && $IsAlloc(p#3, Tclass.M3.Path(), $Heap))
            {
                ##st#4 := result#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#4, Tclass.M3.State(), $Heap);
                assume M3.__default.DomSt#canCall(result#Z#0);
                if (Set#IsMember(M3.__default.DomSt(result#Z#0), $Box(p#3)))
                {
                    ##p#0 := p#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0, Tclass.M3.Path(), $Heap);
                    ##st#5 := result#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#5, Tclass.M3.State(), $Heap);
                    assert {:id "id2227"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#5), $Box(##p#0));
                    assume Set#IsMember(M3.__default.DomSt(##st#5), $Box(##p#0));
                    assume M3.__default.GetSt#canCall(p#3, result#Z#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(p#3, result#Z#0));
                    ##p#1 := p#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1, Tclass.M3.Path(), $Heap);
                    ##st#7 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#7, Tclass.M3.State(), $Heap);
                    assume M3.__default.DomSt#canCall(st#0);
                    if (Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)))
                    {
                    }
                    else
                    {
                    }

                    ##st#6 := (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) then st#0 else st'#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#6, Tclass.M3.State(), $Heap);
                    assert {:id "id2228"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#6), $Box(##p#1));
                    assume Set#IsMember(M3.__default.DomSt(##st#6), $Box(##p#1));
                    assume M3.__default.GetSt#canCall(p#3, (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) then st#0 else st'#0));
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(p#3, (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) then st#0 else st'#0)));
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id2229"} (var result#1 := M3.__default.Union(st#0, st'#0); 
          Set#Equal(M3.__default.DomSt(result#1), 
              Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)))
             && (forall p#2: DatatypeType :: 
              { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
                { M3.__default.GetSt(p#2, result#1) } 
                { Set#IsMember(M3.__default.DomSt(result#1), $Box(p#2)) } 
              $Is(p#2, Tclass.M3.Path())
                 ==> 
                Set#IsMember(M3.__default.DomSt(result#1), $Box(p#2))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, result#1), 
                  M3.__default.GetSt(p#2, (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) then st#0 else st'#0)))));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc p#4;
        if ($Is(p#4, Tclass.M3.Path()) && $IsAlloc(p#4, Tclass.M3.Path(), $Heap))
        {
            ##st#8 := st#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#8, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st#0);
            ##st#9 := st'#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#9, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st'#0);
            if (Set#IsMember(Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)), $Box(p#4)))
            {
                ##p#2 := p#4;
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#2, Tclass.M3.Path(), $Heap);
                ##st#11 := st#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#11, Tclass.M3.State(), $Heap);
                assume M3.__default.DomSt#canCall(st#0);
                if (Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4)))
                {
                }
                else
                {
                }

                ##st#10 := (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4)) then st#0 else st'#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#10, Tclass.M3.State(), $Heap);
                assert {:id "id2230"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#10), $Box(##p#2));
                assume Set#IsMember(M3.__default.DomSt(##st#10), $Box(##p#2));
                assume M3.__default.GetSt#canCall(p#4, (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4)) then st#0 else st'#0));
                assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(p#4, (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4)) then st#0 else st'#0)));
            }
        }

        // End Comprehension WF check
        assume {:id "id2231"} M3.__default.Union(st#0, st'#0)
           == #M3.State.StateCons(Map#Glue(Set#FromBoogieMap((lambda $w#4: Box :: 
                  $IsBox($w#4, Tclass.M3.Path())
                     && Set#IsMember(Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)), $w#4))), 
              (lambda $w#4: Box :: 
                $Box(M3.__default.GetSt($Unbox($w#4): DatatypeType, 
                    (if Set#IsMember(M3.__default.DomSt(st#0), $w#4) then st#0 else st'#0)))), 
              TMap(Tclass.M3.Path(), Tclass.M3.Artifact())));
        assume (forall p#1: DatatypeType :: 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) } 
            { Set#IsMember(Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)), $Box(p#1)) } 
          $Is(p#1, Tclass.M3.Path())
             ==> M3.__default.DomSt#canCall(st#0)
               && M3.__default.DomSt#canCall(st'#0)
               && (Set#IsMember(Set#Union(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)), $Box(p#1))
                 ==> M3.__default.DomSt#canCall(st#0)
                   && M3.__default.GetSt#canCall(p#1, (if Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) then st#0 else st'#0))));
        // CheckWellformedWithResult: any expression
        assume $Is(M3.__default.Union(st#0, st'#0), Tclass.M3.State());
        return;

        assume false;
    }
}



// function declaration for M3._default.RunTool
function M3.__default.RunTool(cmd#0: Seq, deps#0: Map, exp#0: Seq) : DatatypeType
uses {
// consequence axiom for M3.__default.RunTool
axiom 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Map, exp#0: Seq :: 
    { M3.__default.RunTool(cmd#0, deps#0, exp#0) } 
    M3.__default.RunTool#canCall(cmd#0, deps#0, exp#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
           && $Is(exp#0, TSeq(TChar)))
       ==> $Is(M3.__default.RunTool(cmd#0, deps#0, exp#0), Tclass.M3.Artifact()));
// definition axiom for M3.__default.RunTool (revealed)
axiom {:id "id2232"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, cmd#0: Seq, deps#0: Map, exp#0: Seq :: 
    { M3.__default.RunTool(cmd#0, deps#0, exp#0), $IsGoodHeap($Heap) } 
    M3.__default.RunTool#canCall(cmd#0, deps#0, exp#0)
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
           && $Is(exp#0, TSeq(TChar)))
       ==> $let#0$canCall()
         && M3.__default.RunTool(cmd#0, deps#0, exp#0) == (var a#0 := $let#0_a(); a#0));
// definition axiom for M3.__default.RunTool for all literals (revealed)
axiom {:id "id2233"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, cmd#0: Seq, deps#0: Map, exp#0: Seq :: 
    {:weight 3} { M3.__default.RunTool(Lit(cmd#0), Lit(deps#0), Lit(exp#0)), $IsGoodHeap($Heap) } 
    M3.__default.RunTool#canCall(Lit(cmd#0), Lit(deps#0), Lit(exp#0))
         || (1 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
           && $Is(exp#0, TSeq(TChar)))
       ==> $let#0$canCall()
         && M3.__default.RunTool(Lit(cmd#0), Lit(deps#0), Lit(exp#0))
           == (var a#1 := $let#0_a(); a#1));
}

function M3.__default.RunTool#canCall(cmd#0: Seq, deps#0: Map, exp#0: Seq) : bool;

function M3.__default.RunTool#requires(Seq, Map, Seq) : bool;

// #requires axiom for M3.__default.RunTool
axiom (forall $Heap: Heap, cmd#0: Seq, deps#0: Map, exp#0: Seq :: 
  { M3.__default.RunTool#requires(cmd#0, deps#0, exp#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
       && $Is(exp#0, TSeq(TChar))
     ==> M3.__default.RunTool#requires(cmd#0, deps#0, exp#0) == true);

function $let#0_a() : DatatypeType;

function $let#0$canCall() : bool
uses {
axiom $let#0$canCall() ==> $Is($let#0_a(), Tclass.M3.Artifact()) && Lit(true);
}

procedure {:verboseName "M3.RunTool (well-formedness)"} CheckWellformed$$M3.__default.RunTool(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Map where $Is(deps#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact())), 
    exp#0: Seq where $Is(exp#0, TSeq(TChar)));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.RunTool (well-formedness)"} CheckWellformed$$M3.__default.RunTool(cmd#0: Seq, deps#0: Map, exp#0: Seq)
{
  var $_ReadsFrame: [ref,Field]bool;
  var a#2: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M3.__default.RunTool(cmd#0, deps#0, exp#0), Tclass.M3.Artifact());
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc a#2;
        if ($Is(a#2, Tclass.M3.Artifact()) && $IsAlloc(a#2, Tclass.M3.Artifact(), $Heap))
        {
        }

        assert {:id "id2234"} Lit(true);
        assume $Is(a#2, Tclass.M3.Artifact()) && $IsAlloc(a#2, Tclass.M3.Artifact(), $Heap);
        assume true;
        assume $let#0$canCall();
        assume {:id "id2235"} M3.__default.RunTool(cmd#0, deps#0, exp#0) == a#2;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(M3.__default.RunTool(cmd#0, deps#0, exp#0), Tclass.M3.Artifact());
        return;

        assume false;
    }
}



// function declaration for M3._default.createPath
function M3.__default.createPath(fn#0: Seq) : DatatypeType
uses {
// consequence axiom for M3.__default.createPath
axiom 1 <= $FunctionContextHeight
   ==> (forall fn#0: Seq :: 
    { M3.__default.createPath(fn#0) } 
    M3.__default.createPath#canCall(fn#0)
         || (1 < $FunctionContextHeight && $Is(fn#0, TSeq(TChar)))
       ==> $Is(M3.__default.createPath(fn#0), Tclass.M3.Path()));
// definition axiom for M3.__default.createPath (revealed)
axiom {:id "id2236"} 1 <= $FunctionContextHeight
   ==> (forall fn#0: Seq :: 
    { M3.__default.createPath(fn#0) } 
    M3.__default.createPath#canCall(fn#0)
         || (1 < $FunctionContextHeight && $Is(fn#0, TSeq(TChar)))
       ==> M3.__default.createPath(fn#0) == #M3.Path.ExternalPath(fn#0));
// definition axiom for M3.__default.createPath for all literals (revealed)
axiom {:id "id2237"} 1 <= $FunctionContextHeight
   ==> (forall fn#0: Seq :: 
    {:weight 3} { M3.__default.createPath(Lit(fn#0)) } 
    M3.__default.createPath#canCall(Lit(fn#0))
         || (1 < $FunctionContextHeight && $Is(fn#0, TSeq(TChar)))
       ==> M3.__default.createPath(Lit(fn#0)) == Lit(#M3.Path.ExternalPath(Lit(fn#0))));
}

function M3.__default.createPath#canCall(fn#0: Seq) : bool;

function M3.__default.createPath#requires(Seq) : bool;

// #requires axiom for M3.__default.createPath
axiom (forall fn#0: Seq :: 
  { M3.__default.createPath#requires(fn#0) } 
  $Is(fn#0, TSeq(TChar)) ==> M3.__default.createPath#requires(fn#0) == true);

procedure {:verboseName "M3.createPath (well-formedness)"} CheckWellformed$$M3.__default.createPath(fn#0: Seq where $Is(fn#0, TSeq(TChar)));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.PathProperty (well-formedness)"} CheckWellFormed$$M3.__default.PathProperty(fn#0: Seq where $Is(fn#0, TSeq(TChar)) && $IsAlloc(fn#0, TSeq(TChar), $Heap), 
    fn'#0: Seq where $Is(fn'#0, TSeq(TChar)) && $IsAlloc(fn'#0, TSeq(TChar), $Heap));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.PathProperty (call)"} Call$$M3.__default.PathProperty(fn#0: Seq where $Is(fn#0, TSeq(TChar)) && $IsAlloc(fn#0, TSeq(TChar), $Heap), 
    fn'#0: Seq where $Is(fn'#0, TSeq(TChar)) && $IsAlloc(fn'#0, TSeq(TChar), $Heap));
  modifies $Heap;
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.PathProperty (correctness)"} Impl$$M3.__default.PathProperty(fn#0: Seq where $Is(fn#0, TSeq(TChar)) && $IsAlloc(fn#0, TSeq(TChar), $Heap), 
    fn'#0: Seq where $Is(fn'#0, TSeq(TChar)) && $IsAlloc(fn'#0, TSeq(TChar), $Heap))
   returns ($_reverifyPost: bool);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for M3._default.Loc
function M3.__default.Loc(cmd#0: Seq, deps#0: Set, exp#0: Seq) : DatatypeType
uses {
// consequence axiom for M3.__default.Loc
axiom 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exp#0: Seq :: 
    { M3.__default.Loc(cmd#0, deps#0, exp#0) } 
    M3.__default.Loc#canCall(cmd#0, deps#0, exp#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exp#0, TSeq(TChar)))
       ==> $Is(M3.__default.Loc(cmd#0, deps#0, exp#0), Tclass.M3.Path()));
// definition axiom for M3.__default.Loc (revealed)
axiom {:id "id2239"} 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exp#0: Seq :: 
    { M3.__default.Loc(cmd#0, deps#0, exp#0) } 
    M3.__default.Loc#canCall(cmd#0, deps#0, exp#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exp#0, TSeq(TChar)))
       ==> M3.__default.Loc(cmd#0, deps#0, exp#0)
         == #M3.Path.InternalPath(cmd#0, deps#0, exp#0));
// definition axiom for M3.__default.Loc for all literals (revealed)
axiom {:id "id2240"} 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exp#0: Seq :: 
    {:weight 3} { M3.__default.Loc(Lit(cmd#0), Lit(deps#0), Lit(exp#0)) } 
    M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), Lit(exp#0))
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exp#0, TSeq(TChar)))
       ==> M3.__default.Loc(Lit(cmd#0), Lit(deps#0), Lit(exp#0))
         == Lit(#M3.Path.InternalPath(Lit(cmd#0), Lit(deps#0), Lit(exp#0))));
}

function M3.__default.Loc#canCall(cmd#0: Seq, deps#0: Set, exp#0: Seq) : bool;

function M3.__default.Loc#requires(Seq, Set, Seq) : bool;

// #requires axiom for M3.__default.Loc
axiom (forall cmd#0: Seq, deps#0: Set, exp#0: Seq :: 
  { M3.__default.Loc#requires(cmd#0, deps#0, exp#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M3.Path()))
       && $Is(exp#0, TSeq(TChar))
     ==> M3.__default.Loc#requires(cmd#0, deps#0, exp#0) == true);

procedure {:verboseName "M3.Loc (well-formedness)"} CheckWellformed$$M3.__default.Loc(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M3.Path())), 
    exp#0: Seq where $Is(exp#0, TSeq(TChar)));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.LocInv_Cmd
function M3.__default.LocInv__Cmd(p#0: DatatypeType) : Seq
uses {
// consequence axiom for M3.__default.LocInv__Cmd
axiom 1 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType :: 
    { M3.__default.LocInv__Cmd(p#0) } 
    M3.__default.LocInv__Cmd#canCall(p#0)
         || (1 < $FunctionContextHeight && $Is(p#0, Tclass.M3.Path()))
       ==> $Is(M3.__default.LocInv__Cmd(p#0), TSeq(TChar)));
// definition axiom for M3.__default.LocInv__Cmd (revealed)
axiom {:id "id2242"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    { M3.__default.LocInv__Cmd(p#0), $IsGoodHeap($Heap) } 
    M3.__default.LocInv__Cmd#canCall(p#0)
         || (1 < $FunctionContextHeight && $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path()))
       ==> (!M3.Path.InternalPath_q(p#0) ==> $let#3$canCall())
         && M3.__default.LocInv__Cmd(p#0)
           == (if M3.Path.InternalPath_q(p#0)
             then (var exp#0 := M3.Path.exp(p#0); 
              (var deps#0 := M3.Path.deps(p#0); (var cmd#0 := M3.Path.cmd(p#0); cmd#0)))
             else (var cmd#1 := $let#3_cmd(); cmd#1)));
// definition axiom for M3.__default.LocInv__Cmd for all literals (revealed)
axiom {:id "id2243"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    {:weight 3} { M3.__default.LocInv__Cmd(Lit(p#0)), $IsGoodHeap($Heap) } 
    M3.__default.LocInv__Cmd#canCall(Lit(p#0))
         || (1 < $FunctionContextHeight && $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path()))
       ==> (!Lit(M3.Path.InternalPath_q(Lit(p#0))) ==> $let#3$canCall())
         && M3.__default.LocInv__Cmd(Lit(p#0))
           == (if M3.Path.InternalPath_q(Lit(p#0))
             then (var exp#2 := Lit(M3.Path.exp(Lit(p#0))); 
              (var deps#2 := Lit(M3.Path.deps(Lit(p#0))); 
                (var cmd#3 := Lit(M3.Path.cmd(Lit(p#0))); cmd#3)))
             else (var cmd#4 := $let#3_cmd(); cmd#4)));
}

function M3.__default.LocInv__Cmd#canCall(p#0: DatatypeType) : bool;

function M3.__default.LocInv__Cmd#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.LocInv__Cmd
axiom (forall $Heap: Heap, p#0: DatatypeType :: 
  { M3.__default.LocInv__Cmd#requires(p#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path())
     ==> M3.__default.LocInv__Cmd#requires(p#0) == true);

function $let#3_cmd() : Seq;

function $let#3$canCall() : bool
uses {
axiom $let#3$canCall() ==> $Is($let#3_cmd(), TSeq(TChar)) && Lit(true);
}

procedure {:verboseName "M3.LocInv_Cmd (well-formedness)"} CheckWellformed$$M3.__default.LocInv__Cmd(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.LocInv_Cmd (well-formedness)"} CheckWellformed$$M3.__default.LocInv__Cmd(p#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#3#0: Seq;
  var cmd#6: Seq;
  var _mcc#0#0: Seq;
  var _mcc#1#0: Set;
  var _mcc#2#0: Seq;
  var exp#Z#0: Seq;
  var let#0#0#0: Seq;
  var deps#Z#0: Set;
  var let#1#0#0: Set;
  var cmd#Z#0: Seq;
  var let#2#0#0: Seq;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M3.__default.LocInv__Cmd(p#0), TSeq(TChar));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (p#0 == #M3.Path.InternalPath(_mcc#0#0, _mcc#1#0, _mcc#2#0))
        {
            assume $Is(_mcc#0#0, TSeq(TChar));
            assume $Is(_mcc#1#0, TSet(Tclass.M3.Path()));
            assume $Is(_mcc#2#0, TSeq(TChar));
            havoc exp#Z#0;
            assume {:id "id2246"} let#0#0#0 == _mcc#2#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, TSeq(TChar));
            assume {:id "id2247"} exp#Z#0 == let#0#0#0;
            havoc deps#Z#0;
            assume {:id "id2248"} let#1#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, TSet(Tclass.M3.Path()));
            assume {:id "id2249"} deps#Z#0 == let#1#0#0;
            havoc cmd#Z#0;
            assume {:id "id2250"} let#2#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#0#0, TSeq(TChar));
            assume {:id "id2251"} cmd#Z#0 == let#2#0#0;
            assume {:id "id2252"} M3.__default.LocInv__Cmd(p#0) == cmd#Z#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M3.__default.LocInv__Cmd(p#0), TSeq(TChar));
            return;
        }
        else if (p#0 == #M3.Path.ExternalPath(_mcc#3#0))
        {
            assume $Is(_mcc#3#0, TSeq(TChar));
            havoc cmd#6;
            if ($Is(cmd#6, TSeq(TChar)) && $IsAlloc(cmd#6, TSeq(TChar), $Heap))
            {
            }

            assert {:id "id2244"} Lit(true);
            assume $Is(cmd#6, TSeq(TChar)) && $IsAlloc(cmd#6, TSeq(TChar), $Heap);
            assume true;
            assume $let#3$canCall();
            assume {:id "id2245"} M3.__default.LocInv__Cmd(p#0) == cmd#6;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M3.__default.LocInv__Cmd(p#0), TSeq(TChar));
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for M3._default.LocInv_Deps
function M3.__default.LocInv__Deps(p#0: DatatypeType) : Set
uses {
// consequence axiom for M3.__default.LocInv__Deps
axiom 1 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType :: 
    { M3.__default.LocInv__Deps(p#0) } 
    M3.__default.LocInv__Deps#canCall(p#0)
         || (1 < $FunctionContextHeight && $Is(p#0, Tclass.M3.Path()))
       ==> $Is(M3.__default.LocInv__Deps(p#0), TSet(Tclass.M3.Path())));
// definition axiom for M3.__default.LocInv__Deps (revealed)
axiom {:id "id2253"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    { M3.__default.LocInv__Deps(p#0), $IsGoodHeap($Heap) } 
    M3.__default.LocInv__Deps#canCall(p#0)
         || (1 < $FunctionContextHeight && $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path()))
       ==> (!M3.Path.InternalPath_q(p#0) ==> $let#10$canCall())
         && M3.__default.LocInv__Deps(p#0)
           == (if M3.Path.InternalPath_q(p#0)
             then (var exp#0 := M3.Path.exp(p#0); 
              (var deps#0 := M3.Path.deps(p#0); (var cmd#0 := M3.Path.cmd(p#0); deps#0)))
             else (var deps#1 := $let#10_deps(); deps#1)));
// definition axiom for M3.__default.LocInv__Deps for all literals (revealed)
axiom {:id "id2254"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    {:weight 3} { M3.__default.LocInv__Deps(Lit(p#0)), $IsGoodHeap($Heap) } 
    M3.__default.LocInv__Deps#canCall(Lit(p#0))
         || (1 < $FunctionContextHeight && $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path()))
       ==> (!Lit(M3.Path.InternalPath_q(Lit(p#0))) ==> $let#10$canCall())
         && M3.__default.LocInv__Deps(Lit(p#0))
           == (if M3.Path.InternalPath_q(Lit(p#0))
             then (var exp#2 := Lit(M3.Path.exp(Lit(p#0))); 
              (var deps#3 := Lit(M3.Path.deps(Lit(p#0))); 
                (var cmd#2 := Lit(M3.Path.cmd(Lit(p#0))); deps#3)))
             else (var deps#4 := $let#10_deps(); deps#4)));
}

function M3.__default.LocInv__Deps#canCall(p#0: DatatypeType) : bool;

function M3.__default.LocInv__Deps#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.LocInv__Deps
axiom (forall $Heap: Heap, p#0: DatatypeType :: 
  { M3.__default.LocInv__Deps#requires(p#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path())
     ==> M3.__default.LocInv__Deps#requires(p#0) == true);

function $let#10_deps() : Set;

function $let#10$canCall() : bool
uses {
axiom $let#10$canCall() ==> $Is($let#10_deps(), TSet(Tclass.M3.Path())) && Lit(true);
}

procedure {:verboseName "M3.LocInv_Deps (well-formedness)"} CheckWellformed$$M3.__default.LocInv__Deps(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.LocInv_Deps (well-formedness)"} CheckWellformed$$M3.__default.LocInv__Deps(p#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#3#0: Seq;
  var deps#6: Set;
  var _mcc#0#0: Seq;
  var _mcc#1#0: Set;
  var _mcc#2#0: Seq;
  var exp#Z#0: Seq;
  var let#0#0#0: Seq;
  var deps#Z#0: Set;
  var let#1#0#0: Set;
  var cmd#Z#0: Seq;
  var let#2#0#0: Seq;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M3.__default.LocInv__Deps(p#0), TSet(Tclass.M3.Path()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (p#0 == #M3.Path.InternalPath(_mcc#0#0, _mcc#1#0, _mcc#2#0))
        {
            assume $Is(_mcc#0#0, TSeq(TChar));
            assume $Is(_mcc#1#0, TSet(Tclass.M3.Path()));
            assume $Is(_mcc#2#0, TSeq(TChar));
            havoc exp#Z#0;
            assume {:id "id2257"} let#0#0#0 == _mcc#2#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, TSeq(TChar));
            assume {:id "id2258"} exp#Z#0 == let#0#0#0;
            havoc deps#Z#0;
            assume {:id "id2259"} let#1#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, TSet(Tclass.M3.Path()));
            assume {:id "id2260"} deps#Z#0 == let#1#0#0;
            havoc cmd#Z#0;
            assume {:id "id2261"} let#2#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#0#0, TSeq(TChar));
            assume {:id "id2262"} cmd#Z#0 == let#2#0#0;
            assume {:id "id2263"} M3.__default.LocInv__Deps(p#0) == deps#Z#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M3.__default.LocInv__Deps(p#0), TSet(Tclass.M3.Path()));
            return;
        }
        else if (p#0 == #M3.Path.ExternalPath(_mcc#3#0))
        {
            assume $Is(_mcc#3#0, TSeq(TChar));
            havoc deps#6;
            if ($Is(deps#6, TSet(Tclass.M3.Path()))
               && $IsAlloc(deps#6, TSet(Tclass.M3.Path()), $Heap))
            {
            }

            assert {:id "id2255"} Lit(true);
            assume $Is(deps#6, TSet(Tclass.M3.Path()))
               && $IsAlloc(deps#6, TSet(Tclass.M3.Path()), $Heap);
            assume true;
            assume $let#10$canCall();
            assume {:id "id2256"} M3.__default.LocInv__Deps(p#0) == deps#6;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M3.__default.LocInv__Deps(p#0), TSet(Tclass.M3.Path()));
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for M3._default.LocInv_Exp
function M3.__default.LocInv__Exp(p#0: DatatypeType) : Seq
uses {
// consequence axiom for M3.__default.LocInv__Exp
axiom 1 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType :: 
    { M3.__default.LocInv__Exp(p#0) } 
    M3.__default.LocInv__Exp#canCall(p#0)
         || (1 < $FunctionContextHeight && $Is(p#0, Tclass.M3.Path()))
       ==> $Is(M3.__default.LocInv__Exp(p#0), TSeq(TChar)));
// definition axiom for M3.__default.LocInv__Exp (revealed)
axiom {:id "id2264"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    { M3.__default.LocInv__Exp(p#0), $IsGoodHeap($Heap) } 
    M3.__default.LocInv__Exp#canCall(p#0)
         || (1 < $FunctionContextHeight && $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path()))
       ==> (!M3.Path.InternalPath_q(p#0) ==> $let#17$canCall())
         && M3.__default.LocInv__Exp(p#0)
           == (if M3.Path.InternalPath_q(p#0)
             then (var exp#0 := M3.Path.exp(p#0); 
              (var deps#0 := M3.Path.deps(p#0); (var cmd#0 := M3.Path.cmd(p#0); exp#0)))
             else (var exp#1 := $let#17_exp(); exp#1)));
// definition axiom for M3.__default.LocInv__Exp for all literals (revealed)
axiom {:id "id2265"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    {:weight 3} { M3.__default.LocInv__Exp(Lit(p#0)), $IsGoodHeap($Heap) } 
    M3.__default.LocInv__Exp#canCall(Lit(p#0))
         || (1 < $FunctionContextHeight && $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path()))
       ==> (!Lit(M3.Path.InternalPath_q(Lit(p#0))) ==> $let#17$canCall())
         && M3.__default.LocInv__Exp(Lit(p#0))
           == (if M3.Path.InternalPath_q(Lit(p#0))
             then (var exp#3 := Lit(M3.Path.exp(Lit(p#0))); 
              (var deps#2 := Lit(M3.Path.deps(Lit(p#0))); 
                (var cmd#2 := Lit(M3.Path.cmd(Lit(p#0))); exp#3)))
             else (var exp#4 := $let#17_exp(); exp#4)));
}

function M3.__default.LocInv__Exp#canCall(p#0: DatatypeType) : bool;

function M3.__default.LocInv__Exp#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.LocInv__Exp
axiom (forall $Heap: Heap, p#0: DatatypeType :: 
  { M3.__default.LocInv__Exp#requires(p#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path())
     ==> M3.__default.LocInv__Exp#requires(p#0) == true);

function $let#17_exp() : Seq;

function $let#17$canCall() : bool
uses {
axiom $let#17$canCall() ==> $Is($let#17_exp(), TSeq(TChar)) && Lit(true);
}

procedure {:verboseName "M3.LocInv_Exp (well-formedness)"} CheckWellformed$$M3.__default.LocInv__Exp(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.LocInv_Exp (well-formedness)"} CheckWellformed$$M3.__default.LocInv__Exp(p#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var _mcc#3#0: Seq;
  var exp#6: Seq;
  var _mcc#0#0: Seq;
  var _mcc#1#0: Set;
  var _mcc#2#0: Seq;
  var exp#Z#0: Seq;
  var let#0#0#0: Seq;
  var deps#Z#0: Set;
  var let#1#0#0: Set;
  var cmd#Z#0: Seq;
  var let#2#0#0: Seq;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M3.__default.LocInv__Exp(p#0), TSeq(TChar));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (p#0 == #M3.Path.InternalPath(_mcc#0#0, _mcc#1#0, _mcc#2#0))
        {
            assume $Is(_mcc#0#0, TSeq(TChar));
            assume $Is(_mcc#1#0, TSet(Tclass.M3.Path()));
            assume $Is(_mcc#2#0, TSeq(TChar));
            havoc exp#Z#0;
            assume {:id "id2268"} let#0#0#0 == _mcc#2#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, TSeq(TChar));
            assume {:id "id2269"} exp#Z#0 == let#0#0#0;
            havoc deps#Z#0;
            assume {:id "id2270"} let#1#0#0 == _mcc#1#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, TSet(Tclass.M3.Path()));
            assume {:id "id2271"} deps#Z#0 == let#1#0#0;
            havoc cmd#Z#0;
            assume {:id "id2272"} let#2#0#0 == _mcc#0#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#0#0, TSeq(TChar));
            assume {:id "id2273"} cmd#Z#0 == let#2#0#0;
            assume {:id "id2274"} M3.__default.LocInv__Exp(p#0) == exp#Z#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M3.__default.LocInv__Exp(p#0), TSeq(TChar));
            return;
        }
        else if (p#0 == #M3.Path.ExternalPath(_mcc#3#0))
        {
            assume $Is(_mcc#3#0, TSeq(TChar));
            havoc exp#6;
            if ($Is(exp#6, TSeq(TChar)) && $IsAlloc(exp#6, TSeq(TChar), $Heap))
            {
            }

            assert {:id "id2266"} Lit(true);
            assume $Is(exp#6, TSeq(TChar)) && $IsAlloc(exp#6, TSeq(TChar), $Heap);
            assume true;
            assume $let#17$canCall();
            assume {:id "id2267"} M3.__default.LocInv__Exp(p#0) == exp#6;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M3.__default.LocInv__Exp(p#0), TSeq(TChar));
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



procedure {:verboseName "M3.LocInjectivity (well-formedness)"} CheckWellFormed$$M3.__default.LocInjectivity(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    exp#0: Seq where $Is(exp#0, TSeq(TChar)) && $IsAlloc(exp#0, TSeq(TChar), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.LocInjectivity (call)"} Call$$M3.__default.LocInjectivity(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    exp#0: Seq where $Is(exp#0, TSeq(TChar)) && $IsAlloc(exp#0, TSeq(TChar), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.Loc#canCall(cmd#0, deps#0, exp#0)
     && M3.__default.LocInv__Cmd#canCall(M3.__default.Loc(cmd#0, deps#0, exp#0));
  ensures {:id "id2278"} Seq#Equal(M3.__default.LocInv__Cmd(M3.__default.Loc(cmd#0, deps#0, exp#0)), cmd#0);
  free ensures M3.__default.Loc#canCall(cmd#0, deps#0, exp#0)
     && M3.__default.LocInv__Deps#canCall(M3.__default.Loc(cmd#0, deps#0, exp#0));
  ensures {:id "id2279"} Set#Equal(M3.__default.LocInv__Deps(M3.__default.Loc(cmd#0, deps#0, exp#0)), deps#0);
  free ensures M3.__default.Loc#canCall(cmd#0, deps#0, exp#0)
     && M3.__default.LocInv__Exp#canCall(M3.__default.Loc(cmd#0, deps#0, exp#0));
  ensures {:id "id2280"} Seq#Equal(M3.__default.LocInv__Exp(M3.__default.Loc(cmd#0, deps#0, exp#0)), exp#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.LocInjectivity (correctness)"} Impl$$M3.__default.LocInjectivity(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    exp#0: Seq where $Is(exp#0, TSeq(TChar)) && $IsAlloc(exp#0, TSeq(TChar), $Heap))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.Loc#canCall(cmd#0, deps#0, exp#0)
     && M3.__default.LocInv__Cmd#canCall(M3.__default.Loc(cmd#0, deps#0, exp#0));
  ensures {:id "id2281"} Seq#Equal(M3.__default.LocInv__Cmd(M3.__default.Loc(cmd#0, deps#0, exp#0)), cmd#0);
  free ensures M3.__default.Loc#canCall(cmd#0, deps#0, exp#0)
     && M3.__default.LocInv__Deps#canCall(M3.__default.Loc(cmd#0, deps#0, exp#0));
  ensures {:id "id2282"} Set#Equal(M3.__default.LocInv__Deps(M3.__default.Loc(cmd#0, deps#0, exp#0)), deps#0);
  free ensures M3.__default.Loc#canCall(cmd#0, deps#0, exp#0)
     && M3.__default.LocInv__Exp#canCall(M3.__default.Loc(cmd#0, deps#0, exp#0));
  ensures {:id "id2283"} Seq#Equal(M3.__default.LocInv__Exp(M3.__default.Loc(cmd#0, deps#0, exp#0)), exp#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.LocInjectivity (correctness)"} Impl$$M3.__default.LocInjectivity(cmd#0: Seq, deps#0: Set, exp#0: Seq) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: LocInjectivity, Impl$$M3.__default.LocInjectivity
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for M3._default.EmptyEnv
function M3.__default.EmptyEnv() : DatatypeType
uses {
// consequence axiom for M3.__default.EmptyEnv
axiom 4 <= $FunctionContextHeight
   ==> 
  M3.__default.EmptyEnv#canCall() || 4 < $FunctionContextHeight
   ==> Lit(M3.__default.ValidEnv(Lit(M3.__default.EmptyEnv())))
     && $Is(M3.__default.EmptyEnv(), Tclass.M3.Env());
// definition axiom for M3.__default.EmptyEnv (revealed)
axiom {:id "id2284"} 4 <= $FunctionContextHeight
   ==> 
  M3.__default.EmptyEnv#canCall() || 4 < $FunctionContextHeight
   ==> M3.__default.EmptyEnv() == Lit(#M3.Env.EnvCons(Lit(Map#Empty(): Map)));
// definition axiom for M3.__default.EmptyEnv for all literals (revealed)
axiom {:id "id2285"} 4 <= $FunctionContextHeight
   ==> 
  M3.__default.EmptyEnv#canCall() || 4 < $FunctionContextHeight
   ==> M3.__default.EmptyEnv() == Lit(#M3.Env.EnvCons(Lit(Map#Empty(): Map)));
}

function M3.__default.EmptyEnv#canCall() : bool;

function Tclass.M3.Env() : Ty
uses {
// Tclass.M3.Env Tag
axiom Tag(Tclass.M3.Env()) == Tagclass.M3.Env
   && TagFamily(Tclass.M3.Env()) == tytagFamily$Env;
}

const unique Tagclass.M3.Env: TyTag;

// Box/unbox axiom for Tclass.M3.Env
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Env()) } 
  $IsBox(bx, Tclass.M3.Env())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Env()));

function M3.__default.EmptyEnv#requires() : bool
uses {
// #requires axiom for M3.__default.EmptyEnv
axiom M3.__default.EmptyEnv#requires() == true;
}

function Tclass.M3.Identifier() : Ty
uses {
// Tclass.M3.Identifier Tag
axiom Tag(Tclass.M3.Identifier()) == Tagclass.M3.Identifier
   && TagFamily(Tclass.M3.Identifier()) == tytagFamily$Identifier;
}

const unique Tagclass.M3.Identifier: TyTag;

// Box/unbox axiom for Tclass.M3.Identifier
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Identifier()) } 
  $IsBox(bx, Tclass.M3.Identifier())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Identifier()));

procedure {:verboseName "M3.EmptyEnv (well-formedness)"} CheckWellformed$$M3.__default.EmptyEnv();
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id2286"} M3.__default.ValidEnv#canCall(Lit(M3.__default.EmptyEnv()))
     ==> Lit(M3.__default.ValidEnv(Lit(M3.__default.EmptyEnv())))
       || (forall id#0: DatatypeType :: 
        { $Unbox(Map#Elements(M3.Env.m(M3.__default.EmptyEnv()))[$Box(id#0)]): DatatypeType } 
          { Set#IsMember(Map#Domain(M3.Env.m(M3.__default.EmptyEnv())), $Box(id#0)) } 
        $Is(id#0, Tclass.M3.Identifier())
           ==> 
          Set#IsMember(Map#Domain(M3.Env.m(Lit(M3.__default.EmptyEnv()))), $Box(id#0))
           ==> M3.__default.Value($Unbox(Map#Elements(Lit(M3.Env.m(Lit(M3.__default.EmptyEnv()))))[$Box(id#0)]): DatatypeType));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.EmptyEnv (well-formedness)"} CheckWellformed$$M3.__default.EmptyEnv()
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M3.__default.EmptyEnv(), Tclass.M3.Env());
        assert {:id "id2287"} Lit(true);
        assume Lit(true) || M3.__default.EmptyEnv#canCall();
        assume M3.Env.EnvCons_q(Lit(M3.__default.EmptyEnv()));
        ##env#0 := Lit(M3.__default.EmptyEnv());
        // assume allocatedness for argument to function
        assume $IsAlloc(##env#0, Tclass.M3.Env(), $Heap);
        assume M3.__default.ValidEnv#canCall(Lit(M3.__default.EmptyEnv()));
        assume {:id "id2288"} Lit(M3.__default.ValidEnv(Lit(M3.__default.EmptyEnv())));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume {:id "id2289"} M3.__default.EmptyEnv() == Lit(#M3.Env.EnvCons(Lit(Map#Empty(): Map)));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(M3.__default.EmptyEnv(), Tclass.M3.Env());
        return;

        assume false;
    }
}



// function declaration for M3._default.GetEnv
function M3.__default.GetEnv(id#0: DatatypeType, env#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.GetEnv
axiom 4 <= $FunctionContextHeight
   ==> (forall id#0: DatatypeType, env#0: DatatypeType :: 
    { M3.__default.GetEnv(id#0, env#0) } 
    M3.__default.GetEnv#canCall(id#0, env#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(id#0, Tclass.M3.Identifier())
           && $Is(env#0, Tclass.M3.Env())
           && M3.__default.ValidEnv(env#0))
       ==> M3.__default.Value(M3.__default.GetEnv(id#0, env#0))
         && $Is(M3.__default.GetEnv(id#0, env#0), Tclass.M3.Expression()));
// definition axiom for M3.__default.GetEnv (revealed)
axiom {:id "id2290"} 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, id#0: DatatypeType, env#0: DatatypeType :: 
    { M3.__default.GetEnv(id#0, env#0), $IsGoodHeap($Heap) } 
    M3.__default.GetEnv#canCall(id#0, env#0)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(id#0, Tclass.M3.Identifier())
           && $Is(env#0, Tclass.M3.Env())
           && M3.__default.ValidEnv(env#0))
       ==> M3.Env.EnvCons_q(env#0)
         && (Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#0))
           ==> M3.Env.EnvCons_q(env#0))
         && (!Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#0)) ==> $let#24$canCall())
         && M3.__default.GetEnv(id#0, env#0)
           == (if Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#0))
             then $Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#0)]): DatatypeType
             else (var lit#0 := $let#24_lit(); #M3.Expression.exprLiteral(lit#0))));
// definition axiom for M3.__default.GetEnv for all literals (revealed)
axiom {:id "id2291"} 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, id#0: DatatypeType, env#0: DatatypeType :: 
    {:weight 3} { M3.__default.GetEnv(Lit(id#0), Lit(env#0)), $IsGoodHeap($Heap) } 
    M3.__default.GetEnv#canCall(Lit(id#0), Lit(env#0))
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(id#0, Tclass.M3.Identifier())
           && $Is(env#0, Tclass.M3.Env())
           && Lit(M3.__default.ValidEnv(Lit(env#0))))
       ==> M3.Env.EnvCons_q(Lit(env#0))
         && (Set#IsMember(Map#Domain(M3.Env.m(Lit(env#0))), $Box(id#0))
           ==> M3.Env.EnvCons_q(Lit(env#0)))
         && (!Set#IsMember(Map#Domain(M3.Env.m(Lit(env#0))), $Box(id#0))
           ==> $let#24$canCall())
         && M3.__default.GetEnv(Lit(id#0), Lit(env#0))
           == (if Set#IsMember(Map#Domain(M3.Env.m(Lit(env#0))), $Box(id#0))
             then $Unbox(Map#Elements(Lit(M3.Env.m(Lit(env#0))))[$Box(Lit(id#0))]): DatatypeType
             else (var lit#1 := $let#24_lit(); #M3.Expression.exprLiteral(lit#1))));
}

function M3.__default.GetEnv#canCall(id#0: DatatypeType, env#0: DatatypeType) : bool;

function Tclass.M3.Expression() : Ty
uses {
// Tclass.M3.Expression Tag
axiom Tag(Tclass.M3.Expression()) == Tagclass.M3.Expression
   && TagFamily(Tclass.M3.Expression()) == tytagFamily$Expression;
}

const unique Tagclass.M3.Expression: TyTag;

// Box/unbox axiom for Tclass.M3.Expression
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Expression()) } 
  $IsBox(bx, Tclass.M3.Expression())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Expression()));

function M3.__default.GetEnv#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.GetEnv
axiom (forall $Heap: Heap, id#0: DatatypeType, env#0: DatatypeType :: 
  { M3.__default.GetEnv#requires(id#0, env#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && $Is(id#0, Tclass.M3.Identifier())
       && $Is(env#0, Tclass.M3.Env())
     ==> M3.__default.GetEnv#requires(id#0, env#0) == M3.__default.ValidEnv(env#0));

function $let#24_lit() : DatatypeType;

function $let#24$canCall() : bool
uses {
axiom $let#24$canCall() ==> $Is($let#24_lit(), Tclass.M3.Literal()) && Lit(true);
}

function Tclass.M3.Literal() : Ty
uses {
// Tclass.M3.Literal Tag
axiom Tag(Tclass.M3.Literal()) == Tagclass.M3.Literal
   && TagFamily(Tclass.M3.Literal()) == tytagFamily$Literal;
}

const unique Tagclass.M3.Literal: TyTag;

// Box/unbox axiom for Tclass.M3.Literal
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Literal()) } 
  $IsBox(bx, Tclass.M3.Literal())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Literal()));

procedure {:verboseName "M3.GetEnv (well-formedness)"} CheckWellformed$$M3.__default.GetEnv(id#0: DatatypeType where $Is(id#0, Tclass.M3.Identifier()), 
    env#0: DatatypeType where $Is(env#0, Tclass.M3.Env()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id2292"} M3.__default.Value#canCall(M3.__default.GetEnv(id#0, env#0))
     ==> M3.__default.Value(M3.__default.GetEnv(id#0, env#0))
       || M3.Expression.exprLiteral_q(M3.__default.GetEnv(id#0, env#0));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.GetEnv (well-formedness)"} CheckWellformed$$M3.__default.GetEnv(id#0: DatatypeType, env#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##id#0: DatatypeType;
  var ##env#1: DatatypeType;
  var lit#2: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##env#0, Tclass.M3.Env(), $Heap);
    assume M3.__default.ValidEnv#canCall(env#0);
    assume {:id "id2293"} M3.__default.ValidEnv(env#0);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M3.__default.GetEnv(id#0, env#0), Tclass.M3.Expression());
        ##id#0 := id#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##id#0, Tclass.M3.Identifier(), $Heap);
        ##env#1 := env#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##env#1, Tclass.M3.Env(), $Heap);
        assert {:id "id2294"} {:subsumption 0} M3.__default.ValidEnv(##env#1);
        assume M3.__default.ValidEnv(##env#1);
        assert {:id "id2295"} (M3.Identifier#Equal(id#0, id#0) && M3.Env#Equal(env#0, env#0))
           || 
          DtRank(##id#0) < DtRank(id#0)
           || (DtRank(##id#0) == DtRank(id#0) && DtRank(##env#1) < DtRank(env#0));
        assume (M3.Identifier#Equal(id#0, id#0) && M3.Env#Equal(env#0, env#0))
           || M3.__default.GetEnv#canCall(id#0, env#0);
        ##expr#0 := M3.__default.GetEnv(id#0, env#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0, Tclass.M3.Expression(), $Heap);
        assume M3.__default.Value#canCall(M3.__default.GetEnv(id#0, env#0));
        assume {:id "id2296"} M3.__default.Value(M3.__default.GetEnv(id#0, env#0));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume M3.Env.EnvCons_q(env#0);
        if (Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#0)))
        {
            assume M3.Env.EnvCons_q(env#0);
            assert {:id "id2297"} Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#0));
            assume {:id "id2298"} M3.__default.GetEnv(id#0, env#0)
               == $Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#0)]): DatatypeType;
            assume M3.Env.EnvCons_q(env#0);
            // CheckWellformedWithResult: any expression
            assume $Is(M3.__default.GetEnv(id#0, env#0), Tclass.M3.Expression());
            return;
        }
        else
        {
            havoc lit#2;
            if ($Is(lit#2, Tclass.M3.Literal()) && $IsAlloc(lit#2, Tclass.M3.Literal(), $Heap))
            {
            }

            assert {:id "id2299"} Lit(true);
            assume $Is(lit#2, Tclass.M3.Literal()) && $IsAlloc(lit#2, Tclass.M3.Literal(), $Heap);
            assume true;
            assume $let#24$canCall();
            assume {:id "id2300"} M3.__default.GetEnv(id#0, env#0) == #M3.Expression.exprLiteral(lit#2);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M3.__default.GetEnv(id#0, env#0), Tclass.M3.Expression());
            return;
        }

        assume false;
    }
}



// function declaration for M3._default.SetEnv
function M3.__default.SetEnv(id#0: DatatypeType, expr#0: DatatypeType, env#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.SetEnv
axiom 4 <= $FunctionContextHeight
   ==> (forall id#0: DatatypeType, expr#0: DatatypeType, env#0: DatatypeType :: 
    { M3.__default.SetEnv(id#0, expr#0, env#0) } 
    M3.__default.SetEnv#canCall(id#0, expr#0, env#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(id#0, Tclass.M3.Identifier())
           && $Is(expr#0, Tclass.M3.Expression())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.ValidEnv(env#0)
           && M3.__default.Value(expr#0))
       ==> M3.__default.ValidEnv(M3.__default.SetEnv(id#0, expr#0, env#0))
         && $Is(M3.__default.SetEnv(id#0, expr#0, env#0), Tclass.M3.Env()));
// definition axiom for M3.__default.SetEnv (revealed)
axiom {:id "id2301"} 4 <= $FunctionContextHeight
   ==> (forall id#0: DatatypeType, expr#0: DatatypeType, env#0: DatatypeType :: 
    { M3.__default.SetEnv(id#0, expr#0, env#0) } 
    M3.__default.SetEnv#canCall(id#0, expr#0, env#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(id#0, Tclass.M3.Identifier())
           && $Is(expr#0, Tclass.M3.Expression())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.ValidEnv(env#0)
           && M3.__default.Value(expr#0))
       ==> M3.Env.EnvCons_q(env#0)
         && M3.__default.SetEnv(id#0, expr#0, env#0)
           == #M3.Env.EnvCons(Map#Build(M3.Env.m(env#0), $Box(id#0), $Box(expr#0))));
// definition axiom for M3.__default.SetEnv for decreasing-related literals (revealed)
axiom {:id "id2302"} 4 <= $FunctionContextHeight
   ==> (forall id#0: DatatypeType, expr#0: DatatypeType, env#0: DatatypeType :: 
    {:weight 3} { M3.__default.SetEnv(id#0, Lit(expr#0), env#0) } 
    M3.__default.SetEnv#canCall(id#0, Lit(expr#0), env#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(id#0, Tclass.M3.Identifier())
           && $Is(expr#0, Tclass.M3.Expression())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.ValidEnv(env#0)
           && M3.__default.Value(Lit(expr#0)))
       ==> M3.Env.EnvCons_q(env#0)
         && M3.__default.SetEnv(id#0, Lit(expr#0), env#0)
           == #M3.Env.EnvCons(Map#Build(M3.Env.m(env#0), $Box(id#0), $Box(Lit(expr#0)))));
// definition axiom for M3.__default.SetEnv for all literals (revealed)
axiom {:id "id2303"} 4 <= $FunctionContextHeight
   ==> (forall id#0: DatatypeType, expr#0: DatatypeType, env#0: DatatypeType :: 
    {:weight 3} { M3.__default.SetEnv(Lit(id#0), Lit(expr#0), Lit(env#0)) } 
    M3.__default.SetEnv#canCall(Lit(id#0), Lit(expr#0), Lit(env#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(id#0, Tclass.M3.Identifier())
           && $Is(expr#0, Tclass.M3.Expression())
           && $Is(env#0, Tclass.M3.Env())
           && Lit(M3.__default.ValidEnv(Lit(env#0)) && M3.__default.Value(Lit(expr#0))))
       ==> M3.Env.EnvCons_q(Lit(env#0))
         && M3.__default.SetEnv(Lit(id#0), Lit(expr#0), Lit(env#0))
           == #M3.Env.EnvCons(Map#Build(Lit(M3.Env.m(Lit(env#0))), $Box(Lit(id#0)), $Box(Lit(expr#0)))));
}

function M3.__default.SetEnv#canCall(id#0: DatatypeType, expr#0: DatatypeType, env#0: DatatypeType) : bool;

function M3.__default.SetEnv#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.SetEnv
axiom (forall id#0: DatatypeType, expr#0: DatatypeType, env#0: DatatypeType :: 
  { M3.__default.SetEnv#requires(id#0, expr#0, env#0) } 
  $Is(id#0, Tclass.M3.Identifier())
       && $Is(expr#0, Tclass.M3.Expression())
       && $Is(env#0, Tclass.M3.Env())
     ==> M3.__default.SetEnv#requires(id#0, expr#0, env#0)
       == (M3.__default.ValidEnv(env#0) && M3.__default.Value(expr#0)));

procedure {:verboseName "M3.SetEnv (well-formedness)"} CheckWellformed$$M3.__default.SetEnv(id#0: DatatypeType where $Is(id#0, Tclass.M3.Identifier()), 
    expr#0: DatatypeType where $Is(expr#0, Tclass.M3.Expression()), 
    env#0: DatatypeType where $Is(env#0, Tclass.M3.Env()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id2304"} M3.__default.ValidEnv#canCall(M3.__default.SetEnv(id#0, expr#0, env#0))
     ==> M3.__default.ValidEnv(M3.__default.SetEnv(id#0, expr#0, env#0))
       || (forall id#1: DatatypeType :: 
        { $Unbox(Map#Elements(M3.Env.m(M3.__default.SetEnv(id#0, expr#0, env#0)))[$Box(id#1)]): DatatypeType } 
          { Set#IsMember(Map#Domain(M3.Env.m(M3.__default.SetEnv(id#0, expr#0, env#0))), $Box(id#1)) } 
        $Is(id#1, Tclass.M3.Identifier())
           ==> 
          Set#IsMember(Map#Domain(M3.Env.m(M3.__default.SetEnv(id#0, expr#0, env#0))), $Box(id#1))
           ==> M3.__default.Value($Unbox(Map#Elements(M3.Env.m(M3.__default.SetEnv(id#0, expr#0, env#0)))[$Box(id#1)]): DatatypeType));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.SetEnv (well-formedness)"} CheckWellformed$$M3.__default.SetEnv(id#0: DatatypeType, expr#0: DatatypeType, env#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##env#1: DatatypeType;
  var ##id#0: DatatypeType;
  var ##expr#1: DatatypeType;
  var ##env#2: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##env#0, Tclass.M3.Env(), $Heap);
    assume M3.__default.ValidEnv#canCall(env#0);
    assume {:id "id2305"} M3.__default.ValidEnv(env#0);
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M3.Expression(), $Heap);
    assume M3.__default.Value#canCall(expr#0);
    assume {:id "id2306"} M3.__default.Value(expr#0);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M3.__default.SetEnv(id#0, expr#0, env#0), Tclass.M3.Env());
        ##id#0 := id#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##id#0, Tclass.M3.Identifier(), $Heap);
        ##expr#1 := expr#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#1, Tclass.M3.Expression(), $Heap);
        ##env#2 := env#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##env#2, Tclass.M3.Env(), $Heap);
        assert {:id "id2307"} {:subsumption 0} M3.__default.ValidEnv(##env#2);
        assert {:id "id2308"} {:subsumption 0} M3.__default.Value#canCall(##expr#1)
           ==> M3.__default.Value(##expr#1) || M3.Expression.exprLiteral_q(##expr#1);
        assume M3.__default.ValidEnv(##env#2) && M3.__default.Value(##expr#1);
        assert {:id "id2309"} (
            M3.Identifier#Equal(id#0, id#0)
             && M3.Expression#Equal(expr#0, expr#0)
             && M3.Env#Equal(env#0, env#0))
           || DtRank(##expr#1) < DtRank(expr#0);
        assume (
            M3.Identifier#Equal(id#0, id#0)
             && M3.Expression#Equal(expr#0, expr#0)
             && M3.Env#Equal(env#0, env#0))
           || M3.__default.SetEnv#canCall(id#0, expr#0, env#0);
        assume M3.Env.EnvCons_q(M3.__default.SetEnv(id#0, expr#0, env#0));
        ##env#1 := M3.__default.SetEnv(id#0, expr#0, env#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##env#1, Tclass.M3.Env(), $Heap);
        assume M3.__default.ValidEnv#canCall(M3.__default.SetEnv(id#0, expr#0, env#0));
        assume {:id "id2310"} M3.__default.ValidEnv(M3.__default.SetEnv(id#0, expr#0, env#0));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume M3.Env.EnvCons_q(env#0);
        assume {:id "id2311"} M3.__default.SetEnv(id#0, expr#0, env#0)
           == #M3.Env.EnvCons(Map#Build(M3.Env.m(env#0), $Box(id#0), $Box(expr#0)));
        assume M3.Env.EnvCons_q(env#0);
        // CheckWellformedWithResult: any expression
        assume $Is(M3.__default.SetEnv(id#0, expr#0, env#0), Tclass.M3.Env());
        return;

        assume false;
    }
}



// function declaration for M3._default.ValidEnv
function M3.__default.ValidEnv(env#0: DatatypeType) : bool
uses {
// definition axiom for M3.__default.ValidEnv (revealed)
axiom {:id "id2312"} 3 <= $FunctionContextHeight
   ==> (forall env#0: DatatypeType :: 
    { M3.__default.ValidEnv(env#0) } 
    M3.__default.ValidEnv#canCall(env#0)
         || (3 < $FunctionContextHeight && $Is(env#0, Tclass.M3.Env()))
       ==> (forall id#0: DatatypeType :: 
          { $Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#0)]): DatatypeType } 
            { Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#0)) } 
          $Is(id#0, Tclass.M3.Identifier())
             ==> M3.Env.EnvCons_q(env#0)
               && (Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#0))
                 ==> M3.Env.EnvCons_q(env#0)
                   && M3.__default.Value#canCall($Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#0)]): DatatypeType)))
         && M3.__default.ValidEnv(env#0)
           == (forall id#0: DatatypeType :: 
            { $Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#0)]): DatatypeType } 
              { Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#0)) } 
            $Is(id#0, Tclass.M3.Identifier())
               ==> 
              Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#0))
               ==> M3.__default.Value($Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#0)]): DatatypeType)));
// definition axiom for M3.__default.ValidEnv for all literals (revealed)
axiom {:id "id2313"} 3 <= $FunctionContextHeight
   ==> (forall env#0: DatatypeType :: 
    {:weight 3} { M3.__default.ValidEnv(Lit(env#0)) } 
    M3.__default.ValidEnv#canCall(Lit(env#0))
         || (3 < $FunctionContextHeight && $Is(env#0, Tclass.M3.Env()))
       ==> (forall id#1: DatatypeType :: 
          { $Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#1)]): DatatypeType } 
            { Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#1)) } 
          $Is(id#1, Tclass.M3.Identifier())
             ==> M3.Env.EnvCons_q(Lit(env#0))
               && (Set#IsMember(Map#Domain(M3.Env.m(Lit(env#0))), $Box(id#1))
                 ==> M3.Env.EnvCons_q(Lit(env#0))
                   && M3.__default.Value#canCall($Unbox(Map#Elements(Lit(M3.Env.m(Lit(env#0))))[$Box(id#1)]): DatatypeType)))
         && M3.__default.ValidEnv(Lit(env#0))
           == (forall id#1: DatatypeType :: 
            { $Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#1)]): DatatypeType } 
              { Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#1)) } 
            $Is(id#1, Tclass.M3.Identifier())
               ==> 
              Set#IsMember(Map#Domain(M3.Env.m(Lit(env#0))), $Box(id#1))
               ==> M3.__default.Value($Unbox(Map#Elements(Lit(M3.Env.m(Lit(env#0))))[$Box(id#1)]): DatatypeType)));
}

function M3.__default.ValidEnv#canCall(env#0: DatatypeType) : bool;

function M3.__default.ValidEnv#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.ValidEnv
axiom (forall env#0: DatatypeType :: 
  { M3.__default.ValidEnv#requires(env#0) } 
  $Is(env#0, Tclass.M3.Env()) ==> M3.__default.ValidEnv#requires(env#0) == true);

procedure {:verboseName "M3.ValidEnv (well-formedness)"} CheckWellformed$$M3.__default.ValidEnv(env#0: DatatypeType where $Is(env#0, Tclass.M3.Env()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.ValidEnv (well-formedness)"} CheckWellformed$$M3.__default.ValidEnv(env#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var id#2: DatatypeType;
  var ##expr#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc id#2;
        if ($Is(id#2, Tclass.M3.Identifier())
           && $IsAlloc(id#2, Tclass.M3.Identifier(), $Heap))
        {
            assume M3.Env.EnvCons_q(env#0);
            if (Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#2)))
            {
                assume M3.Env.EnvCons_q(env#0);
                assert {:id "id2314"} Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#2));
                ##expr#0 := $Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#2)]): DatatypeType;
                // assume allocatedness for argument to function
                assume $IsAlloc(##expr#0, Tclass.M3.Expression(), $Heap);
                assume M3.__default.Value#canCall($Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#2)]): DatatypeType);
            }
        }

        // End Comprehension WF check
        assume {:id "id2315"} M3.__default.ValidEnv(env#0)
           == (forall id#3: DatatypeType :: 
            { $Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#3)]): DatatypeType } 
              { Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#3)) } 
            $Is(id#3, Tclass.M3.Identifier())
               ==> 
              Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#3))
               ==> M3.__default.Value($Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#3)]): DatatypeType));
        assume (forall id#3: DatatypeType :: 
          { $Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#3)]): DatatypeType } 
            { Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#3)) } 
          $Is(id#3, Tclass.M3.Identifier())
             ==> M3.Env.EnvCons_q(env#0)
               && (Set#IsMember(Map#Domain(M3.Env.m(env#0)), $Box(id#3))
                 ==> M3.Env.EnvCons_q(env#0)
                   && M3.__default.Value#canCall($Unbox(Map#Elements(M3.Env.m(env#0))[$Box(id#3)]): DatatypeType)));
        // CheckWellformedWithResult: any expression
        assume $Is(M3.__default.ValidEnv(env#0), TBool);
        return;

        assume false;
    }
}



// function declaration for M3._default.SetSt
function M3.__default.SetSt(p#0: DatatypeType, a#0: DatatypeType, st#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.SetSt
axiom 2 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, a#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.SetSt(p#0, a#0, st#0) } 
    M3.__default.SetSt#canCall(p#0, a#0, st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(a#0, Tclass.M3.Artifact())
           && $Is(st#0, Tclass.M3.State()))
       ==> $Is(M3.__default.SetSt(p#0, a#0, st#0), Tclass.M3.State()));
// definition axiom for M3.__default.SetSt (revealed)
axiom {:id "id2316"} 2 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, a#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.SetSt(p#0, a#0, st#0) } 
    M3.__default.SetSt#canCall(p#0, a#0, st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(a#0, Tclass.M3.Artifact())
           && $Is(st#0, Tclass.M3.State()))
       ==> M3.State.StateCons_q(st#0)
         && M3.__default.SetSt(p#0, a#0, st#0)
           == #M3.State.StateCons(Map#Build(M3.State.m(st#0), $Box(p#0), $Box(a#0))));
// definition axiom for M3.__default.SetSt for decreasing-related literals (revealed)
axiom {:id "id2317"} 2 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, a#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.SetSt(p#0, a#0, Lit(st#0)) } 
    M3.__default.SetSt#canCall(p#0, a#0, Lit(st#0))
         || (2 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(a#0, Tclass.M3.Artifact())
           && $Is(st#0, Tclass.M3.State()))
       ==> M3.State.StateCons_q(Lit(st#0))
         && M3.__default.SetSt(p#0, a#0, Lit(st#0))
           == #M3.State.StateCons(Map#Build(Lit(M3.State.m(Lit(st#0))), $Box(p#0), $Box(a#0))));
// definition axiom for M3.__default.SetSt for all literals (revealed)
axiom {:id "id2318"} 2 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, a#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.SetSt(Lit(p#0), Lit(a#0), Lit(st#0)) } 
    M3.__default.SetSt#canCall(Lit(p#0), Lit(a#0), Lit(st#0))
         || (2 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(a#0, Tclass.M3.Artifact())
           && $Is(st#0, Tclass.M3.State()))
       ==> M3.State.StateCons_q(Lit(st#0))
         && M3.__default.SetSt(Lit(p#0), Lit(a#0), Lit(st#0))
           == #M3.State.StateCons(Map#Build(Lit(M3.State.m(Lit(st#0))), $Box(Lit(p#0)), $Box(Lit(a#0)))));
}

function M3.__default.SetSt#canCall(p#0: DatatypeType, a#0: DatatypeType, st#0: DatatypeType) : bool;

function M3.__default.SetSt#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.SetSt
axiom (forall p#0: DatatypeType, a#0: DatatypeType, st#0: DatatypeType :: 
  { M3.__default.SetSt#requires(p#0, a#0, st#0) } 
  $Is(p#0, Tclass.M3.Path())
       && $Is(a#0, Tclass.M3.Artifact())
       && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.SetSt#requires(p#0, a#0, st#0) == true);

procedure {:verboseName "M3.SetSt (well-formedness)"} CheckWellformed$$M3.__default.SetSt(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()), 
    a#0: DatatypeType where $Is(a#0, Tclass.M3.Artifact()), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.Restrict
function M3.__default.Restrict(paths#0: Set, st#0: DatatypeType) : Map
uses {
// consequence axiom for M3.__default.Restrict
axiom 4 <= $FunctionContextHeight
   ==> (forall paths#0: Set, st#0: DatatypeType :: 
    { M3.__default.Restrict(paths#0, st#0) } 
    M3.__default.Restrict#canCall(paths#0, st#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(paths#0, TSet(Tclass.M3.Path()))
           && $Is(st#0, Tclass.M3.State()))
       ==> $Is(M3.__default.Restrict(paths#0, st#0), 
        TMap(Tclass.M3.Path(), Tclass.M3.Artifact())));
// definition axiom for M3.__default.Restrict (revealed)
axiom {:id "id2320"} 4 <= $FunctionContextHeight
   ==> (forall paths#0: Set, st#0: DatatypeType :: 
    { M3.__default.Restrict(paths#0, st#0) } 
    M3.__default.Restrict#canCall(paths#0, st#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(paths#0, TSet(Tclass.M3.Path()))
           && $Is(st#0, Tclass.M3.State()))
       ==> (forall p#0: DatatypeType :: 
          { M3.__default.GetSt(p#0, st#0) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
            { Set#IsMember(paths#0, $Box(p#0)) } 
          $Is(p#0, Tclass.M3.Path())
             ==> (Set#IsMember(paths#0, $Box(p#0)) ==> M3.__default.DomSt#canCall(st#0))
               && (Set#IsMember(paths#0, $Box(p#0))
                   && Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
                 ==> M3.__default.GetSt#canCall(p#0, st#0)))
         && M3.__default.Restrict(paths#0, st#0)
           == Map#Glue(Set#FromBoogieMap((lambda $w#0: Box :: 
                $IsBox($w#0, Tclass.M3.Path())
                   && 
                  Set#IsMember(paths#0, $w#0)
                   && Set#IsMember(M3.__default.DomSt(st#0), $w#0))), 
            (lambda $w#0: Box :: $Box(M3.__default.GetSt($Unbox($w#0): DatatypeType, st#0))), 
            TMap(Tclass.M3.Path(), Tclass.M3.Artifact())));
// definition axiom for M3.__default.Restrict for all literals (revealed)
axiom {:id "id2321"} 4 <= $FunctionContextHeight
   ==> (forall paths#0: Set, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.Restrict(Lit(paths#0), Lit(st#0)) } 
    M3.__default.Restrict#canCall(Lit(paths#0), Lit(st#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(paths#0, TSet(Tclass.M3.Path()))
           && $Is(st#0, Tclass.M3.State()))
       ==> (forall p#0: DatatypeType :: 
          { M3.__default.GetSt(p#0, st#0) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
            { Set#IsMember(paths#0, $Box(p#0)) } 
          $Is(p#0, Tclass.M3.Path())
             ==> (Set#IsMember(Lit(paths#0), $Box(p#0))
                 ==> M3.__default.DomSt#canCall(Lit(st#0)))
               && (Set#IsMember(Lit(paths#0), $Box(p#0))
                   && Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#0))
                 ==> M3.__default.GetSt#canCall(p#0, Lit(st#0))))
         && M3.__default.Restrict(Lit(paths#0), Lit(st#0))
           == Map#Glue(Set#FromBoogieMap((lambda $w#1: Box :: 
                $IsBox($w#1, Tclass.M3.Path())
                   && 
                  Set#IsMember(Lit(paths#0), $w#1)
                   && Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $w#1))), 
            (lambda $w#1: Box :: 
              $Box(M3.__default.GetSt($Unbox($w#1): DatatypeType, Lit(st#0)))), 
            TMap(Tclass.M3.Path(), Tclass.M3.Artifact())));
}

function M3.__default.Restrict#canCall(paths#0: Set, st#0: DatatypeType) : bool;

function M3.__default.Restrict#requires(Set, DatatypeType) : bool;

// #requires axiom for M3.__default.Restrict
axiom (forall paths#0: Set, st#0: DatatypeType :: 
  { M3.__default.Restrict#requires(paths#0, st#0) } 
  $Is(paths#0, TSet(Tclass.M3.Path())) && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.Restrict#requires(paths#0, st#0) == true);

procedure {:verboseName "M3.Restrict (well-formedness)"} CheckWellformed$$M3.__default.Restrict(paths#0: Set where $Is(paths#0, TSet(Tclass.M3.Path())), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.RestrictMonotonicity (well-formedness)"} CheckWellFormed$$M3.__default.RestrictMonotonicity(paths#0: Set
       where $Is(paths#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(paths#0, TSet(Tclass.M3.Path()), $Heap), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.RestrictMonotonicity (call)"} Call$$M3.__default.RestrictMonotonicity(paths#0: Set
       where $Is(paths#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(paths#0, TSet(Tclass.M3.Path()), $Heap), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0));
  // user-defined preconditions
  requires {:id "id2326"} Set#Subset(paths#0, M3.__default.DomSt(st0#0));
  requires {:id "id2327"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0));
  requires {:id "id2328"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#0: DatatypeType :: 
        { M3.__default.GetSt(p#0, st0#0) } 
          { M3.__default.GetSt(p#0, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#0)) } 
        $Is(p#0, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#0))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#0, st1#0), M3.__default.GetSt(p#0, st0#0)));
  requires {:id "id2329"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#1: DatatypeType :: 
        { M3.__default.Oracle(p#1, st0#0) } 
          { M3.__default.GetSt(p#1, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#1)) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1)) } 
        $Is(p#1, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1))
             && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#1))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#1, st1#0), M3.__default.Oracle(p#1, st0#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.Restrict#canCall(paths#0, st0#0)
     && M3.__default.Restrict#canCall(paths#0, st1#0);
  ensures {:id "id2330"} Map#Equal(M3.__default.Restrict(paths#0, st0#0), M3.__default.Restrict(paths#0, st1#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.RestrictMonotonicity (correctness)"} Impl$$M3.__default.RestrictMonotonicity(paths#0: Set
       where $Is(paths#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(paths#0, TSet(Tclass.M3.Path()), $Heap), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id2331"} Set#Subset(paths#0, M3.__default.DomSt(st0#0));
  free requires {:id "id2332"} M3.__default.Extends#canCall(st0#0, st1#0)
     && 
    M3.__default.Extends(st0#0, st1#0)
     && 
    Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0))
     && (forall p#2: DatatypeType :: 
      { M3.__default.GetSt(p#2, st0#0) } 
        { M3.__default.GetSt(p#2, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#2)) } 
      $Is(p#2, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#2))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st1#0), M3.__default.GetSt(p#2, st0#0)))
     && (forall p#3: DatatypeType :: 
      { M3.__default.Oracle(p#3, st0#0) } 
        { M3.__default.GetSt(p#3, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#3)) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#3)) } 
      $Is(p#3, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#3))
           && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#3))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st1#0), M3.__default.Oracle(p#3, st0#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.Restrict#canCall(paths#0, st0#0)
     && M3.__default.Restrict#canCall(paths#0, st1#0);
  ensures {:id "id2333"} $_reverifyPost
     ==> Map#Equal(M3.__default.Restrict(paths#0, st0#0), M3.__default.Restrict(paths#0, st1#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.RestrictMonotonicity (correctness)"} Impl$$M3.__default.RestrictMonotonicity(paths#0: Set, st0#0: DatatypeType, st1#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: RestrictMonotonicity, Impl$$M3.__default.RestrictMonotonicity
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
}



// function declaration for M3._default.PickOne
function M3.__default.PickOne(M3._default.PickOne$T: Ty, s#0: Set) : Box
uses {
// consequence axiom for M3.__default.PickOne
axiom 0 <= $FunctionContextHeight
   ==> (forall M3._default.PickOne$T: Ty, s#0: Set :: 
    { M3.__default.PickOne(M3._default.PickOne$T, s#0) } 
    M3.__default.PickOne#canCall(M3._default.PickOne$T, s#0)
         || (0 < $FunctionContextHeight
           && 
          $Is(s#0, TSet(M3._default.PickOne$T))
           && !Set#Equal(s#0, Set#Empty(): Set))
       ==> $IsBox(M3.__default.PickOne(M3._default.PickOne$T, s#0), M3._default.PickOne$T));
// alloc consequence axiom for M3.__default.PickOne
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, M3._default.PickOne$T: Ty, s#0: Set :: 
    { $IsAllocBox(M3.__default.PickOne(M3._default.PickOne$T, s#0), M3._default.PickOne$T, $Heap) } 
    (M3.__default.PickOne#canCall(M3._default.PickOne$T, s#0)
           || (0 < $FunctionContextHeight
             && 
            $Is(s#0, TSet(M3._default.PickOne$T))
             && $IsAlloc(s#0, TSet(M3._default.PickOne$T), $Heap)
             && !Set#Equal(s#0, Set#Empty(): Set)))
         && $IsGoodHeap($Heap)
       ==> $IsAllocBox(M3.__default.PickOne(M3._default.PickOne$T, s#0), M3._default.PickOne$T, $Heap));
// definition axiom for M3.__default.PickOne (revealed)
axiom {:id "id2334"} 0 <= $FunctionContextHeight
   ==> (forall M3._default.PickOne$T: Ty, $Heap: Heap, s#0: Set :: 
    { M3.__default.PickOne(M3._default.PickOne$T, s#0), $IsGoodHeap($Heap) } 
    M3.__default.PickOne#canCall(M3._default.PickOne$T, s#0)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(s#0, TSet(M3._default.PickOne$T))
           && !Set#Equal(s#0, Set#Empty(): Set))
       ==> $let#27$canCall(M3._default.PickOne$T, s#0)
         && M3.__default.PickOne(M3._default.PickOne$T, s#0)
           == (var x#0 := $let#27_x(M3._default.PickOne$T, s#0); x#0));
// definition axiom for M3.__default.PickOne for all literals (revealed)
axiom {:id "id2335"} 0 <= $FunctionContextHeight
   ==> (forall M3._default.PickOne$T: Ty, $Heap: Heap, s#0: Set :: 
    {:weight 3} { M3.__default.PickOne(M3._default.PickOne$T, Lit(s#0)), $IsGoodHeap($Heap) } 
    M3.__default.PickOne#canCall(M3._default.PickOne$T, Lit(s#0))
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(s#0, TSet(M3._default.PickOne$T))
           && !Set#Equal(s#0, Set#Empty(): Set))
       ==> $let#27$canCall(M3._default.PickOne$T, Lit(s#0))
         && M3.__default.PickOne(M3._default.PickOne$T, Lit(s#0))
           == (var x#1 := $let#27_x(M3._default.PickOne$T, Lit(s#0)); x#1));
}

function M3.__default.PickOne#canCall(M3._default.PickOne$T: Ty, s#0: Set) : bool;

function M3.__default.PickOne#requires(Ty, Set) : bool;

// #requires axiom for M3.__default.PickOne
axiom (forall M3._default.PickOne$T: Ty, $Heap: Heap, s#0: Set :: 
  { M3.__default.PickOne#requires(M3._default.PickOne$T, s#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(s#0, TSet(M3._default.PickOne$T))
     ==> M3.__default.PickOne#requires(M3._default.PickOne$T, s#0)
       == !Set#Equal(s#0, Set#Empty(): Set));

function $let#27_x(M3._default.PickOne$T: Ty, s: Set) : Box;

function $let#27$canCall(M3._default.PickOne$T: Ty, s: Set) : bool;

axiom (forall M3._default.PickOne$T: Ty, s: Set :: 
  { $let#27_x(M3._default.PickOne$T, s) } 
  $let#27$canCall(M3._default.PickOne$T, s)
     ==> Set#IsMember(s, $let#27_x(M3._default.PickOne$T, s)));

procedure {:verboseName "M3.PickOne (well-formedness)"} CheckWellformed$$M3.__default.PickOne(M3._default.PickOne$T: Ty, s#0: Set where $Is(s#0, TSet(M3._default.PickOne$T)));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.WellFounded
function M3.__default.WellFounded(p#0: DatatypeType) : bool
uses {
// definition axiom for M3.__default.WellFounded (revealed)
axiom {:id "id2339"} 3 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType :: 
    { M3.__default.WellFounded(p#0) } 
    M3.__default.WellFounded#canCall(p#0)
         || (3 < $FunctionContextHeight && $Is(p#0, Tclass.M3.Path()))
       ==> (forall cert#0: DatatypeType :: 
          { M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0) } 
          $Is(cert#0, Tclass.M3.WFCertificate())
             ==> M3.__default.CheckWellFounded#canCall(p#0, cert#0))
         && M3.__default.WellFounded(p#0)
           == (exists cert#0: DatatypeType :: 
            { M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0) } 
            $Is(cert#0, Tclass.M3.WFCertificate())
               && M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)));
// definition axiom for M3.__default.WellFounded for all literals (revealed)
axiom {:id "id2340"} 3 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType :: 
    {:weight 3} { M3.__default.WellFounded(Lit(p#0)) } 
    M3.__default.WellFounded#canCall(Lit(p#0))
         || (3 < $FunctionContextHeight && $Is(p#0, Tclass.M3.Path()))
       ==> (forall cert#1: DatatypeType :: 
          { M3.__default.CheckWellFounded($LS($LZ), p#0, cert#1) } 
          $Is(cert#1, Tclass.M3.WFCertificate())
             ==> M3.__default.CheckWellFounded#canCall(Lit(p#0), cert#1))
         && M3.__default.WellFounded(Lit(p#0))
           == (exists cert#1: DatatypeType :: 
            { M3.__default.CheckWellFounded($LS($LZ), p#0, cert#1) } 
            $Is(cert#1, Tclass.M3.WFCertificate())
               && M3.__default.CheckWellFounded($LS($LZ), Lit(p#0), cert#1)));
}

function M3.__default.WellFounded#canCall(p#0: DatatypeType) : bool;

function M3.__default.WellFounded#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.WellFounded
axiom (forall p#0: DatatypeType :: 
  { M3.__default.WellFounded#requires(p#0) } 
  $Is(p#0, Tclass.M3.Path()) ==> M3.__default.WellFounded#requires(p#0) == true);

function Tclass.M3.WFCertificate() : Ty
uses {
// Tclass.M3.WFCertificate Tag
axiom Tag(Tclass.M3.WFCertificate()) == Tagclass.M3.WFCertificate
   && TagFamily(Tclass.M3.WFCertificate()) == tytagFamily$WFCertificate;
}

const unique Tagclass.M3.WFCertificate: TyTag;

// Box/unbox axiom for Tclass.M3.WFCertificate
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.WFCertificate()) } 
  $IsBox(bx, Tclass.M3.WFCertificate())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.WFCertificate()));

procedure {:verboseName "M3.WellFounded (well-formedness)"} CheckWellformed$$M3.__default.WellFounded(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.CheckWellFounded
function M3.__default.CheckWellFounded($ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType) : bool
uses {
// definition axiom for M3.__default.CheckWellFounded (revealed)
axiom {:id "id2342"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType :: 
    { M3.__default.CheckWellFounded($LS($ly), p#0, cert#0) } 
    M3.__default.CheckWellFounded#canCall(p#0, cert#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate()))
       ==> $IsA#M3.Path(M3.WFCertificate.p(cert#0))
         && $IsA#M3.Path(p#0)
         && M3.WFCertificate.Cert_q(cert#0)
         && (M3.Path#Equal(M3.WFCertificate.p(cert#0), p#0)
           ==> (forall d#0: DatatypeType :: 
              { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#0)) } 
              $Is(d#0, Tclass.M3.Path())
                 ==> M3.__default.LocInv__Deps#canCall(p#0)
                   && (Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#0))
                     ==> (forall c#0: DatatypeType :: 
                      { M3.WFCertificate.p(c#0) } 
                        { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#0)) } 
                      $Is(c#0, Tclass.M3.WFCertificate())
                         ==> M3.WFCertificate.Cert_q(cert#0)
                           && (Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#0))
                             ==> $IsA#M3.Path(M3.WFCertificate.p(c#0))
                               && $IsA#M3.Path(d#0)
                               && M3.WFCertificate.Cert_q(c#0)))))
             && ((forall d#0: DatatypeType :: 
                { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#0)) } 
                $Is(d#0, Tclass.M3.Path())
                   ==> 
                  Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#0))
                   ==> (exists c#0: DatatypeType :: 
                    { M3.WFCertificate.p(c#0) } 
                      { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#0)) } 
                    $Is(c#0, Tclass.M3.WFCertificate())
                       && 
                      Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#0))
                       && M3.Path#Equal(M3.WFCertificate.p(c#0), d#0)))
               ==> (forall c#1: DatatypeType :: 
                { M3.WFCertificate.p(c#1) } 
                  { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#1)) } 
                $Is(c#1, Tclass.M3.WFCertificate())
                   ==> M3.WFCertificate.Cert_q(cert#0)
                     && (Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#1))
                       ==> M3.WFCertificate.Cert_q(c#1)
                         && M3.__default.CheckWellFounded#canCall(M3.WFCertificate.p(c#1), c#1)))))
         && M3.__default.CheckWellFounded($LS($ly), p#0, cert#0)
           == (
            M3.Path#Equal(M3.WFCertificate.p(cert#0), p#0)
             && (forall d#0: DatatypeType :: 
              { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#0)) } 
              $Is(d#0, Tclass.M3.Path())
                 ==> 
                Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#0))
                 ==> (exists c#0: DatatypeType :: 
                  { M3.WFCertificate.p(c#0) } 
                    { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#0)) } 
                  $Is(c#0, Tclass.M3.WFCertificate())
                     && 
                    Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#0))
                     && M3.Path#Equal(M3.WFCertificate.p(c#0), d#0)))
             && (forall c#1: DatatypeType :: 
              { M3.WFCertificate.p(c#1) } 
                { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#1)) } 
              $Is(c#1, Tclass.M3.WFCertificate())
                 ==> 
                Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#1))
                 ==> M3.__default.CheckWellFounded($ly, M3.WFCertificate.p(c#1), c#1))));
// definition axiom for M3.__default.CheckWellFounded for decreasing-related literals (revealed)
axiom {:id "id2343"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType :: 
    {:weight 3} { M3.__default.CheckWellFounded($LS($ly), p#0, Lit(cert#0)) } 
    M3.__default.CheckWellFounded#canCall(p#0, Lit(cert#0))
         || (2 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate()))
       ==> $IsA#M3.Path(Lit(M3.WFCertificate.p(Lit(cert#0))))
         && $IsA#M3.Path(p#0)
         && M3.WFCertificate.Cert_q(Lit(cert#0))
         && (M3.Path#Equal(M3.WFCertificate.p(Lit(cert#0)), p#0)
           ==> (forall d#1: DatatypeType :: 
              { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1)) } 
              $Is(d#1, Tclass.M3.Path())
                 ==> M3.__default.LocInv__Deps#canCall(p#0)
                   && (Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1))
                     ==> (forall c#2: DatatypeType :: 
                      { M3.WFCertificate.p(c#2) } 
                        { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#2)) } 
                      $Is(c#2, Tclass.M3.WFCertificate())
                         ==> M3.WFCertificate.Cert_q(Lit(cert#0))
                           && (Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#2))
                             ==> $IsA#M3.Path(M3.WFCertificate.p(c#2))
                               && $IsA#M3.Path(d#1)
                               && M3.WFCertificate.Cert_q(c#2)))))
             && ((forall d#1: DatatypeType :: 
                { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1)) } 
                $Is(d#1, Tclass.M3.Path())
                   ==> 
                  Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1))
                   ==> (exists c#2: DatatypeType :: 
                    { M3.WFCertificate.p(c#2) } 
                      { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#2)) } 
                    $Is(c#2, Tclass.M3.WFCertificate())
                       && 
                      Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#2))
                       && M3.Path#Equal(M3.WFCertificate.p(c#2), d#1)))
               ==> (forall c#3: DatatypeType :: 
                { M3.WFCertificate.p(c#3) } 
                  { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#3)) } 
                $Is(c#3, Tclass.M3.WFCertificate())
                   ==> M3.WFCertificate.Cert_q(Lit(cert#0))
                     && (Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#3))
                       ==> M3.WFCertificate.Cert_q(c#3)
                         && M3.__default.CheckWellFounded#canCall(M3.WFCertificate.p(c#3), c#3)))))
         && M3.__default.CheckWellFounded($LS($ly), p#0, Lit(cert#0))
           == (
            M3.Path#Equal(M3.WFCertificate.p(Lit(cert#0)), p#0)
             && (forall d#1: DatatypeType :: 
              { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1)) } 
              $Is(d#1, Tclass.M3.Path())
                 ==> 
                Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1))
                 ==> (exists c#2: DatatypeType :: 
                  { M3.WFCertificate.p(c#2) } 
                    { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#2)) } 
                  $Is(c#2, Tclass.M3.WFCertificate())
                     && 
                    Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#2))
                     && M3.Path#Equal(M3.WFCertificate.p(c#2), d#1)))
             && (forall c#3: DatatypeType :: 
              { M3.WFCertificate.p(c#3) } 
                { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#3)) } 
              $Is(c#3, Tclass.M3.WFCertificate())
                 ==> 
                Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#3))
                 ==> M3.__default.CheckWellFounded($LS($ly), M3.WFCertificate.p(c#3), c#3))));
// definition axiom for M3.__default.CheckWellFounded for all literals (revealed)
axiom {:id "id2344"} 2 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType :: 
    {:weight 3} { M3.__default.CheckWellFounded($LS($ly), Lit(p#0), Lit(cert#0)) } 
    M3.__default.CheckWellFounded#canCall(Lit(p#0), Lit(cert#0))
         || (2 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate()))
       ==> $IsA#M3.Path(Lit(M3.WFCertificate.p(Lit(cert#0))))
         && $IsA#M3.Path(Lit(p#0))
         && M3.WFCertificate.Cert_q(Lit(cert#0))
         && (M3.Path#Equal(M3.WFCertificate.p(Lit(cert#0)), p#0)
           ==> (forall d#2: DatatypeType :: 
              { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
              $Is(d#2, Tclass.M3.Path())
                 ==> M3.__default.LocInv__Deps#canCall(Lit(p#0))
                   && (Set#IsMember(Lit(M3.__default.LocInv__Deps(Lit(p#0))), $Box(d#2))
                     ==> (forall c#4: DatatypeType :: 
                      { M3.WFCertificate.p(c#4) } 
                        { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#4)) } 
                      $Is(c#4, Tclass.M3.WFCertificate())
                         ==> M3.WFCertificate.Cert_q(Lit(cert#0))
                           && (Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#4))
                             ==> $IsA#M3.Path(M3.WFCertificate.p(c#4))
                               && $IsA#M3.Path(d#2)
                               && M3.WFCertificate.Cert_q(c#4)))))
             && ((forall d#2: DatatypeType :: 
                { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
                $Is(d#2, Tclass.M3.Path())
                   ==> 
                  Set#IsMember(Lit(M3.__default.LocInv__Deps(Lit(p#0))), $Box(d#2))
                   ==> (exists c#4: DatatypeType :: 
                    { M3.WFCertificate.p(c#4) } 
                      { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#4)) } 
                    $Is(c#4, Tclass.M3.WFCertificate())
                       && 
                      Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#4))
                       && M3.Path#Equal(M3.WFCertificate.p(c#4), d#2)))
               ==> (forall c#5: DatatypeType :: 
                { M3.WFCertificate.p(c#5) } 
                  { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#5)) } 
                $Is(c#5, Tclass.M3.WFCertificate())
                   ==> M3.WFCertificate.Cert_q(Lit(cert#0))
                     && (Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#5))
                       ==> M3.WFCertificate.Cert_q(c#5)
                         && M3.__default.CheckWellFounded#canCall(M3.WFCertificate.p(c#5), c#5)))))
         && M3.__default.CheckWellFounded($LS($ly), Lit(p#0), Lit(cert#0))
           == (
            M3.Path#Equal(M3.WFCertificate.p(Lit(cert#0)), p#0)
             && (forall d#2: DatatypeType :: 
              { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
              $Is(d#2, Tclass.M3.Path())
                 ==> 
                Set#IsMember(Lit(M3.__default.LocInv__Deps(Lit(p#0))), $Box(d#2))
                 ==> (exists c#4: DatatypeType :: 
                  { M3.WFCertificate.p(c#4) } 
                    { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#4)) } 
                  $Is(c#4, Tclass.M3.WFCertificate())
                     && 
                    Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#4))
                     && M3.Path#Equal(M3.WFCertificate.p(c#4), d#2)))
             && (forall c#5: DatatypeType :: 
              { M3.WFCertificate.p(c#5) } 
                { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#5)) } 
              $Is(c#5, Tclass.M3.WFCertificate())
                 ==> 
                Set#IsMember(Lit(M3.WFCertificate.certs(Lit(cert#0))), $Box(c#5))
                 ==> M3.__default.CheckWellFounded($LS($ly), M3.WFCertificate.p(c#5), c#5))));
}

function M3.__default.CheckWellFounded#canCall(p#0: DatatypeType, cert#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType :: 
  { M3.__default.CheckWellFounded($LS($ly), p#0, cert#0) } 
  M3.__default.CheckWellFounded($LS($ly), p#0, cert#0)
     == M3.__default.CheckWellFounded($ly, p#0, cert#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType :: 
  { M3.__default.CheckWellFounded(AsFuelBottom($ly), p#0, cert#0) } 
  M3.__default.CheckWellFounded($ly, p#0, cert#0)
     == M3.__default.CheckWellFounded($LZ, p#0, cert#0));

function M3.__default.CheckWellFounded#requires(LayerType, DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.CheckWellFounded
axiom (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType :: 
  { M3.__default.CheckWellFounded#requires($ly, p#0, cert#0) } 
  $Is(p#0, Tclass.M3.Path()) && $Is(cert#0, Tclass.M3.WFCertificate())
     ==> M3.__default.CheckWellFounded#requires($ly, p#0, cert#0) == true);

procedure {:verboseName "M3.CheckWellFounded (well-formedness)"} CheckWellformed$$M3.__default.CheckWellFounded(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()), 
    cert#0: DatatypeType where $Is(cert#0, Tclass.M3.WFCertificate()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.exec
function M3.__default.exec(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.exec
axiom 5 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    { M3.__default.exec(cmd#0, deps#0, exps#0, st#0) } 
    M3.__default.exec#canCall(cmd#0, deps#0, exps#0, st#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> $Is(M3.__default.exec(cmd#0, deps#0, exps#0, st#0), 
        Tclass.M3.Tuple(TSet(Tclass.M3.Path()), Tclass.M3.State())));
// definition axiom for M3.__default.exec (revealed)
axiom {:id "id2347"} 5 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    { M3.__default.exec(cmd#0, deps#0, exps#0, st#0) } 
    M3.__default.exec#canCall(cmd#0, deps#0, exps#0, st#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> M3.__default.Restrict#canCall(deps#0, st#0)
         && M3.__default.execOne#canCall(cmd#0, deps#0, M3.__default.Restrict(deps#0, st#0), exps#0, st#0)
         && M3.__default.exec(cmd#0, deps#0, exps#0, st#0)
           == M3.__default.execOne($LS($LZ), cmd#0, deps#0, M3.__default.Restrict(deps#0, st#0), exps#0, st#0));
// definition axiom for M3.__default.exec for decreasing-related literals (revealed)
axiom {:id "id2348"} 5 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0) } 
    M3.__default.exec#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> M3.__default.Restrict#canCall(Lit(deps#0), st#0)
         && M3.__default.execOne#canCall(Lit(cmd#0), 
          Lit(deps#0), 
          M3.__default.Restrict(Lit(deps#0), st#0), 
          Lit(exps#0), 
          st#0)
         && M3.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
           == M3.__default.execOne($LS($LZ), 
            Lit(cmd#0), 
            Lit(deps#0), 
            M3.__default.Restrict(Lit(deps#0), st#0), 
            Lit(exps#0), 
            st#0));
// definition axiom for M3.__default.exec for all literals (revealed)
axiom {:id "id2349"} 5 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0)) } 
    M3.__default.exec#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
         || (5 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> M3.__default.Restrict#canCall(Lit(deps#0), Lit(st#0))
         && M3.__default.execOne#canCall(Lit(cmd#0), 
          Lit(deps#0), 
          Lit(M3.__default.Restrict(Lit(deps#0), Lit(st#0))), 
          Lit(exps#0), 
          Lit(st#0))
         && M3.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
           == Lit(M3.__default.execOne($LS($LZ), 
              Lit(cmd#0), 
              Lit(deps#0), 
              Lit(M3.__default.Restrict(Lit(deps#0), Lit(st#0))), 
              Lit(exps#0), 
              Lit(st#0))));
}

function M3.__default.exec#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType) : bool;

function Tclass.M3.Tuple(Ty, Ty) : Ty;

const unique Tagclass.M3.Tuple: TyTag;

// Tclass.M3.Tuple Tag
axiom (forall M3.Tuple$A: Ty, M3.Tuple$B: Ty :: 
  { Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B) } 
  Tag(Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B)) == Tagclass.M3.Tuple
     && TagFamily(Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B)) == tytagFamily$Tuple);

function Tclass.M3.Tuple_0(Ty) : Ty;

// Tclass.M3.Tuple injectivity 0
axiom (forall M3.Tuple$A: Ty, M3.Tuple$B: Ty :: 
  { Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B) } 
  Tclass.M3.Tuple_0(Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B)) == M3.Tuple$A);

function Tclass.M3.Tuple_1(Ty) : Ty;

// Tclass.M3.Tuple injectivity 1
axiom (forall M3.Tuple$A: Ty, M3.Tuple$B: Ty :: 
  { Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B) } 
  Tclass.M3.Tuple_1(Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B)) == M3.Tuple$B);

// Box/unbox axiom for Tclass.M3.Tuple
axiom (forall M3.Tuple$A: Ty, M3.Tuple$B: Ty, bx: Box :: 
  { $IsBox(bx, Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B)) } 
  $IsBox(bx, Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B)));

function M3.__default.exec#requires(Seq, Set, Set, DatatypeType) : bool;

// #requires axiom for M3.__default.exec
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
  { M3.__default.exec#requires(cmd#0, deps#0, exps#0, st#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M3.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.exec#requires(cmd#0, deps#0, exps#0, st#0) == true);

procedure {:verboseName "M3.exec (well-formedness)"} CheckWellformed$$M3.__default.exec(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M3.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.execOne
function M3.__default.execOne($ly: LayerType, 
    cmd#0: Seq, 
    deps#0: Set, 
    restrictedState#0: Map, 
    exps#0: Set, 
    st#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for M3.__default.execOne
axiom 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      cmd#0: Seq, 
      deps#0: Set, 
      restrictedState#0: Map, 
      exps#0: Set, 
      st#0: DatatypeType :: 
    { M3.__default.execOne($ly, cmd#0, deps#0, restrictedState#0, exps#0, st#0) } 
    M3.__default.execOne#canCall(cmd#0, deps#0, restrictedState#0, exps#0, st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> $Is(M3.__default.execOne($ly, cmd#0, deps#0, restrictedState#0, exps#0, st#0), 
        Tclass.M3.Tuple(TSet(Tclass.M3.Path()), Tclass.M3.State())));
// definition axiom for M3.__default.execOne (revealed)
axiom {:id "id2351"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      cmd#0: Seq, 
      deps#0: Set, 
      restrictedState#0: Map, 
      exps#0: Set, 
      st#0: DatatypeType :: 
    { M3.__default.execOne($LS($ly), cmd#0, deps#0, restrictedState#0, exps#0, st#0) } 
    M3.__default.execOne#canCall(cmd#0, deps#0, restrictedState#0, exps#0, st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> (!Set#Equal(exps#0, Set#Empty(): Set)
           ==> M3.__default.PickOne#canCall(TSeq(TChar), exps#0)
             && (var exp#0 := $Unbox(M3.__default.PickOne(TSeq(TChar), exps#0)): Seq; 
              M3.__default.execOne#canCall(cmd#0, 
                  deps#0, 
                  restrictedState#0, 
                  Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#0))), 
                  st#0)
                 && (var st'#0 := $Unbox(M3.Tuple.snd(M3.__default.execOne($ly, 
                          cmd#0, 
                          deps#0, 
                          restrictedState#0, 
                          Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#0))), 
                          st#0))): DatatypeType; 
                  M3.__default.Loc#canCall(cmd#0, deps#0, exp#0)
                     && (var p#0 := M3.__default.Loc(cmd#0, deps#0, exp#0); 
                      M3.__default.DomSt#canCall(st'#0)
                         && (!Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#0))
                           ==> M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#0)
                             && M3.__default.SetSt#canCall(p#0, M3.__default.RunTool(cmd#0, restrictedState#0, exp#0), st'#0))))))
         && M3.__default.execOne($LS($ly), cmd#0, deps#0, restrictedState#0, exps#0, st#0)
           == (if Set#Equal(exps#0, Set#Empty(): Set)
             then #M3.Tuple.Pair($Box(Lit(Set#Empty(): Set)), $Box(st#0))
             else (var exp#0 := $Unbox(M3.__default.PickOne(TSeq(TChar), exps#0)): Seq; 
              (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.execOne($ly, 
                        cmd#0, 
                        deps#0, 
                        restrictedState#0, 
                        Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#0))), 
                        st#0))): Set, 
                  $Unbox(M3.Tuple.snd(M3.__default.execOne($ly, 
                        cmd#0, 
                        deps#0, 
                        restrictedState#0, 
                        Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#0))), 
                        st#0))): DatatypeType; 
                (var p#0 := M3.__default.Loc(cmd#0, deps#0, exp#0); 
                  #M3.Tuple.Pair($Box(Set#Union(paths#0, Set#UnionOne(Set#Empty(): Set, $Box(p#0)))), 
                    $Box((if Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#0))
                         then st'#0
                         else M3.__default.SetSt(p#0, M3.__default.RunTool(cmd#0, restrictedState#0, exp#0), st'#0)))))))));
// definition axiom for M3.__default.execOne for all literals (revealed)
axiom {:id "id2352"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      cmd#0: Seq, 
      deps#0: Set, 
      restrictedState#0: Map, 
      exps#0: Set, 
      st#0: DatatypeType :: 
    {:weight 3} { M3.__default.execOne($LS($ly), 
        Lit(cmd#0), 
        Lit(deps#0), 
        Lit(restrictedState#0), 
        Lit(exps#0), 
        Lit(st#0)) } 
    M3.__default.execOne#canCall(Lit(cmd#0), Lit(deps#0), Lit(restrictedState#0), Lit(exps#0), Lit(st#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> (!Set#Equal(exps#0, Set#Empty(): Set)
           ==> M3.__default.PickOne#canCall(TSeq(TChar), Lit(exps#0))
             && (var exp#1 := Lit($Unbox(M3.__default.PickOne(TSeq(TChar), Lit(exps#0))): Seq); 
              M3.__default.execOne#canCall(Lit(cmd#0), 
                  Lit(deps#0), 
                  Lit(restrictedState#0), 
                  Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1))), 
                  Lit(st#0))
                 && (var st'#1 := $Unbox(M3.Tuple.snd(M3.__default.execOne($LS($ly), 
                          Lit(cmd#0), 
                          Lit(deps#0), 
                          Lit(restrictedState#0), 
                          Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1))), 
                          Lit(st#0)))): DatatypeType; 
                  M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), exp#1)
                     && (var p#1 := M3.__default.Loc(Lit(cmd#0), Lit(deps#0), exp#1); 
                      M3.__default.DomSt#canCall(st'#1)
                         && (!Set#IsMember(M3.__default.DomSt(st'#1), $Box(p#1))
                           ==> M3.__default.RunTool#canCall(Lit(cmd#0), Lit(restrictedState#0), exp#1)
                             && M3.__default.SetSt#canCall(p#1, M3.__default.RunTool(Lit(cmd#0), Lit(restrictedState#0), exp#1), st'#1))))))
         && M3.__default.execOne($LS($ly), 
            Lit(cmd#0), 
            Lit(deps#0), 
            Lit(restrictedState#0), 
            Lit(exps#0), 
            Lit(st#0))
           == (if Set#Equal(exps#0, Set#Empty(): Set)
             then #M3.Tuple.Pair($Box(Lit(Set#Empty(): Set)), $Box(Lit(st#0)))
             else (var exp#1 := Lit($Unbox(M3.__default.PickOne(TSeq(TChar), Lit(exps#0))): Seq); 
              (var paths#1, st'#1 := $Unbox(M3.Tuple.fst(M3.__default.execOne($LS($ly), 
                        Lit(cmd#0), 
                        Lit(deps#0), 
                        Lit(restrictedState#0), 
                        Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1))), 
                        Lit(st#0)))): Set, 
                  $Unbox(M3.Tuple.snd(M3.__default.execOne($LS($ly), 
                        Lit(cmd#0), 
                        Lit(deps#0), 
                        Lit(restrictedState#0), 
                        Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1))), 
                        Lit(st#0)))): DatatypeType; 
                (var p#1 := Lit(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), exp#1)); 
                  #M3.Tuple.Pair($Box(Set#Union(paths#1, Set#UnionOne(Set#Empty(): Set, $Box(p#1)))), 
                    $Box((if Set#IsMember(M3.__default.DomSt(st'#1), $Box(p#1))
                         then st'#1
                         else M3.__default.SetSt(p#1, Lit(M3.__default.RunTool(Lit(cmd#0), Lit(restrictedState#0), exp#1)), st'#1)))))))));
}

function M3.__default.execOne#canCall(cmd#0: Seq, deps#0: Set, restrictedState#0: Map, exps#0: Set, st#0: DatatypeType)
   : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, 
    cmd#0: Seq, 
    deps#0: Set, 
    restrictedState#0: Map, 
    exps#0: Set, 
    st#0: DatatypeType :: 
  { M3.__default.execOne($LS($ly), cmd#0, deps#0, restrictedState#0, exps#0, st#0) } 
  M3.__default.execOne($LS($ly), cmd#0, deps#0, restrictedState#0, exps#0, st#0)
     == M3.__default.execOne($ly, cmd#0, deps#0, restrictedState#0, exps#0, st#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, 
    cmd#0: Seq, 
    deps#0: Set, 
    restrictedState#0: Map, 
    exps#0: Set, 
    st#0: DatatypeType :: 
  { M3.__default.execOne(AsFuelBottom($ly), cmd#0, deps#0, restrictedState#0, exps#0, st#0) } 
  M3.__default.execOne($ly, cmd#0, deps#0, restrictedState#0, exps#0, st#0)
     == M3.__default.execOne($LZ, cmd#0, deps#0, restrictedState#0, exps#0, st#0));

function M3.__default.execOne#requires(LayerType, Seq, Set, Map, Set, DatatypeType) : bool;

// #requires axiom for M3.__default.execOne
axiom (forall $ly: LayerType, 
    cmd#0: Seq, 
    deps#0: Set, 
    restrictedState#0: Map, 
    exps#0: Set, 
    st#0: DatatypeType :: 
  { M3.__default.execOne#requires($ly, cmd#0, deps#0, restrictedState#0, exps#0, st#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M3.Path()))
       && $Is(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.execOne#requires($ly, cmd#0, deps#0, restrictedState#0, exps#0, st#0)
       == true);

procedure {:verboseName "M3.execOne (well-formedness)"} CheckWellformed$$M3.__default.execOne(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M3.Path())), 
    restrictedState#0: Map
       where $Is(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.ExecProperty (well-formedness)"} CheckWellFormed$$M3.__default.ExecProperty(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    exps#0: Set
       where $Is(exps#0, TSet(TSeq(TChar))) && $IsAlloc(exps#0, TSet(TSeq(TChar)), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  free requires 11 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.ExecProperty (call)"} Call$$M3.__default.ExecProperty(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    exps#0: Set
       where $Is(exps#0, TSet(TSeq(TChar))) && $IsAlloc(exps#0, TSet(TSeq(TChar)), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  // user-defined preconditions
  requires {:id "id2368"} M3.__default.ValidState#canCall(st#0)
     ==> M3.__default.ValidState(st#0)
       || (forall p#0: DatatypeType :: 
        { M3.__default.WellFounded(p#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
        $Is(p#0, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
           ==> M3.__default.WellFounded(p#0));
  requires {:id "id2369"} Set#Subset(deps#0, M3.__default.DomSt(st#0));
  requires {:id "id2370"} M3.__default.Pre#canCall(cmd#0, deps#0, exps#0, st#0)
     ==> M3.__default.Pre(cmd#0, deps#0, exps#0, st#0)
       || (forall e#0: Seq :: 
        { M3.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
        $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(exps#0, $Box(e#0))
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#0)))
           ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#0), st#0), 
            M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#0), st#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.exec#canCall(cmd#0, deps#0, exps#0, st#0)
     && (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
        $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
      M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> M3.__default.Extends#canCall(st#0, st'#0)
             && (M3.__default.Extends(st#0, st'#0)
               ==> M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths#0)
                 && (M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0)
                   ==> M3.__default.Post#canCall(cmd#0, deps#0, exps#0, st'#0)))));
  free ensures {:id "id2371"} (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
      $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
    M3.__default.ValidState#canCall(st'#0)
       && 
      M3.__default.ValidState(st'#0)
       && (forall p#1: DatatypeType :: 
        { M3.__default.WellFounded(p#1) } 
          { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1)) } 
        $Is(p#1, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1))
           ==> M3.__default.WellFounded(p#1)));
  free ensures {:id "id2372"} (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
      $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
    M3.__default.Extends#canCall(st#0, st'#0)
       && 
      M3.__default.Extends(st#0, st'#0)
       && 
      Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0))
       && (forall p#2: DatatypeType :: 
        { M3.__default.GetSt(p#2, st#0) } 
          { M3.__default.GetSt(p#2, st'#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
        $Is(p#2, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st'#0), M3.__default.GetSt(p#2, st#0)))
       && (forall p#3: DatatypeType :: 
        { M3.__default.Oracle(p#3, st#0) } 
          { M3.__default.GetSt(p#3, st'#0) } 
          { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3)) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) } 
        $Is(p#3, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3))
             && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st'#0), M3.__default.Oracle(p#3, st#0))));
  free ensures {:id "id2373"} (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
      $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
    M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths#0)
       && 
      M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0)
       && (forall e#1: Seq :: 
        { M3.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
        $Is(e#1, TSeq(TChar))
           ==> 
          Set#IsMember(exps#0, $Box(e#1))
           ==> Set#IsMember(paths#0, $Box(M3.__default.Loc(cmd#0, deps#0, e#1)))));
  free ensures {:id "id2374"} (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
      $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
    M3.__default.Post#canCall(cmd#0, deps#0, exps#0, st'#0)
       && 
      M3.__default.Post(cmd#0, deps#0, exps#0, st'#0)
       && (forall e#2: Seq :: 
        { M3.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
        $Is(e#2, TSeq(TChar))
           ==> (Set#IsMember(exps#0, $Box(e#2))
               ==> Set#IsMember(M3.__default.DomSt(st'#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#2))))
             && (Set#IsMember(exps#0, $Box(e#2))
               ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#2), st'#0), 
                M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#2), st'#0)))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.ExecProperty (correctness)"} Impl$$M3.__default.ExecProperty(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    exps#0: Set
       where $Is(exps#0, TSet(TSeq(TChar))) && $IsAlloc(exps#0, TSet(TSeq(TChar)), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0))
   returns ($_reverifyPost: bool);
  free requires 11 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2375"} M3.__default.ValidState#canCall(st#0)
     && 
    M3.__default.ValidState(st#0)
     && (forall p#4: DatatypeType :: 
      { M3.__default.WellFounded(p#4) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4)) } 
      $Is(p#4, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4))
         ==> M3.__default.WellFounded(p#4));
  requires {:id "id2376"} Set#Subset(deps#0, M3.__default.DomSt(st#0));
  free requires {:id "id2377"} M3.__default.Pre#canCall(cmd#0, deps#0, exps#0, st#0)
     && 
    M3.__default.Pre(cmd#0, deps#0, exps#0, st#0)
     && (forall e#3: Seq :: 
      { M3.__default.Loc(cmd#0, deps#0, e#3) } { Set#IsMember(exps#0, $Box(e#3)) } 
      $Is(e#3, TSeq(TChar))
         ==> 
        Set#IsMember(exps#0, $Box(e#3))
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#3)))
         ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#3), st#0), 
          M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#3), st#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.exec#canCall(cmd#0, deps#0, exps#0, st#0)
     && (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
        $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
      M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> M3.__default.Extends#canCall(st#0, st'#0)
             && (M3.__default.Extends(st#0, st'#0)
               ==> M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths#0)
                 && (M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0)
                   ==> M3.__default.Post#canCall(cmd#0, deps#0, exps#0, st'#0)))));
  ensures {:id "id2378"} $_reverifyPost
     ==> (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
        $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
      M3.__default.ValidState#canCall(st'#0)
         ==> M3.__default.ValidState(st'#0)
           || (forall p#5: DatatypeType :: 
            { M3.__default.WellFounded(p#5) } 
              { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#5)) } 
            $Is(p#5, Tclass.M3.Path())
               ==> 
              Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#5))
               ==> M3.__default.WellFounded(p#5)));
  ensures {:id "id2379"} $_reverifyPost
     ==> (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
        $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
      M3.__default.Extends#canCall(st#0, st'#0)
         ==> M3.__default.Extends(st#0, st'#0)
           || Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0)));
  ensures {:id "id2380"} $_reverifyPost
     ==> (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
        $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
      M3.__default.Extends#canCall(st#0, st'#0)
         ==> M3.__default.Extends(st#0, st'#0)
           || (forall p#6: DatatypeType :: 
            { M3.__default.GetSt(p#6, st#0) } 
              { M3.__default.GetSt(p#6, st'#0) } 
              { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6)) } 
            $Is(p#6, Tclass.M3.Path())
               ==> 
              Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6))
               ==> M3.Artifact#Equal(M3.__default.GetSt(p#6, st'#0), M3.__default.GetSt(p#6, st#0))));
  ensures {:id "id2381"} $_reverifyPost
     ==> (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
        $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
      M3.__default.Extends#canCall(st#0, st'#0)
         ==> M3.__default.Extends(st#0, st'#0)
           || (forall p#7: DatatypeType :: 
            { M3.__default.Oracle(p#7, st#0) } 
              { M3.__default.GetSt(p#7, st'#0) } 
              { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#7)) } 
              { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7)) } 
            $Is(p#7, Tclass.M3.Path())
               ==> 
              !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7))
                 && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#7))
               ==> M3.Artifact#Equal(M3.__default.GetSt(p#7, st'#0), M3.__default.Oracle(p#7, st#0))));
  ensures {:id "id2382"} $_reverifyPost
     ==> (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
        $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
      M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths#0)
         ==> M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0)
           || (forall e#4: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
            $Is(e#4, TSeq(TChar))
               ==> 
              Set#IsMember(exps#0, $Box(e#4))
               ==> Set#IsMember(paths#0, $Box(M3.__default.Loc(cmd#0, deps#0, e#4)))));
  ensures {:id "id2383"} $_reverifyPost
     ==> (var paths#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): Set, 
        $Unbox(M3.Tuple.snd(M3.__default.exec(cmd#0, deps#0, exps#0, st#0))): DatatypeType; 
      M3.__default.Post#canCall(cmd#0, deps#0, exps#0, st'#0)
         ==> M3.__default.Post(cmd#0, deps#0, exps#0, st'#0)
           || (forall e#5: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#5) } { Set#IsMember(exps#0, $Box(e#5)) } 
            $Is(e#5, TSeq(TChar))
               ==> (Set#IsMember(exps#0, $Box(e#5))
                   ==> Set#IsMember(M3.__default.DomSt(st'#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#5))))
                 && (Set#IsMember(exps#0, $Box(e#5))
                   ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#5), st'#0), 
                    M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#5), st'#0)))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.ExecProperty (correctness)"} Impl$$M3.__default.ExecProperty(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var cmd##0: Seq;
  var deps##0: Set;
  var restrictedState##0: Map;
  var ##paths#1: Set;
  var ##st#7: DatatypeType;
  var exps##0: Set;
  var st##0: DatatypeType;

    // AddMethodImpl: ExecProperty, Impl$$M3.__default.ExecProperty
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](526,20)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    cmd##0 := cmd#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    deps##0 := deps#0;
    ##paths#1 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##paths#1, TSet(Tclass.M3.Path()), $Heap);
    ##st#7 := st#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##st#7, Tclass.M3.State(), $Heap);
    assume M3.__default.Restrict#canCall(deps#0, st#0);
    assume M3.__default.Restrict#canCall(deps#0, st#0);
    // ProcessCallStmt: CheckSubrange
    restrictedState##0 := M3.__default.Restrict(deps#0, st#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    exps##0 := exps#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    call {:id "id2384"} Call$$M3.__default.ExecOneProperty(cmd##0, deps##0, restrictedState##0, exps##0, st##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M3.ExecOneProperty (well-formedness)"} CheckWellFormed$$M3.__default.ExecOneProperty(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    restrictedState#0: Map
       where $Is(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
         && $IsAlloc(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap), 
    exps#0: Set
       where $Is(exps#0, TSet(TSeq(TChar))) && $IsAlloc(exps#0, TSet(TSeq(TChar)), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.ExecOneProperty (call)"} Call$$M3.__default.ExecOneProperty(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    restrictedState#0: Map
       where $Is(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
         && $IsAlloc(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap), 
    exps#0: Set
       where $Is(exps#0, TSet(TSeq(TChar))) && $IsAlloc(exps#0, TSet(TSeq(TChar)), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  // user-defined preconditions
  requires {:id "id2396"} M3.__default.ValidState#canCall(st#0)
     ==> M3.__default.ValidState(st#0)
       || (forall p#0: DatatypeType :: 
        { M3.__default.WellFounded(p#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
        $Is(p#0, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
           ==> M3.__default.WellFounded(p#0));
  requires {:id "id2397"} Set#Subset(deps#0, M3.__default.DomSt(st#0));
  requires {:id "id2398"} M3.__default.Pre#canCall(cmd#0, deps#0, exps#0, st#0)
     ==> M3.__default.Pre(cmd#0, deps#0, exps#0, st#0)
       || (forall e#0: Seq :: 
        { M3.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
        $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(exps#0, $Box(e#0))
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#0)))
           ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#0), st#0), 
            M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#0), st#0)));
  requires {:id "id2399"} Map#Equal(restrictedState#0, M3.__default.Restrict(deps#0, st#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.execOne#canCall(cmd#0, deps#0, restrictedState#0, exps#0, st#0)
     && (var result''#0 := M3.__default.execOne($LS($LZ), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
      M3.Tuple.Pair_q(result''#0)
         && M3.Tuple.Pair_q(result''#0)
         && (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
            $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
          M3.__default.ValidState#canCall(st''#0)
             && (M3.__default.ValidState(st''#0)
               ==> M3.__default.Extends#canCall(st#0, st''#0)
                 && (M3.__default.Extends(st#0, st''#0)
                   ==> M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths''#0)
                     && (M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths''#0)
                       ==> M3.__default.Post#canCall(cmd#0, deps#0, exps#0, st''#0))))));
  free ensures {:id "id2400"} (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
    (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
        $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
      M3.__default.ValidState#canCall(st''#0)
         && 
        M3.__default.ValidState(st''#0)
         && (forall p#1: DatatypeType :: 
          { M3.__default.WellFounded(p#1) } 
            { Set#IsMember(M3.__default.DomSt(st''#0), $Box(p#1)) } 
          $Is(p#1, Tclass.M3.Path())
             ==> 
            Set#IsMember(M3.__default.DomSt(st''#0), $Box(p#1))
             ==> M3.__default.WellFounded(p#1))));
  free ensures {:id "id2401"} (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
    (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
        $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
      M3.__default.Extends#canCall(st#0, st''#0)
         && 
        M3.__default.Extends(st#0, st''#0)
         && 
        Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st''#0))
         && (forall p#2: DatatypeType :: 
          { M3.__default.GetSt(p#2, st#0) } 
            { M3.__default.GetSt(p#2, st''#0) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
          $Is(p#2, Tclass.M3.Path())
             ==> 
            Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2))
             ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st''#0), M3.__default.GetSt(p#2, st#0)))
         && (forall p#3: DatatypeType :: 
          { M3.__default.Oracle(p#3, st#0) } 
            { M3.__default.GetSt(p#3, st''#0) } 
            { Set#IsMember(M3.__default.DomSt(st''#0), $Box(p#3)) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) } 
          $Is(p#3, Tclass.M3.Path())
             ==> 
            !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3))
               && Set#IsMember(M3.__default.DomSt(st''#0), $Box(p#3))
             ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st''#0), M3.__default.Oracle(p#3, st#0)))));
  free ensures {:id "id2402"} (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
    (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
        $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
      M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths''#0)
         && 
        M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths''#0)
         && (forall e#1: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(exps#0, $Box(e#1))
             ==> Set#IsMember(paths''#0, $Box(M3.__default.Loc(cmd#0, deps#0, e#1))))));
  free ensures {:id "id2403"} (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
    (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
        $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
      M3.__default.Post#canCall(cmd#0, deps#0, exps#0, st''#0)
         && 
        M3.__default.Post(cmd#0, deps#0, exps#0, st''#0)
         && (forall e#2: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> (Set#IsMember(exps#0, $Box(e#2))
                 ==> Set#IsMember(M3.__default.DomSt(st''#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#2))))
               && (Set#IsMember(exps#0, $Box(e#2))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#2), st''#0), 
                  M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#2), st''#0))))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.ExecOneProperty (correctness)"} Impl$$M3.__default.ExecOneProperty(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    restrictedState#0: Map
       where $Is(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
         && $IsAlloc(restrictedState#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap), 
    exps#0: Set
       where $Is(exps#0, TSet(TSeq(TChar))) && $IsAlloc(exps#0, TSet(TSeq(TChar)), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0))
   returns ($_reverifyPost: bool);
  free requires 10 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2404"} M3.__default.ValidState#canCall(st#0)
     && 
    M3.__default.ValidState(st#0)
     && (forall p#4: DatatypeType :: 
      { M3.__default.WellFounded(p#4) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4)) } 
      $Is(p#4, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4))
         ==> M3.__default.WellFounded(p#4));
  requires {:id "id2405"} Set#Subset(deps#0, M3.__default.DomSt(st#0));
  free requires {:id "id2406"} M3.__default.Pre#canCall(cmd#0, deps#0, exps#0, st#0)
     && 
    M3.__default.Pre(cmd#0, deps#0, exps#0, st#0)
     && (forall e#3: Seq :: 
      { M3.__default.Loc(cmd#0, deps#0, e#3) } { Set#IsMember(exps#0, $Box(e#3)) } 
      $Is(e#3, TSeq(TChar))
         ==> 
        Set#IsMember(exps#0, $Box(e#3))
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#3)))
         ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#3), st#0), 
          M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#3), st#0)));
  requires {:id "id2407"} Map#Equal(restrictedState#0, M3.__default.Restrict(deps#0, st#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.execOne#canCall(cmd#0, deps#0, restrictedState#0, exps#0, st#0)
     && (var result''#0 := M3.__default.execOne($LS($LZ), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
      M3.Tuple.Pair_q(result''#0)
         && M3.Tuple.Pair_q(result''#0)
         && (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
            $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
          M3.__default.ValidState#canCall(st''#0)
             && (M3.__default.ValidState(st''#0)
               ==> M3.__default.Extends#canCall(st#0, st''#0)
                 && (M3.__default.Extends(st#0, st''#0)
                   ==> M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths''#0)
                     && (M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths''#0)
                       ==> M3.__default.Post#canCall(cmd#0, deps#0, exps#0, st''#0))))));
  ensures {:id "id2408"} $_reverifyPost
     ==> (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
      (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
          $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
        M3.__default.ValidState#canCall(st''#0)
           ==> M3.__default.ValidState(st''#0)
             || (forall p#5: DatatypeType :: 
              { M3.__default.WellFounded(p#5) } 
                { Set#IsMember(M3.__default.DomSt(st''#0), $Box(p#5)) } 
              $Is(p#5, Tclass.M3.Path())
                 ==> 
                Set#IsMember(M3.__default.DomSt(st''#0), $Box(p#5))
                 ==> M3.__default.WellFounded(p#5))));
  ensures {:id "id2409"} $_reverifyPost
     ==> (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
      (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
          $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
        M3.__default.Extends#canCall(st#0, st''#0)
           ==> M3.__default.Extends(st#0, st''#0)
             || Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st''#0))));
  ensures {:id "id2410"} $_reverifyPost
     ==> (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
      (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
          $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
        M3.__default.Extends#canCall(st#0, st''#0)
           ==> M3.__default.Extends(st#0, st''#0)
             || (forall p#6: DatatypeType :: 
              { M3.__default.GetSt(p#6, st#0) } 
                { M3.__default.GetSt(p#6, st''#0) } 
                { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6)) } 
              $Is(p#6, Tclass.M3.Path())
                 ==> 
                Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#6, st''#0), M3.__default.GetSt(p#6, st#0)))));
  ensures {:id "id2411"} $_reverifyPost
     ==> (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
      (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
          $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
        M3.__default.Extends#canCall(st#0, st''#0)
           ==> M3.__default.Extends(st#0, st''#0)
             || (forall p#7: DatatypeType :: 
              { M3.__default.Oracle(p#7, st#0) } 
                { M3.__default.GetSt(p#7, st''#0) } 
                { Set#IsMember(M3.__default.DomSt(st''#0), $Box(p#7)) } 
                { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7)) } 
              $Is(p#7, Tclass.M3.Path())
                 ==> 
                !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7))
                   && Set#IsMember(M3.__default.DomSt(st''#0), $Box(p#7))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#7, st''#0), M3.__default.Oracle(p#7, st#0)))));
  ensures {:id "id2412"} $_reverifyPost
     ==> (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
      (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
          $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
        M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths''#0)
           ==> M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths''#0)
             || (forall e#4: Seq :: 
              { M3.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
              $Is(e#4, TSeq(TChar))
                 ==> 
                Set#IsMember(exps#0, $Box(e#4))
                 ==> Set#IsMember(paths''#0, $Box(M3.__default.Loc(cmd#0, deps#0, e#4))))));
  ensures {:id "id2413"} $_reverifyPost
     ==> (var result''#0 := M3.__default.execOne($LS($LS($LZ)), cmd#0, deps#0, restrictedState#0, exps#0, st#0); 
      (var paths''#0, st''#0 := $Unbox(M3.Tuple.fst(result''#0)): Set, 
          $Unbox(M3.Tuple.snd(result''#0)): DatatypeType; 
        M3.__default.Post#canCall(cmd#0, deps#0, exps#0, st''#0)
           ==> M3.__default.Post(cmd#0, deps#0, exps#0, st''#0)
             || (forall e#5: Seq :: 
              { M3.__default.Loc(cmd#0, deps#0, e#5) } { Set#IsMember(exps#0, $Box(e#5)) } 
              $Is(e#5, TSeq(TChar))
                 ==> (Set#IsMember(exps#0, $Box(e#5))
                     ==> Set#IsMember(M3.__default.DomSt(st''#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#5))))
                   && (Set#IsMember(exps#0, $Box(e#5))
                     ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#5), st''#0), 
                      M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#5), st''#0))))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.ExecOneProperty (correctness)"} Impl$$M3.__default.ExecOneProperty(cmd#0: Seq, deps#0: Set, restrictedState#0: Map, exps#0: Set, st#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var exp#1_0: Seq
     where $Is(exp#1_0, TSeq(TChar)) && $IsAlloc(exp#1_0, TSeq(TChar), $Heap);
  var ##s#1_0: Set;
  var rest#1_0: DatatypeType
     where $Is(rest#1_0, Tclass.M3.Tuple(TSet(Tclass.M3.Path()), Tclass.M3.State()))
       && $IsAlloc(rest#1_0, Tclass.M3.Tuple(TSet(Tclass.M3.Path()), Tclass.M3.State()), $Heap);
  var ##cmd#1_0: Seq;
  var ##deps#1_0: Set;
  var ##restrictedState#1_0: Map;
  var ##exps#1_0: Set;
  var ##st#1_0: DatatypeType;
  var paths#1_0: Set
     where $Is(paths#1_0, TSet(Tclass.M3.Path()))
       && $IsAlloc(paths#1_0, TSet(Tclass.M3.Path()), $Heap);
  var st'#1_0: DatatypeType
     where $Is(st'#1_0, Tclass.M3.State()) && $IsAlloc(st'#1_0, Tclass.M3.State(), $Heap);
  var $rhs#1_0: Set;
  var $rhs#1_1: DatatypeType;
  var p#1_0: DatatypeType
     where $Is(p#1_0, Tclass.M3.Path()) && $IsAlloc(p#1_0, Tclass.M3.Path(), $Heap);
  var ##cmd#1_1: Seq;
  var ##deps#1_1: Set;
  var ##exp#1_0: Seq;
  var a#1_0: DatatypeType
     where $Is(a#1_0, Tclass.M3.Artifact()) && $IsAlloc(a#1_0, Tclass.M3.Artifact(), $Heap);
  var ##cmd#1_2: Seq;
  var ##deps#1_2: Map;
  var ##exp#1_1: Seq;
  var paths''#1_0: Set
     where $Is(paths''#1_0, TSet(Tclass.M3.Path()))
       && $IsAlloc(paths''#1_0, TSet(Tclass.M3.Path()), $Heap);
  var st''#1_0: DatatypeType
     where $Is(st''#1_0, Tclass.M3.State()) && $IsAlloc(st''#1_0, Tclass.M3.State(), $Heap);
  var $rhs#1_2: Set;
  var $rhs#1_3: DatatypeType;
  var ##st#1_1: DatatypeType;
  var ##p#1_0: DatatypeType;
  var ##a#1_0: DatatypeType;
  var ##st#1_2: DatatypeType;
  var cmd##1_0: Seq;
  var deps##1_0: Set;
  var restrictedState##1_0: Map;
  var exps##1_0: Set;
  var st##1_0: DatatypeType;
  var ##cmd#1_3: Seq;
  var ##deps#1_3: Set;
  var ##restrictedState#1_1: Map;
  var ##exps#1_1: Set;
  var ##st#1_3: DatatypeType;
  var ##p#1_0_0_0: DatatypeType;
  var ##st#1_0_0_0: DatatypeType;
  var ##p#1_0_1_0: DatatypeType;
  var p##1_0_1_0: DatatypeType;
  var ##p#1_0_1_1: DatatypeType;
  var cmd##1_0_2_0: Seq;
  var deps##1_0_2_0: Set;
  var exp##1_0_2_0: Seq;
  var ##p#1_0_2_0: DatatypeType;
  var ##st#1_1_0: DatatypeType;
  var ##st'#1_1_0: DatatypeType;
  var ##st#1_1_1: DatatypeType;
  var ##st'#1_1_1: DatatypeType;
  var cmd##1_1_0: Seq;
  var deps##1_1_0: Set;
  var exp##1_1_0: Seq;
  var ##st#1_1_2: DatatypeType;
  var ##p#1_1_0_0_0_0: DatatypeType;
  var ##cert#1_1_0_0_0_0: DatatypeType;
  var ##p#1_1_0_0_0_1: DatatypeType;
  var ##st#1_1_0_0_0_0: DatatypeType;
  var ##p#1_1_0_0_0_2: DatatypeType;
  var ##p#1_1_0_0_0_3: DatatypeType;
  var ##st#1_1_0_0_0_1: DatatypeType;
  var ##cmd#1_1_0_0_1_0: Seq;
  var ##p#1_1_0_0_1_0: DatatypeType;
  var ##deps#1_1_0_0_1_0: Map;
  var ##p#1_1_0_0_1_1: DatatypeType;
  var ##cert#1_1_0_0_1_0: DatatypeType;
  var ##p#1_1_0_0_1_2: DatatypeType;
  var ##deps#1_1_0_0_1_1: Set;
  var ##p#1_1_0_0_1_3: DatatypeType;
  var ##st#1_1_0_0_1_0: DatatypeType;
  var ##exp#1_1_0_0_1_0: Seq;
  var ##p#1_1_0_0_1_4: DatatypeType;
  var ##p#1_1_0_0_1_5: DatatypeType;
  var ##cert#1_1_0_0_1_1: DatatypeType;
  var ##p#1_1_0_0_1_6: DatatypeType;
  var ##st#1_1_0_0_1_1: DatatypeType;
  var ##cmd#1_1_0_0_2_0: Seq;
  var ##deps#1_1_0_0_2_0: Map;
  var ##p#1_1_0_0_2_0: DatatypeType;
  var ##cert#1_1_0_0_2_0: DatatypeType;
  var ##p#1_1_0_0_2_1: DatatypeType;
  var ##deps#1_1_0_0_2_1: Set;
  var ##st#1_1_0_0_2_0: DatatypeType;
  var ##exp#1_1_0_0_2_0: Seq;
  var ##cmd#1_1_0_0_2_1: Seq;
  var ##p#1_1_0_0_2_2: DatatypeType;
  var ##deps#1_1_0_0_2_2: Map;
  var ##p#1_1_0_0_2_3: DatatypeType;
  var ##cert#1_1_0_0_2_1: DatatypeType;
  var ##p#1_1_0_0_2_4: DatatypeType;
  var ##deps#1_1_0_0_2_3: Set;
  var ##p#1_1_0_0_2_5: DatatypeType;
  var ##st#1_1_0_0_2_1: DatatypeType;
  var ##exp#1_1_0_0_2_1: Seq;
  var ##p#1_1_0_0_2_6: DatatypeType;
  var ##cmd#1_1_0_0_3_0: Seq;
  var ##deps#1_1_0_0_3_0: Map;
  var ##paths#1_1_0_0_3_0: Set;
  var ##st#1_1_0_0_3_0: DatatypeType;
  var ##exp#1_1_0_0_3_0: Seq;
  var p##1_1_0_0_3_0: DatatypeType;
  var cert##1_1_0_0_3_0: DatatypeType;
  var ##p#1_1_0_0_3_0: DatatypeType;
  var deps##1_1_0_0_3_0: Set;
  var st##1_1_0_0_3_0: DatatypeType;
  var ##cmd#1_1_0_0_3_1: Seq;
  var ##deps#1_1_0_0_3_1: Map;
  var ##p#1_1_0_0_3_1: DatatypeType;
  var ##cert#1_1_0_0_3_0: DatatypeType;
  var ##p#1_1_0_0_3_2: DatatypeType;
  var ##deps#1_1_0_0_3_2: Set;
  var ##st#1_1_0_0_3_1: DatatypeType;
  var ##exp#1_1_0_0_3_1: Seq;
  var ##cmd#1_1_0_0_4_0: Seq;
  var ##deps#1_1_0_0_4_0: Map;
  var ##paths#1_1_0_0_4_0: Set;
  var ##st#1_1_0_0_4_0: DatatypeType;
  var ##exp#1_1_0_0_4_0: Seq;
  var paths##1_1_0_0_4_0: Set;
  var st0##1_1_0_0_4_0: DatatypeType;
  var st1##1_1_0_0_4_0: DatatypeType;
  var ##cmd#1_1_0_0_4_1: Seq;
  var ##deps#1_1_0_0_4_1: Map;
  var ##paths#1_1_0_0_4_1: Set;
  var ##st#1_1_0_0_4_1: DatatypeType;
  var ##exp#1_1_0_0_4_1: Seq;
  var ##cmd#1_1_0_0_5_0: Seq;
  var ##deps#1_1_0_0_5_0: Map;
  var ##exp#1_1_0_0_5_0: Seq;
  var ##cmd#1_1_0_0_5_1: Seq;
  var ##deps#1_1_0_0_5_1: Map;
  var ##paths#1_1_0_0_5_0: Set;
  var ##st#1_1_0_0_5_0: DatatypeType;
  var ##exp#1_1_0_0_5_1: Seq;
  var ##cmd#1_1_0_0_6_0: Seq;
  var ##deps#1_1_0_0_6_0: Map;
  var ##exp#1_1_0_0_6_0: Seq;
  var ##st#1_1_3: DatatypeType;
  var ##st'#1_1_2: DatatypeType;
  var st0##1_1_0: DatatypeType;
  var st1##1_1_0: DatatypeType;
  var st2##1_1_0: DatatypeType;
  var ##cmd#1_4: Seq;
  var ##deps#1_4: Set;
  var ##exps#1_2: Set;
  var ##paths#1_0: Set;
  var e#1_2_0: Seq;
  var ##cmd#1_2_0: Seq;
  var ##deps#1_2_0: Set;
  var ##exp#1_2_0: Seq;
  var ##st#1_2_0: DatatypeType;
  var ##p#1_2_0: DatatypeType;
  var ##cmd#1_2_1: Seq;
  var ##deps#1_2_1: Set;
  var ##exp#1_2_1: Seq;
  var ##st#1_2_1: DatatypeType;
  var ##p#1_2_1: DatatypeType;
  var ##cmd#1_2_2: Seq;
  var ##deps#1_2_2: Set;
  var ##exp#1_2_2: Seq;
  var ##st#1_2_2: DatatypeType;
  var p#1_2_0: DatatypeType
     where $Is(p#1_2_0, Tclass.M3.Path()) && $IsAlloc(p#1_2_0, Tclass.M3.Path(), $Heap);
  var ##cmd#1_2_3: Seq;
  var ##deps#1_2_3: Set;
  var ##exp#1_2_3: Seq;
  var ##st#1_2_3: DatatypeType;
  var ##st#1_2_4: DatatypeType;
  var ##p#1_2_0_0_0_0: DatatypeType;
  var ##st#1_2_0_0_0_0: DatatypeType;
  var p##1_2_0_0_0_0: DatatypeType;
  var st0##1_2_0_0_0_0: DatatypeType;
  var st1##1_2_0_0_0_0: DatatypeType;
  var ##p#1_2_0_0_0_1: DatatypeType;
  var ##st#1_2_0_0_0_1: DatatypeType;
  var ##p#1_2_0_0_1_0: DatatypeType;
  var ##st#1_2_0_0_1_0: DatatypeType;
  var ##p#1_2_0_0_1_1: DatatypeType;
  var ##st#1_2_0_0_1_1: DatatypeType;
  var ##p#1_2_0_0_2_0: DatatypeType;
  var ##st#1_2_0_0_2_0: DatatypeType;
  var ##st#1_2_0_0_2_1: DatatypeType;
  var ##st#1_2_0_0_2_2: DatatypeType;
  var ##st'#1_2_0_0_2_0: DatatypeType;
  var ##p#1_2_0_0_2_1: DatatypeType;
  var ##st#1_2_0_0_2_3: DatatypeType;
  var ##p#1_2_0_0_0: DatatypeType;
  var ##st#1_2_0_0_0: DatatypeType;
  var ##p#1_2_1_0_0_0: DatatypeType;
  var ##st#1_2_1_0_0_0: DatatypeType;
  var p##1_2_1_0_0_0: DatatypeType;
  var st0##1_2_1_0_0_0: DatatypeType;
  var st1##1_2_1_0_0_0: DatatypeType;
  var ##p#1_2_1_0_0_1: DatatypeType;
  var ##st#1_2_1_0_0_1: DatatypeType;
  var ##cmd#1_2_1_0_1_0: Seq;
  var ##deps#1_2_1_0_1_0: Map;
  var ##paths#1_2_1_0_1_0: Set;
  var ##st#1_2_1_0_1_0: DatatypeType;
  var ##exp#1_2_1_0_1_0: Seq;
  var ##p#1_2_1_0_1_0: DatatypeType;
  var ##st#1_2_1_0_1_1: DatatypeType;
  var ##cmd#1_2_1_0_2_0: Seq;
  var ##deps#1_2_1_0_2_0: Map;
  var ##exp#1_2_1_0_2_0: Seq;
  var ##cmd#1_2_1_0_2_1: Seq;
  var ##deps#1_2_1_0_2_1: Map;
  var ##paths#1_2_1_0_2_0: Set;
  var ##st#1_2_1_0_2_0: DatatypeType;
  var ##exp#1_2_1_0_2_1: Seq;
  var ##p#1_2_1_0_3_0: DatatypeType;
  var ##st#1_2_1_0_3_0: DatatypeType;
  var ##cmd#1_2_1_0_3_0: Seq;
  var ##deps#1_2_1_0_3_0: Map;
  var ##exp#1_2_1_0_3_0: Seq;
  var ##p#1_2_1_0_0: DatatypeType;
  var ##st#1_2_1_0_0: DatatypeType;

    // AddMethodImpl: ExecOneProperty, Impl$$M3.__default.ExecOneProperty
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M3.State(st#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#cmd0#0: Seq, 
        $ih#deps0#0: Set, 
        $ih#restrictedState0#0: Map, 
        $ih#exps0#0: Set, 
        $ih#st0#0: DatatypeType :: 
      { M3.__default.execOne($LS($LZ), 
          $ih#cmd0#0, 
          $ih#deps0#0, 
          $ih#restrictedState0#0, 
          $ih#exps0#0, 
          $ih#st0#0) } 
      $Is($ih#cmd0#0, TSeq(TChar))
           && $Is($ih#deps0#0, TSet(Tclass.M3.Path()))
           && $Is($ih#restrictedState0#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
           && $Is($ih#exps0#0, TSet(TSeq(TChar)))
           && $Is($ih#st0#0, Tclass.M3.State())
           && 
          M3.__default.ValidState($ih#st0#0)
           && Set#Subset($ih#deps0#0, M3.__default.DomSt($ih#st0#0))
           && M3.__default.Pre($ih#cmd0#0, $ih#deps0#0, $ih#exps0#0, $ih#st0#0)
           && Map#Equal($ih#restrictedState0#0, M3.__default.Restrict($ih#deps0#0, $ih#st0#0))
           && (Seq#Rank($ih#cmd0#0) < Seq#Rank(cmd#0)
             || (Seq#Rank($ih#cmd0#0) == Seq#Rank(cmd#0)
               && ((Set#Subset($ih#deps0#0, deps#0) && !Set#Subset(deps#0, $ih#deps0#0))
                 || (Set#Equal($ih#deps0#0, deps#0)
                   && ((Set#Subset(Map#Domain($ih#restrictedState0#0), Map#Domain(restrictedState#0))
                       && !Set#Subset(Map#Domain(restrictedState#0), Map#Domain($ih#restrictedState0#0)))
                     || (Set#Equal(Map#Domain($ih#restrictedState0#0), Map#Domain(restrictedState#0))
                       && ((Set#Subset($ih#exps0#0, exps#0) && !Set#Subset(exps#0, $ih#exps0#0))
                         || (Set#Equal($ih#exps0#0, exps#0) && DtRank($ih#st0#0) < DtRank(st#0)))))))))
         ==> (var result''#1 := M3.__default.execOne($LS($LZ), 
              $ih#cmd0#0, 
              $ih#deps0#0, 
              $ih#restrictedState0#0, 
              $ih#exps0#0, 
              $ih#st0#0); 
          (var paths''#1, st''#1 := $Unbox(M3.Tuple.fst(result''#1)): Set, 
              $Unbox(M3.Tuple.snd(result''#1)): DatatypeType; 
            M3.__default.ValidState(st''#1)
               && M3.__default.Extends($ih#st0#0, st''#1)
               && M3.__default.OneToOne($ih#cmd0#0, $ih#deps0#0, $ih#exps0#0, paths''#1)
               && M3.__default.Post($ih#cmd0#0, $ih#deps0#0, $ih#exps0#0, st''#1))));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](542,5)
    assume true;
    if (Set#Equal(exps#0, Set#Empty(): Set))
    {
    }
    else
    {
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(544,15)
        assume true;
        ##s#1_0 := exps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##s#1_0, TSet(TSeq(TChar)), $Heap);
        assume true;
        assume !Set#Equal(##s#1_0, Set#Empty(): Set);
        assume M3.__default.PickOne#canCall(TSeq(TChar), exps#0);
        assume M3.__default.PickOne#canCall(TSeq(TChar), exps#0);
        exp#1_0 := $Unbox(M3.__default.PickOne(TSeq(TChar), exps#0)): Seq;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(545,16)
        assume true;
        ##cmd#1_0 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#1_0, TSeq(TChar), $Heap);
        ##deps#1_0 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#1_0, TSet(Tclass.M3.Path()), $Heap);
        ##restrictedState#1_0 := restrictedState#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##restrictedState#1_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
        ##exps#1_0 := Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1_0)));
        // assume allocatedness for argument to function
        assume $IsAlloc(##exps#1_0, TSet(TSeq(TChar)), $Heap);
        ##st#1_0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##st#1_0, Tclass.M3.State(), $Heap);
        assume M3.__default.execOne#canCall(cmd#0, 
          deps#0, 
          restrictedState#0, 
          Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1_0))), 
          st#0);
        assume M3.Tuple.Pair_q(M3.__default.execOne($LS($LZ), 
            cmd#0, 
            deps#0, 
            restrictedState#0, 
            Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1_0))), 
            st#0));
        assume M3.__default.execOne#canCall(cmd#0, 
          deps#0, 
          restrictedState#0, 
          Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1_0))), 
          st#0);
        rest#1_0 := M3.__default.execOne($LS($LZ), 
          cmd#0, 
          deps#0, 
          restrictedState#0, 
          Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1_0))), 
          st#0);
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(546,22)
        assume true;
        assume true;
        assume M3.Tuple.Pair_q(rest#1_0);
        assume M3.Tuple.Pair_q(rest#1_0);
        $rhs#1_0 := $Unbox(M3.Tuple.fst(rest#1_0)): Set;
        assume M3.Tuple.Pair_q(rest#1_0);
        assume M3.Tuple.Pair_q(rest#1_0);
        $rhs#1_1 := $Unbox(M3.Tuple.snd(rest#1_0)): DatatypeType;
        paths#1_0 := $rhs#1_0;
        st'#1_0 := $rhs#1_1;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(547,13)
        assume true;
        ##cmd#1_1 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#1_1, TSeq(TChar), $Heap);
        ##deps#1_1 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#1_1, TSet(Tclass.M3.Path()), $Heap);
        ##exp#1_0 := exp#1_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exp#1_0, TSeq(TChar), $Heap);
        assume M3.__default.Loc#canCall(cmd#0, deps#0, exp#1_0);
        assume M3.__default.Loc#canCall(cmd#0, deps#0, exp#1_0);
        p#1_0 := M3.__default.Loc(cmd#0, deps#0, exp#1_0);
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(548,13)
        assume true;
        ##cmd#1_2 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#1_2, TSeq(TChar), $Heap);
        ##deps#1_2 := restrictedState#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#1_2, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
        ##exp#1_1 := exp#1_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exp#1_1, TSeq(TChar), $Heap);
        assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
        assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, restrictedState#0, exp#1_0));
        assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
        a#1_0 := M3.__default.RunTool(cmd#0, restrictedState#0, exp#1_0);
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(549,25)
        assume true;
        assume true;
        assume true;
        $rhs#1_2 := Set#Union(paths#1_0, Set#UnionOne(Set#Empty(): Set, $Box(p#1_0)));
        ##st#1_1 := st'#1_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##st#1_1, Tclass.M3.State(), $Heap);
        assume M3.__default.DomSt#canCall(st'#1_0);
        if (Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_0)))
        {
        }
        else
        {
            ##p#1_0 := p#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#1_0, Tclass.M3.Path(), $Heap);
            ##a#1_0 := a#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##a#1_0, Tclass.M3.Artifact(), $Heap);
            ##st#1_2 := st'#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#1_2, Tclass.M3.State(), $Heap);
            assume M3.__default.SetSt#canCall(p#1_0, a#1_0, st'#1_0);
            assume M3.State.StateCons_q(M3.__default.SetSt(p#1_0, a#1_0, st'#1_0));
        }

        assume M3.__default.DomSt#canCall(st'#1_0)
           && (!Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_0))
             ==> M3.__default.SetSt#canCall(p#1_0, a#1_0, st'#1_0));
        $rhs#1_3 := (if Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_0))
           then st'#1_0
           else M3.__default.SetSt(p#1_0, a#1_0, st'#1_0));
        paths''#1_0 := $rhs#1_2;
        st''#1_0 := $rhs#1_3;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](550,22)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        cmd##1_0 := cmd#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        deps##1_0 := deps#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        restrictedState##1_0 := restrictedState#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        exps##1_0 := Set#Difference(exps#0, Set#UnionOne(Set#Empty(): Set, $Box(exp#1_0)));
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##1_0 := st#0;
        assume {:id "id2426"} Seq#Rank(cmd##1_0) < Seq#Rank(cmd#0)
           || (Seq#Rank(cmd##1_0) == Seq#Rank(cmd#0)
             && ((Set#Subset(deps##1_0, deps#0) && !Set#Subset(deps#0, deps##1_0))
               || (Set#Equal(deps##1_0, deps#0)
                 && ((Set#Subset(Map#Domain(restrictedState##1_0), Map#Domain(restrictedState#0))
                     && !Set#Subset(Map#Domain(restrictedState#0), Map#Domain(restrictedState##1_0)))
                   || (Set#Equal(Map#Domain(restrictedState##1_0), Map#Domain(restrictedState#0))
                     && ((Set#Subset(exps##1_0, exps#0) && !Set#Subset(exps#0, exps##1_0))
                       || (Set#Equal(exps##1_0, exps#0) && DtRank(st##1_0) < DtRank(st#0))))))));
        call {:id "id2427"} Call$$M3.__default.ExecOneProperty(cmd##1_0, deps##1_0, restrictedState##1_0, exps##1_0, st##1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](551,7)
        ##cmd#1_3 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#1_3, TSeq(TChar), $Heap);
        ##deps#1_3 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#1_3, TSet(Tclass.M3.Path()), $Heap);
        ##restrictedState#1_1 := restrictedState#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##restrictedState#1_1, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
        ##exps#1_1 := exps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exps#1_1, TSet(TSeq(TChar)), $Heap);
        ##st#1_3 := st#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##st#1_3, Tclass.M3.State(), $Heap);
        assume M3.__default.execOne#canCall(cmd#0, deps#0, restrictedState#0, exps#0, st#0);
        assume M3.Tuple.Pair_q(M3.__default.execOne($LS($LZ), cmd#0, deps#0, restrictedState#0, exps#0, st#0));
        assume M3.Tuple.Pair_q(M3.__default.execOne($LS($LZ), cmd#0, deps#0, restrictedState#0, exps#0, st#0));
        assume $IsA#M3.State($Unbox(M3.Tuple.snd(M3.__default.execOne($LS($LZ), cmd#0, deps#0, restrictedState#0, exps#0, st#0))): DatatypeType)
           && $IsA#M3.State(st''#1_0)
           && 
          M3.__default.execOne#canCall(cmd#0, deps#0, restrictedState#0, exps#0, st#0)
           && M3.Tuple.Pair_q(M3.__default.execOne($LS($LZ), cmd#0, deps#0, restrictedState#0, exps#0, st#0));
        assume true;
        assume {:id "id2428"} M3.State#Equal($Unbox(M3.Tuple.snd(M3.__default.execOne($LS($LZ), cmd#0, deps#0, restrictedState#0, exps#0, st#0))): DatatypeType, 
          st''#1_0);
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            assume true;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            assume true;
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            assume {:id "id2432"} true;
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            push;
            push;
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](555,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            cmd##1_0_2_0 := cmd#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            deps##1_0_2_0 := deps#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            exp##1_0_2_0 := exp#1_0;
            call {:id "id2433"} Call$$M3.__default.LocInjectivity(cmd##1_0_2_0, deps##1_0_2_0, exp##1_0_2_0);
            // TrCallStmt: After ProcessCallStmt
            pop;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            ##p#1_0_2_0 := p#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#1_0_2_0, Tclass.M3.Path(), $Heap);
            assume M3.__default.LocInv__Deps#canCall(p#1_0);
            assume M3.__default.LocInv__Deps#canCall(p#1_0);
            // ----- assert line0 ==> line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            assume true;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            ##p#1_0_1_0 := p#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#1_0_1_0, Tclass.M3.Path(), $Heap);
            assume M3.__default.LocInv__Deps#canCall(p#1_0);
            assume M3.__default.LocInv__Deps#canCall(p#1_0);
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            assume {:id "id2430"} Set#Equal(M3.__default.LocInv__Deps(p#1_0), deps#0);
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            push;
            push;
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](557,25)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            p##1_0_1_0 := p#1_0;
            call {:id "id2431"} Call$$M3.__default.ExecOne__Lemma0(p##1_0_1_0);
            // TrCallStmt: After ProcessCallStmt
            pop;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            ##p#1_0_1_1 := p#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#1_0_1_1, Tclass.M3.Path(), $Heap);
            assume M3.__default.WellFounded#canCall(p#1_0);
            assume M3.__default.WellFounded#canCall(p#1_0);
            // ----- assert line1 ==> line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            assume true;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            ##p#1_0_0_0 := p#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#1_0_0_0, Tclass.M3.Path(), $Heap);
            assume M3.__default.WellFounded#canCall(p#1_0);
            assume M3.__default.WellFounded#canCall(p#1_0);
            // ----- assume lhs ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            assume {:id "id2429"} M3.__default.WellFounded(p#1_0);
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            push;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            ##st#1_0_0_0 := st''#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#1_0_0_0, Tclass.M3.State(), $Heap);
            assume M3.__default.ValidState#canCall(st''#1_0);
            assume M3.__default.ValidState#canCall(st''#1_0);
            // ----- assert line2 ==> line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](553,7)
            assume true;
            assume false;
        }

        assume {:id "id2434"} true ==> M3.__default.ValidState(st''#1_0);
        // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](562,7)
        if (*)
        {
            // Assume Fuel Constant
            assume true;
            assume {:id "id2435"} true;
            if (*)
            {
                ##st#1_1_0 := st'#1_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#1_1_0, Tclass.M3.State(), $Heap);
                ##st'#1_1_0 := st''#1_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st'#1_1_0, Tclass.M3.State(), $Heap);
                assume M3.__default.Extends#canCall(st'#1_0, st''#1_0);
                if (M3.__default.Extends(st'#1_0, st''#1_0))
                {
                    ##st#1_1_1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_1, Tclass.M3.State(), $Heap);
                    ##st'#1_1_1 := st''#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st'#1_1_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.Extends#canCall(st#0, st''#1_0);
                }

                assume M3.__default.Extends#canCall(st'#1_0, st''#1_0)
                   && (M3.__default.Extends(st'#1_0, st''#1_0)
                     ==> M3.__default.Extends#canCall(st#0, st''#1_0));
                assume {:id "id2436"} M3.__default.Extends(st'#1_0, st''#1_0) && M3.__default.Extends(st#0, st''#1_0);
                assume false;
            }

            push;
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](565,23)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            cmd##1_1_0 := cmd#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            deps##1_1_0 := deps#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            exp##1_1_0 := exp#1_0;
            call {:id "id2437"} Call$$M3.__default.LocInjectivity(cmd##1_1_0, deps##1_1_0, exp##1_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](566,9)
            ##st#1_1_2 := st'#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#1_1_2, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st'#1_0);
            assume M3.__default.DomSt#canCall(st'#1_0);
            if (!Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_0)))
            {
                push;
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    assume true;
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    push;
                    pop;
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##cmd#1_1_0_0_6_0 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_6_0, TSeq(TChar), $Heap);
                    ##deps#1_1_0_0_6_0 := restrictedState#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_6_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_1_0_0_6_0 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_6_0, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, restrictedState#0, exp#1_0));
                    assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##cmd#1_1_0_0_5_0 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_5_0, TSeq(TChar), $Heap);
                    ##deps#1_1_0_0_5_0 := restrictedState#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_5_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_1_0_0_5_0 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_5_0, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, restrictedState#0, exp#1_0));
                    assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    push;
                    pop;
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##cmd#1_1_0_0_5_1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_5_1, TSeq(TChar), $Heap);
                    ##paths#1_1_0_0_5_0 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##paths#1_1_0_0_5_0, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_1_0_0_5_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_5_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.Restrict#canCall(deps#0, st#0);
                    ##deps#1_1_0_0_5_1 := M3.__default.Restrict(deps#0, st#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_5_1, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_1_0_0_5_1 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_5_1, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0));
                    assume M3.__default.Restrict#canCall(deps#0, st#0)
                       && M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0);
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##cmd#1_1_0_0_4_0 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_4_0, TSeq(TChar), $Heap);
                    ##paths#1_1_0_0_4_0 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##paths#1_1_0_0_4_0, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_1_0_0_4_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_4_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.Restrict#canCall(deps#0, st#0);
                    ##deps#1_1_0_0_4_0 := M3.__default.Restrict(deps#0, st#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_4_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_1_0_0_4_0 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_4_0, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0));
                    assume M3.__default.Restrict#canCall(deps#0, st#0)
                       && M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0);
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    push;
                    push;
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](573,35)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    paths##1_1_0_0_4_0 := deps#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_1_0_0_4_0 := st#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_1_0_0_4_0 := st'#1_0;
                    call {:id "id2468"} Call$$M3.__default.RestrictMonotonicity(paths##1_1_0_0_4_0, st0##1_1_0_0_4_0, st1##1_1_0_0_4_0);
                    // TrCallStmt: After ProcessCallStmt
                    pop;
                    pop;
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##cmd#1_1_0_0_4_1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_4_1, TSeq(TChar), $Heap);
                    ##paths#1_1_0_0_4_1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##paths#1_1_0_0_4_1, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_1_0_0_4_1 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_4_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.Restrict#canCall(deps#0, st'#1_0);
                    ##deps#1_1_0_0_4_1 := M3.__default.Restrict(deps#0, st'#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_4_1, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_1_0_0_4_1 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_4_1, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st'#1_0), exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, M3.__default.Restrict(deps#0, st'#1_0), exp#1_0));
                    assume M3.__default.Restrict#canCall(deps#0, st'#1_0)
                       && M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st'#1_0), exp#1_0);
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##cmd#1_1_0_0_3_0 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_3_0, TSeq(TChar), $Heap);
                    ##paths#1_1_0_0_3_0 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##paths#1_1_0_0_3_0, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_1_0_0_3_0 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_3_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.Restrict#canCall(deps#0, st'#1_0);
                    ##deps#1_1_0_0_3_0 := M3.__default.Restrict(deps#0, st'#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_3_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_1_0_0_3_0 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_3_0, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st'#1_0), exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, M3.__default.Restrict(deps#0, st'#1_0), exp#1_0));
                    assume M3.__default.Restrict#canCall(deps#0, st'#1_0)
                       && M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st'#1_0), exp#1_0);
                    // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    push;
                    push;
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](575,36)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##1_1_0_0_3_0 := p#1_0;
                    ##p#1_1_0_0_3_0 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_3_0, Tclass.M3.Path(), $Heap);
                    assume true;
                    assume M3.__default.WellFounded(##p#1_1_0_0_3_0);
                    assume M3.__default.GetCert#canCall(p#1_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(p#1_0));
                    assume M3.__default.GetCert#canCall(p#1_0);
                    // ProcessCallStmt: CheckSubrange
                    cert##1_1_0_0_3_0 := M3.__default.GetCert(p#1_0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    deps##1_1_0_0_3_0 := deps#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_1_0_0_3_0 := st'#1_0;
                    call {:id "id2462"} Call$$M3.__default.CollectRestrict__Lemma(p##1_1_0_0_3_0, cert##1_1_0_0_3_0, deps##1_1_0_0_3_0, st##1_1_0_0_3_0);
                    // TrCallStmt: After ProcessCallStmt
                    pop;
                    pop;
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##cmd#1_1_0_0_3_1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_3_1, TSeq(TChar), $Heap);
                    ##p#1_1_0_0_3_1 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_3_1, Tclass.M3.Path(), $Heap);
                    ##p#1_1_0_0_3_2 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_3_2, Tclass.M3.Path(), $Heap);
                    assume {:id "id2463"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#1_1_0_0_3_2)
                       ==> M3.__default.WellFounded(##p#1_1_0_0_3_2)
                         || (exists cert#1_1_0_0_3_1: DatatypeType :: 
                          { M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_3_2, cert#1_1_0_0_3_1) } 
                          $Is(cert#1_1_0_0_3_1, Tclass.M3.WFCertificate())
                             && M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_3_2, cert#1_1_0_0_3_1));
                    assume M3.__default.GetCert#canCall(p#1_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(p#1_0));
                    ##cert#1_1_0_0_3_0 := M3.__default.GetCert(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#1_1_0_0_3_0, Tclass.M3.WFCertificate(), $Heap);
                    ##deps#1_1_0_0_3_2 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_3_2, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_1_0_0_3_1 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_3_1, Tclass.M3.State(), $Heap);
                    assume {:id "id2464"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_3_1, ##cert#1_1_0_0_3_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_3_1, ##cert#1_1_0_0_3_0)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#1_1_0_0_3_0), ##p#1_1_0_0_3_1);
                    assume {:id "id2465"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_3_1, ##cert#1_1_0_0_3_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_3_1, ##cert#1_1_0_0_3_0)
                         || (forall d#1_1_0_0_3_0: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_3_1), $Box(d#1_1_0_0_3_0)) } 
                          $Is(d#1_1_0_0_3_0, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_3_1), $Box(d#1_1_0_0_3_0))
                             ==> (exists c#1_1_0_0_3_0: DatatypeType :: 
                              { M3.WFCertificate.p(c#1_1_0_0_3_0) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_3_0), $Box(c#1_1_0_0_3_0)) } 
                              $Is(c#1_1_0_0_3_0, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_3_0), $Box(c#1_1_0_0_3_0))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#1_1_0_0_3_0), d#1_1_0_0_3_0)));
                    assume {:id "id2466"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_3_1, ##cert#1_1_0_0_3_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_3_1, ##cert#1_1_0_0_3_0)
                         || (forall c#1_1_0_0_3_1: DatatypeType :: 
                          { M3.WFCertificate.p(c#1_1_0_0_3_1) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_3_0), $Box(c#1_1_0_0_3_1)) } 
                          $Is(c#1_1_0_0_3_1, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_3_0), $Box(c#1_1_0_0_3_1))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#1_1_0_0_3_1), c#1_1_0_0_3_1));
                    assume {:id "id2467"} {:subsumption 0} Set#Equal(##deps#1_1_0_0_3_2, M3.__default.LocInv__Deps(##p#1_1_0_0_3_1));
                    assume M3.__default.CollectDependencies#canCall(p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0);
                    ##deps#1_1_0_0_3_1 := M3.__default.CollectDependencies($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_3_1, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_1_0_0_3_1 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_3_1, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, 
                      M3.__default.CollectDependencies($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0), 
                      exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, 
                        M3.__default.CollectDependencies($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0), 
                        exp#1_0));
                    assume M3.__default.GetCert#canCall(p#1_0)
                       && M3.__default.CollectDependencies#canCall(p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0)
                       && M3.__default.RunTool#canCall(cmd#0, 
                        M3.__default.CollectDependencies($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0), 
                        exp#1_0);
                    // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##cmd#1_1_0_0_2_0 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_2_0, TSeq(TChar), $Heap);
                    ##p#1_1_0_0_2_0 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_2_0, Tclass.M3.Path(), $Heap);
                    ##p#1_1_0_0_2_1 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_2_1, Tclass.M3.Path(), $Heap);
                    assume {:id "id2452"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#1_1_0_0_2_1)
                       ==> M3.__default.WellFounded(##p#1_1_0_0_2_1)
                         || (exists cert#1_1_0_0_2_0: DatatypeType :: 
                          { M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_1, cert#1_1_0_0_2_0) } 
                          $Is(cert#1_1_0_0_2_0, Tclass.M3.WFCertificate())
                             && M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_1, cert#1_1_0_0_2_0));
                    assume M3.__default.GetCert#canCall(p#1_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(p#1_0));
                    ##cert#1_1_0_0_2_0 := M3.__default.GetCert(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#1_1_0_0_2_0, Tclass.M3.WFCertificate(), $Heap);
                    ##deps#1_1_0_0_2_1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_2_1, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_1_0_0_2_0 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_2_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2453"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_2_0, ##cert#1_1_0_0_2_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_0, ##cert#1_1_0_0_2_0)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#1_1_0_0_2_0), ##p#1_1_0_0_2_0);
                    assume {:id "id2454"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_2_0, ##cert#1_1_0_0_2_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_0, ##cert#1_1_0_0_2_0)
                         || (forall d#1_1_0_0_2_0: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_2_0), $Box(d#1_1_0_0_2_0)) } 
                          $Is(d#1_1_0_0_2_0, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_2_0), $Box(d#1_1_0_0_2_0))
                             ==> (exists c#1_1_0_0_2_0: DatatypeType :: 
                              { M3.WFCertificate.p(c#1_1_0_0_2_0) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_2_0), $Box(c#1_1_0_0_2_0)) } 
                              $Is(c#1_1_0_0_2_0, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_2_0), $Box(c#1_1_0_0_2_0))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#1_1_0_0_2_0), d#1_1_0_0_2_0)));
                    assume {:id "id2455"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_2_0, ##cert#1_1_0_0_2_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_0, ##cert#1_1_0_0_2_0)
                         || (forall c#1_1_0_0_2_1: DatatypeType :: 
                          { M3.WFCertificate.p(c#1_1_0_0_2_1) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_2_0), $Box(c#1_1_0_0_2_1)) } 
                          $Is(c#1_1_0_0_2_1, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_2_0), $Box(c#1_1_0_0_2_1))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#1_1_0_0_2_1), c#1_1_0_0_2_1));
                    assume {:id "id2456"} {:subsumption 0} Set#Equal(##deps#1_1_0_0_2_1, M3.__default.LocInv__Deps(##p#1_1_0_0_2_0));
                    assume M3.__default.CollectDependencies#canCall(p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0);
                    ##deps#1_1_0_0_2_0 := M3.__default.CollectDependencies($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_2_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_1_0_0_2_0 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_2_0, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, 
                      M3.__default.CollectDependencies($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0), 
                      exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, 
                        M3.__default.CollectDependencies($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0), 
                        exp#1_0));
                    assume M3.__default.GetCert#canCall(p#1_0)
                       && M3.__default.CollectDependencies#canCall(p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0)
                       && M3.__default.RunTool#canCall(cmd#0, 
                        M3.__default.CollectDependencies($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), deps#0, st'#1_0), 
                        exp#1_0);
                    // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    push;
                    pop;
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##p#1_1_0_0_2_2 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_2_2, Tclass.M3.Path(), $Heap);
                    assume M3.__default.LocInv__Cmd#canCall(p#1_0);
                    ##cmd#1_1_0_0_2_1 := M3.__default.LocInv__Cmd(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_2_1, TSeq(TChar), $Heap);
                    ##p#1_1_0_0_2_3 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_2_3, Tclass.M3.Path(), $Heap);
                    ##p#1_1_0_0_2_4 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_2_4, Tclass.M3.Path(), $Heap);
                    assume {:id "id2457"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#1_1_0_0_2_4)
                       ==> M3.__default.WellFounded(##p#1_1_0_0_2_4)
                         || (exists cert#1_1_0_0_2_1: DatatypeType :: 
                          { M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_4, cert#1_1_0_0_2_1) } 
                          $Is(cert#1_1_0_0_2_1, Tclass.M3.WFCertificate())
                             && M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_4, cert#1_1_0_0_2_1));
                    assume M3.__default.GetCert#canCall(p#1_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(p#1_0));
                    ##cert#1_1_0_0_2_1 := M3.__default.GetCert(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#1_1_0_0_2_1, Tclass.M3.WFCertificate(), $Heap);
                    ##p#1_1_0_0_2_5 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_2_5, Tclass.M3.Path(), $Heap);
                    assume M3.__default.LocInv__Deps#canCall(p#1_0);
                    ##deps#1_1_0_0_2_3 := M3.__default.LocInv__Deps(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_2_3, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_1_0_0_2_1 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_2_1, Tclass.M3.State(), $Heap);
                    assume {:id "id2458"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_2_3, ##cert#1_1_0_0_2_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_3, ##cert#1_1_0_0_2_1)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#1_1_0_0_2_1), ##p#1_1_0_0_2_3);
                    assume {:id "id2459"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_2_3, ##cert#1_1_0_0_2_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_3, ##cert#1_1_0_0_2_1)
                         || (forall d#1_1_0_0_2_1: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_2_3), $Box(d#1_1_0_0_2_1)) } 
                          $Is(d#1_1_0_0_2_1, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_2_3), $Box(d#1_1_0_0_2_1))
                             ==> (exists c#1_1_0_0_2_2: DatatypeType :: 
                              { M3.WFCertificate.p(c#1_1_0_0_2_2) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_2_1), $Box(c#1_1_0_0_2_2)) } 
                              $Is(c#1_1_0_0_2_2, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_2_1), $Box(c#1_1_0_0_2_2))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#1_1_0_0_2_2), d#1_1_0_0_2_1)));
                    assume {:id "id2460"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_2_3, ##cert#1_1_0_0_2_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_2_3, ##cert#1_1_0_0_2_1)
                         || (forall c#1_1_0_0_2_3: DatatypeType :: 
                          { M3.WFCertificate.p(c#1_1_0_0_2_3) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_2_1), $Box(c#1_1_0_0_2_3)) } 
                          $Is(c#1_1_0_0_2_3, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_2_1), $Box(c#1_1_0_0_2_3))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#1_1_0_0_2_3), c#1_1_0_0_2_3));
                    assume {:id "id2461"} {:subsumption 0} Set#Equal(##deps#1_1_0_0_2_3, M3.__default.LocInv__Deps(##p#1_1_0_0_2_3));
                    assume M3.__default.CollectDependencies#canCall(p#1_0, M3.__default.GetCert(p#1_0), M3.__default.LocInv__Deps(p#1_0), st'#1_0);
                    ##deps#1_1_0_0_2_2 := M3.__default.CollectDependencies($LS($LZ), 
                      p#1_0, 
                      M3.__default.GetCert(p#1_0), 
                      M3.__default.LocInv__Deps(p#1_0), 
                      st'#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_2_2, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##p#1_1_0_0_2_6 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_2_6, Tclass.M3.Path(), $Heap);
                    assume M3.__default.LocInv__Exp#canCall(p#1_0);
                    ##exp#1_1_0_0_2_1 := M3.__default.LocInv__Exp(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_2_1, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(M3.__default.LocInv__Cmd(p#1_0), 
                      M3.__default.CollectDependencies($LS($LZ), 
                        p#1_0, 
                        M3.__default.GetCert(p#1_0), 
                        M3.__default.LocInv__Deps(p#1_0), 
                        st'#1_0), 
                      M3.__default.LocInv__Exp(p#1_0));
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(M3.__default.LocInv__Cmd(p#1_0), 
                        M3.__default.CollectDependencies($LS($LZ), 
                          p#1_0, 
                          M3.__default.GetCert(p#1_0), 
                          M3.__default.LocInv__Deps(p#1_0), 
                          st'#1_0), 
                        M3.__default.LocInv__Exp(p#1_0)));
                    assume M3.__default.LocInv__Cmd#canCall(p#1_0)
                       && 
                      M3.__default.GetCert#canCall(p#1_0)
                       && M3.__default.LocInv__Deps#canCall(p#1_0)
                       && M3.__default.CollectDependencies#canCall(p#1_0, M3.__default.GetCert(p#1_0), M3.__default.LocInv__Deps(p#1_0), st'#1_0)
                       && M3.__default.LocInv__Exp#canCall(p#1_0)
                       && M3.__default.RunTool#canCall(M3.__default.LocInv__Cmd(p#1_0), 
                        M3.__default.CollectDependencies($LS($LZ), 
                          p#1_0, 
                          M3.__default.GetCert(p#1_0), 
                          M3.__default.LocInv__Deps(p#1_0), 
                          st'#1_0), 
                        M3.__default.LocInv__Exp(p#1_0));
                    // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##p#1_1_0_0_1_0 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_1_0, Tclass.M3.Path(), $Heap);
                    assume M3.__default.LocInv__Cmd#canCall(p#1_0);
                    ##cmd#1_1_0_0_1_0 := M3.__default.LocInv__Cmd(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_1_0_0_1_0, TSeq(TChar), $Heap);
                    ##p#1_1_0_0_1_1 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_1_1, Tclass.M3.Path(), $Heap);
                    ##p#1_1_0_0_1_2 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_1_2, Tclass.M3.Path(), $Heap);
                    assume {:id "id2443"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#1_1_0_0_1_2)
                       ==> M3.__default.WellFounded(##p#1_1_0_0_1_2)
                         || (exists cert#1_1_0_0_1_0: DatatypeType :: 
                          { M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_2, cert#1_1_0_0_1_0) } 
                          $Is(cert#1_1_0_0_1_0, Tclass.M3.WFCertificate())
                             && M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_2, cert#1_1_0_0_1_0));
                    assume M3.__default.GetCert#canCall(p#1_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(p#1_0));
                    ##cert#1_1_0_0_1_0 := M3.__default.GetCert(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#1_1_0_0_1_0, Tclass.M3.WFCertificate(), $Heap);
                    ##p#1_1_0_0_1_3 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_1_3, Tclass.M3.Path(), $Heap);
                    assume M3.__default.LocInv__Deps#canCall(p#1_0);
                    ##deps#1_1_0_0_1_1 := M3.__default.LocInv__Deps(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_1_1, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_1_0_0_1_0 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_1_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2444"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_1_1, ##cert#1_1_0_0_1_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_1, ##cert#1_1_0_0_1_0)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#1_1_0_0_1_0), ##p#1_1_0_0_1_1);
                    assume {:id "id2445"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_1_1, ##cert#1_1_0_0_1_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_1, ##cert#1_1_0_0_1_0)
                         || (forall d#1_1_0_0_1_0: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_1_1), $Box(d#1_1_0_0_1_0)) } 
                          $Is(d#1_1_0_0_1_0, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_1_1), $Box(d#1_1_0_0_1_0))
                             ==> (exists c#1_1_0_0_1_0: DatatypeType :: 
                              { M3.WFCertificate.p(c#1_1_0_0_1_0) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_1_0), $Box(c#1_1_0_0_1_0)) } 
                              $Is(c#1_1_0_0_1_0, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_1_0), $Box(c#1_1_0_0_1_0))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#1_1_0_0_1_0), d#1_1_0_0_1_0)));
                    assume {:id "id2446"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_1_1, ##cert#1_1_0_0_1_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_1, ##cert#1_1_0_0_1_0)
                         || (forall c#1_1_0_0_1_1: DatatypeType :: 
                          { M3.WFCertificate.p(c#1_1_0_0_1_1) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_1_0), $Box(c#1_1_0_0_1_1)) } 
                          $Is(c#1_1_0_0_1_1, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_1_0), $Box(c#1_1_0_0_1_1))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#1_1_0_0_1_1), c#1_1_0_0_1_1));
                    assume {:id "id2447"} {:subsumption 0} Set#Equal(##deps#1_1_0_0_1_1, M3.__default.LocInv__Deps(##p#1_1_0_0_1_1));
                    assume M3.__default.CollectDependencies#canCall(p#1_0, M3.__default.GetCert(p#1_0), M3.__default.LocInv__Deps(p#1_0), st'#1_0);
                    ##deps#1_1_0_0_1_0 := M3.__default.CollectDependencies($LS($LZ), 
                      p#1_0, 
                      M3.__default.GetCert(p#1_0), 
                      M3.__default.LocInv__Deps(p#1_0), 
                      st'#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_1_0_0_1_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##p#1_1_0_0_1_4 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_1_4, Tclass.M3.Path(), $Heap);
                    assume M3.__default.LocInv__Exp#canCall(p#1_0);
                    ##exp#1_1_0_0_1_0 := M3.__default.LocInv__Exp(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_1_0_0_1_0, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(M3.__default.LocInv__Cmd(p#1_0), 
                      M3.__default.CollectDependencies($LS($LZ), 
                        p#1_0, 
                        M3.__default.GetCert(p#1_0), 
                        M3.__default.LocInv__Deps(p#1_0), 
                        st'#1_0), 
                      M3.__default.LocInv__Exp(p#1_0));
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(M3.__default.LocInv__Cmd(p#1_0), 
                        M3.__default.CollectDependencies($LS($LZ), 
                          p#1_0, 
                          M3.__default.GetCert(p#1_0), 
                          M3.__default.LocInv__Deps(p#1_0), 
                          st'#1_0), 
                        M3.__default.LocInv__Exp(p#1_0)));
                    assume M3.__default.LocInv__Cmd#canCall(p#1_0)
                       && 
                      M3.__default.GetCert#canCall(p#1_0)
                       && M3.__default.LocInv__Deps#canCall(p#1_0)
                       && M3.__default.CollectDependencies#canCall(p#1_0, M3.__default.GetCert(p#1_0), M3.__default.LocInv__Deps(p#1_0), st'#1_0)
                       && M3.__default.LocInv__Exp#canCall(p#1_0)
                       && M3.__default.RunTool#canCall(M3.__default.LocInv__Cmd(p#1_0), 
                        M3.__default.CollectDependencies($LS($LZ), 
                          p#1_0, 
                          M3.__default.GetCert(p#1_0), 
                          M3.__default.LocInv__Deps(p#1_0), 
                          st'#1_0), 
                        M3.__default.LocInv__Exp(p#1_0));
                    // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    push;
                    pop;
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##p#1_1_0_0_1_5 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_1_5, Tclass.M3.Path(), $Heap);
                    ##p#1_1_0_0_1_6 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_1_6, Tclass.M3.Path(), $Heap);
                    assume {:id "id2448"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#1_1_0_0_1_6)
                       ==> M3.__default.WellFounded(##p#1_1_0_0_1_6)
                         || (exists cert#1_1_0_0_1_1: DatatypeType :: 
                          { M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_6, cert#1_1_0_0_1_1) } 
                          $Is(cert#1_1_0_0_1_1, Tclass.M3.WFCertificate())
                             && M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_6, cert#1_1_0_0_1_1));
                    assume M3.__default.GetCert#canCall(p#1_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(p#1_0));
                    ##cert#1_1_0_0_1_1 := M3.__default.GetCert(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#1_1_0_0_1_1, Tclass.M3.WFCertificate(), $Heap);
                    ##st#1_1_0_0_1_1 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_1_1, Tclass.M3.State(), $Heap);
                    assume {:id "id2449"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_1_5, ##cert#1_1_0_0_1_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_5, ##cert#1_1_0_0_1_1)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#1_1_0_0_1_1), ##p#1_1_0_0_1_5);
                    assume {:id "id2450"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_1_5, ##cert#1_1_0_0_1_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_5, ##cert#1_1_0_0_1_1)
                         || (forall d#1_1_0_0_1_1: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_1_5), $Box(d#1_1_0_0_1_1)) } 
                          $Is(d#1_1_0_0_1_1, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_1_5), $Box(d#1_1_0_0_1_1))
                             ==> (exists c#1_1_0_0_1_2: DatatypeType :: 
                              { M3.WFCertificate.p(c#1_1_0_0_1_2) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_1_1), $Box(c#1_1_0_0_1_2)) } 
                              $Is(c#1_1_0_0_1_2, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_1_1), $Box(c#1_1_0_0_1_2))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#1_1_0_0_1_2), d#1_1_0_0_1_1)));
                    assume {:id "id2451"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_1_5, ##cert#1_1_0_0_1_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_1_5, ##cert#1_1_0_0_1_1)
                         || (forall c#1_1_0_0_1_3: DatatypeType :: 
                          { M3.WFCertificate.p(c#1_1_0_0_1_3) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_1_1), $Box(c#1_1_0_0_1_3)) } 
                          $Is(c#1_1_0_0_1_3, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_1_1), $Box(c#1_1_0_0_1_3))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#1_1_0_0_1_3), c#1_1_0_0_1_3));
                    assume M3.__default.OracleWF#canCall(p#1_0, M3.__default.GetCert(p#1_0), st'#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), st'#1_0));
                    assume M3.__default.GetCert#canCall(p#1_0)
                       && M3.__default.OracleWF#canCall(p#1_0, M3.__default.GetCert(p#1_0), st'#1_0);
                    // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##p#1_1_0_0_0_0 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_0_0, Tclass.M3.Path(), $Heap);
                    ##p#1_1_0_0_0_1 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_0_1, Tclass.M3.Path(), $Heap);
                    assume {:id "id2438"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#1_1_0_0_0_1)
                       ==> M3.__default.WellFounded(##p#1_1_0_0_0_1)
                         || (exists cert#1_1_0_0_0_0: DatatypeType :: 
                          { M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_0_1, cert#1_1_0_0_0_0) } 
                          $Is(cert#1_1_0_0_0_0, Tclass.M3.WFCertificate())
                             && M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_0_1, cert#1_1_0_0_0_0));
                    assume M3.__default.GetCert#canCall(p#1_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(p#1_0));
                    ##cert#1_1_0_0_0_0 := M3.__default.GetCert(p#1_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#1_1_0_0_0_0, Tclass.M3.WFCertificate(), $Heap);
                    ##st#1_1_0_0_0_0 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_0_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2439"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_0_0, ##cert#1_1_0_0_0_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_0_0, ##cert#1_1_0_0_0_0)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#1_1_0_0_0_0), ##p#1_1_0_0_0_0);
                    assume {:id "id2440"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_0_0, ##cert#1_1_0_0_0_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_0_0, ##cert#1_1_0_0_0_0)
                         || (forall d#1_1_0_0_0_0: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_0_0), $Box(d#1_1_0_0_0_0)) } 
                          $Is(d#1_1_0_0_0_0, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#1_1_0_0_0_0), $Box(d#1_1_0_0_0_0))
                             ==> (exists c#1_1_0_0_0_0: DatatypeType :: 
                              { M3.WFCertificate.p(c#1_1_0_0_0_0) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_0_0), $Box(c#1_1_0_0_0_0)) } 
                              $Is(c#1_1_0_0_0_0, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_0_0), $Box(c#1_1_0_0_0_0))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#1_1_0_0_0_0), d#1_1_0_0_0_0)));
                    assume {:id "id2441"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#1_1_0_0_0_0, ##cert#1_1_0_0_0_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#1_1_0_0_0_0, ##cert#1_1_0_0_0_0)
                         || (forall c#1_1_0_0_0_1: DatatypeType :: 
                          { M3.WFCertificate.p(c#1_1_0_0_0_1) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_0_0), $Box(c#1_1_0_0_0_1)) } 
                          $Is(c#1_1_0_0_0_1, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#1_1_0_0_0_0), $Box(c#1_1_0_0_0_1))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#1_1_0_0_0_1), c#1_1_0_0_0_1));
                    assume M3.__default.OracleWF#canCall(p#1_0, M3.__default.GetCert(p#1_0), st'#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), p#1_0, M3.__default.GetCert(p#1_0), st'#1_0));
                    assume M3.__default.GetCert#canCall(p#1_0)
                       && M3.__default.OracleWF#canCall(p#1_0, M3.__default.GetCert(p#1_0), st'#1_0);
                    // ----- Hint6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    push;
                    push;
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](581,15)
                    ##p#1_1_0_0_0_2 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_0_2, Tclass.M3.Path(), $Heap);
                    assume M3.__default.WellFounded#canCall(p#1_0);
                    assume M3.__default.WellFounded#canCall(p#1_0);
                    assume true;
                    assume {:id "id2442"} M3.__default.WellFounded(p#1_0);
                    pop;
                    pop;
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    ##p#1_1_0_0_0_3 := p#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_1_0_0_0_3, Tclass.M3.Path(), $Heap);
                    ##st#1_1_0_0_0_1 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_1_0_0_0_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(p#1_0, st'#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(p#1_0, st'#1_0));
                    assume M3.__default.Oracle#canCall(p#1_0, st'#1_0);
                    // ----- assert line6 == line7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](567,11)
                    assume true;
                    assume false;
                }

                assume {:id "id2469"} M3.Artifact#Equal(a#1_0, M3.__default.Oracle(p#1_0, st'#1_0));
                pop;
            }
            else
            {
            }

            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](585,9)
            ##st#1_1_3 := st'#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#1_1_3, Tclass.M3.State(), $Heap);
            ##st'#1_1_2 := st''#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st'#1_1_2, Tclass.M3.State(), $Heap);
            assume M3.__default.Extends#canCall(st'#1_0, st''#1_0);
            assume M3.__default.Extends#canCall(st'#1_0, st''#1_0);
            assume true;
            assume true;
            assume true;
            assume {:id "id2470"} M3.__default.Extends(st'#1_0, st''#1_0);
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](586,32)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            st0##1_1_0 := st#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            st1##1_1_0 := st'#1_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            st2##1_1_0 := st''#1_0;
            call {:id "id2471"} Call$$M3.__default.Lemma__ExtendsTransitive(st0##1_1_0, st1##1_1_0, st2##1_1_0);
            // TrCallStmt: After ProcessCallStmt
            pop;
            assume {:id "id2472"} M3.__default.Extends#canCall(st'#1_0, st''#1_0)
               ==> M3.__default.Extends(st'#1_0, st''#1_0)
                 || Set#Subset(M3.__default.DomSt(st'#1_0), M3.__default.DomSt(st''#1_0));
            assume {:id "id2473"} M3.__default.Extends#canCall(st'#1_0, st''#1_0)
               ==> M3.__default.Extends(st'#1_0, st''#1_0)
                 || (forall p#1_1_2: DatatypeType :: 
                  { M3.__default.GetSt(p#1_1_2, st'#1_0) } 
                    { M3.__default.GetSt(p#1_1_2, st''#1_0) } 
                    { Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_1_2)) } 
                  $Is(p#1_1_2, Tclass.M3.Path())
                     ==> 
                    Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_1_2))
                     ==> M3.Artifact#Equal(M3.__default.GetSt(p#1_1_2, st''#1_0), M3.__default.GetSt(p#1_1_2, st'#1_0)));
            assume {:id "id2474"} M3.__default.Extends#canCall(st'#1_0, st''#1_0)
               ==> M3.__default.Extends(st'#1_0, st''#1_0)
                 || (forall p#1_1_3: DatatypeType :: 
                  { M3.__default.Oracle(p#1_1_3, st'#1_0) } 
                    { M3.__default.GetSt(p#1_1_3, st''#1_0) } 
                    { Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(p#1_1_3)) } 
                    { Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_1_3)) } 
                  $Is(p#1_1_3, Tclass.M3.Path())
                     ==> 
                    !Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_1_3))
                       && Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(p#1_1_3))
                     ==> M3.Artifact#Equal(M3.__default.GetSt(p#1_1_3, st''#1_0), M3.__default.Oracle(p#1_1_3, st'#1_0)));
            assume {:id "id2475"} M3.__default.Extends#canCall(st#0, st''#1_0)
               ==> M3.__default.Extends(st#0, st''#1_0)
                 || Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st''#1_0));
            assume {:id "id2476"} M3.__default.Extends#canCall(st#0, st''#1_0)
               ==> M3.__default.Extends(st#0, st''#1_0)
                 || (forall p#1_1_4: DatatypeType :: 
                  { M3.__default.GetSt(p#1_1_4, st#0) } 
                    { M3.__default.GetSt(p#1_1_4, st''#1_0) } 
                    { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1_1_4)) } 
                  $Is(p#1_1_4, Tclass.M3.Path())
                     ==> 
                    Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1_1_4))
                     ==> M3.Artifact#Equal(M3.__default.GetSt(p#1_1_4, st''#1_0), M3.__default.GetSt(p#1_1_4, st#0)));
            assume {:id "id2477"} M3.__default.Extends#canCall(st#0, st''#1_0)
               ==> M3.__default.Extends(st#0, st''#1_0)
                 || (forall p#1_1_5: DatatypeType :: 
                  { M3.__default.Oracle(p#1_1_5, st#0) } 
                    { M3.__default.GetSt(p#1_1_5, st''#1_0) } 
                    { Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(p#1_1_5)) } 
                    { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1_1_5)) } 
                  $Is(p#1_1_5, Tclass.M3.Path())
                     ==> 
                    !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1_1_5))
                       && Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(p#1_1_5))
                     ==> M3.Artifact#Equal(M3.__default.GetSt(p#1_1_5, st''#1_0), M3.__default.Oracle(p#1_1_5, st#0)));
            assume false;
        }
        else
        {
            assume Lit(true)
               ==> M3.__default.Extends(st'#1_0, st''#1_0) && M3.__default.Extends(st#0, st''#1_0);
        }

        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](589,7)
        ##cmd#1_4 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#1_4, TSeq(TChar), $Heap);
        ##deps#1_4 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#1_4, TSet(Tclass.M3.Path()), $Heap);
        ##exps#1_2 := exps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exps#1_2, TSet(TSeq(TChar)), $Heap);
        ##paths#1_0 := paths''#1_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#1_0, TSet(Tclass.M3.Path()), $Heap);
        assume M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths''#1_0);
        assume M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths''#1_0);
        assume true;
        assume {:id "id2478"} M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths''#1_0);
        // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](591,7)
        if (*)
        {
            // Assume Fuel Constant
            havoc e#1_2_0;
            assume $Is(e#1_2_0, TSeq(TChar));
            assume true;
            assume {:id "id2479"} Set#IsMember(exps#0, $Box(e#1_2_0));
            if (*)
            {
                ##cmd#1_2_0 := cmd#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#1_2_0, TSeq(TChar), $Heap);
                ##deps#1_2_0 := deps#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#1_2_0, TSet(Tclass.M3.Path()), $Heap);
                ##exp#1_2_0 := e#1_2_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##exp#1_2_0, TSeq(TChar), $Heap);
                assume M3.__default.Loc#canCall(cmd#0, deps#0, e#1_2_0);
                ##st#1_2_0 := st''#1_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#1_2_0, Tclass.M3.State(), $Heap);
                assume M3.__default.DomSt#canCall(st''#1_0);
                if (Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(M3.__default.Loc(cmd#0, deps#0, e#1_2_0))))
                {
                    ##cmd#1_2_1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_2_1, TSeq(TChar), $Heap);
                    ##deps#1_2_1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_2_1, TSet(Tclass.M3.Path()), $Heap);
                    ##exp#1_2_1 := e#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_2_1, TSeq(TChar), $Heap);
                    assume M3.__default.Loc#canCall(cmd#0, deps#0, e#1_2_0);
                    ##p#1_2_0 := M3.__default.Loc(cmd#0, deps#0, e#1_2_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_0, Tclass.M3.Path(), $Heap);
                    ##st#1_2_1 := st''#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_1, Tclass.M3.State(), $Heap);
                    assume {:id "id2480"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#1_2_1), $Box(##p#1_2_0));
                    assume M3.__default.GetSt#canCall(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0));
                    ##cmd#1_2_2 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_2_2, TSeq(TChar), $Heap);
                    ##deps#1_2_2 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_2_2, TSet(Tclass.M3.Path()), $Heap);
                    ##exp#1_2_2 := e#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_2_2, TSeq(TChar), $Heap);
                    assume M3.__default.Loc#canCall(cmd#0, deps#0, e#1_2_0);
                    ##p#1_2_1 := M3.__default.Loc(cmd#0, deps#0, e#1_2_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_1, Tclass.M3.Path(), $Heap);
                    ##st#1_2_2 := st''#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_2, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0));
                }

                assume M3.__default.Loc#canCall(cmd#0, deps#0, e#1_2_0)
                   && M3.__default.DomSt#canCall(st''#1_0)
                   && (Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(M3.__default.Loc(cmd#0, deps#0, e#1_2_0)))
                     ==> $IsA#M3.Artifact(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0))
                       && $IsA#M3.Artifact(M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0))
                       && 
                      M3.__default.Loc#canCall(cmd#0, deps#0, e#1_2_0)
                       && M3.__default.GetSt#canCall(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0)
                       && 
                      M3.__default.Loc#canCall(cmd#0, deps#0, e#1_2_0)
                       && M3.__default.Oracle#canCall(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0));
                assume {:id "id2481"} Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(M3.__default.Loc(cmd#0, deps#0, e#1_2_0)))
                   && M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0), 
                    M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0));
                assume false;
            }

            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(594,15)
            assume true;
            ##cmd#1_2_3 := cmd#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#1_2_3, TSeq(TChar), $Heap);
            ##deps#1_2_3 := deps#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#1_2_3, TSet(Tclass.M3.Path()), $Heap);
            ##exp#1_2_3 := e#1_2_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##exp#1_2_3, TSeq(TChar), $Heap);
            assume M3.__default.Loc#canCall(cmd#0, deps#0, e#1_2_0);
            assume M3.__default.Loc#canCall(cmd#0, deps#0, e#1_2_0);
            p#1_2_0 := M3.__default.Loc(cmd#0, deps#0, e#1_2_0);
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](595,9)
            ##st#1_2_3 := st''#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#1_2_3, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st''#1_0);
            assume M3.__default.DomSt#canCall(st''#1_0);
            assume {:id "id2483"} Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(p#1_2_0));
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](596,9)
            ##st#1_2_4 := st'#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#1_2_4, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st'#1_0);
            assume M3.__default.DomSt#canCall(st'#1_0);
            if (Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_2_0)))
            {
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    ##p#1_2_0_0_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_0_0_0, Tclass.M3.Path(), $Heap);
                    ##st#1_2_0_0_0 := st''#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_0_0_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2489"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#1_2_0_0_0), $Box(##p#1_2_0_0_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st''#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(p#1_2_0, st''#1_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st''#1_0);
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    ##p#1_2_0_0_2_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_0_0_2_0, Tclass.M3.Path(), $Heap);
                    ##st#1_2_0_0_2_0 := st''#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_0_0_2_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2486"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#1_2_0_0_2_0), $Box(##p#1_2_0_0_2_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st''#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(p#1_2_0, st''#1_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st''#1_0);
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](599,15)
                    ##st#1_2_0_0_2_1 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_0_0_2_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.DomSt#canCall(st'#1_0);
                    if (Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_2_0)))
                    {
                        ##st#1_2_0_0_2_2 := st'#1_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st#1_2_0_0_2_2, Tclass.M3.State(), $Heap);
                        ##st'#1_2_0_0_2_0 := st''#1_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st'#1_2_0_0_2_0, Tclass.M3.State(), $Heap);
                        assume M3.__default.Extends#canCall(st'#1_0, st''#1_0);
                    }

                    assume M3.__default.DomSt#canCall(st'#1_0)
                       && (Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_2_0))
                         ==> M3.__default.Extends#canCall(st'#1_0, st''#1_0));
                    assume true;
                    assume true;
                    assume true;
                    assume true;
                    assume {:id "id2487"} Set#IsMember(M3.__default.DomSt(st'#1_0), $Box(p#1_2_0))
                       && M3.__default.Extends(st'#1_0, st''#1_0);
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    ##p#1_2_0_0_2_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_0_0_2_1, Tclass.M3.Path(), $Heap);
                    ##st#1_2_0_0_2_3 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_0_0_2_3, Tclass.M3.State(), $Heap);
                    assume {:id "id2488"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#1_2_0_0_2_3), $Box(##p#1_2_0_0_2_1));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st'#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(p#1_2_0, st'#1_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st'#1_0);
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    ##p#1_2_0_0_1_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_0_0_1_0, Tclass.M3.Path(), $Heap);
                    ##st#1_2_0_0_1_0 := st'#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_0_0_1_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2485"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#1_2_0_0_1_0), $Box(##p#1_2_0_0_1_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st'#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(p#1_2_0, st'#1_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st'#1_0);
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    ##p#1_2_0_0_1_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_0_0_1_1, Tclass.M3.Path(), $Heap);
                    ##st#1_2_0_0_1_1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_0_0_1_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(p#1_2_0, st#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(p#1_2_0, st#0));
                    assume M3.__default.Oracle#canCall(p#1_2_0, st#0);
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    ##p#1_2_0_0_0_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_0_0_0_0, Tclass.M3.Path(), $Heap);
                    ##st#1_2_0_0_0_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_0_0_0_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(p#1_2_0, st#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(p#1_2_0, st#0));
                    assume M3.__default.Oracle#canCall(p#1_2_0, st#0);
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](603,29)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##1_2_0_0_0_0 := p#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_2_0_0_0_0 := st#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_2_0_0_0_0 := st''#1_0;
                    call {:id "id2484"} Call$$M3.__default.OracleProperty(p##1_2_0_0_0_0, st0##1_2_0_0_0_0, st1##1_2_0_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    ##p#1_2_0_0_0_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_0_0_0_1, Tclass.M3.Path(), $Heap);
                    ##st#1_2_0_0_0_1 := st''#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_0_0_0_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(p#1_2_0, st''#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(p#1_2_0, st''#1_0));
                    assume M3.__default.Oracle#canCall(p#1_2_0, st''#1_0);
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](597,11)
                    assume true;
                    assume false;
                }

                assume {:id "id2490"} M3.Artifact#Equal(M3.__default.GetSt(p#1_2_0, st''#1_0), M3.__default.Oracle(p#1_2_0, st''#1_0));
            }
            else
            {
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    ##p#1_2_1_0_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_1_0_0, Tclass.M3.Path(), $Heap);
                    ##st#1_2_1_0_0 := st''#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_1_0_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2493"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#1_2_1_0_0), $Box(##p#1_2_1_0_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st''#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(p#1_2_0, st''#1_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st''#1_0);
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    ##p#1_2_1_0_3_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_1_0_3_0, Tclass.M3.Path(), $Heap);
                    ##st#1_2_1_0_3_0 := st''#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_1_0_3_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2492"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#1_2_1_0_3_0), $Box(##p#1_2_1_0_3_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st''#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(p#1_2_0, st''#1_0));
                    assume M3.__default.GetSt#canCall(p#1_2_0, st''#1_0);
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    ##cmd#1_2_1_0_3_0 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_2_1_0_3_0, TSeq(TChar), $Heap);
                    ##deps#1_2_1_0_3_0 := restrictedState#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_2_1_0_3_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_2_1_0_3_0 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_2_1_0_3_0, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, restrictedState#0, exp#1_0));
                    assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    ##cmd#1_2_1_0_2_0 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_2_1_0_2_0, TSeq(TChar), $Heap);
                    ##deps#1_2_1_0_2_0 := restrictedState#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_2_1_0_2_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_2_1_0_2_0 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_2_1_0_2_0, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, restrictedState#0, exp#1_0));
                    assume M3.__default.RunTool#canCall(cmd#0, restrictedState#0, exp#1_0);
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    ##cmd#1_2_1_0_2_1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_2_1_0_2_1, TSeq(TChar), $Heap);
                    ##paths#1_2_1_0_2_0 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##paths#1_2_1_0_2_0, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_2_1_0_2_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_1_0_2_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.Restrict#canCall(deps#0, st#0);
                    ##deps#1_2_1_0_2_1 := M3.__default.Restrict(deps#0, st#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_2_1_0_2_1, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_2_1_0_2_1 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_2_1_0_2_1, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0));
                    assume M3.__default.Restrict#canCall(deps#0, st#0)
                       && M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0);
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    ##cmd#1_2_1_0_1_0 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1_2_1_0_1_0, TSeq(TChar), $Heap);
                    ##paths#1_2_1_0_1_0 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##paths#1_2_1_0_1_0, TSet(Tclass.M3.Path()), $Heap);
                    ##st#1_2_1_0_1_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_1_0_1_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.Restrict#canCall(deps#0, st#0);
                    ##deps#1_2_1_0_1_0 := M3.__default.Restrict(deps#0, st#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1_2_1_0_1_0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
                    ##exp#1_2_1_0_1_0 := exp#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1_2_1_0_1_0, TSeq(TChar), $Heap);
                    assume M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.RunTool(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0));
                    assume M3.__default.Restrict#canCall(deps#0, st#0)
                       && M3.__default.RunTool#canCall(cmd#0, M3.__default.Restrict(deps#0, st#0), exp#1_0);
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    ##p#1_2_1_0_1_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_1_0_1_0, Tclass.M3.Path(), $Heap);
                    ##st#1_2_1_0_1_1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_1_0_1_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(p#1_2_0, st#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(p#1_2_0, st#0));
                    assume M3.__default.Oracle#canCall(p#1_2_0, st#0);
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    ##p#1_2_1_0_0_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_1_0_0_0, Tclass.M3.Path(), $Heap);
                    ##st#1_2_1_0_0_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_1_0_0_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(p#1_2_0, st#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(p#1_2_0, st#0));
                    assume M3.__default.Oracle#canCall(p#1_2_0, st#0);
                    // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](613,29)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##1_2_1_0_0_0 := p#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_2_1_0_0_0 := st#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_2_1_0_0_0 := st''#1_0;
                    call {:id "id2491"} Call$$M3.__default.OracleProperty(p##1_2_1_0_0_0, st0##1_2_1_0_0_0, st1##1_2_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    ##p#1_2_1_0_0_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1_2_1_0_0_1, Tclass.M3.Path(), $Heap);
                    ##st#1_2_1_0_0_1 := st''#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#1_2_1_0_0_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(p#1_2_0, st''#1_0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(p#1_2_0, st''#1_0));
                    assume M3.__default.Oracle#canCall(p#1_2_0, st''#1_0);
                    // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](607,11)
                    assume true;
                    assume false;
                }

                assume {:id "id2494"} M3.Artifact#Equal(M3.__default.GetSt(p#1_2_0, st''#1_0), M3.__default.Oracle(p#1_2_0, st''#1_0));
            }

            assume {:id "id2495"} Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(M3.__default.Loc(cmd#0, deps#0, e#1_2_0)));
            assume {:id "id2496"} M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0), 
              M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#1_2_0), st''#1_0));
            assume false;
        }
        else
        {
            assume (forall e#1_2_1: Seq :: 
              { M3.__default.Loc(cmd#0, deps#0, e#1_2_1) } 
                { Set#IsMember(exps#0, $Box(e#1_2_1)) } 
              $Is(e#1_2_1, TSeq(TChar)) && Set#IsMember(exps#0, $Box(e#1_2_1))
                 ==> Set#IsMember(M3.__default.DomSt(st''#1_0), $Box(M3.__default.Loc(cmd#0, deps#0, e#1_2_1)))
                   && M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#1_2_1), st''#1_0), 
                    M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#1_2_1), st''#1_0)));
        }
    }
}



procedure {:verboseName "M3.ExecOne_Lemma0 (well-formedness)"} CheckWellFormed$$M3.__default.ExecOne__Lemma0(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.ExecOne_Lemma0 (call)"} Call$$M3.__default.ExecOne__Lemma0(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0));
  // user-defined preconditions
  requires {:id "id2502"} (forall d#1: DatatypeType :: 
    { M3.__default.WellFounded(d#1) } 
      { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1)) } 
    $Is(d#1, Tclass.M3.Path())
       ==> 
      Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1))
       ==> M3.__default.WellFounded(d#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.WellFounded#canCall(p#0);
  free ensures {:id "id2503"} M3.__default.WellFounded#canCall(p#0)
     && 
    M3.__default.WellFounded(p#0)
     && (exists cert#0: DatatypeType :: 
      { M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0) } 
      $Is(cert#0, Tclass.M3.WFCertificate())
         && M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.ExecOne_Lemma0 (correctness)"} Impl$$M3.__default.ExecOne__Lemma0(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id2504"} (forall d#1: DatatypeType :: 
    { M3.__default.WellFounded(d#1) } 
      { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1)) } 
    $Is(d#1, Tclass.M3.Path())
       ==> 
      Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1))
       ==> M3.__default.WellFounded(d#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.WellFounded#canCall(p#0);
  ensures {:id "id2505"} $_reverifyPost
     ==> 
    M3.__default.WellFounded#canCall(p#0)
     ==> M3.__default.WellFounded(p#0)
       || (exists cert#1: DatatypeType :: 
        { M3.__default.CheckWellFounded($LS($LZ), p#0, cert#1) } 
        $Is(cert#1, Tclass.M3.WFCertificate())
           && M3.__default.CheckWellFounded($LS($LZ), p#0, cert#1));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.ExecOne_Lemma0 (correctness)"} Impl$$M3.__default.ExecOne__Lemma0(p#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var certs#0: Set
     where $Is(certs#0, TSet(Tclass.M3.WFCertificate()))
       && $IsAlloc(certs#0, TSet(Tclass.M3.WFCertificate()), $Heap);
  var d#3: DatatypeType;
  var ##p#3: DatatypeType;
  var ##p#4: DatatypeType;
  var ##p#5: DatatypeType;
  var ##cert#0: DatatypeType;

    // AddMethodImpl: ExecOne_Lemma0, Impl$$M3.__default.ExecOne__Lemma0
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(624,15)
    assume true;
    // Begin Comprehension WF check
    havoc d#3;
    if ($Is(d#3, Tclass.M3.Path()) && $IsAlloc(d#3, Tclass.M3.Path(), $Heap))
    {
        ##p#3 := p#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##p#3, Tclass.M3.Path(), $Heap);
        assume M3.__default.LocInv__Deps#canCall(p#0);
        if (Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#3)))
        {
            ##p#4 := d#3;
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#4, Tclass.M3.Path(), $Heap);
            assume true;
            assume M3.__default.WellFounded(##p#4);
            assume M3.__default.GetCert#canCall(d#3);
            assume M3.WFCertificate.Cert_q(M3.__default.GetCert(d#3));
        }
    }

    // End Comprehension WF check
    assume (forall d#2: DatatypeType :: 
      { M3.__default.GetCert(d#2) } 
        { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
      $Is(d#2, Tclass.M3.Path())
         ==> M3.__default.LocInv__Deps#canCall(p#0)
           && (Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2))
             ==> M3.__default.GetCert#canCall(d#2)));
    certs#0 := Set#FromBoogieMap((lambda $y#0: Box :: 
        (exists d#2: DatatypeType :: 
          { M3.__default.GetCert(d#2) } 
            { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
          $Is(d#2, Tclass.M3.Path())
             && Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2))
             && $y#0 == $Box(M3.__default.GetCert(d#2)))));
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](625,5)
    ##p#5 := p#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##p#5, Tclass.M3.Path(), $Heap);
    ##cert#0 := #M3.WFCertificate.Cert(p#0, certs#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##cert#0, Tclass.M3.WFCertificate(), $Heap);
    assume M3.__default.CheckWellFounded#canCall(p#0, #M3.WFCertificate.Cert(p#0, certs#0));
    assume M3.__default.CheckWellFounded#canCall(p#0, #M3.WFCertificate.Cert(p#0, certs#0));
    assume true;
    assume true;
    assume true;
    assume {:id "id2507"} M3.__default.CheckWellFounded($LS($LS($LZ)), p#0, #M3.WFCertificate.Cert(p#0, certs#0));
}



// function declaration for M3._default.GetCert
function M3.__default.GetCert(p#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.GetCert
axiom 4 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType :: 
    { M3.__default.GetCert(p#0) } 
    M3.__default.GetCert#canCall(p#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && M3.__default.WellFounded(p#0))
       ==> M3.__default.CheckWellFounded($LS($LZ), p#0, M3.__default.GetCert(p#0))
         && $Is(M3.__default.GetCert(p#0), Tclass.M3.WFCertificate()));
// definition axiom for M3.__default.GetCert (revealed)
axiom {:id "id2508"} 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    { M3.__default.GetCert(p#0), $IsGoodHeap($Heap) } 
    M3.__default.GetCert#canCall(p#0)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(p#0, Tclass.M3.Path())
           && M3.__default.WellFounded(p#0))
       ==> $let#30$canCall(p#0)
         && M3.__default.GetCert(p#0) == (var c#0 := $let#30_c(p#0); c#0));
// definition axiom for M3.__default.GetCert for all literals (revealed)
axiom {:id "id2509"} 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    {:weight 3} { M3.__default.GetCert(Lit(p#0)), $IsGoodHeap($Heap) } 
    M3.__default.GetCert#canCall(Lit(p#0))
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(p#0, Tclass.M3.Path())
           && Lit(M3.__default.WellFounded(Lit(p#0))))
       ==> $let#30$canCall(Lit(p#0))
         && M3.__default.GetCert(Lit(p#0)) == (var c#1 := $let#30_c(Lit(p#0)); c#1));
}

function M3.__default.GetCert#canCall(p#0: DatatypeType) : bool;

function M3.__default.GetCert#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.GetCert
axiom (forall $Heap: Heap, p#0: DatatypeType :: 
  { M3.__default.GetCert#requires(p#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path())
     ==> M3.__default.GetCert#requires(p#0) == M3.__default.WellFounded(p#0));

function $let#30_c(p: DatatypeType) : DatatypeType;

function $let#30$canCall(p: DatatypeType) : bool;

axiom (forall p: DatatypeType :: 
  { $let#30_c(p) } 
  $let#30$canCall(p)
     ==> $Is($let#30_c(p), Tclass.M3.WFCertificate())
       && M3.__default.CheckWellFounded($LS($LZ), p, $let#30_c(p)));

procedure {:verboseName "M3.GetCert (well-formedness)"} CheckWellformed$$M3.__default.GetCert(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.Oracle
function M3.__default.Oracle(p#0: DatatypeType, st#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.Oracle
axiom 5 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.Oracle(p#0, st#0) } 
    M3.__default.Oracle#canCall(p#0, st#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(st#0, Tclass.M3.State()))
       ==> $Is(M3.__default.Oracle(p#0, st#0), Tclass.M3.Artifact()));
// definition axiom for M3.__default.Oracle (revealed)
axiom {:id "id2515"} 5 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.Oracle(p#0, st#0) } 
    M3.__default.Oracle#canCall(p#0, st#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(st#0, Tclass.M3.State()))
       ==> M3.__default.WellFounded#canCall(p#0)
         && (M3.__default.WellFounded(p#0)
           ==> M3.__default.GetCert#canCall(p#0)
             && M3.__default.OracleWF#canCall(p#0, M3.__default.GetCert(p#0), st#0))
         && (!M3.__default.WellFounded(p#0) ==> M3.__default.OracleArbitrary#canCall(p#0))
         && M3.__default.Oracle(p#0, st#0)
           == (if M3.__default.WellFounded(p#0)
             then M3.__default.OracleWF($LS($LZ), p#0, M3.__default.GetCert(p#0), st#0)
             else M3.__default.OracleArbitrary(p#0)));
// definition axiom for M3.__default.Oracle for decreasing-related literals (revealed)
axiom {:id "id2516"} 5 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.Oracle(p#0, Lit(st#0)) } 
    M3.__default.Oracle#canCall(p#0, Lit(st#0))
         || (5 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(st#0, Tclass.M3.State()))
       ==> M3.__default.WellFounded#canCall(p#0)
         && (M3.__default.WellFounded(p#0)
           ==> M3.__default.GetCert#canCall(p#0)
             && M3.__default.OracleWF#canCall(p#0, M3.__default.GetCert(p#0), Lit(st#0)))
         && (!M3.__default.WellFounded(p#0) ==> M3.__default.OracleArbitrary#canCall(p#0))
         && M3.__default.Oracle(p#0, Lit(st#0))
           == (if M3.__default.WellFounded(p#0)
             then M3.__default.OracleWF($LS($LZ), p#0, M3.__default.GetCert(p#0), Lit(st#0))
             else M3.__default.OracleArbitrary(p#0)));
// definition axiom for M3.__default.Oracle for all literals (revealed)
axiom {:id "id2517"} 5 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.Oracle(Lit(p#0), Lit(st#0)) } 
    M3.__default.Oracle#canCall(Lit(p#0), Lit(st#0))
         || (5 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(st#0, Tclass.M3.State()))
       ==> M3.__default.WellFounded#canCall(Lit(p#0))
         && (Lit(M3.__default.WellFounded(Lit(p#0)))
           ==> M3.__default.GetCert#canCall(Lit(p#0))
             && M3.__default.OracleWF#canCall(Lit(p#0), Lit(M3.__default.GetCert(Lit(p#0))), Lit(st#0)))
         && (!Lit(M3.__default.WellFounded(Lit(p#0)))
           ==> M3.__default.OracleArbitrary#canCall(Lit(p#0)))
         && M3.__default.Oracle(Lit(p#0), Lit(st#0))
           == (if M3.__default.WellFounded(Lit(p#0))
             then M3.__default.OracleWF($LS($LZ), Lit(p#0), Lit(M3.__default.GetCert(Lit(p#0))), Lit(st#0))
             else M3.__default.OracleArbitrary(Lit(p#0))));
}

function M3.__default.Oracle#canCall(p#0: DatatypeType, st#0: DatatypeType) : bool;

function M3.__default.Oracle#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.Oracle
axiom (forall p#0: DatatypeType, st#0: DatatypeType :: 
  { M3.__default.Oracle#requires(p#0, st#0) } 
  $Is(p#0, Tclass.M3.Path()) && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.Oracle#requires(p#0, st#0) == true);

procedure {:verboseName "M3.Oracle (well-formedness)"} CheckWellformed$$M3.__default.Oracle(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.OracleArbitrary
function M3.__default.OracleArbitrary(p#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.OracleArbitrary
axiom 1 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType :: 
    { M3.__default.OracleArbitrary(p#0) } 
    M3.__default.OracleArbitrary#canCall(p#0)
         || (1 < $FunctionContextHeight && $Is(p#0, Tclass.M3.Path()))
       ==> $Is(M3.__default.OracleArbitrary(p#0), Tclass.M3.Artifact()));
// definition axiom for M3.__default.OracleArbitrary (revealed)
axiom {:id "id2520"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    { M3.__default.OracleArbitrary(p#0), $IsGoodHeap($Heap) } 
    M3.__default.OracleArbitrary#canCall(p#0)
         || (1 < $FunctionContextHeight && $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path()))
       ==> $let#33$canCall()
         && M3.__default.OracleArbitrary(p#0) == (var a#0 := $let#33_a(); a#0));
// definition axiom for M3.__default.OracleArbitrary for all literals (revealed)
axiom {:id "id2521"} 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: DatatypeType :: 
    {:weight 3} { M3.__default.OracleArbitrary(Lit(p#0)), $IsGoodHeap($Heap) } 
    M3.__default.OracleArbitrary#canCall(Lit(p#0))
         || (1 < $FunctionContextHeight && $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path()))
       ==> $let#33$canCall()
         && M3.__default.OracleArbitrary(Lit(p#0)) == (var a#1 := $let#33_a(); a#1));
}

function M3.__default.OracleArbitrary#canCall(p#0: DatatypeType) : bool;

function M3.__default.OracleArbitrary#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.OracleArbitrary
axiom (forall $Heap: Heap, p#0: DatatypeType :: 
  { M3.__default.OracleArbitrary#requires(p#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(p#0, Tclass.M3.Path())
     ==> M3.__default.OracleArbitrary#requires(p#0) == true);

function $let#33_a() : DatatypeType;

function $let#33$canCall() : bool
uses {
axiom $let#33$canCall() ==> $Is($let#33_a(), Tclass.M3.Artifact()) && Lit(true);
}

procedure {:verboseName "M3.OracleArbitrary (well-formedness)"} CheckWellformed$$M3.__default.OracleArbitrary(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.OracleWF
function M3.__default.OracleWF($ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType, st#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for M3.__default.OracleWF
axiom 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.OracleWF($ly, p#0, cert#0, st#0) } 
    M3.__default.OracleWF#canCall(p#0, cert#0, st#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate())
           && $Is(st#0, Tclass.M3.State())
           && M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0))
       ==> $Is(M3.__default.OracleWF($ly, p#0, cert#0, st#0), Tclass.M3.Artifact()));
// definition axiom for M3.__default.OracleWF (revealed)
axiom {:id "id2524"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.OracleWF($LS($ly), p#0, cert#0, st#0) } 
    M3.__default.OracleWF#canCall(p#0, cert#0, st#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate())
           && $Is(st#0, Tclass.M3.State())
           && M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0))
       ==> M3.__default.LocInv__Cmd#canCall(p#0)
         && M3.__default.LocInv__Deps#canCall(p#0)
         && M3.__default.LocInv__Exp#canCall(p#0)
         && (var cmd#0, deps#0, e#0 := M3.__default.LocInv__Cmd(p#0), 
            M3.__default.LocInv__Deps(p#0), 
            M3.__default.LocInv__Exp(p#0); 
          M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st#0)
             && M3.__default.RunTool#canCall(cmd#0, M3.__default.CollectDependencies($ly, p#0, cert#0, deps#0, st#0), e#0))
         && M3.__default.OracleWF($LS($ly), p#0, cert#0, st#0)
           == (var cmd#0, deps#0, e#0 := M3.__default.LocInv__Cmd(p#0), 
              M3.__default.LocInv__Deps(p#0), 
              M3.__default.LocInv__Exp(p#0); 
            M3.__default.RunTool(cmd#0, M3.__default.CollectDependencies($ly, p#0, cert#0, deps#0, st#0), e#0)));
// definition axiom for M3.__default.OracleWF for decreasing-related literals (revealed)
axiom {:id "id2525"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.OracleWF($LS($ly), p#0, Lit(cert#0), st#0) } 
    M3.__default.OracleWF#canCall(p#0, Lit(cert#0), st#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate())
           && $Is(st#0, Tclass.M3.State())
           && M3.__default.CheckWellFounded($LS($LZ), p#0, Lit(cert#0)))
       ==> M3.__default.LocInv__Cmd#canCall(p#0)
         && M3.__default.LocInv__Deps#canCall(p#0)
         && M3.__default.LocInv__Exp#canCall(p#0)
         && (var cmd#1, deps#1, e#1 := M3.__default.LocInv__Cmd(p#0), 
            M3.__default.LocInv__Deps(p#0), 
            M3.__default.LocInv__Exp(p#0); 
          M3.__default.CollectDependencies#canCall(p#0, Lit(cert#0), deps#1, st#0)
             && M3.__default.RunTool#canCall(cmd#1, 
              M3.__default.CollectDependencies($LS($ly), p#0, Lit(cert#0), deps#1, st#0), 
              e#1))
         && M3.__default.OracleWF($LS($ly), p#0, Lit(cert#0), st#0)
           == (var cmd#1, deps#1, e#1 := M3.__default.LocInv__Cmd(p#0), 
              M3.__default.LocInv__Deps(p#0), 
              M3.__default.LocInv__Exp(p#0); 
            M3.__default.RunTool(cmd#1, 
              M3.__default.CollectDependencies($LS($ly), p#0, Lit(cert#0), deps#1, st#0), 
              e#1)));
// definition axiom for M3.__default.OracleWF for all literals (revealed)
axiom {:id "id2526"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.OracleWF($LS($ly), Lit(p#0), Lit(cert#0), Lit(st#0)) } 
    M3.__default.OracleWF#canCall(Lit(p#0), Lit(cert#0), Lit(st#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate())
           && $Is(st#0, Tclass.M3.State())
           && Lit(M3.__default.CheckWellFounded($LS($LZ), Lit(p#0), Lit(cert#0))))
       ==> M3.__default.LocInv__Cmd#canCall(Lit(p#0))
         && M3.__default.LocInv__Deps#canCall(Lit(p#0))
         && M3.__default.LocInv__Exp#canCall(Lit(p#0))
         && (var cmd#2, deps#2, e#2 := Lit(M3.__default.LocInv__Cmd(Lit(p#0))), 
            Lit(M3.__default.LocInv__Deps(Lit(p#0))), 
            Lit(M3.__default.LocInv__Exp(Lit(p#0))); 
          M3.__default.CollectDependencies#canCall(Lit(p#0), Lit(cert#0), deps#2, Lit(st#0))
             && M3.__default.RunTool#canCall(cmd#2, 
              M3.__default.CollectDependencies($LS($ly), Lit(p#0), Lit(cert#0), deps#2, Lit(st#0)), 
              e#2))
         && M3.__default.OracleWF($LS($ly), Lit(p#0), Lit(cert#0), Lit(st#0))
           == (var cmd#2, deps#2, e#2 := Lit(M3.__default.LocInv__Cmd(Lit(p#0))), 
              Lit(M3.__default.LocInv__Deps(Lit(p#0))), 
              Lit(M3.__default.LocInv__Exp(Lit(p#0))); 
            M3.__default.RunTool(cmd#2, 
              M3.__default.CollectDependencies($LS($ly), Lit(p#0), Lit(cert#0), deps#2, Lit(st#0)), 
              e#2)));
}

function M3.__default.OracleWF#canCall(p#0: DatatypeType, cert#0: DatatypeType, st#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType, st#0: DatatypeType :: 
  { M3.__default.OracleWF($LS($ly), p#0, cert#0, st#0) } 
  M3.__default.OracleWF($LS($ly), p#0, cert#0, st#0)
     == M3.__default.OracleWF($ly, p#0, cert#0, st#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType, st#0: DatatypeType :: 
  { M3.__default.OracleWF(AsFuelBottom($ly), p#0, cert#0, st#0) } 
  M3.__default.OracleWF($ly, p#0, cert#0, st#0)
     == M3.__default.OracleWF($LZ, p#0, cert#0, st#0));

function M3.__default.OracleWF#requires(LayerType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.OracleWF
axiom (forall $ly: LayerType, p#0: DatatypeType, cert#0: DatatypeType, st#0: DatatypeType :: 
  { M3.__default.OracleWF#requires($ly, p#0, cert#0, st#0) } 
  $Is(p#0, Tclass.M3.Path())
       && $Is(cert#0, Tclass.M3.WFCertificate())
       && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.OracleWF#requires($ly, p#0, cert#0, st#0)
       == M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0));

procedure {:verboseName "M3.OracleWF (well-formedness)"} CheckWellformed$$M3.__default.OracleWF(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()), 
    cert#0: DatatypeType where $Is(cert#0, Tclass.M3.WFCertificate()), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.CollectDependencies
function M3.__default.CollectDependencies($ly: LayerType, 
    p#0: DatatypeType, 
    cert#0: DatatypeType, 
    deps#0: Set, 
    st#0: DatatypeType)
   : Map
uses {
// consequence axiom for M3.__default.CollectDependencies
axiom 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      p#0: DatatypeType, 
      cert#0: DatatypeType, 
      deps#0: Set, 
      st#0: DatatypeType :: 
    { M3.__default.CollectDependencies($ly, p#0, cert#0, deps#0, st#0) } 
    M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate())
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(st#0, Tclass.M3.State())
           && 
          M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
           && Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0)))
       ==> $Is(M3.__default.CollectDependencies($ly, p#0, cert#0, deps#0, st#0), 
        TMap(Tclass.M3.Path(), Tclass.M3.Artifact())));
// definition axiom for M3.__default.CollectDependencies (revealed)
axiom {:id "id2537"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      p#0: DatatypeType, 
      cert#0: DatatypeType, 
      deps#0: Set, 
      st#0: DatatypeType :: 
    { M3.__default.CollectDependencies($LS($ly), p#0, cert#0, deps#0, st#0) } 
    M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate())
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(st#0, Tclass.M3.State())
           && 
          M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
           && Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0)))
       ==> (forall d#0: DatatypeType :: 
          { M3.__default.FindCert(d#0, M3.WFCertificate.certs(cert#0)) } 
            { M3.__default.GetSt(d#0, st#0) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0)) } 
            { Set#IsMember(deps#0, $Box(d#0)) } 
          $Is(d#0, Tclass.M3.Path())
             ==> 
            Set#IsMember(deps#0, $Box(d#0))
             ==> M3.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0))
                 ==> M3.__default.GetSt#canCall(d#0, st#0))
               && (!Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0))
                 ==> M3.WFCertificate.Cert_q(cert#0)
                   && M3.__default.FindCert#canCall(d#0, M3.WFCertificate.certs(cert#0))
                   && M3.__default.OracleWF#canCall(d#0, M3.__default.FindCert(d#0, M3.WFCertificate.certs(cert#0)), st#0)))
         && M3.__default.CollectDependencies($LS($ly), p#0, cert#0, deps#0, st#0)
           == Map#Glue(Set#FromBoogieMap((lambda $w#0: Box :: 
                $IsBox($w#0, Tclass.M3.Path()) && Set#IsMember(deps#0, $w#0))), 
            (lambda $w#0: Box :: 
              $Box((if Set#IsMember(M3.__default.DomSt(st#0), $w#0)
                   then M3.__default.GetSt($Unbox($w#0): DatatypeType, st#0)
                   else M3.__default.OracleWF($ly, 
                    $Unbox($w#0): DatatypeType, 
                    M3.__default.FindCert($Unbox($w#0): DatatypeType, M3.WFCertificate.certs(cert#0)), 
                    st#0)))), 
            TMap(Tclass.M3.Path(), Tclass.M3.Artifact())));
// definition axiom for M3.__default.CollectDependencies for decreasing-related literals (revealed)
axiom {:id "id2538"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      p#0: DatatypeType, 
      cert#0: DatatypeType, 
      deps#0: Set, 
      st#0: DatatypeType :: 
    {:weight 3} { M3.__default.CollectDependencies($LS($ly), p#0, Lit(cert#0), deps#0, st#0) } 
    M3.__default.CollectDependencies#canCall(p#0, Lit(cert#0), deps#0, st#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate())
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(st#0, Tclass.M3.State())
           && 
          M3.__default.CheckWellFounded($LS($LZ), p#0, Lit(cert#0))
           && Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0)))
       ==> (forall d#0: DatatypeType :: 
          { M3.__default.FindCert(d#0, M3.WFCertificate.certs(cert#0)) } 
            { M3.__default.GetSt(d#0, st#0) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0)) } 
            { Set#IsMember(deps#0, $Box(d#0)) } 
          $Is(d#0, Tclass.M3.Path())
             ==> 
            Set#IsMember(deps#0, $Box(d#0))
             ==> M3.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0))
                 ==> M3.__default.GetSt#canCall(d#0, st#0))
               && (!Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0))
                 ==> M3.WFCertificate.Cert_q(Lit(cert#0))
                   && M3.__default.FindCert#canCall(d#0, Lit(M3.WFCertificate.certs(Lit(cert#0))))
                   && M3.__default.OracleWF#canCall(d#0, M3.__default.FindCert(d#0, Lit(M3.WFCertificate.certs(Lit(cert#0)))), st#0)))
         && M3.__default.CollectDependencies($LS($ly), p#0, Lit(cert#0), deps#0, st#0)
           == Map#Glue(Set#FromBoogieMap((lambda $w#1: Box :: 
                $IsBox($w#1, Tclass.M3.Path()) && Set#IsMember(deps#0, $w#1))), 
            (lambda $w#1: Box :: 
              $Box((if Set#IsMember(M3.__default.DomSt(st#0), $w#1)
                   then M3.__default.GetSt($Unbox($w#1): DatatypeType, st#0)
                   else M3.__default.OracleWF($LS($ly), 
                    $Unbox($w#1): DatatypeType, 
                    M3.__default.FindCert($Unbox($w#1): DatatypeType, Lit(M3.WFCertificate.certs(Lit(cert#0)))), 
                    st#0)))), 
            TMap(Tclass.M3.Path(), Tclass.M3.Artifact())));
// definition axiom for M3.__default.CollectDependencies for all literals (revealed)
axiom {:id "id2539"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      p#0: DatatypeType, 
      cert#0: DatatypeType, 
      deps#0: Set, 
      st#0: DatatypeType :: 
    {:weight 3} { M3.__default.CollectDependencies($LS($ly), Lit(p#0), Lit(cert#0), Lit(deps#0), Lit(st#0)) } 
    M3.__default.CollectDependencies#canCall(Lit(p#0), Lit(cert#0), Lit(deps#0), Lit(st#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(cert#0, Tclass.M3.WFCertificate())
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(st#0, Tclass.M3.State())
           && 
          M3.__default.CheckWellFounded($LS($LZ), Lit(p#0), Lit(cert#0))
           && Set#Equal(deps#0, M3.__default.LocInv__Deps(Lit(p#0))))
       ==> (forall d#0: DatatypeType :: 
          { M3.__default.FindCert(d#0, M3.WFCertificate.certs(cert#0)) } 
            { M3.__default.GetSt(d#0, st#0) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0)) } 
            { Set#IsMember(deps#0, $Box(d#0)) } 
          $Is(d#0, Tclass.M3.Path())
             ==> 
            Set#IsMember(Lit(deps#0), $Box(d#0))
             ==> M3.__default.DomSt#canCall(Lit(st#0))
               && (Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(d#0))
                 ==> M3.__default.GetSt#canCall(d#0, Lit(st#0)))
               && (!Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(d#0))
                 ==> M3.WFCertificate.Cert_q(Lit(cert#0))
                   && M3.__default.FindCert#canCall(d#0, Lit(M3.WFCertificate.certs(Lit(cert#0))))
                   && M3.__default.OracleWF#canCall(d#0, 
                    M3.__default.FindCert(d#0, Lit(M3.WFCertificate.certs(Lit(cert#0)))), 
                    Lit(st#0))))
         && M3.__default.CollectDependencies($LS($ly), Lit(p#0), Lit(cert#0), Lit(deps#0), Lit(st#0))
           == Map#Glue(Set#FromBoogieMap((lambda $w#2: Box :: 
                $IsBox($w#2, Tclass.M3.Path()) && Set#IsMember(Lit(deps#0), $w#2))), 
            (lambda $w#2: Box :: 
              $Box((if Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $w#2)
                   then M3.__default.GetSt($Unbox($w#2): DatatypeType, Lit(st#0))
                   else M3.__default.OracleWF($LS($ly), 
                    $Unbox($w#2): DatatypeType, 
                    M3.__default.FindCert($Unbox($w#2): DatatypeType, Lit(M3.WFCertificate.certs(Lit(cert#0)))), 
                    Lit(st#0))))), 
            TMap(Tclass.M3.Path(), Tclass.M3.Artifact())));
}

function M3.__default.CollectDependencies#canCall(p#0: DatatypeType, cert#0: DatatypeType, deps#0: Set, st#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, 
    p#0: DatatypeType, 
    cert#0: DatatypeType, 
    deps#0: Set, 
    st#0: DatatypeType :: 
  { M3.__default.CollectDependencies($LS($ly), p#0, cert#0, deps#0, st#0) } 
  M3.__default.CollectDependencies($LS($ly), p#0, cert#0, deps#0, st#0)
     == M3.__default.CollectDependencies($ly, p#0, cert#0, deps#0, st#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, 
    p#0: DatatypeType, 
    cert#0: DatatypeType, 
    deps#0: Set, 
    st#0: DatatypeType :: 
  { M3.__default.CollectDependencies(AsFuelBottom($ly), p#0, cert#0, deps#0, st#0) } 
  M3.__default.CollectDependencies($ly, p#0, cert#0, deps#0, st#0)
     == M3.__default.CollectDependencies($LZ, p#0, cert#0, deps#0, st#0));

function M3.__default.CollectDependencies#requires(LayerType, DatatypeType, DatatypeType, Set, DatatypeType) : bool;

// #requires axiom for M3.__default.CollectDependencies
axiom (forall $ly: LayerType, 
    p#0: DatatypeType, 
    cert#0: DatatypeType, 
    deps#0: Set, 
    st#0: DatatypeType :: 
  { M3.__default.CollectDependencies#requires($ly, p#0, cert#0, deps#0, st#0) } 
  $Is(p#0, Tclass.M3.Path())
       && $Is(cert#0, Tclass.M3.WFCertificate())
       && $Is(deps#0, TSet(Tclass.M3.Path()))
       && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.CollectDependencies#requires($ly, p#0, cert#0, deps#0, st#0)
       == (M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
         && Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0))));

procedure {:verboseName "M3.CollectDependencies (well-formedness)"} CheckWellformed$$M3.__default.CollectDependencies(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()), 
    cert#0: DatatypeType where $Is(cert#0, Tclass.M3.WFCertificate()), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M3.Path())), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.FindCert
function M3.__default.FindCert(d#0: DatatypeType, certs#0: Set) : DatatypeType
uses {
// consequence axiom for M3.__default.FindCert
axiom 2 <= $FunctionContextHeight
   ==> (forall d#0: DatatypeType, certs#0: Set :: 
    { M3.__default.FindCert(d#0, certs#0) } 
    M3.__default.FindCert#canCall(d#0, certs#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(d#0, Tclass.M3.Path())
           && $Is(certs#0, TSet(Tclass.M3.WFCertificate()))
           && (exists c#0: DatatypeType :: 
            { M3.WFCertificate.p(c#0) } { Set#IsMember(certs#0, $Box(c#0)) } 
            $Is(c#0, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(certs#0, $Box(c#0))
               && M3.Path#Equal(M3.WFCertificate.p(c#0), d#0)))
       ==> $Is(M3.__default.FindCert(d#0, certs#0), Tclass.M3.WFCertificate()));
// definition axiom for M3.__default.FindCert (revealed)
axiom {:id "id2545"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, d#0: DatatypeType, certs#0: Set :: 
    { M3.__default.FindCert(d#0, certs#0), $IsGoodHeap($Heap) } 
    M3.__default.FindCert#canCall(d#0, certs#0)
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(d#0, Tclass.M3.Path())
           && $Is(certs#0, TSet(Tclass.M3.WFCertificate()))
           && (exists c#1: DatatypeType :: 
            { M3.WFCertificate.p(c#1) } { Set#IsMember(certs#0, $Box(c#1)) } 
            $Is(c#1, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(certs#0, $Box(c#1))
               && M3.Path#Equal(M3.WFCertificate.p(c#1), d#0)))
       ==> $let#36$canCall(certs#0, d#0)
         && M3.__default.FindCert(d#0, certs#0) == (var c#2 := $let#36_c(certs#0, d#0); c#2));
// definition axiom for M3.__default.FindCert for decreasing-related literals (revealed)
axiom {:id "id2546"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, d#0: DatatypeType, certs#0: Set :: 
    {:weight 3} { M3.__default.FindCert(d#0, Lit(certs#0)), $IsGoodHeap($Heap) } 
    M3.__default.FindCert#canCall(d#0, Lit(certs#0))
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(d#0, Tclass.M3.Path())
           && $Is(certs#0, TSet(Tclass.M3.WFCertificate()))
           && (exists c#3: DatatypeType :: 
            { M3.WFCertificate.p(c#3) } { Set#IsMember(certs#0, $Box(c#3)) } 
            $Is(c#3, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(Lit(certs#0), $Box(c#3))
               && M3.Path#Equal(M3.WFCertificate.p(c#3), d#0)))
       ==> $let#36$canCall(Lit(certs#0), d#0)
         && M3.__default.FindCert(d#0, Lit(certs#0))
           == (var c#4 := $let#36_c(Lit(certs#0), d#0); c#4));
// definition axiom for M3.__default.FindCert for all literals (revealed)
axiom {:id "id2547"} 2 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, d#0: DatatypeType, certs#0: Set :: 
    {:weight 3} { M3.__default.FindCert(Lit(d#0), Lit(certs#0)), $IsGoodHeap($Heap) } 
    M3.__default.FindCert#canCall(Lit(d#0), Lit(certs#0))
         || (2 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(d#0, Tclass.M3.Path())
           && $Is(certs#0, TSet(Tclass.M3.WFCertificate()))
           && (exists c#5: DatatypeType :: 
            { M3.WFCertificate.p(c#5) } { Set#IsMember(certs#0, $Box(c#5)) } 
            $Is(c#5, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(Lit(certs#0), $Box(c#5))
               && M3.Path#Equal(M3.WFCertificate.p(c#5), d#0)))
       ==> $let#36$canCall(Lit(certs#0), Lit(d#0))
         && M3.__default.FindCert(Lit(d#0), Lit(certs#0))
           == (var c#6 := $let#36_c(Lit(certs#0), Lit(d#0)); c#6));
}

function M3.__default.FindCert#canCall(d#0: DatatypeType, certs#0: Set) : bool;

function M3.__default.FindCert#requires(DatatypeType, Set) : bool;

// #requires axiom for M3.__default.FindCert
axiom (forall $Heap: Heap, d#0: DatatypeType, certs#0: Set :: 
  { M3.__default.FindCert#requires(d#0, certs#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && $Is(d#0, Tclass.M3.Path())
       && $Is(certs#0, TSet(Tclass.M3.WFCertificate()))
     ==> M3.__default.FindCert#requires(d#0, certs#0)
       == (exists c#1: DatatypeType :: 
        { M3.WFCertificate.p(c#1) } { Set#IsMember(certs#0, $Box(c#1)) } 
        $Is(c#1, Tclass.M3.WFCertificate())
           && 
          Set#IsMember(certs#0, $Box(c#1))
           && M3.Path#Equal(M3.WFCertificate.p(c#1), d#0)));

function $let#36_c(certs: Set, d: DatatypeType) : DatatypeType;

function $let#36$canCall(certs: Set, d: DatatypeType) : bool;

axiom (forall certs: Set, d: DatatypeType :: 
  { $let#36_c(certs, d) } 
  $let#36$canCall(certs, d)
     ==> $Is($let#36_c(certs, d), Tclass.M3.WFCertificate())
       && 
      Set#IsMember(certs, $Box($let#36_c(certs, d)))
       && M3.Path#Equal(M3.WFCertificate.p($let#36_c(certs, d)), d));

procedure {:verboseName "M3.FindCert (well-formedness)"} CheckWellformed$$M3.__default.FindCert(d#0: DatatypeType where $Is(d#0, Tclass.M3.Path()), 
    certs#0: Set where $Is(certs#0, TSet(Tclass.M3.WFCertificate())));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.OracleWF_CertificateInsensitivity (well-formedness)"} CheckWellFormed$$M3.__default.OracleWF__CertificateInsensitivity(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert0#0: DatatypeType
       where $Is(cert0#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert0#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert0#0), 
    cert1#0: DatatypeType
       where $Is(cert1#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert1#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert1#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.OracleWF_CertificateInsensitivity (call)"} Call$$M3.__default.OracleWF__CertificateInsensitivity(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert0#0: DatatypeType
       where $Is(cert0#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert0#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert0#0), 
    cert1#0: DatatypeType
       where $Is(cert1#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert1#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert1#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  // user-defined preconditions
  requires {:id "id2555"} M3.__default.CheckWellFounded#canCall(p#0, cert0#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert0#0)
       || M3.Path#Equal(M3.WFCertificate.p(cert0#0), p#0);
  requires {:id "id2556"} M3.__default.CheckWellFounded#canCall(p#0, cert0#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert0#0)
       || (forall d#2: DatatypeType :: 
        { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
        $Is(d#2, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2))
           ==> (exists c#4: DatatypeType :: 
            { M3.WFCertificate.p(c#4) } 
              { Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#4)) } 
            $Is(c#4, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#4))
               && M3.Path#Equal(M3.WFCertificate.p(c#4), d#2)));
  requires {:id "id2557"} M3.__default.CheckWellFounded#canCall(p#0, cert0#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert0#0)
       || (forall c#5: DatatypeType :: 
        { M3.WFCertificate.p(c#5) } 
          { Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#5)) } 
        $Is(c#5, Tclass.M3.WFCertificate())
           ==> 
          Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#5))
           ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#5), c#5));
  requires {:id "id2558"} M3.__default.CheckWellFounded#canCall(p#0, cert1#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert1#0)
       || M3.Path#Equal(M3.WFCertificate.p(cert1#0), p#0);
  requires {:id "id2559"} M3.__default.CheckWellFounded#canCall(p#0, cert1#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert1#0)
       || (forall d#3: DatatypeType :: 
        { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#3)) } 
        $Is(d#3, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#3))
           ==> (exists c#6: DatatypeType :: 
            { M3.WFCertificate.p(c#6) } 
              { Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#6)) } 
            $Is(c#6, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#6))
               && M3.Path#Equal(M3.WFCertificate.p(c#6), d#3)));
  requires {:id "id2560"} M3.__default.CheckWellFounded#canCall(p#0, cert1#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert1#0)
       || (forall c#7: DatatypeType :: 
        { M3.WFCertificate.p(c#7) } 
          { Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#7)) } 
        $Is(c#7, Tclass.M3.WFCertificate())
           ==> 
          Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#7))
           ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#7), c#7));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Artifact(M3.__default.OracleWF($LS($LZ), p#0, cert0#0, st#0))
     && $IsA#M3.Artifact(M3.__default.OracleWF($LS($LZ), p#0, cert1#0, st#0))
     && 
    M3.__default.OracleWF#canCall(p#0, cert0#0, st#0)
     && M3.__default.OracleWF#canCall(p#0, cert1#0, st#0);
  ensures {:id "id2561"} M3.Artifact#Equal(M3.__default.OracleWF($LS($LS($LZ)), p#0, cert0#0, st#0), 
    M3.__default.OracleWF($LS($LS($LZ)), p#0, cert1#0, st#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.OracleWF_CertificateInsensitivity (correctness)"} Impl$$M3.__default.OracleWF__CertificateInsensitivity(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert0#0: DatatypeType
       where $Is(cert0#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert0#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert0#0), 
    cert1#0: DatatypeType
       where $Is(cert1#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert1#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert1#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2562"} M3.__default.CheckWellFounded#canCall(p#0, cert0#0)
     && 
    M3.__default.CheckWellFounded($LS($LZ), p#0, cert0#0)
     && 
    M3.Path#Equal(M3.WFCertificate.p(cert0#0), p#0)
     && (forall d#4: DatatypeType :: 
      { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#4)) } 
      $Is(d#4, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#4))
         ==> (exists c#8: DatatypeType :: 
          { M3.WFCertificate.p(c#8) } 
            { Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#8)) } 
          $Is(c#8, Tclass.M3.WFCertificate())
             && 
            Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#8))
             && M3.Path#Equal(M3.WFCertificate.p(c#8), d#4)))
     && (forall c#9: DatatypeType :: 
      { M3.WFCertificate.p(c#9) } 
        { Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#9)) } 
      $Is(c#9, Tclass.M3.WFCertificate())
         ==> 
        Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#9))
         ==> M3.__default.CheckWellFounded($LS($LZ), M3.WFCertificate.p(c#9), c#9));
  free requires {:id "id2563"} M3.__default.CheckWellFounded#canCall(p#0, cert1#0)
     && 
    M3.__default.CheckWellFounded($LS($LZ), p#0, cert1#0)
     && 
    M3.Path#Equal(M3.WFCertificate.p(cert1#0), p#0)
     && (forall d#5: DatatypeType :: 
      { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#5)) } 
      $Is(d#5, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#5))
         ==> (exists c#10: DatatypeType :: 
          { M3.WFCertificate.p(c#10) } 
            { Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#10)) } 
          $Is(c#10, Tclass.M3.WFCertificate())
             && 
            Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#10))
             && M3.Path#Equal(M3.WFCertificate.p(c#10), d#5)))
     && (forall c#11: DatatypeType :: 
      { M3.WFCertificate.p(c#11) } 
        { Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#11)) } 
      $Is(c#11, Tclass.M3.WFCertificate())
         ==> 
        Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#11))
         ==> M3.__default.CheckWellFounded($LS($LZ), M3.WFCertificate.p(c#11), c#11));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Artifact(M3.__default.OracleWF($LS($LZ), p#0, cert0#0, st#0))
     && $IsA#M3.Artifact(M3.__default.OracleWF($LS($LZ), p#0, cert1#0, st#0))
     && 
    M3.__default.OracleWF#canCall(p#0, cert0#0, st#0)
     && M3.__default.OracleWF#canCall(p#0, cert1#0, st#0);
  ensures {:id "id2564"} $_reverifyPost
     ==> M3.Artifact#Equal(M3.__default.OracleWF($LS($LS($LZ)), p#0, cert0#0, st#0), 
      M3.__default.OracleWF($LS($LS($LZ)), p#0, cert1#0, st#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.OracleWF_CertificateInsensitivity (correctness)"} Impl$$M3.__default.OracleWF__CertificateInsensitivity(p#0: DatatypeType, 
    cert0#0: DatatypeType, 
    cert1#0: DatatypeType, 
    st#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var p##0: DatatypeType;
  var cert0##0: DatatypeType;
  var cert1##0: DatatypeType;
  var deps##0: Set;
  var ##p#4: DatatypeType;
  var st##0: DatatypeType;

    // AddMethodImpl: OracleWF_CertificateInsensitivity, Impl$$M3.__default.OracleWF__CertificateInsensitivity
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M3.Path(p#0);
    assume $IsA#M3.WFCertificate(cert0#0);
    assume $IsA#M3.WFCertificate(cert1#0);
    assume $IsA#M3.State(st#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#p0#0: DatatypeType, 
        $ih#cert00#0: DatatypeType, 
        $ih#cert10#0: DatatypeType, 
        $ih#st0#0: DatatypeType :: 
      { M3.__default.OracleWF($LS($LZ), $ih#p0#0, $ih#cert10#0, $ih#st0#0), M3.__default.OracleWF($LS($LZ), $ih#p0#0, $ih#cert00#0, $ih#st0#0) } 
        { M3.__default.OracleWF($LS($LZ), $ih#p0#0, $ih#cert00#0, $ih#st0#0), M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert10#0) } 
      $Is($ih#p0#0, Tclass.M3.Path())
           && $Is($ih#cert00#0, Tclass.M3.WFCertificate())
           && $Is($ih#cert10#0, Tclass.M3.WFCertificate())
           && $Is($ih#st0#0, Tclass.M3.State())
           && 
          M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert00#0)
           && M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert10#0)
           && (DtRank($ih#cert00#0) < DtRank(cert0#0)
             || (DtRank($ih#cert00#0) == DtRank(cert0#0)
               && 
              0 <= LitInt(1)
               && LitInt(1) < LitInt(1)))
         ==> M3.Artifact#Equal(M3.__default.OracleWF($LS($LZ), $ih#p0#0, $ih#cert00#0, $ih#st0#0), 
          M3.__default.OracleWF($LS($LZ), $ih#p0#0, $ih#cert10#0, $ih#st0#0)));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](680,37)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    p##0 := p#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    cert0##0 := cert0#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    cert1##0 := cert1#0;
    ##p#4 := p#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##p#4, Tclass.M3.Path(), $Heap);
    assume M3.__default.LocInv__Deps#canCall(p#0);
    assume M3.__default.LocInv__Deps#canCall(p#0);
    // ProcessCallStmt: CheckSubrange
    deps##0 := M3.__default.LocInv__Deps(p#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    assume {:id "id2565"} 0 <= LitInt(1) || DtRank(cert0##0) < DtRank(cert0#0) || LitInt(0) == LitInt(1);
    assume {:id "id2566"} DtRank(cert0##0) < DtRank(cert0#0)
       || (DtRank(cert0##0) == DtRank(cert0#0) && LitInt(0) < LitInt(1));
    call {:id "id2567"} Call$$M3.__default.Collect__CertificateInsensitivity(p##0, cert0##0, cert1##0, deps##0, st##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M3.Collect_CertificateInsensitivity (well-formedness)"} CheckWellFormed$$M3.__default.Collect__CertificateInsensitivity(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert0#0: DatatypeType
       where $Is(cert0#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert0#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert0#0), 
    cert1#0: DatatypeType
       where $Is(cert1#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert1#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert1#0), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.Collect_CertificateInsensitivity (call)"} Call$$M3.__default.Collect__CertificateInsensitivity(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert0#0: DatatypeType
       where $Is(cert0#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert0#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert0#0), 
    cert1#0: DatatypeType
       where $Is(cert1#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert1#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert1#0), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  // user-defined preconditions
  requires {:id "id2572"} M3.__default.CheckWellFounded#canCall(p#0, cert0#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert0#0)
       || M3.Path#Equal(M3.WFCertificate.p(cert0#0), p#0);
  requires {:id "id2573"} M3.__default.CheckWellFounded#canCall(p#0, cert0#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert0#0)
       || (forall d#2: DatatypeType :: 
        { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
        $Is(d#2, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2))
           ==> (exists c#4: DatatypeType :: 
            { M3.WFCertificate.p(c#4) } 
              { Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#4)) } 
            $Is(c#4, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#4))
               && M3.Path#Equal(M3.WFCertificate.p(c#4), d#2)));
  requires {:id "id2574"} M3.__default.CheckWellFounded#canCall(p#0, cert0#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert0#0)
       || (forall c#5: DatatypeType :: 
        { M3.WFCertificate.p(c#5) } 
          { Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#5)) } 
        $Is(c#5, Tclass.M3.WFCertificate())
           ==> 
          Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#5))
           ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#5), c#5));
  requires {:id "id2575"} M3.__default.CheckWellFounded#canCall(p#0, cert1#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert1#0)
       || M3.Path#Equal(M3.WFCertificate.p(cert1#0), p#0);
  requires {:id "id2576"} M3.__default.CheckWellFounded#canCall(p#0, cert1#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert1#0)
       || (forall d#3: DatatypeType :: 
        { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#3)) } 
        $Is(d#3, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#3))
           ==> (exists c#6: DatatypeType :: 
            { M3.WFCertificate.p(c#6) } 
              { Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#6)) } 
            $Is(c#6, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#6))
               && M3.Path#Equal(M3.WFCertificate.p(c#6), d#3)));
  requires {:id "id2577"} M3.__default.CheckWellFounded#canCall(p#0, cert1#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert1#0)
       || (forall c#7: DatatypeType :: 
        { M3.WFCertificate.p(c#7) } 
          { Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#7)) } 
        $Is(c#7, Tclass.M3.WFCertificate())
           ==> 
          Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#7))
           ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#7), c#7));
  requires {:id "id2578"} Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.CollectDependencies#canCall(p#0, cert0#0, deps#0, st#0)
     && M3.__default.CollectDependencies#canCall(p#0, cert1#0, deps#0, st#0);
  ensures {:id "id2579"} Map#Equal(M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert0#0, deps#0, st#0), 
    M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert1#0, deps#0, st#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.Collect_CertificateInsensitivity (correctness)"} Impl$$M3.__default.Collect__CertificateInsensitivity(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert0#0: DatatypeType
       where $Is(cert0#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert0#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert0#0), 
    cert1#0: DatatypeType
       where $Is(cert1#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert1#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert1#0), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2580"} M3.__default.CheckWellFounded#canCall(p#0, cert0#0)
     && 
    M3.__default.CheckWellFounded($LS($LZ), p#0, cert0#0)
     && 
    M3.Path#Equal(M3.WFCertificate.p(cert0#0), p#0)
     && (forall d#4: DatatypeType :: 
      { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#4)) } 
      $Is(d#4, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#4))
         ==> (exists c#8: DatatypeType :: 
          { M3.WFCertificate.p(c#8) } 
            { Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#8)) } 
          $Is(c#8, Tclass.M3.WFCertificate())
             && 
            Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#8))
             && M3.Path#Equal(M3.WFCertificate.p(c#8), d#4)))
     && (forall c#9: DatatypeType :: 
      { M3.WFCertificate.p(c#9) } 
        { Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#9)) } 
      $Is(c#9, Tclass.M3.WFCertificate())
         ==> 
        Set#IsMember(M3.WFCertificate.certs(cert0#0), $Box(c#9))
         ==> M3.__default.CheckWellFounded($LS($LZ), M3.WFCertificate.p(c#9), c#9));
  free requires {:id "id2581"} M3.__default.CheckWellFounded#canCall(p#0, cert1#0)
     && 
    M3.__default.CheckWellFounded($LS($LZ), p#0, cert1#0)
     && 
    M3.Path#Equal(M3.WFCertificate.p(cert1#0), p#0)
     && (forall d#5: DatatypeType :: 
      { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#5)) } 
      $Is(d#5, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#5))
         ==> (exists c#10: DatatypeType :: 
          { M3.WFCertificate.p(c#10) } 
            { Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#10)) } 
          $Is(c#10, Tclass.M3.WFCertificate())
             && 
            Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#10))
             && M3.Path#Equal(M3.WFCertificate.p(c#10), d#5)))
     && (forall c#11: DatatypeType :: 
      { M3.WFCertificate.p(c#11) } 
        { Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#11)) } 
      $Is(c#11, Tclass.M3.WFCertificate())
         ==> 
        Set#IsMember(M3.WFCertificate.certs(cert1#0), $Box(c#11))
         ==> M3.__default.CheckWellFounded($LS($LZ), M3.WFCertificate.p(c#11), c#11));
  requires {:id "id2582"} Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.CollectDependencies#canCall(p#0, cert0#0, deps#0, st#0)
     && M3.__default.CollectDependencies#canCall(p#0, cert1#0, deps#0, st#0);
  ensures {:id "id2583"} $_reverifyPost
     ==> Map#Equal(M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert0#0, deps#0, st#0), 
      M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert1#0, deps#0, st#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.Collect_CertificateInsensitivity (correctness)"} Impl$$M3.__default.Collect__CertificateInsensitivity(p#0: DatatypeType, 
    cert0#0: DatatypeType, 
    cert1#0: DatatypeType, 
    deps#0: Set, 
    st#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var d#0_0: DatatypeType;
  var p##0_0: DatatypeType;
  var cert0##0_0: DatatypeType;
  var ##d#0_0: DatatypeType;
  var ##certs#0_0: Set;
  var cert1##0_0: DatatypeType;
  var ##d#0_1: DatatypeType;
  var ##certs#0_1: Set;
  var st##0_0: DatatypeType;
  var $initHeapForallStmt#0_0: Heap;

    // AddMethodImpl: Collect_CertificateInsensitivity, Impl$$M3.__default.Collect__CertificateInsensitivity
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M3.Path(p#0);
    assume $IsA#M3.WFCertificate(cert0#0);
    assume $IsA#M3.WFCertificate(cert1#0);
    assume $IsA#M3.State(st#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#p0#0: DatatypeType, 
        $ih#cert00#0: DatatypeType, 
        $ih#cert10#0: DatatypeType, 
        $ih#deps0#0: Set, 
        $ih#st0#0: DatatypeType :: 
      { M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert10#0, $ih#deps0#0, $ih#st0#0), M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert00#0, $ih#deps0#0, $ih#st0#0) } 
        { M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert00#0, $ih#deps0#0, $ih#st0#0), M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert10#0) } 
      $Is($ih#p0#0, Tclass.M3.Path())
           && $Is($ih#cert00#0, Tclass.M3.WFCertificate())
           && $Is($ih#cert10#0, Tclass.M3.WFCertificate())
           && $Is($ih#deps0#0, TSet(Tclass.M3.Path()))
           && $Is($ih#st0#0, Tclass.M3.State())
           && 
          M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert00#0)
           && M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert10#0)
           && Set#Equal($ih#deps0#0, M3.__default.LocInv__Deps($ih#p0#0))
           && (DtRank($ih#cert00#0) < DtRank(cert0#0)
             || (DtRank($ih#cert00#0) == DtRank(cert0#0)
               && 
              0 <= LitInt(0)
               && LitInt(0) < LitInt(0)))
         ==> Map#Equal(M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert00#0, $ih#deps0#0, $ih#st0#0), 
          M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert10#0, $ih#deps0#0, $ih#st0#0)));
    $_reverifyPost := false;
    // ----- forall statement (call) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](687,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc d#0_0;
        assume $Is(d#0_0, Tclass.M3.Path());
        assume true;
        assume Set#IsMember(deps#0, $Box(d#0_0));
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](687,61)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        p##0_0 := d#0_0;
        ##d#0_0 := d#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##d#0_0, Tclass.M3.Path(), $Heap);
        assume M3.WFCertificate.Cert_q(cert0#0);
        ##certs#0_0 := M3.WFCertificate.certs(cert0#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##certs#0_0, TSet(Tclass.M3.WFCertificate()), $Heap);
        assume true;
        assume (exists c#0_0: DatatypeType :: 
          { M3.WFCertificate.p(c#0_0) } { Set#IsMember(##certs#0_0, $Box(c#0_0)) } 
          $Is(c#0_0, Tclass.M3.WFCertificate())
             && 
            Set#IsMember(##certs#0_0, $Box(c#0_0))
             && M3.Path#Equal(M3.WFCertificate.p(c#0_0), ##d#0_0));
        assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert0#0));
        assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert0#0)));
        assume M3.WFCertificate.Cert_q(cert0#0)
           && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert0#0));
        // ProcessCallStmt: CheckSubrange
        cert0##0_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert0#0));
        ##d#0_1 := d#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##d#0_1, Tclass.M3.Path(), $Heap);
        assume M3.WFCertificate.Cert_q(cert1#0);
        ##certs#0_1 := M3.WFCertificate.certs(cert1#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##certs#0_1, TSet(Tclass.M3.WFCertificate()), $Heap);
        assume true;
        assume (exists c#0_1: DatatypeType :: 
          { M3.WFCertificate.p(c#0_1) } { Set#IsMember(##certs#0_1, $Box(c#0_1)) } 
          $Is(c#0_1, Tclass.M3.WFCertificate())
             && 
            Set#IsMember(##certs#0_1, $Box(c#0_1))
             && M3.Path#Equal(M3.WFCertificate.p(c#0_1), ##d#0_1));
        assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert1#0));
        assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert1#0)));
        assume M3.WFCertificate.Cert_q(cert1#0)
           && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert1#0));
        // ProcessCallStmt: CheckSubrange
        cert1##0_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert1#0));
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##0_0 := st#0;
        assume {:id "id2584"} 0 <= LitInt(0) || DtRank(cert0##0_0) < DtRank(cert0#0) || LitInt(1) == LitInt(0);
        assume {:id "id2585"} DtRank(cert0##0_0) < DtRank(cert0#0)
           || (DtRank(cert0##0_0) == DtRank(cert0#0) && LitInt(1) < LitInt(0));
        call {:id "id2586"} Call$$M3.__default.OracleWF__CertificateInsensitivity(p##0_0, cert0##0_0, cert1##0_0, st##0_0);
        // TrCallStmt: After ProcessCallStmt
        assume false;
    }
    else
    {
        $initHeapForallStmt#0_0 := $Heap;
        havoc $Heap;
        assume $initHeapForallStmt#0_0 == $Heap;
        assume (forall d#0_1: DatatypeType :: 
          { M3.__default.FindCert(d#0_1, M3.WFCertificate.certs(cert1#0)) } 
            { M3.__default.FindCert(d#0_1, M3.WFCertificate.certs(cert0#0)) } 
            { Set#IsMember(deps#0, $Box(d#0_1)) } 
          $Is(d#0_1, Tclass.M3.Path()) && Set#IsMember(deps#0, $Box(d#0_1))
             ==> M3.Artifact#Equal(M3.__default.OracleWF($LS($LZ), 
                d#0_1, 
                M3.__default.FindCert(d#0_1, M3.WFCertificate.certs(cert0#0)), 
                st#0), 
              M3.__default.OracleWF($LS($LZ), 
                d#0_1, 
                M3.__default.FindCert(d#0_1, M3.WFCertificate.certs(cert1#0)), 
                st#0)));
    }
}



procedure {:verboseName "M3.CollectRestrict_Lemma (well-formedness)"} CheckWellFormed$$M3.__default.CollectRestrict__Lemma(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert#0: DatatypeType
       where $Is(cert#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert#0), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.CollectRestrict_Lemma (call)"} Call$$M3.__default.CollectRestrict__Lemma(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert#0: DatatypeType
       where $Is(cert#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert#0), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  // user-defined preconditions
  requires {:id "id2592"} M3.__default.ValidState#canCall(st#0)
     ==> M3.__default.ValidState(st#0)
       || (forall p#1: DatatypeType :: 
        { M3.__default.WellFounded(p#1) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) } 
        $Is(p#1, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1))
           ==> M3.__default.WellFounded(p#1));
  requires {:id "id2593"} Set#Subset(deps#0, M3.__default.DomSt(st#0));
  requires {:id "id2594"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
       || M3.Path#Equal(M3.WFCertificate.p(cert#0), p#0);
  requires {:id "id2595"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
       || (forall d#1: DatatypeType :: 
        { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1)) } 
        $Is(d#1, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#1))
           ==> (exists c#2: DatatypeType :: 
            { M3.WFCertificate.p(c#2) } 
              { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#2)) } 
            $Is(c#2, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#2))
               && M3.Path#Equal(M3.WFCertificate.p(c#2), d#1)));
  requires {:id "id2596"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
       || (forall c#3: DatatypeType :: 
        { M3.WFCertificate.p(c#3) } 
          { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#3)) } 
        $Is(c#3, Tclass.M3.WFCertificate())
           ==> 
          Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#3))
           ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#3), c#3));
  requires {:id "id2597"} Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st#0)
     && M3.__default.Restrict#canCall(deps#0, st#0);
  ensures {:id "id2598"} Map#Equal(M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert#0, deps#0, st#0), 
    M3.__default.Restrict(deps#0, st#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.CollectRestrict_Lemma (correctness)"} Impl$$M3.__default.CollectRestrict__Lemma(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert#0: DatatypeType
       where $Is(cert#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert#0), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2599"} M3.__default.ValidState#canCall(st#0)
     && 
    M3.__default.ValidState(st#0)
     && (forall p#2: DatatypeType :: 
      { M3.__default.WellFounded(p#2) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
      $Is(p#2, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2))
         ==> M3.__default.WellFounded(p#2));
  requires {:id "id2600"} Set#Subset(deps#0, M3.__default.DomSt(st#0));
  free requires {:id "id2601"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     && 
    M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
     && 
    M3.Path#Equal(M3.WFCertificate.p(cert#0), p#0)
     && (forall d#2: DatatypeType :: 
      { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
      $Is(d#2, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2))
         ==> (exists c#4: DatatypeType :: 
          { M3.WFCertificate.p(c#4) } 
            { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#4)) } 
          $Is(c#4, Tclass.M3.WFCertificate())
             && 
            Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#4))
             && M3.Path#Equal(M3.WFCertificate.p(c#4), d#2)))
     && (forall c#5: DatatypeType :: 
      { M3.WFCertificate.p(c#5) } 
        { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#5)) } 
      $Is(c#5, Tclass.M3.WFCertificate())
         ==> 
        Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#5))
         ==> M3.__default.CheckWellFounded($LS($LZ), M3.WFCertificate.p(c#5), c#5));
  requires {:id "id2602"} Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st#0)
     && M3.__default.Restrict#canCall(deps#0, st#0);
  ensures {:id "id2603"} $_reverifyPost
     ==> Map#Equal(M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert#0, deps#0, st#0), 
      M3.__default.Restrict(deps#0, st#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.CollectRestrict_Lemma (correctness)"} Impl$$M3.__default.CollectRestrict__Lemma(p#0: DatatypeType, cert#0: DatatypeType, deps#0: Set, st#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var a#0: Map
     where $Is(a#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
       && $IsAlloc(a#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
  var b#0: Map
     where $Is(b#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()))
       && $IsAlloc(b#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $Heap);
  var $rhs#0: Map;
  var ##p#3: DatatypeType;
  var ##cert#2: DatatypeType;
  var ##deps#1: Set;
  var ##st#4: DatatypeType;
  var $rhs#1: Map;
  var ##paths#1: Set;
  var ##st#5: DatatypeType;
  var q#0: DatatypeType;
  var q#1: DatatypeType;
  var d#0_0: DatatypeType;
  var ##p#0_0_0_0: DatatypeType;
  var ##st#0_0_0_0: DatatypeType;
  var ##st#0_0_1_0: DatatypeType;
  var ##p#0_0_1_0: DatatypeType;
  var ##st#0_0_1_1: DatatypeType;
  var ##p#0_0_1_1: DatatypeType;
  var ##cert#0_0_1_0: DatatypeType;
  var ##d#0_0_1_0: DatatypeType;
  var ##certs#0_0_1_0: Set;
  var ##st#0_0_1_2: DatatypeType;
  var ##st#0_0_1_3: DatatypeType;
  var ##p#0_0_1_2: DatatypeType;
  var ##st#0_0_1_4: DatatypeType;
  var ##st#0_0_2_0: DatatypeType;
  var ##p#0_0_2_0: DatatypeType;
  var ##st#0_0_2_1: DatatypeType;
  var ##p#0_0_2_1: DatatypeType;
  var ##cert#0_0_2_0: DatatypeType;
  var ##d#0_0_2_0: DatatypeType;
  var ##certs#0_0_2_0: Set;
  var ##st#0_0_2_2: DatatypeType;

    // AddMethodImpl: CollectRestrict_Lemma, Impl$$M3.__default.CollectRestrict__Lemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M3.Path(p#0);
    assume $IsA#M3.WFCertificate(cert#0);
    assume $IsA#M3.State(st#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#p0#0: DatatypeType, 
        $ih#cert0#0: DatatypeType, 
        $ih#deps0#0: Set, 
        $ih#st0#0: DatatypeType :: 
      { M3.__default.Restrict($ih#deps0#0, $ih#st0#0), M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert0#0) } 
        { M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#deps0#0, $ih#st0#0) } 
        { M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert0#0), Set#Subset($ih#deps0#0, M3.__default.DomSt($ih#st0#0)) } 
      $Is($ih#p0#0, Tclass.M3.Path())
           && $Is($ih#cert0#0, Tclass.M3.WFCertificate())
           && $Is($ih#deps0#0, TSet(Tclass.M3.Path()))
           && $Is($ih#st0#0, Tclass.M3.State())
           && 
          M3.__default.ValidState($ih#st0#0)
           && Set#Subset($ih#deps0#0, M3.__default.DomSt($ih#st0#0))
           && 
          M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert0#0)
           && Set#Equal($ih#deps0#0, M3.__default.LocInv__Deps($ih#p0#0))
           && (DtRank($ih#cert0#0) < DtRank(cert#0)
             || (DtRank($ih#cert0#0) == DtRank(cert#0)
               && ((Set#Subset($ih#deps0#0, deps#0) && !Set#Subset(deps#0, $ih#deps0#0))
                 || (Set#Equal($ih#deps0#0, deps#0) && DtRank($ih#st0#0) < DtRank(st#0)))))
         ==> Map#Equal(M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#deps0#0, $ih#st0#0), 
          M3.__default.Restrict($ih#deps0#0, $ih#st0#0)));
    $_reverifyPost := false;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(695,14)
    assume true;
    assume true;
    ##p#3 := p#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##p#3, Tclass.M3.Path(), $Heap);
    ##cert#2 := cert#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##cert#2, Tclass.M3.WFCertificate(), $Heap);
    ##deps#1 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##deps#1, TSet(Tclass.M3.Path()), $Heap);
    ##st#4 := st#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##st#4, Tclass.M3.State(), $Heap);
    assume true;
    assume true;
    assume true;
    assume true;
    assume M3.__default.CheckWellFounded($LS($LZ), ##p#3, ##cert#2)
       && Set#Equal(##deps#1, M3.__default.LocInv__Deps(##p#3));
    assume M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st#0);
    assume M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st#0);
    $rhs#0 := M3.__default.CollectDependencies($LS($LZ), p#0, cert#0, deps#0, st#0);
    ##paths#1 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##paths#1, TSet(Tclass.M3.Path()), $Heap);
    ##st#5 := st#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##st#5, Tclass.M3.State(), $Heap);
    assume M3.__default.Restrict#canCall(deps#0, st#0);
    assume M3.__default.Restrict#canCall(deps#0, st#0);
    $rhs#1 := M3.__default.Restrict(deps#0, st#0);
    a#0 := $rhs#0;
    b#0 := $rhs#1;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](696,5)
    // Begin Comprehension WF check
    havoc q#0;
    if ($Is(q#0, Tclass.M3.Path()) && $IsAlloc(q#0, Tclass.M3.Path(), $Heap))
    {
        if (Set#IsMember(Map#Domain(a#0), $Box(q#0)))
        {
        }
    }

    // End Comprehension WF check
    if (Set#Equal(Set#FromBoogieMap((lambda $y#0: Box :: 
          $IsBox($y#0, Tclass.M3.Path()) && Set#IsMember(Map#Domain(a#0), $y#0))), 
      deps#0))
    {
        // Begin Comprehension WF check
        havoc q#1;
        if ($Is(q#1, Tclass.M3.Path()) && $IsAlloc(q#1, Tclass.M3.Path(), $Heap))
        {
            if (Set#IsMember(Map#Domain(b#0), $Box(q#1)))
            {
            }
        }

        // End Comprehension WF check
    }

    assume true;
    assume true;
    assume true;
    assume {:id "id2608"} Set#Equal(Set#FromBoogieMap((lambda $y#4: Box :: 
            $IsBox($y#4, Tclass.M3.Path()) && Set#IsMember(Map#Domain(a#0), $y#4))), 
        deps#0)
       && Set#Equal(deps#0, 
        Set#FromBoogieMap((lambda $y#5: Box :: 
            $IsBox($y#5, Tclass.M3.Path()) && Set#IsMember(Map#Domain(b#0), $y#5))));
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](697,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc d#0_0;
        assume $Is(d#0_0, Tclass.M3.Path());
        assume true;
        assume {:id "id2609"} Set#IsMember(deps#0, $Box(d#0_0));
        if (*)
        {
            assume {:id "id2610"} {:subsumption 0} Set#IsMember(Map#Domain(a#0), $Box(d#0_0));
            assume {:id "id2611"} {:subsumption 0} Set#IsMember(Map#Domain(b#0), $Box(d#0_0));
            assume $IsA#M3.Artifact($Unbox(Map#Elements(a#0)[$Box(d#0_0)]): DatatypeType)
               && $IsA#M3.Artifact($Unbox(Map#Elements(b#0)[$Box(d#0_0)]): DatatypeType);
            assume {:id "id2612"} M3.Artifact#Equal($Unbox(Map#Elements(a#0)[$Box(d#0_0)]): DatatypeType, 
              $Unbox(Map#Elements(b#0)[$Box(d#0_0)]): DatatypeType);
            assume false;
        }

        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            assume {:id "id2628"} {:subsumption 0} Set#IsMember(Map#Domain(a#0), $Box(d#0_0));
            assume true;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            assume {:id "id2622"} {:subsumption 0} Set#IsMember(Map#Domain(a#0), $Box(d#0_0));
            assume true;
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            ##st#0_0_2_0 := st#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_0_2_0, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st#0);
            if (Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0_0)))
            {
                ##p#0_0_2_0 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0_0_2_0, Tclass.M3.Path(), $Heap);
                ##st#0_0_2_1 := st#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#0_0_2_1, Tclass.M3.State(), $Heap);
                assume {:id "id2623"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_0_2_1), $Box(##p#0_0_2_0));
                assume M3.__default.GetSt#canCall(d#0_0, st#0);
                assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st#0));
            }
            else
            {
                ##p#0_0_2_1 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0_0_2_1, Tclass.M3.Path(), $Heap);
                ##d#0_0_2_0 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##d#0_0_2_0, Tclass.M3.Path(), $Heap);
                assume M3.WFCertificate.Cert_q(cert#0);
                ##certs#0_0_2_0 := M3.WFCertificate.certs(cert#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##certs#0_0_2_0, TSet(Tclass.M3.WFCertificate()), $Heap);
                assume {:id "id2624"} {:subsumption 0} (exists c#0_0_2_0: DatatypeType :: 
                  { M3.WFCertificate.p(c#0_0_2_0) } 
                    { Set#IsMember(##certs#0_0_2_0, $Box(c#0_0_2_0)) } 
                  $Is(c#0_0_2_0, Tclass.M3.WFCertificate())
                     && 
                    Set#IsMember(##certs#0_0_2_0, $Box(c#0_0_2_0))
                     && M3.Path#Equal(M3.WFCertificate.p(c#0_0_2_0), ##d#0_0_2_0));
                assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                ##cert#0_0_2_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##cert#0_0_2_0, Tclass.M3.WFCertificate(), $Heap);
                ##st#0_0_2_2 := st#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#0_0_2_2, Tclass.M3.State(), $Heap);
                assume {:id "id2625"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_0_2_1, ##cert#0_0_2_0)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_0_2_1, ##cert#0_0_2_0)
                     || M3.Path#Equal(M3.WFCertificate.p(##cert#0_0_2_0), ##p#0_0_2_1);
                assume {:id "id2626"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_0_2_1, ##cert#0_0_2_0)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_0_2_1, ##cert#0_0_2_0)
                     || (forall d#0_0_2_0: DatatypeType :: 
                      { Set#IsMember(M3.__default.LocInv__Deps(##p#0_0_2_1), $Box(d#0_0_2_0)) } 
                      $Is(d#0_0_2_0, Tclass.M3.Path())
                         ==> 
                        Set#IsMember(M3.__default.LocInv__Deps(##p#0_0_2_1), $Box(d#0_0_2_0))
                         ==> (exists c#0_0_2_1: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_0_2_1) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#0_0_2_0), $Box(c#0_0_2_1)) } 
                          $Is(c#0_0_2_1, Tclass.M3.WFCertificate())
                             && 
                            Set#IsMember(M3.WFCertificate.certs(##cert#0_0_2_0), $Box(c#0_0_2_1))
                             && M3.Path#Equal(M3.WFCertificate.p(c#0_0_2_1), d#0_0_2_0)));
                assume {:id "id2627"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_0_2_1, ##cert#0_0_2_0)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_0_2_1, ##cert#0_0_2_0)
                     || (forall c#0_0_2_2: DatatypeType :: 
                      { M3.WFCertificate.p(c#0_0_2_2) } 
                        { Set#IsMember(M3.WFCertificate.certs(##cert#0_0_2_0), $Box(c#0_0_2_2)) } 
                      $Is(c#0_0_2_2, Tclass.M3.WFCertificate())
                         ==> 
                        Set#IsMember(M3.WFCertificate.certs(##cert#0_0_2_0), $Box(c#0_0_2_2))
                         ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_0_2_2), c#0_0_2_2));
                assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st#0);
                assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), 
                    d#0_0, 
                    M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                    st#0));
            }

            assume M3.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0_0))
                 ==> M3.__default.GetSt#canCall(d#0_0, st#0))
               && (!Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0_0))
                 ==> M3.WFCertificate.Cert_q(cert#0)
                   && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0))
                   && M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st#0));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            assume true;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            ##st#0_0_1_0 := st#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_0_1_0, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st#0);
            if (Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0_0)))
            {
                ##p#0_0_1_0 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0_0_1_0, Tclass.M3.Path(), $Heap);
                ##st#0_0_1_1 := st#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#0_0_1_1, Tclass.M3.State(), $Heap);
                assume {:id "id2615"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_0_1_1), $Box(##p#0_0_1_0));
                assume M3.__default.GetSt#canCall(d#0_0, st#0);
                assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st#0));
            }
            else
            {
                ##p#0_0_1_1 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0_0_1_1, Tclass.M3.Path(), $Heap);
                ##d#0_0_1_0 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##d#0_0_1_0, Tclass.M3.Path(), $Heap);
                assume M3.WFCertificate.Cert_q(cert#0);
                ##certs#0_0_1_0 := M3.WFCertificate.certs(cert#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##certs#0_0_1_0, TSet(Tclass.M3.WFCertificate()), $Heap);
                assume {:id "id2616"} {:subsumption 0} (exists c#0_0_1_0: DatatypeType :: 
                  { M3.WFCertificate.p(c#0_0_1_0) } 
                    { Set#IsMember(##certs#0_0_1_0, $Box(c#0_0_1_0)) } 
                  $Is(c#0_0_1_0, Tclass.M3.WFCertificate())
                     && 
                    Set#IsMember(##certs#0_0_1_0, $Box(c#0_0_1_0))
                     && M3.Path#Equal(M3.WFCertificate.p(c#0_0_1_0), ##d#0_0_1_0));
                assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                ##cert#0_0_1_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##cert#0_0_1_0, Tclass.M3.WFCertificate(), $Heap);
                ##st#0_0_1_2 := st#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#0_0_1_2, Tclass.M3.State(), $Heap);
                assume {:id "id2617"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_0_1_1, ##cert#0_0_1_0)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_0_1_1, ##cert#0_0_1_0)
                     || M3.Path#Equal(M3.WFCertificate.p(##cert#0_0_1_0), ##p#0_0_1_1);
                assume {:id "id2618"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_0_1_1, ##cert#0_0_1_0)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_0_1_1, ##cert#0_0_1_0)
                     || (forall d#0_0_1_0: DatatypeType :: 
                      { Set#IsMember(M3.__default.LocInv__Deps(##p#0_0_1_1), $Box(d#0_0_1_0)) } 
                      $Is(d#0_0_1_0, Tclass.M3.Path())
                         ==> 
                        Set#IsMember(M3.__default.LocInv__Deps(##p#0_0_1_1), $Box(d#0_0_1_0))
                         ==> (exists c#0_0_1_1: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_0_1_1) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#0_0_1_0), $Box(c#0_0_1_1)) } 
                          $Is(c#0_0_1_1, Tclass.M3.WFCertificate())
                             && 
                            Set#IsMember(M3.WFCertificate.certs(##cert#0_0_1_0), $Box(c#0_0_1_1))
                             && M3.Path#Equal(M3.WFCertificate.p(c#0_0_1_1), d#0_0_1_0)));
                assume {:id "id2619"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_0_1_1, ##cert#0_0_1_0)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_0_1_1, ##cert#0_0_1_0)
                     || (forall c#0_0_1_2: DatatypeType :: 
                      { M3.WFCertificate.p(c#0_0_1_2) } 
                        { Set#IsMember(M3.WFCertificate.certs(##cert#0_0_1_0), $Box(c#0_0_1_2)) } 
                      $Is(c#0_0_1_2, Tclass.M3.WFCertificate())
                         ==> 
                        Set#IsMember(M3.WFCertificate.certs(##cert#0_0_1_0), $Box(c#0_0_1_2))
                         ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_0_1_2), c#0_0_1_2));
                assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st#0);
                assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), 
                    d#0_0, 
                    M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                    st#0));
            }

            assume M3.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0_0))
                 ==> M3.__default.GetSt#canCall(d#0_0, st#0))
               && (!Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0_0))
                 ==> M3.WFCertificate.Cert_q(cert#0)
                   && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0))
                   && M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st#0));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](703,11)
            ##st#0_0_1_3 := st#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_0_1_3, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st#0);
            assume M3.__default.DomSt#canCall(st#0);
            assume {:id "id2620"} Set#IsMember(M3.__default.DomSt(st#0), $Box(d#0_0));
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            ##p#0_0_1_2 := d#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#0_0_1_2, Tclass.M3.Path(), $Heap);
            ##st#0_0_1_4 := st#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_0_1_4, Tclass.M3.State(), $Heap);
            assume {:id "id2621"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_0_1_4), $Box(##p#0_0_1_2));
            assume M3.__default.GetSt#canCall(d#0_0, st#0);
            assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st#0));
            assume M3.__default.GetSt#canCall(d#0_0, st#0);
            // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            assume true;
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            ##p#0_0_0_0 := d#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#0_0_0_0, Tclass.M3.Path(), $Heap);
            ##st#0_0_0_0 := st#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_0_0_0, Tclass.M3.State(), $Heap);
            assume {:id "id2613"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_0_0_0), $Box(##p#0_0_0_0));
            assume M3.__default.GetSt#canCall(d#0_0, st#0);
            assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st#0));
            assume M3.__default.GetSt#canCall(d#0_0, st#0);
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            assume {:id "id2614"} {:subsumption 0} Set#IsMember(Map#Domain(b#0), $Box(d#0_0));
            assume true;
            // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](700,7)
            assume true;
            assume false;
        }

        assume {:id "id2629"} M3.Artifact#Equal($Unbox(Map#Elements(a#0)[$Box(d#0_0)]): DatatypeType, 
          $Unbox(Map#Elements(b#0)[$Box(d#0_0)]): DatatypeType);
        assume {:id "id2630"} M3.Artifact#Equal($Unbox(Map#Elements(a#0)[$Box(d#0_0)]): DatatypeType, 
          $Unbox(Map#Elements(b#0)[$Box(d#0_0)]): DatatypeType);
        assume false;
    }
    else
    {
        assume (forall d#0_1: DatatypeType :: 
          { $Unbox(Map#Elements(b#0)[$Box(d#0_1)]): DatatypeType } 
            { $Unbox(Map#Elements(a#0)[$Box(d#0_1)]): DatatypeType } 
            { Set#IsMember(deps#0, $Box(d#0_1)) } 
          $Is(d#0_1, Tclass.M3.Path()) && Set#IsMember(deps#0, $Box(d#0_1))
             ==> M3.Artifact#Equal($Unbox(Map#Elements(a#0)[$Box(d#0_1)]): DatatypeType, 
              $Unbox(Map#Elements(b#0)[$Box(d#0_1)]): DatatypeType));
    }
}



procedure {:verboseName "M3.OracleProperty (well-formedness)"} CheckWellFormed$$M3.__default.OracleProperty(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.OracleProperty (call)"} Call$$M3.__default.OracleProperty(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0));
  // user-defined preconditions
  requires {:id "id2633"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0));
  requires {:id "id2634"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#1: DatatypeType :: 
        { M3.__default.GetSt(p#1, st0#0) } 
          { M3.__default.GetSt(p#1, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1)) } 
        $Is(p#1, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#1, st1#0), M3.__default.GetSt(p#1, st0#0)));
  requires {:id "id2635"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#2: DatatypeType :: 
        { M3.__default.Oracle(p#2, st0#0) } 
          { M3.__default.GetSt(p#2, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#2)) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#2)) } 
        $Is(p#2, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#2))
             && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#2))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st1#0), M3.__default.Oracle(p#2, st0#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Artifact(M3.__default.Oracle(p#0, st0#0))
     && $IsA#M3.Artifact(M3.__default.Oracle(p#0, st1#0))
     && 
    M3.__default.Oracle#canCall(p#0, st0#0)
     && M3.__default.Oracle#canCall(p#0, st1#0);
  ensures {:id "id2636"} M3.Artifact#Equal(M3.__default.Oracle(p#0, st0#0), M3.__default.Oracle(p#0, st1#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.OracleProperty (correctness)"} Impl$$M3.__default.OracleProperty(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0))
   returns ($_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2637"} M3.__default.Extends#canCall(st0#0, st1#0)
     && 
    M3.__default.Extends(st0#0, st1#0)
     && 
    Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0))
     && (forall p#3: DatatypeType :: 
      { M3.__default.GetSt(p#3, st0#0) } 
        { M3.__default.GetSt(p#3, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#3)) } 
      $Is(p#3, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#3))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st1#0), M3.__default.GetSt(p#3, st0#0)))
     && (forall p#4: DatatypeType :: 
      { M3.__default.Oracle(p#4, st0#0) } 
        { M3.__default.GetSt(p#4, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#4)) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#4)) } 
      $Is(p#4, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#4))
           && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#4))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#4, st1#0), M3.__default.Oracle(p#4, st0#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Artifact(M3.__default.Oracle(p#0, st0#0))
     && $IsA#M3.Artifact(M3.__default.Oracle(p#0, st1#0))
     && 
    M3.__default.Oracle#canCall(p#0, st0#0)
     && M3.__default.Oracle#canCall(p#0, st1#0);
  ensures {:id "id2638"} $_reverifyPost
     ==> M3.Artifact#Equal(M3.__default.Oracle(p#0, st0#0), M3.__default.Oracle(p#0, st1#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.OracleProperty (correctness)"} Impl$$M3.__default.OracleProperty(p#0: DatatypeType, st0#0: DatatypeType, st1#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##p#2: DatatypeType;
  var cert#1_0: DatatypeType
     where $Is(cert#1_0, Tclass.M3.WFCertificate())
       && $IsAlloc(cert#1_0, Tclass.M3.WFCertificate(), $Heap);
  var ##p#1_0: DatatypeType;
  var p##1_0: DatatypeType;
  var cert##1_0: DatatypeType;
  var st0##1_0: DatatypeType;
  var st1##1_0: DatatypeType;

    // AddMethodImpl: OracleProperty, Impl$$M3.__default.OracleProperty
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](715,5)
    ##p#2 := p#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##p#2, Tclass.M3.Path(), $Heap);
    assume M3.__default.WellFounded#canCall(p#0);
    assume M3.__default.WellFounded#canCall(p#0);
    if (!M3.__default.WellFounded(p#0))
    {
    }
    else
    {
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(718,16)
        assume true;
        ##p#1_0 := p#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##p#1_0, Tclass.M3.Path(), $Heap);
        assume true;
        assume M3.__default.WellFounded(##p#1_0);
        assume M3.__default.GetCert#canCall(p#0);
        assume M3.WFCertificate.Cert_q(M3.__default.GetCert(p#0));
        assume M3.__default.GetCert#canCall(p#0);
        cert#1_0 := M3.__default.GetCert(p#0);
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](719,24)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        p##1_0 := p#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        cert##1_0 := cert#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st0##1_0 := st0#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st1##1_0 := st1#0;
        call {:id "id2640"} Call$$M3.__default.OracleWF__Property(p##1_0, cert##1_0, st0##1_0, st1##1_0);
        // TrCallStmt: After ProcessCallStmt
    }
}



procedure {:verboseName "M3.OracleWF_Property (well-formedness)"} CheckWellFormed$$M3.__default.OracleWF__Property(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert#0: DatatypeType
       where $Is(cert#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert#0), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.OracleWF_Property (call)"} Call$$M3.__default.OracleWF__Property(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert#0: DatatypeType
       where $Is(cert#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert#0), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0));
  // user-defined preconditions
  requires {:id "id2644"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0));
  requires {:id "id2645"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#1: DatatypeType :: 
        { M3.__default.GetSt(p#1, st0#0) } 
          { M3.__default.GetSt(p#1, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1)) } 
        $Is(p#1, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#1, st1#0), M3.__default.GetSt(p#1, st0#0)));
  requires {:id "id2646"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#2: DatatypeType :: 
        { M3.__default.Oracle(p#2, st0#0) } 
          { M3.__default.GetSt(p#2, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#2)) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#2)) } 
        $Is(p#2, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#2))
             && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#2))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st1#0), M3.__default.Oracle(p#2, st0#0)));
  requires {:id "id2647"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
       || M3.Path#Equal(M3.WFCertificate.p(cert#0), p#0);
  requires {:id "id2648"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
       || (forall d#2: DatatypeType :: 
        { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
        $Is(d#2, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2))
           ==> (exists c#4: DatatypeType :: 
            { M3.WFCertificate.p(c#4) } 
              { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#4)) } 
            $Is(c#4, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#4))
               && M3.Path#Equal(M3.WFCertificate.p(c#4), d#2)));
  requires {:id "id2649"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
       || (forall c#5: DatatypeType :: 
        { M3.WFCertificate.p(c#5) } 
          { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#5)) } 
        $Is(c#5, Tclass.M3.WFCertificate())
           ==> 
          Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#5))
           ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#5), c#5));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Artifact(M3.__default.OracleWF($LS($LZ), p#0, cert#0, st0#0))
     && $IsA#M3.Artifact(M3.__default.OracleWF($LS($LZ), p#0, cert#0, st1#0))
     && 
    M3.__default.OracleWF#canCall(p#0, cert#0, st0#0)
     && M3.__default.OracleWF#canCall(p#0, cert#0, st1#0);
  ensures {:id "id2650"} M3.Artifact#Equal(M3.__default.OracleWF($LS($LS($LZ)), p#0, cert#0, st0#0), 
    M3.__default.OracleWF($LS($LS($LZ)), p#0, cert#0, st1#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.OracleWF_Property (correctness)"} Impl$$M3.__default.OracleWF__Property(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert#0: DatatypeType
       where $Is(cert#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert#0), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2651"} M3.__default.Extends#canCall(st0#0, st1#0)
     && 
    M3.__default.Extends(st0#0, st1#0)
     && 
    Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0))
     && (forall p#3: DatatypeType :: 
      { M3.__default.GetSt(p#3, st0#0) } 
        { M3.__default.GetSt(p#3, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#3)) } 
      $Is(p#3, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#3))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st1#0), M3.__default.GetSt(p#3, st0#0)))
     && (forall p#4: DatatypeType :: 
      { M3.__default.Oracle(p#4, st0#0) } 
        { M3.__default.GetSt(p#4, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#4)) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#4)) } 
      $Is(p#4, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#4))
           && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#4))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#4, st1#0), M3.__default.Oracle(p#4, st0#0)));
  free requires {:id "id2652"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     && 
    M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
     && 
    M3.Path#Equal(M3.WFCertificate.p(cert#0), p#0)
     && (forall d#3: DatatypeType :: 
      { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#3)) } 
      $Is(d#3, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#3))
         ==> (exists c#6: DatatypeType :: 
          { M3.WFCertificate.p(c#6) } 
            { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#6)) } 
          $Is(c#6, Tclass.M3.WFCertificate())
             && 
            Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#6))
             && M3.Path#Equal(M3.WFCertificate.p(c#6), d#3)))
     && (forall c#7: DatatypeType :: 
      { M3.WFCertificate.p(c#7) } 
        { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#7)) } 
      $Is(c#7, Tclass.M3.WFCertificate())
         ==> 
        Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#7))
         ==> M3.__default.CheckWellFounded($LS($LZ), M3.WFCertificate.p(c#7), c#7));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Artifact(M3.__default.OracleWF($LS($LZ), p#0, cert#0, st0#0))
     && $IsA#M3.Artifact(M3.__default.OracleWF($LS($LZ), p#0, cert#0, st1#0))
     && 
    M3.__default.OracleWF#canCall(p#0, cert#0, st0#0)
     && M3.__default.OracleWF#canCall(p#0, cert#0, st1#0);
  ensures {:id "id2653"} $_reverifyPost
     ==> M3.Artifact#Equal(M3.__default.OracleWF($LS($LS($LZ)), p#0, cert#0, st0#0), 
      M3.__default.OracleWF($LS($LS($LZ)), p#0, cert#0, st1#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.OracleWF_Property (correctness)"} Impl$$M3.__default.OracleWF__Property(p#0: DatatypeType, 
    cert#0: DatatypeType, 
    st0#0: DatatypeType, 
    st1#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap);
  var deps#0: Set
     where $Is(deps#0, TSet(Tclass.M3.Path()))
       && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap);
  var e#0: Seq where $Is(e#0, TSeq(TChar)) && $IsAlloc(e#0, TSeq(TChar), $Heap);
  var $rhs#0: Seq;
  var ##p#3: DatatypeType;
  var $rhs#1: Set;
  var ##p#4: DatatypeType;
  var $rhs#2: Seq;
  var ##p#5: DatatypeType;
  var p##0: DatatypeType;
  var cert##0: DatatypeType;
  var deps##0: Set;
  var st0##0: DatatypeType;
  var st1##0: DatatypeType;

    // AddMethodImpl: OracleWF_Property, Impl$$M3.__default.OracleWF__Property
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M3.Path(p#0);
    assume $IsA#M3.WFCertificate(cert#0);
    assume $IsA#M3.State(st0#0);
    assume $IsA#M3.State(st1#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#p0#0: DatatypeType, 
        $ih#cert0#0: DatatypeType, 
        $ih#st00#0: DatatypeType, 
        $ih#st10#0: DatatypeType :: 
      { M3.__default.OracleWF($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#st10#0), M3.__default.OracleWF($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#st00#0) } 
        { M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert0#0), M3.__default.Extends($ih#st00#0, $ih#st10#0) } 
      $Is($ih#p0#0, Tclass.M3.Path())
           && $Is($ih#cert0#0, Tclass.M3.WFCertificate())
           && $Is($ih#st00#0, Tclass.M3.State())
           && $Is($ih#st10#0, Tclass.M3.State())
           && 
          M3.__default.Extends($ih#st00#0, $ih#st10#0)
           && M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert0#0)
           && (DtRank($ih#cert0#0) < DtRank(cert#0)
             || (DtRank($ih#cert0#0) == DtRank(cert#0)
               && 
              0 <= LitInt(1)
               && LitInt(1) < LitInt(1)))
         ==> M3.Artifact#Equal(M3.__default.OracleWF($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#st00#0), 
          M3.__default.OracleWF($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#st10#0)));
    $_reverifyPost := false;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(727,22)
    assume true;
    assume true;
    assume true;
    ##p#3 := p#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##p#3, Tclass.M3.Path(), $Heap);
    assume M3.__default.LocInv__Cmd#canCall(p#0);
    assume M3.__default.LocInv__Cmd#canCall(p#0);
    $rhs#0 := M3.__default.LocInv__Cmd(p#0);
    ##p#4 := p#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##p#4, Tclass.M3.Path(), $Heap);
    assume M3.__default.LocInv__Deps#canCall(p#0);
    assume M3.__default.LocInv__Deps#canCall(p#0);
    $rhs#1 := M3.__default.LocInv__Deps(p#0);
    ##p#5 := p#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##p#5, Tclass.M3.Path(), $Heap);
    assume M3.__default.LocInv__Exp#canCall(p#0);
    assume M3.__default.LocInv__Exp#canCall(p#0);
    $rhs#2 := M3.__default.LocInv__Exp(p#0);
    cmd#0 := $rhs#0;
    deps#0 := $rhs#1;
    e#0 := $rhs#2;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](728,20)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    p##0 := p#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    cert##0 := cert#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    deps##0 := deps#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st0##0 := st0#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st1##0 := st1#0;
    assume {:id "id2660"} 0 <= LitInt(1) || DtRank(cert##0) < DtRank(cert#0) || LitInt(0) == LitInt(1);
    assume {:id "id2661"} DtRank(cert##0) < DtRank(cert#0)
       || (DtRank(cert##0) == DtRank(cert#0) && LitInt(0) < LitInt(1));
    call {:id "id2662"} Call$$M3.__default.CollectProperty(p##0, cert##0, deps##0, st0##0, st1##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M3.CollectProperty (well-formedness)"} CheckWellFormed$$M3.__default.CollectProperty(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert#0: DatatypeType
       where $Is(cert#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert#0), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.CollectProperty (call)"} Call$$M3.__default.CollectProperty(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert#0: DatatypeType
       where $Is(cert#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert#0), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0));
  // user-defined preconditions
  requires {:id "id2667"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0));
  requires {:id "id2668"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#1: DatatypeType :: 
        { M3.__default.GetSt(p#1, st0#0) } 
          { M3.__default.GetSt(p#1, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1)) } 
        $Is(p#1, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#1, st1#0), M3.__default.GetSt(p#1, st0#0)));
  requires {:id "id2669"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#2: DatatypeType :: 
        { M3.__default.Oracle(p#2, st0#0) } 
          { M3.__default.GetSt(p#2, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#2)) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#2)) } 
        $Is(p#2, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#2))
             && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#2))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st1#0), M3.__default.Oracle(p#2, st0#0)));
  requires {:id "id2670"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
       || M3.Path#Equal(M3.WFCertificate.p(cert#0), p#0);
  requires {:id "id2671"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
       || (forall d#2: DatatypeType :: 
        { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2)) } 
        $Is(d#2, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#2))
           ==> (exists c#4: DatatypeType :: 
            { M3.WFCertificate.p(c#4) } 
              { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#4)) } 
            $Is(c#4, Tclass.M3.WFCertificate())
               && 
              Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#4))
               && M3.Path#Equal(M3.WFCertificate.p(c#4), d#2)));
  requires {:id "id2672"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     ==> M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
       || (forall c#5: DatatypeType :: 
        { M3.WFCertificate.p(c#5) } 
          { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#5)) } 
        $Is(c#5, Tclass.M3.WFCertificate())
           ==> 
          Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#5))
           ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#5), c#5));
  requires {:id "id2673"} Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st0#0)
     && M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st1#0);
  ensures {:id "id2674"} Map#Equal(M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert#0, deps#0, st0#0), 
    M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert#0, deps#0, st1#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.CollectProperty (correctness)"} Impl$$M3.__default.CollectProperty(p#0: DatatypeType
       where $Is(p#0, Tclass.M3.Path())
         && $IsAlloc(p#0, Tclass.M3.Path(), $Heap)
         && $IsA#M3.Path(p#0), 
    cert#0: DatatypeType
       where $Is(cert#0, Tclass.M3.WFCertificate())
         && $IsAlloc(cert#0, Tclass.M3.WFCertificate(), $Heap)
         && $IsA#M3.WFCertificate(cert#0), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M3.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M3.Path()), $Heap), 
    st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2675"} M3.__default.Extends#canCall(st0#0, st1#0)
     && 
    M3.__default.Extends(st0#0, st1#0)
     && 
    Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0))
     && (forall p#3: DatatypeType :: 
      { M3.__default.GetSt(p#3, st0#0) } 
        { M3.__default.GetSt(p#3, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#3)) } 
      $Is(p#3, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#3))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st1#0), M3.__default.GetSt(p#3, st0#0)))
     && (forall p#4: DatatypeType :: 
      { M3.__default.Oracle(p#4, st0#0) } 
        { M3.__default.GetSt(p#4, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#4)) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#4)) } 
      $Is(p#4, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#4))
           && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#4))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#4, st1#0), M3.__default.Oracle(p#4, st0#0)));
  free requires {:id "id2676"} M3.__default.CheckWellFounded#canCall(p#0, cert#0)
     && 
    M3.__default.CheckWellFounded($LS($LZ), p#0, cert#0)
     && 
    M3.Path#Equal(M3.WFCertificate.p(cert#0), p#0)
     && (forall d#3: DatatypeType :: 
      { Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#3)) } 
      $Is(d#3, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.LocInv__Deps(p#0), $Box(d#3))
         ==> (exists c#6: DatatypeType :: 
          { M3.WFCertificate.p(c#6) } 
            { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#6)) } 
          $Is(c#6, Tclass.M3.WFCertificate())
             && 
            Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#6))
             && M3.Path#Equal(M3.WFCertificate.p(c#6), d#3)))
     && (forall c#7: DatatypeType :: 
      { M3.WFCertificate.p(c#7) } 
        { Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#7)) } 
      $Is(c#7, Tclass.M3.WFCertificate())
         ==> 
        Set#IsMember(M3.WFCertificate.certs(cert#0), $Box(c#7))
         ==> M3.__default.CheckWellFounded($LS($LZ), M3.WFCertificate.p(c#7), c#7));
  requires {:id "id2677"} Set#Equal(deps#0, M3.__default.LocInv__Deps(p#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st0#0)
     && M3.__default.CollectDependencies#canCall(p#0, cert#0, deps#0, st1#0);
  ensures {:id "id2678"} $_reverifyPost
     ==> Map#Equal(M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert#0, deps#0, st0#0), 
      M3.__default.CollectDependencies($LS($LS($LZ)), p#0, cert#0, deps#0, st1#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.CollectProperty (correctness)"} Impl$$M3.__default.CollectProperty(p#0: DatatypeType, 
    cert#0: DatatypeType, 
    deps#0: Set, 
    st0#0: DatatypeType, 
    st1#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var d#0_0: DatatypeType;
  var ##st#0_0: DatatypeType;
  var ##p#0_0: DatatypeType;
  var ##st#0_1: DatatypeType;
  var ##p#0_1: DatatypeType;
  var ##cert#0_0: DatatypeType;
  var ##d#0_0: DatatypeType;
  var ##certs#0_0: Set;
  var ##st#0_2: DatatypeType;
  var ##st#0_3: DatatypeType;
  var ##p#0_2: DatatypeType;
  var ##st#0_4: DatatypeType;
  var ##p#0_3: DatatypeType;
  var ##cert#0_1: DatatypeType;
  var ##d#0_1: DatatypeType;
  var ##certs#0_1: Set;
  var ##st#0_5: DatatypeType;
  var ##st#0_6: DatatypeType;
  var ##st#0_0_0: DatatypeType;
  var ##st#0_1_0: DatatypeType;
  var ##p#0_1_0_0_0_0: DatatypeType;
  var ##st#0_1_0_0_0_0: DatatypeType;
  var ##st#0_1_0_0_0_1: DatatypeType;
  var ##p#0_1_0_0_0_1: DatatypeType;
  var ##st#0_1_0_0_0_2: DatatypeType;
  var ##p#0_1_0_0_0_2: DatatypeType;
  var ##cert#0_1_0_0_0_0: DatatypeType;
  var ##d#0_1_0_0_0_0: DatatypeType;
  var ##certs#0_1_0_0_0_0: Set;
  var ##st#0_1_0_0_0_3: DatatypeType;
  var ##p#0_1_0_0_1_0: DatatypeType;
  var ##st#0_1_0_0_1_0: DatatypeType;
  var ##st#0_1_0_0_1_1: DatatypeType;
  var ##st'#0_1_0_0_1_0: DatatypeType;
  var ##p#0_1_0_0_1_1: DatatypeType;
  var ##st#0_1_0_0_1_2: DatatypeType;
  var ##p#0_1_0_0_2_0: DatatypeType;
  var ##p#0_1_0_0_2_1: DatatypeType;
  var ##cert#0_1_0_0_2_0: DatatypeType;
  var ##p#0_1_0_0_2_2: DatatypeType;
  var ##st#0_1_0_0_2_0: DatatypeType;
  var ##p#0_1_0_0_2_3: DatatypeType;
  var ##p#0_1_0_0_2_4: DatatypeType;
  var ##st#0_1_0_0_2_1: DatatypeType;
  var ##p#0_1_0_0_3_0: DatatypeType;
  var ##cert#0_1_0_0_3_0: DatatypeType;
  var ##p#0_1_0_0_3_1: DatatypeType;
  var ##st#0_1_0_0_3_0: DatatypeType;
  var ##p#0_1_0_0_3_2: DatatypeType;
  var ##p#0_1_0_0_3_3: DatatypeType;
  var ##p#0_1_0_0_3_4: DatatypeType;
  var ##cert#0_1_0_0_3_1: DatatypeType;
  var ##p#0_1_0_0_3_5: DatatypeType;
  var ##st#0_1_0_0_3_1: DatatypeType;
  var ##p#0_1_0_0_3_6: DatatypeType;
  var ##p#0_1_0_0_4_0: DatatypeType;
  var ##cert#0_1_0_0_4_0: DatatypeType;
  var ##d#0_1_0_0_4_0: DatatypeType;
  var ##certs#0_1_0_0_4_0: Set;
  var ##st#0_1_0_0_4_0: DatatypeType;
  var p##0_1_0_0_4_0: DatatypeType;
  var cert0##0_1_0_0_4_0: DatatypeType;
  var ##d#0_1_0_0_4_1: DatatypeType;
  var ##certs#0_1_0_0_4_1: Set;
  var cert1##0_1_0_0_4_0: DatatypeType;
  var ##p#0_1_0_0_4_1: DatatypeType;
  var st##0_1_0_0_4_0: DatatypeType;
  var ##p#0_1_0_0_4_2: DatatypeType;
  var ##cert#0_1_0_0_4_1: DatatypeType;
  var ##p#0_1_0_0_4_3: DatatypeType;
  var ##st#0_1_0_0_4_1: DatatypeType;
  var ##st#0_1_0_0_5_0: DatatypeType;
  var ##p#0_1_0_0_5_0: DatatypeType;
  var ##st#0_1_0_0_5_1: DatatypeType;
  var ##p#0_1_0_0_5_1: DatatypeType;
  var ##cert#0_1_0_0_5_0: DatatypeType;
  var ##d#0_1_0_0_5_0: DatatypeType;
  var ##certs#0_1_0_0_5_0: Set;
  var ##st#0_1_0_0_5_2: DatatypeType;
  var ##p#0_1_0_0_5_2: DatatypeType;
  var ##cert#0_1_0_0_5_1: DatatypeType;
  var ##d#0_1_0_0_5_1: DatatypeType;
  var ##certs#0_1_0_0_5_1: Set;
  var ##st#0_1_0_0_5_3: DatatypeType;
  var ##st#0_1_0_0_0: DatatypeType;
  var ##p#0_1_0_0_0: DatatypeType;
  var ##st#0_1_0_0_1: DatatypeType;
  var ##p#0_1_0_0_1: DatatypeType;
  var ##cert#0_1_0_0_0: DatatypeType;
  var ##d#0_1_0_0_0: DatatypeType;
  var ##certs#0_1_0_0_0: Set;
  var ##st#0_1_0_0_2: DatatypeType;
  var p##0_1_1_0: DatatypeType;
  var cert##0_1_1_0: DatatypeType;
  var ##d#0_1_1_0: DatatypeType;
  var ##certs#0_1_1_0: Set;
  var st0##0_1_1_0: DatatypeType;
  var st1##0_1_1_0: DatatypeType;

    // AddMethodImpl: CollectProperty, Impl$$M3.__default.CollectProperty
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M3.Path(p#0);
    assume $IsA#M3.WFCertificate(cert#0);
    assume $IsA#M3.State(st0#0);
    assume $IsA#M3.State(st1#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#p0#0: DatatypeType, 
        $ih#cert0#0: DatatypeType, 
        $ih#deps0#0: Set, 
        $ih#st00#0: DatatypeType, 
        $ih#st10#0: DatatypeType :: 
      { M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#deps0#0, $ih#st10#0), M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#deps0#0, $ih#st00#0) } 
        { M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#deps0#0, $ih#st00#0), M3.__default.Extends($ih#st00#0, $ih#st10#0) } 
      $Is($ih#p0#0, Tclass.M3.Path())
           && $Is($ih#cert0#0, Tclass.M3.WFCertificate())
           && $Is($ih#deps0#0, TSet(Tclass.M3.Path()))
           && $Is($ih#st00#0, Tclass.M3.State())
           && $Is($ih#st10#0, Tclass.M3.State())
           && 
          M3.__default.Extends($ih#st00#0, $ih#st10#0)
           && M3.__default.CheckWellFounded($LS($LZ), $ih#p0#0, $ih#cert0#0)
           && Set#Equal($ih#deps0#0, M3.__default.LocInv__Deps($ih#p0#0))
           && (DtRank($ih#cert0#0) < DtRank(cert#0)
             || (DtRank($ih#cert0#0) == DtRank(cert#0)
               && 
              0 <= LitInt(0)
               && LitInt(0) < LitInt(0)))
         ==> Map#Equal(M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#deps0#0, $ih#st00#0), 
          M3.__default.CollectDependencies($LS($LZ), $ih#p0#0, $ih#cert0#0, $ih#deps0#0, $ih#st10#0)));
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](735,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc d#0_0;
        assume $Is(d#0_0, Tclass.M3.Path());
        assume true;
        assume {:id "id2679"} Set#IsMember(deps#0, $Box(d#0_0));
        if (*)
        {
            ##st#0_0 := st0#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_0, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st0#0);
            if (Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0)))
            {
                ##p#0_0 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0_0, Tclass.M3.Path(), $Heap);
                ##st#0_1 := st0#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#0_1, Tclass.M3.State(), $Heap);
                assume {:id "id2680"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_1), $Box(##p#0_0));
                assume M3.__default.GetSt#canCall(d#0_0, st0#0);
                assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st0#0));
            }
            else
            {
                ##p#0_1 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0_1, Tclass.M3.Path(), $Heap);
                ##d#0_0 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##d#0_0, Tclass.M3.Path(), $Heap);
                assume M3.WFCertificate.Cert_q(cert#0);
                ##certs#0_0 := M3.WFCertificate.certs(cert#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##certs#0_0, TSet(Tclass.M3.WFCertificate()), $Heap);
                assume {:id "id2681"} {:subsumption 0} (exists c#0_0: DatatypeType :: 
                  { M3.WFCertificate.p(c#0_0) } { Set#IsMember(##certs#0_0, $Box(c#0_0)) } 
                  $Is(c#0_0, Tclass.M3.WFCertificate())
                     && 
                    Set#IsMember(##certs#0_0, $Box(c#0_0))
                     && M3.Path#Equal(M3.WFCertificate.p(c#0_0), ##d#0_0));
                assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                ##cert#0_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##cert#0_0, Tclass.M3.WFCertificate(), $Heap);
                ##st#0_2 := st0#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#0_2, Tclass.M3.State(), $Heap);
                assume {:id "id2682"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1, ##cert#0_0)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1, ##cert#0_0)
                     || M3.Path#Equal(M3.WFCertificate.p(##cert#0_0), ##p#0_1);
                assume {:id "id2683"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1, ##cert#0_0)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1, ##cert#0_0)
                     || (forall d#0_1: DatatypeType :: 
                      { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1), $Box(d#0_1)) } 
                      $Is(d#0_1, Tclass.M3.Path())
                         ==> 
                        Set#IsMember(M3.__default.LocInv__Deps(##p#0_1), $Box(d#0_1))
                         ==> (exists c#0_1: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_1) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#0_0), $Box(c#0_1)) } 
                          $Is(c#0_1, Tclass.M3.WFCertificate())
                             && 
                            Set#IsMember(M3.WFCertificate.certs(##cert#0_0), $Box(c#0_1))
                             && M3.Path#Equal(M3.WFCertificate.p(c#0_1), d#0_1)));
                assume {:id "id2684"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1, ##cert#0_0)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1, ##cert#0_0)
                     || (forall c#0_2: DatatypeType :: 
                      { M3.WFCertificate.p(c#0_2) } 
                        { Set#IsMember(M3.WFCertificate.certs(##cert#0_0), $Box(c#0_2)) } 
                      $Is(c#0_2, Tclass.M3.WFCertificate())
                         ==> 
                        Set#IsMember(M3.WFCertificate.certs(##cert#0_0), $Box(c#0_2))
                         ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_2), c#0_2));
                assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0);
                assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), 
                    d#0_0, 
                    M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                    st0#0));
            }

            ##st#0_3 := st1#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_3, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st1#0);
            if (Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0)))
            {
                ##p#0_2 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0_2, Tclass.M3.Path(), $Heap);
                ##st#0_4 := st1#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#0_4, Tclass.M3.State(), $Heap);
                assume {:id "id2685"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_4), $Box(##p#0_2));
                assume M3.__default.GetSt#canCall(d#0_0, st1#0);
                assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st1#0));
            }
            else
            {
                ##p#0_3 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0_3, Tclass.M3.Path(), $Heap);
                ##d#0_1 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##d#0_1, Tclass.M3.Path(), $Heap);
                assume M3.WFCertificate.Cert_q(cert#0);
                ##certs#0_1 := M3.WFCertificate.certs(cert#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##certs#0_1, TSet(Tclass.M3.WFCertificate()), $Heap);
                assume {:id "id2686"} {:subsumption 0} (exists c#0_3: DatatypeType :: 
                  { M3.WFCertificate.p(c#0_3) } { Set#IsMember(##certs#0_1, $Box(c#0_3)) } 
                  $Is(c#0_3, Tclass.M3.WFCertificate())
                     && 
                    Set#IsMember(##certs#0_1, $Box(c#0_3))
                     && M3.Path#Equal(M3.WFCertificate.p(c#0_3), ##d#0_1));
                assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                ##cert#0_1 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##cert#0_1, Tclass.M3.WFCertificate(), $Heap);
                ##st#0_5 := st1#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#0_5, Tclass.M3.State(), $Heap);
                assume {:id "id2687"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_3, ##cert#0_1)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_3, ##cert#0_1)
                     || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1), ##p#0_3);
                assume {:id "id2688"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_3, ##cert#0_1)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_3, ##cert#0_1)
                     || (forall d#0_2: DatatypeType :: 
                      { Set#IsMember(M3.__default.LocInv__Deps(##p#0_3), $Box(d#0_2)) } 
                      $Is(d#0_2, Tclass.M3.Path())
                         ==> 
                        Set#IsMember(M3.__default.LocInv__Deps(##p#0_3), $Box(d#0_2))
                         ==> (exists c#0_4: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_4) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#0_1), $Box(c#0_4)) } 
                          $Is(c#0_4, Tclass.M3.WFCertificate())
                             && 
                            Set#IsMember(M3.WFCertificate.certs(##cert#0_1), $Box(c#0_4))
                             && M3.Path#Equal(M3.WFCertificate.p(c#0_4), d#0_2)));
                assume {:id "id2689"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_3, ##cert#0_1)
                   ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_3, ##cert#0_1)
                     || (forall c#0_5: DatatypeType :: 
                      { M3.WFCertificate.p(c#0_5) } 
                        { Set#IsMember(M3.WFCertificate.certs(##cert#0_1), $Box(c#0_5)) } 
                      $Is(c#0_5, Tclass.M3.WFCertificate())
                         ==> 
                        Set#IsMember(M3.WFCertificate.certs(##cert#0_1), $Box(c#0_5))
                         ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_5), c#0_5));
                assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st1#0);
                assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), 
                    d#0_0, 
                    M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                    st1#0));
            }

            assume $IsA#M3.Artifact((if Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
                   then M3.__default.GetSt(d#0_0, st0#0)
                   else M3.__default.OracleWF($LS($LZ), 
                    d#0_0, 
                    M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                    st0#0)))
               && $IsA#M3.Artifact((if Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0))
                   then M3.__default.GetSt(d#0_0, st1#0)
                   else M3.__default.OracleWF($LS($LZ), 
                    d#0_0, 
                    M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                    st1#0)))
               && 
              M3.__default.DomSt#canCall(st0#0)
               && (Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
                 ==> M3.__default.GetSt#canCall(d#0_0, st0#0))
               && (!Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
                 ==> M3.WFCertificate.Cert_q(cert#0)
                   && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0))
                   && M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0))
               && 
              M3.__default.DomSt#canCall(st1#0)
               && (Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0))
                 ==> M3.__default.GetSt#canCall(d#0_0, st1#0))
               && (!Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0))
                 ==> M3.WFCertificate.Cert_q(cert#0)
                   && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0))
                   && M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st1#0));
            assume {:id "id2690"} M3.Artifact#Equal((if Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
                 then M3.__default.GetSt(d#0_0, st0#0)
                 else M3.__default.OracleWF($LS($LZ), 
                  d#0_0, 
                  M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                  st0#0)), 
              (if Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0))
                 then M3.__default.GetSt(d#0_0, st1#0)
                 else M3.__default.OracleWF($LS($LZ), 
                  d#0_0, 
                  M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                  st1#0)));
            assume false;
        }

        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](739,7)
        ##st#0_6 := st0#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##st#0_6, Tclass.M3.State(), $Heap);
        assume M3.__default.DomSt#canCall(st0#0);
        assume M3.__default.DomSt#canCall(st0#0);
        if (Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0)))
        {
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](740,9)
            ##st#0_0_0 := st1#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_0_0, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st1#0);
            assume M3.__default.DomSt#canCall(st1#0);
            assume {:id "id2691"} Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0));
        }
        else
        {
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](741,14)
            ##st#0_1_0 := st1#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_1_0, Tclass.M3.State(), $Heap);
            assume M3.__default.DomSt#canCall(st1#0);
            assume M3.__default.DomSt#canCall(st1#0);
            if (Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0)))
            {
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##st#0_1_0_0_0 := st0#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.DomSt#canCall(st0#0);
                    if (Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0)))
                    {
                        ##p#0_1_0_0_0 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_0, Tclass.M3.Path(), $Heap);
                        ##st#0_1_0_0_1 := st0#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st#0_1_0_0_1, Tclass.M3.State(), $Heap);
                        assume {:id "id2731"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_1_0_0_1), $Box(##p#0_1_0_0_0));
                        assume M3.__default.GetSt#canCall(d#0_0, st0#0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st0#0));
                    }
                    else
                    {
                        ##p#0_1_0_0_1 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_1, Tclass.M3.Path(), $Heap);
                        ##d#0_1_0_0_0 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##d#0_1_0_0_0, Tclass.M3.Path(), $Heap);
                        assume M3.WFCertificate.Cert_q(cert#0);
                        ##certs#0_1_0_0_0 := M3.WFCertificate.certs(cert#0);
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##certs#0_1_0_0_0, TSet(Tclass.M3.WFCertificate()), $Heap);
                        assume {:id "id2732"} {:subsumption 0} (exists c#0_1_0_0_0: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_1_0_0_0) } 
                            { Set#IsMember(##certs#0_1_0_0_0, $Box(c#0_1_0_0_0)) } 
                          $Is(c#0_1_0_0_0, Tclass.M3.WFCertificate())
                             && 
                            Set#IsMember(##certs#0_1_0_0_0, $Box(c#0_1_0_0_0))
                             && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_0), ##d#0_1_0_0_0));
                        assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                        assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                        ##cert#0_1_0_0_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##cert#0_1_0_0_0, Tclass.M3.WFCertificate(), $Heap);
                        ##st#0_1_0_0_2 := st0#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st#0_1_0_0_2, Tclass.M3.State(), $Heap);
                        assume {:id "id2733"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_1, ##cert#0_1_0_0_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_1, ##cert#0_1_0_0_0)
                             || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1_0_0_0), ##p#0_1_0_0_1);
                        assume {:id "id2734"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_1, ##cert#0_1_0_0_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_1, ##cert#0_1_0_0_0)
                             || (forall d#0_1_0_0_0: DatatypeType :: 
                              { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_1), $Box(d#0_1_0_0_0)) } 
                              $Is(d#0_1_0_0_0, Tclass.M3.Path())
                                 ==> 
                                Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_1), $Box(d#0_1_0_0_0))
                                 ==> (exists c#0_1_0_0_1: DatatypeType :: 
                                  { M3.WFCertificate.p(c#0_1_0_0_1) } 
                                    { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_0), $Box(c#0_1_0_0_1)) } 
                                  $Is(c#0_1_0_0_1, Tclass.M3.WFCertificate())
                                     && 
                                    Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_0), $Box(c#0_1_0_0_1))
                                     && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_1), d#0_1_0_0_0)));
                        assume {:id "id2735"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_1, ##cert#0_1_0_0_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_1, ##cert#0_1_0_0_0)
                             || (forall c#0_1_0_0_2: DatatypeType :: 
                              { M3.WFCertificate.p(c#0_1_0_0_2) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_0), $Box(c#0_1_0_0_2)) } 
                              $Is(c#0_1_0_0_2, Tclass.M3.WFCertificate())
                                 ==> 
                                Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_0), $Box(c#0_1_0_0_2))
                                 ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_1_0_0_2), c#0_1_0_0_2));
                        assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), 
                            d#0_0, 
                            M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                            st0#0));
                    }

                    assume M3.__default.DomSt#canCall(st0#0)
                       && (Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
                         ==> M3.__default.GetSt#canCall(d#0_0, st0#0))
                       && (!Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
                         ==> M3.WFCertificate.Cert_q(cert#0)
                           && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0))
                           && M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##st#0_1_0_0_5_0 := st0#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_5_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.DomSt#canCall(st0#0);
                    if (Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0)))
                    {
                        ##p#0_1_0_0_5_0 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_5_0, Tclass.M3.Path(), $Heap);
                        ##st#0_1_0_0_5_1 := st0#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st#0_1_0_0_5_1, Tclass.M3.State(), $Heap);
                        assume {:id "id2722"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_1_0_0_5_1), $Box(##p#0_1_0_0_5_0));
                        assume M3.__default.GetSt#canCall(d#0_0, st0#0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st0#0));
                    }
                    else
                    {
                        ##p#0_1_0_0_5_1 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_5_1, Tclass.M3.Path(), $Heap);
                        ##d#0_1_0_0_5_0 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##d#0_1_0_0_5_0, Tclass.M3.Path(), $Heap);
                        assume M3.WFCertificate.Cert_q(cert#0);
                        ##certs#0_1_0_0_5_0 := M3.WFCertificate.certs(cert#0);
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##certs#0_1_0_0_5_0, TSet(Tclass.M3.WFCertificate()), $Heap);
                        assume {:id "id2723"} {:subsumption 0} (exists c#0_1_0_0_5_0: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_1_0_0_5_0) } 
                            { Set#IsMember(##certs#0_1_0_0_5_0, $Box(c#0_1_0_0_5_0)) } 
                          $Is(c#0_1_0_0_5_0, Tclass.M3.WFCertificate())
                             && 
                            Set#IsMember(##certs#0_1_0_0_5_0, $Box(c#0_1_0_0_5_0))
                             && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_5_0), ##d#0_1_0_0_5_0));
                        assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                        assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                        ##cert#0_1_0_0_5_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##cert#0_1_0_0_5_0, Tclass.M3.WFCertificate(), $Heap);
                        ##st#0_1_0_0_5_2 := st0#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st#0_1_0_0_5_2, Tclass.M3.State(), $Heap);
                        assume {:id "id2724"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_5_1, ##cert#0_1_0_0_5_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_5_1, ##cert#0_1_0_0_5_0)
                             || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1_0_0_5_0), ##p#0_1_0_0_5_1);
                        assume {:id "id2725"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_5_1, ##cert#0_1_0_0_5_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_5_1, ##cert#0_1_0_0_5_0)
                             || (forall d#0_1_0_0_5_0: DatatypeType :: 
                              { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_5_1), $Box(d#0_1_0_0_5_0)) } 
                              $Is(d#0_1_0_0_5_0, Tclass.M3.Path())
                                 ==> 
                                Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_5_1), $Box(d#0_1_0_0_5_0))
                                 ==> (exists c#0_1_0_0_5_1: DatatypeType :: 
                                  { M3.WFCertificate.p(c#0_1_0_0_5_1) } 
                                    { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_5_0), $Box(c#0_1_0_0_5_1)) } 
                                  $Is(c#0_1_0_0_5_1, Tclass.M3.WFCertificate())
                                     && 
                                    Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_5_0), $Box(c#0_1_0_0_5_1))
                                     && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_5_1), d#0_1_0_0_5_0)));
                        assume {:id "id2726"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_5_1, ##cert#0_1_0_0_5_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_5_1, ##cert#0_1_0_0_5_0)
                             || (forall c#0_1_0_0_5_2: DatatypeType :: 
                              { M3.WFCertificate.p(c#0_1_0_0_5_2) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_5_0), $Box(c#0_1_0_0_5_2)) } 
                              $Is(c#0_1_0_0_5_2, Tclass.M3.WFCertificate())
                                 ==> 
                                Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_5_0), $Box(c#0_1_0_0_5_2))
                                 ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_1_0_0_5_2), c#0_1_0_0_5_2));
                        assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), 
                            d#0_0, 
                            M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                            st0#0));
                    }

                    assume M3.__default.DomSt#canCall(st0#0)
                       && (Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
                         ==> M3.__default.GetSt#canCall(d#0_0, st0#0))
                       && (!Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
                         ==> M3.WFCertificate.Cert_q(cert#0)
                           && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0))
                           && M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0));
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_5_2 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_5_2, Tclass.M3.Path(), $Heap);
                    ##d#0_1_0_0_5_1 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##d#0_1_0_0_5_1, Tclass.M3.Path(), $Heap);
                    assume M3.WFCertificate.Cert_q(cert#0);
                    ##certs#0_1_0_0_5_1 := M3.WFCertificate.certs(cert#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##certs#0_1_0_0_5_1, TSet(Tclass.M3.WFCertificate()), $Heap);
                    assume {:id "id2727"} {:subsumption 0} (exists c#0_1_0_0_5_3: DatatypeType :: 
                      { M3.WFCertificate.p(c#0_1_0_0_5_3) } 
                        { Set#IsMember(##certs#0_1_0_0_5_1, $Box(c#0_1_0_0_5_3)) } 
                      $Is(c#0_1_0_0_5_3, Tclass.M3.WFCertificate())
                         && 
                        Set#IsMember(##certs#0_1_0_0_5_1, $Box(c#0_1_0_0_5_3))
                         && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_5_3), ##d#0_1_0_0_5_1));
                    assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                    assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                    ##cert#0_1_0_0_5_1 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#0_1_0_0_5_1, Tclass.M3.WFCertificate(), $Heap);
                    ##st#0_1_0_0_5_3 := st0#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_5_3, Tclass.M3.State(), $Heap);
                    assume {:id "id2728"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_5_2, ##cert#0_1_0_0_5_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_5_2, ##cert#0_1_0_0_5_1)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1_0_0_5_1), ##p#0_1_0_0_5_2);
                    assume {:id "id2729"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_5_2, ##cert#0_1_0_0_5_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_5_2, ##cert#0_1_0_0_5_1)
                         || (forall d#0_1_0_0_5_1: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_5_2), $Box(d#0_1_0_0_5_1)) } 
                          $Is(d#0_1_0_0_5_1, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_5_2), $Box(d#0_1_0_0_5_1))
                             ==> (exists c#0_1_0_0_5_4: DatatypeType :: 
                              { M3.WFCertificate.p(c#0_1_0_0_5_4) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_5_1), $Box(c#0_1_0_0_5_4)) } 
                              $Is(c#0_1_0_0_5_4, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_5_1), $Box(c#0_1_0_0_5_4))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_5_4), d#0_1_0_0_5_1)));
                    assume {:id "id2730"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_5_2, ##cert#0_1_0_0_5_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_5_2, ##cert#0_1_0_0_5_1)
                         || (forall c#0_1_0_0_5_5: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_1_0_0_5_5) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_5_1), $Box(c#0_1_0_0_5_5)) } 
                          $Is(c#0_1_0_0_5_5, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_5_1), $Box(c#0_1_0_0_5_5))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_1_0_0_5_5), c#0_1_0_0_5_5));
                    assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), 
                        d#0_0, 
                        M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                        st0#0));
                    assume M3.WFCertificate.Cert_q(cert#0)
                       && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0))
                       && M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0);
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_4_0 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_4_0, Tclass.M3.Path(), $Heap);
                    ##d#0_1_0_0_4_0 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##d#0_1_0_0_4_0, Tclass.M3.Path(), $Heap);
                    assume M3.WFCertificate.Cert_q(cert#0);
                    ##certs#0_1_0_0_4_0 := M3.WFCertificate.certs(cert#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##certs#0_1_0_0_4_0, TSet(Tclass.M3.WFCertificate()), $Heap);
                    assume {:id "id2713"} {:subsumption 0} (exists c#0_1_0_0_4_0: DatatypeType :: 
                      { M3.WFCertificate.p(c#0_1_0_0_4_0) } 
                        { Set#IsMember(##certs#0_1_0_0_4_0, $Box(c#0_1_0_0_4_0)) } 
                      $Is(c#0_1_0_0_4_0, Tclass.M3.WFCertificate())
                         && 
                        Set#IsMember(##certs#0_1_0_0_4_0, $Box(c#0_1_0_0_4_0))
                         && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_4_0), ##d#0_1_0_0_4_0));
                    assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                    assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                    ##cert#0_1_0_0_4_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#0_1_0_0_4_0, Tclass.M3.WFCertificate(), $Heap);
                    ##st#0_1_0_0_4_0 := st0#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_4_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2714"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_4_0, ##cert#0_1_0_0_4_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_4_0, ##cert#0_1_0_0_4_0)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1_0_0_4_0), ##p#0_1_0_0_4_0);
                    assume {:id "id2715"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_4_0, ##cert#0_1_0_0_4_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_4_0, ##cert#0_1_0_0_4_0)
                         || (forall d#0_1_0_0_4_0: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_4_0), $Box(d#0_1_0_0_4_0)) } 
                          $Is(d#0_1_0_0_4_0, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_4_0), $Box(d#0_1_0_0_4_0))
                             ==> (exists c#0_1_0_0_4_1: DatatypeType :: 
                              { M3.WFCertificate.p(c#0_1_0_0_4_1) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_4_0), $Box(c#0_1_0_0_4_1)) } 
                              $Is(c#0_1_0_0_4_1, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_4_0), $Box(c#0_1_0_0_4_1))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_4_1), d#0_1_0_0_4_0)));
                    assume {:id "id2716"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_4_0, ##cert#0_1_0_0_4_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_4_0, ##cert#0_1_0_0_4_0)
                         || (forall c#0_1_0_0_4_2: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_1_0_0_4_2) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_4_0), $Box(c#0_1_0_0_4_2)) } 
                          $Is(c#0_1_0_0_4_2, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_4_0), $Box(c#0_1_0_0_4_2))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_1_0_0_4_2), c#0_1_0_0_4_2));
                    assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), 
                        d#0_0, 
                        M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                        st0#0));
                    assume M3.WFCertificate.Cert_q(cert#0)
                       && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0))
                       && M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st0#0);
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](746,46)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##0_1_0_0_4_0 := d#0_0;
                    ##d#0_1_0_0_4_1 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##d#0_1_0_0_4_1, Tclass.M3.Path(), $Heap);
                    assume M3.WFCertificate.Cert_q(cert#0);
                    ##certs#0_1_0_0_4_1 := M3.WFCertificate.certs(cert#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##certs#0_1_0_0_4_1, TSet(Tclass.M3.WFCertificate()), $Heap);
                    assume true;
                    assume (exists c#0_1_0_0_4_3: DatatypeType :: 
                      { M3.WFCertificate.p(c#0_1_0_0_4_3) } 
                        { Set#IsMember(##certs#0_1_0_0_4_1, $Box(c#0_1_0_0_4_3)) } 
                      $Is(c#0_1_0_0_4_3, Tclass.M3.WFCertificate())
                         && 
                        Set#IsMember(##certs#0_1_0_0_4_1, $Box(c#0_1_0_0_4_3))
                         && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_4_3), ##d#0_1_0_0_4_1));
                    assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                    assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                    assume M3.WFCertificate.Cert_q(cert#0)
                       && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                    // ProcessCallStmt: CheckSubrange
                    cert0##0_1_0_0_4_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                    ##p#0_1_0_0_4_1 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_4_1, Tclass.M3.Path(), $Heap);
                    assume true;
                    assume M3.__default.WellFounded(##p#0_1_0_0_4_1);
                    assume M3.__default.GetCert#canCall(d#0_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(d#0_0));
                    assume M3.__default.GetCert#canCall(d#0_0);
                    // ProcessCallStmt: CheckSubrange
                    cert1##0_1_0_0_4_0 := M3.__default.GetCert(d#0_0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##0_1_0_0_4_0 := st0#0;
                    call {:id "id2717"} Call$$M3.__default.OracleWF__CertificateInsensitivity(p##0_1_0_0_4_0, cert0##0_1_0_0_4_0, cert1##0_1_0_0_4_0, st##0_1_0_0_4_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_4_2 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_4_2, Tclass.M3.Path(), $Heap);
                    ##p#0_1_0_0_4_3 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_4_3, Tclass.M3.Path(), $Heap);
                    assume {:id "id2718"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#0_1_0_0_4_3)
                       ==> M3.__default.WellFounded(##p#0_1_0_0_4_3)
                         || (exists cert#0_1_0_0_4_1: DatatypeType :: 
                          { M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_4_3, cert#0_1_0_0_4_1) } 
                          $Is(cert#0_1_0_0_4_1, Tclass.M3.WFCertificate())
                             && M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_4_3, cert#0_1_0_0_4_1));
                    assume M3.__default.GetCert#canCall(d#0_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(d#0_0));
                    ##cert#0_1_0_0_4_1 := M3.__default.GetCert(d#0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#0_1_0_0_4_1, Tclass.M3.WFCertificate(), $Heap);
                    ##st#0_1_0_0_4_1 := st0#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_4_1, Tclass.M3.State(), $Heap);
                    assume {:id "id2719"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_4_2, ##cert#0_1_0_0_4_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_4_2, ##cert#0_1_0_0_4_1)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1_0_0_4_1), ##p#0_1_0_0_4_2);
                    assume {:id "id2720"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_4_2, ##cert#0_1_0_0_4_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_4_2, ##cert#0_1_0_0_4_1)
                         || (forall d#0_1_0_0_4_1: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_4_2), $Box(d#0_1_0_0_4_1)) } 
                          $Is(d#0_1_0_0_4_1, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_4_2), $Box(d#0_1_0_0_4_1))
                             ==> (exists c#0_1_0_0_4_4: DatatypeType :: 
                              { M3.WFCertificate.p(c#0_1_0_0_4_4) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_4_1), $Box(c#0_1_0_0_4_4)) } 
                              $Is(c#0_1_0_0_4_4, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_4_1), $Box(c#0_1_0_0_4_4))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_4_4), d#0_1_0_0_4_1)));
                    assume {:id "id2721"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_4_2, ##cert#0_1_0_0_4_1)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_4_2, ##cert#0_1_0_0_4_1)
                         || (forall c#0_1_0_0_4_5: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_1_0_0_4_5) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_4_1), $Box(c#0_1_0_0_4_5)) } 
                          $Is(c#0_1_0_0_4_5, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_4_1), $Box(c#0_1_0_0_4_5))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_1_0_0_4_5), c#0_1_0_0_4_5));
                    assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.GetCert(d#0_0), st0#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), d#0_0, M3.__default.GetCert(d#0_0), st0#0));
                    assume M3.__default.GetCert#canCall(d#0_0)
                       && M3.__default.OracleWF#canCall(d#0_0, M3.__default.GetCert(d#0_0), st0#0);
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_3_0 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_3_0, Tclass.M3.Path(), $Heap);
                    ##p#0_1_0_0_3_1 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_3_1, Tclass.M3.Path(), $Heap);
                    assume {:id "id2704"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#0_1_0_0_3_1)
                       ==> M3.__default.WellFounded(##p#0_1_0_0_3_1)
                         || (exists cert#0_1_0_0_3_0: DatatypeType :: 
                          { M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_1, cert#0_1_0_0_3_0) } 
                          $Is(cert#0_1_0_0_3_0, Tclass.M3.WFCertificate())
                             && M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_1, cert#0_1_0_0_3_0));
                    assume M3.__default.GetCert#canCall(d#0_0);
                    assume M3.WFCertificate.Cert_q(M3.__default.GetCert(d#0_0));
                    ##cert#0_1_0_0_3_0 := M3.__default.GetCert(d#0_0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cert#0_1_0_0_3_0, Tclass.M3.WFCertificate(), $Heap);
                    ##st#0_1_0_0_3_0 := st0#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_3_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2705"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_3_0, ##cert#0_1_0_0_3_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_0, ##cert#0_1_0_0_3_0)
                         || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1_0_0_3_0), ##p#0_1_0_0_3_0);
                    assume {:id "id2706"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_3_0, ##cert#0_1_0_0_3_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_0, ##cert#0_1_0_0_3_0)
                         || (forall d#0_1_0_0_3_0: DatatypeType :: 
                          { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_3_0), $Box(d#0_1_0_0_3_0)) } 
                          $Is(d#0_1_0_0_3_0, Tclass.M3.Path())
                             ==> 
                            Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_3_0), $Box(d#0_1_0_0_3_0))
                             ==> (exists c#0_1_0_0_3_0: DatatypeType :: 
                              { M3.WFCertificate.p(c#0_1_0_0_3_0) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_3_0), $Box(c#0_1_0_0_3_0)) } 
                              $Is(c#0_1_0_0_3_0, Tclass.M3.WFCertificate())
                                 && 
                                Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_3_0), $Box(c#0_1_0_0_3_0))
                                 && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_3_0), d#0_1_0_0_3_0)));
                    assume {:id "id2707"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_3_0, ##cert#0_1_0_0_3_0)
                       ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_0, ##cert#0_1_0_0_3_0)
                         || (forall c#0_1_0_0_3_1: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_1_0_0_3_1) } 
                            { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_3_0), $Box(c#0_1_0_0_3_1)) } 
                          $Is(c#0_1_0_0_3_1, Tclass.M3.WFCertificate())
                             ==> 
                            Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_3_0), $Box(c#0_1_0_0_3_1))
                             ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_1_0_0_3_1), c#0_1_0_0_3_1));
                    assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.GetCert(d#0_0), st0#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), d#0_0, M3.__default.GetCert(d#0_0), st0#0));
                    assume M3.__default.GetCert#canCall(d#0_0)
                       && M3.__default.OracleWF#canCall(d#0_0, M3.__default.GetCert(d#0_0), st0#0);
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](749,13)
                    ##p#0_1_0_0_3_2 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_3_2, Tclass.M3.Path(), $Heap);
                    assume M3.__default.WellFounded#canCall(d#0_0);
                    assume M3.__default.WellFounded#canCall(d#0_0);
                    assume true;
                    assume {:id "id2708"} M3.__default.WellFounded(d#0_0);
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_3_3 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_3_3, Tclass.M3.Path(), $Heap);
                    assume M3.__default.WellFounded#canCall(d#0_0);
                    if (M3.__default.WellFounded(d#0_0))
                    {
                        ##p#0_1_0_0_3_4 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_3_4, Tclass.M3.Path(), $Heap);
                        ##p#0_1_0_0_3_5 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_3_5, Tclass.M3.Path(), $Heap);
                        assume {:id "id2709"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#0_1_0_0_3_5)
                           ==> M3.__default.WellFounded(##p#0_1_0_0_3_5)
                             || (exists cert#0_1_0_0_3_2: DatatypeType :: 
                              { M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_5, cert#0_1_0_0_3_2) } 
                              $Is(cert#0_1_0_0_3_2, Tclass.M3.WFCertificate())
                                 && M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_5, cert#0_1_0_0_3_2));
                        assume M3.__default.GetCert#canCall(d#0_0);
                        assume M3.WFCertificate.Cert_q(M3.__default.GetCert(d#0_0));
                        ##cert#0_1_0_0_3_1 := M3.__default.GetCert(d#0_0);
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##cert#0_1_0_0_3_1, Tclass.M3.WFCertificate(), $Heap);
                        ##st#0_1_0_0_3_1 := st0#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st#0_1_0_0_3_1, Tclass.M3.State(), $Heap);
                        assume {:id "id2710"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_3_4, ##cert#0_1_0_0_3_1)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_4, ##cert#0_1_0_0_3_1)
                             || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1_0_0_3_1), ##p#0_1_0_0_3_4);
                        assume {:id "id2711"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_3_4, ##cert#0_1_0_0_3_1)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_4, ##cert#0_1_0_0_3_1)
                             || (forall d#0_1_0_0_3_1: DatatypeType :: 
                              { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_3_4), $Box(d#0_1_0_0_3_1)) } 
                              $Is(d#0_1_0_0_3_1, Tclass.M3.Path())
                                 ==> 
                                Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_3_4), $Box(d#0_1_0_0_3_1))
                                 ==> (exists c#0_1_0_0_3_2: DatatypeType :: 
                                  { M3.WFCertificate.p(c#0_1_0_0_3_2) } 
                                    { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_3_1), $Box(c#0_1_0_0_3_2)) } 
                                  $Is(c#0_1_0_0_3_2, Tclass.M3.WFCertificate())
                                     && 
                                    Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_3_1), $Box(c#0_1_0_0_3_2))
                                     && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_3_2), d#0_1_0_0_3_1)));
                        assume {:id "id2712"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_3_4, ##cert#0_1_0_0_3_1)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_3_4, ##cert#0_1_0_0_3_1)
                             || (forall c#0_1_0_0_3_3: DatatypeType :: 
                              { M3.WFCertificate.p(c#0_1_0_0_3_3) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_3_1), $Box(c#0_1_0_0_3_3)) } 
                              $Is(c#0_1_0_0_3_3, Tclass.M3.WFCertificate())
                                 ==> 
                                Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_3_1), $Box(c#0_1_0_0_3_3))
                                 ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_1_0_0_3_3), c#0_1_0_0_3_3));
                        assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.GetCert(d#0_0), st0#0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), d#0_0, M3.__default.GetCert(d#0_0), st0#0));
                    }
                    else
                    {
                        ##p#0_1_0_0_3_6 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_3_6, Tclass.M3.Path(), $Heap);
                        assume M3.__default.OracleArbitrary#canCall(d#0_0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.OracleArbitrary(d#0_0));
                    }

                    assume M3.__default.WellFounded#canCall(d#0_0)
                       && (M3.__default.WellFounded(d#0_0)
                         ==> M3.__default.GetCert#canCall(d#0_0)
                           && M3.__default.OracleWF#canCall(d#0_0, M3.__default.GetCert(d#0_0), st0#0))
                       && (!M3.__default.WellFounded(d#0_0)
                         ==> M3.__default.OracleArbitrary#canCall(d#0_0));
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_2_0 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_2_0, Tclass.M3.Path(), $Heap);
                    assume M3.__default.WellFounded#canCall(d#0_0);
                    if (M3.__default.WellFounded(d#0_0))
                    {
                        ##p#0_1_0_0_2_1 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_2_1, Tclass.M3.Path(), $Heap);
                        ##p#0_1_0_0_2_2 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_2_2, Tclass.M3.Path(), $Heap);
                        assume {:id "id2700"} {:subsumption 0} M3.__default.WellFounded#canCall(##p#0_1_0_0_2_2)
                           ==> M3.__default.WellFounded(##p#0_1_0_0_2_2)
                             || (exists cert#0_1_0_0_2_0: DatatypeType :: 
                              { M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_2_2, cert#0_1_0_0_2_0) } 
                              $Is(cert#0_1_0_0_2_0, Tclass.M3.WFCertificate())
                                 && M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_2_2, cert#0_1_0_0_2_0));
                        assume M3.__default.GetCert#canCall(d#0_0);
                        assume M3.WFCertificate.Cert_q(M3.__default.GetCert(d#0_0));
                        ##cert#0_1_0_0_2_0 := M3.__default.GetCert(d#0_0);
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##cert#0_1_0_0_2_0, Tclass.M3.WFCertificate(), $Heap);
                        ##st#0_1_0_0_2_0 := st0#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st#0_1_0_0_2_0, Tclass.M3.State(), $Heap);
                        assume {:id "id2701"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_2_1, ##cert#0_1_0_0_2_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_2_1, ##cert#0_1_0_0_2_0)
                             || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1_0_0_2_0), ##p#0_1_0_0_2_1);
                        assume {:id "id2702"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_2_1, ##cert#0_1_0_0_2_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_2_1, ##cert#0_1_0_0_2_0)
                             || (forall d#0_1_0_0_2_0: DatatypeType :: 
                              { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_2_1), $Box(d#0_1_0_0_2_0)) } 
                              $Is(d#0_1_0_0_2_0, Tclass.M3.Path())
                                 ==> 
                                Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_2_1), $Box(d#0_1_0_0_2_0))
                                 ==> (exists c#0_1_0_0_2_0: DatatypeType :: 
                                  { M3.WFCertificate.p(c#0_1_0_0_2_0) } 
                                    { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_2_0), $Box(c#0_1_0_0_2_0)) } 
                                  $Is(c#0_1_0_0_2_0, Tclass.M3.WFCertificate())
                                     && 
                                    Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_2_0), $Box(c#0_1_0_0_2_0))
                                     && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_2_0), d#0_1_0_0_2_0)));
                        assume {:id "id2703"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_2_1, ##cert#0_1_0_0_2_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_2_1, ##cert#0_1_0_0_2_0)
                             || (forall c#0_1_0_0_2_1: DatatypeType :: 
                              { M3.WFCertificate.p(c#0_1_0_0_2_1) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_2_0), $Box(c#0_1_0_0_2_1)) } 
                              $Is(c#0_1_0_0_2_1, Tclass.M3.WFCertificate())
                                 ==> 
                                Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_2_0), $Box(c#0_1_0_0_2_1))
                                 ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_1_0_0_2_1), c#0_1_0_0_2_1));
                        assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.GetCert(d#0_0), st0#0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), d#0_0, M3.__default.GetCert(d#0_0), st0#0));
                    }
                    else
                    {
                        ##p#0_1_0_0_2_3 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_2_3, Tclass.M3.Path(), $Heap);
                        assume M3.__default.OracleArbitrary#canCall(d#0_0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.OracleArbitrary(d#0_0));
                    }

                    assume M3.__default.WellFounded#canCall(d#0_0)
                       && (M3.__default.WellFounded(d#0_0)
                         ==> M3.__default.GetCert#canCall(d#0_0)
                           && M3.__default.OracleWF#canCall(d#0_0, M3.__default.GetCert(d#0_0), st0#0))
                       && (!M3.__default.WellFounded(d#0_0)
                         ==> M3.__default.OracleArbitrary#canCall(d#0_0));
                    // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_2_4 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_2_4, Tclass.M3.Path(), $Heap);
                    ##st#0_1_0_0_2_1 := st0#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_2_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(d#0_0, st0#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(d#0_0, st0#0));
                    assume M3.__default.Oracle#canCall(d#0_0, st0#0);
                    // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_1_0 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_1_0, Tclass.M3.Path(), $Heap);
                    ##st#0_1_0_0_1_0 := st0#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_1_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.Oracle#canCall(d#0_0, st0#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.Oracle(d#0_0, st0#0));
                    assume M3.__default.Oracle#canCall(d#0_0, st0#0);
                    // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](752,13)
                    ##st#0_1_0_0_1_1 := st0#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_1_1, Tclass.M3.State(), $Heap);
                    ##st'#0_1_0_0_1_0 := st1#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st'#0_1_0_0_1_0, Tclass.M3.State(), $Heap);
                    assume M3.__default.Extends#canCall(st0#0, st1#0);
                    assume M3.__default.Extends#canCall(st0#0, st1#0);
                    assume true;
                    assume true;
                    assume true;
                    assume {:id "id2698"} M3.__default.Extends(st0#0, st1#0);
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_1_1 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_1_1, Tclass.M3.Path(), $Heap);
                    ##st#0_1_0_0_1_2 := st1#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_1_2, Tclass.M3.State(), $Heap);
                    assume {:id "id2699"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_1_0_0_1_2), $Box(##p#0_1_0_0_1_1));
                    assume M3.__default.GetSt#canCall(d#0_0, st1#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st1#0));
                    assume M3.__default.GetSt#canCall(d#0_0, st1#0);
                    // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    assume true;
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##p#0_1_0_0_0_0 := d#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0_1_0_0_0_0, Tclass.M3.Path(), $Heap);
                    ##st#0_1_0_0_0_0 := st1#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_0_0, Tclass.M3.State(), $Heap);
                    assume {:id "id2692"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_1_0_0_0_0), $Box(##p#0_1_0_0_0_0));
                    assume M3.__default.GetSt#canCall(d#0_0, st1#0);
                    assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st1#0));
                    assume M3.__default.GetSt#canCall(d#0_0, st1#0);
                    // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    ##st#0_1_0_0_0_1 := st1#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##st#0_1_0_0_0_1, Tclass.M3.State(), $Heap);
                    assume M3.__default.DomSt#canCall(st1#0);
                    if (Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0)))
                    {
                        ##p#0_1_0_0_0_1 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_0_1, Tclass.M3.Path(), $Heap);
                        ##st#0_1_0_0_0_2 := st1#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st#0_1_0_0_0_2, Tclass.M3.State(), $Heap);
                        assume {:id "id2693"} {:subsumption 0} Set#IsMember(M3.__default.DomSt(##st#0_1_0_0_0_2), $Box(##p#0_1_0_0_0_1));
                        assume M3.__default.GetSt#canCall(d#0_0, st1#0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.GetSt(d#0_0, st1#0));
                    }
                    else
                    {
                        ##p#0_1_0_0_0_2 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0_1_0_0_0_2, Tclass.M3.Path(), $Heap);
                        ##d#0_1_0_0_0_0 := d#0_0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##d#0_1_0_0_0_0, Tclass.M3.Path(), $Heap);
                        assume M3.WFCertificate.Cert_q(cert#0);
                        ##certs#0_1_0_0_0_0 := M3.WFCertificate.certs(cert#0);
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##certs#0_1_0_0_0_0, TSet(Tclass.M3.WFCertificate()), $Heap);
                        assume {:id "id2694"} {:subsumption 0} (exists c#0_1_0_0_0_0: DatatypeType :: 
                          { M3.WFCertificate.p(c#0_1_0_0_0_0) } 
                            { Set#IsMember(##certs#0_1_0_0_0_0, $Box(c#0_1_0_0_0_0)) } 
                          $Is(c#0_1_0_0_0_0, Tclass.M3.WFCertificate())
                             && 
                            Set#IsMember(##certs#0_1_0_0_0_0, $Box(c#0_1_0_0_0_0))
                             && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_0_0), ##d#0_1_0_0_0_0));
                        assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                        assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                        ##cert#0_1_0_0_0_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##cert#0_1_0_0_0_0, Tclass.M3.WFCertificate(), $Heap);
                        ##st#0_1_0_0_0_3 := st1#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##st#0_1_0_0_0_3, Tclass.M3.State(), $Heap);
                        assume {:id "id2695"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_0_2, ##cert#0_1_0_0_0_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_0_2, ##cert#0_1_0_0_0_0)
                             || M3.Path#Equal(M3.WFCertificate.p(##cert#0_1_0_0_0_0), ##p#0_1_0_0_0_2);
                        assume {:id "id2696"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_0_2, ##cert#0_1_0_0_0_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_0_2, ##cert#0_1_0_0_0_0)
                             || (forall d#0_1_0_0_0_0: DatatypeType :: 
                              { Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_0_2), $Box(d#0_1_0_0_0_0)) } 
                              $Is(d#0_1_0_0_0_0, Tclass.M3.Path())
                                 ==> 
                                Set#IsMember(M3.__default.LocInv__Deps(##p#0_1_0_0_0_2), $Box(d#0_1_0_0_0_0))
                                 ==> (exists c#0_1_0_0_0_1: DatatypeType :: 
                                  { M3.WFCertificate.p(c#0_1_0_0_0_1) } 
                                    { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_0_0), $Box(c#0_1_0_0_0_1)) } 
                                  $Is(c#0_1_0_0_0_1, Tclass.M3.WFCertificate())
                                     && 
                                    Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_0_0), $Box(c#0_1_0_0_0_1))
                                     && M3.Path#Equal(M3.WFCertificate.p(c#0_1_0_0_0_1), d#0_1_0_0_0_0)));
                        assume {:id "id2697"} {:subsumption 0} M3.__default.CheckWellFounded#canCall(##p#0_1_0_0_0_2, ##cert#0_1_0_0_0_0)
                           ==> M3.__default.CheckWellFounded($LS($LZ), ##p#0_1_0_0_0_2, ##cert#0_1_0_0_0_0)
                             || (forall c#0_1_0_0_0_2: DatatypeType :: 
                              { M3.WFCertificate.p(c#0_1_0_0_0_2) } 
                                { Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_0_0), $Box(c#0_1_0_0_0_2)) } 
                              $Is(c#0_1_0_0_0_2, Tclass.M3.WFCertificate())
                                 ==> 
                                Set#IsMember(M3.WFCertificate.certs(##cert#0_1_0_0_0_0), $Box(c#0_1_0_0_0_2))
                                 ==> M3.__default.CheckWellFounded($LS($LS($LZ)), M3.WFCertificate.p(c#0_1_0_0_0_2), c#0_1_0_0_0_2));
                        assume M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st1#0);
                        assume M3.Artifact.ArtifactCons_q(M3.__default.OracleWF($LS($LZ), 
                            d#0_0, 
                            M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                            st1#0));
                    }

                    assume M3.__default.DomSt#canCall(st1#0)
                       && (Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0))
                         ==> M3.__default.GetSt#canCall(d#0_0, st1#0))
                       && (!Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0))
                         ==> M3.WFCertificate.Cert_q(cert#0)
                           && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0))
                           && M3.__default.OracleWF#canCall(d#0_0, M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), st1#0));
                    // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](742,9)
                    assume true;
                    assume false;
                }

                assume {:id "id2736"} M3.Artifact#Equal((if Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
                     then M3.__default.GetSt(d#0_0, st0#0)
                     else M3.__default.OracleWF($LS($LZ), 
                      d#0_0, 
                      M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                      st0#0)), 
                  (if Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0))
                     then M3.__default.GetSt(d#0_0, st1#0)
                     else M3.__default.OracleWF($LS($LZ), 
                      d#0_0, 
                      M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
                      st1#0)));
            }
            else
            {
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M3](757,26)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                p##0_1_1_0 := d#0_0;
                ##d#0_1_1_0 := d#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##d#0_1_1_0, Tclass.M3.Path(), $Heap);
                assume M3.WFCertificate.Cert_q(cert#0);
                ##certs#0_1_1_0 := M3.WFCertificate.certs(cert#0);
                // assume allocatedness for argument to function
                assume $IsAlloc(##certs#0_1_1_0, TSet(Tclass.M3.WFCertificate()), $Heap);
                assume true;
                assume (exists c#0_1_1_0: DatatypeType :: 
                  { M3.WFCertificate.p(c#0_1_1_0) } 
                    { Set#IsMember(##certs#0_1_1_0, $Box(c#0_1_1_0)) } 
                  $Is(c#0_1_1_0, Tclass.M3.WFCertificate())
                     && 
                    Set#IsMember(##certs#0_1_1_0, $Box(c#0_1_1_0))
                     && M3.Path#Equal(M3.WFCertificate.p(c#0_1_1_0), ##d#0_1_1_0));
                assume M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                assume M3.WFCertificate.Cert_q(M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)));
                assume M3.WFCertificate.Cert_q(cert#0)
                   && M3.__default.FindCert#canCall(d#0_0, M3.WFCertificate.certs(cert#0));
                // ProcessCallStmt: CheckSubrange
                cert##0_1_1_0 := M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0));
                assume true;
                // ProcessCallStmt: CheckSubrange
                st0##0_1_1_0 := st0#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st1##0_1_1_0 := st1#0;
                assume {:id "id2737"} 0 <= LitInt(0)
                   || DtRank(cert##0_1_1_0) < DtRank(cert#0)
                   || LitInt(1) == LitInt(0);
                assume {:id "id2738"} DtRank(cert##0_1_1_0) < DtRank(cert#0)
                   || (DtRank(cert##0_1_1_0) == DtRank(cert#0) && LitInt(1) < LitInt(0));
                call {:id "id2739"} Call$$M3.__default.OracleWF__Property(p##0_1_1_0, cert##0_1_1_0, st0##0_1_1_0, st1##0_1_1_0);
                // TrCallStmt: After ProcessCallStmt
            }
        }

        assume {:id "id2740"} M3.Artifact#Equal((if Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_0))
             then M3.__default.GetSt(d#0_0, st0#0)
             else M3.__default.OracleWF($LS($LS($LZ)), 
              d#0_0, 
              M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
              st0#0)), 
          (if Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_0))
             then M3.__default.GetSt(d#0_0, st1#0)
             else M3.__default.OracleWF($LS($LS($LZ)), 
              d#0_0, 
              M3.__default.FindCert(d#0_0, M3.WFCertificate.certs(cert#0)), 
              st1#0)));
        assume false;
    }
    else
    {
        assume (forall d#0_3: DatatypeType :: 
          { M3.__default.GetSt(d#0_3, st1#0) } 
            { Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_3)) } 
            { M3.__default.FindCert(d#0_3, M3.WFCertificate.certs(cert#0)) } 
            { M3.__default.GetSt(d#0_3, st0#0) } 
            { Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_3)) } 
            { Set#IsMember(deps#0, $Box(d#0_3)) } 
          $Is(d#0_3, Tclass.M3.Path()) && Set#IsMember(deps#0, $Box(d#0_3))
             ==> M3.Artifact#Equal((if Set#IsMember(M3.__default.DomSt(st0#0), $Box(d#0_3))
                 then M3.__default.GetSt(d#0_3, st0#0)
                 else M3.__default.OracleWF($LS($LZ), 
                  d#0_3, 
                  M3.__default.FindCert(d#0_3, M3.WFCertificate.certs(cert#0)), 
                  st0#0)), 
              (if Set#IsMember(M3.__default.DomSt(st1#0), $Box(d#0_3))
                 then M3.__default.GetSt(d#0_3, st1#0)
                 else M3.__default.OracleWF($LS($LZ), 
                  d#0_3, 
                  M3.__default.FindCert(d#0_3, M3.WFCertificate.certs(cert#0)), 
                  st1#0))));
    }
}



// function declaration for M3._default.GetSt
function M3.__default.GetSt(p#0: DatatypeType, st#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.GetSt
axiom 3 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.GetSt(p#0, st#0) } 
    M3.__default.GetSt#canCall(p#0, st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(st#0, Tclass.M3.State())
           && Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)))
       ==> $Is(M3.__default.GetSt(p#0, st#0), Tclass.M3.Artifact()));
// definition axiom for M3.__default.GetSt (revealed)
axiom {:id "id2741"} 3 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.GetSt(p#0, st#0) } 
    M3.__default.GetSt#canCall(p#0, st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(st#0, Tclass.M3.State())
           && Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)))
       ==> M3.State.StateCons_q(st#0)
         && M3.__default.GetSt(p#0, st#0)
           == $Unbox(Map#Elements(M3.State.m(st#0))[$Box(p#0)]): DatatypeType);
// definition axiom for M3.__default.GetSt for decreasing-related literals (revealed)
axiom {:id "id2742"} 3 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.GetSt(p#0, Lit(st#0)) } 
    M3.__default.GetSt#canCall(p#0, Lit(st#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(st#0, Tclass.M3.State())
           && Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#0)))
       ==> M3.State.StateCons_q(Lit(st#0))
         && M3.__default.GetSt(p#0, Lit(st#0))
           == $Unbox(Map#Elements(Lit(M3.State.m(Lit(st#0))))[$Box(p#0)]): DatatypeType);
// definition axiom for M3.__default.GetSt for all literals (revealed)
axiom {:id "id2743"} 3 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.GetSt(Lit(p#0), Lit(st#0)) } 
    M3.__default.GetSt#canCall(Lit(p#0), Lit(st#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass.M3.Path())
           && $Is(st#0, Tclass.M3.State())
           && Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(Lit(p#0))))
       ==> M3.State.StateCons_q(Lit(st#0))
         && M3.__default.GetSt(Lit(p#0), Lit(st#0))
           == $Unbox(Map#Elements(Lit(M3.State.m(Lit(st#0))))[$Box(Lit(p#0))]): DatatypeType);
}

function M3.__default.GetSt#canCall(p#0: DatatypeType, st#0: DatatypeType) : bool;

function M3.__default.GetSt#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.GetSt
axiom (forall p#0: DatatypeType, st#0: DatatypeType :: 
  { M3.__default.GetSt#requires(p#0, st#0) } 
  $Is(p#0, Tclass.M3.Path()) && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.GetSt#requires(p#0, st#0)
       == Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)));

procedure {:verboseName "M3.GetSt (well-formedness)"} CheckWellformed$$M3.__default.GetSt(p#0: DatatypeType where $Is(p#0, Tclass.M3.Path()), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.DomSt
function M3.__default.DomSt(st#0: DatatypeType) : Set
uses {
// consequence axiom for M3.__default.DomSt
axiom 2 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType :: 
    { M3.__default.DomSt(st#0) } 
    M3.__default.DomSt#canCall(st#0)
         || (2 < $FunctionContextHeight && $Is(st#0, Tclass.M3.State()))
       ==> (forall p#0: DatatypeType :: 
          { Set#IsMember(Map#Domain(M3.State.m(st#0)), $Box(p#0)) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
          $Is(p#0, Tclass.M3.Path())
             ==> 
            Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
             ==> Set#IsMember(Map#Domain(M3.State.m(st#0)), $Box(p#0)))
         && $Is(M3.__default.DomSt(st#0), TSet(Tclass.M3.Path())));
// definition axiom for M3.__default.DomSt (revealed)
axiom {:id "id2747"} 2 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType :: 
    { M3.__default.DomSt(st#0) } 
    M3.__default.DomSt#canCall(st#0)
         || (2 < $FunctionContextHeight && $Is(st#0, Tclass.M3.State()))
       ==> M3.State.StateCons_q(st#0)
         && M3.__default.DomSt(st#0)
           == Set#FromBoogieMap((lambda $y#0: Box :: 
              $IsBox($y#0, Tclass.M3.Path())
                 && Set#IsMember(Map#Domain(M3.State.m(st#0)), $y#0))));
// definition axiom for M3.__default.DomSt for all literals (revealed)
axiom {:id "id2748"} 2 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType :: 
    {:weight 3} { M3.__default.DomSt(Lit(st#0)) } 
    M3.__default.DomSt#canCall(Lit(st#0))
         || (2 < $FunctionContextHeight && $Is(st#0, Tclass.M3.State()))
       ==> M3.State.StateCons_q(Lit(st#0))
         && M3.__default.DomSt(Lit(st#0))
           == Set#FromBoogieMap((lambda $y#1: Box :: 
              $IsBox($y#1, Tclass.M3.Path())
                 && Set#IsMember(Map#Domain(M3.State.m(Lit(st#0))), $y#1))));
}

function M3.__default.DomSt#canCall(st#0: DatatypeType) : bool;

function M3.__default.DomSt#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.DomSt
axiom (forall st#0: DatatypeType :: 
  { M3.__default.DomSt#requires(st#0) } 
  $Is(st#0, Tclass.M3.State()) ==> M3.__default.DomSt#requires(st#0) == true);

procedure {:verboseName "M3.DomSt (well-formedness)"} CheckWellformed$$M3.__default.DomSt(st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.Main (well-formedness)"} CheckWellFormed$$M3.__default.Main();
  free requires 11 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.Main (call)"} Call$$M3.__default.Main();
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



procedure {:verboseName "M3.Main (correctness)"} Impl$$M3.__default.Main() returns ($_reverifyPost: bool);
  free requires 11 == $FunctionContextHeight;
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSuccGhost(old($Heap), $Heap);



function Tclass.M3.Primitive() : Ty
uses {
// Tclass.M3.Primitive Tag
axiom Tag(Tclass.M3.Primitive()) == Tagclass.M3.Primitive
   && TagFamily(Tclass.M3.Primitive()) == tytagFamily$Primitive;
}

const unique Tagclass.M3.Primitive: TyTag;

// Box/unbox axiom for Tclass.M3.Primitive
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Primitive()) } 
  $IsBox(bx, Tclass.M3.Primitive())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Primitive()));

function Tclass.M3.Program() : Ty
uses {
// Tclass.M3.Program Tag
axiom Tag(Tclass.M3.Program()) == Tagclass.M3.Program
   && TagFamily(Tclass.M3.Program()) == tytagFamily$Program;
}

const unique Tagclass.M3.Program: TyTag;

// Box/unbox axiom for Tclass.M3.Program
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Program()) } 
  $IsBox(bx, Tclass.M3.Program())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Program()));

// function declaration for M3._default.ValidState
function M3.__default.ValidState(st#0: DatatypeType) : bool
uses {
// definition axiom for M3.__default.ValidState (revealed)
axiom {:id "id2770"} 4 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType :: 
    { M3.__default.ValidState(st#0) } 
    M3.__default.ValidState#canCall(st#0)
         || (4 < $FunctionContextHeight && $Is(st#0, Tclass.M3.State()))
       ==> (forall p#0: DatatypeType :: 
          { M3.__default.WellFounded(p#0) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
          $Is(p#0, Tclass.M3.Path())
             ==> M3.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
                 ==> M3.__default.WellFounded#canCall(p#0)))
         && M3.__default.ValidState(st#0)
           == (forall p#0: DatatypeType :: 
            { M3.__default.WellFounded(p#0) } 
              { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
            $Is(p#0, Tclass.M3.Path())
               ==> 
              Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
               ==> M3.__default.WellFounded(p#0)));
// definition axiom for M3.__default.ValidState for all literals (revealed)
axiom {:id "id2771"} 4 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType :: 
    {:weight 3} { M3.__default.ValidState(Lit(st#0)) } 
    M3.__default.ValidState#canCall(Lit(st#0))
         || (4 < $FunctionContextHeight && $Is(st#0, Tclass.M3.State()))
       ==> (forall p#1: DatatypeType :: 
          { M3.__default.WellFounded(p#1) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) } 
          $Is(p#1, Tclass.M3.Path())
             ==> M3.__default.DomSt#canCall(Lit(st#0))
               && (Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#1))
                 ==> M3.__default.WellFounded#canCall(p#1)))
         && M3.__default.ValidState(Lit(st#0))
           == (forall p#1: DatatypeType :: 
            { M3.__default.WellFounded(p#1) } 
              { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) } 
            $Is(p#1, Tclass.M3.Path())
               ==> 
              Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#1))
               ==> M3.__default.WellFounded(p#1)));
}

function M3.__default.ValidState#canCall(st#0: DatatypeType) : bool;

function M3.__default.ValidState#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.ValidState
axiom (forall st#0: DatatypeType :: 
  { M3.__default.ValidState#requires(st#0) } 
  $Is(st#0, Tclass.M3.State()) ==> M3.__default.ValidState#requires(st#0) == true);

procedure {:verboseName "M3.ValidState (well-formedness)"} CheckWellformed$$M3.__default.ValidState(st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.Compatible
function M3.__default.Compatible(sts#0: Set) : bool
uses {
// definition axiom for M3.__default.Compatible (revealed)
axiom {:id "id2773"} 4 <= $FunctionContextHeight
   ==> (forall sts#0: Set :: 
    { M3.__default.Compatible(sts#0) } 
    M3.__default.Compatible#canCall(sts#0)
         || (4 < $FunctionContextHeight && $Is(sts#0, TSet(Tclass.M3.State())))
       ==> (forall st#0: DatatypeType, st'#0: DatatypeType, p#0: DatatypeType :: 
          { M3.__default.GetSt(p#0, st'#0), M3.__default.GetSt(p#0, st#0) } 
            { M3.__default.GetSt(p#0, st'#0), M3.__default.DomSt(st#0) } 
            { M3.__default.GetSt(p#0, st'#0), Set#IsMember(sts#0, $Box(st#0)) } 
            { M3.__default.GetSt(p#0, st#0), M3.__default.DomSt(st'#0) } 
            { M3.__default.GetSt(p#0, st#0), Set#IsMember(sts#0, $Box(st'#0)) } 
            { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#0)), M3.__default.DomSt(st#0) } 
            { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#0)), Set#IsMember(sts#0, $Box(st#0)) } 
            { M3.__default.DomSt(st'#0), Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
            { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)), Set#IsMember(sts#0, $Box(st'#0)) } 
          $Is(st#0, Tclass.M3.State())
               && $Is(st'#0, Tclass.M3.State())
               && $Is(p#0, Tclass.M3.Path())
             ==> 
            Set#IsMember(sts#0, $Box(st#0))
             ==> 
            Set#IsMember(sts#0, $Box(st'#0))
             ==> M3.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
                 ==> M3.__default.DomSt#canCall(st'#0)
                   && (Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#0))
                     ==> $IsA#M3.Artifact(M3.__default.GetSt(p#0, st#0))
                       && $IsA#M3.Artifact(M3.__default.GetSt(p#0, st'#0))
                       && 
                      M3.__default.GetSt#canCall(p#0, st#0)
                       && M3.__default.GetSt#canCall(p#0, st'#0))))
         && M3.__default.Compatible(sts#0)
           == (forall st#0: DatatypeType, st'#0: DatatypeType, p#0: DatatypeType :: 
            { M3.__default.GetSt(p#0, st'#0), M3.__default.GetSt(p#0, st#0) } 
              { M3.__default.GetSt(p#0, st'#0), M3.__default.DomSt(st#0) } 
              { M3.__default.GetSt(p#0, st'#0), Set#IsMember(sts#0, $Box(st#0)) } 
              { M3.__default.GetSt(p#0, st#0), M3.__default.DomSt(st'#0) } 
              { M3.__default.GetSt(p#0, st#0), Set#IsMember(sts#0, $Box(st'#0)) } 
              { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#0)), M3.__default.DomSt(st#0) } 
              { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#0)), Set#IsMember(sts#0, $Box(st#0)) } 
              { M3.__default.DomSt(st'#0), Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
              { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)), Set#IsMember(sts#0, $Box(st'#0)) } 
            $Is(st#0, Tclass.M3.State())
                 && $Is(st'#0, Tclass.M3.State())
                 && $Is(p#0, Tclass.M3.Path())
               ==> 
              Set#IsMember(sts#0, $Box(st#0))
                 && Set#IsMember(sts#0, $Box(st'#0))
                 && Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
                 && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#0))
               ==> M3.Artifact#Equal(M3.__default.GetSt(p#0, st#0), M3.__default.GetSt(p#0, st'#0))));
// definition axiom for M3.__default.Compatible for all literals (revealed)
axiom {:id "id2774"} 4 <= $FunctionContextHeight
   ==> (forall sts#0: Set :: 
    {:weight 3} { M3.__default.Compatible(Lit(sts#0)) } 
    M3.__default.Compatible#canCall(Lit(sts#0))
         || (4 < $FunctionContextHeight && $Is(sts#0, TSet(Tclass.M3.State())))
       ==> (forall st#1: DatatypeType, st'#1: DatatypeType, p#1: DatatypeType :: 
          { M3.__default.GetSt(p#1, st'#1), M3.__default.GetSt(p#1, st#1) } 
            { M3.__default.GetSt(p#1, st'#1), M3.__default.DomSt(st#1) } 
            { M3.__default.GetSt(p#1, st'#1), Set#IsMember(sts#0, $Box(st#1)) } 
            { M3.__default.GetSt(p#1, st#1), M3.__default.DomSt(st'#1) } 
            { M3.__default.GetSt(p#1, st#1), Set#IsMember(sts#0, $Box(st'#1)) } 
            { Set#IsMember(M3.__default.DomSt(st'#1), $Box(p#1)), M3.__default.DomSt(st#1) } 
            { Set#IsMember(M3.__default.DomSt(st'#1), $Box(p#1)), Set#IsMember(sts#0, $Box(st#1)) } 
            { M3.__default.DomSt(st'#1), Set#IsMember(M3.__default.DomSt(st#1), $Box(p#1)) } 
            { Set#IsMember(M3.__default.DomSt(st#1), $Box(p#1)), Set#IsMember(sts#0, $Box(st'#1)) } 
          $Is(st#1, Tclass.M3.State())
               && $Is(st'#1, Tclass.M3.State())
               && $Is(p#1, Tclass.M3.Path())
             ==> 
            Set#IsMember(Lit(sts#0), $Box(st#1))
             ==> 
            Set#IsMember(Lit(sts#0), $Box(st'#1))
             ==> M3.__default.DomSt#canCall(st#1)
               && (Set#IsMember(M3.__default.DomSt(st#1), $Box(p#1))
                 ==> M3.__default.DomSt#canCall(st'#1)
                   && (Set#IsMember(M3.__default.DomSt(st'#1), $Box(p#1))
                     ==> $IsA#M3.Artifact(M3.__default.GetSt(p#1, st#1))
                       && $IsA#M3.Artifact(M3.__default.GetSt(p#1, st'#1))
                       && 
                      M3.__default.GetSt#canCall(p#1, st#1)
                       && M3.__default.GetSt#canCall(p#1, st'#1))))
         && M3.__default.Compatible(Lit(sts#0))
           == (forall st#1: DatatypeType, st'#1: DatatypeType, p#1: DatatypeType :: 
            { M3.__default.GetSt(p#1, st'#1), M3.__default.GetSt(p#1, st#1) } 
              { M3.__default.GetSt(p#1, st'#1), M3.__default.DomSt(st#1) } 
              { M3.__default.GetSt(p#1, st'#1), Set#IsMember(sts#0, $Box(st#1)) } 
              { M3.__default.GetSt(p#1, st#1), M3.__default.DomSt(st'#1) } 
              { M3.__default.GetSt(p#1, st#1), Set#IsMember(sts#0, $Box(st'#1)) } 
              { Set#IsMember(M3.__default.DomSt(st'#1), $Box(p#1)), M3.__default.DomSt(st#1) } 
              { Set#IsMember(M3.__default.DomSt(st'#1), $Box(p#1)), Set#IsMember(sts#0, $Box(st#1)) } 
              { M3.__default.DomSt(st'#1), Set#IsMember(M3.__default.DomSt(st#1), $Box(p#1)) } 
              { Set#IsMember(M3.__default.DomSt(st#1), $Box(p#1)), Set#IsMember(sts#0, $Box(st'#1)) } 
            $Is(st#1, Tclass.M3.State())
                 && $Is(st'#1, Tclass.M3.State())
                 && $Is(p#1, Tclass.M3.Path())
               ==> 
              Set#IsMember(Lit(sts#0), $Box(st#1))
                 && Set#IsMember(Lit(sts#0), $Box(st'#1))
                 && Set#IsMember(M3.__default.DomSt(st#1), $Box(p#1))
                 && Set#IsMember(M3.__default.DomSt(st'#1), $Box(p#1))
               ==> M3.Artifact#Equal(M3.__default.GetSt(p#1, st#1), M3.__default.GetSt(p#1, st'#1))));
}

function M3.__default.Compatible#canCall(sts#0: Set) : bool;

function M3.__default.Compatible#requires(Set) : bool;

// #requires axiom for M3.__default.Compatible
axiom (forall sts#0: Set :: 
  { M3.__default.Compatible#requires(sts#0) } 
  $Is(sts#0, TSet(Tclass.M3.State()))
     ==> M3.__default.Compatible#requires(sts#0) == true);

procedure {:verboseName "M3.Compatible (well-formedness)"} CheckWellformed$$M3.__default.Compatible(sts#0: Set where $Is(sts#0, TSet(Tclass.M3.State())));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.Combine
function M3.__default.Combine($ly: LayerType, sts#0: Set) : DatatypeType
uses {
// consequence axiom for M3.__default.Combine
axiom 5 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, sts#0: Set :: 
    { M3.__default.Combine($ly, sts#0) } 
    M3.__default.Combine#canCall(sts#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(sts#0, TSet(Tclass.M3.State()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> $Is(M3.__default.Combine($ly, sts#0), Tclass.M3.State()));
// definition axiom for M3.__default.Combine (revealed)
axiom {:id "id2776"} 5 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, sts#0: Set :: 
    { M3.__default.Combine($LS($ly), sts#0), $IsGoodHeap($Heap) } 
    M3.__default.Combine#canCall(sts#0)
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(sts#0, TSet(Tclass.M3.State()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> $let#40$canCall(sts#0)
         && (!Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, $Box($let#40_st(sts#0))))
           ==> M3.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box($let#40_st(sts#0)))))
             && M3.__default.Union#canCall($let#40_st(sts#0), 
              M3.__default.Combine($ly, 
                Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box($let#40_st(sts#0)))))))
         && M3.__default.Combine($LS($ly), sts#0)
           == (var st#0 := $let#40_st(sts#0); 
            (if Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0)))
               then st#0
               else M3.__default.Union(st#0, 
                M3.__default.Combine($ly, Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0))))))));
// definition axiom for M3.__default.Combine for all literals (revealed)
axiom {:id "id2777"} 5 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, sts#0: Set :: 
    {:weight 3} { M3.__default.Combine($LS($ly), Lit(sts#0)), $IsGoodHeap($Heap) } 
    M3.__default.Combine#canCall(Lit(sts#0))
         || (5 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(sts#0, TSet(Tclass.M3.State()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> $let#40$canCall(Lit(sts#0))
         && (!Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, $Box($let#40_st(Lit(sts#0)))))
           ==> M3.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box($let#40_st(Lit(sts#0))))))
             && M3.__default.Union#canCall($let#40_st(Lit(sts#0)), 
              M3.__default.Combine($LS($ly), 
                Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box($let#40_st(Lit(sts#0))))))))
         && M3.__default.Combine($LS($ly), Lit(sts#0))
           == (var st#1 := $let#40_st(Lit(sts#0)); 
            (if Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#1)))
               then st#1
               else M3.__default.Union(st#1, 
                M3.__default.Combine($LS($ly), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#1))))))));
}

function M3.__default.Combine#canCall(sts#0: Set) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, sts#0: Set :: 
  { M3.__default.Combine($LS($ly), sts#0) } 
  M3.__default.Combine($LS($ly), sts#0) == M3.__default.Combine($ly, sts#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, sts#0: Set :: 
  { M3.__default.Combine(AsFuelBottom($ly), sts#0) } 
  M3.__default.Combine($ly, sts#0) == M3.__default.Combine($LZ, sts#0));

function M3.__default.Combine#requires(LayerType, Set) : bool;

// #requires axiom for M3.__default.Combine
axiom (forall $ly: LayerType, $Heap: Heap, sts#0: Set :: 
  { M3.__default.Combine#requires($ly, sts#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(sts#0, TSet(Tclass.M3.State()))
     ==> M3.__default.Combine#requires($ly, sts#0) == !Set#Equal(sts#0, Set#Empty(): Set));

function $let#40_st(sts: Set) : DatatypeType;

function $let#40$canCall(sts: Set) : bool;

axiom (forall sts: Set :: 
  { $let#40_st(sts) } 
  $let#40$canCall(sts)
     ==> $Is($let#40_st(sts), Tclass.M3.State())
       && Set#IsMember(sts, $Box($let#40_st(sts))));

procedure {:verboseName "M3.Combine (well-formedness)"} CheckWellformed$$M3.__default.Combine(sts#0: Set where $Is(sts#0, TSet(Tclass.M3.State())));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.Lemma_Combine (well-formedness)"} CheckWellFormed$$M3.__default.Lemma__Combine(sts#0: Set
       where $Is(sts#0, TSet(Tclass.M3.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M3.State()), $Heap), 
    parent#0: DatatypeType
       where $Is(parent#0, Tclass.M3.State())
         && $IsAlloc(parent#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(parent#0));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.Lemma_Combine (call)"} Call$$M3.__default.Lemma__Combine(sts#0: Set
       where $Is(sts#0, TSet(Tclass.M3.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M3.State()), $Heap), 
    parent#0: DatatypeType
       where $Is(parent#0, Tclass.M3.State())
         && $IsAlloc(parent#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(parent#0));
  // user-defined preconditions
  requires {:id "id2790"} !Set#Equal(sts#0, Set#Empty(): Set);
  requires {:id "id2791"} (forall st#1: DatatypeType :: 
    { M3.__default.Extends(parent#0, st#1) } 
      { M3.__default.ValidState(st#1) } 
      { Set#IsMember(sts#0, $Box(st#1)) } 
    $Is(st#1, Tclass.M3.State())
       ==> (Set#IsMember(sts#0, $Box(st#1)) ==> M3.__default.ValidState(st#1))
         && (Set#IsMember(sts#0, $Box(st#1)) ==> M3.__default.Extends(parent#0, st#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.Combine#canCall(sts#0)
     && M3.__default.ValidState#canCall(M3.__default.Combine($LS($LZ), sts#0))
     && (M3.__default.ValidState(M3.__default.Combine($LS($LZ), sts#0))
       ==> M3.__default.Combine#canCall(sts#0)
         && M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0)));
  free ensures {:id "id2792"} M3.__default.ValidState#canCall(M3.__default.Combine($LS($LZ), sts#0))
     && 
    M3.__default.ValidState(M3.__default.Combine($LS($LZ), sts#0))
     && (forall p#0: DatatypeType :: 
      { M3.__default.WellFounded(p#0) } 
        { Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LZ), sts#0)), $Box(p#0)) } 
      $Is(p#0, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LZ), sts#0)), $Box(p#0))
         ==> M3.__default.WellFounded(p#0));
  free ensures {:id "id2793"} M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0))
     && 
    M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), sts#0))
     && 
    Set#Subset(M3.__default.DomSt(parent#0), 
      M3.__default.DomSt(M3.__default.Combine($LS($LZ), sts#0)))
     && (forall p#1: DatatypeType :: 
      { M3.__default.GetSt(p#1, parent#0) } 
        { M3.__default.GetSt(p#1, M3.__default.Combine($LS($LZ), sts#0)) } 
        { Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#1)) } 
      $Is(p#1, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#1))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#1, M3.__default.Combine($LS($LZ), sts#0)), 
          M3.__default.GetSt(p#1, parent#0)))
     && (forall p#2: DatatypeType :: 
      { M3.__default.Oracle(p#2, parent#0) } 
        { M3.__default.GetSt(p#2, M3.__default.Combine($LS($LZ), sts#0)) } 
        { Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LZ), sts#0)), $Box(p#2)) } 
        { Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#2)) } 
      $Is(p#2, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#2))
           && Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LZ), sts#0)), $Box(p#2))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, M3.__default.Combine($LS($LZ), sts#0)), 
          M3.__default.Oracle(p#2, parent#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.Lemma_Combine (correctness)"} Impl$$M3.__default.Lemma__Combine(sts#0: Set
       where $Is(sts#0, TSet(Tclass.M3.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M3.State()), $Heap), 
    parent#0: DatatypeType
       where $Is(parent#0, Tclass.M3.State())
         && $IsAlloc(parent#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(parent#0))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id2794"} !Set#Equal(sts#0, Set#Empty(): Set);
  requires {:id "id2795"} (forall st#1: DatatypeType :: 
    { M3.__default.Extends(parent#0, st#1) } 
      { M3.__default.ValidState(st#1) } 
      { Set#IsMember(sts#0, $Box(st#1)) } 
    $Is(st#1, Tclass.M3.State())
       ==> (Set#IsMember(sts#0, $Box(st#1)) ==> M3.__default.ValidState(st#1))
         && (Set#IsMember(sts#0, $Box(st#1)) ==> M3.__default.Extends(parent#0, st#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.Combine#canCall(sts#0)
     && M3.__default.ValidState#canCall(M3.__default.Combine($LS($LZ), sts#0))
     && (M3.__default.ValidState(M3.__default.Combine($LS($LZ), sts#0))
       ==> M3.__default.Combine#canCall(sts#0)
         && M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0)));
  ensures {:id "id2796"} $_reverifyPost
     ==> 
    M3.__default.ValidState#canCall(M3.__default.Combine($LS($LZ), sts#0))
     ==> M3.__default.ValidState(M3.__default.Combine($LS($LZ), sts#0))
       || (forall p#3: DatatypeType :: 
        { M3.__default.WellFounded(p#3) } 
          { Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LS($LZ)), sts#0)), $Box(p#3)) } 
        $Is(p#3, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LS($LZ)), sts#0)), $Box(p#3))
           ==> M3.__default.WellFounded(p#3));
  ensures {:id "id2797"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0))
     ==> M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), sts#0))
       || Set#Subset(M3.__default.DomSt(parent#0), 
        M3.__default.DomSt(M3.__default.Combine($LS($LS($LZ)), sts#0)));
  ensures {:id "id2798"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0))
     ==> M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), sts#0))
       || (forall p#4: DatatypeType :: 
        { M3.__default.GetSt(p#4, parent#0) } 
          { M3.__default.GetSt(p#4, M3.__default.Combine($LS($LS($LZ)), sts#0)) } 
          { Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#4)) } 
        $Is(p#4, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#4))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#4, M3.__default.Combine($LS($LS($LZ)), sts#0)), 
            M3.__default.GetSt(p#4, parent#0)));
  ensures {:id "id2799"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0))
     ==> M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), sts#0))
       || (forall p#5: DatatypeType :: 
        { M3.__default.Oracle(p#5, parent#0) } 
          { M3.__default.GetSt(p#5, M3.__default.Combine($LS($LS($LZ)), sts#0)) } 
          { Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LS($LZ)), sts#0)), $Box(p#5)) } 
          { Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#5)) } 
        $Is(p#5, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#5))
             && Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LS($LZ)), sts#0)), $Box(p#5))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#5, M3.__default.Combine($LS($LS($LZ)), sts#0)), 
            M3.__default.Oracle(p#5, parent#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.Lemma_Combine (correctness)"} Impl$$M3.__default.Lemma__Combine(sts#0: Set, parent#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var st#0_0: DatatypeType;
  var ##sts#0_0: Set;
  var ##st#0_0: DatatypeType;
  var ##st'#0_0: DatatypeType;
  var ##sts#0_1: Set;
  var ##st#0_1: DatatypeType;
  var ##st'#0_1: DatatypeType;
  var ##sts#0_2: Set;

    // AddMethodImpl: Lemma_Combine, Impl$$M3.__default.Lemma__Combine
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M3.State(parent#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts0#0: Set :: 
      { M3.__default.Combine($LS($LZ), $ih#sts0#0) } 
      $Is($ih#sts0#0, TSet(Tclass.M3.State()))
           && 
          !Set#Equal($ih#sts0#0, Set#Empty(): Set)
           && (forall st#2: DatatypeType :: 
            { M3.__default.Extends(parent#0, st#2) } 
              { M3.__default.ValidState(st#2) } 
              { Set#IsMember($ih#sts0#0, $Box(st#2)) } 
            $Is(st#2, Tclass.M3.State())
               ==> (Set#IsMember($ih#sts0#0, $Box(st#2)) ==> M3.__default.ValidState(st#2))
                 && (Set#IsMember($ih#sts0#0, $Box(st#2)) ==> M3.__default.Extends(parent#0, st#2)))
           && 
          Set#Subset($ih#sts0#0, sts#0)
           && !Set#Subset(sts#0, $ih#sts0#0)
         ==> M3.__default.ValidState(M3.__default.Combine($LS($LZ), $ih#sts0#0))
           && M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), $ih#sts0#0)));
    $_reverifyPost := false;
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](50,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc st#0_0;
        assume $Is(st#0_0, Tclass.M3.State());
        if (Set#IsMember(sts#0, $Box(st#0_0)))
        {
            if (!Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0))))
            {
                ##sts#0_0 := sts#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#0_0, TSet(Tclass.M3.State()), $Heap);
                assume {:id "id2800"} {:subsumption 0} !Set#Equal(##sts#0_0, Set#Empty(): Set);
                assume M3.__default.Combine#canCall(sts#0);
                assume M3.State.StateCons_q(M3.__default.Combine($LS($LZ), sts#0));
                ##st#0_0 := st#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##st#0_0, Tclass.M3.State(), $Heap);
                ##sts#0_1 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#0_1, TSet(Tclass.M3.State()), $Heap);
                assume {:id "id2801"} {:subsumption 0} !Set#Equal(##sts#0_1, Set#Empty(): Set);
                assume M3.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0))));
                assume M3.State.StateCons_q(M3.__default.Combine($LS($LZ), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0)))));
                ##st'#0_0 := M3.__default.Combine($LS($LZ), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0))));
                // assume allocatedness for argument to function
                assume $IsAlloc(##st'#0_0, Tclass.M3.State(), $Heap);
                assume M3.__default.Union#canCall(st#0_0, 
                  M3.__default.Combine($LS($LZ), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0)))));
                assume M3.State.StateCons_q(M3.__default.Union(st#0_0, 
                    M3.__default.Combine($LS($LZ), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0))))));
            }
        }

        assume Set#IsMember(sts#0, $Box(st#0_0))
           ==> 
          !Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0)))
           ==> $IsA#M3.State(M3.__default.Combine($LS($LZ), sts#0))
             && $IsA#M3.State(M3.__default.Union(st#0_0, 
                M3.__default.Combine($LS($LZ), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0))))))
             && 
            M3.__default.Combine#canCall(sts#0)
             && 
            M3.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0))))
             && M3.__default.Union#canCall(st#0_0, 
              M3.__default.Combine($LS($LZ), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0)))));
        assume {:id "id2802"} Set#IsMember(sts#0, $Box(st#0_0))
           && (Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0)))
             || M3.State#Equal(M3.__default.Combine($LS($LZ), sts#0), 
              M3.__default.Union(st#0_0, 
                M3.__default.Combine($LS($LZ), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_0)))))));
        if (*)
        {
            ##st#0_1 := parent#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##st#0_1, Tclass.M3.State(), $Heap);
            ##sts#0_2 := sts#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#0_2, TSet(Tclass.M3.State()), $Heap);
            assume {:id "id2803"} {:subsumption 0} !Set#Equal(##sts#0_2, Set#Empty(): Set);
            assume M3.__default.Combine#canCall(sts#0);
            assume M3.State.StateCons_q(M3.__default.Combine($LS($LZ), sts#0));
            ##st'#0_1 := M3.__default.Combine($LS($LZ), sts#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##st'#0_1, Tclass.M3.State(), $Heap);
            assume M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0));
            assume M3.__default.Combine#canCall(sts#0)
               && M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0));
            assume {:id "id2804"} M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), sts#0));
            assume false;
        }

        assume {:id "id2805"} M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0))
           ==> M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), sts#0))
             || Set#Subset(M3.__default.DomSt(parent#0), 
              M3.__default.DomSt(M3.__default.Combine($LS($LS($LZ)), sts#0)));
        assume {:id "id2806"} M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0))
           ==> M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), sts#0))
             || (forall p#0_0: DatatypeType :: 
              { M3.__default.GetSt(p#0_0, parent#0) } 
                { M3.__default.GetSt(p#0_0, M3.__default.Combine($LS($LS($LZ)), sts#0)) } 
                { Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#0_0)) } 
              $Is(p#0_0, Tclass.M3.Path())
                 ==> 
                Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#0_0))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#0_0, M3.__default.Combine($LS($LS($LZ)), sts#0)), 
                  M3.__default.GetSt(p#0_0, parent#0)));
        assume {:id "id2807"} M3.__default.Extends#canCall(parent#0, M3.__default.Combine($LS($LZ), sts#0))
           ==> M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), sts#0))
             || (forall p#0_1: DatatypeType :: 
              { M3.__default.Oracle(p#0_1, parent#0) } 
                { M3.__default.GetSt(p#0_1, M3.__default.Combine($LS($LS($LZ)), sts#0)) } 
                { Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LS($LZ)), sts#0)), $Box(p#0_1)) } 
                { Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#0_1)) } 
              $Is(p#0_1, Tclass.M3.Path())
                 ==> 
                !Set#IsMember(M3.__default.DomSt(parent#0), $Box(p#0_1))
                   && Set#IsMember(M3.__default.DomSt(M3.__default.Combine($LS($LS($LZ)), sts#0)), $Box(p#0_1))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#0_1, M3.__default.Combine($LS($LS($LZ)), sts#0)), 
                  M3.__default.Oracle(p#0_1, parent#0)));
        assume false;
    }
    else
    {
        assume (forall st#0_1: DatatypeType :: 
          { Set#UnionOne(Set#Empty(): Set, $Box(st#0_1)) } 
            { Set#IsMember(sts#0, $Box(st#0_1)) } 
          $Is(st#0_1, Tclass.M3.State())
               && 
              Set#IsMember(sts#0, $Box(st#0_1))
               && (Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_1)))
                 || M3.State#Equal(M3.__default.Combine($LS($LZ), sts#0), 
                  M3.__default.Union(st#0_1, 
                    M3.__default.Combine($LS($LZ), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, $Box(st#0_1)))))))
             ==> M3.__default.Extends(parent#0, M3.__default.Combine($LS($LZ), sts#0)));
    }
}



// function declaration for M3._default.Pre
function M3.__default.Pre(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType) : bool
uses {
// definition axiom for M3.__default.Pre (revealed)
axiom {:id "id2808"} 6 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    { M3.__default.Pre(cmd#0, deps#0, exps#0, st#0) } 
    M3.__default.Pre#canCall(cmd#0, deps#0, exps#0, st#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> (forall e#0: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(exps#0, $Box(e#0))
             ==> M3.__default.Loc#canCall(cmd#0, deps#0, e#0)
               && M3.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#0)))
                 ==> $IsA#M3.Artifact(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#0), st#0))
                   && $IsA#M3.Artifact(M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#0), st#0))
                   && 
                  M3.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && M3.__default.GetSt#canCall(M3.__default.Loc(cmd#0, deps#0, e#0), st#0)
                   && 
                  M3.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && M3.__default.Oracle#canCall(M3.__default.Loc(cmd#0, deps#0, e#0), st#0)))
         && M3.__default.Pre(cmd#0, deps#0, exps#0, st#0)
           == (forall e#0: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(exps#0, $Box(e#0))
               ==> 
              Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#0)))
               ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#0), st#0), 
                M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#0), st#0))));
// definition axiom for M3.__default.Pre for decreasing-related literals (revealed)
axiom {:id "id2809"} 6 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0) } 
    M3.__default.Pre#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> (forall e#1: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#1))
             ==> M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
               && M3.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))
                 ==> $IsA#M3.Artifact(M3.__default.GetSt(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0))
                   && $IsA#M3.Artifact(M3.__default.Oracle(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0))
                   && 
                  M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M3.__default.GetSt#canCall(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                   && 
                  M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M3.__default.Oracle#canCall(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)))
         && M3.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
           == (forall e#1: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(exps#0), $Box(e#1))
               ==> 
              Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))
               ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0), 
                M3.__default.Oracle(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0))));
// definition axiom for M3.__default.Pre for all literals (revealed)
axiom {:id "id2810"} 6 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0)) } 
    M3.__default.Pre#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> (forall e#2: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#2))
             ==> M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
               && M3.__default.DomSt#canCall(Lit(st#0))
               && (Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), 
                  $Box(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2)))
                 ==> $IsA#M3.Artifact(M3.__default.GetSt(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0)))
                   && $IsA#M3.Artifact(M3.__default.Oracle(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0)))
                   && 
                  M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M3.__default.GetSt#canCall(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                   && 
                  M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M3.__default.Oracle#canCall(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))))
         && M3.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
           == (forall e#2: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
            $Is(e#2, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(exps#0), $Box(e#2))
               ==> 
              Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), 
                $Box(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2)))
               ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0)), 
                M3.__default.Oracle(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0)))));
}

function M3.__default.Pre#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType) : bool;

function M3.__default.Pre#requires(Seq, Set, Set, DatatypeType) : bool;

// #requires axiom for M3.__default.Pre
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
  { M3.__default.Pre#requires(cmd#0, deps#0, exps#0, st#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M3.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.Pre#requires(cmd#0, deps#0, exps#0, st#0) == true);

procedure {:verboseName "M3.Pre (well-formedness)"} CheckWellformed$$M3.__default.Pre(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M3.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.OneToOne
function M3.__default.OneToOne(cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set) : bool
uses {
// definition axiom for M3.__default.OneToOne (revealed)
axiom {:id "id2812"} 2 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set :: 
    { M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0) } 
    M3.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(paths#0, TSet(Tclass.M3.Path())))
       ==> (forall e#0: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(exps#0, $Box(e#0))
             ==> M3.__default.Loc#canCall(cmd#0, deps#0, e#0))
         && M3.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0)
           == (forall e#0: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(exps#0, $Box(e#0))
               ==> Set#IsMember(paths#0, $Box(M3.__default.Loc(cmd#0, deps#0, e#0)))));
// definition axiom for M3.__default.OneToOne for all literals (revealed)
axiom {:id "id2813"} 2 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set :: 
    {:weight 3} { M3.__default.OneToOne(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(paths#0)) } 
    M3.__default.OneToOne#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(paths#0))
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(paths#0, TSet(Tclass.M3.Path())))
       ==> (forall e#1: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#1))
             ==> M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1))
         && M3.__default.OneToOne(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(paths#0))
           == (forall e#1: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(exps#0), $Box(e#1))
               ==> Set#IsMember(Lit(paths#0), $Box(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))));
}

function M3.__default.OneToOne#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set) : bool;

function M3.__default.OneToOne#requires(Seq, Set, Set, Set) : bool;

// #requires axiom for M3.__default.OneToOne
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set :: 
  { M3.__default.OneToOne#requires(cmd#0, deps#0, exps#0, paths#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M3.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $Is(paths#0, TSet(Tclass.M3.Path()))
     ==> M3.__default.OneToOne#requires(cmd#0, deps#0, exps#0, paths#0) == true);

procedure {:verboseName "M3.OneToOne (well-formedness)"} CheckWellformed$$M3.__default.OneToOne(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M3.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    paths#0: Set where $Is(paths#0, TSet(Tclass.M3.Path())));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.Post
function M3.__default.Post(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType) : bool
uses {
// definition axiom for M3.__default.Post (revealed)
axiom {:id "id2815"} 6 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    { M3.__default.Post(cmd#0, deps#0, exps#0, st#0) } 
    M3.__default.Post#canCall(cmd#0, deps#0, exps#0, st#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> (forall e#0: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> (Set#IsMember(exps#0, $Box(e#0))
                 ==> M3.__default.Loc#canCall(cmd#0, deps#0, e#0) && M3.__default.DomSt#canCall(st#0))
               && (
                (Set#IsMember(exps#0, $Box(e#0))
                 ==> Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#0))))
                 ==> 
                Set#IsMember(exps#0, $Box(e#0))
                 ==> $IsA#M3.Artifact(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#0), st#0))
                   && $IsA#M3.Artifact(M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#0), st#0))
                   && 
                  M3.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && M3.__default.GetSt#canCall(M3.__default.Loc(cmd#0, deps#0, e#0), st#0)
                   && 
                  M3.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && M3.__default.Oracle#canCall(M3.__default.Loc(cmd#0, deps#0, e#0), st#0)))
         && M3.__default.Post(cmd#0, deps#0, exps#0, st#0)
           == (forall e#0: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> (Set#IsMember(exps#0, $Box(e#0))
                   ==> Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(cmd#0, deps#0, e#0))))
                 && (Set#IsMember(exps#0, $Box(e#0))
                   ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(cmd#0, deps#0, e#0), st#0), 
                    M3.__default.Oracle(M3.__default.Loc(cmd#0, deps#0, e#0), st#0)))));
// definition axiom for M3.__default.Post for decreasing-related literals (revealed)
axiom {:id "id2816"} 6 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.Post(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0) } 
    M3.__default.Post#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> (forall e#1: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> (Set#IsMember(Lit(exps#0), $Box(e#1))
                 ==> M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M3.__default.DomSt#canCall(st#0))
               && (
                (Set#IsMember(Lit(exps#0), $Box(e#1))
                 ==> Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))))
                 ==> 
                Set#IsMember(Lit(exps#0), $Box(e#1))
                 ==> $IsA#M3.Artifact(M3.__default.GetSt(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0))
                   && $IsA#M3.Artifact(M3.__default.Oracle(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0))
                   && 
                  M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M3.__default.GetSt#canCall(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                   && 
                  M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M3.__default.Oracle#canCall(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)))
         && M3.__default.Post(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
           == (forall e#1: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> (Set#IsMember(Lit(exps#0), $Box(e#1))
                   ==> Set#IsMember(M3.__default.DomSt(st#0), $Box(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))))
                 && (Set#IsMember(Lit(exps#0), $Box(e#1))
                   ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0), 
                    M3.__default.Oracle(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)))));
// definition axiom for M3.__default.Post for all literals (revealed)
axiom {:id "id2817"} 6 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.Post(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0)) } 
    M3.__default.Post#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M3.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(st#0, Tclass.M3.State()))
       ==> (forall e#2: Seq :: 
          { M3.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> (Set#IsMember(Lit(exps#0), $Box(e#2))
                 ==> M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M3.__default.DomSt#canCall(Lit(st#0)))
               && (
                (Set#IsMember(Lit(exps#0), $Box(e#2))
                 ==> Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), 
                  $Box(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
                 ==> 
                Set#IsMember(Lit(exps#0), $Box(e#2))
                 ==> $IsA#M3.Artifact(M3.__default.GetSt(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0)))
                   && $IsA#M3.Artifact(M3.__default.Oracle(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0)))
                   && 
                  M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M3.__default.GetSt#canCall(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                   && 
                  M3.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M3.__default.Oracle#canCall(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))))
         && M3.__default.Post(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
           == (forall e#2: Seq :: 
            { M3.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
            $Is(e#2, TSeq(TChar))
               ==> (Set#IsMember(Lit(exps#0), $Box(e#2))
                   ==> Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), 
                    $Box(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
                 && (Set#IsMember(Lit(exps#0), $Box(e#2))
                   ==> M3.Artifact#Equal(M3.__default.GetSt(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0)), 
                    M3.__default.Oracle(M3.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))))));
}

function M3.__default.Post#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType) : bool;

function M3.__default.Post#requires(Seq, Set, Set, DatatypeType) : bool;

// #requires axiom for M3.__default.Post
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: DatatypeType :: 
  { M3.__default.Post#requires(cmd#0, deps#0, exps#0, st#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M3.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.Post#requires(cmd#0, deps#0, exps#0, st#0) == true);

procedure {:verboseName "M3.Post (well-formedness)"} CheckWellformed$$M3.__default.Post(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M3.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.Extends
function M3.__default.Extends(st#0: DatatypeType, st'#0: DatatypeType) : bool
uses {
// definition axiom for M3.__default.Extends (revealed)
axiom {:id "id2819"} 6 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType, st'#0: DatatypeType :: 
    { M3.__default.Extends(st#0, st'#0) } 
    M3.__default.Extends#canCall(st#0, st'#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(st#0, Tclass.M3.State())
           && $Is(st'#0, Tclass.M3.State()))
       ==> M3.__default.DomSt#canCall(st#0)
         && M3.__default.DomSt#canCall(st'#0)
         && (Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0))
           ==> (forall p#0: DatatypeType :: 
              { M3.__default.GetSt(p#0, st#0) } 
                { M3.__default.GetSt(p#0, st'#0) } 
                { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
              $Is(p#0, Tclass.M3.Path())
                 ==> M3.__default.DomSt#canCall(st#0)
                   && (Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
                     ==> $IsA#M3.Artifact(M3.__default.GetSt(p#0, st'#0))
                       && $IsA#M3.Artifact(M3.__default.GetSt(p#0, st#0))
                       && 
                      M3.__default.GetSt#canCall(p#0, st'#0)
                       && M3.__default.GetSt#canCall(p#0, st#0)))
             && ((forall p#0: DatatypeType :: 
                { M3.__default.GetSt(p#0, st#0) } 
                  { M3.__default.GetSt(p#0, st'#0) } 
                  { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
                $Is(p#0, Tclass.M3.Path())
                   ==> 
                  Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
                   ==> M3.Artifact#Equal(M3.__default.GetSt(p#0, st'#0), M3.__default.GetSt(p#0, st#0)))
               ==> (forall p#1: DatatypeType :: 
                { M3.__default.Oracle(p#1, st#0) } 
                  { M3.__default.GetSt(p#1, st'#0) } 
                  { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1)) } 
                  { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) } 
                $Is(p#1, Tclass.M3.Path())
                   ==> M3.__default.DomSt#canCall(st#0)
                     && (!Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1))
                       ==> M3.__default.DomSt#canCall(st'#0)
                         && (Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1))
                           ==> $IsA#M3.Artifact(M3.__default.GetSt(p#1, st'#0))
                             && $IsA#M3.Artifact(M3.__default.Oracle(p#1, st#0))
                             && 
                            M3.__default.GetSt#canCall(p#1, st'#0)
                             && M3.__default.Oracle#canCall(p#1, st#0))))))
         && M3.__default.Extends(st#0, st'#0)
           == (
            Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0))
             && (forall p#0: DatatypeType :: 
              { M3.__default.GetSt(p#0, st#0) } 
                { M3.__default.GetSt(p#0, st'#0) } 
                { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
              $Is(p#0, Tclass.M3.Path())
                 ==> 
                Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#0, st'#0), M3.__default.GetSt(p#0, st#0)))
             && (forall p#1: DatatypeType :: 
              { M3.__default.Oracle(p#1, st#0) } 
                { M3.__default.GetSt(p#1, st'#0) } 
                { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1)) } 
                { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1)) } 
              $Is(p#1, Tclass.M3.Path())
                 ==> 
                !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#1))
                   && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#1, st'#0), M3.__default.Oracle(p#1, st#0)))));
// definition axiom for M3.__default.Extends for all literals (revealed)
axiom {:id "id2820"} 6 <= $FunctionContextHeight
   ==> (forall st#0: DatatypeType, st'#0: DatatypeType :: 
    {:weight 3} { M3.__default.Extends(Lit(st#0), Lit(st'#0)) } 
    M3.__default.Extends#canCall(Lit(st#0), Lit(st'#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(st#0, Tclass.M3.State())
           && $Is(st'#0, Tclass.M3.State()))
       ==> M3.__default.DomSt#canCall(Lit(st#0))
         && M3.__default.DomSt#canCall(Lit(st'#0))
         && (Set#Subset(M3.__default.DomSt(Lit(st#0)), M3.__default.DomSt(Lit(st'#0)))
           ==> (forall p#2: DatatypeType :: 
              { M3.__default.GetSt(p#2, st#0) } 
                { M3.__default.GetSt(p#2, st'#0) } 
                { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
              $Is(p#2, Tclass.M3.Path())
                 ==> M3.__default.DomSt#canCall(Lit(st#0))
                   && (Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#2))
                     ==> $IsA#M3.Artifact(M3.__default.GetSt(p#2, Lit(st'#0)))
                       && $IsA#M3.Artifact(M3.__default.GetSt(p#2, Lit(st#0)))
                       && 
                      M3.__default.GetSt#canCall(p#2, Lit(st'#0))
                       && M3.__default.GetSt#canCall(p#2, Lit(st#0))))
             && ((forall p#2: DatatypeType :: 
                { M3.__default.GetSt(p#2, st#0) } 
                  { M3.__default.GetSt(p#2, st'#0) } 
                  { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
                $Is(p#2, Tclass.M3.Path())
                   ==> 
                  Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#2))
                   ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, Lit(st'#0)), M3.__default.GetSt(p#2, Lit(st#0))))
               ==> (forall p#3: DatatypeType :: 
                { M3.__default.Oracle(p#3, st#0) } 
                  { M3.__default.GetSt(p#3, st'#0) } 
                  { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3)) } 
                  { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) } 
                $Is(p#3, Tclass.M3.Path())
                   ==> M3.__default.DomSt#canCall(Lit(st#0))
                     && (!Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#3))
                       ==> M3.__default.DomSt#canCall(Lit(st'#0))
                         && (Set#IsMember(Lit(M3.__default.DomSt(Lit(st'#0))), $Box(p#3))
                           ==> $IsA#M3.Artifact(M3.__default.GetSt(p#3, Lit(st'#0)))
                             && $IsA#M3.Artifact(M3.__default.Oracle(p#3, Lit(st#0)))
                             && 
                            M3.__default.GetSt#canCall(p#3, Lit(st'#0))
                             && M3.__default.Oracle#canCall(p#3, Lit(st#0)))))))
         && M3.__default.Extends(Lit(st#0), Lit(st'#0))
           == (
            Set#Subset(M3.__default.DomSt(Lit(st#0)), M3.__default.DomSt(Lit(st'#0)))
             && (forall p#2: DatatypeType :: 
              { M3.__default.GetSt(p#2, st#0) } 
                { M3.__default.GetSt(p#2, st'#0) } 
                { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
              $Is(p#2, Tclass.M3.Path())
                 ==> 
                Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#2))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, Lit(st'#0)), M3.__default.GetSt(p#2, Lit(st#0))))
             && (forall p#3: DatatypeType :: 
              { M3.__default.Oracle(p#3, st#0) } 
                { M3.__default.GetSt(p#3, st'#0) } 
                { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3)) } 
                { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) } 
              $Is(p#3, Tclass.M3.Path())
                 ==> 
                !Set#IsMember(Lit(M3.__default.DomSt(Lit(st#0))), $Box(p#3))
                   && Set#IsMember(Lit(M3.__default.DomSt(Lit(st'#0))), $Box(p#3))
                 ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, Lit(st'#0)), M3.__default.Oracle(p#3, Lit(st#0))))));
}

function M3.__default.Extends#canCall(st#0: DatatypeType, st'#0: DatatypeType) : bool;

function M3.__default.Extends#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.Extends
axiom (forall st#0: DatatypeType, st'#0: DatatypeType :: 
  { M3.__default.Extends#requires(st#0, st'#0) } 
  $Is(st#0, Tclass.M3.State()) && $Is(st'#0, Tclass.M3.State())
     ==> M3.__default.Extends#requires(st#0, st'#0) == true);

procedure {:verboseName "M3.Extends (well-formedness)"} CheckWellformed$$M3.__default.Extends(st#0: DatatypeType where $Is(st#0, Tclass.M3.State()), 
    st'#0: DatatypeType where $Is(st'#0, Tclass.M3.State()));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.Lemma_ExtendsTransitive (well-formedness)"} CheckWellFormed$$M3.__default.Lemma__ExtendsTransitive(st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0), 
    st2#0: DatatypeType
       where $Is(st2#0, Tclass.M3.State())
         && $IsAlloc(st2#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st2#0));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.Lemma_ExtendsTransitive (call)"} Call$$M3.__default.Lemma__ExtendsTransitive(st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0), 
    st2#0: DatatypeType
       where $Is(st2#0, Tclass.M3.State())
         && $IsAlloc(st2#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st2#0));
  // user-defined preconditions
  requires {:id "id2825"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0));
  requires {:id "id2826"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#0: DatatypeType :: 
        { M3.__default.GetSt(p#0, st0#0) } 
          { M3.__default.GetSt(p#0, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#0)) } 
        $Is(p#0, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#0))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#0, st1#0), M3.__default.GetSt(p#0, st0#0)));
  requires {:id "id2827"} M3.__default.Extends#canCall(st0#0, st1#0)
     ==> M3.__default.Extends(st0#0, st1#0)
       || (forall p#1: DatatypeType :: 
        { M3.__default.Oracle(p#1, st0#0) } 
          { M3.__default.GetSt(p#1, st1#0) } 
          { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#1)) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1)) } 
        $Is(p#1, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#1))
             && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#1))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#1, st1#0), M3.__default.Oracle(p#1, st0#0)));
  requires {:id "id2828"} M3.__default.Extends#canCall(st1#0, st2#0)
     ==> M3.__default.Extends(st1#0, st2#0)
       || Set#Subset(M3.__default.DomSt(st1#0), M3.__default.DomSt(st2#0));
  requires {:id "id2829"} M3.__default.Extends#canCall(st1#0, st2#0)
     ==> M3.__default.Extends(st1#0, st2#0)
       || (forall p#2: DatatypeType :: 
        { M3.__default.GetSt(p#2, st1#0) } 
          { M3.__default.GetSt(p#2, st2#0) } 
          { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#2)) } 
        $Is(p#2, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#2))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st2#0), M3.__default.GetSt(p#2, st1#0)));
  requires {:id "id2830"} M3.__default.Extends#canCall(st1#0, st2#0)
     ==> M3.__default.Extends(st1#0, st2#0)
       || (forall p#3: DatatypeType :: 
        { M3.__default.Oracle(p#3, st1#0) } 
          { M3.__default.GetSt(p#3, st2#0) } 
          { Set#IsMember(M3.__default.DomSt(st2#0), $Box(p#3)) } 
          { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#3)) } 
        $Is(p#3, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#3))
             && Set#IsMember(M3.__default.DomSt(st2#0), $Box(p#3))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st2#0), M3.__default.Oracle(p#3, st1#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.Extends#canCall(st0#0, st2#0);
  free ensures {:id "id2831"} M3.__default.Extends#canCall(st0#0, st2#0)
     && 
    M3.__default.Extends(st0#0, st2#0)
     && 
    Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st2#0))
     && (forall p#4: DatatypeType :: 
      { M3.__default.GetSt(p#4, st0#0) } 
        { M3.__default.GetSt(p#4, st2#0) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#4)) } 
      $Is(p#4, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#4))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#4, st2#0), M3.__default.GetSt(p#4, st0#0)))
     && (forall p#5: DatatypeType :: 
      { M3.__default.Oracle(p#5, st0#0) } 
        { M3.__default.GetSt(p#5, st2#0) } 
        { Set#IsMember(M3.__default.DomSt(st2#0), $Box(p#5)) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#5)) } 
      $Is(p#5, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#5))
           && Set#IsMember(M3.__default.DomSt(st2#0), $Box(p#5))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#5, st2#0), M3.__default.Oracle(p#5, st0#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.Lemma_ExtendsTransitive (correctness)"} Impl$$M3.__default.Lemma__ExtendsTransitive(st0#0: DatatypeType
       where $Is(st0#0, Tclass.M3.State())
         && $IsAlloc(st0#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st0#0), 
    st1#0: DatatypeType
       where $Is(st1#0, Tclass.M3.State())
         && $IsAlloc(st1#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st1#0), 
    st2#0: DatatypeType
       where $Is(st2#0, Tclass.M3.State())
         && $IsAlloc(st2#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st2#0))
   returns ($_reverifyPost: bool);
  free requires 9 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2832"} M3.__default.Extends#canCall(st0#0, st1#0)
     && 
    M3.__default.Extends(st0#0, st1#0)
     && 
    Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st1#0))
     && (forall p#6: DatatypeType :: 
      { M3.__default.GetSt(p#6, st0#0) } 
        { M3.__default.GetSt(p#6, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#6)) } 
      $Is(p#6, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#6))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#6, st1#0), M3.__default.GetSt(p#6, st0#0)))
     && (forall p#7: DatatypeType :: 
      { M3.__default.Oracle(p#7, st0#0) } 
        { M3.__default.GetSt(p#7, st1#0) } 
        { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#7)) } 
        { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#7)) } 
      $Is(p#7, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#7))
           && Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#7))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#7, st1#0), M3.__default.Oracle(p#7, st0#0)));
  free requires {:id "id2833"} M3.__default.Extends#canCall(st1#0, st2#0)
     && 
    M3.__default.Extends(st1#0, st2#0)
     && 
    Set#Subset(M3.__default.DomSt(st1#0), M3.__default.DomSt(st2#0))
     && (forall p#8: DatatypeType :: 
      { M3.__default.GetSt(p#8, st1#0) } 
        { M3.__default.GetSt(p#8, st2#0) } 
        { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#8)) } 
      $Is(p#8, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#8))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#8, st2#0), M3.__default.GetSt(p#8, st1#0)))
     && (forall p#9: DatatypeType :: 
      { M3.__default.Oracle(p#9, st1#0) } 
        { M3.__default.GetSt(p#9, st2#0) } 
        { Set#IsMember(M3.__default.DomSt(st2#0), $Box(p#9)) } 
        { Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#9)) } 
      $Is(p#9, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st1#0), $Box(p#9))
           && Set#IsMember(M3.__default.DomSt(st2#0), $Box(p#9))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#9, st2#0), M3.__default.Oracle(p#9, st1#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.Extends#canCall(st0#0, st2#0);
  ensures {:id "id2834"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st0#0, st2#0)
     ==> M3.__default.Extends(st0#0, st2#0)
       || Set#Subset(M3.__default.DomSt(st0#0), M3.__default.DomSt(st2#0));
  ensures {:id "id2835"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st0#0, st2#0)
     ==> M3.__default.Extends(st0#0, st2#0)
       || (forall p#10: DatatypeType :: 
        { M3.__default.GetSt(p#10, st0#0) } 
          { M3.__default.GetSt(p#10, st2#0) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#10)) } 
        $Is(p#10, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#10))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#10, st2#0), M3.__default.GetSt(p#10, st0#0)));
  ensures {:id "id2836"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st0#0, st2#0)
     ==> M3.__default.Extends(st0#0, st2#0)
       || (forall p#11: DatatypeType :: 
        { M3.__default.Oracle(p#11, st0#0) } 
          { M3.__default.GetSt(p#11, st2#0) } 
          { Set#IsMember(M3.__default.DomSt(st2#0), $Box(p#11)) } 
          { Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#11)) } 
        $Is(p#11, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st0#0), $Box(p#11))
             && Set#IsMember(M3.__default.DomSt(st2#0), $Box(p#11))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#11, st2#0), M3.__default.Oracle(p#11, st0#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.Lemma_ExtendsTransitive (correctness)"} Impl$$M3.__default.Lemma__ExtendsTransitive(st0#0: DatatypeType, st1#0: DatatypeType, st2#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var p#0_0: DatatypeType;
  var p##0_0: DatatypeType;
  var st0##0_0: DatatypeType;
  var st1##0_0: DatatypeType;
  var $initHeapForallStmt#0_0: Heap;

    // AddMethodImpl: Lemma_ExtendsTransitive, Impl$$M3.__default.Lemma__ExtendsTransitive
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- forall statement (call) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](123,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc p#0_0;
        assume $Is(p#0_0, Tclass.M3.Path());
        assume true;
        assume true;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](123,30)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        p##0_0 := p#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st0##0_0 := st0#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st1##0_0 := st1#0;
        call {:id "id2837"} Call$$M3.__default.OracleProperty(p##0_0, st0##0_0, st1##0_0);
        // TrCallStmt: After ProcessCallStmt
        assume false;
    }
    else
    {
        $initHeapForallStmt#0_0 := $Heap;
        havoc $Heap;
        assume $initHeapForallStmt#0_0 == $Heap;
        assume (forall p#0_1: DatatypeType :: 
          { M3.__default.Oracle(p#0_1, st1#0) } { M3.__default.Oracle(p#0_1, st0#0) } 
          $Is(p#0_1, Tclass.M3.Path()) && Lit(true)
             ==> M3.Artifact#Equal(M3.__default.Oracle(p#0_1, st0#0), M3.__default.Oracle(p#0_1, st1#0)));
    }
}



// function declaration for M3._default.Value
function M3.__default.Value(expr#0: DatatypeType) : bool
uses {
// definition axiom for M3.__default.Value (revealed)
axiom {:id "id2838"} 2 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType :: 
    { M3.__default.Value(expr#0) } 
    M3.__default.Value#canCall(expr#0)
         || (2 < $FunctionContextHeight && $Is(expr#0, Tclass.M3.Expression()))
       ==> M3.__default.Value(expr#0) == M3.Expression.exprLiteral_q(expr#0));
// definition axiom for M3.__default.Value for all literals (revealed)
axiom {:id "id2839"} 2 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType :: 
    {:weight 3} { M3.__default.Value(Lit(expr#0)) } 
    M3.__default.Value#canCall(Lit(expr#0))
         || (2 < $FunctionContextHeight && $Is(expr#0, Tclass.M3.Expression()))
       ==> M3.__default.Value(Lit(expr#0)) == Lit(M3.Expression.exprLiteral_q(Lit(expr#0))));
}

function M3.__default.Value#canCall(expr#0: DatatypeType) : bool;

function M3.__default.Value#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.Value
axiom (forall expr#0: DatatypeType :: 
  { M3.__default.Value#requires(expr#0) } 
  $Is(expr#0, Tclass.M3.Expression())
     ==> M3.__default.Value#requires(expr#0) == true);

procedure {:verboseName "M3.Value (well-formedness)"} CheckWellformed$$M3.__default.Value(expr#0: DatatypeType where $Is(expr#0, Tclass.M3.Expression()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.build
function M3.__default.build(prog#0: DatatypeType, st#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for M3.__default.build
axiom 10 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.build(prog#0, st#0) } 
    M3.__default.build#canCall(prog#0, st#0)
         || (10 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass.M3.Program())
           && $Is(st#0, Tclass.M3.State())
           && M3.__default.Legal(M3.Program.stmts(prog#0)))
       ==> $Is(M3.__default.build(prog#0, st#0), 
        Tclass.M3.Tuple(Tclass.M3.Expression(), Tclass.M3.State())));
// definition axiom for M3.__default.build (revealed)
axiom {:id "id2841"} 10 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, st#0: DatatypeType :: 
    { M3.__default.build(prog#0, st#0) } 
    M3.__default.build#canCall(prog#0, st#0)
         || (10 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass.M3.Program())
           && $Is(st#0, Tclass.M3.State())
           && M3.__default.Legal(M3.Program.stmts(prog#0)))
       ==> M3.Program.Program_q(prog#0)
         && M3.__default.EmptyEnv#canCall()
         && M3.__default.do#canCall(M3.Program.stmts(prog#0), st#0, Lit(M3.__default.EmptyEnv()))
         && M3.__default.build(prog#0, st#0)
           == M3.__default.do($LS($LZ), M3.Program.stmts(prog#0), st#0, Lit(M3.__default.EmptyEnv())));
// definition axiom for M3.__default.build for decreasing-related literals (revealed)
axiom {:id "id2842"} 10 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.build(Lit(prog#0), st#0) } 
    M3.__default.build#canCall(Lit(prog#0), st#0)
         || (10 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass.M3.Program())
           && $Is(st#0, Tclass.M3.State())
           && Lit(M3.__default.Legal(Lit(M3.Program.stmts(Lit(prog#0))))))
       ==> M3.Program.Program_q(Lit(prog#0))
         && M3.__default.EmptyEnv#canCall()
         && M3.__default.do#canCall(Lit(M3.Program.stmts(Lit(prog#0))), st#0, Lit(M3.__default.EmptyEnv()))
         && M3.__default.build(Lit(prog#0), st#0)
           == M3.__default.do($LS($LZ), Lit(M3.Program.stmts(Lit(prog#0))), st#0, Lit(M3.__default.EmptyEnv())));
// definition axiom for M3.__default.build for all literals (revealed)
axiom {:id "id2843"} 10 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.build(Lit(prog#0), Lit(st#0)) } 
    M3.__default.build#canCall(Lit(prog#0), Lit(st#0))
         || (10 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass.M3.Program())
           && $Is(st#0, Tclass.M3.State())
           && Lit(M3.__default.Legal(Lit(M3.Program.stmts(Lit(prog#0))))))
       ==> M3.Program.Program_q(Lit(prog#0))
         && M3.__default.EmptyEnv#canCall()
         && M3.__default.do#canCall(Lit(M3.Program.stmts(Lit(prog#0))), Lit(st#0), Lit(M3.__default.EmptyEnv()))
         && M3.__default.build(Lit(prog#0), Lit(st#0))
           == Lit(M3.__default.do($LS($LZ), 
              Lit(M3.Program.stmts(Lit(prog#0))), 
              Lit(st#0), 
              Lit(M3.__default.EmptyEnv()))));
}

function M3.__default.build#canCall(prog#0: DatatypeType, st#0: DatatypeType) : bool;

function M3.__default.build#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.build
axiom (forall prog#0: DatatypeType, st#0: DatatypeType :: 
  { M3.__default.build#requires(prog#0, st#0) } 
  $Is(prog#0, Tclass.M3.Program()) && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.build#requires(prog#0, st#0)
       == M3.__default.Legal(M3.Program.stmts(prog#0)));

procedure {:verboseName "M3.build (well-formedness)"} CheckWellformed$$M3.__default.build(prog#0: DatatypeType where $Is(prog#0, Tclass.M3.Program()), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



function Tclass.M3.Statement() : Ty
uses {
// Tclass.M3.Statement Tag
axiom Tag(Tclass.M3.Statement()) == Tagclass.M3.Statement
   && TagFamily(Tclass.M3.Statement()) == tytagFamily$Statement;
}

const unique Tagclass.M3.Statement: TyTag;

// Box/unbox axiom for Tclass.M3.Statement
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Statement()) } 
  $IsBox(bx, Tclass.M3.Statement())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Statement()));

// function declaration for M3._default.do
function M3.__default.do($ly: LayerType, stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for M3.__default.do
axiom 9 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType :: 
    { M3.__default.do($ly, stmts#0, st#0, env#0) } 
    M3.__default.do#canCall(stmts#0, st#0, env#0)
         || (9 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass.M3.Statement()))
           && $Is(st#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.Legal(stmts#0)
           && M3.__default.ValidEnv(env#0))
       ==> $Is(M3.__default.do($ly, stmts#0, st#0, env#0), 
        Tclass.M3.Tuple(Tclass.M3.Expression(), Tclass.M3.State())));
// definition axiom for M3.__default.do (revealed)
axiom {:id "id2846"} 9 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType :: 
    { M3.__default.do($LS($ly), stmts#0, st#0, env#0) } 
    M3.__default.do#canCall(stmts#0, st#0, env#0)
         || (9 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass.M3.Statement()))
           && $Is(st#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.Legal(stmts#0)
           && M3.__default.ValidEnv(env#0))
       ==> (var stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType; 
          (M3.Statement.stmtVariable_q(stmt#0)
               ==> M3.__default.eval#canCall(M3.Statement.expr(stmt#0), st#0, env#0)
                 && (var expr'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#0), st#0, env#0))): DatatypeType, 
                    $Unbox(M3.Tuple.snd(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#0), st#0, env#0))): DatatypeType; 
                  M3.__default.Value#canCall(expr'#0)
                     && (M3.__default.Value(expr'#0)
                       ==> M3.__default.SetEnv#canCall(M3.Statement.id(stmt#0), expr'#0, env#0)
                         && (var env'#0 := M3.__default.SetEnv(M3.Statement.id(stmt#0), expr'#0, env#0); 
                          M3.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)))
                             && (M3.__default.Legal(Seq#Drop(stmts#0, LitInt(1)))
                               ==> M3.__default.do#canCall(Seq#Drop(stmts#0, LitInt(1)), st'#0, env'#0))))))
             && (!M3.Statement.stmtVariable_q(stmt#0)
               ==> M3.__default.eval#canCall(M3.Statement.ret(stmt#0), st#0, env#0)))
         && M3.__default.do($LS($ly), stmts#0, st#0, env#0)
           == (var stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType; 
            (if M3.Statement.stmtVariable_q(stmt#0)
               then (var expr'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#0), st#0, env#0))): DatatypeType, 
                  $Unbox(M3.Tuple.snd(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#0), st#0, env#0))): DatatypeType; 
                (if M3.__default.Value(expr'#0)
                   then (var env'#0 := M3.__default.SetEnv(M3.Statement.id(stmt#0), expr'#0, env#0); 
                    (if M3.__default.Legal(Seq#Drop(stmts#0, LitInt(1)))
                       then M3.__default.do($ly, Seq#Drop(stmts#0, LitInt(1)), st'#0, env'#0)
                       else #M3.Tuple.Pair($Box(expr'#0), $Box(st'#0))))
                   else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0))))
               else M3.__default.eval($LS($LZ), M3.Statement.ret(stmt#0), st#0, env#0))));
// definition axiom for M3.__default.do for decreasing-related literals (revealed)
axiom {:id "id2847"} 9 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType :: 
    {:weight 3} { M3.__default.do($LS($ly), Lit(stmts#0), st#0, env#0) } 
    M3.__default.do#canCall(Lit(stmts#0), st#0, env#0)
         || (9 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass.M3.Statement()))
           && $Is(st#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.Legal(Lit(stmts#0))
           && M3.__default.ValidEnv(env#0))
       ==> (var stmt#1 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
          (M3.Statement.stmtVariable_q(stmt#1)
               ==> M3.__default.eval#canCall(M3.Statement.expr(stmt#1), st#0, env#0)
                 && (var expr'#1, st'#1 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#1), st#0, env#0))): DatatypeType, 
                    $Unbox(M3.Tuple.snd(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#1), st#0, env#0))): DatatypeType; 
                  M3.__default.Value#canCall(expr'#1)
                     && (M3.__default.Value(expr'#1)
                       ==> M3.__default.SetEnv#canCall(M3.Statement.id(stmt#1), expr'#1, env#0)
                         && (var env'#1 := M3.__default.SetEnv(M3.Statement.id(stmt#1), expr'#1, env#0); 
                          M3.__default.Legal#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                             && (Lit(M3.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1)))))
                               ==> M3.__default.do#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), st'#1, env'#1))))))
             && (!M3.Statement.stmtVariable_q(stmt#1)
               ==> M3.__default.eval#canCall(M3.Statement.ret(stmt#1), st#0, env#0)))
         && M3.__default.do($LS($ly), Lit(stmts#0), st#0, env#0)
           == (var stmt#1 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
            (if M3.Statement.stmtVariable_q(stmt#1)
               then (var expr'#1, st'#1 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#1), st#0, env#0))): DatatypeType, 
                  $Unbox(M3.Tuple.snd(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#1), st#0, env#0))): DatatypeType; 
                (if M3.__default.Value(expr'#1)
                   then (var env'#1 := M3.__default.SetEnv(M3.Statement.id(stmt#1), expr'#1, env#0); 
                    (if M3.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                       then M3.__default.do($LS($ly), Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), st'#1, env'#1)
                       else #M3.Tuple.Pair($Box(expr'#1), $Box(st'#1))))
                   else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0))))
               else M3.__default.eval($LS($LZ), M3.Statement.ret(stmt#1), st#0, env#0))));
// definition axiom for M3.__default.do for all literals (revealed)
axiom {:id "id2848"} 9 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType :: 
    {:weight 3} { M3.__default.do($LS($ly), Lit(stmts#0), Lit(st#0), Lit(env#0)) } 
    M3.__default.do#canCall(Lit(stmts#0), Lit(st#0), Lit(env#0))
         || (9 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass.M3.Statement()))
           && $Is(st#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && Lit(M3.__default.Legal(Lit(stmts#0)) && M3.__default.ValidEnv(Lit(env#0))))
       ==> (var stmt#2 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
          (M3.Statement.stmtVariable_q(stmt#2)
               ==> M3.__default.eval#canCall(M3.Statement.expr(stmt#2), Lit(st#0), Lit(env#0))
                 && (var expr'#2, st'#2 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#2), Lit(st#0), Lit(env#0)))): DatatypeType, 
                    $Unbox(M3.Tuple.snd(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#2), Lit(st#0), Lit(env#0)))): DatatypeType; 
                  M3.__default.Value#canCall(expr'#2)
                     && (M3.__default.Value(expr'#2)
                       ==> M3.__default.SetEnv#canCall(M3.Statement.id(stmt#2), expr'#2, Lit(env#0))
                         && (var env'#2 := M3.__default.SetEnv(M3.Statement.id(stmt#2), expr'#2, Lit(env#0)); 
                          M3.__default.Legal#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                             && (Lit(M3.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1)))))
                               ==> M3.__default.do#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), st'#2, env'#2))))))
             && (!M3.Statement.stmtVariable_q(stmt#2)
               ==> M3.__default.eval#canCall(M3.Statement.ret(stmt#2), Lit(st#0), Lit(env#0))))
         && M3.__default.do($LS($ly), Lit(stmts#0), Lit(st#0), Lit(env#0))
           == (var stmt#2 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
            (if M3.Statement.stmtVariable_q(stmt#2)
               then (var expr'#2, st'#2 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#2), Lit(st#0), Lit(env#0)))): DatatypeType, 
                  $Unbox(M3.Tuple.snd(M3.__default.eval($LS($LZ), M3.Statement.expr(stmt#2), Lit(st#0), Lit(env#0)))): DatatypeType; 
                (if M3.__default.Value(expr'#2)
                   then (var env'#2 := M3.__default.SetEnv(M3.Statement.id(stmt#2), expr'#2, Lit(env#0)); 
                    (if M3.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                       then M3.__default.do($LS($ly), Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), st'#2, env'#2)
                       else #M3.Tuple.Pair($Box(expr'#2), $Box(st'#2))))
                   else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), 
                    $Box(Lit(st#0)))))
               else M3.__default.eval($LS($LZ), M3.Statement.ret(stmt#2), Lit(st#0), Lit(env#0)))));
}

function M3.__default.do#canCall(stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType :: 
  { M3.__default.do($LS($ly), stmts#0, st#0, env#0) } 
  M3.__default.do($LS($ly), stmts#0, st#0, env#0)
     == M3.__default.do($ly, stmts#0, st#0, env#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType :: 
  { M3.__default.do(AsFuelBottom($ly), stmts#0, st#0, env#0) } 
  M3.__default.do($ly, stmts#0, st#0, env#0)
     == M3.__default.do($LZ, stmts#0, st#0, env#0));

function M3.__default.do#requires(LayerType, Seq, DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.do
axiom (forall $ly: LayerType, stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType :: 
  { M3.__default.do#requires($ly, stmts#0, st#0, env#0) } 
  $Is(stmts#0, TSeq(Tclass.M3.Statement()))
       && $Is(st#0, Tclass.M3.State())
       && $Is(env#0, Tclass.M3.Env())
     ==> M3.__default.do#requires($ly, stmts#0, st#0, env#0)
       == (M3.__default.Legal(stmts#0) && M3.__default.ValidEnv(env#0)));

procedure {:verboseName "M3.do (well-formedness)"} CheckWellformed$$M3.__default.do(stmts#0: Seq where $Is(stmts#0, TSeq(Tclass.M3.Statement())), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()), 
    env#0: DatatypeType where $Is(env#0, Tclass.M3.Env()));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.Legal
function M3.__default.Legal(stmts#0: Seq) : bool
uses {
// definition axiom for M3.__default.Legal (revealed)
axiom {:id "id2868"} 3 <= $FunctionContextHeight
   ==> (forall stmts#0: Seq :: 
    { M3.__default.Legal(stmts#0) } 
    M3.__default.Legal#canCall(stmts#0)
         || (3 < $FunctionContextHeight && $Is(stmts#0, TSeq(Tclass.M3.Statement())))
       ==> M3.__default.Legal(stmts#0) == (Seq#Length(stmts#0) != 0));
// definition axiom for M3.__default.Legal for all literals (revealed)
axiom {:id "id2869"} 3 <= $FunctionContextHeight
   ==> (forall stmts#0: Seq :: 
    {:weight 3} { M3.__default.Legal(Lit(stmts#0)) } 
    M3.__default.Legal#canCall(Lit(stmts#0))
         || (3 < $FunctionContextHeight && $Is(stmts#0, TSeq(Tclass.M3.Statement())))
       ==> M3.__default.Legal(Lit(stmts#0)) == (Seq#Length(Lit(stmts#0)) != 0));
}

function M3.__default.Legal#canCall(stmts#0: Seq) : bool;

function M3.__default.Legal#requires(Seq) : bool;

// #requires axiom for M3.__default.Legal
axiom (forall stmts#0: Seq :: 
  { M3.__default.Legal#requires(stmts#0) } 
  $Is(stmts#0, TSeq(Tclass.M3.Statement()))
     ==> M3.__default.Legal#requires(stmts#0) == true);

procedure {:verboseName "M3.Legal (well-formedness)"} CheckWellformed$$M3.__default.Legal(stmts#0: Seq where $Is(stmts#0, TSeq(Tclass.M3.Statement())));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.eval
function M3.__default.eval($ly: LayerType, expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for M3.__default.eval
axiom 8 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType :: 
    { M3.__default.eval($ly, expr#0, st#0, env#0) } 
    M3.__default.eval#canCall(expr#0, st#0, env#0)
         || (8 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M3.Expression())
           && $Is(st#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && M3.__default.ValidEnv(env#0))
       ==> $Is(M3.__default.eval($ly, expr#0, st#0, env#0), 
        Tclass.M3.Tuple(Tclass.M3.Expression(), Tclass.M3.State())));
// definition axiom for M3.__default.eval (revealed)
axiom {:id "id2871"} 8 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType :: 
    { M3.__default.eval($LS($ly), expr#0, st#0, env#0) } 
    M3.__default.eval#canCall(expr#0, st#0, env#0)
         || (8 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M3.Expression())
           && $Is(st#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && M3.__default.ValidEnv(env#0))
       ==> M3.__default.Value#canCall(expr#0)
         && (!M3.__default.Value(expr#0)
           ==> (M3.Expression.exprIdentifier_q(expr#0)
               ==> M3.__default.GetEnv#canCall(M3.Expression.id(expr#0), env#0))
             && (!M3.Expression.exprIdentifier_q(expr#0)
               ==> (M3.Expression.exprIf_q(expr#0)
                   ==> M3.__default.eval#canCall(M3.Expression.cond(expr#0), st#0, env#0)
                     && (var cond'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.eval($ly, M3.Expression.cond(expr#0), st#0, env#0))): DatatypeType, 
                        $Unbox(M3.Tuple.snd(M3.__default.eval($ly, M3.Expression.cond(expr#0), st#0, env#0))): DatatypeType; 
                      (M3.Expression.exprLiteral_q(cond'#0)
                           ==> $IsA#M3.Literal(M3.Expression.lit(cond'#0)))
                         && (M3.Expression.exprLiteral_q(cond'#0)
                             && M3.Literal#Equal(M3.Expression.lit(cond'#0), #M3.Literal.litTrue())
                           ==> M3.__default.eval#canCall(M3.Expression.ifTrue(expr#0), st'#0, env#0))
                         && (!(M3.Expression.exprLiteral_q(cond'#0)
                             && M3.Literal#Equal(M3.Expression.lit(cond'#0), #M3.Literal.litTrue()))
                           ==> (M3.Expression.exprLiteral_q(cond'#0)
                               ==> $IsA#M3.Literal(M3.Expression.lit(cond'#0)))
                             && (M3.Expression.exprLiteral_q(cond'#0)
                                 && M3.Literal#Equal(M3.Expression.lit(cond'#0), #M3.Literal.litFalse())
                               ==> M3.__default.eval#canCall(M3.Expression.ifFalse(expr#0), st'#0, env#0)))))
                 && (!M3.Expression.exprIf_q(expr#0)
                   ==> (M3.Expression.exprAnd_q(expr#0)
                       ==> M3.__default.eval#canCall(M3.Expression.conj0(expr#0), st#0, env#0)
                         && (var conj0'#0, st'#1 := $Unbox(M3.Tuple.fst(M3.__default.eval($ly, M3.Expression.conj0(expr#0), st#0, env#0))): DatatypeType, 
                            $Unbox(M3.Tuple.snd(M3.__default.eval($ly, M3.Expression.conj0(expr#0), st#0, env#0))): DatatypeType; 
                          (M3.Expression.exprLiteral_q(conj0'#0)
                               ==> $IsA#M3.Literal(M3.Expression.lit(conj0'#0)))
                             && (M3.Expression.exprLiteral_q(conj0'#0)
                                 && M3.Literal#Equal(M3.Expression.lit(conj0'#0), #M3.Literal.litTrue())
                               ==> M3.__default.eval#canCall(M3.Expression.conj1(expr#0), st'#1, env#0))
                             && (!(M3.Expression.exprLiteral_q(conj0'#0)
                                 && M3.Literal#Equal(M3.Expression.lit(conj0'#0), #M3.Literal.litTrue()))
                               ==> 
                              M3.Expression.exprLiteral_q(conj0'#0)
                               ==> $IsA#M3.Literal(M3.Expression.lit(conj0'#0)))))
                     && (!M3.Expression.exprAnd_q(expr#0)
                       ==> (M3.Expression.exprOr_q(expr#0)
                           ==> M3.__default.eval#canCall(M3.Expression.disj0(expr#0), st#0, env#0)
                             && (var disj0'#0, st'#2 := $Unbox(M3.Tuple.fst(M3.__default.eval($ly, M3.Expression.disj0(expr#0), st#0, env#0))): DatatypeType, 
                                $Unbox(M3.Tuple.snd(M3.__default.eval($ly, M3.Expression.disj0(expr#0), st#0, env#0))): DatatypeType; 
                              (M3.Expression.exprLiteral_q(disj0'#0)
                                   ==> $IsA#M3.Literal(M3.Expression.lit(disj0'#0)))
                                 && (!(M3.Expression.exprLiteral_q(disj0'#0)
                                     && M3.Literal#Equal(M3.Expression.lit(disj0'#0), #M3.Literal.litTrue()))
                                   ==> (M3.Expression.exprLiteral_q(disj0'#0)
                                       ==> $IsA#M3.Literal(M3.Expression.lit(disj0'#0)))
                                     && (M3.Expression.exprLiteral_q(disj0'#0)
                                         && M3.Literal#Equal(M3.Expression.lit(disj0'#0), #M3.Literal.litFalse())
                                       ==> M3.__default.eval#canCall(M3.Expression.disj1(expr#0), st'#2, env#0)))))
                         && (!M3.Expression.exprOr_q(expr#0)
                           ==> 
                          M3.Expression.exprInvocation_q(expr#0)
                           ==> M3.__default.eval#canCall(M3.Expression.fun(expr#0), st#0, env#0)
                             && (var fun'#0, st'#3 := $Unbox(M3.Tuple.fst(M3.__default.eval($ly, M3.Expression.fun(expr#0), st#0, env#0))): DatatypeType, 
                                $Unbox(M3.Tuple.snd(M3.__default.eval($ly, M3.Expression.fun(expr#0), st#0, env#0))): DatatypeType; 
                              M3.__default.evalArgs#canCall(expr#0, M3.Expression.args(expr#0), st#0, env#0)
                                 && (var args'#0, sts'#0 := $Unbox(M3.Tuple.fst(M3.__default.evalArgs($ly, expr#0, M3.Expression.args(expr#0), st#0, env#0))): Seq, 
                                    $Unbox(M3.Tuple.snd(M3.__default.evalArgs($ly, expr#0, M3.Expression.args(expr#0), st#0, env#0))): Set; 
                                  (var sts''#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(st'#3)), sts'#0); 
                                    M3.__default.Compatible#canCall(sts''#0)
                                       && (M3.__default.Compatible(sts''#0)
                                         ==> M3.__default.Combine#canCall(sts''#0)
                                           && (var stCombined#0 := M3.__default.Combine($LS($LZ), sts''#0); 
                                            M3.Expression.exprLiteral_q(fun'#0)
                                                 && M3.Literal.litPrimitive_q(M3.Expression.lit(fun'#0))
                                               ==> 
                                              M3.Primitive.primExec_q(M3.Literal.prim(M3.Expression.lit(fun'#0)))
                                               ==> M3.__default.Arity#canCall(Lit(#M3.Primitive.primExec()))
                                                 && (Seq#Length(args'#0) == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                                   ==> M3.__default.ValidArgs#canCall(Lit(#M3.Primitive.primExec()), args'#0, stCombined#0))
                                                 && (Seq#Length(args'#0) == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                                     && M3.__default.ValidArgs(Lit(#M3.Primitive.primExec()), args'#0, stCombined#0)
                                                   ==> M3.__default.exec#canCall(M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(0))): DatatypeType)), 
                                                      M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(1))): DatatypeType)), 
                                                      M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(2))): DatatypeType)), 
                                                      stCombined#0)
                                                     && (var ps#0 := M3.__default.exec(M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(0))): DatatypeType)), 
                                                          M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(1))): DatatypeType)), 
                                                          M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(2))): DatatypeType)), 
                                                          stCombined#0); 
                                                      M3.Tuple.Pair_q(ps#0) && M3.Tuple.Pair_q(ps#0)))))))))))))
         && M3.__default.eval($LS($ly), expr#0, st#0, env#0)
           == (if M3.__default.Value(expr#0)
             then #M3.Tuple.Pair($Box(expr#0), $Box(st#0))
             else (if M3.Expression.exprIdentifier_q(expr#0)
               then #M3.Tuple.Pair($Box(M3.__default.GetEnv(M3.Expression.id(expr#0), env#0)), $Box(st#0))
               else (if M3.Expression.exprIf_q(expr#0)
                 then (var cond'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.eval($ly, M3.Expression.cond(expr#0), st#0, env#0))): DatatypeType, 
                    $Unbox(M3.Tuple.snd(M3.__default.eval($ly, M3.Expression.cond(expr#0), st#0, env#0))): DatatypeType; 
                  (if M3.Expression.exprLiteral_q(cond'#0)
                       && M3.Literal#Equal(M3.Expression.lit(cond'#0), #M3.Literal.litTrue())
                     then M3.__default.eval($ly, M3.Expression.ifTrue(expr#0), st'#0, env#0)
                     else (if M3.Expression.exprLiteral_q(cond'#0)
                         && M3.Literal#Equal(M3.Expression.lit(cond'#0), #M3.Literal.litFalse())
                       then M3.__default.eval($ly, M3.Expression.ifFalse(expr#0), st'#0, env#0)
                       else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))))
                 else (if M3.Expression.exprAnd_q(expr#0)
                   then (var conj0'#0, st'#1 := $Unbox(M3.Tuple.fst(M3.__default.eval($ly, M3.Expression.conj0(expr#0), st#0, env#0))): DatatypeType, 
                      $Unbox(M3.Tuple.snd(M3.__default.eval($ly, M3.Expression.conj0(expr#0), st#0, env#0))): DatatypeType; 
                    (if M3.Expression.exprLiteral_q(conj0'#0)
                         && M3.Literal#Equal(M3.Expression.lit(conj0'#0), #M3.Literal.litTrue())
                       then M3.__default.eval($ly, M3.Expression.conj1(expr#0), st'#1, env#0)
                       else (if M3.Expression.exprLiteral_q(conj0'#0)
                           && M3.Literal#Equal(M3.Expression.lit(conj0'#0), #M3.Literal.litFalse())
                         then #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprLiteral(Lit(#M3.Literal.litFalse())))), $Box(st'#1))
                         else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))))
                   else (if M3.Expression.exprOr_q(expr#0)
                     then (var disj0'#0, st'#2 := $Unbox(M3.Tuple.fst(M3.__default.eval($ly, M3.Expression.disj0(expr#0), st#0, env#0))): DatatypeType, 
                        $Unbox(M3.Tuple.snd(M3.__default.eval($ly, M3.Expression.disj0(expr#0), st#0, env#0))): DatatypeType; 
                      (if M3.Expression.exprLiteral_q(disj0'#0)
                           && M3.Literal#Equal(M3.Expression.lit(disj0'#0), #M3.Literal.litTrue())
                         then #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprLiteral(Lit(#M3.Literal.litTrue())))), $Box(st'#2))
                         else (if M3.Expression.exprLiteral_q(disj0'#0)
                             && M3.Literal#Equal(M3.Expression.lit(disj0'#0), #M3.Literal.litFalse())
                           then M3.__default.eval($ly, M3.Expression.disj1(expr#0), st'#2, env#0)
                           else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))))
                     else (if M3.Expression.exprInvocation_q(expr#0)
                       then (var fun'#0, st'#3 := $Unbox(M3.Tuple.fst(M3.__default.eval($ly, M3.Expression.fun(expr#0), st#0, env#0))): DatatypeType, 
                          $Unbox(M3.Tuple.snd(M3.__default.eval($ly, M3.Expression.fun(expr#0), st#0, env#0))): DatatypeType; 
                        (var args'#0, sts'#0 := $Unbox(M3.Tuple.fst(M3.__default.evalArgs($ly, expr#0, M3.Expression.args(expr#0), st#0, env#0))): Seq, 
                            $Unbox(M3.Tuple.snd(M3.__default.evalArgs($ly, expr#0, M3.Expression.args(expr#0), st#0, env#0))): Set; 
                          (var sts''#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(st'#3)), sts'#0); 
                            (if !M3.__default.Compatible(sts''#0)
                               then #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rCompatibility())))), 
                                $Box(st#0))
                               else (var stCombined#0 := M3.__default.Combine($LS($LZ), sts''#0); 
                                (if M3.Expression.exprLiteral_q(fun'#0)
                                     && M3.Literal.litPrimitive_q(M3.Expression.lit(fun'#0))
                                   then (if M3.Primitive.primExec_q(M3.Literal.prim(M3.Expression.lit(fun'#0)))
                                     then (if Seq#Length(args'#0) == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                         && M3.__default.ValidArgs(Lit(#M3.Primitive.primExec()), args'#0, stCombined#0)
                                       then (var ps#0 := M3.__default.exec(M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(0))): DatatypeType)), 
                                            M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(1))): DatatypeType)), 
                                            M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(2))): DatatypeType)), 
                                            stCombined#0); 
                                        #M3.Tuple.Pair($Box(#M3.Expression.exprLiteral(#M3.Literal.litArrOfPaths($Unbox(M3.Tuple.fst(ps#0)): Set))), 
                                          M3.Tuple.snd(ps#0)))
                                       else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))
                                     else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))
                                   else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0))))))))
                       else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))))))));
// definition axiom for M3.__default.eval for decreasing-related literals (revealed)
axiom {:id "id2872"} 8 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType :: 
    {:weight 3} { M3.__default.eval($LS($ly), Lit(expr#0), st#0, env#0) } 
    M3.__default.eval#canCall(Lit(expr#0), st#0, env#0)
         || (8 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M3.Expression())
           && $Is(st#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && M3.__default.ValidEnv(env#0))
       ==> M3.__default.Value#canCall(Lit(expr#0))
         && (!Lit(M3.__default.Value(Lit(expr#0)))
           ==> (Lit(M3.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> M3.__default.GetEnv#canCall(Lit(M3.Expression.id(Lit(expr#0))), env#0))
             && (!Lit(M3.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> (Lit(M3.Expression.exprIf_q(Lit(expr#0)))
                   ==> M3.__default.eval#canCall(Lit(M3.Expression.cond(Lit(expr#0))), st#0, env#0)
                     && (var cond'#1, st'#4 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($ly), Lit(M3.Expression.cond(Lit(expr#0))), st#0, env#0))): DatatypeType, 
                        $Unbox(M3.Tuple.snd(M3.__default.eval($LS($ly), Lit(M3.Expression.cond(Lit(expr#0))), st#0, env#0))): DatatypeType; 
                      (M3.Expression.exprLiteral_q(cond'#1)
                           ==> $IsA#M3.Literal(M3.Expression.lit(cond'#1)))
                         && (M3.Expression.exprLiteral_q(cond'#1)
                             && M3.Literal#Equal(M3.Expression.lit(cond'#1), #M3.Literal.litTrue())
                           ==> M3.__default.eval#canCall(Lit(M3.Expression.ifTrue(Lit(expr#0))), st'#4, env#0))
                         && (!(M3.Expression.exprLiteral_q(cond'#1)
                             && M3.Literal#Equal(M3.Expression.lit(cond'#1), #M3.Literal.litTrue()))
                           ==> (M3.Expression.exprLiteral_q(cond'#1)
                               ==> $IsA#M3.Literal(M3.Expression.lit(cond'#1)))
                             && (M3.Expression.exprLiteral_q(cond'#1)
                                 && M3.Literal#Equal(M3.Expression.lit(cond'#1), #M3.Literal.litFalse())
                               ==> M3.__default.eval#canCall(Lit(M3.Expression.ifFalse(Lit(expr#0))), st'#4, env#0)))))
                 && (!Lit(M3.Expression.exprIf_q(Lit(expr#0)))
                   ==> (Lit(M3.Expression.exprAnd_q(Lit(expr#0)))
                       ==> M3.__default.eval#canCall(Lit(M3.Expression.conj0(Lit(expr#0))), st#0, env#0)
                         && (var conj0'#1, st'#5 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($ly), Lit(M3.Expression.conj0(Lit(expr#0))), st#0, env#0))): DatatypeType, 
                            $Unbox(M3.Tuple.snd(M3.__default.eval($LS($ly), Lit(M3.Expression.conj0(Lit(expr#0))), st#0, env#0))): DatatypeType; 
                          (M3.Expression.exprLiteral_q(conj0'#1)
                               ==> $IsA#M3.Literal(M3.Expression.lit(conj0'#1)))
                             && (M3.Expression.exprLiteral_q(conj0'#1)
                                 && M3.Literal#Equal(M3.Expression.lit(conj0'#1), #M3.Literal.litTrue())
                               ==> M3.__default.eval#canCall(Lit(M3.Expression.conj1(Lit(expr#0))), st'#5, env#0))
                             && (!(M3.Expression.exprLiteral_q(conj0'#1)
                                 && M3.Literal#Equal(M3.Expression.lit(conj0'#1), #M3.Literal.litTrue()))
                               ==> 
                              M3.Expression.exprLiteral_q(conj0'#1)
                               ==> $IsA#M3.Literal(M3.Expression.lit(conj0'#1)))))
                     && (!Lit(M3.Expression.exprAnd_q(Lit(expr#0)))
                       ==> (Lit(M3.Expression.exprOr_q(Lit(expr#0)))
                           ==> M3.__default.eval#canCall(Lit(M3.Expression.disj0(Lit(expr#0))), st#0, env#0)
                             && (var disj0'#1, st'#6 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($ly), Lit(M3.Expression.disj0(Lit(expr#0))), st#0, env#0))): DatatypeType, 
                                $Unbox(M3.Tuple.snd(M3.__default.eval($LS($ly), Lit(M3.Expression.disj0(Lit(expr#0))), st#0, env#0))): DatatypeType; 
                              (M3.Expression.exprLiteral_q(disj0'#1)
                                   ==> $IsA#M3.Literal(M3.Expression.lit(disj0'#1)))
                                 && (!(M3.Expression.exprLiteral_q(disj0'#1)
                                     && M3.Literal#Equal(M3.Expression.lit(disj0'#1), #M3.Literal.litTrue()))
                                   ==> (M3.Expression.exprLiteral_q(disj0'#1)
                                       ==> $IsA#M3.Literal(M3.Expression.lit(disj0'#1)))
                                     && (M3.Expression.exprLiteral_q(disj0'#1)
                                         && M3.Literal#Equal(M3.Expression.lit(disj0'#1), #M3.Literal.litFalse())
                                       ==> M3.__default.eval#canCall(Lit(M3.Expression.disj1(Lit(expr#0))), st'#6, env#0)))))
                         && (!Lit(M3.Expression.exprOr_q(Lit(expr#0)))
                           ==> 
                          Lit(M3.Expression.exprInvocation_q(Lit(expr#0)))
                           ==> M3.__default.eval#canCall(Lit(M3.Expression.fun(Lit(expr#0))), st#0, env#0)
                             && (var fun'#1, st'#7 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($ly), Lit(M3.Expression.fun(Lit(expr#0))), st#0, env#0))): DatatypeType, 
                                $Unbox(M3.Tuple.snd(M3.__default.eval($LS($ly), Lit(M3.Expression.fun(Lit(expr#0))), st#0, env#0))): DatatypeType; 
                              M3.__default.evalArgs#canCall(Lit(expr#0), Lit(M3.Expression.args(Lit(expr#0))), st#0, env#0)
                                 && (var args'#1, sts'#1 := $Unbox(M3.Tuple.fst(M3.__default.evalArgs($LS($ly), Lit(expr#0), Lit(M3.Expression.args(Lit(expr#0))), st#0, env#0))): Seq, 
                                    $Unbox(M3.Tuple.snd(M3.__default.evalArgs($LS($ly), Lit(expr#0), Lit(M3.Expression.args(Lit(expr#0))), st#0, env#0))): Set; 
                                  (var sts''#1 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(st'#7)), sts'#1); 
                                    M3.__default.Compatible#canCall(sts''#1)
                                       && (M3.__default.Compatible(sts''#1)
                                         ==> M3.__default.Combine#canCall(sts''#1)
                                           && (var stCombined#1 := M3.__default.Combine($LS($LZ), sts''#1); 
                                            M3.Expression.exprLiteral_q(fun'#1)
                                                 && M3.Literal.litPrimitive_q(M3.Expression.lit(fun'#1))
                                               ==> 
                                              M3.Primitive.primExec_q(M3.Literal.prim(M3.Expression.lit(fun'#1)))
                                               ==> M3.__default.Arity#canCall(Lit(#M3.Primitive.primExec()))
                                                 && (Seq#Length(args'#1) == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                                   ==> M3.__default.ValidArgs#canCall(Lit(#M3.Primitive.primExec()), args'#1, stCombined#1))
                                                 && (Seq#Length(args'#1) == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                                     && M3.__default.ValidArgs(Lit(#M3.Primitive.primExec()), args'#1, stCombined#1)
                                                   ==> M3.__default.exec#canCall(M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(0))): DatatypeType)), 
                                                      M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(1))): DatatypeType)), 
                                                      M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(2))): DatatypeType)), 
                                                      stCombined#1)
                                                     && (var ps#1 := M3.__default.exec(M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(0))): DatatypeType)), 
                                                          M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(1))): DatatypeType)), 
                                                          M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(2))): DatatypeType)), 
                                                          stCombined#1); 
                                                      M3.Tuple.Pair_q(ps#1) && M3.Tuple.Pair_q(ps#1)))))))))))))
         && M3.__default.eval($LS($ly), Lit(expr#0), st#0, env#0)
           == (if M3.__default.Value(Lit(expr#0))
             then #M3.Tuple.Pair($Box(Lit(expr#0)), $Box(st#0))
             else (if M3.Expression.exprIdentifier_q(Lit(expr#0))
               then #M3.Tuple.Pair($Box(M3.__default.GetEnv(Lit(M3.Expression.id(Lit(expr#0))), env#0)), $Box(st#0))
               else (if M3.Expression.exprIf_q(Lit(expr#0))
                 then (var cond'#1, st'#4 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($ly), Lit(M3.Expression.cond(Lit(expr#0))), st#0, env#0))): DatatypeType, 
                    $Unbox(M3.Tuple.snd(M3.__default.eval($LS($ly), Lit(M3.Expression.cond(Lit(expr#0))), st#0, env#0))): DatatypeType; 
                  (if M3.Expression.exprLiteral_q(cond'#1)
                       && M3.Literal#Equal(M3.Expression.lit(cond'#1), #M3.Literal.litTrue())
                     then M3.__default.eval($LS($ly), Lit(M3.Expression.ifTrue(Lit(expr#0))), st'#4, env#0)
                     else (if M3.Expression.exprLiteral_q(cond'#1)
                         && M3.Literal#Equal(M3.Expression.lit(cond'#1), #M3.Literal.litFalse())
                       then M3.__default.eval($LS($ly), Lit(M3.Expression.ifFalse(Lit(expr#0))), st'#4, env#0)
                       else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))))
                 else (if M3.Expression.exprAnd_q(Lit(expr#0))
                   then (var conj0'#1, st'#5 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($ly), Lit(M3.Expression.conj0(Lit(expr#0))), st#0, env#0))): DatatypeType, 
                      $Unbox(M3.Tuple.snd(M3.__default.eval($LS($ly), Lit(M3.Expression.conj0(Lit(expr#0))), st#0, env#0))): DatatypeType; 
                    (if M3.Expression.exprLiteral_q(conj0'#1)
                         && M3.Literal#Equal(M3.Expression.lit(conj0'#1), #M3.Literal.litTrue())
                       then M3.__default.eval($LS($ly), Lit(M3.Expression.conj1(Lit(expr#0))), st'#5, env#0)
                       else (if M3.Expression.exprLiteral_q(conj0'#1)
                           && M3.Literal#Equal(M3.Expression.lit(conj0'#1), #M3.Literal.litFalse())
                         then #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprLiteral(Lit(#M3.Literal.litFalse())))), $Box(st'#5))
                         else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))))
                   else (if M3.Expression.exprOr_q(Lit(expr#0))
                     then (var disj0'#1, st'#6 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($ly), Lit(M3.Expression.disj0(Lit(expr#0))), st#0, env#0))): DatatypeType, 
                        $Unbox(M3.Tuple.snd(M3.__default.eval($LS($ly), Lit(M3.Expression.disj0(Lit(expr#0))), st#0, env#0))): DatatypeType; 
                      (if M3.Expression.exprLiteral_q(disj0'#1)
                           && M3.Literal#Equal(M3.Expression.lit(disj0'#1), #M3.Literal.litTrue())
                         then #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprLiteral(Lit(#M3.Literal.litTrue())))), $Box(st'#6))
                         else (if M3.Expression.exprLiteral_q(disj0'#1)
                             && M3.Literal#Equal(M3.Expression.lit(disj0'#1), #M3.Literal.litFalse())
                           then M3.__default.eval($LS($ly), Lit(M3.Expression.disj1(Lit(expr#0))), st'#6, env#0)
                           else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))))
                     else (if M3.Expression.exprInvocation_q(Lit(expr#0))
                       then (var fun'#1, st'#7 := $Unbox(M3.Tuple.fst(M3.__default.eval($LS($ly), Lit(M3.Expression.fun(Lit(expr#0))), st#0, env#0))): DatatypeType, 
                          $Unbox(M3.Tuple.snd(M3.__default.eval($LS($ly), Lit(M3.Expression.fun(Lit(expr#0))), st#0, env#0))): DatatypeType; 
                        (var args'#1, sts'#1 := $Unbox(M3.Tuple.fst(M3.__default.evalArgs($LS($ly), Lit(expr#0), Lit(M3.Expression.args(Lit(expr#0))), st#0, env#0))): Seq, 
                            $Unbox(M3.Tuple.snd(M3.__default.evalArgs($LS($ly), Lit(expr#0), Lit(M3.Expression.args(Lit(expr#0))), st#0, env#0))): Set; 
                          (var sts''#1 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(st'#7)), sts'#1); 
                            (if !M3.__default.Compatible(sts''#1)
                               then #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rCompatibility())))), 
                                $Box(st#0))
                               else (var stCombined#1 := M3.__default.Combine($LS($LZ), sts''#1); 
                                (if M3.Expression.exprLiteral_q(fun'#1)
                                     && M3.Literal.litPrimitive_q(M3.Expression.lit(fun'#1))
                                   then (if M3.Primitive.primExec_q(M3.Literal.prim(M3.Expression.lit(fun'#1)))
                                     then (if Seq#Length(args'#1) == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                         && M3.__default.ValidArgs(Lit(#M3.Primitive.primExec()), args'#1, stCombined#1)
                                       then (var ps#1 := M3.__default.exec(M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(0))): DatatypeType)), 
                                            M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(1))): DatatypeType)), 
                                            M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(2))): DatatypeType)), 
                                            stCombined#1); 
                                        #M3.Tuple.Pair($Box(#M3.Expression.exprLiteral(#M3.Literal.litArrOfPaths($Unbox(M3.Tuple.fst(ps#1)): Set))), 
                                          M3.Tuple.snd(ps#1)))
                                       else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))
                                     else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))
                                   else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0))))))))
                       else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), $Box(st#0)))))))));
// definition axiom for M3.__default.eval for all literals (revealed)
axiom {:id "id2873"} 8 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType :: 
    {:weight 3} { M3.__default.eval($LS($ly), Lit(expr#0), Lit(st#0), Lit(env#0)) } 
    M3.__default.eval#canCall(Lit(expr#0), Lit(st#0), Lit(env#0))
         || (8 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M3.Expression())
           && $Is(st#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && Lit(M3.__default.ValidEnv(Lit(env#0))))
       ==> M3.__default.Value#canCall(Lit(expr#0))
         && (!Lit(M3.__default.Value(Lit(expr#0)))
           ==> (Lit(M3.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> M3.__default.GetEnv#canCall(Lit(M3.Expression.id(Lit(expr#0))), Lit(env#0)))
             && (!Lit(M3.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> (Lit(M3.Expression.exprIf_q(Lit(expr#0)))
                   ==> M3.__default.eval#canCall(Lit(M3.Expression.cond(Lit(expr#0))), Lit(st#0), Lit(env#0))
                     && (var cond'#2, st'#8 := $Unbox(M3.Tuple.fst(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.cond(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType, 
                        $Unbox(M3.Tuple.snd(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.cond(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType; 
                      (M3.Expression.exprLiteral_q(cond'#2)
                           ==> $IsA#M3.Literal(M3.Expression.lit(cond'#2)))
                         && (M3.Expression.exprLiteral_q(cond'#2)
                             && M3.Literal#Equal(M3.Expression.lit(cond'#2), #M3.Literal.litTrue())
                           ==> M3.__default.eval#canCall(Lit(M3.Expression.ifTrue(Lit(expr#0))), st'#8, Lit(env#0)))
                         && (!(M3.Expression.exprLiteral_q(cond'#2)
                             && M3.Literal#Equal(M3.Expression.lit(cond'#2), #M3.Literal.litTrue()))
                           ==> (M3.Expression.exprLiteral_q(cond'#2)
                               ==> $IsA#M3.Literal(M3.Expression.lit(cond'#2)))
                             && (M3.Expression.exprLiteral_q(cond'#2)
                                 && M3.Literal#Equal(M3.Expression.lit(cond'#2), #M3.Literal.litFalse())
                               ==> M3.__default.eval#canCall(Lit(M3.Expression.ifFalse(Lit(expr#0))), st'#8, Lit(env#0))))))
                 && (!Lit(M3.Expression.exprIf_q(Lit(expr#0)))
                   ==> (Lit(M3.Expression.exprAnd_q(Lit(expr#0)))
                       ==> M3.__default.eval#canCall(Lit(M3.Expression.conj0(Lit(expr#0))), Lit(st#0), Lit(env#0))
                         && (var conj0'#2, st'#9 := $Unbox(M3.Tuple.fst(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.conj0(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType, 
                            $Unbox(M3.Tuple.snd(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.conj0(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType; 
                          (M3.Expression.exprLiteral_q(conj0'#2)
                               ==> $IsA#M3.Literal(M3.Expression.lit(conj0'#2)))
                             && (M3.Expression.exprLiteral_q(conj0'#2)
                                 && M3.Literal#Equal(M3.Expression.lit(conj0'#2), #M3.Literal.litTrue())
                               ==> M3.__default.eval#canCall(Lit(M3.Expression.conj1(Lit(expr#0))), st'#9, Lit(env#0)))
                             && (!(M3.Expression.exprLiteral_q(conj0'#2)
                                 && M3.Literal#Equal(M3.Expression.lit(conj0'#2), #M3.Literal.litTrue()))
                               ==> 
                              M3.Expression.exprLiteral_q(conj0'#2)
                               ==> $IsA#M3.Literal(M3.Expression.lit(conj0'#2)))))
                     && (!Lit(M3.Expression.exprAnd_q(Lit(expr#0)))
                       ==> (Lit(M3.Expression.exprOr_q(Lit(expr#0)))
                           ==> M3.__default.eval#canCall(Lit(M3.Expression.disj0(Lit(expr#0))), Lit(st#0), Lit(env#0))
                             && (var disj0'#2, st'#10 := $Unbox(M3.Tuple.fst(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.disj0(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType, 
                                $Unbox(M3.Tuple.snd(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.disj0(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType; 
                              (M3.Expression.exprLiteral_q(disj0'#2)
                                   ==> $IsA#M3.Literal(M3.Expression.lit(disj0'#2)))
                                 && (!(M3.Expression.exprLiteral_q(disj0'#2)
                                     && M3.Literal#Equal(M3.Expression.lit(disj0'#2), #M3.Literal.litTrue()))
                                   ==> (M3.Expression.exprLiteral_q(disj0'#2)
                                       ==> $IsA#M3.Literal(M3.Expression.lit(disj0'#2)))
                                     && (M3.Expression.exprLiteral_q(disj0'#2)
                                         && M3.Literal#Equal(M3.Expression.lit(disj0'#2), #M3.Literal.litFalse())
                                       ==> M3.__default.eval#canCall(Lit(M3.Expression.disj1(Lit(expr#0))), st'#10, Lit(env#0))))))
                         && (!Lit(M3.Expression.exprOr_q(Lit(expr#0)))
                           ==> 
                          Lit(M3.Expression.exprInvocation_q(Lit(expr#0)))
                           ==> M3.__default.eval#canCall(Lit(M3.Expression.fun(Lit(expr#0))), Lit(st#0), Lit(env#0))
                             && (var fun'#2, st'#11 := $Unbox(M3.Tuple.fst(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.fun(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType, 
                                $Unbox(M3.Tuple.snd(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.fun(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType; 
                              M3.__default.evalArgs#canCall(Lit(expr#0), Lit(M3.Expression.args(Lit(expr#0))), Lit(st#0), Lit(env#0))
                                 && (var args'#2, sts'#2 := $Unbox(M3.Tuple.fst(Lit(M3.__default.evalArgs($LS($ly), 
                                            Lit(expr#0), 
                                            Lit(M3.Expression.args(Lit(expr#0))), 
                                            Lit(st#0), 
                                            Lit(env#0))))): Seq, 
                                    $Unbox(M3.Tuple.snd(Lit(M3.__default.evalArgs($LS($ly), 
                                            Lit(expr#0), 
                                            Lit(M3.Expression.args(Lit(expr#0))), 
                                            Lit(st#0), 
                                            Lit(env#0))))): Set; 
                                  (var sts''#2 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(st'#11)), sts'#2); 
                                    M3.__default.Compatible#canCall(sts''#2)
                                       && (M3.__default.Compatible(sts''#2)
                                         ==> M3.__default.Combine#canCall(sts''#2)
                                           && (var stCombined#2 := M3.__default.Combine($LS($LZ), sts''#2); 
                                            M3.Expression.exprLiteral_q(fun'#2)
                                                 && M3.Literal.litPrimitive_q(M3.Expression.lit(fun'#2))
                                               ==> 
                                              M3.Primitive.primExec_q(M3.Literal.prim(M3.Expression.lit(fun'#2)))
                                               ==> M3.__default.Arity#canCall(Lit(#M3.Primitive.primExec()))
                                                 && (Seq#Length(args'#2) == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                                   ==> M3.__default.ValidArgs#canCall(Lit(#M3.Primitive.primExec()), args'#2, stCombined#2))
                                                 && (Seq#Length(args'#2) == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                                     && M3.__default.ValidArgs(Lit(#M3.Primitive.primExec()), args'#2, stCombined#2)
                                                   ==> M3.__default.exec#canCall(M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(0))): DatatypeType)), 
                                                      M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(1))): DatatypeType)), 
                                                      M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(2))): DatatypeType)), 
                                                      stCombined#2)
                                                     && (var ps#2 := M3.__default.exec(M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(0))): DatatypeType)), 
                                                          M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(1))): DatatypeType)), 
                                                          M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(2))): DatatypeType)), 
                                                          stCombined#2); 
                                                      M3.Tuple.Pair_q(ps#2) && M3.Tuple.Pair_q(ps#2)))))))))))))
         && M3.__default.eval($LS($ly), Lit(expr#0), Lit(st#0), Lit(env#0))
           == (if M3.__default.Value(Lit(expr#0))
             then #M3.Tuple.Pair($Box(Lit(expr#0)), $Box(Lit(st#0)))
             else (if M3.Expression.exprIdentifier_q(Lit(expr#0))
               then #M3.Tuple.Pair($Box(Lit(M3.__default.GetEnv(Lit(M3.Expression.id(Lit(expr#0))), Lit(env#0)))), 
                $Box(Lit(st#0)))
               else (if M3.Expression.exprIf_q(Lit(expr#0))
                 then (var cond'#2, st'#8 := $Unbox(M3.Tuple.fst(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.cond(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType, 
                    $Unbox(M3.Tuple.snd(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.cond(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType; 
                  (if M3.Expression.exprLiteral_q(cond'#2)
                       && M3.Literal#Equal(M3.Expression.lit(cond'#2), #M3.Literal.litTrue())
                     then M3.__default.eval($LS($ly), Lit(M3.Expression.ifTrue(Lit(expr#0))), st'#8, Lit(env#0))
                     else (if M3.Expression.exprLiteral_q(cond'#2)
                         && M3.Literal#Equal(M3.Expression.lit(cond'#2), #M3.Literal.litFalse())
                       then M3.__default.eval($LS($ly), Lit(M3.Expression.ifFalse(Lit(expr#0))), st'#8, Lit(env#0))
                       else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), 
                        $Box(Lit(st#0))))))
                 else (if M3.Expression.exprAnd_q(Lit(expr#0))
                   then (var conj0'#2, st'#9 := $Unbox(M3.Tuple.fst(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.conj0(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType, 
                      $Unbox(M3.Tuple.snd(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.conj0(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType; 
                    (if M3.Expression.exprLiteral_q(conj0'#2)
                         && M3.Literal#Equal(M3.Expression.lit(conj0'#2), #M3.Literal.litTrue())
                       then M3.__default.eval($LS($ly), Lit(M3.Expression.conj1(Lit(expr#0))), st'#9, Lit(env#0))
                       else (if M3.Expression.exprLiteral_q(conj0'#2)
                           && M3.Literal#Equal(M3.Expression.lit(conj0'#2), #M3.Literal.litFalse())
                         then #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprLiteral(Lit(#M3.Literal.litFalse())))), $Box(st'#9))
                         else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), 
                          $Box(Lit(st#0))))))
                   else (if M3.Expression.exprOr_q(Lit(expr#0))
                     then (var disj0'#2, st'#10 := $Unbox(M3.Tuple.fst(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.disj0(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType, 
                        $Unbox(M3.Tuple.snd(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.disj0(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType; 
                      (if M3.Expression.exprLiteral_q(disj0'#2)
                           && M3.Literal#Equal(M3.Expression.lit(disj0'#2), #M3.Literal.litTrue())
                         then #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprLiteral(Lit(#M3.Literal.litTrue())))), $Box(st'#10))
                         else (if M3.Expression.exprLiteral_q(disj0'#2)
                             && M3.Literal#Equal(M3.Expression.lit(disj0'#2), #M3.Literal.litFalse())
                           then M3.__default.eval($LS($ly), Lit(M3.Expression.disj1(Lit(expr#0))), st'#10, Lit(env#0))
                           else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), 
                            $Box(Lit(st#0))))))
                     else (if M3.Expression.exprInvocation_q(Lit(expr#0))
                       then (var fun'#2, st'#11 := $Unbox(M3.Tuple.fst(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.fun(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType, 
                          $Unbox(M3.Tuple.snd(Lit(M3.__default.eval($LS($ly), Lit(M3.Expression.fun(Lit(expr#0))), Lit(st#0), Lit(env#0))))): DatatypeType; 
                        (var args'#2, sts'#2 := $Unbox(M3.Tuple.fst(Lit(M3.__default.evalArgs($LS($ly), 
                                    Lit(expr#0), 
                                    Lit(M3.Expression.args(Lit(expr#0))), 
                                    Lit(st#0), 
                                    Lit(env#0))))): Seq, 
                            $Unbox(M3.Tuple.snd(Lit(M3.__default.evalArgs($LS($ly), 
                                    Lit(expr#0), 
                                    Lit(M3.Expression.args(Lit(expr#0))), 
                                    Lit(st#0), 
                                    Lit(env#0))))): Set; 
                          (var sts''#2 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(st'#11)), sts'#2); 
                            (if !M3.__default.Compatible(sts''#2)
                               then #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rCompatibility())))), 
                                $Box(Lit(st#0)))
                               else (var stCombined#2 := M3.__default.Combine($LS($LZ), sts''#2); 
                                (if M3.Expression.exprLiteral_q(fun'#2)
                                     && M3.Literal.litPrimitive_q(M3.Expression.lit(fun'#2))
                                   then (if M3.Primitive.primExec_q(M3.Literal.prim(M3.Expression.lit(fun'#2)))
                                     then (if Seq#Length(args'#2) == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                         && M3.__default.ValidArgs(Lit(#M3.Primitive.primExec()), args'#2, stCombined#2)
                                       then (var ps#2 := M3.__default.exec(M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(0))): DatatypeType)), 
                                            M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(1))): DatatypeType)), 
                                            M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(2))): DatatypeType)), 
                                            stCombined#2); 
                                        #M3.Tuple.Pair($Box(#M3.Expression.exprLiteral(#M3.Literal.litArrOfPaths($Unbox(M3.Tuple.fst(ps#2)): Set))), 
                                          M3.Tuple.snd(ps#2)))
                                       else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), 
                                        $Box(Lit(st#0))))
                                     else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), 
                                      $Box(Lit(st#0))))
                                   else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), 
                                    $Box(Lit(st#0)))))))))
                       else #M3.Tuple.Pair($Box(Lit(#M3.Expression.exprError(Lit(#M3.Reason.rValidity())))), 
                        $Box(Lit(st#0))))))))));
}

function M3.__default.eval#canCall(expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType :: 
  { M3.__default.eval($LS($ly), expr#0, st#0, env#0) } 
  M3.__default.eval($LS($ly), expr#0, st#0, env#0)
     == M3.__default.eval($ly, expr#0, st#0, env#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType :: 
  { M3.__default.eval(AsFuelBottom($ly), expr#0, st#0, env#0) } 
  M3.__default.eval($ly, expr#0, st#0, env#0)
     == M3.__default.eval($LZ, expr#0, st#0, env#0));

function M3.__default.eval#requires(LayerType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.eval
axiom (forall $ly: LayerType, expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType :: 
  { M3.__default.eval#requires($ly, expr#0, st#0, env#0) } 
  $Is(expr#0, Tclass.M3.Expression())
       && $Is(st#0, Tclass.M3.State())
       && $Is(env#0, Tclass.M3.Env())
     ==> M3.__default.eval#requires($ly, expr#0, st#0, env#0)
       == M3.__default.ValidEnv(env#0));

procedure {:verboseName "M3.eval (well-formedness)"} CheckWellformed$$M3.__default.eval(expr#0: DatatypeType where $Is(expr#0, Tclass.M3.Expression()), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()), 
    env#0: DatatypeType where $Is(env#0, Tclass.M3.Env()));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.evalArgs
function M3.__default.evalArgs($ly: LayerType, 
    context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: DatatypeType, 
    env#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for M3.__default.evalArgs
axiom 8 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      context#0: DatatypeType, 
      args#0: Seq, 
      stOrig#0: DatatypeType, 
      env#0: DatatypeType :: 
    { M3.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0) } 
    M3.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0)
         || (8 < $FunctionContextHeight
           && 
          $Is(context#0, Tclass.M3.Expression())
           && $Is(args#0, TSeq(Tclass.M3.Expression()))
           && $Is(stOrig#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.ValidEnv(env#0)
           && (forall arg#0: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#0)) } 
            $Is(arg#0, Tclass.M3.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#0))
               ==> DtRank(arg#0) < DtRank(context#0)))
       ==> $Is(M3.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0), 
        Tclass.M3.Tuple(TSeq(Tclass.M3.Expression()), TSet(Tclass.M3.State()))));
// definition axiom for M3.__default.evalArgs (revealed)
axiom {:id "id2945"} 8 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      context#0: DatatypeType, 
      args#0: Seq, 
      stOrig#0: DatatypeType, 
      env#0: DatatypeType :: 
    { M3.__default.evalArgs($LS($ly), context#0, args#0, stOrig#0, env#0) } 
    M3.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0)
         || (8 < $FunctionContextHeight
           && 
          $Is(context#0, Tclass.M3.Expression())
           && $Is(args#0, TSeq(Tclass.M3.Expression()))
           && $Is(stOrig#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.ValidEnv(env#0)
           && (forall arg#1: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#1)) } 
            $Is(arg#1, Tclass.M3.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#1))
               ==> DtRank(arg#1) < DtRank(context#0)))
       ==> (!Seq#Equal(args#0, Seq#Empty(): Seq)
           ==> M3.__default.eval#canCall($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, stOrig#0, env#0)
             && (var r#0 := M3.__default.eval($ly, $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, stOrig#0, env#0); 
              M3.__default.evalArgs#canCall(context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0)
                 && (var rr#0 := M3.__default.evalArgs($ly, context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0); 
                  M3.Tuple.Pair_q(r#0)
                     && M3.Tuple.Pair_q(rr#0)
                     && 
                    M3.Tuple.Pair_q(r#0)
                     && M3.Tuple.Pair_q(rr#0))))
         && M3.__default.evalArgs($LS($ly), context#0, args#0, stOrig#0, env#0)
           == (if Seq#Equal(args#0, Seq#Empty(): Seq)
             then #M3.Tuple.Pair($Box(Lit(Seq#Empty(): Seq)), $Box(Lit(Set#Empty(): Set)))
             else (var r#0 := M3.__default.eval($ly, $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, stOrig#0, env#0); 
              (var rr#0 := M3.__default.evalArgs($ly, context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0); 
                #M3.Tuple.Pair($Box(Seq#Append(Seq#Build(Seq#Empty(): Seq, M3.Tuple.fst(r#0)), $Unbox(M3.Tuple.fst(rr#0)): Seq)), 
                  $Box(Set#Union(Set#UnionOne(Set#Empty(): Set, M3.Tuple.snd(r#0)), 
                      $Unbox(M3.Tuple.snd(rr#0)): Set)))))));
// definition axiom for M3.__default.evalArgs for decreasing-related literals (revealed)
axiom {:id "id2946"} 8 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      context#0: DatatypeType, 
      args#0: Seq, 
      stOrig#0: DatatypeType, 
      env#0: DatatypeType :: 
    {:weight 3} { M3.__default.evalArgs($LS($ly), Lit(context#0), Lit(args#0), stOrig#0, env#0) } 
    M3.__default.evalArgs#canCall(Lit(context#0), Lit(args#0), stOrig#0, env#0)
         || (8 < $FunctionContextHeight
           && 
          $Is(context#0, Tclass.M3.Expression())
           && $Is(args#0, TSeq(Tclass.M3.Expression()))
           && $Is(stOrig#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.ValidEnv(env#0)
           && (forall arg#2: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#2)) } 
            $Is(arg#2, Tclass.M3.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#2))
               ==> DtRank(arg#2) < DtRank(context#0)))
       ==> (!Seq#Equal(args#0, Seq#Empty(): Seq)
           ==> M3.__default.eval#canCall($Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, stOrig#0, env#0)
             && (var r#1 := M3.__default.eval($LS($ly), 
                  $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                  stOrig#0, 
                  env#0); 
              M3.__default.evalArgs#canCall(Lit(context#0), Lit(Seq#Drop(Lit(args#0), LitInt(1))), stOrig#0, env#0)
                 && (var rr#1 := M3.__default.evalArgs($LS($ly), Lit(context#0), Lit(Seq#Drop(Lit(args#0), LitInt(1))), stOrig#0, env#0); 
                  M3.Tuple.Pair_q(r#1)
                     && M3.Tuple.Pair_q(rr#1)
                     && 
                    M3.Tuple.Pair_q(r#1)
                     && M3.Tuple.Pair_q(rr#1))))
         && M3.__default.evalArgs($LS($ly), Lit(context#0), Lit(args#0), stOrig#0, env#0)
           == (if Seq#Equal(args#0, Seq#Empty(): Seq)
             then #M3.Tuple.Pair($Box(Lit(Seq#Empty(): Seq)), $Box(Lit(Set#Empty(): Set)))
             else (var r#1 := M3.__default.eval($LS($ly), 
                  $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                  stOrig#0, 
                  env#0); 
              (var rr#1 := M3.__default.evalArgs($LS($ly), Lit(context#0), Lit(Seq#Drop(Lit(args#0), LitInt(1))), stOrig#0, env#0); 
                #M3.Tuple.Pair($Box(Seq#Append(Seq#Build(Seq#Empty(): Seq, M3.Tuple.fst(r#1)), $Unbox(M3.Tuple.fst(rr#1)): Seq)), 
                  $Box(Set#Union(Set#UnionOne(Set#Empty(): Set, M3.Tuple.snd(r#1)), 
                      $Unbox(M3.Tuple.snd(rr#1)): Set)))))));
// definition axiom for M3.__default.evalArgs for all literals (revealed)
axiom {:id "id2947"} 8 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      context#0: DatatypeType, 
      args#0: Seq, 
      stOrig#0: DatatypeType, 
      env#0: DatatypeType :: 
    {:weight 3} { M3.__default.evalArgs($LS($ly), Lit(context#0), Lit(args#0), Lit(stOrig#0), Lit(env#0)) } 
    M3.__default.evalArgs#canCall(Lit(context#0), Lit(args#0), Lit(stOrig#0), Lit(env#0))
         || (8 < $FunctionContextHeight
           && 
          $Is(context#0, Tclass.M3.Expression())
           && $Is(args#0, TSeq(Tclass.M3.Expression()))
           && $Is(stOrig#0, Tclass.M3.State())
           && $Is(env#0, Tclass.M3.Env())
           && 
          M3.__default.ValidEnv(Lit(env#0))
           && (forall arg#3: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#3)) } 
            $Is(arg#3, Tclass.M3.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#3))
               ==> DtRank(arg#3) < DtRank(context#0)))
       ==> (!Seq#Equal(args#0, Seq#Empty(): Seq)
           ==> M3.__default.eval#canCall($Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
              Lit(stOrig#0), 
              Lit(env#0))
             && (var r#2 := M3.__default.eval($LS($ly), 
                  $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                  Lit(stOrig#0), 
                  Lit(env#0)); 
              M3.__default.evalArgs#canCall(Lit(context#0), Lit(Seq#Drop(Lit(args#0), LitInt(1))), Lit(stOrig#0), Lit(env#0))
                 && (var rr#2 := Lit(M3.__default.evalArgs($LS($ly), 
                        Lit(context#0), 
                        Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                        Lit(stOrig#0), 
                        Lit(env#0))); 
                  M3.Tuple.Pair_q(r#2)
                     && M3.Tuple.Pair_q(rr#2)
                     && 
                    M3.Tuple.Pair_q(r#2)
                     && M3.Tuple.Pair_q(rr#2))))
         && M3.__default.evalArgs($LS($ly), Lit(context#0), Lit(args#0), Lit(stOrig#0), Lit(env#0))
           == (if Seq#Equal(args#0, Seq#Empty(): Seq)
             then #M3.Tuple.Pair($Box(Lit(Seq#Empty(): Seq)), $Box(Lit(Set#Empty(): Set)))
             else (var r#2 := M3.__default.eval($LS($ly), 
                  $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                  Lit(stOrig#0), 
                  Lit(env#0)); 
              (var rr#2 := Lit(M3.__default.evalArgs($LS($ly), 
                      Lit(context#0), 
                      Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                      Lit(stOrig#0), 
                      Lit(env#0))); 
                #M3.Tuple.Pair($Box(Seq#Append(Seq#Build(Seq#Empty(): Seq, M3.Tuple.fst(r#2)), $Unbox(M3.Tuple.fst(rr#2)): Seq)), 
                  $Box(Set#Union(Set#UnionOne(Set#Empty(): Set, M3.Tuple.snd(r#2)), 
                      $Unbox(M3.Tuple.snd(rr#2)): Set)))))));
}

function M3.__default.evalArgs#canCall(context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: DatatypeType, 
    env#0: DatatypeType)
   : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, 
    context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: DatatypeType, 
    env#0: DatatypeType :: 
  { M3.__default.evalArgs($LS($ly), context#0, args#0, stOrig#0, env#0) } 
  M3.__default.evalArgs($LS($ly), context#0, args#0, stOrig#0, env#0)
     == M3.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, 
    context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: DatatypeType, 
    env#0: DatatypeType :: 
  { M3.__default.evalArgs(AsFuelBottom($ly), context#0, args#0, stOrig#0, env#0) } 
  M3.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0)
     == M3.__default.evalArgs($LZ, context#0, args#0, stOrig#0, env#0));

function M3.__default.evalArgs#requires(LayerType, DatatypeType, Seq, DatatypeType, DatatypeType) : bool;

// #requires axiom for M3.__default.evalArgs
axiom (forall $ly: LayerType, 
    context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: DatatypeType, 
    env#0: DatatypeType :: 
  { M3.__default.evalArgs#requires($ly, context#0, args#0, stOrig#0, env#0) } 
  $Is(context#0, Tclass.M3.Expression())
       && $Is(args#0, TSeq(Tclass.M3.Expression()))
       && $Is(stOrig#0, Tclass.M3.State())
       && $Is(env#0, Tclass.M3.Env())
     ==> M3.__default.evalArgs#requires($ly, context#0, args#0, stOrig#0, env#0)
       == (M3.__default.ValidEnv(env#0)
         && (forall arg#1: DatatypeType :: 
          { Seq#Contains(args#0, $Box(arg#1)) } 
          $Is(arg#1, Tclass.M3.Expression())
             ==> 
            Seq#Contains(args#0, $Box(arg#1))
             ==> DtRank(arg#1) < DtRank(context#0))));

procedure {:verboseName "M3.evalArgs (well-formedness)"} CheckWellformed$$M3.__default.evalArgs(context#0: DatatypeType where $Is(context#0, Tclass.M3.Expression()), 
    args#0: Seq where $Is(args#0, TSeq(Tclass.M3.Expression())), 
    stOrig#0: DatatypeType where $Is(stOrig#0, Tclass.M3.State()), 
    env#0: DatatypeType where $Is(env#0, Tclass.M3.Env()));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.Arity
function M3.__default.Arity(prim#0: DatatypeType) : int
uses {
// consequence axiom for M3.__default.Arity
axiom 1 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType :: 
    { M3.__default.Arity(prim#0) } 
    M3.__default.Arity#canCall(prim#0)
         || (1 < $FunctionContextHeight && $Is(prim#0, Tclass.M3.Primitive()))
       ==> LitInt(0) <= M3.__default.Arity(prim#0));
// definition axiom for M3.__default.Arity (revealed)
axiom {:id "id2964"} 1 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType :: 
    { M3.__default.Arity(prim#0) } 
    M3.__default.Arity#canCall(prim#0)
         || (1 < $FunctionContextHeight && $Is(prim#0, Tclass.M3.Primitive()))
       ==> M3.__default.Arity(prim#0)
         == (if M3.Primitive.primCreatePath_q(prim#0) then 1 else 3));
// definition axiom for M3.__default.Arity for all literals (revealed)
axiom {:id "id2965"} 1 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType :: 
    {:weight 3} { M3.__default.Arity(Lit(prim#0)) } 
    M3.__default.Arity#canCall(Lit(prim#0))
         || (1 < $FunctionContextHeight && $Is(prim#0, Tclass.M3.Primitive()))
       ==> M3.__default.Arity(Lit(prim#0))
         == (if M3.Primitive.primCreatePath_q(Lit(prim#0)) then 1 else 3));
}

function M3.__default.Arity#canCall(prim#0: DatatypeType) : bool;

function M3.__default.Arity#requires(DatatypeType) : bool;

// #requires axiom for M3.__default.Arity
axiom (forall prim#0: DatatypeType :: 
  { M3.__default.Arity#requires(prim#0) } 
  $Is(prim#0, Tclass.M3.Primitive())
     ==> M3.__default.Arity#requires(prim#0) == true);

procedure {:verboseName "M3.Arity (well-formedness)"} CheckWellformed$$M3.__default.Arity(prim#0: DatatypeType where $Is(prim#0, Tclass.M3.Primitive()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M3._default.ValidArgs
function M3.__default.ValidArgs(prim#0: DatatypeType, args#0: Seq, st#0: DatatypeType) : bool
uses {
// definition axiom for M3.__default.ValidArgs (revealed)
axiom {:id "id2970"} 7 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType, args#0: Seq, st#0: DatatypeType :: 
    { M3.__default.ValidArgs(prim#0, args#0, st#0) } 
    M3.__default.ValidArgs#canCall(prim#0, args#0, st#0)
         || (7 < $FunctionContextHeight
           && 
          $Is(prim#0, Tclass.M3.Primitive())
           && $Is(args#0, TSeq(Tclass.M3.Expression()))
           && $Is(st#0, Tclass.M3.State())
           && 
          (M3.Primitive.primExec_q(prim#0) ==> Seq#Length(args#0) == LitInt(3))
           && (M3.Primitive.primCreatePath_q(prim#0) ==> Seq#Length(args#0) == LitInt(1)))
       ==> (!M3.Primitive.primCreatePath_q(prim#0)
           ==> (var cmd#1, deps#1, exps#1 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
              $Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType, 
              $Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType; 
            M3.Expression.exprLiteral_q(cmd#1)
               ==> 
              M3.Literal.litString_q(M3.Expression.lit(cmd#1))
               ==> 
              M3.Expression.exprLiteral_q(deps#1)
               ==> 
              M3.Literal.litArrOfPaths_q(M3.Expression.lit(deps#1))
               ==> 
              M3.Expression.exprLiteral_q(exps#1)
               ==> 
              M3.Literal.litArrOfStrings_q(M3.Expression.lit(exps#1))
               ==> M3.__default.DomSt#canCall(st#0)
                 && (Set#Subset(M3.Literal.paths(M3.Expression.lit(deps#1)), M3.__default.DomSt(st#0))
                   ==> M3.__default.Pre#canCall(M3.Literal.str(M3.Expression.lit(cmd#1)), 
                    M3.Literal.paths(M3.Expression.lit(deps#1)), 
                    M3.Literal.strs(M3.Expression.lit(exps#1)), 
                    st#0))))
         && M3.__default.ValidArgs(prim#0, args#0, st#0)
           == (if M3.Primitive.primCreatePath_q(prim#0)
             then false
             else (var cmd#0, deps#0, exps#0 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
                $Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType, 
                $Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType; 
              M3.Expression.exprLiteral_q(cmd#0)
                 && M3.Literal.litString_q(M3.Expression.lit(cmd#0))
                 && M3.Expression.exprLiteral_q(deps#0)
                 && M3.Literal.litArrOfPaths_q(M3.Expression.lit(deps#0))
                 && M3.Expression.exprLiteral_q(exps#0)
                 && M3.Literal.litArrOfStrings_q(M3.Expression.lit(exps#0))
                 && Set#Subset(M3.Literal.paths(M3.Expression.lit(deps#0)), M3.__default.DomSt(st#0))
                 && M3.__default.Pre(M3.Literal.str(M3.Expression.lit(cmd#0)), 
                  M3.Literal.paths(M3.Expression.lit(deps#0)), 
                  M3.Literal.strs(M3.Expression.lit(exps#0)), 
                  st#0))));
// definition axiom for M3.__default.ValidArgs for decreasing-related literals (revealed)
axiom {:id "id2971"} 7 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType, args#0: Seq, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.ValidArgs(Lit(prim#0), Lit(args#0), st#0) } 
    M3.__default.ValidArgs#canCall(Lit(prim#0), Lit(args#0), st#0)
         || (7 < $FunctionContextHeight
           && 
          $Is(prim#0, Tclass.M3.Primitive())
           && $Is(args#0, TSeq(Tclass.M3.Expression()))
           && $Is(st#0, Tclass.M3.State())
           && 
          (M3.Primitive.primExec_q(Lit(prim#0)) ==> Seq#Length(Lit(args#0)) == LitInt(3))
           && (M3.Primitive.primCreatePath_q(Lit(prim#0))
             ==> Seq#Length(Lit(args#0)) == LitInt(1)))
       ==> (!Lit(M3.Primitive.primCreatePath_q(Lit(prim#0)))
           ==> (var cmd#3, deps#3, exps#3 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
            M3.Expression.exprLiteral_q(cmd#3)
               ==> 
              M3.Literal.litString_q(M3.Expression.lit(cmd#3))
               ==> 
              M3.Expression.exprLiteral_q(deps#3)
               ==> 
              M3.Literal.litArrOfPaths_q(M3.Expression.lit(deps#3))
               ==> 
              M3.Expression.exprLiteral_q(exps#3)
               ==> 
              M3.Literal.litArrOfStrings_q(M3.Expression.lit(exps#3))
               ==> M3.__default.DomSt#canCall(st#0)
                 && (Set#Subset(M3.Literal.paths(M3.Expression.lit(deps#3)), M3.__default.DomSt(st#0))
                   ==> M3.__default.Pre#canCall(M3.Literal.str(M3.Expression.lit(cmd#3)), 
                    M3.Literal.paths(M3.Expression.lit(deps#3)), 
                    M3.Literal.strs(M3.Expression.lit(exps#3)), 
                    st#0))))
         && M3.__default.ValidArgs(Lit(prim#0), Lit(args#0), st#0)
           == (if M3.Primitive.primCreatePath_q(Lit(prim#0))
             then false
             else (var cmd#2, deps#2, exps#2 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
              M3.Expression.exprLiteral_q(cmd#2)
                 && M3.Literal.litString_q(M3.Expression.lit(cmd#2))
                 && M3.Expression.exprLiteral_q(deps#2)
                 && M3.Literal.litArrOfPaths_q(M3.Expression.lit(deps#2))
                 && M3.Expression.exprLiteral_q(exps#2)
                 && M3.Literal.litArrOfStrings_q(M3.Expression.lit(exps#2))
                 && Set#Subset(M3.Literal.paths(M3.Expression.lit(deps#2)), M3.__default.DomSt(st#0))
                 && M3.__default.Pre(M3.Literal.str(M3.Expression.lit(cmd#2)), 
                  M3.Literal.paths(M3.Expression.lit(deps#2)), 
                  M3.Literal.strs(M3.Expression.lit(exps#2)), 
                  st#0))));
// definition axiom for M3.__default.ValidArgs for all literals (revealed)
axiom {:id "id2972"} 7 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType, args#0: Seq, st#0: DatatypeType :: 
    {:weight 3} { M3.__default.ValidArgs(Lit(prim#0), Lit(args#0), Lit(st#0)) } 
    M3.__default.ValidArgs#canCall(Lit(prim#0), Lit(args#0), Lit(st#0))
         || (7 < $FunctionContextHeight
           && 
          $Is(prim#0, Tclass.M3.Primitive())
           && $Is(args#0, TSeq(Tclass.M3.Expression()))
           && $Is(st#0, Tclass.M3.State())
           && 
          (M3.Primitive.primExec_q(Lit(prim#0)) ==> Seq#Length(Lit(args#0)) == LitInt(3))
           && (M3.Primitive.primCreatePath_q(Lit(prim#0))
             ==> Seq#Length(Lit(args#0)) == LitInt(1)))
       ==> (!Lit(M3.Primitive.primCreatePath_q(Lit(prim#0)))
           ==> (var cmd#5, deps#5, exps#5 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
            M3.Expression.exprLiteral_q(cmd#5)
               ==> 
              M3.Literal.litString_q(M3.Expression.lit(cmd#5))
               ==> 
              M3.Expression.exprLiteral_q(deps#5)
               ==> 
              M3.Literal.litArrOfPaths_q(M3.Expression.lit(deps#5))
               ==> 
              M3.Expression.exprLiteral_q(exps#5)
               ==> 
              M3.Literal.litArrOfStrings_q(M3.Expression.lit(exps#5))
               ==> M3.__default.DomSt#canCall(Lit(st#0))
                 && (Set#Subset(M3.Literal.paths(M3.Expression.lit(deps#5)), M3.__default.DomSt(Lit(st#0)))
                   ==> M3.__default.Pre#canCall(M3.Literal.str(M3.Expression.lit(cmd#5)), 
                    M3.Literal.paths(M3.Expression.lit(deps#5)), 
                    M3.Literal.strs(M3.Expression.lit(exps#5)), 
                    Lit(st#0)))))
         && M3.__default.ValidArgs(Lit(prim#0), Lit(args#0), Lit(st#0))
           == (if M3.Primitive.primCreatePath_q(Lit(prim#0))
             then false
             else (var cmd#4, deps#4, exps#4 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
              M3.Expression.exprLiteral_q(cmd#4)
                 && M3.Literal.litString_q(M3.Expression.lit(cmd#4))
                 && M3.Expression.exprLiteral_q(deps#4)
                 && M3.Literal.litArrOfPaths_q(M3.Expression.lit(deps#4))
                 && M3.Expression.exprLiteral_q(exps#4)
                 && M3.Literal.litArrOfStrings_q(M3.Expression.lit(exps#4))
                 && Set#Subset(M3.Literal.paths(M3.Expression.lit(deps#4)), M3.__default.DomSt(Lit(st#0)))
                 && M3.__default.Pre(M3.Literal.str(M3.Expression.lit(cmd#4)), 
                  M3.Literal.paths(M3.Expression.lit(deps#4)), 
                  M3.Literal.strs(M3.Expression.lit(exps#4)), 
                  Lit(st#0)))));
}

function M3.__default.ValidArgs#canCall(prim#0: DatatypeType, args#0: Seq, st#0: DatatypeType) : bool;

function M3.__default.ValidArgs#requires(DatatypeType, Seq, DatatypeType) : bool;

// #requires axiom for M3.__default.ValidArgs
axiom (forall prim#0: DatatypeType, args#0: Seq, st#0: DatatypeType :: 
  { M3.__default.ValidArgs#requires(prim#0, args#0, st#0) } 
  $Is(prim#0, Tclass.M3.Primitive())
       && $Is(args#0, TSeq(Tclass.M3.Expression()))
       && $Is(st#0, Tclass.M3.State())
     ==> M3.__default.ValidArgs#requires(prim#0, args#0, st#0)
       == ((M3.Primitive.primExec_q(prim#0) ==> Seq#Length(args#0) == LitInt(3))
         && (M3.Primitive.primCreatePath_q(prim#0) ==> Seq#Length(args#0) == LitInt(1))));

procedure {:verboseName "M3.ValidArgs (well-formedness)"} CheckWellformed$$M3.__default.ValidArgs(prim#0: DatatypeType where $Is(prim#0, Tclass.M3.Primitive()), 
    args#0: Seq where $Is(args#0, TSeq(Tclass.M3.Expression())), 
    st#0: DatatypeType where $Is(st#0, Tclass.M3.State()));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.ParallelBuildsTheorem (well-formedness)"} CheckWellFormed$$M3.__default.ParallelBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M3.Program())
         && $IsAlloc(prog#0, Tclass.M3.Program(), $Heap)
         && $IsA#M3.Program(prog#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  free requires 15 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.ParallelBuildsTheorem (call)"} Call$$M3.__default.ParallelBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M3.Program())
         && $IsAlloc(prog#0, Tclass.M3.Program(), $Heap)
         && $IsA#M3.Program(prog#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0));
  // user-defined preconditions
  requires {:id "id3007"} M3.__default.Legal#canCall(M3.Program.stmts(prog#0))
     ==> M3.__default.Legal(M3.Program.stmts(prog#0))
       || Seq#Length(M3.Program.stmts(prog#0)) != 0;
  requires {:id "id3008"} M3.__default.ValidState#canCall(st#0)
     ==> M3.__default.ValidState(st#0)
       || (forall p#0: DatatypeType :: 
        { M3.__default.WellFounded(p#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
        $Is(p#0, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
           ==> M3.__default.WellFounded(p#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.build#canCall(prog#0, st#0)
     && (var expr'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.build(prog#0, st#0))): DatatypeType, 
        $Unbox(M3.Tuple.snd(M3.__default.build(prog#0, st#0))): DatatypeType; 
      M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> 
          M3.Expression.exprError_q(expr'#0)
           ==> $IsA#M3.Reason(M3.Expression.r(expr'#0))));
  free ensures {:id "id3009"} (var expr'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.build(prog#0, st#0))): DatatypeType, 
      $Unbox(M3.Tuple.snd(M3.__default.build(prog#0, st#0))): DatatypeType; 
    M3.__default.ValidState#canCall(st'#0)
       && 
      M3.__default.ValidState(st'#0)
       && (forall p#1: DatatypeType :: 
        { M3.__default.WellFounded(p#1) } 
          { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1)) } 
        $Is(p#1, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1))
           ==> M3.__default.WellFounded(p#1)));
  ensures {:id "id3010"} (var expr'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.build(prog#0, st#0))): DatatypeType, 
      $Unbox(M3.Tuple.snd(M3.__default.build(prog#0, st#0))): DatatypeType; 
    M3.Expression.exprError_q(expr'#0)
       ==> M3.Reason#Equal(M3.Expression.r(expr'#0), #M3.Reason.rValidity()));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.ParallelBuildsTheorem (correctness)"} Impl$$M3.__default.ParallelBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M3.Program())
         && $IsAlloc(prog#0, Tclass.M3.Program(), $Heap)
         && $IsA#M3.Program(prog#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0))
   returns ($_reverifyPost: bool);
  free requires 15 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id3011"} M3.__default.Legal#canCall(M3.Program.stmts(prog#0))
     && 
    M3.__default.Legal(M3.Program.stmts(prog#0))
     && Seq#Length(M3.Program.stmts(prog#0)) != 0;
  free requires {:id "id3012"} M3.__default.ValidState#canCall(st#0)
     && 
    M3.__default.ValidState(st#0)
     && (forall p#2: DatatypeType :: 
      { M3.__default.WellFounded(p#2) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
      $Is(p#2, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2))
         ==> M3.__default.WellFounded(p#2));
  modifies $Heap;
  // user-defined postconditions
  free ensures M3.__default.build#canCall(prog#0, st#0)
     && (var expr'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.build(prog#0, st#0))): DatatypeType, 
        $Unbox(M3.Tuple.snd(M3.__default.build(prog#0, st#0))): DatatypeType; 
      M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> 
          M3.Expression.exprError_q(expr'#0)
           ==> $IsA#M3.Reason(M3.Expression.r(expr'#0))));
  ensures {:id "id3013"} $_reverifyPost
     ==> (var expr'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.build(prog#0, st#0))): DatatypeType, 
        $Unbox(M3.Tuple.snd(M3.__default.build(prog#0, st#0))): DatatypeType; 
      M3.__default.ValidState#canCall(st'#0)
         ==> M3.__default.ValidState(st'#0)
           || (forall p#3: DatatypeType :: 
            { M3.__default.WellFounded(p#3) } 
              { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3)) } 
            $Is(p#3, Tclass.M3.Path())
               ==> 
              Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3))
               ==> M3.__default.WellFounded(p#3)));
  ensures {:id "id3014"} $_reverifyPost
     ==> (var expr'#0, st'#0 := $Unbox(M3.Tuple.fst(M3.__default.build(prog#0, st#0))): DatatypeType, 
        $Unbox(M3.Tuple.snd(M3.__default.build(prog#0, st#0))): DatatypeType; 
      M3.Expression.exprError_q(expr'#0)
         ==> M3.Reason#Equal(M3.Expression.r(expr'#0), #M3.Reason.rValidity()));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.ParallelBuildsTheorem (correctness)"} Impl$$M3.__default.ParallelBuildsTheorem(prog#0: DatatypeType, st#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var _v0#0: DatatypeType
     where $Is(_v0#0, Tclass.M3.Expression())
       && $IsAlloc(_v0#0, Tclass.M3.Expression(), $Heap);
  var _v1#0: DatatypeType
     where $Is(_v1#0, Tclass.M3.State()) && $IsAlloc(_v1#0, Tclass.M3.State(), $Heap);
  var $rhs##0: DatatypeType;
  var $rhs##1: DatatypeType;
  var prog##0: DatatypeType;
  var st##0: DatatypeType;

    // AddMethodImpl: ParallelBuildsTheorem, Impl$$M3.__default.ParallelBuildsTheorem
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](312,27)
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type Expression
    // TrCallStmt: Adding lhs with type State
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    prog##0 := prog#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    call {:id "id3015"} $rhs##0, $rhs##1 := Call$$M3.__default.BuildLemma(prog##0, st##0);
    // TrCallStmt: After ProcessCallStmt
    _v0#0 := $rhs##0;
    _v1#0 := $rhs##1;
}



procedure {:verboseName "M3.BuildLemma (well-formedness)"} CheckWellFormed$$M3.__default.BuildLemma(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M3.Program())
         && $IsAlloc(prog#0, Tclass.M3.Program(), $Heap)
         && $IsA#M3.Program(prog#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0))
   returns (expr'#0: DatatypeType
       where $Is(expr'#0, Tclass.M3.Expression())
         && $IsAlloc(expr'#0, Tclass.M3.Expression(), $Heap), 
    st'#0: DatatypeType
       where $Is(st'#0, Tclass.M3.State()) && $IsAlloc(st'#0, Tclass.M3.State(), $Heap));
  free requires 14 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.BuildLemma (call)"} Call$$M3.__default.BuildLemma(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M3.Program())
         && $IsAlloc(prog#0, Tclass.M3.Program(), $Heap)
         && $IsA#M3.Program(prog#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0))
   returns (expr'#0: DatatypeType
       where $Is(expr'#0, Tclass.M3.Expression())
         && $IsAlloc(expr'#0, Tclass.M3.Expression(), $Heap), 
    st'#0: DatatypeType
       where $Is(st'#0, Tclass.M3.State()) && $IsAlloc(st'#0, Tclass.M3.State(), $Heap));
  // user-defined preconditions
  requires {:id "id3025"} M3.__default.Legal#canCall(M3.Program.stmts(prog#0))
     ==> M3.__default.Legal(M3.Program.stmts(prog#0))
       || Seq#Length(M3.Program.stmts(prog#0)) != 0;
  requires {:id "id3026"} M3.__default.ValidState#canCall(st#0)
     ==> M3.__default.ValidState(st#0)
       || (forall p#0: DatatypeType :: 
        { M3.__default.WellFounded(p#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
        $Is(p#0, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
           ==> M3.__default.WellFounded(p#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Tuple(M3.__default.build(prog#0, st#0))
     && M3.__default.build#canCall(prog#0, st#0)
     && (M3.Tuple#Equal(M3.__default.build(prog#0, st#0), #M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)))
       ==> M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> M3.__default.Extends#canCall(st#0, st'#0)
             && (M3.__default.Extends(st#0, st'#0)
               ==> 
              M3.Expression.exprError_q(expr'#0)
               ==> $IsA#M3.Reason(M3.Expression.r(expr'#0)))));
  ensures {:id "id3027"} M3.Tuple#Equal(M3.__default.build(prog#0, st#0), #M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)));
  free ensures {:id "id3028"} M3.__default.ValidState#canCall(st'#0)
     && 
    M3.__default.ValidState(st'#0)
     && (forall p#1: DatatypeType :: 
      { M3.__default.WellFounded(p#1) } 
        { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1)) } 
      $Is(p#1, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1))
         ==> M3.__default.WellFounded(p#1));
  free ensures {:id "id3029"} M3.__default.Extends#canCall(st#0, st'#0)
     && 
    M3.__default.Extends(st#0, st'#0)
     && 
    Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0))
     && (forall p#2: DatatypeType :: 
      { M3.__default.GetSt(p#2, st#0) } 
        { M3.__default.GetSt(p#2, st'#0) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
      $Is(p#2, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st'#0), M3.__default.GetSt(p#2, st#0)))
     && (forall p#3: DatatypeType :: 
      { M3.__default.Oracle(p#3, st#0) } 
        { M3.__default.GetSt(p#3, st'#0) } 
        { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3)) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) } 
      $Is(p#3, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3))
           && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st'#0), M3.__default.Oracle(p#3, st#0)));
  ensures {:id "id3030"} M3.Expression.exprError_q(expr'#0)
     ==> M3.Reason#Equal(M3.Expression.r(expr'#0), #M3.Reason.rValidity());
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.BuildLemma (correctness)"} Impl$$M3.__default.BuildLemma(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M3.Program())
         && $IsAlloc(prog#0, Tclass.M3.Program(), $Heap)
         && $IsA#M3.Program(prog#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0))
   returns (expr'#0: DatatypeType
       where $Is(expr'#0, Tclass.M3.Expression())
         && $IsAlloc(expr'#0, Tclass.M3.Expression(), $Heap), 
    st'#0: DatatypeType
       where $Is(st'#0, Tclass.M3.State()) && $IsAlloc(st'#0, Tclass.M3.State(), $Heap), 
    $_reverifyPost: bool);
  free requires 14 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id3031"} M3.__default.Legal#canCall(M3.Program.stmts(prog#0))
     && 
    M3.__default.Legal(M3.Program.stmts(prog#0))
     && Seq#Length(M3.Program.stmts(prog#0)) != 0;
  free requires {:id "id3032"} M3.__default.ValidState#canCall(st#0)
     && 
    M3.__default.ValidState(st#0)
     && (forall p#4: DatatypeType :: 
      { M3.__default.WellFounded(p#4) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4)) } 
      $Is(p#4, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4))
         ==> M3.__default.WellFounded(p#4));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Tuple(M3.__default.build(prog#0, st#0))
     && M3.__default.build#canCall(prog#0, st#0)
     && (M3.Tuple#Equal(M3.__default.build(prog#0, st#0), #M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)))
       ==> M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> M3.__default.Extends#canCall(st#0, st'#0)
             && (M3.__default.Extends(st#0, st'#0)
               ==> 
              M3.Expression.exprError_q(expr'#0)
               ==> $IsA#M3.Reason(M3.Expression.r(expr'#0)))));
  ensures {:id "id3033"} $_reverifyPost
     ==> M3.Tuple#Equal(M3.__default.build(prog#0, st#0), #M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)));
  ensures {:id "id3034"} $_reverifyPost
     ==> 
    M3.__default.ValidState#canCall(st'#0)
     ==> M3.__default.ValidState(st'#0)
       || (forall p#5: DatatypeType :: 
        { M3.__default.WellFounded(p#5) } 
          { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#5)) } 
        $Is(p#5, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#5))
           ==> M3.__default.WellFounded(p#5));
  ensures {:id "id3035"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st#0, st'#0)
     ==> M3.__default.Extends(st#0, st'#0)
       || Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0));
  ensures {:id "id3036"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st#0, st'#0)
     ==> M3.__default.Extends(st#0, st'#0)
       || (forall p#6: DatatypeType :: 
        { M3.__default.GetSt(p#6, st#0) } 
          { M3.__default.GetSt(p#6, st'#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6)) } 
        $Is(p#6, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#6, st'#0), M3.__default.GetSt(p#6, st#0)));
  ensures {:id "id3037"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st#0, st'#0)
     ==> M3.__default.Extends(st#0, st'#0)
       || (forall p#7: DatatypeType :: 
        { M3.__default.Oracle(p#7, st#0) } 
          { M3.__default.GetSt(p#7, st'#0) } 
          { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#7)) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7)) } 
        $Is(p#7, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7))
             && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#7))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#7, st'#0), M3.__default.Oracle(p#7, st#0)));
  ensures {:id "id3038"} $_reverifyPost
     ==> 
    M3.Expression.exprError_q(expr'#0)
     ==> M3.Reason#Equal(M3.Expression.r(expr'#0), #M3.Reason.rValidity());
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.BuildLemma (correctness)"} Impl$$M3.__default.BuildLemma(prog#0: DatatypeType, st#0: DatatypeType)
   returns (expr'#0: DatatypeType, st'#0: DatatypeType, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var result#0: DatatypeType
     where $Is(result#0, Tclass.M3.Tuple(Tclass.M3.Expression(), Tclass.M3.State()))
       && $IsAlloc(result#0, Tclass.M3.Tuple(Tclass.M3.Expression(), Tclass.M3.State()), $Heap);
  var ##prog#1: DatatypeType;
  var ##st#4: DatatypeType;
  var $rhs#0: DatatypeType;
  var $rhs#1: DatatypeType;
  var _v2#0: DatatypeType
     where $Is(_v2#0, Tclass.M3.Expression())
       && $IsAlloc(_v2#0, Tclass.M3.Expression(), $Heap);
  var _v3#0: DatatypeType
     where $Is(_v3#0, Tclass.M3.State()) && $IsAlloc(_v3#0, Tclass.M3.State(), $Heap);
  var $rhs##0: DatatypeType;
  var $rhs##1: DatatypeType;
  var stmts##0: Seq;
  var st##0: DatatypeType;
  var env##0: DatatypeType;

    // AddMethodImpl: BuildLemma, Impl$$M3.__default.BuildLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(323,16)
    assume true;
    ##prog#1 := prog#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##prog#1, Tclass.M3.Program(), $Heap);
    ##st#4 := st#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##st#4, Tclass.M3.State(), $Heap);
    assume true;
    assume M3.__default.Legal(M3.Program.stmts(##prog#1));
    assume M3.__default.build#canCall(prog#0, st#0);
    assume M3.Tuple.Pair_q(M3.__default.build(prog#0, st#0));
    assume M3.__default.build#canCall(prog#0, st#0);
    result#0 := M3.__default.build(prog#0, st#0);
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(324,16)
    assume true;
    assume true;
    assume M3.Tuple.Pair_q(result#0);
    assume M3.Tuple.Pair_q(result#0);
    $rhs#0 := $Unbox(M3.Tuple.fst(result#0)): DatatypeType;
    assume M3.Tuple.Pair_q(result#0);
    assume M3.Tuple.Pair_q(result#0);
    $rhs#1 := $Unbox(M3.Tuple.snd(result#0)): DatatypeType;
    expr'#0 := $rhs#0;
    st'#0 := $rhs#1;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](325,24)
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type Expression
    // TrCallStmt: Adding lhs with type State
    // TrCallStmt: Before ProcessCallStmt
    assume M3.Program.Program_q(prog#0);
    assume M3.Program.Program_q(prog#0);
    // ProcessCallStmt: CheckSubrange
    stmts##0 := M3.Program.stmts(prog#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    assume M3.__default.EmptyEnv#canCall();
    assume M3.Env.EnvCons_q(Lit(M3.__default.EmptyEnv()));
    assume M3.__default.EmptyEnv#canCall();
    // ProcessCallStmt: CheckSubrange
    env##0 := Lit(M3.__default.EmptyEnv());
    call {:id "id3044"} $rhs##0, $rhs##1 := Call$$M3.__default.DoLemma(stmts##0, st##0, env##0);
    // TrCallStmt: After ProcessCallStmt
    _v2#0 := $rhs##0;
    _v3#0 := $rhs##1;
}



procedure {:verboseName "M3.DoLemma (well-formedness)"} CheckWellFormed$$M3.__default.DoLemma(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass.M3.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass.M3.Statement()), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0), 
    env#0: DatatypeType
       where $Is(env#0, Tclass.M3.Env())
         && $IsAlloc(env#0, Tclass.M3.Env(), $Heap)
         && $IsA#M3.Env(env#0))
   returns (expr'#0: DatatypeType
       where $Is(expr'#0, Tclass.M3.Expression())
         && $IsAlloc(expr'#0, Tclass.M3.Expression(), $Heap), 
    st'#0: DatatypeType
       where $Is(st'#0, Tclass.M3.State()) && $IsAlloc(st'#0, Tclass.M3.State(), $Heap));
  free requires 13 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.DoLemma (call)"} Call$$M3.__default.DoLemma(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass.M3.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass.M3.Statement()), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0), 
    env#0: DatatypeType
       where $Is(env#0, Tclass.M3.Env())
         && $IsAlloc(env#0, Tclass.M3.Env(), $Heap)
         && $IsA#M3.Env(env#0))
   returns (expr'#0: DatatypeType
       where $Is(expr'#0, Tclass.M3.Expression())
         && $IsAlloc(expr'#0, Tclass.M3.Expression(), $Heap), 
    st'#0: DatatypeType
       where $Is(st'#0, Tclass.M3.State()) && $IsAlloc(st'#0, Tclass.M3.State(), $Heap));
  // user-defined preconditions
  requires {:id "id3055"} M3.__default.Legal#canCall(stmts#0)
     ==> M3.__default.Legal(stmts#0) || Seq#Length(stmts#0) != 0;
  requires {:id "id3056"} M3.__default.ValidState#canCall(st#0)
     ==> M3.__default.ValidState(st#0)
       || (forall p#0: DatatypeType :: 
        { M3.__default.WellFounded(p#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
        $Is(p#0, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
           ==> M3.__default.WellFounded(p#0));
  requires {:id "id3057"} M3.__default.ValidEnv(env#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Tuple(M3.__default.do($LS($LZ), stmts#0, st#0, env#0))
     && M3.__default.do#canCall(stmts#0, st#0, env#0)
     && (M3.Tuple#Equal(#M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)), 
        M3.__default.do($LS($LZ), stmts#0, st#0, env#0))
       ==> M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> M3.__default.Extends#canCall(st#0, st'#0)
             && (M3.__default.Extends(st#0, st'#0)
               ==> 
              M3.Expression.exprError_q(expr'#0)
               ==> $IsA#M3.Reason(M3.Expression.r(expr'#0)))));
  ensures {:id "id3058"} M3.Tuple#Equal(#M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)), 
    M3.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0));
  free ensures {:id "id3059"} M3.__default.ValidState#canCall(st'#0)
     && 
    M3.__default.ValidState(st'#0)
     && (forall p#1: DatatypeType :: 
      { M3.__default.WellFounded(p#1) } 
        { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1)) } 
      $Is(p#1, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1))
         ==> M3.__default.WellFounded(p#1));
  free ensures {:id "id3060"} M3.__default.Extends#canCall(st#0, st'#0)
     && 
    M3.__default.Extends(st#0, st'#0)
     && 
    Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0))
     && (forall p#2: DatatypeType :: 
      { M3.__default.GetSt(p#2, st#0) } 
        { M3.__default.GetSt(p#2, st'#0) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
      $Is(p#2, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st'#0), M3.__default.GetSt(p#2, st#0)))
     && (forall p#3: DatatypeType :: 
      { M3.__default.Oracle(p#3, st#0) } 
        { M3.__default.GetSt(p#3, st'#0) } 
        { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3)) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) } 
      $Is(p#3, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3))
           && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st'#0), M3.__default.Oracle(p#3, st#0)));
  ensures {:id "id3061"} M3.Expression.exprError_q(expr'#0)
     ==> M3.Reason#Equal(M3.Expression.r(expr'#0), #M3.Reason.rValidity());
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.DoLemma (correctness)"} Impl$$M3.__default.DoLemma(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass.M3.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass.M3.Statement()), $Heap), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0), 
    env#0: DatatypeType
       where $Is(env#0, Tclass.M3.Env())
         && $IsAlloc(env#0, Tclass.M3.Env(), $Heap)
         && $IsA#M3.Env(env#0))
   returns (expr'#0: DatatypeType
       where $Is(expr'#0, Tclass.M3.Expression())
         && $IsAlloc(expr'#0, Tclass.M3.Expression(), $Heap), 
    st'#0: DatatypeType
       where $Is(st'#0, Tclass.M3.State()) && $IsAlloc(st'#0, Tclass.M3.State(), $Heap), 
    $_reverifyPost: bool);
  free requires 13 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id3062"} M3.__default.Legal#canCall(stmts#0)
     && 
    M3.__default.Legal(stmts#0)
     && Seq#Length(stmts#0) != 0;
  free requires {:id "id3063"} M3.__default.ValidState#canCall(st#0)
     && 
    M3.__default.ValidState(st#0)
     && (forall p#4: DatatypeType :: 
      { M3.__default.WellFounded(p#4) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4)) } 
      $Is(p#4, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4))
         ==> M3.__default.WellFounded(p#4));
  requires {:id "id3064"} M3.__default.ValidEnv(env#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Tuple(M3.__default.do($LS($LZ), stmts#0, st#0, env#0))
     && M3.__default.do#canCall(stmts#0, st#0, env#0)
     && (M3.Tuple#Equal(#M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)), 
        M3.__default.do($LS($LZ), stmts#0, st#0, env#0))
       ==> M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> M3.__default.Extends#canCall(st#0, st'#0)
             && (M3.__default.Extends(st#0, st'#0)
               ==> 
              M3.Expression.exprError_q(expr'#0)
               ==> $IsA#M3.Reason(M3.Expression.r(expr'#0)))));
  ensures {:id "id3065"} $_reverifyPost
     ==> M3.Tuple#Equal(#M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)), 
      M3.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0));
  ensures {:id "id3066"} $_reverifyPost
     ==> 
    M3.__default.ValidState#canCall(st'#0)
     ==> M3.__default.ValidState(st'#0)
       || (forall p#5: DatatypeType :: 
        { M3.__default.WellFounded(p#5) } 
          { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#5)) } 
        $Is(p#5, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#5))
           ==> M3.__default.WellFounded(p#5));
  ensures {:id "id3067"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st#0, st'#0)
     ==> M3.__default.Extends(st#0, st'#0)
       || Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0));
  ensures {:id "id3068"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st#0, st'#0)
     ==> M3.__default.Extends(st#0, st'#0)
       || (forall p#6: DatatypeType :: 
        { M3.__default.GetSt(p#6, st#0) } 
          { M3.__default.GetSt(p#6, st'#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6)) } 
        $Is(p#6, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#6, st'#0), M3.__default.GetSt(p#6, st#0)));
  ensures {:id "id3069"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st#0, st'#0)
     ==> M3.__default.Extends(st#0, st'#0)
       || (forall p#7: DatatypeType :: 
        { M3.__default.Oracle(p#7, st#0) } 
          { M3.__default.GetSt(p#7, st'#0) } 
          { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#7)) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7)) } 
        $Is(p#7, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7))
             && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#7))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#7, st'#0), M3.__default.Oracle(p#7, st#0)));
  ensures {:id "id3070"} $_reverifyPost
     ==> 
    M3.Expression.exprError_q(expr'#0)
     ==> M3.Reason#Equal(M3.Expression.r(expr'#0), #M3.Reason.rValidity());
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.DoLemma (correctness)"} Impl$$M3.__default.DoLemma(stmts#0: Seq, st#0: DatatypeType, env#0: DatatypeType)
   returns (expr'#0: DatatypeType, st'#0: DatatypeType, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var result#0: DatatypeType
     where $Is(result#0, Tclass.M3.Tuple(Tclass.M3.Expression(), Tclass.M3.State()))
       && $IsAlloc(result#0, Tclass.M3.Tuple(Tclass.M3.Expression(), Tclass.M3.State()), $Heap);
  var ##stmts#2: Seq;
  var ##st#4: DatatypeType;
  var ##env#2: DatatypeType;
  var $rhs#0: DatatypeType;
  var $rhs#1: DatatypeType;
  var stmt#0: DatatypeType
     where $Is(stmt#0, Tclass.M3.Statement())
       && $IsAlloc(stmt#0, Tclass.M3.Statement(), $Heap);
  var expr'#0_0: DatatypeType
     where $Is(expr'#0_0, Tclass.M3.Expression())
       && $IsAlloc(expr'#0_0, Tclass.M3.Expression(), $Heap);
  var st'#0_0: DatatypeType
     where $Is(st'#0_0, Tclass.M3.State()) && $IsAlloc(st'#0_0, Tclass.M3.State(), $Heap);
  var $rhs##0_0: DatatypeType;
  var $rhs##0_1: DatatypeType;
  var expr##0_0: DatatypeType;
  var st##0_0: DatatypeType;
  var env##0_0: DatatypeType;
  var ##expr#0_0: DatatypeType;
  var env'#0_0_0: DatatypeType
     where $Is(env'#0_0_0, Tclass.M3.Env()) && $IsAlloc(env'#0_0_0, Tclass.M3.Env(), $Heap);
  var ##id#0_0_0: DatatypeType;
  var ##expr#0_0_0: DatatypeType;
  var ##env#0_0_0: DatatypeType;
  var ##stmts#0_0_0: Seq;
  var _v4#0_0_0_0: DatatypeType
     where $Is(_v4#0_0_0_0, Tclass.M3.Expression())
       && $IsAlloc(_v4#0_0_0_0, Tclass.M3.Expression(), $Heap);
  var st''#0_0_0_0: DatatypeType
     where $Is(st''#0_0_0_0, Tclass.M3.State())
       && $IsAlloc(st''#0_0_0_0, Tclass.M3.State(), $Heap);
  var $rhs##0_0_0_0: DatatypeType;
  var $rhs##0_0_0_1: DatatypeType;
  var stmts##0_0_0_0: Seq;
  var st##0_0_0_0: DatatypeType;
  var env##0_0_0_0: DatatypeType;
  var st0##0_0_0_0: DatatypeType;
  var st1##0_0_0_0: DatatypeType;
  var st2##0_0_0_0: DatatypeType;
  var _v5#1_0: DatatypeType
     where $Is(_v5#1_0, Tclass.M3.Expression())
       && $IsAlloc(_v5#1_0, Tclass.M3.Expression(), $Heap);
  var _v6#1_0: DatatypeType
     where $Is(_v6#1_0, Tclass.M3.State()) && $IsAlloc(_v6#1_0, Tclass.M3.State(), $Heap);
  var $rhs##1_0: DatatypeType;
  var $rhs##1_1: DatatypeType;
  var expr##1_0: DatatypeType;
  var st##1_0: DatatypeType;
  var env##1_0: DatatypeType;

    // AddMethodImpl: DoLemma, Impl$$M3.__default.DoLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(336,16)
    assume true;
    ##stmts#2 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#2, TSeq(Tclass.M3.Statement()), $Heap);
    ##st#4 := st#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##st#4, Tclass.M3.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##env#2, Tclass.M3.Env(), $Heap);
    assume true;
    assume true;
    assume M3.__default.Legal(##stmts#2) && M3.__default.ValidEnv(##env#2);
    assume M3.__default.do#canCall(stmts#0, st#0, env#0);
    assume M3.Tuple.Pair_q(M3.__default.do($LS($LZ), stmts#0, st#0, env#0));
    assume M3.__default.do#canCall(stmts#0, st#0, env#0);
    result#0 := M3.__default.do($LS($LZ), stmts#0, st#0, env#0);
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(337,16)
    assume true;
    assume true;
    assume M3.Tuple.Pair_q(result#0);
    assume M3.Tuple.Pair_q(result#0);
    $rhs#0 := $Unbox(M3.Tuple.fst(result#0)): DatatypeType;
    assume M3.Tuple.Pair_q(result#0);
    assume M3.Tuple.Pair_q(result#0);
    $rhs#1 := $Unbox(M3.Tuple.snd(result#0)): DatatypeType;
    expr'#0 := $rhs#0;
    st'#0 := $rhs#1;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(338,14)
    assume true;
    assume {:id "id3076"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(stmts#0);
    assume true;
    stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](339,5)
    assume true;
    if (M3.Statement.stmtVariable_q(stmt#0))
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](340,34)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assume {:id "id3078"} M3.Statement.stmtVariable_q(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##0_0 := M3.Statement.expr(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##0_0 := st#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##0_0 := env#0;
        call {:id "id3079"} $rhs##0_0, $rhs##0_1 := Call$$M3.__default.EvalLemma(expr##0_0, st##0_0, env##0_0);
        // TrCallStmt: After ProcessCallStmt
        expr'#0_0 := $rhs##0_0;
        st'#0_0 := $rhs##0_1;
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](341,7)
        ##expr#0_0 := expr'#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0_0, Tclass.M3.Expression(), $Heap);
        assume M3.__default.Value#canCall(expr'#0_0);
        assume M3.__default.Value#canCall(expr'#0_0);
        if (M3.__default.Value(expr'#0_0))
        {
            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(342,18)
            assume true;
            assume {:id "id3082"} M3.Statement.stmtVariable_q(stmt#0);
            ##id#0_0_0 := M3.Statement.id(stmt#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##id#0_0_0, Tclass.M3.Identifier(), $Heap);
            ##expr#0_0_0 := expr'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#0_0_0, Tclass.M3.Expression(), $Heap);
            ##env#0_0_0 := env#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##env#0_0_0, Tclass.M3.Env(), $Heap);
            assume true;
            assume true;
            assume M3.__default.ValidEnv(##env#0_0_0) && M3.__default.Value(##expr#0_0_0);
            assume M3.__default.SetEnv#canCall(M3.Statement.id(stmt#0), expr'#0_0, env#0);
            assume M3.Env.EnvCons_q(M3.__default.SetEnv(M3.Statement.id(stmt#0), expr'#0_0, env#0));
            assume M3.__default.SetEnv#canCall(M3.Statement.id(stmt#0), expr'#0_0, env#0);
            env'#0_0_0 := M3.__default.SetEnv(M3.Statement.id(stmt#0), expr'#0_0, env#0);
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](343,9)
            assume {:id "id3084"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
            ##stmts#0_0_0 := Seq#Drop(stmts#0, LitInt(1));
            // assume allocatedness for argument to function
            assume $IsAlloc(##stmts#0_0_0, TSeq(Tclass.M3.Statement()), $Heap);
            assume M3.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
            assume M3.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
            if (M3.__default.Legal(Seq#Drop(stmts#0, LitInt(1))))
            {
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](344,33)
                assume true;
                assume true;
                // TrCallStmt: Adding lhs with type Expression
                // TrCallStmt: Adding lhs with type State
                // TrCallStmt: Before ProcessCallStmt
                assume {:id "id3085"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                stmts##0_0_0_0 := Seq#Drop(stmts#0, LitInt(1));
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##0_0_0_0 := st'#0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                env##0_0_0_0 := env'#0_0_0;
                assume {:id "id3086"} Seq#Rank(stmts##0_0_0_0) < Seq#Rank(stmts#0);
                call {:id "id3087"} $rhs##0_0_0_0, $rhs##0_0_0_1 := Call$$M3.__default.DoLemma(stmts##0_0_0_0, st##0_0_0_0, env##0_0_0_0);
                // TrCallStmt: After ProcessCallStmt
                _v4#0_0_0_0 := $rhs##0_0_0_0;
                st''#0_0_0_0 := $rhs##0_0_0_1;
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](345,34)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                st0##0_0_0_0 := st#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st1##0_0_0_0 := st'#0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st2##0_0_0_0 := st''#0_0_0_0;
                call {:id "id3090"} Call$$M3.__default.Lemma__ExtendsTransitive(st0##0_0_0_0, st1##0_0_0_0, st2##0_0_0_0);
                // TrCallStmt: After ProcessCallStmt
            }
            else
            {
            }
        }
        else
        {
        }
    }
    else
    {
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](350,7)
        if (!M3.Statement.stmtVariable_q(stmt#0))
        {
        }

        assume true;
        assume {:id "id3091"} M3.Statement.stmtVariable_q(stmt#0) || M3.Statement.stmtReturn_q(stmt#0);
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](351,28)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assume {:id "id3092"} M3.Statement.stmtReturn_q(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##1_0 := M3.Statement.ret(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##1_0 := st#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_0 := env#0;
        call {:id "id3093"} $rhs##1_0, $rhs##1_1 := Call$$M3.__default.EvalLemma(expr##1_0, st##1_0, env##1_0);
        // TrCallStmt: After ProcessCallStmt
        _v5#1_0 := $rhs##1_0;
        _v6#1_0 := $rhs##1_1;
    }
}



procedure {:verboseName "M3.EvalLemma (well-formedness)"} CheckWellFormed$$M3.__default.EvalLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M3.Expression())
         && $IsAlloc(expr#0, Tclass.M3.Expression(), $Heap)
         && $IsA#M3.Expression(expr#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0), 
    env#0: DatatypeType
       where $Is(env#0, Tclass.M3.Env())
         && $IsAlloc(env#0, Tclass.M3.Env(), $Heap)
         && $IsA#M3.Env(env#0))
   returns (expr'#0: DatatypeType
       where $Is(expr'#0, Tclass.M3.Expression())
         && $IsAlloc(expr'#0, Tclass.M3.Expression(), $Heap), 
    st'#0: DatatypeType
       where $Is(st'#0, Tclass.M3.State()) && $IsAlloc(st'#0, Tclass.M3.State(), $Heap));
  free requires 12 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.EvalLemma (call)"} Call$$M3.__default.EvalLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M3.Expression())
         && $IsAlloc(expr#0, Tclass.M3.Expression(), $Heap)
         && $IsA#M3.Expression(expr#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0), 
    env#0: DatatypeType
       where $Is(env#0, Tclass.M3.Env())
         && $IsAlloc(env#0, Tclass.M3.Env(), $Heap)
         && $IsA#M3.Env(env#0))
   returns (expr'#0: DatatypeType
       where $Is(expr'#0, Tclass.M3.Expression())
         && $IsAlloc(expr'#0, Tclass.M3.Expression(), $Heap), 
    st'#0: DatatypeType
       where $Is(st'#0, Tclass.M3.State()) && $IsAlloc(st'#0, Tclass.M3.State(), $Heap));
  // user-defined preconditions
  requires {:id "id3103"} M3.__default.ValidState#canCall(st#0)
     ==> M3.__default.ValidState(st#0)
       || (forall p#0: DatatypeType :: 
        { M3.__default.WellFounded(p#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0)) } 
        $Is(p#0, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#0))
           ==> M3.__default.WellFounded(p#0));
  requires {:id "id3104"} M3.__default.ValidEnv(env#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Tuple(M3.__default.eval($LS($LZ), expr#0, st#0, env#0))
     && M3.__default.eval#canCall(expr#0, st#0, env#0)
     && (M3.Tuple#Equal(#M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)), 
        M3.__default.eval($LS($LZ), expr#0, st#0, env#0))
       ==> M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> M3.__default.Extends#canCall(st#0, st'#0)
             && (M3.__default.Extends(st#0, st'#0)
               ==> 
              M3.Expression.exprError_q(expr'#0)
               ==> $IsA#M3.Reason(M3.Expression.r(expr'#0)))));
  ensures {:id "id3105"} M3.Tuple#Equal(#M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)), 
    M3.__default.eval($LS($LS($LZ)), expr#0, st#0, env#0));
  free ensures {:id "id3106"} M3.__default.ValidState#canCall(st'#0)
     && 
    M3.__default.ValidState(st'#0)
     && (forall p#1: DatatypeType :: 
      { M3.__default.WellFounded(p#1) } 
        { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1)) } 
      $Is(p#1, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#1))
         ==> M3.__default.WellFounded(p#1));
  free ensures {:id "id3107"} M3.__default.Extends#canCall(st#0, st'#0)
     && 
    M3.__default.Extends(st#0, st'#0)
     && 
    Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0))
     && (forall p#2: DatatypeType :: 
      { M3.__default.GetSt(p#2, st#0) } 
        { M3.__default.GetSt(p#2, st'#0) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2)) } 
      $Is(p#2, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#2))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#2, st'#0), M3.__default.GetSt(p#2, st#0)))
     && (forall p#3: DatatypeType :: 
      { M3.__default.Oracle(p#3, st#0) } 
        { M3.__default.GetSt(p#3, st'#0) } 
        { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3)) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3)) } 
      $Is(p#3, Tclass.M3.Path())
         ==> 
        !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#3))
           && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#3))
         ==> M3.Artifact#Equal(M3.__default.GetSt(p#3, st'#0), M3.__default.Oracle(p#3, st#0)));
  ensures {:id "id3108"} M3.Expression.exprError_q(expr'#0)
     ==> M3.Reason#Equal(M3.Expression.r(expr'#0), #M3.Reason.rValidity());
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.EvalLemma (correctness)"} Impl$$M3.__default.EvalLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M3.Expression())
         && $IsAlloc(expr#0, Tclass.M3.Expression(), $Heap)
         && $IsA#M3.Expression(expr#0), 
    st#0: DatatypeType
       where $Is(st#0, Tclass.M3.State())
         && $IsAlloc(st#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(st#0), 
    env#0: DatatypeType
       where $Is(env#0, Tclass.M3.Env())
         && $IsAlloc(env#0, Tclass.M3.Env(), $Heap)
         && $IsA#M3.Env(env#0))
   returns (expr'#0: DatatypeType
       where $Is(expr'#0, Tclass.M3.Expression())
         && $IsAlloc(expr'#0, Tclass.M3.Expression(), $Heap), 
    st'#0: DatatypeType
       where $Is(st'#0, Tclass.M3.State()) && $IsAlloc(st'#0, Tclass.M3.State(), $Heap), 
    $_reverifyPost: bool);
  free requires 12 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id3109"} M3.__default.ValidState#canCall(st#0)
     && 
    M3.__default.ValidState(st#0)
     && (forall p#4: DatatypeType :: 
      { M3.__default.WellFounded(p#4) } 
        { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4)) } 
      $Is(p#4, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(st#0), $Box(p#4))
         ==> M3.__default.WellFounded(p#4));
  requires {:id "id3110"} M3.__default.ValidEnv(env#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Tuple(M3.__default.eval($LS($LZ), expr#0, st#0, env#0))
     && M3.__default.eval#canCall(expr#0, st#0, env#0)
     && (M3.Tuple#Equal(#M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)), 
        M3.__default.eval($LS($LZ), expr#0, st#0, env#0))
       ==> M3.__default.ValidState#canCall(st'#0)
         && (M3.__default.ValidState(st'#0)
           ==> M3.__default.Extends#canCall(st#0, st'#0)
             && (M3.__default.Extends(st#0, st'#0)
               ==> 
              M3.Expression.exprError_q(expr'#0)
               ==> $IsA#M3.Reason(M3.Expression.r(expr'#0)))));
  ensures {:id "id3111"} $_reverifyPost
     ==> M3.Tuple#Equal(#M3.Tuple.Pair($Box(expr'#0), $Box(st'#0)), 
      M3.__default.eval($LS($LS($LZ)), expr#0, st#0, env#0));
  ensures {:id "id3112"} $_reverifyPost
     ==> 
    M3.__default.ValidState#canCall(st'#0)
     ==> M3.__default.ValidState(st'#0)
       || (forall p#5: DatatypeType :: 
        { M3.__default.WellFounded(p#5) } 
          { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#5)) } 
        $Is(p#5, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#5))
           ==> M3.__default.WellFounded(p#5));
  ensures {:id "id3113"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st#0, st'#0)
     ==> M3.__default.Extends(st#0, st'#0)
       || Set#Subset(M3.__default.DomSt(st#0), M3.__default.DomSt(st'#0));
  ensures {:id "id3114"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st#0, st'#0)
     ==> M3.__default.Extends(st#0, st'#0)
       || (forall p#6: DatatypeType :: 
        { M3.__default.GetSt(p#6, st#0) } 
          { M3.__default.GetSt(p#6, st'#0) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6)) } 
        $Is(p#6, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(st#0), $Box(p#6))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#6, st'#0), M3.__default.GetSt(p#6, st#0)));
  ensures {:id "id3115"} $_reverifyPost
     ==> 
    M3.__default.Extends#canCall(st#0, st'#0)
     ==> M3.__default.Extends(st#0, st'#0)
       || (forall p#7: DatatypeType :: 
        { M3.__default.Oracle(p#7, st#0) } 
          { M3.__default.GetSt(p#7, st'#0) } 
          { Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#7)) } 
          { Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7)) } 
        $Is(p#7, Tclass.M3.Path())
           ==> 
          !Set#IsMember(M3.__default.DomSt(st#0), $Box(p#7))
             && Set#IsMember(M3.__default.DomSt(st'#0), $Box(p#7))
           ==> M3.Artifact#Equal(M3.__default.GetSt(p#7, st'#0), M3.__default.Oracle(p#7, st#0)));
  ensures {:id "id3116"} $_reverifyPost
     ==> 
    M3.Expression.exprError_q(expr'#0)
     ==> M3.Reason#Equal(M3.Expression.r(expr'#0), #M3.Reason.rValidity());
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.EvalLemma (correctness)"} Impl$$M3.__default.EvalLemma(expr#0: DatatypeType, st#0: DatatypeType, env#0: DatatypeType)
   returns (expr'#0: DatatypeType, st'#0: DatatypeType, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var result#0: DatatypeType
     where $Is(result#0, Tclass.M3.Tuple(Tclass.M3.Expression(), Tclass.M3.State()))
       && $IsAlloc(result#0, Tclass.M3.Tuple(Tclass.M3.Expression(), Tclass.M3.State()), $Heap);
  var ##expr#1: DatatypeType;
  var ##st#4: DatatypeType;
  var ##env#2: DatatypeType;
  var $rhs#0: DatatypeType;
  var $rhs#1: DatatypeType;
  var ##expr#2: DatatypeType;
  var cond'#1_1_0_0: DatatypeType
     where $Is(cond'#1_1_0_0, Tclass.M3.Expression())
       && $IsAlloc(cond'#1_1_0_0, Tclass.M3.Expression(), $Heap);
  var st'#1_1_0_0: DatatypeType
     where $Is(st'#1_1_0_0, Tclass.M3.State())
       && $IsAlloc(st'#1_1_0_0, Tclass.M3.State(), $Heap);
  var $rhs##1_1_0_0: DatatypeType;
  var $rhs##1_1_0_1: DatatypeType;
  var expr##1_1_0_0: DatatypeType;
  var st##1_1_0_0: DatatypeType;
  var env##1_1_0_0: DatatypeType;
  var _v7#1_1_0_0_0: DatatypeType
     where $Is(_v7#1_1_0_0_0, Tclass.M3.Expression())
       && $IsAlloc(_v7#1_1_0_0_0, Tclass.M3.Expression(), $Heap);
  var st''#1_1_0_0_0: DatatypeType
     where $Is(st''#1_1_0_0_0, Tclass.M3.State())
       && $IsAlloc(st''#1_1_0_0_0, Tclass.M3.State(), $Heap);
  var $rhs##1_1_0_0_0: DatatypeType;
  var $rhs##1_1_0_0_1: DatatypeType;
  var expr##1_1_0_0_0: DatatypeType;
  var st##1_1_0_0_0: DatatypeType;
  var env##1_1_0_0_0: DatatypeType;
  var st0##1_1_0_0_0: DatatypeType;
  var st1##1_1_0_0_0: DatatypeType;
  var st2##1_1_0_0_0: DatatypeType;
  var _v8#1_1_0_1_0_0: DatatypeType
     where $Is(_v8#1_1_0_1_0_0, Tclass.M3.Expression())
       && $IsAlloc(_v8#1_1_0_1_0_0, Tclass.M3.Expression(), $Heap);
  var st''#1_1_0_1_0_0: DatatypeType
     where $Is(st''#1_1_0_1_0_0, Tclass.M3.State())
       && $IsAlloc(st''#1_1_0_1_0_0, Tclass.M3.State(), $Heap);
  var $rhs##1_1_0_1_0_0: DatatypeType;
  var $rhs##1_1_0_1_0_1: DatatypeType;
  var expr##1_1_0_1_0_0: DatatypeType;
  var st##1_1_0_1_0_0: DatatypeType;
  var env##1_1_0_1_0_0: DatatypeType;
  var st0##1_1_0_1_0_0: DatatypeType;
  var st1##1_1_0_1_0_0: DatatypeType;
  var st2##1_1_0_1_0_0: DatatypeType;
  var conj0'#1_1_1_0_0: DatatypeType
     where $Is(conj0'#1_1_1_0_0, Tclass.M3.Expression())
       && $IsAlloc(conj0'#1_1_1_0_0, Tclass.M3.Expression(), $Heap);
  var st'#1_1_1_0_0: DatatypeType
     where $Is(st'#1_1_1_0_0, Tclass.M3.State())
       && $IsAlloc(st'#1_1_1_0_0, Tclass.M3.State(), $Heap);
  var $rhs##1_1_1_0_0: DatatypeType;
  var $rhs##1_1_1_0_1: DatatypeType;
  var expr##1_1_1_0_0: DatatypeType;
  var st##1_1_1_0_0: DatatypeType;
  var env##1_1_1_0_0: DatatypeType;
  var _v9#1_1_1_0_0_0: DatatypeType
     where $Is(_v9#1_1_1_0_0_0, Tclass.M3.Expression())
       && $IsAlloc(_v9#1_1_1_0_0_0, Tclass.M3.Expression(), $Heap);
  var st''#1_1_1_0_0_0: DatatypeType
     where $Is(st''#1_1_1_0_0_0, Tclass.M3.State())
       && $IsAlloc(st''#1_1_1_0_0_0, Tclass.M3.State(), $Heap);
  var $rhs##1_1_1_0_0_0: DatatypeType;
  var $rhs##1_1_1_0_0_1: DatatypeType;
  var expr##1_1_1_0_0_0: DatatypeType;
  var st##1_1_1_0_0_0: DatatypeType;
  var env##1_1_1_0_0_0: DatatypeType;
  var st0##1_1_1_0_0_0: DatatypeType;
  var st1##1_1_1_0_0_0: DatatypeType;
  var st2##1_1_1_0_0_0: DatatypeType;
  var disj0'#1_1_1_1_0_0: DatatypeType
     where $Is(disj0'#1_1_1_1_0_0, Tclass.M3.Expression())
       && $IsAlloc(disj0'#1_1_1_1_0_0, Tclass.M3.Expression(), $Heap);
  var st'#1_1_1_1_0_0: DatatypeType
     where $Is(st'#1_1_1_1_0_0, Tclass.M3.State())
       && $IsAlloc(st'#1_1_1_1_0_0, Tclass.M3.State(), $Heap);
  var $rhs##1_1_1_1_0_0: DatatypeType;
  var $rhs##1_1_1_1_0_1: DatatypeType;
  var expr##1_1_1_1_0_0: DatatypeType;
  var st##1_1_1_1_0_0: DatatypeType;
  var env##1_1_1_1_0_0: DatatypeType;
  var _v10#1_1_1_1_0_1_0_0: DatatypeType
     where $Is(_v10#1_1_1_1_0_1_0_0, Tclass.M3.Expression())
       && $IsAlloc(_v10#1_1_1_1_0_1_0_0, Tclass.M3.Expression(), $Heap);
  var st''#1_1_1_1_0_1_0_0: DatatypeType
     where $Is(st''#1_1_1_1_0_1_0_0, Tclass.M3.State())
       && $IsAlloc(st''#1_1_1_1_0_1_0_0, Tclass.M3.State(), $Heap);
  var $rhs##1_1_1_1_0_1_0_0: DatatypeType;
  var $rhs##1_1_1_1_0_1_0_1: DatatypeType;
  var expr##1_1_1_1_0_1_0_0: DatatypeType;
  var st##1_1_1_1_0_1_0_0: DatatypeType;
  var env##1_1_1_1_0_1_0_0: DatatypeType;
  var st0##1_1_1_1_0_1_0_0: DatatypeType;
  var st1##1_1_1_1_0_1_0_0: DatatypeType;
  var st2##1_1_1_1_0_1_0_0: DatatypeType;
  var fun'#1_1_1_1_1_0_0: DatatypeType
     where $Is(fun'#1_1_1_1_1_0_0, Tclass.M3.Expression())
       && $IsAlloc(fun'#1_1_1_1_1_0_0, Tclass.M3.Expression(), $Heap);
  var st'#1_1_1_1_1_0_0: DatatypeType
     where $Is(st'#1_1_1_1_1_0_0, Tclass.M3.State())
       && $IsAlloc(st'#1_1_1_1_1_0_0, Tclass.M3.State(), $Heap);
  var $rhs##1_1_1_1_1_0_0: DatatypeType;
  var $rhs##1_1_1_1_1_0_1: DatatypeType;
  var expr##1_1_1_1_1_0_0: DatatypeType;
  var st##1_1_1_1_1_0_0: DatatypeType;
  var env##1_1_1_1_1_0_0: DatatypeType;
  var args'#1_1_1_1_1_0_0: Seq
     where $Is(args'#1_1_1_1_1_0_0, TSeq(Tclass.M3.Expression()))
       && $IsAlloc(args'#1_1_1_1_1_0_0, TSeq(Tclass.M3.Expression()), $Heap);
  var sts'#1_1_1_1_1_0_0: Set
     where $Is(sts'#1_1_1_1_1_0_0, TSet(Tclass.M3.State()))
       && $IsAlloc(sts'#1_1_1_1_1_0_0, TSet(Tclass.M3.State()), $Heap);
  var $rhs##1_1_1_1_1_0_2: Seq;
  var $rhs##1_1_1_1_1_0_3: Set;
  var context##1_1_1_1_1_0_0: DatatypeType;
  var args##1_1_1_1_1_0_0: Seq;
  var stOrig##1_1_1_1_1_0_0: DatatypeType;
  var env##1_1_1_1_1_0_1: DatatypeType;
  var sts''#1_1_1_1_1_0_0: Set
     where $Is(sts''#1_1_1_1_1_0_0, TSet(Tclass.M3.State()))
       && $IsAlloc(sts''#1_1_1_1_1_0_0, TSet(Tclass.M3.State()), $Heap);
  var ##sts#1_1_1_1_1_0_0: Set;
  var stCombined#1_1_1_1_1_0_0_0: DatatypeType
     where $Is(stCombined#1_1_1_1_1_0_0_0, Tclass.M3.State())
       && $IsAlloc(stCombined#1_1_1_1_1_0_0_0, Tclass.M3.State(), $Heap);
  var ##sts#1_1_1_1_1_0_0_0: Set;
  var sts##1_1_1_1_1_0_0_0: Set;
  var parent##1_1_1_1_1_0_0_0: DatatypeType;
  var ##prim#1_1_1_1_1_0_0_0_0_0: DatatypeType;
  var ##prim#1_1_1_1_1_0_0_0_0_1: DatatypeType;
  var ##args#1_1_1_1_1_0_0_0_0_0: Seq;
  var ##st#1_1_1_1_1_0_0_0_0_0: DatatypeType;
  var cmd#1_1_1_1_1_0_0_0_0_0_0: Seq
     where $Is(cmd#1_1_1_1_1_0_0_0_0_0_0, TSeq(TChar))
       && $IsAlloc(cmd#1_1_1_1_1_0_0_0_0_0_0, TSeq(TChar), $Heap);
  var deps#1_1_1_1_1_0_0_0_0_0_0: Set
     where $Is(deps#1_1_1_1_1_0_0_0_0_0_0, TSet(Tclass.M3.Path()))
       && $IsAlloc(deps#1_1_1_1_1_0_0_0_0_0_0, TSet(Tclass.M3.Path()), $Heap);
  var exp#1_1_1_1_1_0_0_0_0_0_0: Set
     where $Is(exp#1_1_1_1_1_0_0_0_0_0_0, TSet(TSeq(TChar)))
       && $IsAlloc(exp#1_1_1_1_1_0_0_0_0_0_0, TSet(TSeq(TChar)), $Heap);
  var $rhs#1_1_1_1_1_0_0_0_0_0_0: Seq;
  var $rhs#1_1_1_1_1_0_0_0_0_0_1: Set;
  var $rhs#1_1_1_1_1_0_0_0_0_0_2: Set;
  var cmd##1_1_1_1_1_0_0_0_0_0_0: Seq;
  var deps##1_1_1_1_1_0_0_0_0_0_0: Set;
  var exps##1_1_1_1_1_0_0_0_0_0_0: Set;
  var st##1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var resultExec#1_1_1_1_1_0_0_0_0_0_0: DatatypeType
     where $Is(resultExec#1_1_1_1_1_0_0_0_0_0_0, 
        Tclass.M3.Tuple(TSet(Tclass.M3.Path()), Tclass.M3.State()))
       && $IsAlloc(resultExec#1_1_1_1_1_0_0_0_0_0_0, 
        Tclass.M3.Tuple(TSet(Tclass.M3.Path()), Tclass.M3.State()), 
        $Heap);
  var ##cmd#1_1_1_1_1_0_0_0_0_0_0: Seq;
  var ##deps#1_1_1_1_1_0_0_0_0_0_0: Set;
  var ##exps#1_1_1_1_1_0_0_0_0_0_0: Set;
  var ##st#1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var stExec#1_1_1_1_1_0_0_0_0_0_0: DatatypeType
     where $Is(stExec#1_1_1_1_1_0_0_0_0_0_0, Tclass.M3.State())
       && $IsAlloc(stExec#1_1_1_1_1_0_0_0_0_0_0, Tclass.M3.State(), $Heap);
  var st0##1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var st1##1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var st2##1_1_1_1_1_0_0_0_0_0_0: DatatypeType;

    // AddMethodImpl: EvalLemma, Impl$$M3.__default.EvalLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(364,16)
    assume true;
    ##expr#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#1, Tclass.M3.Expression(), $Heap);
    ##st#4 := st#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##st#4, Tclass.M3.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##env#2, Tclass.M3.Env(), $Heap);
    assume true;
    assume M3.__default.ValidEnv(##env#2);
    assume M3.__default.eval#canCall(expr#0, st#0, env#0);
    assume M3.Tuple.Pair_q(M3.__default.eval($LS($LZ), expr#0, st#0, env#0));
    assume M3.__default.eval#canCall(expr#0, st#0, env#0);
    result#0 := M3.__default.eval($LS($LZ), expr#0, st#0, env#0);
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(365,16)
    assume true;
    assume true;
    assume M3.Tuple.Pair_q(result#0);
    assume M3.Tuple.Pair_q(result#0);
    $rhs#0 := $Unbox(M3.Tuple.fst(result#0)): DatatypeType;
    assume M3.Tuple.Pair_q(result#0);
    assume M3.Tuple.Pair_q(result#0);
    $rhs#1 := $Unbox(M3.Tuple.snd(result#0)): DatatypeType;
    expr'#0 := $rhs#0;
    st'#0 := $rhs#1;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](366,5)
    ##expr#2 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#2, Tclass.M3.Expression(), $Heap);
    assume M3.__default.Value#canCall(expr#0);
    assume M3.__default.Value#canCall(expr#0);
    if (M3.__default.Value(expr#0))
    {
    }
    else
    {
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](367,12)
        assume true;
        if (M3.Expression.exprIdentifier_q(expr#0))
        {
        }
        else
        {
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](368,12)
            assume true;
            if (M3.Expression.exprIf_q(expr#0))
            {
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](369,34)
                assume true;
                assume true;
                // TrCallStmt: Adding lhs with type Expression
                // TrCallStmt: Adding lhs with type State
                // TrCallStmt: Before ProcessCallStmt
                assume {:id "id3122"} M3.Expression.exprIf_q(expr#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                expr##1_1_0_0 := M3.Expression.cond(expr#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_0_0 := st#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                env##1_1_0_0 := env#0;
                assume {:id "id3123"} DtRank(expr##1_1_0_0) < DtRank(expr#0);
                call {:id "id3124"} $rhs##1_1_0_0, $rhs##1_1_0_1 := Call$$M3.__default.EvalLemma(expr##1_1_0_0, st##1_1_0_0, env##1_1_0_0);
                // TrCallStmt: After ProcessCallStmt
                cond'#1_1_0_0 := $rhs##1_1_0_0;
                st'#1_1_0_0 := $rhs##1_1_0_1;
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](370,7)
                if (M3.Expression.exprLiteral_q(cond'#1_1_0_0))
                {
                    assume {:id "id3127"} M3.Expression.exprLiteral_q(cond'#1_1_0_0);
                }

                assume M3.Expression.exprLiteral_q(cond'#1_1_0_0)
                   ==> $IsA#M3.Literal(M3.Expression.lit(cond'#1_1_0_0));
                if (M3.Expression.exprLiteral_q(cond'#1_1_0_0)
                   && M3.Literal#Equal(M3.Expression.lit(cond'#1_1_0_0), #M3.Literal.litTrue()))
                {
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](371,33)
                    assume true;
                    assume true;
                    // TrCallStmt: Adding lhs with type Expression
                    // TrCallStmt: Adding lhs with type State
                    // TrCallStmt: Before ProcessCallStmt
                    assume {:id "id3128"} M3.Expression.exprIf_q(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    expr##1_1_0_0_0 := M3.Expression.ifTrue(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_1_0_0_0 := st'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    env##1_1_0_0_0 := env#0;
                    assume {:id "id3129"} DtRank(expr##1_1_0_0_0) < DtRank(expr#0);
                    call {:id "id3130"} $rhs##1_1_0_0_0, $rhs##1_1_0_0_1 := Call$$M3.__default.EvalLemma(expr##1_1_0_0_0, st##1_1_0_0_0, env##1_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    _v7#1_1_0_0_0 := $rhs##1_1_0_0_0;
                    st''#1_1_0_0_0 := $rhs##1_1_0_0_1;
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](372,32)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_1_0_0_0 := st#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_1_0_0_0 := st'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st2##1_1_0_0_0 := st''#1_1_0_0_0;
                    call {:id "id3133"} Call$$M3.__default.Lemma__ExtendsTransitive(st0##1_1_0_0_0, st1##1_1_0_0_0, st2##1_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                }
                else
                {
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](373,14)
                    if (M3.Expression.exprLiteral_q(cond'#1_1_0_0))
                    {
                        assume {:id "id3134"} M3.Expression.exprLiteral_q(cond'#1_1_0_0);
                    }

                    assume M3.Expression.exprLiteral_q(cond'#1_1_0_0)
                       ==> $IsA#M3.Literal(M3.Expression.lit(cond'#1_1_0_0));
                    if (M3.Expression.exprLiteral_q(cond'#1_1_0_0)
                       && M3.Literal#Equal(M3.Expression.lit(cond'#1_1_0_0), #M3.Literal.litFalse()))
                    {
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](374,33)
                        assume true;
                        assume true;
                        // TrCallStmt: Adding lhs with type Expression
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Before ProcessCallStmt
                        assume {:id "id3135"} M3.Expression.exprIf_q(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        expr##1_1_0_1_0_0 := M3.Expression.ifFalse(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st##1_1_0_1_0_0 := st'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        env##1_1_0_1_0_0 := env#0;
                        assume {:id "id3136"} DtRank(expr##1_1_0_1_0_0) < DtRank(expr#0);
                        call {:id "id3137"} $rhs##1_1_0_1_0_0, $rhs##1_1_0_1_0_1 := Call$$M3.__default.EvalLemma(expr##1_1_0_1_0_0, st##1_1_0_1_0_0, env##1_1_0_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        _v8#1_1_0_1_0_0 := $rhs##1_1_0_1_0_0;
                        st''#1_1_0_1_0_0 := $rhs##1_1_0_1_0_1;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](375,32)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##1_1_0_1_0_0 := st#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##1_1_0_1_0_0 := st'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st2##1_1_0_1_0_0 := st''#1_1_0_1_0_0;
                        call {:id "id3140"} Call$$M3.__default.Lemma__ExtendsTransitive(st0##1_1_0_1_0_0, st1##1_1_0_1_0_0, st2##1_1_0_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                    }
                    else
                    {
                    }
                }
            }
            else
            {
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](377,12)
                assume true;
                if (M3.Expression.exprAnd_q(expr#0))
                {
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](378,35)
                    assume true;
                    assume true;
                    // TrCallStmt: Adding lhs with type Expression
                    // TrCallStmt: Adding lhs with type State
                    // TrCallStmt: Before ProcessCallStmt
                    assume {:id "id3141"} M3.Expression.exprAnd_q(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    expr##1_1_1_0_0 := M3.Expression.conj0(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_1_1_0_0 := st#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    env##1_1_1_0_0 := env#0;
                    assume {:id "id3142"} DtRank(expr##1_1_1_0_0) < DtRank(expr#0);
                    call {:id "id3143"} $rhs##1_1_1_0_0, $rhs##1_1_1_0_1 := Call$$M3.__default.EvalLemma(expr##1_1_1_0_0, st##1_1_1_0_0, env##1_1_1_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    conj0'#1_1_1_0_0 := $rhs##1_1_1_0_0;
                    st'#1_1_1_0_0 := $rhs##1_1_1_0_1;
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](379,7)
                    if (M3.Expression.exprLiteral_q(conj0'#1_1_1_0_0))
                    {
                        assume {:id "id3146"} M3.Expression.exprLiteral_q(conj0'#1_1_1_0_0);
                    }

                    assume M3.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                       ==> $IsA#M3.Literal(M3.Expression.lit(conj0'#1_1_1_0_0));
                    if (M3.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                       && M3.Literal#Equal(M3.Expression.lit(conj0'#1_1_1_0_0), #M3.Literal.litTrue()))
                    {
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](380,33)
                        assume true;
                        assume true;
                        // TrCallStmt: Adding lhs with type Expression
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Before ProcessCallStmt
                        assume {:id "id3147"} M3.Expression.exprAnd_q(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        expr##1_1_1_0_0_0 := M3.Expression.conj1(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st##1_1_1_0_0_0 := st'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        env##1_1_1_0_0_0 := env#0;
                        assume {:id "id3148"} DtRank(expr##1_1_1_0_0_0) < DtRank(expr#0);
                        call {:id "id3149"} $rhs##1_1_1_0_0_0, $rhs##1_1_1_0_0_1 := Call$$M3.__default.EvalLemma(expr##1_1_1_0_0_0, st##1_1_1_0_0_0, env##1_1_1_0_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        _v9#1_1_1_0_0_0 := $rhs##1_1_1_0_0_0;
                        st''#1_1_1_0_0_0 := $rhs##1_1_1_0_0_1;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](381,32)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##1_1_1_0_0_0 := st#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##1_1_1_0_0_0 := st'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st2##1_1_1_0_0_0 := st''#1_1_1_0_0_0;
                        call {:id "id3152"} Call$$M3.__default.Lemma__ExtendsTransitive(st0##1_1_1_0_0_0, st1##1_1_1_0_0_0, st2##1_1_1_0_0_0);
                        // TrCallStmt: After ProcessCallStmt
                    }
                    else
                    {
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](382,14)
                        if (M3.Expression.exprLiteral_q(conj0'#1_1_1_0_0))
                        {
                            assume {:id "id3153"} M3.Expression.exprLiteral_q(conj0'#1_1_1_0_0);
                        }

                        assume M3.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                           ==> $IsA#M3.Literal(M3.Expression.lit(conj0'#1_1_1_0_0));
                        if (M3.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                           && M3.Literal#Equal(M3.Expression.lit(conj0'#1_1_1_0_0), #M3.Literal.litFalse()))
                        {
                        }
                        else
                        {
                        }
                    }
                }
                else
                {
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](384,12)
                    assume true;
                    if (M3.Expression.exprOr_q(expr#0))
                    {
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](385,35)
                        assume true;
                        assume true;
                        // TrCallStmt: Adding lhs with type Expression
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Before ProcessCallStmt
                        assume {:id "id3154"} M3.Expression.exprOr_q(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        expr##1_1_1_1_0_0 := M3.Expression.disj0(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st##1_1_1_1_0_0 := st#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        env##1_1_1_1_0_0 := env#0;
                        assume {:id "id3155"} DtRank(expr##1_1_1_1_0_0) < DtRank(expr#0);
                        call {:id "id3156"} $rhs##1_1_1_1_0_0, $rhs##1_1_1_1_0_1 := Call$$M3.__default.EvalLemma(expr##1_1_1_1_0_0, st##1_1_1_1_0_0, env##1_1_1_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        disj0'#1_1_1_1_0_0 := $rhs##1_1_1_1_0_0;
                        st'#1_1_1_1_0_0 := $rhs##1_1_1_1_0_1;
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](386,7)
                        if (M3.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0))
                        {
                            assume {:id "id3159"} M3.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0);
                        }

                        assume M3.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                           ==> $IsA#M3.Literal(M3.Expression.lit(disj0'#1_1_1_1_0_0));
                        if (M3.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                           && M3.Literal#Equal(M3.Expression.lit(disj0'#1_1_1_1_0_0), #M3.Literal.litTrue()))
                        {
                        }
                        else
                        {
                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](387,14)
                            if (M3.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0))
                            {
                                assume {:id "id3160"} M3.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0);
                            }

                            assume M3.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                               ==> $IsA#M3.Literal(M3.Expression.lit(disj0'#1_1_1_1_0_0));
                            if (M3.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                               && M3.Literal#Equal(M3.Expression.lit(disj0'#1_1_1_1_0_0), #M3.Literal.litFalse()))
                            {
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](388,33)
                                assume true;
                                assume true;
                                // TrCallStmt: Adding lhs with type Expression
                                // TrCallStmt: Adding lhs with type State
                                // TrCallStmt: Before ProcessCallStmt
                                assume {:id "id3161"} M3.Expression.exprOr_q(expr#0);
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                expr##1_1_1_1_0_1_0_0 := M3.Expression.disj1(expr#0);
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st##1_1_1_1_0_1_0_0 := st'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                env##1_1_1_1_0_1_0_0 := env#0;
                                assume {:id "id3162"} DtRank(expr##1_1_1_1_0_1_0_0) < DtRank(expr#0);
                                call {:id "id3163"} $rhs##1_1_1_1_0_1_0_0, $rhs##1_1_1_1_0_1_0_1 := Call$$M3.__default.EvalLemma(expr##1_1_1_1_0_1_0_0, st##1_1_1_1_0_1_0_0, env##1_1_1_1_0_1_0_0);
                                // TrCallStmt: After ProcessCallStmt
                                _v10#1_1_1_1_0_1_0_0 := $rhs##1_1_1_1_0_1_0_0;
                                st''#1_1_1_1_0_1_0_0 := $rhs##1_1_1_1_0_1_0_1;
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](389,32)
                                // TrCallStmt: Before ProcessCallStmt
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st0##1_1_1_1_0_1_0_0 := st#0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st1##1_1_1_1_0_1_0_0 := st'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st2##1_1_1_1_0_1_0_0 := st''#1_1_1_1_0_1_0_0;
                                call {:id "id3166"} Call$$M3.__default.Lemma__ExtendsTransitive(st0##1_1_1_1_0_1_0_0, st1##1_1_1_1_0_1_0_0, st2##1_1_1_1_0_1_0_0);
                                // TrCallStmt: After ProcessCallStmt
                            }
                            else
                            {
                            }
                        }
                    }
                    else
                    {
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](391,12)
                        assume true;
                        if (M3.Expression.exprInvocation_q(expr#0))
                        {
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](392,33)
                            assume true;
                            assume true;
                            // TrCallStmt: Adding lhs with type Expression
                            // TrCallStmt: Adding lhs with type State
                            // TrCallStmt: Before ProcessCallStmt
                            assume {:id "id3167"} M3.Expression.exprInvocation_q(expr#0);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            expr##1_1_1_1_1_0_0 := M3.Expression.fun(expr#0);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            st##1_1_1_1_1_0_0 := st#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            env##1_1_1_1_1_0_0 := env#0;
                            assume {:id "id3168"} DtRank(expr##1_1_1_1_1_0_0) < DtRank(expr#0);
                            call {:id "id3169"} $rhs##1_1_1_1_1_0_0, $rhs##1_1_1_1_1_0_1 := Call$$M3.__default.EvalLemma(expr##1_1_1_1_1_0_0, st##1_1_1_1_1_0_0, env##1_1_1_1_1_0_0);
                            // TrCallStmt: After ProcessCallStmt
                            fun'#1_1_1_1_1_0_0 := $rhs##1_1_1_1_1_0_0;
                            st'#1_1_1_1_1_0_0 := $rhs##1_1_1_1_1_0_1;
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](393,39)
                            assume true;
                            assume true;
                            // TrCallStmt: Adding lhs with type seq<Expression>
                            // TrCallStmt: Adding lhs with type set<State>
                            // TrCallStmt: Before ProcessCallStmt
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            context##1_1_1_1_1_0_0 := expr#0;
                            assume {:id "id3172"} M3.Expression.exprInvocation_q(expr#0);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            args##1_1_1_1_1_0_0 := M3.Expression.args(expr#0);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            stOrig##1_1_1_1_1_0_0 := st#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            env##1_1_1_1_1_0_1 := env#0;
                            assume {:id "id3173"} DtRank(context##1_1_1_1_1_0_0) <= DtRank(expr#0);
                            call {:id "id3174"} $rhs##1_1_1_1_1_0_2, $rhs##1_1_1_1_1_0_3 := Call$$M3.__default.EvalArgsLemma(context##1_1_1_1_1_0_0, args##1_1_1_1_1_0_0, stOrig##1_1_1_1_1_0_0, env##1_1_1_1_1_0_1);
                            // TrCallStmt: After ProcessCallStmt
                            args'#1_1_1_1_1_0_0 := $rhs##1_1_1_1_1_0_2;
                            sts'#1_1_1_1_1_0_0 := $rhs##1_1_1_1_1_0_3;
                            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(394,17)
                            assume true;
                            assume true;
                            sts''#1_1_1_1_1_0_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(st'#1_1_1_1_1_0_0)), sts'#1_1_1_1_1_0_0);
                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](395,7)
                            ##sts#1_1_1_1_1_0_0 := sts''#1_1_1_1_1_0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##sts#1_1_1_1_1_0_0, TSet(Tclass.M3.State()), $Heap);
                            assume M3.__default.Compatible#canCall(sts''#1_1_1_1_1_0_0);
                            assume M3.__default.Compatible#canCall(sts''#1_1_1_1_1_0_0);
                            if (M3.__default.Compatible(sts''#1_1_1_1_1_0_0))
                            {
                                // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(396,24)
                                assume true;
                                ##sts#1_1_1_1_1_0_0_0 := sts''#1_1_1_1_1_0_0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##sts#1_1_1_1_1_0_0_0, TSet(Tclass.M3.State()), $Heap);
                                assume true;
                                assume !Set#Equal(##sts#1_1_1_1_1_0_0_0, Set#Empty(): Set);
                                assume M3.__default.Combine#canCall(sts''#1_1_1_1_1_0_0);
                                assume M3.State.StateCons_q(M3.__default.Combine($LS($LZ), sts''#1_1_1_1_1_0_0));
                                assume M3.__default.Combine#canCall(sts''#1_1_1_1_1_0_0);
                                stCombined#1_1_1_1_1_0_0_0 := M3.__default.Combine($LS($LZ), sts''#1_1_1_1_1_0_0);
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](397,22)
                                // TrCallStmt: Before ProcessCallStmt
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                sts##1_1_1_1_1_0_0_0 := sts''#1_1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                parent##1_1_1_1_1_0_0_0 := st#0;
                                call {:id "id3179"} Call$$M3.__default.Lemma__Combine(sts##1_1_1_1_1_0_0_0, parent##1_1_1_1_1_0_0_0);
                                // TrCallStmt: After ProcessCallStmt
                                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](398,9)
                                if (M3.Expression.exprLiteral_q(fun'#1_1_1_1_1_0_0))
                                {
                                    assume {:id "id3180"} M3.Expression.exprLiteral_q(fun'#1_1_1_1_1_0_0);
                                }

                                assume true;
                                if (M3.Expression.exprLiteral_q(fun'#1_1_1_1_1_0_0)
                                   && M3.Literal.litPrimitive_q(M3.Expression.lit(fun'#1_1_1_1_1_0_0)))
                                {
                                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](399,11)
                                    assume {:id "id3181"} M3.Expression.exprLiteral_q(fun'#1_1_1_1_1_0_0);
                                    assume {:id "id3182"} M3.Literal.litPrimitive_q(M3.Expression.lit(fun'#1_1_1_1_1_0_0));
                                    assume true;
                                    if (M3.Primitive.primExec_q(M3.Literal.prim(M3.Expression.lit(fun'#1_1_1_1_1_0_0))))
                                    {
                                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](400,13)
                                        ##prim#1_1_1_1_1_0_0_0_0_0 := Lit(#M3.Primitive.primExec());
                                        // assume allocatedness for argument to function
                                        assume $IsAlloc(##prim#1_1_1_1_1_0_0_0_0_0, Tclass.M3.Primitive(), $Heap);
                                        assume M3.__default.Arity#canCall(Lit(#M3.Primitive.primExec()));
                                        if (Seq#Length(args'#1_1_1_1_1_0_0)
                                           == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec()))))
                                        {
                                            ##prim#1_1_1_1_1_0_0_0_0_1 := Lit(#M3.Primitive.primExec());
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##prim#1_1_1_1_1_0_0_0_0_1, Tclass.M3.Primitive(), $Heap);
                                            ##args#1_1_1_1_1_0_0_0_0_0 := args'#1_1_1_1_1_0_0;
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##args#1_1_1_1_1_0_0_0_0_0, TSeq(Tclass.M3.Expression()), $Heap);
                                            ##st#1_1_1_1_1_0_0_0_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##st#1_1_1_1_1_0_0_0_0_0, Tclass.M3.State(), $Heap);
                                            assume true;
                                            assume M3.Primitive.primExec_q(##prim#1_1_1_1_1_0_0_0_0_1)
                                               ==> Seq#Length(##args#1_1_1_1_1_0_0_0_0_0) == LitInt(3);
                                            assume true;
                                            assume M3.Primitive.primCreatePath_q(##prim#1_1_1_1_1_0_0_0_0_1)
                                               ==> Seq#Length(##args#1_1_1_1_1_0_0_0_0_0) == LitInt(1);
                                            assume M3.__default.ValidArgs#canCall(Lit(#M3.Primitive.primExec()), args'#1_1_1_1_1_0_0, stCombined#1_1_1_1_1_0_0_0);
                                        }

                                        assume M3.__default.Arity#canCall(Lit(#M3.Primitive.primExec()))
                                           && (Seq#Length(args'#1_1_1_1_1_0_0)
                                               == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                             ==> M3.__default.ValidArgs#canCall(Lit(#M3.Primitive.primExec()), args'#1_1_1_1_1_0_0, stCombined#1_1_1_1_1_0_0_0));
                                        if (Seq#Length(args'#1_1_1_1_1_0_0)
                                             == LitInt(M3.__default.Arity(Lit(#M3.Primitive.primExec())))
                                           && M3.__default.ValidArgs(Lit(#M3.Primitive.primExec()), args'#1_1_1_1_1_0_0, stCombined#1_1_1_1_1_0_0_0))
                                        {
                                            // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(401,34)
                                            assume true;
                                            assume true;
                                            assume true;
                                            assume {:id "id3183"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args'#1_1_1_1_1_0_0);
                                            assume {:id "id3184"} M3.Expression.exprLiteral_q($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(0))): DatatypeType);
                                            assume {:id "id3185"} M3.Literal.litString_q(M3.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(0))): DatatypeType));
                                            assume true;
                                            $rhs#1_1_1_1_1_0_0_0_0_0_0 := M3.Literal.str(M3.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(0))): DatatypeType));
                                            assume {:id "id3187"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args'#1_1_1_1_1_0_0);
                                            assume {:id "id3188"} M3.Expression.exprLiteral_q($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(1))): DatatypeType);
                                            assume {:id "id3189"} M3.Literal.litArrOfPaths_q(M3.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(1))): DatatypeType));
                                            assume true;
                                            $rhs#1_1_1_1_1_0_0_0_0_0_1 := M3.Literal.paths(M3.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(1))): DatatypeType));
                                            assume {:id "id3191"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args'#1_1_1_1_1_0_0);
                                            assume {:id "id3192"} M3.Expression.exprLiteral_q($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(2))): DatatypeType);
                                            assume {:id "id3193"} M3.Literal.litArrOfStrings_q(M3.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(2))): DatatypeType));
                                            assume true;
                                            $rhs#1_1_1_1_1_0_0_0_0_0_2 := M3.Literal.strs(M3.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(2))): DatatypeType));
                                            cmd#1_1_1_1_1_0_0_0_0_0_0 := $rhs#1_1_1_1_1_0_0_0_0_0_0;
                                            deps#1_1_1_1_1_0_0_0_0_0_0 := $rhs#1_1_1_1_1_0_0_0_0_0_1;
                                            exp#1_1_1_1_1_0_0_0_0_0_0 := $rhs#1_1_1_1_1_0_0_0_0_0_2;
                                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](402,27)
                                            // TrCallStmt: Before ProcessCallStmt
                                            assume true;
                                            // ProcessCallStmt: CheckSubrange
                                            cmd##1_1_1_1_1_0_0_0_0_0_0 := cmd#1_1_1_1_1_0_0_0_0_0_0;
                                            assume true;
                                            // ProcessCallStmt: CheckSubrange
                                            deps##1_1_1_1_1_0_0_0_0_0_0 := deps#1_1_1_1_1_0_0_0_0_0_0;
                                            assume true;
                                            // ProcessCallStmt: CheckSubrange
                                            exps##1_1_1_1_1_0_0_0_0_0_0 := exp#1_1_1_1_1_0_0_0_0_0_0;
                                            assume true;
                                            // ProcessCallStmt: CheckSubrange
                                            st##1_1_1_1_1_0_0_0_0_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                            call {:id "id3198"} Call$$M3.__default.ExecProperty(cmd##1_1_1_1_1_0_0_0_0_0_0, deps##1_1_1_1_1_0_0_0_0_0_0, exps##1_1_1_1_1_0_0_0_0_0_0, st##1_1_1_1_1_0_0_0_0_0_0);
                                            // TrCallStmt: After ProcessCallStmt
                                            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(403,30)
                                            assume true;
                                            ##cmd#1_1_1_1_1_0_0_0_0_0_0 := cmd#1_1_1_1_1_0_0_0_0_0_0;
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##cmd#1_1_1_1_1_0_0_0_0_0_0, TSeq(TChar), $Heap);
                                            ##deps#1_1_1_1_1_0_0_0_0_0_0 := deps#1_1_1_1_1_0_0_0_0_0_0;
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##deps#1_1_1_1_1_0_0_0_0_0_0, TSet(Tclass.M3.Path()), $Heap);
                                            ##exps#1_1_1_1_1_0_0_0_0_0_0 := exp#1_1_1_1_1_0_0_0_0_0_0;
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##exps#1_1_1_1_1_0_0_0_0_0_0, TSet(TSeq(TChar)), $Heap);
                                            ##st#1_1_1_1_1_0_0_0_0_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##st#1_1_1_1_1_0_0_0_0_0_0, Tclass.M3.State(), $Heap);
                                            assume M3.__default.exec#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                              deps#1_1_1_1_1_0_0_0_0_0_0, 
                                              exp#1_1_1_1_1_0_0_0_0_0_0, 
                                              stCombined#1_1_1_1_1_0_0_0);
                                            assume M3.Tuple.Pair_q(M3.__default.exec(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                exp#1_1_1_1_1_0_0_0_0_0_0, 
                                                stCombined#1_1_1_1_1_0_0_0));
                                            assume M3.__default.exec#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                              deps#1_1_1_1_1_0_0_0_0_0_0, 
                                              exp#1_1_1_1_1_0_0_0_0_0_0, 
                                              stCombined#1_1_1_1_1_0_0_0);
                                            resultExec#1_1_1_1_1_0_0_0_0_0_0 := M3.__default.exec(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                              deps#1_1_1_1_1_0_0_0_0_0_0, 
                                              exp#1_1_1_1_1_0_0_0_0_0_0, 
                                              stCombined#1_1_1_1_1_0_0_0);
                                            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(404,26)
                                            assume true;
                                            assume M3.Tuple.Pair_q(resultExec#1_1_1_1_1_0_0_0_0_0_0);
                                            assume M3.Tuple.Pair_q(resultExec#1_1_1_1_1_0_0_0_0_0_0);
                                            stExec#1_1_1_1_1_0_0_0_0_0_0 := $Unbox(M3.Tuple.snd(resultExec#1_1_1_1_1_0_0_0_0_0_0)): DatatypeType;
                                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](405,38)
                                            // TrCallStmt: Before ProcessCallStmt
                                            assume true;
                                            // ProcessCallStmt: CheckSubrange
                                            st0##1_1_1_1_1_0_0_0_0_0_0 := st#0;
                                            assume true;
                                            // ProcessCallStmt: CheckSubrange
                                            st1##1_1_1_1_1_0_0_0_0_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                            assume true;
                                            // ProcessCallStmt: CheckSubrange
                                            st2##1_1_1_1_1_0_0_0_0_0_0 := stExec#1_1_1_1_1_0_0_0_0_0_0;
                                            call {:id "id3201"} Call$$M3.__default.Lemma__ExtendsTransitive(st0##1_1_1_1_1_0_0_0_0_0_0, st1##1_1_1_1_1_0_0_0_0_0_0, st2##1_1_1_1_1_0_0_0_0_0_0);
                                            // TrCallStmt: After ProcessCallStmt
                                        }
                                        else
                                        {
                                        }
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                }
                            }
                            else
                            {
                            }
                        }
                        else
                        {
                        }
                    }
                }
            }
        }
    }
}



procedure {:verboseName "M3.EvalArgsLemma (well-formedness)"} CheckWellFormed$$M3.__default.EvalArgsLemma(context#0: DatatypeType
       where $Is(context#0, Tclass.M3.Expression())
         && $IsAlloc(context#0, Tclass.M3.Expression(), $Heap)
         && $IsA#M3.Expression(context#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M3.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M3.Expression()), $Heap), 
    stOrig#0: DatatypeType
       where $Is(stOrig#0, Tclass.M3.State())
         && $IsAlloc(stOrig#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(stOrig#0), 
    env#0: DatatypeType
       where $Is(env#0, Tclass.M3.Env())
         && $IsAlloc(env#0, Tclass.M3.Env(), $Heap)
         && $IsA#M3.Env(env#0))
   returns (args'#0: Seq
       where $Is(args'#0, TSeq(Tclass.M3.Expression()))
         && $IsAlloc(args'#0, TSeq(Tclass.M3.Expression()), $Heap), 
    sts'#0: Set
       where $Is(sts'#0, TSet(Tclass.M3.State()))
         && $IsAlloc(sts'#0, TSet(Tclass.M3.State()), $Heap));
  free requires 12 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M3.EvalArgsLemma (call)"} Call$$M3.__default.EvalArgsLemma(context#0: DatatypeType
       where $Is(context#0, Tclass.M3.Expression())
         && $IsAlloc(context#0, Tclass.M3.Expression(), $Heap)
         && $IsA#M3.Expression(context#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M3.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M3.Expression()), $Heap), 
    stOrig#0: DatatypeType
       where $Is(stOrig#0, Tclass.M3.State())
         && $IsAlloc(stOrig#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(stOrig#0), 
    env#0: DatatypeType
       where $Is(env#0, Tclass.M3.Env())
         && $IsAlloc(env#0, Tclass.M3.Env(), $Heap)
         && $IsA#M3.Env(env#0))
   returns (args'#0: Seq
       where $Is(args'#0, TSeq(Tclass.M3.Expression()))
         && $IsAlloc(args'#0, TSeq(Tclass.M3.Expression()), $Heap), 
    sts'#0: Set
       where $Is(sts'#0, TSet(Tclass.M3.State()))
         && $IsAlloc(sts'#0, TSet(Tclass.M3.State()), $Heap));
  // user-defined preconditions
  requires {:id "id3214"} M3.__default.ValidState#canCall(stOrig#0)
     ==> M3.__default.ValidState(stOrig#0)
       || (forall p#0: DatatypeType :: 
        { M3.__default.WellFounded(p#0) } 
          { Set#IsMember(M3.__default.DomSt(stOrig#0), $Box(p#0)) } 
        $Is(p#0, Tclass.M3.Path())
           ==> 
          Set#IsMember(M3.__default.DomSt(stOrig#0), $Box(p#0))
           ==> M3.__default.WellFounded(p#0));
  requires {:id "id3215"} M3.__default.ValidEnv(env#0);
  requires {:id "id3216"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass.M3.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(context#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Tuple(M3.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0))
     && M3.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0)
     && (M3.Tuple#Equal(#M3.Tuple.Pair($Box(args'#0), $Box(sts'#0)), 
        M3.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0))
       ==> (forall st'#1: DatatypeType :: 
        { M3.__default.Extends(stOrig#0, st'#1) } 
          { M3.__default.ValidState(st'#1) } 
          { Set#IsMember(sts'#0, $Box(st'#1)) } 
        $Is(st'#1, Tclass.M3.State())
           ==> (Set#IsMember(sts'#0, $Box(st'#1)) ==> M3.__default.ValidState#canCall(st'#1))
             && (
              (Set#IsMember(sts'#0, $Box(st'#1))
               ==> M3.__default.ValidState(st'#1))
               ==> 
              Set#IsMember(sts'#0, $Box(st'#1))
               ==> M3.__default.Extends#canCall(stOrig#0, st'#1))));
  ensures {:id "id3217"} M3.Tuple#Equal(#M3.Tuple.Pair($Box(args'#0), $Box(sts'#0)), 
    M3.__default.evalArgs($LS($LS($LZ)), context#0, args#0, stOrig#0, env#0));
  ensures {:id "id3218"} (forall st'#1: DatatypeType :: 
    { M3.__default.Extends(stOrig#0, st'#1) } 
      { M3.__default.ValidState(st'#1) } 
      { Set#IsMember(sts'#0, $Box(st'#1)) } 
    $Is(st'#1, Tclass.M3.State())
       ==> (Set#IsMember(sts'#0, $Box(st'#1)) ==> M3.__default.ValidState(st'#1))
         && (Set#IsMember(sts'#0, $Box(st'#1)) ==> M3.__default.Extends(stOrig#0, st'#1)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M3.EvalArgsLemma (correctness)"} Impl$$M3.__default.EvalArgsLemma(context#0: DatatypeType
       where $Is(context#0, Tclass.M3.Expression())
         && $IsAlloc(context#0, Tclass.M3.Expression(), $Heap)
         && $IsA#M3.Expression(context#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M3.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M3.Expression()), $Heap), 
    stOrig#0: DatatypeType
       where $Is(stOrig#0, Tclass.M3.State())
         && $IsAlloc(stOrig#0, Tclass.M3.State(), $Heap)
         && $IsA#M3.State(stOrig#0), 
    env#0: DatatypeType
       where $Is(env#0, Tclass.M3.Env())
         && $IsAlloc(env#0, Tclass.M3.Env(), $Heap)
         && $IsA#M3.Env(env#0))
   returns (args'#0: Seq
       where $Is(args'#0, TSeq(Tclass.M3.Expression()))
         && $IsAlloc(args'#0, TSeq(Tclass.M3.Expression()), $Heap), 
    sts'#0: Set
       where $Is(sts'#0, TSet(Tclass.M3.State()))
         && $IsAlloc(sts'#0, TSet(Tclass.M3.State()), $Heap), 
    $_reverifyPost: bool);
  free requires 12 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id3219"} M3.__default.ValidState#canCall(stOrig#0)
     && 
    M3.__default.ValidState(stOrig#0)
     && (forall p#1: DatatypeType :: 
      { M3.__default.WellFounded(p#1) } 
        { Set#IsMember(M3.__default.DomSt(stOrig#0), $Box(p#1)) } 
      $Is(p#1, Tclass.M3.Path())
         ==> 
        Set#IsMember(M3.__default.DomSt(stOrig#0), $Box(p#1))
         ==> M3.__default.WellFounded(p#1));
  requires {:id "id3220"} M3.__default.ValidEnv(env#0);
  requires {:id "id3221"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass.M3.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(context#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M3.Tuple(M3.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0))
     && M3.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0)
     && (M3.Tuple#Equal(#M3.Tuple.Pair($Box(args'#0), $Box(sts'#0)), 
        M3.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0))
       ==> (forall st'#1: DatatypeType :: 
        { M3.__default.Extends(stOrig#0, st'#1) } 
          { M3.__default.ValidState(st'#1) } 
          { Set#IsMember(sts'#0, $Box(st'#1)) } 
        $Is(st'#1, Tclass.M3.State())
           ==> (Set#IsMember(sts'#0, $Box(st'#1)) ==> M3.__default.ValidState#canCall(st'#1))
             && (
              (Set#IsMember(sts'#0, $Box(st'#1))
               ==> M3.__default.ValidState(st'#1))
               ==> 
              Set#IsMember(sts'#0, $Box(st'#1))
               ==> M3.__default.Extends#canCall(stOrig#0, st'#1))));
  ensures {:id "id3222"} $_reverifyPost
     ==> M3.Tuple#Equal(#M3.Tuple.Pair($Box(args'#0), $Box(sts'#0)), 
      M3.__default.evalArgs($LS($LS($LZ)), context#0, args#0, stOrig#0, env#0));
  ensures {:id "id3223"} $_reverifyPost
     ==> (forall st'#1: DatatypeType :: 
      { M3.__default.Extends(stOrig#0, st'#1) } 
        { M3.__default.ValidState(st'#1) } 
        { Set#IsMember(sts'#0, $Box(st'#1)) } 
      $Is(st'#1, Tclass.M3.State())
         ==> (Set#IsMember(sts'#0, $Box(st'#1)) ==> M3.__default.ValidState(st'#1))
           && (Set#IsMember(sts'#0, $Box(st'#1)) ==> M3.__default.Extends(stOrig#0, st'#1)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M3.EvalArgsLemma (correctness)"} Impl$$M3.__default.EvalArgsLemma(context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: DatatypeType, 
    env#0: DatatypeType)
   returns (args'#0: Seq, sts'#0: Set, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0_0: Seq;
  var $rhs#0_1: Set;
  var rArg#1_0: DatatypeType
     where $Is(rArg#1_0, Tclass.M3.Expression())
       && $IsAlloc(rArg#1_0, Tclass.M3.Expression(), $Heap);
  var rSts#1_0: DatatypeType
     where $Is(rSts#1_0, Tclass.M3.State()) && $IsAlloc(rSts#1_0, Tclass.M3.State(), $Heap);
  var $rhs##1_0: DatatypeType;
  var $rhs##1_1: DatatypeType;
  var expr##1_0: DatatypeType;
  var st##1_0: DatatypeType;
  var env##1_0: DatatypeType;
  var rrArg#1_0: Seq
     where $Is(rrArg#1_0, TSeq(Tclass.M3.Expression()))
       && $IsAlloc(rrArg#1_0, TSeq(Tclass.M3.Expression()), $Heap);
  var rrSts#1_0: Set
     where $Is(rrSts#1_0, TSet(Tclass.M3.State()))
       && $IsAlloc(rrSts#1_0, TSet(Tclass.M3.State()), $Heap);
  var $rhs##1_2: Seq;
  var $rhs##1_3: Set;
  var context##1_0: DatatypeType;
  var args##1_0: Seq;
  var stOrig##1_0: DatatypeType;
  var env##1_1: DatatypeType;
  var $rhs#1_0: Seq;
  var $rhs#1_1: Set;

    // AddMethodImpl: EvalArgsLemma, Impl$$M3.__default.EvalArgsLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](422,5)
    assume true;
    if (Seq#Equal(args#0, Seq#Empty(): Seq))
    {
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(423,19)
        assume true;
        assume true;
        assume true;
        $rhs#0_0 := Lit(Seq#Empty(): Seq);
        assume true;
        $rhs#0_1 := Lit(Set#Empty(): Set);
        args'#0 := $rhs#0_0;
        sts'#0 := $rhs#0_1;
    }
    else
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](425,34)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assume {:id "id3228"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##1_0 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##1_0 := stOrig#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_0 := env#0;
        assume {:id "id3229"} DtRank(expr##1_0) < DtRank(context#0);
        call {:id "id3230"} $rhs##1_0, $rhs##1_1 := Call$$M3.__default.EvalLemma(expr##1_0, st##1_0, env##1_0);
        // TrCallStmt: After ProcessCallStmt
        rArg#1_0 := $rhs##1_0;
        rSts#1_0 := $rhs##1_1;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy[M1][M2][M3](426,40)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type seq<Expression>
        // TrCallStmt: Adding lhs with type set<State>
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        context##1_0 := context#0;
        assume {:id "id3233"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(args#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        args##1_0 := Seq#Drop(args#0, LitInt(1));
        assume true;
        // ProcessCallStmt: CheckSubrange
        stOrig##1_0 := stOrig#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_1 := env#0;
        assume {:id "id3234"} 0 <= Seq#Length(args#0)
           || DtRank(context##1_0) < DtRank(context#0)
           || Seq#Length(args##1_0) == Seq#Length(args#0);
        assume {:id "id3235"} DtRank(context##1_0) < DtRank(context#0)
           || (DtRank(context##1_0) == DtRank(context#0)
             && Seq#Length(args##1_0) < Seq#Length(args#0));
        call {:id "id3236"} $rhs##1_2, $rhs##1_3 := Call$$M3.__default.EvalArgsLemma(context##1_0, args##1_0, stOrig##1_0, env##1_1);
        // TrCallStmt: After ProcessCallStmt
        rrArg#1_0 := $rhs##1_2;
        rrSts#1_0 := $rhs##1_3;
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ParallelBuilds.dfy(427,19)
        assume true;
        assume true;
        assume true;
        $rhs#1_0 := Seq#Append(Seq#Build(Seq#Empty(): Seq, $Box(rArg#1_0)), rrArg#1_0);
        assume true;
        $rhs#1_1 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(rSts#1_0)), rrSts#1_0);
        args'#0 := $rhs#1_0;
        sts'#0 := $rhs#1_1;
    }
}



// Constructor function declaration
function #M3.Artifact.ArtifactCons(int) : DatatypeType;

const unique ##M3.Artifact.ArtifactCons: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: int :: 
  { #M3.Artifact.ArtifactCons(a#0#0#0) } 
  DatatypeCtorId(#M3.Artifact.ArtifactCons(a#0#0#0)) == ##M3.Artifact.ArtifactCons);
}

function M3.Artifact.ArtifactCons_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Artifact.ArtifactCons_q(d) } 
  M3.Artifact.ArtifactCons_q(d)
     <==> DatatypeCtorId(d) == ##M3.Artifact.ArtifactCons);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Artifact.ArtifactCons_q(d) } 
  M3.Artifact.ArtifactCons_q(d)
     ==> (exists a#1#0#0: int :: d == #M3.Artifact.ArtifactCons(a#1#0#0)));

// Constructor $Is
axiom (forall a#2#0#0: int :: 
  { $Is(#M3.Artifact.ArtifactCons(a#2#0#0), Tclass.M3.Artifact()) } 
  $Is(#M3.Artifact.ArtifactCons(a#2#0#0), Tclass.M3.Artifact())
     <==> $Is(a#2#0#0, TInt));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Artifact._h11(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      M3.Artifact.ArtifactCons_q(d)
       && $IsAlloc(d, Tclass.M3.Artifact(), $h)
     ==> $IsAlloc(M3.Artifact._h11(d), TInt, $h));

// Constructor literal
axiom (forall a#3#0#0: int :: 
  { #M3.Artifact.ArtifactCons(LitInt(a#3#0#0)) } 
  #M3.Artifact.ArtifactCons(LitInt(a#3#0#0))
     == Lit(#M3.Artifact.ArtifactCons(a#3#0#0)));

function M3.Artifact._h11(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#4#0#0: int :: 
  { #M3.Artifact.ArtifactCons(a#4#0#0) } 
  M3.Artifact._h11(#M3.Artifact.ArtifactCons(a#4#0#0)) == a#4#0#0);

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Artifact(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Artifact())
     ==> $IsAlloc(d, Tclass.M3.Artifact(), $h));

// Depth-one case-split function
function $IsA#M3.Artifact(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Artifact(d) } 
  $IsA#M3.Artifact(d) ==> M3.Artifact.ArtifactCons_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Artifact.ArtifactCons_q(d), $Is(d, Tclass.M3.Artifact()) } 
  $Is(d, Tclass.M3.Artifact()) ==> M3.Artifact.ArtifactCons_q(d));

// Datatype extensional equality declaration
function M3.Artifact#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Artifact.ArtifactCons
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Artifact#Equal(a, b) } 
  M3.Artifact#Equal(a, b) <==> M3.Artifact._h11(a) == M3.Artifact._h11(b));

// Datatype extensionality axiom: M3.Artifact
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Artifact#Equal(a, b) } 
  M3.Artifact#Equal(a, b) <==> a == b);

const unique class.M3.Artifact: ClassName;

// Constructor function declaration
function #M3.Identifier.IdentifierCons(int) : DatatypeType;

const unique ##M3.Identifier.IdentifierCons: DtCtorId
uses {
// Constructor identifier
axiom (forall a#5#0#0: int :: 
  { #M3.Identifier.IdentifierCons(a#5#0#0) } 
  DatatypeCtorId(#M3.Identifier.IdentifierCons(a#5#0#0))
     == ##M3.Identifier.IdentifierCons);
}

function M3.Identifier.IdentifierCons_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Identifier.IdentifierCons_q(d) } 
  M3.Identifier.IdentifierCons_q(d)
     <==> DatatypeCtorId(d) == ##M3.Identifier.IdentifierCons);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Identifier.IdentifierCons_q(d) } 
  M3.Identifier.IdentifierCons_q(d)
     ==> (exists a#6#0#0: int :: d == #M3.Identifier.IdentifierCons(a#6#0#0)));

// Constructor $Is
axiom (forall a#7#0#0: int :: 
  { $Is(#M3.Identifier.IdentifierCons(a#7#0#0), Tclass.M3.Identifier()) } 
  $Is(#M3.Identifier.IdentifierCons(a#7#0#0), Tclass.M3.Identifier())
     <==> $Is(a#7#0#0, TInt));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Identifier._h12(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      M3.Identifier.IdentifierCons_q(d)
       && $IsAlloc(d, Tclass.M3.Identifier(), $h)
     ==> $IsAlloc(M3.Identifier._h12(d), TInt, $h));

// Constructor literal
axiom (forall a#8#0#0: int :: 
  { #M3.Identifier.IdentifierCons(LitInt(a#8#0#0)) } 
  #M3.Identifier.IdentifierCons(LitInt(a#8#0#0))
     == Lit(#M3.Identifier.IdentifierCons(a#8#0#0)));

function M3.Identifier._h12(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#9#0#0: int :: 
  { #M3.Identifier.IdentifierCons(a#9#0#0) } 
  M3.Identifier._h12(#M3.Identifier.IdentifierCons(a#9#0#0)) == a#9#0#0);

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Identifier(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Identifier())
     ==> $IsAlloc(d, Tclass.M3.Identifier(), $h));

// Depth-one case-split function
function $IsA#M3.Identifier(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Identifier(d) } 
  $IsA#M3.Identifier(d) ==> M3.Identifier.IdentifierCons_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Identifier.IdentifierCons_q(d), $Is(d, Tclass.M3.Identifier()) } 
  $Is(d, Tclass.M3.Identifier()) ==> M3.Identifier.IdentifierCons_q(d));

// Datatype extensional equality declaration
function M3.Identifier#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Identifier.IdentifierCons
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Identifier#Equal(a, b) } 
  M3.Identifier#Equal(a, b) <==> M3.Identifier._h12(a) == M3.Identifier._h12(b));

// Datatype extensionality axiom: M3.Identifier
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Identifier#Equal(a, b) } 
  M3.Identifier#Equal(a, b) <==> a == b);

const unique class.M3.Identifier: ClassName;

// Constructor function declaration
function #M3.Path.InternalPath(Seq, Set, Seq) : DatatypeType;

const unique ##M3.Path.InternalPath: DtCtorId
uses {
// Constructor identifier
axiom (forall a#10#0#0: Seq, a#10#1#0: Set, a#10#2#0: Seq :: 
  { #M3.Path.InternalPath(a#10#0#0, a#10#1#0, a#10#2#0) } 
  DatatypeCtorId(#M3.Path.InternalPath(a#10#0#0, a#10#1#0, a#10#2#0))
     == ##M3.Path.InternalPath);
}

function M3.Path.InternalPath_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Path.InternalPath_q(d) } 
  M3.Path.InternalPath_q(d) <==> DatatypeCtorId(d) == ##M3.Path.InternalPath);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Path.InternalPath_q(d) } 
  M3.Path.InternalPath_q(d)
     ==> (exists a#11#0#0: Seq, a#11#1#0: Set, a#11#2#0: Seq :: 
      d == #M3.Path.InternalPath(a#11#0#0, a#11#1#0, a#11#2#0)));

// Constructor $Is
axiom (forall a#12#0#0: Seq, a#12#1#0: Set, a#12#2#0: Seq :: 
  { $Is(#M3.Path.InternalPath(a#12#0#0, a#12#1#0, a#12#2#0), Tclass.M3.Path()) } 
  $Is(#M3.Path.InternalPath(a#12#0#0, a#12#1#0, a#12#2#0), Tclass.M3.Path())
     <==> $Is(a#12#0#0, TSeq(TChar))
       && $Is(a#12#1#0, TSet(Tclass.M3.Path()))
       && $Is(a#12#2#0, TSeq(TChar)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Path.cmd(d), TSeq(TChar), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Path.InternalPath_q(d)
       && $IsAlloc(d, Tclass.M3.Path(), $h)
     ==> $IsAlloc(M3.Path.cmd(d), TSeq(TChar), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Path.deps(d), TSet(Tclass.M3.Path()), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Path.InternalPath_q(d)
       && $IsAlloc(d, Tclass.M3.Path(), $h)
     ==> $IsAlloc(M3.Path.deps(d), TSet(Tclass.M3.Path()), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Path.exp(d), TSeq(TChar), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Path.InternalPath_q(d)
       && $IsAlloc(d, Tclass.M3.Path(), $h)
     ==> $IsAlloc(M3.Path.exp(d), TSeq(TChar), $h));

// Constructor literal
axiom (forall a#13#0#0: Seq, a#13#1#0: Set, a#13#2#0: Seq :: 
  { #M3.Path.InternalPath(Lit(a#13#0#0), Lit(a#13#1#0), Lit(a#13#2#0)) } 
  #M3.Path.InternalPath(Lit(a#13#0#0), Lit(a#13#1#0), Lit(a#13#2#0))
     == Lit(#M3.Path.InternalPath(a#13#0#0, a#13#1#0, a#13#2#0)));

function M3.Path.cmd(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#14#0#0: Seq, a#14#1#0: Set, a#14#2#0: Seq :: 
  { #M3.Path.InternalPath(a#14#0#0, a#14#1#0, a#14#2#0) } 
  M3.Path.cmd(#M3.Path.InternalPath(a#14#0#0, a#14#1#0, a#14#2#0)) == a#14#0#0);

// Inductive seq element rank
axiom (forall a#15#0#0: Seq, a#15#1#0: Set, a#15#2#0: Seq, i: int :: 
  { Seq#Index(a#15#0#0, i), #M3.Path.InternalPath(a#15#0#0, a#15#1#0, a#15#2#0) } 
  0 <= i && i < Seq#Length(a#15#0#0)
     ==> DtRank($Unbox(Seq#Index(a#15#0#0, i)): DatatypeType)
       < DtRank(#M3.Path.InternalPath(a#15#0#0, a#15#1#0, a#15#2#0)));

// Inductive seq rank
axiom (forall a#16#0#0: Seq, a#16#1#0: Set, a#16#2#0: Seq :: 
  { #M3.Path.InternalPath(a#16#0#0, a#16#1#0, a#16#2#0) } 
  Seq#Rank(a#16#0#0) < DtRank(#M3.Path.InternalPath(a#16#0#0, a#16#1#0, a#16#2#0)));

function M3.Path.deps(DatatypeType) : Set;

// Constructor injectivity
axiom (forall a#17#0#0: Seq, a#17#1#0: Set, a#17#2#0: Seq :: 
  { #M3.Path.InternalPath(a#17#0#0, a#17#1#0, a#17#2#0) } 
  M3.Path.deps(#M3.Path.InternalPath(a#17#0#0, a#17#1#0, a#17#2#0)) == a#17#1#0);

// Inductive set element rank
axiom (forall a#18#0#0: Seq, a#18#1#0: Set, a#18#2#0: Seq, d: DatatypeType :: 
  { Set#IsMember(a#18#1#0, $Box(d)), #M3.Path.InternalPath(a#18#0#0, a#18#1#0, a#18#2#0) } 
  Set#IsMember(a#18#1#0, $Box(d))
     ==> DtRank(d) < DtRank(#M3.Path.InternalPath(a#18#0#0, a#18#1#0, a#18#2#0)));

function M3.Path.exp(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#19#0#0: Seq, a#19#1#0: Set, a#19#2#0: Seq :: 
  { #M3.Path.InternalPath(a#19#0#0, a#19#1#0, a#19#2#0) } 
  M3.Path.exp(#M3.Path.InternalPath(a#19#0#0, a#19#1#0, a#19#2#0)) == a#19#2#0);

// Inductive seq element rank
axiom (forall a#20#0#0: Seq, a#20#1#0: Set, a#20#2#0: Seq, i: int :: 
  { Seq#Index(a#20#2#0, i), #M3.Path.InternalPath(a#20#0#0, a#20#1#0, a#20#2#0) } 
  0 <= i && i < Seq#Length(a#20#2#0)
     ==> DtRank($Unbox(Seq#Index(a#20#2#0, i)): DatatypeType)
       < DtRank(#M3.Path.InternalPath(a#20#0#0, a#20#1#0, a#20#2#0)));

// Inductive seq rank
axiom (forall a#21#0#0: Seq, a#21#1#0: Set, a#21#2#0: Seq :: 
  { #M3.Path.InternalPath(a#21#0#0, a#21#1#0, a#21#2#0) } 
  Seq#Rank(a#21#2#0) < DtRank(#M3.Path.InternalPath(a#21#0#0, a#21#1#0, a#21#2#0)));

// Constructor function declaration
function #M3.Path.ExternalPath(Seq) : DatatypeType;

const unique ##M3.Path.ExternalPath: DtCtorId
uses {
// Constructor identifier
axiom (forall a#22#0#0: Seq :: 
  { #M3.Path.ExternalPath(a#22#0#0) } 
  DatatypeCtorId(#M3.Path.ExternalPath(a#22#0#0)) == ##M3.Path.ExternalPath);
}

function M3.Path.ExternalPath_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Path.ExternalPath_q(d) } 
  M3.Path.ExternalPath_q(d) <==> DatatypeCtorId(d) == ##M3.Path.ExternalPath);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Path.ExternalPath_q(d) } 
  M3.Path.ExternalPath_q(d)
     ==> (exists a#23#0#0: Seq :: d == #M3.Path.ExternalPath(a#23#0#0)));

// Constructor $Is
axiom (forall a#24#0#0: Seq :: 
  { $Is(#M3.Path.ExternalPath(a#24#0#0), Tclass.M3.Path()) } 
  $Is(#M3.Path.ExternalPath(a#24#0#0), Tclass.M3.Path())
     <==> $Is(a#24#0#0, TSeq(TChar)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Path._h13(d), TSeq(TChar), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Path.ExternalPath_q(d)
       && $IsAlloc(d, Tclass.M3.Path(), $h)
     ==> $IsAlloc(M3.Path._h13(d), TSeq(TChar), $h));

// Constructor literal
axiom (forall a#25#0#0: Seq :: 
  { #M3.Path.ExternalPath(Lit(a#25#0#0)) } 
  #M3.Path.ExternalPath(Lit(a#25#0#0)) == Lit(#M3.Path.ExternalPath(a#25#0#0)));

function M3.Path._h13(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#26#0#0: Seq :: 
  { #M3.Path.ExternalPath(a#26#0#0) } 
  M3.Path._h13(#M3.Path.ExternalPath(a#26#0#0)) == a#26#0#0);

// Inductive seq element rank
axiom (forall a#27#0#0: Seq, i: int :: 
  { Seq#Index(a#27#0#0, i), #M3.Path.ExternalPath(a#27#0#0) } 
  0 <= i && i < Seq#Length(a#27#0#0)
     ==> DtRank($Unbox(Seq#Index(a#27#0#0, i)): DatatypeType)
       < DtRank(#M3.Path.ExternalPath(a#27#0#0)));

// Inductive seq rank
axiom (forall a#28#0#0: Seq :: 
  { #M3.Path.ExternalPath(a#28#0#0) } 
  Seq#Rank(a#28#0#0) < DtRank(#M3.Path.ExternalPath(a#28#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Path(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Path())
     ==> $IsAlloc(d, Tclass.M3.Path(), $h));

// Depth-one case-split function
function $IsA#M3.Path(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Path(d) } 
  $IsA#M3.Path(d) ==> M3.Path.InternalPath_q(d) || M3.Path.ExternalPath_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Path.ExternalPath_q(d), $Is(d, Tclass.M3.Path()) } 
    { M3.Path.InternalPath_q(d), $Is(d, Tclass.M3.Path()) } 
  $Is(d, Tclass.M3.Path())
     ==> M3.Path.InternalPath_q(d) || M3.Path.ExternalPath_q(d));

// Datatype extensional equality declaration
function M3.Path#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Path.InternalPath
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Path#Equal(a, b), M3.Path.InternalPath_q(a) } 
    { M3.Path#Equal(a, b), M3.Path.InternalPath_q(b) } 
  M3.Path.InternalPath_q(a) && M3.Path.InternalPath_q(b)
     ==> (M3.Path#Equal(a, b)
       <==> Seq#Equal(M3.Path.cmd(a), M3.Path.cmd(b))
         && Set#Equal(M3.Path.deps(a), M3.Path.deps(b))
         && Seq#Equal(M3.Path.exp(a), M3.Path.exp(b))));

// Datatype extensional equality definition: #M3.Path.ExternalPath
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Path#Equal(a, b), M3.Path.ExternalPath_q(a) } 
    { M3.Path#Equal(a, b), M3.Path.ExternalPath_q(b) } 
  M3.Path.ExternalPath_q(a) && M3.Path.ExternalPath_q(b)
     ==> (M3.Path#Equal(a, b) <==> Seq#Equal(M3.Path._h13(a), M3.Path._h13(b))));

// Datatype extensionality axiom: M3.Path
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Path#Equal(a, b) } 
  M3.Path#Equal(a, b) <==> a == b);

const unique class.M3.Path: ClassName;

// Constructor function declaration
function #M3.Env.EnvCons(Map) : DatatypeType;

const unique ##M3.Env.EnvCons: DtCtorId
uses {
// Constructor identifier
axiom (forall a#29#0#0: Map :: 
  { #M3.Env.EnvCons(a#29#0#0) } 
  DatatypeCtorId(#M3.Env.EnvCons(a#29#0#0)) == ##M3.Env.EnvCons);
}

function M3.Env.EnvCons_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Env.EnvCons_q(d) } 
  M3.Env.EnvCons_q(d) <==> DatatypeCtorId(d) == ##M3.Env.EnvCons);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Env.EnvCons_q(d) } 
  M3.Env.EnvCons_q(d) ==> (exists a#30#0#0: Map :: d == #M3.Env.EnvCons(a#30#0#0)));

// Constructor $Is
axiom (forall a#31#0#0: Map :: 
  { $Is(#M3.Env.EnvCons(a#31#0#0), Tclass.M3.Env()) } 
  $Is(#M3.Env.EnvCons(a#31#0#0), Tclass.M3.Env())
     <==> $Is(a#31#0#0, TMap(Tclass.M3.Identifier(), Tclass.M3.Expression())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Env.m(d), TMap(Tclass.M3.Identifier(), Tclass.M3.Expression()), $h) } 
  $IsGoodHeap($h) && M3.Env.EnvCons_q(d) && $IsAlloc(d, Tclass.M3.Env(), $h)
     ==> $IsAlloc(M3.Env.m(d), TMap(Tclass.M3.Identifier(), Tclass.M3.Expression()), $h));

// Constructor literal
axiom (forall a#32#0#0: Map :: 
  { #M3.Env.EnvCons(Lit(a#32#0#0)) } 
  #M3.Env.EnvCons(Lit(a#32#0#0)) == Lit(#M3.Env.EnvCons(a#32#0#0)));

function M3.Env.m(DatatypeType) : Map;

// Constructor injectivity
axiom (forall a#33#0#0: Map :: 
  { #M3.Env.EnvCons(a#33#0#0) } 
  M3.Env.m(#M3.Env.EnvCons(a#33#0#0)) == a#33#0#0);

// Inductive map key rank
axiom (forall a#34#0#0: Map, d: DatatypeType :: 
  { Set#IsMember(Map#Domain(a#34#0#0), $Box(d)), #M3.Env.EnvCons(a#34#0#0) } 
  Set#IsMember(Map#Domain(a#34#0#0), $Box(d))
     ==> DtRank(d) < DtRank(#M3.Env.EnvCons(a#34#0#0)));

// Inductive map value rank
axiom (forall a#35#0#0: Map, bx: Box :: 
  { Set#IsMember(Map#Domain(a#35#0#0), bx), #M3.Env.EnvCons(a#35#0#0) } 
  Set#IsMember(Map#Domain(a#35#0#0), bx)
     ==> DtRank($Unbox(Map#Elements(a#35#0#0)[bx]): DatatypeType)
       < DtRank(#M3.Env.EnvCons(a#35#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Env(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Env()) ==> $IsAlloc(d, Tclass.M3.Env(), $h));

// Depth-one case-split function
function $IsA#M3.Env(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Env(d) } 
  $IsA#M3.Env(d) ==> M3.Env.EnvCons_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Env.EnvCons_q(d), $Is(d, Tclass.M3.Env()) } 
  $Is(d, Tclass.M3.Env()) ==> M3.Env.EnvCons_q(d));

// Datatype extensional equality declaration
function M3.Env#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Env.EnvCons
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Env#Equal(a, b) } 
  M3.Env#Equal(a, b) <==> Map#Equal(M3.Env.m(a), M3.Env.m(b)));

// Datatype extensionality axiom: M3.Env
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Env#Equal(a, b) } 
  M3.Env#Equal(a, b) <==> a == b);

const unique class.M3.Env: ClassName;

// Constructor function declaration
function #M3.WFCertificate.Cert(DatatypeType, Set) : DatatypeType;

const unique ##M3.WFCertificate.Cert: DtCtorId
uses {
// Constructor identifier
axiom (forall a#36#0#0: DatatypeType, a#36#1#0: Set :: 
  { #M3.WFCertificate.Cert(a#36#0#0, a#36#1#0) } 
  DatatypeCtorId(#M3.WFCertificate.Cert(a#36#0#0, a#36#1#0))
     == ##M3.WFCertificate.Cert);
}

function M3.WFCertificate.Cert_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.WFCertificate.Cert_q(d) } 
  M3.WFCertificate.Cert_q(d) <==> DatatypeCtorId(d) == ##M3.WFCertificate.Cert);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.WFCertificate.Cert_q(d) } 
  M3.WFCertificate.Cert_q(d)
     ==> (exists a#37#0#0: DatatypeType, a#37#1#0: Set :: 
      d == #M3.WFCertificate.Cert(a#37#0#0, a#37#1#0)));

// Constructor $Is
axiom (forall a#38#0#0: DatatypeType, a#38#1#0: Set :: 
  { $Is(#M3.WFCertificate.Cert(a#38#0#0, a#38#1#0), Tclass.M3.WFCertificate()) } 
  $Is(#M3.WFCertificate.Cert(a#38#0#0, a#38#1#0), Tclass.M3.WFCertificate())
     <==> $Is(a#38#0#0, Tclass.M3.Path())
       && $Is(a#38#1#0, TSet(Tclass.M3.WFCertificate())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.WFCertificate.p(d), Tclass.M3.Path(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.WFCertificate.Cert_q(d)
       && $IsAlloc(d, Tclass.M3.WFCertificate(), $h)
     ==> $IsAlloc(M3.WFCertificate.p(d), Tclass.M3.Path(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.WFCertificate.certs(d), TSet(Tclass.M3.WFCertificate()), $h) } 
  $IsGoodHeap($h)
       && 
      M3.WFCertificate.Cert_q(d)
       && $IsAlloc(d, Tclass.M3.WFCertificate(), $h)
     ==> $IsAlloc(M3.WFCertificate.certs(d), TSet(Tclass.M3.WFCertificate()), $h));

// Constructor literal
axiom (forall a#39#0#0: DatatypeType, a#39#1#0: Set :: 
  { #M3.WFCertificate.Cert(Lit(a#39#0#0), Lit(a#39#1#0)) } 
  #M3.WFCertificate.Cert(Lit(a#39#0#0), Lit(a#39#1#0))
     == Lit(#M3.WFCertificate.Cert(a#39#0#0, a#39#1#0)));

function M3.WFCertificate.p(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#40#0#0: DatatypeType, a#40#1#0: Set :: 
  { #M3.WFCertificate.Cert(a#40#0#0, a#40#1#0) } 
  M3.WFCertificate.p(#M3.WFCertificate.Cert(a#40#0#0, a#40#1#0)) == a#40#0#0);

// Inductive rank
axiom (forall a#41#0#0: DatatypeType, a#41#1#0: Set :: 
  { #M3.WFCertificate.Cert(a#41#0#0, a#41#1#0) } 
  DtRank(a#41#0#0) < DtRank(#M3.WFCertificate.Cert(a#41#0#0, a#41#1#0)));

function M3.WFCertificate.certs(DatatypeType) : Set;

// Constructor injectivity
axiom (forall a#42#0#0: DatatypeType, a#42#1#0: Set :: 
  { #M3.WFCertificate.Cert(a#42#0#0, a#42#1#0) } 
  M3.WFCertificate.certs(#M3.WFCertificate.Cert(a#42#0#0, a#42#1#0)) == a#42#1#0);

// Inductive set element rank
axiom (forall a#43#0#0: DatatypeType, a#43#1#0: Set, d: DatatypeType :: 
  { Set#IsMember(a#43#1#0, $Box(d)), #M3.WFCertificate.Cert(a#43#0#0, a#43#1#0) } 
  Set#IsMember(a#43#1#0, $Box(d))
     ==> DtRank(d) < DtRank(#M3.WFCertificate.Cert(a#43#0#0, a#43#1#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.WFCertificate(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.WFCertificate())
     ==> $IsAlloc(d, Tclass.M3.WFCertificate(), $h));

// Depth-one case-split function
function $IsA#M3.WFCertificate(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.WFCertificate(d) } 
  $IsA#M3.WFCertificate(d) ==> M3.WFCertificate.Cert_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.WFCertificate.Cert_q(d), $Is(d, Tclass.M3.WFCertificate()) } 
  $Is(d, Tclass.M3.WFCertificate()) ==> M3.WFCertificate.Cert_q(d));

// Datatype extensional equality declaration
function M3.WFCertificate#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.WFCertificate.Cert
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.WFCertificate#Equal(a, b) } 
  M3.WFCertificate#Equal(a, b)
     <==> M3.Path#Equal(M3.WFCertificate.p(a), M3.WFCertificate.p(b))
       && Set#Equal(M3.WFCertificate.certs(a), M3.WFCertificate.certs(b)));

// Datatype extensionality axiom: M3.WFCertificate
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.WFCertificate#Equal(a, b) } 
  M3.WFCertificate#Equal(a, b) <==> a == b);

const unique class.M3.WFCertificate: ClassName;

// Constructor function declaration
function #M3.State.StateCons(Map) : DatatypeType;

const unique ##M3.State.StateCons: DtCtorId
uses {
// Constructor identifier
axiom (forall a#44#0#0: Map :: 
  { #M3.State.StateCons(a#44#0#0) } 
  DatatypeCtorId(#M3.State.StateCons(a#44#0#0)) == ##M3.State.StateCons);
}

function M3.State.StateCons_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.State.StateCons_q(d) } 
  M3.State.StateCons_q(d) <==> DatatypeCtorId(d) == ##M3.State.StateCons);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.State.StateCons_q(d) } 
  M3.State.StateCons_q(d)
     ==> (exists a#45#0#0: Map :: d == #M3.State.StateCons(a#45#0#0)));

// Constructor $Is
axiom (forall a#46#0#0: Map :: 
  { $Is(#M3.State.StateCons(a#46#0#0), Tclass.M3.State()) } 
  $Is(#M3.State.StateCons(a#46#0#0), Tclass.M3.State())
     <==> $Is(a#46#0#0, TMap(Tclass.M3.Path(), Tclass.M3.Artifact())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.State.m(d), TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $h) } 
  $IsGoodHeap($h) && M3.State.StateCons_q(d) && $IsAlloc(d, Tclass.M3.State(), $h)
     ==> $IsAlloc(M3.State.m(d), TMap(Tclass.M3.Path(), Tclass.M3.Artifact()), $h));

// Constructor literal
axiom (forall a#47#0#0: Map :: 
  { #M3.State.StateCons(Lit(a#47#0#0)) } 
  #M3.State.StateCons(Lit(a#47#0#0)) == Lit(#M3.State.StateCons(a#47#0#0)));

function M3.State.m(DatatypeType) : Map;

// Constructor injectivity
axiom (forall a#48#0#0: Map :: 
  { #M3.State.StateCons(a#48#0#0) } 
  M3.State.m(#M3.State.StateCons(a#48#0#0)) == a#48#0#0);

// Inductive map key rank
axiom (forall a#49#0#0: Map, d: DatatypeType :: 
  { Set#IsMember(Map#Domain(a#49#0#0), $Box(d)), #M3.State.StateCons(a#49#0#0) } 
  Set#IsMember(Map#Domain(a#49#0#0), $Box(d))
     ==> DtRank(d) < DtRank(#M3.State.StateCons(a#49#0#0)));

// Inductive map value rank
axiom (forall a#50#0#0: Map, bx: Box :: 
  { Set#IsMember(Map#Domain(a#50#0#0), bx), #M3.State.StateCons(a#50#0#0) } 
  Set#IsMember(Map#Domain(a#50#0#0), bx)
     ==> DtRank($Unbox(Map#Elements(a#50#0#0)[bx]): DatatypeType)
       < DtRank(#M3.State.StateCons(a#50#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.State(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.State())
     ==> $IsAlloc(d, Tclass.M3.State(), $h));

// Depth-one case-split function
function $IsA#M3.State(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.State(d) } 
  $IsA#M3.State(d) ==> M3.State.StateCons_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.State.StateCons_q(d), $Is(d, Tclass.M3.State()) } 
  $Is(d, Tclass.M3.State()) ==> M3.State.StateCons_q(d));

// Datatype extensional equality declaration
function M3.State#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.State.StateCons
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.State#Equal(a, b) } 
  M3.State#Equal(a, b) <==> Map#Equal(M3.State.m(a), M3.State.m(b)));

// Datatype extensionality axiom: M3.State
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.State#Equal(a, b) } 
  M3.State#Equal(a, b) <==> a == b);

const unique class.M3.State: ClassName;

// Constructor function declaration
function #M3.Program.Program(Seq) : DatatypeType;

const unique ##M3.Program.Program: DtCtorId
uses {
// Constructor identifier
axiom (forall a#51#0#0: Seq :: 
  { #M3.Program.Program(a#51#0#0) } 
  DatatypeCtorId(#M3.Program.Program(a#51#0#0)) == ##M3.Program.Program);
}

function M3.Program.Program_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Program.Program_q(d) } 
  M3.Program.Program_q(d) <==> DatatypeCtorId(d) == ##M3.Program.Program);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Program.Program_q(d) } 
  M3.Program.Program_q(d)
     ==> (exists a#52#0#0: Seq :: d == #M3.Program.Program(a#52#0#0)));

// Constructor $Is
axiom (forall a#53#0#0: Seq :: 
  { $Is(#M3.Program.Program(a#53#0#0), Tclass.M3.Program()) } 
  $Is(#M3.Program.Program(a#53#0#0), Tclass.M3.Program())
     <==> $Is(a#53#0#0, TSeq(Tclass.M3.Statement())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Program.stmts(d), TSeq(Tclass.M3.Statement()), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Program.Program_q(d)
       && $IsAlloc(d, Tclass.M3.Program(), $h)
     ==> $IsAlloc(M3.Program.stmts(d), TSeq(Tclass.M3.Statement()), $h));

// Constructor literal
axiom (forall a#54#0#0: Seq :: 
  { #M3.Program.Program(Lit(a#54#0#0)) } 
  #M3.Program.Program(Lit(a#54#0#0)) == Lit(#M3.Program.Program(a#54#0#0)));

function M3.Program.stmts(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#55#0#0: Seq :: 
  { #M3.Program.Program(a#55#0#0) } 
  M3.Program.stmts(#M3.Program.Program(a#55#0#0)) == a#55#0#0);

// Inductive seq element rank
axiom (forall a#56#0#0: Seq, i: int :: 
  { Seq#Index(a#56#0#0, i), #M3.Program.Program(a#56#0#0) } 
  0 <= i && i < Seq#Length(a#56#0#0)
     ==> DtRank($Unbox(Seq#Index(a#56#0#0, i)): DatatypeType)
       < DtRank(#M3.Program.Program(a#56#0#0)));

// Inductive seq rank
axiom (forall a#57#0#0: Seq :: 
  { #M3.Program.Program(a#57#0#0) } 
  Seq#Rank(a#57#0#0) < DtRank(#M3.Program.Program(a#57#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Program(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Program())
     ==> $IsAlloc(d, Tclass.M3.Program(), $h));

// Depth-one case-split function
function $IsA#M3.Program(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Program(d) } 
  $IsA#M3.Program(d) ==> M3.Program.Program_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Program.Program_q(d), $Is(d, Tclass.M3.Program()) } 
  $Is(d, Tclass.M3.Program()) ==> M3.Program.Program_q(d));

// Datatype extensional equality declaration
function M3.Program#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Program.Program
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Program#Equal(a, b) } 
  M3.Program#Equal(a, b) <==> Seq#Equal(M3.Program.stmts(a), M3.Program.stmts(b)));

// Datatype extensionality axiom: M3.Program
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Program#Equal(a, b) } 
  M3.Program#Equal(a, b) <==> a == b);

const unique class.M3.Program: ClassName;

// Constructor function declaration
function #M3.Statement.stmtVariable(DatatypeType, DatatypeType) : DatatypeType;

const unique ##M3.Statement.stmtVariable: DtCtorId
uses {
// Constructor identifier
axiom (forall a#58#0#0: DatatypeType, a#58#1#0: DatatypeType :: 
  { #M3.Statement.stmtVariable(a#58#0#0, a#58#1#0) } 
  DatatypeCtorId(#M3.Statement.stmtVariable(a#58#0#0, a#58#1#0))
     == ##M3.Statement.stmtVariable);
}

function M3.Statement.stmtVariable_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Statement.stmtVariable_q(d) } 
  M3.Statement.stmtVariable_q(d)
     <==> DatatypeCtorId(d) == ##M3.Statement.stmtVariable);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Statement.stmtVariable_q(d) } 
  M3.Statement.stmtVariable_q(d)
     ==> (exists a#59#0#0: DatatypeType, a#59#1#0: DatatypeType :: 
      d == #M3.Statement.stmtVariable(a#59#0#0, a#59#1#0)));

// Constructor $Is
axiom (forall a#60#0#0: DatatypeType, a#60#1#0: DatatypeType :: 
  { $Is(#M3.Statement.stmtVariable(a#60#0#0, a#60#1#0), Tclass.M3.Statement()) } 
  $Is(#M3.Statement.stmtVariable(a#60#0#0, a#60#1#0), Tclass.M3.Statement())
     <==> $Is(a#60#0#0, Tclass.M3.Identifier()) && $Is(a#60#1#0, Tclass.M3.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Statement.id(d), Tclass.M3.Identifier(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Statement.stmtVariable_q(d)
       && $IsAlloc(d, Tclass.M3.Statement(), $h)
     ==> $IsAlloc(M3.Statement.id(d), Tclass.M3.Identifier(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Statement.expr(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Statement.stmtVariable_q(d)
       && $IsAlloc(d, Tclass.M3.Statement(), $h)
     ==> $IsAlloc(M3.Statement.expr(d), Tclass.M3.Expression(), $h));

// Constructor literal
axiom (forall a#61#0#0: DatatypeType, a#61#1#0: DatatypeType :: 
  { #M3.Statement.stmtVariable(Lit(a#61#0#0), Lit(a#61#1#0)) } 
  #M3.Statement.stmtVariable(Lit(a#61#0#0), Lit(a#61#1#0))
     == Lit(#M3.Statement.stmtVariable(a#61#0#0, a#61#1#0)));

function M3.Statement.id(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#62#0#0: DatatypeType, a#62#1#0: DatatypeType :: 
  { #M3.Statement.stmtVariable(a#62#0#0, a#62#1#0) } 
  M3.Statement.id(#M3.Statement.stmtVariable(a#62#0#0, a#62#1#0)) == a#62#0#0);

// Inductive rank
axiom (forall a#63#0#0: DatatypeType, a#63#1#0: DatatypeType :: 
  { #M3.Statement.stmtVariable(a#63#0#0, a#63#1#0) } 
  DtRank(a#63#0#0) < DtRank(#M3.Statement.stmtVariable(a#63#0#0, a#63#1#0)));

function M3.Statement.expr(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#64#0#0: DatatypeType, a#64#1#0: DatatypeType :: 
  { #M3.Statement.stmtVariable(a#64#0#0, a#64#1#0) } 
  M3.Statement.expr(#M3.Statement.stmtVariable(a#64#0#0, a#64#1#0)) == a#64#1#0);

// Inductive rank
axiom (forall a#65#0#0: DatatypeType, a#65#1#0: DatatypeType :: 
  { #M3.Statement.stmtVariable(a#65#0#0, a#65#1#0) } 
  DtRank(a#65#1#0) < DtRank(#M3.Statement.stmtVariable(a#65#0#0, a#65#1#0)));

// Constructor function declaration
function #M3.Statement.stmtReturn(DatatypeType) : DatatypeType;

const unique ##M3.Statement.stmtReturn: DtCtorId
uses {
// Constructor identifier
axiom (forall a#66#0#0: DatatypeType :: 
  { #M3.Statement.stmtReturn(a#66#0#0) } 
  DatatypeCtorId(#M3.Statement.stmtReturn(a#66#0#0)) == ##M3.Statement.stmtReturn);
}

function M3.Statement.stmtReturn_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Statement.stmtReturn_q(d) } 
  M3.Statement.stmtReturn_q(d) <==> DatatypeCtorId(d) == ##M3.Statement.stmtReturn);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Statement.stmtReturn_q(d) } 
  M3.Statement.stmtReturn_q(d)
     ==> (exists a#67#0#0: DatatypeType :: d == #M3.Statement.stmtReturn(a#67#0#0)));

// Constructor $Is
axiom (forall a#68#0#0: DatatypeType :: 
  { $Is(#M3.Statement.stmtReturn(a#68#0#0), Tclass.M3.Statement()) } 
  $Is(#M3.Statement.stmtReturn(a#68#0#0), Tclass.M3.Statement())
     <==> $Is(a#68#0#0, Tclass.M3.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Statement.ret(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Statement.stmtReturn_q(d)
       && $IsAlloc(d, Tclass.M3.Statement(), $h)
     ==> $IsAlloc(M3.Statement.ret(d), Tclass.M3.Expression(), $h));

// Constructor literal
axiom (forall a#69#0#0: DatatypeType :: 
  { #M3.Statement.stmtReturn(Lit(a#69#0#0)) } 
  #M3.Statement.stmtReturn(Lit(a#69#0#0))
     == Lit(#M3.Statement.stmtReturn(a#69#0#0)));

function M3.Statement.ret(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#70#0#0: DatatypeType :: 
  { #M3.Statement.stmtReturn(a#70#0#0) } 
  M3.Statement.ret(#M3.Statement.stmtReturn(a#70#0#0)) == a#70#0#0);

// Inductive rank
axiom (forall a#71#0#0: DatatypeType :: 
  { #M3.Statement.stmtReturn(a#71#0#0) } 
  DtRank(a#71#0#0) < DtRank(#M3.Statement.stmtReturn(a#71#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Statement(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Statement())
     ==> $IsAlloc(d, Tclass.M3.Statement(), $h));

// Depth-one case-split function
function $IsA#M3.Statement(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Statement(d) } 
  $IsA#M3.Statement(d)
     ==> M3.Statement.stmtVariable_q(d) || M3.Statement.stmtReturn_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Statement.stmtReturn_q(d), $Is(d, Tclass.M3.Statement()) } 
    { M3.Statement.stmtVariable_q(d), $Is(d, Tclass.M3.Statement()) } 
  $Is(d, Tclass.M3.Statement())
     ==> M3.Statement.stmtVariable_q(d) || M3.Statement.stmtReturn_q(d));

// Datatype extensional equality declaration
function M3.Statement#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Statement.stmtVariable
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Statement#Equal(a, b), M3.Statement.stmtVariable_q(a) } 
    { M3.Statement#Equal(a, b), M3.Statement.stmtVariable_q(b) } 
  M3.Statement.stmtVariable_q(a) && M3.Statement.stmtVariable_q(b)
     ==> (M3.Statement#Equal(a, b)
       <==> M3.Identifier#Equal(M3.Statement.id(a), M3.Statement.id(b))
         && M3.Expression#Equal(M3.Statement.expr(a), M3.Statement.expr(b))));

// Datatype extensional equality definition: #M3.Statement.stmtReturn
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Statement#Equal(a, b), M3.Statement.stmtReturn_q(a) } 
    { M3.Statement#Equal(a, b), M3.Statement.stmtReturn_q(b) } 
  M3.Statement.stmtReturn_q(a) && M3.Statement.stmtReturn_q(b)
     ==> (M3.Statement#Equal(a, b)
       <==> M3.Expression#Equal(M3.Statement.ret(a), M3.Statement.ret(b))));

// Datatype extensionality axiom: M3.Statement
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Statement#Equal(a, b) } 
  M3.Statement#Equal(a, b) <==> a == b);

const unique class.M3.Statement: ClassName;

// Constructor function declaration
function #M3.Expression.exprLiteral(DatatypeType) : DatatypeType;

const unique ##M3.Expression.exprLiteral: DtCtorId
uses {
// Constructor identifier
axiom (forall a#72#0#0: DatatypeType :: 
  { #M3.Expression.exprLiteral(a#72#0#0) } 
  DatatypeCtorId(#M3.Expression.exprLiteral(a#72#0#0))
     == ##M3.Expression.exprLiteral);
}

function M3.Expression.exprLiteral_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprLiteral_q(d) } 
  M3.Expression.exprLiteral_q(d)
     <==> DatatypeCtorId(d) == ##M3.Expression.exprLiteral);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprLiteral_q(d) } 
  M3.Expression.exprLiteral_q(d)
     ==> (exists a#73#0#0: DatatypeType :: d == #M3.Expression.exprLiteral(a#73#0#0)));

// Constructor $Is
axiom (forall a#74#0#0: DatatypeType :: 
  { $Is(#M3.Expression.exprLiteral(a#74#0#0), Tclass.M3.Expression()) } 
  $Is(#M3.Expression.exprLiteral(a#74#0#0), Tclass.M3.Expression())
     <==> $Is(a#74#0#0, Tclass.M3.Literal()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.lit(d), Tclass.M3.Literal(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprLiteral_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.lit(d), Tclass.M3.Literal(), $h));

// Constructor literal
axiom (forall a#75#0#0: DatatypeType :: 
  { #M3.Expression.exprLiteral(Lit(a#75#0#0)) } 
  #M3.Expression.exprLiteral(Lit(a#75#0#0))
     == Lit(#M3.Expression.exprLiteral(a#75#0#0)));

function M3.Expression.lit(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#76#0#0: DatatypeType :: 
  { #M3.Expression.exprLiteral(a#76#0#0) } 
  M3.Expression.lit(#M3.Expression.exprLiteral(a#76#0#0)) == a#76#0#0);

// Inductive rank
axiom (forall a#77#0#0: DatatypeType :: 
  { #M3.Expression.exprLiteral(a#77#0#0) } 
  DtRank(a#77#0#0) < DtRank(#M3.Expression.exprLiteral(a#77#0#0)));

// Constructor function declaration
function #M3.Expression.exprIdentifier(DatatypeType) : DatatypeType;

const unique ##M3.Expression.exprIdentifier: DtCtorId
uses {
// Constructor identifier
axiom (forall a#78#0#0: DatatypeType :: 
  { #M3.Expression.exprIdentifier(a#78#0#0) } 
  DatatypeCtorId(#M3.Expression.exprIdentifier(a#78#0#0))
     == ##M3.Expression.exprIdentifier);
}

function M3.Expression.exprIdentifier_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprIdentifier_q(d) } 
  M3.Expression.exprIdentifier_q(d)
     <==> DatatypeCtorId(d) == ##M3.Expression.exprIdentifier);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprIdentifier_q(d) } 
  M3.Expression.exprIdentifier_q(d)
     ==> (exists a#79#0#0: DatatypeType :: d == #M3.Expression.exprIdentifier(a#79#0#0)));

// Constructor $Is
axiom (forall a#80#0#0: DatatypeType :: 
  { $Is(#M3.Expression.exprIdentifier(a#80#0#0), Tclass.M3.Expression()) } 
  $Is(#M3.Expression.exprIdentifier(a#80#0#0), Tclass.M3.Expression())
     <==> $Is(a#80#0#0, Tclass.M3.Identifier()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.id(d), Tclass.M3.Identifier(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprIdentifier_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.id(d), Tclass.M3.Identifier(), $h));

// Constructor literal
axiom (forall a#81#0#0: DatatypeType :: 
  { #M3.Expression.exprIdentifier(Lit(a#81#0#0)) } 
  #M3.Expression.exprIdentifier(Lit(a#81#0#0))
     == Lit(#M3.Expression.exprIdentifier(a#81#0#0)));

function M3.Expression.id(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#82#0#0: DatatypeType :: 
  { #M3.Expression.exprIdentifier(a#82#0#0) } 
  M3.Expression.id(#M3.Expression.exprIdentifier(a#82#0#0)) == a#82#0#0);

// Inductive rank
axiom (forall a#83#0#0: DatatypeType :: 
  { #M3.Expression.exprIdentifier(a#83#0#0) } 
  DtRank(a#83#0#0) < DtRank(#M3.Expression.exprIdentifier(a#83#0#0)));

// Constructor function declaration
function #M3.Expression.exprIf(DatatypeType, DatatypeType, DatatypeType) : DatatypeType;

const unique ##M3.Expression.exprIf: DtCtorId
uses {
// Constructor identifier
axiom (forall a#84#0#0: DatatypeType, a#84#1#0: DatatypeType, a#84#2#0: DatatypeType :: 
  { #M3.Expression.exprIf(a#84#0#0, a#84#1#0, a#84#2#0) } 
  DatatypeCtorId(#M3.Expression.exprIf(a#84#0#0, a#84#1#0, a#84#2#0))
     == ##M3.Expression.exprIf);
}

function M3.Expression.exprIf_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprIf_q(d) } 
  M3.Expression.exprIf_q(d) <==> DatatypeCtorId(d) == ##M3.Expression.exprIf);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprIf_q(d) } 
  M3.Expression.exprIf_q(d)
     ==> (exists a#85#0#0: DatatypeType, a#85#1#0: DatatypeType, a#85#2#0: DatatypeType :: 
      d == #M3.Expression.exprIf(a#85#0#0, a#85#1#0, a#85#2#0)));

// Constructor $Is
axiom (forall a#86#0#0: DatatypeType, a#86#1#0: DatatypeType, a#86#2#0: DatatypeType :: 
  { $Is(#M3.Expression.exprIf(a#86#0#0, a#86#1#0, a#86#2#0), Tclass.M3.Expression()) } 
  $Is(#M3.Expression.exprIf(a#86#0#0, a#86#1#0, a#86#2#0), Tclass.M3.Expression())
     <==> $Is(a#86#0#0, Tclass.M3.Expression())
       && $Is(a#86#1#0, Tclass.M3.Expression())
       && $Is(a#86#2#0, Tclass.M3.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.cond(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprIf_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.cond(d), Tclass.M3.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.ifTrue(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprIf_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.ifTrue(d), Tclass.M3.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.ifFalse(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprIf_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.ifFalse(d), Tclass.M3.Expression(), $h));

// Constructor literal
axiom (forall a#87#0#0: DatatypeType, a#87#1#0: DatatypeType, a#87#2#0: DatatypeType :: 
  { #M3.Expression.exprIf(Lit(a#87#0#0), Lit(a#87#1#0), Lit(a#87#2#0)) } 
  #M3.Expression.exprIf(Lit(a#87#0#0), Lit(a#87#1#0), Lit(a#87#2#0))
     == Lit(#M3.Expression.exprIf(a#87#0#0, a#87#1#0, a#87#2#0)));

function M3.Expression.cond(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#88#0#0: DatatypeType, a#88#1#0: DatatypeType, a#88#2#0: DatatypeType :: 
  { #M3.Expression.exprIf(a#88#0#0, a#88#1#0, a#88#2#0) } 
  M3.Expression.cond(#M3.Expression.exprIf(a#88#0#0, a#88#1#0, a#88#2#0))
     == a#88#0#0);

// Inductive rank
axiom (forall a#89#0#0: DatatypeType, a#89#1#0: DatatypeType, a#89#2#0: DatatypeType :: 
  { #M3.Expression.exprIf(a#89#0#0, a#89#1#0, a#89#2#0) } 
  DtRank(a#89#0#0) < DtRank(#M3.Expression.exprIf(a#89#0#0, a#89#1#0, a#89#2#0)));

function M3.Expression.ifTrue(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#90#0#0: DatatypeType, a#90#1#0: DatatypeType, a#90#2#0: DatatypeType :: 
  { #M3.Expression.exprIf(a#90#0#0, a#90#1#0, a#90#2#0) } 
  M3.Expression.ifTrue(#M3.Expression.exprIf(a#90#0#0, a#90#1#0, a#90#2#0))
     == a#90#1#0);

// Inductive rank
axiom (forall a#91#0#0: DatatypeType, a#91#1#0: DatatypeType, a#91#2#0: DatatypeType :: 
  { #M3.Expression.exprIf(a#91#0#0, a#91#1#0, a#91#2#0) } 
  DtRank(a#91#1#0) < DtRank(#M3.Expression.exprIf(a#91#0#0, a#91#1#0, a#91#2#0)));

function M3.Expression.ifFalse(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#92#0#0: DatatypeType, a#92#1#0: DatatypeType, a#92#2#0: DatatypeType :: 
  { #M3.Expression.exprIf(a#92#0#0, a#92#1#0, a#92#2#0) } 
  M3.Expression.ifFalse(#M3.Expression.exprIf(a#92#0#0, a#92#1#0, a#92#2#0))
     == a#92#2#0);

// Inductive rank
axiom (forall a#93#0#0: DatatypeType, a#93#1#0: DatatypeType, a#93#2#0: DatatypeType :: 
  { #M3.Expression.exprIf(a#93#0#0, a#93#1#0, a#93#2#0) } 
  DtRank(a#93#2#0) < DtRank(#M3.Expression.exprIf(a#93#0#0, a#93#1#0, a#93#2#0)));

// Constructor function declaration
function #M3.Expression.exprAnd(DatatypeType, DatatypeType) : DatatypeType;

const unique ##M3.Expression.exprAnd: DtCtorId
uses {
// Constructor identifier
axiom (forall a#94#0#0: DatatypeType, a#94#1#0: DatatypeType :: 
  { #M3.Expression.exprAnd(a#94#0#0, a#94#1#0) } 
  DatatypeCtorId(#M3.Expression.exprAnd(a#94#0#0, a#94#1#0))
     == ##M3.Expression.exprAnd);
}

function M3.Expression.exprAnd_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprAnd_q(d) } 
  M3.Expression.exprAnd_q(d) <==> DatatypeCtorId(d) == ##M3.Expression.exprAnd);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprAnd_q(d) } 
  M3.Expression.exprAnd_q(d)
     ==> (exists a#95#0#0: DatatypeType, a#95#1#0: DatatypeType :: 
      d == #M3.Expression.exprAnd(a#95#0#0, a#95#1#0)));

// Constructor $Is
axiom (forall a#96#0#0: DatatypeType, a#96#1#0: DatatypeType :: 
  { $Is(#M3.Expression.exprAnd(a#96#0#0, a#96#1#0), Tclass.M3.Expression()) } 
  $Is(#M3.Expression.exprAnd(a#96#0#0, a#96#1#0), Tclass.M3.Expression())
     <==> $Is(a#96#0#0, Tclass.M3.Expression()) && $Is(a#96#1#0, Tclass.M3.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.conj0(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprAnd_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.conj0(d), Tclass.M3.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.conj1(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprAnd_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.conj1(d), Tclass.M3.Expression(), $h));

// Constructor literal
axiom (forall a#97#0#0: DatatypeType, a#97#1#0: DatatypeType :: 
  { #M3.Expression.exprAnd(Lit(a#97#0#0), Lit(a#97#1#0)) } 
  #M3.Expression.exprAnd(Lit(a#97#0#0), Lit(a#97#1#0))
     == Lit(#M3.Expression.exprAnd(a#97#0#0, a#97#1#0)));

function M3.Expression.conj0(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#98#0#0: DatatypeType, a#98#1#0: DatatypeType :: 
  { #M3.Expression.exprAnd(a#98#0#0, a#98#1#0) } 
  M3.Expression.conj0(#M3.Expression.exprAnd(a#98#0#0, a#98#1#0)) == a#98#0#0);

// Inductive rank
axiom (forall a#99#0#0: DatatypeType, a#99#1#0: DatatypeType :: 
  { #M3.Expression.exprAnd(a#99#0#0, a#99#1#0) } 
  DtRank(a#99#0#0) < DtRank(#M3.Expression.exprAnd(a#99#0#0, a#99#1#0)));

function M3.Expression.conj1(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#100#0#0: DatatypeType, a#100#1#0: DatatypeType :: 
  { #M3.Expression.exprAnd(a#100#0#0, a#100#1#0) } 
  M3.Expression.conj1(#M3.Expression.exprAnd(a#100#0#0, a#100#1#0)) == a#100#1#0);

// Inductive rank
axiom (forall a#101#0#0: DatatypeType, a#101#1#0: DatatypeType :: 
  { #M3.Expression.exprAnd(a#101#0#0, a#101#1#0) } 
  DtRank(a#101#1#0) < DtRank(#M3.Expression.exprAnd(a#101#0#0, a#101#1#0)));

// Constructor function declaration
function #M3.Expression.exprOr(DatatypeType, DatatypeType) : DatatypeType;

const unique ##M3.Expression.exprOr: DtCtorId
uses {
// Constructor identifier
axiom (forall a#102#0#0: DatatypeType, a#102#1#0: DatatypeType :: 
  { #M3.Expression.exprOr(a#102#0#0, a#102#1#0) } 
  DatatypeCtorId(#M3.Expression.exprOr(a#102#0#0, a#102#1#0))
     == ##M3.Expression.exprOr);
}

function M3.Expression.exprOr_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprOr_q(d) } 
  M3.Expression.exprOr_q(d) <==> DatatypeCtorId(d) == ##M3.Expression.exprOr);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprOr_q(d) } 
  M3.Expression.exprOr_q(d)
     ==> (exists a#103#0#0: DatatypeType, a#103#1#0: DatatypeType :: 
      d == #M3.Expression.exprOr(a#103#0#0, a#103#1#0)));

// Constructor $Is
axiom (forall a#104#0#0: DatatypeType, a#104#1#0: DatatypeType :: 
  { $Is(#M3.Expression.exprOr(a#104#0#0, a#104#1#0), Tclass.M3.Expression()) } 
  $Is(#M3.Expression.exprOr(a#104#0#0, a#104#1#0), Tclass.M3.Expression())
     <==> $Is(a#104#0#0, Tclass.M3.Expression()) && $Is(a#104#1#0, Tclass.M3.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.disj0(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprOr_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.disj0(d), Tclass.M3.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.disj1(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprOr_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.disj1(d), Tclass.M3.Expression(), $h));

// Constructor literal
axiom (forall a#105#0#0: DatatypeType, a#105#1#0: DatatypeType :: 
  { #M3.Expression.exprOr(Lit(a#105#0#0), Lit(a#105#1#0)) } 
  #M3.Expression.exprOr(Lit(a#105#0#0), Lit(a#105#1#0))
     == Lit(#M3.Expression.exprOr(a#105#0#0, a#105#1#0)));

function M3.Expression.disj0(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#106#0#0: DatatypeType, a#106#1#0: DatatypeType :: 
  { #M3.Expression.exprOr(a#106#0#0, a#106#1#0) } 
  M3.Expression.disj0(#M3.Expression.exprOr(a#106#0#0, a#106#1#0)) == a#106#0#0);

// Inductive rank
axiom (forall a#107#0#0: DatatypeType, a#107#1#0: DatatypeType :: 
  { #M3.Expression.exprOr(a#107#0#0, a#107#1#0) } 
  DtRank(a#107#0#0) < DtRank(#M3.Expression.exprOr(a#107#0#0, a#107#1#0)));

function M3.Expression.disj1(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#108#0#0: DatatypeType, a#108#1#0: DatatypeType :: 
  { #M3.Expression.exprOr(a#108#0#0, a#108#1#0) } 
  M3.Expression.disj1(#M3.Expression.exprOr(a#108#0#0, a#108#1#0)) == a#108#1#0);

// Inductive rank
axiom (forall a#109#0#0: DatatypeType, a#109#1#0: DatatypeType :: 
  { #M3.Expression.exprOr(a#109#0#0, a#109#1#0) } 
  DtRank(a#109#1#0) < DtRank(#M3.Expression.exprOr(a#109#0#0, a#109#1#0)));

// Constructor function declaration
function #M3.Expression.exprInvocation(DatatypeType, Seq) : DatatypeType;

const unique ##M3.Expression.exprInvocation: DtCtorId
uses {
// Constructor identifier
axiom (forall a#110#0#0: DatatypeType, a#110#1#0: Seq :: 
  { #M3.Expression.exprInvocation(a#110#0#0, a#110#1#0) } 
  DatatypeCtorId(#M3.Expression.exprInvocation(a#110#0#0, a#110#1#0))
     == ##M3.Expression.exprInvocation);
}

function M3.Expression.exprInvocation_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprInvocation_q(d) } 
  M3.Expression.exprInvocation_q(d)
     <==> DatatypeCtorId(d) == ##M3.Expression.exprInvocation);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprInvocation_q(d) } 
  M3.Expression.exprInvocation_q(d)
     ==> (exists a#111#0#0: DatatypeType, a#111#1#0: Seq :: 
      d == #M3.Expression.exprInvocation(a#111#0#0, a#111#1#0)));

// Constructor $Is
axiom (forall a#112#0#0: DatatypeType, a#112#1#0: Seq :: 
  { $Is(#M3.Expression.exprInvocation(a#112#0#0, a#112#1#0), Tclass.M3.Expression()) } 
  $Is(#M3.Expression.exprInvocation(a#112#0#0, a#112#1#0), Tclass.M3.Expression())
     <==> $Is(a#112#0#0, Tclass.M3.Expression())
       && $Is(a#112#1#0, TSeq(Tclass.M3.Expression())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.fun(d), Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprInvocation_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.fun(d), Tclass.M3.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.args(d), TSeq(Tclass.M3.Expression()), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprInvocation_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.args(d), TSeq(Tclass.M3.Expression()), $h));

// Constructor literal
axiom (forall a#113#0#0: DatatypeType, a#113#1#0: Seq :: 
  { #M3.Expression.exprInvocation(Lit(a#113#0#0), Lit(a#113#1#0)) } 
  #M3.Expression.exprInvocation(Lit(a#113#0#0), Lit(a#113#1#0))
     == Lit(#M3.Expression.exprInvocation(a#113#0#0, a#113#1#0)));

function M3.Expression.fun(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#114#0#0: DatatypeType, a#114#1#0: Seq :: 
  { #M3.Expression.exprInvocation(a#114#0#0, a#114#1#0) } 
  M3.Expression.fun(#M3.Expression.exprInvocation(a#114#0#0, a#114#1#0))
     == a#114#0#0);

// Inductive rank
axiom (forall a#115#0#0: DatatypeType, a#115#1#0: Seq :: 
  { #M3.Expression.exprInvocation(a#115#0#0, a#115#1#0) } 
  DtRank(a#115#0#0) < DtRank(#M3.Expression.exprInvocation(a#115#0#0, a#115#1#0)));

function M3.Expression.args(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#116#0#0: DatatypeType, a#116#1#0: Seq :: 
  { #M3.Expression.exprInvocation(a#116#0#0, a#116#1#0) } 
  M3.Expression.args(#M3.Expression.exprInvocation(a#116#0#0, a#116#1#0))
     == a#116#1#0);

// Inductive seq element rank
axiom (forall a#117#0#0: DatatypeType, a#117#1#0: Seq, i: int :: 
  { Seq#Index(a#117#1#0, i), #M3.Expression.exprInvocation(a#117#0#0, a#117#1#0) } 
  0 <= i && i < Seq#Length(a#117#1#0)
     ==> DtRank($Unbox(Seq#Index(a#117#1#0, i)): DatatypeType)
       < DtRank(#M3.Expression.exprInvocation(a#117#0#0, a#117#1#0)));

// Inductive seq rank
axiom (forall a#118#0#0: DatatypeType, a#118#1#0: Seq :: 
  { #M3.Expression.exprInvocation(a#118#0#0, a#118#1#0) } 
  Seq#Rank(a#118#1#0)
     < DtRank(#M3.Expression.exprInvocation(a#118#0#0, a#118#1#0)));

// Constructor function declaration
function #M3.Expression.exprError(DatatypeType) : DatatypeType;

const unique ##M3.Expression.exprError: DtCtorId
uses {
// Constructor identifier
axiom (forall a#119#0#0: DatatypeType :: 
  { #M3.Expression.exprError(a#119#0#0) } 
  DatatypeCtorId(#M3.Expression.exprError(a#119#0#0)) == ##M3.Expression.exprError);
}

function M3.Expression.exprError_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprError_q(d) } 
  M3.Expression.exprError_q(d) <==> DatatypeCtorId(d) == ##M3.Expression.exprError);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprError_q(d) } 
  M3.Expression.exprError_q(d)
     ==> (exists a#120#0#0: DatatypeType :: d == #M3.Expression.exprError(a#120#0#0)));

function Tclass.M3.Reason() : Ty
uses {
// Tclass.M3.Reason Tag
axiom Tag(Tclass.M3.Reason()) == Tagclass.M3.Reason
   && TagFamily(Tclass.M3.Reason()) == tytagFamily$Reason;
}

const unique Tagclass.M3.Reason: TyTag;

// Box/unbox axiom for Tclass.M3.Reason
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M3.Reason()) } 
  $IsBox(bx, Tclass.M3.Reason())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M3.Reason()));

// Constructor $Is
axiom (forall a#121#0#0: DatatypeType :: 
  { $Is(#M3.Expression.exprError(a#121#0#0), Tclass.M3.Expression()) } 
  $Is(#M3.Expression.exprError(a#121#0#0), Tclass.M3.Expression())
     <==> $Is(a#121#0#0, Tclass.M3.Reason()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Expression.r(d), Tclass.M3.Reason(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Expression.exprError_q(d)
       && $IsAlloc(d, Tclass.M3.Expression(), $h)
     ==> $IsAlloc(M3.Expression.r(d), Tclass.M3.Reason(), $h));

// Constructor literal
axiom (forall a#122#0#0: DatatypeType :: 
  { #M3.Expression.exprError(Lit(a#122#0#0)) } 
  #M3.Expression.exprError(Lit(a#122#0#0))
     == Lit(#M3.Expression.exprError(a#122#0#0)));

function M3.Expression.r(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#123#0#0: DatatypeType :: 
  { #M3.Expression.exprError(a#123#0#0) } 
  M3.Expression.r(#M3.Expression.exprError(a#123#0#0)) == a#123#0#0);

// Inductive rank
axiom (forall a#124#0#0: DatatypeType :: 
  { #M3.Expression.exprError(a#124#0#0) } 
  DtRank(a#124#0#0) < DtRank(#M3.Expression.exprError(a#124#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Expression(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Expression())
     ==> $IsAlloc(d, Tclass.M3.Expression(), $h));

// Depth-one case-split function
function $IsA#M3.Expression(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Expression(d) } 
  $IsA#M3.Expression(d)
     ==> M3.Expression.exprLiteral_q(d)
       || M3.Expression.exprIdentifier_q(d)
       || M3.Expression.exprIf_q(d)
       || M3.Expression.exprAnd_q(d)
       || M3.Expression.exprOr_q(d)
       || M3.Expression.exprInvocation_q(d)
       || M3.Expression.exprError_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Expression.exprError_q(d), $Is(d, Tclass.M3.Expression()) } 
    { M3.Expression.exprInvocation_q(d), $Is(d, Tclass.M3.Expression()) } 
    { M3.Expression.exprOr_q(d), $Is(d, Tclass.M3.Expression()) } 
    { M3.Expression.exprAnd_q(d), $Is(d, Tclass.M3.Expression()) } 
    { M3.Expression.exprIf_q(d), $Is(d, Tclass.M3.Expression()) } 
    { M3.Expression.exprIdentifier_q(d), $Is(d, Tclass.M3.Expression()) } 
    { M3.Expression.exprLiteral_q(d), $Is(d, Tclass.M3.Expression()) } 
  $Is(d, Tclass.M3.Expression())
     ==> M3.Expression.exprLiteral_q(d)
       || M3.Expression.exprIdentifier_q(d)
       || M3.Expression.exprIf_q(d)
       || M3.Expression.exprAnd_q(d)
       || M3.Expression.exprOr_q(d)
       || M3.Expression.exprInvocation_q(d)
       || M3.Expression.exprError_q(d));

// Datatype extensional equality declaration
function M3.Expression#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Expression.exprLiteral
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Expression#Equal(a, b), M3.Expression.exprLiteral_q(a) } 
    { M3.Expression#Equal(a, b), M3.Expression.exprLiteral_q(b) } 
  M3.Expression.exprLiteral_q(a) && M3.Expression.exprLiteral_q(b)
     ==> (M3.Expression#Equal(a, b)
       <==> M3.Literal#Equal(M3.Expression.lit(a), M3.Expression.lit(b))));

// Datatype extensional equality definition: #M3.Expression.exprIdentifier
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Expression#Equal(a, b), M3.Expression.exprIdentifier_q(a) } 
    { M3.Expression#Equal(a, b), M3.Expression.exprIdentifier_q(b) } 
  M3.Expression.exprIdentifier_q(a) && M3.Expression.exprIdentifier_q(b)
     ==> (M3.Expression#Equal(a, b)
       <==> M3.Identifier#Equal(M3.Expression.id(a), M3.Expression.id(b))));

// Datatype extensional equality definition: #M3.Expression.exprIf
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Expression#Equal(a, b), M3.Expression.exprIf_q(a) } 
    { M3.Expression#Equal(a, b), M3.Expression.exprIf_q(b) } 
  M3.Expression.exprIf_q(a) && M3.Expression.exprIf_q(b)
     ==> (M3.Expression#Equal(a, b)
       <==> M3.Expression#Equal(M3.Expression.cond(a), M3.Expression.cond(b))
         && M3.Expression#Equal(M3.Expression.ifTrue(a), M3.Expression.ifTrue(b))
         && M3.Expression#Equal(M3.Expression.ifFalse(a), M3.Expression.ifFalse(b))));

// Datatype extensional equality definition: #M3.Expression.exprAnd
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Expression#Equal(a, b), M3.Expression.exprAnd_q(a) } 
    { M3.Expression#Equal(a, b), M3.Expression.exprAnd_q(b) } 
  M3.Expression.exprAnd_q(a) && M3.Expression.exprAnd_q(b)
     ==> (M3.Expression#Equal(a, b)
       <==> M3.Expression#Equal(M3.Expression.conj0(a), M3.Expression.conj0(b))
         && M3.Expression#Equal(M3.Expression.conj1(a), M3.Expression.conj1(b))));

// Datatype extensional equality definition: #M3.Expression.exprOr
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Expression#Equal(a, b), M3.Expression.exprOr_q(a) } 
    { M3.Expression#Equal(a, b), M3.Expression.exprOr_q(b) } 
  M3.Expression.exprOr_q(a) && M3.Expression.exprOr_q(b)
     ==> (M3.Expression#Equal(a, b)
       <==> M3.Expression#Equal(M3.Expression.disj0(a), M3.Expression.disj0(b))
         && M3.Expression#Equal(M3.Expression.disj1(a), M3.Expression.disj1(b))));

// Datatype extensional equality definition: #M3.Expression.exprInvocation
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Expression#Equal(a, b), M3.Expression.exprInvocation_q(a) } 
    { M3.Expression#Equal(a, b), M3.Expression.exprInvocation_q(b) } 
  M3.Expression.exprInvocation_q(a) && M3.Expression.exprInvocation_q(b)
     ==> (M3.Expression#Equal(a, b)
       <==> M3.Expression#Equal(M3.Expression.fun(a), M3.Expression.fun(b))
         && Seq#Equal(M3.Expression.args(a), M3.Expression.args(b))));

// Datatype extensional equality definition: #M3.Expression.exprError
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Expression#Equal(a, b), M3.Expression.exprError_q(a) } 
    { M3.Expression#Equal(a, b), M3.Expression.exprError_q(b) } 
  M3.Expression.exprError_q(a) && M3.Expression.exprError_q(b)
     ==> (M3.Expression#Equal(a, b)
       <==> M3.Reason#Equal(M3.Expression.r(a), M3.Expression.r(b))));

// Datatype extensionality axiom: M3.Expression
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Expression#Equal(a, b) } 
  M3.Expression#Equal(a, b) <==> a == b);

const unique class.M3.Expression: ClassName;

// Constructor function declaration
function #M3.Literal.litTrue() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Literal.litTrue()) == ##M3.Literal.litTrue;
// Constructor $Is
axiom $Is(#M3.Literal.litTrue(), Tclass.M3.Literal());
// Constructor literal
axiom #M3.Literal.litTrue() == Lit(#M3.Literal.litTrue());
}

const unique ##M3.Literal.litTrue: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Literal.litTrue()) == ##M3.Literal.litTrue;
}

function M3.Literal.litTrue_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litTrue_q(d) } 
  M3.Literal.litTrue_q(d) <==> DatatypeCtorId(d) == ##M3.Literal.litTrue);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litTrue_q(d) } 
  M3.Literal.litTrue_q(d) ==> d == #M3.Literal.litTrue());

// Constructor function declaration
function #M3.Literal.litFalse() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Literal.litFalse()) == ##M3.Literal.litFalse;
// Constructor $Is
axiom $Is(#M3.Literal.litFalse(), Tclass.M3.Literal());
// Constructor literal
axiom #M3.Literal.litFalse() == Lit(#M3.Literal.litFalse());
}

const unique ##M3.Literal.litFalse: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Literal.litFalse()) == ##M3.Literal.litFalse;
}

function M3.Literal.litFalse_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litFalse_q(d) } 
  M3.Literal.litFalse_q(d) <==> DatatypeCtorId(d) == ##M3.Literal.litFalse);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litFalse_q(d) } 
  M3.Literal.litFalse_q(d) ==> d == #M3.Literal.litFalse());

// Constructor function declaration
function #M3.Literal.litUndefined() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Literal.litUndefined()) == ##M3.Literal.litUndefined;
// Constructor $Is
axiom $Is(#M3.Literal.litUndefined(), Tclass.M3.Literal());
// Constructor literal
axiom #M3.Literal.litUndefined() == Lit(#M3.Literal.litUndefined());
}

const unique ##M3.Literal.litUndefined: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Literal.litUndefined()) == ##M3.Literal.litUndefined;
}

function M3.Literal.litUndefined_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litUndefined_q(d) } 
  M3.Literal.litUndefined_q(d) <==> DatatypeCtorId(d) == ##M3.Literal.litUndefined);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litUndefined_q(d) } 
  M3.Literal.litUndefined_q(d) ==> d == #M3.Literal.litUndefined());

// Constructor function declaration
function #M3.Literal.litNull() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Literal.litNull()) == ##M3.Literal.litNull;
// Constructor $Is
axiom $Is(#M3.Literal.litNull(), Tclass.M3.Literal());
// Constructor literal
axiom #M3.Literal.litNull() == Lit(#M3.Literal.litNull());
}

const unique ##M3.Literal.litNull: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Literal.litNull()) == ##M3.Literal.litNull;
}

function M3.Literal.litNull_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litNull_q(d) } 
  M3.Literal.litNull_q(d) <==> DatatypeCtorId(d) == ##M3.Literal.litNull);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litNull_q(d) } 
  M3.Literal.litNull_q(d) ==> d == #M3.Literal.litNull());

// Constructor function declaration
function #M3.Literal.litNumber(int) : DatatypeType;

const unique ##M3.Literal.litNumber: DtCtorId
uses {
// Constructor identifier
axiom (forall a#141#0#0: int :: 
  { #M3.Literal.litNumber(a#141#0#0) } 
  DatatypeCtorId(#M3.Literal.litNumber(a#141#0#0)) == ##M3.Literal.litNumber);
}

function M3.Literal.litNumber_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litNumber_q(d) } 
  M3.Literal.litNumber_q(d) <==> DatatypeCtorId(d) == ##M3.Literal.litNumber);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litNumber_q(d) } 
  M3.Literal.litNumber_q(d)
     ==> (exists a#142#0#0: int :: d == #M3.Literal.litNumber(a#142#0#0)));

// Constructor $Is
axiom (forall a#143#0#0: int :: 
  { $Is(#M3.Literal.litNumber(a#143#0#0), Tclass.M3.Literal()) } 
  $Is(#M3.Literal.litNumber(a#143#0#0), Tclass.M3.Literal())
     <==> $Is(a#143#0#0, TInt));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Literal.num(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      M3.Literal.litNumber_q(d)
       && $IsAlloc(d, Tclass.M3.Literal(), $h)
     ==> $IsAlloc(M3.Literal.num(d), TInt, $h));

// Constructor literal
axiom (forall a#144#0#0: int :: 
  { #M3.Literal.litNumber(LitInt(a#144#0#0)) } 
  #M3.Literal.litNumber(LitInt(a#144#0#0))
     == Lit(#M3.Literal.litNumber(a#144#0#0)));

function M3.Literal.num(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#145#0#0: int :: 
  { #M3.Literal.litNumber(a#145#0#0) } 
  M3.Literal.num(#M3.Literal.litNumber(a#145#0#0)) == a#145#0#0);

// Constructor function declaration
function #M3.Literal.litString(Seq) : DatatypeType;

const unique ##M3.Literal.litString: DtCtorId
uses {
// Constructor identifier
axiom (forall a#146#0#0: Seq :: 
  { #M3.Literal.litString(a#146#0#0) } 
  DatatypeCtorId(#M3.Literal.litString(a#146#0#0)) == ##M3.Literal.litString);
}

function M3.Literal.litString_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litString_q(d) } 
  M3.Literal.litString_q(d) <==> DatatypeCtorId(d) == ##M3.Literal.litString);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litString_q(d) } 
  M3.Literal.litString_q(d)
     ==> (exists a#147#0#0: Seq :: d == #M3.Literal.litString(a#147#0#0)));

// Constructor $Is
axiom (forall a#148#0#0: Seq :: 
  { $Is(#M3.Literal.litString(a#148#0#0), Tclass.M3.Literal()) } 
  $Is(#M3.Literal.litString(a#148#0#0), Tclass.M3.Literal())
     <==> $Is(a#148#0#0, TSeq(TChar)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Literal.str(d), TSeq(TChar), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Literal.litString_q(d)
       && $IsAlloc(d, Tclass.M3.Literal(), $h)
     ==> $IsAlloc(M3.Literal.str(d), TSeq(TChar), $h));

// Constructor literal
axiom (forall a#149#0#0: Seq :: 
  { #M3.Literal.litString(Lit(a#149#0#0)) } 
  #M3.Literal.litString(Lit(a#149#0#0)) == Lit(#M3.Literal.litString(a#149#0#0)));

function M3.Literal.str(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#150#0#0: Seq :: 
  { #M3.Literal.litString(a#150#0#0) } 
  M3.Literal.str(#M3.Literal.litString(a#150#0#0)) == a#150#0#0);

// Inductive seq element rank
axiom (forall a#151#0#0: Seq, i: int :: 
  { Seq#Index(a#151#0#0, i), #M3.Literal.litString(a#151#0#0) } 
  0 <= i && i < Seq#Length(a#151#0#0)
     ==> DtRank($Unbox(Seq#Index(a#151#0#0, i)): DatatypeType)
       < DtRank(#M3.Literal.litString(a#151#0#0)));

// Inductive seq rank
axiom (forall a#152#0#0: Seq :: 
  { #M3.Literal.litString(a#152#0#0) } 
  Seq#Rank(a#152#0#0) < DtRank(#M3.Literal.litString(a#152#0#0)));

// Constructor function declaration
function #M3.Literal.litPrimitive(DatatypeType) : DatatypeType;

const unique ##M3.Literal.litPrimitive: DtCtorId
uses {
// Constructor identifier
axiom (forall a#153#0#0: DatatypeType :: 
  { #M3.Literal.litPrimitive(a#153#0#0) } 
  DatatypeCtorId(#M3.Literal.litPrimitive(a#153#0#0)) == ##M3.Literal.litPrimitive);
}

function M3.Literal.litPrimitive_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litPrimitive_q(d) } 
  M3.Literal.litPrimitive_q(d) <==> DatatypeCtorId(d) == ##M3.Literal.litPrimitive);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litPrimitive_q(d) } 
  M3.Literal.litPrimitive_q(d)
     ==> (exists a#154#0#0: DatatypeType :: d == #M3.Literal.litPrimitive(a#154#0#0)));

// Constructor $Is
axiom (forall a#155#0#0: DatatypeType :: 
  { $Is(#M3.Literal.litPrimitive(a#155#0#0), Tclass.M3.Literal()) } 
  $Is(#M3.Literal.litPrimitive(a#155#0#0), Tclass.M3.Literal())
     <==> $Is(a#155#0#0, Tclass.M3.Primitive()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Literal.prim(d), Tclass.M3.Primitive(), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Literal.litPrimitive_q(d)
       && $IsAlloc(d, Tclass.M3.Literal(), $h)
     ==> $IsAlloc(M3.Literal.prim(d), Tclass.M3.Primitive(), $h));

// Constructor literal
axiom (forall a#156#0#0: DatatypeType :: 
  { #M3.Literal.litPrimitive(Lit(a#156#0#0)) } 
  #M3.Literal.litPrimitive(Lit(a#156#0#0))
     == Lit(#M3.Literal.litPrimitive(a#156#0#0)));

function M3.Literal.prim(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#157#0#0: DatatypeType :: 
  { #M3.Literal.litPrimitive(a#157#0#0) } 
  M3.Literal.prim(#M3.Literal.litPrimitive(a#157#0#0)) == a#157#0#0);

// Inductive rank
axiom (forall a#158#0#0: DatatypeType :: 
  { #M3.Literal.litPrimitive(a#158#0#0) } 
  DtRank(a#158#0#0) < DtRank(#M3.Literal.litPrimitive(a#158#0#0)));

// Constructor function declaration
function #M3.Literal.litArrOfPaths(Set) : DatatypeType;

const unique ##M3.Literal.litArrOfPaths: DtCtorId
uses {
// Constructor identifier
axiom (forall a#159#0#0: Set :: 
  { #M3.Literal.litArrOfPaths(a#159#0#0) } 
  DatatypeCtorId(#M3.Literal.litArrOfPaths(a#159#0#0))
     == ##M3.Literal.litArrOfPaths);
}

function M3.Literal.litArrOfPaths_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litArrOfPaths_q(d) } 
  M3.Literal.litArrOfPaths_q(d)
     <==> DatatypeCtorId(d) == ##M3.Literal.litArrOfPaths);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litArrOfPaths_q(d) } 
  M3.Literal.litArrOfPaths_q(d)
     ==> (exists a#160#0#0: Set :: d == #M3.Literal.litArrOfPaths(a#160#0#0)));

// Constructor $Is
axiom (forall a#161#0#0: Set :: 
  { $Is(#M3.Literal.litArrOfPaths(a#161#0#0), Tclass.M3.Literal()) } 
  $Is(#M3.Literal.litArrOfPaths(a#161#0#0), Tclass.M3.Literal())
     <==> $Is(a#161#0#0, TSet(Tclass.M3.Path())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Literal.paths(d), TSet(Tclass.M3.Path()), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Literal.litArrOfPaths_q(d)
       && $IsAlloc(d, Tclass.M3.Literal(), $h)
     ==> $IsAlloc(M3.Literal.paths(d), TSet(Tclass.M3.Path()), $h));

// Constructor literal
axiom (forall a#162#0#0: Set :: 
  { #M3.Literal.litArrOfPaths(Lit(a#162#0#0)) } 
  #M3.Literal.litArrOfPaths(Lit(a#162#0#0))
     == Lit(#M3.Literal.litArrOfPaths(a#162#0#0)));

function M3.Literal.paths(DatatypeType) : Set;

// Constructor injectivity
axiom (forall a#163#0#0: Set :: 
  { #M3.Literal.litArrOfPaths(a#163#0#0) } 
  M3.Literal.paths(#M3.Literal.litArrOfPaths(a#163#0#0)) == a#163#0#0);

// Inductive set element rank
axiom (forall a#164#0#0: Set, d: DatatypeType :: 
  { Set#IsMember(a#164#0#0, $Box(d)), #M3.Literal.litArrOfPaths(a#164#0#0) } 
  Set#IsMember(a#164#0#0, $Box(d))
     ==> DtRank(d) < DtRank(#M3.Literal.litArrOfPaths(a#164#0#0)));

// Constructor function declaration
function #M3.Literal.litArrOfStrings(Set) : DatatypeType;

const unique ##M3.Literal.litArrOfStrings: DtCtorId
uses {
// Constructor identifier
axiom (forall a#165#0#0: Set :: 
  { #M3.Literal.litArrOfStrings(a#165#0#0) } 
  DatatypeCtorId(#M3.Literal.litArrOfStrings(a#165#0#0))
     == ##M3.Literal.litArrOfStrings);
}

function M3.Literal.litArrOfStrings_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litArrOfStrings_q(d) } 
  M3.Literal.litArrOfStrings_q(d)
     <==> DatatypeCtorId(d) == ##M3.Literal.litArrOfStrings);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litArrOfStrings_q(d) } 
  M3.Literal.litArrOfStrings_q(d)
     ==> (exists a#166#0#0: Set :: d == #M3.Literal.litArrOfStrings(a#166#0#0)));

// Constructor $Is
axiom (forall a#167#0#0: Set :: 
  { $Is(#M3.Literal.litArrOfStrings(a#167#0#0), Tclass.M3.Literal()) } 
  $Is(#M3.Literal.litArrOfStrings(a#167#0#0), Tclass.M3.Literal())
     <==> $Is(a#167#0#0, TSet(TSeq(TChar))));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Literal.strs(d), TSet(TSeq(TChar)), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Literal.litArrOfStrings_q(d)
       && $IsAlloc(d, Tclass.M3.Literal(), $h)
     ==> $IsAlloc(M3.Literal.strs(d), TSet(TSeq(TChar)), $h));

// Constructor literal
axiom (forall a#168#0#0: Set :: 
  { #M3.Literal.litArrOfStrings(Lit(a#168#0#0)) } 
  #M3.Literal.litArrOfStrings(Lit(a#168#0#0))
     == Lit(#M3.Literal.litArrOfStrings(a#168#0#0)));

function M3.Literal.strs(DatatypeType) : Set;

// Constructor injectivity
axiom (forall a#169#0#0: Set :: 
  { #M3.Literal.litArrOfStrings(a#169#0#0) } 
  M3.Literal.strs(#M3.Literal.litArrOfStrings(a#169#0#0)) == a#169#0#0);

// Inductive set element rank
axiom (forall a#170#0#0: Set, d: DatatypeType :: 
  { Set#IsMember(a#170#0#0, $Box(d)), #M3.Literal.litArrOfStrings(a#170#0#0) } 
  Set#IsMember(a#170#0#0, $Box(d))
     ==> DtRank(d) < DtRank(#M3.Literal.litArrOfStrings(a#170#0#0)));

// Constructor function declaration
function #M3.Literal.litArray(Seq) : DatatypeType;

const unique ##M3.Literal.litArray: DtCtorId
uses {
// Constructor identifier
axiom (forall a#171#0#0: Seq :: 
  { #M3.Literal.litArray(a#171#0#0) } 
  DatatypeCtorId(#M3.Literal.litArray(a#171#0#0)) == ##M3.Literal.litArray);
}

function M3.Literal.litArray_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Literal.litArray_q(d) } 
  M3.Literal.litArray_q(d) <==> DatatypeCtorId(d) == ##M3.Literal.litArray);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Literal.litArray_q(d) } 
  M3.Literal.litArray_q(d)
     ==> (exists a#172#0#0: Seq :: d == #M3.Literal.litArray(a#172#0#0)));

// Constructor $Is
axiom (forall a#173#0#0: Seq :: 
  { $Is(#M3.Literal.litArray(a#173#0#0), Tclass.M3.Literal()) } 
  $Is(#M3.Literal.litArray(a#173#0#0), Tclass.M3.Literal())
     <==> $Is(a#173#0#0, TSeq(Tclass.M3.Expression())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M3.Literal.arr(d), TSeq(Tclass.M3.Expression()), $h) } 
  $IsGoodHeap($h)
       && 
      M3.Literal.litArray_q(d)
       && $IsAlloc(d, Tclass.M3.Literal(), $h)
     ==> $IsAlloc(M3.Literal.arr(d), TSeq(Tclass.M3.Expression()), $h));

// Constructor literal
axiom (forall a#174#0#0: Seq :: 
  { #M3.Literal.litArray(Lit(a#174#0#0)) } 
  #M3.Literal.litArray(Lit(a#174#0#0)) == Lit(#M3.Literal.litArray(a#174#0#0)));

function M3.Literal.arr(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#175#0#0: Seq :: 
  { #M3.Literal.litArray(a#175#0#0) } 
  M3.Literal.arr(#M3.Literal.litArray(a#175#0#0)) == a#175#0#0);

// Inductive seq element rank
axiom (forall a#176#0#0: Seq, i: int :: 
  { Seq#Index(a#176#0#0, i), #M3.Literal.litArray(a#176#0#0) } 
  0 <= i && i < Seq#Length(a#176#0#0)
     ==> DtRank($Unbox(Seq#Index(a#176#0#0, i)): DatatypeType)
       < DtRank(#M3.Literal.litArray(a#176#0#0)));

// Inductive seq rank
axiom (forall a#177#0#0: Seq :: 
  { #M3.Literal.litArray(a#177#0#0) } 
  Seq#Rank(a#177#0#0) < DtRank(#M3.Literal.litArray(a#177#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Literal(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Literal())
     ==> $IsAlloc(d, Tclass.M3.Literal(), $h));

// Depth-one case-split function
function $IsA#M3.Literal(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Literal(d) } 
  $IsA#M3.Literal(d)
     ==> M3.Literal.litTrue_q(d)
       || M3.Literal.litFalse_q(d)
       || M3.Literal.litUndefined_q(d)
       || M3.Literal.litNull_q(d)
       || M3.Literal.litNumber_q(d)
       || M3.Literal.litString_q(d)
       || M3.Literal.litPrimitive_q(d)
       || M3.Literal.litArrOfPaths_q(d)
       || M3.Literal.litArrOfStrings_q(d)
       || M3.Literal.litArray_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Literal.litArray_q(d), $Is(d, Tclass.M3.Literal()) } 
    { M3.Literal.litArrOfStrings_q(d), $Is(d, Tclass.M3.Literal()) } 
    { M3.Literal.litArrOfPaths_q(d), $Is(d, Tclass.M3.Literal()) } 
    { M3.Literal.litPrimitive_q(d), $Is(d, Tclass.M3.Literal()) } 
    { M3.Literal.litString_q(d), $Is(d, Tclass.M3.Literal()) } 
    { M3.Literal.litNumber_q(d), $Is(d, Tclass.M3.Literal()) } 
    { M3.Literal.litNull_q(d), $Is(d, Tclass.M3.Literal()) } 
    { M3.Literal.litUndefined_q(d), $Is(d, Tclass.M3.Literal()) } 
    { M3.Literal.litFalse_q(d), $Is(d, Tclass.M3.Literal()) } 
    { M3.Literal.litTrue_q(d), $Is(d, Tclass.M3.Literal()) } 
  $Is(d, Tclass.M3.Literal())
     ==> M3.Literal.litTrue_q(d)
       || M3.Literal.litFalse_q(d)
       || M3.Literal.litUndefined_q(d)
       || M3.Literal.litNull_q(d)
       || M3.Literal.litNumber_q(d)
       || M3.Literal.litString_q(d)
       || M3.Literal.litPrimitive_q(d)
       || M3.Literal.litArrOfPaths_q(d)
       || M3.Literal.litArrOfStrings_q(d)
       || M3.Literal.litArray_q(d));

// Datatype extensional equality declaration
function M3.Literal#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Literal.litTrue
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litTrue_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litTrue_q(b) } 
  M3.Literal.litTrue_q(a) && M3.Literal.litTrue_q(b) ==> M3.Literal#Equal(a, b));

// Datatype extensional equality definition: #M3.Literal.litFalse
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litFalse_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litFalse_q(b) } 
  M3.Literal.litFalse_q(a) && M3.Literal.litFalse_q(b) ==> M3.Literal#Equal(a, b));

// Datatype extensional equality definition: #M3.Literal.litUndefined
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litUndefined_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litUndefined_q(b) } 
  M3.Literal.litUndefined_q(a) && M3.Literal.litUndefined_q(b)
     ==> M3.Literal#Equal(a, b));

// Datatype extensional equality definition: #M3.Literal.litNull
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litNull_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litNull_q(b) } 
  M3.Literal.litNull_q(a) && M3.Literal.litNull_q(b) ==> M3.Literal#Equal(a, b));

// Datatype extensional equality definition: #M3.Literal.litNumber
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litNumber_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litNumber_q(b) } 
  M3.Literal.litNumber_q(a) && M3.Literal.litNumber_q(b)
     ==> (M3.Literal#Equal(a, b) <==> M3.Literal.num(a) == M3.Literal.num(b)));

// Datatype extensional equality definition: #M3.Literal.litString
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litString_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litString_q(b) } 
  M3.Literal.litString_q(a) && M3.Literal.litString_q(b)
     ==> (M3.Literal#Equal(a, b) <==> Seq#Equal(M3.Literal.str(a), M3.Literal.str(b))));

// Datatype extensional equality definition: #M3.Literal.litPrimitive
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litPrimitive_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litPrimitive_q(b) } 
  M3.Literal.litPrimitive_q(a) && M3.Literal.litPrimitive_q(b)
     ==> (M3.Literal#Equal(a, b)
       <==> M3.Primitive#Equal(M3.Literal.prim(a), M3.Literal.prim(b))));

// Datatype extensional equality definition: #M3.Literal.litArrOfPaths
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litArrOfPaths_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litArrOfPaths_q(b) } 
  M3.Literal.litArrOfPaths_q(a) && M3.Literal.litArrOfPaths_q(b)
     ==> (M3.Literal#Equal(a, b)
       <==> Set#Equal(M3.Literal.paths(a), M3.Literal.paths(b))));

// Datatype extensional equality definition: #M3.Literal.litArrOfStrings
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litArrOfStrings_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litArrOfStrings_q(b) } 
  M3.Literal.litArrOfStrings_q(a) && M3.Literal.litArrOfStrings_q(b)
     ==> (M3.Literal#Equal(a, b) <==> Set#Equal(M3.Literal.strs(a), M3.Literal.strs(b))));

// Datatype extensional equality definition: #M3.Literal.litArray
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b), M3.Literal.litArray_q(a) } 
    { M3.Literal#Equal(a, b), M3.Literal.litArray_q(b) } 
  M3.Literal.litArray_q(a) && M3.Literal.litArray_q(b)
     ==> (M3.Literal#Equal(a, b) <==> Seq#Equal(M3.Literal.arr(a), M3.Literal.arr(b))));

// Datatype extensionality axiom: M3.Literal
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Literal#Equal(a, b) } 
  M3.Literal#Equal(a, b) <==> a == b);

const unique class.M3.Literal: ClassName;

// Constructor function declaration
function #M3.Primitive.primCreatePath() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Primitive.primCreatePath()) == ##M3.Primitive.primCreatePath;
// Constructor $Is
axiom $Is(#M3.Primitive.primCreatePath(), Tclass.M3.Primitive());
// Constructor literal
axiom #M3.Primitive.primCreatePath() == Lit(#M3.Primitive.primCreatePath());
}

const unique ##M3.Primitive.primCreatePath: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Primitive.primCreatePath()) == ##M3.Primitive.primCreatePath;
}

function M3.Primitive.primCreatePath_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Primitive.primCreatePath_q(d) } 
  M3.Primitive.primCreatePath_q(d)
     <==> DatatypeCtorId(d) == ##M3.Primitive.primCreatePath);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Primitive.primCreatePath_q(d) } 
  M3.Primitive.primCreatePath_q(d) ==> d == #M3.Primitive.primCreatePath());

// Constructor function declaration
function #M3.Primitive.primExec() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Primitive.primExec()) == ##M3.Primitive.primExec;
// Constructor $Is
axiom $Is(#M3.Primitive.primExec(), Tclass.M3.Primitive());
// Constructor literal
axiom #M3.Primitive.primExec() == Lit(#M3.Primitive.primExec());
}

const unique ##M3.Primitive.primExec: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Primitive.primExec()) == ##M3.Primitive.primExec;
}

function M3.Primitive.primExec_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Primitive.primExec_q(d) } 
  M3.Primitive.primExec_q(d) <==> DatatypeCtorId(d) == ##M3.Primitive.primExec);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Primitive.primExec_q(d) } 
  M3.Primitive.primExec_q(d) ==> d == #M3.Primitive.primExec());

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Primitive(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Primitive())
     ==> $IsAlloc(d, Tclass.M3.Primitive(), $h));

// Depth-one case-split function
function $IsA#M3.Primitive(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Primitive(d) } 
  $IsA#M3.Primitive(d)
     ==> M3.Primitive.primCreatePath_q(d) || M3.Primitive.primExec_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Primitive.primExec_q(d), $Is(d, Tclass.M3.Primitive()) } 
    { M3.Primitive.primCreatePath_q(d), $Is(d, Tclass.M3.Primitive()) } 
  $Is(d, Tclass.M3.Primitive())
     ==> M3.Primitive.primCreatePath_q(d) || M3.Primitive.primExec_q(d));

// Datatype extensional equality declaration
function M3.Primitive#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Primitive.primCreatePath
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Primitive#Equal(a, b), M3.Primitive.primCreatePath_q(a) } 
    { M3.Primitive#Equal(a, b), M3.Primitive.primCreatePath_q(b) } 
  M3.Primitive.primCreatePath_q(a) && M3.Primitive.primCreatePath_q(b)
     ==> M3.Primitive#Equal(a, b));

// Datatype extensional equality definition: #M3.Primitive.primExec
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Primitive#Equal(a, b), M3.Primitive.primExec_q(a) } 
    { M3.Primitive#Equal(a, b), M3.Primitive.primExec_q(b) } 
  M3.Primitive.primExec_q(a) && M3.Primitive.primExec_q(b)
     ==> M3.Primitive#Equal(a, b));

// Datatype extensionality axiom: M3.Primitive
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Primitive#Equal(a, b) } 
  M3.Primitive#Equal(a, b) <==> a == b);

const unique class.M3.Primitive: ClassName;

// Constructor function declaration
function #M3.Reason.rCompatibility() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Reason.rCompatibility()) == ##M3.Reason.rCompatibility;
// Constructor $Is
axiom $Is(#M3.Reason.rCompatibility(), Tclass.M3.Reason());
// Constructor literal
axiom #M3.Reason.rCompatibility() == Lit(#M3.Reason.rCompatibility());
}

const unique ##M3.Reason.rCompatibility: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Reason.rCompatibility()) == ##M3.Reason.rCompatibility;
}

function M3.Reason.rCompatibility_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Reason.rCompatibility_q(d) } 
  M3.Reason.rCompatibility_q(d)
     <==> DatatypeCtorId(d) == ##M3.Reason.rCompatibility);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Reason.rCompatibility_q(d) } 
  M3.Reason.rCompatibility_q(d) ==> d == #M3.Reason.rCompatibility());

// Constructor function declaration
function #M3.Reason.rValidity() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Reason.rValidity()) == ##M3.Reason.rValidity;
// Constructor $Is
axiom $Is(#M3.Reason.rValidity(), Tclass.M3.Reason());
// Constructor literal
axiom #M3.Reason.rValidity() == Lit(#M3.Reason.rValidity());
}

const unique ##M3.Reason.rValidity: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M3.Reason.rValidity()) == ##M3.Reason.rValidity;
}

function M3.Reason.rValidity_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Reason.rValidity_q(d) } 
  M3.Reason.rValidity_q(d) <==> DatatypeCtorId(d) == ##M3.Reason.rValidity);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Reason.rValidity_q(d) } 
  M3.Reason.rValidity_q(d) ==> d == #M3.Reason.rValidity());

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M3.Reason(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M3.Reason())
     ==> $IsAlloc(d, Tclass.M3.Reason(), $h));

// Depth-one case-split function
function $IsA#M3.Reason(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Reason(d) } 
  $IsA#M3.Reason(d) ==> M3.Reason.rCompatibility_q(d) || M3.Reason.rValidity_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M3.Reason.rValidity_q(d), $Is(d, Tclass.M3.Reason()) } 
    { M3.Reason.rCompatibility_q(d), $Is(d, Tclass.M3.Reason()) } 
  $Is(d, Tclass.M3.Reason())
     ==> M3.Reason.rCompatibility_q(d) || M3.Reason.rValidity_q(d));

// Datatype extensional equality declaration
function M3.Reason#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Reason.rCompatibility
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Reason#Equal(a, b), M3.Reason.rCompatibility_q(a) } 
    { M3.Reason#Equal(a, b), M3.Reason.rCompatibility_q(b) } 
  M3.Reason.rCompatibility_q(a) && M3.Reason.rCompatibility_q(b)
     ==> M3.Reason#Equal(a, b));

// Datatype extensional equality definition: #M3.Reason.rValidity
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Reason#Equal(a, b), M3.Reason.rValidity_q(a) } 
    { M3.Reason#Equal(a, b), M3.Reason.rValidity_q(b) } 
  M3.Reason.rValidity_q(a) && M3.Reason.rValidity_q(b) ==> M3.Reason#Equal(a, b));

// Datatype extensionality axiom: M3.Reason
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Reason#Equal(a, b) } 
  M3.Reason#Equal(a, b) <==> a == b);

const unique class.M3.Reason: ClassName;

// Constructor function declaration
function #M3.Tuple.Pair(Box, Box) : DatatypeType;

const unique ##M3.Tuple.Pair: DtCtorId
uses {
// Constructor identifier
axiom (forall a#194#0#0: Box, a#194#1#0: Box :: 
  { #M3.Tuple.Pair(a#194#0#0, a#194#1#0) } 
  DatatypeCtorId(#M3.Tuple.Pair(a#194#0#0, a#194#1#0)) == ##M3.Tuple.Pair);
}

function M3.Tuple.Pair_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M3.Tuple.Pair_q(d) } 
  M3.Tuple.Pair_q(d) <==> DatatypeCtorId(d) == ##M3.Tuple.Pair);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M3.Tuple.Pair_q(d) } 
  M3.Tuple.Pair_q(d)
     ==> (exists a#195#0#0: Box, a#195#1#0: Box :: 
      d == #M3.Tuple.Pair(a#195#0#0, a#195#1#0)));

// Constructor $Is
axiom (forall M3.Tuple$A: Ty, M3.Tuple$B: Ty, a#196#0#0: Box, a#196#1#0: Box :: 
  { $Is(#M3.Tuple.Pair(a#196#0#0, a#196#1#0), Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B)) } 
  $Is(#M3.Tuple.Pair(a#196#0#0, a#196#1#0), Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B))
     <==> $IsBox(a#196#0#0, M3.Tuple$A) && $IsBox(a#196#1#0, M3.Tuple$B));

// Constructor $IsAlloc
axiom (forall M3.Tuple$A: Ty, M3.Tuple$B: Ty, a#196#0#0: Box, a#196#1#0: Box, $h: Heap :: 
  { $IsAlloc(#M3.Tuple.Pair(a#196#0#0, a#196#1#0), 
      Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M3.Tuple.Pair(a#196#0#0, a#196#1#0), 
        Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B), 
        $h)
       <==> $IsAllocBox(a#196#0#0, M3.Tuple$A, $h) && $IsAllocBox(a#196#1#0, M3.Tuple$B, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, M3.Tuple$A: Ty, $h: Heap :: 
  { $IsAllocBox(M3.Tuple.fst(d), M3.Tuple$A, $h) } 
  $IsGoodHeap($h)
       && 
      M3.Tuple.Pair_q(d)
       && (exists M3.Tuple$B: Ty :: 
        { $IsAlloc(d, Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B), $h) } 
        $IsAlloc(d, Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B), $h))
     ==> $IsAllocBox(M3.Tuple.fst(d), M3.Tuple$A, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, M3.Tuple$B: Ty, $h: Heap :: 
  { $IsAllocBox(M3.Tuple.snd(d), M3.Tuple$B, $h) } 
  $IsGoodHeap($h)
       && 
      M3.Tuple.Pair_q(d)
       && (exists M3.Tuple$A: Ty :: 
        { $IsAlloc(d, Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B), $h) } 
        $IsAlloc(d, Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B), $h))
     ==> $IsAllocBox(M3.Tuple.snd(d), M3.Tuple$B, $h));

// Constructor literal
axiom (forall a#197#0#0: Box, a#197#1#0: Box :: 
  { #M3.Tuple.Pair(Lit(a#197#0#0), Lit(a#197#1#0)) } 
  #M3.Tuple.Pair(Lit(a#197#0#0), Lit(a#197#1#0))
     == Lit(#M3.Tuple.Pair(a#197#0#0, a#197#1#0)));

function M3.Tuple.fst(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#198#0#0: Box, a#198#1#0: Box :: 
  { #M3.Tuple.Pair(a#198#0#0, a#198#1#0) } 
  M3.Tuple.fst(#M3.Tuple.Pair(a#198#0#0, a#198#1#0)) == a#198#0#0);

// Inductive rank
axiom (forall a#199#0#0: Box, a#199#1#0: Box :: 
  { #M3.Tuple.Pair(a#199#0#0, a#199#1#0) } 
  BoxRank(a#199#0#0) < DtRank(#M3.Tuple.Pair(a#199#0#0, a#199#1#0)));

function M3.Tuple.snd(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#200#0#0: Box, a#200#1#0: Box :: 
  { #M3.Tuple.Pair(a#200#0#0, a#200#1#0) } 
  M3.Tuple.snd(#M3.Tuple.Pair(a#200#0#0, a#200#1#0)) == a#200#1#0);

// Inductive rank
axiom (forall a#201#0#0: Box, a#201#1#0: Box :: 
  { #M3.Tuple.Pair(a#201#0#0, a#201#1#0) } 
  BoxRank(a#201#1#0) < DtRank(#M3.Tuple.Pair(a#201#0#0, a#201#1#0)));

// Depth-one case-split function
function $IsA#M3.Tuple(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M3.Tuple(d) } 
  $IsA#M3.Tuple(d) ==> M3.Tuple.Pair_q(d));

// Questionmark data type disjunctivity
axiom (forall M3.Tuple$A: Ty, M3.Tuple$B: Ty, d: DatatypeType :: 
  { M3.Tuple.Pair_q(d), $Is(d, Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B)) } 
  $Is(d, Tclass.M3.Tuple(M3.Tuple$A, M3.Tuple$B)) ==> M3.Tuple.Pair_q(d));

// Datatype extensional equality declaration
function M3.Tuple#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M3.Tuple.Pair
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Tuple#Equal(a, b) } 
  M3.Tuple#Equal(a, b)
     <==> M3.Tuple.fst(a) == M3.Tuple.fst(b) && M3.Tuple.snd(a) == M3.Tuple.snd(b));

// Datatype extensionality axiom: M3.Tuple
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M3.Tuple#Equal(a, b) } 
  M3.Tuple#Equal(a, b) <==> a == b);

const unique class.M3.Tuple: ClassName;

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$_#Func2: TyTagFamily;

const unique tytagFamily$_#PartialFunc2: TyTagFamily;

const unique tytagFamily$_#TotalFunc2: TyTagFamily;

const unique tytagFamily$_#Func3: TyTagFamily;

const unique tytagFamily$_#PartialFunc3: TyTagFamily;

const unique tytagFamily$_#TotalFunc3: TyTagFamily;

const unique tytagFamily$_#Func4: TyTagFamily;

const unique tytagFamily$_#PartialFunc4: TyTagFamily;

const unique tytagFamily$_#TotalFunc4: TyTagFamily;

const unique tytagFamily$_#Func5: TyTagFamily;

const unique tytagFamily$_#PartialFunc5: TyTagFamily;

const unique tytagFamily$_#TotalFunc5: TyTagFamily;

const unique tytagFamily$State: TyTagFamily;

const unique tytagFamily$Path: TyTagFamily;

const unique tytagFamily$Artifact: TyTagFamily;

const unique tytagFamily$Env: TyTagFamily;

const unique tytagFamily$Identifier: TyTagFamily;

const unique tytagFamily$Expression: TyTagFamily;

const unique tytagFamily$Literal: TyTagFamily;

const unique tytagFamily$WFCertificate: TyTagFamily;

const unique tytagFamily$Tuple: TyTagFamily;

const unique tytagFamily$Primitive: TyTagFamily;

const unique tytagFamily$Program: TyTagFamily;

const unique tytagFamily$Statement: TyTagFamily;

const unique tytagFamily$Reason: TyTagFamily;
