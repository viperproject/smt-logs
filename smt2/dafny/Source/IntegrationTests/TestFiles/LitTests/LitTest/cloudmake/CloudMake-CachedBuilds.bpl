// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds-@PROC@.smt2 /normalizeNames:0 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2
     && TagFamily(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == tytagFamily$_#Func2);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx) } 
  Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx)
     == Set#IsMember(rd[heap, bx0, bx1], bx));

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r)) } 
            r != null && Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hPartialFunc2
     && TagFamily(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#PartialFunc2);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hTotalFunc2
     && TagFamily(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#TotalFunc2);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc4: TyTag;

// Tclass._System.___hFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hFunc4
     && TagFamily(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#Func4);

function Tclass._System.___hFunc4_0(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_0(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hFunc4_1(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_1(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hFunc4_2(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_2(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hFunc4_3(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_3(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hFunc4_4(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_4(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

function Handle4([Heap,Box,Box,Box,Box]Box, [Heap,Box,Box,Box,Box]bool, [Heap,Box,Box,Box,Box]Set)
   : HandleType;

function Apply4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Box;

function Requires4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : bool;

function Reads4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)
     == h[heap, bx0, bx1, bx2, bx3]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  r[heap, bx0, bx1, bx2, bx3]
     ==> Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx: Box :: 
  { Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx) } 
  Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3], bx));

function {:inline} Requires4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

function {:inline} Reads4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// empty-reads property for Reads4 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     ==> (Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
       <==> Set#Equal(Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)));

// empty-reads property for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
     ==> Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)), $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, t4) } { $IsBox(bx, u4) } 
        $IsBox(bx, t4) ==> $IsBox(bx, u4))
     ==> $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
        { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
          { Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsAllocBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4, h)));

function Tclass._System.___hPartialFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc4: TyTag;

// Tclass._System.___hPartialFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hPartialFunc4
     && TagFamily(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#PartialFunc4);

function Tclass._System.___hPartialFunc4_0(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_0(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc4_1(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_1(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc4_2(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_2(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc4_3(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_3(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc4_4(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_4(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Set#Equal(Reads4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hTotalFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc4: TyTag;

// Tclass._System.___hTotalFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hTotalFunc4
     && TagFamily(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#TotalFunc4);

function Tclass._System.___hTotalFunc4_0(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_0(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc4_1(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_1(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc4_2(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_2(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc4_3(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_3(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc4_4(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_4(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Requires4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc3: TyTag;

// Tclass._System.___hFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hFunc3
     && TagFamily(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#Func3);

function Tclass._System.___hFunc3_0(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_0(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hFunc3_1(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_1(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hFunc3_2(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_2(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hFunc3_3(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_3(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)));

function Handle3([Heap,Box,Box,Box]Box, [Heap,Box,Box,Box]bool, [Heap,Box,Box,Box]Set)
   : HandleType;

function Apply3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Box;

function Requires3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : bool;

function Reads3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)
     == h[heap, bx0, bx1, bx2]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  r[heap, bx0, bx1, bx2]
     ==> Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx: Box :: 
  { Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx) } 
  Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2], bx));

function {:inline} Requires3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

function {:inline} Reads3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// empty-reads property for Reads3 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     ==> (Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
       <==> Set#Equal(Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2), Set#Empty(): Set)));

// empty-reads property for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
     ==> Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, u0: Ty, u1: Ty, u2: Ty, u3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)), $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, t3) } { $IsBox(bx, u3) } 
        $IsBox(bx, t3) ==> $IsBox(bx, u3))
     ==> $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box :: 
        { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
          { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r)) } 
            r != null && Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsAllocBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3, h)));

function Tclass._System.___hPartialFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc3: TyTag;

// Tclass._System.___hPartialFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hPartialFunc3
     && TagFamily(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#PartialFunc3);

function Tclass._System.___hPartialFunc3_0(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_0(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc3_1(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_1(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc3_2(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_2(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc3_3(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_3(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Set#Equal(Reads3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hTotalFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc3: TyTag;

// Tclass._System.___hTotalFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hTotalFunc3
     && TagFamily(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#TotalFunc3);

function Tclass._System.___hTotalFunc3_0(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_0(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc3_1(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_1(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc3_2(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_2(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc3_3(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_3(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Requires3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc5: TyTag;

// Tclass._System.___hFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == Tagclass._System.___hFunc5
     && TagFamily(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == tytagFamily$_#Func5);

function Tclass._System.___hFunc5_0(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_0(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hFunc5_1(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_1(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hFunc5_2(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_2(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hFunc5_3(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_3(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hFunc5_4(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_4(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hFunc5_5(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_5(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

function Handle5([Heap,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : Box;

function Requires5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : bool;

function Reads5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Apply5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4) } 
  Apply5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4)
     == h[heap, bx0, bx1, bx2, bx3, bx4]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Requires5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4) } 
  r[heap, bx0, bx1, bx2, bx3, bx4]
     ==> Requires5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx: Box :: 
  { Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4), 
      bx) } 
  Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4], bx));

function {:inline} Requires5#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box)
   : bool
{
  true
}

function {:inline} Reads5#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box)
   : bool
{
  true
}

// frame axiom for Reads5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Reads5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Apply5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Apply5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// empty-reads property for Reads5 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), $IsGoodHeap(heap) } 
    { Reads5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
     ==> (Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set)));

// empty-reads property for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Requires5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), $IsGoodHeap(heap) } 
    { Requires5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set)
     ==> Requires5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty :: 
  { $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5)) } 
  $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
      { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
         ==> $IsBox(Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), t5)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty :: 
  { $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5)), $Is(f, Tclass._System.___hFunc5(u0, u1, u2, u3, u4, u5)) } 
  $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, t5) } { $IsBox(bx, u5) } 
        $IsBox(bx, t5) ==> $IsBox(bx, u5))
     ==> $Is(f, Tclass._System.___hFunc5(u0, u1, u2, u3, u4, u5)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
        { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
          { Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
      { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
         ==> $IsAllocBox(Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), t5, h)));

function Tclass._System.___hPartialFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc5: TyTag;

// Tclass._System.___hPartialFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == Tagclass._System.___hPartialFunc5
     && TagFamily(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == tytagFamily$_#PartialFunc5);

function Tclass._System.___hPartialFunc5_0(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_0(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc5_1(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_1(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc5_2(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_2(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc5_3(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_3(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc5_4(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_4(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc5_5(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_5(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

// $Is axiom for subset type _System._#PartialFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
           ==> Set#Equal(Reads5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0, x4#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h));

function Tclass._System.___hTotalFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc5: TyTag;

// Tclass._System.___hTotalFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == Tagclass._System.___hTotalFunc5
     && TagFamily(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == tytagFamily$_#TotalFunc5);

function Tclass._System.___hTotalFunc5_0(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_0(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc5_1(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_1(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc5_2(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_2(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc5_3(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_3(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc5_4(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_4(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc5_5(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_5(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

// $Is axiom for subset type _System._#TotalFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
           ==> Requires5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0, x4#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h));

const reveal_M0._default.Combine: bool;

const reveal_M0._default.StateCorrespondence: bool;

const reveal_M0._default.Post: bool;

const reveal_M0._default.Extends: bool;

const reveal_M0._default.eval: bool;

const unique class.M0.__default: ClassName;

// function declaration for M0._default.DomSt
function M0.__default.DomSt(st#0: Box) : Set
uses {
// consequence axiom for M0.__default.DomSt
axiom 0 <= $FunctionContextHeight
   ==> (forall st#0: Box :: 
    { M0.__default.DomSt(st#0) } 
    M0.__default.DomSt#canCall(st#0)
         || (0 < $FunctionContextHeight && $IsBox(st#0, Tclass.M0.State()))
       ==> $Is(M0.__default.DomSt(st#0), TSet(Tclass.M0.Path())));
}

function M0.__default.DomSt#canCall(st#0: Box) : bool;

function Tclass.M0.State() : Ty
uses {
axiom $AlwaysAllocated(Tclass.M0.State());
}

function Tclass.M0.Path() : Ty
uses {
axiom $AlwaysAllocated(Tclass.M0.Path());
}

function M0.__default.DomSt#requires(Box) : bool;

// #requires axiom for M0.__default.DomSt
axiom (forall st#0: Box :: 
  { M0.__default.DomSt#requires(st#0) } 
  $IsBox(st#0, Tclass.M0.State()) ==> M0.__default.DomSt#requires(st#0) == true);

procedure {:verboseName "M0.DomSt (well-formedness)"} CheckWellformed$$M0.__default.DomSt(st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.GetSt
function M0.__default.GetSt(p#0: Box, st#0: Box) : Box
uses {
// consequence axiom for M0.__default.GetSt
axiom 1 <= $FunctionContextHeight
   ==> (forall p#0: Box, st#0: Box :: 
    { M0.__default.GetSt(p#0, st#0) } 
    M0.__default.GetSt#canCall(p#0, st#0)
         || (1 < $FunctionContextHeight
           && 
          $IsBox(p#0, Tclass.M0.Path())
           && $IsBox(st#0, Tclass.M0.State())
           && Set#IsMember(M0.__default.DomSt(st#0), p#0))
       ==> $IsBox(M0.__default.GetSt(p#0, st#0), Tclass.M0.Artifact()));
// alloc consequence axiom for M0.__default.GetSt
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: Box, st#0: Box :: 
    { $IsAllocBox(M0.__default.GetSt(p#0, st#0), Tclass.M0.Artifact(), $Heap) } 
    (M0.__default.GetSt#canCall(p#0, st#0)
           || (1 < $FunctionContextHeight
             && 
            $IsBox(p#0, Tclass.M0.Path())
             && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap)
             && 
            $IsBox(st#0, Tclass.M0.State())
             && $IsAllocBox(st#0, Tclass.M0.State(), $Heap)
             && Set#IsMember(M0.__default.DomSt(st#0), p#0)))
         && $IsGoodHeap($Heap)
       ==> $IsAllocBox(M0.__default.GetSt(p#0, st#0), Tclass.M0.Artifact(), $Heap));
}

function M0.__default.GetSt#canCall(p#0: Box, st#0: Box) : bool;

function Tclass.M0.Artifact() : Ty;

function M0.__default.GetSt#requires(Box, Box) : bool;

// #requires axiom for M0.__default.GetSt
axiom (forall p#0: Box, st#0: Box :: 
  { M0.__default.GetSt#requires(p#0, st#0) } 
  $IsBox(p#0, Tclass.M0.Path()) && $IsBox(st#0, Tclass.M0.State())
     ==> M0.__default.GetSt#requires(p#0, st#0)
       == Set#IsMember(M0.__default.DomSt(st#0), p#0));

procedure {:verboseName "M0.GetSt (well-formedness)"} CheckWellformed$$M0.__default.GetSt(p#0: Box where $IsBox(p#0, Tclass.M0.Path()), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.DomC
function M0.__default.DomC(st#0: Box) : Set
uses {
// consequence axiom for M0.__default.DomC
axiom 0 <= $FunctionContextHeight
   ==> (forall st#0: Box :: 
    { M0.__default.DomC(st#0) } 
    M0.__default.DomC#canCall(st#0)
         || (0 < $FunctionContextHeight && $IsBox(st#0, Tclass.M0.State()))
       ==> $Is(M0.__default.DomC(st#0), TSet(Tclass.M0.HashValue())));
// alloc consequence axiom for M0.__default.DomC
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, st#0: Box :: 
    { $IsAlloc(M0.__default.DomC(st#0), TSet(Tclass.M0.HashValue()), $Heap) } 
    (M0.__default.DomC#canCall(st#0)
           || (0 < $FunctionContextHeight
             && 
            $IsBox(st#0, Tclass.M0.State())
             && $IsAllocBox(st#0, Tclass.M0.State(), $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.DomC(st#0), TSet(Tclass.M0.HashValue()), $Heap));
}

function M0.__default.DomC#canCall(st#0: Box) : bool;

function Tclass.M0.HashValue() : Ty;

function M0.__default.DomC#requires(Box) : bool;

// #requires axiom for M0.__default.DomC
axiom (forall st#0: Box :: 
  { M0.__default.DomC#requires(st#0) } 
  $IsBox(st#0, Tclass.M0.State()) ==> M0.__default.DomC#requires(st#0) == true);

procedure {:verboseName "M0.DomC (well-formedness)"} CheckWellformed$$M0.__default.DomC(st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.Hash
function M0.__default.Hash(p#0: Box) : Box
uses {
// consequence axiom for M0.__default.Hash
axiom 0 <= $FunctionContextHeight
   ==> (forall p#0: Box :: 
    { M0.__default.Hash(p#0) } 
    M0.__default.Hash#canCall(p#0)
         || (0 < $FunctionContextHeight && $IsBox(p#0, Tclass.M0.Path()))
       ==> $IsBox(M0.__default.Hash(p#0), Tclass.M0.HashValue()));
// alloc consequence axiom for M0.__default.Hash
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: Box :: 
    { $IsAllocBox(M0.__default.Hash(p#0), Tclass.M0.HashValue(), $Heap) } 
    (M0.__default.Hash#canCall(p#0)
           || (0 < $FunctionContextHeight
             && 
            $IsBox(p#0, Tclass.M0.Path())
             && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAllocBox(M0.__default.Hash(p#0), Tclass.M0.HashValue(), $Heap));
}

function M0.__default.Hash#canCall(p#0: Box) : bool;

function M0.__default.Hash#requires(Box) : bool;

// #requires axiom for M0.__default.Hash
axiom (forall p#0: Box :: 
  { M0.__default.Hash#requires(p#0) } 
  $IsBox(p#0, Tclass.M0.Path()) ==> M0.__default.Hash#requires(p#0) == true);

procedure {:verboseName "M0.Hash (well-formedness)"} CheckWellformed$$M0.__default.Hash(p#0: Box where $IsBox(p#0, Tclass.M0.Path()));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.UpdateC
function M0.__default.UpdateC(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box) : Box
uses {
// consequence axiom for M0.__default.UpdateC
axiom 2 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
    { M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0) } 
    M0.__default.UpdateC#canCall(cmd#0, deps#0, exps#0, st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State()))
       ==> (var st'#0 := M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0); 
          Set#Equal(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0))
             && (forall p#0: Box :: 
              { M0.__default.GetSt(p#0, st'#0) } 
                { M0.__default.GetSt(p#0, st#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
              $IsBox(p#0, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(st#0), p#0)
                 ==> M0.__default.GetSt(p#0, st#0) == M0.__default.GetSt(p#0, st'#0))
             && (M0.__default.ConsistentCache(st#0) ==> M0.__default.ConsistentCache(st'#0))
             && (forall e#0: Seq :: 
              { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
              $Is(e#0, TSeq(TChar))
                 ==> 
                Set#IsMember(exps#0, $Box(e#0))
                 ==> Set#IsMember(M0.__default.DomC(st'#0), 
                  M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))))
         && $IsBox(M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0), Tclass.M0.State()));
}

function M0.__default.UpdateC#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box) : bool;

function M0.__default.UpdateC#requires(Seq, Set, Set, Box) : bool;

// #requires axiom for M0.__default.UpdateC
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
  { M0.__default.UpdateC#requires(cmd#0, deps#0, exps#0, st#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M0.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $IsBox(st#0, Tclass.M0.State())
     ==> M0.__default.UpdateC#requires(cmd#0, deps#0, exps#0, st#0) == true);

procedure {:verboseName "M0.UpdateC (well-formedness)"} CheckWellformed$$M0.__default.UpdateC(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M0.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id1"} (var st'#1 := M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0); 
    Set#Equal(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#1)));
  ensures {:id "id2"} (var st'#1 := M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0); 
    (forall p#1: Box :: 
      { M0.__default.GetSt(p#1, st'#1) } 
        { M0.__default.GetSt(p#1, st#0) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
      $IsBox(p#1, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#1)
         ==> M0.__default.GetSt(p#1, st#0) == M0.__default.GetSt(p#1, st'#1)));
  ensures {:id "id3"} (var st'#1 := M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0); 
    M0.__default.ConsistentCache(st#0)
       ==> 
      M0.__default.ConsistentCache#canCall(st'#1)
       ==> M0.__default.ConsistentCache(st'#1)
         || (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
          { M0.__default.Loc(cmd#1, deps#1, e#1) } 
          $Is(cmd#1, TSeq(TChar))
               && $Is(deps#1, TSet(Tclass.M0.Path()))
               && $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(M0.__default.DomC(st'#1), 
              M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
             ==> Set#IsMember(M0.__default.DomSt(st'#1), M0.__default.Loc(cmd#1, deps#1, e#1))));
  ensures {:id "id4"} (var st'#1 := M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0); 
    (forall e#2: Seq :: 
      { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
      $Is(e#2, TSeq(TChar))
         ==> 
        Set#IsMember(exps#0, $Box(e#2))
         ==> Set#IsMember(M0.__default.DomC(st'#1), 
          M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#2)))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.UpdateC (well-formedness)"} CheckWellformed$$M0.__default.UpdateC(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var st'#Z#0: Box;
  var let#0#0#0: Box;
  var ##cmd#0: Seq;
  var ##deps#0: Set;
  var ##exps#0: Set;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##st#2: Box;
  var p#2: Box;
  var ##st#3: Box;
  var ##p#0: Box;
  var ##st#4: Box;
  var ##p#1: Box;
  var ##st#5: Box;
  var ##stC#0: Box;
  var ##stC#1: Box;
  var e#3: Seq;
  var ##p#2: Box;
  var ##cmd#1: Seq;
  var ##deps#1: Set;
  var ##exp#0: Seq;
  var ##st#6: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0), Tclass.M0.State());
        havoc st'#Z#0;
        ##cmd#0 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#0, TSeq(TChar), $Heap);
        ##deps#0 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#0, TSet(Tclass.M0.Path()), $Heap);
        ##exps#0 := exps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exps#0, TSet(TSeq(TChar)), $Heap);
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
        assert {:id "id5"} (
            cmd#0 == cmd#0
             && Set#Equal(deps#0, deps#0)
             && Set#Equal(exps#0, exps#0)
             && st#0 == st#0)
           || 
          Seq#Rank(##cmd#0) < Seq#Rank(cmd#0)
           || (Seq#Rank(##cmd#0) == Seq#Rank(cmd#0)
             && ((Set#Subset(##deps#0, deps#0) && !Set#Subset(deps#0, ##deps#0))
               || (Set#Equal(##deps#0, deps#0)
                 && 
                Set#Subset(##exps#0, exps#0)
                 && !Set#Subset(exps#0, ##exps#0))));
        assume (
            cmd#0 == cmd#0
             && Set#Equal(deps#0, deps#0)
             && Set#Equal(exps#0, exps#0)
             && st#0 == st#0)
           || M0.__default.UpdateC#canCall(cmd#0, deps#0, exps#0, st#0);
        assume {:id "id6"} let#0#0#0 == M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0);
        assume M0.__default.UpdateC#canCall(cmd#0, deps#0, exps#0, st#0);
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0#0#0, Tclass.M0.State());
        assume {:id "id7"} st'#Z#0 == let#0#0#0;
        ##st#1 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(st#0);
        ##st#2 := st'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(st'#Z#0);
        if (Set#Equal(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#Z#0)))
        {
            // Begin Comprehension WF check
            havoc p#2;
            if ($IsBox(p#2, Tclass.M0.Path()) && $IsAllocBox(p#2, Tclass.M0.Path(), $Heap))
            {
                ##st#3 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                if (Set#IsMember(M0.__default.DomSt(st#0), p#2))
                {
                    ##p#0 := p#2;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0, Tclass.M0.Path(), $Heap);
                    ##st#4 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
                    assert {:id "id8"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#4), ##p#0);
                    assume Set#IsMember(M0.__default.DomSt(##st#4), ##p#0);
                    assume M0.__default.GetSt#canCall(p#2, st#0);
                    ##p#1 := p#2;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1, Tclass.M0.Path(), $Heap);
                    ##st#5 := st'#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
                    assert {:id "id9"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#5), ##p#1);
                    assume Set#IsMember(M0.__default.DomSt(##st#5), ##p#1);
                    assume M0.__default.GetSt#canCall(p#2, st'#Z#0);
                }
            }

            // End Comprehension WF check
        }

        if (Set#Equal(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#Z#0))
           && (forall p#3: Box :: 
            { M0.__default.GetSt(p#3, st'#Z#0) } 
              { M0.__default.GetSt(p#3, st#0) } 
              { Set#IsMember(M0.__default.DomSt(st#0), p#3) } 
            $IsBox(p#3, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#0), p#3)
               ==> M0.__default.GetSt(p#3, st#0) == M0.__default.GetSt(p#3, st'#Z#0)))
        {
            ##stC#0 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
            assume M0.__default.ConsistentCache#canCall(st#0);
            if (M0.__default.ConsistentCache(st#0))
            {
                ##stC#1 := st'#Z#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
                assume M0.__default.ConsistentCache#canCall(st'#Z#0);
            }
        }

        if (Set#Equal(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#Z#0))
           && (forall p#3: Box :: 
            { M0.__default.GetSt(p#3, st'#Z#0) } 
              { M0.__default.GetSt(p#3, st#0) } 
              { Set#IsMember(M0.__default.DomSt(st#0), p#3) } 
            $IsBox(p#3, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#0), p#3)
               ==> M0.__default.GetSt(p#3, st#0) == M0.__default.GetSt(p#3, st'#Z#0))
           && (M0.__default.ConsistentCache(st#0) ==> M0.__default.ConsistentCache(st'#Z#0)))
        {
            // Begin Comprehension WF check
            havoc e#3;
            if ($Is(e#3, TSeq(TChar)) && $IsAlloc(e#3, TSeq(TChar), $Heap))
            {
                if (Set#IsMember(exps#0, $Box(e#3)))
                {
                    ##cmd#1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1, TSeq(TChar), $Heap);
                    ##deps#1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1, TSet(Tclass.M0.Path()), $Heap);
                    ##exp#0 := e#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#0, TSeq(TChar), $Heap);
                    assume M0.__default.Loc#canCall(cmd#0, deps#0, e#3);
                    ##p#2 := M0.__default.Loc(cmd#0, deps#0, e#3);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#2, Tclass.M0.Path(), $Heap);
                    assume M0.__default.Hash#canCall(M0.__default.Loc(cmd#0, deps#0, e#3));
                    ##st#6 := st'#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomC#canCall(st'#Z#0);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id10"} (var st'#1 := M0.__default.UpdateC(cmd#0, deps#0, exps#0, st#0); 
          Set#Equal(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#1))
             && (forall p#1: Box :: 
              { M0.__default.GetSt(p#1, st'#1) } 
                { M0.__default.GetSt(p#1, st#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
              $IsBox(p#1, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(st#0), p#1)
                 ==> M0.__default.GetSt(p#1, st#0) == M0.__default.GetSt(p#1, st'#1))
             && (M0.__default.ConsistentCache(st#0) ==> M0.__default.ConsistentCache(st'#1))
             && (forall e#2: Seq :: 
              { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
              $Is(e#2, TSeq(TChar))
                 ==> 
                Set#IsMember(exps#0, $Box(e#2))
                 ==> Set#IsMember(M0.__default.DomC(st'#1), 
                  M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#2)))));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for M0._default.ValidState
function M0.__default.ValidState(st#0: Box) : bool
uses {
// definition axiom for M0.__default.ValidState (revealed)
axiom {:id "id11"} 1 <= $FunctionContextHeight
   ==> (forall st#0: Box :: 
    { M0.__default.ValidState(st#0) } 
    M0.__default.ValidState#canCall(st#0)
         || (1 < $FunctionContextHeight && $IsBox(st#0, Tclass.M0.State()))
       ==> (forall p#0: Box :: 
          { M0.__default.WellFounded(p#0) } 
            { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
          $IsBox(p#0, Tclass.M0.Path())
             ==> M0.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M0.__default.DomSt(st#0), p#0)
                 ==> M0.__default.WellFounded#canCall(p#0)))
         && M0.__default.ValidState(st#0)
           == (forall p#0: Box :: 
            { M0.__default.WellFounded(p#0) } 
              { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
            $IsBox(p#0, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#0), p#0)
               ==> M0.__default.WellFounded(p#0)));
// definition axiom for M0.__default.ValidState for all literals (revealed)
axiom {:id "id12"} 1 <= $FunctionContextHeight
   ==> (forall st#0: Box :: 
    {:weight 3} { M0.__default.ValidState(Lit(st#0)) } 
    M0.__default.ValidState#canCall(Lit(st#0))
         || (1 < $FunctionContextHeight && $IsBox(st#0, Tclass.M0.State()))
       ==> (forall p#1: Box :: 
          { M0.__default.WellFounded(p#1) } 
            { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
          $IsBox(p#1, Tclass.M0.Path())
             ==> M0.__default.DomSt#canCall(Lit(st#0))
               && (Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#1)
                 ==> M0.__default.WellFounded#canCall(p#1)))
         && M0.__default.ValidState(Lit(st#0))
           == (forall p#1: Box :: 
            { M0.__default.WellFounded(p#1) } 
              { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
            $IsBox(p#1, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#1)
               ==> M0.__default.WellFounded(p#1)));
}

function M0.__default.ValidState#canCall(st#0: Box) : bool;

function M0.__default.ValidState#requires(Box) : bool;

// #requires axiom for M0.__default.ValidState
axiom (forall st#0: Box :: 
  { M0.__default.ValidState#requires(st#0) } 
  $IsBox(st#0, Tclass.M0.State())
     ==> M0.__default.ValidState#requires(st#0) == true);

procedure {:verboseName "M0.ValidState (well-formedness)"} CheckWellformed$$M0.__default.ValidState(st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.WellFounded
function M0.__default.WellFounded(p#0: Box) : bool;

function M0.__default.WellFounded#canCall(p#0: Box) : bool;

function M0.__default.WellFounded#requires(Box) : bool;

// #requires axiom for M0.__default.WellFounded
axiom (forall p#0: Box :: 
  { M0.__default.WellFounded#requires(p#0) } 
  $IsBox(p#0, Tclass.M0.Path()) ==> M0.__default.WellFounded#requires(p#0) == true);

procedure {:verboseName "M0.WellFounded (well-formedness)"} CheckWellformed$$M0.__default.WellFounded(p#0: Box where $IsBox(p#0, Tclass.M0.Path()));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.Union
function M0.__default.Union(st#0: Box, st'#0: Box, useCache#0: bool) : Box
uses {
// consequence axiom for M0.__default.Union
axiom 2 <= $FunctionContextHeight
   ==> (forall st#0: Box, st'#0: Box, useCache#0: bool :: 
    { M0.__default.Union(st#0, st'#0, useCache#0) } 
    M0.__default.Union#canCall(st#0, st'#0, useCache#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(st#0, Tclass.M0.State())
           && $IsBox(st'#0, Tclass.M0.State()))
       ==> (var result#0 := M0.__default.Union(st#0, st'#0, useCache#0); 
          Set#Equal(M0.__default.DomSt(result#0), 
              Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0)))
             && (forall p#0: Box :: 
              { Set#IsMember(M0.__default.DomSt(st'#0), p#0) } 
                { M0.__default.GetSt(p#0, result#0) } 
                { Set#IsMember(M0.__default.DomSt(result#0), p#0) } 
              $IsBox(p#0, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(result#0), p#0)
                 ==> M0.__default.GetSt(p#0, result#0)
                   == M0.__default.GetSt(p#0, (if Set#IsMember(M0.__default.DomSt(st'#0), p#0) then st'#0 else st#0)))
             && (useCache#0
               ==> Set#Equal(M0.__default.DomC(result#0), 
                Set#Union(M0.__default.DomC(st#0), M0.__default.DomC(st'#0)))))
         && $IsBox(M0.__default.Union(st#0, st'#0, useCache#0), Tclass.M0.State()));
}

function M0.__default.Union#canCall(st#0: Box, st'#0: Box, useCache#0: bool) : bool;

function M0.__default.Union#requires(Box, Box, bool) : bool;

// #requires axiom for M0.__default.Union
axiom (forall st#0: Box, st'#0: Box, useCache#0: bool :: 
  { M0.__default.Union#requires(st#0, st'#0, useCache#0) } 
  $IsBox(st#0, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
     ==> M0.__default.Union#requires(st#0, st'#0, useCache#0) == true);

procedure {:verboseName "M0.Union (well-formedness)"} CheckWellformed$$M0.__default.Union(st#0: Box where $IsBox(st#0, Tclass.M0.State()), 
    st'#0: Box where $IsBox(st'#0, Tclass.M0.State()), 
    useCache#0: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id14"} (var result#1 := M0.__default.Union(st#0, st'#0, useCache#0); 
    Set#Equal(M0.__default.DomSt(result#1), 
      Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0))));
  ensures {:id "id15"} (var result#1 := M0.__default.Union(st#0, st'#0, useCache#0); 
    (forall p#1: Box :: 
      { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
        { M0.__default.GetSt(p#1, result#1) } 
        { Set#IsMember(M0.__default.DomSt(result#1), p#1) } 
      $IsBox(p#1, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(result#1), p#1)
         ==> M0.__default.GetSt(p#1, result#1)
           == M0.__default.GetSt(p#1, (if Set#IsMember(M0.__default.DomSt(st'#0), p#1) then st'#0 else st#0))));
  ensures {:id "id16"} (var result#1 := M0.__default.Union(st#0, st'#0, useCache#0); 
    useCache#0
       ==> Set#Equal(M0.__default.DomC(result#1), 
        Set#Union(M0.__default.DomC(st#0), M0.__default.DomC(st'#0))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Union (well-formedness)"} CheckWellformed$$M0.__default.Union(st#0: Box, st'#0: Box, useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var result#Z#0: Box;
  var let#0#0#0: Box;
  var ##st#0: Box;
  var ##st'#0: Box;
  var ##useCache#0: bool;
  var ##st#1: Box;
  var ##st#2: Box;
  var ##st#3: Box;
  var p#2: Box;
  var ##st#4: Box;
  var ##p#0: Box;
  var ##st#5: Box;
  var ##p#1: Box;
  var ##st#6: Box;
  var ##st#7: Box;
  var ##st#8: Box;
  var ##st#9: Box;
  var ##st#10: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(M0.__default.Union(st#0, st'#0, useCache#0), Tclass.M0.State());
        havoc result#Z#0;
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
        ##st'#0 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
        ##useCache#0 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0, TBool, $Heap);
        assert {:id "id17"} (st#0 == st#0 && st'#0 == st'#0 && useCache#0 == useCache#0)
           || (!##useCache#0 && useCache#0);
        assume (st#0 == st#0 && st'#0 == st'#0 && useCache#0 == useCache#0)
           || M0.__default.Union#canCall(st#0, st'#0, useCache#0);
        assume {:id "id18"} let#0#0#0 == M0.__default.Union(st#0, st'#0, useCache#0);
        assume M0.__default.Union#canCall(st#0, st'#0, useCache#0);
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0#0#0, Tclass.M0.State());
        assume {:id "id19"} result#Z#0 == let#0#0#0;
        ##st#1 := result#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(result#Z#0);
        ##st#2 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(st#0);
        ##st#3 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(st'#0);
        if (Set#Equal(M0.__default.DomSt(result#Z#0), 
          Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0))))
        {
            // Begin Comprehension WF check
            havoc p#2;
            if ($IsBox(p#2, Tclass.M0.Path()) && $IsAllocBox(p#2, Tclass.M0.Path(), $Heap))
            {
                ##st#4 := result#Z#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(result#Z#0);
                if (Set#IsMember(M0.__default.DomSt(result#Z#0), p#2))
                {
                    ##p#0 := p#2;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0, Tclass.M0.Path(), $Heap);
                    ##st#5 := result#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
                    assert {:id "id20"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#5), ##p#0);
                    assume Set#IsMember(M0.__default.DomSt(##st#5), ##p#0);
                    assume M0.__default.GetSt#canCall(p#2, result#Z#0);
                    ##p#1 := p#2;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1, Tclass.M0.Path(), $Heap);
                    ##st#7 := st'#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st'#0);
                    if (Set#IsMember(M0.__default.DomSt(st'#0), p#2))
                    {
                    }
                    else
                    {
                    }

                    ##st#6 := (if Set#IsMember(M0.__default.DomSt(st'#0), p#2) then st'#0 else st#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
                    assert {:id "id21"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#6), ##p#1);
                    assume Set#IsMember(M0.__default.DomSt(##st#6), ##p#1);
                    assume M0.__default.GetSt#canCall(p#2, (if Set#IsMember(M0.__default.DomSt(st'#0), p#2) then st'#0 else st#0));
                }
            }

            // End Comprehension WF check
        }

        if (Set#Equal(M0.__default.DomSt(result#Z#0), 
            Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0)))
           && (forall p#3: Box :: 
            { Set#IsMember(M0.__default.DomSt(st'#0), p#3) } 
              { M0.__default.GetSt(p#3, result#Z#0) } 
              { Set#IsMember(M0.__default.DomSt(result#Z#0), p#3) } 
            $IsBox(p#3, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(result#Z#0), p#3)
               ==> M0.__default.GetSt(p#3, result#Z#0)
                 == M0.__default.GetSt(p#3, (if Set#IsMember(M0.__default.DomSt(st'#0), p#3) then st'#0 else st#0))))
        {
            if (useCache#0)
            {
                ##st#8 := result#Z#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#8, Tclass.M0.State(), $Heap);
                assume M0.__default.DomC#canCall(result#Z#0);
                ##st#9 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#9, Tclass.M0.State(), $Heap);
                assume M0.__default.DomC#canCall(st#0);
                ##st#10 := st'#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#10, Tclass.M0.State(), $Heap);
                assume M0.__default.DomC#canCall(st'#0);
            }
        }

        assume {:id "id22"} (var result#1 := M0.__default.Union(st#0, st'#0, useCache#0); 
          Set#Equal(M0.__default.DomSt(result#1), 
              Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0)))
             && (forall p#1: Box :: 
              { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
                { M0.__default.GetSt(p#1, result#1) } 
                { Set#IsMember(M0.__default.DomSt(result#1), p#1) } 
              $IsBox(p#1, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(result#1), p#1)
                 ==> M0.__default.GetSt(p#1, result#1)
                   == M0.__default.GetSt(p#1, (if Set#IsMember(M0.__default.DomSt(st'#0), p#1) then st'#0 else st#0)))
             && (useCache#0
               ==> Set#Equal(M0.__default.DomC(result#1), 
                Set#Union(M0.__default.DomC(st#0), M0.__default.DomC(st'#0)))));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for M0._default.Compatible
function M0.__default.Compatible(sts#0: Set) : bool
uses {
// definition axiom for M0.__default.Compatible (revealed)
axiom {:id "id23"} 2 <= $FunctionContextHeight
   ==> (forall sts#0: Set :: 
    { M0.__default.Compatible(sts#0) } 
    M0.__default.Compatible#canCall(sts#0)
         || (2 < $FunctionContextHeight && $Is(sts#0, TSet(Tclass.M0.State())))
       ==> (forall st#0: Box, st'#0: Box :: 
          { M0.__default.DomSt(st'#0), M0.__default.DomSt(st#0) } 
            { M0.__default.DomSt(st'#0), Set#IsMember(sts#0, st#0) } 
            { M0.__default.DomSt(st#0), Set#IsMember(sts#0, st'#0) } 
            { Set#IsMember(sts#0, st'#0), Set#IsMember(sts#0, st#0) } 
          $IsBox(st#0, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
             ==> 
            Set#IsMember(sts#0, st#0)
             ==> 
            Set#IsMember(sts#0, st'#0)
             ==> (forall p#0: Box :: 
              { M0.__default.GetSt(p#0, st'#0) } 
                { M0.__default.GetSt(p#0, st#0) } 
                { Set#IsMember(M0.__default.DomSt(st'#0), p#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
              $IsBox(p#0, Tclass.M0.Path())
                 ==> M0.__default.DomSt#canCall(st#0)
                   && (Set#IsMember(M0.__default.DomSt(st#0), p#0)
                     ==> M0.__default.DomSt#canCall(st'#0)
                       && (Set#IsMember(M0.__default.DomSt(st'#0), p#0)
                         ==> M0.__default.GetSt#canCall(p#0, st#0) && M0.__default.GetSt#canCall(p#0, st'#0)))))
         && M0.__default.Compatible(sts#0)
           == (forall st#0: Box, st'#0: Box :: 
            { M0.__default.DomSt(st'#0), M0.__default.DomSt(st#0) } 
              { M0.__default.DomSt(st'#0), Set#IsMember(sts#0, st#0) } 
              { M0.__default.DomSt(st#0), Set#IsMember(sts#0, st'#0) } 
              { Set#IsMember(sts#0, st'#0), Set#IsMember(sts#0, st#0) } 
            $IsBox(st#0, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
               ==> 
              Set#IsMember(sts#0, st#0) && Set#IsMember(sts#0, st'#0)
               ==> (forall p#0: Box :: 
                { M0.__default.GetSt(p#0, st'#0) } 
                  { M0.__default.GetSt(p#0, st#0) } 
                  { Set#IsMember(M0.__default.DomSt(st'#0), p#0) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
                $IsBox(p#0, Tclass.M0.Path())
                   ==> 
                  Set#IsMember(M0.__default.DomSt(st#0), p#0)
                     && Set#IsMember(M0.__default.DomSt(st'#0), p#0)
                   ==> M0.__default.GetSt(p#0, st#0) == M0.__default.GetSt(p#0, st'#0))));
// definition axiom for M0.__default.Compatible for all literals (revealed)
axiom {:id "id24"} 2 <= $FunctionContextHeight
   ==> (forall sts#0: Set :: 
    {:weight 3} { M0.__default.Compatible(Lit(sts#0)) } 
    M0.__default.Compatible#canCall(Lit(sts#0))
         || (2 < $FunctionContextHeight && $Is(sts#0, TSet(Tclass.M0.State())))
       ==> (forall st#1: Box, st'#1: Box :: 
          { M0.__default.DomSt(st'#1), M0.__default.DomSt(st#1) } 
            { M0.__default.DomSt(st'#1), Set#IsMember(sts#0, st#1) } 
            { M0.__default.DomSt(st#1), Set#IsMember(sts#0, st'#1) } 
            { Set#IsMember(sts#0, st'#1), Set#IsMember(sts#0, st#1) } 
          $IsBox(st#1, Tclass.M0.State()) && $IsBox(st'#1, Tclass.M0.State())
             ==> 
            Set#IsMember(Lit(sts#0), st#1)
             ==> 
            Set#IsMember(Lit(sts#0), st'#1)
             ==> (forall p#1: Box :: 
              { M0.__default.GetSt(p#1, st'#1) } 
                { M0.__default.GetSt(p#1, st#1) } 
                { Set#IsMember(M0.__default.DomSt(st'#1), p#1) } 
                { Set#IsMember(M0.__default.DomSt(st#1), p#1) } 
              $IsBox(p#1, Tclass.M0.Path())
                 ==> M0.__default.DomSt#canCall(st#1)
                   && (Set#IsMember(M0.__default.DomSt(st#1), p#1)
                     ==> M0.__default.DomSt#canCall(st'#1)
                       && (Set#IsMember(M0.__default.DomSt(st'#1), p#1)
                         ==> M0.__default.GetSt#canCall(p#1, st#1) && M0.__default.GetSt#canCall(p#1, st'#1)))))
         && M0.__default.Compatible(Lit(sts#0))
           == (forall st#1: Box, st'#1: Box :: 
            { M0.__default.DomSt(st'#1), M0.__default.DomSt(st#1) } 
              { M0.__default.DomSt(st'#1), Set#IsMember(sts#0, st#1) } 
              { M0.__default.DomSt(st#1), Set#IsMember(sts#0, st'#1) } 
              { Set#IsMember(sts#0, st'#1), Set#IsMember(sts#0, st#1) } 
            $IsBox(st#1, Tclass.M0.State()) && $IsBox(st'#1, Tclass.M0.State())
               ==> 
              Set#IsMember(Lit(sts#0), st#1) && Set#IsMember(Lit(sts#0), st'#1)
               ==> (forall p#1: Box :: 
                { M0.__default.GetSt(p#1, st'#1) } 
                  { M0.__default.GetSt(p#1, st#1) } 
                  { Set#IsMember(M0.__default.DomSt(st'#1), p#1) } 
                  { Set#IsMember(M0.__default.DomSt(st#1), p#1) } 
                $IsBox(p#1, Tclass.M0.Path())
                   ==> 
                  Set#IsMember(M0.__default.DomSt(st#1), p#1)
                     && Set#IsMember(M0.__default.DomSt(st'#1), p#1)
                   ==> M0.__default.GetSt(p#1, st#1) == M0.__default.GetSt(p#1, st'#1))));
}

function M0.__default.Compatible#canCall(sts#0: Set) : bool;

function M0.__default.Compatible#requires(Set) : bool;

// #requires axiom for M0.__default.Compatible
axiom (forall sts#0: Set :: 
  { M0.__default.Compatible#requires(sts#0) } 
  $Is(sts#0, TSet(Tclass.M0.State()))
     ==> M0.__default.Compatible#requires(sts#0) == true);

procedure {:verboseName "M0.Compatible (well-formedness)"} CheckWellformed$$M0.__default.Compatible(sts#0: Set where $Is(sts#0, TSet(Tclass.M0.State())));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Compatible (well-formedness)"} CheckWellformed$$M0.__default.Compatible(sts#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var st#2: Box;
  var st'#2: Box;
  var p#2: Box;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##p#0: Box;
  var ##st#2: Box;
  var ##p#1: Box;
  var ##st#3: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc st#2;
        havoc st'#2;
        if ($IsBox(st#2, Tclass.M0.State())
           && $IsAllocBox(st#2, Tclass.M0.State(), $Heap)
           && 
          $IsBox(st'#2, Tclass.M0.State())
           && $IsAllocBox(st'#2, Tclass.M0.State(), $Heap))
        {
            if (Set#IsMember(sts#0, st#2))
            {
            }

            if (Set#IsMember(sts#0, st#2) && Set#IsMember(sts#0, st'#2))
            {
                // Begin Comprehension WF check
                havoc p#2;
                if ($IsBox(p#2, Tclass.M0.Path()) && $IsAllocBox(p#2, Tclass.M0.Path(), $Heap))
                {
                    ##st#0 := st#2;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#2);
                    if (Set#IsMember(M0.__default.DomSt(st#2), p#2))
                    {
                        ##st#1 := st'#2;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
                        assume M0.__default.DomSt#canCall(st'#2);
                    }

                    if (Set#IsMember(M0.__default.DomSt(st#2), p#2)
                       && Set#IsMember(M0.__default.DomSt(st'#2), p#2))
                    {
                        ##p#0 := p#2;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0, Tclass.M0.Path(), $Heap);
                        ##st#2 := st#2;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
                        assert {:id "id25"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#2), ##p#0);
                        assume Set#IsMember(M0.__default.DomSt(##st#2), ##p#0);
                        assume M0.__default.GetSt#canCall(p#2, st#2);
                        ##p#1 := p#2;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#1, Tclass.M0.Path(), $Heap);
                        ##st#3 := st'#2;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
                        assert {:id "id26"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#3), ##p#1);
                        assume Set#IsMember(M0.__default.DomSt(##st#3), ##p#1);
                        assume M0.__default.GetSt#canCall(p#2, st'#2);
                    }
                }

                // End Comprehension WF check
            }
        }

        // End Comprehension WF check
        assume {:id "id27"} M0.__default.Compatible(sts#0)
           == (forall st#3: Box, st'#3: Box :: 
            { M0.__default.DomSt(st'#3), M0.__default.DomSt(st#3) } 
              { M0.__default.DomSt(st'#3), Set#IsMember(sts#0, st#3) } 
              { M0.__default.DomSt(st#3), Set#IsMember(sts#0, st'#3) } 
              { Set#IsMember(sts#0, st'#3), Set#IsMember(sts#0, st#3) } 
            $IsBox(st#3, Tclass.M0.State()) && $IsBox(st'#3, Tclass.M0.State())
               ==> 
              Set#IsMember(sts#0, st#3) && Set#IsMember(sts#0, st'#3)
               ==> (forall p#3: Box :: 
                { M0.__default.GetSt(p#3, st'#3) } 
                  { M0.__default.GetSt(p#3, st#3) } 
                  { Set#IsMember(M0.__default.DomSt(st'#3), p#3) } 
                  { Set#IsMember(M0.__default.DomSt(st#3), p#3) } 
                $IsBox(p#3, Tclass.M0.Path())
                   ==> 
                  Set#IsMember(M0.__default.DomSt(st#3), p#3)
                     && Set#IsMember(M0.__default.DomSt(st'#3), p#3)
                   ==> M0.__default.GetSt(p#3, st#3) == M0.__default.GetSt(p#3, st'#3)));
        assume (forall st#3: Box, st'#3: Box :: 
          { M0.__default.DomSt(st'#3), M0.__default.DomSt(st#3) } 
            { M0.__default.DomSt(st'#3), Set#IsMember(sts#0, st#3) } 
            { M0.__default.DomSt(st#3), Set#IsMember(sts#0, st'#3) } 
            { Set#IsMember(sts#0, st'#3), Set#IsMember(sts#0, st#3) } 
          $IsBox(st#3, Tclass.M0.State()) && $IsBox(st'#3, Tclass.M0.State())
             ==> 
            Set#IsMember(sts#0, st#3)
             ==> 
            Set#IsMember(sts#0, st'#3)
             ==> (forall p#3: Box :: 
              { M0.__default.GetSt(p#3, st'#3) } 
                { M0.__default.GetSt(p#3, st#3) } 
                { Set#IsMember(M0.__default.DomSt(st'#3), p#3) } 
                { Set#IsMember(M0.__default.DomSt(st#3), p#3) } 
              $IsBox(p#3, Tclass.M0.Path())
                 ==> M0.__default.DomSt#canCall(st#3)
                   && (Set#IsMember(M0.__default.DomSt(st#3), p#3)
                     ==> M0.__default.DomSt#canCall(st'#3)
                       && (Set#IsMember(M0.__default.DomSt(st'#3), p#3)
                         ==> M0.__default.GetSt#canCall(p#3, st#3) && M0.__default.GetSt#canCall(p#3, st'#3)))));
        // CheckWellformedWithResult: any expression
        assume $Is(M0.__default.Compatible(sts#0), TBool);
        return;

        assume false;
    }
}



procedure {:verboseName "M0.CompatibleProperty (well-formedness)"} CheckWellFormed$$M0.__default.CompatibleProperty(stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.CompatibleProperty (call)"} Call$$M0.__default.CompatibleProperty(stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap));
  // user-defined preconditions
  requires {:id "id33"} (forall s#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
      { Set#IsMember(sts#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> 
      Set#IsMember(sts#0, s#1)
       ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Compatible#canCall(sts#0);
  free ensures {:id "id34"} M0.__default.Compatible#canCall(sts#0)
     && 
    M0.__default.Compatible(sts#0)
     && (forall st#0: Box, st'#0: Box :: 
      { M0.__default.DomSt(st'#0), M0.__default.DomSt(st#0) } 
        { M0.__default.DomSt(st'#0), Set#IsMember(sts#0, st#0) } 
        { M0.__default.DomSt(st#0), Set#IsMember(sts#0, st'#0) } 
        { Set#IsMember(sts#0, st'#0), Set#IsMember(sts#0, st#0) } 
      $IsBox(st#0, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
         ==> 
        Set#IsMember(sts#0, st#0) && Set#IsMember(sts#0, st'#0)
         ==> (forall p#0: Box :: 
          { M0.__default.GetSt(p#0, st'#0) } 
            { M0.__default.GetSt(p#0, st#0) } 
            { Set#IsMember(M0.__default.DomSt(st'#0), p#0) } 
            { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
          $IsBox(p#0, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st#0), p#0)
               && Set#IsMember(M0.__default.DomSt(st'#0), p#0)
             ==> M0.__default.GetSt(p#0, st#0) == M0.__default.GetSt(p#0, st'#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.CompatibleProperty (correctness)"} Impl$$M0.__default.CompatibleProperty(stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 3 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id35"} (forall s#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
      { Set#IsMember(sts#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> 
      Set#IsMember(sts#0, s#1)
       ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Compatible#canCall(sts#0);
  ensures {:id "id36"} M0.__default.Compatible#canCall(sts#0)
     ==> M0.__default.Compatible(sts#0)
       || (forall st#1: Box, st'#1: Box :: 
        { M0.__default.DomSt(st'#1), M0.__default.DomSt(st#1) } 
          { M0.__default.DomSt(st'#1), Set#IsMember(sts#0, st#1) } 
          { M0.__default.DomSt(st#1), Set#IsMember(sts#0, st'#1) } 
          { Set#IsMember(sts#0, st'#1), Set#IsMember(sts#0, st#1) } 
        $IsBox(st#1, Tclass.M0.State()) && $IsBox(st'#1, Tclass.M0.State())
           ==> 
          Set#IsMember(sts#0, st#1) && Set#IsMember(sts#0, st'#1)
           ==> (forall p#1: Box :: 
            { M0.__default.GetSt(p#1, st'#1) } 
              { M0.__default.GetSt(p#1, st#1) } 
              { Set#IsMember(M0.__default.DomSt(st'#1), p#1) } 
              { Set#IsMember(M0.__default.DomSt(st#1), p#1) } 
            $IsBox(p#1, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#1), p#1)
                 && Set#IsMember(M0.__default.DomSt(st'#1), p#1)
               ==> M0.__default.GetSt(p#1, st#1) == M0.__default.GetSt(p#1, st'#1)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.CompatibleProperty (correctness)"} Impl$$M0.__default.CompatibleProperty(stOrig#0: Box, sts#0: Set) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: CompatibleProperty, Impl$$M0.__default.CompatibleProperty
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(61,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(61,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id37"} Call$$M0.__default.reveal__Extends();
    // TrCallStmt: After ProcessCallStmt
}



// function declaration for M0._default.Combine
function M0.__default.Combine($ly: LayerType, $reveal: bool, sts#0: Set, useCache#0: bool) : Box
uses {
// consequence axiom for M0.__default.Combine
axiom 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $reveal: bool, sts#0: Set, useCache#0: bool :: 
    { M0.__default.Combine($ly, $reveal, sts#0, useCache#0) } 
    M0.__default.Combine#canCall(sts#0, useCache#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(sts#0, TSet(Tclass.M0.State()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> $IsBox(M0.__default.Combine($ly, $reveal, sts#0, useCache#0), Tclass.M0.State()));
// definition axiom for M0.__default.Combine (revealed)
axiom {:id "id38"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, sts#0: Set, useCache#0: bool :: 
    { M0.__default.Combine($LS($ly), true, sts#0, useCache#0) } 
    M0.__default.Combine#canCall(sts#0, useCache#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(sts#0, TSet(Tclass.M0.State()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0)
         && (var st#0 := M0.__default.PickOne(Tclass.M0.State(), sts#0); 
          !Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, st#0))
             ==> M0.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#0)), useCache#0)
               && M0.__default.Union#canCall(M0.__default.Combine($ly, 
                  reveal_M0._default.Combine, 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#0)), 
                  useCache#0), 
                st#0, 
                useCache#0))
         && M0.__default.Combine($LS($ly), true, sts#0, useCache#0)
           == (var st#0 := M0.__default.PickOne(Tclass.M0.State(), sts#0); 
            (if Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, st#0))
               then st#0
               else M0.__default.Union(M0.__default.Combine($ly, 
                  reveal_M0._default.Combine, 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#0)), 
                  useCache#0), 
                st#0, 
                useCache#0))));
// definition axiom for M0.__default.Combine for all literals (revealed)
axiom {:id "id39"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, sts#0: Set, useCache#0: bool :: 
    {:weight 3} { M0.__default.Combine($LS($ly), true, Lit(sts#0), Lit(useCache#0)) } 
    M0.__default.Combine#canCall(Lit(sts#0), Lit(useCache#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(sts#0, TSet(Tclass.M0.State()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> M0.__default.PickOne#canCall(Tclass.M0.State(), Lit(sts#0))
         && (var st#1 := Lit(M0.__default.PickOne(Tclass.M0.State(), Lit(sts#0))); 
          !Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, st#1))
             ==> M0.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#1)), Lit(useCache#0))
               && M0.__default.Union#canCall(M0.__default.Combine($LS($ly), 
                  reveal_M0._default.Combine, 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#1)), 
                  Lit(useCache#0)), 
                st#1, 
                Lit(useCache#0)))
         && M0.__default.Combine($LS($ly), true, Lit(sts#0), Lit(useCache#0))
           == (var st#1 := Lit(M0.__default.PickOne(Tclass.M0.State(), Lit(sts#0))); 
            (if Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, st#1))
               then st#1
               else M0.__default.Union(M0.__default.Combine($LS($ly), 
                  reveal_M0._default.Combine, 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#1)), 
                  Lit(useCache#0)), 
                st#1, 
                Lit(useCache#0)))));
}

function M0.__default.Combine#canCall(sts#0: Set, useCache#0: bool) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, $reveal: bool, sts#0: Set, useCache#0: bool :: 
  { M0.__default.Combine($LS($ly), $reveal, sts#0, useCache#0) } 
  M0.__default.Combine($LS($ly), $reveal, sts#0, useCache#0)
     == M0.__default.Combine($ly, $reveal, sts#0, useCache#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, $reveal: bool, sts#0: Set, useCache#0: bool :: 
  { M0.__default.Combine(AsFuelBottom($ly), $reveal, sts#0, useCache#0) } 
  M0.__default.Combine($ly, $reveal, sts#0, useCache#0)
     == M0.__default.Combine($LZ, $reveal, sts#0, useCache#0));

function M0.__default.Combine#requires(LayerType, Set, bool) : bool;

// #requires axiom for M0.__default.Combine
axiom (forall $ly: LayerType, sts#0: Set, useCache#0: bool :: 
  { M0.__default.Combine#requires($ly, sts#0, useCache#0) } 
  $Is(sts#0, TSet(Tclass.M0.State()))
     ==> M0.__default.Combine#requires($ly, sts#0, useCache#0)
       == !Set#Equal(sts#0, Set#Empty(): Set));

procedure {:verboseName "M0.Combine (well-formedness)"} CheckWellformed$$M0.__default.Combine(sts#0: Set where $Is(sts#0, TSet(Tclass.M0.State())), useCache#0: bool);
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Combine (well-formedness)"} CheckWellformed$$M0.__default.Combine(sts#0: Set, useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var st#Z#0: Box;
  var let#0#0#0: Box;
  var ##s#0: Set;
  var ##st#0: Box;
  var ##sts#0: Set;
  var ##useCache#0: bool;
  var ##st'#0: Box;
  var ##useCache#1: bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id40"} !Set#Equal(sts#0, Set#Empty(): Set);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0), 
          Tclass.M0.State());
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc st#Z#0;
        ##s#0 := sts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##s#0, TSet(Tclass.M0.State()), $Heap);
        assert {:id "id41"} {:subsumption 0} !Set#Equal(##s#0, Set#Empty(): Set);
        assume !Set#Equal(##s#0, Set#Empty(): Set);
        assume M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0);
        assume {:id "id42"} let#0#0#0 == M0.__default.PickOne(Tclass.M0.State(), sts#0);
        assume M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0);
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0#0#0, Tclass.M0.State());
        assume {:id "id43"} st#Z#0 == let#0#0#0;
        if (Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0)))
        {
            assume {:id "id44"} M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)
               == st#Z#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $IsBox(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0), 
              Tclass.M0.State());
            return;
        }
        else
        {
            ##sts#0 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
            ##useCache#0 := useCache#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#0, TBool, $Heap);
            assert {:id "id45"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
            assume !Set#Equal(##sts#0, Set#Empty(): Set);
            assert {:id "id46"} (Set#Subset(##sts#0, sts#0) && !Set#Subset(sts#0, ##sts#0))
               || (Set#Equal(##sts#0, sts#0) && !##useCache#0 && useCache#0);
            assume M0.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0)), useCache#0);
            ##st#0 := M0.__default.Combine($LS($LZ), 
              reveal_M0._default.Combine, 
              Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0)), 
              useCache#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
            ##st'#0 := st#Z#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
            ##useCache#1 := useCache#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1, TBool, $Heap);
            assume M0.__default.Union#canCall(M0.__default.Combine($LS($LZ), 
                reveal_M0._default.Combine, 
                Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0)), 
                useCache#0), 
              st#Z#0, 
              useCache#0);
            assume {:id "id47"} M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)
               == M0.__default.Union(M0.__default.Combine($LS($LZ), 
                  reveal_M0._default.Combine, 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0)), 
                  useCache#0), 
                st#Z#0, 
                useCache#0);
            assume M0.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0)), useCache#0)
               && M0.__default.Union#canCall(M0.__default.Combine($LS($LZ), 
                  reveal_M0._default.Combine, 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0)), 
                  useCache#0), 
                st#Z#0, 
                useCache#0);
            // CheckWellformedWithResult: any expression
            assume $IsBox(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0), 
              Tclass.M0.State());
            return;
        }

        assume false;
    }
}



// function declaration for M0._default.PickOne
function M0.__default.PickOne(M0._default.PickOne$T: Ty, s#0: Set) : Box
uses {
// consequence axiom for M0.__default.PickOne
axiom 0 <= $FunctionContextHeight
   ==> (forall M0._default.PickOne$T: Ty, s#0: Set :: 
    { M0.__default.PickOne(M0._default.PickOne$T, s#0) } 
    M0.__default.PickOne#canCall(M0._default.PickOne$T, s#0)
         || (0 < $FunctionContextHeight
           && 
          $Is(s#0, TSet(M0._default.PickOne$T))
           && !Set#Equal(s#0, Set#Empty(): Set))
       ==> $IsBox(M0.__default.PickOne(M0._default.PickOne$T, s#0), M0._default.PickOne$T));
// alloc consequence axiom for M0.__default.PickOne
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, M0._default.PickOne$T: Ty, s#0: Set :: 
    { $IsAllocBox(M0.__default.PickOne(M0._default.PickOne$T, s#0), M0._default.PickOne$T, $Heap) } 
    (M0.__default.PickOne#canCall(M0._default.PickOne$T, s#0)
           || (0 < $FunctionContextHeight
             && 
            $Is(s#0, TSet(M0._default.PickOne$T))
             && $IsAlloc(s#0, TSet(M0._default.PickOne$T), $Heap)
             && !Set#Equal(s#0, Set#Empty(): Set)))
         && $IsGoodHeap($Heap)
       ==> $IsAllocBox(M0.__default.PickOne(M0._default.PickOne$T, s#0), M0._default.PickOne$T, $Heap));
// definition axiom for M0.__default.PickOne (revealed)
axiom {:id "id48"} 0 <= $FunctionContextHeight
   ==> (forall M0._default.PickOne$T: Ty, $Heap: Heap, s#0: Set :: 
    { M0.__default.PickOne(M0._default.PickOne$T, s#0), $IsGoodHeap($Heap) } 
    M0.__default.PickOne#canCall(M0._default.PickOne$T, s#0)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(s#0, TSet(M0._default.PickOne$T))
           && !Set#Equal(s#0, Set#Empty(): Set))
       ==> $let#0$canCall(M0._default.PickOne$T, s#0)
         && M0.__default.PickOne(M0._default.PickOne$T, s#0)
           == (var x#0 := $let#0_x(M0._default.PickOne$T, s#0); x#0));
// definition axiom for M0.__default.PickOne for all literals (revealed)
axiom {:id "id49"} 0 <= $FunctionContextHeight
   ==> (forall M0._default.PickOne$T: Ty, $Heap: Heap, s#0: Set :: 
    {:weight 3} { M0.__default.PickOne(M0._default.PickOne$T, Lit(s#0)), $IsGoodHeap($Heap) } 
    M0.__default.PickOne#canCall(M0._default.PickOne$T, Lit(s#0))
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(s#0, TSet(M0._default.PickOne$T))
           && !Set#Equal(s#0, Set#Empty(): Set))
       ==> $let#0$canCall(M0._default.PickOne$T, Lit(s#0))
         && M0.__default.PickOne(M0._default.PickOne$T, Lit(s#0))
           == (var x#1 := $let#0_x(M0._default.PickOne$T, Lit(s#0)); x#1));
}

function M0.__default.PickOne#canCall(M0._default.PickOne$T: Ty, s#0: Set) : bool;

function M0.__default.PickOne#requires(Ty, Set) : bool;

// #requires axiom for M0.__default.PickOne
axiom (forall M0._default.PickOne$T: Ty, $Heap: Heap, s#0: Set :: 
  { M0.__default.PickOne#requires(M0._default.PickOne$T, s#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(s#0, TSet(M0._default.PickOne$T))
     ==> M0.__default.PickOne#requires(M0._default.PickOne$T, s#0)
       == !Set#Equal(s#0, Set#Empty(): Set));

function $let#0_x(M0._default.PickOne$T: Ty, s: Set) : Box;

function $let#0$canCall(M0._default.PickOne$T: Ty, s: Set) : bool;

axiom (forall M0._default.PickOne$T: Ty, s: Set :: 
  { $let#0_x(M0._default.PickOne$T, s) } 
  $let#0$canCall(M0._default.PickOne$T, s)
     ==> Set#IsMember(s, $let#0_x(M0._default.PickOne$T, s)));

procedure {:verboseName "M0.PickOne (well-formedness)"} CheckWellformed$$M0.__default.PickOne(M0._default.PickOne$T: Ty, s#0: Set where $Is(s#0, TSet(M0._default.PickOne$T)));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.PickOne (well-formedness)"} CheckWellformed$$M0.__default.PickOne(M0._default.PickOne$T: Ty, s#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var x#2: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id50"} !Set#Equal(s#0, Set#Empty(): Set);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(M0.__default.PickOne(M0._default.PickOne$T, s#0), M0._default.PickOne$T);
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc x#2;
        if ($IsBox(x#2, M0._default.PickOne$T)
           && $IsAllocBox(x#2, M0._default.PickOne$T, $Heap))
        {
        }

        assert {:id "id51"} (exists x#3: Box :: 
          $IsBox(x#3, M0._default.PickOne$T) && Set#IsMember(s#0, x#3));
        assume $IsBox(x#2, M0._default.PickOne$T)
           && $IsAllocBox(x#2, M0._default.PickOne$T, $Heap);
        assume Set#IsMember(s#0, x#2);
        assume $let#0$canCall(M0._default.PickOne$T, s#0);
        assume {:id "id52"} M0.__default.PickOne(M0._default.PickOne$T, s#0) == x#2;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $IsBox(M0.__default.PickOne(M0._default.PickOne$T, s#0), M0._default.PickOne$T);
        return;

        assume false;
    }
}



procedure {:verboseName "M0.Lemma_Combine (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__Combine(sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    parent#0: Box
       where $IsBox(parent#0, Tclass.M0.State())
         && $IsAllocBox(parent#0, Tclass.M0.State(), $Heap), 
    useCache#0: bool);
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_Combine (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__Combine(sts#0: Set, parent#0: Box, useCache#0: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var st#0: Box;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##st'#0: Box;
  var st#2: Box;
  var ##stC#0: Box;
  var stCombined#Z#0: Box;
  var let#0#0#0: Box;
  var ##sts#0: Set;
  var ##useCache#0: bool;
  var ##st#2: Box;
  var ##st#3: Box;
  var ##st'#1: Box;
  var ##stC#1: Box;
  var st#4: Box;
  var ##st#4: Box;
  var ##st#5: Box;
  var h#0: Box;
  var ##st#6: Box;
  var st#5: Box;
  var ##st#7: Box;


    // AddMethodImpl: Lemma_Combine, CheckWellFormed$$M0.__default.Lemma__Combine
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id53"} !Set#Equal(sts#0, Set#Empty(): Set);
    // Begin Comprehension WF check
    havoc st#0;
    if ($IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap))
    {
        if (Set#IsMember(sts#0, st#0))
        {
            ##st#0 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
            assume M0.__default.ValidState#canCall(st#0);
            if (M0.__default.ValidState(st#0))
            {
                ##st#1 := parent#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
                ##st'#0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
                assume M0.__default.Extends#canCall(parent#0, st#0);
            }
        }
    }

    // End Comprehension WF check
    assume {:id "id54"} (forall st#1: Box :: 
      { M0.__default.Extends(reveal_M0._default.Extends, parent#0, st#1) } 
        { M0.__default.ValidState(st#1) } 
        { Set#IsMember(sts#0, st#1) } 
      $IsBox(st#1, Tclass.M0.State())
         ==> (Set#IsMember(sts#0, st#1) ==> M0.__default.ValidState(st#1))
           && (Set#IsMember(sts#0, st#1)
             ==> M0.__default.Extends(reveal_M0._default.Extends, parent#0, st#1)));
    if (useCache#0)
    {
        // Begin Comprehension WF check
        havoc st#2;
        if ($IsBox(st#2, Tclass.M0.State()) && $IsAllocBox(st#2, Tclass.M0.State(), $Heap))
        {
            if (Set#IsMember(sts#0, st#2))
            {
                ##stC#0 := st#2;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
                assume M0.__default.ConsistentCache#canCall(st#2);
            }
        }

        // End Comprehension WF check
    }

    assume {:id "id55"} useCache#0
       ==> (forall st#3: Box :: 
        { M0.__default.ConsistentCache(st#3) } { Set#IsMember(sts#0, st#3) } 
        $IsBox(st#3, Tclass.M0.State())
           ==> 
          Set#IsMember(sts#0, st#3)
           ==> M0.__default.ConsistentCache(st#3));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc stCombined#Z#0;
    ##sts#0 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id56"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
    assume !Set#Equal(##sts#0, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts#0, useCache#0);
    assume {:id "id57"} let#0#0#0
       == M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
    assume M0.__default.Combine#canCall(sts#0, useCache#0);
    // CheckWellformedWithResult: any expression
    assume $IsBox(let#0#0#0, Tclass.M0.State());
    assume {:id "id58"} stCombined#Z#0 == let#0#0#0;
    ##st#2 := stCombined#Z#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stCombined#Z#0);
    if (M0.__default.ValidState(stCombined#Z#0))
    {
        ##st#3 := parent#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
        ##st'#1 := stCombined#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#1, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(parent#0, stCombined#Z#0);
    }

    if (M0.__default.ValidState(stCombined#Z#0)
       && M0.__default.Extends(reveal_M0._default.Extends, parent#0, stCombined#Z#0))
    {
        if (useCache#0)
        {
            ##stC#1 := stCombined#Z#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
            assume M0.__default.ConsistentCache#canCall(stCombined#Z#0);
            if (M0.__default.ConsistentCache(stCombined#Z#0))
            {
                // Begin Comprehension WF check
                havoc st#4;
                if ($IsBox(st#4, Tclass.M0.State()) && $IsAllocBox(st#4, Tclass.M0.State(), $Heap))
                {
                    if (Set#IsMember(sts#0, st#4))
                    {
                        ##st#4 := st#4;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
                        assume M0.__default.DomC#canCall(st#4);
                        ##st#5 := stCombined#Z#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
                        assume M0.__default.DomC#canCall(stCombined#Z#0);
                    }
                }

                // End Comprehension WF check
            }

            if (M0.__default.ConsistentCache(stCombined#Z#0)
               && (forall st#6: Box :: 
                { M0.__default.DomC(st#6) } { Set#IsMember(sts#0, st#6) } 
                $IsBox(st#6, Tclass.M0.State())
                   ==> 
                  Set#IsMember(sts#0, st#6)
                   ==> Set#Subset(M0.__default.DomC(st#6), M0.__default.DomC(stCombined#Z#0))))
            {
                // Begin Comprehension WF check
                havoc h#0;
                if ($IsBox(h#0, Tclass.M0.HashValue())
                   && $IsAllocBox(h#0, Tclass.M0.HashValue(), $Heap))
                {
                    ##st#6 := stCombined#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomC#canCall(stCombined#Z#0);
                    if (Set#IsMember(M0.__default.DomC(stCombined#Z#0), h#0))
                    {
                        // Begin Comprehension WF check
                        havoc st#5;
                        if ($IsBox(st#5, Tclass.M0.State()) && $IsAllocBox(st#5, Tclass.M0.State(), $Heap))
                        {
                            if (Set#IsMember(sts#0, st#5))
                            {
                                ##st#7 := st#5;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
                                assume M0.__default.DomC#canCall(st#5);
                            }
                        }

                        // End Comprehension WF check
                    }
                }

                // End Comprehension WF check
            }
        }
    }

    assume {:id "id59"} (var stCombined#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0); 
      M0.__default.ValidState(stCombined#0)
         && M0.__default.Extends(reveal_M0._default.Extends, parent#0, stCombined#0)
         && (useCache#0
           ==> M0.__default.ConsistentCache(stCombined#0)
             && (forall st#7: Box :: 
              { M0.__default.DomC(st#7) } { Set#IsMember(sts#0, st#7) } 
              $IsBox(st#7, Tclass.M0.State())
                 ==> 
                Set#IsMember(sts#0, st#7)
                 ==> Set#Subset(M0.__default.DomC(st#7), M0.__default.DomC(stCombined#0)))
             && (forall h#1: Box :: 
              { Set#IsMember(M0.__default.DomC(stCombined#0), h#1) } 
              $IsBox(h#1, Tclass.M0.HashValue())
                 ==> 
                Set#IsMember(M0.__default.DomC(stCombined#0), h#1)
                 ==> (exists st#8: Box :: 
                  { M0.__default.DomC(st#8) } { Set#IsMember(sts#0, st#8) } 
                  $IsBox(st#8, Tclass.M0.State())
                     && 
                    Set#IsMember(sts#0, st#8)
                     && Set#IsMember(M0.__default.DomC(st#8), h#1)))));
}



procedure {:verboseName "M0.Lemma_Combine (call)"} Call$$M0.__default.Lemma__Combine(sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    parent#0: Box
       where $IsBox(parent#0, Tclass.M0.State())
         && $IsAllocBox(parent#0, Tclass.M0.State(), $Heap), 
    useCache#0: bool);
  // user-defined preconditions
  requires {:id "id60"} !Set#Equal(sts#0, Set#Empty(): Set);
  requires {:id "id61"} (forall st#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, parent#0, st#1) } 
      { M0.__default.ValidState(st#1) } 
      { Set#IsMember(sts#0, st#1) } 
    $IsBox(st#1, Tclass.M0.State())
       ==> (Set#IsMember(sts#0, st#1) ==> M0.__default.ValidState(st#1))
         && (Set#IsMember(sts#0, st#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, parent#0, st#1)));
  requires {:id "id62"} useCache#0
     ==> (forall st#3: Box :: 
      { M0.__default.ConsistentCache(st#3) } { Set#IsMember(sts#0, st#3) } 
      $IsBox(st#3, Tclass.M0.State())
         ==> 
        Set#IsMember(sts#0, st#3)
         ==> M0.__default.ConsistentCache(st#3));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(sts#0, useCache#0)
     && (var stCombined#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0); 
      M0.__default.ValidState#canCall(stCombined#0)
         && (M0.__default.ValidState(stCombined#0)
           ==> M0.__default.Extends#canCall(parent#0, stCombined#0)
             && (M0.__default.Extends(reveal_M0._default.Extends, parent#0, stCombined#0)
               ==> 
              useCache#0
               ==> M0.__default.ConsistentCache#canCall(stCombined#0)
                 && (M0.__default.ConsistentCache(stCombined#0)
                   ==> (forall st#7: Box :: 
                      { M0.__default.DomC(st#7) } { Set#IsMember(sts#0, st#7) } 
                      $IsBox(st#7, Tclass.M0.State())
                         ==> 
                        Set#IsMember(sts#0, st#7)
                         ==> M0.__default.DomC#canCall(st#7) && M0.__default.DomC#canCall(stCombined#0))
                     && ((forall st#7: Box :: 
                        { M0.__default.DomC(st#7) } { Set#IsMember(sts#0, st#7) } 
                        $IsBox(st#7, Tclass.M0.State())
                           ==> 
                          Set#IsMember(sts#0, st#7)
                           ==> Set#Subset(M0.__default.DomC(st#7), M0.__default.DomC(stCombined#0)))
                       ==> (forall h#1: Box :: 
                        { Set#IsMember(M0.__default.DomC(stCombined#0), h#1) } 
                        $IsBox(h#1, Tclass.M0.HashValue())
                           ==> M0.__default.DomC#canCall(stCombined#0)
                             && (Set#IsMember(M0.__default.DomC(stCombined#0), h#1)
                               ==> (forall st#8: Box :: 
                                { M0.__default.DomC(st#8) } { Set#IsMember(sts#0, st#8) } 
                                $IsBox(st#8, Tclass.M0.State())
                                   ==> 
                                  Set#IsMember(sts#0, st#8)
                                   ==> M0.__default.DomC#canCall(st#8)))))))));
  free ensures {:id "id63"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    M0.__default.ValidState#canCall(stCombined#0)
       && 
      M0.__default.ValidState(stCombined#0)
       && (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(stCombined#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stCombined#0), p#0)
           ==> M0.__default.WellFounded(p#0)));
  ensures {:id "id64"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    M0.__default.Extends(reveal_M0._default.Extends, parent#0, stCombined#0));
  free ensures {:id "id65"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    useCache#0
       ==> M0.__default.ConsistentCache#canCall(stCombined#0)
         && 
        M0.__default.ConsistentCache(stCombined#0)
         && (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#0) } 
          $Is(cmd#0, TSeq(TChar))
               && $Is(deps#0, TSet(Tclass.M0.Path()))
               && $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(M0.__default.DomC(stCombined#0), 
              M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
             ==> Set#IsMember(M0.__default.DomSt(stCombined#0), M0.__default.Loc(cmd#0, deps#0, e#0))));
  ensures {:id "id66"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    useCache#0
       ==> (forall st#7: Box :: 
        { M0.__default.DomC(st#7) } { Set#IsMember(sts#0, st#7) } 
        $IsBox(st#7, Tclass.M0.State())
           ==> 
          Set#IsMember(sts#0, st#7)
           ==> Set#Subset(M0.__default.DomC(st#7), M0.__default.DomC(stCombined#0))));
  ensures {:id "id67"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    useCache#0
       ==> (forall h#1: Box :: 
        { Set#IsMember(M0.__default.DomC(stCombined#0), h#1) } 
        $IsBox(h#1, Tclass.M0.HashValue())
           ==> 
          Set#IsMember(M0.__default.DomC(stCombined#0), h#1)
           ==> (exists st#8: Box :: 
            { M0.__default.DomC(st#8) } { Set#IsMember(sts#0, st#8) } 
            $IsBox(st#8, Tclass.M0.State())
               && 
              Set#IsMember(sts#0, st#8)
               && Set#IsMember(M0.__default.DomC(st#8), h#1))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_Combine (correctness)"} Impl$$M0.__default.Lemma__Combine(sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    parent#0: Box
       where $IsBox(parent#0, Tclass.M0.State())
         && $IsAllocBox(parent#0, Tclass.M0.State(), $Heap), 
    useCache#0: bool)
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id68"} !Set#Equal(sts#0, Set#Empty(): Set);
  requires {:id "id69"} (forall st#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, parent#0, st#1) } 
      { M0.__default.ValidState(st#1) } 
      { Set#IsMember(sts#0, st#1) } 
    $IsBox(st#1, Tclass.M0.State())
       ==> (Set#IsMember(sts#0, st#1) ==> M0.__default.ValidState(st#1))
         && (Set#IsMember(sts#0, st#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, parent#0, st#1)));
  requires {:id "id70"} useCache#0
     ==> (forall st#3: Box :: 
      { M0.__default.ConsistentCache(st#3) } { Set#IsMember(sts#0, st#3) } 
      $IsBox(st#3, Tclass.M0.State())
         ==> 
        Set#IsMember(sts#0, st#3)
         ==> M0.__default.ConsistentCache(st#3));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(sts#0, useCache#0)
     && (var stCombined#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0); 
      M0.__default.ValidState#canCall(stCombined#0)
         && (M0.__default.ValidState(stCombined#0)
           ==> M0.__default.Extends#canCall(parent#0, stCombined#0)
             && (M0.__default.Extends(reveal_M0._default.Extends, parent#0, stCombined#0)
               ==> 
              useCache#0
               ==> M0.__default.ConsistentCache#canCall(stCombined#0)
                 && (M0.__default.ConsistentCache(stCombined#0)
                   ==> (forall st#7: Box :: 
                      { M0.__default.DomC(st#7) } { Set#IsMember(sts#0, st#7) } 
                      $IsBox(st#7, Tclass.M0.State())
                         ==> 
                        Set#IsMember(sts#0, st#7)
                         ==> M0.__default.DomC#canCall(st#7) && M0.__default.DomC#canCall(stCombined#0))
                     && ((forall st#7: Box :: 
                        { M0.__default.DomC(st#7) } { Set#IsMember(sts#0, st#7) } 
                        $IsBox(st#7, Tclass.M0.State())
                           ==> 
                          Set#IsMember(sts#0, st#7)
                           ==> Set#Subset(M0.__default.DomC(st#7), M0.__default.DomC(stCombined#0)))
                       ==> (forall h#1: Box :: 
                        { Set#IsMember(M0.__default.DomC(stCombined#0), h#1) } 
                        $IsBox(h#1, Tclass.M0.HashValue())
                           ==> M0.__default.DomC#canCall(stCombined#0)
                             && (Set#IsMember(M0.__default.DomC(stCombined#0), h#1)
                               ==> (forall st#8: Box :: 
                                { M0.__default.DomC(st#8) } { Set#IsMember(sts#0, st#8) } 
                                $IsBox(st#8, Tclass.M0.State())
                                   ==> 
                                  Set#IsMember(sts#0, st#8)
                                   ==> M0.__default.DomC#canCall(st#8)))))))));
  ensures {:id "id71"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    M0.__default.ValidState#canCall(stCombined#0)
       ==> M0.__default.ValidState(stCombined#0)
         || (forall p#1: Box :: 
          { M0.__default.WellFounded(p#1) } 
            { Set#IsMember(M0.__default.DomSt(stCombined#0), p#1) } 
          $IsBox(p#1, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(stCombined#0), p#1)
             ==> M0.__default.WellFounded(p#1)));
  ensures {:id "id72"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    M0.__default.Extends(reveal_M0._default.Extends, parent#0, stCombined#0));
  ensures {:id "id73"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    useCache#0
       ==> 
      M0.__default.ConsistentCache#canCall(stCombined#0)
       ==> M0.__default.ConsistentCache(stCombined#0)
         || (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
          { M0.__default.Loc(cmd#1, deps#1, e#1) } 
          $Is(cmd#1, TSeq(TChar))
               && $Is(deps#1, TSet(Tclass.M0.Path()))
               && $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(M0.__default.DomC(stCombined#0), 
              M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
             ==> Set#IsMember(M0.__default.DomSt(stCombined#0), M0.__default.Loc(cmd#1, deps#1, e#1))));
  ensures {:id "id74"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    useCache#0
       ==> (forall st#7: Box :: 
        { M0.__default.DomC(st#7) } { Set#IsMember(sts#0, st#7) } 
        $IsBox(st#7, Tclass.M0.State())
           ==> 
          Set#IsMember(sts#0, st#7)
           ==> Set#Subset(M0.__default.DomC(st#7), M0.__default.DomC(stCombined#0))));
  ensures {:id "id75"} (var stCombined#0 := M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0); 
    useCache#0
       ==> (forall h#1: Box :: 
        { Set#IsMember(M0.__default.DomC(stCombined#0), h#1) } 
        $IsBox(h#1, Tclass.M0.HashValue())
           ==> 
          Set#IsMember(M0.__default.DomC(stCombined#0), h#1)
           ==> (exists st#8: Box :: 
            { M0.__default.DomC(st#8) } { Set#IsMember(sts#0, st#8) } 
            $IsBox(st#8, Tclass.M0.State())
               && 
              Set#IsMember(sts#0, st#8)
               && Set#IsMember(M0.__default.DomC(st#8), h#1))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_Combine (correctness)"} Impl$$M0.__default.Lemma__Combine(sts#0: Set, parent#0: Box, useCache#0: bool) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var defass#st#13: bool;
  var st#13: Box
     where defass#st#13
       ==> $IsBox(st#13, Tclass.M0.State()) && $IsAllocBox(st#13, Tclass.M0.State(), $Heap);
  var ##s#0: Set;
  var defass#stCombined#1_0: bool;
  var stCombined#1_0: Box
     where defass#stCombined#1_0
       ==> $IsBox(stCombined#1_0, Tclass.M0.State())
         && $IsAllocBox(stCombined#1_0, Tclass.M0.State(), $Heap);
  var ##sts#1_0: Set;
  var ##useCache#1_0: bool;
  var smaller#1_0: Set
     where $Is(smaller#1_0, TSet(Tclass.M0.State()))
       && $IsAlloc(smaller#1_0, TSet(Tclass.M0.State()), $Heap);
  var defass#smallerCombination#1_0: bool;
  var smallerCombination#1_0: Box
     where defass#smallerCombination#1_0
       ==> $IsBox(smallerCombination#1_0, Tclass.M0.State())
         && $IsAllocBox(smallerCombination#1_0, Tclass.M0.State(), $Heap);
  var ##sts#1_1: Set;
  var ##useCache#1_1: bool;
  var ##st#1_0: Box;
  var ##st'#1_0: Box;
  var ##useCache#1_2: bool;
  var p#1_0_0: Box;
  var ##st#1_0_0: Box;
  var ##st#1_0_1: Box;
  var ##p#1_0_0: Box;
  var ##st#1_0_2: Box;
  var ##p#1_0_1: Box;
  var ##st#1_0_3: Box;
  var p##1_0_0: Box;
  var st0##1_0_0: Box;
  var st1##1_0_0: Box;
  var ##st#1_1_0: Box;
  var ##st'#1_1_0: Box;
  var st0##1_0: Box;
  var st1##1_0: Box;
  var st2##1_0: Box;

    // AddMethodImpl: Lemma_Combine, Impl$$M0.__default.Lemma__Combine
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts0#0: Set, $ih#useCache0#0: bool :: 
      { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0) } 
      $Is($ih#sts0#0, TSet(Tclass.M0.State()))
           && 
          !Set#Equal($ih#sts0#0, Set#Empty(): Set)
           && (forall st#9: Box :: 
            { M0.__default.Extends(reveal_M0._default.Extends, parent#0, st#9) } 
              { M0.__default.ValidState(st#9) } 
              { Set#IsMember($ih#sts0#0, st#9) } 
            $IsBox(st#9, Tclass.M0.State())
               ==> (Set#IsMember($ih#sts0#0, st#9) ==> M0.__default.ValidState(st#9))
                 && (Set#IsMember($ih#sts0#0, st#9)
                   ==> M0.__default.Extends(reveal_M0._default.Extends, parent#0, st#9)))
           && ($ih#useCache0#0
             ==> (forall st#10: Box :: 
              { M0.__default.ConsistentCache(st#10) } { Set#IsMember($ih#sts0#0, st#10) } 
              $IsBox(st#10, Tclass.M0.State())
                 ==> 
                Set#IsMember($ih#sts0#0, st#10)
                 ==> M0.__default.ConsistentCache(st#10)))
           && ((Set#Subset($ih#sts0#0, sts#0) && !Set#Subset(sts#0, $ih#sts0#0))
             || (Set#Equal($ih#sts0#0, sts#0) && !$ih#useCache0#0 && useCache#0))
         ==> (var stCombined#1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0); 
          M0.__default.ValidState(stCombined#1)
             && M0.__default.Extends(reveal_M0._default.Extends, parent#0, stCombined#1)
             && ($ih#useCache0#0
               ==> M0.__default.ConsistentCache(stCombined#1)
                 && (forall st#11: Box :: 
                  { M0.__default.DomC(st#11) } { Set#IsMember($ih#sts0#0, st#11) } 
                  $IsBox(st#11, Tclass.M0.State())
                     ==> 
                    Set#IsMember($ih#sts0#0, st#11)
                     ==> Set#Subset(M0.__default.DomC(st#11), M0.__default.DomC(stCombined#1)))
                 && (forall h#2: Box :: 
                  { Set#IsMember(M0.__default.DomC(stCombined#1), h#2) } 
                  $IsBox(h#2, Tclass.M0.HashValue())
                     ==> 
                    Set#IsMember(M0.__default.DomC(stCombined#1), h#2)
                     ==> (exists st#12: Box :: 
                      { M0.__default.DomC(st#12) } { Set#IsMember($ih#sts0#0, st#12) } 
                      $IsBox(st#12, Tclass.M0.State())
                         && 
                        Set#IsMember($ih#sts0#0, st#12)
                         && Set#IsMember(M0.__default.DomC(st#12), h#2))))));
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(92,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(92,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id76"} Call$$M0.__default.reveal__Combine();
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(93,12)
    assume true;
    ##s#0 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##s#0, TSet(Tclass.M0.State()), $Heap);
    assert {:id "id77"} {:subsumption 0} !Set#Equal(##s#0, Set#Empty(): Set);
    assume !Set#Equal(##s#0, Set#Empty(): Set);
    assume M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0);
    assume M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0);
    st#13 := M0.__default.PickOne(Tclass.M0.State(), sts#0);
    defass#st#13 := true;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(94,5)
    assert {:id "id79"} defass#st#13;
    assume true;
    if (Set#Equal(sts#0, Set#UnionOne(Set#Empty(): Set, st#13)))
    {
    }
    else
    {
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(96,22)
        assume true;
        ##sts#1_0 := sts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#1_0, TSet(Tclass.M0.State()), $Heap);
        ##useCache#1_0 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1_0, TBool, $Heap);
        assert {:id "id80"} {:subsumption 0} !Set#Equal(##sts#1_0, Set#Empty(): Set);
        assume !Set#Equal(##sts#1_0, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(sts#0, useCache#0);
        assume M0.__default.Combine#canCall(sts#0, useCache#0);
        stCombined#1_0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
        defass#stCombined#1_0 := true;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(97,19)
        assume true;
        assert {:id "id82"} defass#st#13;
        assume true;
        smaller#1_0 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#13));
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(98,30)
        assume true;
        ##sts#1_1 := smaller#1_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#1_1, TSet(Tclass.M0.State()), $Heap);
        ##useCache#1_1 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1_1, TBool, $Heap);
        assert {:id "id84"} {:subsumption 0} !Set#Equal(##sts#1_1, Set#Empty(): Set);
        assume !Set#Equal(##sts#1_1, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(smaller#1_0, useCache#0);
        assume M0.__default.Combine#canCall(smaller#1_0, useCache#0);
        smallerCombination#1_0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, smaller#1_0, useCache#0);
        defass#smallerCombination#1_0 := true;
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(99,7)
        assert {:id "id86"} defass#stCombined#1_0;
        assert {:id "id87"} defass#smallerCombination#1_0;
        ##st#1_0 := smallerCombination#1_0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1_0, Tclass.M0.State(), $Heap);
        assert {:id "id88"} defass#st#13;
        ##st'#1_0 := st#13;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#1_0, Tclass.M0.State(), $Heap);
        ##useCache#1_2 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1_2, TBool, $Heap);
        assume M0.__default.Union#canCall(smallerCombination#1_0, st#13, useCache#0);
        assume M0.__default.Union#canCall(smallerCombination#1_0, st#13, useCache#0);
        assert {:id "id89"} stCombined#1_0 == M0.__default.Union(smallerCombination#1_0, st#13, useCache#0);
        // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(101,7)
        if (*)
        {
            // Assume Fuel Constant
            havoc p#1_0_0;
            assume $IsBox(p#1_0_0, Tclass.M0.Path());
            assert {:id "id90"} defass#smallerCombination#1_0;
            ##st#1_0_0 := smallerCombination#1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_0, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(smallerCombination#1_0);
            if (!Set#IsMember(M0.__default.DomSt(smallerCombination#1_0), p#1_0_0))
            {
                assert {:id "id91"} defass#stCombined#1_0;
                ##st#1_0_1 := stCombined#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_0_1, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stCombined#1_0);
            }

            assume M0.__default.DomSt#canCall(smallerCombination#1_0)
               && (!Set#IsMember(M0.__default.DomSt(smallerCombination#1_0), p#1_0_0)
                 ==> M0.__default.DomSt#canCall(stCombined#1_0));
            assume {:id "id92"} !Set#IsMember(M0.__default.DomSt(smallerCombination#1_0), p#1_0_0)
               && Set#IsMember(M0.__default.DomSt(stCombined#1_0), p#1_0_0);
            if (*)
            {
                ##p#1_0_0 := p#1_0_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##p#1_0_0, Tclass.M0.Path(), $Heap);
                assert {:id "id93"} defass#stCombined#1_0;
                ##st#1_0_2 := stCombined#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_0_2, Tclass.M0.State(), $Heap);
                assert {:id "id94"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_0_2), ##p#1_0_0);
                assume M0.__default.GetSt#canCall(p#1_0_0, stCombined#1_0);
                ##p#1_0_1 := p#1_0_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##p#1_0_1, Tclass.M0.Path(), $Heap);
                assert {:id "id95"} defass#smallerCombination#1_0;
                ##st#1_0_3 := smallerCombination#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_0_3, Tclass.M0.State(), $Heap);
                assume M0.__default.Oracle#canCall(p#1_0_0, smallerCombination#1_0);
                assume M0.__default.GetSt#canCall(p#1_0_0, stCombined#1_0)
                   && M0.__default.Oracle#canCall(p#1_0_0, smallerCombination#1_0);
                assume {:id "id96"} M0.__default.GetSt(p#1_0_0, stCombined#1_0)
                   == M0.__default.Oracle(p#1_0_0, smallerCombination#1_0);
                assume false;
            }

            push;
            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(104,9)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(104,16)
            // TrCallStmt: Before ProcessCallStmt
            call {:id "id97"} Call$$M0.__default.reveal__Extends();
            // TrCallStmt: After ProcessCallStmt
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(105,23)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            p##1_0_0 := p#1_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            st0##1_0_0 := parent#0;
            assert {:id "id98"} defass#smallerCombination#1_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            st1##1_0_0 := smallerCombination#1_0;
            call {:id "id99"} Call$$M0.__default.OracleProperty(p##1_0_0, st0##1_0_0, st1##1_0_0);
            // TrCallStmt: After ProcessCallStmt
            pop;
            assert {:id "id100"} M0.__default.GetSt(p#1_0_0, stCombined#1_0)
               == M0.__default.Oracle(p#1_0_0, smallerCombination#1_0);
            assume false;
        }
        else
        {
            assume (forall p#1_0_1: Box :: 
              { M0.__default.Oracle(p#1_0_1, smallerCombination#1_0) } 
                { M0.__default.GetSt(p#1_0_1, stCombined#1_0) } 
                { Set#IsMember(M0.__default.DomSt(stCombined#1_0), p#1_0_1) } 
                { Set#IsMember(M0.__default.DomSt(smallerCombination#1_0), p#1_0_1) } 
              $IsBox(p#1_0_1, Tclass.M0.Path())
                   && 
                  !Set#IsMember(M0.__default.DomSt(smallerCombination#1_0), p#1_0_1)
                   && Set#IsMember(M0.__default.DomSt(stCombined#1_0), p#1_0_1)
                 ==> M0.__default.GetSt(p#1_0_1, stCombined#1_0)
                   == M0.__default.Oracle(p#1_0_1, smallerCombination#1_0));
        }

        // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(107,7)
        if (*)
        {
            // Assume Fuel Constant
            assume true;
            assume {:id "id101"} true;
            if (*)
            {
                assert {:id "id102"} defass#smallerCombination#1_0;
                ##st#1_1_0 := smallerCombination#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0, Tclass.M0.State(), $Heap);
                assert {:id "id103"} defass#stCombined#1_0;
                ##st'#1_1_0 := stCombined#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st'#1_1_0, Tclass.M0.State(), $Heap);
                assume M0.__default.Extends#canCall(smallerCombination#1_0, stCombined#1_0);
                assume M0.__default.Extends#canCall(smallerCombination#1_0, stCombined#1_0);
                assume {:id "id104"} M0.__default.Extends(reveal_M0._default.Extends, smallerCombination#1_0, stCombined#1_0);
                assume false;
            }

            push;
            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(108,9)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(108,16)
            // TrCallStmt: Before ProcessCallStmt
            call {:id "id105"} Call$$M0.__default.reveal__Extends();
            // TrCallStmt: After ProcessCallStmt
            pop;
            assert {:id "id106"} M0.__default.Extends(reveal_M0._default.Extends, smallerCombination#1_0, stCombined#1_0);
            assume false;
        }
        else
        {
            assume Lit(true)
               ==> M0.__default.Extends(reveal_M0._default.Extends, smallerCombination#1_0, stCombined#1_0);
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(110,30)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        st0##1_0 := parent#0;
        assert {:id "id107"} defass#smallerCombination#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st1##1_0 := smallerCombination#1_0;
        assert {:id "id108"} defass#stCombined#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st2##1_0 := stCombined#1_0;
        call {:id "id109"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_0, st1##1_0, st2##1_0);
        // TrCallStmt: After ProcessCallStmt
    }
}



// function declaration for M0._default.ConsistentCache
function M0.__default.ConsistentCache(stC#0: Box) : bool
uses {
// definition axiom for M0.__default.ConsistentCache (revealed)
axiom {:id "id110"} 1 <= $FunctionContextHeight
   ==> (forall stC#0: Box :: 
    { M0.__default.ConsistentCache(stC#0) } 
    M0.__default.ConsistentCache#canCall(stC#0)
         || (1 < $FunctionContextHeight && $IsBox(stC#0, Tclass.M0.State()))
       ==> (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#0) } 
          $Is(cmd#0, TSeq(TChar))
               && $Is(deps#0, TSet(Tclass.M0.Path()))
               && $Is(e#0, TSeq(TChar))
             ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#0)
               && M0.__default.Hash#canCall(M0.__default.Loc(cmd#0, deps#0, e#0))
               && M0.__default.DomC#canCall(stC#0)
               && (Set#IsMember(M0.__default.DomC(stC#0), 
                  M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
                 ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && M0.__default.DomSt#canCall(stC#0)))
         && M0.__default.ConsistentCache(stC#0)
           == (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#0) } 
            $Is(cmd#0, TSeq(TChar))
                 && $Is(deps#0, TSet(Tclass.M0.Path()))
                 && $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(M0.__default.DomC(stC#0), 
                M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
               ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#0, deps#0, e#0))));
// definition axiom for M0.__default.ConsistentCache for all literals (revealed)
axiom {:id "id111"} 1 <= $FunctionContextHeight
   ==> (forall stC#0: Box :: 
    {:weight 3} { M0.__default.ConsistentCache(Lit(stC#0)) } 
    M0.__default.ConsistentCache#canCall(Lit(stC#0))
         || (1 < $FunctionContextHeight && $IsBox(stC#0, Tclass.M0.State()))
       ==> (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
          { M0.__default.Loc(cmd#1, deps#1, e#1) } 
          $Is(cmd#1, TSeq(TChar))
               && $Is(deps#1, TSet(Tclass.M0.Path()))
               && $Is(e#1, TSeq(TChar))
             ==> M0.__default.Loc#canCall(cmd#1, deps#1, e#1)
               && M0.__default.Hash#canCall(M0.__default.Loc(cmd#1, deps#1, e#1))
               && M0.__default.DomC#canCall(Lit(stC#0))
               && (Set#IsMember(M0.__default.DomC(Lit(stC#0)), 
                  M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
                 ==> M0.__default.Loc#canCall(cmd#1, deps#1, e#1)
                   && M0.__default.DomSt#canCall(Lit(stC#0))))
         && M0.__default.ConsistentCache(Lit(stC#0))
           == (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
            { M0.__default.Loc(cmd#1, deps#1, e#1) } 
            $Is(cmd#1, TSeq(TChar))
                 && $Is(deps#1, TSet(Tclass.M0.Path()))
                 && $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(M0.__default.DomC(Lit(stC#0)), 
                M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
               ==> Set#IsMember(M0.__default.DomSt(Lit(stC#0)), M0.__default.Loc(cmd#1, deps#1, e#1))));
}

function M0.__default.ConsistentCache#canCall(stC#0: Box) : bool;

function M0.__default.ConsistentCache#requires(Box) : bool;

// #requires axiom for M0.__default.ConsistentCache
axiom (forall stC#0: Box :: 
  { M0.__default.ConsistentCache#requires(stC#0) } 
  $IsBox(stC#0, Tclass.M0.State())
     ==> M0.__default.ConsistentCache#requires(stC#0) == true);

procedure {:verboseName "M0.ConsistentCache (well-formedness)"} CheckWellformed$$M0.__default.ConsistentCache(stC#0: Box where $IsBox(stC#0, Tclass.M0.State()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.StateCorrespondence
function M0.__default.StateCorrespondence($reveal: bool, st#0: Box, stC#0: Box) : bool
uses {
// definition axiom for M0.__default.StateCorrespondence (revealed)
axiom {:id "id113"} 2 <= $FunctionContextHeight
   ==> (forall st#0: Box, stC#0: Box :: 
    { M0.__default.StateCorrespondence(true, st#0, stC#0) } 
    M0.__default.StateCorrespondence#canCall(st#0, stC#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(st#0, Tclass.M0.State())
           && $IsBox(stC#0, Tclass.M0.State()))
       ==> M0.__default.DomSt#canCall(st#0)
         && M0.__default.DomSt#canCall(stC#0)
         && (Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(stC#0))
           ==> (forall p#0: Box :: 
              { M0.__default.GetSt(p#0, st#0) } 
                { M0.__default.GetSt(p#0, stC#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
              $IsBox(p#0, Tclass.M0.Path())
                 ==> M0.__default.DomSt#canCall(st#0)
                   && (Set#IsMember(M0.__default.DomSt(st#0), p#0)
                     ==> M0.__default.GetSt#canCall(p#0, stC#0) && M0.__default.GetSt#canCall(p#0, st#0)))
             && ((forall p#0: Box :: 
                { M0.__default.GetSt(p#0, st#0) } 
                  { M0.__default.GetSt(p#0, stC#0) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
                $IsBox(p#0, Tclass.M0.Path())
                   ==> 
                  Set#IsMember(M0.__default.DomSt(st#0), p#0)
                   ==> M0.__default.GetSt(p#0, stC#0) == M0.__default.GetSt(p#0, st#0))
               ==> (forall p#1: Box :: 
                { M0.__default.Oracle(p#1, st#0) } 
                  { M0.__default.GetSt(p#1, stC#0) } 
                  { Set#IsMember(M0.__default.DomSt(stC#0), p#1) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
                $IsBox(p#1, Tclass.M0.Path())
                   ==> M0.__default.DomSt#canCall(st#0)
                     && (!Set#IsMember(M0.__default.DomSt(st#0), p#1)
                       ==> M0.__default.DomSt#canCall(stC#0)
                         && (Set#IsMember(M0.__default.DomSt(stC#0), p#1)
                           ==> M0.__default.GetSt#canCall(p#1, stC#0) && M0.__default.Oracle#canCall(p#1, st#0))))))
         && M0.__default.StateCorrespondence(true, st#0, stC#0)
           == (
            Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(stC#0))
             && (forall p#0: Box :: 
              { M0.__default.GetSt(p#0, st#0) } 
                { M0.__default.GetSt(p#0, stC#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
              $IsBox(p#0, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(st#0), p#0)
                 ==> M0.__default.GetSt(p#0, stC#0) == M0.__default.GetSt(p#0, st#0))
             && (forall p#1: Box :: 
              { M0.__default.Oracle(p#1, st#0) } 
                { M0.__default.GetSt(p#1, stC#0) } 
                { Set#IsMember(M0.__default.DomSt(stC#0), p#1) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
              $IsBox(p#1, Tclass.M0.Path())
                 ==> 
                !Set#IsMember(M0.__default.DomSt(st#0), p#1)
                   && Set#IsMember(M0.__default.DomSt(stC#0), p#1)
                 ==> M0.__default.GetSt(p#1, stC#0) == M0.__default.Oracle(p#1, st#0))));
// definition axiom for M0.__default.StateCorrespondence for all literals (revealed)
axiom {:id "id114"} 2 <= $FunctionContextHeight
   ==> (forall st#0: Box, stC#0: Box :: 
    {:weight 3} { M0.__default.StateCorrespondence(true, Lit(st#0), Lit(stC#0)) } 
    M0.__default.StateCorrespondence#canCall(Lit(st#0), Lit(stC#0))
         || (2 < $FunctionContextHeight
           && 
          $IsBox(st#0, Tclass.M0.State())
           && $IsBox(stC#0, Tclass.M0.State()))
       ==> M0.__default.DomSt#canCall(Lit(st#0))
         && M0.__default.DomSt#canCall(Lit(stC#0))
         && (Set#Subset(M0.__default.DomSt(Lit(st#0)), M0.__default.DomSt(Lit(stC#0)))
           ==> (forall p#2: Box :: 
              { M0.__default.GetSt(p#2, st#0) } 
                { M0.__default.GetSt(p#2, stC#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
              $IsBox(p#2, Tclass.M0.Path())
                 ==> M0.__default.DomSt#canCall(Lit(st#0))
                   && (Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#2)
                     ==> M0.__default.GetSt#canCall(p#2, Lit(stC#0))
                       && M0.__default.GetSt#canCall(p#2, Lit(st#0))))
             && ((forall p#2: Box :: 
                { M0.__default.GetSt(p#2, st#0) } 
                  { M0.__default.GetSt(p#2, stC#0) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
                $IsBox(p#2, Tclass.M0.Path())
                   ==> 
                  Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#2)
                   ==> M0.__default.GetSt(p#2, Lit(stC#0)) == M0.__default.GetSt(p#2, Lit(st#0)))
               ==> (forall p#3: Box :: 
                { M0.__default.Oracle(p#3, st#0) } 
                  { M0.__default.GetSt(p#3, stC#0) } 
                  { Set#IsMember(M0.__default.DomSt(stC#0), p#3) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#3) } 
                $IsBox(p#3, Tclass.M0.Path())
                   ==> M0.__default.DomSt#canCall(Lit(st#0))
                     && (!Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#3)
                       ==> M0.__default.DomSt#canCall(Lit(stC#0))
                         && (Set#IsMember(M0.__default.DomSt(Lit(stC#0)), p#3)
                           ==> M0.__default.GetSt#canCall(p#3, Lit(stC#0))
                             && M0.__default.Oracle#canCall(p#3, Lit(st#0)))))))
         && M0.__default.StateCorrespondence(true, Lit(st#0), Lit(stC#0))
           == (
            Set#Subset(M0.__default.DomSt(Lit(st#0)), M0.__default.DomSt(Lit(stC#0)))
             && (forall p#2: Box :: 
              { M0.__default.GetSt(p#2, st#0) } 
                { M0.__default.GetSt(p#2, stC#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
              $IsBox(p#2, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#2)
                 ==> M0.__default.GetSt(p#2, Lit(stC#0)) == M0.__default.GetSt(p#2, Lit(st#0)))
             && (forall p#3: Box :: 
              { M0.__default.Oracle(p#3, st#0) } 
                { M0.__default.GetSt(p#3, stC#0) } 
                { Set#IsMember(M0.__default.DomSt(stC#0), p#3) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#3) } 
              $IsBox(p#3, Tclass.M0.Path())
                 ==> 
                !Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#3)
                   && Set#IsMember(M0.__default.DomSt(Lit(stC#0)), p#3)
                 ==> M0.__default.GetSt(p#3, Lit(stC#0)) == M0.__default.Oracle(p#3, Lit(st#0)))));
}

function M0.__default.StateCorrespondence#canCall(st#0: Box, stC#0: Box) : bool;

function M0.__default.StateCorrespondence#requires(Box, Box) : bool;

// #requires axiom for M0.__default.StateCorrespondence
axiom (forall st#0: Box, stC#0: Box :: 
  { M0.__default.StateCorrespondence#requires(st#0, stC#0) } 
  $IsBox(st#0, Tclass.M0.State()) && $IsBox(stC#0, Tclass.M0.State())
     ==> M0.__default.StateCorrespondence#requires(st#0, stC#0) == true);

procedure {:verboseName "M0.StateCorrespondence (well-formedness)"} CheckWellformed$$M0.__default.StateCorrespondence(st#0: Box where $IsBox(st#0, Tclass.M0.State()), 
    stC#0: Box where $IsBox(stC#0, Tclass.M0.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.StateCorrespondence (well-formedness)"} CheckWellformed$$M0.__default.StateCorrespondence(st#0: Box, stC#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##st#1: Box;
  var p#4: Box;
  var ##st#2: Box;
  var ##p#0: Box;
  var ##st#3: Box;
  var ##p#1: Box;
  var ##st#4: Box;
  var p#5: Box;
  var ##st#5: Box;
  var ##st#6: Box;
  var ##p#2: Box;
  var ##st#7: Box;
  var ##p#3: Box;
  var ##st#8: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(st#0);
        ##st#1 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(stC#0);
        if (Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(stC#0)))
        {
            // Begin Comprehension WF check
            havoc p#4;
            if ($IsBox(p#4, Tclass.M0.Path()) && $IsAllocBox(p#4, Tclass.M0.Path(), $Heap))
            {
                ##st#2 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                if (Set#IsMember(M0.__default.DomSt(st#0), p#4))
                {
                    ##p#0 := p#4;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0, Tclass.M0.Path(), $Heap);
                    ##st#3 := stC#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
                    assert {:id "id115"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#3), ##p#0);
                    assume Set#IsMember(M0.__default.DomSt(##st#3), ##p#0);
                    assume M0.__default.GetSt#canCall(p#4, stC#0);
                    ##p#1 := p#4;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1, Tclass.M0.Path(), $Heap);
                    ##st#4 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
                    assert {:id "id116"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#4), ##p#1);
                    assume Set#IsMember(M0.__default.DomSt(##st#4), ##p#1);
                    assume M0.__default.GetSt#canCall(p#4, st#0);
                }
            }

            // End Comprehension WF check
        }

        if (Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(stC#0))
           && (forall p#6: Box :: 
            { M0.__default.GetSt(p#6, st#0) } 
              { M0.__default.GetSt(p#6, stC#0) } 
              { Set#IsMember(M0.__default.DomSt(st#0), p#6) } 
            $IsBox(p#6, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#0), p#6)
               ==> M0.__default.GetSt(p#6, stC#0) == M0.__default.GetSt(p#6, st#0)))
        {
            // Begin Comprehension WF check
            havoc p#5;
            if ($IsBox(p#5, Tclass.M0.Path()) && $IsAllocBox(p#5, Tclass.M0.Path(), $Heap))
            {
                ##st#5 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                if (!Set#IsMember(M0.__default.DomSt(st#0), p#5))
                {
                    ##st#6 := stC#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stC#0);
                }

                if (!Set#IsMember(M0.__default.DomSt(st#0), p#5)
                   && Set#IsMember(M0.__default.DomSt(stC#0), p#5))
                {
                    ##p#2 := p#5;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#2, Tclass.M0.Path(), $Heap);
                    ##st#7 := stC#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
                    assert {:id "id117"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#7), ##p#2);
                    assume Set#IsMember(M0.__default.DomSt(##st#7), ##p#2);
                    assume M0.__default.GetSt#canCall(p#5, stC#0);
                    ##p#3 := p#5;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#3, Tclass.M0.Path(), $Heap);
                    ##st#8 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#8, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#5, st#0);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id118"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0)
           == (
            Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(stC#0))
             && (forall p#6: Box :: 
              { M0.__default.GetSt(p#6, st#0) } 
                { M0.__default.GetSt(p#6, stC#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#6) } 
              $IsBox(p#6, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(st#0), p#6)
                 ==> M0.__default.GetSt(p#6, stC#0) == M0.__default.GetSt(p#6, st#0))
             && (forall p#7: Box :: 
              { M0.__default.Oracle(p#7, st#0) } 
                { M0.__default.GetSt(p#7, stC#0) } 
                { Set#IsMember(M0.__default.DomSt(stC#0), p#7) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#7) } 
              $IsBox(p#7, Tclass.M0.Path())
                 ==> 
                !Set#IsMember(M0.__default.DomSt(st#0), p#7)
                   && Set#IsMember(M0.__default.DomSt(stC#0), p#7)
                 ==> M0.__default.GetSt(p#7, stC#0) == M0.__default.Oracle(p#7, st#0)));
        assume M0.__default.DomSt#canCall(st#0)
           && M0.__default.DomSt#canCall(stC#0)
           && (Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(stC#0))
             ==> (forall p#6: Box :: 
                { M0.__default.GetSt(p#6, st#0) } 
                  { M0.__default.GetSt(p#6, stC#0) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#6) } 
                $IsBox(p#6, Tclass.M0.Path())
                   ==> M0.__default.DomSt#canCall(st#0)
                     && (Set#IsMember(M0.__default.DomSt(st#0), p#6)
                       ==> M0.__default.GetSt#canCall(p#6, stC#0) && M0.__default.GetSt#canCall(p#6, st#0)))
               && ((forall p#6: Box :: 
                  { M0.__default.GetSt(p#6, st#0) } 
                    { M0.__default.GetSt(p#6, stC#0) } 
                    { Set#IsMember(M0.__default.DomSt(st#0), p#6) } 
                  $IsBox(p#6, Tclass.M0.Path())
                     ==> 
                    Set#IsMember(M0.__default.DomSt(st#0), p#6)
                     ==> M0.__default.GetSt(p#6, stC#0) == M0.__default.GetSt(p#6, st#0))
                 ==> (forall p#7: Box :: 
                  { M0.__default.Oracle(p#7, st#0) } 
                    { M0.__default.GetSt(p#7, stC#0) } 
                    { Set#IsMember(M0.__default.DomSt(stC#0), p#7) } 
                    { Set#IsMember(M0.__default.DomSt(st#0), p#7) } 
                  $IsBox(p#7, Tclass.M0.Path())
                     ==> M0.__default.DomSt#canCall(st#0)
                       && (!Set#IsMember(M0.__default.DomSt(st#0), p#7)
                         ==> M0.__default.DomSt#canCall(stC#0)
                           && (Set#IsMember(M0.__default.DomSt(stC#0), p#7)
                             ==> M0.__default.GetSt#canCall(p#7, stC#0) && M0.__default.Oracle#canCall(p#7, st#0))))));
        // CheckWellformedWithResult: any expression
        assume $Is(M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0), 
          TBool);
        return;

        assume false;
    }
}



// function declaration for M0._default.ValidEnv
function M0.__default.ValidEnv(env#0: Box) : bool;

function M0.__default.ValidEnv#canCall(env#0: Box) : bool;

function Tclass.M0.Env() : Ty;

function M0.__default.ValidEnv#requires(Box) : bool;

// #requires axiom for M0.__default.ValidEnv
axiom (forall env#0: Box :: 
  { M0.__default.ValidEnv#requires(env#0) } 
  $IsBox(env#0, Tclass.M0.Env()) ==> M0.__default.ValidEnv#requires(env#0) == true);

procedure {:verboseName "M0.ValidEnv (well-formedness)"} CheckWellformed$$M0.__default.ValidEnv(env#0: Box where $IsBox(env#0, Tclass.M0.Env()));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.EmptyEnv
function M0.__default.EmptyEnv() : Box
uses {
// consequence axiom for M0.__default.EmptyEnv
axiom 1 <= $FunctionContextHeight
   ==> 
  M0.__default.EmptyEnv#canCall() || 1 < $FunctionContextHeight
   ==> M0.__default.ValidEnv(M0.__default.EmptyEnv())
     && $IsBox(M0.__default.EmptyEnv(), Tclass.M0.Env());
// alloc consequence axiom for M0.__default.EmptyEnv
axiom 1 <= $FunctionContextHeight
   ==> (forall $Heap: Heap :: 
    { $IsAllocBox(M0.__default.EmptyEnv(), Tclass.M0.Env(), $Heap) } 
    (M0.__default.EmptyEnv#canCall() || 1 < $FunctionContextHeight)
         && $IsGoodHeap($Heap)
       ==> $IsAllocBox(M0.__default.EmptyEnv(), Tclass.M0.Env(), $Heap));
}

function M0.__default.EmptyEnv#canCall() : bool;

function M0.__default.EmptyEnv#requires() : bool
uses {
// #requires axiom for M0.__default.EmptyEnv
axiom M0.__default.EmptyEnv#requires() == true;
}

procedure {:verboseName "M0.EmptyEnv (well-formedness)"} CheckWellformed$$M0.__default.EmptyEnv();
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id119"} M0.__default.ValidEnv(M0.__default.EmptyEnv());



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.EmptyEnv (well-formedness)"} CheckWellformed$$M0.__default.EmptyEnv()
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(M0.__default.EmptyEnv(), Tclass.M0.Env());
        assert {:id "id120"} Lit(true);
        assume Lit(true) || M0.__default.EmptyEnv#canCall();
        ##env#0 := M0.__default.EmptyEnv();
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
        assume M0.__default.ValidEnv#canCall(M0.__default.EmptyEnv());
        assume {:id "id121"} M0.__default.ValidEnv(M0.__default.EmptyEnv());
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for M0._default.GetEnv
function M0.__default.GetEnv(id#0: Box, env#0: Box) : DatatypeType
uses {
// consequence axiom for M0.__default.GetEnv
axiom 3 <= $FunctionContextHeight
   ==> (forall id#0: Box, env#0: Box :: 
    { M0.__default.GetEnv(id#0, env#0) } 
    M0.__default.GetEnv#canCall(id#0, env#0)
         || (3 < $FunctionContextHeight
           && 
          $IsBox(id#0, Tclass.M0.Identifier())
           && $IsBox(env#0, Tclass.M0.Env())
           && M0.__default.ValidEnv(env#0))
       ==> M0.__default.Value(M0.__default.GetEnv(id#0, env#0))
         && $Is(M0.__default.GetEnv(id#0, env#0), Tclass.M0.Expression()));
// alloc consequence axiom for M0.__default.GetEnv
axiom 3 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, id#0: Box, env#0: Box :: 
    { $IsAlloc(M0.__default.GetEnv(id#0, env#0), Tclass.M0.Expression(), $Heap) } 
    (M0.__default.GetEnv#canCall(id#0, env#0)
           || (3 < $FunctionContextHeight
             && 
            $IsBox(id#0, Tclass.M0.Identifier())
             && $IsAllocBox(id#0, Tclass.M0.Identifier(), $Heap)
             && 
            $IsBox(env#0, Tclass.M0.Env())
             && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap)
             && M0.__default.ValidEnv(env#0)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.GetEnv(id#0, env#0), Tclass.M0.Expression(), $Heap));
}

function M0.__default.GetEnv#canCall(id#0: Box, env#0: Box) : bool;

function Tclass.M0.Identifier() : Ty;

function Tclass.M0.Expression() : Ty
uses {
// Tclass.M0.Expression Tag
axiom Tag(Tclass.M0.Expression()) == Tagclass.M0.Expression
   && TagFamily(Tclass.M0.Expression()) == tytagFamily$Expression;
}

const unique Tagclass.M0.Expression: TyTag;

// Box/unbox axiom for Tclass.M0.Expression
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M0.Expression()) } 
  $IsBox(bx, Tclass.M0.Expression())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M0.Expression()));

function M0.__default.GetEnv#requires(Box, Box) : bool;

// #requires axiom for M0.__default.GetEnv
axiom (forall id#0: Box, env#0: Box :: 
  { M0.__default.GetEnv#requires(id#0, env#0) } 
  $IsBox(id#0, Tclass.M0.Identifier()) && $IsBox(env#0, Tclass.M0.Env())
     ==> M0.__default.GetEnv#requires(id#0, env#0) == M0.__default.ValidEnv(env#0));

procedure {:verboseName "M0.GetEnv (well-formedness)"} CheckWellformed$$M0.__default.GetEnv(id#0: Box where $IsBox(id#0, Tclass.M0.Identifier()), 
    env#0: Box where $IsBox(env#0, Tclass.M0.Env()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id122"} M0.__default.Value#canCall(M0.__default.GetEnv(id#0, env#0))
     ==> M0.__default.Value(M0.__default.GetEnv(id#0, env#0))
       || M0.Expression.exprLiteral_q(M0.__default.GetEnv(id#0, env#0));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.GetEnv (well-formedness)"} CheckWellformed$$M0.__default.GetEnv(id#0: Box, env#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: Box;
  var ##expr#0: DatatypeType;
  var ##id#0: Box;
  var ##env#1: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id123"} M0.__default.ValidEnv(env#0);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.GetEnv(id#0, env#0), Tclass.M0.Expression());
        ##id#0 := id#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##id#0, Tclass.M0.Identifier(), $Heap);
        ##env#1 := env#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
        assert {:id "id124"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
        assume M0.__default.ValidEnv(##env#1);
        assert {:id "id125"} id#0 == id#0 && env#0 == env#0;
        assume (id#0 == id#0 && env#0 == env#0) || M0.__default.GetEnv#canCall(id#0, env#0);
        ##expr#0 := M0.__default.GetEnv(id#0, env#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
        assume M0.__default.Value#canCall(M0.__default.GetEnv(id#0, env#0));
        assume {:id "id126"} M0.__default.Value(M0.__default.GetEnv(id#0, env#0));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for M0._default.SetEnv
function M0.__default.SetEnv(id#0: Box, expr#0: DatatypeType, env#0: Box) : Box
uses {
// consequence axiom for M0.__default.SetEnv
axiom 3 <= $FunctionContextHeight
   ==> (forall id#0: Box, expr#0: DatatypeType, env#0: Box :: 
    { M0.__default.SetEnv(id#0, expr#0, env#0) } 
    M0.__default.SetEnv#canCall(id#0, expr#0, env#0)
         || (3 < $FunctionContextHeight
           && 
          $IsBox(id#0, Tclass.M0.Identifier())
           && $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.__default.ValidEnv(env#0)
           && M0.__default.Value(expr#0))
       ==> M0.__default.ValidEnv(M0.__default.SetEnv(id#0, expr#0, env#0))
         && $IsBox(M0.__default.SetEnv(id#0, expr#0, env#0), Tclass.M0.Env()));
// alloc consequence axiom for M0.__default.SetEnv
axiom 3 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, id#0: Box, expr#0: DatatypeType, env#0: Box :: 
    { $IsAllocBox(M0.__default.SetEnv(id#0, expr#0, env#0), Tclass.M0.Env(), $Heap) } 
    (M0.__default.SetEnv#canCall(id#0, expr#0, env#0)
           || (3 < $FunctionContextHeight
             && 
            $IsBox(id#0, Tclass.M0.Identifier())
             && $IsAllocBox(id#0, Tclass.M0.Identifier(), $Heap)
             && 
            $Is(expr#0, Tclass.M0.Expression())
             && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
             && 
            $IsBox(env#0, Tclass.M0.Env())
             && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap)
             && 
            M0.__default.ValidEnv(env#0)
             && M0.__default.Value(expr#0)))
         && $IsGoodHeap($Heap)
       ==> $IsAllocBox(M0.__default.SetEnv(id#0, expr#0, env#0), Tclass.M0.Env(), $Heap));
}

function M0.__default.SetEnv#canCall(id#0: Box, expr#0: DatatypeType, env#0: Box) : bool;

function M0.__default.SetEnv#requires(Box, DatatypeType, Box) : bool;

// #requires axiom for M0.__default.SetEnv
axiom (forall id#0: Box, expr#0: DatatypeType, env#0: Box :: 
  { M0.__default.SetEnv#requires(id#0, expr#0, env#0) } 
  $IsBox(id#0, Tclass.M0.Identifier())
       && $Is(expr#0, Tclass.M0.Expression())
       && $IsBox(env#0, Tclass.M0.Env())
     ==> M0.__default.SetEnv#requires(id#0, expr#0, env#0)
       == (M0.__default.ValidEnv(env#0) && M0.__default.Value(expr#0)));

procedure {:verboseName "M0.SetEnv (well-formedness)"} CheckWellformed$$M0.__default.SetEnv(id#0: Box where $IsBox(id#0, Tclass.M0.Identifier()), 
    expr#0: DatatypeType where $Is(expr#0, Tclass.M0.Expression()), 
    env#0: Box where $IsBox(env#0, Tclass.M0.Env()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id127"} M0.__default.ValidEnv(M0.__default.SetEnv(id#0, expr#0, env#0));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.SetEnv (well-formedness)"} CheckWellformed$$M0.__default.SetEnv(id#0: Box, expr#0: DatatypeType, env#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: Box;
  var ##expr#0: DatatypeType;
  var ##env#1: Box;
  var ##id#0: Box;
  var ##expr#1: DatatypeType;
  var ##env#2: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id128"} M0.__default.ValidEnv(env#0);
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
    assume M0.__default.Value#canCall(expr#0);
    assume {:id "id129"} M0.__default.Value(expr#0);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(M0.__default.SetEnv(id#0, expr#0, env#0), Tclass.M0.Env());
        ##id#0 := id#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##id#0, Tclass.M0.Identifier(), $Heap);
        ##expr#1 := expr#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
        ##env#2 := env#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
        assert {:id "id130"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
        assert {:id "id131"} {:subsumption 0} M0.__default.Value#canCall(##expr#1)
           ==> M0.__default.Value(##expr#1) || M0.Expression.exprLiteral_q(##expr#1);
        assume M0.__default.ValidEnv(##env#2) && M0.__default.Value(##expr#1);
        assert {:id "id132"} (id#0 == id#0 && M0.Expression#Equal(expr#0, expr#0) && env#0 == env#0)
           || DtRank(##expr#1) < DtRank(expr#0);
        assume (id#0 == id#0 && M0.Expression#Equal(expr#0, expr#0) && env#0 == env#0)
           || M0.__default.SetEnv#canCall(id#0, expr#0, env#0);
        ##env#1 := M0.__default.SetEnv(id#0, expr#0, env#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
        assume M0.__default.ValidEnv#canCall(M0.__default.SetEnv(id#0, expr#0, env#0));
        assume {:id "id133"} M0.__default.ValidEnv(M0.__default.SetEnv(id#0, expr#0, env#0));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for M0._default.exec
function M0.__default.exec(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box) : DatatypeType
uses {
// consequence axiom for M0.__default.exec
axiom 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
    { M0.__default.exec(cmd#0, deps#0, exps#0, st#0) } 
    M0.__default.exec#canCall(cmd#0, deps#0, exps#0, st#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State()))
       ==> $Is(M0.__default.exec(cmd#0, deps#0, exps#0, st#0), 
        Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State())));
}

function M0.__default.exec#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box) : bool;

function Tclass.M0.Tuple(Ty, Ty) : Ty;

const unique Tagclass.M0.Tuple: TyTag;

// Tclass.M0.Tuple Tag
axiom (forall M0.Tuple$A: Ty, M0.Tuple$B: Ty :: 
  { Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B) } 
  Tag(Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B)) == Tagclass.M0.Tuple
     && TagFamily(Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B)) == tytagFamily$Tuple);

function Tclass.M0.Tuple_0(Ty) : Ty;

// Tclass.M0.Tuple injectivity 0
axiom (forall M0.Tuple$A: Ty, M0.Tuple$B: Ty :: 
  { Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B) } 
  Tclass.M0.Tuple_0(Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B)) == M0.Tuple$A);

function Tclass.M0.Tuple_1(Ty) : Ty;

// Tclass.M0.Tuple injectivity 1
axiom (forall M0.Tuple$A: Ty, M0.Tuple$B: Ty :: 
  { Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B) } 
  Tclass.M0.Tuple_1(Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B)) == M0.Tuple$B);

// Box/unbox axiom for Tclass.M0.Tuple
axiom (forall M0.Tuple$A: Ty, M0.Tuple$B: Ty, bx: Box :: 
  { $IsBox(bx, Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B)) } 
  $IsBox(bx, Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B)));

function M0.__default.exec#requires(Seq, Set, Set, Box) : bool;

// #requires axiom for M0.__default.exec
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
  { M0.__default.exec#requires(cmd#0, deps#0, exps#0, st#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M0.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $IsBox(st#0, Tclass.M0.State())
     ==> M0.__default.exec#requires(cmd#0, deps#0, exps#0, st#0) == true);

procedure {:verboseName "M0.exec (well-formedness)"} CheckWellformed$$M0.__default.exec(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M0.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.ExecProperty (well-formedness)"} CheckWellFormed$$M0.__default.ExecProperty(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M0.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M0.Path()), $Heap), 
    exps#0: Set
       where $Is(exps#0, TSet(TSeq(TChar))) && $IsAlloc(exps#0, TSet(TSeq(TChar)), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.ExecProperty (call)"} Call$$M0.__default.ExecProperty(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)) && $IsAlloc(cmd#0, TSeq(TChar), $Heap), 
    deps#0: Set
       where $Is(deps#0, TSet(Tclass.M0.Path()))
         && $IsAlloc(deps#0, TSet(Tclass.M0.Path()), $Heap), 
    exps#0: Set
       where $Is(exps#0, TSet(TSeq(TChar))) && $IsAlloc(exps#0, TSet(TSeq(TChar)), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id144"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id145"} Set#Subset(deps#0, M0.__default.DomSt(st#0));
  requires {:id "id146"} M0.__default.Pre#canCall(cmd#0, deps#0, exps#0, st#0)
     ==> M0.__default.Pre(cmd#0, deps#0, exps#0, st#0)
       || (forall e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
        $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(exps#0, $Box(e#0))
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0))
           ==> M0.__default.GetSt(M0.__default.Loc(cmd#0, deps#0, e#0), st#0)
             == M0.__default.Oracle(M0.__default.Loc(cmd#0, deps#0, e#0), st#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.exec#canCall(cmd#0, deps#0, exps#0, st#0)
     && (var result#0 := M0.__default.exec(cmd#0, deps#0, exps#0, st#0); 
      M0.Tuple.Pair_q(result#0)
         && M0.Tuple.Pair_q(result#0)
         && (var paths#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): Set, M0.Tuple.snd(result#0); 
          M0.__default.ValidState#canCall(st'#0)
             && (M0.__default.ValidState(st'#0)
               ==> M0.__default.Extends#canCall(st#0, st'#0)
                 && (M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)
                   ==> M0.__default.ExtendsLimit#canCall(cmd#0, deps#0, exps#0, st#0, st'#0)
                     && (M0.__default.ExtendsLimit(cmd#0, deps#0, exps#0, st#0, st'#0)
                       ==> M0.__default.DomC#canCall(st#0)
                         && M0.__default.DomC#canCall(st'#0)
                         && (Set#Equal(M0.__default.DomC(st#0), M0.__default.DomC(st'#0))
                           ==> M0.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths#0)
                             && (M0.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0)
                               ==> M0.__default.Post#canCall(cmd#0, deps#0, exps#0, st'#0))))))));
  free ensures {:id "id147"} (var result#0 := M0.__default.exec(cmd#0, deps#0, exps#0, st#0); 
    (var paths#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): Set, M0.Tuple.snd(result#0); 
      M0.__default.ValidState#canCall(st'#0)
         && 
        M0.__default.ValidState(st'#0)
         && (forall p#1: Box :: 
          { M0.__default.WellFounded(p#1) } 
            { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
          $IsBox(p#1, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st'#0), p#1)
             ==> M0.__default.WellFounded(p#1))));
  ensures {:id "id148"} (var result#0 := M0.__default.exec(cmd#0, deps#0, exps#0, st#0); 
    (var paths#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): Set, M0.Tuple.snd(result#0); 
      M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)));
  free ensures {:id "id149"} (var result#0 := M0.__default.exec(cmd#0, deps#0, exps#0, st#0); 
    (var paths#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): Set, M0.Tuple.snd(result#0); 
      M0.__default.ExtendsLimit#canCall(cmd#0, deps#0, exps#0, st#0, st'#0)
         && 
        M0.__default.ExtendsLimit(cmd#0, deps#0, exps#0, st#0, st'#0)
         && Set#Equal(M0.__default.DomSt(st'#0), 
          Set#Union(M0.__default.DomSt(st#0), 
            Set#FromBoogieMap((lambda $y#1: Box :: 
                (exists e#1: Seq :: 
                  { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
                  $Is(e#1, TSeq(TChar))
                     && Set#IsMember(exps#0, $Box(e#1))
                     && $y#1 == M0.__default.Loc(cmd#0, deps#0, e#1))))))));
  ensures {:id "id150"} (var result#0 := M0.__default.exec(cmd#0, deps#0, exps#0, st#0); 
    (var paths#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): Set, M0.Tuple.snd(result#0); 
      Set#Equal(M0.__default.DomC(st#0), M0.__default.DomC(st'#0))));
  free ensures {:id "id151"} (var result#0 := M0.__default.exec(cmd#0, deps#0, exps#0, st#0); 
    (var paths#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): Set, M0.Tuple.snd(result#0); 
      M0.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths#0)
         && 
        M0.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0)
         && Set#Equal(paths#0, 
          Set#FromBoogieMap((lambda $y#3: Box :: 
              (exists e#2: Seq :: 
                { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
                $Is(e#2, TSeq(TChar))
                   && Set#IsMember(exps#0, $Box(e#2))
                   && $y#3 == M0.__default.Loc(cmd#0, deps#0, e#2)))))));
  ensures {:id "id152"} (var result#0 := M0.__default.exec(cmd#0, deps#0, exps#0, st#0); 
    (var paths#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): Set, M0.Tuple.snd(result#0); 
      M0.__default.Post(reveal_M0._default.Post, cmd#0, deps#0, exps#0, st'#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for M0._default.Pre
function M0.__default.Pre(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box) : bool
uses {
// definition axiom for M0.__default.Pre (revealed)
axiom {:id "id153"} 2 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
    { M0.__default.Pre(cmd#0, deps#0, exps#0, st#0) } 
    M0.__default.Pre#canCall(cmd#0, deps#0, exps#0, st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State()))
       ==> (forall e#0: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(exps#0, $Box(e#0))
             ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#0)
               && M0.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0))
                 ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && M0.__default.GetSt#canCall(M0.__default.Loc(cmd#0, deps#0, e#0), st#0)
                   && 
                  M0.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && M0.__default.Oracle#canCall(M0.__default.Loc(cmd#0, deps#0, e#0), st#0)))
         && M0.__default.Pre(cmd#0, deps#0, exps#0, st#0)
           == (forall e#0: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(exps#0, $Box(e#0))
               ==> 
              Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0))
               ==> M0.__default.GetSt(M0.__default.Loc(cmd#0, deps#0, e#0), st#0)
                 == M0.__default.Oracle(M0.__default.Loc(cmd#0, deps#0, e#0), st#0)));
// definition axiom for M0.__default.Pre for decreasing-related literals (revealed)
axiom {:id "id154"} 2 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
    {:weight 3} { M0.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0) } 
    M0.__default.Pre#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State()))
       ==> (forall e#1: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#1))
             ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
               && M0.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))
                 ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M0.__default.GetSt#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                   && 
                  M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M0.__default.Oracle#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)))
         && M0.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
           == (forall e#1: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(exps#0), $Box(e#1))
               ==> 
              Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))
               ==> M0.__default.GetSt(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                 == M0.__default.Oracle(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)));
// definition axiom for M0.__default.Pre for all literals (revealed)
axiom {:id "id155"} 2 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
    {:weight 3} { M0.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0)) } 
    M0.__default.Pre#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State()))
       ==> (forall e#2: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#2))
             ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
               && M0.__default.DomSt#canCall(Lit(st#0))
               && (Set#IsMember(M0.__default.DomSt(Lit(st#0)), M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))
                 ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M0.__default.GetSt#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                   && 
                  M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M0.__default.Oracle#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))))
         && M0.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
           == (forall e#2: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
            $Is(e#2, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(exps#0), $Box(e#2))
               ==> 
              Set#IsMember(M0.__default.DomSt(Lit(st#0)), M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))
               ==> M0.__default.GetSt(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                 == M0.__default.Oracle(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))));
}

function M0.__default.Pre#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box) : bool;

function M0.__default.Pre#requires(Seq, Set, Set, Box) : bool;

// #requires axiom for M0.__default.Pre
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
  { M0.__default.Pre#requires(cmd#0, deps#0, exps#0, st#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M0.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $IsBox(st#0, Tclass.M0.State())
     ==> M0.__default.Pre#requires(cmd#0, deps#0, exps#0, st#0) == true);

procedure {:verboseName "M0.Pre (well-formedness)"} CheckWellformed$$M0.__default.Pre(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M0.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Pre (well-formedness)"} CheckWellformed$$M0.__default.Pre(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var e#3: Seq;
  var ##cmd#0: Seq;
  var ##deps#0: Set;
  var ##exp#0: Seq;
  var ##st#0: Box;
  var ##p#0: Box;
  var ##cmd#1: Seq;
  var ##deps#1: Set;
  var ##exp#1: Seq;
  var ##st#1: Box;
  var ##p#1: Box;
  var ##cmd#2: Seq;
  var ##deps#2: Set;
  var ##exp#2: Seq;
  var ##st#2: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc e#3;
        if ($Is(e#3, TSeq(TChar)) && $IsAlloc(e#3, TSeq(TChar), $Heap))
        {
            if (Set#IsMember(exps#0, $Box(e#3)))
            {
                ##cmd#0 := cmd#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0, TSeq(TChar), $Heap);
                ##deps#0 := deps#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0, TSet(Tclass.M0.Path()), $Heap);
                ##exp#0 := e#3;
                // assume allocatedness for argument to function
                assume $IsAlloc(##exp#0, TSeq(TChar), $Heap);
                assume M0.__default.Loc#canCall(cmd#0, deps#0, e#3);
                ##st#0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                if (Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#3)))
                {
                    ##cmd#1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1, TSeq(TChar), $Heap);
                    ##deps#1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1, TSet(Tclass.M0.Path()), $Heap);
                    ##exp#1 := e#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1, TSeq(TChar), $Heap);
                    assume M0.__default.Loc#canCall(cmd#0, deps#0, e#3);
                    ##p#0 := M0.__default.Loc(cmd#0, deps#0, e#3);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0, Tclass.M0.Path(), $Heap);
                    ##st#1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
                    assert {:id "id156"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1), ##p#0);
                    assume Set#IsMember(M0.__default.DomSt(##st#1), ##p#0);
                    assume M0.__default.GetSt#canCall(M0.__default.Loc(cmd#0, deps#0, e#3), st#0);
                    ##cmd#2 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#2, TSeq(TChar), $Heap);
                    ##deps#2 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#2, TSet(Tclass.M0.Path()), $Heap);
                    ##exp#2 := e#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#2, TSeq(TChar), $Heap);
                    assume M0.__default.Loc#canCall(cmd#0, deps#0, e#3);
                    ##p#1 := M0.__default.Loc(cmd#0, deps#0, e#3);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1, Tclass.M0.Path(), $Heap);
                    ##st#2 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(M0.__default.Loc(cmd#0, deps#0, e#3), st#0);
                }
            }
        }

        // End Comprehension WF check
        assume {:id "id157"} M0.__default.Pre(cmd#0, deps#0, exps#0, st#0)
           == (forall e#4: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
            $Is(e#4, TSeq(TChar))
               ==> 
              Set#IsMember(exps#0, $Box(e#4))
               ==> 
              Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#4))
               ==> M0.__default.GetSt(M0.__default.Loc(cmd#0, deps#0, e#4), st#0)
                 == M0.__default.Oracle(M0.__default.Loc(cmd#0, deps#0, e#4), st#0));
        assume (forall e#4: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
          $Is(e#4, TSeq(TChar))
             ==> 
            Set#IsMember(exps#0, $Box(e#4))
             ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#4)
               && M0.__default.DomSt#canCall(st#0)
               && (Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#4))
                 ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#4)
                   && M0.__default.GetSt#canCall(M0.__default.Loc(cmd#0, deps#0, e#4), st#0)
                   && 
                  M0.__default.Loc#canCall(cmd#0, deps#0, e#4)
                   && M0.__default.Oracle#canCall(M0.__default.Loc(cmd#0, deps#0, e#4), st#0)));
        // CheckWellformedWithResult: any expression
        assume $Is(M0.__default.Pre(cmd#0, deps#0, exps#0, st#0), TBool);
        return;

        assume false;
    }
}



// function declaration for M0._default.OneToOne
function M0.__default.OneToOne(cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set) : bool
uses {
// definition axiom for M0.__default.OneToOne (revealed)
axiom {:id "id158"} 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set :: 
    { M0.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0) } 
    M0.__default.OneToOne#canCall(cmd#0, deps#0, exps#0, paths#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(paths#0, TSet(Tclass.M0.Path())))
       ==> (forall e#0: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(exps#0, $Box(e#0))
             ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#0))
         && M0.__default.OneToOne(cmd#0, deps#0, exps#0, paths#0)
           == Set#Equal(paths#0, 
            Set#FromBoogieMap((lambda $y#0: Box :: 
                (exists e#0: Seq :: 
                  { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
                  $Is(e#0, TSeq(TChar))
                     && Set#IsMember(exps#0, $Box(e#0))
                     && $y#0 == M0.__default.Loc(cmd#0, deps#0, e#0))))));
// definition axiom for M0.__default.OneToOne for all literals (revealed)
axiom {:id "id159"} 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set :: 
    {:weight 3} { M0.__default.OneToOne(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(paths#0)) } 
    M0.__default.OneToOne#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(paths#0))
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $Is(paths#0, TSet(Tclass.M0.Path())))
       ==> (forall e#1: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#1))
             ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1))
         && M0.__default.OneToOne(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(paths#0))
           == Set#Equal(paths#0, 
            Set#FromBoogieMap((lambda $y#1: Box :: 
                (exists e#1: Seq :: 
                  { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
                  $Is(e#1, TSeq(TChar))
                     && Set#IsMember(Lit(exps#0), $Box(e#1))
                     && $y#1 == M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))))));
}

function M0.__default.OneToOne#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set) : bool;

function M0.__default.OneToOne#requires(Seq, Set, Set, Set) : bool;

// #requires axiom for M0.__default.OneToOne
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, paths#0: Set :: 
  { M0.__default.OneToOne#requires(cmd#0, deps#0, exps#0, paths#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M0.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $Is(paths#0, TSet(Tclass.M0.Path()))
     ==> M0.__default.OneToOne#requires(cmd#0, deps#0, exps#0, paths#0) == true);

procedure {:verboseName "M0.OneToOne (well-formedness)"} CheckWellformed$$M0.__default.OneToOne(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M0.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    paths#0: Set where $Is(paths#0, TSet(Tclass.M0.Path())));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.Post
function M0.__default.Post($reveal: bool, cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box) : bool
uses {
// definition axiom for M0.__default.Post (revealed)
axiom {:id "id161"} 2 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
    { M0.__default.Post(true, cmd#0, deps#0, exps#0, st#0) } 
    M0.__default.Post#canCall(cmd#0, deps#0, exps#0, st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State()))
       ==> (forall e#0: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> (Set#IsMember(exps#0, $Box(e#0))
                 ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#0) && M0.__default.DomSt#canCall(st#0))
               && (
                (Set#IsMember(exps#0, $Box(e#0))
                 ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0)))
                 ==> 
                Set#IsMember(exps#0, $Box(e#0))
                 ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && M0.__default.GetSt#canCall(M0.__default.Loc(cmd#0, deps#0, e#0), st#0)
                   && 
                  M0.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && M0.__default.Oracle#canCall(M0.__default.Loc(cmd#0, deps#0, e#0), st#0)))
         && M0.__default.Post(true, cmd#0, deps#0, exps#0, st#0)
           == (forall e#0: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> (Set#IsMember(exps#0, $Box(e#0))
                   ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0)))
                 && (Set#IsMember(exps#0, $Box(e#0))
                   ==> M0.__default.GetSt(M0.__default.Loc(cmd#0, deps#0, e#0), st#0)
                     == M0.__default.Oracle(M0.__default.Loc(cmd#0, deps#0, e#0), st#0))));
// definition axiom for M0.__default.Post for decreasing-related literals (revealed)
axiom {:id "id162"} 2 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
    {:weight 3} { M0.__default.Post(true, Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0) } 
    M0.__default.Post#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State()))
       ==> (forall e#1: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> (Set#IsMember(Lit(exps#0), $Box(e#1))
                 ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M0.__default.DomSt#canCall(st#0))
               && (
                (Set#IsMember(Lit(exps#0), $Box(e#1))
                 ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))
                 ==> 
                Set#IsMember(Lit(exps#0), $Box(e#1))
                 ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M0.__default.GetSt#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                   && 
                  M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && M0.__default.Oracle#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)))
         && M0.__default.Post(true, Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0)
           == (forall e#1: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> (Set#IsMember(Lit(exps#0), $Box(e#1))
                   ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))
                 && (Set#IsMember(Lit(exps#0), $Box(e#1))
                   ==> M0.__default.GetSt(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                     == M0.__default.Oracle(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0))));
// definition axiom for M0.__default.Post for all literals (revealed)
axiom {:id "id163"} 2 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
    {:weight 3} { M0.__default.Post(true, Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0)) } 
    M0.__default.Post#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State()))
       ==> (forall e#2: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> (Set#IsMember(Lit(exps#0), $Box(e#2))
                 ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M0.__default.DomSt#canCall(Lit(st#0)))
               && (
                (Set#IsMember(Lit(exps#0), $Box(e#2))
                 ==> Set#IsMember(M0.__default.DomSt(Lit(st#0)), M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2)))
                 ==> 
                Set#IsMember(Lit(exps#0), $Box(e#2))
                 ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M0.__default.GetSt#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                   && 
                  M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && M0.__default.Oracle#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))))
         && M0.__default.Post(true, Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0))
           == (forall e#2: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
            $Is(e#2, TSeq(TChar))
               ==> (Set#IsMember(Lit(exps#0), $Box(e#2))
                   ==> Set#IsMember(M0.__default.DomSt(Lit(st#0)), M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2)))
                 && (Set#IsMember(Lit(exps#0), $Box(e#2))
                   ==> M0.__default.GetSt(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                     == M0.__default.Oracle(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0)))));
}

function M0.__default.Post#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box) : bool;

function M0.__default.Post#requires(Seq, Set, Set, Box) : bool;

// #requires axiom for M0.__default.Post
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box :: 
  { M0.__default.Post#requires(cmd#0, deps#0, exps#0, st#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M0.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $IsBox(st#0, Tclass.M0.State())
     ==> M0.__default.Post#requires(cmd#0, deps#0, exps#0, st#0) == true);

procedure {:verboseName "M0.Post (well-formedness)"} CheckWellformed$$M0.__default.Post(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M0.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Post (well-formedness)"} CheckWellformed$$M0.__default.Post(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var e#3: Seq;
  var ##cmd#0: Seq;
  var ##deps#0: Set;
  var ##exp#0: Seq;
  var ##st#0: Box;
  var ##p#0: Box;
  var ##cmd#1: Seq;
  var ##deps#1: Set;
  var ##exp#1: Seq;
  var ##st#1: Box;
  var ##p#1: Box;
  var ##cmd#2: Seq;
  var ##deps#2: Set;
  var ##exp#2: Seq;
  var ##st#2: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc e#3;
        if ($Is(e#3, TSeq(TChar)) && $IsAlloc(e#3, TSeq(TChar), $Heap))
        {
            if (Set#IsMember(exps#0, $Box(e#3)))
            {
                ##cmd#0 := cmd#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0, TSeq(TChar), $Heap);
                ##deps#0 := deps#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0, TSet(Tclass.M0.Path()), $Heap);
                ##exp#0 := e#3;
                // assume allocatedness for argument to function
                assume $IsAlloc(##exp#0, TSeq(TChar), $Heap);
                assume M0.__default.Loc#canCall(cmd#0, deps#0, e#3);
                ##st#0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                if (Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#3)))
                {
                    ##cmd#1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1, TSeq(TChar), $Heap);
                    ##deps#1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1, TSet(Tclass.M0.Path()), $Heap);
                    ##exp#1 := e#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#1, TSeq(TChar), $Heap);
                    assume M0.__default.Loc#canCall(cmd#0, deps#0, e#3);
                    ##p#0 := M0.__default.Loc(cmd#0, deps#0, e#3);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0, Tclass.M0.Path(), $Heap);
                    ##st#1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
                    assert {:id "id164"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1), ##p#0);
                    assume Set#IsMember(M0.__default.DomSt(##st#1), ##p#0);
                    assume M0.__default.GetSt#canCall(M0.__default.Loc(cmd#0, deps#0, e#3), st#0);
                    ##cmd#2 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#2, TSeq(TChar), $Heap);
                    ##deps#2 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#2, TSet(Tclass.M0.Path()), $Heap);
                    ##exp#2 := e#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#2, TSeq(TChar), $Heap);
                    assume M0.__default.Loc#canCall(cmd#0, deps#0, e#3);
                    ##p#1 := M0.__default.Loc(cmd#0, deps#0, e#3);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1, Tclass.M0.Path(), $Heap);
                    ##st#2 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(M0.__default.Loc(cmd#0, deps#0, e#3), st#0);
                }
            }
        }

        // End Comprehension WF check
        assume {:id "id165"} M0.__default.Post(reveal_M0._default.Post, cmd#0, deps#0, exps#0, st#0)
           == (forall e#4: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
            $Is(e#4, TSeq(TChar))
               ==> (Set#IsMember(exps#0, $Box(e#4))
                   ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#4)))
                 && (Set#IsMember(exps#0, $Box(e#4))
                   ==> M0.__default.GetSt(M0.__default.Loc(cmd#0, deps#0, e#4), st#0)
                     == M0.__default.Oracle(M0.__default.Loc(cmd#0, deps#0, e#4), st#0)));
        assume (forall e#4: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
          $Is(e#4, TSeq(TChar))
             ==> (Set#IsMember(exps#0, $Box(e#4))
                 ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#4) && M0.__default.DomSt#canCall(st#0))
               && (
                (Set#IsMember(exps#0, $Box(e#4))
                 ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#4)))
                 ==> 
                Set#IsMember(exps#0, $Box(e#4))
                 ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#4)
                   && M0.__default.GetSt#canCall(M0.__default.Loc(cmd#0, deps#0, e#4), st#0)
                   && 
                  M0.__default.Loc#canCall(cmd#0, deps#0, e#4)
                   && M0.__default.Oracle#canCall(M0.__default.Loc(cmd#0, deps#0, e#4), st#0)));
        // CheckWellformedWithResult: any expression
        assume $Is(M0.__default.Post(reveal_M0._default.Post, cmd#0, deps#0, exps#0, st#0), TBool);
        return;

        assume false;
    }
}



// function declaration for M0._default.ExtendsLimit
function M0.__default.ExtendsLimit(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box, st'#0: Box) : bool
uses {
// definition axiom for M0.__default.ExtendsLimit (revealed)
axiom {:id "id166"} 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box, st'#0: Box :: 
    { M0.__default.ExtendsLimit(cmd#0, deps#0, exps#0, st#0, st'#0) } 
    M0.__default.ExtendsLimit#canCall(cmd#0, deps#0, exps#0, st#0, st'#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(st'#0, Tclass.M0.State()))
       ==> M0.__default.DomSt#canCall(st'#0)
         && 
        M0.__default.DomSt#canCall(st#0)
         && (forall e#0: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(exps#0, $Box(e#0))
             ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#0))
         && M0.__default.ExtendsLimit(cmd#0, deps#0, exps#0, st#0, st'#0)
           == Set#Equal(M0.__default.DomSt(st'#0), 
            Set#Union(M0.__default.DomSt(st#0), 
              Set#FromBoogieMap((lambda $y#0: Box :: 
                  (exists e#0: Seq :: 
                    { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
                    $Is(e#0, TSeq(TChar))
                       && Set#IsMember(exps#0, $Box(e#0))
                       && $y#0 == M0.__default.Loc(cmd#0, deps#0, e#0)))))));
// definition axiom for M0.__default.ExtendsLimit for decreasing-related literals (revealed)
axiom {:id "id167"} 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box, st'#0: Box :: 
    {:weight 3} { M0.__default.ExtendsLimit(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0, st'#0) } 
    M0.__default.ExtendsLimit#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0, st'#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(st'#0, Tclass.M0.State()))
       ==> M0.__default.DomSt#canCall(st'#0)
         && 
        M0.__default.DomSt#canCall(st#0)
         && (forall e#1: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#1))
             ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1))
         && M0.__default.ExtendsLimit(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st#0, st'#0)
           == Set#Equal(M0.__default.DomSt(st'#0), 
            Set#Union(M0.__default.DomSt(st#0), 
              Set#FromBoogieMap((lambda $y#1: Box :: 
                  (exists e#1: Seq :: 
                    { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
                    $Is(e#1, TSeq(TChar))
                       && Set#IsMember(Lit(exps#0), $Box(e#1))
                       && $y#1 == M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))))));
// definition axiom for M0.__default.ExtendsLimit for all literals (revealed)
axiom {:id "id168"} 1 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box, st'#0: Box :: 
    {:weight 3} { M0.__default.ExtendsLimit(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0), Lit(st'#0)) } 
    M0.__default.ExtendsLimit#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0), Lit(st'#0))
         || (1 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(st'#0, Tclass.M0.State()))
       ==> M0.__default.DomSt#canCall(Lit(st'#0))
         && 
        M0.__default.DomSt#canCall(Lit(st#0))
         && (forall e#2: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#2))
             ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2))
         && M0.__default.ExtendsLimit(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(st#0), Lit(st'#0))
           == Set#Equal(M0.__default.DomSt(Lit(st'#0)), 
            Set#Union(M0.__default.DomSt(Lit(st#0)), 
              Set#FromBoogieMap((lambda $y#2: Box :: 
                  (exists e#2: Seq :: 
                    { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
                    $Is(e#2, TSeq(TChar))
                       && Set#IsMember(Lit(exps#0), $Box(e#2))
                       && $y#2 == M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2)))))));
}

function M0.__default.ExtendsLimit#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box, st'#0: Box) : bool;

function M0.__default.ExtendsLimit#requires(Seq, Set, Set, Box, Box) : bool;

// #requires axiom for M0.__default.ExtendsLimit
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, st#0: Box, st'#0: Box :: 
  { M0.__default.ExtendsLimit#requires(cmd#0, deps#0, exps#0, st#0, st'#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M0.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $IsBox(st#0, Tclass.M0.State())
       && $IsBox(st'#0, Tclass.M0.State())
     ==> M0.__default.ExtendsLimit#requires(cmd#0, deps#0, exps#0, st#0, st'#0) == true);

procedure {:verboseName "M0.ExtendsLimit (well-formedness)"} CheckWellformed$$M0.__default.ExtendsLimit(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M0.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()), 
    st'#0: Box where $IsBox(st'#0, Tclass.M0.State()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.Oracle
function M0.__default.Oracle(p#0: Box, st#0: Box) : Box
uses {
// consequence axiom for M0.__default.Oracle
axiom 0 <= $FunctionContextHeight
   ==> (forall p#0: Box, st#0: Box :: 
    { M0.__default.Oracle(p#0, st#0) } 
    M0.__default.Oracle#canCall(p#0, st#0)
         || (0 < $FunctionContextHeight
           && 
          $IsBox(p#0, Tclass.M0.Path())
           && $IsBox(st#0, Tclass.M0.State()))
       ==> $IsBox(M0.__default.Oracle(p#0, st#0), Tclass.M0.Artifact()));
// alloc consequence axiom for M0.__default.Oracle
axiom 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, p#0: Box, st#0: Box :: 
    { $IsAllocBox(M0.__default.Oracle(p#0, st#0), Tclass.M0.Artifact(), $Heap) } 
    (M0.__default.Oracle#canCall(p#0, st#0)
           || (0 < $FunctionContextHeight
             && 
            $IsBox(p#0, Tclass.M0.Path())
             && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap)
             && 
            $IsBox(st#0, Tclass.M0.State())
             && $IsAllocBox(st#0, Tclass.M0.State(), $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAllocBox(M0.__default.Oracle(p#0, st#0), Tclass.M0.Artifact(), $Heap));
}

function M0.__default.Oracle#canCall(p#0: Box, st#0: Box) : bool;

function M0.__default.Oracle#requires(Box, Box) : bool;

// #requires axiom for M0.__default.Oracle
axiom (forall p#0: Box, st#0: Box :: 
  { M0.__default.Oracle#requires(p#0, st#0) } 
  $IsBox(p#0, Tclass.M0.Path()) && $IsBox(st#0, Tclass.M0.State())
     ==> M0.__default.Oracle#requires(p#0, st#0) == true);

procedure {:verboseName "M0.Oracle (well-formedness)"} CheckWellformed$$M0.__default.Oracle(p#0: Box where $IsBox(p#0, Tclass.M0.Path()), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.OracleProperty (well-formedness)"} CheckWellFormed$$M0.__default.OracleProperty(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    st0#0: Box
       where $IsBox(st0#0, Tclass.M0.State()) && $IsAllocBox(st0#0, Tclass.M0.State(), $Heap), 
    st1#0: Box
       where $IsBox(st1#0, Tclass.M0.State()) && $IsAllocBox(st1#0, Tclass.M0.State(), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.OracleProperty (call)"} Call$$M0.__default.OracleProperty(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    st0#0: Box
       where $IsBox(st0#0, Tclass.M0.State()) && $IsAllocBox(st0#0, Tclass.M0.State(), $Heap), 
    st1#0: Box
       where $IsBox(st1#0, Tclass.M0.State()) && $IsAllocBox(st1#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id172"} M0.__default.Extends(reveal_M0._default.Extends, st0#0, st1#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Oracle#canCall(p#0, st0#0)
     && M0.__default.Oracle#canCall(p#0, st1#0);
  ensures {:id "id173"} M0.__default.Oracle(p#0, st0#0) == M0.__default.Oracle(p#0, st1#0);
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for M0._default.Extends
function M0.__default.Extends($reveal: bool, st#0: Box, st'#0: Box) : bool
uses {
// definition axiom for M0.__default.Extends (revealed)
axiom {:id "id174"} 2 <= $FunctionContextHeight
   ==> (forall st#0: Box, st'#0: Box :: 
    { M0.__default.Extends(true, st#0, st'#0) } 
    M0.__default.Extends#canCall(st#0, st'#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(st#0, Tclass.M0.State())
           && $IsBox(st'#0, Tclass.M0.State()))
       ==> M0.__default.DomSt#canCall(st#0)
         && M0.__default.DomSt#canCall(st'#0)
         && (Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0))
           ==> (forall p#0: Box :: 
              { M0.__default.GetSt(p#0, st#0) } 
                { M0.__default.GetSt(p#0, st'#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
              $IsBox(p#0, Tclass.M0.Path())
                 ==> M0.__default.DomSt#canCall(st#0)
                   && (Set#IsMember(M0.__default.DomSt(st#0), p#0)
                     ==> M0.__default.GetSt#canCall(p#0, st'#0) && M0.__default.GetSt#canCall(p#0, st#0)))
             && ((forall p#0: Box :: 
                { M0.__default.GetSt(p#0, st#0) } 
                  { M0.__default.GetSt(p#0, st'#0) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
                $IsBox(p#0, Tclass.M0.Path())
                   ==> 
                  Set#IsMember(M0.__default.DomSt(st#0), p#0)
                   ==> M0.__default.GetSt(p#0, st'#0) == M0.__default.GetSt(p#0, st#0))
               ==> (forall p#1: Box :: 
                { M0.__default.Oracle(p#1, st#0) } 
                  { M0.__default.GetSt(p#1, st'#0) } 
                  { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
                $IsBox(p#1, Tclass.M0.Path())
                   ==> M0.__default.DomSt#canCall(st#0)
                     && (!Set#IsMember(M0.__default.DomSt(st#0), p#1)
                       ==> M0.__default.DomSt#canCall(st'#0)
                         && (Set#IsMember(M0.__default.DomSt(st'#0), p#1)
                           ==> M0.__default.GetSt#canCall(p#1, st'#0) && M0.__default.Oracle#canCall(p#1, st#0))))))
         && M0.__default.Extends(true, st#0, st'#0)
           == (
            Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0))
             && (forall p#0: Box :: 
              { M0.__default.GetSt(p#0, st#0) } 
                { M0.__default.GetSt(p#0, st'#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
              $IsBox(p#0, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(st#0), p#0)
                 ==> M0.__default.GetSt(p#0, st'#0) == M0.__default.GetSt(p#0, st#0))
             && (forall p#1: Box :: 
              { M0.__default.Oracle(p#1, st#0) } 
                { M0.__default.GetSt(p#1, st'#0) } 
                { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
              $IsBox(p#1, Tclass.M0.Path())
                 ==> 
                !Set#IsMember(M0.__default.DomSt(st#0), p#1)
                   && Set#IsMember(M0.__default.DomSt(st'#0), p#1)
                 ==> M0.__default.GetSt(p#1, st'#0) == M0.__default.Oracle(p#1, st#0))));
// definition axiom for M0.__default.Extends for all literals (revealed)
axiom {:id "id175"} 2 <= $FunctionContextHeight
   ==> (forall st#0: Box, st'#0: Box :: 
    {:weight 3} { M0.__default.Extends(true, Lit(st#0), Lit(st'#0)) } 
    M0.__default.Extends#canCall(Lit(st#0), Lit(st'#0))
         || (2 < $FunctionContextHeight
           && 
          $IsBox(st#0, Tclass.M0.State())
           && $IsBox(st'#0, Tclass.M0.State()))
       ==> M0.__default.DomSt#canCall(Lit(st#0))
         && M0.__default.DomSt#canCall(Lit(st'#0))
         && (Set#Subset(M0.__default.DomSt(Lit(st#0)), M0.__default.DomSt(Lit(st'#0)))
           ==> (forall p#2: Box :: 
              { M0.__default.GetSt(p#2, st#0) } 
                { M0.__default.GetSt(p#2, st'#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
              $IsBox(p#2, Tclass.M0.Path())
                 ==> M0.__default.DomSt#canCall(Lit(st#0))
                   && (Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#2)
                     ==> M0.__default.GetSt#canCall(p#2, Lit(st'#0))
                       && M0.__default.GetSt#canCall(p#2, Lit(st#0))))
             && ((forall p#2: Box :: 
                { M0.__default.GetSt(p#2, st#0) } 
                  { M0.__default.GetSt(p#2, st'#0) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
                $IsBox(p#2, Tclass.M0.Path())
                   ==> 
                  Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#2)
                   ==> M0.__default.GetSt(p#2, Lit(st'#0)) == M0.__default.GetSt(p#2, Lit(st#0)))
               ==> (forall p#3: Box :: 
                { M0.__default.Oracle(p#3, st#0) } 
                  { M0.__default.GetSt(p#3, st'#0) } 
                  { Set#IsMember(M0.__default.DomSt(st'#0), p#3) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#3) } 
                $IsBox(p#3, Tclass.M0.Path())
                   ==> M0.__default.DomSt#canCall(Lit(st#0))
                     && (!Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#3)
                       ==> M0.__default.DomSt#canCall(Lit(st'#0))
                         && (Set#IsMember(M0.__default.DomSt(Lit(st'#0)), p#3)
                           ==> M0.__default.GetSt#canCall(p#3, Lit(st'#0))
                             && M0.__default.Oracle#canCall(p#3, Lit(st#0)))))))
         && M0.__default.Extends(true, Lit(st#0), Lit(st'#0))
           == (
            Set#Subset(M0.__default.DomSt(Lit(st#0)), M0.__default.DomSt(Lit(st'#0)))
             && (forall p#2: Box :: 
              { M0.__default.GetSt(p#2, st#0) } 
                { M0.__default.GetSt(p#2, st'#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
              $IsBox(p#2, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#2)
                 ==> M0.__default.GetSt(p#2, Lit(st'#0)) == M0.__default.GetSt(p#2, Lit(st#0)))
             && (forall p#3: Box :: 
              { M0.__default.Oracle(p#3, st#0) } 
                { M0.__default.GetSt(p#3, st'#0) } 
                { Set#IsMember(M0.__default.DomSt(st'#0), p#3) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#3) } 
              $IsBox(p#3, Tclass.M0.Path())
                 ==> 
                !Set#IsMember(M0.__default.DomSt(Lit(st#0)), p#3)
                   && Set#IsMember(M0.__default.DomSt(Lit(st'#0)), p#3)
                 ==> M0.__default.GetSt(p#3, Lit(st'#0)) == M0.__default.Oracle(p#3, Lit(st#0)))));
}

function M0.__default.Extends#canCall(st#0: Box, st'#0: Box) : bool;

function M0.__default.Extends#requires(Box, Box) : bool;

// #requires axiom for M0.__default.Extends
axiom (forall st#0: Box, st'#0: Box :: 
  { M0.__default.Extends#requires(st#0, st'#0) } 
  $IsBox(st#0, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
     ==> M0.__default.Extends#requires(st#0, st'#0) == true);

procedure {:verboseName "M0.Extends (well-formedness)"} CheckWellformed$$M0.__default.Extends(st#0: Box where $IsBox(st#0, Tclass.M0.State()), 
    st'#0: Box where $IsBox(st'#0, Tclass.M0.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Extends (well-formedness)"} CheckWellformed$$M0.__default.Extends(st#0: Box, st'#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##st#1: Box;
  var p#4: Box;
  var ##st#2: Box;
  var ##p#0: Box;
  var ##st#3: Box;
  var ##p#1: Box;
  var ##st#4: Box;
  var p#5: Box;
  var ##st#5: Box;
  var ##st#6: Box;
  var ##p#2: Box;
  var ##st#7: Box;
  var ##p#3: Box;
  var ##st#8: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(st#0);
        ##st#1 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(st'#0);
        if (Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0)))
        {
            // Begin Comprehension WF check
            havoc p#4;
            if ($IsBox(p#4, Tclass.M0.Path()) && $IsAllocBox(p#4, Tclass.M0.Path(), $Heap))
            {
                ##st#2 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                if (Set#IsMember(M0.__default.DomSt(st#0), p#4))
                {
                    ##p#0 := p#4;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0, Tclass.M0.Path(), $Heap);
                    ##st#3 := st'#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
                    assert {:id "id176"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#3), ##p#0);
                    assume Set#IsMember(M0.__default.DomSt(##st#3), ##p#0);
                    assume M0.__default.GetSt#canCall(p#4, st'#0);
                    ##p#1 := p#4;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1, Tclass.M0.Path(), $Heap);
                    ##st#4 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
                    assert {:id "id177"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#4), ##p#1);
                    assume Set#IsMember(M0.__default.DomSt(##st#4), ##p#1);
                    assume M0.__default.GetSt#canCall(p#4, st#0);
                }
            }

            // End Comprehension WF check
        }

        if (Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0))
           && (forall p#6: Box :: 
            { M0.__default.GetSt(p#6, st#0) } 
              { M0.__default.GetSt(p#6, st'#0) } 
              { Set#IsMember(M0.__default.DomSt(st#0), p#6) } 
            $IsBox(p#6, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#0), p#6)
               ==> M0.__default.GetSt(p#6, st'#0) == M0.__default.GetSt(p#6, st#0)))
        {
            // Begin Comprehension WF check
            havoc p#5;
            if ($IsBox(p#5, Tclass.M0.Path()) && $IsAllocBox(p#5, Tclass.M0.Path(), $Heap))
            {
                ##st#5 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                if (!Set#IsMember(M0.__default.DomSt(st#0), p#5))
                {
                    ##st#6 := st'#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st'#0);
                }

                if (!Set#IsMember(M0.__default.DomSt(st#0), p#5)
                   && Set#IsMember(M0.__default.DomSt(st'#0), p#5))
                {
                    ##p#2 := p#5;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#2, Tclass.M0.Path(), $Heap);
                    ##st#7 := st'#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
                    assert {:id "id178"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#7), ##p#2);
                    assume Set#IsMember(M0.__default.DomSt(##st#7), ##p#2);
                    assume M0.__default.GetSt#canCall(p#5, st'#0);
                    ##p#3 := p#5;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#3, Tclass.M0.Path(), $Heap);
                    ##st#8 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#8, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#5, st#0);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id179"} M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)
           == (
            Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0))
             && (forall p#6: Box :: 
              { M0.__default.GetSt(p#6, st#0) } 
                { M0.__default.GetSt(p#6, st'#0) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#6) } 
              $IsBox(p#6, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(st#0), p#6)
                 ==> M0.__default.GetSt(p#6, st'#0) == M0.__default.GetSt(p#6, st#0))
             && (forall p#7: Box :: 
              { M0.__default.Oracle(p#7, st#0) } 
                { M0.__default.GetSt(p#7, st'#0) } 
                { Set#IsMember(M0.__default.DomSt(st'#0), p#7) } 
                { Set#IsMember(M0.__default.DomSt(st#0), p#7) } 
              $IsBox(p#7, Tclass.M0.Path())
                 ==> 
                !Set#IsMember(M0.__default.DomSt(st#0), p#7)
                   && Set#IsMember(M0.__default.DomSt(st'#0), p#7)
                 ==> M0.__default.GetSt(p#7, st'#0) == M0.__default.Oracle(p#7, st#0)));
        assume M0.__default.DomSt#canCall(st#0)
           && M0.__default.DomSt#canCall(st'#0)
           && (Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt(st'#0))
             ==> (forall p#6: Box :: 
                { M0.__default.GetSt(p#6, st#0) } 
                  { M0.__default.GetSt(p#6, st'#0) } 
                  { Set#IsMember(M0.__default.DomSt(st#0), p#6) } 
                $IsBox(p#6, Tclass.M0.Path())
                   ==> M0.__default.DomSt#canCall(st#0)
                     && (Set#IsMember(M0.__default.DomSt(st#0), p#6)
                       ==> M0.__default.GetSt#canCall(p#6, st'#0) && M0.__default.GetSt#canCall(p#6, st#0)))
               && ((forall p#6: Box :: 
                  { M0.__default.GetSt(p#6, st#0) } 
                    { M0.__default.GetSt(p#6, st'#0) } 
                    { Set#IsMember(M0.__default.DomSt(st#0), p#6) } 
                  $IsBox(p#6, Tclass.M0.Path())
                     ==> 
                    Set#IsMember(M0.__default.DomSt(st#0), p#6)
                     ==> M0.__default.GetSt(p#6, st'#0) == M0.__default.GetSt(p#6, st#0))
                 ==> (forall p#7: Box :: 
                  { M0.__default.Oracle(p#7, st#0) } 
                    { M0.__default.GetSt(p#7, st'#0) } 
                    { Set#IsMember(M0.__default.DomSt(st'#0), p#7) } 
                    { Set#IsMember(M0.__default.DomSt(st#0), p#7) } 
                  $IsBox(p#7, Tclass.M0.Path())
                     ==> M0.__default.DomSt#canCall(st#0)
                       && (!Set#IsMember(M0.__default.DomSt(st#0), p#7)
                         ==> M0.__default.DomSt#canCall(st'#0)
                           && (Set#IsMember(M0.__default.DomSt(st'#0), p#7)
                             ==> M0.__default.GetSt#canCall(p#7, st'#0) && M0.__default.Oracle#canCall(p#7, st#0))))));
        // CheckWellformedWithResult: any expression
        assume $Is(M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0), TBool);
        return;

        assume false;
    }
}



procedure {:verboseName "M0.Lemma_ExtendsTransitive (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__ExtendsTransitive(st0#0: Box
       where $IsBox(st0#0, Tclass.M0.State()) && $IsAllocBox(st0#0, Tclass.M0.State(), $Heap), 
    st1#0: Box
       where $IsBox(st1#0, Tclass.M0.State()) && $IsAllocBox(st1#0, Tclass.M0.State(), $Heap), 
    st2#0: Box
       where $IsBox(st2#0, Tclass.M0.State()) && $IsAllocBox(st2#0, Tclass.M0.State(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.Lemma_ExtendsTransitive (call)"} Call$$M0.__default.Lemma__ExtendsTransitive(st0#0: Box
       where $IsBox(st0#0, Tclass.M0.State()) && $IsAllocBox(st0#0, Tclass.M0.State(), $Heap), 
    st1#0: Box
       where $IsBox(st1#0, Tclass.M0.State()) && $IsAllocBox(st1#0, Tclass.M0.State(), $Heap), 
    st2#0: Box
       where $IsBox(st2#0, Tclass.M0.State()) && $IsAllocBox(st2#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id183"} M0.__default.Extends(reveal_M0._default.Extends, st0#0, st1#0);
  requires {:id "id184"} M0.__default.Extends(reveal_M0._default.Extends, st1#0, st2#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Extends#canCall(st0#0, st2#0);
  ensures {:id "id185"} M0.__default.Extends(reveal_M0._default.Extends, st0#0, st2#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_ExtendsTransitive (correctness)"} Impl$$M0.__default.Lemma__ExtendsTransitive(st0#0: Box
       where $IsBox(st0#0, Tclass.M0.State()) && $IsAllocBox(st0#0, Tclass.M0.State(), $Heap), 
    st1#0: Box
       where $IsBox(st1#0, Tclass.M0.State()) && $IsAllocBox(st1#0, Tclass.M0.State(), $Heap), 
    st2#0: Box
       where $IsBox(st2#0, Tclass.M0.State()) && $IsAllocBox(st2#0, Tclass.M0.State(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id186"} M0.__default.Extends(reveal_M0._default.Extends, st0#0, st1#0);
  requires {:id "id187"} M0.__default.Extends(reveal_M0._default.Extends, st1#0, st2#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Extends#canCall(st0#0, st2#0);
  ensures {:id "id188"} M0.__default.Extends(reveal_M0._default.Extends, st0#0, st2#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_ExtendsTransitive (correctness)"} Impl$$M0.__default.Lemma__ExtendsTransitive(st0#0: Box, st1#0: Box, st2#0: Box) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var p#0_0: Box;
  var p##0_0: Box;
  var st0##0_0: Box;
  var st1##0_0: Box;
  var $initHeapForallStmt#0_0: Heap;

    // AddMethodImpl: Lemma_ExtendsTransitive, Impl$$M0.__default.Lemma__ExtendsTransitive
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(205,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(205,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id189"} Call$$M0.__default.reveal__Extends();
    // TrCallStmt: After ProcessCallStmt
    // ----- forall statement (call) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(206,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc p#0_0;
        assume $IsBox(p#0_0, Tclass.M0.Path());
        assume true;
        assume true;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(206,30)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        p##0_0 := p#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st0##0_0 := st0#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st1##0_0 := st1#0;
        call {:id "id190"} Call$$M0.__default.OracleProperty(p##0_0, st0##0_0, st1##0_0);
        // TrCallStmt: After ProcessCallStmt
        assume false;
    }
    else
    {
        $initHeapForallStmt#0_0 := $Heap;
        havoc $Heap;
        assume $initHeapForallStmt#0_0 == $Heap;
        assume (forall p#0_1: Box :: 
          { M0.__default.Oracle(p#0_1, st1#0) } { M0.__default.Oracle(p#0_1, st0#0) } 
          $IsBox(p#0_1, Tclass.M0.Path()) && Lit(true)
             ==> M0.__default.Oracle(p#0_1, st0#0) == M0.__default.Oracle(p#0_1, st1#0));
    }
}



// function declaration for M0._default.execC
function M0.__default.execC(cmd#0: Seq, deps#0: Set, exps#0: Set, stC#0: Box) : DatatypeType
uses {
// consequence axiom for M0.__default.execC
axiom 3 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, stC#0: Box :: 
    { M0.__default.execC(cmd#0, deps#0, exps#0, stC#0) } 
    M0.__default.execC#canCall(cmd#0, deps#0, exps#0, stC#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(stC#0, Tclass.M0.State()))
       ==> $Is(M0.__default.execC(cmd#0, deps#0, exps#0, stC#0), 
        Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State())));
// definition axiom for M0.__default.execC (revealed)
axiom {:id "id191"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, stC#0: Box :: 
    { M0.__default.execC(cmd#0, deps#0, exps#0, stC#0) } 
    M0.__default.execC#canCall(cmd#0, deps#0, exps#0, stC#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(stC#0, Tclass.M0.State()))
       ==> (forall e#0: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(exps#0, $Box(e#0))
             ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#0)
               && M0.__default.Hash#canCall(M0.__default.Loc(cmd#0, deps#0, e#0))
               && M0.__default.DomC#canCall(stC#0))
         && ((forall e#0: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
            $Is(e#0, TSeq(TChar)) && Set#IsMember(exps#0, $Box(e#0))
               ==> Set#IsMember(M0.__default.DomC(stC#0), 
                M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0))))
           ==> (forall e#1: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(exps#0, $Box(e#1))
               ==> M0.__default.Loc#canCall(cmd#0, deps#0, e#1)))
         && (!(forall e#0: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
            $Is(e#0, TSeq(TChar)) && Set#IsMember(exps#0, $Box(e#0))
               ==> Set#IsMember(M0.__default.DomC(stC#0), 
                M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0))))
           ==> M0.__default.exec#canCall(cmd#0, deps#0, exps#0, stC#0)
             && (var result#0 := M0.__default.exec(cmd#0, deps#0, exps#0, stC#0); 
              M0.Tuple.Pair_q(result#0)
                 && M0.Tuple.Pair_q(result#0)
                 && (var st'#0 := M0.Tuple.snd(result#0); 
                  M0.__default.UpdateC#canCall(cmd#0, deps#0, exps#0, st'#0))))
         && M0.__default.execC(cmd#0, deps#0, exps#0, stC#0)
           == (if (forall e#0: Seq :: 
              { M0.__default.Loc(cmd#0, deps#0, e#0) } { Set#IsMember(exps#0, $Box(e#0)) } 
              $Is(e#0, TSeq(TChar)) && Set#IsMember(exps#0, $Box(e#0))
                 ==> Set#IsMember(M0.__default.DomC(stC#0), 
                  M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0))))
             then (var paths#0 := Set#FromBoogieMap((lambda $y#0: Box :: 
                    (exists e#1: Seq :: 
                      { M0.__default.Loc(cmd#0, deps#0, e#1) } { Set#IsMember(exps#0, $Box(e#1)) } 
                      $Is(e#1, TSeq(TChar))
                         && Set#IsMember(exps#0, $Box(e#1))
                         && $y#0 == M0.__default.Loc(cmd#0, deps#0, e#1)))); 
              #M0.Tuple.Pair($Box(paths#0), stC#0))
             else (var result#0 := M0.__default.exec(cmd#0, deps#0, exps#0, stC#0); 
              (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): Set, M0.Tuple.snd(result#0); 
                (var stC'#0 := M0.__default.UpdateC(cmd#0, deps#0, exps#0, st'#0); 
                  #M0.Tuple.Pair($Box(expr'#0), stC'#0))))));
// definition axiom for M0.__default.execC for decreasing-related literals (revealed)
axiom {:id "id192"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, stC#0: Box :: 
    {:weight 3} { M0.__default.execC(Lit(cmd#0), Lit(deps#0), Lit(exps#0), stC#0) } 
    M0.__default.execC#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), stC#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(stC#0, Tclass.M0.State()))
       ==> (forall e#2: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#2))
             ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
               && M0.__default.Hash#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))
               && M0.__default.DomC#canCall(stC#0))
         && ((forall e#2: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
            $Is(e#2, TSeq(TChar)) && Set#IsMember(Lit(exps#0), $Box(e#2))
               ==> Set#IsMember(M0.__default.DomC(stC#0), 
                M0.__default.Hash(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
           ==> (forall e#3: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#3) } { Set#IsMember(exps#0, $Box(e#3)) } 
            $Is(e#3, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(exps#0), $Box(e#3))
               ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#3)))
         && (!(forall e#2: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
            $Is(e#2, TSeq(TChar)) && Set#IsMember(Lit(exps#0), $Box(e#2))
               ==> Set#IsMember(M0.__default.DomC(stC#0), 
                M0.__default.Hash(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
           ==> M0.__default.exec#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), stC#0)
             && (var result#1 := M0.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exps#0), stC#0); 
              M0.Tuple.Pair_q(result#1)
                 && M0.Tuple.Pair_q(result#1)
                 && (var st'#1 := M0.Tuple.snd(result#1); 
                  M0.__default.UpdateC#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st'#1))))
         && M0.__default.execC(Lit(cmd#0), Lit(deps#0), Lit(exps#0), stC#0)
           == (if (forall e#2: Seq :: 
              { M0.__default.Loc(cmd#0, deps#0, e#2) } { Set#IsMember(exps#0, $Box(e#2)) } 
              $Is(e#2, TSeq(TChar)) && Set#IsMember(Lit(exps#0), $Box(e#2))
                 ==> Set#IsMember(M0.__default.DomC(stC#0), 
                  M0.__default.Hash(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
             then (var paths#1 := Set#FromBoogieMap((lambda $y#2: Box :: 
                    (exists e#3: Seq :: 
                      { M0.__default.Loc(cmd#0, deps#0, e#3) } { Set#IsMember(exps#0, $Box(e#3)) } 
                      $Is(e#3, TSeq(TChar))
                         && Set#IsMember(Lit(exps#0), $Box(e#3))
                         && $y#2 == M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#3)))); 
              #M0.Tuple.Pair($Box(paths#1), stC#0))
             else (var result#1 := M0.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exps#0), stC#0); 
              (var expr'#1, st'#1 := $Unbox(M0.Tuple.fst(result#1)): Set, M0.Tuple.snd(result#1); 
                (var stC'#1 := M0.__default.UpdateC(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st'#1); 
                  #M0.Tuple.Pair($Box(expr'#1), stC'#1))))));
// definition axiom for M0.__default.execC for all literals (revealed)
axiom {:id "id193"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exps#0: Set, stC#0: Box :: 
    {:weight 3} { M0.__default.execC(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(stC#0)) } 
    M0.__default.execC#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(stC#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exps#0, TSet(TSeq(TChar)))
           && $IsBox(stC#0, Tclass.M0.State()))
       ==> (forall e#4: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
          $Is(e#4, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(exps#0), $Box(e#4))
             ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#4)
               && M0.__default.Hash#canCall(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#4))
               && M0.__default.DomC#canCall(Lit(stC#0)))
         && ((forall e#4: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
            $Is(e#4, TSeq(TChar)) && Set#IsMember(Lit(exps#0), $Box(e#4))
               ==> Set#IsMember(M0.__default.DomC(Lit(stC#0)), 
                M0.__default.Hash(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#4))))
           ==> (forall e#5: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#5) } { Set#IsMember(exps#0, $Box(e#5)) } 
            $Is(e#5, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(exps#0), $Box(e#5))
               ==> M0.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#5)))
         && (!(forall e#4: Seq :: 
            { M0.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
            $Is(e#4, TSeq(TChar)) && Set#IsMember(Lit(exps#0), $Box(e#4))
               ==> Set#IsMember(M0.__default.DomC(Lit(stC#0)), 
                M0.__default.Hash(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#4))))
           ==> M0.__default.exec#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(stC#0))
             && (var result#2 := M0.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(stC#0)); 
              M0.Tuple.Pair_q(result#2)
                 && M0.Tuple.Pair_q(result#2)
                 && (var st'#2 := M0.Tuple.snd(result#2); 
                  M0.__default.UpdateC#canCall(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st'#2))))
         && M0.__default.execC(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(stC#0))
           == (if (forall e#4: Seq :: 
              { M0.__default.Loc(cmd#0, deps#0, e#4) } { Set#IsMember(exps#0, $Box(e#4)) } 
              $Is(e#4, TSeq(TChar)) && Set#IsMember(Lit(exps#0), $Box(e#4))
                 ==> Set#IsMember(M0.__default.DomC(Lit(stC#0)), 
                  M0.__default.Hash(M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#4))))
             then (var paths#2 := Set#FromBoogieMap((lambda $y#4: Box :: 
                    (exists e#5: Seq :: 
                      { M0.__default.Loc(cmd#0, deps#0, e#5) } { Set#IsMember(exps#0, $Box(e#5)) } 
                      $Is(e#5, TSeq(TChar))
                         && Set#IsMember(Lit(exps#0), $Box(e#5))
                         && $y#4 == M0.__default.Loc(Lit(cmd#0), Lit(deps#0), e#5)))); 
              #M0.Tuple.Pair($Box(paths#2), Lit(stC#0)))
             else (var result#2 := M0.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exps#0), Lit(stC#0)); 
              (var expr'#2, st'#2 := $Unbox(M0.Tuple.fst(result#2)): Set, M0.Tuple.snd(result#2); 
                (var stC'#2 := M0.__default.UpdateC(Lit(cmd#0), Lit(deps#0), Lit(exps#0), st'#2); 
                  #M0.Tuple.Pair($Box(expr'#2), stC'#2))))));
}

function M0.__default.execC#canCall(cmd#0: Seq, deps#0: Set, exps#0: Set, stC#0: Box) : bool;

function M0.__default.execC#requires(Seq, Set, Set, Box) : bool;

// #requires axiom for M0.__default.execC
axiom (forall cmd#0: Seq, deps#0: Set, exps#0: Set, stC#0: Box :: 
  { M0.__default.execC#requires(cmd#0, deps#0, exps#0, stC#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M0.Path()))
       && $Is(exps#0, TSet(TSeq(TChar)))
       && $IsBox(stC#0, Tclass.M0.State())
     ==> M0.__default.execC#requires(cmd#0, deps#0, exps#0, stC#0) == true);

procedure {:verboseName "M0.execC (well-formedness)"} CheckWellformed$$M0.__default.execC(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M0.Path())), 
    exps#0: Set where $Is(exps#0, TSet(TSeq(TChar))), 
    stC#0: Box where $IsBox(stC#0, Tclass.M0.State()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.Loc
function M0.__default.Loc(cmd#0: Seq, deps#0: Set, exp#0: Seq) : Box
uses {
// consequence axiom for M0.__default.Loc
axiom 0 <= $FunctionContextHeight
   ==> (forall cmd#0: Seq, deps#0: Set, exp#0: Seq :: 
    { M0.__default.Loc(cmd#0, deps#0, exp#0) } 
    M0.__default.Loc#canCall(cmd#0, deps#0, exp#0)
         || (0 < $FunctionContextHeight
           && 
          $Is(cmd#0, TSeq(TChar))
           && $Is(deps#0, TSet(Tclass.M0.Path()))
           && $Is(exp#0, TSeq(TChar)))
       ==> $IsBox(M0.__default.Loc(cmd#0, deps#0, exp#0), Tclass.M0.Path()));
}

function M0.__default.Loc#canCall(cmd#0: Seq, deps#0: Set, exp#0: Seq) : bool;

function M0.__default.Loc#requires(Seq, Set, Seq) : bool;

// #requires axiom for M0.__default.Loc
axiom (forall cmd#0: Seq, deps#0: Set, exp#0: Seq :: 
  { M0.__default.Loc#requires(cmd#0, deps#0, exp#0) } 
  $Is(cmd#0, TSeq(TChar))
       && $Is(deps#0, TSet(Tclass.M0.Path()))
       && $Is(exp#0, TSeq(TChar))
     ==> M0.__default.Loc#requires(cmd#0, deps#0, exp#0) == true);

procedure {:verboseName "M0.Loc (well-formedness)"} CheckWellformed$$M0.__default.Loc(cmd#0: Seq where $Is(cmd#0, TSeq(TChar)), 
    deps#0: Set where $Is(deps#0, TSet(Tclass.M0.Path())), 
    exp#0: Seq where $Is(exp#0, TSeq(TChar)));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.Value
function M0.__default.Value(expr#0: DatatypeType) : bool
uses {
// definition axiom for M0.__default.Value (revealed)
axiom {:id "id206"} 2 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType :: 
    { M0.__default.Value(expr#0) } 
    M0.__default.Value#canCall(expr#0)
         || (2 < $FunctionContextHeight && $Is(expr#0, Tclass.M0.Expression()))
       ==> M0.__default.Value(expr#0) == M0.Expression.exprLiteral_q(expr#0));
// definition axiom for M0.__default.Value for all literals (revealed)
axiom {:id "id207"} 2 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType :: 
    {:weight 3} { M0.__default.Value(Lit(expr#0)) } 
    M0.__default.Value#canCall(Lit(expr#0))
         || (2 < $FunctionContextHeight && $Is(expr#0, Tclass.M0.Expression()))
       ==> M0.__default.Value(Lit(expr#0)) == Lit(M0.Expression.exprLiteral_q(Lit(expr#0))));
}

function M0.__default.Value#canCall(expr#0: DatatypeType) : bool;

function M0.__default.Value#requires(DatatypeType) : bool;

// #requires axiom for M0.__default.Value
axiom (forall expr#0: DatatypeType :: 
  { M0.__default.Value#requires(expr#0) } 
  $Is(expr#0, Tclass.M0.Expression())
     ==> M0.__default.Value#requires(expr#0) == true);

procedure {:verboseName "M0.Value (well-formedness)"} CheckWellformed$$M0.__default.Value(expr#0: DatatypeType where $Is(expr#0, Tclass.M0.Expression()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.build
function M0.__default.build(prog#0: DatatypeType, st#0: Box, useCache#0: bool) : DatatypeType
uses {
// consequence axiom for M0.__default.build
axiom 6 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, st#0: Box, useCache#0: bool :: 
    { M0.__default.build(prog#0, st#0, useCache#0) } 
    M0.__default.build#canCall(prog#0, st#0, useCache#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass.M0.Program())
           && $IsBox(st#0, Tclass.M0.State())
           && M0.__default.Legal(M0.Program.stmts(prog#0)))
       ==> $Is(M0.__default.build(prog#0, st#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State())));
// alloc consequence axiom for M0.__default.build
axiom 6 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, prog#0: DatatypeType, st#0: Box, useCache#0: bool :: 
    { $IsAlloc(M0.__default.build(prog#0, st#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap) } 
    (M0.__default.build#canCall(prog#0, st#0, useCache#0)
           || (6 < $FunctionContextHeight
             && 
            $Is(prog#0, Tclass.M0.Program())
             && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
             && 
            $IsBox(st#0, Tclass.M0.State())
             && $IsAllocBox(st#0, Tclass.M0.State(), $Heap)
             && M0.__default.Legal(M0.Program.stmts(prog#0))))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.build(prog#0, st#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap));
// definition axiom for M0.__default.build (revealed)
axiom {:id "id209"} 6 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, st#0: Box, useCache#0: bool :: 
    { M0.__default.build(prog#0, st#0, useCache#0) } 
    M0.__default.build#canCall(prog#0, st#0, useCache#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass.M0.Program())
           && $IsBox(st#0, Tclass.M0.State())
           && M0.__default.Legal(M0.Program.stmts(prog#0)))
       ==> M0.Program.Program_q(prog#0)
         && M0.__default.EmptyEnv#canCall()
         && M0.__default.do#canCall(M0.Program.stmts(prog#0), st#0, M0.__default.EmptyEnv(), useCache#0)
         && M0.__default.build(prog#0, st#0, useCache#0)
           == M0.__default.do($LS($LZ), M0.Program.stmts(prog#0), st#0, M0.__default.EmptyEnv(), useCache#0));
// definition axiom for M0.__default.build for decreasing-related literals (revealed)
axiom {:id "id210"} 6 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, st#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.build(Lit(prog#0), st#0, Lit(useCache#0)) } 
    M0.__default.build#canCall(Lit(prog#0), st#0, Lit(useCache#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass.M0.Program())
           && $IsBox(st#0, Tclass.M0.State())
           && Lit(M0.__default.Legal(Lit(M0.Program.stmts(Lit(prog#0))))))
       ==> M0.Program.Program_q(Lit(prog#0))
         && M0.__default.EmptyEnv#canCall()
         && M0.__default.do#canCall(Lit(M0.Program.stmts(Lit(prog#0))), 
          st#0, 
          M0.__default.EmptyEnv(), 
          Lit(useCache#0))
         && M0.__default.build(Lit(prog#0), st#0, Lit(useCache#0))
           == M0.__default.do($LS($LZ), 
            Lit(M0.Program.stmts(Lit(prog#0))), 
            st#0, 
            M0.__default.EmptyEnv(), 
            Lit(useCache#0)));
// definition axiom for M0.__default.build for all literals (revealed)
axiom {:id "id211"} 6 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, st#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.build(Lit(prog#0), Lit(st#0), Lit(useCache#0)) } 
    M0.__default.build#canCall(Lit(prog#0), Lit(st#0), Lit(useCache#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass.M0.Program())
           && $IsBox(st#0, Tclass.M0.State())
           && Lit(M0.__default.Legal(Lit(M0.Program.stmts(Lit(prog#0))))))
       ==> M0.Program.Program_q(Lit(prog#0))
         && M0.__default.EmptyEnv#canCall()
         && M0.__default.do#canCall(Lit(M0.Program.stmts(Lit(prog#0))), 
          Lit(st#0), 
          M0.__default.EmptyEnv(), 
          Lit(useCache#0))
         && M0.__default.build(Lit(prog#0), Lit(st#0), Lit(useCache#0))
           == M0.__default.do($LS($LZ), 
            Lit(M0.Program.stmts(Lit(prog#0))), 
            Lit(st#0), 
            M0.__default.EmptyEnv(), 
            Lit(useCache#0)));
}

function M0.__default.build#canCall(prog#0: DatatypeType, st#0: Box, useCache#0: bool) : bool;

function Tclass.M0.Program() : Ty
uses {
// Tclass.M0.Program Tag
axiom Tag(Tclass.M0.Program()) == Tagclass.M0.Program
   && TagFamily(Tclass.M0.Program()) == tytagFamily$Program;
}

const unique Tagclass.M0.Program: TyTag;

// Box/unbox axiom for Tclass.M0.Program
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M0.Program()) } 
  $IsBox(bx, Tclass.M0.Program())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M0.Program()));

function M0.__default.build#requires(DatatypeType, Box, bool) : bool;

// #requires axiom for M0.__default.build
axiom (forall prog#0: DatatypeType, st#0: Box, useCache#0: bool :: 
  { M0.__default.build#requires(prog#0, st#0, useCache#0) } 
  $Is(prog#0, Tclass.M0.Program()) && $IsBox(st#0, Tclass.M0.State())
     ==> M0.__default.build#requires(prog#0, st#0, useCache#0)
       == M0.__default.Legal(M0.Program.stmts(prog#0)));

procedure {:verboseName "M0.build (well-formedness)"} CheckWellformed$$M0.__default.build(prog#0: DatatypeType where $Is(prog#0, Tclass.M0.Program()), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()), 
    useCache#0: bool);
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



function Tclass.M0.Statement() : Ty
uses {
// Tclass.M0.Statement Tag
axiom Tag(Tclass.M0.Statement()) == Tagclass.M0.Statement
   && TagFamily(Tclass.M0.Statement()) == tytagFamily$Statement;
}

const unique Tagclass.M0.Statement: TyTag;

// Box/unbox axiom for Tclass.M0.Statement
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M0.Statement()) } 
  $IsBox(bx, Tclass.M0.Statement())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M0.Statement()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.build (well-formedness)"} CheckWellformed$$M0.__default.build(prog#0: DatatypeType, st#0: Box, useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##stmts#1: Seq;
  var ##st#0: Box;
  var ##env#0: Box;
  var ##useCache#0: bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume M0.Program.Program_q(prog#0);
    ##stmts#0 := M0.Program.stmts(prog#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass.M0.Statement()), $Heap);
    assume M0.__default.Legal#canCall(M0.Program.stmts(prog#0));
    assume {:id "id212"} M0.__default.Legal(M0.Program.stmts(prog#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.build(prog#0, st#0, useCache#0), 
          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume M0.Program.Program_q(prog#0);
        ##stmts#1 := M0.Program.stmts(prog#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##stmts#1, TSeq(Tclass.M0.Statement()), $Heap);
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
        assume M0.__default.EmptyEnv#canCall();
        ##env#0 := M0.__default.EmptyEnv();
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
        ##useCache#0 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0, TBool, $Heap);
        assert {:id "id213"} {:subsumption 0} M0.__default.Legal#canCall(##stmts#1)
           ==> M0.__default.Legal(##stmts#1) || Seq#Length(##stmts#1) != 0;
        assert {:id "id214"} {:subsumption 0} M0.__default.ValidEnv(##env#0);
        assume M0.__default.Legal(##stmts#1) && M0.__default.ValidEnv(##env#0);
        assume M0.__default.do#canCall(M0.Program.stmts(prog#0), st#0, M0.__default.EmptyEnv(), useCache#0);
        assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), M0.Program.stmts(prog#0), st#0, M0.__default.EmptyEnv(), useCache#0));
        assume {:id "id215"} M0.__default.build(prog#0, st#0, useCache#0)
           == M0.__default.do($LS($LZ), M0.Program.stmts(prog#0), st#0, M0.__default.EmptyEnv(), useCache#0);
        assume M0.Program.Program_q(prog#0)
           && M0.__default.EmptyEnv#canCall()
           && M0.__default.do#canCall(M0.Program.stmts(prog#0), st#0, M0.__default.EmptyEnv(), useCache#0);
        // CheckWellformedWithResult: any expression
        assume $Is(M0.__default.build(prog#0, st#0, useCache#0), 
          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
        return;

        assume false;
    }
}



// function declaration for M0._default.do
function M0.__default.do($ly: LayerType, stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool)
   : DatatypeType
uses {
// consequence axiom for M0.__default.do
axiom 5 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool :: 
    { M0.__default.do($ly, stmts#0, st#0, env#0, useCache#0) } 
    M0.__default.do#canCall(stmts#0, st#0, env#0, useCache#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass.M0.Statement()))
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.__default.Legal(stmts#0)
           && M0.__default.ValidEnv(env#0))
       ==> $Is(M0.__default.do($ly, stmts#0, st#0, env#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State())));
// alloc consequence axiom for M0.__default.do
axiom 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      $ly: LayerType, 
      stmts#0: Seq, 
      st#0: Box, 
      env#0: Box, 
      useCache#0: bool :: 
    { $IsAlloc(M0.__default.do($ly, stmts#0, st#0, env#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap) } 
    (M0.__default.do#canCall(stmts#0, st#0, env#0, useCache#0)
           || (5 < $FunctionContextHeight
             && 
            $Is(stmts#0, TSeq(Tclass.M0.Statement()))
             && $IsAlloc(stmts#0, TSeq(Tclass.M0.Statement()), $Heap)
             && 
            $IsBox(st#0, Tclass.M0.State())
             && $IsAllocBox(st#0, Tclass.M0.State(), $Heap)
             && 
            $IsBox(env#0, Tclass.M0.Env())
             && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap)
             && 
            M0.__default.Legal(stmts#0)
             && M0.__default.ValidEnv(env#0)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.do($ly, stmts#0, st#0, env#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap));
// definition axiom for M0.__default.do (revealed)
axiom {:id "id216"} 5 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool :: 
    { M0.__default.do($LS($ly), stmts#0, st#0, env#0, useCache#0) } 
    M0.__default.do#canCall(stmts#0, st#0, env#0, useCache#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass.M0.Statement()))
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.__default.Legal(stmts#0)
           && M0.__default.ValidEnv(env#0))
       ==> (var stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType; 
          (M0.Statement.stmtVariable_q(stmt#0)
               ==> M0.__default.eval#canCall(M0.Statement.expr(stmt#0), st#0, env#0, useCache#0)
                 && (var result#0 := M0.__default.eval($LS($LZ), 
                      reveal_M0._default.eval, 
                      M0.Statement.expr(stmt#0), 
                      st#0, 
                      env#0, 
                      useCache#0); 
                  M0.Tuple.Pair_q(result#0)
                     && M0.Tuple.Pair_q(result#0)
                     && (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
                      M0.__default.Value#canCall(expr'#0)
                         && (M0.__default.Value(expr'#0)
                           ==> M0.__default.SetEnv#canCall(M0.Statement.id(stmt#0), expr'#0, env#0)
                             && (var env'#0 := M0.__default.SetEnv(M0.Statement.id(stmt#0), expr'#0, env#0); 
                              M0.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)))
                                 && (M0.__default.Legal(Seq#Drop(stmts#0, LitInt(1)))
                                   ==> M0.__default.do#canCall(Seq#Drop(stmts#0, LitInt(1)), st'#0, env'#0, useCache#0)))))))
             && (!M0.Statement.stmtVariable_q(stmt#0)
               ==> M0.__default.eval#canCall(M0.Statement.ret(stmt#0), st#0, env#0, useCache#0)))
         && M0.__default.do($LS($ly), stmts#0, st#0, env#0, useCache#0)
           == (var stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType; 
            (if M0.Statement.stmtVariable_q(stmt#0)
               then (var result#0 := M0.__default.eval($LS($LZ), 
                    reveal_M0._default.eval, 
                    M0.Statement.expr(stmt#0), 
                    st#0, 
                    env#0, 
                    useCache#0); 
                (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
                  (if M0.__default.Value(expr'#0)
                     then (var env'#0 := M0.__default.SetEnv(M0.Statement.id(stmt#0), expr'#0, env#0); 
                      (if M0.__default.Legal(Seq#Drop(stmts#0, LitInt(1)))
                         then M0.__default.do($ly, Seq#Drop(stmts#0, LitInt(1)), st'#0, env'#0, useCache#0)
                         else #M0.Tuple.Pair($Box(expr'#0), st'#0)))
                     else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))))
               else M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                M0.Statement.ret(stmt#0), 
                st#0, 
                env#0, 
                useCache#0))));
// definition axiom for M0.__default.do for decreasing-related literals (revealed)
axiom {:id "id217"} 5 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.do($LS($ly), Lit(stmts#0), st#0, env#0, Lit(useCache#0)) } 
    M0.__default.do#canCall(Lit(stmts#0), st#0, env#0, Lit(useCache#0))
         || (5 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass.M0.Statement()))
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.__default.Legal(Lit(stmts#0))
           && M0.__default.ValidEnv(env#0))
       ==> (var stmt#1 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
          (M0.Statement.stmtVariable_q(stmt#1)
               ==> M0.__default.eval#canCall(M0.Statement.expr(stmt#1), st#0, env#0, Lit(useCache#0))
                 && (var result#1 := M0.__default.eval($LS($LZ), 
                      reveal_M0._default.eval, 
                      M0.Statement.expr(stmt#1), 
                      st#0, 
                      env#0, 
                      Lit(useCache#0)); 
                  M0.Tuple.Pair_q(result#1)
                     && M0.Tuple.Pair_q(result#1)
                     && (var expr'#1, st'#1 := $Unbox(M0.Tuple.fst(result#1)): DatatypeType, M0.Tuple.snd(result#1); 
                      M0.__default.Value#canCall(expr'#1)
                         && (M0.__default.Value(expr'#1)
                           ==> M0.__default.SetEnv#canCall(M0.Statement.id(stmt#1), expr'#1, env#0)
                             && (var env'#1 := M0.__default.SetEnv(M0.Statement.id(stmt#1), expr'#1, env#0); 
                              M0.__default.Legal#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                                 && (Lit(M0.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1)))))
                                   ==> M0.__default.do#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), st'#1, env'#1, Lit(useCache#0))))))))
             && (!M0.Statement.stmtVariable_q(stmt#1)
               ==> M0.__default.eval#canCall(M0.Statement.ret(stmt#1), st#0, env#0, Lit(useCache#0))))
         && M0.__default.do($LS($ly), Lit(stmts#0), st#0, env#0, Lit(useCache#0))
           == (var stmt#1 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
            (if M0.Statement.stmtVariable_q(stmt#1)
               then (var result#1 := M0.__default.eval($LS($LZ), 
                    reveal_M0._default.eval, 
                    M0.Statement.expr(stmt#1), 
                    st#0, 
                    env#0, 
                    Lit(useCache#0)); 
                (var expr'#1, st'#1 := $Unbox(M0.Tuple.fst(result#1)): DatatypeType, M0.Tuple.snd(result#1); 
                  (if M0.__default.Value(expr'#1)
                     then (var env'#1 := M0.__default.SetEnv(M0.Statement.id(stmt#1), expr'#1, env#0); 
                      (if M0.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                         then M0.__default.do($LS($ly), Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), st'#1, env'#1, Lit(useCache#0))
                         else #M0.Tuple.Pair($Box(expr'#1), st'#1)))
                     else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))))
               else M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                M0.Statement.ret(stmt#1), 
                st#0, 
                env#0, 
                Lit(useCache#0)))));
// definition axiom for M0.__default.do for all literals (revealed)
axiom {:id "id218"} 5 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.do($LS($ly), Lit(stmts#0), Lit(st#0), Lit(env#0), Lit(useCache#0)) } 
    M0.__default.do#canCall(Lit(stmts#0), Lit(st#0), Lit(env#0), Lit(useCache#0))
         || (5 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass.M0.Statement()))
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.__default.Legal(Lit(stmts#0))
           && M0.__default.ValidEnv(Lit(env#0)))
       ==> (var stmt#2 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
          (M0.Statement.stmtVariable_q(stmt#2)
               ==> M0.__default.eval#canCall(M0.Statement.expr(stmt#2), Lit(st#0), Lit(env#0), Lit(useCache#0))
                 && (var result#2 := M0.__default.eval($LS($LZ), 
                      reveal_M0._default.eval, 
                      M0.Statement.expr(stmt#2), 
                      Lit(st#0), 
                      Lit(env#0), 
                      Lit(useCache#0)); 
                  M0.Tuple.Pair_q(result#2)
                     && M0.Tuple.Pair_q(result#2)
                     && (var expr'#2, st'#2 := $Unbox(M0.Tuple.fst(result#2)): DatatypeType, M0.Tuple.snd(result#2); 
                      M0.__default.Value#canCall(expr'#2)
                         && (M0.__default.Value(expr'#2)
                           ==> M0.__default.SetEnv#canCall(M0.Statement.id(stmt#2), expr'#2, Lit(env#0))
                             && (var env'#2 := M0.__default.SetEnv(M0.Statement.id(stmt#2), expr'#2, Lit(env#0)); 
                              M0.__default.Legal#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                                 && (Lit(M0.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1)))))
                                   ==> M0.__default.do#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), st'#2, env'#2, Lit(useCache#0))))))))
             && (!M0.Statement.stmtVariable_q(stmt#2)
               ==> M0.__default.eval#canCall(M0.Statement.ret(stmt#2), Lit(st#0), Lit(env#0), Lit(useCache#0))))
         && M0.__default.do($LS($ly), Lit(stmts#0), Lit(st#0), Lit(env#0), Lit(useCache#0))
           == (var stmt#2 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
            (if M0.Statement.stmtVariable_q(stmt#2)
               then (var result#2 := M0.__default.eval($LS($LZ), 
                    reveal_M0._default.eval, 
                    M0.Statement.expr(stmt#2), 
                    Lit(st#0), 
                    Lit(env#0), 
                    Lit(useCache#0)); 
                (var expr'#2, st'#2 := $Unbox(M0.Tuple.fst(result#2)): DatatypeType, M0.Tuple.snd(result#2); 
                  (if M0.__default.Value(expr'#2)
                     then (var env'#2 := M0.__default.SetEnv(M0.Statement.id(stmt#2), expr'#2, Lit(env#0)); 
                      (if M0.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                         then M0.__default.do($LS($ly), Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), st'#2, env'#2, Lit(useCache#0))
                         else #M0.Tuple.Pair($Box(expr'#2), st'#2)))
                     else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(st#0)))))
               else M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                M0.Statement.ret(stmt#2), 
                Lit(st#0), 
                Lit(env#0), 
                Lit(useCache#0)))));
}

function M0.__default.do#canCall(stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool :: 
  { M0.__default.do($LS($ly), stmts#0, st#0, env#0, useCache#0) } 
  M0.__default.do($LS($ly), stmts#0, st#0, env#0, useCache#0)
     == M0.__default.do($ly, stmts#0, st#0, env#0, useCache#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool :: 
  { M0.__default.do(AsFuelBottom($ly), stmts#0, st#0, env#0, useCache#0) } 
  M0.__default.do($ly, stmts#0, st#0, env#0, useCache#0)
     == M0.__default.do($LZ, stmts#0, st#0, env#0, useCache#0));

function M0.__default.do#requires(LayerType, Seq, Box, Box, bool) : bool;

// #requires axiom for M0.__default.do
axiom (forall $ly: LayerType, stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool :: 
  { M0.__default.do#requires($ly, stmts#0, st#0, env#0, useCache#0) } 
  $Is(stmts#0, TSeq(Tclass.M0.Statement()))
       && $IsBox(st#0, Tclass.M0.State())
       && $IsBox(env#0, Tclass.M0.Env())
     ==> M0.__default.do#requires($ly, stmts#0, st#0, env#0, useCache#0)
       == (M0.__default.Legal(stmts#0) && M0.__default.ValidEnv(env#0)));

procedure {:verboseName "M0.do (well-formedness)"} CheckWellformed$$M0.__default.do(stmts#0: Seq where $Is(stmts#0, TSeq(Tclass.M0.Statement())), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()), 
    env#0: Box where $IsBox(env#0, Tclass.M0.Env()), 
    useCache#0: bool);
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.do (well-formedness)"} CheckWellformed$$M0.__default.do(stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##env#0: Box;
  var stmt#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##st#0: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var expr'#Z#0: DatatypeType;
  var st'#Z#0: Box;
  var let#2#0#0: DatatypeType;
  var let#2#1#0: Box;
  var ##expr#1: DatatypeType;
  var env'#Z#0: Box;
  var let#3#0#0: Box;
  var ##id#0: Box;
  var ##expr#2: DatatypeType;
  var ##env#2: Box;
  var ##stmts#1: Seq;
  var ##stmts#2: Seq;
  var ##st#1: Box;
  var ##env#3: Box;
  var ##useCache#1: bool;
  var ##expr#3: DatatypeType;
  var ##st#2: Box;
  var ##env#4: Box;
  var ##useCache#2: bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    ##stmts#0 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass.M0.Statement()), $Heap);
    assume M0.__default.Legal#canCall(stmts#0);
    assume {:id "id219"} M0.__default.Legal(stmts#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id220"} M0.__default.ValidEnv(env#0);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0), 
          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc stmt#Z#0;
        assert {:id "id221"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(stmts#0);
        assume {:id "id222"} let#0#0#0 == $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, Tclass.M0.Statement());
        assume {:id "id223"} stmt#Z#0 == let#0#0#0;
        if (M0.Statement.stmtVariable_q(stmt#Z#0))
        {
            havoc result#Z#0;
            assert {:id "id224"} M0.Statement.stmtVariable_q(stmt#Z#0);
            ##expr#0 := M0.Statement.expr(stmt#Z#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
            ##st#0 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
            ##env#1 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
            ##useCache#0 := useCache#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#0, TBool, $Heap);
            assert {:id "id225"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
            assume M0.__default.ValidEnv(##env#1);
            assume M0.__default.eval#canCall(M0.Statement.expr(stmt#Z#0), st#0, env#0, useCache#0);
            assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                M0.Statement.expr(stmt#Z#0), 
                st#0, 
                env#0, 
                useCache#0));
            assume {:id "id226"} let#1#0#0
               == M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                M0.Statement.expr(stmt#Z#0), 
                st#0, 
                env#0, 
                useCache#0);
            assume M0.__default.eval#canCall(M0.Statement.expr(stmt#Z#0), st#0, env#0, useCache#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
            assume {:id "id227"} result#Z#0 == let#1#0#0;
            havoc expr'#Z#0;
            havoc st'#Z#0;
            assume M0.Tuple.Pair_q(result#Z#0);
            assume {:id "id228"} let#2#0#0 == $Unbox(M0.Tuple.fst(result#Z#0)): DatatypeType;
            assume M0.Tuple.Pair_q(result#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#0#0, Tclass.M0.Expression());
            assume {:id "id229"} expr'#Z#0 == let#2#0#0;
            assume M0.Tuple.Pair_q(result#Z#0);
            assume {:id "id230"} let#2#1#0 == M0.Tuple.snd(result#Z#0);
            assume M0.Tuple.Pair_q(result#Z#0);
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#2#1#0, Tclass.M0.State());
            assume {:id "id231"} st'#Z#0 == let#2#1#0;
            ##expr#1 := expr'#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
            assume M0.__default.Value#canCall(expr'#Z#0);
            if (M0.__default.Value(expr'#Z#0))
            {
                havoc env'#Z#0;
                assert {:id "id232"} M0.Statement.stmtVariable_q(stmt#Z#0);
                ##id#0 := M0.Statement.id(stmt#Z#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##id#0, Tclass.M0.Identifier(), $Heap);
                ##expr#2 := expr'#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##expr#2, Tclass.M0.Expression(), $Heap);
                ##env#2 := env#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
                assert {:id "id233"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
                assert {:id "id234"} {:subsumption 0} M0.__default.Value#canCall(##expr#2)
                   ==> M0.__default.Value(##expr#2) || M0.Expression.exprLiteral_q(##expr#2);
                assume M0.__default.ValidEnv(##env#2) && M0.__default.Value(##expr#2);
                assume M0.__default.SetEnv#canCall(M0.Statement.id(stmt#Z#0), expr'#Z#0, env#0);
                assume {:id "id235"} let#3#0#0 == M0.__default.SetEnv(M0.Statement.id(stmt#Z#0), expr'#Z#0, env#0);
                assume M0.__default.SetEnv#canCall(M0.Statement.id(stmt#Z#0), expr'#Z#0, env#0);
                // CheckWellformedWithResult: any expression
                assume $IsBox(let#3#0#0, Tclass.M0.Env());
                assume {:id "id236"} env'#Z#0 == let#3#0#0;
                assert {:id "id237"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
                ##stmts#1 := Seq#Drop(stmts#0, LitInt(1));
                // assume allocatedness for argument to function
                assume $IsAlloc(##stmts#1, TSeq(Tclass.M0.Statement()), $Heap);
                assume M0.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
                if (M0.__default.Legal(Seq#Drop(stmts#0, LitInt(1))))
                {
                    assert {:id "id238"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
                    ##stmts#2 := Seq#Drop(stmts#0, LitInt(1));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##stmts#2, TSeq(Tclass.M0.Statement()), $Heap);
                    ##st#1 := st'#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
                    ##env#3 := env'#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##env#3, Tclass.M0.Env(), $Heap);
                    ##useCache#1 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1, TBool, $Heap);
                    assert {:id "id239"} {:subsumption 0} M0.__default.Legal#canCall(##stmts#2)
                       ==> M0.__default.Legal(##stmts#2) || Seq#Length(##stmts#2) != 0;
                    assert {:id "id240"} {:subsumption 0} M0.__default.ValidEnv(##env#3);
                    assume M0.__default.Legal(##stmts#2) && M0.__default.ValidEnv(##env#3);
                    assert {:id "id241"} Seq#Rank(##stmts#2) < Seq#Rank(stmts#0)
                       || (Seq#Rank(##stmts#2) == Seq#Rank(stmts#0) && !##useCache#1 && useCache#0);
                    assume M0.__default.do#canCall(Seq#Drop(stmts#0, LitInt(1)), st'#Z#0, env'#Z#0, useCache#0);
                    assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), Seq#Drop(stmts#0, LitInt(1)), st'#Z#0, env'#Z#0, useCache#0));
                    assume {:id "id242"} M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0)
                       == M0.__default.do($LS($LZ), Seq#Drop(stmts#0, LitInt(1)), st'#Z#0, env'#Z#0, useCache#0);
                    assume M0.__default.do#canCall(Seq#Drop(stmts#0, LitInt(1)), st'#Z#0, env'#Z#0, useCache#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0), 
                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                    return;
                }
                else
                {
                    assume {:id "id243"} M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0)
                       == #M0.Tuple.Pair($Box(expr'#Z#0), st'#Z#0);
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0), 
                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                    return;
                }
            }
            else
            {
                assume {:id "id244"} M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0)
                   == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0);
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0), 
                  Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                return;
            }
        }
        else
        {
            assert {:id "id245"} M0.Statement.stmtReturn_q(stmt#Z#0);
            ##expr#3 := M0.Statement.ret(stmt#Z#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#3, Tclass.M0.Expression(), $Heap);
            ##st#2 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
            ##env#4 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#4, Tclass.M0.Env(), $Heap);
            ##useCache#2 := useCache#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#2, TBool, $Heap);
            assert {:id "id246"} {:subsumption 0} M0.__default.ValidEnv(##env#4);
            assume M0.__default.ValidEnv(##env#4);
            assume M0.__default.eval#canCall(M0.Statement.ret(stmt#Z#0), st#0, env#0, useCache#0);
            assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                M0.Statement.ret(stmt#Z#0), 
                st#0, 
                env#0, 
                useCache#0));
            assume {:id "id247"} M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0)
               == M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                M0.Statement.ret(stmt#Z#0), 
                st#0, 
                env#0, 
                useCache#0);
            assume M0.__default.eval#canCall(M0.Statement.ret(stmt#Z#0), st#0, env#0, useCache#0);
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0), 
              Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
            return;
        }

        assume false;
    }
}



// function declaration for M0._default.Legal
function M0.__default.Legal(stmts#0: Seq) : bool
uses {
// definition axiom for M0.__default.Legal (revealed)
axiom {:id "id248"} 3 <= $FunctionContextHeight
   ==> (forall stmts#0: Seq :: 
    { M0.__default.Legal(stmts#0) } 
    M0.__default.Legal#canCall(stmts#0)
         || (3 < $FunctionContextHeight && $Is(stmts#0, TSeq(Tclass.M0.Statement())))
       ==> M0.__default.Legal(stmts#0) == (Seq#Length(stmts#0) != 0));
// definition axiom for M0.__default.Legal for all literals (revealed)
axiom {:id "id249"} 3 <= $FunctionContextHeight
   ==> (forall stmts#0: Seq :: 
    {:weight 3} { M0.__default.Legal(Lit(stmts#0)) } 
    M0.__default.Legal#canCall(Lit(stmts#0))
         || (3 < $FunctionContextHeight && $Is(stmts#0, TSeq(Tclass.M0.Statement())))
       ==> M0.__default.Legal(Lit(stmts#0)) == (Seq#Length(Lit(stmts#0)) != 0));
}

function M0.__default.Legal#canCall(stmts#0: Seq) : bool;

function M0.__default.Legal#requires(Seq) : bool;

// #requires axiom for M0.__default.Legal
axiom (forall stmts#0: Seq :: 
  { M0.__default.Legal#requires(stmts#0) } 
  $Is(stmts#0, TSeq(Tclass.M0.Statement()))
     ==> M0.__default.Legal#requires(stmts#0) == true);

procedure {:verboseName "M0.Legal (well-formedness)"} CheckWellformed$$M0.__default.Legal(stmts#0: Seq where $Is(stmts#0, TSeq(Tclass.M0.Statement())));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for M0._default.eval
function M0.__default.eval($ly: LayerType, 
    $reveal: bool, 
    expr#0: DatatypeType, 
    st#0: Box, 
    env#0: Box, 
    useCache#0: bool)
   : DatatypeType
uses {
// consequence axiom for M0.__default.eval
axiom 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      $reveal: bool, 
      expr#0: DatatypeType, 
      st#0: Box, 
      env#0: Box, 
      useCache#0: bool :: 
    { M0.__default.eval($ly, $reveal, expr#0, st#0, env#0, useCache#0) } 
    M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && M0.__default.ValidEnv(env#0))
       ==> $Is(M0.__default.eval($ly, $reveal, expr#0, st#0, env#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State())));
// alloc consequence axiom for M0.__default.eval
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      $ly: LayerType, 
      $reveal: bool, 
      expr#0: DatatypeType, 
      st#0: Box, 
      env#0: Box, 
      useCache#0: bool :: 
    { $IsAlloc(M0.__default.eval($ly, $reveal, expr#0, st#0, env#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap) } 
    (M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0)
           || (4 < $FunctionContextHeight
             && 
            $Is(expr#0, Tclass.M0.Expression())
             && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
             && 
            $IsBox(st#0, Tclass.M0.State())
             && $IsAllocBox(st#0, Tclass.M0.State(), $Heap)
             && 
            $IsBox(env#0, Tclass.M0.Env())
             && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap)
             && M0.__default.ValidEnv(env#0)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.eval($ly, $reveal, expr#0, st#0, env#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap));
// definition axiom for M0.__default.eval (revealed)
axiom {:id "id251"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    { M0.__default.eval($LS($ly), true, expr#0, st#0, env#0, useCache#0) } 
    M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && M0.__default.ValidEnv(env#0))
       ==> M0.__default.Value#canCall(expr#0)
         && (!M0.__default.Value(expr#0)
           ==> (M0.Expression.exprIdentifier_q(expr#0)
               ==> M0.__default.GetEnv#canCall(M0.Expression.id(expr#0), env#0))
             && (!M0.Expression.exprIdentifier_q(expr#0)
               ==> (M0.Expression.exprIf_q(expr#0)
                   ==> M0.__default.eval#canCall(M0.Expression.cond(expr#0), st#0, env#0, useCache#0)
                     && (var result#0 := M0.__default.eval($ly, 
                          reveal_M0._default.eval, 
                          M0.Expression.cond(expr#0), 
                          st#0, 
                          env#0, 
                          useCache#0); 
                      M0.Tuple.Pair_q(result#0)
                         && M0.Tuple.Pair_q(result#0)
                         && (var cond'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
                          (M0.Expression.exprLiteral_q(cond'#0)
                               ==> $IsA#M0.Literal(M0.Expression.lit(cond'#0)))
                             && (M0.Expression.exprLiteral_q(cond'#0)
                                 && M0.Literal#Equal(M0.Expression.lit(cond'#0), #M0.Literal.litTrue())
                               ==> M0.__default.eval#canCall(M0.Expression.ifTrue(expr#0), st'#0, env#0, useCache#0))
                             && (!(M0.Expression.exprLiteral_q(cond'#0)
                                 && M0.Literal#Equal(M0.Expression.lit(cond'#0), #M0.Literal.litTrue()))
                               ==> (M0.Expression.exprLiteral_q(cond'#0)
                                   ==> $IsA#M0.Literal(M0.Expression.lit(cond'#0)))
                                 && (M0.Expression.exprLiteral_q(cond'#0)
                                     && M0.Literal#Equal(M0.Expression.lit(cond'#0), #M0.Literal.litFalse())
                                   ==> M0.__default.eval#canCall(M0.Expression.ifFalse(expr#0), st'#0, env#0, useCache#0))))))
                 && (!M0.Expression.exprIf_q(expr#0)
                   ==> (M0.Expression.exprAnd_q(expr#0)
                       ==> M0.__default.eval#canCall(M0.Expression.conj0(expr#0), st#0, env#0, useCache#0)
                         && (var result#1 := M0.__default.eval($ly, 
                              reveal_M0._default.eval, 
                              M0.Expression.conj0(expr#0), 
                              st#0, 
                              env#0, 
                              useCache#0); 
                          M0.Tuple.Pair_q(result#1)
                             && M0.Tuple.Pair_q(result#1)
                             && (var conj0'#0, st'#1 := $Unbox(M0.Tuple.fst(result#1)): DatatypeType, M0.Tuple.snd(result#1); 
                              (M0.Expression.exprLiteral_q(conj0'#0)
                                   ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#0)))
                                 && (M0.Expression.exprLiteral_q(conj0'#0)
                                     && M0.Literal#Equal(M0.Expression.lit(conj0'#0), #M0.Literal.litTrue())
                                   ==> M0.__default.eval#canCall(M0.Expression.conj1(expr#0), st'#1, env#0, useCache#0))
                                 && (!(M0.Expression.exprLiteral_q(conj0'#0)
                                     && M0.Literal#Equal(M0.Expression.lit(conj0'#0), #M0.Literal.litTrue()))
                                   ==> 
                                  M0.Expression.exprLiteral_q(conj0'#0)
                                   ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#0))))))
                     && (!M0.Expression.exprAnd_q(expr#0)
                       ==> (M0.Expression.exprOr_q(expr#0)
                           ==> M0.__default.eval#canCall(M0.Expression.disj0(expr#0), st#0, env#0, useCache#0)
                             && (var result#2 := M0.__default.eval($ly, 
                                  reveal_M0._default.eval, 
                                  M0.Expression.disj0(expr#0), 
                                  st#0, 
                                  env#0, 
                                  useCache#0); 
                              M0.Tuple.Pair_q(result#2)
                                 && M0.Tuple.Pair_q(result#2)
                                 && (var disj0'#0, st'#2 := $Unbox(M0.Tuple.fst(result#2)): DatatypeType, M0.Tuple.snd(result#2); 
                                  (M0.Expression.exprLiteral_q(disj0'#0)
                                       ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#0)))
                                     && (!(M0.Expression.exprLiteral_q(disj0'#0)
                                         && M0.Literal#Equal(M0.Expression.lit(disj0'#0), #M0.Literal.litTrue()))
                                       ==> (M0.Expression.exprLiteral_q(disj0'#0)
                                           ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#0)))
                                         && (M0.Expression.exprLiteral_q(disj0'#0)
                                             && M0.Literal#Equal(M0.Expression.lit(disj0'#0), #M0.Literal.litFalse())
                                           ==> M0.__default.eval#canCall(M0.Expression.disj1(expr#0), st'#2, env#0, useCache#0))))))
                         && (!M0.Expression.exprOr_q(expr#0)
                           ==> 
                          M0.Expression.exprInvocation_q(expr#0)
                           ==> M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, useCache#0)
                             && (var resultFun#0 := M0.__default.eval($ly, reveal_M0._default.eval, M0.Expression.fun(expr#0), st#0, env#0, useCache#0); 
                              M0.Tuple.Pair_q(resultFun#0)
                                 && M0.Tuple.Pair_q(resultFun#0)
                                 && (var fun'#0, st'#3 := $Unbox(M0.Tuple.fst(resultFun#0)): DatatypeType, M0.Tuple.snd(resultFun#0); 
                                  M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0)
                                     && (var resultArgs#0 := M0.__default.evalArgs($ly, expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0); 
                                      M0.Tuple.Pair_q(resultArgs#0)
                                         && M0.Tuple.Pair_q(resultArgs#0)
                                         && (var args'#0, sts'#0 := $Unbox(M0.Tuple.fst(resultArgs#0)): Seq, $Unbox(M0.Tuple.snd(resultArgs#0)): Set; 
                                          (var sts''#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#3), sts'#0); 
                                            M0.__default.Compatible#canCall(sts''#0)
                                               && (M0.__default.Compatible(sts''#0)
                                                 ==> M0.__default.Combine#canCall(sts''#0, useCache#0)
                                                   && (var stCombined#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#0, useCache#0); 
                                                    M0.Expression.exprLiteral_q(fun'#0)
                                                         && M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#0))
                                                       ==> 
                                                      M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun'#0)))
                                                       ==> M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()))
                                                         && (Seq#Length(args'#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                                           ==> M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args'#0, stCombined#0))
                                                         && (Seq#Length(args'#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                                             && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args'#0, stCombined#0)
                                                           ==> (var cmd#0, deps#0, exps#0 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(0))): DatatypeType)), 
                                                              M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(1))): DatatypeType)), 
                                                              M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(2))): DatatypeType)); 
                                                            (!useCache#0
                                                                 ==> M0.__default.exec#canCall(cmd#0, deps#0, exps#0, stCombined#0)
                                                                   && (var ps#0 := M0.__default.exec(cmd#0, deps#0, exps#0, stCombined#0); 
                                                                    M0.Tuple.Pair_q(ps#0) && M0.Tuple.Pair_q(ps#0)))
                                                               && (useCache#0
                                                                 ==> M0.__default.ConsistentCache#canCall(stCombined#0)
                                                                   && (M0.__default.ConsistentCache(stCombined#0)
                                                                     ==> M0.__default.execC#canCall(cmd#0, deps#0, exps#0, stCombined#0)
                                                                       && (var ps#1 := M0.__default.execC(cmd#0, deps#0, exps#0, stCombined#0); 
                                                                        M0.Tuple.Pair_q(ps#1) && M0.Tuple.Pair_q(ps#1))))))))))))))))))
         && M0.__default.eval($LS($ly), true, expr#0, st#0, env#0, useCache#0)
           == (if M0.__default.Value(expr#0)
             then #M0.Tuple.Pair($Box(expr#0), st#0)
             else (if M0.Expression.exprIdentifier_q(expr#0)
               then #M0.Tuple.Pair($Box(M0.__default.GetEnv(M0.Expression.id(expr#0), env#0)), st#0)
               else (if M0.Expression.exprIf_q(expr#0)
                 then (var result#0 := M0.__default.eval($ly, 
                      reveal_M0._default.eval, 
                      M0.Expression.cond(expr#0), 
                      st#0, 
                      env#0, 
                      useCache#0); 
                  (var cond'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
                    (if M0.Expression.exprLiteral_q(cond'#0)
                         && M0.Literal#Equal(M0.Expression.lit(cond'#0), #M0.Literal.litTrue())
                       then M0.__default.eval($ly, 
                        reveal_M0._default.eval, 
                        M0.Expression.ifTrue(expr#0), 
                        st'#0, 
                        env#0, 
                        useCache#0)
                       else (if M0.Expression.exprLiteral_q(cond'#0)
                           && M0.Literal#Equal(M0.Expression.lit(cond'#0), #M0.Literal.litFalse())
                         then M0.__default.eval($ly, 
                          reveal_M0._default.eval, 
                          M0.Expression.ifFalse(expr#0), 
                          st'#0, 
                          env#0, 
                          useCache#0)
                         else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)))))
                 else (if M0.Expression.exprAnd_q(expr#0)
                   then (var result#1 := M0.__default.eval($ly, 
                        reveal_M0._default.eval, 
                        M0.Expression.conj0(expr#0), 
                        st#0, 
                        env#0, 
                        useCache#0); 
                    (var conj0'#0, st'#1 := $Unbox(M0.Tuple.fst(result#1)): DatatypeType, M0.Tuple.snd(result#1); 
                      (if M0.Expression.exprLiteral_q(conj0'#0)
                           && M0.Literal#Equal(M0.Expression.lit(conj0'#0), #M0.Literal.litTrue())
                         then M0.__default.eval($ly, 
                          reveal_M0._default.eval, 
                          M0.Expression.conj1(expr#0), 
                          st'#1, 
                          env#0, 
                          useCache#0)
                         else (if M0.Expression.exprLiteral_q(conj0'#0)
                             && M0.Literal#Equal(M0.Expression.lit(conj0'#0), #M0.Literal.litFalse())
                           then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprLiteral(Lit(#M0.Literal.litFalse())))), st'#1)
                           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)))))
                   else (if M0.Expression.exprOr_q(expr#0)
                     then (var result#2 := M0.__default.eval($ly, 
                          reveal_M0._default.eval, 
                          M0.Expression.disj0(expr#0), 
                          st#0, 
                          env#0, 
                          useCache#0); 
                      (var disj0'#0, st'#2 := $Unbox(M0.Tuple.fst(result#2)): DatatypeType, M0.Tuple.snd(result#2); 
                        (if M0.Expression.exprLiteral_q(disj0'#0)
                             && M0.Literal#Equal(M0.Expression.lit(disj0'#0), #M0.Literal.litTrue())
                           then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprLiteral(Lit(#M0.Literal.litTrue())))), st'#2)
                           else (if M0.Expression.exprLiteral_q(disj0'#0)
                               && M0.Literal#Equal(M0.Expression.lit(disj0'#0), #M0.Literal.litFalse())
                             then M0.__default.eval($ly, 
                              reveal_M0._default.eval, 
                              M0.Expression.disj1(expr#0), 
                              st'#2, 
                              env#0, 
                              useCache#0)
                             else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)))))
                     else (if M0.Expression.exprInvocation_q(expr#0)
                       then (var resultFun#0 := M0.__default.eval($ly, reveal_M0._default.eval, M0.Expression.fun(expr#0), st#0, env#0, useCache#0); 
                        (var fun'#0, st'#3 := $Unbox(M0.Tuple.fst(resultFun#0)): DatatypeType, M0.Tuple.snd(resultFun#0); 
                          (var resultArgs#0 := M0.__default.evalArgs($ly, expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0); 
                            (var args'#0, sts'#0 := $Unbox(M0.Tuple.fst(resultArgs#0)): Seq, $Unbox(M0.Tuple.snd(resultArgs#0)): Set; 
                              (var sts''#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#3), sts'#0); 
                                (if !M0.__default.Compatible(sts''#0)
                                   then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rCompatibility())))), st#0)
                                   else (var stCombined#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#0, useCache#0); 
                                    (if M0.Expression.exprLiteral_q(fun'#0)
                                         && M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#0))
                                       then (if M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun'#0)))
                                         then (if Seq#Length(args'#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                             && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args'#0, stCombined#0)
                                           then (var cmd#0, deps#0, exps#0 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(0))): DatatypeType)), 
                                              M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(1))): DatatypeType)), 
                                              M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args'#0, LitInt(2))): DatatypeType)); 
                                            (if !useCache#0
                                               then (var ps#0 := M0.__default.exec(cmd#0, deps#0, exps#0, stCombined#0); 
                                                #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#0)): Set))), 
                                                  M0.Tuple.snd(ps#0)))
                                               else (if M0.__default.ConsistentCache(stCombined#0)
                                                 then (var ps#1 := M0.__default.execC(cmd#0, deps#0, exps#0, stCombined#0); 
                                                  #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#1)): Set))), 
                                                    M0.Tuple.snd(ps#1)))
                                                 else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))))
                                           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), st#0))
                                         else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))
                                       else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)))))))))
                       else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))))))));
// definition axiom for M0.__default.eval for decreasing-related literals (revealed)
axiom {:id "id252"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.eval($LS($ly), true, Lit(expr#0), st#0, env#0, useCache#0) } 
    M0.__default.eval#canCall(Lit(expr#0), st#0, env#0, useCache#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && M0.__default.ValidEnv(env#0))
       ==> M0.__default.Value#canCall(Lit(expr#0))
         && (!Lit(M0.__default.Value(Lit(expr#0)))
           ==> (Lit(M0.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> M0.__default.GetEnv#canCall(Lit(M0.Expression.id(Lit(expr#0))), env#0))
             && (!Lit(M0.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> (Lit(M0.Expression.exprIf_q(Lit(expr#0)))
                   ==> M0.__default.eval#canCall(Lit(M0.Expression.cond(Lit(expr#0))), st#0, env#0, useCache#0)
                     && (var result#3 := M0.__default.eval($LS($ly), 
                          reveal_M0._default.eval, 
                          Lit(M0.Expression.cond(Lit(expr#0))), 
                          st#0, 
                          env#0, 
                          useCache#0); 
                      M0.Tuple.Pair_q(result#3)
                         && M0.Tuple.Pair_q(result#3)
                         && (var cond'#1, st'#4 := $Unbox(M0.Tuple.fst(result#3)): DatatypeType, M0.Tuple.snd(result#3); 
                          (M0.Expression.exprLiteral_q(cond'#1)
                               ==> $IsA#M0.Literal(M0.Expression.lit(cond'#1)))
                             && (M0.Expression.exprLiteral_q(cond'#1)
                                 && M0.Literal#Equal(M0.Expression.lit(cond'#1), #M0.Literal.litTrue())
                               ==> M0.__default.eval#canCall(Lit(M0.Expression.ifTrue(Lit(expr#0))), st'#4, env#0, useCache#0))
                             && (!(M0.Expression.exprLiteral_q(cond'#1)
                                 && M0.Literal#Equal(M0.Expression.lit(cond'#1), #M0.Literal.litTrue()))
                               ==> (M0.Expression.exprLiteral_q(cond'#1)
                                   ==> $IsA#M0.Literal(M0.Expression.lit(cond'#1)))
                                 && (M0.Expression.exprLiteral_q(cond'#1)
                                     && M0.Literal#Equal(M0.Expression.lit(cond'#1), #M0.Literal.litFalse())
                                   ==> M0.__default.eval#canCall(Lit(M0.Expression.ifFalse(Lit(expr#0))), st'#4, env#0, useCache#0))))))
                 && (!Lit(M0.Expression.exprIf_q(Lit(expr#0)))
                   ==> (Lit(M0.Expression.exprAnd_q(Lit(expr#0)))
                       ==> M0.__default.eval#canCall(Lit(M0.Expression.conj0(Lit(expr#0))), st#0, env#0, useCache#0)
                         && (var result#4 := M0.__default.eval($LS($ly), 
                              reveal_M0._default.eval, 
                              Lit(M0.Expression.conj0(Lit(expr#0))), 
                              st#0, 
                              env#0, 
                              useCache#0); 
                          M0.Tuple.Pair_q(result#4)
                             && M0.Tuple.Pair_q(result#4)
                             && (var conj0'#1, st'#5 := $Unbox(M0.Tuple.fst(result#4)): DatatypeType, M0.Tuple.snd(result#4); 
                              (M0.Expression.exprLiteral_q(conj0'#1)
                                   ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#1)))
                                 && (M0.Expression.exprLiteral_q(conj0'#1)
                                     && M0.Literal#Equal(M0.Expression.lit(conj0'#1), #M0.Literal.litTrue())
                                   ==> M0.__default.eval#canCall(Lit(M0.Expression.conj1(Lit(expr#0))), st'#5, env#0, useCache#0))
                                 && (!(M0.Expression.exprLiteral_q(conj0'#1)
                                     && M0.Literal#Equal(M0.Expression.lit(conj0'#1), #M0.Literal.litTrue()))
                                   ==> 
                                  M0.Expression.exprLiteral_q(conj0'#1)
                                   ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#1))))))
                     && (!Lit(M0.Expression.exprAnd_q(Lit(expr#0)))
                       ==> (Lit(M0.Expression.exprOr_q(Lit(expr#0)))
                           ==> M0.__default.eval#canCall(Lit(M0.Expression.disj0(Lit(expr#0))), st#0, env#0, useCache#0)
                             && (var result#5 := M0.__default.eval($LS($ly), 
                                  reveal_M0._default.eval, 
                                  Lit(M0.Expression.disj0(Lit(expr#0))), 
                                  st#0, 
                                  env#0, 
                                  useCache#0); 
                              M0.Tuple.Pair_q(result#5)
                                 && M0.Tuple.Pair_q(result#5)
                                 && (var disj0'#1, st'#6 := $Unbox(M0.Tuple.fst(result#5)): DatatypeType, M0.Tuple.snd(result#5); 
                                  (M0.Expression.exprLiteral_q(disj0'#1)
                                       ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#1)))
                                     && (!(M0.Expression.exprLiteral_q(disj0'#1)
                                         && M0.Literal#Equal(M0.Expression.lit(disj0'#1), #M0.Literal.litTrue()))
                                       ==> (M0.Expression.exprLiteral_q(disj0'#1)
                                           ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#1)))
                                         && (M0.Expression.exprLiteral_q(disj0'#1)
                                             && M0.Literal#Equal(M0.Expression.lit(disj0'#1), #M0.Literal.litFalse())
                                           ==> M0.__default.eval#canCall(Lit(M0.Expression.disj1(Lit(expr#0))), st'#6, env#0, useCache#0))))))
                         && (!Lit(M0.Expression.exprOr_q(Lit(expr#0)))
                           ==> 
                          Lit(M0.Expression.exprInvocation_q(Lit(expr#0)))
                           ==> M0.__default.eval#canCall(Lit(M0.Expression.fun(Lit(expr#0))), st#0, env#0, useCache#0)
                             && (var resultFun#1 := M0.__default.eval($LS($ly), 
                                  reveal_M0._default.eval, 
                                  Lit(M0.Expression.fun(Lit(expr#0))), 
                                  st#0, 
                                  env#0, 
                                  useCache#0); 
                              M0.Tuple.Pair_q(resultFun#1)
                                 && M0.Tuple.Pair_q(resultFun#1)
                                 && (var fun'#1, st'#7 := $Unbox(M0.Tuple.fst(resultFun#1)): DatatypeType, M0.Tuple.snd(resultFun#1); 
                                  M0.__default.evalArgs#canCall(Lit(expr#0), Lit(M0.Expression.args(Lit(expr#0))), st#0, env#0, useCache#0)
                                     && (var resultArgs#1 := M0.__default.evalArgs($LS($ly), 
                                          Lit(expr#0), 
                                          Lit(M0.Expression.args(Lit(expr#0))), 
                                          st#0, 
                                          env#0, 
                                          useCache#0); 
                                      M0.Tuple.Pair_q(resultArgs#1)
                                         && M0.Tuple.Pair_q(resultArgs#1)
                                         && (var args'#1, sts'#1 := $Unbox(M0.Tuple.fst(resultArgs#1)): Seq, $Unbox(M0.Tuple.snd(resultArgs#1)): Set; 
                                          (var sts''#1 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#7), sts'#1); 
                                            M0.__default.Compatible#canCall(sts''#1)
                                               && (M0.__default.Compatible(sts''#1)
                                                 ==> M0.__default.Combine#canCall(sts''#1, useCache#0)
                                                   && (var stCombined#1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#1, useCache#0); 
                                                    M0.Expression.exprLiteral_q(fun'#1)
                                                         && M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#1))
                                                       ==> 
                                                      M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun'#1)))
                                                       ==> M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()))
                                                         && (Seq#Length(args'#1) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                                           ==> M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args'#1, stCombined#1))
                                                         && (Seq#Length(args'#1) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                                             && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args'#1, stCombined#1)
                                                           ==> (var cmd#1, deps#1, exps#1 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(0))): DatatypeType)), 
                                                              M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(1))): DatatypeType)), 
                                                              M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(2))): DatatypeType)); 
                                                            (!useCache#0
                                                                 ==> M0.__default.exec#canCall(cmd#1, deps#1, exps#1, stCombined#1)
                                                                   && (var ps#2 := M0.__default.exec(cmd#1, deps#1, exps#1, stCombined#1); 
                                                                    M0.Tuple.Pair_q(ps#2) && M0.Tuple.Pair_q(ps#2)))
                                                               && (useCache#0
                                                                 ==> M0.__default.ConsistentCache#canCall(stCombined#1)
                                                                   && (M0.__default.ConsistentCache(stCombined#1)
                                                                     ==> M0.__default.execC#canCall(cmd#1, deps#1, exps#1, stCombined#1)
                                                                       && (var ps#3 := M0.__default.execC(cmd#1, deps#1, exps#1, stCombined#1); 
                                                                        M0.Tuple.Pair_q(ps#3) && M0.Tuple.Pair_q(ps#3))))))))))))))))))
         && M0.__default.eval($LS($ly), true, Lit(expr#0), st#0, env#0, useCache#0)
           == (if M0.__default.Value(Lit(expr#0))
             then #M0.Tuple.Pair($Box(Lit(expr#0)), st#0)
             else (if M0.Expression.exprIdentifier_q(Lit(expr#0))
               then #M0.Tuple.Pair($Box(M0.__default.GetEnv(Lit(M0.Expression.id(Lit(expr#0))), env#0)), st#0)
               else (if M0.Expression.exprIf_q(Lit(expr#0))
                 then (var result#3 := M0.__default.eval($LS($ly), 
                      reveal_M0._default.eval, 
                      Lit(M0.Expression.cond(Lit(expr#0))), 
                      st#0, 
                      env#0, 
                      useCache#0); 
                  (var cond'#1, st'#4 := $Unbox(M0.Tuple.fst(result#3)): DatatypeType, M0.Tuple.snd(result#3); 
                    (if M0.Expression.exprLiteral_q(cond'#1)
                         && M0.Literal#Equal(M0.Expression.lit(cond'#1), #M0.Literal.litTrue())
                       then M0.__default.eval($LS($ly), 
                        reveal_M0._default.eval, 
                        Lit(M0.Expression.ifTrue(Lit(expr#0))), 
                        st'#4, 
                        env#0, 
                        useCache#0)
                       else (if M0.Expression.exprLiteral_q(cond'#1)
                           && M0.Literal#Equal(M0.Expression.lit(cond'#1), #M0.Literal.litFalse())
                         then M0.__default.eval($LS($ly), 
                          reveal_M0._default.eval, 
                          Lit(M0.Expression.ifFalse(Lit(expr#0))), 
                          st'#4, 
                          env#0, 
                          useCache#0)
                         else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)))))
                 else (if M0.Expression.exprAnd_q(Lit(expr#0))
                   then (var result#4 := M0.__default.eval($LS($ly), 
                        reveal_M0._default.eval, 
                        Lit(M0.Expression.conj0(Lit(expr#0))), 
                        st#0, 
                        env#0, 
                        useCache#0); 
                    (var conj0'#1, st'#5 := $Unbox(M0.Tuple.fst(result#4)): DatatypeType, M0.Tuple.snd(result#4); 
                      (if M0.Expression.exprLiteral_q(conj0'#1)
                           && M0.Literal#Equal(M0.Expression.lit(conj0'#1), #M0.Literal.litTrue())
                         then M0.__default.eval($LS($ly), 
                          reveal_M0._default.eval, 
                          Lit(M0.Expression.conj1(Lit(expr#0))), 
                          st'#5, 
                          env#0, 
                          useCache#0)
                         else (if M0.Expression.exprLiteral_q(conj0'#1)
                             && M0.Literal#Equal(M0.Expression.lit(conj0'#1), #M0.Literal.litFalse())
                           then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprLiteral(Lit(#M0.Literal.litFalse())))), st'#5)
                           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)))))
                   else (if M0.Expression.exprOr_q(Lit(expr#0))
                     then (var result#5 := M0.__default.eval($LS($ly), 
                          reveal_M0._default.eval, 
                          Lit(M0.Expression.disj0(Lit(expr#0))), 
                          st#0, 
                          env#0, 
                          useCache#0); 
                      (var disj0'#1, st'#6 := $Unbox(M0.Tuple.fst(result#5)): DatatypeType, M0.Tuple.snd(result#5); 
                        (if M0.Expression.exprLiteral_q(disj0'#1)
                             && M0.Literal#Equal(M0.Expression.lit(disj0'#1), #M0.Literal.litTrue())
                           then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprLiteral(Lit(#M0.Literal.litTrue())))), st'#6)
                           else (if M0.Expression.exprLiteral_q(disj0'#1)
                               && M0.Literal#Equal(M0.Expression.lit(disj0'#1), #M0.Literal.litFalse())
                             then M0.__default.eval($LS($ly), 
                              reveal_M0._default.eval, 
                              Lit(M0.Expression.disj1(Lit(expr#0))), 
                              st'#6, 
                              env#0, 
                              useCache#0)
                             else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)))))
                     else (if M0.Expression.exprInvocation_q(Lit(expr#0))
                       then (var resultFun#1 := M0.__default.eval($LS($ly), 
                            reveal_M0._default.eval, 
                            Lit(M0.Expression.fun(Lit(expr#0))), 
                            st#0, 
                            env#0, 
                            useCache#0); 
                        (var fun'#1, st'#7 := $Unbox(M0.Tuple.fst(resultFun#1)): DatatypeType, M0.Tuple.snd(resultFun#1); 
                          (var resultArgs#1 := M0.__default.evalArgs($LS($ly), 
                                Lit(expr#0), 
                                Lit(M0.Expression.args(Lit(expr#0))), 
                                st#0, 
                                env#0, 
                                useCache#0); 
                            (var args'#1, sts'#1 := $Unbox(M0.Tuple.fst(resultArgs#1)): Seq, $Unbox(M0.Tuple.snd(resultArgs#1)): Set; 
                              (var sts''#1 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#7), sts'#1); 
                                (if !M0.__default.Compatible(sts''#1)
                                   then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rCompatibility())))), st#0)
                                   else (var stCombined#1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#1, useCache#0); 
                                    (if M0.Expression.exprLiteral_q(fun'#1)
                                         && M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#1))
                                       then (if M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun'#1)))
                                         then (if Seq#Length(args'#1) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                             && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args'#1, stCombined#1)
                                           then (var cmd#1, deps#1, exps#1 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(0))): DatatypeType)), 
                                              M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(1))): DatatypeType)), 
                                              M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args'#1, LitInt(2))): DatatypeType)); 
                                            (if !useCache#0
                                               then (var ps#2 := M0.__default.exec(cmd#1, deps#1, exps#1, stCombined#1); 
                                                #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#2)): Set))), 
                                                  M0.Tuple.snd(ps#2)))
                                               else (if M0.__default.ConsistentCache(stCombined#1)
                                                 then (var ps#3 := M0.__default.execC(cmd#1, deps#1, exps#1, stCombined#1); 
                                                  #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#3)): Set))), 
                                                    M0.Tuple.snd(ps#3)))
                                                 else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))))
                                           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), st#0))
                                         else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))
                                       else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)))))))))
                       else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))))))));
// definition axiom for M0.__default.eval for all literals (revealed)
axiom {:id "id253"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.eval($LS($ly), true, Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0)) } 
    M0.__default.eval#canCall(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && M0.__default.ValidEnv(Lit(env#0)))
       ==> M0.__default.Value#canCall(Lit(expr#0))
         && (!Lit(M0.__default.Value(Lit(expr#0)))
           ==> (Lit(M0.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> M0.__default.GetEnv#canCall(Lit(M0.Expression.id(Lit(expr#0))), Lit(env#0)))
             && (!Lit(M0.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> (Lit(M0.Expression.exprIf_q(Lit(expr#0)))
                   ==> M0.__default.eval#canCall(Lit(M0.Expression.cond(Lit(expr#0))), Lit(st#0), Lit(env#0), Lit(useCache#0))
                     && (var result#6 := M0.__default.eval($LS($ly), 
                          reveal_M0._default.eval, 
                          Lit(M0.Expression.cond(Lit(expr#0))), 
                          Lit(st#0), 
                          Lit(env#0), 
                          Lit(useCache#0)); 
                      M0.Tuple.Pair_q(result#6)
                         && M0.Tuple.Pair_q(result#6)
                         && (var cond'#2, st'#8 := $Unbox(M0.Tuple.fst(result#6)): DatatypeType, M0.Tuple.snd(result#6); 
                          (M0.Expression.exprLiteral_q(cond'#2)
                               ==> $IsA#M0.Literal(M0.Expression.lit(cond'#2)))
                             && (M0.Expression.exprLiteral_q(cond'#2)
                                 && M0.Literal#Equal(M0.Expression.lit(cond'#2), #M0.Literal.litTrue())
                               ==> M0.__default.eval#canCall(Lit(M0.Expression.ifTrue(Lit(expr#0))), st'#8, Lit(env#0), Lit(useCache#0)))
                             && (!(M0.Expression.exprLiteral_q(cond'#2)
                                 && M0.Literal#Equal(M0.Expression.lit(cond'#2), #M0.Literal.litTrue()))
                               ==> (M0.Expression.exprLiteral_q(cond'#2)
                                   ==> $IsA#M0.Literal(M0.Expression.lit(cond'#2)))
                                 && (M0.Expression.exprLiteral_q(cond'#2)
                                     && M0.Literal#Equal(M0.Expression.lit(cond'#2), #M0.Literal.litFalse())
                                   ==> M0.__default.eval#canCall(Lit(M0.Expression.ifFalse(Lit(expr#0))), st'#8, Lit(env#0), Lit(useCache#0)))))))
                 && (!Lit(M0.Expression.exprIf_q(Lit(expr#0)))
                   ==> (Lit(M0.Expression.exprAnd_q(Lit(expr#0)))
                       ==> M0.__default.eval#canCall(Lit(M0.Expression.conj0(Lit(expr#0))), Lit(st#0), Lit(env#0), Lit(useCache#0))
                         && (var result#7 := M0.__default.eval($LS($ly), 
                              reveal_M0._default.eval, 
                              Lit(M0.Expression.conj0(Lit(expr#0))), 
                              Lit(st#0), 
                              Lit(env#0), 
                              Lit(useCache#0)); 
                          M0.Tuple.Pair_q(result#7)
                             && M0.Tuple.Pair_q(result#7)
                             && (var conj0'#2, st'#9 := $Unbox(M0.Tuple.fst(result#7)): DatatypeType, M0.Tuple.snd(result#7); 
                              (M0.Expression.exprLiteral_q(conj0'#2)
                                   ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#2)))
                                 && (M0.Expression.exprLiteral_q(conj0'#2)
                                     && M0.Literal#Equal(M0.Expression.lit(conj0'#2), #M0.Literal.litTrue())
                                   ==> M0.__default.eval#canCall(Lit(M0.Expression.conj1(Lit(expr#0))), st'#9, Lit(env#0), Lit(useCache#0)))
                                 && (!(M0.Expression.exprLiteral_q(conj0'#2)
                                     && M0.Literal#Equal(M0.Expression.lit(conj0'#2), #M0.Literal.litTrue()))
                                   ==> 
                                  M0.Expression.exprLiteral_q(conj0'#2)
                                   ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#2))))))
                     && (!Lit(M0.Expression.exprAnd_q(Lit(expr#0)))
                       ==> (Lit(M0.Expression.exprOr_q(Lit(expr#0)))
                           ==> M0.__default.eval#canCall(Lit(M0.Expression.disj0(Lit(expr#0))), Lit(st#0), Lit(env#0), Lit(useCache#0))
                             && (var result#8 := M0.__default.eval($LS($ly), 
                                  reveal_M0._default.eval, 
                                  Lit(M0.Expression.disj0(Lit(expr#0))), 
                                  Lit(st#0), 
                                  Lit(env#0), 
                                  Lit(useCache#0)); 
                              M0.Tuple.Pair_q(result#8)
                                 && M0.Tuple.Pair_q(result#8)
                                 && (var disj0'#2, st'#10 := $Unbox(M0.Tuple.fst(result#8)): DatatypeType, M0.Tuple.snd(result#8); 
                                  (M0.Expression.exprLiteral_q(disj0'#2)
                                       ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#2)))
                                     && (!(M0.Expression.exprLiteral_q(disj0'#2)
                                         && M0.Literal#Equal(M0.Expression.lit(disj0'#2), #M0.Literal.litTrue()))
                                       ==> (M0.Expression.exprLiteral_q(disj0'#2)
                                           ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#2)))
                                         && (M0.Expression.exprLiteral_q(disj0'#2)
                                             && M0.Literal#Equal(M0.Expression.lit(disj0'#2), #M0.Literal.litFalse())
                                           ==> M0.__default.eval#canCall(Lit(M0.Expression.disj1(Lit(expr#0))), st'#10, Lit(env#0), Lit(useCache#0)))))))
                         && (!Lit(M0.Expression.exprOr_q(Lit(expr#0)))
                           ==> 
                          Lit(M0.Expression.exprInvocation_q(Lit(expr#0)))
                           ==> M0.__default.eval#canCall(Lit(M0.Expression.fun(Lit(expr#0))), Lit(st#0), Lit(env#0), Lit(useCache#0))
                             && (var resultFun#2 := M0.__default.eval($LS($ly), 
                                  reveal_M0._default.eval, 
                                  Lit(M0.Expression.fun(Lit(expr#0))), 
                                  Lit(st#0), 
                                  Lit(env#0), 
                                  Lit(useCache#0)); 
                              M0.Tuple.Pair_q(resultFun#2)
                                 && M0.Tuple.Pair_q(resultFun#2)
                                 && (var fun'#2, st'#11 := $Unbox(M0.Tuple.fst(resultFun#2)): DatatypeType, M0.Tuple.snd(resultFun#2); 
                                  M0.__default.evalArgs#canCall(Lit(expr#0), 
                                      Lit(M0.Expression.args(Lit(expr#0))), 
                                      Lit(st#0), 
                                      Lit(env#0), 
                                      Lit(useCache#0))
                                     && (var resultArgs#2 := Lit(M0.__default.evalArgs($LS($ly), 
                                            Lit(expr#0), 
                                            Lit(M0.Expression.args(Lit(expr#0))), 
                                            Lit(st#0), 
                                            Lit(env#0), 
                                            Lit(useCache#0))); 
                                      M0.Tuple.Pair_q(resultArgs#2)
                                         && M0.Tuple.Pair_q(resultArgs#2)
                                         && (var args'#2, sts'#2 := $Unbox(M0.Tuple.fst(resultArgs#2)): Seq, $Unbox(M0.Tuple.snd(resultArgs#2)): Set; 
                                          (var sts''#2 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#11), sts'#2); 
                                            M0.__default.Compatible#canCall(sts''#2)
                                               && (M0.__default.Compatible(sts''#2)
                                                 ==> M0.__default.Combine#canCall(sts''#2, Lit(useCache#0))
                                                   && (var stCombined#2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#2, Lit(useCache#0)); 
                                                    M0.Expression.exprLiteral_q(fun'#2)
                                                         && M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#2))
                                                       ==> 
                                                      M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun'#2)))
                                                       ==> M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()))
                                                         && (Seq#Length(args'#2) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                                           ==> M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args'#2, stCombined#2))
                                                         && (Seq#Length(args'#2) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                                             && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args'#2, stCombined#2)
                                                           ==> (var cmd#2, deps#2, exps#2 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(0))): DatatypeType)), 
                                                              M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(1))): DatatypeType)), 
                                                              M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(2))): DatatypeType)); 
                                                            (!Lit(useCache#0)
                                                                 ==> M0.__default.exec#canCall(cmd#2, deps#2, exps#2, stCombined#2)
                                                                   && (var ps#4 := M0.__default.exec(cmd#2, deps#2, exps#2, stCombined#2); 
                                                                    M0.Tuple.Pair_q(ps#4) && M0.Tuple.Pair_q(ps#4)))
                                                               && (Lit(useCache#0)
                                                                 ==> M0.__default.ConsistentCache#canCall(stCombined#2)
                                                                   && (M0.__default.ConsistentCache(stCombined#2)
                                                                     ==> M0.__default.execC#canCall(cmd#2, deps#2, exps#2, stCombined#2)
                                                                       && (var ps#5 := M0.__default.execC(cmd#2, deps#2, exps#2, stCombined#2); 
                                                                        M0.Tuple.Pair_q(ps#5) && M0.Tuple.Pair_q(ps#5))))))))))))))))))
         && M0.__default.eval($LS($ly), true, Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0))
           == (if M0.__default.Value(Lit(expr#0))
             then #M0.Tuple.Pair($Box(Lit(expr#0)), Lit(st#0))
             else (if M0.Expression.exprIdentifier_q(Lit(expr#0))
               then #M0.Tuple.Pair($Box(M0.__default.GetEnv(Lit(M0.Expression.id(Lit(expr#0))), Lit(env#0))), 
                Lit(st#0))
               else (if M0.Expression.exprIf_q(Lit(expr#0))
                 then (var result#6 := M0.__default.eval($LS($ly), 
                      reveal_M0._default.eval, 
                      Lit(M0.Expression.cond(Lit(expr#0))), 
                      Lit(st#0), 
                      Lit(env#0), 
                      Lit(useCache#0)); 
                  (var cond'#2, st'#8 := $Unbox(M0.Tuple.fst(result#6)): DatatypeType, M0.Tuple.snd(result#6); 
                    (if M0.Expression.exprLiteral_q(cond'#2)
                         && M0.Literal#Equal(M0.Expression.lit(cond'#2), #M0.Literal.litTrue())
                       then M0.__default.eval($LS($ly), 
                        reveal_M0._default.eval, 
                        Lit(M0.Expression.ifTrue(Lit(expr#0))), 
                        st'#8, 
                        Lit(env#0), 
                        Lit(useCache#0))
                       else (if M0.Expression.exprLiteral_q(cond'#2)
                           && M0.Literal#Equal(M0.Expression.lit(cond'#2), #M0.Literal.litFalse())
                         then M0.__default.eval($LS($ly), 
                          reveal_M0._default.eval, 
                          Lit(M0.Expression.ifFalse(Lit(expr#0))), 
                          st'#8, 
                          Lit(env#0), 
                          Lit(useCache#0))
                         else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(st#0))))))
                 else (if M0.Expression.exprAnd_q(Lit(expr#0))
                   then (var result#7 := M0.__default.eval($LS($ly), 
                        reveal_M0._default.eval, 
                        Lit(M0.Expression.conj0(Lit(expr#0))), 
                        Lit(st#0), 
                        Lit(env#0), 
                        Lit(useCache#0)); 
                    (var conj0'#2, st'#9 := $Unbox(M0.Tuple.fst(result#7)): DatatypeType, M0.Tuple.snd(result#7); 
                      (if M0.Expression.exprLiteral_q(conj0'#2)
                           && M0.Literal#Equal(M0.Expression.lit(conj0'#2), #M0.Literal.litTrue())
                         then M0.__default.eval($LS($ly), 
                          reveal_M0._default.eval, 
                          Lit(M0.Expression.conj1(Lit(expr#0))), 
                          st'#9, 
                          Lit(env#0), 
                          Lit(useCache#0))
                         else (if M0.Expression.exprLiteral_q(conj0'#2)
                             && M0.Literal#Equal(M0.Expression.lit(conj0'#2), #M0.Literal.litFalse())
                           then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprLiteral(Lit(#M0.Literal.litFalse())))), st'#9)
                           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(st#0))))))
                   else (if M0.Expression.exprOr_q(Lit(expr#0))
                     then (var result#8 := M0.__default.eval($LS($ly), 
                          reveal_M0._default.eval, 
                          Lit(M0.Expression.disj0(Lit(expr#0))), 
                          Lit(st#0), 
                          Lit(env#0), 
                          Lit(useCache#0)); 
                      (var disj0'#2, st'#10 := $Unbox(M0.Tuple.fst(result#8)): DatatypeType, M0.Tuple.snd(result#8); 
                        (if M0.Expression.exprLiteral_q(disj0'#2)
                             && M0.Literal#Equal(M0.Expression.lit(disj0'#2), #M0.Literal.litTrue())
                           then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprLiteral(Lit(#M0.Literal.litTrue())))), st'#10)
                           else (if M0.Expression.exprLiteral_q(disj0'#2)
                               && M0.Literal#Equal(M0.Expression.lit(disj0'#2), #M0.Literal.litFalse())
                             then M0.__default.eval($LS($ly), 
                              reveal_M0._default.eval, 
                              Lit(M0.Expression.disj1(Lit(expr#0))), 
                              st'#10, 
                              Lit(env#0), 
                              Lit(useCache#0))
                             else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(st#0))))))
                     else (if M0.Expression.exprInvocation_q(Lit(expr#0))
                       then (var resultFun#2 := M0.__default.eval($LS($ly), 
                            reveal_M0._default.eval, 
                            Lit(M0.Expression.fun(Lit(expr#0))), 
                            Lit(st#0), 
                            Lit(env#0), 
                            Lit(useCache#0)); 
                        (var fun'#2, st'#11 := $Unbox(M0.Tuple.fst(resultFun#2)): DatatypeType, M0.Tuple.snd(resultFun#2); 
                          (var resultArgs#2 := Lit(M0.__default.evalArgs($LS($ly), 
                                  Lit(expr#0), 
                                  Lit(M0.Expression.args(Lit(expr#0))), 
                                  Lit(st#0), 
                                  Lit(env#0), 
                                  Lit(useCache#0))); 
                            (var args'#2, sts'#2 := Lit($Unbox(M0.Tuple.fst(resultArgs#2)): Seq), 
                                Lit($Unbox(M0.Tuple.snd(resultArgs#2)): Set); 
                              (var sts''#2 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#11), sts'#2); 
                                (if !M0.__default.Compatible(sts''#2)
                                   then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rCompatibility())))), Lit(st#0))
                                   else (var stCombined#2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#2, Lit(useCache#0)); 
                                    (if M0.Expression.exprLiteral_q(fun'#2)
                                         && M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#2))
                                       then (if M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun'#2)))
                                         then (if Seq#Length(args'#2) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                             && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args'#2, stCombined#2)
                                           then (var cmd#2, deps#2, exps#2 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(0))): DatatypeType)), 
                                              M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(1))): DatatypeType)), 
                                              M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args'#2, LitInt(2))): DatatypeType)); 
                                            (if !Lit(useCache#0)
                                               then (var ps#4 := M0.__default.exec(cmd#2, deps#2, exps#2, stCombined#2); 
                                                #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#4)): Set))), 
                                                  M0.Tuple.snd(ps#4)))
                                               else (if M0.__default.ConsistentCache(stCombined#2)
                                                 then (var ps#5 := M0.__default.execC(cmd#2, deps#2, exps#2, stCombined#2); 
                                                  #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#5)): Set))), 
                                                    M0.Tuple.snd(ps#5)))
                                                 else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(st#0)))))
                                           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), 
                                            Lit(st#0)))
                                         else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(st#0)))
                                       else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(st#0))))))))))
                       else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(st#0)))))))));
}

function M0.__default.eval#canCall(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, 
    $reveal: bool, 
    expr#0: DatatypeType, 
    st#0: Box, 
    env#0: Box, 
    useCache#0: bool :: 
  { M0.__default.eval($LS($ly), $reveal, expr#0, st#0, env#0, useCache#0) } 
  M0.__default.eval($LS($ly), $reveal, expr#0, st#0, env#0, useCache#0)
     == M0.__default.eval($ly, $reveal, expr#0, st#0, env#0, useCache#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, 
    $reveal: bool, 
    expr#0: DatatypeType, 
    st#0: Box, 
    env#0: Box, 
    useCache#0: bool :: 
  { M0.__default.eval(AsFuelBottom($ly), $reveal, expr#0, st#0, env#0, useCache#0) } 
  M0.__default.eval($ly, $reveal, expr#0, st#0, env#0, useCache#0)
     == M0.__default.eval($LZ, $reveal, expr#0, st#0, env#0, useCache#0));

function M0.__default.eval#requires(LayerType, DatatypeType, Box, Box, bool) : bool;

// #requires axiom for M0.__default.eval
axiom (forall $ly: LayerType, expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
  { M0.__default.eval#requires($ly, expr#0, st#0, env#0, useCache#0) } 
  $Is(expr#0, Tclass.M0.Expression())
       && $IsBox(st#0, Tclass.M0.State())
       && $IsBox(env#0, Tclass.M0.Env())
     ==> M0.__default.eval#requires($ly, expr#0, st#0, env#0, useCache#0)
       == M0.__default.ValidEnv(env#0));

procedure {:verboseName "M0.eval (well-formedness)"} CheckWellformed$$M0.__default.eval(expr#0: DatatypeType where $Is(expr#0, Tclass.M0.Expression()), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()), 
    env#0: Box where $IsBox(env#0, Tclass.M0.Env()), 
    useCache#0: bool);
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



function Tclass.M0.Primitive() : Ty
uses {
// Tclass.M0.Primitive Tag
axiom Tag(Tclass.M0.Primitive()) == Tagclass.M0.Primitive
   && TagFamily(Tclass.M0.Primitive()) == tytagFamily$Primitive;
}

const unique Tagclass.M0.Primitive: TyTag;

// Box/unbox axiom for Tclass.M0.Primitive
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M0.Primitive()) } 
  $IsBox(bx, Tclass.M0.Primitive())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M0.Primitive()));

implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.eval (well-formedness)"} CheckWellformed$$M0.__default.eval(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: Box;
  var ##expr#0: DatatypeType;
  var ##id#0: Box;
  var ##env#1: Box;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##expr#1: DatatypeType;
  var ##st#0: Box;
  var ##env#2: Box;
  var ##useCache#0: bool;
  var cond'#Z#0: DatatypeType;
  var st'#Z#0: Box;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: Box;
  var ##expr#2: DatatypeType;
  var ##st#1: Box;
  var ##env#3: Box;
  var ##useCache#1: bool;
  var ##expr#3: DatatypeType;
  var ##st#2: Box;
  var ##env#4: Box;
  var ##useCache#2: bool;
  var result#Z#1: DatatypeType;
  var let#2#0#0: DatatypeType;
  var ##expr#4: DatatypeType;
  var ##st#3: Box;
  var ##env#5: Box;
  var ##useCache#3: bool;
  var conj0'#Z#0: DatatypeType;
  var st'#Z#1: Box;
  var let#3#0#0: DatatypeType;
  var let#3#1#0: Box;
  var ##expr#5: DatatypeType;
  var ##st#4: Box;
  var ##env#6: Box;
  var ##useCache#4: bool;
  var result#Z#2: DatatypeType;
  var let#4#0#0: DatatypeType;
  var ##expr#6: DatatypeType;
  var ##st#5: Box;
  var ##env#7: Box;
  var ##useCache#5: bool;
  var disj0'#Z#0: DatatypeType;
  var st'#Z#2: Box;
  var let#5#0#0: DatatypeType;
  var let#5#1#0: Box;
  var ##expr#7: DatatypeType;
  var ##st#6: Box;
  var ##env#8: Box;
  var ##useCache#6: bool;
  var resultFun#Z#0: DatatypeType;
  var let#6#0#0: DatatypeType;
  var ##expr#8: DatatypeType;
  var ##st#7: Box;
  var ##env#9: Box;
  var ##useCache#7: bool;
  var fun'#Z#0: DatatypeType;
  var st'#Z#3: Box;
  var let#7#0#0: DatatypeType;
  var let#7#1#0: Box;
  var resultArgs#Z#0: DatatypeType;
  var let#8#0#0: DatatypeType;
  var ##context#0: DatatypeType;
  var ##args#0: Seq;
  var ##stOrig#0: Box;
  var ##env#10: Box;
  var ##useCache#8: bool;
  var args'#Z#0: Seq;
  var sts'#Z#0: Set;
  var let#9#0#0: Seq;
  var let#9#1#0: Set;
  var sts''#Z#0: Set;
  var let#10#0#0: Set;
  var ##sts#0: Set;
  var stCombined#Z#0: Box;
  var let#11#0#0: Box;
  var ##sts#1: Set;
  var ##useCache#9: bool;
  var ##prim#0: DatatypeType;
  var ##prim#1: DatatypeType;
  var ##args#1: Seq;
  var ##st#8: Box;
  var cmd#Z#0: Seq;
  var deps#Z#0: Set;
  var exps#Z#0: Set;
  var let#12#0#0: Seq;
  var let#12#1#0: Set;
  var let#12#2#0: Set;
  var ps#Z#0: DatatypeType;
  var let#13#0#0: DatatypeType;
  var ##cmd#0: Seq;
  var ##deps#0: Set;
  var ##exps#0: Set;
  var ##st#9: Box;
  var ##stC#0: Box;
  var ps#Z#1: DatatypeType;
  var let#14#0#0: DatatypeType;
  var ##cmd#1: Seq;
  var ##deps#1: Set;
  var ##exps#1: Set;
  var ##stC#1: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id254"} M0.__default.ValidEnv(env#0);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##expr#0 := expr#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
        assume M0.__default.Value#canCall(expr#0);
        if (M0.__default.Value(expr#0))
        {
            assume {:id "id255"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
               == #M0.Tuple.Pair($Box(expr#0), st#0);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
              Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
            return;
        }
        else
        {
            if (M0.Expression.exprIdentifier_q(expr#0))
            {
                assert {:id "id256"} M0.Expression.exprIdentifier_q(expr#0);
                ##id#0 := M0.Expression.id(expr#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##id#0, Tclass.M0.Identifier(), $Heap);
                ##env#1 := env#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
                assert {:id "id257"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
                assume M0.__default.ValidEnv(##env#1);
                assume M0.__default.GetEnv#canCall(M0.Expression.id(expr#0), env#0);
                assume {:id "id258"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                   == #M0.Tuple.Pair($Box(M0.__default.GetEnv(M0.Expression.id(expr#0), env#0)), st#0);
                assume M0.__default.GetEnv#canCall(M0.Expression.id(expr#0), env#0);
                // CheckWellformedWithResult: any expression
                assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                  Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                return;
            }
            else
            {
                if (M0.Expression.exprIf_q(expr#0))
                {
                    havoc result#Z#0;
                    assert {:id "id259"} M0.Expression.exprIf_q(expr#0);
                    ##expr#1 := M0.Expression.cond(expr#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
                    ##st#0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
                    ##env#2 := env#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
                    ##useCache#0 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#0, TBool, $Heap);
                    assert {:id "id260"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
                    assume M0.__default.ValidEnv(##env#2);
                    assert {:id "id261"} DtRank(##expr#1) < DtRank(expr#0);
                    assume M0.__default.eval#canCall(M0.Expression.cond(expr#0), st#0, env#0, useCache#0);
                    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                        reveal_M0._default.eval, 
                        M0.Expression.cond(expr#0), 
                        st#0, 
                        env#0, 
                        useCache#0));
                    assume {:id "id262"} let#0#0#0
                       == M0.__default.eval($LS($LZ), 
                        reveal_M0._default.eval, 
                        M0.Expression.cond(expr#0), 
                        st#0, 
                        env#0, 
                        useCache#0);
                    assume M0.__default.eval#canCall(M0.Expression.cond(expr#0), st#0, env#0, useCache#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#0#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                    assume {:id "id263"} result#Z#0 == let#0#0#0;
                    havoc cond'#Z#0;
                    havoc st'#Z#0;
                    assume M0.Tuple.Pair_q(result#Z#0);
                    assume {:id "id264"} let#1#0#0 == $Unbox(M0.Tuple.fst(result#Z#0)): DatatypeType;
                    assume M0.Tuple.Pair_q(result#Z#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#1#0#0, Tclass.M0.Expression());
                    assume {:id "id265"} cond'#Z#0 == let#1#0#0;
                    assume M0.Tuple.Pair_q(result#Z#0);
                    assume {:id "id266"} let#1#1#0 == M0.Tuple.snd(result#Z#0);
                    assume M0.Tuple.Pair_q(result#Z#0);
                    // CheckWellformedWithResult: any expression
                    assume $IsBox(let#1#1#0, Tclass.M0.State());
                    assume {:id "id267"} st'#Z#0 == let#1#1#0;
                    if (M0.Expression.exprLiteral_q(cond'#Z#0))
                    {
                        assert {:id "id268"} M0.Expression.exprLiteral_q(cond'#Z#0);
                    }

                    if (M0.Expression.exprLiteral_q(cond'#Z#0)
                       && M0.Literal#Equal(M0.Expression.lit(cond'#Z#0), #M0.Literal.litTrue()))
                    {
                        assert {:id "id269"} M0.Expression.exprIf_q(expr#0);
                        ##expr#2 := M0.Expression.ifTrue(expr#0);
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##expr#2, Tclass.M0.Expression(), $Heap);
                        ##st#1 := st'#Z#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
                        ##env#3 := env#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##env#3, Tclass.M0.Env(), $Heap);
                        ##useCache#1 := useCache#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##useCache#1, TBool, $Heap);
                        assert {:id "id270"} {:subsumption 0} M0.__default.ValidEnv(##env#3);
                        assume M0.__default.ValidEnv(##env#3);
                        assert {:id "id271"} DtRank(##expr#2) < DtRank(expr#0);
                        assume M0.__default.eval#canCall(M0.Expression.ifTrue(expr#0), st'#Z#0, env#0, useCache#0);
                        assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                            reveal_M0._default.eval, 
                            M0.Expression.ifTrue(expr#0), 
                            st'#Z#0, 
                            env#0, 
                            useCache#0));
                        assume {:id "id272"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                           == M0.__default.eval($LS($LZ), 
                            reveal_M0._default.eval, 
                            M0.Expression.ifTrue(expr#0), 
                            st'#Z#0, 
                            env#0, 
                            useCache#0);
                        assume M0.__default.eval#canCall(M0.Expression.ifTrue(expr#0), st'#Z#0, env#0, useCache#0);
                        // CheckWellformedWithResult: any expression
                        assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                        return;
                    }
                    else
                    {
                        if (M0.Expression.exprLiteral_q(cond'#Z#0))
                        {
                            assert {:id "id273"} M0.Expression.exprLiteral_q(cond'#Z#0);
                        }

                        if (M0.Expression.exprLiteral_q(cond'#Z#0)
                           && M0.Literal#Equal(M0.Expression.lit(cond'#Z#0), #M0.Literal.litFalse()))
                        {
                            assert {:id "id274"} M0.Expression.exprIf_q(expr#0);
                            ##expr#3 := M0.Expression.ifFalse(expr#0);
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##expr#3, Tclass.M0.Expression(), $Heap);
                            ##st#2 := st'#Z#0;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
                            ##env#4 := env#0;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##env#4, Tclass.M0.Env(), $Heap);
                            ##useCache#2 := useCache#0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##useCache#2, TBool, $Heap);
                            assert {:id "id275"} {:subsumption 0} M0.__default.ValidEnv(##env#4);
                            assume M0.__default.ValidEnv(##env#4);
                            assert {:id "id276"} DtRank(##expr#3) < DtRank(expr#0);
                            assume M0.__default.eval#canCall(M0.Expression.ifFalse(expr#0), st'#Z#0, env#0, useCache#0);
                            assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                                reveal_M0._default.eval, 
                                M0.Expression.ifFalse(expr#0), 
                                st'#Z#0, 
                                env#0, 
                                useCache#0));
                            assume {:id "id277"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                               == M0.__default.eval($LS($LZ), 
                                reveal_M0._default.eval, 
                                M0.Expression.ifFalse(expr#0), 
                                st'#Z#0, 
                                env#0, 
                                useCache#0);
                            assume M0.__default.eval#canCall(M0.Expression.ifFalse(expr#0), st'#Z#0, env#0, useCache#0);
                            // CheckWellformedWithResult: any expression
                            assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                              Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                            return;
                        }
                        else
                        {
                            assume {:id "id278"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                               == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0);
                            assume true;
                            // CheckWellformedWithResult: any expression
                            assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                              Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                            return;
                        }
                    }
                }
                else
                {
                    if (M0.Expression.exprAnd_q(expr#0))
                    {
                        havoc result#Z#1;
                        assert {:id "id279"} M0.Expression.exprAnd_q(expr#0);
                        ##expr#4 := M0.Expression.conj0(expr#0);
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##expr#4, Tclass.M0.Expression(), $Heap);
                        ##st#3 := st#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
                        ##env#5 := env#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##env#5, Tclass.M0.Env(), $Heap);
                        ##useCache#3 := useCache#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##useCache#3, TBool, $Heap);
                        assert {:id "id280"} {:subsumption 0} M0.__default.ValidEnv(##env#5);
                        assume M0.__default.ValidEnv(##env#5);
                        assert {:id "id281"} DtRank(##expr#4) < DtRank(expr#0);
                        assume M0.__default.eval#canCall(M0.Expression.conj0(expr#0), st#0, env#0, useCache#0);
                        assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                            reveal_M0._default.eval, 
                            M0.Expression.conj0(expr#0), 
                            st#0, 
                            env#0, 
                            useCache#0));
                        assume {:id "id282"} let#2#0#0
                           == M0.__default.eval($LS($LZ), 
                            reveal_M0._default.eval, 
                            M0.Expression.conj0(expr#0), 
                            st#0, 
                            env#0, 
                            useCache#0);
                        assume M0.__default.eval#canCall(M0.Expression.conj0(expr#0), st#0, env#0, useCache#0);
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#2#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                        assume {:id "id283"} result#Z#1 == let#2#0#0;
                        havoc conj0'#Z#0;
                        havoc st'#Z#1;
                        assume M0.Tuple.Pair_q(result#Z#1);
                        assume {:id "id284"} let#3#0#0 == $Unbox(M0.Tuple.fst(result#Z#1)): DatatypeType;
                        assume M0.Tuple.Pair_q(result#Z#1);
                        // CheckWellformedWithResult: any expression
                        assume $Is(let#3#0#0, Tclass.M0.Expression());
                        assume {:id "id285"} conj0'#Z#0 == let#3#0#0;
                        assume M0.Tuple.Pair_q(result#Z#1);
                        assume {:id "id286"} let#3#1#0 == M0.Tuple.snd(result#Z#1);
                        assume M0.Tuple.Pair_q(result#Z#1);
                        // CheckWellformedWithResult: any expression
                        assume $IsBox(let#3#1#0, Tclass.M0.State());
                        assume {:id "id287"} st'#Z#1 == let#3#1#0;
                        if (M0.Expression.exprLiteral_q(conj0'#Z#0))
                        {
                            assert {:id "id288"} M0.Expression.exprLiteral_q(conj0'#Z#0);
                        }

                        if (M0.Expression.exprLiteral_q(conj0'#Z#0)
                           && M0.Literal#Equal(M0.Expression.lit(conj0'#Z#0), #M0.Literal.litTrue()))
                        {
                            assert {:id "id289"} M0.Expression.exprAnd_q(expr#0);
                            ##expr#5 := M0.Expression.conj1(expr#0);
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##expr#5, Tclass.M0.Expression(), $Heap);
                            ##st#4 := st'#Z#1;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
                            ##env#6 := env#0;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##env#6, Tclass.M0.Env(), $Heap);
                            ##useCache#4 := useCache#0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##useCache#4, TBool, $Heap);
                            assert {:id "id290"} {:subsumption 0} M0.__default.ValidEnv(##env#6);
                            assume M0.__default.ValidEnv(##env#6);
                            assert {:id "id291"} DtRank(##expr#5) < DtRank(expr#0);
                            assume M0.__default.eval#canCall(M0.Expression.conj1(expr#0), st'#Z#1, env#0, useCache#0);
                            assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                                reveal_M0._default.eval, 
                                M0.Expression.conj1(expr#0), 
                                st'#Z#1, 
                                env#0, 
                                useCache#0));
                            assume {:id "id292"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                               == M0.__default.eval($LS($LZ), 
                                reveal_M0._default.eval, 
                                M0.Expression.conj1(expr#0), 
                                st'#Z#1, 
                                env#0, 
                                useCache#0);
                            assume M0.__default.eval#canCall(M0.Expression.conj1(expr#0), st'#Z#1, env#0, useCache#0);
                            // CheckWellformedWithResult: any expression
                            assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                              Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                            return;
                        }
                        else
                        {
                            if (M0.Expression.exprLiteral_q(conj0'#Z#0))
                            {
                                assert {:id "id293"} M0.Expression.exprLiteral_q(conj0'#Z#0);
                            }

                            if (M0.Expression.exprLiteral_q(conj0'#Z#0)
                               && M0.Literal#Equal(M0.Expression.lit(conj0'#Z#0), #M0.Literal.litFalse()))
                            {
                                assume {:id "id294"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                   == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprLiteral(Lit(#M0.Literal.litFalse())))), st'#Z#1);
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                  Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                return;
                            }
                            else
                            {
                                assume {:id "id295"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                   == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0);
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                  Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                return;
                            }
                        }
                    }
                    else
                    {
                        if (M0.Expression.exprOr_q(expr#0))
                        {
                            havoc result#Z#2;
                            assert {:id "id296"} M0.Expression.exprOr_q(expr#0);
                            ##expr#6 := M0.Expression.disj0(expr#0);
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##expr#6, Tclass.M0.Expression(), $Heap);
                            ##st#5 := st#0;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
                            ##env#7 := env#0;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##env#7, Tclass.M0.Env(), $Heap);
                            ##useCache#5 := useCache#0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##useCache#5, TBool, $Heap);
                            assert {:id "id297"} {:subsumption 0} M0.__default.ValidEnv(##env#7);
                            assume M0.__default.ValidEnv(##env#7);
                            assert {:id "id298"} DtRank(##expr#6) < DtRank(expr#0);
                            assume M0.__default.eval#canCall(M0.Expression.disj0(expr#0), st#0, env#0, useCache#0);
                            assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                                reveal_M0._default.eval, 
                                M0.Expression.disj0(expr#0), 
                                st#0, 
                                env#0, 
                                useCache#0));
                            assume {:id "id299"} let#4#0#0
                               == M0.__default.eval($LS($LZ), 
                                reveal_M0._default.eval, 
                                M0.Expression.disj0(expr#0), 
                                st#0, 
                                env#0, 
                                useCache#0);
                            assume M0.__default.eval#canCall(M0.Expression.disj0(expr#0), st#0, env#0, useCache#0);
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#4#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                            assume {:id "id300"} result#Z#2 == let#4#0#0;
                            havoc disj0'#Z#0;
                            havoc st'#Z#2;
                            assume M0.Tuple.Pair_q(result#Z#2);
                            assume {:id "id301"} let#5#0#0 == $Unbox(M0.Tuple.fst(result#Z#2)): DatatypeType;
                            assume M0.Tuple.Pair_q(result#Z#2);
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#5#0#0, Tclass.M0.Expression());
                            assume {:id "id302"} disj0'#Z#0 == let#5#0#0;
                            assume M0.Tuple.Pair_q(result#Z#2);
                            assume {:id "id303"} let#5#1#0 == M0.Tuple.snd(result#Z#2);
                            assume M0.Tuple.Pair_q(result#Z#2);
                            // CheckWellformedWithResult: any expression
                            assume $IsBox(let#5#1#0, Tclass.M0.State());
                            assume {:id "id304"} st'#Z#2 == let#5#1#0;
                            if (M0.Expression.exprLiteral_q(disj0'#Z#0))
                            {
                                assert {:id "id305"} M0.Expression.exprLiteral_q(disj0'#Z#0);
                            }

                            if (M0.Expression.exprLiteral_q(disj0'#Z#0)
                               && M0.Literal#Equal(M0.Expression.lit(disj0'#Z#0), #M0.Literal.litTrue()))
                            {
                                assume {:id "id306"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                   == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprLiteral(Lit(#M0.Literal.litTrue())))), st'#Z#2);
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                  Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                return;
                            }
                            else
                            {
                                if (M0.Expression.exprLiteral_q(disj0'#Z#0))
                                {
                                    assert {:id "id307"} M0.Expression.exprLiteral_q(disj0'#Z#0);
                                }

                                if (M0.Expression.exprLiteral_q(disj0'#Z#0)
                                   && M0.Literal#Equal(M0.Expression.lit(disj0'#Z#0), #M0.Literal.litFalse()))
                                {
                                    assert {:id "id308"} M0.Expression.exprOr_q(expr#0);
                                    ##expr#7 := M0.Expression.disj1(expr#0);
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##expr#7, Tclass.M0.Expression(), $Heap);
                                    ##st#6 := st'#Z#2;
                                    // assume allocatedness for argument to function
                                    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
                                    ##env#8 := env#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAllocBox(##env#8, Tclass.M0.Env(), $Heap);
                                    ##useCache#6 := useCache#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##useCache#6, TBool, $Heap);
                                    assert {:id "id309"} {:subsumption 0} M0.__default.ValidEnv(##env#8);
                                    assume M0.__default.ValidEnv(##env#8);
                                    assert {:id "id310"} DtRank(##expr#7) < DtRank(expr#0);
                                    assume M0.__default.eval#canCall(M0.Expression.disj1(expr#0), st'#Z#2, env#0, useCache#0);
                                    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                                        reveal_M0._default.eval, 
                                        M0.Expression.disj1(expr#0), 
                                        st'#Z#2, 
                                        env#0, 
                                        useCache#0));
                                    assume {:id "id311"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                       == M0.__default.eval($LS($LZ), 
                                        reveal_M0._default.eval, 
                                        M0.Expression.disj1(expr#0), 
                                        st'#Z#2, 
                                        env#0, 
                                        useCache#0);
                                    assume M0.__default.eval#canCall(M0.Expression.disj1(expr#0), st'#Z#2, env#0, useCache#0);
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                    return;
                                }
                                else
                                {
                                    assume {:id "id312"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                       == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0);
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                    return;
                                }
                            }
                        }
                        else
                        {
                            if (M0.Expression.exprInvocation_q(expr#0))
                            {
                                havoc resultFun#Z#0;
                                assert {:id "id313"} M0.Expression.exprInvocation_q(expr#0);
                                ##expr#8 := M0.Expression.fun(expr#0);
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##expr#8, Tclass.M0.Expression(), $Heap);
                                ##st#7 := st#0;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
                                ##env#9 := env#0;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##env#9, Tclass.M0.Env(), $Heap);
                                ##useCache#7 := useCache#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##useCache#7, TBool, $Heap);
                                assert {:id "id314"} {:subsumption 0} M0.__default.ValidEnv(##env#9);
                                assume M0.__default.ValidEnv(##env#9);
                                assert {:id "id315"} DtRank(##expr#8) < DtRank(expr#0);
                                assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, useCache#0);
                                assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                                    reveal_M0._default.eval, 
                                    M0.Expression.fun(expr#0), 
                                    st#0, 
                                    env#0, 
                                    useCache#0));
                                assume {:id "id316"} let#6#0#0
                                   == M0.__default.eval($LS($LZ), 
                                    reveal_M0._default.eval, 
                                    M0.Expression.fun(expr#0), 
                                    st#0, 
                                    env#0, 
                                    useCache#0);
                                assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, useCache#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#6#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                assume {:id "id317"} resultFun#Z#0 == let#6#0#0;
                                havoc fun'#Z#0;
                                havoc st'#Z#3;
                                assume M0.Tuple.Pair_q(resultFun#Z#0);
                                assume {:id "id318"} let#7#0#0 == $Unbox(M0.Tuple.fst(resultFun#Z#0)): DatatypeType;
                                assume M0.Tuple.Pair_q(resultFun#Z#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#7#0#0, Tclass.M0.Expression());
                                assume {:id "id319"} fun'#Z#0 == let#7#0#0;
                                assume M0.Tuple.Pair_q(resultFun#Z#0);
                                assume {:id "id320"} let#7#1#0 == M0.Tuple.snd(resultFun#Z#0);
                                assume M0.Tuple.Pair_q(resultFun#Z#0);
                                // CheckWellformedWithResult: any expression
                                assume $IsBox(let#7#1#0, Tclass.M0.State());
                                assume {:id "id321"} st'#Z#3 == let#7#1#0;
                                havoc resultArgs#Z#0;
                                ##context#0 := expr#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##context#0, Tclass.M0.Expression(), $Heap);
                                assert {:id "id322"} M0.Expression.exprInvocation_q(expr#0);
                                ##args#0 := M0.Expression.args(expr#0);
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
                                ##stOrig#0 := st#0;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
                                ##env#10 := env#0;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##env#10, Tclass.M0.Env(), $Heap);
                                ##useCache#8 := useCache#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##useCache#8, TBool, $Heap);
                                assert {:id "id323"} {:subsumption 0} M0.__default.ValidEnv(##env#10);
                                assert {:id "id324"} {:subsumption 0} (forall arg#0: DatatypeType :: 
                                  { Seq#Contains(##args#0, $Box(arg#0)) } 
                                  $Is(arg#0, Tclass.M0.Expression())
                                     ==> 
                                    Seq#Contains(##args#0, $Box(arg#0))
                                     ==> DtRank(arg#0) < DtRank(##context#0));
                                assume M0.__default.ValidEnv(##env#10)
                                   && (forall arg#0: DatatypeType :: 
                                    { Seq#Contains(##args#0, $Box(arg#0)) } 
                                    $Is(arg#0, Tclass.M0.Expression())
                                       ==> 
                                      Seq#Contains(##args#0, $Box(arg#0))
                                       ==> DtRank(arg#0) < DtRank(##context#0));
                                assert {:id "id325"} DtRank(##context#0) <= DtRank(expr#0);
                                assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0);
                                assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0));
                                assume {:id "id326"} let#8#0#0
                                   == M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0);
                                assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#8#0#0, 
                                  Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())));
                                assume {:id "id327"} resultArgs#Z#0 == let#8#0#0;
                                havoc args'#Z#0;
                                havoc sts'#Z#0;
                                assume M0.Tuple.Pair_q(resultArgs#Z#0);
                                assume {:id "id328"} let#9#0#0 == $Unbox(M0.Tuple.fst(resultArgs#Z#0)): Seq;
                                assume M0.Tuple.Pair_q(resultArgs#Z#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#9#0#0, TSeq(Tclass.M0.Expression()));
                                assume {:id "id329"} args'#Z#0 == let#9#0#0;
                                assume M0.Tuple.Pair_q(resultArgs#Z#0);
                                assume {:id "id330"} let#9#1#0 == $Unbox(M0.Tuple.snd(resultArgs#Z#0)): Set;
                                assume M0.Tuple.Pair_q(resultArgs#Z#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#9#1#0, TSet(Tclass.M0.State()));
                                assume {:id "id331"} sts'#Z#0 == let#9#1#0;
                                havoc sts''#Z#0;
                                assume {:id "id332"} let#10#0#0 == Set#Union(Set#UnionOne(Set#Empty(): Set, st'#Z#3), sts'#Z#0);
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#10#0#0, TSet(Tclass.M0.State()));
                                assume {:id "id333"} sts''#Z#0 == let#10#0#0;
                                ##sts#0 := sts''#Z#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
                                assume M0.__default.Compatible#canCall(sts''#Z#0);
                                if (!M0.__default.Compatible(sts''#Z#0))
                                {
                                    assume {:id "id334"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                       == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rCompatibility())))), st#0);
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                    return;
                                }
                                else
                                {
                                    havoc stCombined#Z#0;
                                    ##sts#1 := sts''#Z#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
                                    ##useCache#9 := useCache#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##useCache#9, TBool, $Heap);
                                    assert {:id "id335"} {:subsumption 0} !Set#Equal(##sts#1, Set#Empty(): Set);
                                    assume !Set#Equal(##sts#1, Set#Empty(): Set);
                                    assume M0.__default.Combine#canCall(sts''#Z#0, useCache#0);
                                    assume {:id "id336"} let#11#0#0
                                       == M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#Z#0, useCache#0);
                                    assume M0.__default.Combine#canCall(sts''#Z#0, useCache#0);
                                    // CheckWellformedWithResult: any expression
                                    assume $IsBox(let#11#0#0, Tclass.M0.State());
                                    assume {:id "id337"} stCombined#Z#0 == let#11#0#0;
                                    if (M0.Expression.exprLiteral_q(fun'#Z#0))
                                    {
                                        assert {:id "id338"} M0.Expression.exprLiteral_q(fun'#Z#0);
                                    }

                                    if (M0.Expression.exprLiteral_q(fun'#Z#0)
                                       && M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#Z#0)))
                                    {
                                        assert {:id "id339"} M0.Expression.exprLiteral_q(fun'#Z#0);
                                        assert {:id "id340"} M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#Z#0));
                                        if (M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun'#Z#0))))
                                        {
                                            ##prim#0 := Lit(#M0.Primitive.primExec());
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##prim#0, Tclass.M0.Primitive(), $Heap);
                                            assume M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()));
                                            if (Seq#Length(args'#Z#0)
                                               == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec()))))
                                            {
                                                ##prim#1 := Lit(#M0.Primitive.primExec());
                                                // assume allocatedness for argument to function
                                                assume $IsAlloc(##prim#1, Tclass.M0.Primitive(), $Heap);
                                                ##args#1 := args'#Z#0;
                                                // assume allocatedness for argument to function
                                                assume $IsAlloc(##args#1, TSeq(Tclass.M0.Expression()), $Heap);
                                                ##st#8 := stCombined#Z#0;
                                                // assume allocatedness for argument to function
                                                assume $IsAllocBox(##st#8, Tclass.M0.State(), $Heap);
                                                assert {:id "id341"} {:subsumption 0} M0.Primitive.primExec_q(##prim#1) ==> Seq#Length(##args#1) == LitInt(3);
                                                assume M0.Primitive.primExec_q(##prim#1) ==> Seq#Length(##args#1) == LitInt(3);
                                                assert {:id "id342"} {:subsumption 0} M0.Primitive.primCreatePath_q(##prim#1) ==> Seq#Length(##args#1) == LitInt(1);
                                                assume M0.Primitive.primCreatePath_q(##prim#1) ==> Seq#Length(##args#1) == LitInt(1);
                                                assume M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args'#Z#0, stCombined#Z#0);
                                            }

                                            if (Seq#Length(args'#Z#0)
                                                 == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                               && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args'#Z#0, stCombined#Z#0))
                                            {
                                                havoc cmd#Z#0;
                                                havoc deps#Z#0;
                                                havoc exps#Z#0;
                                                assert {:id "id343"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args'#Z#0);
                                                assert {:id "id344"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args'#Z#0, LitInt(0))): DatatypeType);
                                                assert {:id "id345"} M0.Literal.litString_q(M0.Expression.lit($Unbox(Seq#Index(args'#Z#0, LitInt(0))): DatatypeType));
                                                assume {:id "id346"} let#12#0#0
                                                   == M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args'#Z#0, LitInt(0))): DatatypeType));
                                                assume true;
                                                // CheckWellformedWithResult: any expression
                                                assume $Is(let#12#0#0, TSeq(TChar));
                                                assume {:id "id347"} cmd#Z#0 == let#12#0#0;
                                                assert {:id "id348"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args'#Z#0);
                                                assert {:id "id349"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args'#Z#0, LitInt(1))): DatatypeType);
                                                assert {:id "id350"} M0.Literal.litArrOfPaths_q(M0.Expression.lit($Unbox(Seq#Index(args'#Z#0, LitInt(1))): DatatypeType));
                                                assume {:id "id351"} let#12#1#0
                                                   == M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args'#Z#0, LitInt(1))): DatatypeType));
                                                assume true;
                                                // CheckWellformedWithResult: any expression
                                                assume $Is(let#12#1#0, TSet(Tclass.M0.Path()));
                                                assume {:id "id352"} deps#Z#0 == let#12#1#0;
                                                assert {:id "id353"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args'#Z#0);
                                                assert {:id "id354"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args'#Z#0, LitInt(2))): DatatypeType);
                                                assert {:id "id355"} M0.Literal.litArrOfStrings_q(M0.Expression.lit($Unbox(Seq#Index(args'#Z#0, LitInt(2))): DatatypeType));
                                                assume {:id "id356"} let#12#2#0
                                                   == M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args'#Z#0, LitInt(2))): DatatypeType));
                                                assume true;
                                                // CheckWellformedWithResult: any expression
                                                assume $Is(let#12#2#0, TSet(TSeq(TChar)));
                                                assume {:id "id357"} exps#Z#0 == let#12#2#0;
                                                if (!useCache#0)
                                                {
                                                    havoc ps#Z#0;
                                                    ##cmd#0 := cmd#Z#0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##cmd#0, TSeq(TChar), $Heap);
                                                    ##deps#0 := deps#Z#0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##deps#0, TSet(Tclass.M0.Path()), $Heap);
                                                    ##exps#0 := exps#Z#0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##exps#0, TSet(TSeq(TChar)), $Heap);
                                                    ##st#9 := stCombined#Z#0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAllocBox(##st#9, Tclass.M0.State(), $Heap);
                                                    assume M0.__default.exec#canCall(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#Z#0);
                                                    assume M0.Tuple.Pair_q(M0.__default.exec(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#Z#0));
                                                    assume {:id "id358"} let#13#0#0 == M0.__default.exec(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#Z#0);
                                                    assume M0.__default.exec#canCall(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#Z#0);
                                                    // CheckWellformedWithResult: any expression
                                                    assume $Is(let#13#0#0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()));
                                                    assume {:id "id359"} ps#Z#0 == let#13#0#0;
                                                    assume M0.Tuple.Pair_q(ps#Z#0);
                                                    assume M0.Tuple.Pair_q(ps#Z#0);
                                                    assume {:id "id360"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                                       == #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#Z#0)): Set))), 
                                                        M0.Tuple.snd(ps#Z#0));
                                                    assume M0.Tuple.Pair_q(ps#Z#0) && M0.Tuple.Pair_q(ps#Z#0);
                                                    // CheckWellformedWithResult: any expression
                                                    assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                                    return;
                                                }
                                                else
                                                {
                                                    ##stC#0 := stCombined#Z#0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
                                                    assume M0.__default.ConsistentCache#canCall(stCombined#Z#0);
                                                    if (M0.__default.ConsistentCache(stCombined#Z#0))
                                                    {
                                                        havoc ps#Z#1;
                                                        ##cmd#1 := cmd#Z#0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##cmd#1, TSeq(TChar), $Heap);
                                                        ##deps#1 := deps#Z#0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##deps#1, TSet(Tclass.M0.Path()), $Heap);
                                                        ##exps#1 := exps#Z#0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##exps#1, TSet(TSeq(TChar)), $Heap);
                                                        ##stC#1 := stCombined#Z#0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
                                                        assume M0.__default.execC#canCall(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#Z#0);
                                                        assume M0.Tuple.Pair_q(M0.__default.execC(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#Z#0));
                                                        assume {:id "id361"} let#14#0#0 == M0.__default.execC(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#Z#0);
                                                        assume M0.__default.execC#canCall(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#Z#0);
                                                        // CheckWellformedWithResult: any expression
                                                        assume $Is(let#14#0#0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()));
                                                        assume {:id "id362"} ps#Z#1 == let#14#0#0;
                                                        assume M0.Tuple.Pair_q(ps#Z#1);
                                                        assume M0.Tuple.Pair_q(ps#Z#1);
                                                        assume {:id "id363"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                                           == #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#Z#1)): Set))), 
                                                            M0.Tuple.snd(ps#Z#1));
                                                        assume M0.Tuple.Pair_q(ps#Z#1) && M0.Tuple.Pair_q(ps#Z#1);
                                                        // CheckWellformedWithResult: any expression
                                                        assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                                          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        assume {:id "id364"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                                           == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0);
                                                        assume true;
                                                        // CheckWellformedWithResult: any expression
                                                        assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                                          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                                        return;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                assume {:id "id365"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                                   == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), st#0);
                                                assume true;
                                                // CheckWellformedWithResult: any expression
                                                assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                                  Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            assume {:id "id366"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                               == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0);
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                              Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        assume {:id "id367"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                           == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0);
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                        return;
                                    }
                                }
                            }
                            else
                            {
                                assume {:id "id368"} M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0)
                                   == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0);
                                assume true;
                                // CheckWellformedWithResult: any expression
                                assume $Is(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
                                  Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                                return;
                            }
                        }
                    }
                }
            }
        }

        assume false;
    }
}



// function declaration for M0._default.evalFunArgs
function M0.__default.evalFunArgs(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool) : DatatypeType
uses {
// consequence axiom for M0.__default.evalFunArgs
axiom 5 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    { M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0) } 
    M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, useCache#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.Expression.exprInvocation_q(expr#0)
           && M0.__default.ValidEnv(env#0))
       ==> $Is(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0), 
        Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State()))));
// alloc consequence axiom for M0.__default.evalFunArgs
axiom 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    { $IsAlloc(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0), 
        Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
        $Heap) } 
    (M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, useCache#0)
           || (5 < $FunctionContextHeight
             && 
            $Is(expr#0, Tclass.M0.Expression())
             && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
             && 
            $IsBox(st#0, Tclass.M0.State())
             && $IsAllocBox(st#0, Tclass.M0.State(), $Heap)
             && 
            $IsBox(env#0, Tclass.M0.Env())
             && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap)
             && 
            M0.Expression.exprInvocation_q(expr#0)
             && M0.__default.ValidEnv(env#0)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0), 
        Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
        $Heap));
// definition axiom for M0.__default.evalFunArgs (revealed)
axiom {:id "id369"} 5 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    { M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0) } 
    M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, useCache#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.Expression.exprInvocation_q(expr#0)
           && M0.__default.ValidEnv(env#0))
       ==> M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, useCache#0)
         && (var resultFun#0 := M0.__default.eval($LS($LZ), 
              reveal_M0._default.eval, 
              M0.Expression.fun(expr#0), 
              st#0, 
              env#0, 
              useCache#0); 
          M0.Tuple.Pair_q(resultFun#0)
             && M0.Tuple.Pair_q(resultFun#0)
             && 
            M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0)
             && (var resultArgs#0 := M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0); 
              M0.Tuple.Pair_q(resultArgs#0) && M0.Tuple.Pair_q(resultArgs#0)))
         && M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0)
           == (var resultFun#0 := M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                M0.Expression.fun(expr#0), 
                st#0, 
                env#0, 
                useCache#0); 
            (var fun'#0, st'#0 := $Unbox(M0.Tuple.fst(resultFun#0)): DatatypeType, M0.Tuple.snd(resultFun#0); 
              (var resultArgs#0 := M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0); 
                (var args'#0, sts'#0 := $Unbox(M0.Tuple.fst(resultArgs#0)): Seq, $Unbox(M0.Tuple.snd(resultArgs#0)): Set; 
                  (var sts''#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#0), sts'#0); 
                    #M0.Triple.Tri($Box(fun'#0), $Box(args'#0), $Box(sts''#0))))))));
// definition axiom for M0.__default.evalFunArgs for decreasing-related literals (revealed)
axiom {:id "id370"} 5 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.evalFunArgs(Lit(expr#0), st#0, env#0, Lit(useCache#0)) } 
    M0.__default.evalFunArgs#canCall(Lit(expr#0), st#0, env#0, Lit(useCache#0))
         || (5 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.Expression.exprInvocation_q(Lit(expr#0))
           && M0.__default.ValidEnv(env#0))
       ==> M0.__default.eval#canCall(Lit(M0.Expression.fun(Lit(expr#0))), st#0, env#0, Lit(useCache#0))
         && (var resultFun#1 := M0.__default.eval($LS($LZ), 
              reveal_M0._default.eval, 
              Lit(M0.Expression.fun(Lit(expr#0))), 
              st#0, 
              env#0, 
              Lit(useCache#0)); 
          M0.Tuple.Pair_q(resultFun#1)
             && M0.Tuple.Pair_q(resultFun#1)
             && 
            M0.__default.evalArgs#canCall(Lit(expr#0), Lit(M0.Expression.args(Lit(expr#0))), st#0, env#0, Lit(useCache#0))
             && (var resultArgs#1 := M0.__default.evalArgs($LS($LZ), 
                  Lit(expr#0), 
                  Lit(M0.Expression.args(Lit(expr#0))), 
                  st#0, 
                  env#0, 
                  Lit(useCache#0)); 
              M0.Tuple.Pair_q(resultArgs#1) && M0.Tuple.Pair_q(resultArgs#1)))
         && M0.__default.evalFunArgs(Lit(expr#0), st#0, env#0, Lit(useCache#0))
           == (var resultFun#1 := M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                Lit(M0.Expression.fun(Lit(expr#0))), 
                st#0, 
                env#0, 
                Lit(useCache#0)); 
            (var fun'#1, st'#1 := $Unbox(M0.Tuple.fst(resultFun#1)): DatatypeType, M0.Tuple.snd(resultFun#1); 
              (var resultArgs#1 := M0.__default.evalArgs($LS($LZ), 
                    Lit(expr#0), 
                    Lit(M0.Expression.args(Lit(expr#0))), 
                    st#0, 
                    env#0, 
                    Lit(useCache#0)); 
                (var args'#1, sts'#1 := $Unbox(M0.Tuple.fst(resultArgs#1)): Seq, $Unbox(M0.Tuple.snd(resultArgs#1)): Set; 
                  (var sts''#1 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#1), sts'#1); 
                    #M0.Triple.Tri($Box(fun'#1), $Box(args'#1), $Box(sts''#1))))))));
// definition axiom for M0.__default.evalFunArgs for all literals (revealed)
axiom {:id "id371"} 5 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.evalFunArgs(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0)) } 
    M0.__default.evalFunArgs#canCall(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0))
         || (5 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.Expression.exprInvocation_q(Lit(expr#0))
           && M0.__default.ValidEnv(Lit(env#0)))
       ==> M0.__default.eval#canCall(Lit(M0.Expression.fun(Lit(expr#0))), Lit(st#0), Lit(env#0), Lit(useCache#0))
         && (var resultFun#2 := M0.__default.eval($LS($LZ), 
              reveal_M0._default.eval, 
              Lit(M0.Expression.fun(Lit(expr#0))), 
              Lit(st#0), 
              Lit(env#0), 
              Lit(useCache#0)); 
          M0.Tuple.Pair_q(resultFun#2)
             && M0.Tuple.Pair_q(resultFun#2)
             && 
            M0.__default.evalArgs#canCall(Lit(expr#0), 
              Lit(M0.Expression.args(Lit(expr#0))), 
              Lit(st#0), 
              Lit(env#0), 
              Lit(useCache#0))
             && (var resultArgs#2 := Lit(M0.__default.evalArgs($LS($LZ), 
                    Lit(expr#0), 
                    Lit(M0.Expression.args(Lit(expr#0))), 
                    Lit(st#0), 
                    Lit(env#0), 
                    Lit(useCache#0))); 
              M0.Tuple.Pair_q(resultArgs#2) && M0.Tuple.Pair_q(resultArgs#2)))
         && M0.__default.evalFunArgs(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0))
           == (var resultFun#2 := M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                Lit(M0.Expression.fun(Lit(expr#0))), 
                Lit(st#0), 
                Lit(env#0), 
                Lit(useCache#0)); 
            (var fun'#2, st'#2 := $Unbox(M0.Tuple.fst(resultFun#2)): DatatypeType, M0.Tuple.snd(resultFun#2); 
              (var resultArgs#2 := Lit(M0.__default.evalArgs($LS($LZ), 
                      Lit(expr#0), 
                      Lit(M0.Expression.args(Lit(expr#0))), 
                      Lit(st#0), 
                      Lit(env#0), 
                      Lit(useCache#0))); 
                (var args'#2, sts'#2 := Lit($Unbox(M0.Tuple.fst(resultArgs#2)): Seq), 
                    Lit($Unbox(M0.Tuple.snd(resultArgs#2)): Set); 
                  (var sts''#2 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#2), sts'#2); 
                    #M0.Triple.Tri($Box(fun'#2), $Box(args'#2), $Box(sts''#2))))))));
}

function M0.__default.evalFunArgs#canCall(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool) : bool;

function Tclass.M0.Triple(Ty, Ty, Ty) : Ty;

const unique Tagclass.M0.Triple: TyTag;

// Tclass.M0.Triple Tag
axiom (forall M0.Triple$A: Ty, M0.Triple$B: Ty, M0.Triple$C: Ty :: 
  { Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C) } 
  Tag(Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C))
       == Tagclass.M0.Triple
     && TagFamily(Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C))
       == tytagFamily$Triple);

function Tclass.M0.Triple_0(Ty) : Ty;

// Tclass.M0.Triple injectivity 0
axiom (forall M0.Triple$A: Ty, M0.Triple$B: Ty, M0.Triple$C: Ty :: 
  { Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C) } 
  Tclass.M0.Triple_0(Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C))
     == M0.Triple$A);

function Tclass.M0.Triple_1(Ty) : Ty;

// Tclass.M0.Triple injectivity 1
axiom (forall M0.Triple$A: Ty, M0.Triple$B: Ty, M0.Triple$C: Ty :: 
  { Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C) } 
  Tclass.M0.Triple_1(Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C))
     == M0.Triple$B);

function Tclass.M0.Triple_2(Ty) : Ty;

// Tclass.M0.Triple injectivity 2
axiom (forall M0.Triple$A: Ty, M0.Triple$B: Ty, M0.Triple$C: Ty :: 
  { Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C) } 
  Tclass.M0.Triple_2(Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C))
     == M0.Triple$C);

// Box/unbox axiom for Tclass.M0.Triple
axiom (forall M0.Triple$A: Ty, M0.Triple$B: Ty, M0.Triple$C: Ty, bx: Box :: 
  { $IsBox(bx, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C)) } 
  $IsBox(bx, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C)));

function M0.__default.evalFunArgs#requires(DatatypeType, Box, Box, bool) : bool;

// #requires axiom for M0.__default.evalFunArgs
axiom (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
  { M0.__default.evalFunArgs#requires(expr#0, st#0, env#0, useCache#0) } 
  $Is(expr#0, Tclass.M0.Expression())
       && $IsBox(st#0, Tclass.M0.State())
       && $IsBox(env#0, Tclass.M0.Env())
     ==> M0.__default.evalFunArgs#requires(expr#0, st#0, env#0, useCache#0)
       == (M0.Expression.exprInvocation_q(expr#0) && M0.__default.ValidEnv(env#0)));

procedure {:verboseName "M0.evalFunArgs (well-formedness)"} CheckWellformed$$M0.__default.evalFunArgs(expr#0: DatatypeType where $Is(expr#0, Tclass.M0.Expression()), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()), 
    env#0: Box where $IsBox(env#0, Tclass.M0.Env()), 
    useCache#0: bool);
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.evalFunArgs (well-formedness)"} CheckWellformed$$M0.__default.evalFunArgs(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: Box;
  var resultFun#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##st#0: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var fun'#Z#0: DatatypeType;
  var st'#Z#0: Box;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: Box;
  var resultArgs#Z#0: DatatypeType;
  var let#2#0#0: DatatypeType;
  var ##context#0: DatatypeType;
  var ##args#0: Seq;
  var ##stOrig#0: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;
  var args'#Z#0: Seq;
  var sts'#Z#0: Set;
  var let#3#0#0: Seq;
  var let#3#1#0: Set;
  var sts''#Z#0: Set;
  var let#4#0#0: Set;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id372"} M0.Expression.exprInvocation_q(expr#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id373"} M0.__default.ValidEnv(env#0);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0), 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc resultFun#Z#0;
        assert {:id "id374"} M0.Expression.exprInvocation_q(expr#0);
        ##expr#0 := M0.Expression.fun(expr#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
        ##env#1 := env#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
        ##useCache#0 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0, TBool, $Heap);
        assert {:id "id375"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
        assume M0.__default.ValidEnv(##env#1);
        assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, useCache#0);
        assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
            reveal_M0._default.eval, 
            M0.Expression.fun(expr#0), 
            st#0, 
            env#0, 
            useCache#0));
        assume {:id "id376"} let#0#0#0
           == M0.__default.eval($LS($LZ), 
            reveal_M0._default.eval, 
            M0.Expression.fun(expr#0), 
            st#0, 
            env#0, 
            useCache#0);
        assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, useCache#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
        assume {:id "id377"} resultFun#Z#0 == let#0#0#0;
        havoc fun'#Z#0;
        havoc st'#Z#0;
        assume M0.Tuple.Pair_q(resultFun#Z#0);
        assume {:id "id378"} let#1#0#0 == $Unbox(M0.Tuple.fst(resultFun#Z#0)): DatatypeType;
        assume M0.Tuple.Pair_q(resultFun#Z#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#1#0#0, Tclass.M0.Expression());
        assume {:id "id379"} fun'#Z#0 == let#1#0#0;
        assume M0.Tuple.Pair_q(resultFun#Z#0);
        assume {:id "id380"} let#1#1#0 == M0.Tuple.snd(resultFun#Z#0);
        assume M0.Tuple.Pair_q(resultFun#Z#0);
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#1#1#0, Tclass.M0.State());
        assume {:id "id381"} st'#Z#0 == let#1#1#0;
        havoc resultArgs#Z#0;
        ##context#0 := expr#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##context#0, Tclass.M0.Expression(), $Heap);
        assert {:id "id382"} M0.Expression.exprInvocation_q(expr#0);
        ##args#0 := M0.Expression.args(expr#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
        ##stOrig#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
        ##env#2 := env#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
        ##useCache#1 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1, TBool, $Heap);
        assert {:id "id383"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
        assert {:id "id384"} {:subsumption 0} (forall arg#0: DatatypeType :: 
          { Seq#Contains(##args#0, $Box(arg#0)) } 
          $Is(arg#0, Tclass.M0.Expression())
             ==> 
            Seq#Contains(##args#0, $Box(arg#0))
             ==> DtRank(arg#0) < DtRank(##context#0));
        assume M0.__default.ValidEnv(##env#2)
           && (forall arg#0: DatatypeType :: 
            { Seq#Contains(##args#0, $Box(arg#0)) } 
            $Is(arg#0, Tclass.M0.Expression())
               ==> 
              Seq#Contains(##args#0, $Box(arg#0))
               ==> DtRank(arg#0) < DtRank(##context#0));
        assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0);
        assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0));
        assume {:id "id385"} let#2#0#0
           == M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0);
        assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#2#0#0, 
          Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())));
        assume {:id "id386"} resultArgs#Z#0 == let#2#0#0;
        havoc args'#Z#0;
        havoc sts'#Z#0;
        assume M0.Tuple.Pair_q(resultArgs#Z#0);
        assume {:id "id387"} let#3#0#0 == $Unbox(M0.Tuple.fst(resultArgs#Z#0)): Seq;
        assume M0.Tuple.Pair_q(resultArgs#Z#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#3#0#0, TSeq(Tclass.M0.Expression()));
        assume {:id "id388"} args'#Z#0 == let#3#0#0;
        assume M0.Tuple.Pair_q(resultArgs#Z#0);
        assume {:id "id389"} let#3#1#0 == $Unbox(M0.Tuple.snd(resultArgs#Z#0)): Set;
        assume M0.Tuple.Pair_q(resultArgs#Z#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#3#1#0, TSet(Tclass.M0.State()));
        assume {:id "id390"} sts'#Z#0 == let#3#1#0;
        havoc sts''#Z#0;
        assume {:id "id391"} let#4#0#0 == Set#Union(Set#UnionOne(Set#Empty(): Set, st'#Z#0), sts'#Z#0);
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#4#0#0, TSet(Tclass.M0.State()));
        assume {:id "id392"} sts''#Z#0 == let#4#0#0;
        assume {:id "id393"} M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0)
           == #M0.Triple.Tri($Box(fun'#Z#0), $Box(args'#Z#0), $Box(sts''#Z#0));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0), 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())));
        return;

        assume false;
    }
}



procedure {:verboseName "M0.Lemma_EvalFunArgs_TwoState (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__EvalFunArgs__TwoState(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    p#0: DatatypeType
       where $Is(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(p#0), 
    pC#0: DatatypeType
       where $Is(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(pC#0));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_EvalFunArgs_TwoState (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__EvalFunArgs__TwoState(expr#0: DatatypeType, 
    st#0: Box, 
    stC#0: Box, 
    env#0: Box, 
    p#0: DatatypeType, 
    pC#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##env#0: Box;
  var ##stC#0: Box;
  var ##st#2: Box;
  var ##stC#1: Box;
  var ##expr#0: DatatypeType;
  var ##st#3: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##expr#1: DatatypeType;
  var ##st#4: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;


    // AddMethodImpl: Lemma_EvalFunArgs_TwoState, CheckWellFormed$$M0.__default.Lemma__EvalFunArgs__TwoState
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id394"} M0.Expression.exprInvocation_q(expr#0);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id395"} M0.__default.ValidState(st#0);
    ##st#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stC#0);
    assume {:id "id396"} M0.__default.ValidState(stC#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id397"} M0.__default.ValidEnv(env#0);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id398"} M0.__default.ConsistentCache(stC#0);
    ##st#2 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st#0, stC#0);
    assume {:id "id399"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id400"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#0);
    assert {:id "id401"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.Expression.exprInvocation_q(##expr#0) && M0.__default.ValidEnv(##env#1);
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume {:id "id402"} M0.Triple#Equal(p#0, M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    ##expr#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
    ##st#4 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
    ##useCache#1 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id403"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#1);
    assert {:id "id404"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
    assume M0.Expression.exprInvocation_q(##expr#1) && M0.__default.ValidEnv(##env#2);
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume {:id "id405"} M0.Triple#Equal(pC#0, M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    havoc $Heap;
    assume old($Heap) == $Heap;
    assume M0.Triple.Tri_q(p#0);
    assume M0.Triple.Tri_q(pC#0);
    assume {:id "id406"} M0.Expression#Equal($Unbox(M0.Triple._0(p#0)): DatatypeType, 
      $Unbox(M0.Triple._0(pC#0)): DatatypeType);
    assume M0.Triple.Tri_q(p#0);
    assume M0.Triple.Tri_q(pC#0);
    assume {:id "id407"} Seq#Equal($Unbox(M0.Triple._1(p#0)): Seq, $Unbox(M0.Triple._1(pC#0)): Seq);
}



procedure {:verboseName "M0.Lemma_EvalFunArgs_TwoState (call)"} Call$$M0.__default.Lemma__EvalFunArgs__TwoState(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    p#0: DatatypeType
       where $Is(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(p#0), 
    pC#0: DatatypeType
       where $Is(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(pC#0));
  // user-defined preconditions
  requires {:id "id408"} M0.Expression.exprInvocation_q(expr#0);
  requires {:id "id409"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#1: Box :: 
        { M0.__default.WellFounded(p#1) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
        $IsBox(p#1, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#1)
           ==> M0.__default.WellFounded(p#1));
  requires {:id "id410"} M0.__default.ValidState#canCall(stC#0)
     ==> M0.__default.ValidState(stC#0)
       || (forall p#2: Box :: 
        { M0.__default.WellFounded(p#2) } 
          { Set#IsMember(M0.__default.DomSt(stC#0), p#2) } 
        $IsBox(p#2, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stC#0), p#2)
           ==> M0.__default.WellFounded(p#2));
  requires {:id "id411"} M0.__default.ValidEnv(env#0);
  requires {:id "id412"} M0.__default.ConsistentCache#canCall(stC#0)
     ==> M0.__default.ConsistentCache(stC#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stC#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id413"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id414"} M0.Triple#Equal(p#0, M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
  requires {:id "id415"} M0.Triple#Equal(pC#0, M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Expression($Unbox(M0.Triple._0(p#0)): DatatypeType)
     && $IsA#M0.Expression($Unbox(M0.Triple._0(pC#0)): DatatypeType)
     && 
    M0.Triple.Tri_q(p#0)
     && M0.Triple.Tri_q(pC#0)
     && (M0.Expression#Equal($Unbox(M0.Triple._0(p#0)): DatatypeType, 
        $Unbox(M0.Triple._0(pC#0)): DatatypeType)
       ==> M0.Triple.Tri_q(p#0) && M0.Triple.Tri_q(pC#0));
  ensures {:id "id416"} M0.Expression#Equal($Unbox(M0.Triple._0(p#0)): DatatypeType, 
    $Unbox(M0.Triple._0(pC#0)): DatatypeType);
  ensures {:id "id417"} Seq#Equal($Unbox(M0.Triple._1(p#0)): Seq, $Unbox(M0.Triple._1(pC#0)): Seq);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_EvalFunArgs_TwoState (correctness)"} Impl$$M0.__default.Lemma__EvalFunArgs__TwoState(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    p#0: DatatypeType
       where $Is(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(p#0), 
    pC#0: DatatypeType
       where $Is(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(pC#0))
   returns ($_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id418"} M0.Expression.exprInvocation_q(expr#0);
  free requires {:id "id419"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#3: Box :: 
      { M0.__default.WellFounded(p#3) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#3) } 
      $IsBox(p#3, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#3)
         ==> M0.__default.WellFounded(p#3));
  free requires {:id "id420"} M0.__default.ValidState#canCall(stC#0)
     && 
    M0.__default.ValidState(stC#0)
     && (forall p#4: Box :: 
      { M0.__default.WellFounded(p#4) } 
        { Set#IsMember(M0.__default.DomSt(stC#0), p#4) } 
      $IsBox(p#4, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stC#0), p#4)
         ==> M0.__default.WellFounded(p#4));
  requires {:id "id421"} M0.__default.ValidEnv(env#0);
  free requires {:id "id422"} M0.__default.ConsistentCache#canCall(stC#0)
     && 
    M0.__default.ConsistentCache(stC#0)
     && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
      { M0.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, TSeq(TChar))
           && $Is(deps#1, TSet(Tclass.M0.Path()))
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(M0.__default.DomC(stC#0), 
          M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  requires {:id "id423"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id424"} M0.Triple#Equal(p#0, M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
  requires {:id "id425"} M0.Triple#Equal(pC#0, M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Expression($Unbox(M0.Triple._0(p#0)): DatatypeType)
     && $IsA#M0.Expression($Unbox(M0.Triple._0(pC#0)): DatatypeType)
     && 
    M0.Triple.Tri_q(p#0)
     && M0.Triple.Tri_q(pC#0)
     && (M0.Expression#Equal($Unbox(M0.Triple._0(p#0)): DatatypeType, 
        $Unbox(M0.Triple._0(pC#0)): DatatypeType)
       ==> M0.Triple.Tri_q(p#0) && M0.Triple.Tri_q(pC#0));
  ensures {:id "id426"} M0.Expression#Equal($Unbox(M0.Triple._0(p#0)): DatatypeType, 
    $Unbox(M0.Triple._0(pC#0)): DatatypeType);
  ensures {:id "id427"} Seq#Equal($Unbox(M0.Triple._1(p#0)): Seq, $Unbox(M0.Triple._1(pC#0)): Seq);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_EvalFunArgs_TwoState (correctness)"} Impl$$M0.__default.Lemma__EvalFunArgs__TwoState(expr#0: DatatypeType, 
    st#0: Box, 
    stC#0: Box, 
    env#0: Box, 
    p#0: DatatypeType, 
    pC#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var fun#0: DatatypeType
     where $Is(fun#0, Tclass.M0.Expression())
       && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap);
  var funC#0: DatatypeType
     where $Is(funC#0, Tclass.M0.Expression())
       && $IsAlloc(funC#0, Tclass.M0.Expression(), $Heap);
  var $rhs#0: DatatypeType;
  var ##expr#2: DatatypeType;
  var ##st#5: Box;
  var ##env#3: Box;
  var ##useCache#2: bool;
  var $rhs#1: DatatypeType;
  var ##expr#3: DatatypeType;
  var ##st#6: Box;
  var ##env#4: Box;
  var ##useCache#3: bool;
  var args#0: Seq
     where $Is(args#0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap);
  var argsC#0: Seq
     where $Is(argsC#0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(argsC#0, TSeq(Tclass.M0.Expression()), $Heap);
  var $rhs#2: Seq;
  var ##context#0: DatatypeType;
  var ##args#0: Seq;
  var ##stOrig#0: Box;
  var ##env#5: Box;
  var ##useCache#4: bool;
  var $rhs#3: Seq;
  var ##context#1: DatatypeType;
  var ##args#1: Seq;
  var ##stOrig#1: Box;
  var ##env#6: Box;
  var ##useCache#5: bool;
  var ##expr#4: DatatypeType;
  var ##st#7: Box;
  var ##env#7: Box;
  var ##useCache#6: bool;
  var ##expr#5: DatatypeType;
  var ##st#8: Box;
  var ##env#8: Box;
  var ##useCache#7: bool;
  var ##expr#6: DatatypeType;
  var ##st#9: Box;
  var ##env#9: Box;
  var ##useCache#8: bool;
  var ##expr#7: DatatypeType;
  var ##st#10: Box;
  var ##env#10: Box;
  var ##useCache#9: bool;
  var _v0#0: DatatypeType
     where $Is(_v0#0, Tclass.M0.Expression())
       && $IsAlloc(_v0#0, Tclass.M0.Expression(), $Heap);
  var defass#_v1#0: bool;
  var _v1#0: Box
     where defass#_v1#0
       ==> $IsBox(_v1#0, Tclass.M0.State()) && $IsAllocBox(_v1#0, Tclass.M0.State(), $Heap);
  var defass#_v2#0: bool;
  var _v2#0: Box
     where defass#_v2#0
       ==> $IsBox(_v2#0, Tclass.M0.State()) && $IsAllocBox(_v2#0, Tclass.M0.State(), $Heap);
  var $rhs##0: DatatypeType;
  var $rhs##1: Box;
  var $rhs##2: Box;
  var expr##0: DatatypeType;
  var st##0: Box;
  var stC##0: Box;
  var env##0: Box;
  var _v3#0: Seq
     where $Is(_v3#0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(_v3#0, TSeq(Tclass.M0.Expression()), $Heap);
  var _v4#0: Set
     where $Is(_v4#0, TSet(Tclass.M0.State()))
       && $IsAlloc(_v4#0, TSet(Tclass.M0.State()), $Heap);
  var _v5#0: Set
     where $Is(_v5#0, TSet(Tclass.M0.State()))
       && $IsAlloc(_v5#0, TSet(Tclass.M0.State()), $Heap);
  var $rhs##3: Seq;
  var $rhs##4: Set;
  var $rhs##5: Set;
  var context##0: DatatypeType;
  var args##0: Seq;
  var stOrig##0: Box;
  var stOrigC##0: Box;
  var env##1: Box;

    // AddMethodImpl: Lemma_EvalFunArgs_TwoState, Impl$$M0.__default.Lemma__EvalFunArgs__TwoState
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(396,19)
    assume true;
    assume true;
    assert {:id "id428"} M0.Expression.exprInvocation_q(expr#0);
    ##expr#2 := M0.Expression.fun(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#2, Tclass.M0.Expression(), $Heap);
    ##st#5 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
    ##env#3 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#3, Tclass.M0.Env(), $Heap);
    ##useCache#2 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#2, TBool, $Heap);
    assert {:id "id429"} {:subsumption 0} M0.__default.ValidEnv(##env#3);
    assume M0.__default.ValidEnv(##env#3);
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
        reveal_M0._default.eval, 
        M0.Expression.fun(expr#0), 
        st#0, 
        env#0, 
        Lit(false)));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
        reveal_M0._default.eval, 
        M0.Expression.fun(expr#0), 
        st#0, 
        env#0, 
        Lit(false)));
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, Lit(false))
       && M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
          reveal_M0._default.eval, 
          M0.Expression.fun(expr#0), 
          st#0, 
          env#0, 
          Lit(false)));
    $rhs#0 := $Unbox(M0.Tuple.fst(M0.__default.eval($LS($LZ), 
          reveal_M0._default.eval, 
          M0.Expression.fun(expr#0), 
          st#0, 
          env#0, 
          Lit(false)))): DatatypeType;
    assert {:id "id431"} M0.Expression.exprInvocation_q(expr#0);
    ##expr#3 := M0.Expression.fun(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#3, Tclass.M0.Expression(), $Heap);
    ##st#6 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
    ##env#4 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#4, Tclass.M0.Env(), $Heap);
    ##useCache#3 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#3, TBool, $Heap);
    assert {:id "id432"} {:subsumption 0} M0.__default.ValidEnv(##env#4);
    assume M0.__default.ValidEnv(##env#4);
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
        reveal_M0._default.eval, 
        M0.Expression.fun(expr#0), 
        stC#0, 
        env#0, 
        Lit(true)));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
        reveal_M0._default.eval, 
        M0.Expression.fun(expr#0), 
        stC#0, 
        env#0, 
        Lit(true)));
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), stC#0, env#0, Lit(true))
       && M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
          reveal_M0._default.eval, 
          M0.Expression.fun(expr#0), 
          stC#0, 
          env#0, 
          Lit(true)));
    $rhs#1 := $Unbox(M0.Tuple.fst(M0.__default.eval($LS($LZ), 
          reveal_M0._default.eval, 
          M0.Expression.fun(expr#0), 
          stC#0, 
          env#0, 
          Lit(true)))): DatatypeType;
    fun#0 := $rhs#0;
    funC#0 := $rhs#1;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(397,21)
    assume true;
    assume true;
    ##context#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##context#0, Tclass.M0.Expression(), $Heap);
    assert {:id "id436"} M0.Expression.exprInvocation_q(expr#0);
    ##args#0 := M0.Expression.args(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
    ##stOrig#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
    ##env#5 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#5, Tclass.M0.Env(), $Heap);
    ##useCache#4 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#4, TBool, $Heap);
    assert {:id "id437"} {:subsumption 0} M0.__default.ValidEnv(##env#5);
    assert {:id "id438"} {:subsumption 0} (forall arg#0: DatatypeType :: 
      { Seq#Contains(##args#0, $Box(arg#0)) } 
      $Is(arg#0, Tclass.M0.Expression())
         ==> 
        Seq#Contains(##args#0, $Box(arg#0))
         ==> DtRank(arg#0) < DtRank(##context#0));
    assume M0.__default.ValidEnv(##env#5)
       && (forall arg#0: DatatypeType :: 
        { Seq#Contains(##args#0, $Box(arg#0)) } 
        $Is(arg#0, Tclass.M0.Expression())
           ==> 
          Seq#Contains(##args#0, $Box(arg#0))
           ==> DtRank(arg#0) < DtRank(##context#0));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false)));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false)));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false))
       && M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false)));
    $rhs#2 := $Unbox(M0.Tuple.fst(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false)))): Seq;
    ##context#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##context#1, Tclass.M0.Expression(), $Heap);
    assert {:id "id440"} M0.Expression.exprInvocation_q(expr#0);
    ##args#1 := M0.Expression.args(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#1, TSeq(Tclass.M0.Expression()), $Heap);
    ##stOrig#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#1, Tclass.M0.State(), $Heap);
    ##env#6 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#6, Tclass.M0.Env(), $Heap);
    ##useCache#5 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#5, TBool, $Heap);
    assert {:id "id441"} {:subsumption 0} M0.__default.ValidEnv(##env#6);
    assert {:id "id442"} {:subsumption 0} (forall arg#1: DatatypeType :: 
      { Seq#Contains(##args#1, $Box(arg#1)) } 
      $Is(arg#1, Tclass.M0.Expression())
         ==> 
        Seq#Contains(##args#1, $Box(arg#1))
         ==> DtRank(arg#1) < DtRank(##context#1));
    assume M0.__default.ValidEnv(##env#6)
       && (forall arg#1: DatatypeType :: 
        { Seq#Contains(##args#1, $Box(arg#1)) } 
        $Is(arg#1, Tclass.M0.Expression())
           ==> 
          Seq#Contains(##args#1, $Box(arg#1))
           ==> DtRank(arg#1) < DtRank(##context#1));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true)));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true)));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true))
       && M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true)));
    $rhs#3 := $Unbox(M0.Tuple.fst(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true)))): Seq;
    args#0 := $rhs#2;
    argsC#0 := $rhs#3;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(399,5)
    ##expr#4 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#4, Tclass.M0.Expression(), $Heap);
    ##st#7 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
    ##env#7 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#7, Tclass.M0.Env(), $Heap);
    ##useCache#6 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#6, TBool, $Heap);
    assert {:id "id446"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#4);
    assert {:id "id447"} {:subsumption 0} M0.__default.ValidEnv(##env#7);
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume $IsA#M0.Expression(fun#0)
       && $IsA#M0.Expression($Unbox(M0.Triple._0(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)))): DatatypeType)
       && 
      M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false))
       && M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assert {:id "id448"} M0.Expression#Equal(fun#0, 
      $Unbox(M0.Triple._0(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)))): DatatypeType);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(400,5)
    ##expr#5 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#5, Tclass.M0.Expression(), $Heap);
    ##st#8 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#8, Tclass.M0.State(), $Heap);
    ##env#8 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#8, Tclass.M0.Env(), $Heap);
    ##useCache#7 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#7, TBool, $Heap);
    assert {:id "id449"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#5);
    assert {:id "id450"} {:subsumption 0} M0.__default.ValidEnv(##env#8);
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false))
       && M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assert {:id "id451"} Seq#Equal(args#0, 
      $Unbox(M0.Triple._1(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)))): Seq);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(401,5)
    ##expr#6 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#6, Tclass.M0.Expression(), $Heap);
    ##st#9 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#9, Tclass.M0.State(), $Heap);
    ##env#9 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#9, Tclass.M0.Env(), $Heap);
    ##useCache#8 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#8, TBool, $Heap);
    assert {:id "id452"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#6);
    assert {:id "id453"} {:subsumption 0} M0.__default.ValidEnv(##env#9);
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume $IsA#M0.Expression(funC#0)
       && $IsA#M0.Expression($Unbox(M0.Triple._0(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)))): DatatypeType)
       && 
      M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true))
       && M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assert {:id "id454"} M0.Expression#Equal(funC#0, 
      $Unbox(M0.Triple._0(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)))): DatatypeType);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(402,5)
    ##expr#7 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#7, Tclass.M0.Expression(), $Heap);
    ##st#10 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#10, Tclass.M0.State(), $Heap);
    ##env#10 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#10, Tclass.M0.Env(), $Heap);
    ##useCache#9 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#9, TBool, $Heap);
    assert {:id "id455"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#7);
    assert {:id "id456"} {:subsumption 0} M0.__default.ValidEnv(##env#10);
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true))
       && M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assert {:id "id457"} Seq#Equal(argsC#0, 
      $Unbox(M0.Triple._1(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)))): Seq);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(404,30)
    assume true;
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type Expression
    // TrCallStmt: Adding lhs with type State
    // TrCallStmt: Adding lhs with type State
    // TrCallStmt: Before ProcessCallStmt
    assert {:id "id458"} M0.Expression.exprInvocation_q(expr#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##0 := M0.Expression.fun(expr#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##0 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##0 := env#0;
    assert {:id "id459"} DtRank(expr##0) < DtRank(expr#0);
    call {:id "id460"} $rhs##0, $rhs##1, $rhs##2 := Call$$M0.__default.Lemma__Eval(expr##0, st##0, stC##0, env##0);
    // TrCallStmt: After ProcessCallStmt
    _v0#0 := $rhs##0;
    _v1#0 := $rhs##1;
    defass#_v1#0 := true;
    _v2#0 := $rhs##2;
    defass#_v2#0 := true;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(405,34)
    assume true;
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type seq<Expression>
    // TrCallStmt: Adding lhs with type set<State>
    // TrCallStmt: Adding lhs with type set<State>
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    context##0 := expr#0;
    assert {:id "id464"} M0.Expression.exprInvocation_q(expr#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    args##0 := M0.Expression.args(expr#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrig##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrigC##0 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##1 := env#0;
    assert {:id "id465"} 0 <= LitInt(0) || DtRank(context##0) <= DtRank(expr#0) || LitInt(0) == LitInt(0);
    assert {:id "id466"} DtRank(context##0) <= DtRank(expr#0)
       && (DtRank(context##0) == DtRank(expr#0) ==> LitInt(0) <= LitInt(0));
    call {:id "id467"} $rhs##3, $rhs##4, $rhs##5 := Call$$M0.__default.Lemma__EvalArgs(context##0, args##0, stOrig##0, stOrigC##0, env##1);
    // TrCallStmt: After ProcessCallStmt
    _v3#0 := $rhs##3;
    _v4#0 := $rhs##4;
    _v5#0 := $rhs##5;
}



procedure {:verboseName "M0.Lemma_EvalFunArgs_TwoState_StateCorrespondence (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__EvalFunArgs__TwoState__StateCorrespondence(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    p#0: DatatypeType
       where $Is(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(p#0), 
    pC#0: DatatypeType
       where $Is(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(pC#0));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_EvalFunArgs_TwoState_StateCorrespondence (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__EvalFunArgs__TwoState__StateCorrespondence(expr#0: DatatypeType, 
    st#0: Box, 
    stC#0: Box, 
    env#0: Box, 
    p#0: DatatypeType, 
    pC#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##env#0: Box;
  var ##stC#0: Box;
  var ##st#2: Box;
  var ##stC#1: Box;
  var ##expr#0: DatatypeType;
  var ##st#3: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##expr#1: DatatypeType;
  var ##st#4: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;
  var ##st#5: Box;
  var ##sts#0: Set;
  var ##useCache#2: bool;
  var ##stC#2: Box;
  var ##sts#1: Set;
  var ##useCache#3: bool;


    // AddMethodImpl: Lemma_EvalFunArgs_TwoState_StateCorrespondence, CheckWellFormed$$M0.__default.Lemma__EvalFunArgs__TwoState__StateCorrespondence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id471"} M0.Expression.exprInvocation_q(expr#0);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id472"} M0.__default.ValidState(st#0);
    ##st#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stC#0);
    assume {:id "id473"} M0.__default.ValidState(stC#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id474"} M0.__default.ValidEnv(env#0);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id475"} M0.__default.ConsistentCache(stC#0);
    ##st#2 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st#0, stC#0);
    assume {:id "id476"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id477"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#0);
    assert {:id "id478"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.Expression.exprInvocation_q(##expr#0) && M0.__default.ValidEnv(##env#1);
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume {:id "id479"} M0.Triple#Equal(p#0, M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    ##expr#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
    ##st#4 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
    ##useCache#1 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id480"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#1);
    assert {:id "id481"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
    assume M0.Expression.exprInvocation_q(##expr#1) && M0.__default.ValidEnv(##env#2);
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume {:id "id482"} M0.Triple#Equal(pC#0, M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    havoc $Heap;
    assume old($Heap) == $Heap;
    assume M0.Triple.Tri_q(p#0);
    ##sts#0 := $Unbox(M0.Triple._2(p#0)): Set;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    ##useCache#2 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#2, TBool, $Heap);
    assert {:id "id483"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
    assume !Set#Equal(##sts#0, Set#Empty(): Set);
    assume M0.__default.Combine#canCall($Unbox(M0.Triple._2(p#0)): Set, Lit(false));
    ##st#5 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(p#0)): Set, Lit(false));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
    assume M0.Triple.Tri_q(pC#0);
    ##sts#1 := $Unbox(M0.Triple._2(pC#0)): Set;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
    ##useCache#3 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#3, TBool, $Heap);
    assert {:id "id484"} {:subsumption 0} !Set#Equal(##sts#1, Set#Empty(): Set);
    assume !Set#Equal(##sts#1, Set#Empty(): Set);
    assume M0.__default.Combine#canCall($Unbox(M0.Triple._2(pC#0)): Set, Lit(true));
    ##stC#2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(pC#0)): Set, Lit(true));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#2, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(p#0)): Set, Lit(false)), 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(pC#0)): Set, Lit(true)));
    assume {:id "id485"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(p#0)): Set, Lit(false)), 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(pC#0)): Set, Lit(true)));
}



procedure {:verboseName "M0.Lemma_EvalFunArgs_TwoState_StateCorrespondence (call)"} Call$$M0.__default.Lemma__EvalFunArgs__TwoState__StateCorrespondence(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    p#0: DatatypeType
       where $Is(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(p#0), 
    pC#0: DatatypeType
       where $Is(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(pC#0));
  // user-defined preconditions
  requires {:id "id486"} M0.Expression.exprInvocation_q(expr#0);
  requires {:id "id487"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#1: Box :: 
        { M0.__default.WellFounded(p#1) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#1) } 
        $IsBox(p#1, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#1)
           ==> M0.__default.WellFounded(p#1));
  requires {:id "id488"} M0.__default.ValidState#canCall(stC#0)
     ==> M0.__default.ValidState(stC#0)
       || (forall p#2: Box :: 
        { M0.__default.WellFounded(p#2) } 
          { Set#IsMember(M0.__default.DomSt(stC#0), p#2) } 
        $IsBox(p#2, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stC#0), p#2)
           ==> M0.__default.WellFounded(p#2));
  requires {:id "id489"} M0.__default.ValidEnv(env#0);
  requires {:id "id490"} M0.__default.ConsistentCache#canCall(stC#0)
     ==> M0.__default.ConsistentCache(stC#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stC#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id491"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id492"} M0.Triple#Equal(p#0, M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
  requires {:id "id493"} M0.Triple#Equal(pC#0, M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.Triple.Tri_q(p#0)
     && M0.__default.Combine#canCall($Unbox(M0.Triple._2(p#0)): Set, Lit(false))
     && 
    M0.Triple.Tri_q(pC#0)
     && M0.__default.Combine#canCall($Unbox(M0.Triple._2(pC#0)): Set, Lit(true))
     && M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(p#0)): Set, Lit(false)), 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(pC#0)): Set, Lit(true)));
  ensures {:id "id494"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.__default.Combine($LS($LS($LZ)), 
      reveal_M0._default.Combine, 
      $Unbox(M0.Triple._2(p#0)): Set, 
      Lit(false)), 
    M0.__default.Combine($LS($LS($LZ)), 
      reveal_M0._default.Combine, 
      $Unbox(M0.Triple._2(pC#0)): Set, 
      Lit(true)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_EvalFunArgs_TwoState_StateCorrespondence (correctness)"} Impl$$M0.__default.Lemma__EvalFunArgs__TwoState__StateCorrespondence(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    p#0: DatatypeType
       where $Is(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(p#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(p#0), 
    pC#0: DatatypeType
       where $Is(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
         && $IsAlloc(pC#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
          $Heap)
         && $IsA#M0.Triple(pC#0))
   returns ($_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id495"} M0.Expression.exprInvocation_q(expr#0);
  free requires {:id "id496"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#3: Box :: 
      { M0.__default.WellFounded(p#3) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#3) } 
      $IsBox(p#3, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#3)
         ==> M0.__default.WellFounded(p#3));
  free requires {:id "id497"} M0.__default.ValidState#canCall(stC#0)
     && 
    M0.__default.ValidState(stC#0)
     && (forall p#4: Box :: 
      { M0.__default.WellFounded(p#4) } 
        { Set#IsMember(M0.__default.DomSt(stC#0), p#4) } 
      $IsBox(p#4, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stC#0), p#4)
         ==> M0.__default.WellFounded(p#4));
  requires {:id "id498"} M0.__default.ValidEnv(env#0);
  free requires {:id "id499"} M0.__default.ConsistentCache#canCall(stC#0)
     && 
    M0.__default.ConsistentCache(stC#0)
     && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
      { M0.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, TSeq(TChar))
           && $Is(deps#1, TSet(Tclass.M0.Path()))
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(M0.__default.DomC(stC#0), 
          M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  requires {:id "id500"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id501"} M0.Triple#Equal(p#0, M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
  requires {:id "id502"} M0.Triple#Equal(pC#0, M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.Triple.Tri_q(p#0)
     && M0.__default.Combine#canCall($Unbox(M0.Triple._2(p#0)): Set, Lit(false))
     && 
    M0.Triple.Tri_q(pC#0)
     && M0.__default.Combine#canCall($Unbox(M0.Triple._2(pC#0)): Set, Lit(true))
     && M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(p#0)): Set, Lit(false)), 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $Unbox(M0.Triple._2(pC#0)): Set, Lit(true)));
  ensures {:id "id503"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.__default.Combine($LS($LS($LZ)), 
      reveal_M0._default.Combine, 
      $Unbox(M0.Triple._2(p#0)): Set, 
      Lit(false)), 
    M0.__default.Combine($LS($LS($LZ)), 
      reveal_M0._default.Combine, 
      $Unbox(M0.Triple._2(pC#0)): Set, 
      Lit(true)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_EvalFunArgs_TwoState_StateCorrespondence (correctness)"} Impl$$M0.__default.Lemma__EvalFunArgs__TwoState__StateCorrespondence(expr#0: DatatypeType, 
    st#0: Box, 
    stC#0: Box, 
    env#0: Box, 
    p#0: DatatypeType, 
    pC#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var fun#0: DatatypeType
     where $Is(fun#0, Tclass.M0.Expression())
       && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap);
  var funC#0: DatatypeType
     where $Is(funC#0, Tclass.M0.Expression())
       && $IsAlloc(funC#0, Tclass.M0.Expression(), $Heap);
  var $rhs#0: DatatypeType;
  var ##expr#2: DatatypeType;
  var ##st#6: Box;
  var ##env#3: Box;
  var ##useCache#4: bool;
  var $rhs#1: DatatypeType;
  var ##expr#3: DatatypeType;
  var ##st#7: Box;
  var ##env#4: Box;
  var ##useCache#5: bool;
  var args#0: Seq
     where $Is(args#0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap);
  var argsC#0: Seq
     where $Is(argsC#0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(argsC#0, TSeq(Tclass.M0.Expression()), $Heap);
  var $rhs#2: Seq;
  var ##context#0: DatatypeType;
  var ##args#0: Seq;
  var ##stOrig#0: Box;
  var ##env#5: Box;
  var ##useCache#6: bool;
  var $rhs#3: Seq;
  var ##context#1: DatatypeType;
  var ##args#1: Seq;
  var ##stOrig#1: Box;
  var ##env#6: Box;
  var ##useCache#7: bool;
  var ##expr#4: DatatypeType;
  var ##st#8: Box;
  var ##env#7: Box;
  var ##useCache#8: bool;
  var ##expr#5: DatatypeType;
  var ##st#9: Box;
  var ##env#8: Box;
  var ##useCache#9: bool;
  var ##expr#6: DatatypeType;
  var ##st#10: Box;
  var ##env#9: Box;
  var ##useCache#10: bool;
  var ##expr#7: DatatypeType;
  var ##st#11: Box;
  var ##env#10: Box;
  var ##useCache#11: bool;
  var _v6#0: DatatypeType
     where $Is(_v6#0, Tclass.M0.Expression())
       && $IsAlloc(_v6#0, Tclass.M0.Expression(), $Heap);
  var defass#stFun#0: bool;
  var stFun#0: Box
     where defass#stFun#0
       ==> $IsBox(stFun#0, Tclass.M0.State())
         && $IsAllocBox(stFun#0, Tclass.M0.State(), $Heap);
  var defass#stFunC#0: bool;
  var stFunC#0: Box
     where defass#stFunC#0
       ==> $IsBox(stFunC#0, Tclass.M0.State())
         && $IsAllocBox(stFunC#0, Tclass.M0.State(), $Heap);
  var $rhs##0: DatatypeType;
  var $rhs##1: Box;
  var $rhs##2: Box;
  var expr##0: DatatypeType;
  var st##0: Box;
  var stC##0: Box;
  var env##0: Box;
  var _v7#0: Seq
     where $Is(_v7#0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(_v7#0, TSeq(Tclass.M0.Expression()), $Heap);
  var stsArgs#0: Set
     where $Is(stsArgs#0, TSet(Tclass.M0.State()))
       && $IsAlloc(stsArgs#0, TSet(Tclass.M0.State()), $Heap);
  var stsArgsC#0: Set
     where $Is(stsArgsC#0, TSet(Tclass.M0.State()))
       && $IsAlloc(stsArgsC#0, TSet(Tclass.M0.State()), $Heap);
  var $rhs##3: Seq;
  var $rhs##4: Set;
  var $rhs##5: Set;
  var context##0: DatatypeType;
  var args##0: Seq;
  var stOrig##0: Box;
  var stOrigC##0: Box;
  var env##1: Box;
  var stOrig##1: Box;
  var sts##0: Set;
  var stOrig##2: Box;
  var sts##1: Set;
  var stOrig##3: Box;
  var st##1: Box;
  var sts##2: Set;
  var stC##1: Box;
  var stsC##0: Set;

    // AddMethodImpl: Lemma_EvalFunArgs_TwoState_StateCorrespondence, Impl$$M0.__default.Lemma__EvalFunArgs__TwoState__StateCorrespondence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(417,19)
    assume true;
    assume true;
    assert {:id "id504"} M0.Expression.exprInvocation_q(expr#0);
    ##expr#2 := M0.Expression.fun(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#2, Tclass.M0.Expression(), $Heap);
    ##st#6 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
    ##env#3 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#3, Tclass.M0.Env(), $Heap);
    ##useCache#4 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#4, TBool, $Heap);
    assert {:id "id505"} {:subsumption 0} M0.__default.ValidEnv(##env#3);
    assume M0.__default.ValidEnv(##env#3);
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
        reveal_M0._default.eval, 
        M0.Expression.fun(expr#0), 
        st#0, 
        env#0, 
        Lit(false)));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
        reveal_M0._default.eval, 
        M0.Expression.fun(expr#0), 
        st#0, 
        env#0, 
        Lit(false)));
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, Lit(false))
       && M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
          reveal_M0._default.eval, 
          M0.Expression.fun(expr#0), 
          st#0, 
          env#0, 
          Lit(false)));
    $rhs#0 := $Unbox(M0.Tuple.fst(M0.__default.eval($LS($LZ), 
          reveal_M0._default.eval, 
          M0.Expression.fun(expr#0), 
          st#0, 
          env#0, 
          Lit(false)))): DatatypeType;
    assert {:id "id507"} M0.Expression.exprInvocation_q(expr#0);
    ##expr#3 := M0.Expression.fun(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#3, Tclass.M0.Expression(), $Heap);
    ##st#7 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
    ##env#4 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#4, Tclass.M0.Env(), $Heap);
    ##useCache#5 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#5, TBool, $Heap);
    assert {:id "id508"} {:subsumption 0} M0.__default.ValidEnv(##env#4);
    assume M0.__default.ValidEnv(##env#4);
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
        reveal_M0._default.eval, 
        M0.Expression.fun(expr#0), 
        stC#0, 
        env#0, 
        Lit(true)));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
        reveal_M0._default.eval, 
        M0.Expression.fun(expr#0), 
        stC#0, 
        env#0, 
        Lit(true)));
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), stC#0, env#0, Lit(true))
       && M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
          reveal_M0._default.eval, 
          M0.Expression.fun(expr#0), 
          stC#0, 
          env#0, 
          Lit(true)));
    $rhs#1 := $Unbox(M0.Tuple.fst(M0.__default.eval($LS($LZ), 
          reveal_M0._default.eval, 
          M0.Expression.fun(expr#0), 
          stC#0, 
          env#0, 
          Lit(true)))): DatatypeType;
    fun#0 := $rhs#0;
    funC#0 := $rhs#1;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(418,21)
    assume true;
    assume true;
    ##context#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##context#0, Tclass.M0.Expression(), $Heap);
    assert {:id "id512"} M0.Expression.exprInvocation_q(expr#0);
    ##args#0 := M0.Expression.args(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
    ##stOrig#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
    ##env#5 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#5, Tclass.M0.Env(), $Heap);
    ##useCache#6 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#6, TBool, $Heap);
    assert {:id "id513"} {:subsumption 0} M0.__default.ValidEnv(##env#5);
    assert {:id "id514"} {:subsumption 0} (forall arg#0: DatatypeType :: 
      { Seq#Contains(##args#0, $Box(arg#0)) } 
      $Is(arg#0, Tclass.M0.Expression())
         ==> 
        Seq#Contains(##args#0, $Box(arg#0))
         ==> DtRank(arg#0) < DtRank(##context#0));
    assume M0.__default.ValidEnv(##env#5)
       && (forall arg#0: DatatypeType :: 
        { Seq#Contains(##args#0, $Box(arg#0)) } 
        $Is(arg#0, Tclass.M0.Expression())
           ==> 
          Seq#Contains(##args#0, $Box(arg#0))
           ==> DtRank(arg#0) < DtRank(##context#0));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false)));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false)));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false))
       && M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false)));
    $rhs#2 := $Unbox(M0.Tuple.fst(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, Lit(false)))): Seq;
    ##context#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##context#1, Tclass.M0.Expression(), $Heap);
    assert {:id "id516"} M0.Expression.exprInvocation_q(expr#0);
    ##args#1 := M0.Expression.args(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#1, TSeq(Tclass.M0.Expression()), $Heap);
    ##stOrig#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#1, Tclass.M0.State(), $Heap);
    ##env#6 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#6, Tclass.M0.Env(), $Heap);
    ##useCache#7 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#7, TBool, $Heap);
    assert {:id "id517"} {:subsumption 0} M0.__default.ValidEnv(##env#6);
    assert {:id "id518"} {:subsumption 0} (forall arg#1: DatatypeType :: 
      { Seq#Contains(##args#1, $Box(arg#1)) } 
      $Is(arg#1, Tclass.M0.Expression())
         ==> 
        Seq#Contains(##args#1, $Box(arg#1))
         ==> DtRank(arg#1) < DtRank(##context#1));
    assume M0.__default.ValidEnv(##env#6)
       && (forall arg#1: DatatypeType :: 
        { Seq#Contains(##args#1, $Box(arg#1)) } 
        $Is(arg#1, Tclass.M0.Expression())
           ==> 
          Seq#Contains(##args#1, $Box(arg#1))
           ==> DtRank(arg#1) < DtRank(##context#1));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true)));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true)));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true))
       && M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true)));
    $rhs#3 := $Unbox(M0.Tuple.fst(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), stC#0, env#0, Lit(true)))): Seq;
    args#0 := $rhs#2;
    argsC#0 := $rhs#3;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(420,5)
    ##expr#4 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#4, Tclass.M0.Expression(), $Heap);
    ##st#8 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#8, Tclass.M0.State(), $Heap);
    ##env#7 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#7, Tclass.M0.Env(), $Heap);
    ##useCache#8 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#8, TBool, $Heap);
    assert {:id "id522"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#4);
    assert {:id "id523"} {:subsumption 0} M0.__default.ValidEnv(##env#7);
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume $IsA#M0.Expression(fun#0)
       && $IsA#M0.Expression($Unbox(M0.Triple._0(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)))): DatatypeType)
       && 
      M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false))
       && M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assert {:id "id524"} M0.Expression#Equal(fun#0, 
      $Unbox(M0.Triple._0(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)))): DatatypeType);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(421,5)
    ##expr#5 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#5, Tclass.M0.Expression(), $Heap);
    ##st#9 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#9, Tclass.M0.State(), $Heap);
    ##env#8 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#8, Tclass.M0.Env(), $Heap);
    ##useCache#9 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#9, TBool, $Heap);
    assert {:id "id525"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#5);
    assert {:id "id526"} {:subsumption 0} M0.__default.ValidEnv(##env#8);
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false))
       && M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assert {:id "id527"} Seq#Equal(args#0, 
      $Unbox(M0.Triple._1(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)))): Seq);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(422,5)
    ##expr#6 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#6, Tclass.M0.Expression(), $Heap);
    ##st#10 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#10, Tclass.M0.State(), $Heap);
    ##env#9 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#9, Tclass.M0.Env(), $Heap);
    ##useCache#10 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#10, TBool, $Heap);
    assert {:id "id528"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#6);
    assert {:id "id529"} {:subsumption 0} M0.__default.ValidEnv(##env#9);
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume $IsA#M0.Expression(funC#0)
       && $IsA#M0.Expression($Unbox(M0.Triple._0(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)))): DatatypeType)
       && 
      M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true))
       && M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assert {:id "id530"} M0.Expression#Equal(funC#0, 
      $Unbox(M0.Triple._0(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)))): DatatypeType);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(423,5)
    ##expr#7 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#7, Tclass.M0.Expression(), $Heap);
    ##st#11 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#11, Tclass.M0.State(), $Heap);
    ##env#10 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#10, Tclass.M0.Env(), $Heap);
    ##useCache#11 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#11, TBool, $Heap);
    assert {:id "id531"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#7);
    assert {:id "id532"} {:subsumption 0} M0.__default.ValidEnv(##env#10);
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true))
       && M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assert {:id "id533"} Seq#Equal(argsC#0, 
      $Unbox(M0.Triple._1(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)))): Seq);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(425,39)
    assume true;
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type Expression
    // TrCallStmt: Adding lhs with type State
    // TrCallStmt: Adding lhs with type State
    // TrCallStmt: Before ProcessCallStmt
    assert {:id "id534"} M0.Expression.exprInvocation_q(expr#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##0 := M0.Expression.fun(expr#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##0 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##0 := env#0;
    assert {:id "id535"} DtRank(expr##0) < DtRank(expr#0);
    call {:id "id536"} $rhs##0, $rhs##1, $rhs##2 := Call$$M0.__default.Lemma__Eval(expr##0, st##0, stC##0, env##0);
    // TrCallStmt: After ProcessCallStmt
    _v6#0 := $rhs##0;
    stFun#0 := $rhs##1;
    defass#stFun#0 := true;
    stFunC#0 := $rhs##2;
    defass#stFunC#0 := true;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(426,47)
    assume true;
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type seq<Expression>
    // TrCallStmt: Adding lhs with type set<State>
    // TrCallStmt: Adding lhs with type set<State>
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    context##0 := expr#0;
    assert {:id "id540"} M0.Expression.exprInvocation_q(expr#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    args##0 := M0.Expression.args(expr#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrig##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrigC##0 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##1 := env#0;
    assert {:id "id541"} 0 <= LitInt(0) || DtRank(context##0) <= DtRank(expr#0) || LitInt(0) == LitInt(0);
    assert {:id "id542"} DtRank(context##0) <= DtRank(expr#0)
       && (DtRank(context##0) == DtRank(expr#0) ==> LitInt(0) <= LitInt(0));
    call {:id "id543"} $rhs##3, $rhs##4, $rhs##5 := Call$$M0.__default.Lemma__EvalArgs(context##0, args##0, stOrig##0, stOrigC##0, env##1);
    // TrCallStmt: After ProcessCallStmt
    _v7#0 := $rhs##3;
    stsArgs#0 := $rhs##4;
    stsArgsC#0 := $rhs##5;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(427,5)
    assume M0.Triple.Tri_q(p#0);
    assert {:id "id547"} defass#stFun#0;
    assume M0.Triple.Tri_q(p#0);
    assert {:id "id548"} Set#Equal($Unbox(M0.Triple._2(p#0)): Set, 
      Set#Union(Set#UnionOne(Set#Empty(): Set, stFun#0), stsArgs#0));
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(428,5)
    assume M0.Triple.Tri_q(pC#0);
    assert {:id "id549"} defass#stFunC#0;
    assume M0.Triple.Tri_q(pC#0);
    assert {:id "id550"} Set#Equal($Unbox(M0.Triple._2(pC#0)): Set, 
      Set#Union(Set#UnionOne(Set#Empty(): Set, stFunC#0), stsArgsC#0));
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(429,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrig##1 := st#0;
    assume M0.Triple.Tri_q(p#0);
    assume M0.Triple.Tri_q(p#0);
    // ProcessCallStmt: CheckSubrange
    sts##0 := $Unbox(M0.Triple._2(p#0)): Set;
    call {:id "id551"} Call$$M0.__default.CompatibleProperty(stOrig##1, sts##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(430,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrig##2 := stC#0;
    assume M0.Triple.Tri_q(pC#0);
    assume M0.Triple.Tri_q(pC#0);
    // ProcessCallStmt: CheckSubrange
    sts##1 := $Unbox(M0.Triple._2(pC#0)): Set;
    call {:id "id552"} Call$$M0.__default.CompatibleProperty(stOrig##2, sts##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(431,29)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrig##3 := st#0;
    assert {:id "id553"} defass#stFun#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##1 := stFun#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts##2 := stsArgs#0;
    assert {:id "id554"} defass#stFunC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##1 := stFunC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stsC##0 := stsArgsC#0;
    call {:id "id555"} Call$$M0.__default.StateCorrespondence__Ctor(stOrig##3, st##1, sts##2, stC##1, stsC##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M0.Lemma_EvalFunArgs (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__EvalFunArgs(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool, 
    sts''#0: Set
       where $Is(sts''#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts''#0, TSet(Tclass.M0.State()), $Heap));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_EvalFunArgs (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__EvalFunArgs(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool, sts''#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##env#0: Box;
  var ##stC#0: Box;
  var ##expr#0: DatatypeType;
  var ##st#1: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##sts#0: Set;
  var s#0: Box;
  var ##st#2: Box;
  var ##st#3: Box;
  var ##st'#0: Box;
  var ##stC#1: Box;


    // AddMethodImpl: Lemma_EvalFunArgs, CheckWellFormed$$M0.__default.Lemma__EvalFunArgs
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id556"} M0.Expression.exprInvocation_q(expr#0);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id557"} M0.__default.ValidState(st#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id558"} M0.__default.ValidEnv(env#0);
    if (*)
    {
        assume {:id "id559"} useCache#0;
        ##stC#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(st#0);
        assume {:id "id560"} M0.__default.ConsistentCache(st#0);
    }
    else
    {
        assume {:id "id561"} useCache#0 ==> M0.__default.ConsistentCache(st#0);
    }

    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
    ##st#1 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id562"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#0);
    assert {:id "id563"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.Expression.exprInvocation_q(##expr#0) && M0.__default.ValidEnv(##env#1);
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, useCache#0);
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0));
    assume {:id "id564"} Set#Equal($Unbox(M0.Triple._2(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0))): Set, 
      sts''#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##sts#0 := sts''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(sts''#0);
    assume {:id "id565"} M0.__default.Compatible(sts''#0);
    havoc s#0;
    assume $IsBox(s#0, Tclass.M0.State()) && $IsAllocBox(s#0, Tclass.M0.State(), $Heap);
    if (*)
    {
        assume {:id "id566"} Set#IsMember(sts''#0, s#0);
        ##st#2 := s#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
        assume M0.__default.ValidState#canCall(s#0);
        assume {:id "id567"} M0.__default.ValidState(s#0);
        ##st#3 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
        ##st'#0 := s#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(st#0, s#0);
        assume {:id "id568"} M0.__default.Extends(reveal_M0._default.Extends, st#0, s#0);
        if (useCache#0)
        {
            ##stC#1 := s#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
            assume M0.__default.ConsistentCache#canCall(s#0);
        }

        assume {:id "id569"} useCache#0 ==> M0.__default.ConsistentCache(s#0);
    }
    else
    {
        assume {:id "id570"} Set#IsMember(sts''#0, s#0)
           ==> M0.__default.ValidState(s#0)
             && M0.__default.Extends(reveal_M0._default.Extends, st#0, s#0)
             && (useCache#0 ==> M0.__default.ConsistentCache(s#0));
    }

    assume {:id "id571"} (forall s#1: Box :: 
      { M0.__default.ConsistentCache(s#1) } 
        { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1) } 
        { M0.__default.ValidState(s#1) } 
        { Set#IsMember(sts''#0, s#1) } 
      $IsBox(s#1, Tclass.M0.State())
         ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.ValidState(s#1))
           && (Set#IsMember(sts''#0, s#1)
             ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1))
           && (Set#IsMember(sts''#0, s#1)
             ==> 
            useCache#0
             ==> M0.__default.ConsistentCache(s#1)));
}



procedure {:verboseName "M0.Lemma_EvalFunArgs (call)"} Call$$M0.__default.Lemma__EvalFunArgs(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool, 
    sts''#0: Set
       where $Is(sts''#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts''#0, TSet(Tclass.M0.State()), $Heap));
  // user-defined preconditions
  requires {:id "id572"} M0.Expression.exprInvocation_q(expr#0);
  requires {:id "id573"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id574"} M0.__default.ValidEnv(env#0);
  requires {:id "id575"} useCache#0
     ==> 
    M0.__default.ConsistentCache#canCall(st#0)
     ==> M0.__default.ConsistentCache(st#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id576"} Set#Equal($Unbox(M0.Triple._2(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0))): Set, 
    sts''#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Compatible#canCall(sts''#0);
  free ensures {:id "id577"} M0.__default.Compatible#canCall(sts''#0)
     && 
    M0.__default.Compatible(sts''#0)
     && (forall st#1: Box, st'#0: Box :: 
      { M0.__default.DomSt(st'#0), M0.__default.DomSt(st#1) } 
        { M0.__default.DomSt(st'#0), Set#IsMember(sts''#0, st#1) } 
        { M0.__default.DomSt(st#1), Set#IsMember(sts''#0, st'#0) } 
        { Set#IsMember(sts''#0, st'#0), Set#IsMember(sts''#0, st#1) } 
      $IsBox(st#1, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
         ==> 
        Set#IsMember(sts''#0, st#1) && Set#IsMember(sts''#0, st'#0)
         ==> (forall p#1: Box :: 
          { M0.__default.GetSt(p#1, st'#0) } 
            { M0.__default.GetSt(p#1, st#1) } 
            { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
            { Set#IsMember(M0.__default.DomSt(st#1), p#1) } 
          $IsBox(p#1, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st#1), p#1)
               && Set#IsMember(M0.__default.DomSt(st'#0), p#1)
             ==> M0.__default.GetSt(p#1, st#1) == M0.__default.GetSt(p#1, st'#0)));
  free ensures (forall s#1: Box :: 
    { M0.__default.ConsistentCache(s#1) } 
      { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts''#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.ValidState#canCall(s#1))
         && (
          (Set#IsMember(sts''#0, s#1)
           ==> M0.__default.ValidState(s#1))
           ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.Extends#canCall(st#0, s#1))
             && (
              (Set#IsMember(sts''#0, s#1)
               ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1))
               ==> 
              Set#IsMember(sts''#0, s#1)
               ==> 
              useCache#0
               ==> M0.__default.ConsistentCache#canCall(s#1))));
  ensures {:id "id578"} (forall s#1: Box :: 
    { M0.__default.ConsistentCache(s#1) } 
      { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts''#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.ValidState(s#1))
         && (Set#IsMember(sts''#0, s#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1))
         && (Set#IsMember(sts''#0, s#1)
           ==> 
          useCache#0
           ==> M0.__default.ConsistentCache(s#1)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_EvalFunArgs (correctness)"} Impl$$M0.__default.Lemma__EvalFunArgs(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool, 
    sts''#0: Set
       where $Is(sts''#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts''#0, TSet(Tclass.M0.State()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id579"} M0.Expression.exprInvocation_q(expr#0);
  free requires {:id "id580"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  requires {:id "id581"} M0.__default.ValidEnv(env#0);
  free requires {:id "id582"} useCache#0
     ==> M0.__default.ConsistentCache#canCall(st#0)
       && 
      M0.__default.ConsistentCache(st#0)
       && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
        { M0.__default.Loc(cmd#1, deps#1, e#1) } 
        $Is(cmd#1, TSeq(TChar))
             && $Is(deps#1, TSet(Tclass.M0.Path()))
             && $Is(e#1, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  requires {:id "id583"} Set#Equal($Unbox(M0.Triple._2(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0))): Set, 
    sts''#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Compatible#canCall(sts''#0);
  ensures {:id "id584"} M0.__default.Compatible#canCall(sts''#0)
     ==> M0.__default.Compatible(sts''#0)
       || (forall st#2: Box, st'#1: Box :: 
        { M0.__default.DomSt(st'#1), M0.__default.DomSt(st#2) } 
          { M0.__default.DomSt(st'#1), Set#IsMember(sts''#0, st#2) } 
          { M0.__default.DomSt(st#2), Set#IsMember(sts''#0, st'#1) } 
          { Set#IsMember(sts''#0, st'#1), Set#IsMember(sts''#0, st#2) } 
        $IsBox(st#2, Tclass.M0.State()) && $IsBox(st'#1, Tclass.M0.State())
           ==> 
          Set#IsMember(sts''#0, st#2) && Set#IsMember(sts''#0, st'#1)
           ==> (forall p#3: Box :: 
            { M0.__default.GetSt(p#3, st'#1) } 
              { M0.__default.GetSt(p#3, st#2) } 
              { Set#IsMember(M0.__default.DomSt(st'#1), p#3) } 
              { Set#IsMember(M0.__default.DomSt(st#2), p#3) } 
            $IsBox(p#3, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#2), p#3)
                 && Set#IsMember(M0.__default.DomSt(st'#1), p#3)
               ==> M0.__default.GetSt(p#3, st#2) == M0.__default.GetSt(p#3, st'#1)));
  free ensures (forall s#1: Box :: 
    { M0.__default.ConsistentCache(s#1) } 
      { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts''#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.ValidState#canCall(s#1))
         && (
          (Set#IsMember(sts''#0, s#1)
           ==> M0.__default.ValidState(s#1))
           ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.Extends#canCall(st#0, s#1))
             && (
              (Set#IsMember(sts''#0, s#1)
               ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1))
               ==> 
              Set#IsMember(sts''#0, s#1)
               ==> 
              useCache#0
               ==> M0.__default.ConsistentCache#canCall(s#1))));
  ensures {:id "id585"} (forall s#1: Box :: 
    { M0.__default.ConsistentCache(s#1) } 
      { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts''#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.ValidState(s#1))
         && (Set#IsMember(sts''#0, s#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1))
         && (Set#IsMember(sts''#0, s#1)
           ==> 
          useCache#0
           ==> M0.__default.ConsistentCache(s#1)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_EvalFunArgs (correctness)"} Impl$$M0.__default.Lemma__EvalFunArgs(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool, sts''#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var defass#resultFun#0: bool;
  var resultFun#0: DatatypeType
     where defass#resultFun#0
       ==> $Is(resultFun#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(resultFun#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var ##expr#1: DatatypeType;
  var ##st#4: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;
  var fun'#0: DatatypeType
     where $Is(fun'#0, Tclass.M0.Expression())
       && $IsAlloc(fun'#0, Tclass.M0.Expression(), $Heap);
  var defass#st'#2: bool;
  var st'#2: Box
     where defass#st'#2
       ==> $IsBox(st'#2, Tclass.M0.State()) && $IsAllocBox(st'#2, Tclass.M0.State(), $Heap);
  var $rhs#0: DatatypeType;
  var $rhs#1: Box;
  var resultArgs#0: DatatypeType
     where $Is(resultArgs#0, 
        Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
       && $IsAlloc(resultArgs#0, 
        Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
        $Heap);
  var ##context#0: DatatypeType;
  var ##args#0: Seq;
  var ##stOrig#0: Box;
  var ##env#3: Box;
  var ##useCache#2: bool;
  var args'#0: Seq
     where $Is(args'#0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(args'#0, TSeq(Tclass.M0.Expression()), $Heap);
  var sts'#0: Set
     where $Is(sts'#0, TSet(Tclass.M0.State()))
       && $IsAlloc(sts'#0, TSet(Tclass.M0.State()), $Heap);
  var $rhs#2: Seq;
  var $rhs#3: Set;
  var ##st#0_0: Box;
  var ##st#0_1: Box;
  var ##st'#0_0: Box;
  var ##stC#0_0: Box;
  var _v8#0_0: DatatypeType
     where $Is(_v8#0_0, Tclass.M0.Expression())
       && $IsAlloc(_v8#0_0, Tclass.M0.Expression(), $Heap);
  var defass#_v9#0_0: bool;
  var _v9#0_0: Box
     where defass#_v9#0_0
       ==> $IsBox(_v9#0_0, Tclass.M0.State())
         && $IsAllocBox(_v9#0_0, Tclass.M0.State(), $Heap);
  var $rhs##0_0: DatatypeType;
  var $rhs##0_1: Box;
  var expr##0_0: DatatypeType;
  var st##0_0: Box;
  var env##0_0: Box;
  var useCache##0_0: bool;
  var s#1_0: Box;
  var ##st#1_0: Box;
  var ##st#1_1: Box;
  var ##st'#1_0: Box;
  var ##stC#1_0: Box;
  var _v10#1_0: Seq
     where $Is(_v10#1_0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(_v10#1_0, TSeq(Tclass.M0.Expression()), $Heap);
  var _v11#1_0: Set
     where $Is(_v11#1_0, TSet(Tclass.M0.State()))
       && $IsAlloc(_v11#1_0, TSet(Tclass.M0.State()), $Heap);
  var $rhs##1_0: Seq;
  var $rhs##1_1: Set;
  var context##1_0: DatatypeType;
  var args##1_0: Seq;
  var stOrig##1_0: Box;
  var env##1_0: Box;
  var useCache##1_0: bool;
  var s#2: Box;
  var s#4: Box;
  var ##st#5: Box;
  var ##st'#1: Box;
  var stOrig##0: Box;
  var sts##0: Set;

    // AddMethodImpl: Lemma_EvalFunArgs, Impl$$M0.__default.Lemma__EvalFunArgs
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(441,19)
    assume true;
    assert {:id "id586"} M0.Expression.exprInvocation_q(expr#0);
    ##expr#1 := M0.Expression.fun(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
    ##st#4 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
    ##useCache#1 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id587"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
    assume M0.__default.ValidEnv(##env#2);
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
        reveal_M0._default.eval, 
        M0.Expression.fun(expr#0), 
        st#0, 
        env#0, 
        useCache#0));
    assume M0.__default.eval#canCall(M0.Expression.fun(expr#0), st#0, env#0, useCache#0);
    resultFun#0 := M0.__default.eval($LS($LZ), 
      reveal_M0._default.eval, 
      M0.Expression.fun(expr#0), 
      st#0, 
      env#0, 
      useCache#0);
    defass#resultFun#0 := true;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(442,19)
    assume true;
    assume true;
    assert {:id "id589"} defass#resultFun#0;
    assume M0.Tuple.Pair_q(resultFun#0);
    assume M0.Tuple.Pair_q(resultFun#0);
    $rhs#0 := $Unbox(M0.Tuple.fst(resultFun#0)): DatatypeType;
    assert {:id "id591"} defass#resultFun#0;
    assume M0.Tuple.Pair_q(resultFun#0);
    assume M0.Tuple.Pair_q(resultFun#0);
    $rhs#1 := M0.Tuple.snd(resultFun#0);
    fun'#0 := $rhs#0;
    st'#2 := $rhs#1;
    defass#st'#2 := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(443,20)
    assume true;
    ##context#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##context#0, Tclass.M0.Expression(), $Heap);
    assert {:id "id595"} M0.Expression.exprInvocation_q(expr#0);
    ##args#0 := M0.Expression.args(expr#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
    ##stOrig#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
    ##env#3 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#3, Tclass.M0.Env(), $Heap);
    ##useCache#2 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#2, TBool, $Heap);
    assert {:id "id596"} {:subsumption 0} M0.__default.ValidEnv(##env#3);
    assert {:id "id597"} {:subsumption 0} (forall arg#0: DatatypeType :: 
      { Seq#Contains(##args#0, $Box(arg#0)) } 
      $Is(arg#0, Tclass.M0.Expression())
         ==> 
        Seq#Contains(##args#0, $Box(arg#0))
         ==> DtRank(arg#0) < DtRank(##context#0));
    assume M0.__default.ValidEnv(##env#3)
       && (forall arg#0: DatatypeType :: 
        { Seq#Contains(##args#0, $Box(arg#0)) } 
        $Is(arg#0, Tclass.M0.Expression())
           ==> 
          Seq#Contains(##args#0, $Box(arg#0))
           ==> DtRank(arg#0) < DtRank(##context#0));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0));
    assume M0.__default.evalArgs#canCall(expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0);
    resultArgs#0 := M0.__default.evalArgs($LS($LZ), expr#0, M0.Expression.args(expr#0), st#0, env#0, useCache#0);
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(444,21)
    assume true;
    assume true;
    assume M0.Tuple.Pair_q(resultArgs#0);
    assume M0.Tuple.Pair_q(resultArgs#0);
    $rhs#2 := $Unbox(M0.Tuple.fst(resultArgs#0)): Seq;
    assume M0.Tuple.Pair_q(resultArgs#0);
    assume M0.Tuple.Pair_q(resultArgs#0);
    $rhs#3 := $Unbox(M0.Tuple.snd(resultArgs#0)): Set;
    args'#0 := $rhs#2;
    sts'#0 := $rhs#3;
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(445,5)
    assert {:id "id603"} defass#st'#2;
    assume true;
    assert {:id "id604"} Set#Equal(sts''#0, Set#Union(Set#UnionOne(Set#Empty(): Set, st'#2), sts'#0));
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(447,5)
    if (*)
    {
        // Assume Fuel Constant
        assume true;
        assume {:id "id605"} true;
        if (*)
        {
            assert {:id "id606"} defass#st'#2;
            ##st#0_0 := st'#2;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_0, Tclass.M0.State(), $Heap);
            assume M0.__default.ValidState#canCall(st'#2);
            if (M0.__default.ValidState(st'#2))
            {
                ##st#0_1 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_1, Tclass.M0.State(), $Heap);
                assert {:id "id607"} defass#st'#2;
                ##st'#0_0 := st'#2;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st'#0_0, Tclass.M0.State(), $Heap);
                assume M0.__default.Extends#canCall(st#0, st'#2);
            }

            assume M0.__default.ValidState#canCall(st'#2)
               && (M0.__default.ValidState(st'#2) ==> M0.__default.Extends#canCall(st#0, st'#2));
            assume {:id "id608"} M0.__default.ValidState(st'#2)
               && M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#2);
            if (useCache#0)
            {
                assert {:id "id609"} defass#st'#2;
                ##stC#0_0 := st'#2;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##stC#0_0, Tclass.M0.State(), $Heap);
                assume M0.__default.ConsistentCache#canCall(st'#2);
            }

            assume useCache#0 ==> M0.__default.ConsistentCache#canCall(st'#2);
            assume {:id "id610"} useCache#0 ==> M0.__default.ConsistentCache(st'#2);
            assume false;
        }

        push;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(451,28)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id611"} M0.Expression.exprInvocation_q(expr#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##0_0 := M0.Expression.fun(expr#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##0_0 := st#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##0_0 := env#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        useCache##0_0 := useCache#0;
        call {:id "id612"} $rhs##0_0, $rhs##0_1 := Call$$M0.__default.EvalLemma(expr##0_0, st##0_0, env##0_0, useCache##0_0);
        // TrCallStmt: After ProcessCallStmt
        _v8#0_0 := $rhs##0_0;
        _v9#0_0 := $rhs##0_1;
        defass#_v9#0_0 := true;
        pop;
        assert {:id "id615"} M0.__default.ValidState#canCall(st'#2)
           ==> M0.__default.ValidState(st'#2)
             || (forall p#0_0: Box :: 
              { M0.__default.WellFounded(p#0_0) } 
                { Set#IsMember(M0.__default.DomSt(st'#2), p#0_0) } 
              $IsBox(p#0_0, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(st'#2), p#0_0)
                 ==> M0.__default.WellFounded(p#0_0));
        assert {:id "id616"} M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#2);
        assert {:id "id617"} useCache#0
           ==> 
          M0.__default.ConsistentCache#canCall(st'#2)
           ==> M0.__default.ConsistentCache(st'#2)
             || (forall cmd#0_0: Seq, deps#0_0: Set, e#0_0: Seq :: 
              { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0) } 
              $Is(cmd#0_0, TSeq(TChar))
                   && $Is(deps#0_0, TSet(Tclass.M0.Path()))
                   && $Is(e#0_0, TSeq(TChar))
                 ==> 
                Set#IsMember(M0.__default.DomC(st'#2), 
                  M0.__default.Hash(M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0)))
                 ==> Set#IsMember(M0.__default.DomSt(st'#2), M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0)));
        assume false;
    }
    else
    {
        assume Lit(true)
           ==> M0.__default.ValidState(st'#2)
             && M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#2)
             && (useCache#0 ==> M0.__default.ConsistentCache(st'#2));
    }

    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(453,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc s#1_0;
        assume $IsBox(s#1_0, Tclass.M0.State());
        assume true;
        assume {:id "id618"} Set#IsMember(sts'#0, s#1_0);
        if (*)
        {
            ##st#1_0 := s#1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0, Tclass.M0.State(), $Heap);
            assume M0.__default.ValidState#canCall(s#1_0);
            if (M0.__default.ValidState(s#1_0))
            {
                ##st#1_1 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1, Tclass.M0.State(), $Heap);
                ##st'#1_0 := s#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st'#1_0, Tclass.M0.State(), $Heap);
                assume M0.__default.Extends#canCall(st#0, s#1_0);
            }

            assume M0.__default.ValidState#canCall(s#1_0)
               && (M0.__default.ValidState(s#1_0) ==> M0.__default.Extends#canCall(st#0, s#1_0));
            assume {:id "id619"} M0.__default.ValidState(s#1_0)
               && M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1_0);
            if (useCache#0)
            {
                ##stC#1_0 := s#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##stC#1_0, Tclass.M0.State(), $Heap);
                assume M0.__default.ConsistentCache#canCall(s#1_0);
            }

            assume useCache#0 ==> M0.__default.ConsistentCache#canCall(s#1_0);
            assume {:id "id620"} useCache#0 ==> M0.__default.ConsistentCache(s#1_0);
            assume false;
        }

        push;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(457,32)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type seq<Expression>
        // TrCallStmt: Adding lhs with type set<State>
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        context##1_0 := expr#0;
        assert {:id "id621"} M0.Expression.exprInvocation_q(expr#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        args##1_0 := M0.Expression.args(expr#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        stOrig##1_0 := st#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_0 := env#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        useCache##1_0 := useCache#0;
        call {:id "id622"} $rhs##1_0, $rhs##1_1 := Call$$M0.__default.EvalArgsLemma(context##1_0, args##1_0, stOrig##1_0, env##1_0, useCache##1_0);
        // TrCallStmt: After ProcessCallStmt
        _v10#1_0 := $rhs##1_0;
        _v11#1_0 := $rhs##1_1;
        pop;
        assert {:id "id625"} M0.__default.ValidState#canCall(s#1_0)
           ==> M0.__default.ValidState(s#1_0)
             || (forall p#1_0: Box :: 
              { M0.__default.WellFounded(p#1_0) } 
                { Set#IsMember(M0.__default.DomSt(s#1_0), p#1_0) } 
              $IsBox(p#1_0, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(s#1_0), p#1_0)
                 ==> M0.__default.WellFounded(p#1_0));
        assert {:id "id626"} M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1_0);
        assert {:id "id627"} useCache#0
           ==> 
          M0.__default.ConsistentCache#canCall(s#1_0)
           ==> M0.__default.ConsistentCache(s#1_0)
             || (forall cmd#1_0: Seq, deps#1_0: Set, e#1_0: Seq :: 
              { M0.__default.Loc(cmd#1_0, deps#1_0, e#1_0) } 
              $Is(cmd#1_0, TSeq(TChar))
                   && $Is(deps#1_0, TSet(Tclass.M0.Path()))
                   && $Is(e#1_0, TSeq(TChar))
                 ==> 
                Set#IsMember(M0.__default.DomC(s#1_0), 
                  M0.__default.Hash(M0.__default.Loc(cmd#1_0, deps#1_0, e#1_0)))
                 ==> Set#IsMember(M0.__default.DomSt(s#1_0), M0.__default.Loc(cmd#1_0, deps#1_0, e#1_0)));
        assume false;
    }
    else
    {
        assume (forall s#1_1: Box :: 
          { M0.__default.ConsistentCache(s#1_1) } 
            { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1_1) } 
            { M0.__default.ValidState(s#1_1) } 
            { Set#IsMember(sts'#0, s#1_1) } 
          $IsBox(s#1_1, Tclass.M0.State()) && Set#IsMember(sts'#0, s#1_1)
             ==> M0.__default.ValidState(s#1_1)
               && M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1_1)
               && (useCache#0 ==> M0.__default.ConsistentCache(s#1_1)));
    }

    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(459,5)
    // Begin Comprehension WF check
    havoc s#2;
    if ($IsBox(s#2, Tclass.M0.State()) && $IsAllocBox(s#2, Tclass.M0.State(), $Heap))
    {
        if (Set#IsMember(sts''#0, s#2))
        {
            assert {:id "id628"} defass#st'#2;
            if (s#2 != st'#2)
            {
            }
        }
    }

    // End Comprehension WF check
    assume true;
    assert {:id "id629"} (forall s#3: Box :: 
      { Set#IsMember(sts'#0, s#3) } { Set#IsMember(sts''#0, s#3) } 
      $IsBox(s#3, Tclass.M0.State())
         ==> 
        Set#IsMember(sts''#0, s#3)
         ==> s#3 == st'#2 || Set#IsMember(sts'#0, s#3));
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(460,5)
    // Begin Comprehension WF check
    havoc s#4;
    if ($IsBox(s#4, Tclass.M0.State()) && $IsAllocBox(s#4, Tclass.M0.State(), $Heap))
    {
        if (Set#IsMember(sts''#0, s#4))
        {
            ##st#5 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
            ##st'#1 := s#4;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st'#1, Tclass.M0.State(), $Heap);
            assume M0.__default.Extends#canCall(st#0, s#4);
        }
    }

    // End Comprehension WF check
    assume (forall s#5: Box :: 
      { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#5) } 
        { Set#IsMember(sts''#0, s#5) } 
      $IsBox(s#5, Tclass.M0.State())
         ==> 
        Set#IsMember(sts''#0, s#5)
         ==> M0.__default.Extends#canCall(st#0, s#5));
    assert {:id "id630"} (forall s#5: Box :: 
      { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#5) } 
        { Set#IsMember(sts''#0, s#5) } 
      $IsBox(s#5, Tclass.M0.State())
         ==> 
        Set#IsMember(sts''#0, s#5)
         ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#5));
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(461,23)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrig##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts##0 := sts''#0;
    call {:id "id631"} Call$$M0.__default.CompatibleProperty(stOrig##0, sts##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M0.Equiv_SuperCore (well-formedness)"} CheckWellFormed$$M0.__default.Equiv__SuperCore(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool);
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Equiv_SuperCore (well-formedness)"} CheckWellFormed$$M0.__default.Equiv__SuperCore(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##env#0: Box;
  var ##expr#0: DatatypeType;
  var ##st#0: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##expr#1: DatatypeType;
  var ##st#1: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;


    // AddMethodImpl: Equiv_SuperCore, CheckWellFormed$$M0.__default.Equiv__SuperCore
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id632"} M0.Expression.exprInvocation_q(expr#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id633"} M0.__default.ValidEnv(env#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id634"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.__default.ValidEnv(##env#1);
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0));
    ##expr#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
    ##st#1 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
    ##useCache#1 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id635"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#1);
    assert {:id "id636"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
    assume M0.Expression.exprInvocation_q(##expr#1) && M0.__default.ValidEnv(##env#2);
    assume M0.__default.evalSuperCore#canCall(expr#0, st#0, env#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0));
    assume {:id "id637"} M0.Tuple#Equal(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
      M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0));
}



procedure {:verboseName "M0.Equiv_SuperCore (call)"} Call$$M0.__default.Equiv__SuperCore(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool);
  // user-defined preconditions
  requires {:id "id638"} M0.Expression.exprInvocation_q(expr#0);
  requires {:id "id639"} M0.__default.ValidEnv(env#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0))
     && $IsA#M0.Tuple(M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0))
     && 
    M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0)
     && M0.__default.evalSuperCore#canCall(expr#0, st#0, env#0, useCache#0);
  ensures {:id "id640"} M0.Tuple#Equal(M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
    M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Equiv_SuperCore (correctness)"} Impl$$M0.__default.Equiv__SuperCore(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool)
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id641"} M0.Expression.exprInvocation_q(expr#0);
  requires {:id "id642"} M0.__default.ValidEnv(env#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0))
     && $IsA#M0.Tuple(M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0))
     && 
    M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0)
     && M0.__default.evalSuperCore#canCall(expr#0, st#0, env#0, useCache#0);
  ensures {:id "id643"} M0.Tuple#Equal(M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
    M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Equiv_SuperCore (correctness)"} Impl$$M0.__default.Equiv__SuperCore(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: Equiv_SuperCore, Impl$$M0.__default.Equiv__SuperCore
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M0.Expression(expr#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#expr0#0: DatatypeType, $ih#useCache0#0: bool :: 
      { M0.__default.evalSuperCore($ih#expr0#0, st#0, env#0, $ih#useCache0#0) } 
        { M0.__default.eval($LS($LZ), reveal_M0._default.eval, $ih#expr0#0, st#0, env#0, $ih#useCache0#0) } 
      $Is($ih#expr0#0, Tclass.M0.Expression())
           && 
          M0.Expression.exprInvocation_q($ih#expr0#0)
           && M0.__default.ValidEnv(env#0)
           && (DtRank($ih#expr0#0) < DtRank(expr#0)
             || (DtRank($ih#expr0#0) == DtRank(expr#0) && !$ih#useCache0#0 && useCache#0))
         ==> M0.Tuple#Equal(M0.__default.eval($LS($LZ), reveal_M0._default.eval, $ih#expr0#0, st#0, env#0, $ih#useCache0#0), 
          M0.__default.evalSuperCore($ih#expr0#0, st#0, env#0, $ih#useCache0#0)));
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(468,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(468,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id644"} Call$$M0.__default.reveal__eval();
    // TrCallStmt: After ProcessCallStmt
}



// function declaration for M0._default.evalSuperCore
function M0.__default.evalSuperCore(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool) : DatatypeType
uses {
// consequence axiom for M0.__default.evalSuperCore
axiom 6 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    { M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0) } 
    M0.__default.evalSuperCore#canCall(expr#0, st#0, env#0, useCache#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.Expression.exprInvocation_q(expr#0)
           && M0.__default.ValidEnv(env#0))
       ==> $Is(M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State())));
// alloc consequence axiom for M0.__default.evalSuperCore
axiom 6 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    { $IsAlloc(M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap) } 
    (M0.__default.evalSuperCore#canCall(expr#0, st#0, env#0, useCache#0)
           || (6 < $FunctionContextHeight
             && 
            $Is(expr#0, Tclass.M0.Expression())
             && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
             && 
            $IsBox(st#0, Tclass.M0.State())
             && $IsAllocBox(st#0, Tclass.M0.State(), $Heap)
             && 
            $IsBox(env#0, Tclass.M0.Env())
             && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap)
             && 
            M0.Expression.exprInvocation_q(expr#0)
             && M0.__default.ValidEnv(env#0)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap));
// definition axiom for M0.__default.evalSuperCore (revealed)
axiom {:id "id645"} 6 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    { M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0) } 
    M0.__default.evalSuperCore#canCall(expr#0, st#0, env#0, useCache#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.Expression.exprInvocation_q(expr#0)
           && M0.__default.ValidEnv(env#0))
       ==> M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, useCache#0)
         && (var tri#0 := M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0); 
          M0.Triple.Tri_q(tri#0)
             && M0.Triple.Tri_q(tri#0)
             && M0.Triple.Tri_q(tri#0)
             && (var fun'#0, args'#0, sts''#0 := $Unbox(M0.Triple._0(tri#0)): DatatypeType, 
                $Unbox(M0.Triple._1(tri#0)): Seq, 
                $Unbox(M0.Triple._2(tri#0)): Set; 
              M0.__default.evalCompatCheckCore#canCall(st#0, sts''#0, fun'#0, args'#0, useCache#0)))
         && M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0)
           == (var tri#0 := M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0); 
            (var fun'#0, args'#0, sts''#0 := $Unbox(M0.Triple._0(tri#0)): DatatypeType, 
                $Unbox(M0.Triple._1(tri#0)): Seq, 
                $Unbox(M0.Triple._2(tri#0)): Set; 
              M0.__default.evalCompatCheckCore(st#0, sts''#0, fun'#0, args'#0, useCache#0))));
// definition axiom for M0.__default.evalSuperCore for decreasing-related literals (revealed)
axiom {:id "id646"} 6 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.evalSuperCore(Lit(expr#0), st#0, env#0, Lit(useCache#0)) } 
    M0.__default.evalSuperCore#canCall(Lit(expr#0), st#0, env#0, Lit(useCache#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.Expression.exprInvocation_q(Lit(expr#0))
           && M0.__default.ValidEnv(env#0))
       ==> M0.__default.evalFunArgs#canCall(Lit(expr#0), st#0, env#0, Lit(useCache#0))
         && (var tri#1 := M0.__default.evalFunArgs(Lit(expr#0), st#0, env#0, Lit(useCache#0)); 
          M0.Triple.Tri_q(tri#1)
             && M0.Triple.Tri_q(tri#1)
             && M0.Triple.Tri_q(tri#1)
             && (var fun'#1, args'#1, sts''#1 := $Unbox(M0.Triple._0(tri#1)): DatatypeType, 
                $Unbox(M0.Triple._1(tri#1)): Seq, 
                $Unbox(M0.Triple._2(tri#1)): Set; 
              M0.__default.evalCompatCheckCore#canCall(st#0, sts''#1, fun'#1, args'#1, Lit(useCache#0))))
         && M0.__default.evalSuperCore(Lit(expr#0), st#0, env#0, Lit(useCache#0))
           == (var tri#1 := M0.__default.evalFunArgs(Lit(expr#0), st#0, env#0, Lit(useCache#0)); 
            (var fun'#1, args'#1, sts''#1 := $Unbox(M0.Triple._0(tri#1)): DatatypeType, 
                $Unbox(M0.Triple._1(tri#1)): Seq, 
                $Unbox(M0.Triple._2(tri#1)): Set; 
              M0.__default.evalCompatCheckCore(st#0, sts''#1, fun'#1, args'#1, Lit(useCache#0)))));
// definition axiom for M0.__default.evalSuperCore for all literals (revealed)
axiom {:id "id647"} 6 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
    {:weight 3} { M0.__default.evalSuperCore(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0)) } 
    M0.__default.evalSuperCore#canCall(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass.M0.Expression())
           && $IsBox(st#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.Expression.exprInvocation_q(Lit(expr#0))
           && M0.__default.ValidEnv(Lit(env#0)))
       ==> M0.__default.evalFunArgs#canCall(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0))
         && (var tri#2 := Lit(M0.__default.evalFunArgs(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0))); 
          M0.Triple.Tri_q(tri#2)
             && M0.Triple.Tri_q(tri#2)
             && M0.Triple.Tri_q(tri#2)
             && (var fun'#2, args'#2, sts''#2 := $Unbox(M0.Triple._0(tri#2)): DatatypeType, 
                $Unbox(M0.Triple._1(tri#2)): Seq, 
                $Unbox(M0.Triple._2(tri#2)): Set; 
              M0.__default.evalCompatCheckCore#canCall(Lit(st#0), sts''#2, fun'#2, args'#2, Lit(useCache#0))))
         && M0.__default.evalSuperCore(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0))
           == (var tri#2 := Lit(M0.__default.evalFunArgs(Lit(expr#0), Lit(st#0), Lit(env#0), Lit(useCache#0))); 
            (var fun'#2, args'#2, sts''#2 := Lit($Unbox(M0.Triple._0(tri#2)): DatatypeType), 
                Lit($Unbox(M0.Triple._1(tri#2)): Seq), 
                Lit($Unbox(M0.Triple._2(tri#2)): Set); 
              M0.__default.evalCompatCheckCore(Lit(st#0), sts''#2, fun'#2, args'#2, Lit(useCache#0)))));
}

function M0.__default.evalSuperCore#canCall(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool) : bool;

function M0.__default.evalSuperCore#requires(DatatypeType, Box, Box, bool) : bool;

// #requires axiom for M0.__default.evalSuperCore
axiom (forall expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool :: 
  { M0.__default.evalSuperCore#requires(expr#0, st#0, env#0, useCache#0) } 
  $Is(expr#0, Tclass.M0.Expression())
       && $IsBox(st#0, Tclass.M0.State())
       && $IsBox(env#0, Tclass.M0.Env())
     ==> M0.__default.evalSuperCore#requires(expr#0, st#0, env#0, useCache#0)
       == (M0.Expression.exprInvocation_q(expr#0) && M0.__default.ValidEnv(env#0)));

procedure {:verboseName "M0.evalSuperCore (well-formedness)"} CheckWellformed$$M0.__default.evalSuperCore(expr#0: DatatypeType where $Is(expr#0, Tclass.M0.Expression()), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()), 
    env#0: Box where $IsBox(env#0, Tclass.M0.Env()), 
    useCache#0: bool);
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.evalSuperCore (well-formedness)"} CheckWellformed$$M0.__default.evalSuperCore(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: Box;
  var tri#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##st#0: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var fun'#Z#0: DatatypeType;
  var args'#Z#0: Seq;
  var sts''#Z#0: Set;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: Seq;
  var let#1#2#0: Set;
  var ##stOrig#0: Box;
  var ##sts#0: Set;
  var ##fun#0: DatatypeType;
  var ##args#0: Seq;
  var ##useCache#1: bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id648"} M0.Expression.exprInvocation_q(expr#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id649"} M0.__default.ValidEnv(env#0);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0), 
          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc tri#Z#0;
        ##expr#0 := expr#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
        ##env#1 := env#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
        ##useCache#0 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0, TBool, $Heap);
        assert {:id "id650"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#0);
        assert {:id "id651"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
        assume M0.Expression.exprInvocation_q(##expr#0) && M0.__default.ValidEnv(##env#1);
        assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, useCache#0);
        assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0));
        assume {:id "id652"} let#0#0#0 == M0.__default.evalFunArgs(expr#0, st#0, env#0, useCache#0);
        assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, useCache#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, 
          Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())));
        assume {:id "id653"} tri#Z#0 == let#0#0#0;
        havoc fun'#Z#0;
        havoc args'#Z#0;
        havoc sts''#Z#0;
        assume M0.Triple.Tri_q(tri#Z#0);
        assume {:id "id654"} let#1#0#0 == $Unbox(M0.Triple._0(tri#Z#0)): DatatypeType;
        assume M0.Triple.Tri_q(tri#Z#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#1#0#0, Tclass.M0.Expression());
        assume {:id "id655"} fun'#Z#0 == let#1#0#0;
        assume M0.Triple.Tri_q(tri#Z#0);
        assume {:id "id656"} let#1#1#0 == $Unbox(M0.Triple._1(tri#Z#0)): Seq;
        assume M0.Triple.Tri_q(tri#Z#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#1#1#0, TSeq(Tclass.M0.Expression()));
        assume {:id "id657"} args'#Z#0 == let#1#1#0;
        assume M0.Triple.Tri_q(tri#Z#0);
        assume {:id "id658"} let#1#2#0 == $Unbox(M0.Triple._2(tri#Z#0)): Set;
        assume M0.Triple.Tri_q(tri#Z#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#1#2#0, TSet(Tclass.M0.State()));
        assume {:id "id659"} sts''#Z#0 == let#1#2#0;
        ##stOrig#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
        ##sts#0 := sts''#Z#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
        ##fun#0 := fun'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##fun#0, Tclass.M0.Expression(), $Heap);
        ##args#0 := args'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
        ##useCache#1 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1, TBool, $Heap);
        assert {:id "id660"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
        assume !Set#Equal(##sts#0, Set#Empty(): Set);
        assume M0.__default.evalCompatCheckCore#canCall(st#0, sts''#Z#0, fun'#Z#0, args'#Z#0, useCache#0);
        assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(st#0, sts''#Z#0, fun'#Z#0, args'#Z#0, useCache#0));
        assume {:id "id661"} M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0)
           == M0.__default.evalCompatCheckCore(st#0, sts''#Z#0, fun'#Z#0, args'#Z#0, useCache#0);
        assume M0.__default.evalCompatCheckCore#canCall(st#0, sts''#Z#0, fun'#Z#0, args'#Z#0, useCache#0);
        // CheckWellformedWithResult: any expression
        assume $Is(M0.__default.evalSuperCore(expr#0, st#0, env#0, useCache#0), 
          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
        return;

        assume false;
    }
}



// function declaration for M0._default.evalCompatCheckCore
function M0.__default.evalCompatCheckCore(stOrig#0: Box, sts#0: Set, fun#0: DatatypeType, args#0: Seq, useCache#0: bool)
   : DatatypeType
uses {
// consequence axiom for M0.__default.evalCompatCheckCore
axiom 5 <= $FunctionContextHeight
   ==> (forall stOrig#0: Box, sts#0: Set, fun#0: DatatypeType, args#0: Seq, useCache#0: bool :: 
    { M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0) } 
    M0.__default.evalCompatCheckCore#canCall(stOrig#0, sts#0, fun#0, args#0, useCache#0)
         || (5 < $FunctionContextHeight
           && 
          $IsBox(stOrig#0, Tclass.M0.State())
           && $Is(sts#0, TSet(Tclass.M0.State()))
           && $Is(fun#0, Tclass.M0.Expression())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> $Is(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State())));
// alloc consequence axiom for M0.__default.evalCompatCheckCore
axiom 5 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      stOrig#0: Box, 
      sts#0: Set, 
      fun#0: DatatypeType, 
      args#0: Seq, 
      useCache#0: bool :: 
    { $IsAlloc(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap) } 
    (M0.__default.evalCompatCheckCore#canCall(stOrig#0, sts#0, fun#0, args#0, useCache#0)
           || (5 < $FunctionContextHeight
             && 
            $IsBox(stOrig#0, Tclass.M0.State())
             && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap)
             && 
            $Is(sts#0, TSet(Tclass.M0.State()))
             && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap)
             && 
            $Is(fun#0, Tclass.M0.Expression())
             && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
             && 
            $Is(args#0, TSeq(Tclass.M0.Expression()))
             && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap)
             && !Set#Equal(sts#0, Set#Empty(): Set)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap));
// definition axiom for M0.__default.evalCompatCheckCore (revealed)
axiom {:id "id662"} 5 <= $FunctionContextHeight
   ==> (forall stOrig#0: Box, sts#0: Set, fun#0: DatatypeType, args#0: Seq, useCache#0: bool :: 
    { M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0) } 
    M0.__default.evalCompatCheckCore#canCall(stOrig#0, sts#0, fun#0, args#0, useCache#0)
         || (5 < $FunctionContextHeight
           && 
          $IsBox(stOrig#0, Tclass.M0.State())
           && $Is(sts#0, TSet(Tclass.M0.State()))
           && $Is(fun#0, Tclass.M0.Expression())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> M0.__default.Compatible#canCall(sts#0)
         && (M0.__default.Compatible(sts#0)
           ==> M0.__default.Combine#canCall(sts#0, useCache#0)
             && (var stCombined#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0); 
              M0.Expression.exprLiteral_q(fun#0)
                   && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
                 ==> 
                M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0)))
                 ==> M0.__default.evalCore#canCall(stOrig#0, stCombined#0, args#0, useCache#0)))
         && M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0)
           == (if !M0.__default.Compatible(sts#0)
             then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rCompatibility())))), stOrig#0)
             else (var stCombined#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0); 
              (if M0.Expression.exprLiteral_q(fun#0)
                   && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
                 then (if M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0)))
                   then M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0)
                   else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stOrig#0))
                 else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stOrig#0)))));
// definition axiom for M0.__default.evalCompatCheckCore for decreasing-related literals (revealed)
axiom {:id "id663"} 5 <= $FunctionContextHeight
   ==> (forall stOrig#0: Box, sts#0: Set, fun#0: DatatypeType, args#0: Seq, useCache#0: bool :: 
    {:weight 3} { M0.__default.evalCompatCheckCore(stOrig#0, Lit(sts#0), Lit(fun#0), Lit(args#0), Lit(useCache#0)) } 
    M0.__default.evalCompatCheckCore#canCall(stOrig#0, Lit(sts#0), Lit(fun#0), Lit(args#0), Lit(useCache#0))
         || (5 < $FunctionContextHeight
           && 
          $IsBox(stOrig#0, Tclass.M0.State())
           && $Is(sts#0, TSet(Tclass.M0.State()))
           && $Is(fun#0, Tclass.M0.Expression())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> M0.__default.Compatible#canCall(Lit(sts#0))
         && (Lit(M0.__default.Compatible(Lit(sts#0)))
           ==> M0.__default.Combine#canCall(Lit(sts#0), Lit(useCache#0))
             && (var stCombined#1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, Lit(sts#0), Lit(useCache#0)); 
              Lit(M0.Expression.exprLiteral_q(Lit(fun#0))
                     && M0.Literal.litPrimitive_q(Lit(M0.Expression.lit(Lit(fun#0)))))
                 ==> 
                Lit(M0.Primitive.primExec_q(Lit(M0.Literal.prim(Lit(M0.Expression.lit(Lit(fun#0)))))))
                 ==> M0.__default.evalCore#canCall(stOrig#0, stCombined#1, Lit(args#0), Lit(useCache#0))))
         && M0.__default.evalCompatCheckCore(stOrig#0, Lit(sts#0), Lit(fun#0), Lit(args#0), Lit(useCache#0))
           == (if !Lit(M0.__default.Compatible(Lit(sts#0)))
             then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rCompatibility())))), stOrig#0)
             else (var stCombined#1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, Lit(sts#0), Lit(useCache#0)); 
              (if M0.Expression.exprLiteral_q(Lit(fun#0))
                   && M0.Literal.litPrimitive_q(Lit(M0.Expression.lit(Lit(fun#0))))
                 then (if M0.Primitive.primExec_q(Lit(M0.Literal.prim(Lit(M0.Expression.lit(Lit(fun#0))))))
                   then M0.__default.evalCore(stOrig#0, stCombined#1, Lit(args#0), Lit(useCache#0))
                   else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stOrig#0))
                 else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stOrig#0)))));
// definition axiom for M0.__default.evalCompatCheckCore for all literals (revealed)
axiom {:id "id664"} 5 <= $FunctionContextHeight
   ==> (forall stOrig#0: Box, sts#0: Set, fun#0: DatatypeType, args#0: Seq, useCache#0: bool :: 
    {:weight 3} { M0.__default.evalCompatCheckCore(Lit(stOrig#0), Lit(sts#0), Lit(fun#0), Lit(args#0), Lit(useCache#0)) } 
    M0.__default.evalCompatCheckCore#canCall(Lit(stOrig#0), Lit(sts#0), Lit(fun#0), Lit(args#0), Lit(useCache#0))
         || (5 < $FunctionContextHeight
           && 
          $IsBox(stOrig#0, Tclass.M0.State())
           && $Is(sts#0, TSet(Tclass.M0.State()))
           && $Is(fun#0, Tclass.M0.Expression())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && !Set#Equal(sts#0, Set#Empty(): Set))
       ==> M0.__default.Compatible#canCall(Lit(sts#0))
         && (Lit(M0.__default.Compatible(Lit(sts#0)))
           ==> M0.__default.Combine#canCall(Lit(sts#0), Lit(useCache#0))
             && (var stCombined#2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, Lit(sts#0), Lit(useCache#0)); 
              Lit(M0.Expression.exprLiteral_q(Lit(fun#0))
                     && M0.Literal.litPrimitive_q(Lit(M0.Expression.lit(Lit(fun#0)))))
                 ==> 
                Lit(M0.Primitive.primExec_q(Lit(M0.Literal.prim(Lit(M0.Expression.lit(Lit(fun#0)))))))
                 ==> M0.__default.evalCore#canCall(Lit(stOrig#0), stCombined#2, Lit(args#0), Lit(useCache#0))))
         && M0.__default.evalCompatCheckCore(Lit(stOrig#0), Lit(sts#0), Lit(fun#0), Lit(args#0), Lit(useCache#0))
           == (if !Lit(M0.__default.Compatible(Lit(sts#0)))
             then #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rCompatibility())))), 
              Lit(stOrig#0))
             else (var stCombined#2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, Lit(sts#0), Lit(useCache#0)); 
              (if M0.Expression.exprLiteral_q(Lit(fun#0))
                   && M0.Literal.litPrimitive_q(Lit(M0.Expression.lit(Lit(fun#0))))
                 then (if M0.Primitive.primExec_q(Lit(M0.Literal.prim(Lit(M0.Expression.lit(Lit(fun#0))))))
                   then M0.__default.evalCore(Lit(stOrig#0), stCombined#2, Lit(args#0), Lit(useCache#0))
                   else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(stOrig#0)))
                 else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(stOrig#0))))));
}

function M0.__default.evalCompatCheckCore#canCall(stOrig#0: Box, sts#0: Set, fun#0: DatatypeType, args#0: Seq, useCache#0: bool)
   : bool;

function M0.__default.evalCompatCheckCore#requires(Box, Set, DatatypeType, Seq, bool) : bool;

// #requires axiom for M0.__default.evalCompatCheckCore
axiom (forall stOrig#0: Box, sts#0: Set, fun#0: DatatypeType, args#0: Seq, useCache#0: bool :: 
  { M0.__default.evalCompatCheckCore#requires(stOrig#0, sts#0, fun#0, args#0, useCache#0) } 
  $IsBox(stOrig#0, Tclass.M0.State())
       && $Is(sts#0, TSet(Tclass.M0.State()))
       && $Is(fun#0, Tclass.M0.Expression())
       && $Is(args#0, TSeq(Tclass.M0.Expression()))
     ==> M0.__default.evalCompatCheckCore#requires(stOrig#0, sts#0, fun#0, args#0, useCache#0)
       == !Set#Equal(sts#0, Set#Empty(): Set));

procedure {:verboseName "M0.evalCompatCheckCore (well-formedness)"} CheckWellformed$$M0.__default.evalCompatCheckCore(stOrig#0: Box where $IsBox(stOrig#0, Tclass.M0.State()), 
    sts#0: Set where $Is(sts#0, TSet(Tclass.M0.State())), 
    fun#0: DatatypeType where $Is(fun#0, Tclass.M0.Expression()), 
    args#0: Seq where $Is(args#0, TSeq(Tclass.M0.Expression())), 
    useCache#0: bool);
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.evalCompatCheckCore (well-formedness)"} CheckWellformed$$M0.__default.evalCompatCheckCore(stOrig#0: Box, sts#0: Set, fun#0: DatatypeType, args#0: Seq, useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##sts#0: Set;
  var stCombined#Z#0: Box;
  var let#0#0#0: Box;
  var ##sts#1: Set;
  var ##useCache#0: bool;
  var ##stOrig#0: Box;
  var ##stCombined#0: Box;
  var ##args#0: Seq;
  var ##useCache#1: bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id665"} !Set#Equal(sts#0, Set#Empty(): Set);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0), 
          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##sts#0 := sts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
        assume M0.__default.Compatible#canCall(sts#0);
        if (!M0.__default.Compatible(sts#0))
        {
            assume {:id "id666"} M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0)
               == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rCompatibility())))), stOrig#0);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0), 
              Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
            return;
        }
        else
        {
            havoc stCombined#Z#0;
            ##sts#1 := sts#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
            ##useCache#0 := useCache#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#0, TBool, $Heap);
            assert {:id "id667"} {:subsumption 0} !Set#Equal(##sts#1, Set#Empty(): Set);
            assume !Set#Equal(##sts#1, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(sts#0, useCache#0);
            assume {:id "id668"} let#0#0#0
               == M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
            assume M0.__default.Combine#canCall(sts#0, useCache#0);
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#0#0#0, Tclass.M0.State());
            assume {:id "id669"} stCombined#Z#0 == let#0#0#0;
            if (M0.Expression.exprLiteral_q(fun#0))
            {
                assert {:id "id670"} M0.Expression.exprLiteral_q(fun#0);
            }

            if (M0.Expression.exprLiteral_q(fun#0)
               && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0)))
            {
                assert {:id "id671"} M0.Expression.exprLiteral_q(fun#0);
                assert {:id "id672"} M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0));
                if (M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0))))
                {
                    ##stOrig#0 := stOrig#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
                    ##stCombined#0 := stCombined#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##stCombined#0, Tclass.M0.State(), $Heap);
                    ##args#0 := args#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
                    ##useCache#1 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1, TBool, $Heap);
                    assume M0.__default.evalCore#canCall(stOrig#0, stCombined#Z#0, args#0, useCache#0);
                    assume M0.Tuple.Pair_q(M0.__default.evalCore(stOrig#0, stCombined#Z#0, args#0, useCache#0));
                    assume {:id "id673"} M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0)
                       == M0.__default.evalCore(stOrig#0, stCombined#Z#0, args#0, useCache#0);
                    assume M0.__default.evalCore#canCall(stOrig#0, stCombined#Z#0, args#0, useCache#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0), 
                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                    return;
                }
                else
                {
                    assume {:id "id674"} M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0)
                       == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stOrig#0);
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0), 
                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                    return;
                }
            }
            else
            {
                assume {:id "id675"} M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0)
                   == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stOrig#0);
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, useCache#0), 
                  Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                return;
            }
        }

        assume false;
    }
}



// function declaration for M0._default.evalCore
function M0.__default.evalCore(stOrig#0: Box, stCombined#0: Box, args#0: Seq, useCache#0: bool) : DatatypeType
uses {
// consequence axiom for M0.__default.evalCore
axiom 4 <= $FunctionContextHeight
   ==> (forall stOrig#0: Box, stCombined#0: Box, args#0: Seq, useCache#0: bool :: 
    { M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0) } 
    M0.__default.evalCore#canCall(stOrig#0, stCombined#0, args#0, useCache#0)
         || (4 < $FunctionContextHeight
           && 
          $IsBox(stOrig#0, Tclass.M0.State())
           && $IsBox(stCombined#0, Tclass.M0.State())
           && $Is(args#0, TSeq(Tclass.M0.Expression())))
       ==> $Is(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State())));
// alloc consequence axiom for M0.__default.evalCore
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, stOrig#0: Box, stCombined#0: Box, args#0: Seq, useCache#0: bool :: 
    { $IsAlloc(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap) } 
    (M0.__default.evalCore#canCall(stOrig#0, stCombined#0, args#0, useCache#0)
           || (4 < $FunctionContextHeight
             && 
            $IsBox(stOrig#0, Tclass.M0.State())
             && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap)
             && 
            $IsBox(stCombined#0, Tclass.M0.State())
             && $IsAllocBox(stCombined#0, Tclass.M0.State(), $Heap)
             && 
            $Is(args#0, TSeq(Tclass.M0.Expression()))
             && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap)))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0), 
        Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), 
        $Heap));
// definition axiom for M0.__default.evalCore (revealed)
axiom {:id "id676"} 4 <= $FunctionContextHeight
   ==> (forall stOrig#0: Box, stCombined#0: Box, args#0: Seq, useCache#0: bool :: 
    { M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0) } 
    M0.__default.evalCore#canCall(stOrig#0, stCombined#0, args#0, useCache#0)
         || (4 < $FunctionContextHeight
           && 
          $IsBox(stOrig#0, Tclass.M0.State())
           && $IsBox(stCombined#0, Tclass.M0.State())
           && $Is(args#0, TSeq(Tclass.M0.Expression())))
       ==> M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()))
         && (Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
           ==> M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args#0, stCombined#0))
         && (Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
             && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args#0, stCombined#0)
           ==> (var cmd#0, deps#0, exps#0 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType)), 
              M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType)), 
              M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType)); 
            (!useCache#0
                 ==> M0.__default.exec#canCall(cmd#0, deps#0, exps#0, stCombined#0)
                   && (var ps#0 := M0.__default.exec(cmd#0, deps#0, exps#0, stCombined#0); 
                    M0.Tuple.Pair_q(ps#0) && M0.Tuple.Pair_q(ps#0)))
               && (useCache#0
                 ==> M0.__default.ConsistentCache#canCall(stCombined#0)
                   && (M0.__default.ConsistentCache(stCombined#0)
                     ==> M0.__default.execC#canCall(cmd#0, deps#0, exps#0, stCombined#0)
                       && (var ps#1 := M0.__default.execC(cmd#0, deps#0, exps#0, stCombined#0); 
                        M0.Tuple.Pair_q(ps#1) && M0.Tuple.Pair_q(ps#1))))))
         && M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0)
           == (if Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
               && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args#0, stCombined#0)
             then (var cmd#0, deps#0, exps#0 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType)), 
                M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType)), 
                M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType)); 
              (if !useCache#0
                 then (var ps#0 := M0.__default.exec(cmd#0, deps#0, exps#0, stCombined#0); 
                  #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#0)): Set))), 
                    M0.Tuple.snd(ps#0)))
                 else (if M0.__default.ConsistentCache(stCombined#0)
                   then (var ps#1 := M0.__default.execC(cmd#0, deps#0, exps#0, stCombined#0); 
                    #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#1)): Set))), 
                      M0.Tuple.snd(ps#1)))
                   else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stOrig#0))))
             else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), 
              stOrig#0)));
// definition axiom for M0.__default.evalCore for decreasing-related literals (revealed)
axiom {:id "id677"} 4 <= $FunctionContextHeight
   ==> (forall stOrig#0: Box, stCombined#0: Box, args#0: Seq, useCache#0: bool :: 
    {:weight 3} { M0.__default.evalCore(stOrig#0, stCombined#0, Lit(args#0), Lit(useCache#0)) } 
    M0.__default.evalCore#canCall(stOrig#0, stCombined#0, Lit(args#0), Lit(useCache#0))
         || (4 < $FunctionContextHeight
           && 
          $IsBox(stOrig#0, Tclass.M0.State())
           && $IsBox(stCombined#0, Tclass.M0.State())
           && $Is(args#0, TSeq(Tclass.M0.Expression())))
       ==> M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()))
         && (Seq#Length(Lit(args#0))
             == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
           ==> M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), Lit(args#0), stCombined#0))
         && (Seq#Length(Lit(args#0))
               == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
             && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), Lit(args#0), stCombined#0)
           ==> (var cmd#1, deps#1, exps#1 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType)), 
              M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType)), 
              M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType)); 
            (!Lit(useCache#0)
                 ==> M0.__default.exec#canCall(cmd#1, deps#1, exps#1, stCombined#0)
                   && (var ps#2 := M0.__default.exec(cmd#1, deps#1, exps#1, stCombined#0); 
                    M0.Tuple.Pair_q(ps#2) && M0.Tuple.Pair_q(ps#2)))
               && (Lit(useCache#0)
                 ==> M0.__default.ConsistentCache#canCall(stCombined#0)
                   && (M0.__default.ConsistentCache(stCombined#0)
                     ==> M0.__default.execC#canCall(cmd#1, deps#1, exps#1, stCombined#0)
                       && (var ps#3 := M0.__default.execC(cmd#1, deps#1, exps#1, stCombined#0); 
                        M0.Tuple.Pair_q(ps#3) && M0.Tuple.Pair_q(ps#3))))))
         && M0.__default.evalCore(stOrig#0, stCombined#0, Lit(args#0), Lit(useCache#0))
           == (if Seq#Length(Lit(args#0))
                 == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
               && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), Lit(args#0), stCombined#0)
             then (var cmd#1, deps#1, exps#1 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType)), 
                M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType)), 
                M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType)); 
              (if !Lit(useCache#0)
                 then (var ps#2 := M0.__default.exec(cmd#1, deps#1, exps#1, stCombined#0); 
                  #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#2)): Set))), 
                    M0.Tuple.snd(ps#2)))
                 else (if M0.__default.ConsistentCache(stCombined#0)
                   then (var ps#3 := M0.__default.execC(cmd#1, deps#1, exps#1, stCombined#0); 
                    #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#3)): Set))), 
                      M0.Tuple.snd(ps#3)))
                   else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stOrig#0))))
             else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), 
              stOrig#0)));
// definition axiom for M0.__default.evalCore for all literals (revealed)
axiom {:id "id678"} 4 <= $FunctionContextHeight
   ==> (forall stOrig#0: Box, stCombined#0: Box, args#0: Seq, useCache#0: bool :: 
    {:weight 3} { M0.__default.evalCore(Lit(stOrig#0), Lit(stCombined#0), Lit(args#0), Lit(useCache#0)) } 
    M0.__default.evalCore#canCall(Lit(stOrig#0), Lit(stCombined#0), Lit(args#0), Lit(useCache#0))
         || (4 < $FunctionContextHeight
           && 
          $IsBox(stOrig#0, Tclass.M0.State())
           && $IsBox(stCombined#0, Tclass.M0.State())
           && $Is(args#0, TSeq(Tclass.M0.Expression())))
       ==> M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()))
         && (Seq#Length(Lit(args#0))
             == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
           ==> M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), Lit(args#0), Lit(stCombined#0)))
         && (Seq#Length(Lit(args#0))
               == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
             && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), Lit(args#0), Lit(stCombined#0))
           ==> (var cmd#2, deps#2, exps#2 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType)), 
              M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType)), 
              M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType)); 
            (!Lit(useCache#0)
                 ==> M0.__default.exec#canCall(cmd#2, deps#2, exps#2, Lit(stCombined#0))
                   && (var ps#4 := M0.__default.exec(cmd#2, deps#2, exps#2, Lit(stCombined#0)); 
                    M0.Tuple.Pair_q(ps#4) && M0.Tuple.Pair_q(ps#4)))
               && (Lit(useCache#0)
                 ==> M0.__default.ConsistentCache#canCall(Lit(stCombined#0))
                   && (Lit(M0.__default.ConsistentCache(Lit(stCombined#0)))
                     ==> M0.__default.execC#canCall(cmd#2, deps#2, exps#2, Lit(stCombined#0))
                       && (var ps#5 := M0.__default.execC(cmd#2, deps#2, exps#2, Lit(stCombined#0)); 
                        M0.Tuple.Pair_q(ps#5) && M0.Tuple.Pair_q(ps#5))))))
         && M0.__default.evalCore(Lit(stOrig#0), Lit(stCombined#0), Lit(args#0), Lit(useCache#0))
           == (if Seq#Length(Lit(args#0))
                 == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
               && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), Lit(args#0), Lit(stCombined#0))
             then (var cmd#2, deps#2, exps#2 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType)), 
                M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType)), 
                M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType)); 
              (if !Lit(useCache#0)
                 then (var ps#4 := M0.__default.exec(cmd#2, deps#2, exps#2, Lit(stCombined#0)); 
                  #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#4)): Set))), 
                    M0.Tuple.snd(ps#4)))
                 else (if M0.__default.ConsistentCache(Lit(stCombined#0))
                   then (var ps#5 := M0.__default.execC(cmd#2, deps#2, exps#2, Lit(stCombined#0)); 
                    #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#5)): Set))), 
                      M0.Tuple.snd(ps#5)))
                   else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), Lit(stOrig#0)))))
             else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), 
              Lit(stOrig#0))));
}

function M0.__default.evalCore#canCall(stOrig#0: Box, stCombined#0: Box, args#0: Seq, useCache#0: bool) : bool;

function M0.__default.evalCore#requires(Box, Box, Seq, bool) : bool;

// #requires axiom for M0.__default.evalCore
axiom (forall stOrig#0: Box, stCombined#0: Box, args#0: Seq, useCache#0: bool :: 
  { M0.__default.evalCore#requires(stOrig#0, stCombined#0, args#0, useCache#0) } 
  $IsBox(stOrig#0, Tclass.M0.State())
       && $IsBox(stCombined#0, Tclass.M0.State())
       && $Is(args#0, TSeq(Tclass.M0.Expression()))
     ==> M0.__default.evalCore#requires(stOrig#0, stCombined#0, args#0, useCache#0)
       == true);

procedure {:verboseName "M0.evalCore (well-formedness)"} CheckWellformed$$M0.__default.evalCore(stOrig#0: Box where $IsBox(stOrig#0, Tclass.M0.State()), 
    stCombined#0: Box where $IsBox(stCombined#0, Tclass.M0.State()), 
    args#0: Seq where $Is(args#0, TSeq(Tclass.M0.Expression())), 
    useCache#0: bool);
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.evalCore (well-formedness)"} CheckWellformed$$M0.__default.evalCore(stOrig#0: Box, stCombined#0: Box, args#0: Seq, useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##prim#0: DatatypeType;
  var ##prim#1: DatatypeType;
  var ##args#0: Seq;
  var ##st#0: Box;
  var cmd#Z#0: Seq;
  var deps#Z#0: Set;
  var exps#Z#0: Set;
  var let#0#0#0: Seq;
  var let#0#1#0: Set;
  var let#0#2#0: Set;
  var ps#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var ##cmd#0: Seq;
  var ##deps#0: Set;
  var ##exps#0: Set;
  var ##st#1: Box;
  var ##stC#0: Box;
  var ps#Z#1: DatatypeType;
  var let#2#0#0: DatatypeType;
  var ##cmd#1: Seq;
  var ##deps#1: Set;
  var ##exps#1: Set;
  var ##stC#1: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0), 
          Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##prim#0 := Lit(#M0.Primitive.primExec());
        // assume allocatedness for argument to function
        assume $IsAlloc(##prim#0, Tclass.M0.Primitive(), $Heap);
        assume M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()));
        if (Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec()))))
        {
            ##prim#1 := Lit(#M0.Primitive.primExec());
            // assume allocatedness for argument to function
            assume $IsAlloc(##prim#1, Tclass.M0.Primitive(), $Heap);
            ##args#0 := args#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
            ##st#0 := stCombined#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
            assert {:id "id679"} {:subsumption 0} M0.Primitive.primExec_q(##prim#1) ==> Seq#Length(##args#0) == LitInt(3);
            assume M0.Primitive.primExec_q(##prim#1) ==> Seq#Length(##args#0) == LitInt(3);
            assert {:id "id680"} {:subsumption 0} M0.Primitive.primCreatePath_q(##prim#1) ==> Seq#Length(##args#0) == LitInt(1);
            assume M0.Primitive.primCreatePath_q(##prim#1) ==> Seq#Length(##args#0) == LitInt(1);
            assume M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args#0, stCombined#0);
        }

        if (Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
           && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args#0, stCombined#0))
        {
            havoc cmd#Z#0;
            havoc deps#Z#0;
            havoc exps#Z#0;
            assert {:id "id681"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
            assert {:id "id682"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType);
            assert {:id "id683"} M0.Literal.litString_q(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType));
            assume {:id "id684"} let#0#0#0
               == M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, TSeq(TChar));
            assume {:id "id685"} cmd#Z#0 == let#0#0#0;
            assert {:id "id686"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args#0);
            assert {:id "id687"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType);
            assert {:id "id688"} M0.Literal.litArrOfPaths_q(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType));
            assume {:id "id689"} let#0#1#0
               == M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#1#0, TSet(Tclass.M0.Path()));
            assume {:id "id690"} deps#Z#0 == let#0#1#0;
            assert {:id "id691"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args#0);
            assert {:id "id692"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType);
            assert {:id "id693"} M0.Literal.litArrOfStrings_q(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType));
            assume {:id "id694"} let#0#2#0
               == M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#2#0, TSet(TSeq(TChar)));
            assume {:id "id695"} exps#Z#0 == let#0#2#0;
            if (!useCache#0)
            {
                havoc ps#Z#0;
                ##cmd#0 := cmd#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0, TSeq(TChar), $Heap);
                ##deps#0 := deps#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0, TSet(Tclass.M0.Path()), $Heap);
                ##exps#0 := exps#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##exps#0, TSet(TSeq(TChar)), $Heap);
                ##st#1 := stCombined#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
                assume M0.__default.exec#canCall(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#0);
                assume M0.Tuple.Pair_q(M0.__default.exec(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#0));
                assume {:id "id696"} let#1#0#0 == M0.__default.exec(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#0);
                assume M0.__default.exec#canCall(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#0);
                // CheckWellformedWithResult: any expression
                assume $Is(let#1#0#0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()));
                assume {:id "id697"} ps#Z#0 == let#1#0#0;
                assume M0.Tuple.Pair_q(ps#Z#0);
                assume M0.Tuple.Pair_q(ps#Z#0);
                assume {:id "id698"} M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0)
                   == #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#Z#0)): Set))), 
                    M0.Tuple.snd(ps#Z#0));
                assume M0.Tuple.Pair_q(ps#Z#0) && M0.Tuple.Pair_q(ps#Z#0);
                // CheckWellformedWithResult: any expression
                assume $Is(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0), 
                  Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                return;
            }
            else
            {
                ##stC#0 := stCombined#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
                assume M0.__default.ConsistentCache#canCall(stCombined#0);
                if (M0.__default.ConsistentCache(stCombined#0))
                {
                    havoc ps#Z#1;
                    ##cmd#1 := cmd#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1, TSeq(TChar), $Heap);
                    ##deps#1 := deps#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1, TSet(Tclass.M0.Path()), $Heap);
                    ##exps#1 := exps#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exps#1, TSet(TSeq(TChar)), $Heap);
                    ##stC#1 := stCombined#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
                    assume M0.__default.execC#canCall(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#0);
                    assume M0.Tuple.Pair_q(M0.__default.execC(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#0));
                    assume {:id "id699"} let#2#0#0 == M0.__default.execC(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#0);
                    assume M0.__default.execC#canCall(cmd#Z#0, deps#Z#0, exps#Z#0, stCombined#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(let#2#0#0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()));
                    assume {:id "id700"} ps#Z#1 == let#2#0#0;
                    assume M0.Tuple.Pair_q(ps#Z#1);
                    assume M0.Tuple.Pair_q(ps#Z#1);
                    assume {:id "id701"} M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0)
                       == #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#Z#1)): Set))), 
                        M0.Tuple.snd(ps#Z#1));
                    assume M0.Tuple.Pair_q(ps#Z#1) && M0.Tuple.Pair_q(ps#Z#1);
                    // CheckWellformedWithResult: any expression
                    assume $Is(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0), 
                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                    return;
                }
                else
                {
                    assume {:id "id702"} M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0)
                       == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stOrig#0);
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0), 
                      Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
                    return;
                }
            }
        }
        else
        {
            assume {:id "id703"} M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0)
               == #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), 
                stOrig#0);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, useCache#0), 
              Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
            return;
        }

        assume false;
    }
}



// function declaration for M0._default.evalArgs
function M0.__default.evalArgs($ly: LayerType, 
    context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: Box, 
    env#0: Box, 
    useCache#0: bool)
   : DatatypeType
uses {
// consequence axiom for M0.__default.evalArgs
axiom 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      context#0: DatatypeType, 
      args#0: Seq, 
      stOrig#0: Box, 
      env#0: Box, 
      useCache#0: bool :: 
    { M0.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0, useCache#0) } 
    M0.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0, useCache#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(context#0, Tclass.M0.Expression())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && $IsBox(stOrig#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.__default.ValidEnv(env#0)
           && (forall arg#0: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#0)) } 
            $Is(arg#0, Tclass.M0.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#0))
               ==> DtRank(arg#0) < DtRank(context#0)))
       ==> $Is(M0.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0, useCache#0), 
        Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State()))));
// alloc consequence axiom for M0.__default.evalArgs
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, 
      $ly: LayerType, 
      context#0: DatatypeType, 
      args#0: Seq, 
      stOrig#0: Box, 
      env#0: Box, 
      useCache#0: bool :: 
    { $IsAlloc(M0.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0, useCache#0), 
        Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
        $Heap) } 
    (M0.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0, useCache#0)
           || (4 < $FunctionContextHeight
             && 
            $Is(context#0, Tclass.M0.Expression())
             && $IsAlloc(context#0, Tclass.M0.Expression(), $Heap)
             && 
            $Is(args#0, TSeq(Tclass.M0.Expression()))
             && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap)
             && 
            $IsBox(stOrig#0, Tclass.M0.State())
             && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap)
             && 
            $IsBox(env#0, Tclass.M0.Env())
             && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap)
             && 
            M0.__default.ValidEnv(env#0)
             && (forall arg#0: DatatypeType :: 
              { Seq#Contains(args#0, $Box(arg#0)) } 
              $Is(arg#0, Tclass.M0.Expression())
                 ==> 
                Seq#Contains(args#0, $Box(arg#0))
                 ==> DtRank(arg#0) < DtRank(context#0))))
         && $IsGoodHeap($Heap)
       ==> $IsAlloc(M0.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0, useCache#0), 
        Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
        $Heap));
// definition axiom for M0.__default.evalArgs (revealed)
axiom {:id "id704"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      context#0: DatatypeType, 
      args#0: Seq, 
      stOrig#0: Box, 
      env#0: Box, 
      useCache#0: bool :: 
    { M0.__default.evalArgs($LS($ly), context#0, args#0, stOrig#0, env#0, useCache#0) } 
    M0.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0, useCache#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(context#0, Tclass.M0.Expression())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && $IsBox(stOrig#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.__default.ValidEnv(env#0)
           && (forall arg#1: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#1)) } 
            $Is(arg#1, Tclass.M0.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#1))
               ==> DtRank(arg#1) < DtRank(context#0)))
       ==> (!Seq#Equal(args#0, Seq#Empty(): Seq)
           ==> M0.__default.eval#canCall($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, stOrig#0, env#0, useCache#0)
             && (var r#0 := M0.__default.eval($ly, 
                  reveal_M0._default.eval, 
                  $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
                  stOrig#0, 
                  env#0, 
                  useCache#0); 
              M0.__default.evalArgs#canCall(context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0, useCache#0)
                 && (var rr#0 := M0.__default.evalArgs($ly, context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0, useCache#0); 
                  M0.Tuple.Pair_q(r#0)
                     && M0.Tuple.Pair_q(rr#0)
                     && 
                    M0.Tuple.Pair_q(r#0)
                     && M0.Tuple.Pair_q(rr#0))))
         && M0.__default.evalArgs($LS($ly), context#0, args#0, stOrig#0, env#0, useCache#0)
           == (if Seq#Equal(args#0, Seq#Empty(): Seq)
             then #M0.Tuple.Pair($Box(Lit(Seq#Empty(): Seq)), $Box(Lit(Set#Empty(): Set)))
             else (var r#0 := M0.__default.eval($ly, 
                  reveal_M0._default.eval, 
                  $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
                  stOrig#0, 
                  env#0, 
                  useCache#0); 
              (var rr#0 := M0.__default.evalArgs($ly, context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0, useCache#0); 
                #M0.Tuple.Pair($Box(Seq#Append(Seq#Build(Seq#Empty(): Seq, M0.Tuple.fst(r#0)), $Unbox(M0.Tuple.fst(rr#0)): Seq)), 
                  $Box(Set#Union(Set#UnionOne(Set#Empty(): Set, M0.Tuple.snd(r#0)), 
                      $Unbox(M0.Tuple.snd(rr#0)): Set)))))));
// definition axiom for M0.__default.evalArgs for decreasing-related literals (revealed)
axiom {:id "id705"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      context#0: DatatypeType, 
      args#0: Seq, 
      stOrig#0: Box, 
      env#0: Box, 
      useCache#0: bool :: 
    {:weight 3} { M0.__default.evalArgs($LS($ly), Lit(context#0), Lit(args#0), stOrig#0, env#0, useCache#0) } 
    M0.__default.evalArgs#canCall(Lit(context#0), Lit(args#0), stOrig#0, env#0, useCache#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(context#0, Tclass.M0.Expression())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && $IsBox(stOrig#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.__default.ValidEnv(env#0)
           && (forall arg#2: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#2)) } 
            $Is(arg#2, Tclass.M0.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#2))
               ==> DtRank(arg#2) < DtRank(context#0)))
       ==> (!Seq#Equal(args#0, Seq#Empty(): Seq)
           ==> M0.__default.eval#canCall($Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
              stOrig#0, 
              env#0, 
              useCache#0)
             && (var r#1 := M0.__default.eval($LS($ly), 
                  reveal_M0._default.eval, 
                  $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                  stOrig#0, 
                  env#0, 
                  useCache#0); 
              M0.__default.evalArgs#canCall(Lit(context#0), 
                  Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                  stOrig#0, 
                  env#0, 
                  useCache#0)
                 && (var rr#1 := M0.__default.evalArgs($LS($ly), 
                      Lit(context#0), 
                      Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                      stOrig#0, 
                      env#0, 
                      useCache#0); 
                  M0.Tuple.Pair_q(r#1)
                     && M0.Tuple.Pair_q(rr#1)
                     && 
                    M0.Tuple.Pair_q(r#1)
                     && M0.Tuple.Pair_q(rr#1))))
         && M0.__default.evalArgs($LS($ly), Lit(context#0), Lit(args#0), stOrig#0, env#0, useCache#0)
           == (if Seq#Equal(args#0, Seq#Empty(): Seq)
             then #M0.Tuple.Pair($Box(Lit(Seq#Empty(): Seq)), $Box(Lit(Set#Empty(): Set)))
             else (var r#1 := M0.__default.eval($LS($ly), 
                  reveal_M0._default.eval, 
                  $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                  stOrig#0, 
                  env#0, 
                  useCache#0); 
              (var rr#1 := M0.__default.evalArgs($LS($ly), 
                    Lit(context#0), 
                    Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                    stOrig#0, 
                    env#0, 
                    useCache#0); 
                #M0.Tuple.Pair($Box(Seq#Append(Seq#Build(Seq#Empty(): Seq, M0.Tuple.fst(r#1)), $Unbox(M0.Tuple.fst(rr#1)): Seq)), 
                  $Box(Set#Union(Set#UnionOne(Set#Empty(): Set, M0.Tuple.snd(r#1)), 
                      $Unbox(M0.Tuple.snd(rr#1)): Set)))))));
// definition axiom for M0.__default.evalArgs for all literals (revealed)
axiom {:id "id706"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      context#0: DatatypeType, 
      args#0: Seq, 
      stOrig#0: Box, 
      env#0: Box, 
      useCache#0: bool :: 
    {:weight 3} { M0.__default.evalArgs($LS($ly), 
        Lit(context#0), 
        Lit(args#0), 
        Lit(stOrig#0), 
        Lit(env#0), 
        Lit(useCache#0)) } 
    M0.__default.evalArgs#canCall(Lit(context#0), Lit(args#0), Lit(stOrig#0), Lit(env#0), Lit(useCache#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(context#0, Tclass.M0.Expression())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && $IsBox(stOrig#0, Tclass.M0.State())
           && $IsBox(env#0, Tclass.M0.Env())
           && 
          M0.__default.ValidEnv(Lit(env#0))
           && (forall arg#3: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#3)) } 
            $Is(arg#3, Tclass.M0.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#3))
               ==> DtRank(arg#3) < DtRank(context#0)))
       ==> (!Seq#Equal(args#0, Seq#Empty(): Seq)
           ==> M0.__default.eval#canCall($Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
              Lit(stOrig#0), 
              Lit(env#0), 
              Lit(useCache#0))
             && (var r#2 := M0.__default.eval($LS($ly), 
                  reveal_M0._default.eval, 
                  $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                  Lit(stOrig#0), 
                  Lit(env#0), 
                  Lit(useCache#0)); 
              M0.__default.evalArgs#canCall(Lit(context#0), 
                  Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                  Lit(stOrig#0), 
                  Lit(env#0), 
                  Lit(useCache#0))
                 && (var rr#2 := Lit(M0.__default.evalArgs($LS($ly), 
                        Lit(context#0), 
                        Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                        Lit(stOrig#0), 
                        Lit(env#0), 
                        Lit(useCache#0))); 
                  M0.Tuple.Pair_q(r#2)
                     && M0.Tuple.Pair_q(rr#2)
                     && 
                    M0.Tuple.Pair_q(r#2)
                     && M0.Tuple.Pair_q(rr#2))))
         && M0.__default.evalArgs($LS($ly), 
            Lit(context#0), 
            Lit(args#0), 
            Lit(stOrig#0), 
            Lit(env#0), 
            Lit(useCache#0))
           == (if Seq#Equal(args#0, Seq#Empty(): Seq)
             then #M0.Tuple.Pair($Box(Lit(Seq#Empty(): Seq)), $Box(Lit(Set#Empty(): Set)))
             else (var r#2 := M0.__default.eval($LS($ly), 
                  reveal_M0._default.eval, 
                  $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                  Lit(stOrig#0), 
                  Lit(env#0), 
                  Lit(useCache#0)); 
              (var rr#2 := Lit(M0.__default.evalArgs($LS($ly), 
                      Lit(context#0), 
                      Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                      Lit(stOrig#0), 
                      Lit(env#0), 
                      Lit(useCache#0))); 
                #M0.Tuple.Pair($Box(Seq#Append(Seq#Build(Seq#Empty(): Seq, M0.Tuple.fst(r#2)), $Unbox(M0.Tuple.fst(rr#2)): Seq)), 
                  $Box(Set#Union(Set#UnionOne(Set#Empty(): Set, M0.Tuple.snd(r#2)), 
                      $Unbox(M0.Tuple.snd(rr#2)): Set)))))));
}

function M0.__default.evalArgs#canCall(context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: Box, 
    env#0: Box, 
    useCache#0: bool)
   : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, 
    context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: Box, 
    env#0: Box, 
    useCache#0: bool :: 
  { M0.__default.evalArgs($LS($ly), context#0, args#0, stOrig#0, env#0, useCache#0) } 
  M0.__default.evalArgs($LS($ly), context#0, args#0, stOrig#0, env#0, useCache#0)
     == M0.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0, useCache#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, 
    context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: Box, 
    env#0: Box, 
    useCache#0: bool :: 
  { M0.__default.evalArgs(AsFuelBottom($ly), context#0, args#0, stOrig#0, env#0, useCache#0) } 
  M0.__default.evalArgs($ly, context#0, args#0, stOrig#0, env#0, useCache#0)
     == M0.__default.evalArgs($LZ, context#0, args#0, stOrig#0, env#0, useCache#0));

function M0.__default.evalArgs#requires(LayerType, DatatypeType, Seq, Box, Box, bool) : bool;

// #requires axiom for M0.__default.evalArgs
axiom (forall $ly: LayerType, 
    context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: Box, 
    env#0: Box, 
    useCache#0: bool :: 
  { M0.__default.evalArgs#requires($ly, context#0, args#0, stOrig#0, env#0, useCache#0) } 
  $Is(context#0, Tclass.M0.Expression())
       && $Is(args#0, TSeq(Tclass.M0.Expression()))
       && $IsBox(stOrig#0, Tclass.M0.State())
       && $IsBox(env#0, Tclass.M0.Env())
     ==> M0.__default.evalArgs#requires($ly, context#0, args#0, stOrig#0, env#0, useCache#0)
       == (M0.__default.ValidEnv(env#0)
         && (forall arg#1: DatatypeType :: 
          { Seq#Contains(args#0, $Box(arg#1)) } 
          $Is(arg#1, Tclass.M0.Expression())
             ==> 
            Seq#Contains(args#0, $Box(arg#1))
             ==> DtRank(arg#1) < DtRank(context#0))));

procedure {:verboseName "M0.evalArgs (well-formedness)"} CheckWellformed$$M0.__default.evalArgs(context#0: DatatypeType where $Is(context#0, Tclass.M0.Expression()), 
    args#0: Seq where $Is(args#0, TSeq(Tclass.M0.Expression())), 
    stOrig#0: Box where $IsBox(stOrig#0, Tclass.M0.State()), 
    env#0: Box where $IsBox(env#0, Tclass.M0.Env()), 
    useCache#0: bool);
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.evalArgs (well-formedness)"} CheckWellformed$$M0.__default.evalArgs(context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: Box, 
    env#0: Box, 
    useCache#0: bool)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##env#0: Box;
  var arg#4: DatatypeType;
  var r#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##st#0: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var rr#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var ##context#0: DatatypeType;
  var ##args#0: Seq;
  var ##stOrig#0: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id707"} M0.__default.ValidEnv(env#0);
    havoc arg#4;
    assume $Is(arg#4, Tclass.M0.Expression())
       && $IsAlloc(arg#4, Tclass.M0.Expression(), $Heap);
    if (*)
    {
        assume {:id "id708"} Seq#Contains(args#0, $Box(arg#4));
        assume {:id "id709"} DtRank(arg#4) < DtRank(context#0);
    }
    else
    {
        assume {:id "id710"} Seq#Contains(args#0, $Box(arg#4)) ==> DtRank(arg#4) < DtRank(context#0);
    }

    assume {:id "id711"} (forall arg#0: DatatypeType :: 
      { Seq#Contains(args#0, $Box(arg#0)) } 
      $Is(arg#0, Tclass.M0.Expression())
         ==> 
        Seq#Contains(args#0, $Box(arg#0))
         ==> DtRank(arg#0) < DtRank(context#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0), 
          Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Seq#Equal(args#0, Seq#Empty(): Seq))
        {
            assume {:id "id712"} M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0)
               == Lit(#M0.Tuple.Pair($Box(Lit(Seq#Empty(): Seq)), $Box(Lit(Set#Empty(): Set))));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0), 
              Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())));
            return;
        }
        else
        {
            havoc r#Z#0;
            assert {:id "id713"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
            ##expr#0 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType;
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
            ##st#0 := stOrig#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
            ##env#1 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
            ##useCache#0 := useCache#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#0, TBool, $Heap);
            assert {:id "id714"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
            assume M0.__default.ValidEnv(##env#1);
            assert {:id "id715"} DtRank(##expr#0) < DtRank(context#0);
            assume M0.__default.eval#canCall($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, stOrig#0, env#0, useCache#0);
            assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
                stOrig#0, 
                env#0, 
                useCache#0));
            assume {:id "id716"} let#0#0#0
               == M0.__default.eval($LS($LZ), 
                reveal_M0._default.eval, 
                $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
                stOrig#0, 
                env#0, 
                useCache#0);
            assume M0.__default.eval#canCall($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, stOrig#0, env#0, useCache#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
            assume {:id "id717"} r#Z#0 == let#0#0#0;
            havoc rr#Z#0;
            ##context#0 := context#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##context#0, Tclass.M0.Expression(), $Heap);
            assert {:id "id718"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(args#0);
            ##args#0 := Seq#Drop(args#0, LitInt(1));
            // assume allocatedness for argument to function
            assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
            ##stOrig#0 := stOrig#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
            ##env#2 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
            ##useCache#1 := useCache#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1, TBool, $Heap);
            assert {:id "id719"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
            assert {:id "id720"} {:subsumption 0} (forall arg#5: DatatypeType :: 
              { Seq#Contains(##args#0, $Box(arg#5)) } 
              $Is(arg#5, Tclass.M0.Expression())
                 ==> 
                Seq#Contains(##args#0, $Box(arg#5))
                 ==> DtRank(arg#5) < DtRank(##context#0));
            assume M0.__default.ValidEnv(##env#2)
               && (forall arg#5: DatatypeType :: 
                { Seq#Contains(##args#0, $Box(arg#5)) } 
                $Is(arg#5, Tclass.M0.Expression())
                   ==> 
                  Seq#Contains(##args#0, $Box(arg#5))
                   ==> DtRank(arg#5) < DtRank(##context#0));
            assert {:id "id721"} 0 <= Seq#Length(args#0)
               || DtRank(##context#0) < DtRank(context#0)
               || Seq#Length(##args#0) == Seq#Length(args#0);
            assert {:id "id722"} DtRank(##context#0) < DtRank(context#0)
               || (DtRank(##context#0) == DtRank(context#0)
                 && Seq#Length(##args#0) < Seq#Length(args#0));
            assume M0.__default.evalArgs#canCall(context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0, useCache#0);
            assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0, useCache#0));
            assume {:id "id723"} let#1#0#0
               == M0.__default.evalArgs($LS($LZ), context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0, useCache#0);
            assume M0.__default.evalArgs#canCall(context#0, Seq#Drop(args#0, LitInt(1)), stOrig#0, env#0, useCache#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, 
              Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())));
            assume {:id "id724"} rr#Z#0 == let#1#0#0;
            assume M0.Tuple.Pair_q(r#Z#0);
            assume M0.Tuple.Pair_q(rr#Z#0);
            assume M0.Tuple.Pair_q(r#Z#0);
            assume M0.Tuple.Pair_q(rr#Z#0);
            assume {:id "id725"} M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0)
               == #M0.Tuple.Pair($Box(Seq#Append(Seq#Build(Seq#Empty(): Seq, M0.Tuple.fst(r#Z#0)), 
                    $Unbox(M0.Tuple.fst(rr#Z#0)): Seq)), 
                $Box(Set#Union(Set#UnionOne(Set#Empty(): Set, M0.Tuple.snd(r#Z#0)), 
                    $Unbox(M0.Tuple.snd(rr#Z#0)): Set)));
            assume M0.Tuple.Pair_q(r#Z#0)
               && M0.Tuple.Pair_q(rr#Z#0)
               && 
              M0.Tuple.Pair_q(r#Z#0)
               && M0.Tuple.Pair_q(rr#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0), 
              Tclass.M0.Tuple(TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())));
            return;
        }

        assume false;
    }
}



// function declaration for M0._default.Arity
function M0.__default.Arity(prim#0: DatatypeType) : int
uses {
// consequence axiom for M0.__default.Arity
axiom 1 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType :: 
    { M0.__default.Arity(prim#0) } 
    M0.__default.Arity#canCall(prim#0)
         || (1 < $FunctionContextHeight && $Is(prim#0, Tclass.M0.Primitive()))
       ==> LitInt(0) <= M0.__default.Arity(prim#0));
// definition axiom for M0.__default.Arity (revealed)
axiom {:id "id726"} 1 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType :: 
    { M0.__default.Arity(prim#0) } 
    M0.__default.Arity#canCall(prim#0)
         || (1 < $FunctionContextHeight && $Is(prim#0, Tclass.M0.Primitive()))
       ==> M0.__default.Arity(prim#0)
         == (if M0.Primitive.primCreatePath_q(prim#0) then 1 else 3));
// definition axiom for M0.__default.Arity for all literals (revealed)
axiom {:id "id727"} 1 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType :: 
    {:weight 3} { M0.__default.Arity(Lit(prim#0)) } 
    M0.__default.Arity#canCall(Lit(prim#0))
         || (1 < $FunctionContextHeight && $Is(prim#0, Tclass.M0.Primitive()))
       ==> M0.__default.Arity(Lit(prim#0))
         == (if M0.Primitive.primCreatePath_q(Lit(prim#0)) then 1 else 3));
}

function M0.__default.Arity#canCall(prim#0: DatatypeType) : bool;

function M0.__default.Arity#requires(DatatypeType) : bool;

// #requires axiom for M0.__default.Arity
axiom (forall prim#0: DatatypeType :: 
  { M0.__default.Arity#requires(prim#0) } 
  $Is(prim#0, Tclass.M0.Primitive())
     ==> M0.__default.Arity#requires(prim#0) == true);

procedure {:verboseName "M0.Arity (well-formedness)"} CheckWellformed$$M0.__default.Arity(prim#0: DatatypeType where $Is(prim#0, Tclass.M0.Primitive()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Arity (well-formedness)"} CheckWellformed$$M0.__default.Arity(prim#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume LitInt(0) <= M0.__default.Arity(prim#0);
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (prim#0 == #M0.Primitive.primCreatePath())
        {
            assert {:id "id730"} $Is(LitInt(1), Tclass._System.nat());
            assume {:id "id731"} M0.__default.Arity(prim#0) == LitInt(1);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.Arity(prim#0), Tclass._System.nat());
            return;
        }
        else if (prim#0 == #M0.Primitive.primExec())
        {
            assert {:id "id728"} $Is(LitInt(3), Tclass._System.nat());
            assume {:id "id729"} M0.__default.Arity(prim#0) == LitInt(3);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.Arity(prim#0), Tclass._System.nat());
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for M0._default.ValidArgs
function M0.__default.ValidArgs(prim#0: DatatypeType, args#0: Seq, st#0: Box) : bool
uses {
// definition axiom for M0.__default.ValidArgs (revealed)
axiom {:id "id732"} 3 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType, args#0: Seq, st#0: Box :: 
    { M0.__default.ValidArgs(prim#0, args#0, st#0) } 
    M0.__default.ValidArgs#canCall(prim#0, args#0, st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(prim#0, Tclass.M0.Primitive())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && $IsBox(st#0, Tclass.M0.State())
           && 
          (M0.Primitive.primExec_q(prim#0) ==> Seq#Length(args#0) == LitInt(3))
           && (M0.Primitive.primCreatePath_q(prim#0) ==> Seq#Length(args#0) == LitInt(1)))
       ==> (!M0.Primitive.primCreatePath_q(prim#0)
           ==> (var cmd#1, deps#1, exps#1 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
              $Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType, 
              $Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType; 
            M0.Expression.exprLiteral_q(cmd#1)
               ==> 
              M0.Literal.litString_q(M0.Expression.lit(cmd#1))
               ==> 
              M0.Expression.exprLiteral_q(deps#1)
               ==> 
              M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#1))
               ==> 
              M0.Expression.exprLiteral_q(exps#1)
               ==> 
              M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#1))
               ==> M0.__default.DomSt#canCall(st#0)
                 && (Set#Subset(M0.Literal.paths(M0.Expression.lit(deps#1)), M0.__default.DomSt(st#0))
                   ==> M0.__default.Pre#canCall(M0.Literal.str(M0.Expression.lit(cmd#1)), 
                    M0.Literal.paths(M0.Expression.lit(deps#1)), 
                    M0.Literal.strs(M0.Expression.lit(exps#1)), 
                    st#0))))
         && M0.__default.ValidArgs(prim#0, args#0, st#0)
           == (if M0.Primitive.primCreatePath_q(prim#0)
             then false
             else (var cmd#0, deps#0, exps#0 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
                $Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType, 
                $Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType; 
              M0.Expression.exprLiteral_q(cmd#0)
                 && M0.Literal.litString_q(M0.Expression.lit(cmd#0))
                 && M0.Expression.exprLiteral_q(deps#0)
                 && M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#0))
                 && M0.Expression.exprLiteral_q(exps#0)
                 && M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#0))
                 && Set#Subset(M0.Literal.paths(M0.Expression.lit(deps#0)), M0.__default.DomSt(st#0))
                 && M0.__default.Pre(M0.Literal.str(M0.Expression.lit(cmd#0)), 
                  M0.Literal.paths(M0.Expression.lit(deps#0)), 
                  M0.Literal.strs(M0.Expression.lit(exps#0)), 
                  st#0))));
// definition axiom for M0.__default.ValidArgs for decreasing-related literals (revealed)
axiom {:id "id733"} 3 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType, args#0: Seq, st#0: Box :: 
    {:weight 3} { M0.__default.ValidArgs(Lit(prim#0), Lit(args#0), st#0) } 
    M0.__default.ValidArgs#canCall(Lit(prim#0), Lit(args#0), st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(prim#0, Tclass.M0.Primitive())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && $IsBox(st#0, Tclass.M0.State())
           && 
          (M0.Primitive.primExec_q(Lit(prim#0)) ==> Seq#Length(Lit(args#0)) == LitInt(3))
           && (M0.Primitive.primCreatePath_q(Lit(prim#0))
             ==> Seq#Length(Lit(args#0)) == LitInt(1)))
       ==> (!Lit(M0.Primitive.primCreatePath_q(Lit(prim#0)))
           ==> (var cmd#3, deps#3, exps#3 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
            M0.Expression.exprLiteral_q(cmd#3)
               ==> 
              M0.Literal.litString_q(M0.Expression.lit(cmd#3))
               ==> 
              M0.Expression.exprLiteral_q(deps#3)
               ==> 
              M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#3))
               ==> 
              M0.Expression.exprLiteral_q(exps#3)
               ==> 
              M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#3))
               ==> M0.__default.DomSt#canCall(st#0)
                 && (Set#Subset(M0.Literal.paths(M0.Expression.lit(deps#3)), M0.__default.DomSt(st#0))
                   ==> M0.__default.Pre#canCall(M0.Literal.str(M0.Expression.lit(cmd#3)), 
                    M0.Literal.paths(M0.Expression.lit(deps#3)), 
                    M0.Literal.strs(M0.Expression.lit(exps#3)), 
                    st#0))))
         && M0.__default.ValidArgs(Lit(prim#0), Lit(args#0), st#0)
           == (if M0.Primitive.primCreatePath_q(Lit(prim#0))
             then false
             else (var cmd#2, deps#2, exps#2 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
              M0.Expression.exprLiteral_q(cmd#2)
                 && M0.Literal.litString_q(M0.Expression.lit(cmd#2))
                 && M0.Expression.exprLiteral_q(deps#2)
                 && M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#2))
                 && M0.Expression.exprLiteral_q(exps#2)
                 && M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#2))
                 && Set#Subset(M0.Literal.paths(M0.Expression.lit(deps#2)), M0.__default.DomSt(st#0))
                 && M0.__default.Pre(M0.Literal.str(M0.Expression.lit(cmd#2)), 
                  M0.Literal.paths(M0.Expression.lit(deps#2)), 
                  M0.Literal.strs(M0.Expression.lit(exps#2)), 
                  st#0))));
// definition axiom for M0.__default.ValidArgs for all literals (revealed)
axiom {:id "id734"} 3 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType, args#0: Seq, st#0: Box :: 
    {:weight 3} { M0.__default.ValidArgs(Lit(prim#0), Lit(args#0), Lit(st#0)) } 
    M0.__default.ValidArgs#canCall(Lit(prim#0), Lit(args#0), Lit(st#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(prim#0, Tclass.M0.Primitive())
           && $Is(args#0, TSeq(Tclass.M0.Expression()))
           && $IsBox(st#0, Tclass.M0.State())
           && 
          (M0.Primitive.primExec_q(Lit(prim#0)) ==> Seq#Length(Lit(args#0)) == LitInt(3))
           && (M0.Primitive.primCreatePath_q(Lit(prim#0))
             ==> Seq#Length(Lit(args#0)) == LitInt(1)))
       ==> (!Lit(M0.Primitive.primCreatePath_q(Lit(prim#0)))
           ==> (var cmd#5, deps#5, exps#5 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
            M0.Expression.exprLiteral_q(cmd#5)
               ==> 
              M0.Literal.litString_q(M0.Expression.lit(cmd#5))
               ==> 
              M0.Expression.exprLiteral_q(deps#5)
               ==> 
              M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#5))
               ==> 
              M0.Expression.exprLiteral_q(exps#5)
               ==> 
              M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#5))
               ==> M0.__default.DomSt#canCall(Lit(st#0))
                 && (Set#Subset(M0.Literal.paths(M0.Expression.lit(deps#5)), M0.__default.DomSt(Lit(st#0)))
                   ==> M0.__default.Pre#canCall(M0.Literal.str(M0.Expression.lit(cmd#5)), 
                    M0.Literal.paths(M0.Expression.lit(deps#5)), 
                    M0.Literal.strs(M0.Expression.lit(exps#5)), 
                    Lit(st#0)))))
         && M0.__default.ValidArgs(Lit(prim#0), Lit(args#0), Lit(st#0))
           == (if M0.Primitive.primCreatePath_q(Lit(prim#0))
             then false
             else (var cmd#4, deps#4, exps#4 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
              M0.Expression.exprLiteral_q(cmd#4)
                 && M0.Literal.litString_q(M0.Expression.lit(cmd#4))
                 && M0.Expression.exprLiteral_q(deps#4)
                 && M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#4))
                 && M0.Expression.exprLiteral_q(exps#4)
                 && M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#4))
                 && Set#Subset(M0.Literal.paths(M0.Expression.lit(deps#4)), M0.__default.DomSt(Lit(st#0)))
                 && M0.__default.Pre(M0.Literal.str(M0.Expression.lit(cmd#4)), 
                  M0.Literal.paths(M0.Expression.lit(deps#4)), 
                  M0.Literal.strs(M0.Expression.lit(exps#4)), 
                  Lit(st#0)))));
}

function M0.__default.ValidArgs#canCall(prim#0: DatatypeType, args#0: Seq, st#0: Box) : bool;

function M0.__default.ValidArgs#requires(DatatypeType, Seq, Box) : bool;

// #requires axiom for M0.__default.ValidArgs
axiom (forall prim#0: DatatypeType, args#0: Seq, st#0: Box :: 
  { M0.__default.ValidArgs#requires(prim#0, args#0, st#0) } 
  $Is(prim#0, Tclass.M0.Primitive())
       && $Is(args#0, TSeq(Tclass.M0.Expression()))
       && $IsBox(st#0, Tclass.M0.State())
     ==> M0.__default.ValidArgs#requires(prim#0, args#0, st#0)
       == ((M0.Primitive.primExec_q(prim#0) ==> Seq#Length(args#0) == LitInt(3))
         && (M0.Primitive.primCreatePath_q(prim#0) ==> Seq#Length(args#0) == LitInt(1))));

procedure {:verboseName "M0.ValidArgs (well-formedness)"} CheckWellformed$$M0.__default.ValidArgs(prim#0: DatatypeType where $Is(prim#0, Tclass.M0.Primitive()), 
    args#0: Seq where $Is(args#0, TSeq(Tclass.M0.Expression())), 
    st#0: Box where $IsBox(st#0, Tclass.M0.State()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.ValidArgs (well-formedness)"} CheckWellformed$$M0.__default.ValidArgs(prim#0: DatatypeType, args#0: Seq, st#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var cmd#Z#0: DatatypeType;
  var deps#Z#0: DatatypeType;
  var exps#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var let#0#1#0: DatatypeType;
  var let#0#2#0: DatatypeType;
  var ##st#0: Box;
  var ##cmd#0: Seq;
  var ##deps#0: Set;
  var ##exps#0: Set;
  var ##st#1: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    if (*)
    {
        assume {:id "id735"} M0.Primitive.primExec_q(prim#0);
        assume {:id "id736"} Seq#Length(args#0) == LitInt(3);
    }
    else
    {
        assume {:id "id737"} M0.Primitive.primExec_q(prim#0) ==> Seq#Length(args#0) == LitInt(3);
    }

    if (*)
    {
        assume {:id "id738"} M0.Primitive.primCreatePath_q(prim#0);
        assume {:id "id739"} Seq#Length(args#0) == LitInt(1);
    }
    else
    {
        assume {:id "id740"} M0.Primitive.primCreatePath_q(prim#0) ==> Seq#Length(args#0) == LitInt(1);
    }

    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (prim#0 == #M0.Primitive.primCreatePath())
        {
            assume {:id "id762"} M0.__default.ValidArgs(prim#0, args#0, st#0) == Lit(false);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.ValidArgs(prim#0, args#0, st#0), TBool);
            return;
        }
        else if (prim#0 == #M0.Primitive.primExec())
        {
            havoc cmd#Z#0;
            havoc deps#Z#0;
            havoc exps#Z#0;
            assert {:id "id741"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
            assume {:id "id742"} let#0#0#0 == $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass.M0.Expression());
            assume {:id "id743"} cmd#Z#0 == let#0#0#0;
            assert {:id "id744"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args#0);
            assume {:id "id745"} let#0#1#0 == $Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#1#0, Tclass.M0.Expression());
            assume {:id "id746"} deps#Z#0 == let#0#1#0;
            assert {:id "id747"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args#0);
            assume {:id "id748"} let#0#2#0 == $Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#2#0, Tclass.M0.Expression());
            assume {:id "id749"} exps#Z#0 == let#0#2#0;
            if (M0.Expression.exprLiteral_q(cmd#Z#0))
            {
                assert {:id "id750"} M0.Expression.exprLiteral_q(cmd#Z#0);
            }

            if (M0.Expression.exprLiteral_q(cmd#Z#0)
               && M0.Literal.litString_q(M0.Expression.lit(cmd#Z#0)))
            {
            }

            if (M0.Expression.exprLiteral_q(cmd#Z#0)
               && M0.Literal.litString_q(M0.Expression.lit(cmd#Z#0))
               && M0.Expression.exprLiteral_q(deps#Z#0))
            {
                assert {:id "id751"} M0.Expression.exprLiteral_q(deps#Z#0);
            }

            if (M0.Expression.exprLiteral_q(cmd#Z#0)
               && M0.Literal.litString_q(M0.Expression.lit(cmd#Z#0))
               && M0.Expression.exprLiteral_q(deps#Z#0)
               && M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#Z#0)))
            {
            }

            if (M0.Expression.exprLiteral_q(cmd#Z#0)
               && M0.Literal.litString_q(M0.Expression.lit(cmd#Z#0))
               && M0.Expression.exprLiteral_q(deps#Z#0)
               && M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#Z#0))
               && M0.Expression.exprLiteral_q(exps#Z#0))
            {
                assert {:id "id752"} M0.Expression.exprLiteral_q(exps#Z#0);
            }

            if (M0.Expression.exprLiteral_q(cmd#Z#0)
               && M0.Literal.litString_q(M0.Expression.lit(cmd#Z#0))
               && M0.Expression.exprLiteral_q(deps#Z#0)
               && M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#Z#0))
               && M0.Expression.exprLiteral_q(exps#Z#0)
               && M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#Z#0)))
            {
                assert {:id "id753"} M0.Expression.exprLiteral_q(deps#Z#0);
                assert {:id "id754"} M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#Z#0));
                ##st#0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
            }

            if (M0.Expression.exprLiteral_q(cmd#Z#0)
               && M0.Literal.litString_q(M0.Expression.lit(cmd#Z#0))
               && M0.Expression.exprLiteral_q(deps#Z#0)
               && M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#Z#0))
               && M0.Expression.exprLiteral_q(exps#Z#0)
               && M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#Z#0))
               && Set#Subset(M0.Literal.paths(M0.Expression.lit(deps#Z#0)), M0.__default.DomSt(st#0)))
            {
                assert {:id "id755"} M0.Expression.exprLiteral_q(cmd#Z#0);
                assert {:id "id756"} M0.Literal.litString_q(M0.Expression.lit(cmd#Z#0));
                ##cmd#0 := M0.Literal.str(M0.Expression.lit(cmd#Z#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0, TSeq(TChar), $Heap);
                assert {:id "id757"} M0.Expression.exprLiteral_q(deps#Z#0);
                assert {:id "id758"} M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#Z#0));
                ##deps#0 := M0.Literal.paths(M0.Expression.lit(deps#Z#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0, TSet(Tclass.M0.Path()), $Heap);
                assert {:id "id759"} M0.Expression.exprLiteral_q(exps#Z#0);
                assert {:id "id760"} M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#Z#0));
                ##exps#0 := M0.Literal.strs(M0.Expression.lit(exps#Z#0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##exps#0, TSet(TSeq(TChar)), $Heap);
                ##st#1 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
                assume M0.__default.Pre#canCall(M0.Literal.str(M0.Expression.lit(cmd#Z#0)), 
                  M0.Literal.paths(M0.Expression.lit(deps#Z#0)), 
                  M0.Literal.strs(M0.Expression.lit(exps#Z#0)), 
                  st#0);
            }

            assume {:id "id761"} M0.__default.ValidArgs(prim#0, args#0, st#0)
               == (
                M0.Expression.exprLiteral_q(cmd#Z#0)
                 && M0.Literal.litString_q(M0.Expression.lit(cmd#Z#0))
                 && M0.Expression.exprLiteral_q(deps#Z#0)
                 && M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#Z#0))
                 && M0.Expression.exprLiteral_q(exps#Z#0)
                 && M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#Z#0))
                 && Set#Subset(M0.Literal.paths(M0.Expression.lit(deps#Z#0)), M0.__default.DomSt(st#0))
                 && M0.__default.Pre(M0.Literal.str(M0.Expression.lit(cmd#Z#0)), 
                  M0.Literal.paths(M0.Expression.lit(deps#Z#0)), 
                  M0.Literal.strs(M0.Expression.lit(exps#Z#0)), 
                  st#0));
            assume M0.Expression.exprLiteral_q(cmd#Z#0)
               ==> 
              M0.Literal.litString_q(M0.Expression.lit(cmd#Z#0))
               ==> 
              M0.Expression.exprLiteral_q(deps#Z#0)
               ==> 
              M0.Literal.litArrOfPaths_q(M0.Expression.lit(deps#Z#0))
               ==> 
              M0.Expression.exprLiteral_q(exps#Z#0)
               ==> 
              M0.Literal.litArrOfStrings_q(M0.Expression.lit(exps#Z#0))
               ==> M0.__default.DomSt#canCall(st#0)
                 && (Set#Subset(M0.Literal.paths(M0.Expression.lit(deps#Z#0)), M0.__default.DomSt(st#0))
                   ==> M0.__default.Pre#canCall(M0.Literal.str(M0.Expression.lit(cmd#Z#0)), 
                    M0.Literal.paths(M0.Expression.lit(deps#Z#0)), 
                    M0.Literal.strs(M0.Expression.lit(exps#Z#0)), 
                    st#0));
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.ValidArgs(prim#0, args#0, st#0), TBool);
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



procedure {:verboseName "M0.ParallelBuildsTheorem (well-formedness)"} CheckWellFormed$$M0.__default.ParallelBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M0.Program())
         && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
         && $IsA#M0.Program(prog#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    useCache#0: bool);
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.ParallelBuildsTheorem (well-formedness)"} CheckWellFormed$$M0.__default.ParallelBuildsTheorem(prog#0: DatatypeType, st#0: Box, useCache#0: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##st#0: Box;
  var ##stC#0: Box;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##prog#0: DatatypeType;
  var ##st#1: Box;
  var ##useCache#0: bool;
  var expr'#Z#0: DatatypeType;
  var st'#Z#0: Box;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: Box;
  var ##st#2: Box;


    // AddMethodImpl: ParallelBuildsTheorem, CheckWellFormed$$M0.__default.ParallelBuildsTheorem
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume M0.Program.Program_q(prog#0);
    ##stmts#0 := M0.Program.stmts(prog#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass.M0.Statement()), $Heap);
    assume M0.__default.Legal#canCall(M0.Program.stmts(prog#0));
    assume {:id "id763"} M0.__default.Legal(M0.Program.stmts(prog#0));
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id764"} M0.__default.ValidState(st#0);
    if (*)
    {
        assume {:id "id765"} useCache#0;
        ##stC#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(st#0);
        assume {:id "id766"} M0.__default.ConsistentCache(st#0);
    }
    else
    {
        assume {:id "id767"} useCache#0 ==> M0.__default.ConsistentCache(st#0);
    }

    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##prog#0 := prog#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##prog#0, Tclass.M0.Program(), $Heap);
    ##st#1 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id768"} {:subsumption 0} M0.__default.Legal#canCall(M0.Program.stmts(##prog#0))
       ==> M0.__default.Legal(M0.Program.stmts(##prog#0))
         || Seq#Length(M0.Program.stmts(##prog#0)) != 0;
    assume M0.__default.Legal(M0.Program.stmts(##prog#0));
    assume M0.__default.build#canCall(prog#0, st#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.build(prog#0, st#0, useCache#0));
    assume {:id "id769"} let#0#0#0 == M0.__default.build(prog#0, st#0, useCache#0);
    assume M0.__default.build#canCall(prog#0, st#0, useCache#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
    assume {:id "id770"} result#Z#0 == let#0#0#0;
    havoc expr'#Z#0;
    havoc st'#Z#0;
    assume M0.Tuple.Pair_q(result#Z#0);
    assume {:id "id771"} let#1#0#0 == $Unbox(M0.Tuple.fst(result#Z#0)): DatatypeType;
    assume M0.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass.M0.Expression());
    assume {:id "id772"} expr'#Z#0 == let#1#0#0;
    assume M0.Tuple.Pair_q(result#Z#0);
    assume {:id "id773"} let#1#1#0 == M0.Tuple.snd(result#Z#0);
    assume M0.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $IsBox(let#1#1#0, Tclass.M0.State());
    assume {:id "id774"} st'#Z#0 == let#1#1#0;
    ##st#2 := st'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st'#Z#0);
    if (M0.__default.ValidState(st'#Z#0))
    {
        if (M0.Expression.exprError_q(expr'#Z#0))
        {
            assert {:id "id775"} M0.Expression.exprError_q(expr'#Z#0);
        }
    }

    assume {:id "id776"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
      (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
        M0.__default.ValidState(st'#0)
           && (M0.Expression.exprError_q(expr'#0)
             ==> !M0.Reason#Equal(M0.Expression.r(expr'#0), #M0.Reason.rCompatibility()))));
}



procedure {:verboseName "M0.ParallelBuildsTheorem (call)"} Call$$M0.__default.ParallelBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M0.Program())
         && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
         && $IsA#M0.Program(prog#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    useCache#0: bool);
  // user-defined preconditions
  requires {:id "id777"} M0.__default.Legal#canCall(M0.Program.stmts(prog#0))
     ==> M0.__default.Legal(M0.Program.stmts(prog#0))
       || Seq#Length(M0.Program.stmts(prog#0)) != 0;
  requires {:id "id778"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id779"} useCache#0
     ==> 
    M0.__default.ConsistentCache#canCall(st#0)
     ==> M0.__default.ConsistentCache(st#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.build#canCall(prog#0, st#0, useCache#0)
     && (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
      M0.Tuple.Pair_q(result#0)
         && M0.Tuple.Pair_q(result#0)
         && (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
          M0.__default.ValidState#canCall(st'#0)
             && (M0.__default.ValidState(st'#0)
               ==> 
              M0.Expression.exprError_q(expr'#0)
               ==> $IsA#M0.Reason(M0.Expression.r(expr'#0)))));
  free ensures {:id "id780"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.ValidState#canCall(st'#0)
         && 
        M0.__default.ValidState(st'#0)
         && (forall p#1: Box :: 
          { M0.__default.WellFounded(p#1) } 
            { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
          $IsBox(p#1, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st'#0), p#1)
             ==> M0.__default.WellFounded(p#1))));
  ensures {:id "id781"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.Expression.exprError_q(expr'#0)
         ==> !M0.Reason#Equal(M0.Expression.r(expr'#0), #M0.Reason.rCompatibility())));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.ParallelBuildsTheorem (correctness)"} Impl$$M0.__default.ParallelBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M0.Program())
         && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
         && $IsA#M0.Program(prog#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    useCache#0: bool)
   returns ($_reverifyPost: bool);
  free requires 9 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id782"} M0.__default.Legal#canCall(M0.Program.stmts(prog#0))
     && 
    M0.__default.Legal(M0.Program.stmts(prog#0))
     && Seq#Length(M0.Program.stmts(prog#0)) != 0;
  free requires {:id "id783"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  free requires {:id "id784"} useCache#0
     ==> M0.__default.ConsistentCache#canCall(st#0)
       && 
      M0.__default.ConsistentCache(st#0)
       && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
        { M0.__default.Loc(cmd#1, deps#1, e#1) } 
        $Is(cmd#1, TSeq(TChar))
             && $Is(deps#1, TSet(Tclass.M0.Path()))
             && $Is(e#1, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.build#canCall(prog#0, st#0, useCache#0)
     && (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
      M0.Tuple.Pair_q(result#0)
         && M0.Tuple.Pair_q(result#0)
         && (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
          M0.__default.ValidState#canCall(st'#0)
             && (M0.__default.ValidState(st'#0)
               ==> 
              M0.Expression.exprError_q(expr'#0)
               ==> $IsA#M0.Reason(M0.Expression.r(expr'#0)))));
  ensures {:id "id785"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.ValidState#canCall(st'#0)
         ==> M0.__default.ValidState(st'#0)
           || (forall p#3: Box :: 
            { M0.__default.WellFounded(p#3) } 
              { Set#IsMember(M0.__default.DomSt(st'#0), p#3) } 
            $IsBox(p#3, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st'#0), p#3)
               ==> M0.__default.WellFounded(p#3))));
  ensures {:id "id786"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.Expression.exprError_q(expr'#0)
         ==> !M0.Reason#Equal(M0.Expression.r(expr'#0), #M0.Reason.rCompatibility())));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.ParallelBuildsTheorem (correctness)"} Impl$$M0.__default.ParallelBuildsTheorem(prog#0: DatatypeType, st#0: Box, useCache#0: bool)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var prog##0: DatatypeType;
  var st##0: Box;
  var useCache##0: bool;

    // AddMethodImpl: ParallelBuildsTheorem, Impl$$M0.__default.ParallelBuildsTheorem
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(558,15)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    prog##0 := prog#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##0 := useCache#0;
    call {:id "id787"} Call$$M0.__default.BuildLemma(prog##0, st##0, useCache##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M0.BuildLemma (well-formedness)"} CheckWellFormed$$M0.__default.BuildLemma(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M0.Program())
         && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
         && $IsA#M0.Program(prog#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    useCache#0: bool);
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.BuildLemma (well-formedness)"} CheckWellFormed$$M0.__default.BuildLemma(prog#0: DatatypeType, st#0: Box, useCache#0: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##st#0: Box;
  var ##stC#0: Box;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##prog#0: DatatypeType;
  var ##st#1: Box;
  var ##useCache#0: bool;
  var expr'#Z#0: DatatypeType;
  var st'#Z#0: Box;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: Box;
  var ##st#2: Box;
  var ##st#3: Box;
  var ##st'#0: Box;


    // AddMethodImpl: BuildLemma, CheckWellFormed$$M0.__default.BuildLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume M0.Program.Program_q(prog#0);
    ##stmts#0 := M0.Program.stmts(prog#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass.M0.Statement()), $Heap);
    assume M0.__default.Legal#canCall(M0.Program.stmts(prog#0));
    assume {:id "id788"} M0.__default.Legal(M0.Program.stmts(prog#0));
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id789"} M0.__default.ValidState(st#0);
    if (*)
    {
        assume {:id "id790"} useCache#0;
        ##stC#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(st#0);
        assume {:id "id791"} M0.__default.ConsistentCache(st#0);
    }
    else
    {
        assume {:id "id792"} useCache#0 ==> M0.__default.ConsistentCache(st#0);
    }

    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##prog#0 := prog#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##prog#0, Tclass.M0.Program(), $Heap);
    ##st#1 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id793"} {:subsumption 0} M0.__default.Legal#canCall(M0.Program.stmts(##prog#0))
       ==> M0.__default.Legal(M0.Program.stmts(##prog#0))
         || Seq#Length(M0.Program.stmts(##prog#0)) != 0;
    assume M0.__default.Legal(M0.Program.stmts(##prog#0));
    assume M0.__default.build#canCall(prog#0, st#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.build(prog#0, st#0, useCache#0));
    assume {:id "id794"} let#0#0#0 == M0.__default.build(prog#0, st#0, useCache#0);
    assume M0.__default.build#canCall(prog#0, st#0, useCache#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
    assume {:id "id795"} result#Z#0 == let#0#0#0;
    havoc expr'#Z#0;
    havoc st'#Z#0;
    assume M0.Tuple.Pair_q(result#Z#0);
    assume {:id "id796"} let#1#0#0 == $Unbox(M0.Tuple.fst(result#Z#0)): DatatypeType;
    assume M0.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass.M0.Expression());
    assume {:id "id797"} expr'#Z#0 == let#1#0#0;
    assume M0.Tuple.Pair_q(result#Z#0);
    assume {:id "id798"} let#1#1#0 == M0.Tuple.snd(result#Z#0);
    assume M0.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $IsBox(let#1#1#0, Tclass.M0.State());
    assume {:id "id799"} st'#Z#0 == let#1#1#0;
    ##st#2 := st'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st'#Z#0);
    if (M0.__default.ValidState(st'#Z#0))
    {
        ##st#3 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
        ##st'#0 := st'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(st#0, st'#Z#0);
    }

    if (M0.__default.ValidState(st'#Z#0)
       && M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#Z#0))
    {
        if (M0.Expression.exprError_q(expr'#Z#0))
        {
            assert {:id "id800"} M0.Expression.exprError_q(expr'#Z#0);
        }
    }

    assume {:id "id801"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
      (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
        M0.__default.ValidState(st'#0)
           && M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)
           && (M0.Expression.exprError_q(expr'#0)
             ==> !M0.Reason#Equal(M0.Expression.r(expr'#0), #M0.Reason.rCompatibility()))));
}



procedure {:verboseName "M0.BuildLemma (call)"} Call$$M0.__default.BuildLemma(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M0.Program())
         && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
         && $IsA#M0.Program(prog#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    useCache#0: bool);
  // user-defined preconditions
  requires {:id "id802"} M0.__default.Legal#canCall(M0.Program.stmts(prog#0))
     ==> M0.__default.Legal(M0.Program.stmts(prog#0))
       || Seq#Length(M0.Program.stmts(prog#0)) != 0;
  requires {:id "id803"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id804"} useCache#0
     ==> 
    M0.__default.ConsistentCache#canCall(st#0)
     ==> M0.__default.ConsistentCache(st#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.build#canCall(prog#0, st#0, useCache#0)
     && (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
      M0.Tuple.Pair_q(result#0)
         && M0.Tuple.Pair_q(result#0)
         && (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
          M0.__default.ValidState#canCall(st'#0)
             && (M0.__default.ValidState(st'#0)
               ==> M0.__default.Extends#canCall(st#0, st'#0)
                 && (M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)
                   ==> 
                  M0.Expression.exprError_q(expr'#0)
                   ==> $IsA#M0.Reason(M0.Expression.r(expr'#0))))));
  free ensures {:id "id805"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.ValidState#canCall(st'#0)
         && 
        M0.__default.ValidState(st'#0)
         && (forall p#1: Box :: 
          { M0.__default.WellFounded(p#1) } 
            { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
          $IsBox(p#1, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st'#0), p#1)
             ==> M0.__default.WellFounded(p#1))));
  ensures {:id "id806"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)));
  ensures {:id "id807"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.Expression.exprError_q(expr'#0)
         ==> !M0.Reason#Equal(M0.Expression.r(expr'#0), #M0.Reason.rCompatibility())));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.BuildLemma (correctness)"} Impl$$M0.__default.BuildLemma(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M0.Program())
         && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
         && $IsA#M0.Program(prog#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    useCache#0: bool)
   returns ($_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id808"} M0.__default.Legal#canCall(M0.Program.stmts(prog#0))
     && 
    M0.__default.Legal(M0.Program.stmts(prog#0))
     && Seq#Length(M0.Program.stmts(prog#0)) != 0;
  free requires {:id "id809"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  free requires {:id "id810"} useCache#0
     ==> M0.__default.ConsistentCache#canCall(st#0)
       && 
      M0.__default.ConsistentCache(st#0)
       && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
        { M0.__default.Loc(cmd#1, deps#1, e#1) } 
        $Is(cmd#1, TSeq(TChar))
             && $Is(deps#1, TSet(Tclass.M0.Path()))
             && $Is(e#1, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.build#canCall(prog#0, st#0, useCache#0)
     && (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
      M0.Tuple.Pair_q(result#0)
         && M0.Tuple.Pair_q(result#0)
         && (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
          M0.__default.ValidState#canCall(st'#0)
             && (M0.__default.ValidState(st'#0)
               ==> M0.__default.Extends#canCall(st#0, st'#0)
                 && (M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)
                   ==> 
                  M0.Expression.exprError_q(expr'#0)
                   ==> $IsA#M0.Reason(M0.Expression.r(expr'#0))))));
  ensures {:id "id811"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.ValidState#canCall(st'#0)
         ==> M0.__default.ValidState(st'#0)
           || (forall p#3: Box :: 
            { M0.__default.WellFounded(p#3) } 
              { Set#IsMember(M0.__default.DomSt(st'#0), p#3) } 
            $IsBox(p#3, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st'#0), p#3)
               ==> M0.__default.WellFounded(p#3))));
  ensures {:id "id812"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)));
  ensures {:id "id813"} (var result#0 := M0.__default.build(prog#0, st#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.Expression.exprError_q(expr'#0)
         ==> !M0.Reason#Equal(M0.Expression.r(expr'#0), #M0.Reason.rCompatibility())));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.BuildLemma (correctness)"} Impl$$M0.__default.BuildLemma(prog#0: DatatypeType, st#0: Box, useCache#0: bool)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var stmts##0: Seq;
  var st##0: Box;
  var env##0: Box;
  var useCache##0: bool;

    // AddMethodImpl: BuildLemma, Impl$$M0.__default.BuildLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(571,12)
    // TrCallStmt: Before ProcessCallStmt
    assume M0.Program.Program_q(prog#0);
    assume M0.Program.Program_q(prog#0);
    // ProcessCallStmt: CheckSubrange
    stmts##0 := M0.Program.stmts(prog#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    assume M0.__default.EmptyEnv#canCall();
    assume M0.__default.EmptyEnv#canCall();
    // ProcessCallStmt: CheckSubrange
    env##0 := M0.__default.EmptyEnv();
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##0 := useCache#0;
    call {:id "id814"} Call$$M0.__default.DoLemma(stmts##0, st##0, env##0, useCache##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M0.DoLemma (well-formedness)"} CheckWellFormed$$M0.__default.DoLemma(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass.M0.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass.M0.Statement()), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool);
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.DoLemma (well-formedness)"} CheckWellFormed$$M0.__default.DoLemma(stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##st#0: Box;
  var ##env#0: Box;
  var ##stC#0: Box;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##stmts#1: Seq;
  var ##st#1: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var expr'#Z#0: DatatypeType;
  var st'#Z#0: Box;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: Box;
  var ##st#2: Box;
  var ##st#3: Box;
  var ##st'#0: Box;
  var ##stC#1: Box;


    // AddMethodImpl: DoLemma, CheckWellFormed$$M0.__default.DoLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##stmts#0 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass.M0.Statement()), $Heap);
    assume M0.__default.Legal#canCall(stmts#0);
    assume {:id "id815"} M0.__default.Legal(stmts#0);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id816"} M0.__default.ValidState(st#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id817"} M0.__default.ValidEnv(env#0);
    if (*)
    {
        assume {:id "id818"} useCache#0;
        ##stC#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(st#0);
        assume {:id "id819"} M0.__default.ConsistentCache(st#0);
    }
    else
    {
        assume {:id "id820"} useCache#0 ==> M0.__default.ConsistentCache(st#0);
    }

    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##stmts#1 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#1, TSeq(Tclass.M0.Statement()), $Heap);
    ##st#1 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id821"} {:subsumption 0} M0.__default.Legal#canCall(##stmts#1)
       ==> M0.__default.Legal(##stmts#1) || Seq#Length(##stmts#1) != 0;
    assert {:id "id822"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.__default.Legal(##stmts#1) && M0.__default.ValidEnv(##env#1);
    assume M0.__default.do#canCall(stmts#0, st#0, env#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0));
    assume {:id "id823"} let#0#0#0 == M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0);
    assume M0.__default.do#canCall(stmts#0, st#0, env#0, useCache#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
    assume {:id "id824"} result#Z#0 == let#0#0#0;
    havoc expr'#Z#0;
    havoc st'#Z#0;
    assume M0.Tuple.Pair_q(result#Z#0);
    assume {:id "id825"} let#1#0#0 == $Unbox(M0.Tuple.fst(result#Z#0)): DatatypeType;
    assume M0.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass.M0.Expression());
    assume {:id "id826"} expr'#Z#0 == let#1#0#0;
    assume M0.Tuple.Pair_q(result#Z#0);
    assume {:id "id827"} let#1#1#0 == M0.Tuple.snd(result#Z#0);
    assume M0.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $IsBox(let#1#1#0, Tclass.M0.State());
    assume {:id "id828"} st'#Z#0 == let#1#1#0;
    ##st#2 := st'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st'#Z#0);
    if (M0.__default.ValidState(st'#Z#0))
    {
        ##st#3 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
        ##st'#0 := st'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(st#0, st'#Z#0);
    }

    if (M0.__default.ValidState(st'#Z#0)
       && M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#Z#0))
    {
        if (useCache#0)
        {
            ##stC#1 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
            assume M0.__default.ConsistentCache#canCall(st#0);
        }
    }

    if (M0.__default.ValidState(st'#Z#0)
       && M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#Z#0)
       && (useCache#0 ==> M0.__default.ConsistentCache(st#0)))
    {
        if (M0.Expression.exprError_q(expr'#Z#0))
        {
            assert {:id "id829"} M0.Expression.exprError_q(expr'#Z#0);
        }
    }

    assume {:id "id830"} (var result#0 := M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0); 
      (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
        M0.__default.ValidState(st'#0)
           && M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)
           && (useCache#0 ==> M0.__default.ConsistentCache(st#0))
           && (M0.Expression.exprError_q(expr'#0)
             ==> !M0.Reason#Equal(M0.Expression.r(expr'#0), #M0.Reason.rCompatibility()))));
}



procedure {:verboseName "M0.DoLemma (call)"} Call$$M0.__default.DoLemma(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass.M0.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass.M0.Statement()), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool);
  // user-defined preconditions
  requires {:id "id831"} M0.__default.Legal#canCall(stmts#0)
     ==> M0.__default.Legal(stmts#0) || Seq#Length(stmts#0) != 0;
  requires {:id "id832"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id833"} M0.__default.ValidEnv(env#0);
  requires {:id "id834"} useCache#0
     ==> 
    M0.__default.ConsistentCache#canCall(st#0)
     ==> M0.__default.ConsistentCache(st#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.do#canCall(stmts#0, st#0, env#0, useCache#0)
     && (var result#0 := M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0); 
      M0.Tuple.Pair_q(result#0)
         && M0.Tuple.Pair_q(result#0)
         && (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
          M0.__default.ValidState#canCall(st'#0)
             && (M0.__default.ValidState(st'#0)
               ==> M0.__default.Extends#canCall(st#0, st'#0)
                 && (M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)
                   ==> (useCache#0 ==> M0.__default.ConsistentCache#canCall(st#0))
                     && (
                      (useCache#0
                       ==> M0.__default.ConsistentCache(st#0))
                       ==> 
                      M0.Expression.exprError_q(expr'#0)
                       ==> $IsA#M0.Reason(M0.Expression.r(expr'#0)))))));
  free ensures {:id "id835"} (var result#0 := M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.ValidState#canCall(st'#0)
         && 
        M0.__default.ValidState(st'#0)
         && (forall p#1: Box :: 
          { M0.__default.WellFounded(p#1) } 
            { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
          $IsBox(p#1, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st'#0), p#1)
             ==> M0.__default.WellFounded(p#1))));
  ensures {:id "id836"} (var result#0 := M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)));
  free ensures {:id "id837"} (var result#0 := M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      useCache#0
         ==> M0.__default.ConsistentCache#canCall(st#0)
           && 
          M0.__default.ConsistentCache(st#0)
           && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
            { M0.__default.Loc(cmd#1, deps#1, e#1) } 
            $Is(cmd#1, TSeq(TChar))
                 && $Is(deps#1, TSet(Tclass.M0.Path()))
                 && $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
               ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#1, deps#1, e#1)))));
  ensures {:id "id838"} (var result#0 := M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.Expression.exprError_q(expr'#0)
         ==> !M0.Reason#Equal(M0.Expression.r(expr'#0), #M0.Reason.rCompatibility())));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.DoLemma (correctness)"} Impl$$M0.__default.DoLemma(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass.M0.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass.M0.Statement()), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool)
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id839"} M0.__default.Legal#canCall(stmts#0)
     && 
    M0.__default.Legal(stmts#0)
     && Seq#Length(stmts#0) != 0;
  free requires {:id "id840"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  requires {:id "id841"} M0.__default.ValidEnv(env#0);
  free requires {:id "id842"} useCache#0
     ==> M0.__default.ConsistentCache#canCall(st#0)
       && 
      M0.__default.ConsistentCache(st#0)
       && (forall cmd#2: Seq, deps#2: Set, e#2: Seq :: 
        { M0.__default.Loc(cmd#2, deps#2, e#2) } 
        $Is(cmd#2, TSeq(TChar))
             && $Is(deps#2, TSet(Tclass.M0.Path()))
             && $Is(e#2, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#2, deps#2, e#2)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#2, deps#2, e#2)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.do#canCall(stmts#0, st#0, env#0, useCache#0)
     && (var result#0 := M0.__default.do($LS($LZ), stmts#0, st#0, env#0, useCache#0); 
      M0.Tuple.Pair_q(result#0)
         && M0.Tuple.Pair_q(result#0)
         && (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
          M0.__default.ValidState#canCall(st'#0)
             && (M0.__default.ValidState(st'#0)
               ==> M0.__default.Extends#canCall(st#0, st'#0)
                 && (M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)
                   ==> (useCache#0 ==> M0.__default.ConsistentCache#canCall(st#0))
                     && (
                      (useCache#0
                       ==> M0.__default.ConsistentCache(st#0))
                       ==> 
                      M0.Expression.exprError_q(expr'#0)
                       ==> $IsA#M0.Reason(M0.Expression.r(expr'#0)))))));
  ensures {:id "id843"} (var result#0 := M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.ValidState#canCall(st'#0)
         ==> M0.__default.ValidState(st'#0)
           || (forall p#3: Box :: 
            { M0.__default.WellFounded(p#3) } 
              { Set#IsMember(M0.__default.DomSt(st'#0), p#3) } 
            $IsBox(p#3, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st'#0), p#3)
               ==> M0.__default.WellFounded(p#3))));
  ensures {:id "id844"} (var result#0 := M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0)));
  ensures {:id "id845"} (var result#0 := M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      useCache#0
         ==> 
        M0.__default.ConsistentCache#canCall(st#0)
         ==> M0.__default.ConsistentCache(st#0)
           || (forall cmd#3: Seq, deps#3: Set, e#3: Seq :: 
            { M0.__default.Loc(cmd#3, deps#3, e#3) } 
            $Is(cmd#3, TSeq(TChar))
                 && $Is(deps#3, TSet(Tclass.M0.Path()))
                 && $Is(e#3, TSeq(TChar))
               ==> 
              Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#3, deps#3, e#3)))
               ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#3, deps#3, e#3)))));
  ensures {:id "id846"} (var result#0 := M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, useCache#0); 
    (var expr'#0, st'#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType, M0.Tuple.snd(result#0); 
      M0.Expression.exprError_q(expr'#0)
         ==> !M0.Reason#Equal(M0.Expression.r(expr'#0), #M0.Reason.rCompatibility())));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.DoLemma (correctness)"} Impl$$M0.__default.DoLemma(stmts#0: Seq, st#0: Box, env#0: Box, useCache#0: bool)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var defass#stmt#0: bool;
  var stmt#0: DatatypeType
     where defass#stmt#0
       ==> $Is(stmt#0, Tclass.M0.Statement())
         && $IsAlloc(stmt#0, Tclass.M0.Statement(), $Heap);
  var expr'#0_0: DatatypeType
     where $Is(expr'#0_0, Tclass.M0.Expression())
       && $IsAlloc(expr'#0_0, Tclass.M0.Expression(), $Heap);
  var defass#st'#0_0: bool;
  var st'#0_0: Box
     where defass#st'#0_0
       ==> $IsBox(st'#0_0, Tclass.M0.State())
         && $IsAllocBox(st'#0_0, Tclass.M0.State(), $Heap);
  var $rhs##0_0: DatatypeType;
  var $rhs##0_1: Box;
  var expr##0_0: DatatypeType;
  var st##0_0: Box;
  var env##0_0: Box;
  var useCache##0_0: bool;
  var ##expr#0_0: DatatypeType;
  var defass#env'#0_0_0: bool;
  var env'#0_0_0: Box
     where defass#env'#0_0_0
       ==> $IsBox(env'#0_0_0, Tclass.M0.Env())
         && $IsAllocBox(env'#0_0_0, Tclass.M0.Env(), $Heap);
  var ##id#0_0_0: Box;
  var ##expr#0_0_0: DatatypeType;
  var ##env#0_0_0: Box;
  var ##stmts#0_0_0: Seq;
  var stmts##0_0_0_0: Seq;
  var st##0_0_0_0: Box;
  var env##0_0_0_0: Box;
  var useCache##0_0_0_0: bool;
  var defass#st''#0_0_0_0: bool;
  var st''#0_0_0_0: Box
     where defass#st''#0_0_0_0
       ==> $IsBox(st''#0_0_0_0, Tclass.M0.State())
         && $IsAllocBox(st''#0_0_0_0, Tclass.M0.State(), $Heap);
  var ##stmts#0_0_0_0: Seq;
  var ##st#0_0_0_0: Box;
  var ##env#0_0_0_0: Box;
  var ##useCache#0_0_0_0: bool;
  var st0##0_0_0_0: Box;
  var st1##0_0_0_0: Box;
  var st2##0_0_0_0: Box;
  var _v12#1_0: DatatypeType
     where $Is(_v12#1_0, Tclass.M0.Expression())
       && $IsAlloc(_v12#1_0, Tclass.M0.Expression(), $Heap);
  var defass#_v13#1_0: bool;
  var _v13#1_0: Box
     where defass#_v13#1_0
       ==> $IsBox(_v13#1_0, Tclass.M0.State())
         && $IsAllocBox(_v13#1_0, Tclass.M0.State(), $Heap);
  var $rhs##1_0: DatatypeType;
  var $rhs##1_1: Box;
  var expr##1_0: DatatypeType;
  var st##1_0: Box;
  var env##1_0: Box;
  var useCache##1_0: bool;

    // AddMethodImpl: DoLemma, Impl$$M0.__default.DoLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#stmts0#0: Seq, $ih#useCache0#0: bool :: 
      { M0.__default.do($LS($LZ), $ih#stmts0#0, st#0, env#0, $ih#useCache0#0) } 
      $Is($ih#stmts0#0, TSeq(Tclass.M0.Statement()))
           && 
          M0.__default.Legal($ih#stmts0#0)
           && M0.__default.ValidState(st#0)
           && M0.__default.ValidEnv(env#0)
           && ($ih#useCache0#0 ==> M0.__default.ConsistentCache(st#0))
           && (Seq#Rank($ih#stmts0#0) < Seq#Rank(stmts#0)
             || (Seq#Rank($ih#stmts0#0) == Seq#Rank(stmts#0) && !$ih#useCache0#0 && useCache#0))
         ==> (var result#1 := M0.__default.do($LS($LZ), $ih#stmts0#0, st#0, env#0, $ih#useCache0#0); 
          (var expr'#1, st'#1 := $Unbox(M0.Tuple.fst(result#1)): DatatypeType, M0.Tuple.snd(result#1); 
            M0.__default.ValidState(st'#1)
               && M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#1)
               && ($ih#useCache0#0 ==> M0.__default.ConsistentCache(st#0))
               && (M0.Expression.exprError_q(expr'#1)
                 ==> !M0.Reason#Equal(M0.Expression.r(expr'#1), #M0.Reason.rCompatibility())))));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(585,14)
    assume true;
    assert {:id "id847"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(stmts#0);
    assume true;
    stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType;
    defass#stmt#0 := true;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(586,5)
    assert {:id "id849"} defass#stmt#0;
    assume true;
    if (M0.Statement.stmtVariable_q(stmt#0))
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(587,34)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id850"} defass#stmt#0;
        assert {:id "id851"} M0.Statement.stmtVariable_q(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##0_0 := M0.Statement.expr(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##0_0 := st#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##0_0 := env#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        useCache##0_0 := useCache#0;
        call {:id "id852"} $rhs##0_0, $rhs##0_1 := Call$$M0.__default.EvalLemma(expr##0_0, st##0_0, env##0_0, useCache##0_0);
        // TrCallStmt: After ProcessCallStmt
        expr'#0_0 := $rhs##0_0;
        st'#0_0 := $rhs##0_1;
        defass#st'#0_0 := true;
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(588,7)
        ##expr#0_0 := expr'#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0_0, Tclass.M0.Expression(), $Heap);
        assume M0.__default.Value#canCall(expr'#0_0);
        assume M0.__default.Value#canCall(expr'#0_0);
        if (M0.__default.Value(expr'#0_0))
        {
            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(589,18)
            assume true;
            assert {:id "id855"} defass#stmt#0;
            assert {:id "id856"} M0.Statement.stmtVariable_q(stmt#0);
            ##id#0_0_0 := M0.Statement.id(stmt#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##id#0_0_0, Tclass.M0.Identifier(), $Heap);
            ##expr#0_0_0 := expr'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#0_0_0, Tclass.M0.Expression(), $Heap);
            ##env#0_0_0 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#0_0_0, Tclass.M0.Env(), $Heap);
            assert {:id "id857"} {:subsumption 0} M0.__default.ValidEnv(##env#0_0_0);
            assert {:id "id858"} {:subsumption 0} M0.__default.Value#canCall(##expr#0_0_0)
               ==> M0.__default.Value(##expr#0_0_0) || M0.Expression.exprLiteral_q(##expr#0_0_0);
            assume M0.__default.ValidEnv(##env#0_0_0) && M0.__default.Value(##expr#0_0_0);
            assume M0.__default.SetEnv#canCall(M0.Statement.id(stmt#0), expr'#0_0, env#0);
            assume M0.__default.SetEnv#canCall(M0.Statement.id(stmt#0), expr'#0_0, env#0);
            env'#0_0_0 := M0.__default.SetEnv(M0.Statement.id(stmt#0), expr'#0_0, env#0);
            defass#env'#0_0_0 := true;
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(590,9)
            assert {:id "id860"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
            ##stmts#0_0_0 := Seq#Drop(stmts#0, LitInt(1));
            // assume allocatedness for argument to function
            assume $IsAlloc(##stmts#0_0_0, TSeq(Tclass.M0.Statement()), $Heap);
            assume M0.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
            assume M0.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
            if (M0.__default.Legal(Seq#Drop(stmts#0, LitInt(1))))
            {
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(591,18)
                // TrCallStmt: Before ProcessCallStmt
                assert {:id "id861"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                stmts##0_0_0_0 := Seq#Drop(stmts#0, LitInt(1));
                assert {:id "id862"} defass#st'#0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##0_0_0_0 := st'#0_0;
                assert {:id "id863"} defass#env'#0_0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                env##0_0_0_0 := env'#0_0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##0_0_0_0 := useCache#0;
                assert {:id "id864"} Seq#Rank(stmts##0_0_0_0) < Seq#Rank(stmts#0)
                   || (Seq#Rank(stmts##0_0_0_0) == Seq#Rank(stmts#0)
                     && 
                    !useCache##0_0_0_0
                     && useCache#0);
                call {:id "id865"} Call$$M0.__default.DoLemma(stmts##0_0_0_0, st##0_0_0_0, env##0_0_0_0, useCache##0_0_0_0);
                // TrCallStmt: After ProcessCallStmt
                // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(592,20)
                assume true;
                assert {:id "id866"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
                ##stmts#0_0_0_0 := Seq#Drop(stmts#0, LitInt(1));
                // assume allocatedness for argument to function
                assume $IsAlloc(##stmts#0_0_0_0, TSeq(Tclass.M0.Statement()), $Heap);
                assert {:id "id867"} defass#st'#0_0;
                ##st#0_0_0_0 := st'#0_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_0_0_0, Tclass.M0.State(), $Heap);
                assert {:id "id868"} defass#env'#0_0_0;
                ##env#0_0_0_0 := env'#0_0_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##env#0_0_0_0, Tclass.M0.Env(), $Heap);
                ##useCache#0_0_0_0 := useCache#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##useCache#0_0_0_0, TBool, $Heap);
                assert {:id "id869"} {:subsumption 0} M0.__default.Legal#canCall(##stmts#0_0_0_0)
                   ==> M0.__default.Legal(##stmts#0_0_0_0) || Seq#Length(##stmts#0_0_0_0) != 0;
                assert {:id "id870"} {:subsumption 0} M0.__default.ValidEnv(##env#0_0_0_0);
                assume M0.__default.Legal(##stmts#0_0_0_0) && M0.__default.ValidEnv(##env#0_0_0_0);
                assume M0.__default.do#canCall(Seq#Drop(stmts#0, LitInt(1)), st'#0_0, env'#0_0_0, useCache#0);
                assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), Seq#Drop(stmts#0, LitInt(1)), st'#0_0, env'#0_0_0, useCache#0));
                assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), Seq#Drop(stmts#0, LitInt(1)), st'#0_0, env'#0_0_0, useCache#0));
                assume M0.__default.do#canCall(Seq#Drop(stmts#0, LitInt(1)), st'#0_0, env'#0_0_0, useCache#0)
                   && M0.Tuple.Pair_q(M0.__default.do($LS($LZ), Seq#Drop(stmts#0, LitInt(1)), st'#0_0, env'#0_0_0, useCache#0));
                st''#0_0_0_0 := M0.Tuple.snd(M0.__default.do($LS($LZ), Seq#Drop(stmts#0, LitInt(1)), st'#0_0, env'#0_0_0, useCache#0));
                defass#st''#0_0_0_0 := true;
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(593,34)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                st0##0_0_0_0 := st#0;
                assert {:id "id872"} defass#st'#0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st1##0_0_0_0 := st'#0_0;
                assert {:id "id873"} defass#st''#0_0_0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st2##0_0_0_0 := st''#0_0_0_0;
                call {:id "id874"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##0_0_0_0, st1##0_0_0_0, st2##0_0_0_0);
                // TrCallStmt: After ProcessCallStmt
            }
            else
            {
            }
        }
        else
        {
            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(597,9)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(597,16)
            // TrCallStmt: Before ProcessCallStmt
            call {:id "id875"} Call$$M0.__default.reveal__Extends();
            // TrCallStmt: After ProcessCallStmt
        }
    }
    else
    {
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(600,7)
        assert {:id "id876"} defass#stmt#0;
        if (!M0.Statement.stmtVariable_q(stmt#0))
        {
            assert {:id "id877"} defass#stmt#0;
        }

        assume true;
        assert {:id "id878"} M0.Statement.stmtVariable_q(stmt#0) || M0.Statement.stmtReturn_q(stmt#0);
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(601,28)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id879"} defass#stmt#0;
        assert {:id "id880"} M0.Statement.stmtReturn_q(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##1_0 := M0.Statement.ret(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##1_0 := st#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_0 := env#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        useCache##1_0 := useCache#0;
        call {:id "id881"} $rhs##1_0, $rhs##1_1 := Call$$M0.__default.EvalLemma(expr##1_0, st##1_0, env##1_0, useCache##1_0);
        // TrCallStmt: After ProcessCallStmt
        _v12#1_0 := $rhs##1_0;
        _v13#1_0 := $rhs##1_1;
        defass#_v13#1_0 := true;
    }
}



procedure {:verboseName "M0.LittleEvalLemma (well-formedness)"} CheckWellFormed$$M0.__default.LittleEvalLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool, 
    outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(outExpr#0), 
    outSt#0: Box
       where $IsBox(outSt#0, Tclass.M0.State())
         && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.LittleEvalLemma (well-formedness)"} CheckWellFormed$$M0.__default.LittleEvalLemma(expr#0: DatatypeType, 
    st#0: Box, 
    env#0: Box, 
    useCache#0: bool, 
    outExpr#0: DatatypeType, 
    outSt#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##env#0: Box;
  var ##stC#0: Box;
  var ##expr#0: DatatypeType;
  var ##st#1: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##st#2: Box;
  var ##st#3: Box;
  var ##st'#0: Box;
  var ##stC#1: Box;


    // AddMethodImpl: LittleEvalLemma, CheckWellFormed$$M0.__default.LittleEvalLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id884"} M0.__default.ValidState(st#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id885"} M0.__default.ValidEnv(env#0);
    if (*)
    {
        assume {:id "id886"} useCache#0;
        ##stC#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(st#0);
        assume {:id "id887"} M0.__default.ConsistentCache(st#0);
    }
    else
    {
        assume {:id "id888"} useCache#0 ==> M0.__default.ConsistentCache(st#0);
    }

    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
    ##st#1 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id889"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.__default.ValidEnv(##env#1);
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0));
    assume {:id "id890"} M0.Tuple#Equal(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
      #M0.Tuple.Pair($Box(outExpr#0), outSt#0));
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##st#2 := outSt#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(outSt#0);
    assume {:id "id891"} M0.__default.ValidState(outSt#0);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    ##st'#0 := outSt#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
    assume M0.__default.Extends#canCall(st#0, outSt#0);
    assume {:id "id892"} M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0);
    if (useCache#0)
    {
        ##stC#1 := outSt#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(outSt#0);
    }

    assume {:id "id893"} useCache#0 ==> M0.__default.ConsistentCache(outSt#0);
    if (M0.Expression.exprError_q(outExpr#0))
    {
        assert {:id "id894"} M0.Expression.exprError_q(outExpr#0);
    }

    assume {:id "id895"} M0.Expression.exprError_q(outExpr#0)
       ==> !M0.Reason#Equal(M0.Expression.r(outExpr#0), #M0.Reason.rCompatibility());
}



procedure {:verboseName "M0.LittleEvalLemma (call)"} Call$$M0.__default.LittleEvalLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool, 
    outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(outExpr#0), 
    outSt#0: Box
       where $IsBox(outSt#0, Tclass.M0.State())
         && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id896"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id897"} M0.__default.ValidEnv(env#0);
  requires {:id "id898"} useCache#0
     ==> 
    M0.__default.ConsistentCache#canCall(st#0)
     ==> M0.__default.ConsistentCache(st#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id899"} M0.Tuple#Equal(M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
    #M0.Tuple.Pair($Box(outExpr#0), outSt#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.ValidState#canCall(outSt#0)
     && (M0.__default.ValidState(outSt#0)
       ==> M0.__default.Extends#canCall(st#0, outSt#0)
         && (M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0)
           ==> (useCache#0 ==> M0.__default.ConsistentCache#canCall(outSt#0))
             && (
              (useCache#0
               ==> M0.__default.ConsistentCache(outSt#0))
               ==> 
              M0.Expression.exprError_q(outExpr#0)
               ==> $IsA#M0.Reason(M0.Expression.r(outExpr#0)))));
  free ensures {:id "id900"} M0.__default.ValidState#canCall(outSt#0)
     && 
    M0.__default.ValidState(outSt#0)
     && (forall p#1: Box :: 
      { M0.__default.WellFounded(p#1) } 
        { Set#IsMember(M0.__default.DomSt(outSt#0), p#1) } 
      $IsBox(p#1, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(outSt#0), p#1)
         ==> M0.__default.WellFounded(p#1));
  ensures {:id "id901"} M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0);
  free ensures {:id "id902"} useCache#0
     ==> M0.__default.ConsistentCache#canCall(outSt#0)
       && 
      M0.__default.ConsistentCache(outSt#0)
       && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
        { M0.__default.Loc(cmd#1, deps#1, e#1) } 
        $Is(cmd#1, TSeq(TChar))
             && $Is(deps#1, TSet(Tclass.M0.Path()))
             && $Is(e#1, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(outSt#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
           ==> Set#IsMember(M0.__default.DomSt(outSt#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  ensures {:id "id903"} M0.Expression.exprError_q(outExpr#0)
     ==> !M0.Reason#Equal(M0.Expression.r(outExpr#0), #M0.Reason.rCompatibility());
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.LittleEvalLemma (correctness)"} Impl$$M0.__default.LittleEvalLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool, 
    outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(outExpr#0), 
    outSt#0: Box
       where $IsBox(outSt#0, Tclass.M0.State())
         && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id904"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  requires {:id "id905"} M0.__default.ValidEnv(env#0);
  free requires {:id "id906"} useCache#0
     ==> M0.__default.ConsistentCache#canCall(st#0)
       && 
      M0.__default.ConsistentCache(st#0)
       && (forall cmd#2: Seq, deps#2: Set, e#2: Seq :: 
        { M0.__default.Loc(cmd#2, deps#2, e#2) } 
        $Is(cmd#2, TSeq(TChar))
             && $Is(deps#2, TSet(Tclass.M0.Path()))
             && $Is(e#2, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#2, deps#2, e#2)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#2, deps#2, e#2)));
  requires {:id "id907"} M0.Tuple#Equal(M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
    #M0.Tuple.Pair($Box(outExpr#0), outSt#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.ValidState#canCall(outSt#0)
     && (M0.__default.ValidState(outSt#0)
       ==> M0.__default.Extends#canCall(st#0, outSt#0)
         && (M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0)
           ==> (useCache#0 ==> M0.__default.ConsistentCache#canCall(outSt#0))
             && (
              (useCache#0
               ==> M0.__default.ConsistentCache(outSt#0))
               ==> 
              M0.Expression.exprError_q(outExpr#0)
               ==> $IsA#M0.Reason(M0.Expression.r(outExpr#0)))));
  ensures {:id "id908"} M0.__default.ValidState#canCall(outSt#0)
     ==> M0.__default.ValidState(outSt#0)
       || (forall p#3: Box :: 
        { M0.__default.WellFounded(p#3) } 
          { Set#IsMember(M0.__default.DomSt(outSt#0), p#3) } 
        $IsBox(p#3, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(outSt#0), p#3)
           ==> M0.__default.WellFounded(p#3));
  ensures {:id "id909"} M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0);
  ensures {:id "id910"} useCache#0
     ==> 
    M0.__default.ConsistentCache#canCall(outSt#0)
     ==> M0.__default.ConsistentCache(outSt#0)
       || (forall cmd#3: Seq, deps#3: Set, e#3: Seq :: 
        { M0.__default.Loc(cmd#3, deps#3, e#3) } 
        $Is(cmd#3, TSeq(TChar))
             && $Is(deps#3, TSet(Tclass.M0.Path()))
             && $Is(e#3, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(outSt#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#3, deps#3, e#3)))
           ==> Set#IsMember(M0.__default.DomSt(outSt#0), M0.__default.Loc(cmd#3, deps#3, e#3)));
  ensures {:id "id911"} M0.Expression.exprError_q(outExpr#0)
     ==> !M0.Reason#Equal(M0.Expression.r(outExpr#0), #M0.Reason.rCompatibility());
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.LittleEvalLemma (correctness)"} Impl$$M0.__default.LittleEvalLemma(expr#0: DatatypeType, 
    st#0: Box, 
    env#0: Box, 
    useCache#0: bool, 
    outExpr#0: DatatypeType, 
    outSt#0: Box)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var _v14#0: DatatypeType
     where $Is(_v14#0, Tclass.M0.Expression())
       && $IsAlloc(_v14#0, Tclass.M0.Expression(), $Heap);
  var defass#_v15#0: bool;
  var _v15#0: Box
     where defass#_v15#0
       ==> $IsBox(_v15#0, Tclass.M0.State())
         && $IsAllocBox(_v15#0, Tclass.M0.State(), $Heap);
  var $rhs##0: DatatypeType;
  var $rhs##1: Box;
  var expr##0: DatatypeType;
  var st##0: Box;
  var env##0: Box;
  var useCache##0: bool;

    // AddMethodImpl: LittleEvalLemma, Impl$$M0.__default.LittleEvalLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M0.Expression(expr#0);
    assume $IsA#M0.Expression(outExpr#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#expr0#0: DatatypeType, $ih#useCache0#0: bool :: 
      { M0.__default.eval($LS($LZ), reveal_M0._default.eval, $ih#expr0#0, st#0, env#0, $ih#useCache0#0) } 
      $Is($ih#expr0#0, Tclass.M0.Expression())
           && 
          M0.__default.ValidState(st#0)
           && M0.__default.ValidEnv(env#0)
           && ($ih#useCache0#0 ==> M0.__default.ConsistentCache(st#0))
           && M0.Tuple#Equal(M0.__default.eval($LS($LZ), reveal_M0._default.eval, $ih#expr0#0, st#0, env#0, $ih#useCache0#0), 
            #M0.Tuple.Pair($Box(outExpr#0), outSt#0))
           && (DtRank($ih#expr0#0) < DtRank(expr#0)
             || (DtRank($ih#expr0#0) == DtRank(expr#0)
               && ((!$ih#useCache0#0 && useCache#0)
                 || (($ih#useCache0#0 <==> useCache#0) && DtRank(outExpr#0) < DtRank(outExpr#0)))))
         ==> M0.__default.ValidState(outSt#0)
           && M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0)
           && ($ih#useCache0#0 ==> M0.__default.ConsistentCache(outSt#0))
           && (M0.Expression.exprError_q(outExpr#0)
             ==> !M0.Reason#Equal(M0.Expression.r(outExpr#0), #M0.Reason.rCompatibility())));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(615,26)
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type Expression
    // TrCallStmt: Adding lhs with type State
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##0 := expr#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##0 := env#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##0 := useCache#0;
    call {:id "id912"} $rhs##0, $rhs##1 := Call$$M0.__default.EvalLemma(expr##0, st##0, env##0, useCache##0);
    // TrCallStmt: After ProcessCallStmt
    _v14#0 := $rhs##0;
    _v15#0 := $rhs##1;
    defass#_v15#0 := true;
}



procedure {:verboseName "M0.EvalLemma (well-formedness)"} {:rlimit 30000000} CheckWellFormed$$M0.__default.EvalLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool)
   returns (outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap), 
    outSt#0: Box
       where $IsBox(outSt#0, Tclass.M0.State())
         && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.EvalLemma (well-formedness)"} {:rlimit 30000000} CheckWellFormed$$M0.__default.EvalLemma(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool)
   returns (outExpr#0: DatatypeType, outSt#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##env#0: Box;
  var ##stC#0: Box;
  var ##expr#0: DatatypeType;
  var ##st#1: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##st#2: Box;
  var ##st#3: Box;
  var ##st'#0: Box;
  var ##stC#1: Box;


    // AddMethodImpl: EvalLemma, CheckWellFormed$$M0.__default.EvalLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id915"} M0.__default.ValidState(st#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id916"} M0.__default.ValidEnv(env#0);
    if (*)
    {
        assume {:id "id917"} useCache#0;
        ##stC#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(st#0);
        assume {:id "id918"} M0.__default.ConsistentCache(st#0);
    }
    else
    {
        assume {:id "id919"} useCache#0 ==> M0.__default.ConsistentCache(st#0);
    }

    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc outExpr#0, outSt#0;
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
    ##st#1 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id920"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.__default.ValidEnv(##env#1);
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0));
    assume {:id "id921"} M0.Tuple#Equal(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
      #M0.Tuple.Pair($Box(outExpr#0), outSt#0));
    ##st#2 := outSt#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(outSt#0);
    assume {:id "id922"} M0.__default.ValidState(outSt#0);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    ##st'#0 := outSt#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
    assume M0.__default.Extends#canCall(st#0, outSt#0);
    assume {:id "id923"} M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0);
    if (useCache#0)
    {
        ##stC#1 := outSt#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(outSt#0);
    }

    assume {:id "id924"} useCache#0 ==> M0.__default.ConsistentCache(outSt#0);
    if (M0.Expression.exprError_q(outExpr#0))
    {
        assert {:id "id925"} M0.Expression.exprError_q(outExpr#0);
    }

    assume {:id "id926"} M0.Expression.exprError_q(outExpr#0)
       ==> !M0.Reason#Equal(M0.Expression.r(outExpr#0), #M0.Reason.rCompatibility());
}



procedure {:verboseName "M0.EvalLemma (call)"} {:rlimit 30000000} Call$$M0.__default.EvalLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool)
   returns (outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap), 
    outSt#0: Box
       where $IsBox(outSt#0, Tclass.M0.State())
         && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id927"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id928"} M0.__default.ValidEnv(env#0);
  requires {:id "id929"} useCache#0
     ==> 
    M0.__default.ConsistentCache#canCall(st#0)
     ==> M0.__default.ConsistentCache(st#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0))
     && M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0)
     && (M0.Tuple#Equal(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
        #M0.Tuple.Pair($Box(outExpr#0), outSt#0))
       ==> M0.__default.ValidState#canCall(outSt#0)
         && (M0.__default.ValidState(outSt#0)
           ==> M0.__default.Extends#canCall(st#0, outSt#0)
             && (M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0)
               ==> (useCache#0 ==> M0.__default.ConsistentCache#canCall(outSt#0))
                 && (
                  (useCache#0
                   ==> M0.__default.ConsistentCache(outSt#0))
                   ==> 
                  M0.Expression.exprError_q(outExpr#0)
                   ==> $IsA#M0.Reason(M0.Expression.r(outExpr#0))))));
  ensures {:id "id930"} M0.Tuple#Equal(M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
    #M0.Tuple.Pair($Box(outExpr#0), outSt#0));
  free ensures {:id "id931"} M0.__default.ValidState#canCall(outSt#0)
     && 
    M0.__default.ValidState(outSt#0)
     && (forall p#1: Box :: 
      { M0.__default.WellFounded(p#1) } 
        { Set#IsMember(M0.__default.DomSt(outSt#0), p#1) } 
      $IsBox(p#1, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(outSt#0), p#1)
         ==> M0.__default.WellFounded(p#1));
  ensures {:id "id932"} M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0);
  free ensures {:id "id933"} useCache#0
     ==> M0.__default.ConsistentCache#canCall(outSt#0)
       && 
      M0.__default.ConsistentCache(outSt#0)
       && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
        { M0.__default.Loc(cmd#1, deps#1, e#1) } 
        $Is(cmd#1, TSeq(TChar))
             && $Is(deps#1, TSet(Tclass.M0.Path()))
             && $Is(e#1, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(outSt#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
           ==> Set#IsMember(M0.__default.DomSt(outSt#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  ensures {:id "id934"} M0.Expression.exprError_q(outExpr#0)
     ==> !M0.Reason#Equal(M0.Expression.r(outExpr#0), #M0.Reason.rCompatibility());
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.EvalLemma (correctness)"} {:rlimit 30000000} Impl$$M0.__default.EvalLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool)
   returns (outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap), 
    defass#outSt#0: bool, 
    outSt#0: Box
       where defass#outSt#0
         ==> $IsBox(outSt#0, Tclass.M0.State())
           && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap), 
    $_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id935"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  requires {:id "id936"} M0.__default.ValidEnv(env#0);
  free requires {:id "id937"} useCache#0
     ==> M0.__default.ConsistentCache#canCall(st#0)
       && 
      M0.__default.ConsistentCache(st#0)
       && (forall cmd#2: Seq, deps#2: Set, e#2: Seq :: 
        { M0.__default.Loc(cmd#2, deps#2, e#2) } 
        $Is(cmd#2, TSeq(TChar))
             && $Is(deps#2, TSet(Tclass.M0.Path()))
             && $Is(e#2, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(st#0), M0.__default.Hash(M0.__default.Loc(cmd#2, deps#2, e#2)))
           ==> Set#IsMember(M0.__default.DomSt(st#0), M0.__default.Loc(cmd#2, deps#2, e#2)));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0))
     && M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0)
     && (M0.Tuple#Equal(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
        #M0.Tuple.Pair($Box(outExpr#0), outSt#0))
       ==> M0.__default.ValidState#canCall(outSt#0)
         && (M0.__default.ValidState(outSt#0)
           ==> M0.__default.Extends#canCall(st#0, outSt#0)
             && (M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0)
               ==> (useCache#0 ==> M0.__default.ConsistentCache#canCall(outSt#0))
                 && (
                  (useCache#0
                   ==> M0.__default.ConsistentCache(outSt#0))
                   ==> 
                  M0.Expression.exprError_q(outExpr#0)
                   ==> $IsA#M0.Reason(M0.Expression.r(outExpr#0))))));
  ensures {:id "id938"} M0.Tuple#Equal(M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0), 
    #M0.Tuple.Pair($Box(outExpr#0), outSt#0));
  ensures {:id "id939"} M0.__default.ValidState#canCall(outSt#0)
     ==> M0.__default.ValidState(outSt#0)
       || (forall p#3: Box :: 
        { M0.__default.WellFounded(p#3) } 
          { Set#IsMember(M0.__default.DomSt(outSt#0), p#3) } 
        $IsBox(p#3, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(outSt#0), p#3)
           ==> M0.__default.WellFounded(p#3));
  ensures {:id "id940"} M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0);
  ensures {:id "id941"} useCache#0
     ==> 
    M0.__default.ConsistentCache#canCall(outSt#0)
     ==> M0.__default.ConsistentCache(outSt#0)
       || (forall cmd#3: Seq, deps#3: Set, e#3: Seq :: 
        { M0.__default.Loc(cmd#3, deps#3, e#3) } 
        $Is(cmd#3, TSeq(TChar))
             && $Is(deps#3, TSet(Tclass.M0.Path()))
             && $Is(e#3, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(outSt#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#3, deps#3, e#3)))
           ==> Set#IsMember(M0.__default.DomSt(outSt#0), M0.__default.Loc(cmd#3, deps#3, e#3)));
  ensures {:id "id942"} M0.Expression.exprError_q(outExpr#0)
     ==> !M0.Reason#Equal(M0.Expression.r(outExpr#0), #M0.Reason.rCompatibility());
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.EvalLemma (correctness)"} {:rlimit 30000000} Impl$$M0.__default.EvalLemma(expr#0: DatatypeType, st#0: Box, env#0: Box, useCache#0: bool)
   returns (outExpr#0: DatatypeType, 
    defass#outSt#0: bool, 
    outSt#0: Box, 
    $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var defass#result#0: bool;
  var result#0: DatatypeType
     where defass#result#0
       ==> $Is(result#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(result#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var ##expr#1: DatatypeType;
  var ##st#4: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;
  var $rhs#0: DatatypeType;
  var $rhs#1: Box;
  var ##expr#2: DatatypeType;
  var cond'#1_1_0_0: DatatypeType
     where $Is(cond'#1_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(cond'#1_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st'#1_1_0_0: bool;
  var st'#1_1_0_0: Box
     where defass#st'#1_1_0_0
       ==> $IsBox(st'#1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st'#1_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_0_0: DatatypeType;
  var $rhs##1_1_0_1: Box;
  var expr##1_1_0_0: DatatypeType;
  var st##1_1_0_0: Box;
  var env##1_1_0_0: Box;
  var useCache##1_1_0_0: bool;
  var _v16#1_1_0_0_0: DatatypeType
     where $Is(_v16#1_1_0_0_0, Tclass.M0.Expression())
       && $IsAlloc(_v16#1_1_0_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st''#1_1_0_0_0: bool;
  var st''#1_1_0_0_0: Box
     where defass#st''#1_1_0_0_0
       ==> $IsBox(st''#1_1_0_0_0, Tclass.M0.State())
         && $IsAllocBox(st''#1_1_0_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_0_0_0: DatatypeType;
  var $rhs##1_1_0_0_1: Box;
  var expr##1_1_0_0_0: DatatypeType;
  var st##1_1_0_0_0: Box;
  var env##1_1_0_0_0: Box;
  var useCache##1_1_0_0_0: bool;
  var st0##1_1_0_0_0: Box;
  var st1##1_1_0_0_0: Box;
  var st2##1_1_0_0_0: Box;
  var _v17#1_1_0_1_0_0: DatatypeType
     where $Is(_v17#1_1_0_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(_v17#1_1_0_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st''#1_1_0_1_0_0: bool;
  var st''#1_1_0_1_0_0: Box
     where defass#st''#1_1_0_1_0_0
       ==> $IsBox(st''#1_1_0_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st''#1_1_0_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_0_1_0_0: DatatypeType;
  var $rhs##1_1_0_1_0_1: Box;
  var expr##1_1_0_1_0_0: DatatypeType;
  var st##1_1_0_1_0_0: Box;
  var env##1_1_0_1_0_0: Box;
  var useCache##1_1_0_1_0_0: bool;
  var st0##1_1_0_1_0_0: Box;
  var st1##1_1_0_1_0_0: Box;
  var st2##1_1_0_1_0_0: Box;
  var conj0'#1_1_1_0_0: DatatypeType
     where $Is(conj0'#1_1_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(conj0'#1_1_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st'#1_1_1_0_0: bool;
  var st'#1_1_1_0_0: Box
     where defass#st'#1_1_1_0_0
       ==> $IsBox(st'#1_1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st'#1_1_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_0_0: DatatypeType;
  var $rhs##1_1_1_0_1: Box;
  var expr##1_1_1_0_0: DatatypeType;
  var st##1_1_1_0_0: Box;
  var env##1_1_1_0_0: Box;
  var useCache##1_1_1_0_0: bool;
  var _v18#1_1_1_0_0_0: DatatypeType
     where $Is(_v18#1_1_1_0_0_0, Tclass.M0.Expression())
       && $IsAlloc(_v18#1_1_1_0_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st''#1_1_1_0_0_0: bool;
  var st''#1_1_1_0_0_0: Box
     where defass#st''#1_1_1_0_0_0
       ==> $IsBox(st''#1_1_1_0_0_0, Tclass.M0.State())
         && $IsAllocBox(st''#1_1_1_0_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_0_0_0: DatatypeType;
  var $rhs##1_1_1_0_0_1: Box;
  var expr##1_1_1_0_0_0: DatatypeType;
  var st##1_1_1_0_0_0: Box;
  var env##1_1_1_0_0_0: Box;
  var useCache##1_1_1_0_0_0: bool;
  var st0##1_1_1_0_0_0: Box;
  var st1##1_1_1_0_0_0: Box;
  var st2##1_1_1_0_0_0: Box;
  var disj0'#1_1_1_1_0_0: DatatypeType
     where $Is(disj0'#1_1_1_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(disj0'#1_1_1_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st'#1_1_1_1_0_0: bool;
  var st'#1_1_1_1_0_0: Box
     where defass#st'#1_1_1_1_0_0
       ==> $IsBox(st'#1_1_1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st'#1_1_1_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_1_0_0: DatatypeType;
  var $rhs##1_1_1_1_0_1: Box;
  var expr##1_1_1_1_0_0: DatatypeType;
  var st##1_1_1_1_0_0: Box;
  var env##1_1_1_1_0_0: Box;
  var useCache##1_1_1_1_0_0: bool;
  var _v19#1_1_1_1_0_1_0_0: DatatypeType
     where $Is(_v19#1_1_1_1_0_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(_v19#1_1_1_1_0_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st''#1_1_1_1_0_1_0_0: bool;
  var st''#1_1_1_1_0_1_0_0: Box
     where defass#st''#1_1_1_1_0_1_0_0
       ==> $IsBox(st''#1_1_1_1_0_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st''#1_1_1_1_0_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_1_0_1_0_0: DatatypeType;
  var $rhs##1_1_1_1_0_1_0_1: Box;
  var expr##1_1_1_1_0_1_0_0: DatatypeType;
  var st##1_1_1_1_0_1_0_0: Box;
  var env##1_1_1_1_0_1_0_0: Box;
  var useCache##1_1_1_1_0_1_0_0: bool;
  var st0##1_1_1_1_0_1_0_0: Box;
  var st1##1_1_1_1_0_1_0_0: Box;
  var st2##1_1_1_1_0_1_0_0: Box;
  var fun'#1_1_1_1_1_0_0: DatatypeType
     where $Is(fun'#1_1_1_1_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(fun'#1_1_1_1_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st'#1_1_1_1_1_0_0: bool;
  var st'#1_1_1_1_1_0_0: Box
     where defass#st'#1_1_1_1_1_0_0
       ==> $IsBox(st'#1_1_1_1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st'#1_1_1_1_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_1_1_0_0: DatatypeType;
  var $rhs##1_1_1_1_1_0_1: Box;
  var expr##1_1_1_1_1_0_0: DatatypeType;
  var st##1_1_1_1_1_0_0: Box;
  var env##1_1_1_1_1_0_0: Box;
  var useCache##1_1_1_1_1_0_0: bool;
  var args'#1_1_1_1_1_0_0: Seq
     where $Is(args'#1_1_1_1_1_0_0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(args'#1_1_1_1_1_0_0, TSeq(Tclass.M0.Expression()), $Heap);
  var sts'#1_1_1_1_1_0_0: Set
     where $Is(sts'#1_1_1_1_1_0_0, TSet(Tclass.M0.State()))
       && $IsAlloc(sts'#1_1_1_1_1_0_0, TSet(Tclass.M0.State()), $Heap);
  var $rhs##1_1_1_1_1_0_2: Seq;
  var $rhs##1_1_1_1_1_0_3: Set;
  var context##1_1_1_1_1_0_0: DatatypeType;
  var args##1_1_1_1_1_0_0: Seq;
  var stOrig##1_1_1_1_1_0_0: Box;
  var env##1_1_1_1_1_0_1: Box;
  var useCache##1_1_1_1_1_0_1: bool;
  var sts''#1_1_1_1_1_0_0: Set
     where $Is(sts''#1_1_1_1_1_0_0, TSet(Tclass.M0.State()))
       && $IsAlloc(sts''#1_1_1_1_1_0_0, TSet(Tclass.M0.State()), $Heap);
  var stOrig##1_1_1_1_1_0_1: Box;
  var sts##1_1_1_1_1_0_0: Set;
  var ##sts#1_1_1_1_1_0_0: Set;
  var defass#stCombined#1_1_1_1_1_0_0_0: bool;
  var stCombined#1_1_1_1_1_0_0_0: Box
     where defass#stCombined#1_1_1_1_1_0_0_0
       ==> $IsBox(stCombined#1_1_1_1_1_0_0_0, Tclass.M0.State())
         && $IsAllocBox(stCombined#1_1_1_1_1_0_0_0, Tclass.M0.State(), $Heap);
  var ##sts#1_1_1_1_1_0_0_0: Set;
  var ##useCache#1_1_1_1_1_0_0_0: bool;
  var sts##1_1_1_1_1_0_0_0: Set;
  var parent##1_1_1_1_1_0_0_0: Box;
  var useCache##1_1_1_1_1_0_0_0: bool;
  var ##prim#1_1_1_1_1_0_0_0_0_0: DatatypeType;
  var ##prim#1_1_1_1_1_0_0_0_0_1: DatatypeType;
  var ##args#1_1_1_1_1_0_0_0_0_0: Seq;
  var ##st#1_1_1_1_1_0_0_0_0_0: Box;
  var cmd#1_1_1_1_1_0_0_0_0_0_0: Seq
     where $Is(cmd#1_1_1_1_1_0_0_0_0_0_0, TSeq(TChar))
       && $IsAlloc(cmd#1_1_1_1_1_0_0_0_0_0_0, TSeq(TChar), $Heap);
  var deps#1_1_1_1_1_0_0_0_0_0_0: Set
     where $Is(deps#1_1_1_1_1_0_0_0_0_0_0, TSet(Tclass.M0.Path()))
       && $IsAlloc(deps#1_1_1_1_1_0_0_0_0_0_0, TSet(Tclass.M0.Path()), $Heap);
  var exps#1_1_1_1_1_0_0_0_0_0_0: Set
     where $Is(exps#1_1_1_1_1_0_0_0_0_0_0, TSet(TSeq(TChar)))
       && $IsAlloc(exps#1_1_1_1_1_0_0_0_0_0_0, TSet(TSeq(TChar)), $Heap);
  var $rhs#1_1_1_1_1_0_0_0_0_0_0: Seq;
  var $rhs#1_1_1_1_1_0_0_0_0_0_1: Set;
  var $rhs#1_1_1_1_1_0_0_0_0_0_2: Set;
  var cmd##1_1_1_1_1_0_0_0_0_0_0_0: Seq;
  var deps##1_1_1_1_1_0_0_0_0_0_0_0: Set;
  var exps##1_1_1_1_1_0_0_0_0_0_0_0: Set;
  var st##1_1_1_1_1_0_0_0_0_0_0_0: Box;
  var defass#ps#1_1_1_1_1_0_0_0_0_0_0_0: bool;
  var ps#1_1_1_1_1_0_0_0_0_0_0_0: DatatypeType
     where defass#ps#1_1_1_1_1_0_0_0_0_0_0_0
       ==> $Is(ps#1_1_1_1_1_0_0_0_0_0_0_0, 
          Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()))
         && $IsAlloc(ps#1_1_1_1_1_0_0_0_0_0_0_0, 
          Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()), 
          $Heap);
  var ##cmd#1_1_1_1_1_0_0_0_0_0_0_0: Seq;
  var ##deps#1_1_1_1_1_0_0_0_0_0_0_0: Set;
  var ##exps#1_1_1_1_1_0_0_0_0_0_0_0: Set;
  var ##st#1_1_1_1_1_0_0_0_0_0_0_0: Box;
  var st0##1_1_1_1_1_0_0_0_0_0_0_0: Box;
  var st1##1_1_1_1_1_0_0_0_0_0_0_0: Box;
  var st2##1_1_1_1_1_0_0_0_0_0_0_0: Box;
  var ##stC#1_1_1_1_1_0_0_0_0_0_1_0: Box;
  var defass#ps#1_1_1_1_1_0_0_0_0_0_1_0_0: bool;
  var ps#1_1_1_1_1_0_0_0_0_0_1_0_0: DatatypeType
     where defass#ps#1_1_1_1_1_0_0_0_0_0_1_0_0
       ==> $Is(ps#1_1_1_1_1_0_0_0_0_0_1_0_0, 
          Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()))
         && $IsAlloc(ps#1_1_1_1_1_0_0_0_0_0_1_0_0, 
          Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()), 
          $Heap);
  var ##cmd#1_1_1_1_1_0_0_0_0_0_1_0_0: Seq;
  var ##deps#1_1_1_1_1_0_0_0_0_0_1_0_0: Set;
  var ##exps#1_1_1_1_1_0_0_0_0_0_1_0_0: Set;
  var ##stC#1_1_1_1_1_0_0_0_0_0_1_0_0: Box;
  var e#1_1_1_1_1_0_0_0_0_0_1_0_0: Seq;
  var ##p#1_1_1_1_1_0_0_0_0_0_1_0_0: Box;
  var ##cmd#1_1_1_1_1_0_0_0_0_0_1_0_1: Seq;
  var ##deps#1_1_1_1_1_0_0_0_0_0_1_0_1: Set;
  var ##exp#1_1_1_1_1_0_0_0_0_0_1_0_0: Seq;
  var ##st#1_1_1_1_1_0_0_0_0_0_1_0_0: Box;
  var cmd##1_1_1_1_1_0_0_0_0_0_1_0_1_0: Seq;
  var deps##1_1_1_1_1_0_0_0_0_0_1_0_1_0: Set;
  var exps##1_1_1_1_1_0_0_0_0_0_1_0_1_0: Set;
  var st##1_1_1_1_1_0_0_0_0_0_1_0_1_0: Box;
  var defass#result#1_1_1_1_1_0_0_0_0_0_1_0_1_0: bool;
  var result#1_1_1_1_1_0_0_0_0_0_1_0_1_0: DatatypeType
     where defass#result#1_1_1_1_1_0_0_0_0_0_1_0_1_0
       ==> $Is(result#1_1_1_1_1_0_0_0_0_0_1_0_1_0, 
          Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()))
         && $IsAlloc(result#1_1_1_1_1_0_0_0_0_0_1_0_1_0, 
          Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()), 
          $Heap);
  var ##cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Seq;
  var ##deps#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Set;
  var ##exps#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Set;
  var ##st#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Box;
  var expr'#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Set
     where $Is(expr'#1_1_1_1_1_0_0_0_0_0_1_0_1_0, TSet(Tclass.M0.Path()))
       && $IsAlloc(expr'#1_1_1_1_1_0_0_0_0_0_1_0_1_0, TSet(Tclass.M0.Path()), $Heap);
  var defass#st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0: bool;
  var st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Box
     where defass#st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0
       ==> $IsBox(st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0, Tclass.M0.State())
         && $IsAllocBox(st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0, Tclass.M0.State(), $Heap);
  var $rhs#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Set;
  var $rhs#1_1_1_1_1_0_0_0_0_0_1_0_1_1: Box;
  var st0##1_1_1_1_1_0_0_0_0_0_1_0_1_0: Box;
  var st1##1_1_1_1_1_0_0_0_0_0_1_0_1_0: Box;
  var st2##1_1_1_1_1_0_0_0_0_0_1_0_1_0: Box;
  var defass#stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0: bool;
  var stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Box
     where defass#stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0
       ==> $IsBox(stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0, Tclass.M0.State())
         && $IsAllocBox(stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0, Tclass.M0.State(), $Heap);
  var ##cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_1: Seq;
  var ##deps#1_1_1_1_1_0_0_0_0_0_1_0_1_1: Set;
  var ##exps#1_1_1_1_1_0_0_0_0_0_1_0_1_1: Set;
  var ##st#1_1_1_1_1_0_0_0_0_0_1_0_1_1: Box;
  var ##stC#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Box;

    // AddMethodImpl: EvalLemma, Impl$$M0.__default.EvalLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(629,16)
    assume true;
    ##expr#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
    ##st#4 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
    ##useCache#1 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id943"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
    assume M0.__default.ValidEnv(##env#2);
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0));
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, useCache#0);
    result#0 := M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, useCache#0);
    defass#result#0 := true;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(630,20)
    assume true;
    assume true;
    assert {:id "id945"} defass#result#0;
    assume M0.Tuple.Pair_q(result#0);
    assume M0.Tuple.Pair_q(result#0);
    $rhs#0 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType;
    assert {:id "id947"} defass#result#0;
    assume M0.Tuple.Pair_q(result#0);
    assume M0.Tuple.Pair_q(result#0);
    $rhs#1 := M0.Tuple.snd(result#0);
    outExpr#0 := $rhs#0;
    outSt#0 := $rhs#1;
    defass#outSt#0 := true;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(631,5)
    ##expr#2 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#2, Tclass.M0.Expression(), $Heap);
    assume M0.__default.Value#canCall(expr#0);
    assume M0.__default.Value#canCall(expr#0);
    if (M0.__default.Value(expr#0))
    {
        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(632,7)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(632,14)
        // TrCallStmt: Before ProcessCallStmt
        call {:id "id951"} Call$$M0.__default.reveal__eval();
        // TrCallStmt: After ProcessCallStmt
        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(632,23)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(632,30)
        // TrCallStmt: Before ProcessCallStmt
        call {:id "id952"} Call$$M0.__default.reveal__Extends();
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(633,12)
        assume true;
        if (M0.Expression.exprIdentifier_q(expr#0))
        {
            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(634,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(634,14)
            // TrCallStmt: Before ProcessCallStmt
            call {:id "id953"} Call$$M0.__default.reveal__eval();
            // TrCallStmt: After ProcessCallStmt
            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(634,23)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(634,30)
            // TrCallStmt: Before ProcessCallStmt
            call {:id "id954"} Call$$M0.__default.reveal__Extends();
            // TrCallStmt: After ProcessCallStmt
        }
        else
        {
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(635,12)
            assume true;
            if (M0.Expression.exprIf_q(expr#0))
            {
                // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(636,7)
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(636,14)
                // TrCallStmt: Before ProcessCallStmt
                call {:id "id955"} Call$$M0.__default.reveal__eval();
                // TrCallStmt: After ProcessCallStmt
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(637,34)
                assume true;
                assume true;
                // TrCallStmt: Adding lhs with type Expression
                // TrCallStmt: Adding lhs with type State
                // TrCallStmt: Before ProcessCallStmt
                assert {:id "id956"} M0.Expression.exprIf_q(expr#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                expr##1_1_0_0 := M0.Expression.cond(expr#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_0_0 := st#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                env##1_1_0_0 := env#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##1_1_0_0 := useCache#0;
                assert {:id "id957"} DtRank(expr##1_1_0_0) < DtRank(expr#0);
                call {:id "id958"} $rhs##1_1_0_0, $rhs##1_1_0_1 := Call$$M0.__default.EvalLemma(expr##1_1_0_0, st##1_1_0_0, env##1_1_0_0, useCache##1_1_0_0);
                // TrCallStmt: After ProcessCallStmt
                cond'#1_1_0_0 := $rhs##1_1_0_0;
                st'#1_1_0_0 := $rhs##1_1_0_1;
                defass#st'#1_1_0_0 := true;
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(638,7)
                if (M0.Expression.exprLiteral_q(cond'#1_1_0_0))
                {
                    assert {:id "id961"} M0.Expression.exprLiteral_q(cond'#1_1_0_0);
                }

                assume M0.Expression.exprLiteral_q(cond'#1_1_0_0)
                   ==> $IsA#M0.Literal(M0.Expression.lit(cond'#1_1_0_0));
                if (M0.Expression.exprLiteral_q(cond'#1_1_0_0)
                   && M0.Literal#Equal(M0.Expression.lit(cond'#1_1_0_0), #M0.Literal.litTrue()))
                {
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(639,33)
                    assume true;
                    assume true;
                    // TrCallStmt: Adding lhs with type Expression
                    // TrCallStmt: Adding lhs with type State
                    // TrCallStmt: Before ProcessCallStmt
                    assert {:id "id962"} M0.Expression.exprIf_q(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    expr##1_1_0_0_0 := M0.Expression.ifTrue(expr#0);
                    assert {:id "id963"} defass#st'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_1_0_0_0 := st'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    env##1_1_0_0_0 := env#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_1_0_0_0 := useCache#0;
                    assert {:id "id964"} DtRank(expr##1_1_0_0_0) < DtRank(expr#0);
                    call {:id "id965"} $rhs##1_1_0_0_0, $rhs##1_1_0_0_1 := Call$$M0.__default.EvalLemma(expr##1_1_0_0_0, st##1_1_0_0_0, env##1_1_0_0_0, useCache##1_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    _v16#1_1_0_0_0 := $rhs##1_1_0_0_0;
                    st''#1_1_0_0_0 := $rhs##1_1_0_0_1;
                    defass#st''#1_1_0_0_0 := true;
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(640,32)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_1_0_0_0 := st#0;
                    assert {:id "id968"} defass#st'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_1_0_0_0 := st'#1_1_0_0;
                    assert {:id "id969"} defass#st''#1_1_0_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st2##1_1_0_0_0 := st''#1_1_0_0_0;
                    call {:id "id970"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_0_0_0, st1##1_1_0_0_0, st2##1_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                }
                else
                {
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(641,14)
                    if (M0.Expression.exprLiteral_q(cond'#1_1_0_0))
                    {
                        assert {:id "id971"} M0.Expression.exprLiteral_q(cond'#1_1_0_0);
                    }

                    assume M0.Expression.exprLiteral_q(cond'#1_1_0_0)
                       ==> $IsA#M0.Literal(M0.Expression.lit(cond'#1_1_0_0));
                    if (M0.Expression.exprLiteral_q(cond'#1_1_0_0)
                       && M0.Literal#Equal(M0.Expression.lit(cond'#1_1_0_0), #M0.Literal.litFalse()))
                    {
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(642,33)
                        assume true;
                        assume true;
                        // TrCallStmt: Adding lhs with type Expression
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Before ProcessCallStmt
                        assert {:id "id972"} M0.Expression.exprIf_q(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        expr##1_1_0_1_0_0 := M0.Expression.ifFalse(expr#0);
                        assert {:id "id973"} defass#st'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st##1_1_0_1_0_0 := st'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        env##1_1_0_1_0_0 := env#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        useCache##1_1_0_1_0_0 := useCache#0;
                        assert {:id "id974"} DtRank(expr##1_1_0_1_0_0) < DtRank(expr#0);
                        call {:id "id975"} $rhs##1_1_0_1_0_0, $rhs##1_1_0_1_0_1 := Call$$M0.__default.EvalLemma(expr##1_1_0_1_0_0, st##1_1_0_1_0_0, env##1_1_0_1_0_0, useCache##1_1_0_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        _v17#1_1_0_1_0_0 := $rhs##1_1_0_1_0_0;
                        st''#1_1_0_1_0_0 := $rhs##1_1_0_1_0_1;
                        defass#st''#1_1_0_1_0_0 := true;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(643,32)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##1_1_0_1_0_0 := st#0;
                        assert {:id "id978"} defass#st'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##1_1_0_1_0_0 := st'#1_1_0_0;
                        assert {:id "id979"} defass#st''#1_1_0_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st2##1_1_0_1_0_0 := st''#1_1_0_1_0_0;
                        call {:id "id980"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_0_1_0_0, st1##1_1_0_1_0_0, st2##1_1_0_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                    }
                    else
                    {
                        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(645,9)
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(645,16)
                        // TrCallStmt: Before ProcessCallStmt
                        call {:id "id981"} Call$$M0.__default.reveal__Extends();
                        // TrCallStmt: After ProcessCallStmt
                    }
                }
            }
            else
            {
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(647,12)
                assume true;
                if (M0.Expression.exprAnd_q(expr#0))
                {
                    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(648,7)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(648,14)
                    // TrCallStmt: Before ProcessCallStmt
                    call {:id "id982"} Call$$M0.__default.reveal__eval();
                    // TrCallStmt: After ProcessCallStmt
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(649,35)
                    assume true;
                    assume true;
                    // TrCallStmt: Adding lhs with type Expression
                    // TrCallStmt: Adding lhs with type State
                    // TrCallStmt: Before ProcessCallStmt
                    assert {:id "id983"} M0.Expression.exprAnd_q(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    expr##1_1_1_0_0 := M0.Expression.conj0(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_1_1_0_0 := st#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    env##1_1_1_0_0 := env#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_1_1_0_0 := useCache#0;
                    assert {:id "id984"} DtRank(expr##1_1_1_0_0) < DtRank(expr#0);
                    call {:id "id985"} $rhs##1_1_1_0_0, $rhs##1_1_1_0_1 := Call$$M0.__default.EvalLemma(expr##1_1_1_0_0, st##1_1_1_0_0, env##1_1_1_0_0, useCache##1_1_1_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    conj0'#1_1_1_0_0 := $rhs##1_1_1_0_0;
                    st'#1_1_1_0_0 := $rhs##1_1_1_0_1;
                    defass#st'#1_1_1_0_0 := true;
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(650,7)
                    if (M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0))
                    {
                        assert {:id "id988"} M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0);
                    }

                    assume M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                       ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#1_1_1_0_0));
                    if (M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                       && M0.Literal#Equal(M0.Expression.lit(conj0'#1_1_1_0_0), #M0.Literal.litTrue()))
                    {
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(651,33)
                        assume true;
                        assume true;
                        // TrCallStmt: Adding lhs with type Expression
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Before ProcessCallStmt
                        assert {:id "id989"} M0.Expression.exprAnd_q(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        expr##1_1_1_0_0_0 := M0.Expression.conj1(expr#0);
                        assert {:id "id990"} defass#st'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st##1_1_1_0_0_0 := st'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        env##1_1_1_0_0_0 := env#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        useCache##1_1_1_0_0_0 := useCache#0;
                        assert {:id "id991"} DtRank(expr##1_1_1_0_0_0) < DtRank(expr#0);
                        call {:id "id992"} $rhs##1_1_1_0_0_0, $rhs##1_1_1_0_0_1 := Call$$M0.__default.EvalLemma(expr##1_1_1_0_0_0, st##1_1_1_0_0_0, env##1_1_1_0_0_0, useCache##1_1_1_0_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        _v18#1_1_1_0_0_0 := $rhs##1_1_1_0_0_0;
                        st''#1_1_1_0_0_0 := $rhs##1_1_1_0_0_1;
                        defass#st''#1_1_1_0_0_0 := true;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(652,32)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##1_1_1_0_0_0 := st#0;
                        assert {:id "id995"} defass#st'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##1_1_1_0_0_0 := st'#1_1_1_0_0;
                        assert {:id "id996"} defass#st''#1_1_1_0_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st2##1_1_1_0_0_0 := st''#1_1_1_0_0_0;
                        call {:id "id997"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_1_0_0_0, st1##1_1_1_0_0_0, st2##1_1_1_0_0_0);
                        // TrCallStmt: After ProcessCallStmt
                    }
                    else
                    {
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(653,14)
                        if (M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0))
                        {
                            assert {:id "id998"} M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0);
                        }

                        assume M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                           ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#1_1_1_0_0));
                        if (M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                           && M0.Literal#Equal(M0.Expression.lit(conj0'#1_1_1_0_0), #M0.Literal.litFalse()))
                        {
                        }
                        else
                        {
                            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(655,9)
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(655,16)
                            // TrCallStmt: Before ProcessCallStmt
                            call {:id "id999"} Call$$M0.__default.reveal__Extends();
                            // TrCallStmt: After ProcessCallStmt
                        }
                    }
                }
                else
                {
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(657,12)
                    assume true;
                    if (M0.Expression.exprOr_q(expr#0))
                    {
                        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(658,7)
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(658,14)
                        // TrCallStmt: Before ProcessCallStmt
                        call {:id "id1000"} Call$$M0.__default.reveal__eval();
                        // TrCallStmt: After ProcessCallStmt
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(659,35)
                        assume true;
                        assume true;
                        // TrCallStmt: Adding lhs with type Expression
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Before ProcessCallStmt
                        assert {:id "id1001"} M0.Expression.exprOr_q(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        expr##1_1_1_1_0_0 := M0.Expression.disj0(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st##1_1_1_1_0_0 := st#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        env##1_1_1_1_0_0 := env#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        useCache##1_1_1_1_0_0 := useCache#0;
                        assert {:id "id1002"} DtRank(expr##1_1_1_1_0_0) < DtRank(expr#0);
                        call {:id "id1003"} $rhs##1_1_1_1_0_0, $rhs##1_1_1_1_0_1 := Call$$M0.__default.EvalLemma(expr##1_1_1_1_0_0, st##1_1_1_1_0_0, env##1_1_1_1_0_0, useCache##1_1_1_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        disj0'#1_1_1_1_0_0 := $rhs##1_1_1_1_0_0;
                        st'#1_1_1_1_0_0 := $rhs##1_1_1_1_0_1;
                        defass#st'#1_1_1_1_0_0 := true;
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(660,7)
                        if (M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0))
                        {
                            assert {:id "id1006"} M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0);
                        }

                        assume M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                           ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#1_1_1_1_0_0));
                        if (M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                           && M0.Literal#Equal(M0.Expression.lit(disj0'#1_1_1_1_0_0), #M0.Literal.litTrue()))
                        {
                        }
                        else
                        {
                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(661,14)
                            if (M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0))
                            {
                                assert {:id "id1007"} M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0);
                            }

                            assume M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                               ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#1_1_1_1_0_0));
                            if (M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                               && M0.Literal#Equal(M0.Expression.lit(disj0'#1_1_1_1_0_0), #M0.Literal.litFalse()))
                            {
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(662,33)
                                assume true;
                                assume true;
                                // TrCallStmt: Adding lhs with type Expression
                                // TrCallStmt: Adding lhs with type State
                                // TrCallStmt: Before ProcessCallStmt
                                assert {:id "id1008"} M0.Expression.exprOr_q(expr#0);
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                expr##1_1_1_1_0_1_0_0 := M0.Expression.disj1(expr#0);
                                assert {:id "id1009"} defass#st'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st##1_1_1_1_0_1_0_0 := st'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                env##1_1_1_1_0_1_0_0 := env#0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                useCache##1_1_1_1_0_1_0_0 := useCache#0;
                                assert {:id "id1010"} DtRank(expr##1_1_1_1_0_1_0_0) < DtRank(expr#0);
                                call {:id "id1011"} $rhs##1_1_1_1_0_1_0_0, $rhs##1_1_1_1_0_1_0_1 := Call$$M0.__default.EvalLemma(expr##1_1_1_1_0_1_0_0, st##1_1_1_1_0_1_0_0, env##1_1_1_1_0_1_0_0, useCache##1_1_1_1_0_1_0_0);
                                // TrCallStmt: After ProcessCallStmt
                                _v19#1_1_1_1_0_1_0_0 := $rhs##1_1_1_1_0_1_0_0;
                                st''#1_1_1_1_0_1_0_0 := $rhs##1_1_1_1_0_1_0_1;
                                defass#st''#1_1_1_1_0_1_0_0 := true;
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(663,32)
                                // TrCallStmt: Before ProcessCallStmt
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st0##1_1_1_1_0_1_0_0 := st#0;
                                assert {:id "id1014"} defass#st'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st1##1_1_1_1_0_1_0_0 := st'#1_1_1_1_0_0;
                                assert {:id "id1015"} defass#st''#1_1_1_1_0_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st2##1_1_1_1_0_1_0_0 := st''#1_1_1_1_0_1_0_0;
                                call {:id "id1016"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_1_1_0_1_0_0, st1##1_1_1_1_0_1_0_0, st2##1_1_1_1_0_1_0_0);
                                // TrCallStmt: After ProcessCallStmt
                            }
                            else
                            {
                                // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(665,9)
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(665,16)
                                // TrCallStmt: Before ProcessCallStmt
                                call {:id "id1017"} Call$$M0.__default.reveal__Extends();
                                // TrCallStmt: After ProcessCallStmt
                            }
                        }
                    }
                    else
                    {
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(667,12)
                        assume true;
                        if (M0.Expression.exprInvocation_q(expr#0))
                        {
                            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(668,7)
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(668,14)
                            // TrCallStmt: Before ProcessCallStmt
                            call {:id "id1018"} Call$$M0.__default.reveal__eval();
                            // TrCallStmt: After ProcessCallStmt
                            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(669,7)
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(669,14)
                            // TrCallStmt: Before ProcessCallStmt
                            call {:id "id1019"} Call$$M0.__default.reveal__Extends();
                            // TrCallStmt: After ProcessCallStmt
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(670,33)
                            assume true;
                            assume true;
                            // TrCallStmt: Adding lhs with type Expression
                            // TrCallStmt: Adding lhs with type State
                            // TrCallStmt: Before ProcessCallStmt
                            assert {:id "id1020"} M0.Expression.exprInvocation_q(expr#0);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            expr##1_1_1_1_1_0_0 := M0.Expression.fun(expr#0);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            st##1_1_1_1_1_0_0 := st#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            env##1_1_1_1_1_0_0 := env#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            useCache##1_1_1_1_1_0_0 := useCache#0;
                            assert {:id "id1021"} DtRank(expr##1_1_1_1_1_0_0) < DtRank(expr#0);
                            call {:id "id1022"} $rhs##1_1_1_1_1_0_0, $rhs##1_1_1_1_1_0_1 := Call$$M0.__default.EvalLemma(expr##1_1_1_1_1_0_0, st##1_1_1_1_1_0_0, env##1_1_1_1_1_0_0, useCache##1_1_1_1_1_0_0);
                            // TrCallStmt: After ProcessCallStmt
                            fun'#1_1_1_1_1_0_0 := $rhs##1_1_1_1_1_0_0;
                            st'#1_1_1_1_1_0_0 := $rhs##1_1_1_1_1_0_1;
                            defass#st'#1_1_1_1_1_0_0 := true;
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(671,39)
                            assume true;
                            assume true;
                            // TrCallStmt: Adding lhs with type seq<Expression>
                            // TrCallStmt: Adding lhs with type set<State>
                            // TrCallStmt: Before ProcessCallStmt
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            context##1_1_1_1_1_0_0 := expr#0;
                            assert {:id "id1025"} M0.Expression.exprInvocation_q(expr#0);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            args##1_1_1_1_1_0_0 := M0.Expression.args(expr#0);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            stOrig##1_1_1_1_1_0_0 := st#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            env##1_1_1_1_1_0_1 := env#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            useCache##1_1_1_1_1_0_1 := useCache#0;
                            assert {:id "id1026"} DtRank(context##1_1_1_1_1_0_0) <= DtRank(expr#0);
                            call {:id "id1027"} $rhs##1_1_1_1_1_0_2, $rhs##1_1_1_1_1_0_3 := Call$$M0.__default.EvalArgsLemma(context##1_1_1_1_1_0_0, args##1_1_1_1_1_0_0, stOrig##1_1_1_1_1_0_0, env##1_1_1_1_1_0_1, useCache##1_1_1_1_1_0_1);
                            // TrCallStmt: After ProcessCallStmt
                            args'#1_1_1_1_1_0_0 := $rhs##1_1_1_1_1_0_2;
                            sts'#1_1_1_1_1_0_0 := $rhs##1_1_1_1_1_0_3;
                            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(672,17)
                            assume true;
                            assert {:id "id1030"} defass#st'#1_1_1_1_1_0_0;
                            assume true;
                            sts''#1_1_1_1_1_0_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st'#1_1_1_1_1_0_0), sts'#1_1_1_1_1_0_0);
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(673,25)
                            // TrCallStmt: Before ProcessCallStmt
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            stOrig##1_1_1_1_1_0_1 := st#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            sts##1_1_1_1_1_0_0 := sts''#1_1_1_1_1_0_0;
                            call {:id "id1032"} Call$$M0.__default.CompatibleProperty(stOrig##1_1_1_1_1_0_1, sts##1_1_1_1_1_0_0);
                            // TrCallStmt: After ProcessCallStmt
                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(674,7)
                            ##sts#1_1_1_1_1_0_0 := sts''#1_1_1_1_1_0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##sts#1_1_1_1_1_0_0, TSet(Tclass.M0.State()), $Heap);
                            assume M0.__default.Compatible#canCall(sts''#1_1_1_1_1_0_0);
                            assume M0.__default.Compatible#canCall(sts''#1_1_1_1_1_0_0);
                            if (M0.__default.Compatible(sts''#1_1_1_1_1_0_0))
                            {
                                // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(675,24)
                                assume true;
                                ##sts#1_1_1_1_1_0_0_0 := sts''#1_1_1_1_1_0_0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##sts#1_1_1_1_1_0_0_0, TSet(Tclass.M0.State()), $Heap);
                                ##useCache#1_1_1_1_1_0_0_0 := useCache#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##useCache#1_1_1_1_1_0_0_0, TBool, $Heap);
                                assert {:id "id1033"} {:subsumption 0} !Set#Equal(##sts#1_1_1_1_1_0_0_0, Set#Empty(): Set);
                                assume !Set#Equal(##sts#1_1_1_1_1_0_0_0, Set#Empty(): Set);
                                assume M0.__default.Combine#canCall(sts''#1_1_1_1_1_0_0, useCache#0);
                                assume M0.__default.Combine#canCall(sts''#1_1_1_1_1_0_0, useCache#0);
                                stCombined#1_1_1_1_1_0_0_0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#1_1_1_1_1_0_0, useCache#0);
                                defass#stCombined#1_1_1_1_1_0_0_0 := true;
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(676,22)
                                // TrCallStmt: Before ProcessCallStmt
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                sts##1_1_1_1_1_0_0_0 := sts''#1_1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                parent##1_1_1_1_1_0_0_0 := st#0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                useCache##1_1_1_1_1_0_0_0 := useCache#0;
                                call {:id "id1035"} Call$$M0.__default.Lemma__Combine(sts##1_1_1_1_1_0_0_0, parent##1_1_1_1_1_0_0_0, useCache##1_1_1_1_1_0_0_0);
                                // TrCallStmt: After ProcessCallStmt
                                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(677,9)
                                if (M0.Expression.exprLiteral_q(fun'#1_1_1_1_1_0_0))
                                {
                                    assert {:id "id1036"} M0.Expression.exprLiteral_q(fun'#1_1_1_1_1_0_0);
                                }

                                assume true;
                                if (M0.Expression.exprLiteral_q(fun'#1_1_1_1_1_0_0)
                                   && M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#1_1_1_1_1_0_0)))
                                {
                                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(678,11)
                                    assert {:id "id1037"} M0.Expression.exprLiteral_q(fun'#1_1_1_1_1_0_0);
                                    assert {:id "id1038"} M0.Literal.litPrimitive_q(M0.Expression.lit(fun'#1_1_1_1_1_0_0));
                                    assume true;
                                    if (M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun'#1_1_1_1_1_0_0))))
                                    {
                                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(679,13)
                                        ##prim#1_1_1_1_1_0_0_0_0_0 := Lit(#M0.Primitive.primExec());
                                        // assume allocatedness for argument to function
                                        assume $IsAlloc(##prim#1_1_1_1_1_0_0_0_0_0, Tclass.M0.Primitive(), $Heap);
                                        assume M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()));
                                        if (Seq#Length(args'#1_1_1_1_1_0_0)
                                           == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec()))))
                                        {
                                            ##prim#1_1_1_1_1_0_0_0_0_1 := Lit(#M0.Primitive.primExec());
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##prim#1_1_1_1_1_0_0_0_0_1, Tclass.M0.Primitive(), $Heap);
                                            ##args#1_1_1_1_1_0_0_0_0_0 := args'#1_1_1_1_1_0_0;
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##args#1_1_1_1_1_0_0_0_0_0, TSeq(Tclass.M0.Expression()), $Heap);
                                            assert {:id "id1039"} defass#stCombined#1_1_1_1_1_0_0_0;
                                            ##st#1_1_1_1_1_0_0_0_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                            // assume allocatedness for argument to function
                                            assume $IsAllocBox(##st#1_1_1_1_1_0_0_0_0_0, Tclass.M0.State(), $Heap);
                                            assert {:id "id1040"} {:subsumption 0} M0.Primitive.primExec_q(##prim#1_1_1_1_1_0_0_0_0_1)
                                               ==> Seq#Length(##args#1_1_1_1_1_0_0_0_0_0) == LitInt(3);
                                            assume M0.Primitive.primExec_q(##prim#1_1_1_1_1_0_0_0_0_1)
                                               ==> Seq#Length(##args#1_1_1_1_1_0_0_0_0_0) == LitInt(3);
                                            assert {:id "id1041"} {:subsumption 0} M0.Primitive.primCreatePath_q(##prim#1_1_1_1_1_0_0_0_0_1)
                                               ==> Seq#Length(##args#1_1_1_1_1_0_0_0_0_0) == LitInt(1);
                                            assume M0.Primitive.primCreatePath_q(##prim#1_1_1_1_1_0_0_0_0_1)
                                               ==> Seq#Length(##args#1_1_1_1_1_0_0_0_0_0) == LitInt(1);
                                            assume M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args'#1_1_1_1_1_0_0, stCombined#1_1_1_1_1_0_0_0);
                                        }

                                        assume M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()))
                                           && (Seq#Length(args'#1_1_1_1_1_0_0)
                                               == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                             ==> M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args'#1_1_1_1_1_0_0, stCombined#1_1_1_1_1_0_0_0));
                                        if (Seq#Length(args'#1_1_1_1_1_0_0)
                                             == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
                                           && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args'#1_1_1_1_1_0_0, stCombined#1_1_1_1_1_0_0_0))
                                        {
                                            // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(680,35)
                                            assume true;
                                            assume true;
                                            assume true;
                                            assert {:id "id1042"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args'#1_1_1_1_1_0_0);
                                            assert {:id "id1043"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(0))): DatatypeType);
                                            assert {:id "id1044"} M0.Literal.litString_q(M0.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(0))): DatatypeType));
                                            assume true;
                                            $rhs#1_1_1_1_1_0_0_0_0_0_0 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(0))): DatatypeType));
                                            assert {:id "id1046"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args'#1_1_1_1_1_0_0);
                                            assert {:id "id1047"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(1))): DatatypeType);
                                            assert {:id "id1048"} M0.Literal.litArrOfPaths_q(M0.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(1))): DatatypeType));
                                            assume true;
                                            $rhs#1_1_1_1_1_0_0_0_0_0_1 := M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(1))): DatatypeType));
                                            assert {:id "id1050"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args'#1_1_1_1_1_0_0);
                                            assert {:id "id1051"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(2))): DatatypeType);
                                            assert {:id "id1052"} M0.Literal.litArrOfStrings_q(M0.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(2))): DatatypeType));
                                            assume true;
                                            $rhs#1_1_1_1_1_0_0_0_0_0_2 := M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args'#1_1_1_1_1_0_0, LitInt(2))): DatatypeType));
                                            cmd#1_1_1_1_1_0_0_0_0_0_0 := $rhs#1_1_1_1_1_0_0_0_0_0_0;
                                            deps#1_1_1_1_1_0_0_0_0_0_0 := $rhs#1_1_1_1_1_0_0_0_0_0_1;
                                            exps#1_1_1_1_1_0_0_0_0_0_0 := $rhs#1_1_1_1_1_0_0_0_0_0_2;
                                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(681,15)
                                            assume true;
                                            if (!useCache#0)
                                            {
                                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(682,29)
                                                // TrCallStmt: Before ProcessCallStmt
                                                assume true;
                                                // ProcessCallStmt: CheckSubrange
                                                cmd##1_1_1_1_1_0_0_0_0_0_0_0 := cmd#1_1_1_1_1_0_0_0_0_0_0;
                                                assume true;
                                                // ProcessCallStmt: CheckSubrange
                                                deps##1_1_1_1_1_0_0_0_0_0_0_0 := deps#1_1_1_1_1_0_0_0_0_0_0;
                                                assume true;
                                                // ProcessCallStmt: CheckSubrange
                                                exps##1_1_1_1_1_0_0_0_0_0_0_0 := exps#1_1_1_1_1_0_0_0_0_0_0;
                                                assert {:id "id1057"} defass#stCombined#1_1_1_1_1_0_0_0;
                                                assume true;
                                                // ProcessCallStmt: CheckSubrange
                                                st##1_1_1_1_1_0_0_0_0_0_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                                call {:id "id1058"} Call$$M0.__default.ExecProperty(cmd##1_1_1_1_1_0_0_0_0_0_0_0, deps##1_1_1_1_1_0_0_0_0_0_0_0, exps##1_1_1_1_1_0_0_0_0_0_0_0, st##1_1_1_1_1_0_0_0_0_0_0_0);
                                                // TrCallStmt: After ProcessCallStmt
                                                // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(683,24)
                                                assume true;
                                                ##cmd#1_1_1_1_1_0_0_0_0_0_0_0 := cmd#1_1_1_1_1_0_0_0_0_0_0;
                                                // assume allocatedness for argument to function
                                                assume $IsAlloc(##cmd#1_1_1_1_1_0_0_0_0_0_0_0, TSeq(TChar), $Heap);
                                                ##deps#1_1_1_1_1_0_0_0_0_0_0_0 := deps#1_1_1_1_1_0_0_0_0_0_0;
                                                // assume allocatedness for argument to function
                                                assume $IsAlloc(##deps#1_1_1_1_1_0_0_0_0_0_0_0, TSet(Tclass.M0.Path()), $Heap);
                                                ##exps#1_1_1_1_1_0_0_0_0_0_0_0 := exps#1_1_1_1_1_0_0_0_0_0_0;
                                                // assume allocatedness for argument to function
                                                assume $IsAlloc(##exps#1_1_1_1_1_0_0_0_0_0_0_0, TSet(TSeq(TChar)), $Heap);
                                                assert {:id "id1059"} defass#stCombined#1_1_1_1_1_0_0_0;
                                                ##st#1_1_1_1_1_0_0_0_0_0_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                                // assume allocatedness for argument to function
                                                assume $IsAllocBox(##st#1_1_1_1_1_0_0_0_0_0_0_0, Tclass.M0.State(), $Heap);
                                                assume M0.__default.exec#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                  deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                  exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                  stCombined#1_1_1_1_1_0_0_0);
                                                assume M0.Tuple.Pair_q(M0.__default.exec(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                    deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                    exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                    stCombined#1_1_1_1_1_0_0_0));
                                                assume M0.__default.exec#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                  deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                  exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                  stCombined#1_1_1_1_1_0_0_0);
                                                ps#1_1_1_1_1_0_0_0_0_0_0_0 := M0.__default.exec(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                  deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                  exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                  stCombined#1_1_1_1_1_0_0_0);
                                                defass#ps#1_1_1_1_1_0_0_0_0_0_0_0 := true;
                                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(684,40)
                                                // TrCallStmt: Before ProcessCallStmt
                                                assume true;
                                                // ProcessCallStmt: CheckSubrange
                                                st0##1_1_1_1_1_0_0_0_0_0_0_0 := st#0;
                                                assert {:id "id1061"} defass#stCombined#1_1_1_1_1_0_0_0;
                                                assume true;
                                                // ProcessCallStmt: CheckSubrange
                                                st1##1_1_1_1_1_0_0_0_0_0_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                                assert {:id "id1062"} defass#ps#1_1_1_1_1_0_0_0_0_0_0_0;
                                                assume M0.Tuple.Pair_q(ps#1_1_1_1_1_0_0_0_0_0_0_0);
                                                assume M0.Tuple.Pair_q(ps#1_1_1_1_1_0_0_0_0_0_0_0);
                                                // ProcessCallStmt: CheckSubrange
                                                st2##1_1_1_1_1_0_0_0_0_0_0_0 := M0.Tuple.snd(ps#1_1_1_1_1_0_0_0_0_0_0_0);
                                                call {:id "id1063"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_1_1_1_0_0_0_0_0_0_0, st1##1_1_1_1_1_0_0_0_0_0_0_0, st2##1_1_1_1_1_0_0_0_0_0_0_0);
                                                // TrCallStmt: After ProcessCallStmt
                                            }
                                            else
                                            {
                                                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(685,22)
                                                assert {:id "id1064"} defass#stCombined#1_1_1_1_1_0_0_0;
                                                ##stC#1_1_1_1_1_0_0_0_0_0_1_0 := stCombined#1_1_1_1_1_0_0_0;
                                                // assume allocatedness for argument to function
                                                assume $IsAllocBox(##stC#1_1_1_1_1_0_0_0_0_0_1_0, Tclass.M0.State(), $Heap);
                                                assume M0.__default.ConsistentCache#canCall(stCombined#1_1_1_1_1_0_0_0);
                                                assume M0.__default.ConsistentCache#canCall(stCombined#1_1_1_1_1_0_0_0);
                                                if (M0.__default.ConsistentCache(stCombined#1_1_1_1_1_0_0_0))
                                                {
                                                    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(686,24)
                                                    assume true;
                                                    ##cmd#1_1_1_1_1_0_0_0_0_0_1_0_0 := cmd#1_1_1_1_1_0_0_0_0_0_0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##cmd#1_1_1_1_1_0_0_0_0_0_1_0_0, TSeq(TChar), $Heap);
                                                    ##deps#1_1_1_1_1_0_0_0_0_0_1_0_0 := deps#1_1_1_1_1_0_0_0_0_0_0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##deps#1_1_1_1_1_0_0_0_0_0_1_0_0, TSet(Tclass.M0.Path()), $Heap);
                                                    ##exps#1_1_1_1_1_0_0_0_0_0_1_0_0 := exps#1_1_1_1_1_0_0_0_0_0_0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##exps#1_1_1_1_1_0_0_0_0_0_1_0_0, TSet(TSeq(TChar)), $Heap);
                                                    assert {:id "id1065"} defass#stCombined#1_1_1_1_1_0_0_0;
                                                    ##stC#1_1_1_1_1_0_0_0_0_0_1_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAllocBox(##stC#1_1_1_1_1_0_0_0_0_0_1_0_0, Tclass.M0.State(), $Heap);
                                                    assume M0.__default.execC#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                      deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                      exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                      stCombined#1_1_1_1_1_0_0_0);
                                                    assume M0.Tuple.Pair_q(M0.__default.execC(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                        deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                        exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                        stCombined#1_1_1_1_1_0_0_0));
                                                    assume M0.__default.execC#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                      deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                      exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                      stCombined#1_1_1_1_1_0_0_0);
                                                    ps#1_1_1_1_1_0_0_0_0_0_1_0_0 := M0.__default.execC(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                      deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                      exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                      stCombined#1_1_1_1_1_0_0_0);
                                                    defass#ps#1_1_1_1_1_0_0_0_0_0_1_0_0 := true;
                                                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(687,17)
                                                    // Begin Comprehension WF check
                                                    havoc e#1_1_1_1_1_0_0_0_0_0_1_0_0;
                                                    if ($Is(e#1_1_1_1_1_0_0_0_0_0_1_0_0, TSeq(TChar))
                                                       && $IsAlloc(e#1_1_1_1_1_0_0_0_0_0_1_0_0, TSeq(TChar), $Heap))
                                                    {
                                                        if (Set#IsMember(exps#1_1_1_1_1_0_0_0_0_0_0, $Box(e#1_1_1_1_1_0_0_0_0_0_1_0_0)))
                                                        {
                                                            ##cmd#1_1_1_1_1_0_0_0_0_0_1_0_1 := cmd#1_1_1_1_1_0_0_0_0_0_0;
                                                            // assume allocatedness for argument to function
                                                            assume $IsAlloc(##cmd#1_1_1_1_1_0_0_0_0_0_1_0_1, TSeq(TChar), $Heap);
                                                            ##deps#1_1_1_1_1_0_0_0_0_0_1_0_1 := deps#1_1_1_1_1_0_0_0_0_0_0;
                                                            // assume allocatedness for argument to function
                                                            assume $IsAlloc(##deps#1_1_1_1_1_0_0_0_0_0_1_0_1, TSet(Tclass.M0.Path()), $Heap);
                                                            ##exp#1_1_1_1_1_0_0_0_0_0_1_0_0 := e#1_1_1_1_1_0_0_0_0_0_1_0_0;
                                                            // assume allocatedness for argument to function
                                                            assume $IsAlloc(##exp#1_1_1_1_1_0_0_0_0_0_1_0_0, TSeq(TChar), $Heap);
                                                            assume M0.__default.Loc#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                              deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                              e#1_1_1_1_1_0_0_0_0_0_1_0_0);
                                                            ##p#1_1_1_1_1_0_0_0_0_0_1_0_0 := M0.__default.Loc(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                              deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                              e#1_1_1_1_1_0_0_0_0_0_1_0_0);
                                                            // assume allocatedness for argument to function
                                                            assume $IsAllocBox(##p#1_1_1_1_1_0_0_0_0_0_1_0_0, Tclass.M0.Path(), $Heap);
                                                            assume M0.__default.Hash#canCall(M0.__default.Loc(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                                deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                                e#1_1_1_1_1_0_0_0_0_0_1_0_0));
                                                            assert {:id "id1067"} defass#stCombined#1_1_1_1_1_0_0_0;
                                                            ##st#1_1_1_1_1_0_0_0_0_0_1_0_0 := stCombined#1_1_1_1_1_0_0_0;
                                                            // assume allocatedness for argument to function
                                                            assume $IsAllocBox(##st#1_1_1_1_1_0_0_0_0_0_1_0_0, Tclass.M0.State(), $Heap);
                                                            assume M0.__default.DomC#canCall(stCombined#1_1_1_1_1_0_0_0);
                                                        }
                                                    }

                                                    // End Comprehension WF check
                                                    assume (forall e#1_1_1_1_1_0_0_0_0_0_1_0_1: Seq :: 
                                                      { M0.__default.Loc(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                          deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          e#1_1_1_1_1_0_0_0_0_0_1_0_1) } 
                                                        { Set#IsMember(exps#1_1_1_1_1_0_0_0_0_0_0, $Box(e#1_1_1_1_1_0_0_0_0_0_1_0_1)) } 
                                                      $Is(e#1_1_1_1_1_0_0_0_0_0_1_0_1, TSeq(TChar))
                                                         ==> 
                                                        Set#IsMember(exps#1_1_1_1_1_0_0_0_0_0_0, $Box(e#1_1_1_1_1_0_0_0_0_0_1_0_1))
                                                         ==> M0.__default.Loc#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                            deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                            e#1_1_1_1_1_0_0_0_0_0_1_0_1)
                                                           && M0.__default.Hash#canCall(M0.__default.Loc(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                              deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                              e#1_1_1_1_1_0_0_0_0_0_1_0_1))
                                                           && M0.__default.DomC#canCall(stCombined#1_1_1_1_1_0_0_0));
                                                    if ((forall e#1_1_1_1_1_0_0_0_0_0_1_0_1: Seq :: 
                                                      { M0.__default.Loc(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                          deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          e#1_1_1_1_1_0_0_0_0_0_1_0_1) } 
                                                        { Set#IsMember(exps#1_1_1_1_1_0_0_0_0_0_0, $Box(e#1_1_1_1_1_0_0_0_0_0_1_0_1)) } 
                                                      $Is(e#1_1_1_1_1_0_0_0_0_0_1_0_1, TSeq(TChar))
                                                           && Set#IsMember(exps#1_1_1_1_1_0_0_0_0_0_0, $Box(e#1_1_1_1_1_0_0_0_0_0_1_0_1))
                                                         ==> Set#IsMember(M0.__default.DomC(stCombined#1_1_1_1_1_0_0_0), 
                                                          M0.__default.Hash(M0.__default.Loc(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                              deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                              e#1_1_1_1_1_0_0_0_0_0_1_0_1)))))
                                                    {
                                                    }
                                                    else
                                                    {
                                                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(689,31)
                                                        // TrCallStmt: Before ProcessCallStmt
                                                        assume true;
                                                        // ProcessCallStmt: CheckSubrange
                                                        cmd##1_1_1_1_1_0_0_0_0_0_1_0_1_0 := cmd#1_1_1_1_1_0_0_0_0_0_0;
                                                        assume true;
                                                        // ProcessCallStmt: CheckSubrange
                                                        deps##1_1_1_1_1_0_0_0_0_0_1_0_1_0 := deps#1_1_1_1_1_0_0_0_0_0_0;
                                                        assume true;
                                                        // ProcessCallStmt: CheckSubrange
                                                        exps##1_1_1_1_1_0_0_0_0_0_1_0_1_0 := exps#1_1_1_1_1_0_0_0_0_0_0;
                                                        assert {:id "id1068"} defass#stCombined#1_1_1_1_1_0_0_0;
                                                        assume true;
                                                        // ProcessCallStmt: CheckSubrange
                                                        st##1_1_1_1_1_0_0_0_0_0_1_0_1_0 := stCombined#1_1_1_1_1_0_0_0;
                                                        call {:id "id1069"} Call$$M0.__default.ExecProperty(cmd##1_1_1_1_1_0_0_0_0_0_1_0_1_0, deps##1_1_1_1_1_0_0_0_0_0_1_0_1_0, exps##1_1_1_1_1_0_0_0_0_0_1_0_1_0, st##1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        // TrCallStmt: After ProcessCallStmt
                                                        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(690,30)
                                                        assume true;
                                                        ##cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := cmd#1_1_1_1_1_0_0_0_0_0_0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_0, TSeq(TChar), $Heap);
                                                        ##deps#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := deps#1_1_1_1_1_0_0_0_0_0_0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##deps#1_1_1_1_1_0_0_0_0_0_1_0_1_0, TSet(Tclass.M0.Path()), $Heap);
                                                        ##exps#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := exps#1_1_1_1_1_0_0_0_0_0_0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##exps#1_1_1_1_1_0_0_0_0_0_1_0_1_0, TSet(TSeq(TChar)), $Heap);
                                                        assert {:id "id1070"} defass#stCombined#1_1_1_1_1_0_0_0;
                                                        ##st#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := stCombined#1_1_1_1_1_0_0_0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAllocBox(##st#1_1_1_1_1_0_0_0_0_0_1_0_1_0, Tclass.M0.State(), $Heap);
                                                        assume M0.__default.exec#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                          deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          stCombined#1_1_1_1_1_0_0_0);
                                                        assume M0.Tuple.Pair_q(M0.__default.exec(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                            deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                            exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                            stCombined#1_1_1_1_1_0_0_0));
                                                        assume M0.__default.exec#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                          deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          stCombined#1_1_1_1_1_0_0_0);
                                                        result#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := M0.__default.exec(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                          deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          stCombined#1_1_1_1_1_0_0_0);
                                                        defass#result#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := true;
                                                        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(691,34)
                                                        assume true;
                                                        assume true;
                                                        assert {:id "id1072"} defass#result#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        assume M0.Tuple.Pair_q(result#1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        assume M0.Tuple.Pair_q(result#1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        $rhs#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := $Unbox(M0.Tuple.fst(result#1_1_1_1_1_0_0_0_0_0_1_0_1_0)): Set;
                                                        assert {:id "id1074"} defass#result#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        assume M0.Tuple.Pair_q(result#1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        assume M0.Tuple.Pair_q(result#1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        $rhs#1_1_1_1_1_0_0_0_0_0_1_0_1_1 := M0.Tuple.snd(result#1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        expr'#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := $rhs#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := $rhs#1_1_1_1_1_0_0_0_0_0_1_0_1_1;
                                                        defass#st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := true;
                                                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(692,42)
                                                        // TrCallStmt: Before ProcessCallStmt
                                                        assume true;
                                                        // ProcessCallStmt: CheckSubrange
                                                        st0##1_1_1_1_1_0_0_0_0_0_1_0_1_0 := st#0;
                                                        assert {:id "id1078"} defass#stCombined#1_1_1_1_1_0_0_0;
                                                        assume true;
                                                        // ProcessCallStmt: CheckSubrange
                                                        st1##1_1_1_1_1_0_0_0_0_0_1_0_1_0 := stCombined#1_1_1_1_1_0_0_0;
                                                        assert {:id "id1079"} defass#st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        assume true;
                                                        // ProcessCallStmt: CheckSubrange
                                                        st2##1_1_1_1_1_0_0_0_0_0_1_0_1_0 := st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        call {:id "id1080"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_1_1_1_0_0_0_0_0_1_0_1_0, st1##1_1_1_1_1_0_0_0_0_0_1_0_1_0, st2##1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        // TrCallStmt: After ProcessCallStmt
                                                        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(693,28)
                                                        assume true;
                                                        ##cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_1 := cmd#1_1_1_1_1_0_0_0_0_0_0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_1, TSeq(TChar), $Heap);
                                                        ##deps#1_1_1_1_1_0_0_0_0_0_1_0_1_1 := deps#1_1_1_1_1_0_0_0_0_0_0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##deps#1_1_1_1_1_0_0_0_0_0_1_0_1_1, TSet(Tclass.M0.Path()), $Heap);
                                                        ##exps#1_1_1_1_1_0_0_0_0_0_1_0_1_1 := exps#1_1_1_1_1_0_0_0_0_0_0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##exps#1_1_1_1_1_0_0_0_0_0_1_0_1_1, TSet(TSeq(TChar)), $Heap);
                                                        assert {:id "id1081"} defass#st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        ##st#1_1_1_1_1_0_0_0_0_0_1_0_1_1 := st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAllocBox(##st#1_1_1_1_1_0_0_0_0_0_1_0_1_1, Tclass.M0.State(), $Heap);
                                                        assume M0.__default.UpdateC#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                          deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        assume M0.__default.UpdateC#canCall(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                          deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := M0.__default.UpdateC(cmd#1_1_1_1_1_0_0_0_0_0_0, 
                                                          deps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          exps#1_1_1_1_1_0_0_0_0_0_0, 
                                                          st'#1_1_1_1_1_0_0_0_0_0_1_0_1_0);
                                                        defass#stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := true;
                                                        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(694,19)
                                                        if (M0.Expression#Equal(outExpr#0, 
                                                          #M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths(expr'#1_1_1_1_1_0_0_0_0_0_1_0_1_0))))
                                                        {
                                                            assert {:id "id1083"} defass#outSt#0;
                                                            assert {:id "id1084"} defass#stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        }

                                                        assume $IsA#M0.Expression(outExpr#0);
                                                        assert {:id "id1085"} {:subsumption 0} M0.Expression#Equal(outExpr#0, 
                                                          #M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths(expr'#1_1_1_1_1_0_0_0_0_0_1_0_1_0)));
                                                        assert {:id "id1086"} {:subsumption 0} outSt#0 == stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        assume {:id "id1087"} M0.Expression#Equal(outExpr#0, 
                                                            #M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths(expr'#1_1_1_1_1_0_0_0_0_0_1_0_1_0)))
                                                           && outSt#0 == stC'#1_1_1_1_1_0_0_0_0_0_1_0_1_0;
                                                        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(695,19)
                                                        if (useCache#0)
                                                        {
                                                            assert {:id "id1088"} defass#outSt#0;
                                                            ##stC#1_1_1_1_1_0_0_0_0_0_1_0_1_0 := outSt#0;
                                                            // assume allocatedness for argument to function
                                                            assume $IsAllocBox(##stC#1_1_1_1_1_0_0_0_0_0_1_0_1_0, Tclass.M0.State(), $Heap);
                                                            assume M0.__default.ConsistentCache#canCall(outSt#0);
                                                        }

                                                        assume useCache#0 ==> M0.__default.ConsistentCache#canCall(outSt#0);
                                                        assert {:id "id1089"} {:subsumption 0} useCache#0
                                                           ==> 
                                                          M0.__default.ConsistentCache#canCall(outSt#0)
                                                           ==> M0.__default.ConsistentCache(outSt#0)
                                                             || (forall cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Seq, 
                                                                deps#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Set, 
                                                                e#1_1_1_1_1_0_0_0_0_0_1_0_1_0: Seq :: 
                                                              { M0.__default.Loc(cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_0, 
                                                                  deps#1_1_1_1_1_0_0_0_0_0_1_0_1_0, 
                                                                  e#1_1_1_1_1_0_0_0_0_0_1_0_1_0) } 
                                                              $Is(cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_0, TSeq(TChar))
                                                                   && $Is(deps#1_1_1_1_1_0_0_0_0_0_1_0_1_0, TSet(Tclass.M0.Path()))
                                                                   && $Is(e#1_1_1_1_1_0_0_0_0_0_1_0_1_0, TSeq(TChar))
                                                                 ==> 
                                                                Set#IsMember(M0.__default.DomC(outSt#0), 
                                                                  M0.__default.Hash(M0.__default.Loc(cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_0, 
                                                                      deps#1_1_1_1_1_0_0_0_0_0_1_0_1_0, 
                                                                      e#1_1_1_1_1_0_0_0_0_0_1_0_1_0)))
                                                                 ==> Set#IsMember(M0.__default.DomSt(outSt#0), 
                                                                  M0.__default.Loc(cmd#1_1_1_1_1_0_0_0_0_0_1_0_1_0, 
                                                                    deps#1_1_1_1_1_0_0_0_0_0_1_0_1_0, 
                                                                    e#1_1_1_1_1_0_0_0_0_0_1_0_1_0)));
                                                        assume {:id "id1090"} useCache#0 ==> M0.__default.ConsistentCache(outSt#0);
                                                    }
                                                }
                                                else
                                                {
                                                }
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                }
                            }
                            else
                            {
                            }
                        }
                        else
                        {
                            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(703,7)
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(703,14)
                            // TrCallStmt: Before ProcessCallStmt
                            call {:id "id1091"} Call$$M0.__default.reveal__eval();
                            // TrCallStmt: After ProcessCallStmt
                            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(704,7)
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(704,14)
                            // TrCallStmt: Before ProcessCallStmt
                            call {:id "id1092"} Call$$M0.__default.reveal__Extends();
                            // TrCallStmt: After ProcessCallStmt
                        }
                    }
                }
            }
        }
    }

    assert {:id "id1093"} defass#outSt#0;
}



procedure {:verboseName "M0.EvalArgsLemma (well-formedness)"} CheckWellFormed$$M0.__default.EvalArgsLemma(context#0: DatatypeType
       where $Is(context#0, Tclass.M0.Expression())
         && $IsAlloc(context#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(context#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap), 
    stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool)
   returns (exprs#0: Seq
       where $Is(exprs#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(exprs#0, TSeq(Tclass.M0.Expression()), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.EvalArgsLemma (well-formedness)"} CheckWellFormed$$M0.__default.EvalArgsLemma(context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: Box, 
    env#0: Box, 
    useCache#0: bool)
   returns (exprs#0: Seq, sts#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##env#0: Box;
  var ##stC#0: Box;
  var arg#0: DatatypeType;
  var ##context#0: DatatypeType;
  var ##args#0: Seq;
  var ##stOrig#0: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var st'#0: Box;
  var ##st#1: Box;
  var ##st#2: Box;
  var ##st'#0: Box;
  var ##stC#1: Box;


    // AddMethodImpl: EvalArgsLemma, CheckWellFormed$$M0.__default.EvalArgsLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##st#0 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stOrig#0);
    assume {:id "id1094"} M0.__default.ValidState(stOrig#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id1095"} M0.__default.ValidEnv(env#0);
    if (useCache#0)
    {
        ##stC#0 := stOrig#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(stOrig#0);
    }

    assume {:id "id1096"} useCache#0 ==> M0.__default.ConsistentCache(stOrig#0);
    havoc arg#0;
    assume $Is(arg#0, Tclass.M0.Expression())
       && $IsAlloc(arg#0, Tclass.M0.Expression(), $Heap);
    if (*)
    {
        assume {:id "id1097"} Seq#Contains(args#0, $Box(arg#0));
        assume {:id "id1098"} DtRank(arg#0) < DtRank(context#0);
    }
    else
    {
        assume {:id "id1099"} Seq#Contains(args#0, $Box(arg#0)) ==> DtRank(arg#0) < DtRank(context#0);
    }

    assume {:id "id1100"} (forall arg#1: DatatypeType :: 
      { Seq#Contains(args#0, $Box(arg#1)) } 
      $Is(arg#1, Tclass.M0.Expression())
         ==> 
        Seq#Contains(args#0, $Box(arg#1))
         ==> DtRank(arg#1) < DtRank(context#0));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc exprs#0, sts#0;
    ##context#0 := context#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##context#0, Tclass.M0.Expression(), $Heap);
    ##args#0 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
    ##stOrig#0 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id1101"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assert {:id "id1102"} {:subsumption 0} (forall arg#2: DatatypeType :: 
      { Seq#Contains(##args#0, $Box(arg#2)) } 
      $Is(arg#2, Tclass.M0.Expression())
         ==> 
        Seq#Contains(##args#0, $Box(arg#2))
         ==> DtRank(arg#2) < DtRank(##context#0));
    assume M0.__default.ValidEnv(##env#1)
       && (forall arg#2: DatatypeType :: 
        { Seq#Contains(##args#0, $Box(arg#2)) } 
        $Is(arg#2, Tclass.M0.Expression())
           ==> 
          Seq#Contains(##args#0, $Box(arg#2))
           ==> DtRank(arg#2) < DtRank(##context#0));
    assume M0.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0, useCache#0);
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0));
    assume {:id "id1103"} M0.Tuple#Equal(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0), 
      #M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)));
    havoc st'#0;
    assume $IsBox(st'#0, Tclass.M0.State()) && $IsAllocBox(st'#0, Tclass.M0.State(), $Heap);
    if (*)
    {
        assume {:id "id1104"} Set#IsMember(sts#0, st'#0);
        ##st#1 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
        assume M0.__default.ValidState#canCall(st'#0);
        assume {:id "id1105"} M0.__default.ValidState(st'#0);
        ##st#2 := stOrig#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
        ##st'#0 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(stOrig#0, st'#0);
        assume {:id "id1106"} M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#0);
        if (useCache#0)
        {
            ##stC#1 := st'#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
            assume M0.__default.ConsistentCache#canCall(st'#0);
        }

        assume {:id "id1107"} useCache#0 ==> M0.__default.ConsistentCache(st'#0);
    }
    else
    {
        assume {:id "id1108"} Set#IsMember(sts#0, st'#0)
           ==> M0.__default.ValidState(st'#0)
             && M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#0)
             && (useCache#0 ==> M0.__default.ConsistentCache(st'#0));
    }

    assume {:id "id1109"} (forall st'#1: Box :: 
      { M0.__default.ConsistentCache(st'#1) } 
        { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1) } 
        { M0.__default.ValidState(st'#1) } 
        { Set#IsMember(sts#0, st'#1) } 
      $IsBox(st'#1, Tclass.M0.State())
         ==> (Set#IsMember(sts#0, st'#1) ==> M0.__default.ValidState(st'#1))
           && (Set#IsMember(sts#0, st'#1)
             ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1))
           && (Set#IsMember(sts#0, st'#1)
             ==> 
            useCache#0
             ==> M0.__default.ConsistentCache(st'#1)));
}



procedure {:verboseName "M0.EvalArgsLemma (call)"} Call$$M0.__default.EvalArgsLemma(context#0: DatatypeType
       where $Is(context#0, Tclass.M0.Expression())
         && $IsAlloc(context#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(context#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap), 
    stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool)
   returns (exprs#0: Seq
       where $Is(exprs#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(exprs#0, TSeq(Tclass.M0.Expression()), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap));
  // user-defined preconditions
  requires {:id "id1110"} M0.__default.ValidState#canCall(stOrig#0)
     ==> M0.__default.ValidState(stOrig#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(stOrig#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stOrig#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id1111"} M0.__default.ValidEnv(env#0);
  requires {:id "id1112"} useCache#0
     ==> 
    M0.__default.ConsistentCache#canCall(stOrig#0)
     ==> M0.__default.ConsistentCache(stOrig#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stOrig#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(stOrig#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id1113"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass.M0.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(context#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0))
     && M0.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0, useCache#0)
     && (M0.Tuple#Equal(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0), 
        #M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)))
       ==> (forall st'#1: Box :: 
        { M0.__default.ConsistentCache(st'#1) } 
          { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1) } 
          { M0.__default.ValidState(st'#1) } 
          { Set#IsMember(sts#0, st'#1) } 
        $IsBox(st'#1, Tclass.M0.State())
           ==> (Set#IsMember(sts#0, st'#1) ==> M0.__default.ValidState#canCall(st'#1))
             && (
              (Set#IsMember(sts#0, st'#1)
               ==> M0.__default.ValidState(st'#1))
               ==> (Set#IsMember(sts#0, st'#1) ==> M0.__default.Extends#canCall(stOrig#0, st'#1))
                 && (
                  (Set#IsMember(sts#0, st'#1)
                   ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1))
                   ==> 
                  Set#IsMember(sts#0, st'#1)
                   ==> 
                  useCache#0
                   ==> M0.__default.ConsistentCache#canCall(st'#1)))));
  ensures {:id "id1114"} M0.Tuple#Equal(M0.__default.evalArgs($LS($LS($LZ)), context#0, args#0, stOrig#0, env#0, useCache#0), 
    #M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)));
  ensures {:id "id1115"} (forall st'#1: Box :: 
    { M0.__default.ConsistentCache(st'#1) } 
      { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1) } 
      { M0.__default.ValidState(st'#1) } 
      { Set#IsMember(sts#0, st'#1) } 
    $IsBox(st'#1, Tclass.M0.State())
       ==> (Set#IsMember(sts#0, st'#1) ==> M0.__default.ValidState(st'#1))
         && (Set#IsMember(sts#0, st'#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1))
         && (Set#IsMember(sts#0, st'#1)
           ==> 
          useCache#0
           ==> M0.__default.ConsistentCache(st'#1)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.EvalArgsLemma (correctness)"} Impl$$M0.__default.EvalArgsLemma(context#0: DatatypeType
       where $Is(context#0, Tclass.M0.Expression())
         && $IsAlloc(context#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(context#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap), 
    stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap), 
    useCache#0: bool)
   returns (exprs#0: Seq
       where $Is(exprs#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(exprs#0, TSeq(Tclass.M0.Expression()), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    $_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1116"} M0.__default.ValidState#canCall(stOrig#0)
     && 
    M0.__default.ValidState(stOrig#0)
     && (forall p#1: Box :: 
      { M0.__default.WellFounded(p#1) } 
        { Set#IsMember(M0.__default.DomSt(stOrig#0), p#1) } 
      $IsBox(p#1, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stOrig#0), p#1)
         ==> M0.__default.WellFounded(p#1));
  requires {:id "id1117"} M0.__default.ValidEnv(env#0);
  free requires {:id "id1118"} useCache#0
     ==> M0.__default.ConsistentCache#canCall(stOrig#0)
       && 
      M0.__default.ConsistentCache(stOrig#0)
       && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
        { M0.__default.Loc(cmd#1, deps#1, e#1) } 
        $Is(cmd#1, TSeq(TChar))
             && $Is(deps#1, TSet(Tclass.M0.Path()))
             && $Is(e#1, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stOrig#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
           ==> Set#IsMember(M0.__default.DomSt(stOrig#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  requires {:id "id1119"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass.M0.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(context#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0))
     && M0.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0, useCache#0)
     && (M0.Tuple#Equal(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, useCache#0), 
        #M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)))
       ==> (forall st'#1: Box :: 
        { M0.__default.ConsistentCache(st'#1) } 
          { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1) } 
          { M0.__default.ValidState(st'#1) } 
          { Set#IsMember(sts#0, st'#1) } 
        $IsBox(st'#1, Tclass.M0.State())
           ==> (Set#IsMember(sts#0, st'#1) ==> M0.__default.ValidState#canCall(st'#1))
             && (
              (Set#IsMember(sts#0, st'#1)
               ==> M0.__default.ValidState(st'#1))
               ==> (Set#IsMember(sts#0, st'#1) ==> M0.__default.Extends#canCall(stOrig#0, st'#1))
                 && (
                  (Set#IsMember(sts#0, st'#1)
                   ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1))
                   ==> 
                  Set#IsMember(sts#0, st'#1)
                   ==> 
                  useCache#0
                   ==> M0.__default.ConsistentCache#canCall(st'#1)))));
  ensures {:id "id1120"} M0.Tuple#Equal(M0.__default.evalArgs($LS($LS($LZ)), context#0, args#0, stOrig#0, env#0, useCache#0), 
    #M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)));
  ensures {:id "id1121"} (forall st'#1: Box :: 
    { M0.__default.ConsistentCache(st'#1) } 
      { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1) } 
      { M0.__default.ValidState(st'#1) } 
      { Set#IsMember(sts#0, st'#1) } 
    $IsBox(st'#1, Tclass.M0.State())
       ==> (Set#IsMember(sts#0, st'#1) ==> M0.__default.ValidState(st'#1))
         && (Set#IsMember(sts#0, st'#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st'#1))
         && (Set#IsMember(sts#0, st'#1)
           ==> 
          useCache#0
           ==> M0.__default.ConsistentCache(st'#1)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.EvalArgsLemma (correctness)"} Impl$$M0.__default.EvalArgsLemma(context#0: DatatypeType, 
    args#0: Seq, 
    stOrig#0: Box, 
    env#0: Box, 
    useCache#0: bool)
   returns (exprs#0: Seq, sts#0: Set, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0_0: Seq;
  var $rhs#0_1: Set;
  var a#1_0: DatatypeType
     where $Is(a#1_0, Tclass.M0.Expression())
       && $IsAlloc(a#1_0, Tclass.M0.Expression(), $Heap);
  var defass#st#1_0: bool;
  var st#1_0: Box
     where defass#st#1_0
       ==> $IsBox(st#1_0, Tclass.M0.State())
         && $IsAllocBox(st#1_0, Tclass.M0.State(), $Heap);
  var $rhs##1_0: DatatypeType;
  var $rhs##1_1: Box;
  var expr##1_0: DatatypeType;
  var st##1_0: Box;
  var env##1_0: Box;
  var useCache##1_0: bool;
  var $rhs##1_2: Seq;
  var $rhs##1_3: Set;
  var context##1_0: DatatypeType;
  var args##1_0: Seq;
  var stOrig##1_0: Box;
  var env##1_1: Box;
  var useCache##1_1: bool;
  var $rhs#1_0: Seq;
  var $rhs#1_1: Set;

    // AddMethodImpl: EvalArgsLemma, Impl$$M0.__default.EvalArgsLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(721,5)
    assume true;
    if (Seq#Equal(args#0, Seq#Empty(): Seq))
    {
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(722,18)
        assume true;
        assume true;
        assume true;
        $rhs#0_0 := Lit(Seq#Empty(): Seq);
        assume true;
        $rhs#0_1 := Lit(Set#Empty(): Set);
        exprs#0 := $rhs#0_0;
        sts#0 := $rhs#0_1;
    }
    else
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(724,29)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id1126"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##1_0 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##1_0 := stOrig#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_0 := env#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        useCache##1_0 := useCache#0;
        assert {:id "id1127"} DtRank(expr##1_0) < DtRank(context#0);
        call {:id "id1128"} $rhs##1_0, $rhs##1_1 := Call$$M0.__default.EvalLemma(expr##1_0, st##1_0, env##1_0, useCache##1_0);
        // TrCallStmt: After ProcessCallStmt
        a#1_0 := $rhs##1_0;
        st#1_0 := $rhs##1_1;
        defass#st#1_0 := true;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(725,34)
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type seq<Expression>
        // TrCallStmt: Adding lhs with type set<State>
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        context##1_0 := context#0;
        assert {:id "id1131"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(args#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        args##1_0 := Seq#Drop(args#0, LitInt(1));
        assume true;
        // ProcessCallStmt: CheckSubrange
        stOrig##1_0 := stOrig#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_1 := env#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        useCache##1_1 := useCache#0;
        assert {:id "id1132"} 0 <= Seq#Length(args#0)
           || DtRank(context##1_0) < DtRank(context#0)
           || Seq#Length(args##1_0) == Seq#Length(args#0);
        assert {:id "id1133"} DtRank(context##1_0) < DtRank(context#0)
           || (DtRank(context##1_0) == DtRank(context#0)
             && Seq#Length(args##1_0) < Seq#Length(args#0));
        call {:id "id1134"} $rhs##1_2, $rhs##1_3 := Call$$M0.__default.EvalArgsLemma(context##1_0, args##1_0, stOrig##1_0, env##1_1, useCache##1_1);
        // TrCallStmt: After ProcessCallStmt
        exprs#0 := $rhs##1_2;
        sts#0 := $rhs##1_3;
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(726,18)
        assume true;
        assume true;
        assume true;
        $rhs#1_0 := Seq#Append(Seq#Build(Seq#Empty(): Seq, $Box(a#1_0)), exprs#0);
        assert {:id "id1138"} defass#st#1_0;
        assume true;
        $rhs#1_1 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#1_0), sts#0);
        exprs#0 := $rhs#1_0;
        sts#0 := $rhs#1_1;
    }
}



procedure {:verboseName "M0.CachedBuildsTheorem (well-formedness)"} CheckWellFormed$$M0.__default.CachedBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M0.Program())
         && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
         && $IsA#M0.Program(prog#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.CachedBuildsTheorem (well-formedness)"} CheckWellFormed$$M0.__default.CachedBuildsTheorem(prog#0: DatatypeType, st#0: Box, stC#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##stC#0: Box;
  var ##st#2: Box;
  var ##stC#1: Box;
  var _v20#Z#0: DatatypeType;
  var st'#Z#0: Box;
  var _v21#Z#0: DatatypeType;
  var stC'#Z#0: Box;
  var let#0#0#0: DatatypeType;
  var ##prog#0: DatatypeType;
  var ##st#3: Box;
  var ##useCache#0: bool;
  var let#0#1#0: DatatypeType;
  var ##prog#1: DatatypeType;
  var ##st#4: Box;
  var ##useCache#1: bool;
  var ##st#5: Box;
  var ##stC#2: Box;


    // AddMethodImpl: CachedBuildsTheorem, CheckWellFormed$$M0.__default.CachedBuildsTheorem
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume M0.Program.Program_q(prog#0);
    ##stmts#0 := M0.Program.stmts(prog#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass.M0.Statement()), $Heap);
    assume M0.__default.Legal#canCall(M0.Program.stmts(prog#0));
    assume {:id "id1142"} M0.__default.Legal(M0.Program.stmts(prog#0));
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id1143"} M0.__default.ValidState(st#0);
    ##st#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stC#0);
    assume {:id "id1144"} M0.__default.ValidState(stC#0);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id1145"} M0.__default.ConsistentCache(stC#0);
    ##st#2 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st#0, stC#0);
    assume {:id "id1146"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc _v20#Z#0;
    havoc st'#Z#0;
    havoc _v21#Z#0;
    havoc stC'#Z#0;
    ##prog#0 := prog#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##prog#0, Tclass.M0.Program(), $Heap);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    ##useCache#0 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id1147"} {:subsumption 0} M0.__default.Legal#canCall(M0.Program.stmts(##prog#0))
       ==> M0.__default.Legal(M0.Program.stmts(##prog#0))
         || Seq#Length(M0.Program.stmts(##prog#0)) != 0;
    assume M0.__default.Legal(M0.Program.stmts(##prog#0));
    assume M0.__default.build#canCall(prog#0, st#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.build(prog#0, st#0, Lit(false)));
    assume {:id "id1148"} let#0#0#0 == M0.__default.build(prog#0, st#0, Lit(false));
    assume M0.__default.build#canCall(prog#0, st#0, Lit(false));
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
    assume M0.Tuple.Pair_q(let#0#0#0);
    assume {:id "id1149"} #M0.Tuple.Pair($Box(_v20#Z#0), st'#Z#0) == let#0#0#0;
    ##prog#1 := prog#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##prog#1, Tclass.M0.Program(), $Heap);
    ##st#4 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##useCache#1 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id1150"} {:subsumption 0} M0.__default.Legal#canCall(M0.Program.stmts(##prog#1))
       ==> M0.__default.Legal(M0.Program.stmts(##prog#1))
         || Seq#Length(M0.Program.stmts(##prog#1)) != 0;
    assume M0.__default.Legal(M0.Program.stmts(##prog#1));
    assume M0.__default.build#canCall(prog#0, stC#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.build(prog#0, stC#0, Lit(true)));
    assume {:id "id1151"} let#0#1#0 == M0.__default.build(prog#0, stC#0, Lit(true));
    assume M0.__default.build#canCall(prog#0, stC#0, Lit(true));
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#1#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()));
    assume M0.Tuple.Pair_q(let#0#1#0);
    assume {:id "id1152"} #M0.Tuple.Pair($Box(_v21#Z#0), stC'#Z#0) == let#0#1#0;
    ##st#5 := st'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
    ##stC#2 := stC'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#2, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st'#Z#0, stC'#Z#0);
    assume {:id "id1153"} (var _v20#0, st'#0, _v21#0, stC'#0 := $Unbox(M0.Tuple.fst(M0.__default.build(prog#0, st#0, Lit(false)))): DatatypeType, 
        M0.Tuple.snd(M0.__default.build(prog#0, st#0, Lit(false))), 
        $Unbox(M0.Tuple.fst(M0.__default.build(prog#0, stC#0, Lit(true)))): DatatypeType, 
        M0.Tuple.snd(M0.__default.build(prog#0, stC#0, Lit(true))); 
      M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st'#0, stC'#0));
}



procedure {:verboseName "M0.CachedBuildsTheorem (call)"} Call$$M0.__default.CachedBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M0.Program())
         && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
         && $IsA#M0.Program(prog#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id1154"} M0.__default.Legal#canCall(M0.Program.stmts(prog#0))
     ==> M0.__default.Legal(M0.Program.stmts(prog#0))
       || Seq#Length(M0.Program.stmts(prog#0)) != 0;
  requires {:id "id1155"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id1156"} M0.__default.ValidState#canCall(stC#0)
     ==> M0.__default.ValidState(stC#0)
       || (forall p#1: Box :: 
        { M0.__default.WellFounded(p#1) } 
          { Set#IsMember(M0.__default.DomSt(stC#0), p#1) } 
        $IsBox(p#1, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stC#0), p#1)
           ==> M0.__default.WellFounded(p#1));
  requires {:id "id1157"} M0.__default.ConsistentCache#canCall(stC#0)
     ==> M0.__default.ConsistentCache(stC#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stC#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id1158"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.build#canCall(prog#0, st#0, Lit(false))
     && M0.__default.build#canCall(prog#0, stC#0, Lit(true))
     && (var st'#0, stC'#0 := M0.Tuple.snd(M0.__default.build(prog#0, st#0, Lit(false))), 
        M0.Tuple.snd(M0.__default.build(prog#0, stC#0, Lit(true))); 
      M0.__default.StateCorrespondence#canCall(st'#0, stC'#0));
  ensures {:id "id1159"} (var _v20#0, st'#0, _v21#0, stC'#0 := $Unbox(M0.Tuple.fst(M0.__default.build(prog#0, st#0, Lit(false)))): DatatypeType, 
      M0.Tuple.snd(M0.__default.build(prog#0, st#0, Lit(false))), 
      $Unbox(M0.Tuple.fst(M0.__default.build(prog#0, stC#0, Lit(true)))): DatatypeType, 
      M0.Tuple.snd(M0.__default.build(prog#0, stC#0, Lit(true))); 
    M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st'#0, stC'#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.CachedBuildsTheorem (correctness)"} Impl$$M0.__default.CachedBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass.M0.Program())
         && $IsAlloc(prog#0, Tclass.M0.Program(), $Heap)
         && $IsA#M0.Program(prog#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 10 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1160"} M0.__default.Legal#canCall(M0.Program.stmts(prog#0))
     && 
    M0.__default.Legal(M0.Program.stmts(prog#0))
     && Seq#Length(M0.Program.stmts(prog#0)) != 0;
  free requires {:id "id1161"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  free requires {:id "id1162"} M0.__default.ValidState#canCall(stC#0)
     && 
    M0.__default.ValidState(stC#0)
     && (forall p#3: Box :: 
      { M0.__default.WellFounded(p#3) } 
        { Set#IsMember(M0.__default.DomSt(stC#0), p#3) } 
      $IsBox(p#3, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stC#0), p#3)
         ==> M0.__default.WellFounded(p#3));
  free requires {:id "id1163"} M0.__default.ConsistentCache#canCall(stC#0)
     && 
    M0.__default.ConsistentCache(stC#0)
     && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
      { M0.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, TSeq(TChar))
           && $Is(deps#1, TSet(Tclass.M0.Path()))
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(M0.__default.DomC(stC#0), 
          M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  requires {:id "id1164"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.build#canCall(prog#0, st#0, Lit(false))
     && M0.__default.build#canCall(prog#0, stC#0, Lit(true))
     && (var st'#0, stC'#0 := M0.Tuple.snd(M0.__default.build(prog#0, st#0, Lit(false))), 
        M0.Tuple.snd(M0.__default.build(prog#0, stC#0, Lit(true))); 
      M0.__default.StateCorrespondence#canCall(st'#0, stC'#0));
  ensures {:id "id1165"} (var _v20#0, st'#0, _v21#0, stC'#0 := $Unbox(M0.Tuple.fst(M0.__default.build(prog#0, st#0, Lit(false)))): DatatypeType, 
      M0.Tuple.snd(M0.__default.build(prog#0, st#0, Lit(false))), 
      $Unbox(M0.Tuple.fst(M0.__default.build(prog#0, stC#0, Lit(true)))): DatatypeType, 
      M0.Tuple.snd(M0.__default.build(prog#0, stC#0, Lit(true))); 
    M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st'#0, stC'#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.CachedBuildsTheorem (correctness)"} Impl$$M0.__default.CachedBuildsTheorem(prog#0: DatatypeType, st#0: Box, stC#0: Box) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var defass#_v22#0: bool;
  var _v22#0: Box
     where defass#_v22#0
       ==> $IsBox(_v22#0, Tclass.M0.State())
         && $IsAllocBox(_v22#0, Tclass.M0.State(), $Heap);
  var defass#_v23#0: bool;
  var _v23#0: Box
     where defass#_v23#0
       ==> $IsBox(_v23#0, Tclass.M0.State())
         && $IsAllocBox(_v23#0, Tclass.M0.State(), $Heap);
  var $rhs##0: Box;
  var $rhs##1: Box;
  var stmts##0: Seq;
  var st##0: Box;
  var stC##0: Box;
  var env##0: Box;

    // AddMethodImpl: CachedBuildsTheorem, Impl$$M0.__default.CachedBuildsTheorem
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(741,25)
    assume true;
    assume true;
    // TrCallStmt: Adding lhs with type State
    // TrCallStmt: Adding lhs with type State
    // TrCallStmt: Before ProcessCallStmt
    assume M0.Program.Program_q(prog#0);
    assume M0.Program.Program_q(prog#0);
    // ProcessCallStmt: CheckSubrange
    stmts##0 := M0.Program.stmts(prog#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##0 := stC#0;
    assume M0.__default.EmptyEnv#canCall();
    assume M0.__default.EmptyEnv#canCall();
    // ProcessCallStmt: CheckSubrange
    env##0 := M0.__default.EmptyEnv();
    call {:id "id1166"} $rhs##0, $rhs##1 := Call$$M0.__default.Lemma__Do(stmts##0, st##0, stC##0, env##0);
    // TrCallStmt: After ProcessCallStmt
    _v22#0 := $rhs##0;
    defass#_v22#0 := true;
    _v23#0 := $rhs##1;
    defass#_v23#0 := true;
}



procedure {:verboseName "M0.Lemma_Do (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__Do(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass.M0.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass.M0.Statement()), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (st'#0: Box
       where $IsBox(st'#0, Tclass.M0.State()) && $IsAllocBox(st'#0, Tclass.M0.State(), $Heap), 
    stC'#0: Box
       where $IsBox(stC'#0, Tclass.M0.State())
         && $IsAllocBox(stC'#0, Tclass.M0.State(), $Heap));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_Do (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__Do(stmts#0: Seq, st#0: Box, stC#0: Box, env#0: Box)
   returns (st'#0: Box, stC'#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##env#0: Box;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##stC#0: Box;
  var ##st#2: Box;
  var ##stC#1: Box;
  var ##stmts#1: Seq;
  var ##st#3: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##stmts#2: Seq;
  var ##st#4: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;
  var ##st#5: Box;
  var ##stC#2: Box;


    // AddMethodImpl: Lemma_Do, CheckWellFormed$$M0.__default.Lemma__Do
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##stmts#0 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass.M0.Statement()), $Heap);
    assume M0.__default.Legal#canCall(stmts#0);
    assume {:id "id1169"} M0.__default.Legal(stmts#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id1170"} M0.__default.ValidEnv(env#0);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id1171"} M0.__default.ValidState(st#0);
    ##st#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stC#0);
    assume {:id "id1172"} M0.__default.ValidState(stC#0);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id1173"} M0.__default.ConsistentCache(stC#0);
    ##st#2 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st#0, stC#0);
    assume {:id "id1174"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc st'#0, stC'#0;
    ##stmts#1 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#1, TSeq(Tclass.M0.Statement()), $Heap);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id1175"} {:subsumption 0} M0.__default.Legal#canCall(##stmts#1)
       ==> M0.__default.Legal(##stmts#1) || Seq#Length(##stmts#1) != 0;
    assert {:id "id1176"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.__default.Legal(##stmts#1) && M0.__default.ValidEnv(##env#1);
    assume M0.__default.do#canCall(stmts#0, st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, Lit(false)));
    assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, Lit(false)));
    assume {:id "id1177"} st'#0
       == M0.Tuple.snd(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, Lit(false)));
    ##stmts#2 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#2, TSeq(Tclass.M0.Statement()), $Heap);
    ##st#4 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
    ##useCache#1 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id1178"} {:subsumption 0} M0.__default.Legal#canCall(##stmts#2)
       ==> M0.__default.Legal(##stmts#2) || Seq#Length(##stmts#2) != 0;
    assert {:id "id1179"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
    assume M0.__default.Legal(##stmts#2) && M0.__default.ValidEnv(##env#2);
    assume M0.__default.do#canCall(stmts#0, stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, stC#0, env#0, Lit(true)));
    assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, stC#0, env#0, Lit(true)));
    assume {:id "id1180"} stC'#0
       == M0.Tuple.snd(M0.__default.do($LS($LZ), stmts#0, stC#0, env#0, Lit(true)));
    ##st#5 := st'#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
    ##stC#2 := stC'#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#2, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st'#0, stC'#0);
    assume {:id "id1181"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st'#0, stC'#0);
}



procedure {:verboseName "M0.Lemma_Do (call)"} Call$$M0.__default.Lemma__Do(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass.M0.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass.M0.Statement()), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (st'#0: Box
       where $IsBox(st'#0, Tclass.M0.State()) && $IsAllocBox(st'#0, Tclass.M0.State(), $Heap), 
    stC'#0: Box
       where $IsBox(stC'#0, Tclass.M0.State())
         && $IsAllocBox(stC'#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id1182"} M0.__default.Legal#canCall(stmts#0)
     ==> M0.__default.Legal(stmts#0) || Seq#Length(stmts#0) != 0;
  requires {:id "id1183"} M0.__default.ValidEnv(env#0);
  requires {:id "id1184"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id1185"} M0.__default.ValidState#canCall(stC#0)
     ==> M0.__default.ValidState(stC#0)
       || (forall p#1: Box :: 
        { M0.__default.WellFounded(p#1) } 
          { Set#IsMember(M0.__default.DomSt(stC#0), p#1) } 
        $IsBox(p#1, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stC#0), p#1)
           ==> M0.__default.WellFounded(p#1));
  requires {:id "id1186"} M0.__default.ConsistentCache#canCall(stC#0)
     ==> M0.__default.ConsistentCache(stC#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stC#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id1187"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.do#canCall(stmts#0, st#0, env#0, Lit(false))
     && M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, Lit(false)))
     && (st'#0
         == M0.Tuple.snd(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, Lit(false)))
       ==> M0.__default.do#canCall(stmts#0, stC#0, env#0, Lit(true))
         && M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, stC#0, env#0, Lit(true)))
         && (stC'#0
             == M0.Tuple.snd(M0.__default.do($LS($LZ), stmts#0, stC#0, env#0, Lit(true)))
           ==> M0.__default.StateCorrespondence#canCall(st'#0, stC'#0)));
  ensures {:id "id1188"} st'#0
     == M0.Tuple.snd(M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, Lit(false)));
  ensures {:id "id1189"} stC'#0
     == M0.Tuple.snd(M0.__default.do($LS($LS($LZ)), stmts#0, stC#0, env#0, Lit(true)));
  ensures {:id "id1190"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st'#0, stC'#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_Do (correctness)"} Impl$$M0.__default.Lemma__Do(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass.M0.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass.M0.Statement()), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (defass#st'#0: bool, 
    st'#0: Box
       where defass#st'#0
         ==> $IsBox(st'#0, Tclass.M0.State()) && $IsAllocBox(st'#0, Tclass.M0.State(), $Heap), 
    defass#stC'#0: bool, 
    stC'#0: Box
       where defass#stC'#0
         ==> $IsBox(stC'#0, Tclass.M0.State())
           && $IsAllocBox(stC'#0, Tclass.M0.State(), $Heap), 
    $_reverifyPost: bool);
  free requires 9 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1191"} M0.__default.Legal#canCall(stmts#0)
     && 
    M0.__default.Legal(stmts#0)
     && Seq#Length(stmts#0) != 0;
  requires {:id "id1192"} M0.__default.ValidEnv(env#0);
  free requires {:id "id1193"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  free requires {:id "id1194"} M0.__default.ValidState#canCall(stC#0)
     && 
    M0.__default.ValidState(stC#0)
     && (forall p#3: Box :: 
      { M0.__default.WellFounded(p#3) } 
        { Set#IsMember(M0.__default.DomSt(stC#0), p#3) } 
      $IsBox(p#3, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stC#0), p#3)
         ==> M0.__default.WellFounded(p#3));
  free requires {:id "id1195"} M0.__default.ConsistentCache#canCall(stC#0)
     && 
    M0.__default.ConsistentCache(stC#0)
     && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
      { M0.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, TSeq(TChar))
           && $Is(deps#1, TSet(Tclass.M0.Path()))
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(M0.__default.DomC(stC#0), 
          M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  requires {:id "id1196"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.do#canCall(stmts#0, st#0, env#0, Lit(false))
     && M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, Lit(false)))
     && (st'#0
         == M0.Tuple.snd(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, Lit(false)))
       ==> M0.__default.do#canCall(stmts#0, stC#0, env#0, Lit(true))
         && M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, stC#0, env#0, Lit(true)))
         && (stC'#0
             == M0.Tuple.snd(M0.__default.do($LS($LZ), stmts#0, stC#0, env#0, Lit(true)))
           ==> M0.__default.StateCorrespondence#canCall(st'#0, stC'#0)));
  ensures {:id "id1197"} st'#0
     == M0.Tuple.snd(M0.__default.do($LS($LS($LZ)), stmts#0, st#0, env#0, Lit(false)));
  ensures {:id "id1198"} stC'#0
     == M0.Tuple.snd(M0.__default.do($LS($LS($LZ)), stmts#0, stC#0, env#0, Lit(true)));
  ensures {:id "id1199"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st'#0, stC'#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_Do (correctness)"} Impl$$M0.__default.Lemma__Do(stmts#0: Seq, st#0: Box, stC#0: Box, env#0: Box)
   returns (defass#st'#0: bool, 
    st'#0: Box, 
    defass#stC'#0: bool, 
    stC'#0: Box, 
    $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var defass#result#0: bool;
  var result#0: DatatypeType
     where defass#result#0
       ==> $Is(result#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(result#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var defass#resultC#0: bool;
  var resultC#0: DatatypeType
     where defass#resultC#0
       ==> $Is(resultC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(resultC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var $rhs#0: DatatypeType;
  var ##stmts#3: Seq;
  var ##st#6: Box;
  var ##env#3: Box;
  var ##useCache#2: bool;
  var $rhs#1: DatatypeType;
  var ##stmts#4: Seq;
  var ##st#7: Box;
  var ##env#4: Box;
  var ##useCache#3: bool;
  var $rhs#2: Box;
  var $rhs#3: Box;
  var defass#stmt#0: bool;
  var stmt#0: DatatypeType
     where defass#stmt#0
       ==> $Is(stmt#0, Tclass.M0.Statement())
         && $IsAlloc(stmt#0, Tclass.M0.Statement(), $Heap);
  var expr'#0_0: DatatypeType
     where $Is(expr'#0_0, Tclass.M0.Expression())
       && $IsAlloc(expr'#0_0, Tclass.M0.Expression(), $Heap);
  var defass#st'#0_0: bool;
  var st'#0_0: Box
     where defass#st'#0_0
       ==> $IsBox(st'#0_0, Tclass.M0.State())
         && $IsAllocBox(st'#0_0, Tclass.M0.State(), $Heap);
  var defass#stC'#0_0: bool;
  var stC'#0_0: Box
     where defass#stC'#0_0
       ==> $IsBox(stC'#0_0, Tclass.M0.State())
         && $IsAllocBox(stC'#0_0, Tclass.M0.State(), $Heap);
  var $rhs##0_0: DatatypeType;
  var $rhs##0_1: Box;
  var $rhs##0_2: Box;
  var expr##0_0: DatatypeType;
  var st##0_0: Box;
  var stC##0_0: Box;
  var env##0_0: Box;
  var ##expr#0_0: DatatypeType;
  var defass#env'#0_0_0: bool;
  var env'#0_0_0: Box
     where defass#env'#0_0_0
       ==> $IsBox(env'#0_0_0, Tclass.M0.Env())
         && $IsAllocBox(env'#0_0_0, Tclass.M0.Env(), $Heap);
  var ##id#0_0_0: Box;
  var ##expr#0_0_0: DatatypeType;
  var ##env#0_0_0: Box;
  var ##stmts#0_0_0: Seq;
  var defass#_v24#0_0_0_0: bool;
  var _v24#0_0_0_0: Box
     where defass#_v24#0_0_0_0
       ==> $IsBox(_v24#0_0_0_0, Tclass.M0.State())
         && $IsAllocBox(_v24#0_0_0_0, Tclass.M0.State(), $Heap);
  var defass#_v25#0_0_0_0: bool;
  var _v25#0_0_0_0: Box
     where defass#_v25#0_0_0_0
       ==> $IsBox(_v25#0_0_0_0, Tclass.M0.State())
         && $IsAllocBox(_v25#0_0_0_0, Tclass.M0.State(), $Heap);
  var $rhs##0_0_0_0: Box;
  var $rhs##0_0_0_1: Box;
  var stmts##0_0_0_0: Seq;
  var st##0_0_0_0: Box;
  var stC##0_0_0_0: Box;
  var env##0_0_0_0: Box;
  var _v26#1_0: DatatypeType
     where $Is(_v26#1_0, Tclass.M0.Expression())
       && $IsAlloc(_v26#1_0, Tclass.M0.Expression(), $Heap);
  var defass#_v27#1_0: bool;
  var _v27#1_0: Box
     where defass#_v27#1_0
       ==> $IsBox(_v27#1_0, Tclass.M0.State())
         && $IsAllocBox(_v27#1_0, Tclass.M0.State(), $Heap);
  var defass#_v28#1_0: bool;
  var _v28#1_0: Box
     where defass#_v28#1_0
       ==> $IsBox(_v28#1_0, Tclass.M0.State())
         && $IsAllocBox(_v28#1_0, Tclass.M0.State(), $Heap);
  var $rhs##1_0: DatatypeType;
  var $rhs##1_1: Box;
  var $rhs##1_2: Box;
  var expr##1_0: DatatypeType;
  var st##1_0: Box;
  var stC##1_0: Box;
  var env##1_0: Box;

    // AddMethodImpl: Lemma_Do, Impl$$M0.__default.Lemma__Do
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(755,25)
    assume true;
    assume true;
    ##stmts#3 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#3, TSeq(Tclass.M0.Statement()), $Heap);
    ##st#6 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
    ##env#3 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#3, Tclass.M0.Env(), $Heap);
    ##useCache#2 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#2, TBool, $Heap);
    assert {:id "id1200"} {:subsumption 0} M0.__default.Legal#canCall(##stmts#3)
       ==> M0.__default.Legal(##stmts#3) || Seq#Length(##stmts#3) != 0;
    assert {:id "id1201"} {:subsumption 0} M0.__default.ValidEnv(##env#3);
    assume M0.__default.Legal(##stmts#3) && M0.__default.ValidEnv(##env#3);
    assume M0.__default.do#canCall(stmts#0, st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, st#0, env#0, Lit(false)));
    assume M0.__default.do#canCall(stmts#0, st#0, env#0, Lit(false));
    $rhs#0 := M0.__default.do($LS($LZ), stmts#0, st#0, env#0, Lit(false));
    ##stmts#4 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#4, TSeq(Tclass.M0.Statement()), $Heap);
    ##st#7 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
    ##env#4 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#4, Tclass.M0.Env(), $Heap);
    ##useCache#3 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#3, TBool, $Heap);
    assert {:id "id1203"} {:subsumption 0} M0.__default.Legal#canCall(##stmts#4)
       ==> M0.__default.Legal(##stmts#4) || Seq#Length(##stmts#4) != 0;
    assert {:id "id1204"} {:subsumption 0} M0.__default.ValidEnv(##env#4);
    assume M0.__default.Legal(##stmts#4) && M0.__default.ValidEnv(##env#4);
    assume M0.__default.do#canCall(stmts#0, stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.do($LS($LZ), stmts#0, stC#0, env#0, Lit(true)));
    assume M0.__default.do#canCall(stmts#0, stC#0, env#0, Lit(true));
    $rhs#1 := M0.__default.do($LS($LZ), stmts#0, stC#0, env#0, Lit(true));
    result#0 := $rhs#0;
    defass#result#0 := true;
    resultC#0 := $rhs#1;
    defass#resultC#0 := true;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(756,15)
    assume true;
    assume true;
    assert {:id "id1208"} defass#result#0;
    assume M0.Tuple.Pair_q(result#0);
    assume M0.Tuple.Pair_q(result#0);
    $rhs#2 := M0.Tuple.snd(result#0);
    assert {:id "id1210"} defass#resultC#0;
    assume M0.Tuple.Pair_q(resultC#0);
    assume M0.Tuple.Pair_q(resultC#0);
    $rhs#3 := M0.Tuple.snd(resultC#0);
    st'#0 := $rhs#2;
    defass#st'#0 := true;
    stC'#0 := $rhs#3;
    defass#stC'#0 := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(757,14)
    assume true;
    assert {:id "id1214"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(stmts#0);
    assume true;
    stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType;
    defass#stmt#0 := true;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(758,5)
    assert {:id "id1216"} defass#stmt#0;
    assume true;
    if (M0.Statement.stmtVariable_q(stmt#0))
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(759,41)
        assume true;
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id1217"} defass#stmt#0;
        assert {:id "id1218"} M0.Statement.stmtVariable_q(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##0_0 := M0.Statement.expr(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##0_0 := st#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##0_0 := stC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##0_0 := env#0;
        call {:id "id1219"} $rhs##0_0, $rhs##0_1, $rhs##0_2 := Call$$M0.__default.Lemma__Eval(expr##0_0, st##0_0, stC##0_0, env##0_0);
        // TrCallStmt: After ProcessCallStmt
        expr'#0_0 := $rhs##0_0;
        st'#0_0 := $rhs##0_1;
        defass#st'#0_0 := true;
        stC'#0_0 := $rhs##0_2;
        defass#stC'#0_0 := true;
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(760,7)
        ##expr#0_0 := expr'#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0_0, Tclass.M0.Expression(), $Heap);
        assume M0.__default.Value#canCall(expr'#0_0);
        assume M0.__default.Value#canCall(expr'#0_0);
        if (M0.__default.Value(expr'#0_0))
        {
            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(761,18)
            assume true;
            assert {:id "id1223"} defass#stmt#0;
            assert {:id "id1224"} M0.Statement.stmtVariable_q(stmt#0);
            ##id#0_0_0 := M0.Statement.id(stmt#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##id#0_0_0, Tclass.M0.Identifier(), $Heap);
            ##expr#0_0_0 := expr'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#0_0_0, Tclass.M0.Expression(), $Heap);
            ##env#0_0_0 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#0_0_0, Tclass.M0.Env(), $Heap);
            assert {:id "id1225"} {:subsumption 0} M0.__default.ValidEnv(##env#0_0_0);
            assert {:id "id1226"} {:subsumption 0} M0.__default.Value#canCall(##expr#0_0_0)
               ==> M0.__default.Value(##expr#0_0_0) || M0.Expression.exprLiteral_q(##expr#0_0_0);
            assume M0.__default.ValidEnv(##env#0_0_0) && M0.__default.Value(##expr#0_0_0);
            assume M0.__default.SetEnv#canCall(M0.Statement.id(stmt#0), expr'#0_0, env#0);
            assume M0.__default.SetEnv#canCall(M0.Statement.id(stmt#0), expr'#0_0, env#0);
            env'#0_0_0 := M0.__default.SetEnv(M0.Statement.id(stmt#0), expr'#0_0, env#0);
            defass#env'#0_0_0 := true;
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(762,9)
            assert {:id "id1228"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
            ##stmts#0_0_0 := Seq#Drop(stmts#0, LitInt(1));
            // assume allocatedness for argument to function
            assume $IsAlloc(##stmts#0_0_0, TSeq(Tclass.M0.Statement()), $Heap);
            assume M0.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
            assume M0.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
            if (M0.__default.Legal(Seq#Drop(stmts#0, LitInt(1))))
            {
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(763,31)
                assume true;
                assume true;
                // TrCallStmt: Adding lhs with type State
                // TrCallStmt: Adding lhs with type State
                // TrCallStmt: Before ProcessCallStmt
                assert {:id "id1229"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                stmts##0_0_0_0 := Seq#Drop(stmts#0, LitInt(1));
                assert {:id "id1230"} defass#st'#0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##0_0_0_0 := st'#0_0;
                assert {:id "id1231"} defass#stC'#0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                stC##0_0_0_0 := stC'#0_0;
                assert {:id "id1232"} defass#env'#0_0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                env##0_0_0_0 := env'#0_0_0;
                assert {:id "id1233"} Seq#Rank(stmts##0_0_0_0) < Seq#Rank(stmts#0);
                call {:id "id1234"} $rhs##0_0_0_0, $rhs##0_0_0_1 := Call$$M0.__default.Lemma__Do(stmts##0_0_0_0, st##0_0_0_0, stC##0_0_0_0, env##0_0_0_0);
                // TrCallStmt: After ProcessCallStmt
                _v24#0_0_0_0 := $rhs##0_0_0_0;
                defass#_v24#0_0_0_0 := true;
                _v25#0_0_0_0 := $rhs##0_0_0_1;
                defass#_v25#0_0_0_0 := true;
            }
            else
            {
            }
        }
        else
        {
        }
    }
    else
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(767,32)
        assume true;
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id1237"} defass#stmt#0;
        assert {:id "id1238"} M0.Statement.stmtReturn_q(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##1_0 := M0.Statement.ret(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##1_0 := st#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##1_0 := stC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_0 := env#0;
        call {:id "id1239"} $rhs##1_0, $rhs##1_1, $rhs##1_2 := Call$$M0.__default.Lemma__Eval(expr##1_0, st##1_0, stC##1_0, env##1_0);
        // TrCallStmt: After ProcessCallStmt
        _v26#1_0 := $rhs##1_0;
        _v27#1_0 := $rhs##1_1;
        defass#_v27#1_0 := true;
        _v28#1_0 := $rhs##1_2;
        defass#_v28#1_0 := true;
    }

    assert {:id "id1243"} defass#st'#0;
    assert {:id "id1244"} defass#stC'#0;
}



procedure {:verboseName "M0.Lemma_Eval (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__Eval(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap), 
    outSt#0: Box
       where $IsBox(outSt#0, Tclass.M0.State())
         && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap), 
    outStC#0: Box
       where $IsBox(outStC#0, Tclass.M0.State())
         && $IsAllocBox(outStC#0, Tclass.M0.State(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_Eval (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__Eval(expr#0: DatatypeType, st#0: Box, stC#0: Box, env#0: Box)
   returns (outExpr#0: DatatypeType, outSt#0: Box, outStC#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##env#0: Box;
  var ##st#1: Box;
  var ##stC#0: Box;
  var ##st#2: Box;
  var ##stC#1: Box;
  var ##expr#0: DatatypeType;
  var ##st#3: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##expr#1: DatatypeType;
  var ##st#4: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;
  var ##st#5: Box;
  var ##st#6: Box;
  var ##st'#0: Box;
  var ##st#7: Box;
  var ##st#8: Box;
  var ##st'#1: Box;
  var ##stC#2: Box;
  var ##st#9: Box;
  var ##stC#3: Box;


    // AddMethodImpl: Lemma_Eval, CheckWellFormed$$M0.__default.Lemma__Eval
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id1245"} M0.__default.ValidState(st#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id1246"} M0.__default.ValidEnv(env#0);
    ##st#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stC#0);
    assume {:id "id1247"} M0.__default.ValidState(stC#0);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id1248"} M0.__default.ConsistentCache(stC#0);
    ##st#2 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st#0, stC#0);
    assume {:id "id1249"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc outExpr#0, outSt#0, outStC#0;
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id1250"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.__default.ValidEnv(##env#1);
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
    assume {:id "id1251"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
      M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
    ##expr#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
    ##st#4 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
    ##useCache#1 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id1252"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
    assume M0.__default.ValidEnv(##env#2);
    assume M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
    assume {:id "id1253"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
      M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
    ##st#5 := outSt#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(outSt#0);
    assume {:id "id1254"} M0.__default.ValidState(outSt#0);
    ##st#6 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
    ##st'#0 := outSt#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
    assume M0.__default.Extends#canCall(st#0, outSt#0);
    assume {:id "id1255"} M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0);
    ##st#7 := outStC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(outStC#0);
    assume {:id "id1256"} M0.__default.ValidState(outStC#0);
    ##st#8 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#8, Tclass.M0.State(), $Heap);
    ##st'#1 := outStC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st'#1, Tclass.M0.State(), $Heap);
    assume M0.__default.Extends#canCall(stC#0, outStC#0);
    assume {:id "id1257"} M0.__default.Extends(reveal_M0._default.Extends, stC#0, outStC#0);
    ##stC#2 := outStC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#2, Tclass.M0.State(), $Heap);
    assume M0.__default.ConsistentCache#canCall(outStC#0);
    assume {:id "id1258"} M0.__default.ConsistentCache(outStC#0);
    ##st#9 := outSt#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#9, Tclass.M0.State(), $Heap);
    ##stC#3 := outStC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#3, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(outSt#0, outStC#0);
    assume {:id "id1259"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, outSt#0, outStC#0);
}



procedure {:verboseName "M0.Lemma_Eval (call)"} Call$$M0.__default.Lemma__Eval(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap), 
    outSt#0: Box
       where $IsBox(outSt#0, Tclass.M0.State())
         && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap), 
    outStC#0: Box
       where $IsBox(outStC#0, Tclass.M0.State())
         && $IsAllocBox(outStC#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id1260"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id1261"} M0.__default.ValidEnv(env#0);
  requires {:id "id1262"} M0.__default.ValidState#canCall(stC#0)
     ==> M0.__default.ValidState(stC#0)
       || (forall p#1: Box :: 
        { M0.__default.WellFounded(p#1) } 
          { Set#IsMember(M0.__default.DomSt(stC#0), p#1) } 
        $IsBox(p#1, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stC#0), p#1)
           ==> M0.__default.WellFounded(p#1));
  requires {:id "id1263"} M0.__default.ConsistentCache#canCall(stC#0)
     ==> M0.__default.ConsistentCache(stC#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stC#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id1264"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)))
     && M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false))
     && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
        M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)))
       ==> $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)))
         && M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true))
         && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
            M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)))
           ==> M0.__default.ValidState#canCall(outSt#0)
             && (M0.__default.ValidState(outSt#0)
               ==> M0.__default.Extends#canCall(st#0, outSt#0)
                 && (M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0)
                   ==> M0.__default.ValidState#canCall(outStC#0)
                     && (M0.__default.ValidState(outStC#0)
                       ==> M0.__default.Extends#canCall(stC#0, outStC#0)
                         && (M0.__default.Extends(reveal_M0._default.Extends, stC#0, outStC#0)
                           ==> M0.__default.ConsistentCache#canCall(outStC#0)
                             && (M0.__default.ConsistentCache(outStC#0)
                               ==> M0.__default.StateCorrespondence#canCall(outSt#0, outStC#0))))))));
  ensures {:id "id1265"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
    M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
  ensures {:id "id1266"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
    M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
  free ensures {:id "id1267"} M0.__default.ValidState#canCall(outSt#0)
     && 
    M0.__default.ValidState(outSt#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(outSt#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(outSt#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  ensures {:id "id1268"} M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0);
  free ensures {:id "id1269"} M0.__default.ValidState#canCall(outStC#0)
     && 
    M0.__default.ValidState(outStC#0)
     && (forall p#3: Box :: 
      { M0.__default.WellFounded(p#3) } 
        { Set#IsMember(M0.__default.DomSt(outStC#0), p#3) } 
      $IsBox(p#3, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(outStC#0), p#3)
         ==> M0.__default.WellFounded(p#3));
  ensures {:id "id1270"} M0.__default.Extends(reveal_M0._default.Extends, stC#0, outStC#0);
  free ensures {:id "id1271"} M0.__default.ConsistentCache#canCall(outStC#0)
     && 
    M0.__default.ConsistentCache(outStC#0)
     && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
      { M0.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, TSeq(TChar))
           && $Is(deps#1, TSet(Tclass.M0.Path()))
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(M0.__default.DomC(outStC#0), 
          M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(M0.__default.DomSt(outStC#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  ensures {:id "id1272"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, outSt#0, outStC#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_Eval (correctness)"} Impl$$M0.__default.Lemma__Eval(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap), 
    defass#outSt#0: bool, 
    outSt#0: Box
       where defass#outSt#0
         ==> $IsBox(outSt#0, Tclass.M0.State())
           && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap), 
    defass#outStC#0: bool, 
    outStC#0: Box
       where defass#outStC#0
         ==> $IsBox(outStC#0, Tclass.M0.State())
           && $IsAllocBox(outStC#0, Tclass.M0.State(), $Heap), 
    $_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1273"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#4: Box :: 
      { M0.__default.WellFounded(p#4) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#4) } 
      $IsBox(p#4, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#4)
         ==> M0.__default.WellFounded(p#4));
  requires {:id "id1274"} M0.__default.ValidEnv(env#0);
  free requires {:id "id1275"} M0.__default.ValidState#canCall(stC#0)
     && 
    M0.__default.ValidState(stC#0)
     && (forall p#5: Box :: 
      { M0.__default.WellFounded(p#5) } 
        { Set#IsMember(M0.__default.DomSt(stC#0), p#5) } 
      $IsBox(p#5, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stC#0), p#5)
         ==> M0.__default.WellFounded(p#5));
  free requires {:id "id1276"} M0.__default.ConsistentCache#canCall(stC#0)
     && 
    M0.__default.ConsistentCache(stC#0)
     && (forall cmd#2: Seq, deps#2: Set, e#2: Seq :: 
      { M0.__default.Loc(cmd#2, deps#2, e#2) } 
      $Is(cmd#2, TSeq(TChar))
           && $Is(deps#2, TSet(Tclass.M0.Path()))
           && $Is(e#2, TSeq(TChar))
         ==> 
        Set#IsMember(M0.__default.DomC(stC#0), 
          M0.__default.Hash(M0.__default.Loc(cmd#2, deps#2, e#2)))
         ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#2, deps#2, e#2)));
  requires {:id "id1277"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)))
     && M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false))
     && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
        M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)))
       ==> $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)))
         && M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true))
         && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
            M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)))
           ==> M0.__default.ValidState#canCall(outSt#0)
             && (M0.__default.ValidState(outSt#0)
               ==> M0.__default.Extends#canCall(st#0, outSt#0)
                 && (M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0)
                   ==> M0.__default.ValidState#canCall(outStC#0)
                     && (M0.__default.ValidState(outStC#0)
                       ==> M0.__default.Extends#canCall(stC#0, outStC#0)
                         && (M0.__default.Extends(reveal_M0._default.Extends, stC#0, outStC#0)
                           ==> M0.__default.ConsistentCache#canCall(outStC#0)
                             && (M0.__default.ConsistentCache(outStC#0)
                               ==> M0.__default.StateCorrespondence#canCall(outSt#0, outStC#0))))))));
  ensures {:id "id1278"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
    M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
  ensures {:id "id1279"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
    M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
  ensures {:id "id1280"} M0.__default.ValidState#canCall(outSt#0)
     ==> M0.__default.ValidState(outSt#0)
       || (forall p#6: Box :: 
        { M0.__default.WellFounded(p#6) } 
          { Set#IsMember(M0.__default.DomSt(outSt#0), p#6) } 
        $IsBox(p#6, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(outSt#0), p#6)
           ==> M0.__default.WellFounded(p#6));
  ensures {:id "id1281"} M0.__default.Extends(reveal_M0._default.Extends, st#0, outSt#0);
  ensures {:id "id1282"} M0.__default.ValidState#canCall(outStC#0)
     ==> M0.__default.ValidState(outStC#0)
       || (forall p#7: Box :: 
        { M0.__default.WellFounded(p#7) } 
          { Set#IsMember(M0.__default.DomSt(outStC#0), p#7) } 
        $IsBox(p#7, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(outStC#0), p#7)
           ==> M0.__default.WellFounded(p#7));
  ensures {:id "id1283"} M0.__default.Extends(reveal_M0._default.Extends, stC#0, outStC#0);
  ensures {:id "id1284"} M0.__default.ConsistentCache#canCall(outStC#0)
     ==> M0.__default.ConsistentCache(outStC#0)
       || (forall cmd#3: Seq, deps#3: Set, e#3: Seq :: 
        { M0.__default.Loc(cmd#3, deps#3, e#3) } 
        $Is(cmd#3, TSeq(TChar))
             && $Is(deps#3, TSet(Tclass.M0.Path()))
             && $Is(e#3, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(outStC#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#3, deps#3, e#3)))
           ==> Set#IsMember(M0.__default.DomSt(outStC#0), M0.__default.Loc(cmd#3, deps#3, e#3)));
  ensures {:id "id1285"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, outSt#0, outStC#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_Eval (correctness)"} Impl$$M0.__default.Lemma__Eval(expr#0: DatatypeType, st#0: Box, stC#0: Box, env#0: Box)
   returns (outExpr#0: DatatypeType, 
    defass#outSt#0: bool, 
    outSt#0: Box, 
    defass#outStC#0: bool, 
    outStC#0: Box, 
    $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var defass#result#0: bool;
  var result#0: DatatypeType
     where defass#result#0
       ==> $Is(result#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(result#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var defass#resultC#0: bool;
  var resultC#0: DatatypeType
     where defass#resultC#0
       ==> $Is(resultC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(resultC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var $rhs#0: DatatypeType;
  var ##expr#2: DatatypeType;
  var ##st#10: Box;
  var ##env#3: Box;
  var ##useCache#2: bool;
  var $rhs#1: DatatypeType;
  var ##expr#3: DatatypeType;
  var ##st#11: Box;
  var ##env#4: Box;
  var ##useCache#3: bool;
  var $rhs#2: DatatypeType;
  var $rhs#3: Box;
  var $rhs#4: Box;
  var ##expr#4: DatatypeType;
  var cond'#1_1_0_0: DatatypeType
     where $Is(cond'#1_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(cond'#1_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st'#1_1_0_0: bool;
  var st'#1_1_0_0: Box
     where defass#st'#1_1_0_0
       ==> $IsBox(st'#1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st'#1_1_0_0, Tclass.M0.State(), $Heap);
  var defass#stC'#1_1_0_0: bool;
  var stC'#1_1_0_0: Box
     where defass#stC'#1_1_0_0
       ==> $IsBox(stC'#1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(stC'#1_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_0_0: DatatypeType;
  var $rhs##1_1_0_1: Box;
  var $rhs##1_1_0_2: Box;
  var expr##1_1_0_0: DatatypeType;
  var st##1_1_0_0: Box;
  var stC##1_1_0_0: Box;
  var env##1_1_0_0: Box;
  var _v29#1_1_0_0_0: DatatypeType
     where $Is(_v29#1_1_0_0_0, Tclass.M0.Expression())
       && $IsAlloc(_v29#1_1_0_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st''#1_1_0_0_0: bool;
  var st''#1_1_0_0_0: Box
     where defass#st''#1_1_0_0_0
       ==> $IsBox(st''#1_1_0_0_0, Tclass.M0.State())
         && $IsAllocBox(st''#1_1_0_0_0, Tclass.M0.State(), $Heap);
  var defass#stC''#1_1_0_0_0: bool;
  var stC''#1_1_0_0_0: Box
     where defass#stC''#1_1_0_0_0
       ==> $IsBox(stC''#1_1_0_0_0, Tclass.M0.State())
         && $IsAllocBox(stC''#1_1_0_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_0_0_0: DatatypeType;
  var $rhs##1_1_0_0_1: Box;
  var $rhs##1_1_0_0_2: Box;
  var expr##1_1_0_0_0: DatatypeType;
  var st##1_1_0_0_0: Box;
  var stC##1_1_0_0_0: Box;
  var env##1_1_0_0_0: Box;
  var st0##1_1_0_0_0: Box;
  var st1##1_1_0_0_0: Box;
  var st2##1_1_0_0_0: Box;
  var st0##1_1_0_0_1: Box;
  var st1##1_1_0_0_1: Box;
  var st2##1_1_0_0_1: Box;
  var _v30#1_1_0_1_0_0: DatatypeType
     where $Is(_v30#1_1_0_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(_v30#1_1_0_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st''#1_1_0_1_0_0: bool;
  var st''#1_1_0_1_0_0: Box
     where defass#st''#1_1_0_1_0_0
       ==> $IsBox(st''#1_1_0_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st''#1_1_0_1_0_0, Tclass.M0.State(), $Heap);
  var defass#stC''#1_1_0_1_0_0: bool;
  var stC''#1_1_0_1_0_0: Box
     where defass#stC''#1_1_0_1_0_0
       ==> $IsBox(stC''#1_1_0_1_0_0, Tclass.M0.State())
         && $IsAllocBox(stC''#1_1_0_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_0_1_0_0: DatatypeType;
  var $rhs##1_1_0_1_0_1: Box;
  var $rhs##1_1_0_1_0_2: Box;
  var expr##1_1_0_1_0_0: DatatypeType;
  var st##1_1_0_1_0_0: Box;
  var stC##1_1_0_1_0_0: Box;
  var env##1_1_0_1_0_0: Box;
  var st0##1_1_0_1_0_0: Box;
  var st1##1_1_0_1_0_0: Box;
  var st2##1_1_0_1_0_0: Box;
  var st0##1_1_0_1_0_1: Box;
  var st1##1_1_0_1_0_1: Box;
  var st2##1_1_0_1_0_1: Box;
  var conj0'#1_1_1_0_0: DatatypeType
     where $Is(conj0'#1_1_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(conj0'#1_1_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st'#1_1_1_0_0: bool;
  var st'#1_1_1_0_0: Box
     where defass#st'#1_1_1_0_0
       ==> $IsBox(st'#1_1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st'#1_1_1_0_0, Tclass.M0.State(), $Heap);
  var defass#stC'#1_1_1_0_0: bool;
  var stC'#1_1_1_0_0: Box
     where defass#stC'#1_1_1_0_0
       ==> $IsBox(stC'#1_1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(stC'#1_1_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_0_0: DatatypeType;
  var $rhs##1_1_1_0_1: Box;
  var $rhs##1_1_1_0_2: Box;
  var expr##1_1_1_0_0: DatatypeType;
  var st##1_1_1_0_0: Box;
  var stC##1_1_1_0_0: Box;
  var env##1_1_1_0_0: Box;
  var _v31#1_1_1_0_0_0: DatatypeType
     where $Is(_v31#1_1_1_0_0_0, Tclass.M0.Expression())
       && $IsAlloc(_v31#1_1_1_0_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st''#1_1_1_0_0_0: bool;
  var st''#1_1_1_0_0_0: Box
     where defass#st''#1_1_1_0_0_0
       ==> $IsBox(st''#1_1_1_0_0_0, Tclass.M0.State())
         && $IsAllocBox(st''#1_1_1_0_0_0, Tclass.M0.State(), $Heap);
  var defass#stC''#1_1_1_0_0_0: bool;
  var stC''#1_1_1_0_0_0: Box
     where defass#stC''#1_1_1_0_0_0
       ==> $IsBox(stC''#1_1_1_0_0_0, Tclass.M0.State())
         && $IsAllocBox(stC''#1_1_1_0_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_0_0_0: DatatypeType;
  var $rhs##1_1_1_0_0_1: Box;
  var $rhs##1_1_1_0_0_2: Box;
  var expr##1_1_1_0_0_0: DatatypeType;
  var st##1_1_1_0_0_0: Box;
  var stC##1_1_1_0_0_0: Box;
  var env##1_1_1_0_0_0: Box;
  var st0##1_1_1_0_0_0: Box;
  var st1##1_1_1_0_0_0: Box;
  var st2##1_1_1_0_0_0: Box;
  var st0##1_1_1_0_0_1: Box;
  var st1##1_1_1_0_0_1: Box;
  var st2##1_1_1_0_0_1: Box;
  var disj0'#1_1_1_1_0_0: DatatypeType
     where $Is(disj0'#1_1_1_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(disj0'#1_1_1_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st'#1_1_1_1_0_0: bool;
  var st'#1_1_1_1_0_0: Box
     where defass#st'#1_1_1_1_0_0
       ==> $IsBox(st'#1_1_1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st'#1_1_1_1_0_0, Tclass.M0.State(), $Heap);
  var defass#stC'#1_1_1_1_0_0: bool;
  var stC'#1_1_1_1_0_0: Box
     where defass#stC'#1_1_1_1_0_0
       ==> $IsBox(stC'#1_1_1_1_0_0, Tclass.M0.State())
         && $IsAllocBox(stC'#1_1_1_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_1_0_0: DatatypeType;
  var $rhs##1_1_1_1_0_1: Box;
  var $rhs##1_1_1_1_0_2: Box;
  var expr##1_1_1_1_0_0: DatatypeType;
  var st##1_1_1_1_0_0: Box;
  var stC##1_1_1_1_0_0: Box;
  var env##1_1_1_1_0_0: Box;
  var _v32#1_1_1_1_0_1_0_0: DatatypeType
     where $Is(_v32#1_1_1_1_0_1_0_0, Tclass.M0.Expression())
       && $IsAlloc(_v32#1_1_1_1_0_1_0_0, Tclass.M0.Expression(), $Heap);
  var defass#st''#1_1_1_1_0_1_0_0: bool;
  var st''#1_1_1_1_0_1_0_0: Box
     where defass#st''#1_1_1_1_0_1_0_0
       ==> $IsBox(st''#1_1_1_1_0_1_0_0, Tclass.M0.State())
         && $IsAllocBox(st''#1_1_1_1_0_1_0_0, Tclass.M0.State(), $Heap);
  var defass#stC''#1_1_1_1_0_1_0_0: bool;
  var stC''#1_1_1_1_0_1_0_0: Box
     where defass#stC''#1_1_1_1_0_1_0_0
       ==> $IsBox(stC''#1_1_1_1_0_1_0_0, Tclass.M0.State())
         && $IsAllocBox(stC''#1_1_1_1_0_1_0_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_1_0_1_0_0: DatatypeType;
  var $rhs##1_1_1_1_0_1_0_1: Box;
  var $rhs##1_1_1_1_0_1_0_2: Box;
  var expr##1_1_1_1_0_1_0_0: DatatypeType;
  var st##1_1_1_1_0_1_0_0: Box;
  var stC##1_1_1_1_0_1_0_0: Box;
  var env##1_1_1_1_0_1_0_0: Box;
  var st0##1_1_1_1_0_1_0_0: Box;
  var st1##1_1_1_1_0_1_0_0: Box;
  var st2##1_1_1_1_0_1_0_0: Box;
  var st0##1_1_1_1_0_1_0_1: Box;
  var st1##1_1_1_1_0_1_0_1: Box;
  var st2##1_1_1_1_0_1_0_1: Box;
  var $rhs##1_1_1_1_1_0_0: DatatypeType;
  var $rhs##1_1_1_1_1_0_1: Box;
  var $rhs##1_1_1_1_1_0_2: Box;
  var expr##1_1_1_1_1_0_0: DatatypeType;
  var st##1_1_1_1_1_0_0: Box;
  var stC##1_1_1_1_1_0_0: Box;
  var env##1_1_1_1_1_0_0: Box;
  var expr##1_1_1_1_1_0_1: DatatypeType;
  var st##1_1_1_1_1_0_1: Box;
  var env##1_1_1_1_1_0_1: Box;
  var useCache##1_1_1_1_1_0_0: bool;
  var outExpr##1_1_1_1_1_0_0: DatatypeType;
  var outSt##1_1_1_1_1_0_0: Box;
  var expr##1_1_1_1_1_0_2: DatatypeType;
  var st##1_1_1_1_1_0_2: Box;
  var env##1_1_1_1_1_0_2: Box;
  var useCache##1_1_1_1_1_0_1: bool;
  var outExpr##1_1_1_1_1_0_1: DatatypeType;
  var outSt##1_1_1_1_1_0_1: Box;

    // AddMethodImpl: Lemma_Eval, Impl$$M0.__default.Lemma__Eval
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(784,25)
    assume true;
    assume true;
    ##expr#2 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#2, Tclass.M0.Expression(), $Heap);
    ##st#10 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#10, Tclass.M0.State(), $Heap);
    ##env#3 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#3, Tclass.M0.Env(), $Heap);
    ##useCache#2 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#2, TBool, $Heap);
    assert {:id "id1286"} {:subsumption 0} M0.__default.ValidEnv(##env#3);
    assume M0.__default.ValidEnv(##env#3);
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false));
    $rhs#0 := M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false));
    ##expr#3 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#3, Tclass.M0.Expression(), $Heap);
    ##st#11 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#11, Tclass.M0.State(), $Heap);
    ##env#4 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#4, Tclass.M0.Env(), $Heap);
    ##useCache#3 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#3, TBool, $Heap);
    assert {:id "id1288"} {:subsumption 0} M0.__default.ValidEnv(##env#4);
    assume M0.__default.ValidEnv(##env#4);
    assume M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
    assume M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true));
    $rhs#1 := M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true));
    result#0 := $rhs#0;
    defass#result#0 := true;
    resultC#0 := $rhs#1;
    defass#resultC#0 := true;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(785,28)
    assume true;
    assume true;
    assume true;
    assert {:id "id1292"} defass#result#0;
    assume M0.Tuple.Pair_q(result#0);
    assume M0.Tuple.Pair_q(result#0);
    $rhs#2 := $Unbox(M0.Tuple.fst(result#0)): DatatypeType;
    assert {:id "id1294"} defass#result#0;
    assume M0.Tuple.Pair_q(result#0);
    assume M0.Tuple.Pair_q(result#0);
    $rhs#3 := M0.Tuple.snd(result#0);
    assert {:id "id1296"} defass#resultC#0;
    assume M0.Tuple.Pair_q(resultC#0);
    assume M0.Tuple.Pair_q(resultC#0);
    $rhs#4 := M0.Tuple.snd(resultC#0);
    outExpr#0 := $rhs#2;
    outSt#0 := $rhs#3;
    defass#outSt#0 := true;
    outStC#0 := $rhs#4;
    defass#outStC#0 := true;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(786,5)
    ##expr#4 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#4, Tclass.M0.Expression(), $Heap);
    assume M0.__default.Value#canCall(expr#0);
    assume M0.__default.Value#canCall(expr#0);
    if (M0.__default.Value(expr#0))
    {
        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(787,7)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(787,14)
        // TrCallStmt: Before ProcessCallStmt
        call {:id "id1301"} Call$$M0.__default.reveal__eval();
        // TrCallStmt: After ProcessCallStmt
        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(788,7)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(788,14)
        // TrCallStmt: Before ProcessCallStmt
        call {:id "id1302"} Call$$M0.__default.reveal__Extends();
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(789,12)
        assume true;
        if (M0.Expression.exprIdentifier_q(expr#0))
        {
            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(790,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(790,14)
            // TrCallStmt: Before ProcessCallStmt
            call {:id "id1303"} Call$$M0.__default.reveal__eval();
            // TrCallStmt: After ProcessCallStmt
            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(791,7)
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(791,14)
            // TrCallStmt: Before ProcessCallStmt
            call {:id "id1304"} Call$$M0.__default.reveal__Extends();
            // TrCallStmt: After ProcessCallStmt
        }
        else
        {
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(792,12)
            assume true;
            if (M0.Expression.exprIf_q(expr#0))
            {
                // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(793,7)
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(793,14)
                // TrCallStmt: Before ProcessCallStmt
                call {:id "id1305"} Call$$M0.__default.reveal__eval();
                // TrCallStmt: After ProcessCallStmt
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(794,41)
                assume true;
                assume true;
                assume true;
                // TrCallStmt: Adding lhs with type Expression
                // TrCallStmt: Adding lhs with type State
                // TrCallStmt: Adding lhs with type State
                // TrCallStmt: Before ProcessCallStmt
                assert {:id "id1306"} M0.Expression.exprIf_q(expr#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                expr##1_1_0_0 := M0.Expression.cond(expr#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_0_0 := st#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                stC##1_1_0_0 := stC#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                env##1_1_0_0 := env#0;
                assert {:id "id1307"} DtRank(expr##1_1_0_0) < DtRank(expr#0);
                call {:id "id1308"} $rhs##1_1_0_0, $rhs##1_1_0_1, $rhs##1_1_0_2 := Call$$M0.__default.Lemma__Eval(expr##1_1_0_0, st##1_1_0_0, stC##1_1_0_0, env##1_1_0_0);
                // TrCallStmt: After ProcessCallStmt
                cond'#1_1_0_0 := $rhs##1_1_0_0;
                st'#1_1_0_0 := $rhs##1_1_0_1;
                defass#st'#1_1_0_0 := true;
                stC'#1_1_0_0 := $rhs##1_1_0_2;
                defass#stC'#1_1_0_0 := true;
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(795,7)
                if (M0.Expression.exprLiteral_q(cond'#1_1_0_0))
                {
                    assert {:id "id1312"} M0.Expression.exprLiteral_q(cond'#1_1_0_0);
                }

                assume M0.Expression.exprLiteral_q(cond'#1_1_0_0)
                   ==> $IsA#M0.Literal(M0.Expression.lit(cond'#1_1_0_0));
                if (M0.Expression.exprLiteral_q(cond'#1_1_0_0)
                   && M0.Literal#Equal(M0.Expression.lit(cond'#1_1_0_0), #M0.Literal.litTrue()))
                {
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(796,41)
                    assume true;
                    assume true;
                    assume true;
                    // TrCallStmt: Adding lhs with type Expression
                    // TrCallStmt: Adding lhs with type State
                    // TrCallStmt: Adding lhs with type State
                    // TrCallStmt: Before ProcessCallStmt
                    assert {:id "id1313"} M0.Expression.exprIf_q(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    expr##1_1_0_0_0 := M0.Expression.ifTrue(expr#0);
                    assert {:id "id1314"} defass#st'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_1_0_0_0 := st'#1_1_0_0;
                    assert {:id "id1315"} defass#stC'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    stC##1_1_0_0_0 := stC'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    env##1_1_0_0_0 := env#0;
                    assert {:id "id1316"} DtRank(expr##1_1_0_0_0) < DtRank(expr#0);
                    call {:id "id1317"} $rhs##1_1_0_0_0, $rhs##1_1_0_0_1, $rhs##1_1_0_0_2 := Call$$M0.__default.Lemma__Eval(expr##1_1_0_0_0, st##1_1_0_0_0, stC##1_1_0_0_0, env##1_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    _v29#1_1_0_0_0 := $rhs##1_1_0_0_0;
                    st''#1_1_0_0_0 := $rhs##1_1_0_0_1;
                    defass#st''#1_1_0_0_0 := true;
                    stC''#1_1_0_0_0 := $rhs##1_1_0_0_2;
                    defass#stC''#1_1_0_0_0 := true;
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(797,32)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_1_0_0_0 := st#0;
                    assert {:id "id1321"} defass#st'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_1_0_0_0 := st'#1_1_0_0;
                    assert {:id "id1322"} defass#st''#1_1_0_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st2##1_1_0_0_0 := st''#1_1_0_0_0;
                    call {:id "id1323"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_0_0_0, st1##1_1_0_0_0, st2##1_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(798,32)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_1_0_0_1 := stC#0;
                    assert {:id "id1324"} defass#stC'#1_1_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_1_0_0_1 := stC'#1_1_0_0;
                    assert {:id "id1325"} defass#stC''#1_1_0_0_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st2##1_1_0_0_1 := stC''#1_1_0_0_0;
                    call {:id "id1326"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_0_0_1, st1##1_1_0_0_1, st2##1_1_0_0_1);
                    // TrCallStmt: After ProcessCallStmt
                }
                else
                {
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(799,14)
                    if (M0.Expression.exprLiteral_q(cond'#1_1_0_0))
                    {
                        assert {:id "id1327"} M0.Expression.exprLiteral_q(cond'#1_1_0_0);
                    }

                    assume M0.Expression.exprLiteral_q(cond'#1_1_0_0)
                       ==> $IsA#M0.Literal(M0.Expression.lit(cond'#1_1_0_0));
                    if (M0.Expression.exprLiteral_q(cond'#1_1_0_0)
                       && M0.Literal#Equal(M0.Expression.lit(cond'#1_1_0_0), #M0.Literal.litFalse()))
                    {
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(800,41)
                        assume true;
                        assume true;
                        assume true;
                        // TrCallStmt: Adding lhs with type Expression
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Before ProcessCallStmt
                        assert {:id "id1328"} M0.Expression.exprIf_q(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        expr##1_1_0_1_0_0 := M0.Expression.ifFalse(expr#0);
                        assert {:id "id1329"} defass#st'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st##1_1_0_1_0_0 := st'#1_1_0_0;
                        assert {:id "id1330"} defass#stC'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        stC##1_1_0_1_0_0 := stC'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        env##1_1_0_1_0_0 := env#0;
                        assert {:id "id1331"} DtRank(expr##1_1_0_1_0_0) < DtRank(expr#0);
                        call {:id "id1332"} $rhs##1_1_0_1_0_0, $rhs##1_1_0_1_0_1, $rhs##1_1_0_1_0_2 := Call$$M0.__default.Lemma__Eval(expr##1_1_0_1_0_0, st##1_1_0_1_0_0, stC##1_1_0_1_0_0, env##1_1_0_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        _v30#1_1_0_1_0_0 := $rhs##1_1_0_1_0_0;
                        st''#1_1_0_1_0_0 := $rhs##1_1_0_1_0_1;
                        defass#st''#1_1_0_1_0_0 := true;
                        stC''#1_1_0_1_0_0 := $rhs##1_1_0_1_0_2;
                        defass#stC''#1_1_0_1_0_0 := true;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(801,32)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##1_1_0_1_0_0 := st#0;
                        assert {:id "id1336"} defass#st'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##1_1_0_1_0_0 := st'#1_1_0_0;
                        assert {:id "id1337"} defass#st''#1_1_0_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st2##1_1_0_1_0_0 := st''#1_1_0_1_0_0;
                        call {:id "id1338"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_0_1_0_0, st1##1_1_0_1_0_0, st2##1_1_0_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(802,32)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##1_1_0_1_0_1 := stC#0;
                        assert {:id "id1339"} defass#stC'#1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##1_1_0_1_0_1 := stC'#1_1_0_0;
                        assert {:id "id1340"} defass#stC''#1_1_0_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st2##1_1_0_1_0_1 := stC''#1_1_0_1_0_0;
                        call {:id "id1341"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_0_1_0_1, st1##1_1_0_1_0_1, st2##1_1_0_1_0_1);
                        // TrCallStmt: After ProcessCallStmt
                    }
                    else
                    {
                        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(804,9)
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(804,16)
                        // TrCallStmt: Before ProcessCallStmt
                        call {:id "id1342"} Call$$M0.__default.reveal__Extends();
                        // TrCallStmt: After ProcessCallStmt
                    }
                }
            }
            else
            {
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(806,12)
                assume true;
                if (M0.Expression.exprAnd_q(expr#0))
                {
                    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(807,7)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(807,14)
                    // TrCallStmt: Before ProcessCallStmt
                    call {:id "id1343"} Call$$M0.__default.reveal__eval();
                    // TrCallStmt: After ProcessCallStmt
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(808,42)
                    assume true;
                    assume true;
                    assume true;
                    // TrCallStmt: Adding lhs with type Expression
                    // TrCallStmt: Adding lhs with type State
                    // TrCallStmt: Adding lhs with type State
                    // TrCallStmt: Before ProcessCallStmt
                    assert {:id "id1344"} M0.Expression.exprAnd_q(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    expr##1_1_1_0_0 := M0.Expression.conj0(expr#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_1_1_0_0 := st#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    stC##1_1_1_0_0 := stC#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    env##1_1_1_0_0 := env#0;
                    assert {:id "id1345"} DtRank(expr##1_1_1_0_0) < DtRank(expr#0);
                    call {:id "id1346"} $rhs##1_1_1_0_0, $rhs##1_1_1_0_1, $rhs##1_1_1_0_2 := Call$$M0.__default.Lemma__Eval(expr##1_1_1_0_0, st##1_1_1_0_0, stC##1_1_1_0_0, env##1_1_1_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    conj0'#1_1_1_0_0 := $rhs##1_1_1_0_0;
                    st'#1_1_1_0_0 := $rhs##1_1_1_0_1;
                    defass#st'#1_1_1_0_0 := true;
                    stC'#1_1_1_0_0 := $rhs##1_1_1_0_2;
                    defass#stC'#1_1_1_0_0 := true;
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(809,7)
                    if (M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0))
                    {
                        assert {:id "id1350"} M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0);
                    }

                    assume M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                       ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#1_1_1_0_0));
                    if (M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                       && M0.Literal#Equal(M0.Expression.lit(conj0'#1_1_1_0_0), #M0.Literal.litTrue()))
                    {
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(810,41)
                        assume true;
                        assume true;
                        assume true;
                        // TrCallStmt: Adding lhs with type Expression
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Before ProcessCallStmt
                        assert {:id "id1351"} M0.Expression.exprAnd_q(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        expr##1_1_1_0_0_0 := M0.Expression.conj1(expr#0);
                        assert {:id "id1352"} defass#st'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st##1_1_1_0_0_0 := st'#1_1_1_0_0;
                        assert {:id "id1353"} defass#stC'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        stC##1_1_1_0_0_0 := stC'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        env##1_1_1_0_0_0 := env#0;
                        assert {:id "id1354"} DtRank(expr##1_1_1_0_0_0) < DtRank(expr#0);
                        call {:id "id1355"} $rhs##1_1_1_0_0_0, $rhs##1_1_1_0_0_1, $rhs##1_1_1_0_0_2 := Call$$M0.__default.Lemma__Eval(expr##1_1_1_0_0_0, st##1_1_1_0_0_0, stC##1_1_1_0_0_0, env##1_1_1_0_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        _v31#1_1_1_0_0_0 := $rhs##1_1_1_0_0_0;
                        st''#1_1_1_0_0_0 := $rhs##1_1_1_0_0_1;
                        defass#st''#1_1_1_0_0_0 := true;
                        stC''#1_1_1_0_0_0 := $rhs##1_1_1_0_0_2;
                        defass#stC''#1_1_1_0_0_0 := true;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(811,32)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##1_1_1_0_0_0 := st#0;
                        assert {:id "id1359"} defass#st'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##1_1_1_0_0_0 := st'#1_1_1_0_0;
                        assert {:id "id1360"} defass#st''#1_1_1_0_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st2##1_1_1_0_0_0 := st''#1_1_1_0_0_0;
                        call {:id "id1361"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_1_0_0_0, st1##1_1_1_0_0_0, st2##1_1_1_0_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(812,32)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##1_1_1_0_0_1 := stC#0;
                        assert {:id "id1362"} defass#stC'#1_1_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##1_1_1_0_0_1 := stC'#1_1_1_0_0;
                        assert {:id "id1363"} defass#stC''#1_1_1_0_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st2##1_1_1_0_0_1 := stC''#1_1_1_0_0_0;
                        call {:id "id1364"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_1_0_0_1, st1##1_1_1_0_0_1, st2##1_1_1_0_0_1);
                        // TrCallStmt: After ProcessCallStmt
                    }
                    else
                    {
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(813,14)
                        if (M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0))
                        {
                            assert {:id "id1365"} M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0);
                        }

                        assume M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                           ==> $IsA#M0.Literal(M0.Expression.lit(conj0'#1_1_1_0_0));
                        if (M0.Expression.exprLiteral_q(conj0'#1_1_1_0_0)
                           && M0.Literal#Equal(M0.Expression.lit(conj0'#1_1_1_0_0), #M0.Literal.litFalse()))
                        {
                        }
                        else
                        {
                            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(815,9)
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(815,16)
                            // TrCallStmt: Before ProcessCallStmt
                            call {:id "id1366"} Call$$M0.__default.reveal__Extends();
                            // TrCallStmt: After ProcessCallStmt
                        }
                    }
                }
                else
                {
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(817,12)
                    assume true;
                    if (M0.Expression.exprOr_q(expr#0))
                    {
                        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(818,7)
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(818,14)
                        // TrCallStmt: Before ProcessCallStmt
                        call {:id "id1367"} Call$$M0.__default.reveal__eval();
                        // TrCallStmt: After ProcessCallStmt
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(819,42)
                        assume true;
                        assume true;
                        assume true;
                        // TrCallStmt: Adding lhs with type Expression
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Adding lhs with type State
                        // TrCallStmt: Before ProcessCallStmt
                        assert {:id "id1368"} M0.Expression.exprOr_q(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        expr##1_1_1_1_0_0 := M0.Expression.disj0(expr#0);
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st##1_1_1_1_0_0 := st#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        stC##1_1_1_1_0_0 := stC#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        env##1_1_1_1_0_0 := env#0;
                        assert {:id "id1369"} DtRank(expr##1_1_1_1_0_0) < DtRank(expr#0);
                        call {:id "id1370"} $rhs##1_1_1_1_0_0, $rhs##1_1_1_1_0_1, $rhs##1_1_1_1_0_2 := Call$$M0.__default.Lemma__Eval(expr##1_1_1_1_0_0, st##1_1_1_1_0_0, stC##1_1_1_1_0_0, env##1_1_1_1_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        disj0'#1_1_1_1_0_0 := $rhs##1_1_1_1_0_0;
                        st'#1_1_1_1_0_0 := $rhs##1_1_1_1_0_1;
                        defass#st'#1_1_1_1_0_0 := true;
                        stC'#1_1_1_1_0_0 := $rhs##1_1_1_1_0_2;
                        defass#stC'#1_1_1_1_0_0 := true;
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(820,7)
                        if (M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0))
                        {
                            assert {:id "id1374"} M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0);
                        }

                        assume M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                           ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#1_1_1_1_0_0));
                        if (M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                           && M0.Literal#Equal(M0.Expression.lit(disj0'#1_1_1_1_0_0), #M0.Literal.litTrue()))
                        {
                        }
                        else
                        {
                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(821,14)
                            if (M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0))
                            {
                                assert {:id "id1375"} M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0);
                            }

                            assume M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                               ==> $IsA#M0.Literal(M0.Expression.lit(disj0'#1_1_1_1_0_0));
                            if (M0.Expression.exprLiteral_q(disj0'#1_1_1_1_0_0)
                               && M0.Literal#Equal(M0.Expression.lit(disj0'#1_1_1_1_0_0), #M0.Literal.litFalse()))
                            {
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(822,41)
                                assume true;
                                assume true;
                                assume true;
                                // TrCallStmt: Adding lhs with type Expression
                                // TrCallStmt: Adding lhs with type State
                                // TrCallStmt: Adding lhs with type State
                                // TrCallStmt: Before ProcessCallStmt
                                assert {:id "id1376"} M0.Expression.exprOr_q(expr#0);
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                expr##1_1_1_1_0_1_0_0 := M0.Expression.disj1(expr#0);
                                assert {:id "id1377"} defass#st'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st##1_1_1_1_0_1_0_0 := st'#1_1_1_1_0_0;
                                assert {:id "id1378"} defass#stC'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                stC##1_1_1_1_0_1_0_0 := stC'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                env##1_1_1_1_0_1_0_0 := env#0;
                                assert {:id "id1379"} DtRank(expr##1_1_1_1_0_1_0_0) < DtRank(expr#0);
                                call {:id "id1380"} $rhs##1_1_1_1_0_1_0_0, $rhs##1_1_1_1_0_1_0_1, $rhs##1_1_1_1_0_1_0_2 := Call$$M0.__default.Lemma__Eval(expr##1_1_1_1_0_1_0_0, st##1_1_1_1_0_1_0_0, stC##1_1_1_1_0_1_0_0, env##1_1_1_1_0_1_0_0);
                                // TrCallStmt: After ProcessCallStmt
                                _v32#1_1_1_1_0_1_0_0 := $rhs##1_1_1_1_0_1_0_0;
                                st''#1_1_1_1_0_1_0_0 := $rhs##1_1_1_1_0_1_0_1;
                                defass#st''#1_1_1_1_0_1_0_0 := true;
                                stC''#1_1_1_1_0_1_0_0 := $rhs##1_1_1_1_0_1_0_2;
                                defass#stC''#1_1_1_1_0_1_0_0 := true;
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(823,32)
                                // TrCallStmt: Before ProcessCallStmt
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st0##1_1_1_1_0_1_0_0 := st#0;
                                assert {:id "id1384"} defass#st'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st1##1_1_1_1_0_1_0_0 := st'#1_1_1_1_0_0;
                                assert {:id "id1385"} defass#st''#1_1_1_1_0_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st2##1_1_1_1_0_1_0_0 := st''#1_1_1_1_0_1_0_0;
                                call {:id "id1386"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_1_1_0_1_0_0, st1##1_1_1_1_0_1_0_0, st2##1_1_1_1_0_1_0_0);
                                // TrCallStmt: After ProcessCallStmt
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(824,32)
                                // TrCallStmt: Before ProcessCallStmt
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st0##1_1_1_1_0_1_0_1 := stC#0;
                                assert {:id "id1387"} defass#stC'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st1##1_1_1_1_0_1_0_1 := stC'#1_1_1_1_0_0;
                                assert {:id "id1388"} defass#stC''#1_1_1_1_0_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                st2##1_1_1_1_0_1_0_1 := stC''#1_1_1_1_0_1_0_0;
                                call {:id "id1389"} Call$$M0.__default.Lemma__ExtendsTransitive(st0##1_1_1_1_0_1_0_1, st1##1_1_1_1_0_1_0_1, st2##1_1_1_1_0_1_0_1);
                                // TrCallStmt: After ProcessCallStmt
                            }
                            else
                            {
                                // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(826,9)
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(826,16)
                                // TrCallStmt: Before ProcessCallStmt
                                call {:id "id1390"} Call$$M0.__default.reveal__Extends();
                                // TrCallStmt: After ProcessCallStmt
                            }
                        }
                    }
                    else
                    {
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(828,12)
                        assume true;
                        if (M0.Expression.exprInvocation_q(expr#0))
                        {
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(829,54)
                            assume true;
                            assume true;
                            assume true;
                            // TrCallStmt: Adding lhs with type Expression
                            // TrCallStmt: Adding lhs with type State
                            // TrCallStmt: Adding lhs with type State
                            // TrCallStmt: Before ProcessCallStmt
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            expr##1_1_1_1_1_0_0 := expr#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            st##1_1_1_1_1_0_0 := st#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            stC##1_1_1_1_1_0_0 := stC#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            env##1_1_1_1_1_0_0 := env#0;
                            assert {:id "id1391"} DtRank(expr##1_1_1_1_1_0_0) <= DtRank(expr#0);
                            call {:id "id1392"} $rhs##1_1_1_1_1_0_0, $rhs##1_1_1_1_1_0_1, $rhs##1_1_1_1_1_0_2 := Call$$M0.__default.Lemma__Eval__Invocation(expr##1_1_1_1_1_0_0, st##1_1_1_1_1_0_0, stC##1_1_1_1_1_0_0, env##1_1_1_1_1_0_0);
                            // TrCallStmt: After ProcessCallStmt
                            outExpr#0 := $rhs##1_1_1_1_1_0_0;
                            outSt#0 := $rhs##1_1_1_1_1_0_1;
                            defass#outSt#0 := true;
                            outStC#0 := $rhs##1_1_1_1_1_0_2;
                            defass#outStC#0 := true;
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(830,22)
                            // TrCallStmt: Before ProcessCallStmt
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            expr##1_1_1_1_1_0_1 := expr#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            st##1_1_1_1_1_0_1 := st#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            env##1_1_1_1_1_0_1 := env#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            useCache##1_1_1_1_1_0_0 := Lit(false);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            outExpr##1_1_1_1_1_0_0 := outExpr#0;
                            assert {:id "id1396"} defass#outSt#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            outSt##1_1_1_1_1_0_0 := outSt#0;
                            call {:id "id1397"} Call$$M0.__default.LittleEvalLemma(expr##1_1_1_1_1_0_1, st##1_1_1_1_1_0_1, env##1_1_1_1_1_0_1, useCache##1_1_1_1_1_0_0, outExpr##1_1_1_1_1_0_0, outSt##1_1_1_1_1_0_0);
                            // TrCallStmt: After ProcessCallStmt
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(831,22)
                            // TrCallStmt: Before ProcessCallStmt
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            expr##1_1_1_1_1_0_2 := expr#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            st##1_1_1_1_1_0_2 := stC#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            env##1_1_1_1_1_0_2 := env#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            useCache##1_1_1_1_1_0_1 := Lit(true);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            outExpr##1_1_1_1_1_0_1 := outExpr#0;
                            assert {:id "id1398"} defass#outStC#0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            outSt##1_1_1_1_1_0_1 := outStC#0;
                            call {:id "id1399"} Call$$M0.__default.LittleEvalLemma(expr##1_1_1_1_1_0_2, st##1_1_1_1_1_0_2, env##1_1_1_1_1_0_2, useCache##1_1_1_1_1_0_1, outExpr##1_1_1_1_1_0_1, outSt##1_1_1_1_1_0_1);
                            // TrCallStmt: After ProcessCallStmt
                        }
                        else
                        {
                            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(833,7)
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(833,14)
                            // TrCallStmt: Before ProcessCallStmt
                            call {:id "id1400"} Call$$M0.__default.reveal__eval();
                            // TrCallStmt: After ProcessCallStmt
                            // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(834,7)
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(834,14)
                            // TrCallStmt: Before ProcessCallStmt
                            call {:id "id1401"} Call$$M0.__default.reveal__Extends();
                            // TrCallStmt: After ProcessCallStmt
                        }
                    }
                }
            }
        }
    }

    assert {:id "id1402"} defass#outSt#0;
    assert {:id "id1403"} defass#outStC#0;
}



procedure {:verboseName "M0.Lemma_Eval_Invocation (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__Eval__Invocation(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap), 
    outSt#0: Box
       where $IsBox(outSt#0, Tclass.M0.State())
         && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap), 
    outStC#0: Box
       where $IsBox(outStC#0, Tclass.M0.State())
         && $IsAllocBox(outStC#0, Tclass.M0.State(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_Eval_Invocation (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__Eval__Invocation(expr#0: DatatypeType, st#0: Box, stC#0: Box, env#0: Box)
   returns (outExpr#0: DatatypeType, outSt#0: Box, outStC#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##env#0: Box;
  var ##st#1: Box;
  var ##stC#0: Box;
  var ##st#2: Box;
  var ##stC#1: Box;
  var ##expr#0: DatatypeType;
  var ##st#3: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##expr#1: DatatypeType;
  var ##st#4: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;
  var ##st#5: Box;
  var ##stC#2: Box;


    // AddMethodImpl: Lemma_Eval_Invocation, CheckWellFormed$$M0.__default.Lemma__Eval__Invocation
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id1404"} M0.Expression.exprInvocation_q(expr#0);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id1405"} M0.__default.ValidState(st#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id1406"} M0.__default.ValidEnv(env#0);
    ##st#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stC#0);
    assume {:id "id1407"} M0.__default.ValidState(stC#0);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id1408"} M0.__default.ConsistentCache(stC#0);
    ##st#2 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st#0, stC#0);
    assume {:id "id1409"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc outExpr#0, outSt#0, outStC#0;
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass.M0.Expression(), $Heap);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id1410"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assume M0.__default.ValidEnv(##env#1);
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
    assume {:id "id1411"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
      M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
    ##expr#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#1, Tclass.M0.Expression(), $Heap);
    ##st#4 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
    ##useCache#1 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id1412"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
    assume M0.__default.ValidEnv(##env#2);
    assume M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
    assume {:id "id1413"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
      M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
    ##st#5 := outSt#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
    ##stC#2 := outStC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#2, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(outSt#0, outStC#0);
    assume {:id "id1414"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, outSt#0, outStC#0);
}



procedure {:verboseName "M0.Lemma_Eval_Invocation (call)"} Call$$M0.__default.Lemma__Eval__Invocation(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap), 
    outSt#0: Box
       where $IsBox(outSt#0, Tclass.M0.State())
         && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap), 
    outStC#0: Box
       where $IsBox(outStC#0, Tclass.M0.State())
         && $IsAllocBox(outStC#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id1415"} M0.Expression.exprInvocation_q(expr#0);
  requires {:id "id1416"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id1417"} M0.__default.ValidEnv(env#0);
  requires {:id "id1418"} M0.__default.ValidState#canCall(stC#0)
     ==> M0.__default.ValidState(stC#0)
       || (forall p#1: Box :: 
        { M0.__default.WellFounded(p#1) } 
          { Set#IsMember(M0.__default.DomSt(stC#0), p#1) } 
        $IsBox(p#1, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stC#0), p#1)
           ==> M0.__default.WellFounded(p#1));
  requires {:id "id1419"} M0.__default.ConsistentCache#canCall(stC#0)
     ==> M0.__default.ConsistentCache(stC#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stC#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id1420"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)))
     && M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false))
     && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
        M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)))
       ==> $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)))
         && M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true))
         && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
            M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)))
           ==> M0.__default.StateCorrespondence#canCall(outSt#0, outStC#0)));
  ensures {:id "id1421"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
    M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
  ensures {:id "id1422"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
    M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
  ensures {:id "id1423"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, outSt#0, outStC#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_Eval_Invocation (correctness)"} Impl$$M0.__default.Lemma__Eval__Invocation(expr#0: DatatypeType
       where $Is(expr#0, Tclass.M0.Expression())
         && $IsAlloc(expr#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(expr#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (outExpr#0: DatatypeType
       where $Is(outExpr#0, Tclass.M0.Expression())
         && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap), 
    defass#outSt#0: bool, 
    outSt#0: Box
       where defass#outSt#0
         ==> $IsBox(outSt#0, Tclass.M0.State())
           && $IsAllocBox(outSt#0, Tclass.M0.State(), $Heap), 
    defass#outStC#0: bool, 
    outStC#0: Box
       where defass#outStC#0
         ==> $IsBox(outStC#0, Tclass.M0.State())
           && $IsAllocBox(outStC#0, Tclass.M0.State(), $Heap), 
    $_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id1424"} M0.Expression.exprInvocation_q(expr#0);
  free requires {:id "id1425"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  requires {:id "id1426"} M0.__default.ValidEnv(env#0);
  free requires {:id "id1427"} M0.__default.ValidState#canCall(stC#0)
     && 
    M0.__default.ValidState(stC#0)
     && (forall p#3: Box :: 
      { M0.__default.WellFounded(p#3) } 
        { Set#IsMember(M0.__default.DomSt(stC#0), p#3) } 
      $IsBox(p#3, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stC#0), p#3)
         ==> M0.__default.WellFounded(p#3));
  free requires {:id "id1428"} M0.__default.ConsistentCache#canCall(stC#0)
     && 
    M0.__default.ConsistentCache(stC#0)
     && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
      { M0.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, TSeq(TChar))
           && $Is(deps#1, TSet(Tclass.M0.Path()))
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(M0.__default.DomC(stC#0), 
          M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(M0.__default.DomSt(stC#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  requires {:id "id1429"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)))
     && M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false))
     && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
        M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)))
       ==> $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)))
         && M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true))
         && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
            M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)))
           ==> M0.__default.StateCorrespondence#canCall(outSt#0, outStC#0)));
  ensures {:id "id1430"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
    M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
  ensures {:id "id1431"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outStC#0), 
    M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
  ensures {:id "id1432"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, outSt#0, outStC#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_Eval_Invocation (correctness)"} Impl$$M0.__default.Lemma__Eval__Invocation(expr#0: DatatypeType, st#0: Box, stC#0: Box, env#0: Box)
   returns (outExpr#0: DatatypeType, 
    defass#outSt#0: bool, 
    outSt#0: Box, 
    defass#outStC#0: bool, 
    outStC#0: Box, 
    $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var tri#0: DatatypeType
     where $Is(tri#0, 
        Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
       && $IsAlloc(tri#0, 
        Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
        $Heap);
  var ##expr#2: DatatypeType;
  var ##st#6: Box;
  var ##env#3: Box;
  var ##useCache#2: bool;
  var fun'#0: DatatypeType
     where $Is(fun'#0, Tclass.M0.Expression())
       && $IsAlloc(fun'#0, Tclass.M0.Expression(), $Heap);
  var args'#0: Seq
     where $Is(args'#0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(args'#0, TSeq(Tclass.M0.Expression()), $Heap);
  var sts''#0: Set
     where $Is(sts''#0, TSet(Tclass.M0.State()))
       && $IsAlloc(sts''#0, TSet(Tclass.M0.State()), $Heap);
  var $rhs#0: DatatypeType;
  var $rhs#1: Seq;
  var $rhs#2: Set;
  var defass#p#4: bool;
  var p#4: DatatypeType
     where defass#p#4
       ==> $Is(p#4, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(p#4, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var ##stOrig#0: Box;
  var ##sts#0: Set;
  var ##fun#0: DatatypeType;
  var ##args#0: Seq;
  var ##useCache#3: bool;
  var triC#0: DatatypeType
     where $Is(triC#0, 
        Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())))
       && $IsAlloc(triC#0, 
        Tclass.M0.Triple(Tclass.M0.Expression(), TSeq(Tclass.M0.Expression()), TSet(Tclass.M0.State())), 
        $Heap);
  var ##expr#3: DatatypeType;
  var ##st#7: Box;
  var ##env#4: Box;
  var ##useCache#4: bool;
  var funC'#0: DatatypeType
     where $Is(funC'#0, Tclass.M0.Expression())
       && $IsAlloc(funC'#0, Tclass.M0.Expression(), $Heap);
  var argsC'#0: Seq
     where $Is(argsC'#0, TSeq(Tclass.M0.Expression()))
       && $IsAlloc(argsC'#0, TSeq(Tclass.M0.Expression()), $Heap);
  var stsC''#0: Set
     where $Is(stsC''#0, TSet(Tclass.M0.State()))
       && $IsAlloc(stsC''#0, TSet(Tclass.M0.State()), $Heap);
  var $rhs#3: DatatypeType;
  var $rhs#4: Seq;
  var $rhs#5: Set;
  var defass#pC#0: bool;
  var pC#0: DatatypeType
     where defass#pC#0
       ==> $Is(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var ##stOrig#1: Box;
  var ##sts#1: Set;
  var ##fun#1: DatatypeType;
  var ##args#1: Seq;
  var ##useCache#5: bool;
  var $rhs#6: DatatypeType;
  var $rhs#7: Box;
  var $rhs#8: Box;
  var outExprC#0: DatatypeType
     where $Is(outExprC#0, Tclass.M0.Expression())
       && $IsAlloc(outExprC#0, Tclass.M0.Expression(), $Heap);
  var expr##0: DatatypeType;
  var st##0: Box;
  var env##0: Box;
  var useCache##0: bool;
  var expr##1: DatatypeType;
  var st##1: Box;
  var env##1: Box;
  var useCache##1: bool;
  var ##expr#4: DatatypeType;
  var ##st#8: Box;
  var ##env#5: Box;
  var ##useCache#6: bool;
  var ##expr#5: DatatypeType;
  var ##st#9: Box;
  var ##env#6: Box;
  var ##useCache#7: bool;
  var expr##2: DatatypeType;
  var st##2: Box;
  var env##2: Box;
  var useCache##2: bool;
  var sts''##0: Set;
  var ##sts#2: Set;
  var expr##3: DatatypeType;
  var st##3: Box;
  var env##3: Box;
  var useCache##3: bool;
  var sts''##1: Set;
  var ##sts#3: Set;
  var expr##4: DatatypeType;
  var st##4: Box;
  var stC##0: Box;
  var env##4: Box;
  var p##0: DatatypeType;
  var pC##0: DatatypeType;
  var expr##5: DatatypeType;
  var st##5: Box;
  var stC##1: Box;
  var env##5: Box;
  var p##1: DatatypeType;
  var pC##1: DatatypeType;
  var p##2: DatatypeType;
  var st##6: Box;
  var sts''##2: Set;
  var pC##2: DatatypeType;
  var stC##2: Box;
  var stsC''##0: Set;
  var fun##0: DatatypeType;
  var args##0: Seq;
  var stOrig##0: Box;
  var sts##0: Set;
  var stOrigC##0: Box;
  var stsC##0: Set;
  var fun##1: DatatypeType;
  var args##1: Seq;

    // AddMethodImpl: Lemma_Eval_Invocation, Impl$$M0.__default.Lemma__Eval__Invocation
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(850,13)
    assume true;
    ##expr#2 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#2, Tclass.M0.Expression(), $Heap);
    ##st#6 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
    ##env#3 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#3, Tclass.M0.Env(), $Heap);
    ##useCache#2 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#2, TBool, $Heap);
    assert {:id "id1433"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#2);
    assert {:id "id1434"} {:subsumption 0} M0.__default.ValidEnv(##env#3);
    assume M0.Expression.exprInvocation_q(##expr#2) && M0.__default.ValidEnv(##env#3);
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false)));
    assume M0.__default.evalFunArgs#canCall(expr#0, st#0, env#0, Lit(false));
    tri#0 := M0.__default.evalFunArgs(expr#0, st#0, env#0, Lit(false));
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(851,28)
    assume true;
    assume true;
    assume true;
    assume M0.Triple.Tri_q(tri#0);
    assume M0.Triple.Tri_q(tri#0);
    $rhs#0 := $Unbox(M0.Triple._0(tri#0)): DatatypeType;
    assume M0.Triple.Tri_q(tri#0);
    assume M0.Triple.Tri_q(tri#0);
    $rhs#1 := $Unbox(M0.Triple._1(tri#0)): Seq;
    assume M0.Triple.Tri_q(tri#0);
    assume M0.Triple.Tri_q(tri#0);
    $rhs#2 := $Unbox(M0.Triple._2(tri#0)): Set;
    fun'#0 := $rhs#0;
    args'#0 := $rhs#1;
    sts''#0 := $rhs#2;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(852,11)
    assume true;
    ##stOrig#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
    ##sts#0 := sts''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    ##fun#0 := fun'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##fun#0, Tclass.M0.Expression(), $Heap);
    ##args#0 := args'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
    ##useCache#3 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#3, TBool, $Heap);
    assert {:id "id1442"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
    assume !Set#Equal(##sts#0, Set#Empty(): Set);
    assume M0.__default.evalCompatCheckCore#canCall(st#0, sts''#0, fun'#0, args'#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(st#0, sts''#0, fun'#0, args'#0, Lit(false)));
    assume M0.__default.evalCompatCheckCore#canCall(st#0, sts''#0, fun'#0, args'#0, Lit(false));
    p#4 := M0.__default.evalCompatCheckCore(st#0, sts''#0, fun'#0, args'#0, Lit(false));
    defass#p#4 := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(854,14)
    assume true;
    ##expr#3 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#3, Tclass.M0.Expression(), $Heap);
    ##st#7 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
    ##env#4 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#4, Tclass.M0.Env(), $Heap);
    ##useCache#4 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#4, TBool, $Heap);
    assert {:id "id1444"} {:subsumption 0} M0.Expression.exprInvocation_q(##expr#3);
    assert {:id "id1445"} {:subsumption 0} M0.__default.ValidEnv(##env#4);
    assume M0.Expression.exprInvocation_q(##expr#3) && M0.__default.ValidEnv(##env#4);
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Triple.Tri_q(M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true)));
    assume M0.__default.evalFunArgs#canCall(expr#0, stC#0, env#0, Lit(true));
    triC#0 := M0.__default.evalFunArgs(expr#0, stC#0, env#0, Lit(true));
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(855,31)
    assume true;
    assume true;
    assume true;
    assume M0.Triple.Tri_q(triC#0);
    assume M0.Triple.Tri_q(triC#0);
    $rhs#3 := $Unbox(M0.Triple._0(triC#0)): DatatypeType;
    assume M0.Triple.Tri_q(triC#0);
    assume M0.Triple.Tri_q(triC#0);
    $rhs#4 := $Unbox(M0.Triple._1(triC#0)): Seq;
    assume M0.Triple.Tri_q(triC#0);
    assume M0.Triple.Tri_q(triC#0);
    $rhs#5 := $Unbox(M0.Triple._2(triC#0)): Set;
    funC'#0 := $rhs#3;
    argsC'#0 := $rhs#4;
    stsC''#0 := $rhs#5;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(856,12)
    assume true;
    ##stOrig#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#1, Tclass.M0.State(), $Heap);
    ##sts#1 := stsC''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
    ##fun#1 := funC'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##fun#1, Tclass.M0.Expression(), $Heap);
    ##args#1 := argsC'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#1, TSeq(Tclass.M0.Expression()), $Heap);
    ##useCache#5 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#5, TBool, $Heap);
    assert {:id "id1453"} {:subsumption 0} !Set#Equal(##sts#1, Set#Empty(): Set);
    assume !Set#Equal(##sts#1, Set#Empty(): Set);
    assume M0.__default.evalCompatCheckCore#canCall(stC#0, stsC''#0, funC'#0, argsC'#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stC#0, stsC''#0, funC'#0, argsC'#0, Lit(true)));
    assume M0.__default.evalCompatCheckCore#canCall(stC#0, stsC''#0, funC'#0, argsC'#0, Lit(true));
    pC#0 := M0.__default.evalCompatCheckCore(stC#0, stsC''#0, funC'#0, argsC'#0, Lit(true));
    defass#pC#0 := true;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(858,28)
    assume true;
    assume true;
    assume true;
    assert {:id "id1455"} defass#p#4;
    assume M0.Tuple.Pair_q(p#4);
    assume M0.Tuple.Pair_q(p#4);
    $rhs#6 := $Unbox(M0.Tuple.fst(p#4)): DatatypeType;
    assert {:id "id1457"} defass#p#4;
    assume M0.Tuple.Pair_q(p#4);
    assume M0.Tuple.Pair_q(p#4);
    $rhs#7 := M0.Tuple.snd(p#4);
    assert {:id "id1459"} defass#pC#0;
    assume M0.Tuple.Pair_q(pC#0);
    assume M0.Tuple.Pair_q(pC#0);
    $rhs#8 := M0.Tuple.snd(pC#0);
    outExpr#0 := $rhs#6;
    outSt#0 := $rhs#7;
    defass#outSt#0 := true;
    outStC#0 := $rhs#8;
    defass#outStC#0 := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(859,18)
    assume true;
    assert {:id "id1464"} defass#pC#0;
    assume M0.Tuple.Pair_q(pC#0);
    assume M0.Tuple.Pair_q(pC#0);
    outExprC#0 := $Unbox(M0.Tuple.fst(pC#0)): DatatypeType;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(861,20)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##0 := expr#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##0 := env#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##0 := Lit(false);
    call {:id "id1466"} Call$$M0.__default.Equiv__SuperCore(expr##0, st##0, env##0, useCache##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(862,20)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##1 := expr#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##1 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##1 := env#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##1 := Lit(true);
    call {:id "id1467"} Call$$M0.__default.Equiv__SuperCore(expr##1, st##1, env##1, useCache##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(863,5)
    assert {:id "id1468"} defass#outSt#0;
    ##expr#4 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#4, Tclass.M0.Expression(), $Heap);
    ##st#8 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#8, Tclass.M0.State(), $Heap);
    ##env#5 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#5, Tclass.M0.Env(), $Heap);
    ##useCache#6 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#6, TBool, $Heap);
    assert {:id "id1469"} {:subsumption 0} M0.__default.ValidEnv(##env#5);
    assume M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
    assume $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)))
       && M0.__default.eval#canCall(expr#0, st#0, env#0, Lit(false));
    assert {:id "id1470"} {:subsumption 0} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
      M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
    assume {:id "id1471"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExpr#0), outSt#0), 
      M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, st#0, env#0, Lit(false)));
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(864,5)
    assert {:id "id1472"} defass#outStC#0;
    ##expr#5 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#5, Tclass.M0.Expression(), $Heap);
    ##st#9 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#9, Tclass.M0.State(), $Heap);
    ##env#6 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#6, Tclass.M0.Env(), $Heap);
    ##useCache#7 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#7, TBool, $Heap);
    assert {:id "id1473"} {:subsumption 0} M0.__default.ValidEnv(##env#6);
    assume M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
    assume $IsA#M0.Tuple(M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)))
       && M0.__default.eval#canCall(expr#0, stC#0, env#0, Lit(true));
    assert {:id "id1474"} {:subsumption 0} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExprC#0), outStC#0), 
      M0.__default.eval($LS($LS($LZ)), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
    assume {:id "id1475"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(outExprC#0), outStC#0), 
      M0.__default.eval($LS($LZ), reveal_M0._default.eval, expr#0, stC#0, env#0, Lit(true)));
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(866,22)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##2 := expr#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##2 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##2 := env#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##2 := Lit(false);
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts''##0 := sts''#0;
    call {:id "id1476"} Call$$M0.__default.Lemma__EvalFunArgs(expr##2, st##2, env##2, useCache##2, sts''##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(867,5)
    ##sts#2 := sts''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#2, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(sts''#0);
    assume M0.__default.Compatible#canCall(sts''#0);
    assert {:id "id1477"} {:subsumption 0} M0.__default.Compatible#canCall(sts''#0)
       ==> M0.__default.Compatible(sts''#0)
         || (forall st#1: Box, st'#0: Box :: 
          { M0.__default.DomSt(st'#0), M0.__default.DomSt(st#1) } 
            { M0.__default.DomSt(st'#0), Set#IsMember(sts''#0, st#1) } 
            { M0.__default.DomSt(st#1), Set#IsMember(sts''#0, st'#0) } 
            { Set#IsMember(sts''#0, st'#0), Set#IsMember(sts''#0, st#1) } 
          $IsBox(st#1, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
             ==> 
            Set#IsMember(sts''#0, st#1) && Set#IsMember(sts''#0, st'#0)
             ==> (forall p#5: Box :: 
              { M0.__default.GetSt(p#5, st'#0) } 
                { M0.__default.GetSt(p#5, st#1) } 
                { Set#IsMember(M0.__default.DomSt(st'#0), p#5) } 
                { Set#IsMember(M0.__default.DomSt(st#1), p#5) } 
              $IsBox(p#5, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(st#1), p#5)
                   && Set#IsMember(M0.__default.DomSt(st'#0), p#5)
                 ==> M0.__default.GetSt(p#5, st#1) == M0.__default.GetSt(p#5, st'#0)));
    assume {:id "id1478"} M0.__default.Compatible(sts''#0);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(868,22)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##3 := expr#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##3 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##3 := env#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##3 := Lit(true);
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts''##1 := stsC''#0;
    call {:id "id1479"} Call$$M0.__default.Lemma__EvalFunArgs(expr##3, st##3, env##3, useCache##3, sts''##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(869,5)
    ##sts#3 := stsC''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#3, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(stsC''#0);
    assume M0.__default.Compatible#canCall(stsC''#0);
    assert {:id "id1480"} {:subsumption 0} M0.__default.Compatible#canCall(stsC''#0)
       ==> M0.__default.Compatible(stsC''#0)
         || (forall st#2: Box, st'#1: Box :: 
          { M0.__default.DomSt(st'#1), M0.__default.DomSt(st#2) } 
            { M0.__default.DomSt(st'#1), Set#IsMember(stsC''#0, st#2) } 
            { M0.__default.DomSt(st#2), Set#IsMember(stsC''#0, st'#1) } 
            { Set#IsMember(stsC''#0, st'#1), Set#IsMember(stsC''#0, st#2) } 
          $IsBox(st#2, Tclass.M0.State()) && $IsBox(st'#1, Tclass.M0.State())
             ==> 
            Set#IsMember(stsC''#0, st#2) && Set#IsMember(stsC''#0, st'#1)
             ==> (forall p#6: Box :: 
              { M0.__default.GetSt(p#6, st'#1) } 
                { M0.__default.GetSt(p#6, st#2) } 
                { Set#IsMember(M0.__default.DomSt(st'#1), p#6) } 
                { Set#IsMember(M0.__default.DomSt(st#2), p#6) } 
              $IsBox(p#6, Tclass.M0.Path())
                 ==> 
                Set#IsMember(M0.__default.DomSt(st#2), p#6)
                   && Set#IsMember(M0.__default.DomSt(st'#1), p#6)
                 ==> M0.__default.GetSt(p#6, st#2) == M0.__default.GetSt(p#6, st'#1)));
    assume {:id "id1481"} M0.__default.Compatible(stsC''#0);
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(871,31)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##4 := expr#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##4 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##0 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##4 := env#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    p##0 := tri#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    pC##0 := triC#0;
    assert {:id "id1482"} 0 <= LitInt(1) || DtRank(expr##4) < DtRank(expr#0) || LitInt(0) == LitInt(1);
    assert {:id "id1483"} DtRank(expr##4) < DtRank(expr#0)
       || (DtRank(expr##4) == DtRank(expr#0) && LitInt(0) < LitInt(1));
    call {:id "id1484"} Call$$M0.__default.Lemma__EvalFunArgs__TwoState(expr##4, st##4, stC##0, env##4, p##0, pC##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(872,51)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##5 := expr#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##5 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##1 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##5 := env#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    p##1 := tri#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    pC##1 := triC#0;
    assert {:id "id1485"} 0 <= LitInt(1) || DtRank(expr##5) < DtRank(expr#0) || LitInt(0) == LitInt(1);
    assert {:id "id1486"} DtRank(expr##5) < DtRank(expr#0)
       || (DtRank(expr##5) == DtRank(expr#0) && LitInt(0) < LitInt(1));
    call {:id "id1487"} Call$$M0.__default.Lemma__EvalFunArgs__TwoState__StateCorrespondence(expr##5, st##5, stC##1, env##5, p##1, pC##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(873,17)
    // TrCallStmt: Before ProcessCallStmt
    assert {:id "id1488"} defass#p#4;
    assume true;
    // ProcessCallStmt: CheckSubrange
    p##2 := p#4;
    assume true;
    // ProcessCallStmt: CheckSubrange
    st##6 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts''##2 := sts''#0;
    assert {:id "id1489"} defass#pC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    pC##2 := pC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##2 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stsC''##0 := stsC''#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    fun##0 := fun'#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    args##0 := args'#0;
    call {:id "id1490"} Call$$M0.__default.Continuation(p##2, st##6, sts''##2, pC##2, stC##2, stsC''##0, fun##0, args##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(875,40)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrig##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts##0 := sts''#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stOrigC##0 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stsC##0 := stsC''#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    fun##1 := funC'#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    args##1 := argsC'#0;
    call {:id "id1491"} Call$$M0.__default.CompatCheckCore__StateCorrespondence(stOrig##0, sts##0, stOrigC##0, stsC##0, fun##1, args##1);
    // TrCallStmt: After ProcessCallStmt
    assert {:id "id1492"} defass#outSt#0;
    assert {:id "id1493"} defass#outStC#0;
}



procedure {:verboseName "M0.CompatCheckCore_StateCorrespondence (well-formedness)"} CheckWellFormed$$M0.__default.CompatCheckCore__StateCorrespondence(stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    stOrigC#0: Box
       where $IsBox(stOrigC#0, Tclass.M0.State())
         && $IsAllocBox(stOrigC#0, Tclass.M0.State(), $Heap), 
    stsC#0: Set
       where $Is(stsC#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC#0, TSet(Tclass.M0.State()), $Heap), 
    fun#0: DatatypeType
       where $Is(fun#0, Tclass.M0.Expression())
         && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(fun#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.CompatCheckCore_StateCorrespondence (well-formedness)"} CheckWellFormed$$M0.__default.CompatCheckCore__StateCorrespondence(stOrig#0: Box, 
    sts#0: Set, 
    stOrigC#0: Box, 
    stsC#0: Set, 
    fun#0: DatatypeType, 
    args#0: Seq)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##st#2: Box;
  var ##stC#0: Box;
  var ##sts#0: Set;
  var ##sts#1: Set;
  var s#0: Box;
  var ##st#3: Box;
  var ##st#4: Box;
  var ##st'#0: Box;
  var s#2: Box;
  var ##st#5: Box;
  var ##st#6: Box;
  var ##st'#1: Box;
  var ##stC#1: Box;
  var ##st#7: Box;
  var ##sts#2: Set;
  var ##useCache#0: bool;
  var ##stC#2: Box;
  var ##sts#3: Set;
  var ##useCache#1: bool;
  var ##st#8: Box;
  var ##stOrig#0: Box;
  var ##sts#4: Set;
  var ##fun#0: DatatypeType;
  var ##args#0: Seq;
  var ##useCache#2: bool;
  var ##stC#3: Box;
  var ##stOrig#1: Box;
  var ##sts#5: Set;
  var ##fun#1: DatatypeType;
  var ##args#1: Seq;
  var ##useCache#3: bool;


    // AddMethodImpl: CompatCheckCore_StateCorrespondence, CheckWellFormed$$M0.__default.CompatCheckCore__StateCorrespondence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##st#0 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stOrig#0);
    assume {:id "id1494"} M0.__default.ValidState(stOrig#0);
    ##st#1 := stOrigC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stOrigC#0);
    assume {:id "id1495"} M0.__default.ValidState(stOrigC#0);
    ##st#2 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    ##stC#0 := stOrigC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(stOrig#0, stOrigC#0);
    assume {:id "id1496"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stOrig#0, stOrigC#0);
    assume {:id "id1497"} !Set#Equal(sts#0, Set#Empty(): Set);
    assume {:id "id1498"} !Set#Equal(stsC#0, Set#Empty(): Set);
    ##sts#0 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(sts#0);
    assume {:id "id1499"} M0.__default.Compatible(sts#0);
    ##sts#1 := stsC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(stsC#0);
    assume {:id "id1500"} M0.__default.Compatible(stsC#0);
    havoc s#0;
    assume $IsBox(s#0, Tclass.M0.State()) && $IsAllocBox(s#0, Tclass.M0.State(), $Heap);
    if (*)
    {
        assume {:id "id1501"} Set#IsMember(sts#0, s#0);
        ##st#3 := s#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
        assume M0.__default.ValidState#canCall(s#0);
        assume {:id "id1502"} M0.__default.ValidState(s#0);
        ##st#4 := stOrig#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
        ##st'#0 := s#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(stOrig#0, s#0);
        assume {:id "id1503"} M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#0);
    }
    else
    {
        assume {:id "id1504"} Set#IsMember(sts#0, s#0)
           ==> M0.__default.ValidState(s#0)
             && M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#0);
    }

    assume {:id "id1505"} (forall s#1: Box :: 
      { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
        { M0.__default.ValidState(s#1) } 
        { Set#IsMember(sts#0, s#1) } 
      $IsBox(s#1, Tclass.M0.State())
         ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState(s#1))
           && (Set#IsMember(sts#0, s#1)
             ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1)));
    havoc s#2;
    assume $IsBox(s#2, Tclass.M0.State()) && $IsAllocBox(s#2, Tclass.M0.State(), $Heap);
    if (*)
    {
        assume {:id "id1506"} Set#IsMember(stsC#0, s#2);
        ##st#5 := s#2;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
        assume M0.__default.ValidState#canCall(s#2);
        assume {:id "id1507"} M0.__default.ValidState(s#2);
        ##st#6 := stOrigC#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
        ##st'#1 := s#2;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#1, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(stOrigC#0, s#2);
        assume {:id "id1508"} M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#2);
        ##stC#1 := s#2;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(s#2);
        assume {:id "id1509"} M0.__default.ConsistentCache(s#2);
    }
    else
    {
        assume {:id "id1510"} Set#IsMember(stsC#0, s#2)
           ==> M0.__default.ValidState(s#2)
             && M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#2)
             && M0.__default.ConsistentCache(s#2);
    }

    assume {:id "id1511"} (forall s#3: Box :: 
      { M0.__default.ConsistentCache(s#3) } 
        { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#3) } 
        { M0.__default.ValidState(s#3) } 
        { Set#IsMember(stsC#0, s#3) } 
      $IsBox(s#3, Tclass.M0.State())
         ==> (Set#IsMember(stsC#0, s#3) ==> M0.__default.ValidState(s#3))
           && (Set#IsMember(stsC#0, s#3)
             ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#3))
           && (Set#IsMember(stsC#0, s#3) ==> M0.__default.ConsistentCache(s#3)));
    ##sts#2 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#2, TSet(Tclass.M0.State()), $Heap);
    ##useCache#0 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id1512"} {:subsumption 0} !Set#Equal(##sts#2, Set#Empty(): Set);
    assume !Set#Equal(##sts#2, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts#0, Lit(false));
    ##st#7 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
    ##sts#3 := stsC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#3, TSet(Tclass.M0.State()), $Heap);
    ##useCache#1 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id1513"} {:subsumption 0} !Set#Equal(##sts#3, Set#Empty(): Set);
    assume !Set#Equal(##sts#3, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(stsC#0, Lit(true));
    ##stC#2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#2, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)), 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
    assume {:id "id1514"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)), 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##stOrig#0 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
    ##sts#4 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#4, TSet(Tclass.M0.State()), $Heap);
    ##fun#0 := fun#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##fun#0, Tclass.M0.Expression(), $Heap);
    ##args#0 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
    ##useCache#2 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#2, TBool, $Heap);
    assert {:id "id1515"} {:subsumption 0} !Set#Equal(##sts#4, Set#Empty(): Set);
    assume !Set#Equal(##sts#4, Set#Empty(): Set);
    assume M0.__default.evalCompatCheckCore#canCall(stOrig#0, sts#0, fun#0, args#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false)));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false)));
    ##st#8 := M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false)));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#8, Tclass.M0.State(), $Heap);
    ##stOrig#1 := stOrigC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#1, Tclass.M0.State(), $Heap);
    ##sts#5 := stsC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#5, TSet(Tclass.M0.State()), $Heap);
    ##fun#1 := fun#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##fun#1, Tclass.M0.Expression(), $Heap);
    ##args#1 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#1, TSeq(Tclass.M0.Expression()), $Heap);
    ##useCache#3 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#3, TBool, $Heap);
    assert {:id "id1516"} {:subsumption 0} !Set#Equal(##sts#5, Set#Empty(): Set);
    assume !Set#Equal(##sts#5, Set#Empty(): Set);
    assume M0.__default.evalCompatCheckCore#canCall(stOrigC#0, stsC#0, fun#0, args#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true)));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true)));
    ##stC#3 := M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true)));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#3, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false))), 
      M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true))));
    assume {:id "id1517"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
      M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false))), 
      M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true))));
}



procedure {:verboseName "M0.CompatCheckCore_StateCorrespondence (call)"} Call$$M0.__default.CompatCheckCore__StateCorrespondence(stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    stOrigC#0: Box
       where $IsBox(stOrigC#0, Tclass.M0.State())
         && $IsAllocBox(stOrigC#0, Tclass.M0.State(), $Heap), 
    stsC#0: Set
       where $Is(stsC#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC#0, TSet(Tclass.M0.State()), $Heap), 
    fun#0: DatatypeType
       where $Is(fun#0, Tclass.M0.Expression())
         && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(fun#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap));
  // user-defined preconditions
  requires {:id "id1518"} M0.__default.ValidState#canCall(stOrig#0)
     ==> M0.__default.ValidState(stOrig#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(stOrig#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stOrig#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id1519"} M0.__default.ValidState#canCall(stOrigC#0)
     ==> M0.__default.ValidState(stOrigC#0)
       || (forall p#1: Box :: 
        { M0.__default.WellFounded(p#1) } 
          { Set#IsMember(M0.__default.DomSt(stOrigC#0), p#1) } 
        $IsBox(p#1, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stOrigC#0), p#1)
           ==> M0.__default.WellFounded(p#1));
  requires {:id "id1520"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stOrig#0, stOrigC#0);
  requires {:id "id1521"} !Set#Equal(sts#0, Set#Empty(): Set);
  requires {:id "id1522"} !Set#Equal(stsC#0, Set#Empty(): Set);
  requires {:id "id1523"} M0.__default.Compatible#canCall(sts#0)
     ==> M0.__default.Compatible(sts#0)
       || (forall st#0: Box, st'#0: Box :: 
        { M0.__default.DomSt(st'#0), M0.__default.DomSt(st#0) } 
          { M0.__default.DomSt(st'#0), Set#IsMember(sts#0, st#0) } 
          { M0.__default.DomSt(st#0), Set#IsMember(sts#0, st'#0) } 
          { Set#IsMember(sts#0, st'#0), Set#IsMember(sts#0, st#0) } 
        $IsBox(st#0, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
           ==> 
          Set#IsMember(sts#0, st#0) && Set#IsMember(sts#0, st'#0)
           ==> (forall p#2: Box :: 
            { M0.__default.GetSt(p#2, st'#0) } 
              { M0.__default.GetSt(p#2, st#0) } 
              { Set#IsMember(M0.__default.DomSt(st'#0), p#2) } 
              { Set#IsMember(M0.__default.DomSt(st#0), p#2) } 
            $IsBox(p#2, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#0), p#2)
                 && Set#IsMember(M0.__default.DomSt(st'#0), p#2)
               ==> M0.__default.GetSt(p#2, st#0) == M0.__default.GetSt(p#2, st'#0)));
  requires {:id "id1524"} M0.__default.Compatible#canCall(stsC#0)
     ==> M0.__default.Compatible(stsC#0)
       || (forall st#1: Box, st'#1: Box :: 
        { M0.__default.DomSt(st'#1), M0.__default.DomSt(st#1) } 
          { M0.__default.DomSt(st'#1), Set#IsMember(stsC#0, st#1) } 
          { M0.__default.DomSt(st#1), Set#IsMember(stsC#0, st'#1) } 
          { Set#IsMember(stsC#0, st'#1), Set#IsMember(stsC#0, st#1) } 
        $IsBox(st#1, Tclass.M0.State()) && $IsBox(st'#1, Tclass.M0.State())
           ==> 
          Set#IsMember(stsC#0, st#1) && Set#IsMember(stsC#0, st'#1)
           ==> (forall p#3: Box :: 
            { M0.__default.GetSt(p#3, st'#1) } 
              { M0.__default.GetSt(p#3, st#1) } 
              { Set#IsMember(M0.__default.DomSt(st'#1), p#3) } 
              { Set#IsMember(M0.__default.DomSt(st#1), p#3) } 
            $IsBox(p#3, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#1), p#3)
                 && Set#IsMember(M0.__default.DomSt(st'#1), p#3)
               ==> M0.__default.GetSt(p#3, st#1) == M0.__default.GetSt(p#3, st'#1)));
  requires {:id "id1525"} (forall s#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState(s#1))
         && (Set#IsMember(sts#0, s#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1)));
  requires {:id "id1526"} (forall s#3: Box :: 
    { M0.__default.ConsistentCache(s#3) } 
      { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#3) } 
      { M0.__default.ValidState(s#3) } 
      { Set#IsMember(stsC#0, s#3) } 
    $IsBox(s#3, Tclass.M0.State())
       ==> (Set#IsMember(stsC#0, s#3) ==> M0.__default.ValidState(s#3))
         && (Set#IsMember(stsC#0, s#3)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#3))
         && (Set#IsMember(stsC#0, s#3) ==> M0.__default.ConsistentCache(s#3)));
  requires {:id "id1527"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)), 
    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.evalCompatCheckCore#canCall(stOrig#0, sts#0, fun#0, args#0, Lit(false))
     && M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false)))
     && 
    M0.__default.evalCompatCheckCore#canCall(stOrigC#0, stsC#0, fun#0, args#0, Lit(true))
     && M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true)))
     && M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false))), 
      M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true))));
  ensures {:id "id1528"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false))), 
    M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.CompatCheckCore_StateCorrespondence (correctness)"} Impl$$M0.__default.CompatCheckCore__StateCorrespondence(stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    stOrigC#0: Box
       where $IsBox(stOrigC#0, Tclass.M0.State())
         && $IsAllocBox(stOrigC#0, Tclass.M0.State(), $Heap), 
    stsC#0: Set
       where $Is(stsC#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC#0, TSet(Tclass.M0.State()), $Heap), 
    fun#0: DatatypeType
       where $Is(fun#0, Tclass.M0.Expression())
         && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(fun#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1529"} M0.__default.ValidState#canCall(stOrig#0)
     && 
    M0.__default.ValidState(stOrig#0)
     && (forall p#4: Box :: 
      { M0.__default.WellFounded(p#4) } 
        { Set#IsMember(M0.__default.DomSt(stOrig#0), p#4) } 
      $IsBox(p#4, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stOrig#0), p#4)
         ==> M0.__default.WellFounded(p#4));
  free requires {:id "id1530"} M0.__default.ValidState#canCall(stOrigC#0)
     && 
    M0.__default.ValidState(stOrigC#0)
     && (forall p#5: Box :: 
      { M0.__default.WellFounded(p#5) } 
        { Set#IsMember(M0.__default.DomSt(stOrigC#0), p#5) } 
      $IsBox(p#5, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stOrigC#0), p#5)
         ==> M0.__default.WellFounded(p#5));
  requires {:id "id1531"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stOrig#0, stOrigC#0);
  requires {:id "id1532"} !Set#Equal(sts#0, Set#Empty(): Set);
  requires {:id "id1533"} !Set#Equal(stsC#0, Set#Empty(): Set);
  free requires {:id "id1534"} M0.__default.Compatible#canCall(sts#0)
     && 
    M0.__default.Compatible(sts#0)
     && (forall st#2: Box, st'#2: Box :: 
      { M0.__default.DomSt(st'#2), M0.__default.DomSt(st#2) } 
        { M0.__default.DomSt(st'#2), Set#IsMember(sts#0, st#2) } 
        { M0.__default.DomSt(st#2), Set#IsMember(sts#0, st'#2) } 
        { Set#IsMember(sts#0, st'#2), Set#IsMember(sts#0, st#2) } 
      $IsBox(st#2, Tclass.M0.State()) && $IsBox(st'#2, Tclass.M0.State())
         ==> 
        Set#IsMember(sts#0, st#2) && Set#IsMember(sts#0, st'#2)
         ==> (forall p#6: Box :: 
          { M0.__default.GetSt(p#6, st'#2) } 
            { M0.__default.GetSt(p#6, st#2) } 
            { Set#IsMember(M0.__default.DomSt(st'#2), p#6) } 
            { Set#IsMember(M0.__default.DomSt(st#2), p#6) } 
          $IsBox(p#6, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st#2), p#6)
               && Set#IsMember(M0.__default.DomSt(st'#2), p#6)
             ==> M0.__default.GetSt(p#6, st#2) == M0.__default.GetSt(p#6, st'#2)));
  free requires {:id "id1535"} M0.__default.Compatible#canCall(stsC#0)
     && 
    M0.__default.Compatible(stsC#0)
     && (forall st#3: Box, st'#3: Box :: 
      { M0.__default.DomSt(st'#3), M0.__default.DomSt(st#3) } 
        { M0.__default.DomSt(st'#3), Set#IsMember(stsC#0, st#3) } 
        { M0.__default.DomSt(st#3), Set#IsMember(stsC#0, st'#3) } 
        { Set#IsMember(stsC#0, st'#3), Set#IsMember(stsC#0, st#3) } 
      $IsBox(st#3, Tclass.M0.State()) && $IsBox(st'#3, Tclass.M0.State())
         ==> 
        Set#IsMember(stsC#0, st#3) && Set#IsMember(stsC#0, st'#3)
         ==> (forall p#7: Box :: 
          { M0.__default.GetSt(p#7, st'#3) } 
            { M0.__default.GetSt(p#7, st#3) } 
            { Set#IsMember(M0.__default.DomSt(st'#3), p#7) } 
            { Set#IsMember(M0.__default.DomSt(st#3), p#7) } 
          $IsBox(p#7, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st#3), p#7)
               && Set#IsMember(M0.__default.DomSt(st'#3), p#7)
             ==> M0.__default.GetSt(p#7, st#3) == M0.__default.GetSt(p#7, st'#3)));
  requires {:id "id1536"} (forall s#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState(s#1))
         && (Set#IsMember(sts#0, s#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1)));
  requires {:id "id1537"} (forall s#3: Box :: 
    { M0.__default.ConsistentCache(s#3) } 
      { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#3) } 
      { M0.__default.ValidState(s#3) } 
      { Set#IsMember(stsC#0, s#3) } 
    $IsBox(s#3, Tclass.M0.State())
       ==> (Set#IsMember(stsC#0, s#3) ==> M0.__default.ValidState(s#3))
         && (Set#IsMember(stsC#0, s#3)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#3))
         && (Set#IsMember(stsC#0, s#3) ==> M0.__default.ConsistentCache(s#3)));
  requires {:id "id1538"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)), 
    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.evalCompatCheckCore#canCall(stOrig#0, sts#0, fun#0, args#0, Lit(false))
     && M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false)))
     && 
    M0.__default.evalCompatCheckCore#canCall(stOrigC#0, stsC#0, fun#0, args#0, Lit(true))
     && M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true)))
     && M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false))), 
      M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true))));
  ensures {:id "id1539"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false))), 
    M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.CompatCheckCore_StateCorrespondence (correctness)"} Impl$$M0.__default.CompatCheckCore__StateCorrespondence(stOrig#0: Box, 
    sts#0: Set, 
    stOrigC#0: Box, 
    stsC#0: Set, 
    fun#0: DatatypeType, 
    args#0: Seq)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var defass#p#8: bool;
  var p#8: DatatypeType
     where defass#p#8
       ==> $Is(p#8, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(p#8, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var defass#pC#0: bool;
  var pC#0: DatatypeType
     where defass#pC#0
       ==> $Is(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap);
  var $rhs#0: DatatypeType;
  var ##stOrig#2: Box;
  var ##sts#6: Set;
  var ##fun#2: DatatypeType;
  var ##args#2: Seq;
  var ##useCache#4: bool;
  var $rhs#1: DatatypeType;
  var ##stOrig#3: Box;
  var ##sts#7: Set;
  var ##fun#3: DatatypeType;
  var ##args#3: Seq;
  var ##useCache#5: bool;
  var defass#stCombined#0: bool;
  var stCombined#0: Box
     where defass#stCombined#0
       ==> $IsBox(stCombined#0, Tclass.M0.State())
         && $IsAllocBox(stCombined#0, Tclass.M0.State(), $Heap);
  var ##sts#8: Set;
  var ##useCache#6: bool;
  var sts##0: Set;
  var parent##0: Box;
  var useCache##0: bool;
  var defass#stCombinedC#0: bool;
  var stCombinedC#0: Box
     where defass#stCombinedC#0
       ==> $IsBox(stCombinedC#0, Tclass.M0.State())
         && $IsAllocBox(stCombinedC#0, Tclass.M0.State(), $Heap);
  var ##sts#9: Set;
  var ##useCache#7: bool;
  var sts##1: Set;
  var parent##1: Box;
  var useCache##1: bool;
  var ##stOrig#0_0: Box;
  var ##stCombined#0_0: Box;
  var ##args#0_0: Seq;
  var ##useCache#0_0: bool;
  var ##stOrig#0_1: Box;
  var ##stCombined#0_1: Box;
  var ##args#0_1: Seq;
  var ##useCache#0_1: bool;
  var p##0_0: DatatypeType;
  var st##0_0: Box;
  var stCombined##0_0: Box;
  var pC##0_0: DatatypeType;
  var stC##0_0: Box;
  var stCombinedC##0_0: Box;
  var fun##0_0: DatatypeType;
  var args##0_0: Seq;
  var ##st#0_0: Box;
  var ##stC#0_0: Box;

    // AddMethodImpl: CompatCheckCore_StateCorrespondence, Impl$$M0.__default.CompatCheckCore__StateCorrespondence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M0.Expression(fun#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts0#0: Set, $ih#stsC0#0: Set :: 
      { M0.__default.evalCompatCheckCore(stOrigC#0, $ih#stsC0#0, fun#0, args#0, Lit(true)), M0.__default.evalCompatCheckCore(stOrig#0, $ih#sts0#0, fun#0, args#0, Lit(false)) } 
        { M0.__default.evalCompatCheckCore(stOrigC#0, $ih#stsC0#0, fun#0, args#0, Lit(true)), M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, Lit(false)) } 
        { M0.__default.evalCompatCheckCore(stOrigC#0, $ih#stsC0#0, fun#0, args#0, Lit(true)), M0.__default.Compatible($ih#sts0#0) } 
        { M0.__default.evalCompatCheckCore(stOrig#0, $ih#sts0#0, fun#0, args#0, Lit(false)), M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#stsC0#0, Lit(true)) } 
        { M0.__default.evalCompatCheckCore(stOrig#0, $ih#sts0#0, fun#0, args#0, Lit(false)), M0.__default.Compatible($ih#stsC0#0) } 
        { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#stsC0#0, Lit(true)), M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, Lit(false)) } 
        { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#stsC0#0, Lit(true)), M0.__default.Compatible($ih#sts0#0) } 
        { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, Lit(false)), M0.__default.Compatible($ih#stsC0#0) } 
        { M0.__default.Compatible($ih#stsC0#0), M0.__default.Compatible($ih#sts0#0) } 
      $Is($ih#sts0#0, TSet(Tclass.M0.State()))
           && $Is($ih#stsC0#0, TSet(Tclass.M0.State()))
           && 
          M0.__default.ValidState(stOrig#0)
           && M0.__default.ValidState(stOrigC#0)
           && M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stOrig#0, stOrigC#0)
           && 
          !Set#Equal($ih#sts0#0, Set#Empty(): Set)
           && !Set#Equal($ih#stsC0#0, Set#Empty(): Set)
           && 
          M0.__default.Compatible($ih#sts0#0)
           && M0.__default.Compatible($ih#stsC0#0)
           && (forall s#4: Box :: 
            { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#4) } 
              { M0.__default.ValidState(s#4) } 
              { Set#IsMember($ih#sts0#0, s#4) } 
            $IsBox(s#4, Tclass.M0.State())
               ==> (Set#IsMember($ih#sts0#0, s#4) ==> M0.__default.ValidState(s#4))
                 && (Set#IsMember($ih#sts0#0, s#4)
                   ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#4)))
           && (forall s#5: Box :: 
            { M0.__default.ConsistentCache(s#5) } 
              { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#5) } 
              { M0.__default.ValidState(s#5) } 
              { Set#IsMember($ih#stsC0#0, s#5) } 
            $IsBox(s#5, Tclass.M0.State())
               ==> (Set#IsMember($ih#stsC0#0, s#5) ==> M0.__default.ValidState(s#5))
                 && (Set#IsMember($ih#stsC0#0, s#5)
                   ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, s#5))
                 && (Set#IsMember($ih#stsC0#0, s#5) ==> M0.__default.ConsistentCache(s#5)))
           && M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, Lit(false)), 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#stsC0#0, Lit(true)))
           && ((Set#Subset($ih#sts0#0, sts#0) && !Set#Subset(sts#0, $ih#sts0#0))
             || (Set#Equal($ih#sts0#0, sts#0)
               && ((Set#Subset($ih#stsC0#0, stsC#0) && !Set#Subset(stsC#0, $ih#stsC0#0))
                 || (Set#Equal($ih#stsC0#0, stsC#0)
                   && (DtRank(fun#0) < DtRank(fun#0)
                     || (DtRank(fun#0) == DtRank(fun#0) && Seq#Rank(args#0) < Seq#Rank(args#0)))))))
         ==> M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
          M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrig#0, $ih#sts0#0, fun#0, args#0, Lit(false))), 
          M0.Tuple.snd(M0.__default.evalCompatCheckCore(stOrigC#0, $ih#stsC0#0, fun#0, args#0, Lit(true)))));
    $_reverifyPost := false;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(888,15)
    assume true;
    assume true;
    ##stOrig#2 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#2, Tclass.M0.State(), $Heap);
    ##sts#6 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#6, TSet(Tclass.M0.State()), $Heap);
    ##fun#2 := fun#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##fun#2, Tclass.M0.Expression(), $Heap);
    ##args#2 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#2, TSeq(Tclass.M0.Expression()), $Heap);
    ##useCache#4 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#4, TBool, $Heap);
    assert {:id "id1540"} {:subsumption 0} !Set#Equal(##sts#6, Set#Empty(): Set);
    assume !Set#Equal(##sts#6, Set#Empty(): Set);
    assume M0.__default.evalCompatCheckCore#canCall(stOrig#0, sts#0, fun#0, args#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false)));
    assume M0.__default.evalCompatCheckCore#canCall(stOrig#0, sts#0, fun#0, args#0, Lit(false));
    $rhs#0 := M0.__default.evalCompatCheckCore(stOrig#0, sts#0, fun#0, args#0, Lit(false));
    ##stOrig#3 := stOrigC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#3, Tclass.M0.State(), $Heap);
    ##sts#7 := stsC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#7, TSet(Tclass.M0.State()), $Heap);
    ##fun#3 := fun#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##fun#3, Tclass.M0.Expression(), $Heap);
    ##args#3 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#3, TSeq(Tclass.M0.Expression()), $Heap);
    ##useCache#5 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#5, TBool, $Heap);
    assert {:id "id1542"} {:subsumption 0} !Set#Equal(##sts#7, Set#Empty(): Set);
    assume !Set#Equal(##sts#7, Set#Empty(): Set);
    assume M0.__default.evalCompatCheckCore#canCall(stOrigC#0, stsC#0, fun#0, args#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true)));
    assume M0.__default.evalCompatCheckCore#canCall(stOrigC#0, stsC#0, fun#0, args#0, Lit(true));
    $rhs#1 := M0.__default.evalCompatCheckCore(stOrigC#0, stsC#0, fun#0, args#0, Lit(true));
    p#8 := $rhs#0;
    defass#p#8 := true;
    pC#0 := $rhs#1;
    defass#pC#0 := true;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(889,20)
    assume true;
    ##sts#8 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#8, TSet(Tclass.M0.State()), $Heap);
    ##useCache#6 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#6, TBool, $Heap);
    assert {:id "id1546"} {:subsumption 0} !Set#Equal(##sts#8, Set#Empty(): Set);
    assume !Set#Equal(##sts#8, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts#0, Lit(false));
    assume M0.__default.Combine#canCall(sts#0, Lit(false));
    stCombined#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
    defass#stCombined#0 := true;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(890,18)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts##0 := sts#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    parent##0 := stOrig#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##0 := Lit(false);
    call {:id "id1548"} Call$$M0.__default.Lemma__Combine(sts##0, parent##0, useCache##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(891,21)
    assume true;
    ##sts#9 := stsC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#9, TSet(Tclass.M0.State()), $Heap);
    ##useCache#7 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#7, TBool, $Heap);
    assert {:id "id1549"} {:subsumption 0} !Set#Equal(##sts#9, Set#Empty(): Set);
    assume !Set#Equal(##sts#9, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(stsC#0, Lit(true));
    assume M0.__default.Combine#canCall(stsC#0, Lit(true));
    stCombinedC#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
    defass#stCombinedC#0 := true;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(892,18)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts##1 := stsC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    parent##1 := stOrigC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##1 := Lit(true);
    call {:id "id1551"} Call$$M0.__default.Lemma__Combine(sts##1, parent##1, useCache##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(893,5)
    if (M0.Expression.exprLiteral_q(fun#0))
    {
        assert {:id "id1552"} M0.Expression.exprLiteral_q(fun#0);
    }

    if (M0.Expression.exprLiteral_q(fun#0)
       && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0)))
    {
        assert {:id "id1553"} M0.Expression.exprLiteral_q(fun#0);
        assert {:id "id1554"} M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0));
    }

    assume true;
    if (M0.Expression.exprLiteral_q(fun#0)
       && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
       && M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0))))
    {
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(894,7)
        assert {:id "id1555"} defass#p#8;
        assume M0.Tuple.Pair_q(p#8);
        ##stOrig#0_0 := stOrig#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stOrig#0_0, Tclass.M0.State(), $Heap);
        assert {:id "id1556"} defass#stCombined#0;
        ##stCombined#0_0 := stCombined#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stCombined#0_0, Tclass.M0.State(), $Heap);
        ##args#0_0 := args#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#0_0, TSeq(Tclass.M0.Expression()), $Heap);
        ##useCache#0_0 := Lit(false);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0_0, TBool, $Heap);
        assume M0.__default.evalCore#canCall(stOrig#0, stCombined#0, args#0, Lit(false));
        assume M0.Tuple.Pair_q(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, Lit(false)));
        assume M0.Tuple.Pair_q(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, Lit(false)));
        assume M0.Tuple.Pair_q(p#8)
           && 
          M0.__default.evalCore#canCall(stOrig#0, stCombined#0, args#0, Lit(false))
           && M0.Tuple.Pair_q(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, Lit(false)));
        assert {:id "id1557"} M0.Tuple.snd(p#8)
           == M0.Tuple.snd(M0.__default.evalCore(stOrig#0, stCombined#0, args#0, Lit(false)));
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(895,7)
        assert {:id "id1558"} defass#pC#0;
        assume M0.Tuple.Pair_q(pC#0);
        ##stOrig#0_1 := stOrigC#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stOrig#0_1, Tclass.M0.State(), $Heap);
        assert {:id "id1559"} defass#stCombinedC#0;
        ##stCombined#0_1 := stCombinedC#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stCombined#0_1, Tclass.M0.State(), $Heap);
        ##args#0_1 := args#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#0_1, TSeq(Tclass.M0.Expression()), $Heap);
        ##useCache#0_1 := Lit(true);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0_1, TBool, $Heap);
        assume M0.__default.evalCore#canCall(stOrigC#0, stCombinedC#0, args#0, Lit(true));
        assume M0.Tuple.Pair_q(M0.__default.evalCore(stOrigC#0, stCombinedC#0, args#0, Lit(true)));
        assume M0.Tuple.Pair_q(M0.__default.evalCore(stOrigC#0, stCombinedC#0, args#0, Lit(true)));
        assume M0.Tuple.Pair_q(pC#0)
           && 
          M0.__default.evalCore#canCall(stOrigC#0, stCombinedC#0, args#0, Lit(true))
           && M0.Tuple.Pair_q(M0.__default.evalCore(stOrigC#0, stCombinedC#0, args#0, Lit(true)));
        assert {:id "id1560"} M0.Tuple.snd(pC#0)
           == M0.Tuple.snd(M0.__default.evalCore(stOrigC#0, stCombinedC#0, args#0, Lit(true)));
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(897,21)
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id1561"} defass#p#8;
        assume true;
        // ProcessCallStmt: CheckSubrange
        p##0_0 := p#8;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##0_0 := stOrig#0;
        assert {:id "id1562"} defass#stCombined#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stCombined##0_0 := stCombined#0;
        assert {:id "id1563"} defass#pC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        pC##0_0 := pC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##0_0 := stOrigC#0;
        assert {:id "id1564"} defass#stCombinedC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stCombinedC##0_0 := stCombinedC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        fun##0_0 := fun#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        args##0_0 := args#0;
        call {:id "id1565"} Call$$M0.__default.EvalCoreDeepen(p##0_0, st##0_0, stCombined##0_0, pC##0_0, stC##0_0, stCombinedC##0_0, fun##0_0, args##0_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(899,7)
        assert {:id "id1566"} defass#p#8;
        assume M0.Tuple.Pair_q(p#8);
        ##st#0_0 := M0.Tuple.snd(p#8);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_0, Tclass.M0.State(), $Heap);
        assert {:id "id1567"} defass#pC#0;
        assume M0.Tuple.Pair_q(pC#0);
        ##stC#0_0 := M0.Tuple.snd(pC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0_0, Tclass.M0.State(), $Heap);
        assume M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(p#8), M0.Tuple.snd(pC#0));
        assume M0.Tuple.Pair_q(p#8)
           && M0.Tuple.Pair_q(pC#0)
           && M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(p#8), M0.Tuple.snd(pC#0));
        assert {:id "id1568"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, M0.Tuple.snd(p#8), M0.Tuple.snd(pC#0));
    }
    else
    {
    }
}



procedure {:verboseName "M0.Continuation (well-formedness)"} CheckWellFormed$$M0.__default.Continuation(p#0: DatatypeType
       where $Is(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(p#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts''#0: Set
       where $Is(sts''#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts''#0, TSet(Tclass.M0.State()), $Heap), 
    pC#0: DatatypeType
       where $Is(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(pC#0), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    stsC''#0: Set
       where $Is(stsC''#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC''#0, TSet(Tclass.M0.State()), $Heap), 
    fun#0: DatatypeType
       where $Is(fun#0, Tclass.M0.Expression())
         && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(fun#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Continuation (well-formedness)"} CheckWellFormed$$M0.__default.Continuation(p#0: DatatypeType, 
    st#0: Box, 
    sts''#0: Set, 
    pC#0: DatatypeType, 
    stC#0: Box, 
    stsC''#0: Set, 
    fun#0: DatatypeType, 
    args#0: Seq)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##sts#0: Set;
  var ##sts#1: Set;
  var ##stOrig#0: Box;
  var ##sts#2: Set;
  var ##fun#0: DatatypeType;
  var ##args#0: Seq;
  var ##useCache#0: bool;
  var ##stOrig#1: Box;
  var ##sts#3: Set;
  var ##fun#1: DatatypeType;
  var ##args#1: Seq;
  var ##useCache#1: bool;
  var s#0: Box;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##st'#0: Box;
  var s#2: Box;
  var ##st#2: Box;
  var ##st#3: Box;
  var ##st'#1: Box;
  var ##stC#0: Box;
  var ##st#4: Box;
  var ##stC#1: Box;
  var ##st#5: Box;
  var ##sts#4: Set;
  var ##useCache#2: bool;
  var ##stC#2: Box;
  var ##sts#5: Set;
  var ##useCache#3: bool;


    // AddMethodImpl: Continuation, CheckWellFormed$$M0.__default.Continuation
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id1569"} !Set#Equal(sts''#0, Set#Empty(): Set);
    ##sts#0 := sts''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(sts''#0);
    assume {:id "id1570"} M0.__default.Compatible(sts''#0);
    assume {:id "id1571"} !Set#Equal(stsC''#0, Set#Empty(): Set);
    ##sts#1 := stsC''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(stsC''#0);
    assume {:id "id1572"} M0.__default.Compatible(stsC''#0);
    ##stOrig#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
    ##sts#2 := sts''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#2, TSet(Tclass.M0.State()), $Heap);
    ##fun#0 := fun#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##fun#0, Tclass.M0.Expression(), $Heap);
    ##args#0 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
    ##useCache#0 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id1573"} {:subsumption 0} !Set#Equal(##sts#2, Set#Empty(): Set);
    assume !Set#Equal(##sts#2, Set#Empty(): Set);
    assume M0.__default.evalCompatCheckCore#canCall(st#0, sts''#0, fun#0, args#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(st#0, sts''#0, fun#0, args#0, Lit(false)));
    assume {:id "id1574"} M0.Tuple#Equal(p#0, M0.__default.evalCompatCheckCore(st#0, sts''#0, fun#0, args#0, Lit(false)));
    ##stOrig#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#1, Tclass.M0.State(), $Heap);
    ##sts#3 := stsC''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#3, TSet(Tclass.M0.State()), $Heap);
    ##fun#1 := fun#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##fun#1, Tclass.M0.Expression(), $Heap);
    ##args#1 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#1, TSeq(Tclass.M0.Expression()), $Heap);
    ##useCache#1 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id1575"} {:subsumption 0} !Set#Equal(##sts#3, Set#Empty(): Set);
    assume !Set#Equal(##sts#3, Set#Empty(): Set);
    assume M0.__default.evalCompatCheckCore#canCall(stC#0, stsC''#0, fun#0, args#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.evalCompatCheckCore(stC#0, stsC''#0, fun#0, args#0, Lit(true)));
    assume {:id "id1576"} M0.Tuple#Equal(pC#0, 
      M0.__default.evalCompatCheckCore(stC#0, stsC''#0, fun#0, args#0, Lit(true)));
    havoc s#0;
    assume $IsBox(s#0, Tclass.M0.State()) && $IsAllocBox(s#0, Tclass.M0.State(), $Heap);
    if (*)
    {
        assume {:id "id1577"} Set#IsMember(sts''#0, s#0);
        ##st#0 := s#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
        assume M0.__default.ValidState#canCall(s#0);
        assume {:id "id1578"} M0.__default.ValidState(s#0);
        ##st#1 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
        ##st'#0 := s#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(st#0, s#0);
        assume {:id "id1579"} M0.__default.Extends(reveal_M0._default.Extends, st#0, s#0);
    }
    else
    {
        assume {:id "id1580"} Set#IsMember(sts''#0, s#0)
           ==> M0.__default.ValidState(s#0)
             && M0.__default.Extends(reveal_M0._default.Extends, st#0, s#0);
    }

    assume {:id "id1581"} (forall s#1: Box :: 
      { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1) } 
        { M0.__default.ValidState(s#1) } 
        { Set#IsMember(sts''#0, s#1) } 
      $IsBox(s#1, Tclass.M0.State())
         ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.ValidState(s#1))
           && (Set#IsMember(sts''#0, s#1)
             ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1)));
    havoc s#2;
    assume $IsBox(s#2, Tclass.M0.State()) && $IsAllocBox(s#2, Tclass.M0.State(), $Heap);
    if (*)
    {
        assume {:id "id1582"} Set#IsMember(stsC''#0, s#2);
        ##st#2 := s#2;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
        assume M0.__default.ValidState#canCall(s#2);
        assume {:id "id1583"} M0.__default.ValidState(s#2);
        ##st#3 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
        ##st'#1 := s#2;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#1, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(stC#0, s#2);
        assume {:id "id1584"} M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#2);
        ##stC#0 := s#2;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
        assume M0.__default.ConsistentCache#canCall(s#2);
        assume {:id "id1585"} M0.__default.ConsistentCache(s#2);
    }
    else
    {
        assume {:id "id1586"} Set#IsMember(stsC''#0, s#2)
           ==> M0.__default.ValidState(s#2)
             && M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#2)
             && M0.__default.ConsistentCache(s#2);
    }

    assume {:id "id1587"} (forall s#3: Box :: 
      { M0.__default.ConsistentCache(s#3) } 
        { M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#3) } 
        { M0.__default.ValidState(s#3) } 
        { Set#IsMember(stsC''#0, s#3) } 
      $IsBox(s#3, Tclass.M0.State())
         ==> (Set#IsMember(stsC''#0, s#3) ==> M0.__default.ValidState(s#3))
           && (Set#IsMember(stsC''#0, s#3)
             ==> M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#3))
           && (Set#IsMember(stsC''#0, s#3) ==> M0.__default.ConsistentCache(s#3)));
    ##st#4 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st#0, stC#0);
    assume {:id "id1588"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
    ##sts#4 := sts''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#4, TSet(Tclass.M0.State()), $Heap);
    ##useCache#2 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#2, TBool, $Heap);
    assert {:id "id1589"} {:subsumption 0} !Set#Equal(##sts#4, Set#Empty(): Set);
    assume !Set#Equal(##sts#4, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts''#0, Lit(false));
    ##st#5 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#0, Lit(false));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
    ##sts#5 := stsC''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#5, TSet(Tclass.M0.State()), $Heap);
    ##useCache#3 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#3, TBool, $Heap);
    assert {:id "id1590"} {:subsumption 0} !Set#Equal(##sts#5, Set#Empty(): Set);
    assume !Set#Equal(##sts#5, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(stsC''#0, Lit(true));
    ##stC#2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC''#0, Lit(true));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#2, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#0, Lit(false)), 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC''#0, Lit(true)));
    assume {:id "id1591"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#0, Lit(false)), 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC''#0, Lit(true)));
    havoc $Heap;
    assume old($Heap) == $Heap;
    assume M0.Tuple.Pair_q(p#0);
    assume M0.Tuple.Pair_q(pC#0);
    assume {:id "id1592"} M0.Expression#Equal($Unbox(M0.Tuple.fst(p#0)): DatatypeType, 
      $Unbox(M0.Tuple.fst(pC#0)): DatatypeType);
}



procedure {:verboseName "M0.Continuation (call)"} Call$$M0.__default.Continuation(p#0: DatatypeType
       where $Is(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(p#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts''#0: Set
       where $Is(sts''#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts''#0, TSet(Tclass.M0.State()), $Heap), 
    pC#0: DatatypeType
       where $Is(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(pC#0), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    stsC''#0: Set
       where $Is(stsC''#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC''#0, TSet(Tclass.M0.State()), $Heap), 
    fun#0: DatatypeType
       where $Is(fun#0, Tclass.M0.Expression())
         && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(fun#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap));
  // user-defined preconditions
  requires {:id "id1593"} !Set#Equal(sts''#0, Set#Empty(): Set);
  requires {:id "id1594"} M0.__default.Compatible#canCall(sts''#0)
     ==> M0.__default.Compatible(sts''#0)
       || (forall st#1: Box, st'#0: Box :: 
        { M0.__default.DomSt(st'#0), M0.__default.DomSt(st#1) } 
          { M0.__default.DomSt(st'#0), Set#IsMember(sts''#0, st#1) } 
          { M0.__default.DomSt(st#1), Set#IsMember(sts''#0, st'#0) } 
          { Set#IsMember(sts''#0, st'#0), Set#IsMember(sts''#0, st#1) } 
        $IsBox(st#1, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
           ==> 
          Set#IsMember(sts''#0, st#1) && Set#IsMember(sts''#0, st'#0)
           ==> (forall p#1: Box :: 
            { M0.__default.GetSt(p#1, st'#0) } 
              { M0.__default.GetSt(p#1, st#1) } 
              { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
              { Set#IsMember(M0.__default.DomSt(st#1), p#1) } 
            $IsBox(p#1, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#1), p#1)
                 && Set#IsMember(M0.__default.DomSt(st'#0), p#1)
               ==> M0.__default.GetSt(p#1, st#1) == M0.__default.GetSt(p#1, st'#0)));
  requires {:id "id1595"} !Set#Equal(stsC''#0, Set#Empty(): Set);
  requires {:id "id1596"} M0.__default.Compatible#canCall(stsC''#0)
     ==> M0.__default.Compatible(stsC''#0)
       || (forall st#2: Box, st'#1: Box :: 
        { M0.__default.DomSt(st'#1), M0.__default.DomSt(st#2) } 
          { M0.__default.DomSt(st'#1), Set#IsMember(stsC''#0, st#2) } 
          { M0.__default.DomSt(st#2), Set#IsMember(stsC''#0, st'#1) } 
          { Set#IsMember(stsC''#0, st'#1), Set#IsMember(stsC''#0, st#2) } 
        $IsBox(st#2, Tclass.M0.State()) && $IsBox(st'#1, Tclass.M0.State())
           ==> 
          Set#IsMember(stsC''#0, st#2) && Set#IsMember(stsC''#0, st'#1)
           ==> (forall p#2: Box :: 
            { M0.__default.GetSt(p#2, st'#1) } 
              { M0.__default.GetSt(p#2, st#2) } 
              { Set#IsMember(M0.__default.DomSt(st'#1), p#2) } 
              { Set#IsMember(M0.__default.DomSt(st#2), p#2) } 
            $IsBox(p#2, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#2), p#2)
                 && Set#IsMember(M0.__default.DomSt(st'#1), p#2)
               ==> M0.__default.GetSt(p#2, st#2) == M0.__default.GetSt(p#2, st'#1)));
  requires {:id "id1597"} M0.Tuple#Equal(p#0, M0.__default.evalCompatCheckCore(st#0, sts''#0, fun#0, args#0, Lit(false)));
  requires {:id "id1598"} M0.Tuple#Equal(pC#0, 
    M0.__default.evalCompatCheckCore(stC#0, stsC''#0, fun#0, args#0, Lit(true)));
  requires {:id "id1599"} (forall s#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts''#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.ValidState(s#1))
         && (Set#IsMember(sts''#0, s#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1)));
  requires {:id "id1600"} (forall s#3: Box :: 
    { M0.__default.ConsistentCache(s#3) } 
      { M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#3) } 
      { M0.__default.ValidState(s#3) } 
      { Set#IsMember(stsC''#0, s#3) } 
    $IsBox(s#3, Tclass.M0.State())
       ==> (Set#IsMember(stsC''#0, s#3) ==> M0.__default.ValidState(s#3))
         && (Set#IsMember(stsC''#0, s#3)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#3))
         && (Set#IsMember(stsC''#0, s#3) ==> M0.__default.ConsistentCache(s#3)));
  requires {:id "id1601"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id1602"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts''#0, Lit(false)), 
    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC''#0, Lit(true)));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Expression($Unbox(M0.Tuple.fst(p#0)): DatatypeType)
     && $IsA#M0.Expression($Unbox(M0.Tuple.fst(pC#0)): DatatypeType)
     && 
    M0.Tuple.Pair_q(p#0)
     && M0.Tuple.Pair_q(pC#0);
  ensures {:id "id1603"} M0.Expression#Equal($Unbox(M0.Tuple.fst(p#0)): DatatypeType, 
    $Unbox(M0.Tuple.fst(pC#0)): DatatypeType);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Continuation (correctness)"} Impl$$M0.__default.Continuation(p#0: DatatypeType
       where $Is(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(p#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts''#0: Set
       where $Is(sts''#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts''#0, TSet(Tclass.M0.State()), $Heap), 
    pC#0: DatatypeType
       where $Is(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(pC#0), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    stsC''#0: Set
       where $Is(stsC''#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC''#0, TSet(Tclass.M0.State()), $Heap), 
    fun#0: DatatypeType
       where $Is(fun#0, Tclass.M0.Expression())
         && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(fun#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id1604"} !Set#Equal(sts''#0, Set#Empty(): Set);
  free requires {:id "id1605"} M0.__default.Compatible#canCall(sts''#0)
     && 
    M0.__default.Compatible(sts''#0)
     && (forall st#3: Box, st'#2: Box :: 
      { M0.__default.DomSt(st'#2), M0.__default.DomSt(st#3) } 
        { M0.__default.DomSt(st'#2), Set#IsMember(sts''#0, st#3) } 
        { M0.__default.DomSt(st#3), Set#IsMember(sts''#0, st'#2) } 
        { Set#IsMember(sts''#0, st'#2), Set#IsMember(sts''#0, st#3) } 
      $IsBox(st#3, Tclass.M0.State()) && $IsBox(st'#2, Tclass.M0.State())
         ==> 
        Set#IsMember(sts''#0, st#3) && Set#IsMember(sts''#0, st'#2)
         ==> (forall p#3: Box :: 
          { M0.__default.GetSt(p#3, st'#2) } 
            { M0.__default.GetSt(p#3, st#3) } 
            { Set#IsMember(M0.__default.DomSt(st'#2), p#3) } 
            { Set#IsMember(M0.__default.DomSt(st#3), p#3) } 
          $IsBox(p#3, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st#3), p#3)
               && Set#IsMember(M0.__default.DomSt(st'#2), p#3)
             ==> M0.__default.GetSt(p#3, st#3) == M0.__default.GetSt(p#3, st'#2)));
  requires {:id "id1606"} !Set#Equal(stsC''#0, Set#Empty(): Set);
  free requires {:id "id1607"} M0.__default.Compatible#canCall(stsC''#0)
     && 
    M0.__default.Compatible(stsC''#0)
     && (forall st#4: Box, st'#3: Box :: 
      { M0.__default.DomSt(st'#3), M0.__default.DomSt(st#4) } 
        { M0.__default.DomSt(st'#3), Set#IsMember(stsC''#0, st#4) } 
        { M0.__default.DomSt(st#4), Set#IsMember(stsC''#0, st'#3) } 
        { Set#IsMember(stsC''#0, st'#3), Set#IsMember(stsC''#0, st#4) } 
      $IsBox(st#4, Tclass.M0.State()) && $IsBox(st'#3, Tclass.M0.State())
         ==> 
        Set#IsMember(stsC''#0, st#4) && Set#IsMember(stsC''#0, st'#3)
         ==> (forall p#4: Box :: 
          { M0.__default.GetSt(p#4, st'#3) } 
            { M0.__default.GetSt(p#4, st#4) } 
            { Set#IsMember(M0.__default.DomSt(st'#3), p#4) } 
            { Set#IsMember(M0.__default.DomSt(st#4), p#4) } 
          $IsBox(p#4, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st#4), p#4)
               && Set#IsMember(M0.__default.DomSt(st'#3), p#4)
             ==> M0.__default.GetSt(p#4, st#4) == M0.__default.GetSt(p#4, st'#3)));
  requires {:id "id1608"} M0.Tuple#Equal(p#0, M0.__default.evalCompatCheckCore(st#0, sts''#0, fun#0, args#0, Lit(false)));
  requires {:id "id1609"} M0.Tuple#Equal(pC#0, 
    M0.__default.evalCompatCheckCore(stC#0, stsC''#0, fun#0, args#0, Lit(true)));
  requires {:id "id1610"} (forall s#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts''#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts''#0, s#1) ==> M0.__default.ValidState(s#1))
         && (Set#IsMember(sts''#0, s#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#1)));
  requires {:id "id1611"} (forall s#3: Box :: 
    { M0.__default.ConsistentCache(s#3) } 
      { M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#3) } 
      { M0.__default.ValidState(s#3) } 
      { Set#IsMember(stsC''#0, s#3) } 
    $IsBox(s#3, Tclass.M0.State())
       ==> (Set#IsMember(stsC''#0, s#3) ==> M0.__default.ValidState(s#3))
         && (Set#IsMember(stsC''#0, s#3)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#3))
         && (Set#IsMember(stsC''#0, s#3) ==> M0.__default.ConsistentCache(s#3)));
  requires {:id "id1612"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id1613"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts''#0, Lit(false)), 
    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC''#0, Lit(true)));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Expression($Unbox(M0.Tuple.fst(p#0)): DatatypeType)
     && $IsA#M0.Expression($Unbox(M0.Tuple.fst(pC#0)): DatatypeType)
     && 
    M0.Tuple.Pair_q(p#0)
     && M0.Tuple.Pair_q(pC#0);
  ensures {:id "id1614"} M0.Expression#Equal($Unbox(M0.Tuple.fst(p#0)): DatatypeType, 
    $Unbox(M0.Tuple.fst(pC#0)): DatatypeType);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Continuation (correctness)"} Impl$$M0.__default.Continuation(p#0: DatatypeType, 
    st#0: Box, 
    sts''#0: Set, 
    pC#0: DatatypeType, 
    stC#0: Box, 
    stsC''#0: Set, 
    fun#0: DatatypeType, 
    args#0: Seq)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var outExpr#0: DatatypeType
     where $Is(outExpr#0, Tclass.M0.Expression())
       && $IsAlloc(outExpr#0, Tclass.M0.Expression(), $Heap);
  var outExprC#0: DatatypeType
     where $Is(outExprC#0, Tclass.M0.Expression())
       && $IsAlloc(outExprC#0, Tclass.M0.Expression(), $Heap);
  var $rhs#0: DatatypeType;
  var $rhs#1: DatatypeType;
  var defass#stCombined#0: bool;
  var stCombined#0: Box
     where defass#stCombined#0
       ==> $IsBox(stCombined#0, Tclass.M0.State())
         && $IsAllocBox(stCombined#0, Tclass.M0.State(), $Heap);
  var ##sts#6: Set;
  var ##useCache#4: bool;
  var sts##0: Set;
  var parent##0: Box;
  var useCache##0: bool;
  var defass#stCombinedC#0: bool;
  var stCombinedC#0: Box
     where defass#stCombinedC#0
       ==> $IsBox(stCombinedC#0, Tclass.M0.State())
         && $IsAllocBox(stCombinedC#0, Tclass.M0.State(), $Heap);
  var ##sts#7: Set;
  var ##useCache#5: bool;
  var sts##1: Set;
  var parent##1: Box;
  var useCache##1: bool;
  var ##stC#3: Box;
  var ##st#6: Box;
  var ##stC#4: Box;
  var ##stOrig#2: Box;
  var ##stCombined#0: Box;
  var ##args#2: Seq;
  var ##useCache#6: bool;
  var ##stOrig#3: Box;
  var ##stCombined#1: Box;
  var ##args#3: Seq;
  var ##useCache#7: bool;
  var ##stOrig#0_0: Box;
  var ##stCombined#0_0: Box;
  var ##args#0_0: Seq;
  var ##useCache#0_0: bool;
  var ##stOrig#0_1: Box;
  var ##stCombined#0_1: Box;
  var ##args#0_1: Seq;
  var ##useCache#0_1: bool;
  var p##0_0: DatatypeType;
  var st##0_0: Box;
  var stCombined##0_0: Box;
  var pC##0_0: DatatypeType;
  var stC##0_0: Box;
  var stCombinedC##0_0: Box;
  var fun##0_0: DatatypeType;
  var args##0_0: Seq;

    // AddMethodImpl: Continuation, Impl$$M0.__default.Continuation
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#M0.Tuple(p#0);
    assume $IsA#M0.Tuple(pC#0);
    assume $IsA#M0.Expression(fun#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts''0#0: Set, $ih#stsC''0#0: Set :: 
      { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#stsC''0#0, Lit(true)), M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts''0#0, Lit(false)) } 
        { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#stsC''0#0, Lit(true)), M0.__default.evalCompatCheckCore(st#0, $ih#sts''0#0, fun#0, args#0, Lit(false)) } 
        { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#stsC''0#0, Lit(true)), M0.__default.Compatible($ih#sts''0#0) } 
        { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts''0#0, Lit(false)), M0.__default.evalCompatCheckCore(stC#0, $ih#stsC''0#0, fun#0, args#0, Lit(true)) } 
        { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts''0#0, Lit(false)), M0.__default.Compatible($ih#stsC''0#0) } 
        { M0.__default.evalCompatCheckCore(stC#0, $ih#stsC''0#0, fun#0, args#0, Lit(true)), M0.__default.evalCompatCheckCore(st#0, $ih#sts''0#0, fun#0, args#0, Lit(false)) } 
        { M0.__default.evalCompatCheckCore(stC#0, $ih#stsC''0#0, fun#0, args#0, Lit(true)), M0.__default.Compatible($ih#sts''0#0) } 
        { M0.__default.evalCompatCheckCore(st#0, $ih#sts''0#0, fun#0, args#0, Lit(false)), M0.__default.Compatible($ih#stsC''0#0) } 
        { M0.__default.Compatible($ih#stsC''0#0), M0.__default.Compatible($ih#sts''0#0) } 
      $Is($ih#sts''0#0, TSet(Tclass.M0.State()))
           && $Is($ih#stsC''0#0, TSet(Tclass.M0.State()))
           && 
          !Set#Equal($ih#sts''0#0, Set#Empty(): Set)
           && M0.__default.Compatible($ih#sts''0#0)
           && 
          !Set#Equal($ih#stsC''0#0, Set#Empty(): Set)
           && M0.__default.Compatible($ih#stsC''0#0)
           && M0.Tuple#Equal(p#0, 
            M0.__default.evalCompatCheckCore(st#0, $ih#sts''0#0, fun#0, args#0, Lit(false)))
           && M0.Tuple#Equal(pC#0, 
            M0.__default.evalCompatCheckCore(stC#0, $ih#stsC''0#0, fun#0, args#0, Lit(true)))
           && (forall s#4: Box :: 
            { M0.__default.Extends(reveal_M0._default.Extends, st#0, s#4) } 
              { M0.__default.ValidState(s#4) } 
              { Set#IsMember($ih#sts''0#0, s#4) } 
            $IsBox(s#4, Tclass.M0.State())
               ==> (Set#IsMember($ih#sts''0#0, s#4) ==> M0.__default.ValidState(s#4))
                 && (Set#IsMember($ih#sts''0#0, s#4)
                   ==> M0.__default.Extends(reveal_M0._default.Extends, st#0, s#4)))
           && (forall s#5: Box :: 
            { M0.__default.ConsistentCache(s#5) } 
              { M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#5) } 
              { M0.__default.ValidState(s#5) } 
              { Set#IsMember($ih#stsC''0#0, s#5) } 
            $IsBox(s#5, Tclass.M0.State())
               ==> (Set#IsMember($ih#stsC''0#0, s#5) ==> M0.__default.ValidState(s#5))
                 && (Set#IsMember($ih#stsC''0#0, s#5)
                   ==> M0.__default.Extends(reveal_M0._default.Extends, stC#0, s#5))
                 && (Set#IsMember($ih#stsC''0#0, s#5) ==> M0.__default.ConsistentCache(s#5)))
           && M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0)
           && M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts''0#0, Lit(false)), 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#stsC''0#0, Lit(true)))
           && (DtRank(p#0) < DtRank(p#0)
             || (DtRank(p#0) == DtRank(p#0)
               && ((Set#Subset($ih#sts''0#0, sts''#0) && !Set#Subset(sts''#0, $ih#sts''0#0))
                 || (Set#Equal($ih#sts''0#0, sts''#0)
                   && (DtRank(pC#0) < DtRank(pC#0)
                     || (DtRank(pC#0) == DtRank(pC#0)
                       && ((Set#Subset($ih#stsC''0#0, stsC''#0) && !Set#Subset(stsC''#0, $ih#stsC''0#0))
                         || (Set#Equal($ih#stsC''0#0, stsC''#0)
                           && (DtRank(fun#0) < DtRank(fun#0)
                             || (DtRank(fun#0) == DtRank(fun#0) && Seq#Rank(args#0) < Seq#Rank(args#0)))))))))))
         ==> M0.Expression#Equal($Unbox(M0.Tuple.fst(p#0)): DatatypeType, 
          $Unbox(M0.Tuple.fst(pC#0)): DatatypeType));
    $_reverifyPost := false;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(917,27)
    assume true;
    assume true;
    assume M0.Tuple.Pair_q(p#0);
    assume M0.Tuple.Pair_q(p#0);
    $rhs#0 := $Unbox(M0.Tuple.fst(p#0)): DatatypeType;
    assume M0.Tuple.Pair_q(pC#0);
    assume M0.Tuple.Pair_q(pC#0);
    $rhs#1 := $Unbox(M0.Tuple.fst(pC#0)): DatatypeType;
    outExpr#0 := $rhs#0;
    outExprC#0 := $rhs#1;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(918,20)
    assume true;
    ##sts#6 := sts''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#6, TSet(Tclass.M0.State()), $Heap);
    ##useCache#4 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#4, TBool, $Heap);
    assert {:id "id1619"} {:subsumption 0} !Set#Equal(##sts#6, Set#Empty(): Set);
    assume !Set#Equal(##sts#6, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts''#0, Lit(false));
    assume M0.__default.Combine#canCall(sts''#0, Lit(false));
    stCombined#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts''#0, Lit(false));
    defass#stCombined#0 := true;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(919,18)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts##0 := sts''#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    parent##0 := st#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##0 := Lit(false);
    call {:id "id1621"} Call$$M0.__default.Lemma__Combine(sts##0, parent##0, useCache##0);
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(920,21)
    assume true;
    ##sts#7 := stsC''#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#7, TSet(Tclass.M0.State()), $Heap);
    ##useCache#5 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#5, TBool, $Heap);
    assert {:id "id1622"} {:subsumption 0} !Set#Equal(##sts#7, Set#Empty(): Set);
    assume !Set#Equal(##sts#7, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(stsC''#0, Lit(true));
    assume M0.__default.Combine#canCall(stsC''#0, Lit(true));
    stCombinedC#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC''#0, Lit(true));
    defass#stCombinedC#0 := true;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(921,18)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    sts##1 := stsC''#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    parent##1 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    useCache##1 := Lit(true);
    call {:id "id1624"} Call$$M0.__default.Lemma__Combine(sts##1, parent##1, useCache##1);
    // TrCallStmt: After ProcessCallStmt
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(922,5)
    assert {:id "id1625"} defass#stCombinedC#0;
    ##stC#3 := stCombinedC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#3, Tclass.M0.State(), $Heap);
    assume M0.__default.ConsistentCache#canCall(stCombinedC#0);
    assume M0.__default.ConsistentCache#canCall(stCombinedC#0);
    assert {:id "id1626"} {:subsumption 0} M0.__default.ConsistentCache#canCall(stCombinedC#0)
       ==> M0.__default.ConsistentCache(stCombinedC#0)
         || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
          { M0.__default.Loc(cmd#0, deps#0, e#0) } 
          $Is(cmd#0, TSeq(TChar))
               && $Is(deps#0, TSet(Tclass.M0.Path()))
               && $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(M0.__default.DomC(stCombinedC#0), 
              M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
             ==> Set#IsMember(M0.__default.DomSt(stCombinedC#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
    assume {:id "id1627"} M0.__default.ConsistentCache(stCombinedC#0);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(923,5)
    assert {:id "id1628"} defass#stCombined#0;
    ##st#6 := stCombined#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
    assert {:id "id1629"} defass#stCombinedC#0;
    ##stC#4 := stCombinedC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#4, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(stCombined#0, stCombinedC#0);
    assume M0.__default.StateCorrespondence#canCall(stCombined#0, stCombinedC#0);
    assert {:id "id1630"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stCombined#0, stCombinedC#0);
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(925,5)
    if (M0.Expression.exprLiteral_q(fun#0))
    {
        assert {:id "id1631"} M0.Expression.exprLiteral_q(fun#0);
    }

    if (M0.Expression.exprLiteral_q(fun#0)
       && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0)))
    {
        assert {:id "id1632"} M0.Expression.exprLiteral_q(fun#0);
        assert {:id "id1633"} M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0));
        if (M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0))))
        {
            ##stOrig#2 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stOrig#2, Tclass.M0.State(), $Heap);
            assert {:id "id1634"} defass#stCombined#0;
            ##stCombined#0 := stCombined#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stCombined#0, Tclass.M0.State(), $Heap);
            ##args#2 := args#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##args#2, TSeq(Tclass.M0.Expression()), $Heap);
            ##useCache#6 := Lit(false);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#6, TBool, $Heap);
            assume M0.__default.evalCore#canCall(st#0, stCombined#0, args#0, Lit(false));
            assume M0.Tuple.Pair_q(M0.__default.evalCore(st#0, stCombined#0, args#0, Lit(false)));
        }
        else
        {
        }
    }
    else
    {
    }

    assume $IsA#M0.Tuple(p#0)
       && $IsA#M0.Tuple((if M0.Expression.exprLiteral_q(fun#0)
             && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
           then (if M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0)))
             then M0.__default.evalCore(st#0, stCombined#0, args#0, Lit(false))
             else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))
           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)))
       && (M0.Expression.exprLiteral_q(fun#0)
           && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
         ==> 
        M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0)))
         ==> M0.__default.evalCore#canCall(st#0, stCombined#0, args#0, Lit(false)));
    assert {:id "id1635"} M0.Tuple#Equal(p#0, 
      (if M0.Expression.exprLiteral_q(fun#0)
           && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
         then (if M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0)))
           then M0.__default.evalCore(st#0, stCombined#0, args#0, Lit(false))
           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0))
         else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), st#0)));
    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(933,5)
    if (M0.Expression.exprLiteral_q(fun#0))
    {
        assert {:id "id1636"} M0.Expression.exprLiteral_q(fun#0);
    }

    if (M0.Expression.exprLiteral_q(fun#0)
       && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0)))
    {
        assert {:id "id1637"} M0.Expression.exprLiteral_q(fun#0);
        assert {:id "id1638"} M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0));
        if (M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0))))
        {
            ##stOrig#3 := stC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stOrig#3, Tclass.M0.State(), $Heap);
            assert {:id "id1639"} defass#stCombinedC#0;
            ##stCombined#1 := stCombinedC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stCombined#1, Tclass.M0.State(), $Heap);
            ##args#3 := args#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##args#3, TSeq(Tclass.M0.Expression()), $Heap);
            ##useCache#7 := Lit(true);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#7, TBool, $Heap);
            assume M0.__default.evalCore#canCall(stC#0, stCombinedC#0, args#0, Lit(true));
            assume M0.Tuple.Pair_q(M0.__default.evalCore(stC#0, stCombinedC#0, args#0, Lit(true)));
        }
        else
        {
        }
    }
    else
    {
    }

    assume $IsA#M0.Tuple(pC#0)
       && $IsA#M0.Tuple((if M0.Expression.exprLiteral_q(fun#0)
             && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
           then (if M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0)))
             then M0.__default.evalCore(stC#0, stCombinedC#0, args#0, Lit(true))
             else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stC#0))
           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stC#0)))
       && (M0.Expression.exprLiteral_q(fun#0)
           && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
         ==> 
        M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0)))
         ==> M0.__default.evalCore#canCall(stC#0, stCombinedC#0, args#0, Lit(true)));
    assert {:id "id1640"} M0.Tuple#Equal(pC#0, 
      (if M0.Expression.exprLiteral_q(fun#0)
           && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
         then (if M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0)))
           then M0.__default.evalCore(stC#0, stCombinedC#0, args#0, Lit(true))
           else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stC#0))
         else #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rValidity())))), stC#0)));
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(942,5)
    if (M0.Expression.exprLiteral_q(fun#0))
    {
        assert {:id "id1641"} M0.Expression.exprLiteral_q(fun#0);
    }

    if (M0.Expression.exprLiteral_q(fun#0)
       && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0)))
    {
        assert {:id "id1642"} M0.Expression.exprLiteral_q(fun#0);
        assert {:id "id1643"} M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0));
    }

    assume true;
    if (M0.Expression.exprLiteral_q(fun#0)
       && M0.Literal.litPrimitive_q(M0.Expression.lit(fun#0))
       && M0.Primitive.primExec_q(M0.Literal.prim(M0.Expression.lit(fun#0))))
    {
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(943,7)
        ##stOrig#0_0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stOrig#0_0, Tclass.M0.State(), $Heap);
        assert {:id "id1644"} defass#stCombined#0;
        ##stCombined#0_0 := stCombined#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stCombined#0_0, Tclass.M0.State(), $Heap);
        ##args#0_0 := args#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#0_0, TSeq(Tclass.M0.Expression()), $Heap);
        ##useCache#0_0 := Lit(false);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0_0, TBool, $Heap);
        assume M0.__default.evalCore#canCall(st#0, stCombined#0, args#0, Lit(false));
        assume M0.Tuple.Pair_q(M0.__default.evalCore(st#0, stCombined#0, args#0, Lit(false)));
        assume $IsA#M0.Tuple(p#0)
           && $IsA#M0.Tuple(M0.__default.evalCore(st#0, stCombined#0, args#0, Lit(false)))
           && M0.__default.evalCore#canCall(st#0, stCombined#0, args#0, Lit(false));
        assert {:id "id1645"} M0.Tuple#Equal(p#0, M0.__default.evalCore(st#0, stCombined#0, args#0, Lit(false)));
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(944,7)
        ##stOrig#0_1 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stOrig#0_1, Tclass.M0.State(), $Heap);
        assert {:id "id1646"} defass#stCombinedC#0;
        ##stCombined#0_1 := stCombinedC#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stCombined#0_1, Tclass.M0.State(), $Heap);
        ##args#0_1 := args#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#0_1, TSeq(Tclass.M0.Expression()), $Heap);
        ##useCache#0_1 := Lit(true);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0_1, TBool, $Heap);
        assume M0.__default.evalCore#canCall(stC#0, stCombinedC#0, args#0, Lit(true));
        assume M0.Tuple.Pair_q(M0.__default.evalCore(stC#0, stCombinedC#0, args#0, Lit(true)));
        assume $IsA#M0.Tuple(pC#0)
           && $IsA#M0.Tuple(M0.__default.evalCore(stC#0, stCombinedC#0, args#0, Lit(true)))
           && M0.__default.evalCore#canCall(stC#0, stCombinedC#0, args#0, Lit(true));
        assert {:id "id1647"} M0.Tuple#Equal(pC#0, M0.__default.evalCore(stC#0, stCombinedC#0, args#0, Lit(true)));
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(945,21)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        p##0_0 := p#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##0_0 := st#0;
        assert {:id "id1648"} defass#stCombined#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stCombined##0_0 := stCombined#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        pC##0_0 := pC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##0_0 := stC#0;
        assert {:id "id1649"} defass#stCombinedC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stCombinedC##0_0 := stCombinedC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        fun##0_0 := fun#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        args##0_0 := args#0;
        call {:id "id1650"} Call$$M0.__default.EvalCoreDeepen(p##0_0, st##0_0, stCombined##0_0, pC##0_0, stC##0_0, stCombinedC##0_0, fun##0_0, args##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
    }
}



procedure {:verboseName "M0.EvalCoreDeepen (well-formedness)"} CheckWellFormed$$M0.__default.EvalCoreDeepen(p#0: DatatypeType
       where $Is(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(p#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stCombined#0: Box
       where $IsBox(stCombined#0, Tclass.M0.State())
         && $IsAllocBox(stCombined#0, Tclass.M0.State(), $Heap), 
    pC#0: DatatypeType
       where $Is(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(pC#0), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    stCombinedC#0: Box
       where $IsBox(stCombinedC#0, Tclass.M0.State())
         && $IsAllocBox(stCombinedC#0, Tclass.M0.State(), $Heap), 
    fun#0: DatatypeType
       where $Is(fun#0, Tclass.M0.Expression())
         && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(fun#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.EvalCoreDeepen (call)"} Call$$M0.__default.EvalCoreDeepen(p#0: DatatypeType
       where $Is(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(p#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stCombined#0: Box
       where $IsBox(stCombined#0, Tclass.M0.State())
         && $IsAllocBox(stCombined#0, Tclass.M0.State(), $Heap), 
    pC#0: DatatypeType
       where $Is(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(pC#0), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    stCombinedC#0: Box
       where $IsBox(stCombinedC#0, Tclass.M0.State())
         && $IsAllocBox(stCombinedC#0, Tclass.M0.State(), $Heap), 
    fun#0: DatatypeType
       where $Is(fun#0, Tclass.M0.Expression())
         && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(fun#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap));
  // user-defined preconditions
  requires {:id "id1660"} M0.Tuple#Equal(p#0, M0.__default.evalCore(st#0, stCombined#0, args#0, Lit(false)));
  requires {:id "id1661"} M0.Tuple#Equal(pC#0, M0.__default.evalCore(stC#0, stCombinedC#0, args#0, Lit(true)));
  requires {:id "id1662"} M0.__default.ValidState#canCall(stCombined#0)
     ==> M0.__default.ValidState(stCombined#0)
       || (forall p#1: Box :: 
        { M0.__default.WellFounded(p#1) } 
          { Set#IsMember(M0.__default.DomSt(stCombined#0), p#1) } 
        $IsBox(p#1, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stCombined#0), p#1)
           ==> M0.__default.WellFounded(p#1));
  requires {:id "id1663"} M0.__default.ValidState#canCall(stCombinedC#0)
     ==> M0.__default.ValidState(stCombinedC#0)
       || (forall p#2: Box :: 
        { M0.__default.WellFounded(p#2) } 
          { Set#IsMember(M0.__default.DomSt(stCombinedC#0), p#2) } 
        $IsBox(p#2, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stCombinedC#0), p#2)
           ==> M0.__default.WellFounded(p#2));
  requires {:id "id1664"} M0.__default.ConsistentCache#canCall(stCombinedC#0)
     ==> M0.__default.ConsistentCache(stCombinedC#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stCombinedC#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(stCombinedC#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id1665"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id1666"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stCombined#0, stCombinedC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Expression($Unbox(M0.Tuple.fst(p#0)): DatatypeType)
     && $IsA#M0.Expression($Unbox(M0.Tuple.fst(pC#0)): DatatypeType)
     && 
    M0.Tuple.Pair_q(p#0)
     && M0.Tuple.Pair_q(pC#0);
  ensures {:id "id1667"} M0.Expression#Equal($Unbox(M0.Tuple.fst(p#0)): DatatypeType, 
    $Unbox(M0.Tuple.fst(pC#0)): DatatypeType);
  free ensures M0.Tuple.Pair_q(p#0)
     && M0.Tuple.Pair_q(pC#0)
     && M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(p#0), M0.Tuple.snd(pC#0));
  ensures {:id "id1668"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, M0.Tuple.snd(p#0), M0.Tuple.snd(pC#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.EvalCoreDeepen (correctness)"} Impl$$M0.__default.EvalCoreDeepen(p#0: DatatypeType
       where $Is(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(p#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(p#0), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    stCombined#0: Box
       where $IsBox(stCombined#0, Tclass.M0.State())
         && $IsAllocBox(stCombined#0, Tclass.M0.State(), $Heap), 
    pC#0: DatatypeType
       where $Is(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()))
         && $IsAlloc(pC#0, Tclass.M0.Tuple(Tclass.M0.Expression(), Tclass.M0.State()), $Heap)
         && $IsA#M0.Tuple(pC#0), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    stCombinedC#0: Box
       where $IsBox(stCombinedC#0, Tclass.M0.State())
         && $IsAllocBox(stCombinedC#0, Tclass.M0.State(), $Heap), 
    fun#0: DatatypeType
       where $Is(fun#0, Tclass.M0.Expression())
         && $IsAlloc(fun#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(fun#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id1669"} M0.Tuple#Equal(p#0, M0.__default.evalCore(st#0, stCombined#0, args#0, Lit(false)));
  requires {:id "id1670"} M0.Tuple#Equal(pC#0, M0.__default.evalCore(stC#0, stCombinedC#0, args#0, Lit(true)));
  free requires {:id "id1671"} M0.__default.ValidState#canCall(stCombined#0)
     && 
    M0.__default.ValidState(stCombined#0)
     && (forall p#3: Box :: 
      { M0.__default.WellFounded(p#3) } 
        { Set#IsMember(M0.__default.DomSt(stCombined#0), p#3) } 
      $IsBox(p#3, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stCombined#0), p#3)
         ==> M0.__default.WellFounded(p#3));
  free requires {:id "id1672"} M0.__default.ValidState#canCall(stCombinedC#0)
     && 
    M0.__default.ValidState(stCombinedC#0)
     && (forall p#4: Box :: 
      { M0.__default.WellFounded(p#4) } 
        { Set#IsMember(M0.__default.DomSt(stCombinedC#0), p#4) } 
      $IsBox(p#4, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stCombinedC#0), p#4)
         ==> M0.__default.WellFounded(p#4));
  free requires {:id "id1673"} M0.__default.ConsistentCache#canCall(stCombinedC#0)
     && 
    M0.__default.ConsistentCache(stCombinedC#0)
     && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
      { M0.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, TSeq(TChar))
           && $Is(deps#1, TSet(Tclass.M0.Path()))
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(M0.__default.DomC(stCombinedC#0), 
          M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(M0.__default.DomSt(stCombinedC#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  requires {:id "id1674"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id1675"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stCombined#0, stCombinedC#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Expression($Unbox(M0.Tuple.fst(p#0)): DatatypeType)
     && $IsA#M0.Expression($Unbox(M0.Tuple.fst(pC#0)): DatatypeType)
     && 
    M0.Tuple.Pair_q(p#0)
     && M0.Tuple.Pair_q(pC#0);
  ensures {:id "id1676"} M0.Expression#Equal($Unbox(M0.Tuple.fst(p#0)): DatatypeType, 
    $Unbox(M0.Tuple.fst(pC#0)): DatatypeType);
  free ensures M0.Tuple.Pair_q(p#0)
     && M0.Tuple.Pair_q(pC#0)
     && M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(p#0), M0.Tuple.snd(pC#0));
  ensures {:id "id1677"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, M0.Tuple.snd(p#0), M0.Tuple.snd(pC#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.EvalCoreDeepen (correctness)"} Impl$$M0.__default.EvalCoreDeepen(p#0: DatatypeType, 
    st#0: Box, 
    stCombined#0: Box, 
    pC#0: DatatypeType, 
    stC#0: Box, 
    stCombinedC#0: Box, 
    fun#0: DatatypeType, 
    args#0: Seq)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##prim#0: DatatypeType;
  var ##prim#1: DatatypeType;
  var ##args#2: Seq;
  var ##st#5: Box;
  var ##prim#2: DatatypeType;
  var ##args#3: Seq;
  var ##st#6: Box;
  var ##prim#3: DatatypeType;
  var ##prim#4: DatatypeType;
  var ##args#4: Seq;
  var ##st#7: Box;
  var cmd#0_0: Seq
     where $Is(cmd#0_0, TSeq(TChar)) && $IsAlloc(cmd#0_0, TSeq(TChar), $Heap);
  var deps#0_0: Set
     where $Is(deps#0_0, TSet(Tclass.M0.Path()))
       && $IsAlloc(deps#0_0, TSet(Tclass.M0.Path()), $Heap);
  var exts#0_0: Set
     where $Is(exts#0_0, TSet(TSeq(TChar))) && $IsAlloc(exts#0_0, TSet(TSeq(TChar)), $Heap);
  var $rhs#0_0: Seq;
  var $rhs#0_1: Set;
  var $rhs#0_2: Set;
  var defass#ps#0_0: bool;
  var ps#0_0: DatatypeType
     where defass#ps#0_0
       ==> $Is(ps#0_0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()))
         && $IsAlloc(ps#0_0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()), $Heap);
  var ##cmd#0_0: Seq;
  var ##deps#0_0: Set;
  var ##exps#0_0: Set;
  var ##st#0_0: Box;
  var defass#psC#0_0: bool;
  var psC#0_0: DatatypeType
     where defass#psC#0_0
       ==> $Is(psC#0_0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()))
         && $IsAlloc(psC#0_0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()), $Heap);
  var ##cmd#0_1: Seq;
  var ##deps#0_1: Set;
  var ##exps#0_1: Set;
  var ##stC#0_0: Box;
  var cmd##0_0: Seq;
  var deps##0_0: Set;
  var exps##0_0: Set;
  var st##0_0: Box;
  var ##st#0_1: Box;
  var ##st'#0_0: Box;
  var ##cmd#0_2: Seq;
  var ##deps#0_2: Set;
  var ##exps#0_2: Set;
  var ##st#0_2: Box;
  var ##st'#0_1: Box;
  var newPaths#0_0: Set
     where $Is(newPaths#0_0, TSet(Tclass.M0.Path()))
       && $IsAlloc(newPaths#0_0, TSet(Tclass.M0.Path()), $Heap);
  var e#0_2: Seq;
  var ##cmd#0_3: Seq;
  var ##deps#0_3: Set;
  var ##exp#0_0: Seq;
  var ##st#0_3: Box;
  var ##st#0_4: Box;
  var e#0_3: Seq;
  var ##p#0_0: Box;
  var ##cmd#0_4: Seq;
  var ##deps#0_4: Set;
  var ##exp#0_1: Seq;
  var ##st#0_5: Box;
  var paths#0_0_0: Set
     where $Is(paths#0_0_0, TSet(Tclass.M0.Path()))
       && $IsAlloc(paths#0_0_0, TSet(Tclass.M0.Path()), $Heap);
  var e#0_0_1: Seq;
  var ##cmd#0_0_0: Seq;
  var ##deps#0_0_0: Set;
  var ##exp#0_0_0: Seq;
  var ##st#0_0_0: Box;
  var ##stC#0_0_0: Box;
  var ##st#0_0_1: Box;
  var ##st#0_0_2: Box;
  var ##st#0_0_3: Box;
  var ##st#0_0_4: Box;
  var ##st#0_0_5: Box;
  var pth#0_0_0_0: Box;
  var ##st#0_0_0_0: Box;
  var ##p#0_0_0_0: Box;
  var ##st#0_0_0_1: Box;
  var ##p#0_0_0_1: Box;
  var ##st#0_0_0_2: Box;
  var ##st#0_0_0_3: Box;
  var e#0_0_0_1_0: Seq;
  var ##cmd#0_0_0_1_0: Seq;
  var ##deps#0_0_0_1_0: Set;
  var ##exp#0_0_0_1_0: Seq;
  var e#0_0_0_1_2: Seq
     where $Is(e#0_0_0_1_2, TSeq(TChar)) && $IsAlloc(e#0_0_0_1_2, TSeq(TChar), $Heap);
  var e#0_0_0_1_3: Seq;
  var ##cmd#0_0_0_1_1: Seq;
  var ##deps#0_0_0_1_1: Set;
  var ##exp#0_0_0_1_1: Seq;
  var ##cmd#0_0_0_1_2: Seq;
  var ##deps#0_0_0_1_2: Set;
  var ##exps#0_0_0_1_0: Set;
  var ##st#0_0_0_1_0: Box;
  var ##p#0_0_0_1_0: Box;
  var ##st#0_0_0_1_1: Box;
  var ##p#0_0_0_1_1: Box;
  var ##st#0_0_0_1_2: Box;
  var st##0_0_0: Box;
  var st'##0_0_0: Box;
  var stC##0_0_0: Box;
  var ##st#0_0_6: Box;
  var ##stC#0_0_1: Box;
  var defass#result#0_1_0: bool;
  var result#0_1_0: DatatypeType
     where defass#result#0_1_0
       ==> $Is(result#0_1_0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()))
         && $IsAlloc(result#0_1_0, Tclass.M0.Tuple(TSet(Tclass.M0.Path()), Tclass.M0.State()), $Heap);
  var ##cmd#0_1_0: Seq;
  var ##deps#0_1_0: Set;
  var ##exps#0_1_0: Set;
  var ##st#0_1_0: Box;
  var expr'#0_1_0: Set
     where $Is(expr'#0_1_0, TSet(Tclass.M0.Path()))
       && $IsAlloc(expr'#0_1_0, TSet(Tclass.M0.Path()), $Heap);
  var defass#st'#0_1_0: bool;
  var st'#0_1_0: Box
     where defass#st'#0_1_0
       ==> $IsBox(st'#0_1_0, Tclass.M0.State())
         && $IsAllocBox(st'#0_1_0, Tclass.M0.State(), $Heap);
  var $rhs#0_1_0: Set;
  var $rhs#0_1_1: Box;
  var defass#stC'#0_1_0: bool;
  var stC'#0_1_0: Box
     where defass#stC'#0_1_0
       ==> $IsBox(stC'#0_1_0, Tclass.M0.State())
         && $IsAllocBox(stC'#0_1_0, Tclass.M0.State(), $Heap);
  var ##cmd#0_1_1: Seq;
  var ##deps#0_1_1: Set;
  var ##exps#0_1_1: Set;
  var ##st#0_1_1: Box;
  var cmd##0_1_0: Seq;
  var deps##0_1_0: Set;
  var exps##0_1_0: Set;
  var st##0_1_0: Box;
  var ##st#0_1_2: Box;
  var ##st'#0_1_0: Box;
  var ##st#0_1_3: Box;
  var ##st'#0_1_1: Box;
  var ##st#0_1_4: Box;
  var ##st#0_1_5: Box;
  var ##st#0_1_6: Box;
  var ##st#0_1_7: Box;
  var pth#0_1_0_0: Box;
  var ##st#0_1_0_0: Box;
  var ##p#0_1_0_0: Box;
  var ##st#0_1_0_1: Box;
  var ##p#0_1_0_1: Box;
  var ##st#0_1_0_2: Box;
  var ##st#0_1_0_3: Box;
  var e#0_1_0_1_0: Seq;
  var ##cmd#0_1_0_1_0: Seq;
  var ##deps#0_1_0_1_0: Set;
  var ##exp#0_1_0_1_0: Seq;
  var e#0_1_0_1_2: Seq
     where $Is(e#0_1_0_1_2, TSeq(TChar)) && $IsAlloc(e#0_1_0_1_2, TSeq(TChar), $Heap);
  var e#0_1_0_1_3: Seq;
  var ##cmd#0_1_0_1_1: Seq;
  var ##deps#0_1_0_1_1: Set;
  var ##exp#0_1_0_1_1: Seq;
  var ##cmd#0_1_0_1_2: Seq;
  var ##deps#0_1_0_1_2: Set;
  var ##exps#0_1_0_1_0: Set;
  var ##st#0_1_0_1_0: Box;
  var ##p#0_1_0_1_0_0_0: Box;
  var ##st#0_1_0_1_0_0_0: Box;
  var ##p#0_1_0_1_0_0_1: Box;
  var ##st#0_1_0_1_0_0_1: Box;
  var ##p#0_1_0_1_0_1_0: Box;
  var ##st#0_1_0_1_0_1_0: Box;
  var p##0_1_0_1_0_1_0: Box;
  var st0##0_1_0_1_0_1_0: Box;
  var st1##0_1_0_1_0_1_0: Box;
  var ##p#0_1_0_1_0_1_1: Box;
  var ##st#0_1_0_1_0_1_1: Box;
  var ##p#0_1_0_1_0_2_0: Box;
  var ##st#0_1_0_1_0_2_0: Box;
  var p##0_1_0_1_0_2_0: Box;
  var st0##0_1_0_1_0_2_0: Box;
  var st1##0_1_0_1_0_2_0: Box;
  var ##p#0_1_0_1_0_2_1: Box;
  var ##st#0_1_0_1_0_2_1: Box;
  var ##p#0_1_0_1_0_3_0: Box;
  var ##st#0_1_0_1_0_3_0: Box;
  var p##0_1_0_1_0_3_0: Box;
  var st0##0_1_0_1_0_3_0: Box;
  var st1##0_1_0_1_0_3_0: Box;
  var ##p#0_1_0_1_0_3_1: Box;
  var ##st#0_1_0_1_0_3_1: Box;
  var ##p#0_1_0_1_0_4_0: Box;
  var ##st#0_1_0_1_0_4_0: Box;
  var ##p#0_1_0_1_0_4_1: Box;
  var ##st#0_1_0_1_0_4_1: Box;
  var ##p#0_1_0_1_0_0: Box;
  var ##st#0_1_0_1_0_0: Box;
  var pth#0_1_1_0: Box;
  var ##st#0_1_1_0: Box;
  var ##st#0_1_1_1: Box;
  var ##p#0_1_1_0: Box;
  var ##st#0_1_1_2: Box;
  var ##p#0_1_1_1: Box;
  var ##st#0_1_1_3: Box;
  var ##st#0_1_1_4: Box;
  var ##st#0_1_1_5: Box;
  var ##p#0_1_1_0_0_0_0: Box;
  var ##st#0_1_1_0_0_0_0: Box;
  var p##0_1_1_0_0_0_0: Box;
  var st0##0_1_1_0_0_0_0: Box;
  var st1##0_1_1_0_0_0_0: Box;
  var ##p#0_1_1_0_0_0_1: Box;
  var ##st#0_1_1_0_0_0_1: Box;
  var ##p#0_1_1_0_0_1_0: Box;
  var ##st#0_1_1_0_0_1_0: Box;
  var ##p#0_1_1_0_0_1_1: Box;
  var ##st#0_1_1_0_0_1_1: Box;
  var ##p#0_1_1_0_0_2_0: Box;
  var ##st#0_1_1_0_0_2_0: Box;
  var ##p#0_1_1_0_0_2_1: Box;
  var ##st#0_1_1_0_0_2_1: Box;
  var ##p#0_1_1_0_0_0: Box;
  var ##st#0_1_1_0_0_0: Box;
  var ##p#0_1_1_1_0: Box;
  var ##st#0_1_1_1_0: Box;
  var ##p#0_1_1_1_1: Box;
  var ##st#0_1_1_1_1: Box;
  var ##st#0_1_8: Box;
  var ##stC#0_1_0: Box;
  var ##st#0_1_9: Box;
  var ##stC#0_1_1: Box;
  var ##st#0_6: Box;
  var ##stC#0_1: Box;

    // AddMethodImpl: EvalCoreDeepen, Impl$$M0.__default.EvalCoreDeepen
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assume statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(962,5)
    ##prim#0 := Lit(#M0.Primitive.primExec());
    // assume allocatedness for argument to function
    assume $IsAlloc(##prim#0, Tclass.M0.Primitive(), $Heap);
    assume M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()));
    if (Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec()))))
    {
        ##prim#1 := Lit(#M0.Primitive.primExec());
        // assume allocatedness for argument to function
        assume $IsAlloc(##prim#1, Tclass.M0.Primitive(), $Heap);
        ##args#2 := args#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#2, TSeq(Tclass.M0.Expression()), $Heap);
        ##st#5 := stCombined#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
        assert {:id "id1678"} {:subsumption 0} M0.Primitive.primExec_q(##prim#1) ==> Seq#Length(##args#2) == LitInt(3);
        assert {:id "id1679"} {:subsumption 0} M0.Primitive.primCreatePath_q(##prim#1) ==> Seq#Length(##args#2) == LitInt(1);
        assume M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args#0, stCombined#0);
        ##prim#2 := Lit(#M0.Primitive.primExec());
        // assume allocatedness for argument to function
        assume $IsAlloc(##prim#2, Tclass.M0.Primitive(), $Heap);
        ##args#3 := args#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#3, TSeq(Tclass.M0.Expression()), $Heap);
        ##st#6 := stCombinedC#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
        assert {:id "id1680"} {:subsumption 0} M0.Primitive.primExec_q(##prim#2) ==> Seq#Length(##args#3) == LitInt(3);
        assert {:id "id1681"} {:subsumption 0} M0.Primitive.primCreatePath_q(##prim#2) ==> Seq#Length(##args#3) == LitInt(1);
        assume M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args#0, stCombinedC#0);
    }

    assume M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()))
       && (Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
         ==> M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args#0, stCombined#0)
           && M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args#0, stCombinedC#0));
    assume {:id "id1682"} Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
       ==> M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args#0, stCombined#0)
         == M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args#0, stCombinedC#0);
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(965,5)
    ##prim#3 := Lit(#M0.Primitive.primExec());
    // assume allocatedness for argument to function
    assume $IsAlloc(##prim#3, Tclass.M0.Primitive(), $Heap);
    assume M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()));
    if (Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec()))))
    {
        ##prim#4 := Lit(#M0.Primitive.primExec());
        // assume allocatedness for argument to function
        assume $IsAlloc(##prim#4, Tclass.M0.Primitive(), $Heap);
        ##args#4 := args#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#4, TSeq(Tclass.M0.Expression()), $Heap);
        ##st#7 := stCombined#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
        assert {:id "id1683"} {:subsumption 0} M0.Primitive.primExec_q(##prim#4) ==> Seq#Length(##args#4) == LitInt(3);
        assume M0.Primitive.primExec_q(##prim#4) ==> Seq#Length(##args#4) == LitInt(3);
        assert {:id "id1684"} {:subsumption 0} M0.Primitive.primCreatePath_q(##prim#4) ==> Seq#Length(##args#4) == LitInt(1);
        assume M0.Primitive.primCreatePath_q(##prim#4) ==> Seq#Length(##args#4) == LitInt(1);
        assume M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args#0, stCombined#0);
    }

    assume M0.__default.Arity#canCall(Lit(#M0.Primitive.primExec()))
       && (Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
         ==> M0.__default.ValidArgs#canCall(Lit(#M0.Primitive.primExec()), args#0, stCombined#0));
    if (Seq#Length(args#0) == LitInt(M0.__default.Arity(Lit(#M0.Primitive.primExec())))
       && M0.__default.ValidArgs(Lit(#M0.Primitive.primExec()), args#0, stCombined#0))
    {
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(966,27)
        assume true;
        assume true;
        assume true;
        assert {:id "id1685"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
        assert {:id "id1686"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType);
        assert {:id "id1687"} M0.Literal.litString_q(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType));
        assume true;
        $rhs#0_0 := M0.Literal.str(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType));
        assert {:id "id1689"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args#0);
        assert {:id "id1690"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType);
        assert {:id "id1691"} M0.Literal.litArrOfPaths_q(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType));
        assume true;
        $rhs#0_1 := M0.Literal.paths(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType));
        assert {:id "id1693"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args#0);
        assert {:id "id1694"} M0.Expression.exprLiteral_q($Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType);
        assert {:id "id1695"} M0.Literal.litArrOfStrings_q(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType));
        assume true;
        $rhs#0_2 := M0.Literal.strs(M0.Expression.lit($Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType));
        cmd#0_0 := $rhs#0_0;
        deps#0_0 := $rhs#0_1;
        exts#0_0 := $rhs#0_2;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(967,14)
        assume true;
        ##cmd#0_0 := cmd#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#0_0, TSeq(TChar), $Heap);
        ##deps#0_0 := deps#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#0_0, TSet(Tclass.M0.Path()), $Heap);
        ##exps#0_0 := exts#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exps#0_0, TSet(TSeq(TChar)), $Heap);
        ##st#0_0 := stCombined#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_0, Tclass.M0.State(), $Heap);
        assume M0.__default.exec#canCall(cmd#0_0, deps#0_0, exts#0_0, stCombined#0);
        assume M0.Tuple.Pair_q(M0.__default.exec(cmd#0_0, deps#0_0, exts#0_0, stCombined#0));
        assume M0.__default.exec#canCall(cmd#0_0, deps#0_0, exts#0_0, stCombined#0);
        ps#0_0 := M0.__default.exec(cmd#0_0, deps#0_0, exts#0_0, stCombined#0);
        defass#ps#0_0 := true;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(968,15)
        assume true;
        ##cmd#0_1 := cmd#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#0_1, TSeq(TChar), $Heap);
        ##deps#0_1 := deps#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#0_1, TSet(Tclass.M0.Path()), $Heap);
        ##exps#0_1 := exts#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exps#0_1, TSet(TSeq(TChar)), $Heap);
        ##stC#0_0 := stCombinedC#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0_0, Tclass.M0.State(), $Heap);
        assume M0.__default.execC#canCall(cmd#0_0, deps#0_0, exts#0_0, stCombinedC#0);
        assume M0.Tuple.Pair_q(M0.__default.execC(cmd#0_0, deps#0_0, exts#0_0, stCombinedC#0));
        assume M0.__default.execC#canCall(cmd#0_0, deps#0_0, exts#0_0, stCombinedC#0);
        psC#0_0 := M0.__default.execC(cmd#0_0, deps#0_0, exts#0_0, stCombinedC#0);
        defass#psC#0_0 := true;
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(969,7)
        assert {:id "id1702"} defass#ps#0_0;
        assume M0.Tuple.Pair_q(ps#0_0);
        assert {:id "id1703"} defass#ps#0_0;
        assume M0.Tuple.Pair_q(ps#0_0);
        assume $IsA#M0.Tuple(p#0) && M0.Tuple.Pair_q(ps#0_0) && M0.Tuple.Pair_q(ps#0_0);
        assert {:id "id1704"} M0.Tuple#Equal(p#0, 
          #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(ps#0_0)): Set))), 
            M0.Tuple.snd(ps#0_0)));
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(970,7)
        assert {:id "id1705"} defass#psC#0_0;
        assume M0.Tuple.Pair_q(psC#0_0);
        assert {:id "id1706"} defass#psC#0_0;
        assume M0.Tuple.Pair_q(psC#0_0);
        assume $IsA#M0.Tuple(pC#0) && M0.Tuple.Pair_q(psC#0_0) && M0.Tuple.Pair_q(psC#0_0);
        assert {:id "id1707"} M0.Tuple#Equal(pC#0, 
          #M0.Tuple.Pair($Box(#M0.Expression.exprLiteral(#M0.Literal.litArrOfPaths($Unbox(M0.Tuple.fst(psC#0_0)): Set))), 
            M0.Tuple.snd(psC#0_0)));
        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(972,7)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(972,14)
        // TrCallStmt: Before ProcessCallStmt
        call {:id "id1708"} Call$$M0.__default.reveal__Extends();
        // TrCallStmt: After ProcessCallStmt
        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(973,7)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(973,14)
        // TrCallStmt: Before ProcessCallStmt
        call {:id "id1709"} Call$$M0.__default.reveal__StateCorrespondence();
        // TrCallStmt: After ProcessCallStmt
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(974,19)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        cmd##0_0 := cmd#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        deps##0_0 := deps#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        exps##0_0 := exts#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##0_0 := stCombined#0;
        call {:id "id1710"} Call$$M0.__default.ExecProperty(cmd##0_0, deps##0_0, exps##0_0, st##0_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(975,7)
        ##st#0_1 := stCombined#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_1, Tclass.M0.State(), $Heap);
        assert {:id "id1711"} defass#ps#0_0;
        assume M0.Tuple.Pair_q(ps#0_0);
        ##st'#0_0 := M0.Tuple.snd(ps#0_0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0_0, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(stCombined#0, M0.Tuple.snd(ps#0_0));
        assume M0.Tuple.Pair_q(ps#0_0)
           && M0.__default.Extends#canCall(stCombined#0, M0.Tuple.snd(ps#0_0));
        assert {:id "id1712"} M0.__default.Extends(reveal_M0._default.Extends, stCombined#0, M0.Tuple.snd(ps#0_0));
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(976,7)
        ##cmd#0_2 := cmd#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#0_2, TSeq(TChar), $Heap);
        ##deps#0_2 := deps#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#0_2, TSet(Tclass.M0.Path()), $Heap);
        ##exps#0_2 := exts#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exps#0_2, TSet(TSeq(TChar)), $Heap);
        ##st#0_2 := stCombined#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_2, Tclass.M0.State(), $Heap);
        assert {:id "id1713"} defass#ps#0_0;
        assume M0.Tuple.Pair_q(ps#0_0);
        ##st'#0_1 := M0.Tuple.snd(ps#0_0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0_1, Tclass.M0.State(), $Heap);
        assume M0.__default.ExtendsLimit#canCall(cmd#0_0, deps#0_0, exts#0_0, stCombined#0, M0.Tuple.snd(ps#0_0));
        assume M0.Tuple.Pair_q(ps#0_0)
           && M0.__default.ExtendsLimit#canCall(cmd#0_0, deps#0_0, exts#0_0, stCombined#0, M0.Tuple.snd(ps#0_0));
        assert {:id "id1714"} {:subsumption 0} M0.__default.ExtendsLimit#canCall(cmd#0_0, deps#0_0, exts#0_0, stCombined#0, M0.Tuple.snd(ps#0_0))
           ==> M0.__default.ExtendsLimit(cmd#0_0, deps#0_0, exts#0_0, stCombined#0, M0.Tuple.snd(ps#0_0))
             || Set#Equal(M0.__default.DomSt(M0.Tuple.snd(ps#0_0)), 
              Set#Union(M0.__default.DomSt(stCombined#0), 
                Set#FromBoogieMap((lambda $y#0_0: Box :: 
                    (exists e#0_0: Seq :: 
                      { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0) } 
                        { Set#IsMember(exts#0_0, $Box(e#0_0)) } 
                      $Is(e#0_0, TSeq(TChar))
                         && Set#IsMember(exts#0_0, $Box(e#0_0))
                         && $y#0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0))))));
        assume {:id "id1715"} M0.__default.ExtendsLimit(cmd#0_0, deps#0_0, exts#0_0, stCombined#0, M0.Tuple.snd(ps#0_0));
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(977,20)
        assume true;
        // Begin Comprehension WF check
        havoc e#0_2;
        if ($Is(e#0_2, TSeq(TChar)) && $IsAlloc(e#0_2, TSeq(TChar), $Heap))
        {
            if (Set#IsMember(exts#0_0, $Box(e#0_2)))
            {
                ##cmd#0_3 := cmd#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0_3, TSeq(TChar), $Heap);
                ##deps#0_3 := deps#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0_3, TSet(Tclass.M0.Path()), $Heap);
                ##exp#0_0 := e#0_2;
                // assume allocatedness for argument to function
                assume $IsAlloc(##exp#0_0, TSeq(TChar), $Heap);
                assume M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_2);
            }
        }

        // End Comprehension WF check
        assume (forall e#0_1: Seq :: 
          { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_1) } 
            { Set#IsMember(exts#0_0, $Box(e#0_1)) } 
          $Is(e#0_1, TSeq(TChar))
             ==> 
            Set#IsMember(exts#0_0, $Box(e#0_1))
             ==> M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_1));
        newPaths#0_0 := Set#FromBoogieMap((lambda $y#0_2: Box :: 
            (exists e#0_1: Seq :: 
              { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_1) } 
                { Set#IsMember(exts#0_0, $Box(e#0_1)) } 
              $Is(e#0_1, TSeq(TChar))
                 && Set#IsMember(exts#0_0, $Box(e#0_1))
                 && $y#0_2 == M0.__default.Loc(cmd#0_0, deps#0_0, e#0_1))));
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(978,7)
        assume M0.Tuple.Pair_q(p#0);
        ##st#0_3 := M0.Tuple.snd(p#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_3, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(M0.Tuple.snd(p#0));
        ##st#0_4 := stCombined#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_4, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(stCombined#0);
        assume M0.Tuple.Pair_q(p#0)
           && M0.__default.DomSt#canCall(M0.Tuple.snd(p#0))
           && M0.__default.DomSt#canCall(stCombined#0);
        assert {:id "id1717"} Set#Equal(M0.__default.DomSt(M0.Tuple.snd(p#0)), 
          Set#Union(M0.__default.DomSt(stCombined#0), newPaths#0_0));
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(979,7)
        // Begin Comprehension WF check
        havoc e#0_3;
        if ($Is(e#0_3, TSeq(TChar)) && $IsAlloc(e#0_3, TSeq(TChar), $Heap))
        {
            if (Set#IsMember(exts#0_0, $Box(e#0_3)))
            {
                ##cmd#0_4 := cmd#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0_4, TSeq(TChar), $Heap);
                ##deps#0_4 := deps#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0_4, TSet(Tclass.M0.Path()), $Heap);
                ##exp#0_1 := e#0_3;
                // assume allocatedness for argument to function
                assume $IsAlloc(##exp#0_1, TSeq(TChar), $Heap);
                assume M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_3);
                ##p#0_0 := M0.__default.Loc(cmd#0_0, deps#0_0, e#0_3);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##p#0_0, Tclass.M0.Path(), $Heap);
                assume M0.__default.Hash#canCall(M0.__default.Loc(cmd#0_0, deps#0_0, e#0_3));
                ##st#0_5 := stCombinedC#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_5, Tclass.M0.State(), $Heap);
                assume M0.__default.DomC#canCall(stCombinedC#0);
            }
        }

        // End Comprehension WF check
        assume (forall e#0_4: Seq :: 
          { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_4) } 
            { Set#IsMember(exts#0_0, $Box(e#0_4)) } 
          $Is(e#0_4, TSeq(TChar))
             ==> 
            Set#IsMember(exts#0_0, $Box(e#0_4))
             ==> M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_4)
               && M0.__default.Hash#canCall(M0.__default.Loc(cmd#0_0, deps#0_0, e#0_4))
               && M0.__default.DomC#canCall(stCombinedC#0));
        if ((forall e#0_4: Seq :: 
          { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_4) } 
            { Set#IsMember(exts#0_0, $Box(e#0_4)) } 
          $Is(e#0_4, TSeq(TChar)) && Set#IsMember(exts#0_0, $Box(e#0_4))
             ==> Set#IsMember(M0.__default.DomC(stCombinedC#0), 
              M0.__default.Hash(M0.__default.Loc(cmd#0_0, deps#0_0, e#0_4)))))
        {
            push;
            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(980,19)
            assume true;
            // Begin Comprehension WF check
            havoc e#0_0_1;
            if ($Is(e#0_0_1, TSeq(TChar)) && $IsAlloc(e#0_0_1, TSeq(TChar), $Heap))
            {
                if (Set#IsMember(exts#0_0, $Box(e#0_0_1)))
                {
                    ##cmd#0_0_0 := cmd#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#0_0_0, TSeq(TChar), $Heap);
                    ##deps#0_0_0 := deps#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#0_0_0, TSet(Tclass.M0.Path()), $Heap);
                    ##exp#0_0_0 := e#0_0_1;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exp#0_0_0, TSeq(TChar), $Heap);
                    assume M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_0_1);
                }
            }

            // End Comprehension WF check
            assume (forall e#0_0_0: Seq :: 
              { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0_0) } 
                { Set#IsMember(exts#0_0, $Box(e#0_0_0)) } 
              $Is(e#0_0_0, TSeq(TChar))
                 ==> 
                Set#IsMember(exts#0_0, $Box(e#0_0_0))
                 ==> M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_0_0));
            paths#0_0_0 := Set#FromBoogieMap((lambda $y#0_0_0: Box :: 
                (exists e#0_0_0: Seq :: 
                  { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0_0) } 
                    { Set#IsMember(exts#0_0, $Box(e#0_0_0)) } 
                  $Is(e#0_0_0, TSeq(TChar))
                     && Set#IsMember(exts#0_0, $Box(e#0_0_0))
                     && $y#0_0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0_0))));
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(981,9)
            assert {:id "id1719"} defass#psC#0_0;
            assume M0.Tuple.Pair_q(psC#0_0);
            assume M0.Tuple.Pair_q(psC#0_0);
            assert {:id "id1720"} Set#Equal($Unbox(M0.Tuple.fst(psC#0_0)): Set, paths#0_0_0);
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(982,9)
            assert {:id "id1721"} defass#psC#0_0;
            assume $IsA#M0.Tuple(psC#0_0);
            assert {:id "id1722"} M0.Tuple#Equal(psC#0_0, #M0.Tuple.Pair($Box(paths#0_0_0), stCombinedC#0));
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(983,9)
            assert {:id "id1723"} defass#ps#0_0;
            assume M0.Tuple.Pair_q(ps#0_0);
            assert {:id "id1724"} defass#psC#0_0;
            assume M0.Tuple.Pair_q(psC#0_0);
            assume M0.Tuple.Pair_q(ps#0_0) && M0.Tuple.Pair_q(psC#0_0);
            assert {:id "id1725"} Set#Equal($Unbox(M0.Tuple.fst(ps#0_0)): Set, $Unbox(M0.Tuple.fst(psC#0_0)): Set);
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(984,9)
            assert {:id "id1726"} defass#psC#0_0;
            assume M0.Tuple.Pair_q(psC#0_0);
            assume M0.Tuple.Pair_q(psC#0_0);
            assert {:id "id1727"} M0.Tuple.snd(psC#0_0) == stCombinedC#0;
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(986,9)
            ##st#0_0_0 := stCombined#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_0_0, Tclass.M0.State(), $Heap);
            ##stC#0_0_0 := stCombinedC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#0_0_0, Tclass.M0.State(), $Heap);
            assume M0.__default.StateCorrespondence#canCall(stCombined#0, stCombinedC#0);
            assume M0.__default.StateCorrespondence#canCall(stCombined#0, stCombinedC#0);
            assert {:id "id1728"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stCombined#0, stCombinedC#0);
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(987,9)
            ##st#0_0_1 := stCombined#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_0_1, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(stCombined#0);
            ##st#0_0_2 := stCombinedC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_0_2, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(stCombinedC#0);
            assume M0.__default.DomSt#canCall(stCombined#0)
               && M0.__default.DomSt#canCall(stCombinedC#0);
            assert {:id "id1729"} Set#Subset(M0.__default.DomSt(stCombined#0), M0.__default.DomSt(stCombinedC#0));
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(988,9)
            ##st#0_0_3 := stCombinedC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_0_3, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(stCombinedC#0);
            assume M0.__default.DomSt#canCall(stCombinedC#0);
            assert {:id "id1730"} Set#Subset(newPaths#0_0, M0.__default.DomSt(stCombinedC#0));
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(989,9)
            assume M0.Tuple.Pair_q(p#0);
            ##st#0_0_4 := M0.Tuple.snd(p#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_0_4, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.Tuple.snd(p#0));
            assume M0.Tuple.Pair_q(pC#0);
            ##st#0_0_5 := M0.Tuple.snd(pC#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_0_5, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.Tuple.snd(pC#0));
            assume M0.Tuple.Pair_q(p#0)
               && M0.__default.DomSt#canCall(M0.Tuple.snd(p#0))
               && 
              M0.Tuple.Pair_q(pC#0)
               && M0.__default.DomSt#canCall(M0.Tuple.snd(pC#0));
            assert {:id "id1731"} Set#Subset(M0.__default.DomSt(M0.Tuple.snd(p#0)), M0.__default.DomSt(M0.Tuple.snd(pC#0)));
            // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(990,9)
            if (*)
            {
                // Assume Fuel Constant
                havoc pth#0_0_0_0;
                assume $IsBox(pth#0_0_0_0, Tclass.M0.Path());
                assume M0.Tuple.Pair_q(p#0);
                ##st#0_0_0_0 := M0.Tuple.snd(p#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_0_0_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(M0.Tuple.snd(p#0));
                assume M0.Tuple.Pair_q(p#0) && M0.__default.DomSt#canCall(M0.Tuple.snd(p#0));
                assume {:id "id1732"} Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(p#0)), pth#0_0_0_0);
                if (*)
                {
                    ##p#0_0_0_0 := pth#0_0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_0_0_0, Tclass.M0.Path(), $Heap);
                    assume M0.Tuple.Pair_q(p#0);
                    ##st#0_0_0_1 := M0.Tuple.snd(p#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_0_0_1, Tclass.M0.State(), $Heap);
                    assert {:id "id1733"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_0_0_1), ##p#0_0_0_0);
                    assume M0.__default.GetSt#canCall(pth#0_0_0_0, M0.Tuple.snd(p#0));
                    ##p#0_0_0_1 := pth#0_0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_0_0_1, Tclass.M0.Path(), $Heap);
                    ##st#0_0_0_2 := stCombinedC#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_0_0_2, Tclass.M0.State(), $Heap);
                    assert {:id "id1734"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_0_0_2), ##p#0_0_0_1);
                    assume M0.__default.GetSt#canCall(pth#0_0_0_0, stCombinedC#0);
                    assume M0.Tuple.Pair_q(p#0)
                       && M0.__default.GetSt#canCall(pth#0_0_0_0, M0.Tuple.snd(p#0))
                       && M0.__default.GetSt#canCall(pth#0_0_0_0, stCombinedC#0);
                    assume {:id "id1735"} M0.__default.GetSt(pth#0_0_0_0, M0.Tuple.snd(p#0))
                       == M0.__default.GetSt(pth#0_0_0_0, stCombinedC#0);
                    assume false;
                }

                push;
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(993,11)
                ##st#0_0_0_3 := stCombined#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_0_0_3, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stCombined#0);
                assume M0.__default.DomSt#canCall(stCombined#0);
                if (Set#IsMember(M0.__default.DomSt(stCombined#0), pth#0_0_0_0))
                {
                    push;
                    pop;
                }
                else
                {
                    push;
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(996,13)
                    assume true;
                    assert {:id "id1736"} Set#IsMember(newPaths#0_0, pth#0_0_0_0);
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(997,13)
                    // Begin Comprehension WF check
                    havoc e#0_0_0_1_0;
                    if ($Is(e#0_0_0_1_0, TSeq(TChar)) && $IsAlloc(e#0_0_0_1_0, TSeq(TChar), $Heap))
                    {
                        if (Set#IsMember(exts#0_0, $Box(e#0_0_0_1_0)))
                        {
                            ##cmd#0_0_0_1_0 := cmd#0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##cmd#0_0_0_1_0, TSeq(TChar), $Heap);
                            ##deps#0_0_0_1_0 := deps#0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##deps#0_0_0_1_0, TSet(Tclass.M0.Path()), $Heap);
                            ##exp#0_0_0_1_0 := e#0_0_0_1_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##exp#0_0_0_1_0, TSeq(TChar), $Heap);
                            assume M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_0_0_1_0);
                        }
                    }

                    // End Comprehension WF check
                    assume (forall e#0_0_0_1_1: Seq :: 
                      { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0_0_1_1) } 
                        { Set#IsMember(exts#0_0, $Box(e#0_0_0_1_1)) } 
                      $Is(e#0_0_0_1_1, TSeq(TChar))
                         ==> 
                        Set#IsMember(exts#0_0, $Box(e#0_0_0_1_1))
                         ==> M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_0_0_1_1));
                    assert {:id "id1737"} (exists e#0_0_0_1_1: Seq :: 
                      { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0_0_1_1) } 
                        { Set#IsMember(exts#0_0, $Box(e#0_0_0_1_1)) } 
                      $Is(e#0_0_0_1_1, TSeq(TChar))
                         && 
                        Set#IsMember(exts#0_0, $Box(e#0_0_0_1_1))
                         && pth#0_0_0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0_0_1_1));
                    // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(998,19)
                    havoc e#0_0_0_1_3;
                    if ($Is(e#0_0_0_1_3, TSeq(TChar)) && $IsAlloc(e#0_0_0_1_3, TSeq(TChar), $Heap))
                    {
                        if (Set#IsMember(exts#0_0, $Box(e#0_0_0_1_3)))
                        {
                            ##cmd#0_0_0_1_1 := cmd#0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##cmd#0_0_0_1_1, TSeq(TChar), $Heap);
                            ##deps#0_0_0_1_1 := deps#0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##deps#0_0_0_1_1, TSet(Tclass.M0.Path()), $Heap);
                            ##exp#0_0_0_1_1 := e#0_0_0_1_3;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##exp#0_0_0_1_1, TSeq(TChar), $Heap);
                            assume M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_0_0_1_3);
                        }

                        assume Set#IsMember(exts#0_0, $Box(e#0_0_0_1_3))
                           ==> M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_0_0_1_3);
                    }

                    assert {:id "id1738"} ($Is(Lit(Seq#Empty(): Seq), TSeq(TChar))
                         && 
                        Set#IsMember(exts#0_0, $Box(Lit(Seq#Empty(): Seq)))
                         && pth#0_0_0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, Lit(Seq#Empty(): Seq)))
                       || (exists $as#e0_0_0_1_0#0_0_0_1_0: Seq :: 
                        $Is($as#e0_0_0_1_0#0_0_0_1_0, TSeq(TChar))
                           && 
                          Set#IsMember(exts#0_0, $Box($as#e0_0_0_1_0#0_0_0_1_0))
                           && pth#0_0_0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, $as#e0_0_0_1_0#0_0_0_1_0));
                    havoc e#0_0_0_1_2;
                    assume {:id "id1739"} Set#IsMember(exts#0_0, $Box(e#0_0_0_1_2))
                       && pth#0_0_0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, e#0_0_0_1_2);
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(999,13)
                    ##cmd#0_0_0_1_2 := cmd#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#0_0_0_1_2, TSeq(TChar), $Heap);
                    ##deps#0_0_0_1_2 := deps#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#0_0_0_1_2, TSet(Tclass.M0.Path()), $Heap);
                    ##exps#0_0_0_1_0 := exts#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exps#0_0_0_1_0, TSet(TSeq(TChar)), $Heap);
                    assume M0.Tuple.Pair_q(p#0);
                    ##st#0_0_0_1_0 := M0.Tuple.snd(p#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_0_0_1_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.Post#canCall(cmd#0_0, deps#0_0, exts#0_0, M0.Tuple.snd(p#0));
                    assume M0.Tuple.Pair_q(p#0)
                       && M0.__default.Post#canCall(cmd#0_0, deps#0_0, exts#0_0, M0.Tuple.snd(p#0));
                    assert {:id "id1740"} M0.__default.Post(reveal_M0._default.Post, cmd#0_0, deps#0_0, exts#0_0, M0.Tuple.snd(p#0));
                    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1000,13)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1000,20)
                    // TrCallStmt: Before ProcessCallStmt
                    call {:id "id1741"} Call$$M0.__default.reveal__Post();
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1001,13)
                    ##p#0_0_0_1_0 := pth#0_0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_0_0_1_0, Tclass.M0.Path(), $Heap);
                    assume M0.Tuple.Pair_q(p#0);
                    ##st#0_0_0_1_1 := M0.Tuple.snd(p#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_0_0_1_1, Tclass.M0.State(), $Heap);
                    assert {:id "id1742"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_0_0_1_1), ##p#0_0_0_1_0);
                    assume M0.__default.GetSt#canCall(pth#0_0_0_0, M0.Tuple.snd(p#0));
                    ##p#0_0_0_1_1 := pth#0_0_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_0_0_1_1, Tclass.M0.Path(), $Heap);
                    assume M0.Tuple.Pair_q(p#0);
                    ##st#0_0_0_1_2 := M0.Tuple.snd(p#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_0_0_1_2, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(pth#0_0_0_0, M0.Tuple.snd(p#0));
                    assume M0.Tuple.Pair_q(p#0)
                       && M0.__default.GetSt#canCall(pth#0_0_0_0, M0.Tuple.snd(p#0))
                       && 
                      M0.Tuple.Pair_q(p#0)
                       && M0.__default.Oracle#canCall(pth#0_0_0_0, M0.Tuple.snd(p#0));
                    assert {:id "id1743"} M0.__default.GetSt(pth#0_0_0_0, M0.Tuple.snd(p#0))
                       == M0.__default.Oracle(pth#0_0_0_0, M0.Tuple.snd(p#0));
                    pop;
                }

                pop;
                assert {:id "id1744"} M0.__default.GetSt(pth#0_0_0_0, M0.Tuple.snd(p#0))
                   == M0.__default.GetSt(pth#0_0_0_0, stCombinedC#0);
                assume false;
            }
            else
            {
                assume (forall pth#0_0_0_1: Box :: 
                  { M0.__default.GetSt(pth#0_0_0_1, stCombinedC#0) } 
                    { M0.__default.GetSt(pth#0_0_0_1, M0.Tuple.snd(p#0)) } 
                    { Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(p#0)), pth#0_0_0_1) } 
                  $IsBox(pth#0_0_0_1, Tclass.M0.Path())
                       && Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(p#0)), pth#0_0_0_1)
                     ==> M0.__default.GetSt(pth#0_0_0_1, M0.Tuple.snd(p#0))
                       == M0.__default.GetSt(pth#0_0_0_1, stCombinedC#0));
            }

            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1004,42)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            st##0_0_0 := stCombined#0;
            assume M0.Tuple.Pair_q(p#0);
            assume M0.Tuple.Pair_q(p#0);
            // ProcessCallStmt: CheckSubrange
            st'##0_0_0 := M0.Tuple.snd(p#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            stC##0_0_0 := stCombinedC#0;
            call {:id "id1745"} Call$$M0.__default.Lemma__Extends__StateCorrespondence(st##0_0_0, st'##0_0_0, stC##0_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1005,9)
            assert {:id "id1746"} defass#ps#0_0;
            assume M0.Tuple.Pair_q(ps#0_0);
            ##st#0_0_6 := M0.Tuple.snd(ps#0_0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_0_6, Tclass.M0.State(), $Heap);
            ##stC#0_0_1 := stCombinedC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#0_0_1, Tclass.M0.State(), $Heap);
            assume M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(ps#0_0), stCombinedC#0);
            assume M0.Tuple.Pair_q(ps#0_0)
               && M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(ps#0_0), stCombinedC#0);
            assert {:id "id1747"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, M0.Tuple.snd(ps#0_0), stCombinedC#0);
            pop;
        }
        else
        {
            push;
            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1007,20)
            assume true;
            ##cmd#0_1_0 := cmd#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#0_1_0, TSeq(TChar), $Heap);
            ##deps#0_1_0 := deps#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#0_1_0, TSet(Tclass.M0.Path()), $Heap);
            ##exps#0_1_0 := exts#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##exps#0_1_0, TSet(TSeq(TChar)), $Heap);
            ##st#0_1_0 := stCombinedC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_1_0, Tclass.M0.State(), $Heap);
            assume M0.__default.exec#canCall(cmd#0_0, deps#0_0, exts#0_0, stCombinedC#0);
            assume M0.Tuple.Pair_q(M0.__default.exec(cmd#0_0, deps#0_0, exts#0_0, stCombinedC#0));
            assume M0.__default.exec#canCall(cmd#0_0, deps#0_0, exts#0_0, stCombinedC#0);
            result#0_1_0 := M0.__default.exec(cmd#0_0, deps#0_0, exts#0_0, stCombinedC#0);
            defass#result#0_1_0 := true;
            // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1008,24)
            assume true;
            assume true;
            assert {:id "id1749"} defass#result#0_1_0;
            assume M0.Tuple.Pair_q(result#0_1_0);
            assume M0.Tuple.Pair_q(result#0_1_0);
            $rhs#0_1_0 := $Unbox(M0.Tuple.fst(result#0_1_0)): Set;
            assert {:id "id1751"} defass#result#0_1_0;
            assume M0.Tuple.Pair_q(result#0_1_0);
            assume M0.Tuple.Pair_q(result#0_1_0);
            $rhs#0_1_1 := M0.Tuple.snd(result#0_1_0);
            expr'#0_1_0 := $rhs#0_1_0;
            st'#0_1_0 := $rhs#0_1_1;
            defass#st'#0_1_0 := true;
            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1009,18)
            assume true;
            ##cmd#0_1_1 := cmd#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#0_1_1, TSeq(TChar), $Heap);
            ##deps#0_1_1 := deps#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#0_1_1, TSet(Tclass.M0.Path()), $Heap);
            ##exps#0_1_1 := exts#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##exps#0_1_1, TSet(TSeq(TChar)), $Heap);
            assert {:id "id1755"} defass#st'#0_1_0;
            ##st#0_1_1 := st'#0_1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_1_1, Tclass.M0.State(), $Heap);
            assume M0.__default.UpdateC#canCall(cmd#0_0, deps#0_0, exts#0_0, st'#0_1_0);
            assume M0.__default.UpdateC#canCall(cmd#0_0, deps#0_0, exts#0_0, st'#0_1_0);
            stC'#0_1_0 := M0.__default.UpdateC(cmd#0_0, deps#0_0, exts#0_0, st'#0_1_0);
            defass#stC'#0_1_0 := true;
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1010,9)
            assert {:id "id1757"} defass#psC#0_0;
            assert {:id "id1758"} defass#stC'#0_1_0;
            assume $IsA#M0.Tuple(psC#0_0);
            assert {:id "id1759"} M0.Tuple#Equal(psC#0_0, #M0.Tuple.Pair($Box(expr'#0_1_0), stC'#0_1_0));
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1011,9)
            assert {:id "id1760"} defass#psC#0_0;
            assume M0.Tuple.Pair_q(psC#0_0);
            if (Set#Equal($Unbox(M0.Tuple.fst(psC#0_0)): Set, expr'#0_1_0))
            {
                assert {:id "id1761"} defass#result#0_1_0;
                assume M0.Tuple.Pair_q(result#0_1_0);
            }

            assume M0.Tuple.Pair_q(psC#0_0)
               && (Set#Equal($Unbox(M0.Tuple.fst(psC#0_0)): Set, expr'#0_1_0)
                 ==> M0.Tuple.Pair_q(result#0_1_0));
            assert {:id "id1762"} {:subsumption 0} Set#Equal($Unbox(M0.Tuple.fst(psC#0_0)): Set, expr'#0_1_0);
            assert {:id "id1763"} {:subsumption 0} Set#Equal(expr'#0_1_0, $Unbox(M0.Tuple.fst(result#0_1_0)): Set);
            assume {:id "id1764"} Set#Equal($Unbox(M0.Tuple.fst(psC#0_0)): Set, expr'#0_1_0)
               && Set#Equal(expr'#0_1_0, $Unbox(M0.Tuple.fst(result#0_1_0)): Set);
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1012,21)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            cmd##0_1_0 := cmd#0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            deps##0_1_0 := deps#0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            exps##0_1_0 := exts#0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            st##0_1_0 := stCombinedC#0;
            call {:id "id1765"} Call$$M0.__default.ExecProperty(cmd##0_1_0, deps##0_1_0, exps##0_1_0, st##0_1_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1013,9)
            assert {:id "id1766"} defass#psC#0_0;
            assume M0.Tuple.Pair_q(psC#0_0);
            assert {:id "id1767"} defass#ps#0_0;
            assume M0.Tuple.Pair_q(ps#0_0);
            assume M0.Tuple.Pair_q(psC#0_0) && M0.Tuple.Pair_q(ps#0_0);
            assert {:id "id1768"} Set#Equal($Unbox(M0.Tuple.fst(psC#0_0)): Set, $Unbox(M0.Tuple.fst(ps#0_0)): Set);
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1015,9)
            ##st#0_1_2 := stCombined#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_1_2, Tclass.M0.State(), $Heap);
            assert {:id "id1769"} defass#ps#0_0;
            assume M0.Tuple.Pair_q(ps#0_0);
            ##st'#0_1_0 := M0.Tuple.snd(ps#0_0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st'#0_1_0, Tclass.M0.State(), $Heap);
            assume M0.__default.Extends#canCall(stCombined#0, M0.Tuple.snd(ps#0_0));
            if (M0.__default.Extends(reveal_M0._default.Extends, stCombined#0, M0.Tuple.snd(ps#0_0)))
            {
                ##st#0_1_3 := stCombinedC#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_1_3, Tclass.M0.State(), $Heap);
                assert {:id "id1770"} defass#stC'#0_1_0;
                ##st'#0_1_1 := stC'#0_1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st'#0_1_1, Tclass.M0.State(), $Heap);
                assume M0.__default.Extends#canCall(stCombinedC#0, stC'#0_1_0);
            }

            assume M0.Tuple.Pair_q(ps#0_0)
               && M0.__default.Extends#canCall(stCombined#0, M0.Tuple.snd(ps#0_0))
               && (M0.__default.Extends(reveal_M0._default.Extends, stCombined#0, M0.Tuple.snd(ps#0_0))
                 ==> M0.__default.Extends#canCall(stCombinedC#0, stC'#0_1_0));
            assert {:id "id1771"} {:subsumption 0} M0.__default.Extends(reveal_M0._default.Extends, stCombined#0, M0.Tuple.snd(ps#0_0));
            assert {:id "id1772"} {:subsumption 0} M0.__default.Extends(reveal_M0._default.Extends, stCombinedC#0, stC'#0_1_0);
            assume {:id "id1773"} M0.__default.Extends(reveal_M0._default.Extends, stCombined#0, M0.Tuple.snd(ps#0_0))
               && M0.__default.Extends(reveal_M0._default.Extends, stCombinedC#0, stC'#0_1_0);
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1016,9)
            assert {:id "id1774"} defass#ps#0_0;
            assume M0.Tuple.Pair_q(ps#0_0);
            ##st#0_1_4 := M0.Tuple.snd(ps#0_0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_1_4, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.Tuple.snd(ps#0_0));
            assert {:id "id1775"} defass#st'#0_1_0;
            ##st#0_1_5 := st'#0_1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_1_5, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(st'#0_1_0);
            if (Set#Subset(M0.__default.DomSt(M0.Tuple.snd(ps#0_0)), M0.__default.DomSt(st'#0_1_0)))
            {
                assert {:id "id1776"} defass#st'#0_1_0;
                ##st#0_1_6 := st'#0_1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_1_6, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st'#0_1_0);
                assert {:id "id1777"} defass#stC'#0_1_0;
                ##st#0_1_7 := stC'#0_1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_1_7, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stC'#0_1_0);
            }

            assume M0.Tuple.Pair_q(ps#0_0)
               && M0.__default.DomSt#canCall(M0.Tuple.snd(ps#0_0))
               && M0.__default.DomSt#canCall(st'#0_1_0)
               && (Set#Subset(M0.__default.DomSt(M0.Tuple.snd(ps#0_0)), M0.__default.DomSt(st'#0_1_0))
                 ==> M0.__default.DomSt#canCall(st'#0_1_0) && M0.__default.DomSt#canCall(stC'#0_1_0));
            assert {:id "id1778"} {:subsumption 0} Set#Subset(M0.__default.DomSt(M0.Tuple.snd(ps#0_0)), M0.__default.DomSt(st'#0_1_0));
            assert {:id "id1779"} {:subsumption 0} Set#Equal(M0.__default.DomSt(st'#0_1_0), M0.__default.DomSt(stC'#0_1_0));
            assume {:id "id1780"} Set#Subset(M0.__default.DomSt(M0.Tuple.snd(ps#0_0)), M0.__default.DomSt(st'#0_1_0))
               && Set#Equal(M0.__default.DomSt(st'#0_1_0), M0.__default.DomSt(stC'#0_1_0));
            // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1017,9)
            if (*)
            {
                // Assume Fuel Constant
                havoc pth#0_1_0_0;
                assume $IsBox(pth#0_1_0_0, Tclass.M0.Path());
                assert {:id "id1781"} defass#ps#0_0;
                assume M0.Tuple.Pair_q(ps#0_0);
                ##st#0_1_0_0 := M0.Tuple.snd(ps#0_0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_1_0_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(M0.Tuple.snd(ps#0_0));
                assume M0.Tuple.Pair_q(ps#0_0) && M0.__default.DomSt#canCall(M0.Tuple.snd(ps#0_0));
                assume {:id "id1782"} Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(ps#0_0)), pth#0_1_0_0);
                if (*)
                {
                    ##p#0_1_0_0 := pth#0_1_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_1_0_0, Tclass.M0.Path(), $Heap);
                    assert {:id "id1783"} defass#ps#0_0;
                    assume M0.Tuple.Pair_q(ps#0_0);
                    ##st#0_1_0_1 := M0.Tuple.snd(ps#0_0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_1_0_1, Tclass.M0.State(), $Heap);
                    assert {:id "id1784"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_0_1), ##p#0_1_0_0);
                    assume M0.__default.GetSt#canCall(pth#0_1_0_0, M0.Tuple.snd(ps#0_0));
                    ##p#0_1_0_1 := pth#0_1_0_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_1_0_1, Tclass.M0.Path(), $Heap);
                    assert {:id "id1785"} defass#st'#0_1_0;
                    ##st#0_1_0_2 := st'#0_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_1_0_2, Tclass.M0.State(), $Heap);
                    assert {:id "id1786"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_0_2), ##p#0_1_0_1);
                    assume M0.__default.GetSt#canCall(pth#0_1_0_0, st'#0_1_0);
                    assume M0.Tuple.Pair_q(ps#0_0)
                       && M0.__default.GetSt#canCall(pth#0_1_0_0, M0.Tuple.snd(ps#0_0))
                       && M0.__default.GetSt#canCall(pth#0_1_0_0, st'#0_1_0);
                    assume {:id "id1787"} M0.__default.GetSt(pth#0_1_0_0, M0.Tuple.snd(ps#0_0))
                       == M0.__default.GetSt(pth#0_1_0_0, st'#0_1_0);
                    assume false;
                }

                push;
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1020,11)
                ##st#0_1_0_3 := stCombined#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_1_0_3, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stCombined#0);
                assume M0.__default.DomSt#canCall(stCombined#0);
                if (Set#IsMember(M0.__default.DomSt(stCombined#0), pth#0_1_0_0))
                {
                    push;
                    pop;
                }
                else
                {
                    push;
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1022,13)
                    assume true;
                    assert {:id "id1788"} Set#IsMember(newPaths#0_0, pth#0_1_0_0);
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1023,13)
                    // Begin Comprehension WF check
                    havoc e#0_1_0_1_0;
                    if ($Is(e#0_1_0_1_0, TSeq(TChar)) && $IsAlloc(e#0_1_0_1_0, TSeq(TChar), $Heap))
                    {
                        if (Set#IsMember(exts#0_0, $Box(e#0_1_0_1_0)))
                        {
                            ##cmd#0_1_0_1_0 := cmd#0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##cmd#0_1_0_1_0, TSeq(TChar), $Heap);
                            ##deps#0_1_0_1_0 := deps#0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##deps#0_1_0_1_0, TSet(Tclass.M0.Path()), $Heap);
                            ##exp#0_1_0_1_0 := e#0_1_0_1_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##exp#0_1_0_1_0, TSeq(TChar), $Heap);
                            assume M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_1_0_1_0);
                        }
                    }

                    // End Comprehension WF check
                    assume (forall e#0_1_0_1_1: Seq :: 
                      { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_1_0_1_1) } 
                        { Set#IsMember(exts#0_0, $Box(e#0_1_0_1_1)) } 
                      $Is(e#0_1_0_1_1, TSeq(TChar))
                         ==> 
                        Set#IsMember(exts#0_0, $Box(e#0_1_0_1_1))
                         ==> M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_1_0_1_1));
                    assert {:id "id1789"} (exists e#0_1_0_1_1: Seq :: 
                      { M0.__default.Loc(cmd#0_0, deps#0_0, e#0_1_0_1_1) } 
                        { Set#IsMember(exts#0_0, $Box(e#0_1_0_1_1)) } 
                      $Is(e#0_1_0_1_1, TSeq(TChar))
                         && 
                        Set#IsMember(exts#0_0, $Box(e#0_1_0_1_1))
                         && pth#0_1_0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, e#0_1_0_1_1));
                    // ----- assign-such-that statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1024,19)
                    havoc e#0_1_0_1_3;
                    if ($Is(e#0_1_0_1_3, TSeq(TChar)) && $IsAlloc(e#0_1_0_1_3, TSeq(TChar), $Heap))
                    {
                        if (Set#IsMember(exts#0_0, $Box(e#0_1_0_1_3)))
                        {
                            ##cmd#0_1_0_1_1 := cmd#0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##cmd#0_1_0_1_1, TSeq(TChar), $Heap);
                            ##deps#0_1_0_1_1 := deps#0_0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##deps#0_1_0_1_1, TSet(Tclass.M0.Path()), $Heap);
                            ##exp#0_1_0_1_1 := e#0_1_0_1_3;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##exp#0_1_0_1_1, TSeq(TChar), $Heap);
                            assume M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_1_0_1_3);
                        }

                        assume Set#IsMember(exts#0_0, $Box(e#0_1_0_1_3))
                           ==> M0.__default.Loc#canCall(cmd#0_0, deps#0_0, e#0_1_0_1_3);
                    }

                    assert {:id "id1790"} ($Is(Lit(Seq#Empty(): Seq), TSeq(TChar))
                         && 
                        Set#IsMember(exts#0_0, $Box(Lit(Seq#Empty(): Seq)))
                         && pth#0_1_0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, Lit(Seq#Empty(): Seq)))
                       || (exists $as#e0_1_0_1_0#0_1_0_1_0: Seq :: 
                        $Is($as#e0_1_0_1_0#0_1_0_1_0, TSeq(TChar))
                           && 
                          Set#IsMember(exts#0_0, $Box($as#e0_1_0_1_0#0_1_0_1_0))
                           && pth#0_1_0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, $as#e0_1_0_1_0#0_1_0_1_0));
                    havoc e#0_1_0_1_2;
                    assume {:id "id1791"} Set#IsMember(exts#0_0, $Box(e#0_1_0_1_2))
                       && pth#0_1_0_0 == M0.__default.Loc(cmd#0_0, deps#0_0, e#0_1_0_1_2);
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1025,13)
                    ##cmd#0_1_0_1_2 := cmd#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#0_1_0_1_2, TSeq(TChar), $Heap);
                    ##deps#0_1_0_1_2 := deps#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#0_1_0_1_2, TSet(Tclass.M0.Path()), $Heap);
                    ##exps#0_1_0_1_0 := exts#0_0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##exps#0_1_0_1_0, TSet(TSeq(TChar)), $Heap);
                    assume M0.Tuple.Pair_q(p#0);
                    ##st#0_1_0_1_0 := M0.Tuple.snd(p#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_1_0_1_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.Post#canCall(cmd#0_0, deps#0_0, exts#0_0, M0.Tuple.snd(p#0));
                    assume M0.Tuple.Pair_q(p#0)
                       && M0.__default.Post#canCall(cmd#0_0, deps#0_0, exts#0_0, M0.Tuple.snd(p#0));
                    assert {:id "id1792"} M0.__default.Post(reveal_M0._default.Post, cmd#0_0, deps#0_0, exts#0_0, M0.Tuple.snd(p#0));
                    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1026,13)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1026,20)
                    // TrCallStmt: Before ProcessCallStmt
                    call {:id "id1793"} Call$$M0.__default.reveal__Post();
                    // TrCallStmt: After ProcessCallStmt
                    // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                    // Assume Fuel Constant
                    if (*)
                    {
                        // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_0 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_0, Tclass.M0.Path(), $Heap);
                        assume M0.Tuple.Pair_q(p#0);
                        ##st#0_1_0_1_0_0 := M0.Tuple.snd(p#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_0, Tclass.M0.State(), $Heap);
                        assert {:id "id1808"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_0_1_0_0), ##p#0_1_0_1_0_0);
                        assume M0.__default.GetSt#canCall(pth#0_1_0_0, M0.Tuple.snd(p#0));
                        assume M0.Tuple.Pair_q(p#0)
                           && M0.__default.GetSt#canCall(pth#0_1_0_0, M0.Tuple.snd(p#0));
                        assume false;
                    }
                    else if (*)
                    {
                        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_4_0 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_4_0, Tclass.M0.Path(), $Heap);
                        assume M0.Tuple.Pair_q(p#0);
                        ##st#0_1_0_1_0_4_0 := M0.Tuple.snd(p#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_4_0, Tclass.M0.State(), $Heap);
                        assume {:id "id1806"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_0_1_0_4_0), ##p#0_1_0_1_0_4_0);
                        assume M0.__default.GetSt#canCall(pth#0_1_0_0, M0.Tuple.snd(p#0));
                        assume M0.Tuple.Pair_q(p#0)
                           && M0.__default.GetSt#canCall(pth#0_1_0_0, M0.Tuple.snd(p#0));
                        // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        push;
                        pop;
                        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_4_1 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_4_1, Tclass.M0.Path(), $Heap);
                        assume M0.Tuple.Pair_q(p#0);
                        ##st#0_1_0_1_0_4_1 := M0.Tuple.snd(p#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_4_1, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, M0.Tuple.snd(p#0));
                        assume M0.Tuple.Pair_q(p#0)
                           && M0.__default.Oracle#canCall(pth#0_1_0_0, M0.Tuple.snd(p#0));
                        // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        assert {:id "id1807"} {:subsumption 0} M0.__default.GetSt(pth#0_1_0_0, M0.Tuple.snd(p#0))
                           == M0.__default.Oracle(pth#0_1_0_0, M0.Tuple.snd(p#0));
                        assume false;
                    }
                    else if (*)
                    {
                        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_3_0 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_3_0, Tclass.M0.Path(), $Heap);
                        assume M0.Tuple.Pair_q(p#0);
                        ##st#0_1_0_1_0_3_0 := M0.Tuple.snd(p#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_3_0, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, M0.Tuple.snd(p#0));
                        assume M0.Tuple.Pair_q(p#0)
                           && M0.__default.Oracle#canCall(pth#0_1_0_0, M0.Tuple.snd(p#0));
                        // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        push;
                        push;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1031,31)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        p##0_1_0_1_0_3_0 := pth#0_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##0_1_0_1_0_3_0 := stCombined#0;
                        assume M0.Tuple.Pair_q(p#0);
                        assume M0.Tuple.Pair_q(p#0);
                        // ProcessCallStmt: CheckSubrange
                        st1##0_1_0_1_0_3_0 := M0.Tuple.snd(p#0);
                        call {:id "id1804"} Call$$M0.__default.OracleProperty(p##0_1_0_1_0_3_0, st0##0_1_0_1_0_3_0, st1##0_1_0_1_0_3_0);
                        // TrCallStmt: After ProcessCallStmt
                        pop;
                        pop;
                        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_3_1 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_3_1, Tclass.M0.Path(), $Heap);
                        ##st#0_1_0_1_0_3_1 := stCombined#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_3_1, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, stCombined#0);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, stCombined#0);
                        // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        assert {:id "id1805"} {:subsumption 0} M0.__default.Oracle(pth#0_1_0_0, M0.Tuple.snd(p#0))
                           == M0.__default.Oracle(pth#0_1_0_0, stCombined#0);
                        assume false;
                    }
                    else if (*)
                    {
                        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_2_0 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_2_0, Tclass.M0.Path(), $Heap);
                        ##st#0_1_0_1_0_2_0 := stCombined#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_2_0, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, stCombined#0);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, stCombined#0);
                        // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        push;
                        push;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1033,31)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        p##0_1_0_1_0_2_0 := pth#0_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##0_1_0_1_0_2_0 := stCombined#0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##0_1_0_1_0_2_0 := stCombinedC#0;
                        call {:id "id1802"} Call$$M0.__default.OracleProperty(p##0_1_0_1_0_2_0, st0##0_1_0_1_0_2_0, st1##0_1_0_1_0_2_0);
                        // TrCallStmt: After ProcessCallStmt
                        pop;
                        pop;
                        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_2_1 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_2_1, Tclass.M0.Path(), $Heap);
                        ##st#0_1_0_1_0_2_1 := stCombinedC#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_2_1, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, stCombinedC#0);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, stCombinedC#0);
                        // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        assert {:id "id1803"} {:subsumption 0} M0.__default.Oracle(pth#0_1_0_0, stCombined#0)
                           == M0.__default.Oracle(pth#0_1_0_0, stCombinedC#0);
                        assume false;
                    }
                    else if (*)
                    {
                        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_1_0 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_1_0, Tclass.M0.Path(), $Heap);
                        ##st#0_1_0_1_0_1_0 := stCombinedC#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_1_0, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, stCombinedC#0);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, stCombinedC#0);
                        // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        push;
                        push;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1035,31)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        p##0_1_0_1_0_1_0 := pth#0_1_0_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##0_1_0_1_0_1_0 := stCombinedC#0;
                        assert {:id "id1798"} defass#st'#0_1_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st1##0_1_0_1_0_1_0 := st'#0_1_0;
                        call {:id "id1799"} Call$$M0.__default.OracleProperty(p##0_1_0_1_0_1_0, st0##0_1_0_1_0_1_0, st1##0_1_0_1_0_1_0);
                        // TrCallStmt: After ProcessCallStmt
                        pop;
                        pop;
                        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_1_1 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_1_1, Tclass.M0.Path(), $Heap);
                        assert {:id "id1800"} defass#st'#0_1_0;
                        ##st#0_1_0_1_0_1_1 := st'#0_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_1_1, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, st'#0_1_0);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, st'#0_1_0);
                        // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        assert {:id "id1801"} {:subsumption 0} M0.__default.Oracle(pth#0_1_0_0, stCombinedC#0)
                           == M0.__default.Oracle(pth#0_1_0_0, st'#0_1_0);
                        assume false;
                    }
                    else if (*)
                    {
                        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_0_0 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_0_0, Tclass.M0.Path(), $Heap);
                        assume {:id "id1794"} defass#st'#0_1_0;
                        ##st#0_1_0_1_0_0_0 := st'#0_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_0_0, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, st'#0_1_0);
                        assume M0.__default.Oracle#canCall(pth#0_1_0_0, st'#0_1_0);
                        // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        push;
                        pop;
                        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        ##p#0_1_0_1_0_0_1 := pth#0_1_0_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_0_1_0_0_1, Tclass.M0.Path(), $Heap);
                        assert {:id "id1795"} defass#st'#0_1_0;
                        ##st#0_1_0_1_0_0_1 := st'#0_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_0_1_0_0_1, Tclass.M0.State(), $Heap);
                        assert {:id "id1796"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_0_1_0_0_1), ##p#0_1_0_1_0_0_1);
                        assume M0.__default.GetSt#canCall(pth#0_1_0_0, st'#0_1_0);
                        assume M0.__default.GetSt#canCall(pth#0_1_0_0, st'#0_1_0);
                        // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1027,13)
                        assert {:id "id1797"} {:subsumption 0} M0.__default.Oracle(pth#0_1_0_0, st'#0_1_0)
                           == M0.__default.GetSt(pth#0_1_0_0, st'#0_1_0);
                        assume false;
                    }

                    assume {:id "id1809"} M0.__default.GetSt(pth#0_1_0_0, M0.Tuple.snd(p#0))
                       == M0.__default.GetSt(pth#0_1_0_0, st'#0_1_0);
                    pop;
                }

                pop;
                assert {:id "id1810"} M0.__default.GetSt(pth#0_1_0_0, M0.Tuple.snd(ps#0_0))
                   == M0.__default.GetSt(pth#0_1_0_0, st'#0_1_0);
                assume false;
            }
            else
            {
                assume (forall pth#0_1_0_1: Box :: 
                  { M0.__default.GetSt(pth#0_1_0_1, st'#0_1_0) } 
                    { M0.__default.GetSt(pth#0_1_0_1, M0.Tuple.snd(ps#0_0)) } 
                    { Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(ps#0_0)), pth#0_1_0_1) } 
                  $IsBox(pth#0_1_0_1, Tclass.M0.Path())
                       && Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(ps#0_0)), pth#0_1_0_1)
                     ==> M0.__default.GetSt(pth#0_1_0_1, M0.Tuple.snd(ps#0_0))
                       == M0.__default.GetSt(pth#0_1_0_1, st'#0_1_0));
            }

            // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1042,9)
            if (*)
            {
                // Assume Fuel Constant
                havoc pth#0_1_1_0;
                assume $IsBox(pth#0_1_1_0, Tclass.M0.Path());
                assume M0.Tuple.Pair_q(p#0);
                ##st#0_1_1_0 := M0.Tuple.snd(p#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_1_1_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(M0.Tuple.snd(p#0));
                if (!Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(p#0)), pth#0_1_1_0))
                {
                    assert {:id "id1811"} defass#st'#0_1_0;
                    ##st#0_1_1_1 := st'#0_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_1_1_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st'#0_1_0);
                }

                assume M0.Tuple.Pair_q(p#0)
                   && M0.__default.DomSt#canCall(M0.Tuple.snd(p#0))
                   && (!Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(p#0)), pth#0_1_1_0)
                     ==> M0.__default.DomSt#canCall(st'#0_1_0));
                assume {:id "id1812"} !Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(p#0)), pth#0_1_1_0)
                   && Set#IsMember(M0.__default.DomSt(st'#0_1_0), pth#0_1_1_0);
                if (*)
                {
                    ##p#0_1_1_0 := pth#0_1_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_1_1_0, Tclass.M0.Path(), $Heap);
                    assert {:id "id1813"} defass#st'#0_1_0;
                    ##st#0_1_1_2 := st'#0_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_1_1_2, Tclass.M0.State(), $Heap);
                    assert {:id "id1814"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_1_2), ##p#0_1_1_0);
                    assume M0.__default.GetSt#canCall(pth#0_1_1_0, st'#0_1_0);
                    ##p#0_1_1_1 := pth#0_1_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_1_1_1, Tclass.M0.Path(), $Heap);
                    assume M0.Tuple.Pair_q(p#0);
                    ##st#0_1_1_3 := M0.Tuple.snd(p#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_1_1_3, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(pth#0_1_1_0, M0.Tuple.snd(p#0));
                    assume M0.__default.GetSt#canCall(pth#0_1_1_0, st'#0_1_0)
                       && 
                      M0.Tuple.Pair_q(p#0)
                       && M0.__default.Oracle#canCall(pth#0_1_1_0, M0.Tuple.snd(p#0));
                    assume {:id "id1815"} M0.__default.GetSt(pth#0_1_1_0, st'#0_1_0)
                       == M0.__default.Oracle(pth#0_1_1_0, M0.Tuple.snd(p#0));
                    assume false;
                }

                push;
                // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1045,11)
                ##st#0_1_1_4 := stCombined#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_1_1_4, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stCombined#0);
                assume M0.__default.DomSt#canCall(stCombined#0);
                assert {:id "id1816"} !Set#IsMember(M0.__default.DomSt(stCombined#0), pth#0_1_1_0);
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1046,11)
                ##st#0_1_1_5 := stCombinedC#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_1_1_5, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stCombinedC#0);
                assume M0.__default.DomSt#canCall(stCombinedC#0);
                if (Set#IsMember(M0.__default.DomSt(stCombinedC#0), pth#0_1_1_0))
                {
                    push;
                    // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                    // Assume Fuel Constant
                    if (*)
                    {
                        // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        ##p#0_1_1_0_0_0 := pth#0_1_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_1_0_0_0, Tclass.M0.Path(), $Heap);
                        assert {:id "id1825"} defass#st'#0_1_0;
                        ##st#0_1_1_0_0_0 := st'#0_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_1_0_0_0, Tclass.M0.State(), $Heap);
                        assert {:id "id1826"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_1_0_0_0), ##p#0_1_1_0_0_0);
                        assume M0.__default.GetSt#canCall(pth#0_1_1_0, st'#0_1_0);
                        assume M0.__default.GetSt#canCall(pth#0_1_1_0, st'#0_1_0);
                        assume false;
                    }
                    else if (*)
                    {
                        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        ##p#0_1_1_0_0_2_0 := pth#0_1_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_1_0_0_2_0, Tclass.M0.Path(), $Heap);
                        assume {:id "id1821"} defass#st'#0_1_0;
                        ##st#0_1_1_0_0_2_0 := st'#0_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_1_0_0_2_0, Tclass.M0.State(), $Heap);
                        assume {:id "id1822"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_1_0_0_2_0), ##p#0_1_1_0_0_2_0);
                        assume M0.__default.GetSt#canCall(pth#0_1_1_0, st'#0_1_0);
                        assume M0.__default.GetSt#canCall(pth#0_1_1_0, st'#0_1_0);
                        // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        push;
                        pop;
                        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        ##p#0_1_1_0_0_2_1 := pth#0_1_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_1_0_0_2_1, Tclass.M0.Path(), $Heap);
                        ##st#0_1_1_0_0_2_1 := stCombinedC#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_1_0_0_2_1, Tclass.M0.State(), $Heap);
                        assert {:id "id1823"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_1_0_0_2_1), ##p#0_1_1_0_0_2_1);
                        assume M0.__default.GetSt#canCall(pth#0_1_1_0, stCombinedC#0);
                        assume M0.__default.GetSt#canCall(pth#0_1_1_0, stCombinedC#0);
                        // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        assert {:id "id1824"} {:subsumption 0} M0.__default.GetSt(pth#0_1_1_0, st'#0_1_0)
                           == M0.__default.GetSt(pth#0_1_1_0, stCombinedC#0);
                        assume false;
                    }
                    else if (*)
                    {
                        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        ##p#0_1_1_0_0_1_0 := pth#0_1_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_1_0_0_1_0, Tclass.M0.Path(), $Heap);
                        ##st#0_1_1_0_0_1_0 := stCombinedC#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_1_0_0_1_0, Tclass.M0.State(), $Heap);
                        assume {:id "id1819"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_1_0_0_1_0), ##p#0_1_1_0_0_1_0);
                        assume M0.__default.GetSt#canCall(pth#0_1_1_0, stCombinedC#0);
                        assume M0.__default.GetSt#canCall(pth#0_1_1_0, stCombinedC#0);
                        // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        push;
                        pop;
                        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        ##p#0_1_1_0_0_1_1 := pth#0_1_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_1_0_0_1_1, Tclass.M0.Path(), $Heap);
                        ##st#0_1_1_0_0_1_1 := stCombined#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_1_0_0_1_1, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_1_0, stCombined#0);
                        assume M0.__default.Oracle#canCall(pth#0_1_1_0, stCombined#0);
                        // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        assert {:id "id1820"} {:subsumption 0} M0.__default.GetSt(pth#0_1_1_0, stCombinedC#0)
                           == M0.__default.Oracle(pth#0_1_1_0, stCombined#0);
                        assume false;
                    }
                    else if (*)
                    {
                        // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        ##p#0_1_1_0_0_0_0 := pth#0_1_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_1_0_0_0_0, Tclass.M0.Path(), $Heap);
                        ##st#0_1_1_0_0_0_0 := stCombined#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_1_0_0_0_0, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_1_0, stCombined#0);
                        assume M0.__default.Oracle#canCall(pth#0_1_1_0, stCombined#0);
                        // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        push;
                        push;
                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1051,31)
                        // TrCallStmt: Before ProcessCallStmt
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        p##0_1_1_0_0_0_0 := pth#0_1_1_0;
                        assume true;
                        // ProcessCallStmt: CheckSubrange
                        st0##0_1_1_0_0_0_0 := stCombined#0;
                        assume M0.Tuple.Pair_q(p#0);
                        assume M0.Tuple.Pair_q(p#0);
                        // ProcessCallStmt: CheckSubrange
                        st1##0_1_1_0_0_0_0 := M0.Tuple.snd(p#0);
                        call {:id "id1817"} Call$$M0.__default.OracleProperty(p##0_1_1_0_0_0_0, st0##0_1_1_0_0_0_0, st1##0_1_1_0_0_0_0);
                        // TrCallStmt: After ProcessCallStmt
                        pop;
                        pop;
                        // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        ##p#0_1_1_0_0_0_1 := pth#0_1_1_0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##p#0_1_1_0_0_0_1, Tclass.M0.Path(), $Heap);
                        assume M0.Tuple.Pair_q(p#0);
                        ##st#0_1_1_0_0_0_1 := M0.Tuple.snd(p#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#0_1_1_0_0_0_1, Tclass.M0.State(), $Heap);
                        assume M0.__default.Oracle#canCall(pth#0_1_1_0, M0.Tuple.snd(p#0));
                        assume M0.Tuple.Pair_q(p#0)
                           && M0.__default.Oracle#canCall(pth#0_1_1_0, M0.Tuple.snd(p#0));
                        // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1047,13)
                        assert {:id "id1818"} {:subsumption 0} M0.__default.Oracle(pth#0_1_1_0, stCombined#0)
                           == M0.__default.Oracle(pth#0_1_1_0, M0.Tuple.snd(p#0));
                        assume false;
                    }

                    assume {:id "id1827"} M0.__default.GetSt(pth#0_1_1_0, st'#0_1_0)
                       == M0.__default.Oracle(pth#0_1_1_0, M0.Tuple.snd(p#0));
                    pop;
                }
                else
                {
                    push;
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1055,13)
                    ##p#0_1_1_1_0 := pth#0_1_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_1_1_1_0, Tclass.M0.Path(), $Heap);
                    assert {:id "id1828"} defass#st'#0_1_0;
                    ##st#0_1_1_1_0 := st'#0_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_1_1_1_0, Tclass.M0.State(), $Heap);
                    assert {:id "id1829"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_1_1_1_0), ##p#0_1_1_1_0);
                    assume M0.__default.GetSt#canCall(pth#0_1_1_0, st'#0_1_0);
                    ##p#0_1_1_1_1 := pth#0_1_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#0_1_1_1_1, Tclass.M0.Path(), $Heap);
                    ##st#0_1_1_1_1 := stCombinedC#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#0_1_1_1_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(pth#0_1_1_0, stCombinedC#0);
                    assume M0.__default.GetSt#canCall(pth#0_1_1_0, st'#0_1_0)
                       && M0.__default.Oracle#canCall(pth#0_1_1_0, stCombinedC#0);
                    assert {:id "id1830"} M0.__default.GetSt(pth#0_1_1_0, st'#0_1_0)
                       == M0.__default.Oracle(pth#0_1_1_0, stCombinedC#0);
                    pop;
                }

                pop;
                assert {:id "id1831"} M0.__default.GetSt(pth#0_1_1_0, st'#0_1_0)
                   == M0.__default.Oracle(pth#0_1_1_0, M0.Tuple.snd(p#0));
                assume false;
            }
            else
            {
                assume (forall pth#0_1_1_1: Box :: 
                  { M0.__default.Oracle(pth#0_1_1_1, M0.Tuple.snd(p#0)) } 
                    { M0.__default.GetSt(pth#0_1_1_1, st'#0_1_0) } 
                    { Set#IsMember(M0.__default.DomSt(st'#0_1_0), pth#0_1_1_1) } 
                    { Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(p#0)), pth#0_1_1_1) } 
                  $IsBox(pth#0_1_1_1, Tclass.M0.Path())
                       && 
                      !Set#IsMember(M0.__default.DomSt(M0.Tuple.snd(p#0)), pth#0_1_1_1)
                       && Set#IsMember(M0.__default.DomSt(st'#0_1_0), pth#0_1_1_1)
                     ==> M0.__default.GetSt(pth#0_1_1_1, st'#0_1_0)
                       == M0.__default.Oracle(pth#0_1_1_1, M0.Tuple.snd(p#0)));
            }

            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1058,9)
            assume M0.Tuple.Pair_q(p#0);
            ##st#0_1_8 := M0.Tuple.snd(p#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_1_8, Tclass.M0.State(), $Heap);
            assert {:id "id1832"} defass#st'#0_1_0;
            ##stC#0_1_0 := st'#0_1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#0_1_0, Tclass.M0.State(), $Heap);
            assume M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(p#0), st'#0_1_0);
            assume M0.Tuple.Pair_q(p#0)
               && M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(p#0), st'#0_1_0);
            assert {:id "id1833"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, M0.Tuple.snd(p#0), st'#0_1_0);
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1059,9)
            assert {:id "id1834"} defass#ps#0_0;
            assume M0.Tuple.Pair_q(ps#0_0);
            ##st#0_1_9 := M0.Tuple.snd(ps#0_0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_1_9, Tclass.M0.State(), $Heap);
            assert {:id "id1835"} defass#psC#0_0;
            assume M0.Tuple.Pair_q(psC#0_0);
            ##stC#0_1_1 := M0.Tuple.snd(psC#0_0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#0_1_1, Tclass.M0.State(), $Heap);
            assume M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(ps#0_0), M0.Tuple.snd(psC#0_0));
            assume M0.Tuple.Pair_q(ps#0_0)
               && M0.Tuple.Pair_q(psC#0_0)
               && M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(ps#0_0), M0.Tuple.snd(psC#0_0));
            assert {:id "id1836"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
              M0.Tuple.snd(ps#0_0), 
              M0.Tuple.snd(psC#0_0));
            pop;
        }

        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1062,7)
        assert {:id "id1837"} defass#ps#0_0;
        assume M0.Tuple.Pair_q(ps#0_0);
        assert {:id "id1838"} defass#psC#0_0;
        assume M0.Tuple.Pair_q(psC#0_0);
        assume M0.Tuple.Pair_q(ps#0_0) && M0.Tuple.Pair_q(psC#0_0);
        assert {:id "id1839"} Set#Equal($Unbox(M0.Tuple.fst(ps#0_0)): Set, $Unbox(M0.Tuple.fst(psC#0_0)): Set);
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1063,7)
        assert {:id "id1840"} defass#ps#0_0;
        assume M0.Tuple.Pair_q(ps#0_0);
        ##st#0_6 := M0.Tuple.snd(ps#0_0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_6, Tclass.M0.State(), $Heap);
        assert {:id "id1841"} defass#psC#0_0;
        assume M0.Tuple.Pair_q(psC#0_0);
        ##stC#0_1 := M0.Tuple.snd(psC#0_0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#0_1, Tclass.M0.State(), $Heap);
        assume M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(ps#0_0), M0.Tuple.snd(psC#0_0));
        assume M0.Tuple.Pair_q(ps#0_0)
           && M0.Tuple.Pair_q(psC#0_0)
           && M0.__default.StateCorrespondence#canCall(M0.Tuple.snd(ps#0_0), M0.Tuple.snd(psC#0_0));
        assert {:id "id1842"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
          M0.Tuple.snd(ps#0_0), 
          M0.Tuple.snd(psC#0_0));
    }
    else
    {
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1065,7)
        assume $IsA#M0.Tuple(p#0);
        assert {:id "id1843"} M0.Tuple#Equal(p#0, 
          #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), st#0));
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1066,7)
        assume $IsA#M0.Tuple(pC#0);
        assert {:id "id1844"} M0.Tuple#Equal(pC#0, 
          #M0.Tuple.Pair($Box(Lit(#M0.Expression.exprError(Lit(#M0.Reason.rInconsistentCache())))), stC#0));
    }
}



procedure {:verboseName "M0.Lemma_Extends_StateCorrespondence (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__Extends__StateCorrespondence(st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    st'#0: Box
       where $IsBox(st'#0, Tclass.M0.State()) && $IsAllocBox(st'#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.Lemma_Extends_StateCorrespondence (call)"} Call$$M0.__default.Lemma__Extends__StateCorrespondence(st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    st'#0: Box
       where $IsBox(st'#0, Tclass.M0.State()) && $IsAllocBox(st'#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id1849"} M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0);
  requires {:id "id1850"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id1851"} Set#Subset(M0.__default.DomSt(st'#0), M0.__default.DomSt(stC#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.StateCorrespondence#canCall(st'#0, stC#0);
  ensures {:id "id1852"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st'#0, stC#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_Extends_StateCorrespondence (correctness)"} Impl$$M0.__default.Lemma__Extends__StateCorrespondence(st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    st'#0: Box
       where $IsBox(st'#0, Tclass.M0.State()) && $IsAllocBox(st'#0, Tclass.M0.State(), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id1853"} M0.__default.Extends(reveal_M0._default.Extends, st#0, st'#0);
  requires {:id "id1854"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id1855"} Set#Subset(M0.__default.DomSt(st'#0), M0.__default.DomSt(stC#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.StateCorrespondence#canCall(st'#0, stC#0);
  ensures {:id "id1856"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st'#0, stC#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_Extends_StateCorrespondence (correctness)"} Impl$$M0.__default.Lemma__Extends__StateCorrespondence(st#0: Box, st'#0: Box, stC#0: Box) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var p#0_0: Box;
  var ##st#0_0: Box;
  var ##st#0_1: Box;
  var ##p#0_0: Box;
  var ##st#0_2: Box;
  var ##p#0_1: Box;
  var ##st#0_3: Box;
  var p##0_0: Box;
  var st0##0_0: Box;
  var st1##0_0: Box;

    // AddMethodImpl: Lemma_Extends_StateCorrespondence, Impl$$M0.__default.Lemma__Extends__StateCorrespondence
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1074,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1074,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id1857"} Call$$M0.__default.reveal__Extends();
    // TrCallStmt: After ProcessCallStmt
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1075,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1075,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id1858"} Call$$M0.__default.reveal__StateCorrespondence();
    // TrCallStmt: After ProcessCallStmt
    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1076,5)
    if (*)
    {
        // Assume Fuel Constant
        havoc p#0_0;
        assume $IsBox(p#0_0, Tclass.M0.Path());
        ##st#0_0 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_0, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(st'#0);
        if (!Set#IsMember(M0.__default.DomSt(st'#0), p#0_0))
        {
            ##st#0_1 := stC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_1, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(stC#0);
        }

        assume M0.__default.DomSt#canCall(st'#0)
           && (!Set#IsMember(M0.__default.DomSt(st'#0), p#0_0)
             ==> M0.__default.DomSt#canCall(stC#0));
        assume {:id "id1859"} !Set#IsMember(M0.__default.DomSt(st'#0), p#0_0)
           && Set#IsMember(M0.__default.DomSt(stC#0), p#0_0);
        if (*)
        {
            ##p#0_0 := p#0_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##p#0_0, Tclass.M0.Path(), $Heap);
            ##st#0_2 := stC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_2, Tclass.M0.State(), $Heap);
            assert {:id "id1860"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#0_2), ##p#0_0);
            assume M0.__default.GetSt#canCall(p#0_0, stC#0);
            ##p#0_1 := p#0_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##p#0_1, Tclass.M0.Path(), $Heap);
            ##st#0_3 := st'#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0_3, Tclass.M0.State(), $Heap);
            assume M0.__default.Oracle#canCall(p#0_0, st'#0);
            assume M0.__default.GetSt#canCall(p#0_0, stC#0)
               && M0.__default.Oracle#canCall(p#0_0, st'#0);
            assume {:id "id1861"} M0.__default.GetSt(p#0_0, stC#0) == M0.__default.Oracle(p#0_0, st'#0);
            assume false;
        }

        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1079,21)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        p##0_0 := p#0_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st0##0_0 := st#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st1##0_0 := st'#0;
        call {:id "id1862"} Call$$M0.__default.OracleProperty(p##0_0, st0##0_0, st1##0_0);
        // TrCallStmt: After ProcessCallStmt
        assert {:id "id1863"} M0.__default.GetSt(p#0_0, stC#0) == M0.__default.Oracle(p#0_0, st'#0);
        assume false;
    }
    else
    {
        assume (forall p#0_1: Box :: 
          { M0.__default.Oracle(p#0_1, st'#0) } 
            { M0.__default.GetSt(p#0_1, stC#0) } 
            { Set#IsMember(M0.__default.DomSt(stC#0), p#0_1) } 
            { Set#IsMember(M0.__default.DomSt(st'#0), p#0_1) } 
          $IsBox(p#0_1, Tclass.M0.Path())
               && 
              !Set#IsMember(M0.__default.DomSt(st'#0), p#0_1)
               && Set#IsMember(M0.__default.DomSt(stC#0), p#0_1)
             ==> M0.__default.GetSt(p#0_1, stC#0) == M0.__default.Oracle(p#0_1, st'#0));
    }
}



procedure {:verboseName "M0.Lemma_EvalArgs (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__EvalArgs(context#0: DatatypeType
       where $Is(context#0, Tclass.M0.Expression())
         && $IsAlloc(context#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(context#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap), 
    stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    stOrigC#0: Box
       where $IsBox(stOrigC#0, Tclass.M0.State())
         && $IsAllocBox(stOrigC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (exprs#0: Seq
       where $Is(exprs#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(exprs#0, TSeq(Tclass.M0.Expression()), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    stsC#0: Set
       where $Is(stsC#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC#0, TSet(Tclass.M0.State()), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_EvalArgs (well-formedness)"} CheckWellFormed$$M0.__default.Lemma__EvalArgs(context#0: DatatypeType, args#0: Seq, stOrig#0: Box, stOrigC#0: Box, env#0: Box)
   returns (exprs#0: Seq, sts#0: Set, stsC#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##env#0: Box;
  var ##st#1: Box;
  var ##stC#0: Box;
  var ##st#2: Box;
  var ##stC#1: Box;
  var arg#0: DatatypeType;
  var ##context#0: DatatypeType;
  var ##args#0: Seq;
  var ##stOrig#0: Box;
  var ##env#1: Box;
  var ##useCache#0: bool;
  var ##context#1: DatatypeType;
  var ##args#1: Seq;
  var ##stOrig#1: Box;
  var ##env#2: Box;
  var ##useCache#1: bool;
  var s#0: Box;
  var ##st#3: Box;
  var ##st#4: Box;
  var ##st'#0: Box;
  var sC#0: Box;
  var ##st#5: Box;
  var ##st#6: Box;
  var ##st'#1: Box;
  var ##stC#2: Box;
  var ##st#7: Box;
  var ##sts#0: Set;
  var ##useCache#2: bool;
  var ##stC#3: Box;
  var ##sts#1: Set;
  var ##useCache#3: bool;


    // AddMethodImpl: Lemma_EvalArgs, CheckWellFormed$$M0.__default.Lemma__EvalArgs
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##st#0 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stOrig#0);
    assume {:id "id1864"} M0.__default.ValidState(stOrig#0);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass.M0.Env(), $Heap);
    assume M0.__default.ValidEnv#canCall(env#0);
    assume {:id "id1865"} M0.__default.ValidEnv(env#0);
    ##st#1 := stOrigC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(stOrigC#0);
    assume {:id "id1866"} M0.__default.ValidState(stOrigC#0);
    ##stC#0 := stOrigC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ConsistentCache#canCall(stOrigC#0);
    assume {:id "id1867"} M0.__default.ConsistentCache(stOrigC#0);
    ##st#2 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    ##stC#1 := stOrigC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(stOrig#0, stOrigC#0);
    assume {:id "id1868"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stOrig#0, stOrigC#0);
    havoc arg#0;
    assume $Is(arg#0, Tclass.M0.Expression())
       && $IsAlloc(arg#0, Tclass.M0.Expression(), $Heap);
    if (*)
    {
        assume {:id "id1869"} Seq#Contains(args#0, $Box(arg#0));
        assume {:id "id1870"} DtRank(arg#0) < DtRank(context#0);
    }
    else
    {
        assume {:id "id1871"} Seq#Contains(args#0, $Box(arg#0)) ==> DtRank(arg#0) < DtRank(context#0);
    }

    assume {:id "id1872"} (forall arg#1: DatatypeType :: 
      { Seq#Contains(args#0, $Box(arg#1)) } 
      $Is(arg#1, Tclass.M0.Expression())
         ==> 
        Seq#Contains(args#0, $Box(arg#1))
         ==> DtRank(arg#1) < DtRank(context#0));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc exprs#0, sts#0, stsC#0;
    ##context#0 := context#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##context#0, Tclass.M0.Expression(), $Heap);
    ##args#0 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass.M0.Expression()), $Heap);
    ##stOrig#0 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#0, Tclass.M0.State(), $Heap);
    ##env#1 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#1, Tclass.M0.Env(), $Heap);
    ##useCache#0 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id1873"} {:subsumption 0} M0.__default.ValidEnv(##env#1);
    assert {:id "id1874"} {:subsumption 0} (forall arg#2: DatatypeType :: 
      { Seq#Contains(##args#0, $Box(arg#2)) } 
      $Is(arg#2, Tclass.M0.Expression())
         ==> 
        Seq#Contains(##args#0, $Box(arg#2))
         ==> DtRank(arg#2) < DtRank(##context#0));
    assume M0.__default.ValidEnv(##env#1)
       && (forall arg#2: DatatypeType :: 
        { Seq#Contains(##args#0, $Box(arg#2)) } 
        $Is(arg#2, Tclass.M0.Expression())
           ==> 
          Seq#Contains(##args#0, $Box(arg#2))
           ==> DtRank(arg#2) < DtRank(##context#0));
    assume M0.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0, Lit(false));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, Lit(false)));
    assume {:id "id1875"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)), 
      M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, Lit(false)));
    ##context#1 := context#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##context#1, Tclass.M0.Expression(), $Heap);
    ##args#1 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#1, TSeq(Tclass.M0.Expression()), $Heap);
    ##stOrig#1 := stOrigC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stOrig#1, Tclass.M0.State(), $Heap);
    ##env#2 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#2, Tclass.M0.Env(), $Heap);
    ##useCache#1 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id1876"} {:subsumption 0} M0.__default.ValidEnv(##env#2);
    assert {:id "id1877"} {:subsumption 0} (forall arg#3: DatatypeType :: 
      { Seq#Contains(##args#1, $Box(arg#3)) } 
      $Is(arg#3, Tclass.M0.Expression())
         ==> 
        Seq#Contains(##args#1, $Box(arg#3))
         ==> DtRank(arg#3) < DtRank(##context#1));
    assume M0.__default.ValidEnv(##env#2)
       && (forall arg#3: DatatypeType :: 
        { Seq#Contains(##args#1, $Box(arg#3)) } 
        $Is(arg#3, Tclass.M0.Expression())
           ==> 
          Seq#Contains(##args#1, $Box(arg#3))
           ==> DtRank(arg#3) < DtRank(##context#1));
    assume M0.__default.evalArgs#canCall(context#0, args#0, stOrigC#0, env#0, Lit(true));
    assume M0.Tuple.Pair_q(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrigC#0, env#0, Lit(true)));
    assume {:id "id1878"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(stsC#0)), 
      M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrigC#0, env#0, Lit(true)));
    // Begin Comprehension WF check
    havoc s#0;
    if ($IsBox(s#0, Tclass.M0.State()) && $IsAllocBox(s#0, Tclass.M0.State(), $Heap))
    {
        if (Set#IsMember(sts#0, s#0))
        {
            ##st#3 := s#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
            assume M0.__default.ValidState#canCall(s#0);
            if (M0.__default.ValidState(s#0))
            {
                ##st#4 := stOrig#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
                ##st'#0 := s#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
                assume M0.__default.Extends#canCall(stOrig#0, s#0);
            }
        }
    }

    // End Comprehension WF check
    assume {:id "id1879"} (forall s#1: Box :: 
      { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
        { M0.__default.ValidState(s#1) } 
        { Set#IsMember(sts#0, s#1) } 
      $IsBox(s#1, Tclass.M0.State())
         ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState(s#1))
           && (Set#IsMember(sts#0, s#1)
             ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1)));
    // Begin Comprehension WF check
    havoc sC#0;
    if ($IsBox(sC#0, Tclass.M0.State()) && $IsAllocBox(sC#0, Tclass.M0.State(), $Heap))
    {
        if (Set#IsMember(stsC#0, sC#0))
        {
            ##st#5 := sC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
            assume M0.__default.ValidState#canCall(sC#0);
            if (M0.__default.ValidState(sC#0))
            {
                ##st#6 := stOrigC#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
                ##st'#1 := sC#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st'#1, Tclass.M0.State(), $Heap);
                assume M0.__default.Extends#canCall(stOrigC#0, sC#0);
            }

            if (M0.__default.ValidState(sC#0)
               && M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#0))
            {
                ##stC#2 := sC#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##stC#2, Tclass.M0.State(), $Heap);
                assume M0.__default.ConsistentCache#canCall(sC#0);
            }
        }
    }

    // End Comprehension WF check
    assume {:id "id1880"} (forall sC#1: Box :: 
      { M0.__default.ConsistentCache(sC#1) } 
        { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1) } 
        { M0.__default.ValidState(sC#1) } 
        { Set#IsMember(stsC#0, sC#1) } 
      $IsBox(sC#1, Tclass.M0.State())
         ==> (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ValidState(sC#1))
           && (Set#IsMember(stsC#0, sC#1)
             ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1))
           && (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ConsistentCache(sC#1)));
    if (Seq#Equal(args#0, Seq#Empty(): Seq))
    {
        if (Set#Equal(sts#0, stsC#0))
        {
        }
    }

    assume {:id "id1881"} Seq#Equal(args#0, Seq#Empty(): Seq)
       ==> Set#Equal(sts#0, stsC#0) && Set#Equal(stsC#0, Set#Empty(): Set);
    if (!Seq#Equal(args#0, Seq#Empty(): Seq))
    {
        if (!Set#Equal(sts#0, Set#Empty(): Set))
        {
        }

        if (!Set#Equal(sts#0, Set#Empty(): Set) && !Set#Equal(stsC#0, Set#Empty(): Set))
        {
            ##sts#0 := sts#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
            ##useCache#2 := Lit(false);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#2, TBool, $Heap);
            assert {:id "id1882"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
            assume !Set#Equal(##sts#0, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(sts#0, Lit(false));
            ##st#7 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#7, Tclass.M0.State(), $Heap);
            ##sts#1 := stsC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
            ##useCache#3 := Lit(true);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#3, TBool, $Heap);
            assert {:id "id1883"} {:subsumption 0} !Set#Equal(##sts#1, Set#Empty(): Set);
            assume !Set#Equal(##sts#1, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(stsC#0, Lit(true));
            ##stC#3 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##stC#3, Tclass.M0.State(), $Heap);
            assume M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)), 
              M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
        }
    }

    assume {:id "id1884"} !Seq#Equal(args#0, Seq#Empty(): Seq)
       ==> !Set#Equal(sts#0, Set#Empty(): Set)
         && !Set#Equal(stsC#0, Set#Empty(): Set)
         && M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
          M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)), 
          M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
}



procedure {:verboseName "M0.Lemma_EvalArgs (call)"} Call$$M0.__default.Lemma__EvalArgs(context#0: DatatypeType
       where $Is(context#0, Tclass.M0.Expression())
         && $IsAlloc(context#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(context#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap), 
    stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    stOrigC#0: Box
       where $IsBox(stOrigC#0, Tclass.M0.State())
         && $IsAllocBox(stOrigC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (exprs#0: Seq
       where $Is(exprs#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(exprs#0, TSeq(Tclass.M0.Expression()), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    stsC#0: Set
       where $Is(stsC#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC#0, TSet(Tclass.M0.State()), $Heap));
  // user-defined preconditions
  requires {:id "id1885"} M0.__default.ValidState#canCall(stOrig#0)
     ==> M0.__default.ValidState(stOrig#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(stOrig#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stOrig#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id1886"} M0.__default.ValidEnv(env#0);
  requires {:id "id1887"} M0.__default.ValidState#canCall(stOrigC#0)
     ==> M0.__default.ValidState(stOrigC#0)
       || (forall p#1: Box :: 
        { M0.__default.WellFounded(p#1) } 
          { Set#IsMember(M0.__default.DomSt(stOrigC#0), p#1) } 
        $IsBox(p#1, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(stOrigC#0), p#1)
           ==> M0.__default.WellFounded(p#1));
  requires {:id "id1888"} M0.__default.ConsistentCache#canCall(stOrigC#0)
     ==> M0.__default.ConsistentCache(stOrigC#0)
       || (forall cmd#0: Seq, deps#0: Set, e#0: Seq :: 
        { M0.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, TSeq(TChar))
             && $Is(deps#0, TSet(Tclass.M0.Path()))
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(M0.__default.DomC(stOrigC#0), 
            M0.__default.Hash(M0.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(M0.__default.DomSt(stOrigC#0), M0.__default.Loc(cmd#0, deps#0, e#0)));
  requires {:id "id1889"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stOrig#0, stOrigC#0);
  requires {:id "id1890"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass.M0.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(context#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, Lit(false)))
     && M0.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0, Lit(false))
     && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)), 
        M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, Lit(false)))
       ==> $IsA#M0.Tuple(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrigC#0, env#0, Lit(true)))
         && M0.__default.evalArgs#canCall(context#0, args#0, stOrigC#0, env#0, Lit(true))
         && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(stsC#0)), 
            M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrigC#0, env#0, Lit(true)))
           ==> (forall s#1: Box :: 
              { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
                { M0.__default.ValidState(s#1) } 
                { Set#IsMember(sts#0, s#1) } 
              $IsBox(s#1, Tclass.M0.State())
                 ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState#canCall(s#1))
                   && (
                    (Set#IsMember(sts#0, s#1)
                     ==> M0.__default.ValidState(s#1))
                     ==> 
                    Set#IsMember(sts#0, s#1)
                     ==> M0.__default.Extends#canCall(stOrig#0, s#1)))
             && ((forall s#1: Box :: 
                { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
                  { M0.__default.ValidState(s#1) } 
                  { Set#IsMember(sts#0, s#1) } 
                $IsBox(s#1, Tclass.M0.State())
                   ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState(s#1))
                     && (Set#IsMember(sts#0, s#1)
                       ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1)))
               ==> (forall sC#1: Box :: 
                  { M0.__default.ConsistentCache(sC#1) } 
                    { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1) } 
                    { M0.__default.ValidState(sC#1) } 
                    { Set#IsMember(stsC#0, sC#1) } 
                  $IsBox(sC#1, Tclass.M0.State())
                     ==> (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ValidState#canCall(sC#1))
                       && (
                        (Set#IsMember(stsC#0, sC#1)
                         ==> M0.__default.ValidState(sC#1))
                         ==> (Set#IsMember(stsC#0, sC#1) ==> M0.__default.Extends#canCall(stOrigC#0, sC#1))
                           && (
                            (Set#IsMember(stsC#0, sC#1)
                             ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1))
                             ==> 
                            Set#IsMember(stsC#0, sC#1)
                             ==> M0.__default.ConsistentCache#canCall(sC#1))))
                 && ((forall sC#1: Box :: 
                    { M0.__default.ConsistentCache(sC#1) } 
                      { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1) } 
                      { M0.__default.ValidState(sC#1) } 
                      { Set#IsMember(stsC#0, sC#1) } 
                    $IsBox(sC#1, Tclass.M0.State())
                       ==> (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ValidState(sC#1))
                         && (Set#IsMember(stsC#0, sC#1)
                           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1))
                         && (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ConsistentCache(sC#1)))
                   ==> 
                  (Seq#Equal(args#0, Seq#Empty(): Seq)
                   ==> Set#Equal(sts#0, stsC#0) && Set#Equal(stsC#0, Set#Empty(): Set))
                   ==> 
                  !Seq#Equal(args#0, Seq#Empty(): Seq)
                   ==> 
                  !Set#Equal(sts#0, Set#Empty(): Set)
                   ==> 
                  !Set#Equal(stsC#0, Set#Empty(): Set)
                   ==> M0.__default.Combine#canCall(sts#0, Lit(false))
                     && M0.__default.Combine#canCall(stsC#0, Lit(true))
                     && M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)), 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)))))));
  ensures {:id "id1891"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)), 
    M0.__default.evalArgs($LS($LS($LZ)), context#0, args#0, stOrig#0, env#0, Lit(false)));
  ensures {:id "id1892"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(stsC#0)), 
    M0.__default.evalArgs($LS($LS($LZ)), context#0, args#0, stOrigC#0, env#0, Lit(true)));
  ensures {:id "id1893"} (forall s#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState(s#1))
         && (Set#IsMember(sts#0, s#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1)));
  ensures {:id "id1894"} (forall sC#1: Box :: 
    { M0.__default.ConsistentCache(sC#1) } 
      { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1) } 
      { M0.__default.ValidState(sC#1) } 
      { Set#IsMember(stsC#0, sC#1) } 
    $IsBox(sC#1, Tclass.M0.State())
       ==> (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ValidState(sC#1))
         && (Set#IsMember(stsC#0, sC#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1))
         && (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ConsistentCache(sC#1)));
  ensures {:id "id1895"} Seq#Equal(args#0, Seq#Empty(): Seq) ==> Set#Equal(sts#0, stsC#0);
  ensures {:id "id1896"} Seq#Equal(args#0, Seq#Empty(): Seq) ==> Set#Equal(stsC#0, Set#Empty(): Set);
  ensures {:id "id1897"} !Seq#Equal(args#0, Seq#Empty(): Seq) ==> !Set#Equal(sts#0, Set#Empty(): Set);
  ensures {:id "id1898"} !Seq#Equal(args#0, Seq#Empty(): Seq) ==> !Set#Equal(stsC#0, Set#Empty(): Set);
  ensures {:id "id1899"} !Seq#Equal(args#0, Seq#Empty(): Seq)
     ==> M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)), 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Lemma_EvalArgs (correctness)"} Impl$$M0.__default.Lemma__EvalArgs(context#0: DatatypeType
       where $Is(context#0, Tclass.M0.Expression())
         && $IsAlloc(context#0, Tclass.M0.Expression(), $Heap)
         && $IsA#M0.Expression(context#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass.M0.Expression()), $Heap), 
    stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    stOrigC#0: Box
       where $IsBox(stOrigC#0, Tclass.M0.State())
         && $IsAllocBox(stOrigC#0, Tclass.M0.State(), $Heap), 
    env#0: Box
       where $IsBox(env#0, Tclass.M0.Env()) && $IsAllocBox(env#0, Tclass.M0.Env(), $Heap))
   returns (exprs#0: Seq
       where $Is(exprs#0, TSeq(Tclass.M0.Expression()))
         && $IsAlloc(exprs#0, TSeq(Tclass.M0.Expression()), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    stsC#0: Set
       where $Is(stsC#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC#0, TSet(Tclass.M0.State()), $Heap), 
    $_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1900"} M0.__default.ValidState#canCall(stOrig#0)
     && 
    M0.__default.ValidState(stOrig#0)
     && (forall p#2: Box :: 
      { M0.__default.WellFounded(p#2) } 
        { Set#IsMember(M0.__default.DomSt(stOrig#0), p#2) } 
      $IsBox(p#2, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stOrig#0), p#2)
         ==> M0.__default.WellFounded(p#2));
  requires {:id "id1901"} M0.__default.ValidEnv(env#0);
  free requires {:id "id1902"} M0.__default.ValidState#canCall(stOrigC#0)
     && 
    M0.__default.ValidState(stOrigC#0)
     && (forall p#3: Box :: 
      { M0.__default.WellFounded(p#3) } 
        { Set#IsMember(M0.__default.DomSt(stOrigC#0), p#3) } 
      $IsBox(p#3, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(stOrigC#0), p#3)
         ==> M0.__default.WellFounded(p#3));
  free requires {:id "id1903"} M0.__default.ConsistentCache#canCall(stOrigC#0)
     && 
    M0.__default.ConsistentCache(stOrigC#0)
     && (forall cmd#1: Seq, deps#1: Set, e#1: Seq :: 
      { M0.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, TSeq(TChar))
           && $Is(deps#1, TSet(Tclass.M0.Path()))
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(M0.__default.DomC(stOrigC#0), 
          M0.__default.Hash(M0.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(M0.__default.DomSt(stOrigC#0), M0.__default.Loc(cmd#1, deps#1, e#1)));
  requires {:id "id1904"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, stOrig#0, stOrigC#0);
  requires {:id "id1905"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass.M0.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(context#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#M0.Tuple(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, Lit(false)))
     && M0.__default.evalArgs#canCall(context#0, args#0, stOrig#0, env#0, Lit(false))
     && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)), 
        M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrig#0, env#0, Lit(false)))
       ==> $IsA#M0.Tuple(M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrigC#0, env#0, Lit(true)))
         && M0.__default.evalArgs#canCall(context#0, args#0, stOrigC#0, env#0, Lit(true))
         && (M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(stsC#0)), 
            M0.__default.evalArgs($LS($LZ), context#0, args#0, stOrigC#0, env#0, Lit(true)))
           ==> (forall s#1: Box :: 
              { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
                { M0.__default.ValidState(s#1) } 
                { Set#IsMember(sts#0, s#1) } 
              $IsBox(s#1, Tclass.M0.State())
                 ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState#canCall(s#1))
                   && (
                    (Set#IsMember(sts#0, s#1)
                     ==> M0.__default.ValidState(s#1))
                     ==> 
                    Set#IsMember(sts#0, s#1)
                     ==> M0.__default.Extends#canCall(stOrig#0, s#1)))
             && ((forall s#1: Box :: 
                { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
                  { M0.__default.ValidState(s#1) } 
                  { Set#IsMember(sts#0, s#1) } 
                $IsBox(s#1, Tclass.M0.State())
                   ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState(s#1))
                     && (Set#IsMember(sts#0, s#1)
                       ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1)))
               ==> (forall sC#1: Box :: 
                  { M0.__default.ConsistentCache(sC#1) } 
                    { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1) } 
                    { M0.__default.ValidState(sC#1) } 
                    { Set#IsMember(stsC#0, sC#1) } 
                  $IsBox(sC#1, Tclass.M0.State())
                     ==> (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ValidState#canCall(sC#1))
                       && (
                        (Set#IsMember(stsC#0, sC#1)
                         ==> M0.__default.ValidState(sC#1))
                         ==> (Set#IsMember(stsC#0, sC#1) ==> M0.__default.Extends#canCall(stOrigC#0, sC#1))
                           && (
                            (Set#IsMember(stsC#0, sC#1)
                             ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1))
                             ==> 
                            Set#IsMember(stsC#0, sC#1)
                             ==> M0.__default.ConsistentCache#canCall(sC#1))))
                 && ((forall sC#1: Box :: 
                    { M0.__default.ConsistentCache(sC#1) } 
                      { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1) } 
                      { M0.__default.ValidState(sC#1) } 
                      { Set#IsMember(stsC#0, sC#1) } 
                    $IsBox(sC#1, Tclass.M0.State())
                       ==> (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ValidState(sC#1))
                         && (Set#IsMember(stsC#0, sC#1)
                           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1))
                         && (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ConsistentCache(sC#1)))
                   ==> 
                  (Seq#Equal(args#0, Seq#Empty(): Seq)
                   ==> Set#Equal(sts#0, stsC#0) && Set#Equal(stsC#0, Set#Empty(): Set))
                   ==> 
                  !Seq#Equal(args#0, Seq#Empty(): Seq)
                   ==> 
                  !Set#Equal(sts#0, Set#Empty(): Set)
                   ==> 
                  !Set#Equal(stsC#0, Set#Empty(): Set)
                   ==> M0.__default.Combine#canCall(sts#0, Lit(false))
                     && M0.__default.Combine#canCall(stsC#0, Lit(true))
                     && M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)), 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)))))));
  ensures {:id "id1906"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(sts#0)), 
    M0.__default.evalArgs($LS($LS($LZ)), context#0, args#0, stOrig#0, env#0, Lit(false)));
  ensures {:id "id1907"} M0.Tuple#Equal(#M0.Tuple.Pair($Box(exprs#0), $Box(stsC#0)), 
    M0.__default.evalArgs($LS($LS($LZ)), context#0, args#0, stOrigC#0, env#0, Lit(true)));
  ensures {:id "id1908"} (forall s#1: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1) } 
      { M0.__default.ValidState(s#1) } 
      { Set#IsMember(sts#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> (Set#IsMember(sts#0, s#1) ==> M0.__default.ValidState(s#1))
         && (Set#IsMember(sts#0, s#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#1)));
  ensures {:id "id1909"} (forall sC#1: Box :: 
    { M0.__default.ConsistentCache(sC#1) } 
      { M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1) } 
      { M0.__default.ValidState(sC#1) } 
      { Set#IsMember(stsC#0, sC#1) } 
    $IsBox(sC#1, Tclass.M0.State())
       ==> (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ValidState(sC#1))
         && (Set#IsMember(stsC#0, sC#1)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrigC#0, sC#1))
         && (Set#IsMember(stsC#0, sC#1) ==> M0.__default.ConsistentCache(sC#1)));
  ensures {:id "id1910"} Seq#Equal(args#0, Seq#Empty(): Seq) ==> Set#Equal(sts#0, stsC#0);
  ensures {:id "id1911"} Seq#Equal(args#0, Seq#Empty(): Seq) ==> Set#Equal(stsC#0, Set#Empty(): Set);
  ensures {:id "id1912"} !Seq#Equal(args#0, Seq#Empty(): Seq) ==> !Set#Equal(sts#0, Set#Empty(): Set);
  ensures {:id "id1913"} !Seq#Equal(args#0, Seq#Empty(): Seq) ==> !Set#Equal(stsC#0, Set#Empty(): Set);
  ensures {:id "id1914"} !Seq#Equal(args#0, Seq#Empty(): Seq)
     ==> M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)), 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Lemma_EvalArgs (correctness)"} Impl$$M0.__default.Lemma__EvalArgs(context#0: DatatypeType, args#0: Seq, stOrig#0: Box, stOrigC#0: Box, env#0: Box)
   returns (exprs#0: Seq, sts#0: Set, stsC#0: Set, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $rhs#0_0: Seq;
  var $rhs#0_1: Set;
  var $rhs#0_2: Set;
  var a#1_0: DatatypeType
     where $Is(a#1_0, Tclass.M0.Expression())
       && $IsAlloc(a#1_0, Tclass.M0.Expression(), $Heap);
  var defass#st#1_0: bool;
  var st#1_0: Box
     where defass#st#1_0
       ==> $IsBox(st#1_0, Tclass.M0.State())
         && $IsAllocBox(st#1_0, Tclass.M0.State(), $Heap);
  var defass#stC#1_0: bool;
  var stC#1_0: Box
     where defass#stC#1_0
       ==> $IsBox(stC#1_0, Tclass.M0.State())
         && $IsAllocBox(stC#1_0, Tclass.M0.State(), $Heap);
  var $rhs##1_0: DatatypeType;
  var $rhs##1_1: Box;
  var $rhs##1_2: Box;
  var expr##1_0: DatatypeType;
  var st##1_0: Box;
  var stC##1_0: Box;
  var env##1_0: Box;
  var $rhs##1_3: Seq;
  var $rhs##1_4: Set;
  var $rhs##1_5: Set;
  var context##1_0: DatatypeType;
  var args##1_0: Seq;
  var stOrig##1_0: Box;
  var stOrigC##1_0: Box;
  var env##1_1: Box;
  var stOrig##1_1: Box;
  var sts##1_0: Set;
  var stOrig##1_2: Box;
  var sts##1_1: Set;
  var stOrig##1_3: Box;
  var st##1_1: Box;
  var sts##1_2: Set;
  var stC##1_1: Box;
  var stsC##1_0: Set;
  var $rhs#1_0: Seq;
  var $rhs#1_1: Set;
  var $rhs#1_2: Set;

    // AddMethodImpl: Lemma_EvalArgs, Impl$$M0.__default.Lemma__EvalArgs
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1101,5)
    assume true;
    if (Seq#Equal(args#0, Seq#Empty(): Seq))
    {
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1102,24)
        assume true;
        assume true;
        assume true;
        assume true;
        $rhs#0_0 := Lit(Seq#Empty(): Seq);
        assume true;
        $rhs#0_1 := Lit(Set#Empty(): Set);
        assume true;
        $rhs#0_2 := Lit(Set#Empty(): Set);
        exprs#0 := $rhs#0_0;
        sts#0 := $rhs#0_1;
        stsC#0 := $rhs#0_2;
    }
    else
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1104,35)
        assume true;
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type Expression
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id1921"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##1_0 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##1_0 := stOrig#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##1_0 := stOrigC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_0 := env#0;
        assert {:id "id1922"} DtRank(expr##1_0) < DtRank(context#0);
        call {:id "id1923"} $rhs##1_0, $rhs##1_1, $rhs##1_2 := Call$$M0.__default.Lemma__Eval(expr##1_0, st##1_0, stC##1_0, env##1_0);
        // TrCallStmt: After ProcessCallStmt
        a#1_0 := $rhs##1_0;
        st#1_0 := $rhs##1_1;
        defass#st#1_0 := true;
        stC#1_0 := $rhs##1_2;
        defass#stC#1_0 := true;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1105,41)
        assume true;
        assume true;
        assume true;
        // TrCallStmt: Adding lhs with type seq<Expression>
        // TrCallStmt: Adding lhs with type set<State>
        // TrCallStmt: Adding lhs with type set<State>
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        context##1_0 := context#0;
        assert {:id "id1927"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(args#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        args##1_0 := Seq#Drop(args#0, LitInt(1));
        assume true;
        // ProcessCallStmt: CheckSubrange
        stOrig##1_0 := stOrig#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stOrigC##1_0 := stOrigC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_1 := env#0;
        assert {:id "id1928"} 0 <= LitInt(0)
           || DtRank(context##1_0) < DtRank(context#0)
           || LitInt(0) == LitInt(0);
        assert {:id "id1929"} 0 <= Seq#Length(args#0)
           || DtRank(context##1_0) < DtRank(context#0)
           || LitInt(0) < LitInt(0)
           || Seq#Length(args##1_0) == Seq#Length(args#0);
        assert {:id "id1930"} DtRank(context##1_0) < DtRank(context#0)
           || (DtRank(context##1_0) == DtRank(context#0)
             && (LitInt(0) < LitInt(0)
               || (LitInt(0) == LitInt(0) && Seq#Length(args##1_0) < Seq#Length(args#0))));
        call {:id "id1931"} $rhs##1_3, $rhs##1_4, $rhs##1_5 := Call$$M0.__default.Lemma__EvalArgs(context##1_0, args##1_0, stOrig##1_0, stOrigC##1_0, env##1_1);
        // TrCallStmt: After ProcessCallStmt
        exprs#0 := $rhs##1_3;
        sts#0 := $rhs##1_4;
        stsC#0 := $rhs##1_5;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1106,25)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        stOrig##1_1 := stOrig#0;
        assert {:id "id1935"} defass#st#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        sts##1_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#1_0), sts#0);
        call {:id "id1936"} Call$$M0.__default.CompatibleProperty(stOrig##1_1, sts##1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1107,25)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        stOrig##1_2 := stOrigC#0;
        assert {:id "id1937"} defass#stC#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        sts##1_1 := Set#Union(Set#UnionOne(Set#Empty(): Set, stC#1_0), stsC#0);
        call {:id "id1938"} Call$$M0.__default.CompatibleProperty(stOrig##1_2, sts##1_1);
        // TrCallStmt: After ProcessCallStmt
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1108,31)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        stOrig##1_3 := stOrig#0;
        assert {:id "id1939"} defass#st#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st##1_1 := st#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        sts##1_2 := sts#0;
        assert {:id "id1940"} defass#stC#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##1_1 := stC#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stsC##1_0 := stsC#0;
        call {:id "id1941"} Call$$M0.__default.StateCorrespondence__Ctor(stOrig##1_3, st##1_1, sts##1_2, stC##1_1, stsC##1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1109,24)
        assume true;
        assume true;
        assume true;
        assume true;
        $rhs#1_0 := Seq#Append(Seq#Build(Seq#Empty(): Seq, $Box(a#1_0)), exprs#0);
        assert {:id "id1943"} defass#st#1_0;
        assume true;
        $rhs#1_1 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#1_0), sts#0);
        assert {:id "id1945"} defass#stC#1_0;
        assume true;
        $rhs#1_2 := Set#Union(Set#UnionOne(Set#Empty(): Set, stC#1_0), stsC#0);
        exprs#0 := $rhs#1_0;
        sts#0 := $rhs#1_1;
        stsC#0 := $rhs#1_2;
    }
}



// function declaration for M0._default.DomSt_Union
function M0.__default.DomSt__Union($ly: LayerType, sts#0: Set) : Set
uses {
// consequence axiom for M0.__default.DomSt__Union
axiom 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, sts#0: Set :: 
    { M0.__default.DomSt__Union($ly, sts#0) } 
    M0.__default.DomSt__Union#canCall(sts#0)
         || (1 < $FunctionContextHeight && $Is(sts#0, TSet(Tclass.M0.State())))
       ==> $Is(M0.__default.DomSt__Union($ly, sts#0), TSet(Tclass.M0.Path())));
// definition axiom for M0.__default.DomSt__Union (revealed)
axiom {:id "id1950"} 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, sts#0: Set :: 
    { M0.__default.DomSt__Union($LS($ly), sts#0) } 
    M0.__default.DomSt__Union#canCall(sts#0)
         || (1 < $FunctionContextHeight && $Is(sts#0, TSet(Tclass.M0.State())))
       ==> (!Set#Equal(sts#0, Set#Empty(): Set)
           ==> M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0)
             && (var st#0 := M0.__default.PickOne(Tclass.M0.State(), sts#0); 
              M0.__default.DomSt#canCall(st#0)
                 && M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#0)))))
         && M0.__default.DomSt__Union($LS($ly), sts#0)
           == (if Set#Equal(sts#0, Set#Empty(): Set)
             then Set#Empty(): Set
             else (var st#0 := M0.__default.PickOne(Tclass.M0.State(), sts#0); 
              Set#Union(M0.__default.DomSt(st#0), 
                M0.__default.DomSt__Union($ly, Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#0)))))));
// definition axiom for M0.__default.DomSt__Union for all literals (revealed)
axiom {:id "id1951"} 1 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, sts#0: Set :: 
    {:weight 3} { M0.__default.DomSt__Union($LS($ly), Lit(sts#0)) } 
    M0.__default.DomSt__Union#canCall(Lit(sts#0))
         || (1 < $FunctionContextHeight && $Is(sts#0, TSet(Tclass.M0.State())))
       ==> (!Set#Equal(sts#0, Set#Empty(): Set)
           ==> M0.__default.PickOne#canCall(Tclass.M0.State(), Lit(sts#0))
             && (var st#1 := Lit(M0.__default.PickOne(Tclass.M0.State(), Lit(sts#0))); 
              M0.__default.DomSt#canCall(st#1)
                 && M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#1)))))
         && M0.__default.DomSt__Union($LS($ly), Lit(sts#0))
           == (if Set#Equal(sts#0, Set#Empty(): Set)
             then Set#Empty(): Set
             else (var st#1 := Lit(M0.__default.PickOne(Tclass.M0.State(), Lit(sts#0))); 
              Set#Union(M0.__default.DomSt(st#1), 
                M0.__default.DomSt__Union($LS($ly), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#1)))))));
}

function M0.__default.DomSt__Union#canCall(sts#0: Set) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, sts#0: Set :: 
  { M0.__default.DomSt__Union($LS($ly), sts#0) } 
  M0.__default.DomSt__Union($LS($ly), sts#0)
     == M0.__default.DomSt__Union($ly, sts#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, sts#0: Set :: 
  { M0.__default.DomSt__Union(AsFuelBottom($ly), sts#0) } 
  M0.__default.DomSt__Union($ly, sts#0) == M0.__default.DomSt__Union($LZ, sts#0));

function M0.__default.DomSt__Union#requires(LayerType, Set) : bool;

// #requires axiom for M0.__default.DomSt__Union
axiom (forall $ly: LayerType, sts#0: Set :: 
  { M0.__default.DomSt__Union#requires($ly, sts#0) } 
  $Is(sts#0, TSet(Tclass.M0.State()))
     ==> M0.__default.DomSt__Union#requires($ly, sts#0) == true);

procedure {:verboseName "M0.DomSt_Union (well-formedness)"} CheckWellformed$$M0.__default.DomSt__Union(sts#0: Set where $Is(sts#0, TSet(Tclass.M0.State())));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.DomSt_Union (well-formedness)"} CheckWellformed$$M0.__default.DomSt__Union(sts#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var st#Z#0: Box;
  var let#0#0#0: Box;
  var ##s#0: Set;
  var ##st#0: Box;
  var ##sts#0: Set;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(M0.__default.DomSt__Union($LS($LZ), sts#0), TSet(Tclass.M0.Path()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Set#Equal(sts#0, Set#Empty(): Set))
        {
            assume {:id "id1952"} M0.__default.DomSt__Union($LS($LZ), sts#0) == Lit(Set#Empty(): Set);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.DomSt__Union($LS($LZ), sts#0), TSet(Tclass.M0.Path()));
            return;
        }
        else
        {
            havoc st#Z#0;
            ##s#0 := sts#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##s#0, TSet(Tclass.M0.State()), $Heap);
            assert {:id "id1953"} {:subsumption 0} !Set#Equal(##s#0, Set#Empty(): Set);
            assume !Set#Equal(##s#0, Set#Empty(): Set);
            assume M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0);
            assume {:id "id1954"} let#0#0#0 == M0.__default.PickOne(Tclass.M0.State(), sts#0);
            assume M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0);
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#0#0#0, Tclass.M0.State());
            assume {:id "id1955"} st#Z#0 == let#0#0#0;
            ##st#0 := st#Z#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(st#Z#0);
            ##sts#0 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
            assert {:id "id1956"} Set#Subset(##sts#0, sts#0) && !Set#Subset(sts#0, ##sts#0);
            assume M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0)));
            assume {:id "id1957"} M0.__default.DomSt__Union($LS($LZ), sts#0)
               == Set#Union(M0.__default.DomSt(st#Z#0), 
                M0.__default.DomSt__Union($LS($LZ), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0))));
            assume M0.__default.DomSt#canCall(st#Z#0)
               && M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, st#Z#0)));
            // CheckWellformedWithResult: any expression
            assume $Is(M0.__default.DomSt__Union($LS($LZ), sts#0), TSet(Tclass.M0.Path()));
            return;
        }

        assume false;
    }
}



procedure {:verboseName "M0.Combine_DomSt_X (well-formedness)"} CheckWellFormed$$M0.__default.Combine__DomSt__X(sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool);
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Combine_DomSt_X (well-formedness)"} CheckWellFormed$$M0.__default.Combine__DomSt__X(sts#0: Set, useCache#0: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##sts#0: Set;
  var ##useCache#0: bool;
  var ##sts#1: Set;


    // AddMethodImpl: Combine_DomSt_X, CheckWellFormed$$M0.__default.Combine__DomSt__X
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id1958"} !Set#Equal(sts#0, Set#Empty(): Set);
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##sts#0 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id1959"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
    assume !Set#Equal(##sts#0, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts#0, useCache#0);
    ##st#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
    ##sts#1 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.DomSt__Union#canCall(sts#0);
    assume {:id "id1960"} Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)), 
      M0.__default.DomSt__Union($LS($LZ), sts#0));
}



procedure {:verboseName "M0.Combine_DomSt_X (call)"} Call$$M0.__default.Combine__DomSt__X(sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool);
  // user-defined preconditions
  requires {:id "id1961"} !Set#Equal(sts#0, Set#Empty(): Set);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(sts#0, useCache#0)
     && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0))
     && M0.__default.DomSt__Union#canCall(sts#0);
  ensures {:id "id1962"} Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0)), 
    M0.__default.DomSt__Union($LS($LS($LZ)), sts#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Combine_DomSt_X (correctness)"} Impl$$M0.__default.Combine__DomSt__X(sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool)
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id1963"} !Set#Equal(sts#0, Set#Empty(): Set);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(sts#0, useCache#0)
     && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0))
     && M0.__default.DomSt__Union#canCall(sts#0);
  ensures {:id "id1964"} Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0)), 
    M0.__default.DomSt__Union($LS($LS($LZ)), sts#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Combine_DomSt_X (correctness)"} Impl$$M0.__default.Combine__DomSt__X(sts#0: Set, useCache#0: bool) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: Combine_DomSt_X, Impl$$M0.__default.Combine__DomSt__X
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts0#0: Set, $ih#useCache0#0: bool :: 
      { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0) } 
      $Is($ih#sts0#0, TSet(Tclass.M0.State()))
           && !Set#Equal($ih#sts0#0, Set#Empty(): Set)
           && ((Set#Subset($ih#sts0#0, sts#0) && !Set#Subset(sts#0, $ih#sts0#0))
             || (Set#Equal($ih#sts0#0, sts#0) && !$ih#useCache0#0 && useCache#0))
         ==> Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0)), 
          M0.__default.DomSt__Union($LS($LZ), $ih#sts0#0)));
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1122,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1122,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id1965"} Call$$M0.__default.reveal__Combine();
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M0.DomSt_Union_Cons (well-formedness)"} CheckWellFormed$$M0.__default.DomSt__Union__Cons(st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.DomSt_Union_Cons (call)"} Call$$M0.__default.DomSt__Union__Cons(st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0))
     && 
    M0.__default.DomSt#canCall(st#0)
     && M0.__default.DomSt__Union#canCall(sts#0);
  ensures {:id "id1967"} Set#Equal(M0.__default.DomSt__Union($LS($LS($LZ)), Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0)), 
    Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LS($LZ)), sts#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.DomSt_Union_Cons (correctness)"} Impl$$M0.__default.DomSt__Union__Cons(st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0))
     && 
    M0.__default.DomSt#canCall(st#0)
     && M0.__default.DomSt__Union#canCall(sts#0);
  ensures {:id "id1968"} Set#Equal(M0.__default.DomSt__Union($LS($LS($LZ)), Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0)), 
    Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LS($LZ)), sts#0)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.DomSt_Union_Cons (correctness)"} Impl$$M0.__default.DomSt__Union__Cons(st#0: Box, sts#0: Set) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var big#0: Set
     where $Is(big#0, TSet(Tclass.M0.State()))
       && $IsAlloc(big#0, TSet(Tclass.M0.State()), $Heap);
  var states#0_0: Set;
  var ##st#0_0: Box;
  var ##sts#0_0: Set;
  var defass#stPick#1_0: bool;
  var stPick#1_0: Box
     where defass#stPick#1_0
       ==> $IsBox(stPick#1_0, Tclass.M0.State())
         && $IsAllocBox(stPick#1_0, Tclass.M0.State(), $Heap);
  var ##s#1_0: Set;
  var ##st#1_1_0_0_0: Box;
  var ##sts#1_1_0_0_0: Set;
  var ##st#1_1_0_0_1: Box;
  var ##sts#1_1_0_0_1: Set;
  var ##st#1_1_0_1_0: Box;
  var ##st#1_1_0_1_1: Box;
  var ##sts#1_1_0_1_0: Set;
  var st##1_1_0_1_0: Box;
  var sts##1_1_0_1_0: Set;
  var ##st#1_1_0_1_2: Box;
  var ##sts#1_1_0_1_1: Set;
  var ##st#1_1_0_2_0: Box;
  var ##st#1_1_0_2_1: Box;
  var ##sts#1_1_0_2_0: Set;
  var ##st#1_1_0_2_2: Box;
  var ##st#1_1_0_2_3: Box;
  var ##sts#1_1_0_2_1: Set;
  var ##st#1_1_0_3_0: Box;
  var ##sts#1_1_0_3_0: Set;
  var st##1_1_0_3_0: Box;
  var sts##1_1_0_3_0: Set;
  var ##st#1_1_0_3_1: Box;
  var ##st#1_1_0_3_2: Box;
  var ##sts#1_1_0_3_1: Set;
  var ##sts#1_1_0_4_0: Set;
  var ##st#1_1_0_4_0: Box;
  var ##sts#1_1_0_4_1: Set;
  var ##sts#1_1_0_0: Set;

    // AddMethodImpl: DomSt_Union_Cons, Impl$$M0.__default.DomSt__Union__Cons
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts0#0: Set :: 
      { Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LZ), $ih#sts0#0)) } 
        { Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), $ih#sts0#0) } 
      $Is($ih#sts0#0, TSet(Tclass.M0.State()))
           && Lit(true)
           && 
          Set#Subset($ih#sts0#0, sts#0)
           && !Set#Subset(sts#0, $ih#sts0#0)
         ==> Set#Equal(M0.__default.DomSt__Union($LS($LZ), Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), $ih#sts0#0)), 
          Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LZ), $ih#sts0#0))));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1127,13)
    assume true;
    assume true;
    big#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1128,5)
    assume true;
    if (Set#IsMember(sts#0, st#0))
    {
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1129,7)
        // Begin Comprehension WF check
        havoc states#0_0;
        if ($Is(states#0_0, TSet(Tclass.M0.State()))
           && $IsAlloc(states#0_0, TSet(Tclass.M0.State()), $Heap))
        {
            if (Set#IsMember(states#0_0, st#0))
            {
                ##st#0_0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                ##sts#0_0 := states#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#0_0, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(states#0_0);
            }
        }

        // End Comprehension WF check
        assume (forall states#0_1: Set :: 
          { M0.__default.DomSt__Union($LS($LZ), states#0_1) } 
            { Set#IsMember(states#0_1, st#0) } 
          $Is(states#0_1, TSet(Tclass.M0.State()))
             ==> 
            Set#IsMember(states#0_1, st#0)
             ==> M0.__default.DomSt#canCall(st#0)
               && M0.__default.DomSt__Union#canCall(states#0_1));
        assert {:id "id1970"} {:subsumption 0} (forall states#0_1: Set :: 
          { M0.__default.DomSt__Union($LS($LS($LZ)), states#0_1) } 
            { Set#IsMember(states#0_1, st#0) } 
          $Is(states#0_1, TSet(Tclass.M0.State()))
               && (forall states$ih#0_0#0_0: Set :: 
                { M0.__default.DomSt__Union($LS($LZ), states$ih#0_0#0_0) } 
                  { Set#IsMember(states$ih#0_0#0_0, st#0) } 
                $Is(states$ih#0_0#0_0, TSet(Tclass.M0.State()))
                   ==> 
                  Set#Subset(states$ih#0_0#0_0, states#0_1)
                     && !Set#Subset(states#0_1, states$ih#0_0#0_0)
                   ==> 
                  Set#IsMember(states$ih#0_0#0_0, st#0)
                   ==> Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LZ), states$ih#0_0#0_0)))
               && true
             ==> 
            Set#IsMember(states#0_1, st#0)
             ==> Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LS($LZ)), states#0_1)));
        assume {:id "id1971"} (forall states#0_1: Set :: 
          { M0.__default.DomSt__Union($LS($LZ), states#0_1) } 
            { Set#IsMember(states#0_1, st#0) } 
          $Is(states#0_1, TSet(Tclass.M0.State()))
             ==> 
            Set#IsMember(states#0_1, st#0)
             ==> Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LZ), states#0_1)));
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1130,7)
        assume true;
        assert {:id "id1972"} Set#Equal(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), sts#0);
    }
    else
    {
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1132,18)
        assume true;
        ##s#1_0 := big#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##s#1_0, TSet(Tclass.M0.State()), $Heap);
        assert {:id "id1973"} {:subsumption 0} !Set#Equal(##s#1_0, Set#Empty(): Set);
        assume !Set#Equal(##s#1_0, Set#Empty(): Set);
        assume M0.__default.PickOne#canCall(Tclass.M0.State(), big#0);
        assume M0.__default.PickOne#canCall(Tclass.M0.State(), big#0);
        stPick#1_0 := M0.__default.PickOne(Tclass.M0.State(), big#0);
        defass#stPick#1_0 := true;
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1133,7)
        assert {:id "id1975"} defass#stPick#1_0;
        assume true;
        if (st#0 == stPick#1_0)
        {
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1134,9)
            assert {:id "id1976"} defass#stPick#1_0;
            assume true;
            assert {:id "id1977"} Set#Equal(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), sts#0);
        }
        else
        {
            // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
            // Assume Fuel Constant
            if (*)
            {
                // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                ##sts#1_1_0_0 := big#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_0, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(big#0);
                assume M0.__default.DomSt__Union#canCall(big#0);
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                ##sts#1_1_0_4_0 := big#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_4_0, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(big#0);
                assume M0.__default.DomSt__Union#canCall(big#0);
                // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1138,13)
                assert {:id "id2006"} defass#stPick#1_0;
                assert {:id "id2007"} defass#stPick#1_0;
                assume true;
                assert {:id "id2008"} Set#Equal(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                  Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                    Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                assert {:id "id2009"} defass#stPick#1_0;
                ##st#1_1_0_4_0 := stPick#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_4_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stPick#1_0);
                assert {:id "id2010"} defass#stPick#1_0;
                ##sts#1_1_0_4_1 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_4_1, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                    Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                assume M0.__default.DomSt#canCall(stPick#1_0)
                   && M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                      Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                assert {:id "id2011"} {:subsumption 0} Set#Equal(M0.__default.DomSt__Union($LS($LS($LZ)), big#0), 
                  Set#Union(M0.__default.DomSt(stPick#1_0), 
                    M0.__default.DomSt__Union($LS($LS($LZ)), 
                      Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                        Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                assume {:id "id1998"} defass#stPick#1_0;
                ##st#1_1_0_3_0 := stPick#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_3_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stPick#1_0);
                assume {:id "id1999"} defass#stPick#1_0;
                ##sts#1_1_0_3_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_3_0, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                    Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                assume M0.__default.DomSt#canCall(stPick#1_0)
                   && M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                      Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1140,29)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_0_3_0 := st#0;
                assert {:id "id2000"} defass#stPick#1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_1_0_3_0 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                assert {:id "id2001"} Set#Subset(sts##1_1_0_3_0, sts#0) && !Set#Subset(sts#0, sts##1_1_0_3_0);
                call {:id "id2002"} Call$$M0.__default.DomSt__Union__Cons(st##1_1_0_3_0, sts##1_1_0_3_0);
                // TrCallStmt: After ProcessCallStmt
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                assert {:id "id2003"} defass#stPick#1_0;
                ##st#1_1_0_3_1 := stPick#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_3_1, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stPick#1_0);
                ##st#1_1_0_3_2 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_3_2, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                assert {:id "id2004"} defass#stPick#1_0;
                ##sts#1_1_0_3_1 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_3_1, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                assume M0.__default.DomSt#canCall(stPick#1_0)
                   && M0.__default.DomSt#canCall(st#0)
                   && M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                assert {:id "id2005"} {:subsumption 0} Set#Equal(Set#Union(M0.__default.DomSt(stPick#1_0), 
                    M0.__default.DomSt__Union($LS($LS($LZ)), 
                      Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                        Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))))), 
                  Set#Union(Set#Union(M0.__default.DomSt(stPick#1_0), M0.__default.DomSt(st#0)), 
                    M0.__default.DomSt__Union($LS($LS($LZ)), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                assume {:id "id1993"} defass#stPick#1_0;
                ##st#1_1_0_2_0 := stPick#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_2_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stPick#1_0);
                ##st#1_1_0_2_1 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_2_1, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                assume {:id "id1994"} defass#stPick#1_0;
                ##sts#1_1_0_2_0 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_2_0, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                assume M0.__default.DomSt#canCall(stPick#1_0)
                   && M0.__default.DomSt#canCall(st#0)
                   && M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                ##st#1_1_0_2_2 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_2_2, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                assert {:id "id1995"} defass#stPick#1_0;
                ##st#1_1_0_2_3 := stPick#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_2_3, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stPick#1_0);
                assert {:id "id1996"} defass#stPick#1_0;
                ##sts#1_1_0_2_1 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_2_1, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                assume M0.__default.DomSt#canCall(st#0)
                   && M0.__default.DomSt#canCall(stPick#1_0)
                   && M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                assert {:id "id1997"} {:subsumption 0} Set#Equal(Set#Union(Set#Union(M0.__default.DomSt(stPick#1_0), M0.__default.DomSt(st#0)), 
                    M0.__default.DomSt__Union($LS($LS($LZ)), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)))), 
                  Set#Union(Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt(stPick#1_0)), 
                    M0.__default.DomSt__Union($LS($LS($LZ)), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                ##st#1_1_0_1_0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_1_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                assume {:id "id1984"} defass#stPick#1_0;
                ##st#1_1_0_1_1 := stPick#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_1_1, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(stPick#1_0);
                assume {:id "id1985"} defass#stPick#1_0;
                ##sts#1_1_0_1_0 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_1_0, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                assume M0.__default.DomSt#canCall(st#0)
                   && M0.__default.DomSt#canCall(stPick#1_0)
                   && M0.__default.DomSt__Union#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1143,29)
                // TrCallStmt: Before ProcessCallStmt
                assert {:id "id1986"} defass#stPick#1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_0_1_0 := stPick#1_0;
                assert {:id "id1987"} defass#stPick#1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_1_0_1_0 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                assert {:id "id1988"} Set#Subset(sts##1_1_0_1_0, sts#0) && !Set#Subset(sts#0, sts##1_1_0_1_0);
                call {:id "id1989"} Call$$M0.__default.DomSt__Union__Cons(st##1_1_0_1_0, sts##1_1_0_1_0);
                // TrCallStmt: After ProcessCallStmt
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                ##st#1_1_0_1_2 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_1_2, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                assert {:id "id1990"} defass#stPick#1_0;
                assert {:id "id1991"} defass#stPick#1_0;
                ##sts#1_1_0_1_1 := Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_1_1, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                    Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                assume M0.__default.DomSt#canCall(st#0)
                   && M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                      Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                assert {:id "id1992"} {:subsumption 0} Set#Equal(Set#Union(Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt(stPick#1_0)), 
                    M0.__default.DomSt__Union($LS($LS($LZ)), Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)))), 
                  Set#Union(M0.__default.DomSt(st#0), 
                    M0.__default.DomSt__Union($LS($LS($LZ)), 
                      Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                        Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))))));
                assume false;
            }
            else if (*)
            {
                // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                ##st#1_1_0_0_0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_0_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                assume {:id "id1978"} defass#stPick#1_0;
                assume {:id "id1979"} defass#stPick#1_0;
                ##sts#1_1_0_0_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                  Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_0_0, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                    Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                assume M0.__default.DomSt#canCall(st#0)
                   && M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                      Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1145,13)
                assert {:id "id1980"} defass#stPick#1_0;
                assert {:id "id1981"} defass#stPick#1_0;
                assume true;
                assert {:id "id1982"} Set#Equal(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                    Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))), 
                  sts#0);
                // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                ##st#1_1_0_0_1 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_0_0_1, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                ##sts#1_1_0_0_1 := sts#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_0_1, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(sts#0);
                assume M0.__default.DomSt#canCall(st#0) && M0.__default.DomSt__Union#canCall(sts#0);
                // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1136,9)
                assert {:id "id1983"} {:subsumption 0} Set#Equal(Set#Union(M0.__default.DomSt(st#0), 
                    M0.__default.DomSt__Union($LS($LS($LZ)), 
                      Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                        Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))))), 
                  Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LS($LZ)), sts#0)));
                assume false;
            }

            assume {:id "id2012"} Set#Equal(M0.__default.DomSt__Union($LS($LZ), big#0), 
              Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LZ), sts#0)));
        }
    }
}



procedure {:verboseName "M0.Combine_DomSt (well-formedness)"} CheckWellFormed$$M0.__default.Combine__DomSt(st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool);
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Combine_DomSt (well-formedness)"} CheckWellFormed$$M0.__default.Combine__DomSt(st#0: Box, sts#0: Set, useCache#0: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##sts#0: Set;
  var ##useCache#0: bool;
  var ##st#1: Box;
  var ##st#2: Box;
  var ##sts#1: Set;
  var ##useCache#1: bool;


    // AddMethodImpl: Combine_DomSt, CheckWellFormed$$M0.__default.Combine__DomSt
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id2013"} !Set#Equal(sts#0, Set#Empty(): Set);
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##sts#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id2014"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
    assume !Set#Equal(##sts#0, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), useCache#0);
    ##st#0 := M0.__default.Combine($LS($LZ), 
      reveal_M0._default.Combine, 
      Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
      useCache#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
        useCache#0));
    ##st#1 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.DomSt#canCall(st#0);
    ##sts#1 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
    ##useCache#1 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id2015"} {:subsumption 0} !Set#Equal(##sts#1, Set#Empty(): Set);
    assume !Set#Equal(##sts#1, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts#0, useCache#0);
    ##st#2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
    assume {:id "id2016"} Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LZ), 
          reveal_M0._default.Combine, 
          Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
          useCache#0)), 
      Set#Union(M0.__default.DomSt(st#0), 
        M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0))));
}



procedure {:verboseName "M0.Combine_DomSt (call)"} Call$$M0.__default.Combine__DomSt(st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool);
  // user-defined preconditions
  requires {:id "id2017"} !Set#Equal(sts#0, Set#Empty(): Set);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), useCache#0)
     && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
        useCache#0))
     && 
    M0.__default.DomSt#canCall(st#0)
     && 
    M0.__default.Combine#canCall(sts#0, useCache#0)
     && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
  ensures {:id "id2018"} Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
        useCache#0)), 
    Set#Union(M0.__default.DomSt(st#0), 
      M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Combine_DomSt (correctness)"} Impl$$M0.__default.Combine__DomSt(st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool)
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id2019"} !Set#Equal(sts#0, Set#Empty(): Set);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), useCache#0)
     && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
        useCache#0))
     && 
    M0.__default.DomSt#canCall(st#0)
     && 
    M0.__default.Combine#canCall(sts#0, useCache#0)
     && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
  ensures {:id "id2020"} Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
        useCache#0)), 
    Set#Union(M0.__default.DomSt(st#0), 
      M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Combine_DomSt (correctness)"} Impl$$M0.__default.Combine__DomSt(st#0: Box, sts#0: Set, useCache#0: bool) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var big#0: Set
     where $Is(big#0, TSet(Tclass.M0.State()))
       && $IsAlloc(big#0, TSet(Tclass.M0.State()), $Heap);
  var states#0_0: Set;
  var ##st#0_0: Box;
  var ##sts#0_0: Set;
  var sts##0_0: Set;
  var useCache##0_0: bool;
  var defass#stPick#1_0: bool;
  var stPick#1_0: Box
     where defass#stPick#1_0
       ==> $IsBox(stPick#1_0, Tclass.M0.State())
         && $IsAllocBox(stPick#1_0, Tclass.M0.State(), $Heap);
  var ##s#1_0: Set;
  var sts##1_0_0: Set;
  var useCache##1_0_0: bool;
  var sts##1_0_1: Set;
  var useCache##1_0_1: bool;
  var ##sts#1_1_0_0: Set;
  var ##useCache#1_1_0_0: bool;
  var sts##1_1_0_0: Set;
  var useCache##1_1_0_0: bool;
  var ##st#1_1_1_0_0_0: Box;
  var ##sts#1_1_1_0_0_0: Set;
  var sts##1_1_1_0_0_0: Set;
  var useCache##1_1_1_0_0_0: bool;
  var ##st#1_1_1_0_0_1: Box;
  var ##st#1_1_1_0_0_2: Box;
  var ##sts#1_1_1_0_0_1: Set;
  var ##useCache#1_1_1_0_0_0: bool;
  var ##st#1_1_1_0_1_0: Box;
  var ##sts#1_1_1_0_1_0: Set;
  var ##st#1_1_1_0_1_1: Box;
  var ##sts#1_1_1_0_1_1: Set;
  var ##st#1_1_1_0_2_0: Box;
  var ##st#1_1_1_0_2_1: Box;
  var ##sts#1_1_1_0_2_0: Set;
  var st##1_1_1_0_2_0: Box;
  var sts##1_1_1_0_2_0: Set;
  var ##st#1_1_1_0_2_2: Box;
  var ##sts#1_1_1_0_2_1: Set;
  var ##st#1_1_1_0_3_0: Box;
  var ##st#1_1_1_0_3_1: Box;
  var ##sts#1_1_1_0_3_0: Set;
  var ##st#1_1_1_0_3_2: Box;
  var ##st#1_1_1_0_3_3: Box;
  var ##sts#1_1_1_0_3_1: Set;
  var ##st#1_1_1_0_4_0: Box;
  var ##st#1_1_1_0_4_1: Box;
  var ##st#1_1_1_0_4_2: Box;
  var ##sts#1_1_1_0_4_0: Set;
  var ##useCache#1_1_1_0_4_0: bool;
  var sts##1_1_1_0_4_0: Set;
  var useCache##1_1_1_0_4_0: bool;
  var ##st#1_1_1_0_4_3: Box;
  var ##st#1_1_1_0_4_4: Box;
  var ##sts#1_1_1_0_4_1: Set;
  var ##st#1_1_1_0_5_0: Box;
  var ##st#1_1_1_0_5_1: Box;
  var ##sts#1_1_1_0_5_0: Set;
  var ##useCache#1_1_1_0_5_0: bool;
  var st##1_1_1_0_5_0: Box;
  var sts##1_1_1_0_5_0: Set;
  var useCache##1_1_1_0_5_0: bool;
  var ##st#1_1_1_0_5_2: Box;
  var ##st#1_1_1_0_5_3: Box;
  var ##st#1_1_1_0_5_4: Box;
  var ##sts#1_1_1_0_5_1: Set;
  var ##useCache#1_1_1_0_5_1: bool;
  var ##st#1_1_1_0_6_0: Box;
  var ##sts#1_1_1_0_6_0: Set;
  var sts##1_1_1_0_6_0: Set;
  var useCache##1_1_1_0_6_0: bool;
  var ##st#1_1_1_0_6_1: Box;
  var ##st#1_1_1_0_6_2: Box;
  var ##sts#1_1_1_0_6_1: Set;
  var ##useCache#1_1_1_0_6_0: bool;
  var ##sts#1_1_1_0_7_0: Set;
  var ##st#1_1_1_0_7_0: Box;
  var ##sts#1_1_1_0_7_1: Set;
  var ##st#1_1_1_0_8_0: Box;
  var ##sts#1_1_1_0_8_0: Set;
  var ##useCache#1_1_1_0_8_0: bool;
  var sts##1_1_1_0_8_0: Set;
  var useCache##1_1_1_0_8_0: bool;
  var ##sts#1_1_1_0_8_1: Set;
  var ##st#1_1_1_0_0: Box;
  var ##sts#1_1_1_0_0: Set;
  var ##useCache#1_1_1_0_0: bool;

    // AddMethodImpl: Combine_DomSt, Impl$$M0.__default.Combine__DomSt
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts0#0: Set, $ih#useCache0#0: bool :: 
      { Set#Union(M0.__default.DomSt(st#0), 
          M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0))) } 
        { M0.__default.Combine($LS($LZ), 
          reveal_M0._default.Combine, 
          Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), $ih#sts0#0), 
          $ih#useCache0#0) } 
      $Is($ih#sts0#0, TSet(Tclass.M0.State()))
           && !Set#Equal($ih#sts0#0, Set#Empty(): Set)
           && ((Set#Subset($ih#sts0#0, sts#0) && !Set#Subset(sts#0, $ih#sts0#0))
             || (Set#Equal($ih#sts0#0, sts#0) && !$ih#useCache0#0 && useCache#0))
         ==> Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LZ), 
              reveal_M0._default.Combine, 
              Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), $ih#sts0#0), 
              $ih#useCache0#0)), 
          Set#Union(M0.__default.DomSt(st#0), 
            M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0)))));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1156,13)
    assume true;
    assume true;
    big#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1157,5)
    assume true;
    if (Set#IsMember(sts#0, st#0))
    {
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1158,7)
        assume true;
        assert {:id "id2022"} Set#Equal(big#0, sts#0);
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1159,7)
        // Begin Comprehension WF check
        havoc states#0_0;
        if ($Is(states#0_0, TSet(Tclass.M0.State()))
           && $IsAlloc(states#0_0, TSet(Tclass.M0.State()), $Heap))
        {
            if (Set#IsMember(states#0_0, st#0))
            {
                ##st#0_0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0_0, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(st#0);
                ##sts#0_0 := states#0_0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#0_0, TSet(Tclass.M0.State()), $Heap);
                assume M0.__default.DomSt__Union#canCall(states#0_0);
            }
        }

        // End Comprehension WF check
        assume (forall states#0_1: Set :: 
          { M0.__default.DomSt__Union($LS($LZ), states#0_1) } 
            { Set#IsMember(states#0_1, st#0) } 
          $Is(states#0_1, TSet(Tclass.M0.State()))
             ==> 
            Set#IsMember(states#0_1, st#0)
             ==> M0.__default.DomSt#canCall(st#0)
               && M0.__default.DomSt__Union#canCall(states#0_1));
        assert {:id "id2023"} {:subsumption 0} (forall states#0_1: Set :: 
          { M0.__default.DomSt__Union($LS($LS($LZ)), states#0_1) } 
            { Set#IsMember(states#0_1, st#0) } 
          $Is(states#0_1, TSet(Tclass.M0.State()))
               && (forall states$ih#0_0#0_0: Set :: 
                { M0.__default.DomSt__Union($LS($LZ), states$ih#0_0#0_0) } 
                  { Set#IsMember(states$ih#0_0#0_0, st#0) } 
                $Is(states$ih#0_0#0_0, TSet(Tclass.M0.State()))
                   ==> 
                  Set#Subset(states$ih#0_0#0_0, states#0_1)
                     && !Set#Subset(states#0_1, states$ih#0_0#0_0)
                   ==> 
                  Set#IsMember(states$ih#0_0#0_0, st#0)
                   ==> Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LZ), states$ih#0_0#0_0)))
               && true
             ==> 
            Set#IsMember(states#0_1, st#0)
             ==> Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LS($LZ)), states#0_1)));
        assume {:id "id2024"} (forall states#0_1: Set :: 
          { M0.__default.DomSt__Union($LS($LZ), states#0_1) } 
            { Set#IsMember(states#0_1, st#0) } 
          $Is(states#0_1, TSet(Tclass.M0.State()))
             ==> 
            Set#IsMember(states#0_1, st#0)
             ==> Set#Subset(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LZ), states#0_1)));
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1160,22)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        sts##0_0 := sts#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        useCache##0_0 := useCache#0;
        call {:id "id2025"} Call$$M0.__default.Combine__DomSt__X(sts##0_0, useCache##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1162,18)
        assume true;
        ##s#1_0 := big#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##s#1_0, TSet(Tclass.M0.State()), $Heap);
        assert {:id "id2026"} {:subsumption 0} !Set#Equal(##s#1_0, Set#Empty(): Set);
        assume !Set#Equal(##s#1_0, Set#Empty(): Set);
        assume M0.__default.PickOne#canCall(Tclass.M0.State(), big#0);
        assume M0.__default.PickOne#canCall(Tclass.M0.State(), big#0);
        stPick#1_0 := M0.__default.PickOne(Tclass.M0.State(), big#0);
        defass#stPick#1_0 := true;
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1163,7)
        assert {:id "id2028"} defass#stPick#1_0;
        assume true;
        if (stPick#1_0 == st#0)
        {
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1164,24)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            sts##1_0_0 := big#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            useCache##1_0_0 := useCache#0;
            call {:id "id2029"} Call$$M0.__default.Combine__DomSt__X(sts##1_0_0, useCache##1_0_0);
            // TrCallStmt: After ProcessCallStmt
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1165,24)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            sts##1_0_1 := sts#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            useCache##1_0_1 := useCache#0;
            call {:id "id2030"} Call$$M0.__default.Combine__DomSt__X(sts##1_0_1, useCache##1_0_1);
            // TrCallStmt: After ProcessCallStmt
        }
        else
        {
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1166,14)
            assert {:id "id2031"} defass#stPick#1_0;
            assume true;
            if (Set#Equal(Set#UnionOne(Set#Empty(): Set, stPick#1_0), sts#0))
            {
                // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1167,9)
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1167,16)
                // TrCallStmt: Before ProcessCallStmt
                call {:id "id2032"} Call$$M0.__default.reveal__Combine();
                // TrCallStmt: After ProcessCallStmt
                // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1168,9)
                ##sts#1_1_0_0 := sts#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##sts#1_1_0_0, TSet(Tclass.M0.State()), $Heap);
                ##useCache#1_1_0_0 := useCache#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##useCache#1_1_0_0, TBool, $Heap);
                assert {:id "id2033"} {:subsumption 0} !Set#Equal(##sts#1_1_0_0, Set#Empty(): Set);
                assume M0.__default.Combine#canCall(sts#0, useCache#0);
                assert {:id "id2034"} defass#stPick#1_0;
                assume M0.__default.Combine#canCall(sts#0, useCache#0);
                assert {:id "id2035"} {:subsumption 0} M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0)
                   == stPick#1_0;
                assume {:id "id2036"} M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)
                   == stPick#1_0;
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1169,24)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_1_0_0 := big#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##1_1_0_0 := useCache#0;
                call {:id "id2037"} Call$$M0.__default.Combine__DomSt__X(sts##1_1_0_0, useCache##1_1_0_0);
                // TrCallStmt: After ProcessCallStmt
            }
            else
            {
                // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1173,9)
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1173,16)
                // TrCallStmt: Before ProcessCallStmt
                call {:id "id2038"} Call$$M0.__default.reveal__Combine();
                // TrCallStmt: After ProcessCallStmt
                // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1174,9)
                assert {:id "id2039"} defass#stPick#1_0;
                assert {:id "id2040"} defass#stPick#1_0;
                assume true;
                assert {:id "id2041"} Set#Equal(big#0, 
                  Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                    Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                      Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)))));
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##sts#1_1_1_0_0 := big#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_0, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_0_0 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_0_0, TBool, $Heap);
                    assert {:id "id2101"} {:subsumption 0} !Set#Equal(##sts#1_1_1_0_0, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(big#0, useCache#0);
                    ##st#1_1_1_0_0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, big#0, useCache#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, big#0, useCache#0));
                    assume M0.__default.Combine#canCall(big#0, useCache#0)
                       && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, big#0, useCache#0));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##sts#1_1_1_0_8_0 := big#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_8_0, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_0_8_0 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_0_8_0, TBool, $Heap);
                    assume {:id "id2098"} {:subsumption 0} !Set#Equal(##sts#1_1_1_0_8_0, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(big#0, useCache#0);
                    ##st#1_1_1_0_8_0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, big#0, useCache#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_8_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, big#0, useCache#0));
                    assume M0.__default.Combine#canCall(big#0, useCache#0)
                       && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, big#0, useCache#0));
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1177,28)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_1_1_0_8_0 := big#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_1_1_0_8_0 := useCache#0;
                    call {:id "id2099"} Call$$M0.__default.Combine__DomSt__X(sts##1_1_1_0_8_0, useCache##1_1_1_0_8_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##sts#1_1_1_0_8_1 := big#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_8_1, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(big#0);
                    assume M0.__default.DomSt__Union#canCall(big#0);
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2100"} {:subsumption 0} Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, big#0, useCache#0)), 
                      M0.__default.DomSt__Union($LS($LS($LZ)), big#0));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##sts#1_1_1_0_7_0 := big#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_7_0, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(big#0);
                    assume M0.__default.DomSt__Union#canCall(big#0);
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2095"} defass#stPick#1_0;
                    ##st#1_1_1_0_7_0 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_7_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    assert {:id "id2096"} defass#stPick#1_0;
                    ##sts#1_1_1_0_7_1 := Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_7_1, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                    assume M0.__default.DomSt#canCall(stPick#1_0)
                       && M0.__default.DomSt__Union#canCall(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2097"} {:subsumption 0} Set#Equal(M0.__default.DomSt__Union($LS($LS($LZ)), big#0), 
                      Set#Union(M0.__default.DomSt(stPick#1_0), 
                        M0.__default.DomSt__Union($LS($LS($LZ)), Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assume {:id "id2087"} defass#stPick#1_0;
                    ##st#1_1_1_0_6_0 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_6_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    assume {:id "id2088"} defass#stPick#1_0;
                    ##sts#1_1_1_0_6_0 := Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_6_0, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                    assume M0.__default.DomSt#canCall(stPick#1_0)
                       && M0.__default.DomSt__Union#canCall(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)));
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1180,28)
                    // TrCallStmt: Before ProcessCallStmt
                    assert {:id "id2089"} defass#stPick#1_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_1_1_0_6_0 := Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_1_1_0_6_0 := useCache#0;
                    call {:id "id2090"} Call$$M0.__default.Combine__DomSt__X(sts##1_1_1_0_6_0, useCache##1_1_1_0_6_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2091"} defass#stPick#1_0;
                    ##st#1_1_1_0_6_1 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_6_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    assert {:id "id2092"} defass#stPick#1_0;
                    ##sts#1_1_1_0_6_1 := Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_6_1, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_0_6_0 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_0_6_0, TBool, $Heap);
                    assert {:id "id2093"} {:subsumption 0} !Set#Equal(##sts#1_1_1_0_6_1, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), useCache#0);
                    ##st#1_1_1_0_6_2 := M0.__default.Combine($LS($LZ), 
                      reveal_M0._default.Combine, 
                      Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      useCache#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_6_2, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
                        reveal_M0._default.Combine, 
                        Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        useCache#0));
                    assume M0.__default.DomSt#canCall(stPick#1_0)
                       && 
                      M0.__default.Combine#canCall(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), useCache#0)
                       && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
                          reveal_M0._default.Combine, 
                          Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          useCache#0));
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2094"} {:subsumption 0} Set#Equal(Set#Union(M0.__default.DomSt(stPick#1_0), 
                        M0.__default.DomSt__Union($LS($LS($LZ)), Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)))), 
                      Set#Union(M0.__default.DomSt(stPick#1_0), 
                        M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), 
                            reveal_M0._default.Combine, 
                            Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            useCache#0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assume {:id "id2074"} defass#stPick#1_0;
                    ##st#1_1_1_0_5_0 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_5_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    assume {:id "id2075"} defass#stPick#1_0;
                    ##sts#1_1_1_0_5_0 := Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_5_0, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_0_5_0 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_0_5_0, TBool, $Heap);
                    assume {:id "id2076"} {:subsumption 0} !Set#Equal(##sts#1_1_1_0_5_0, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), useCache#0);
                    ##st#1_1_1_0_5_1 := M0.__default.Combine($LS($LZ), 
                      reveal_M0._default.Combine, 
                      Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      useCache#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_5_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
                        reveal_M0._default.Combine, 
                        Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        useCache#0));
                    assume M0.__default.DomSt#canCall(stPick#1_0)
                       && 
                      M0.__default.Combine#canCall(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), useCache#0)
                       && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
                          reveal_M0._default.Combine, 
                          Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          useCache#0));
                    // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1182,13)
                    assert {:id "id2077"} defass#stPick#1_0;
                    assert {:id "id2078"} defass#stPick#1_0;
                    assume true;
                    assert {:id "id2079"} Set#Equal(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), 
                        Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0))));
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1183,26)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_1_1_0_5_0 := st#0;
                    assert {:id "id2080"} defass#stPick#1_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_1_1_0_5_0 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0));
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_1_1_0_5_0 := useCache#0;
                    assert {:id "id2081"} (Set#Subset(sts##1_1_1_0_5_0, sts#0) && !Set#Subset(sts#0, sts##1_1_1_0_5_0))
                       || (Set#Equal(sts##1_1_1_0_5_0, sts#0) && !useCache##1_1_1_0_5_0 && useCache#0);
                    call {:id "id2082"} Call$$M0.__default.Combine__DomSt(st##1_1_1_0_5_0, sts##1_1_1_0_5_0, useCache##1_1_1_0_5_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2083"} defass#stPick#1_0;
                    ##st#1_1_1_0_5_2 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_5_2, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    ##st#1_1_1_0_5_3 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_5_3, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    assert {:id "id2084"} defass#stPick#1_0;
                    ##sts#1_1_1_0_5_1 := Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      Set#UnionOne(Set#Empty(): Set, st#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_5_1, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_0_5_1 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_0_5_1, TBool, $Heap);
                    assert {:id "id2085"} {:subsumption 0} !Set#Equal(##sts#1_1_1_0_5_1, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)), 
                      useCache#0);
                    ##st#1_1_1_0_5_4 := M0.__default.Combine($LS($LZ), 
                      reveal_M0._default.Combine, 
                      Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)), 
                      useCache#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_5_4, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
                        reveal_M0._default.Combine, 
                        Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0)), 
                        useCache#0));
                    assume M0.__default.DomSt#canCall(stPick#1_0)
                       && M0.__default.DomSt#canCall(st#0)
                       && 
                      M0.__default.Combine#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0)), 
                        useCache#0)
                       && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
                          reveal_M0._default.Combine, 
                          Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            Set#UnionOne(Set#Empty(): Set, st#0)), 
                          useCache#0));
                    // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2086"} {:subsumption 0} Set#Equal(Set#Union(M0.__default.DomSt(stPick#1_0), 
                        M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), 
                            reveal_M0._default.Combine, 
                            Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            useCache#0))), 
                      Set#Union(Set#Union(M0.__default.DomSt(stPick#1_0), M0.__default.DomSt(st#0)), 
                        M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), 
                            reveal_M0._default.Combine, 
                            Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                              Set#UnionOne(Set#Empty(): Set, st#0)), 
                            useCache#0))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assume {:id "id2066"} defass#stPick#1_0;
                    ##st#1_1_1_0_4_0 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_4_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    ##st#1_1_1_0_4_1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_4_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    assume {:id "id2067"} defass#stPick#1_0;
                    ##sts#1_1_1_0_4_0 := Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      Set#UnionOne(Set#Empty(): Set, st#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_4_0, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_0_4_0 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_0_4_0, TBool, $Heap);
                    assume {:id "id2068"} {:subsumption 0} !Set#Equal(##sts#1_1_1_0_4_0, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)), 
                      useCache#0);
                    ##st#1_1_1_0_4_2 := M0.__default.Combine($LS($LZ), 
                      reveal_M0._default.Combine, 
                      Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)), 
                      useCache#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_4_2, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
                        reveal_M0._default.Combine, 
                        Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0)), 
                        useCache#0));
                    assume M0.__default.DomSt#canCall(stPick#1_0)
                       && M0.__default.DomSt#canCall(st#0)
                       && 
                      M0.__default.Combine#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0)), 
                        useCache#0)
                       && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), 
                          reveal_M0._default.Combine, 
                          Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            Set#UnionOne(Set#Empty(): Set, st#0)), 
                          useCache#0));
                    // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1186,28)
                    // TrCallStmt: Before ProcessCallStmt
                    assert {:id "id2069"} defass#stPick#1_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_1_1_0_4_0 := Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      Set#UnionOne(Set#Empty(): Set, st#0));
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_1_1_0_4_0 := useCache#0;
                    call {:id "id2070"} Call$$M0.__default.Combine__DomSt__X(sts##1_1_1_0_4_0, useCache##1_1_1_0_4_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2071"} defass#stPick#1_0;
                    ##st#1_1_1_0_4_3 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_4_3, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    ##st#1_1_1_0_4_4 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_4_4, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    assert {:id "id2072"} defass#stPick#1_0;
                    ##sts#1_1_1_0_4_1 := Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      Set#UnionOne(Set#Empty(): Set, st#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_4_1, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)));
                    assume M0.__default.DomSt#canCall(stPick#1_0)
                       && M0.__default.DomSt#canCall(st#0)
                       && M0.__default.DomSt__Union#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0)));
                    // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2073"} {:subsumption 0} Set#Equal(Set#Union(Set#Union(M0.__default.DomSt(stPick#1_0), M0.__default.DomSt(st#0)), 
                        M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), 
                            reveal_M0._default.Combine, 
                            Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                              Set#UnionOne(Set#Empty(): Set, st#0)), 
                            useCache#0))), 
                      Set#Union(Set#Union(M0.__default.DomSt(stPick#1_0), M0.__default.DomSt(st#0)), 
                        M0.__default.DomSt__Union($LS($LS($LZ)), 
                          Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            Set#UnionOne(Set#Empty(): Set, st#0)))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assume {:id "id2061"} defass#stPick#1_0;
                    ##st#1_1_1_0_3_0 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_3_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    ##st#1_1_1_0_3_1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_3_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    assume {:id "id2062"} defass#stPick#1_0;
                    ##sts#1_1_1_0_3_0 := Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      Set#UnionOne(Set#Empty(): Set, st#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_3_0, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)));
                    assume M0.__default.DomSt#canCall(stPick#1_0)
                       && M0.__default.DomSt#canCall(st#0)
                       && M0.__default.DomSt__Union#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0)));
                    // ----- Hint5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##st#1_1_1_0_3_2 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_3_2, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    assert {:id "id2063"} defass#stPick#1_0;
                    ##st#1_1_1_0_3_3 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_3_3, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    assert {:id "id2064"} defass#stPick#1_0;
                    ##sts#1_1_1_0_3_1 := Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      Set#UnionOne(Set#Empty(): Set, st#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_3_1, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)));
                    assume M0.__default.DomSt#canCall(st#0)
                       && M0.__default.DomSt#canCall(stPick#1_0)
                       && M0.__default.DomSt__Union#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0)));
                    // ----- assert line5 == line6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2065"} {:subsumption 0} Set#Equal(Set#Union(Set#Union(M0.__default.DomSt(stPick#1_0), M0.__default.DomSt(st#0)), 
                        M0.__default.DomSt__Union($LS($LS($LZ)), 
                          Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            Set#UnionOne(Set#Empty(): Set, st#0)))), 
                      Set#Union(Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt(stPick#1_0)), 
                        M0.__default.DomSt__Union($LS($LS($LZ)), 
                          Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            Set#UnionOne(Set#Empty(): Set, st#0)))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##st#1_1_1_0_2_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_2_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    assume {:id "id2053"} defass#stPick#1_0;
                    ##st#1_1_1_0_2_1 := stPick#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_2_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(stPick#1_0);
                    assume {:id "id2054"} defass#stPick#1_0;
                    ##sts#1_1_1_0_2_0 := Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      Set#UnionOne(Set#Empty(): Set, st#0));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_2_0, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)));
                    assume M0.__default.DomSt#canCall(st#0)
                       && M0.__default.DomSt#canCall(stPick#1_0)
                       && M0.__default.DomSt__Union#canCall(Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0)));
                    // ----- Hint6 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1189,29)
                    // TrCallStmt: Before ProcessCallStmt
                    assert {:id "id2055"} defass#stPick#1_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_1_1_0_2_0 := stPick#1_0;
                    assert {:id "id2056"} defass#stPick#1_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_1_1_0_2_0 := Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                      Set#UnionOne(Set#Empty(): Set, st#0));
                    call {:id "id2057"} Call$$M0.__default.DomSt__Union__Cons(st##1_1_1_0_2_0, sts##1_1_1_0_2_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##st#1_1_1_0_2_2 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_2_2, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    assert {:id "id2058"} defass#stPick#1_0;
                    assert {:id "id2059"} defass#stPick#1_0;
                    ##sts#1_1_1_0_2_1 := Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                      Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_2_1, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                        Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0))));
                    assume M0.__default.DomSt#canCall(st#0)
                       && M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                          Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            Set#UnionOne(Set#Empty(): Set, st#0))));
                    // ----- assert line6 == line7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2060"} {:subsumption 0} Set#Equal(Set#Union(Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt(stPick#1_0)), 
                        M0.__default.DomSt__Union($LS($LS($LZ)), 
                          Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            Set#UnionOne(Set#Empty(): Set, st#0)))), 
                      Set#Union(M0.__default.DomSt(st#0), 
                        M0.__default.DomSt__Union($LS($LS($LZ)), 
                          Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                            Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                              Set#UnionOne(Set#Empty(): Set, st#0))))));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##st#1_1_1_0_1_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_1_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    assume {:id "id2045"} defass#stPick#1_0;
                    assume {:id "id2046"} defass#stPick#1_0;
                    ##sts#1_1_1_0_1_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                      Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                        Set#UnionOne(Set#Empty(): Set, st#0)));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_1_0, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                        Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0))));
                    assume M0.__default.DomSt#canCall(st#0)
                       && M0.__default.DomSt__Union#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                          Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            Set#UnionOne(Set#Empty(): Set, st#0))));
                    // ----- Hint7 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1191,13)
                    assert {:id "id2047"} defass#stPick#1_0;
                    assert {:id "id2048"} defass#stPick#1_0;
                    if (Set#Equal(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                        Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0))), 
                      Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, st#0))))
                    {
                    }

                    assume true;
                    assert {:id "id2049"} {:subsumption 0} Set#Equal(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                        Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                          Set#UnionOne(Set#Empty(): Set, st#0))), 
                      Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, st#0)));
                    assert {:id "id2050"} {:subsumption 0} Set#Equal(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, st#0)), sts#0);
                    assume {:id "id2051"} Set#Equal(Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                          Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                            Set#UnionOne(Set#Empty(): Set, st#0))), 
                        Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, st#0)))
                       && Set#Equal(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, st#0)), sts#0);
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##st#1_1_1_0_1_1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_1_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    ##sts#1_1_1_0_1_1 := sts#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_1_1, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(sts#0);
                    assume M0.__default.DomSt#canCall(st#0) && M0.__default.DomSt__Union#canCall(sts#0);
                    // ----- assert line7 == line8 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2052"} {:subsumption 0} Set#Equal(Set#Union(M0.__default.DomSt(st#0), 
                        M0.__default.DomSt__Union($LS($LS($LZ)), 
                          Set#Union(Set#UnionOne(Set#Empty(): Set, stPick#1_0), 
                            Set#Difference(Set#Difference(big#0, Set#UnionOne(Set#Empty(): Set, stPick#1_0)), 
                              Set#UnionOne(Set#Empty(): Set, st#0))))), 
                      Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LS($LZ)), sts#0)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##st#1_1_1_0_0_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_0_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    ##sts#1_1_1_0_0_0 := sts#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_0_0, TSet(Tclass.M0.State()), $Heap);
                    assume M0.__default.DomSt__Union#canCall(sts#0);
                    assume M0.__default.DomSt#canCall(st#0) && M0.__default.DomSt__Union#canCall(sts#0);
                    // ----- Hint8 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1193,28)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_1_1_0_0_0 := sts#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_1_1_0_0_0 := useCache#0;
                    call {:id "id2042"} Call$$M0.__default.Combine__DomSt__X(sts##1_1_1_0_0_0, useCache##1_1_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    ##st#1_1_1_0_0_1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_0_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    ##sts#1_1_1_0_0_1 := sts#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0_0_1, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_0_0_0 := useCache#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_0_0_0, TBool, $Heap);
                    assert {:id "id2043"} {:subsumption 0} !Set#Equal(##sts#1_1_1_0_0_1, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(sts#0, useCache#0);
                    ##st#1_1_1_0_0_2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_0_0_2, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
                    assume M0.__default.DomSt#canCall(st#0)
                       && 
                      M0.__default.Combine#canCall(sts#0, useCache#0)
                       && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
                    // ----- assert line8 == line9 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1175,9)
                    assert {:id "id2044"} {:subsumption 0} Set#Equal(Set#Union(M0.__default.DomSt(st#0), M0.__default.DomSt__Union($LS($LS($LZ)), sts#0)), 
                      Set#Union(M0.__default.DomSt(st#0), 
                        M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0))));
                    assume false;
                }

                assume {:id "id2102"} Set#Equal(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, big#0, useCache#0)), 
                  Set#Union(M0.__default.DomSt(st#0), 
                    M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0))));
            }
        }
    }
}



procedure {:verboseName "M0.StateCorrespondence_Ctor (well-formedness)"} {:rlimit 15000000} CheckWellFormed$$M0.__default.StateCorrespondence__Ctor(stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    stsC#0: Set
       where $Is(stsC#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC#0, TSet(Tclass.M0.State()), $Heap));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.StateCorrespondence_Ctor (well-formedness)"} {:rlimit 15000000} CheckWellFormed$$M0.__default.StateCorrespondence__Ctor(stOrig#0: Box, st#0: Box, sts#0: Set, stC#0: Box, stsC#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var s#0: Box;
  var ##st#1: Box;
  var ##st#2: Box;
  var ##st'#0: Box;
  var s#2: Box;
  var ##st#3: Box;
  var ##st'#1: Box;
  var ##st#4: Box;
  var ##stC#0: Box;
  var ##st#5: Box;
  var ##sts#0: Set;
  var ##useCache#0: bool;
  var ##stC#1: Box;
  var ##sts#1: Set;
  var ##useCache#1: bool;
  var ##sts#2: Set;
  var ##sts#3: Set;
  var ##st#6: Box;
  var ##sts#4: Set;
  var ##useCache#2: bool;
  var ##stC#2: Box;
  var ##sts#5: Set;
  var ##useCache#3: bool;


    // AddMethodImpl: StateCorrespondence_Ctor, CheckWellFormed$$M0.__default.StateCorrespondence__Ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.ValidState#canCall(st#0);
    assume {:id "id2103"} M0.__default.ValidState(st#0);
    havoc s#0;
    assume $IsBox(s#0, Tclass.M0.State()) && $IsAllocBox(s#0, Tclass.M0.State(), $Heap);
    if (*)
    {
        assume {:id "id2104"} Set#IsMember(sts#0, s#0);
        ##st#1 := s#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
        assume M0.__default.ValidState#canCall(s#0);
        assume {:id "id2105"} M0.__default.ValidState(s#0);
    }
    else
    {
        assume {:id "id2106"} Set#IsMember(sts#0, s#0) ==> M0.__default.ValidState(s#0);
    }

    assume {:id "id2107"} (forall s#1: Box :: 
      { M0.__default.ValidState(s#1) } { Set#IsMember(sts#0, s#1) } 
      $IsBox(s#1, Tclass.M0.State())
         ==> 
        Set#IsMember(sts#0, s#1)
         ==> M0.__default.ValidState(s#1));
    ##st#2 := stOrig#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    ##st'#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st'#0, Tclass.M0.State(), $Heap);
    assume M0.__default.Extends#canCall(stOrig#0, st#0);
    assume {:id "id2108"} M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st#0);
    havoc s#2;
    assume $IsBox(s#2, Tclass.M0.State()) && $IsAllocBox(s#2, Tclass.M0.State(), $Heap);
    if (*)
    {
        assume {:id "id2109"} Set#IsMember(sts#0, s#2);
        ##st#3 := stOrig#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
        ##st'#1 := s#2;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#1, Tclass.M0.State(), $Heap);
        assume M0.__default.Extends#canCall(stOrig#0, s#2);
        assume {:id "id2110"} M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#2);
    }
    else
    {
        assume {:id "id2111"} Set#IsMember(sts#0, s#2)
           ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#2);
    }

    assume {:id "id2112"} (forall s#3: Box :: 
      { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#3) } 
        { Set#IsMember(sts#0, s#3) } 
      $IsBox(s#3, Tclass.M0.State())
         ==> 
        Set#IsMember(sts#0, s#3)
         ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#3));
    ##st#4 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#0, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(st#0, stC#0);
    assume {:id "id2113"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
    assume {:id "id2114"} Set#Equal(sts#0, Set#Empty(): Set) <==> Set#Equal(stsC#0, Set#Empty(): Set);
    if (*)
    {
        assume {:id "id2115"} !Set#Equal(sts#0, Set#Empty(): Set);
        assume {:id "id2116"} !Set#Equal(stsC#0, Set#Empty(): Set);
        ##sts#0 := sts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
        ##useCache#0 := Lit(false);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0, TBool, $Heap);
        assert {:id "id2117"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
        assume !Set#Equal(##sts#0, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(sts#0, Lit(false));
        ##st#5 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#5, Tclass.M0.State(), $Heap);
        ##sts#1 := stsC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
        ##useCache#1 := Lit(true);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1, TBool, $Heap);
        assert {:id "id2118"} {:subsumption 0} !Set#Equal(##sts#1, Set#Empty(): Set);
        assume !Set#Equal(##sts#1, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(stsC#0, Lit(true));
        ##stC#1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
        // assume allocatedness for argument to function
        assume $IsAllocBox(##stC#1, Tclass.M0.State(), $Heap);
        assume M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)), 
          M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
        assume {:id "id2119"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
          M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)), 
          M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
    }
    else
    {
        assume {:id "id2120"} !Set#Equal(sts#0, Set#Empty(): Set) && !Set#Equal(stsC#0, Set#Empty(): Set)
           ==> M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)), 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
    }

    ##sts#2 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#2, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0));
    assume {:id "id2121"} M0.__default.Compatible(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0));
    ##sts#3 := Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#3, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0));
    assume {:id "id2122"} M0.__default.Compatible(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0));
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##sts#4 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#4, TSet(Tclass.M0.State()), $Heap);
    ##useCache#2 := Lit(false);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#2, TBool, $Heap);
    assert {:id "id2123"} {:subsumption 0} !Set#Equal(##sts#4, Set#Empty(): Set);
    assume !Set#Equal(##sts#4, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), Lit(false));
    ##st#6 := M0.__default.Combine($LS($LZ), 
      reveal_M0._default.Combine, 
      Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
      Lit(false));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#6, Tclass.M0.State(), $Heap);
    ##sts#5 := Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#5, TSet(Tclass.M0.State()), $Heap);
    ##useCache#3 := Lit(true);
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#3, TBool, $Heap);
    assert {:id "id2124"} {:subsumption 0} !Set#Equal(##sts#5, Set#Empty(): Set);
    assume !Set#Equal(##sts#5, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), Lit(true));
    ##stC#2 := M0.__default.Combine($LS($LZ), 
      reveal_M0._default.Combine, 
      Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), 
      Lit(true));
    // assume allocatedness for argument to function
    assume $IsAllocBox(##stC#2, Tclass.M0.State(), $Heap);
    assume M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
        Lit(false)), 
      M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), 
        Lit(true)));
    assume {:id "id2125"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
      M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
        Lit(false)), 
      M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), 
        Lit(true)));
}



procedure {:verboseName "M0.StateCorrespondence_Ctor (call)"} {:rlimit 15000000} Call$$M0.__default.StateCorrespondence__Ctor(stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    stsC#0: Set
       where $Is(stsC#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC#0, TSet(Tclass.M0.State()), $Heap));
  // user-defined preconditions
  requires {:id "id2126"} M0.__default.ValidState#canCall(st#0)
     ==> M0.__default.ValidState(st#0)
       || (forall p#0: Box :: 
        { M0.__default.WellFounded(p#0) } 
          { Set#IsMember(M0.__default.DomSt(st#0), p#0) } 
        $IsBox(p#0, Tclass.M0.Path())
           ==> 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> M0.__default.WellFounded(p#0));
  requires {:id "id2127"} (forall s#1: Box :: 
    { M0.__default.ValidState(s#1) } { Set#IsMember(sts#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> 
      Set#IsMember(sts#0, s#1)
       ==> M0.__default.ValidState(s#1));
  requires {:id "id2128"} M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st#0);
  requires {:id "id2129"} (forall s#3: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#3) } 
      { Set#IsMember(sts#0, s#3) } 
    $IsBox(s#3, Tclass.M0.State())
       ==> 
      Set#IsMember(sts#0, s#3)
       ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#3));
  requires {:id "id2130"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id2131"} Set#Equal(sts#0, Set#Empty(): Set) <==> Set#Equal(stsC#0, Set#Empty(): Set);
  requires {:id "id2132"} !Set#Equal(sts#0, Set#Empty(): Set) && !Set#Equal(stsC#0, Set#Empty(): Set)
     ==> M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)), 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)));
  requires {:id "id2133"} M0.__default.Compatible#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0))
     ==> M0.__default.Compatible(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0))
       || (forall st#1: Box, st'#0: Box :: 
        { M0.__default.DomSt(st'#0), M0.__default.DomSt(st#1) } 
          { M0.__default.DomSt(st'#0), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st#1) } 
          { M0.__default.DomSt(st#1), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st'#0) } 
          { Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st'#0), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st#1) } 
        $IsBox(st#1, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
           ==> 
          Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st#1)
             && Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st'#0)
           ==> (forall p#1: Box :: 
            { M0.__default.GetSt(p#1, st'#0) } 
              { M0.__default.GetSt(p#1, st#1) } 
              { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
              { Set#IsMember(M0.__default.DomSt(st#1), p#1) } 
            $IsBox(p#1, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#1), p#1)
                 && Set#IsMember(M0.__default.DomSt(st'#0), p#1)
               ==> M0.__default.GetSt(p#1, st#1) == M0.__default.GetSt(p#1, st'#0)));
  requires {:id "id2134"} M0.__default.Compatible#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0))
     ==> M0.__default.Compatible(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0))
       || (forall st#2: Box, st'#1: Box :: 
        { M0.__default.DomSt(st'#1), M0.__default.DomSt(st#2) } 
          { M0.__default.DomSt(st'#1), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st#2) } 
          { M0.__default.DomSt(st#2), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st'#1) } 
          { Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st'#1), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st#2) } 
        $IsBox(st#2, Tclass.M0.State()) && $IsBox(st'#1, Tclass.M0.State())
           ==> 
          Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st#2)
             && Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st'#1)
           ==> (forall p#2: Box :: 
            { M0.__default.GetSt(p#2, st'#1) } 
              { M0.__default.GetSt(p#2, st#2) } 
              { Set#IsMember(M0.__default.DomSt(st'#1), p#2) } 
              { Set#IsMember(M0.__default.DomSt(st#2), p#2) } 
            $IsBox(p#2, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#2), p#2)
                 && Set#IsMember(M0.__default.DomSt(st'#1), p#2)
               ==> M0.__default.GetSt(p#2, st#2) == M0.__default.GetSt(p#2, st'#1)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), Lit(false))
     && M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), Lit(true))
     && M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
        Lit(false)), 
      M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), 
        Lit(true)));
  ensures {:id "id2135"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.__default.Combine($LS($LS($LZ)), 
      reveal_M0._default.Combine, 
      Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
      Lit(false)), 
    M0.__default.Combine($LS($LS($LZ)), 
      reveal_M0._default.Combine, 
      Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), 
      Lit(true)));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.StateCorrespondence_Ctor (correctness)"} {:rlimit 15000000} Impl$$M0.__default.StateCorrespondence__Ctor(stOrig#0: Box
       where $IsBox(stOrig#0, Tclass.M0.State())
         && $IsAllocBox(stOrig#0, Tclass.M0.State(), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    stC#0: Box
       where $IsBox(stC#0, Tclass.M0.State()) && $IsAllocBox(stC#0, Tclass.M0.State(), $Heap), 
    stsC#0: Set
       where $Is(stsC#0, TSet(Tclass.M0.State()))
         && $IsAlloc(stsC#0, TSet(Tclass.M0.State()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 6 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id2136"} M0.__default.ValidState#canCall(st#0)
     && 
    M0.__default.ValidState(st#0)
     && (forall p#3: Box :: 
      { M0.__default.WellFounded(p#3) } 
        { Set#IsMember(M0.__default.DomSt(st#0), p#3) } 
      $IsBox(p#3, Tclass.M0.Path())
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#3)
         ==> M0.__default.WellFounded(p#3));
  requires {:id "id2137"} (forall s#1: Box :: 
    { M0.__default.ValidState(s#1) } { Set#IsMember(sts#0, s#1) } 
    $IsBox(s#1, Tclass.M0.State())
       ==> 
      Set#IsMember(sts#0, s#1)
       ==> M0.__default.ValidState(s#1));
  requires {:id "id2138"} M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st#0);
  requires {:id "id2139"} (forall s#3: Box :: 
    { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#3) } 
      { Set#IsMember(sts#0, s#3) } 
    $IsBox(s#3, Tclass.M0.State())
       ==> 
      Set#IsMember(sts#0, s#3)
       ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#3));
  requires {:id "id2140"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0);
  requires {:id "id2141"} Set#Equal(sts#0, Set#Empty(): Set) <==> Set#Equal(stsC#0, Set#Empty(): Set);
  requires {:id "id2142"} !Set#Equal(sts#0, Set#Empty(): Set) && !Set#Equal(stsC#0, Set#Empty(): Set)
     ==> M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)), 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)));
  free requires {:id "id2143"} M0.__default.Compatible#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0))
     && 
    M0.__default.Compatible(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0))
     && (forall st#3: Box, st'#2: Box :: 
      { M0.__default.DomSt(st'#2), M0.__default.DomSt(st#3) } 
        { M0.__default.DomSt(st'#2), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st#3) } 
        { M0.__default.DomSt(st#3), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st'#2) } 
        { Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st'#2), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st#3) } 
      $IsBox(st#3, Tclass.M0.State()) && $IsBox(st'#2, Tclass.M0.State())
         ==> 
        Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st#3)
           && Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), st'#2)
         ==> (forall p#4: Box :: 
          { M0.__default.GetSt(p#4, st'#2) } 
            { M0.__default.GetSt(p#4, st#3) } 
            { Set#IsMember(M0.__default.DomSt(st'#2), p#4) } 
            { Set#IsMember(M0.__default.DomSt(st#3), p#4) } 
          $IsBox(p#4, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st#3), p#4)
               && Set#IsMember(M0.__default.DomSt(st'#2), p#4)
             ==> M0.__default.GetSt(p#4, st#3) == M0.__default.GetSt(p#4, st'#2)));
  free requires {:id "id2144"} M0.__default.Compatible#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0))
     && 
    M0.__default.Compatible(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0))
     && (forall st#4: Box, st'#3: Box :: 
      { M0.__default.DomSt(st'#3), M0.__default.DomSt(st#4) } 
        { M0.__default.DomSt(st'#3), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st#4) } 
        { M0.__default.DomSt(st#4), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st'#3) } 
        { Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st'#3), Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st#4) } 
      $IsBox(st#4, Tclass.M0.State()) && $IsBox(st'#3, Tclass.M0.State())
         ==> 
        Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st#4)
           && Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), st'#3)
         ==> (forall p#5: Box :: 
          { M0.__default.GetSt(p#5, st'#3) } 
            { M0.__default.GetSt(p#5, st#4) } 
            { Set#IsMember(M0.__default.DomSt(st'#3), p#5) } 
            { Set#IsMember(M0.__default.DomSt(st#4), p#5) } 
          $IsBox(p#5, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st#4), p#5)
               && Set#IsMember(M0.__default.DomSt(st'#3), p#5)
             ==> M0.__default.GetSt(p#5, st#4) == M0.__default.GetSt(p#5, st'#3)));
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), Lit(false))
     && M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), Lit(true))
     && M0.__default.StateCorrespondence#canCall(M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
        Lit(false)), 
      M0.__default.Combine($LS($LZ), 
        reveal_M0._default.Combine, 
        Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), 
        Lit(true)));
  ensures {:id "id2145"} M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
    M0.__default.Combine($LS($LS($LZ)), 
      reveal_M0._default.Combine, 
      Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
      Lit(false)), 
    M0.__default.Combine($LS($LS($LZ)), 
      reveal_M0._default.Combine, 
      Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), 
      Lit(true)));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.StateCorrespondence_Ctor (correctness)"} {:rlimit 15000000} Impl$$M0.__default.StateCorrespondence__Ctor(stOrig#0: Box, st#0: Box, sts#0: Set, stC#0: Box, stsC#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var defass#a#1_0: bool;
  var a#1_0: Box
     where defass#a#1_0
       ==> $IsBox(a#1_0, Tclass.M0.State()) && $IsAllocBox(a#1_0, Tclass.M0.State(), $Heap);
  var defass#b#1_0: bool;
  var b#1_0: Box
     where defass#b#1_0
       ==> $IsBox(b#1_0, Tclass.M0.State()) && $IsAllocBox(b#1_0, Tclass.M0.State(), $Heap);
  var $rhs#1_0: Box;
  var ##sts#1_0: Set;
  var ##useCache#1_0: bool;
  var $rhs#1_1: Box;
  var ##sts#1_1: Set;
  var ##useCache#1_1: bool;
  var ##sts#1_2: Set;
  var ##useCache#1_2: bool;
  var ##sts#1_3: Set;
  var ##useCache#1_3: bool;
  var ##st#1_0_0_0: Box;
  var ##st#1_0_0_1: Box;
  var ##sts#1_0_0_0: Set;
  var ##useCache#1_0_0_0: bool;
  var st##1_0_0_0: Box;
  var sts##1_0_0_0: Set;
  var useCache##1_0_0_0: bool;
  var ##st#1_0_0_2: Box;
  var ##st#1_0_1_0: Box;
  var ##st#1_0_1_1: Box;
  var ##sts#1_0_1_0: Set;
  var ##useCache#1_0_1_0: bool;
  var ##st#1_0_1_2: Box;
  var ##st#1_0_1_3: Box;
  var ##sts#1_0_1_1: Set;
  var ##useCache#1_0_1_1: bool;
  var ##st#1_0_2_0: Box;
  var ##st#1_0_2_1: Box;
  var ##sts#1_0_2_0: Set;
  var ##useCache#1_0_2_0: bool;
  var ##st#1_0_2_2: Box;
  var ##sts#1_0_2_1: Set;
  var ##useCache#1_0_2_1: bool;
  var ##st#1_0_2_3: Box;
  var ##sts#1_0_2_2: Set;
  var ##useCache#1_0_2_2: bool;
  var ##st#1_0_2_4: Box;
  var ##st#1_0_2_5: Box;
  var ##sts#1_0_2_3: Set;
  var ##useCache#1_0_2_3: bool;
  var ##st#1_0_3_0: Box;
  var st##1_0_3_0: Box;
  var sts##1_0_3_0: Set;
  var useCache##1_0_3_0: bool;
  var ##st#1_0_3_1: Box;
  var ##st#1_0_3_2: Box;
  var ##sts#1_0_3_0: Set;
  var ##useCache#1_0_3_0: bool;
  var ##st#1_0_0: Box;
  var ##st#1_0: Box;
  var ##st#1_1: Box;
  var p#1_1_0: Box;
  var ##st#1_1_0: Box;
  var ##p#1_1_0: Box;
  var ##st#1_1_1: Box;
  var ##p#1_1_1: Box;
  var ##st#1_1_2: Box;
  var defass#stRepr#1_1_0: bool;
  var stRepr#1_1_0: Box
     where defass#stRepr#1_1_0
       ==> $IsBox(stRepr#1_1_0, Tclass.M0.State())
         && $IsAllocBox(stRepr#1_1_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_0: Box;
  var p##1_1_0: Box;
  var sts##1_1_0: Set;
  var useCache##1_1_0: bool;
  var p##1_1_0_0: Box;
  var st##1_1_0_0: Box;
  var sts##1_1_0_0: Set;
  var useCache##1_1_0_0: bool;
  var p##1_1_1_0: Box;
  var st##1_1_1_0: Box;
  var sts##1_1_1_0: Set;
  var useCache##1_1_1_0: bool;
  var p##1_1_1_1: Box;
  var st##1_1_1_1: Box;
  var sts##1_1_1_1: Set;
  var useCache##1_1_1_1: bool;
  var ##p#1_1_1_0: Box;
  var ##st#1_1_1_0: Box;
  var ##p#1_1_1_1: Box;
  var ##st#1_1_1_1: Box;
  var ##p#1_1_1_2: Box;
  var ##st#1_1_1_2: Box;
  var ##p#1_1_1_3: Box;
  var ##st#1_1_1_3: Box;
  var ##sts#1_1_1_0: Set;
  var ##useCache#1_1_1_0: bool;
  var ##p#1_1_1_4: Box;
  var ##st#1_1_1_4: Box;
  var ##sts#1_1_1_1: Set;
  var ##useCache#1_1_1_1: bool;
  var ##p#1_1_1_5: Box;
  var ##st#1_1_1_5: Box;
  var ##sts#1_1_1_2: Set;
  var ##useCache#1_1_1_2: bool;
  var defass#stReprC#1_1_1_0: bool;
  var stReprC#1_1_1_0: Box
     where defass#stReprC#1_1_1_0
       ==> $IsBox(stReprC#1_1_1_0, Tclass.M0.State())
         && $IsAllocBox(stReprC#1_1_1_0, Tclass.M0.State(), $Heap);
  var $rhs##1_1_1_0: Box;
  var p##1_1_1_2: Box;
  var sts##1_1_1_2: Set;
  var useCache##1_1_1_2: bool;
  var p##1_1_1_3: Box;
  var st##1_1_1_2: Box;
  var sts##1_1_1_3: Set;
  var useCache##1_1_1_3: bool;
  var p##1_1_1_4: Box;
  var st##1_1_1_3: Box;
  var sts##1_1_1_4: Set;
  var useCache##1_1_1_4: bool;
  var p#1_2_0: Box;
  var ##st#1_2_0: Box;
  var ##st#1_2_1: Box;
  var ##p#1_2_0: Box;
  var ##st#1_2_2: Box;
  var ##p#1_2_1: Box;
  var ##st#1_2_3: Box;
  var ##st#1_2_0_0: Box;
  var p##1_2_0_0: Box;
  var st##1_2_0_0: Box;
  var sts##1_2_0_0: Set;
  var useCache##1_2_0_0: bool;
  var defass#stReprC#1_2_0: bool;
  var stReprC#1_2_0: Box
     where defass#stReprC#1_2_0
       ==> $IsBox(stReprC#1_2_0, Tclass.M0.State())
         && $IsAllocBox(stReprC#1_2_0, Tclass.M0.State(), $Heap);
  var $rhs##1_2_0: Box;
  var p##1_2_0: Box;
  var sts##1_2_0: Set;
  var useCache##1_2_0: bool;
  var ##p#1_2_1_0_0_0: Box;
  var ##st#1_2_1_0_0_0: Box;
  var sts##1_2_1_0_0_0: Set;
  var parent##1_2_1_0_0_0: Box;
  var useCache##1_2_1_0_0_0: bool;
  var p##1_2_1_0_0_0: Box;
  var st0##1_2_1_0_0_0: Box;
  var st1##1_2_1_0_0_0: Box;
  var ##p#1_2_1_0_0_1: Box;
  var ##st#1_2_1_0_0_1: Box;
  var ##p#1_2_1_0_1_0: Box;
  var ##st#1_2_1_0_1_0: Box;
  var p##1_2_1_0_1_0: Box;
  var st0##1_2_1_0_1_0: Box;
  var st1##1_2_1_0_1_0: Box;
  var ##p#1_2_1_0_1_1: Box;
  var ##st#1_2_1_0_1_1: Box;
  var ##p#1_2_1_0_2_0: Box;
  var ##st#1_2_1_0_2_0: Box;
  var ##p#1_2_1_0_2_1: Box;
  var ##st#1_2_1_0_2_1: Box;
  var ##p#1_2_1_0_3_0: Box;
  var ##st#1_2_1_0_3_0: Box;
  var ##p#1_2_1_0_3_1: Box;
  var ##st#1_2_1_0_3_1: Box;
  var ##p#1_2_1_0_0: Box;
  var ##st#1_2_1_0_0: Box;
  var ##p#1_2_2_0_0_0: Box;
  var ##st#1_2_2_0_0_0: Box;
  var sts##1_2_2_0_0_0: Set;
  var parent##1_2_2_0_0_0: Box;
  var useCache##1_2_2_0_0_0: bool;
  var p##1_2_2_0_0_0: Box;
  var st0##1_2_2_0_0_0: Box;
  var st1##1_2_2_0_0_0: Box;
  var ##p#1_2_2_0_0_1: Box;
  var ##st#1_2_2_0_0_1: Box;
  var ##p#1_2_2_0_1_0: Box;
  var ##st#1_2_2_0_1_0: Box;
  var ##sts#1_2_2_0_1_0: Set;
  var ##useCache#1_2_2_0_1_0: bool;
  var sts##1_2_2_0_1_0: Set;
  var parent##1_2_2_0_1_0: Box;
  var useCache##1_2_2_0_1_0: bool;
  var p##1_2_2_0_1_0: Box;
  var st0##1_2_2_0_1_0: Box;
  var st1##1_2_2_0_1_0: Box;
  var ##sts#1_2_2_0_1_1: Set;
  var ##useCache#1_2_2_0_1_1: bool;
  var ##p#1_2_2_0_1_1: Box;
  var ##st#1_2_2_0_1_1: Box;
  var ##p#1_2_2_0_2_0: Box;
  var ##st#1_2_2_0_2_0: Box;
  var ##sts#1_2_2_0_2_0: Set;
  var ##useCache#1_2_2_0_2_0: bool;
  var st##1_2_2_0_2_0: Box;
  var sts##1_2_2_0_2_0: Set;
  var useCache##1_2_2_0_2_0: bool;
  var ##st#1_2_2_0_2_1: Box;
  var ##sts#1_2_2_0_2_1: Set;
  var ##useCache#1_2_2_0_2_1: bool;
  var ##st#1_2_2_0_2_2: Box;
  var ##sts#1_2_2_0_2_2: Set;
  var ##useCache#1_2_2_0_2_2: bool;
  var ##p#1_2_2_0_2_1: Box;
  var ##st#1_2_2_0_2_3: Box;
  var ##sts#1_2_2_0_2_3: Set;
  var ##useCache#1_2_2_0_2_3: bool;
  var ##p#1_2_2_0_3_0: Box;
  var ##st#1_2_2_0_3_0: Box;
  var p##1_2_2_0_3_0: Box;
  var st##1_2_2_0_3_0: Box;
  var sts##1_2_2_0_3_0: Set;
  var useCache##1_2_2_0_3_0: bool;
  var p##1_2_2_0_3_1: Box;
  var st##1_2_2_0_3_1: Box;
  var sts##1_2_2_0_3_1: Set;
  var useCache##1_2_2_0_3_1: bool;
  var ##p#1_2_2_0_3_1: Box;
  var ##st#1_2_2_0_3_1: Box;
  var ##sts#1_2_2_0_3_0: Set;
  var ##useCache#1_2_2_0_3_0: bool;
  var ##p#1_2_2_0_4_0: Box;
  var ##st#1_2_2_0_4_0: Box;
  var ##p#1_2_2_0_4_1: Box;
  var ##st#1_2_2_0_4_1: Box;
  var ##p#1_2_2_0_0: Box;
  var ##st#1_2_2_0_0: Box;

    // AddMethodImpl: StateCorrespondence_Ctor, Impl$$M0.__default.StateCorrespondence__Ctor
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts0#0: Set, $ih#stsC0#0: Set :: 
      { Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), $ih#stsC0#0), Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), $ih#sts0#0) } 
      $Is($ih#sts0#0, TSet(Tclass.M0.State()))
           && $Is($ih#stsC0#0, TSet(Tclass.M0.State()))
           && 
          M0.__default.ValidState(st#0)
           && (forall s#4: Box :: 
            { M0.__default.ValidState(s#4) } { Set#IsMember($ih#sts0#0, s#4) } 
            $IsBox(s#4, Tclass.M0.State())
               ==> 
              Set#IsMember($ih#sts0#0, s#4)
               ==> M0.__default.ValidState(s#4))
           && 
          M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, st#0)
           && (forall s#5: Box :: 
            { M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#5) } 
              { Set#IsMember($ih#sts0#0, s#5) } 
            $IsBox(s#5, Tclass.M0.State())
               ==> 
              Set#IsMember($ih#sts0#0, s#5)
               ==> M0.__default.Extends(reveal_M0._default.Extends, stOrig#0, s#5))
           && M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, st#0, stC#0)
           && (Set#Equal($ih#sts0#0, Set#Empty(): Set)
             <==> Set#Equal($ih#stsC0#0, Set#Empty(): Set))
           && (!Set#Equal($ih#sts0#0, Set#Empty(): Set)
               && !Set#Equal($ih#stsC0#0, Set#Empty(): Set)
             ==> M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
              M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, Lit(false)), 
              M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#stsC0#0, Lit(true))))
           && 
          M0.__default.Compatible(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), $ih#sts0#0))
           && M0.__default.Compatible(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), $ih#stsC0#0))
           && ((Set#Subset($ih#sts0#0, sts#0) && !Set#Subset(sts#0, $ih#sts0#0))
             || (Set#Equal($ih#sts0#0, sts#0)
               && 
              Set#Subset($ih#stsC0#0, stsC#0)
               && !Set#Subset(stsC#0, $ih#stsC0#0)))
         ==> M0.__default.StateCorrespondence(reveal_M0._default.StateCorrespondence, 
          M0.__default.Combine($LS($LZ), 
            reveal_M0._default.Combine, 
            Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), $ih#sts0#0), 
            Lit(false)), 
          M0.__default.Combine($LS($LZ), 
            reveal_M0._default.Combine, 
            Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), $ih#stsC0#0), 
            Lit(true))));
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1208,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1208,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id2146"} Call$$M0.__default.reveal__Combine();
    // TrCallStmt: After ProcessCallStmt
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1209,5)
    assume true;
    if (Set#Equal(sts#0, Set#Empty(): Set))
    {
    }
    else
    {
        // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1211,7)
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1211,14)
        // TrCallStmt: Before ProcessCallStmt
        call {:id "id2147"} Call$$M0.__default.reveal__StateCorrespondence();
        // TrCallStmt: After ProcessCallStmt
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1212,16)
        assume true;
        assume true;
        ##sts#1_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#1_0, TSet(Tclass.M0.State()), $Heap);
        ##useCache#1_0 := Lit(false);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1_0, TBool, $Heap);
        assert {:id "id2148"} {:subsumption 0} !Set#Equal(##sts#1_0, Set#Empty(): Set);
        assume !Set#Equal(##sts#1_0, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), Lit(false));
        assume M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), Lit(false));
        $rhs#1_0 := M0.__default.Combine($LS($LZ), 
          reveal_M0._default.Combine, 
          Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0), 
          Lit(false));
        ##sts#1_1 := Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#1_1, TSet(Tclass.M0.State()), $Heap);
        ##useCache#1_1 := Lit(true);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1_1, TBool, $Heap);
        assert {:id "id2150"} {:subsumption 0} !Set#Equal(##sts#1_1, Set#Empty(): Set);
        assume !Set#Equal(##sts#1_1, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), Lit(true));
        assume M0.__default.Combine#canCall(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), Lit(true));
        $rhs#1_1 := M0.__default.Combine($LS($LZ), 
          reveal_M0._default.Combine, 
          Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), 
          Lit(true));
        a#1_0 := $rhs#1_0;
        defass#a#1_0 := true;
        b#1_0 := $rhs#1_1;
        defass#b#1_0 := true;
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1213,7)
        ##sts#1_2 := Set#UnionOne(Set#Empty(): Set, st#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#1_2, TSet(Tclass.M0.State()), $Heap);
        ##useCache#1_2 := Lit(false);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1_2, TBool, $Heap);
        assert {:id "id2154"} {:subsumption 0} !Set#Equal(##sts#1_2, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(Set#UnionOne(Set#Empty(): Set, st#0), Lit(false));
        assume M0.__default.Combine#canCall(Set#UnionOne(Set#Empty(): Set, st#0), Lit(false));
        assert {:id "id2155"} {:subsumption 0} M0.__default.Combine($LS($LS($LZ)), 
            reveal_M0._default.Combine, 
            Set#UnionOne(Set#Empty(): Set, st#0), 
            Lit(false))
           == st#0;
        assume {:id "id2156"} M0.__default.Combine($LS($LZ), 
            reveal_M0._default.Combine, 
            Set#UnionOne(Set#Empty(): Set, st#0), 
            Lit(false))
           == st#0;
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1214,7)
        ##sts#1_3 := Set#UnionOne(Set#Empty(): Set, stC#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#1_3, TSet(Tclass.M0.State()), $Heap);
        ##useCache#1_3 := Lit(true);
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1_3, TBool, $Heap);
        assert {:id "id2157"} {:subsumption 0} !Set#Equal(##sts#1_3, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(Set#UnionOne(Set#Empty(): Set, stC#0), Lit(true));
        assume M0.__default.Combine#canCall(Set#UnionOne(Set#Empty(): Set, stC#0), Lit(true));
        assert {:id "id2158"} {:subsumption 0} M0.__default.Combine($LS($LS($LZ)), 
            reveal_M0._default.Combine, 
            Set#UnionOne(Set#Empty(): Set, stC#0), 
            Lit(true))
           == stC#0;
        assume {:id "id2159"} M0.__default.Combine($LS($LZ), 
            reveal_M0._default.Combine, 
            Set#UnionOne(Set#Empty(): Set, stC#0), 
            Lit(true))
           == stC#0;
        // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
        // Assume Fuel Constant
        if (*)
        {
            // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            assert {:id "id2178"} defass#a#1_0;
            ##st#1_0_0 := a#1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_0, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(a#1_0);
            assume M0.__default.DomSt#canCall(a#1_0);
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            assume {:id "id2174"} defass#a#1_0;
            ##st#1_0_3_0 := a#1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_3_0, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(a#1_0);
            assume M0.__default.DomSt#canCall(a#1_0);
            // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            push;
            push;
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1218,24)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            st##1_0_3_0 := st#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            sts##1_0_3_0 := sts#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            useCache##1_0_3_0 := Lit(false);
            call {:id "id2175"} Call$$M0.__default.Combine__DomSt(st##1_0_3_0, sts##1_0_3_0, useCache##1_0_3_0);
            // TrCallStmt: After ProcessCallStmt
            pop;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            ##st#1_0_3_1 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_3_1, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(st#0);
            ##sts#1_0_3_0 := sts#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1_0_3_0, TSet(Tclass.M0.State()), $Heap);
            ##useCache#1_0_3_0 := Lit(false);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1_0_3_0, TBool, $Heap);
            assert {:id "id2176"} {:subsumption 0} !Set#Equal(##sts#1_0_3_0, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(sts#0, Lit(false));
            ##st#1_0_3_2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_3_2, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
            assume M0.__default.DomSt#canCall(st#0)
               && 
              M0.__default.Combine#canCall(sts#0, Lit(false))
               && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
            // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            assert {:id "id2177"} {:subsumption 0} Set#Equal(M0.__default.DomSt(a#1_0), 
              Set#Union(M0.__default.DomSt(st#0), 
                M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            ##st#1_0_2_0 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_2_0, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(st#0);
            ##sts#1_0_2_0 := sts#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1_0_2_0, TSet(Tclass.M0.State()), $Heap);
            ##useCache#1_0_2_0 := Lit(false);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1_0_2_0, TBool, $Heap);
            assume {:id "id2167"} {:subsumption 0} !Set#Equal(##sts#1_0_2_0, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(sts#0, Lit(false));
            ##st#1_0_2_1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_2_1, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
            assume M0.__default.DomSt#canCall(st#0)
               && 
              M0.__default.Combine#canCall(sts#0, Lit(false))
               && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
            // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            push;
            push;
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1220,12)
            ##sts#1_0_2_1 := sts#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1_0_2_1, TSet(Tclass.M0.State()), $Heap);
            ##useCache#1_0_2_1 := Lit(false);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1_0_2_1, TBool, $Heap);
            assert {:id "id2168"} {:subsumption 0} !Set#Equal(##sts#1_0_2_1, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(sts#0, Lit(false));
            ##st#1_0_2_2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_2_2, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
            ##sts#1_0_2_2 := stsC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1_0_2_2, TSet(Tclass.M0.State()), $Heap);
            ##useCache#1_0_2_2 := Lit(true);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1_0_2_2, TBool, $Heap);
            assert {:id "id2169"} {:subsumption 0} !Set#Equal(##sts#1_0_2_2, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(stsC#0, Lit(true));
            ##st#1_0_2_3 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_2_3, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            assume M0.__default.Combine#canCall(sts#0, Lit(false))
               && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)))
               && 
              M0.__default.Combine#canCall(stsC#0, Lit(true))
               && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            assert {:id "id2170"} {:subsumption 0} Set#Subset(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false))), 
              M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true))));
            assume {:id "id2171"} Set#Subset(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false))), 
              M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true))));
            pop;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            ##st#1_0_2_4 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_2_4, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(st#0);
            ##sts#1_0_2_3 := stsC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1_0_2_3, TSet(Tclass.M0.State()), $Heap);
            ##useCache#1_0_2_3 := Lit(true);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1_0_2_3, TBool, $Heap);
            assert {:id "id2172"} {:subsumption 0} !Set#Equal(##sts#1_0_2_3, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(stsC#0, Lit(true));
            ##st#1_0_2_5 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_2_5, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            assume M0.__default.DomSt#canCall(st#0)
               && 
              M0.__default.Combine#canCall(stsC#0, Lit(true))
               && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            // ----- assert line1 <= line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            assert {:id "id2173"} {:subsumption 0} Set#Subset(Set#Union(M0.__default.DomSt(st#0), 
                M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)))), 
              Set#Union(M0.__default.DomSt(st#0), 
                M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            ##st#1_0_1_0 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_1_0, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(st#0);
            ##sts#1_0_1_0 := stsC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1_0_1_0, TSet(Tclass.M0.State()), $Heap);
            ##useCache#1_0_1_0 := Lit(true);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1_0_1_0, TBool, $Heap);
            assume {:id "id2164"} {:subsumption 0} !Set#Equal(##sts#1_0_1_0, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(stsC#0, Lit(true));
            ##st#1_0_1_1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_1_1, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            assume M0.__default.DomSt#canCall(st#0)
               && 
              M0.__default.Combine#canCall(stsC#0, Lit(true))
               && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            push;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            ##st#1_0_1_2 := stC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_1_2, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(stC#0);
            ##sts#1_0_1_1 := stsC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1_0_1_1, TSet(Tclass.M0.State()), $Heap);
            ##useCache#1_0_1_1 := Lit(true);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1_0_1_1, TBool, $Heap);
            assert {:id "id2165"} {:subsumption 0} !Set#Equal(##sts#1_0_1_1, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(stsC#0, Lit(true));
            ##st#1_0_1_3 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_1_3, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            assume M0.__default.DomSt#canCall(stC#0)
               && 
              M0.__default.Combine#canCall(stsC#0, Lit(true))
               && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            // ----- assert line2 <= line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            assert {:id "id2166"} {:subsumption 0} Set#Subset(Set#Union(M0.__default.DomSt(st#0), 
                M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)))), 
              Set#Union(M0.__default.DomSt(stC#0), 
                M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)))));
            assume false;
        }
        else if (*)
        {
            // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            ##st#1_0_0_0 := stC#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_0_0, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(stC#0);
            ##sts#1_0_0_0 := stsC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##sts#1_0_0_0, TSet(Tclass.M0.State()), $Heap);
            ##useCache#1_0_0_0 := Lit(true);
            // assume allocatedness for argument to function
            assume $IsAlloc(##useCache#1_0_0_0, TBool, $Heap);
            assume {:id "id2160"} {:subsumption 0} !Set#Equal(##sts#1_0_0_0, Set#Empty(): Set);
            assume M0.__default.Combine#canCall(stsC#0, Lit(true));
            ##st#1_0_0_1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_0_1, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            assume M0.__default.DomSt#canCall(stC#0)
               && 
              M0.__default.Combine#canCall(stsC#0, Lit(true))
               && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
            // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            push;
            push;
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1224,24)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            st##1_0_0_0 := stC#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            sts##1_0_0_0 := stsC#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            useCache##1_0_0_0 := Lit(true);
            call {:id "id2161"} Call$$M0.__default.Combine__DomSt(st##1_0_0_0, sts##1_0_0_0, useCache##1_0_0_0);
            // TrCallStmt: After ProcessCallStmt
            pop;
            pop;
            // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            assert {:id "id2162"} defass#b#1_0;
            ##st#1_0_0_2 := b#1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_0_0_2, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(b#1_0);
            assume M0.__default.DomSt#canCall(b#1_0);
            // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1216,7)
            assert {:id "id2163"} {:subsumption 0} Set#Equal(Set#Union(M0.__default.DomSt(stC#0), 
                M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)))), 
              M0.__default.DomSt(b#1_0));
            assume false;
        }

        assume {:id "id2179"} Set#Subset(M0.__default.DomSt(a#1_0), M0.__default.DomSt(b#1_0));
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1227,7)
        assert {:id "id2180"} defass#a#1_0;
        ##st#1_0 := a#1_0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1_0, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(a#1_0);
        assert {:id "id2181"} defass#b#1_0;
        ##st#1_1 := b#1_0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1_1, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(b#1_0);
        assume M0.__default.DomSt#canCall(a#1_0) && M0.__default.DomSt#canCall(b#1_0);
        assert {:id "id2182"} Set#Subset(M0.__default.DomSt(a#1_0), M0.__default.DomSt(b#1_0));
        // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1229,7)
        if (*)
        {
            // Assume Fuel Constant
            havoc p#1_1_0;
            assume $IsBox(p#1_1_0, Tclass.M0.Path());
            assert {:id "id2183"} defass#a#1_0;
            ##st#1_1_0 := a#1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_1_0, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(a#1_0);
            assume M0.__default.DomSt#canCall(a#1_0);
            assume {:id "id2184"} Set#IsMember(M0.__default.DomSt(a#1_0), p#1_1_0);
            if (*)
            {
                ##p#1_1_0 := p#1_1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##p#1_1_0, Tclass.M0.Path(), $Heap);
                assert {:id "id2185"} defass#a#1_0;
                ##st#1_1_1 := a#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_1, Tclass.M0.State(), $Heap);
                assert {:id "id2186"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_1_1), ##p#1_1_0);
                assume M0.__default.GetSt#canCall(p#1_1_0, a#1_0);
                ##p#1_1_1 := p#1_1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##p#1_1_1, Tclass.M0.Path(), $Heap);
                assert {:id "id2187"} defass#b#1_0;
                ##st#1_1_2 := b#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_2, Tclass.M0.State(), $Heap);
                assert {:id "id2188"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_1_2), ##p#1_1_1);
                assume M0.__default.GetSt#canCall(p#1_1_0, b#1_0);
                assume M0.__default.GetSt#canCall(p#1_1_0, a#1_0)
                   && M0.__default.GetSt#canCall(p#1_1_0, b#1_0);
                assume {:id "id2189"} M0.__default.GetSt(p#1_1_0, a#1_0) == M0.__default.GetSt(p#1_1_0, b#1_0);
                assume false;
            }

            push;
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1232,45)
            assume true;
            // TrCallStmt: Adding lhs with type State
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            p##1_1_0 := p#1_1_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            sts##1_1_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            useCache##1_1_0 := Lit(false);
            call {:id "id2190"} $rhs##1_1_0 := Call$$M0.__default.Combine__Representative(p##1_1_0, sts##1_1_0, useCache##1_1_0);
            // TrCallStmt: After ProcessCallStmt
            stRepr#1_1_0 := $rhs##1_1_0;
            defass#stRepr#1_1_0 := true;
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1233,9)
            assert {:id "id2192"} defass#stRepr#1_1_0;
            assume true;
            if (stRepr#1_1_0 == st#0)
            {
                push;
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1234,25)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                p##1_1_0_0 := p#1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_0_0 := stC#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_1_0_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##1_1_0_0 := Lit(true);
                call {:id "id2193"} Call$$M0.__default.CompatiblePick(p##1_1_0_0, st##1_1_0_0, sts##1_1_0_0, useCache##1_1_0_0);
                // TrCallStmt: After ProcessCallStmt
                pop;
            }
            else
            {
                push;
                // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1236,11)
                assert {:id "id2194"} defass#stRepr#1_1_0;
                assume true;
                assert {:id "id2195"} Set#IsMember(sts#0, stRepr#1_1_0);
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1237,31)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                p##1_1_1_0 := p#1_1_0;
                assert {:id "id2196"} defass#stRepr#1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_1_0 := stRepr#1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_1_1_0 := sts#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##1_1_1_0 := Lit(false);
                call {:id "id2197"} Call$$M0.__default.CombineExpandsDomain(p##1_1_1_0, st##1_1_1_0, sts##1_1_1_0, useCache##1_1_1_0);
                // TrCallStmt: After ProcessCallStmt
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1238,25)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                p##1_1_1_1 := p#1_1_0;
                assert {:id "id2198"} defass#stRepr#1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_1_1 := stRepr#1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_1_1_1 := sts#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##1_1_1_1 := Lit(false);
                call {:id "id2199"} Call$$M0.__default.CompatiblePick(p##1_1_1_1, st##1_1_1_1, sts##1_1_1_1, useCache##1_1_1_1);
                // TrCallStmt: After ProcessCallStmt
                // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1239,11)
                ##p#1_1_1_0 := p#1_1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##p#1_1_1_0, Tclass.M0.Path(), $Heap);
                assert {:id "id2200"} defass#a#1_0;
                ##st#1_1_1_0 := a#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_1_0, Tclass.M0.State(), $Heap);
                assert {:id "id2201"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_1_1_0), ##p#1_1_1_0);
                assume M0.__default.GetSt#canCall(p#1_1_0, a#1_0);
                ##p#1_1_1_1 := p#1_1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##p#1_1_1_1, Tclass.M0.Path(), $Heap);
                assert {:id "id2202"} defass#stRepr#1_1_0;
                ##st#1_1_1_1 := stRepr#1_1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_1_1_1, Tclass.M0.State(), $Heap);
                assert {:id "id2203"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_1_1_1), ##p#1_1_1_1);
                assume M0.__default.GetSt#canCall(p#1_1_0, stRepr#1_1_0);
                if (M0.__default.GetSt(p#1_1_0, a#1_0) == M0.__default.GetSt(p#1_1_0, stRepr#1_1_0))
                {
                    ##p#1_1_1_2 := p#1_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_1_1_2, Tclass.M0.Path(), $Heap);
                    assert {:id "id2204"} defass#stRepr#1_1_0;
                    ##st#1_1_1_2 := stRepr#1_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_2, Tclass.M0.State(), $Heap);
                    assert {:id "id2205"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_1_1_2), ##p#1_1_1_2);
                    assume M0.__default.GetSt#canCall(p#1_1_0, stRepr#1_1_0);
                    ##p#1_1_1_3 := p#1_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_1_1_3, Tclass.M0.Path(), $Heap);
                    ##sts#1_1_1_0 := sts#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_0, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_0 := Lit(false);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_0, TBool, $Heap);
                    assert {:id "id2206"} {:subsumption 0} !Set#Equal(##sts#1_1_1_0, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(sts#0, Lit(false));
                    ##st#1_1_1_3 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_3, Tclass.M0.State(), $Heap);
                    assert {:id "id2207"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_1_1_3), ##p#1_1_1_3);
                    assume M0.__default.GetSt#canCall(p#1_1_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
                }

                if (M0.__default.GetSt(p#1_1_0, a#1_0) == M0.__default.GetSt(p#1_1_0, stRepr#1_1_0)
                   && M0.__default.GetSt(p#1_1_0, stRepr#1_1_0)
                     == M0.__default.GetSt(p#1_1_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false))))
                {
                    ##p#1_1_1_4 := p#1_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_1_1_4, Tclass.M0.Path(), $Heap);
                    ##sts#1_1_1_1 := sts#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_1, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_1 := Lit(false);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_1, TBool, $Heap);
                    assert {:id "id2208"} {:subsumption 0} !Set#Equal(##sts#1_1_1_1, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(sts#0, Lit(false));
                    ##st#1_1_1_4 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_4, Tclass.M0.State(), $Heap);
                    assert {:id "id2209"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_1_1_4), ##p#1_1_1_4);
                    assume M0.__default.GetSt#canCall(p#1_1_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
                    ##p#1_1_1_5 := p#1_1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_1_1_5, Tclass.M0.Path(), $Heap);
                    ##sts#1_1_1_2 := stsC#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_1_1_2, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_1_1_2 := Lit(true);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_1_1_2, TBool, $Heap);
                    assert {:id "id2210"} {:subsumption 0} !Set#Equal(##sts#1_1_1_2, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(stsC#0, Lit(true));
                    ##st#1_1_1_5 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_1_1_5, Tclass.M0.State(), $Heap);
                    assert {:id "id2211"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_1_1_5), ##p#1_1_1_5);
                    assume M0.__default.GetSt#canCall(p#1_1_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
                }

                assume M0.__default.GetSt#canCall(p#1_1_0, a#1_0)
                   && M0.__default.GetSt#canCall(p#1_1_0, stRepr#1_1_0)
                   && (M0.__default.GetSt(p#1_1_0, a#1_0) == M0.__default.GetSt(p#1_1_0, stRepr#1_1_0)
                     ==> M0.__default.GetSt#canCall(p#1_1_0, stRepr#1_1_0)
                       && 
                      M0.__default.Combine#canCall(sts#0, Lit(false))
                       && M0.__default.GetSt#canCall(p#1_1_0, 
                        M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)))
                       && (M0.__default.GetSt(p#1_1_0, stRepr#1_1_0)
                           == M0.__default.GetSt(p#1_1_0, 
                            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)))
                         ==> M0.__default.Combine#canCall(sts#0, Lit(false))
                           && M0.__default.GetSt#canCall(p#1_1_0, 
                            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)))
                           && 
                          M0.__default.Combine#canCall(stsC#0, Lit(true))
                           && M0.__default.GetSt#canCall(p#1_1_0, 
                            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)))));
                assert {:id "id2212"} {:subsumption 0} M0.__default.GetSt(p#1_1_0, a#1_0) == M0.__default.GetSt(p#1_1_0, stRepr#1_1_0);
                assert {:id "id2213"} {:subsumption 0} M0.__default.GetSt(p#1_1_0, stRepr#1_1_0)
                   == M0.__default.GetSt(p#1_1_0, 
                    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)));
                assert {:id "id2214"} {:subsumption 0} M0.__default.GetSt(p#1_1_0, 
                    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)))
                   == M0.__default.GetSt(p#1_1_0, 
                    M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)));
                assume {:id "id2215"} M0.__default.GetSt(p#1_1_0, a#1_0) == M0.__default.GetSt(p#1_1_0, stRepr#1_1_0)
                   && M0.__default.GetSt(p#1_1_0, stRepr#1_1_0)
                     == M0.__default.GetSt(p#1_1_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)))
                   && M0.__default.GetSt(p#1_1_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)))
                     == M0.__default.GetSt(p#1_1_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1240,48)
                assume true;
                // TrCallStmt: Adding lhs with type State
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                p##1_1_1_2 := p#1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_1_1_2 := stsC#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##1_1_1_2 := Lit(true);
                call {:id "id2216"} $rhs##1_1_1_0 := Call$$M0.__default.Combine__Representative(p##1_1_1_2, sts##1_1_1_2, useCache##1_1_1_2);
                // TrCallStmt: After ProcessCallStmt
                stReprC#1_1_1_0 := $rhs##1_1_1_0;
                defass#stReprC#1_1_1_0 := true;
                // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1241,11)
                assert {:id "id2218"} defass#stReprC#1_1_1_0;
                assume true;
                assert {:id "id2219"} Set#IsMember(Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0), stReprC#1_1_1_0);
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1242,31)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                p##1_1_1_3 := p#1_1_0;
                assert {:id "id2220"} defass#stReprC#1_1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_1_2 := stReprC#1_1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_1_1_3 := Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##1_1_1_3 := Lit(true);
                call {:id "id2221"} Call$$M0.__default.CombineExpandsDomain(p##1_1_1_3, st##1_1_1_2, sts##1_1_1_3, useCache##1_1_1_3);
                // TrCallStmt: After ProcessCallStmt
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1243,25)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                p##1_1_1_4 := p#1_1_0;
                assert {:id "id2222"} defass#stReprC#1_1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_1_1_3 := stReprC#1_1_1_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_1_1_4 := Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##1_1_1_4 := Lit(true);
                call {:id "id2223"} Call$$M0.__default.CompatiblePick(p##1_1_1_4, st##1_1_1_3, sts##1_1_1_4, useCache##1_1_1_4);
                // TrCallStmt: After ProcessCallStmt
                pop;
            }

            pop;
            assert {:id "id2224"} M0.__default.GetSt(p#1_1_0, a#1_0) == M0.__default.GetSt(p#1_1_0, b#1_0);
            assume false;
        }
        else
        {
            assume (forall p#1_1_1: Box :: 
              { M0.__default.GetSt(p#1_1_1, b#1_0) } 
                { M0.__default.GetSt(p#1_1_1, a#1_0) } 
                { Set#IsMember(M0.__default.DomSt(a#1_0), p#1_1_1) } 
              $IsBox(p#1_1_1, Tclass.M0.Path())
                   && Set#IsMember(M0.__default.DomSt(a#1_0), p#1_1_1)
                 ==> M0.__default.GetSt(p#1_1_1, a#1_0) == M0.__default.GetSt(p#1_1_1, b#1_0));
        }

        // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1246,7)
        if (*)
        {
            // Assume Fuel Constant
            havoc p#1_2_0;
            assume $IsBox(p#1_2_0, Tclass.M0.Path());
            assert {:id "id2225"} defass#a#1_0;
            ##st#1_2_0 := a#1_0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#1_2_0, Tclass.M0.State(), $Heap);
            assume M0.__default.DomSt#canCall(a#1_0);
            if (!Set#IsMember(M0.__default.DomSt(a#1_0), p#1_2_0))
            {
                assert {:id "id2226"} defass#b#1_0;
                ##st#1_2_1 := b#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_2_1, Tclass.M0.State(), $Heap);
                assume M0.__default.DomSt#canCall(b#1_0);
            }

            assume M0.__default.DomSt#canCall(a#1_0)
               && (!Set#IsMember(M0.__default.DomSt(a#1_0), p#1_2_0)
                 ==> M0.__default.DomSt#canCall(b#1_0));
            assume {:id "id2227"} !Set#IsMember(M0.__default.DomSt(a#1_0), p#1_2_0)
               && Set#IsMember(M0.__default.DomSt(b#1_0), p#1_2_0);
            if (*)
            {
                ##p#1_2_0 := p#1_2_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##p#1_2_0, Tclass.M0.Path(), $Heap);
                assert {:id "id2228"} defass#b#1_0;
                ##st#1_2_2 := b#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_2_2, Tclass.M0.State(), $Heap);
                assert {:id "id2229"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_2), ##p#1_2_0);
                assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0);
                ##p#1_2_1 := p#1_2_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##p#1_2_1, Tclass.M0.Path(), $Heap);
                assert {:id "id2230"} defass#a#1_0;
                ##st#1_2_3 := a#1_0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1_2_3, Tclass.M0.State(), $Heap);
                assume M0.__default.Oracle#canCall(p#1_2_0, a#1_0);
                assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0)
                   && M0.__default.Oracle#canCall(p#1_2_0, a#1_0);
                assume {:id "id2231"} M0.__default.GetSt(p#1_2_0, b#1_0) == M0.__default.Oracle(p#1_2_0, a#1_0);
                assume false;
            }

            // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1249,9)
            if (*)
            {
                // Assume Fuel Constant
                assume true;
                assume {:id "id2232"} true;
                if (*)
                {
                    ##st#1_2_0_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_0_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(st#0);
                    assume M0.__default.DomSt#canCall(st#0);
                    assume {:id "id2233"} !Set#IsMember(M0.__default.DomSt(st#0), p#1_2_0);
                    assume false;
                }

                push;
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1250,31)
                // TrCallStmt: Before ProcessCallStmt
                assume true;
                // ProcessCallStmt: CheckSubrange
                p##1_2_0_0 := p#1_2_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                st##1_2_0_0 := st#0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                sts##1_2_0_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                useCache##1_2_0_0 := Lit(false);
                call {:id "id2234"} Call$$M0.__default.CombineExpandsDomain(p##1_2_0_0, st##1_2_0_0, sts##1_2_0_0, useCache##1_2_0_0);
                // TrCallStmt: After ProcessCallStmt
                pop;
                assert {:id "id2235"} !Set#IsMember(M0.__default.DomSt(st#0), p#1_2_0);
                assume false;
            }
            else
            {
                assume Lit(true) ==> !Set#IsMember(M0.__default.DomSt(st#0), p#1_2_0);
            }

            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1252,46)
            assume true;
            // TrCallStmt: Adding lhs with type State
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            p##1_2_0 := p#1_2_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            sts##1_2_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, stC#0), stsC#0);
            assume true;
            // ProcessCallStmt: CheckSubrange
            useCache##1_2_0 := Lit(true);
            call {:id "id2236"} $rhs##1_2_0 := Call$$M0.__default.Combine__Representative(p##1_2_0, sts##1_2_0, useCache##1_2_0);
            // TrCallStmt: After ProcessCallStmt
            stReprC#1_2_0 := $rhs##1_2_0;
            defass#stReprC#1_2_0 := true;
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1253,9)
            assert {:id "id2238"} defass#stReprC#1_2_0;
            assume true;
            if (stReprC#1_2_0 == stC#0)
            {
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    ##p#1_2_1_0_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_1_0_0, Tclass.M0.Path(), $Heap);
                    assert {:id "id2252"} defass#b#1_0;
                    ##st#1_2_1_0_0 := b#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_1_0_0, Tclass.M0.State(), $Heap);
                    assert {:id "id2253"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_1_0_0), ##p#1_2_1_0_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0);
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    ##p#1_2_1_0_3_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_1_0_3_0, Tclass.M0.Path(), $Heap);
                    assume {:id "id2248"} defass#b#1_0;
                    ##st#1_2_1_0_3_0 := b#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_1_0_3_0, Tclass.M0.State(), $Heap);
                    assume {:id "id2249"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_1_0_3_0), ##p#1_2_1_0_3_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0);
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    ##p#1_2_1_0_3_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_1_0_3_1, Tclass.M0.Path(), $Heap);
                    ##st#1_2_1_0_3_1 := stC#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_1_0_3_1, Tclass.M0.State(), $Heap);
                    assert {:id "id2250"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_1_0_3_1), ##p#1_2_1_0_3_1);
                    assume M0.__default.GetSt#canCall(p#1_2_0, stC#0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, stC#0);
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    assert {:id "id2251"} {:subsumption 0} M0.__default.GetSt(p#1_2_0, b#1_0) == M0.__default.GetSt(p#1_2_0, stC#0);
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    ##p#1_2_1_0_2_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_1_0_2_0, Tclass.M0.Path(), $Heap);
                    ##st#1_2_1_0_2_0 := stC#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_1_0_2_0, Tclass.M0.State(), $Heap);
                    assume {:id "id2246"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_1_0_2_0), ##p#1_2_1_0_2_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, stC#0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, stC#0);
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    ##p#1_2_1_0_2_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_1_0_2_1, Tclass.M0.Path(), $Heap);
                    ##st#1_2_1_0_2_1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_1_0_2_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, st#0);
                    assume M0.__default.Oracle#canCall(p#1_2_0, st#0);
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    assert {:id "id2247"} {:subsumption 0} M0.__default.GetSt(p#1_2_0, stC#0) == M0.__default.Oracle(p#1_2_0, st#0);
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    ##p#1_2_1_0_1_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_1_0_1_0, Tclass.M0.Path(), $Heap);
                    ##st#1_2_1_0_1_0 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_1_0_1_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, st#0);
                    assume M0.__default.Oracle#canCall(p#1_2_0, st#0);
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1260,29)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##1_2_1_0_1_0 := p#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_2_1_0_1_0 := stOrig#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_2_1_0_1_0 := st#0;
                    call {:id "id2244"} Call$$M0.__default.OracleProperty(p##1_2_1_0_1_0, st0##1_2_1_0_1_0, st1##1_2_1_0_1_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    ##p#1_2_1_0_1_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_1_0_1_1, Tclass.M0.Path(), $Heap);
                    ##st#1_2_1_0_1_1 := stOrig#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_1_0_1_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, stOrig#0);
                    assume M0.__default.Oracle#canCall(p#1_2_0, stOrig#0);
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    assert {:id "id2245"} {:subsumption 0} M0.__default.Oracle(p#1_2_0, st#0) == M0.__default.Oracle(p#1_2_0, stOrig#0);
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    ##p#1_2_1_0_0_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_1_0_0_0, Tclass.M0.Path(), $Heap);
                    ##st#1_2_1_0_0_0 := stOrig#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_1_0_0_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, stOrig#0);
                    assume M0.__default.Oracle#canCall(p#1_2_0, stOrig#0);
                    // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1262,28)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_2_1_0_0_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    parent##1_2_1_0_0_0 := stOrig#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_2_1_0_0_0 := Lit(false);
                    call {:id "id2239"} Call$$M0.__default.Lemma__Combine(sts##1_2_1_0_0_0, parent##1_2_1_0_0_0, useCache##1_2_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1263,29)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##1_2_1_0_0_0 := p#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_2_1_0_0_0 := stOrig#0;
                    assert {:id "id2240"} defass#a#1_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_2_1_0_0_0 := a#1_0;
                    call {:id "id2241"} Call$$M0.__default.OracleProperty(p##1_2_1_0_0_0, st0##1_2_1_0_0_0, st1##1_2_1_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    ##p#1_2_1_0_0_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_1_0_0_1, Tclass.M0.Path(), $Heap);
                    assert {:id "id2242"} defass#a#1_0;
                    ##st#1_2_1_0_0_1 := a#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_1_0_0_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, a#1_0);
                    assume M0.__default.Oracle#canCall(p#1_2_0, a#1_0);
                    // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1254,11)
                    assert {:id "id2243"} {:subsumption 0} M0.__default.Oracle(p#1_2_0, stOrig#0) == M0.__default.Oracle(p#1_2_0, a#1_0);
                    assume false;
                }

                assume {:id "id2254"} M0.__default.GetSt(p#1_2_0, b#1_0) == M0.__default.Oracle(p#1_2_0, a#1_0);
            }
            else
            {
                // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1268,11)
                assert {:id "id2255"} defass#stReprC#1_2_0;
                assume true;
                assert {:id "id2256"} Set#IsMember(stsC#0, stReprC#1_2_0);
                // ----- calc statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                // Assume Fuel Constant
                if (*)
                {
                    // ----- assert wf[initial] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_0, Tclass.M0.Path(), $Heap);
                    assert {:id "id2292"} defass#b#1_0;
                    ##st#1_2_2_0_0 := b#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_0, Tclass.M0.State(), $Heap);
                    assert {:id "id2293"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_2_0_0), ##p#1_2_2_0_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0);
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_4_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_4_0, Tclass.M0.Path(), $Heap);
                    assume {:id "id2287"} defass#b#1_0;
                    ##st#1_2_2_0_4_0 := b#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_4_0, Tclass.M0.State(), $Heap);
                    assume {:id "id2288"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_2_0_4_0), ##p#1_2_2_0_4_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, b#1_0);
                    // ----- Hint0 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_4_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_4_1, Tclass.M0.Path(), $Heap);
                    assert {:id "id2289"} defass#stReprC#1_2_0;
                    ##st#1_2_2_0_4_1 := stReprC#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_4_1, Tclass.M0.State(), $Heap);
                    assert {:id "id2290"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_2_0_4_1), ##p#1_2_2_0_4_1);
                    assume M0.__default.GetSt#canCall(p#1_2_0, stReprC#1_2_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, stReprC#1_2_0);
                    // ----- assert line0 == line1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    assert {:id "id2291"} {:subsumption 0} M0.__default.GetSt(p#1_2_0, b#1_0) == M0.__default.GetSt(p#1_2_0, stReprC#1_2_0);
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_3_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_3_0, Tclass.M0.Path(), $Heap);
                    assume {:id "id2278"} defass#stReprC#1_2_0;
                    ##st#1_2_2_0_3_0 := stReprC#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_3_0, Tclass.M0.State(), $Heap);
                    assume {:id "id2279"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_2_0_3_0), ##p#1_2_2_0_3_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, stReprC#1_2_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, stReprC#1_2_0);
                    // ----- Hint1 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1272,35)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##1_2_2_0_3_0 := p#1_2_0;
                    assert {:id "id2280"} defass#stReprC#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_2_2_0_3_0 := stReprC#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_2_2_0_3_0 := stsC#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_2_2_0_3_0 := Lit(true);
                    call {:id "id2281"} Call$$M0.__default.CombineExpandsDomain(p##1_2_2_0_3_0, st##1_2_2_0_3_0, sts##1_2_2_0_3_0, useCache##1_2_2_0_3_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1273,29)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##1_2_2_0_3_1 := p#1_2_0;
                    assert {:id "id2282"} defass#stReprC#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_2_2_0_3_1 := stReprC#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_2_2_0_3_1 := stsC#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_2_2_0_3_1 := Lit(true);
                    call {:id "id2283"} Call$$M0.__default.CompatiblePick(p##1_2_2_0_3_1, st##1_2_2_0_3_1, sts##1_2_2_0_3_1, useCache##1_2_2_0_3_1);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_3_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_3_1, Tclass.M0.Path(), $Heap);
                    ##sts#1_2_2_0_3_0 := stsC#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_2_2_0_3_0, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_2_2_0_3_0 := Lit(true);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_2_2_0_3_0, TBool, $Heap);
                    assert {:id "id2284"} {:subsumption 0} !Set#Equal(##sts#1_2_2_0_3_0, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(stsC#0, Lit(true));
                    ##st#1_2_2_0_3_1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_3_1, Tclass.M0.State(), $Heap);
                    assert {:id "id2285"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_2_0_3_1), ##p#1_2_2_0_3_1);
                    assume M0.__default.GetSt#canCall(p#1_2_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
                    assume M0.__default.Combine#canCall(stsC#0, Lit(true))
                       && M0.__default.GetSt#canCall(p#1_2_0, 
                        M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
                    // ----- assert line1 == line2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    assert {:id "id2286"} {:subsumption 0} M0.__default.GetSt(p#1_2_0, stReprC#1_2_0)
                       == M0.__default.GetSt(p#1_2_0, 
                        M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_2_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_2_0, Tclass.M0.Path(), $Heap);
                    ##sts#1_2_2_0_2_0 := stsC#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_2_2_0_2_0, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_2_2_0_2_0 := Lit(true);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_2_2_0_2_0, TBool, $Heap);
                    assume {:id "id2267"} {:subsumption 0} !Set#Equal(##sts#1_2_2_0_2_0, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(stsC#0, Lit(true));
                    ##st#1_2_2_0_2_0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_2_0, Tclass.M0.State(), $Heap);
                    assume {:id "id2268"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_2_2_0_2_0), ##p#1_2_2_0_2_0);
                    assume M0.__default.GetSt#canCall(p#1_2_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
                    assume M0.__default.Combine#canCall(stsC#0, Lit(true))
                       && M0.__default.GetSt#canCall(p#1_2_0, 
                        M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
                    // ----- Hint2 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1276,28)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st##1_2_2_0_2_0 := st#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_2_2_0_2_0 := sts#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_2_2_0_2_0 := Lit(false);
                    call {:id "id2269"} Call$$M0.__default.Combine__DomSt(st##1_2_2_0_2_0, sts##1_2_2_0_2_0, useCache##1_2_2_0_2_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1277,15)
                    ##sts#1_2_2_0_2_1 := sts#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_2_2_0_2_1, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_2_2_0_2_1 := Lit(false);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_2_2_0_2_1, TBool, $Heap);
                    assert {:id "id2270"} {:subsumption 0} !Set#Equal(##sts#1_2_2_0_2_1, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(sts#0, Lit(false));
                    ##st#1_2_2_0_2_1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_2_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
                    assume M0.__default.Combine#canCall(sts#0, Lit(false))
                       && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
                    assert {:id "id2271"} {:subsumption 0} !Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false))), 
                      p#1_2_0);
                    assume {:id "id2272"} !Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false))), 
                      p#1_2_0);
                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1278,15)
                    ##sts#1_2_2_0_2_2 := stsC#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_2_2_0_2_2, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_2_2_0_2_2 := Lit(true);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_2_2_0_2_2, TBool, $Heap);
                    assert {:id "id2273"} {:subsumption 0} !Set#Equal(##sts#1_2_2_0_2_2, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(stsC#0, Lit(true));
                    ##st#1_2_2_0_2_2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true));
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_2_2, Tclass.M0.State(), $Heap);
                    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
                    assume M0.__default.Combine#canCall(stsC#0, Lit(true))
                       && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true)));
                    assert {:id "id2274"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true))), 
                      p#1_2_0);
                    assume {:id "id2275"} Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, stsC#0, Lit(true))), 
                      p#1_2_0);
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_2_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_2_1, Tclass.M0.Path(), $Heap);
                    ##sts#1_2_2_0_2_3 := sts#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_2_2_0_2_3, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_2_2_0_2_3 := Lit(false);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_2_2_0_2_3, TBool, $Heap);
                    assert {:id "id2276"} {:subsumption 0} !Set#Equal(##sts#1_2_2_0_2_3, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(sts#0, Lit(false));
                    ##st#1_2_2_0_2_3 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_2_3, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
                    assume M0.__default.Combine#canCall(sts#0, Lit(false))
                       && M0.__default.Oracle#canCall(p#1_2_0, 
                        M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
                    // ----- assert line2 == line3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    assert {:id "id2277"} {:subsumption 0} M0.__default.GetSt(p#1_2_0, 
                        M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, stsC#0, Lit(true)))
                       == M0.__default.Oracle(p#1_2_0, 
                        M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)));
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_1_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_1_0, Tclass.M0.Path(), $Heap);
                    ##sts#1_2_2_0_1_0 := sts#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_2_2_0_1_0, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_2_2_0_1_0 := Lit(false);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_2_2_0_1_0, TBool, $Heap);
                    assume {:id "id2262"} {:subsumption 0} !Set#Equal(##sts#1_2_2_0_1_0, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(sts#0, Lit(false));
                    ##st#1_2_2_0_1_0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_1_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, 
                      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
                    assume M0.__default.Combine#canCall(sts#0, Lit(false))
                       && M0.__default.Oracle#canCall(p#1_2_0, 
                        M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false)));
                    // ----- Hint3 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1281,28)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_2_2_0_1_0 := sts#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    parent##1_2_2_0_1_0 := stOrig#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_2_2_0_1_0 := Lit(false);
                    call {:id "id2263"} Call$$M0.__default.Lemma__Combine(sts##1_2_2_0_1_0, parent##1_2_2_0_1_0, useCache##1_2_2_0_1_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1282,29)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##1_2_2_0_1_0 := p#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_2_2_0_1_0 := stOrig#0;
                    ##sts#1_2_2_0_1_1 := sts#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##sts#1_2_2_0_1_1, TSet(Tclass.M0.State()), $Heap);
                    ##useCache#1_2_2_0_1_1 := Lit(false);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##useCache#1_2_2_0_1_1, TBool, $Heap);
                    assert {:id "id2264"} {:subsumption 0} !Set#Equal(##sts#1_2_2_0_1_1, Set#Empty(): Set);
                    assume !Set#Equal(##sts#1_2_2_0_1_1, Set#Empty(): Set);
                    assume M0.__default.Combine#canCall(sts#0, Lit(false));
                    assume M0.__default.Combine#canCall(sts#0, Lit(false));
                    // ProcessCallStmt: CheckSubrange
                    st1##1_2_2_0_1_0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, Lit(false));
                    call {:id "id2265"} Call$$M0.__default.OracleProperty(p##1_2_2_0_1_0, st0##1_2_2_0_1_0, st1##1_2_2_0_1_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_1_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_1_1, Tclass.M0.Path(), $Heap);
                    ##st#1_2_2_0_1_1 := stOrig#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_1_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, stOrig#0);
                    assume M0.__default.Oracle#canCall(p#1_2_0, stOrig#0);
                    // ----- assert line3 == line4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    assert {:id "id2266"} {:subsumption 0} M0.__default.Oracle(p#1_2_0, 
                        M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, Lit(false)))
                       == M0.__default.Oracle(p#1_2_0, stOrig#0);
                    assume false;
                }
                else if (*)
                {
                    // ----- assume wf[lhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_0_0 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_0_0, Tclass.M0.Path(), $Heap);
                    ##st#1_2_2_0_0_0 := stOrig#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_0_0, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, stOrig#0);
                    assume M0.__default.Oracle#canCall(p#1_2_0, stOrig#0);
                    // ----- Hint4 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1285,28)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    sts##1_2_2_0_0_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, st#0), sts#0);
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    parent##1_2_2_0_0_0 := stOrig#0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    useCache##1_2_2_0_0_0 := Lit(false);
                    call {:id "id2257"} Call$$M0.__default.Lemma__Combine(sts##1_2_2_0_0_0, parent##1_2_2_0_0_0, useCache##1_2_2_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1286,29)
                    // TrCallStmt: Before ProcessCallStmt
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    p##1_2_2_0_0_0 := p#1_2_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st0##1_2_2_0_0_0 := stOrig#0;
                    assert {:id "id2258"} defass#a#1_0;
                    assume true;
                    // ProcessCallStmt: CheckSubrange
                    st1##1_2_2_0_0_0 := a#1_0;
                    call {:id "id2259"} Call$$M0.__default.OracleProperty(p##1_2_2_0_0_0, st0##1_2_2_0_0_0, st1##1_2_2_0_0_0);
                    // TrCallStmt: After ProcessCallStmt
                    // ----- assert wf[rhs] ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    ##p#1_2_2_0_0_1 := p#1_2_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##p#1_2_2_0_0_1, Tclass.M0.Path(), $Heap);
                    assert {:id "id2260"} defass#a#1_0;
                    ##st#1_2_2_0_0_1 := a#1_0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1_2_2_0_0_1, Tclass.M0.State(), $Heap);
                    assume M0.__default.Oracle#canCall(p#1_2_0, a#1_0);
                    assume M0.__default.Oracle#canCall(p#1_2_0, a#1_0);
                    // ----- assert line4 == line5 ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1269,11)
                    assert {:id "id2261"} {:subsumption 0} M0.__default.Oracle(p#1_2_0, stOrig#0) == M0.__default.Oracle(p#1_2_0, a#1_0);
                    assume false;
                }

                assume {:id "id2294"} M0.__default.GetSt(p#1_2_0, b#1_0) == M0.__default.Oracle(p#1_2_0, a#1_0);
            }

            assert {:id "id2295"} M0.__default.GetSt(p#1_2_0, b#1_0) == M0.__default.Oracle(p#1_2_0, a#1_0);
            assume false;
        }
        else
        {
            assume (forall p#1_2_1: Box :: 
              { M0.__default.Oracle(p#1_2_1, a#1_0) } 
                { M0.__default.GetSt(p#1_2_1, b#1_0) } 
                { Set#IsMember(M0.__default.DomSt(b#1_0), p#1_2_1) } 
                { Set#IsMember(M0.__default.DomSt(a#1_0), p#1_2_1) } 
              $IsBox(p#1_2_1, Tclass.M0.Path())
                   && 
                  !Set#IsMember(M0.__default.DomSt(a#1_0), p#1_2_1)
                   && Set#IsMember(M0.__default.DomSt(b#1_0), p#1_2_1)
                 ==> M0.__default.GetSt(p#1_2_1, b#1_0) == M0.__default.Oracle(p#1_2_1, a#1_0));
        }
    }
}



procedure {:verboseName "M0.CompatiblePick (well-formedness)"} CheckWellFormed$$M0.__default.CompatiblePick(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool);
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.CompatiblePick (well-formedness)"} CheckWellFormed$$M0.__default.CompatiblePick(p#0: Box, st#0: Box, sts#0: Set, useCache#0: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##sts#0: Set;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##sts#1: Set;
  var ##useCache#0: bool;
  var ##p#0: Box;
  var ##st#2: Box;
  var ##sts#2: Set;
  var ##useCache#1: bool;
  var ##p#1: Box;
  var ##st#3: Box;


    // AddMethodImpl: CompatiblePick, CheckWellFormed$$M0.__default.CompatiblePick
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id2296"} Set#IsMember(sts#0, st#0);
    ##sts#0 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    assume M0.__default.Compatible#canCall(sts#0);
    assume {:id "id2297"} M0.__default.Compatible(sts#0);
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.DomSt#canCall(st#0);
    assume {:id "id2298"} Set#IsMember(M0.__default.DomSt(st#0), p#0);
    ##sts#1 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id2299"} {:subsumption 0} !Set#Equal(##sts#1, Set#Empty(): Set);
    assume !Set#Equal(##sts#1, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts#0, useCache#0);
    ##st#1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
    assume {:id "id2300"} Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)), 
      p#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    ##p#0 := p#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##p#0, Tclass.M0.Path(), $Heap);
    ##sts#2 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#2, TSet(Tclass.M0.State()), $Heap);
    ##useCache#1 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id2301"} {:subsumption 0} !Set#Equal(##sts#2, Set#Empty(): Set);
    assume !Set#Equal(##sts#2, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts#0, useCache#0);
    ##st#2 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    assert {:id "id2302"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#2), ##p#0);
    assume Set#IsMember(M0.__default.DomSt(##st#2), ##p#0);
    assume M0.__default.GetSt#canCall(p#0, 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
    ##p#1 := p#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##p#1, Tclass.M0.Path(), $Heap);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    assert {:id "id2303"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#3), ##p#1);
    assume Set#IsMember(M0.__default.DomSt(##st#3), ##p#1);
    assume M0.__default.GetSt#canCall(p#0, st#0);
    assume {:id "id2304"} M0.__default.GetSt(p#0, 
        M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0))
       == M0.__default.GetSt(p#0, st#0);
}



procedure {:verboseName "M0.CompatiblePick (call)"} Call$$M0.__default.CompatiblePick(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool);
  // user-defined preconditions
  requires {:id "id2305"} Set#IsMember(sts#0, st#0);
  requires {:id "id2306"} M0.__default.Compatible#canCall(sts#0)
     ==> M0.__default.Compatible(sts#0)
       || (forall st#1: Box, st'#0: Box :: 
        { M0.__default.DomSt(st'#0), M0.__default.DomSt(st#1) } 
          { M0.__default.DomSt(st'#0), Set#IsMember(sts#0, st#1) } 
          { M0.__default.DomSt(st#1), Set#IsMember(sts#0, st'#0) } 
          { Set#IsMember(sts#0, st'#0), Set#IsMember(sts#0, st#1) } 
        $IsBox(st#1, Tclass.M0.State()) && $IsBox(st'#0, Tclass.M0.State())
           ==> 
          Set#IsMember(sts#0, st#1) && Set#IsMember(sts#0, st'#0)
           ==> (forall p#1: Box :: 
            { M0.__default.GetSt(p#1, st'#0) } 
              { M0.__default.GetSt(p#1, st#1) } 
              { Set#IsMember(M0.__default.DomSt(st'#0), p#1) } 
              { Set#IsMember(M0.__default.DomSt(st#1), p#1) } 
            $IsBox(p#1, Tclass.M0.Path())
               ==> 
              Set#IsMember(M0.__default.DomSt(st#1), p#1)
                 && Set#IsMember(M0.__default.DomSt(st'#0), p#1)
               ==> M0.__default.GetSt(p#1, st#1) == M0.__default.GetSt(p#1, st'#0)));
  requires {:id "id2307"} Set#IsMember(M0.__default.DomSt(st#0), p#0);
  requires {:id "id2308"} Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0)), 
    p#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(sts#0, useCache#0)
     && M0.__default.GetSt#canCall(p#0, 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0))
     && M0.__default.GetSt#canCall(p#0, st#0);
  ensures {:id "id2309"} M0.__default.GetSt(p#0, 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0))
     == M0.__default.GetSt(p#0, st#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.CompatiblePick (correctness)"} Impl$$M0.__default.CompatiblePick(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool)
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id2310"} Set#IsMember(sts#0, st#0);
  free requires {:id "id2311"} M0.__default.Compatible#canCall(sts#0)
     && 
    M0.__default.Compatible(sts#0)
     && (forall st#2: Box, st'#1: Box :: 
      { M0.__default.DomSt(st'#1), M0.__default.DomSt(st#2) } 
        { M0.__default.DomSt(st'#1), Set#IsMember(sts#0, st#2) } 
        { M0.__default.DomSt(st#2), Set#IsMember(sts#0, st'#1) } 
        { Set#IsMember(sts#0, st'#1), Set#IsMember(sts#0, st#2) } 
      $IsBox(st#2, Tclass.M0.State()) && $IsBox(st'#1, Tclass.M0.State())
         ==> 
        Set#IsMember(sts#0, st#2) && Set#IsMember(sts#0, st'#1)
         ==> (forall p#2: Box :: 
          { M0.__default.GetSt(p#2, st'#1) } 
            { M0.__default.GetSt(p#2, st#2) } 
            { Set#IsMember(M0.__default.DomSt(st'#1), p#2) } 
            { Set#IsMember(M0.__default.DomSt(st#2), p#2) } 
          $IsBox(p#2, Tclass.M0.Path())
             ==> 
            Set#IsMember(M0.__default.DomSt(st#2), p#2)
               && Set#IsMember(M0.__default.DomSt(st'#1), p#2)
             ==> M0.__default.GetSt(p#2, st#2) == M0.__default.GetSt(p#2, st'#1)));
  requires {:id "id2312"} Set#IsMember(M0.__default.DomSt(st#0), p#0);
  requires {:id "id2313"} Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0)), 
    p#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.Combine#canCall(sts#0, useCache#0)
     && M0.__default.GetSt#canCall(p#0, 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0))
     && M0.__default.GetSt#canCall(p#0, st#0);
  ensures {:id "id2314"} M0.__default.GetSt(p#0, 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0))
     == M0.__default.GetSt(p#0, st#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.CompatiblePick (correctness)"} Impl$$M0.__default.CompatiblePick(p#0: Box, st#0: Box, sts#0: Set, useCache#0: bool)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: CompatiblePick, Impl$$M0.__default.CompatiblePick
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts0#0: Set, $ih#useCache0#0: bool :: 
      { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0) } 
      $Is($ih#sts0#0, TSet(Tclass.M0.State()))
           && 
          Set#IsMember($ih#sts0#0, st#0)
           && M0.__default.Compatible($ih#sts0#0)
           && 
          Set#IsMember(M0.__default.DomSt(st#0), p#0)
           && Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0)), 
            p#0)
           && ((Set#Subset($ih#sts0#0, sts#0) && !Set#Subset(sts#0, $ih#sts0#0))
             || (Set#Equal($ih#sts0#0, sts#0) && !$ih#useCache0#0 && useCache#0))
         ==> M0.__default.GetSt(p#0, 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0))
           == M0.__default.GetSt(p#0, st#0));
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1301,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1301,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id2315"} Call$$M0.__default.reveal__Combine();
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M0.Combine_Representative (well-formedness)"} CheckWellFormed$$M0.__default.Combine__Representative(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool)
   returns (stRepr#0: Box
       where $IsBox(stRepr#0, Tclass.M0.State())
         && $IsAllocBox(stRepr#0, Tclass.M0.State(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Combine_Representative (well-formedness)"} CheckWellFormed$$M0.__default.Combine__Representative(p#0: Box, sts#0: Set, useCache#0: bool) returns (stRepr#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##sts#0: Set;
  var ##useCache#0: bool;
  var ##st#1: Box;
  var ##p#0: Box;
  var ##st#2: Box;
  var ##p#1: Box;
  var ##st#3: Box;
  var ##sts#1: Set;
  var ##useCache#1: bool;


    // AddMethodImpl: Combine_Representative, CheckWellFormed$$M0.__default.Combine__Representative
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id2316"} !Set#Equal(sts#0, Set#Empty(): Set);
    ##sts#0 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
    ##useCache#0 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#0, TBool, $Heap);
    assert {:id "id2317"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
    assume !Set#Equal(##sts#0, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts#0, useCache#0);
    ##st#0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
    assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
    assume {:id "id2318"} Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)), 
      p#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc stRepr#0;
    assume {:id "id2319"} Set#IsMember(sts#0, stRepr#0);
    ##st#1 := stRepr#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
    assume M0.__default.DomSt#canCall(stRepr#0);
    assume {:id "id2320"} Set#IsMember(M0.__default.DomSt(stRepr#0), p#0);
    ##p#0 := p#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##p#0, Tclass.M0.Path(), $Heap);
    ##st#2 := stRepr#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass.M0.State(), $Heap);
    assert {:id "id2321"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#2), ##p#0);
    assume Set#IsMember(M0.__default.DomSt(##st#2), ##p#0);
    assume M0.__default.GetSt#canCall(p#0, stRepr#0);
    ##p#1 := p#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##p#1, Tclass.M0.Path(), $Heap);
    ##sts#1 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##sts#1, TSet(Tclass.M0.State()), $Heap);
    ##useCache#1 := useCache#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##useCache#1, TBool, $Heap);
    assert {:id "id2322"} {:subsumption 0} !Set#Equal(##sts#1, Set#Empty(): Set);
    assume !Set#Equal(##sts#1, Set#Empty(): Set);
    assume M0.__default.Combine#canCall(sts#0, useCache#0);
    ##st#3 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass.M0.State(), $Heap);
    assert {:id "id2323"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#3), ##p#1);
    assume Set#IsMember(M0.__default.DomSt(##st#3), ##p#1);
    assume M0.__default.GetSt#canCall(p#0, 
      M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
    assume {:id "id2324"} M0.__default.GetSt(p#0, stRepr#0)
       == M0.__default.GetSt(p#0, 
        M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
}



procedure {:verboseName "M0.Combine_Representative (call)"} Call$$M0.__default.Combine__Representative(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool)
   returns (stRepr#0: Box
       where $IsBox(stRepr#0, Tclass.M0.State())
         && $IsAllocBox(stRepr#0, Tclass.M0.State(), $Heap));
  // user-defined preconditions
  requires {:id "id2325"} !Set#Equal(sts#0, Set#Empty(): Set);
  requires {:id "id2326"} Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0)), 
    p#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures Set#IsMember(sts#0, stRepr#0)
     ==> M0.__default.DomSt#canCall(stRepr#0)
       && (Set#IsMember(M0.__default.DomSt(stRepr#0), p#0)
         ==> M0.__default.GetSt#canCall(p#0, stRepr#0)
           && 
          M0.__default.Combine#canCall(sts#0, useCache#0)
           && M0.__default.GetSt#canCall(p#0, 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)));
  ensures {:id "id2327"} Set#IsMember(sts#0, stRepr#0);
  ensures {:id "id2328"} Set#IsMember(M0.__default.DomSt(stRepr#0), p#0);
  ensures {:id "id2329"} M0.__default.GetSt(p#0, stRepr#0)
     == M0.__default.GetSt(p#0, 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.Combine_Representative (correctness)"} Impl$$M0.__default.Combine__Representative(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool)
   returns (defass#stRepr#0: bool, 
    stRepr#0: Box
       where defass#stRepr#0
         ==> $IsBox(stRepr#0, Tclass.M0.State())
           && $IsAllocBox(stRepr#0, Tclass.M0.State(), $Heap), 
    $_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id2330"} !Set#Equal(sts#0, Set#Empty(): Set);
  requires {:id "id2331"} Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0)), 
    p#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures Set#IsMember(sts#0, stRepr#0)
     ==> M0.__default.DomSt#canCall(stRepr#0)
       && (Set#IsMember(M0.__default.DomSt(stRepr#0), p#0)
         ==> M0.__default.GetSt#canCall(p#0, stRepr#0)
           && 
          M0.__default.Combine#canCall(sts#0, useCache#0)
           && M0.__default.GetSt#canCall(p#0, 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)));
  ensures {:id "id2332"} Set#IsMember(sts#0, stRepr#0);
  ensures {:id "id2333"} Set#IsMember(M0.__default.DomSt(stRepr#0), p#0);
  ensures {:id "id2334"} M0.__default.GetSt(p#0, stRepr#0)
     == M0.__default.GetSt(p#0, 
      M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.Combine_Representative (correctness)"} Impl$$M0.__default.Combine__Representative(p#0: Box, sts#0: Set, useCache#0: bool)
   returns (defass#stRepr#0: bool, stRepr#0: Box, $_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var defass#stPick#0: bool;
  var stPick#0: Box
     where defass#stPick#0
       ==> $IsBox(stPick#0, Tclass.M0.State())
         && $IsAllocBox(stPick#0, Tclass.M0.State(), $Heap);
  var ##s#0: Set;
  var ##st#4: Box;
  var ##p#1_0: Box;
  var ##st#1_0: Box;
  var ##sts#1_0: Set;
  var ##useCache#1_0: bool;
  var ##p#1_1: Box;
  var ##st#1_1: Box;
  var ##sts#1_1: Set;
  var ##useCache#1_1: bool;
  var $rhs##1_0: Box;
  var p##1_0: Box;
  var sts##1_0: Set;
  var useCache##1_0: bool;

    // AddMethodImpl: Combine_Representative, Impl$$M0.__default.Combine__Representative
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1307,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1307,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id2335"} Call$$M0.__default.reveal__Combine();
    // TrCallStmt: After ProcessCallStmt
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1308,16)
    assume true;
    ##s#0 := sts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##s#0, TSet(Tclass.M0.State()), $Heap);
    assert {:id "id2336"} {:subsumption 0} !Set#Equal(##s#0, Set#Empty(): Set);
    assume !Set#Equal(##s#0, Set#Empty(): Set);
    assume M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0);
    assume M0.__default.PickOne#canCall(Tclass.M0.State(), sts#0);
    stPick#0 := M0.__default.PickOne(Tclass.M0.State(), sts#0);
    defass#stPick#0 := true;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1309,5)
    assert {:id "id2338"} defass#stPick#0;
    ##st#4 := stPick#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#4, Tclass.M0.State(), $Heap);
    assume M0.__default.DomSt#canCall(stPick#0);
    assume M0.__default.DomSt#canCall(stPick#0);
    if (Set#IsMember(M0.__default.DomSt(stPick#0), p#0))
    {
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1310,14)
        assume true;
        assert {:id "id2339"} defass#stPick#0;
        assume true;
        stRepr#0 := stPick#0;
        defass#stRepr#0 := true;
    }
    else
    {
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1312,7)
        ##p#1_0 := p#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##p#1_0, Tclass.M0.Path(), $Heap);
        ##sts#1_0 := sts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#1_0, TSet(Tclass.M0.State()), $Heap);
        ##useCache#1_0 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1_0, TBool, $Heap);
        assert {:id "id2341"} {:subsumption 0} !Set#Equal(##sts#1_0, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(sts#0, useCache#0);
        ##st#1_0 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1_0, Tclass.M0.State(), $Heap);
        assert {:id "id2342"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_0), ##p#1_0);
        assume M0.__default.GetSt#canCall(p#0, 
          M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
        ##p#1_1 := p#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##p#1_1, Tclass.M0.Path(), $Heap);
        assert {:id "id2343"} defass#stPick#0;
        ##sts#1_1 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#1_1, TSet(Tclass.M0.State()), $Heap);
        ##useCache#1_1 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#1_1, TBool, $Heap);
        assert {:id "id2344"} {:subsumption 0} !Set#Equal(##sts#1_1, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#0)), useCache#0);
        ##st#1_1 := M0.__default.Combine($LS($LZ), 
          reveal_M0._default.Combine, 
          Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#0)), 
          useCache#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1_1, Tclass.M0.State(), $Heap);
        assert {:id "id2345"} {:subsumption 0} Set#IsMember(M0.__default.DomSt(##st#1_1), ##p#1_1);
        assume M0.__default.GetSt#canCall(p#0, 
          M0.__default.Combine($LS($LZ), 
            reveal_M0._default.Combine, 
            Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#0)), 
            useCache#0));
        assume M0.__default.Combine#canCall(sts#0, useCache#0)
           && M0.__default.GetSt#canCall(p#0, 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0))
           && 
          M0.__default.Combine#canCall(Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#0)), useCache#0)
           && M0.__default.GetSt#canCall(p#0, 
            M0.__default.Combine($LS($LZ), 
              reveal_M0._default.Combine, 
              Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#0)), 
              useCache#0));
        assert {:id "id2346"} {:subsumption 0} M0.__default.GetSt(p#0, 
            M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0))
           == M0.__default.GetSt(p#0, 
            M0.__default.Combine($LS($LS($LZ)), 
              reveal_M0._default.Combine, 
              Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#0)), 
              useCache#0));
        assume {:id "id2347"} M0.__default.GetSt(p#0, 
            M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0))
           == M0.__default.GetSt(p#0, 
            M0.__default.Combine($LS($LZ), 
              reveal_M0._default.Combine, 
              Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#0)), 
              useCache#0));
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1313,39)
        assume true;
        // TrCallStmt: Adding lhs with type State
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        p##1_0 := p#0;
        assert {:id "id2348"} defass#stPick#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        sts##1_0 := Set#Difference(sts#0, Set#UnionOne(Set#Empty(): Set, stPick#0));
        assume true;
        // ProcessCallStmt: CheckSubrange
        useCache##1_0 := useCache#0;
        assert {:id "id2349"} (Set#Subset(sts##1_0, sts#0) && !Set#Subset(sts#0, sts##1_0))
           || (Set#Equal(sts##1_0, sts#0) && !useCache##1_0 && useCache#0);
        call {:id "id2350"} $rhs##1_0 := Call$$M0.__default.Combine__Representative(p##1_0, sts##1_0, useCache##1_0);
        // TrCallStmt: After ProcessCallStmt
        stRepr#0 := $rhs##1_0;
        defass#stRepr#0 := true;
    }

    assert {:id "id2352"} defass#stRepr#0;
}



procedure {:verboseName "M0.CombineExpandsDomain (well-formedness)"} CheckWellFormed$$M0.__default.CombineExpandsDomain(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool);
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.CombineExpandsDomain (well-formedness)"} CheckWellFormed$$M0.__default.CombineExpandsDomain(p#0: Box, st#0: Box, sts#0: Set, useCache#0: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##sts#0: Set;
  var ##useCache#0: bool;


    // AddMethodImpl: CombineExpandsDomain, CheckWellFormed$$M0.__default.CombineExpandsDomain
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id2353"} Set#IsMember(sts#0, st#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    if (*)
    {
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(st#0);
        assume {:id "id2354"} Set#IsMember(M0.__default.DomSt(st#0), p#0);
        ##sts#0 := sts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##sts#0, TSet(Tclass.M0.State()), $Heap);
        ##useCache#0 := useCache#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##useCache#0, TBool, $Heap);
        assert {:id "id2355"} {:subsumption 0} !Set#Equal(##sts#0, Set#Empty(): Set);
        assume !Set#Equal(##sts#0, Set#Empty(): Set);
        assume M0.__default.Combine#canCall(sts#0, useCache#0);
        ##st#1 := M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass.M0.State(), $Heap);
        assume M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0));
        assume {:id "id2356"} Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)), 
          p#0);
    }
    else
    {
        assume {:id "id2357"} Set#IsMember(M0.__default.DomSt(st#0), p#0)
           ==> Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)), 
            p#0);
    }
}



procedure {:verboseName "M0.CombineExpandsDomain (call)"} Call$$M0.__default.CombineExpandsDomain(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool);
  // user-defined preconditions
  requires {:id "id2358"} Set#IsMember(sts#0, st#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.DomSt#canCall(st#0)
     && (Set#IsMember(M0.__default.DomSt(st#0), p#0)
       ==> M0.__default.Combine#canCall(sts#0, useCache#0)
         && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)));
  ensures {:id "id2359"} Set#IsMember(M0.__default.DomSt(st#0), p#0)
     ==> Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0)), 
      p#0);
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "M0.CombineExpandsDomain (correctness)"} Impl$$M0.__default.CombineExpandsDomain(p#0: Box
       where $IsBox(p#0, Tclass.M0.Path()) && $IsAllocBox(p#0, Tclass.M0.Path(), $Heap), 
    st#0: Box
       where $IsBox(st#0, Tclass.M0.State()) && $IsAllocBox(st#0, Tclass.M0.State(), $Heap), 
    sts#0: Set
       where $Is(sts#0, TSet(Tclass.M0.State()))
         && $IsAlloc(sts#0, TSet(Tclass.M0.State()), $Heap), 
    useCache#0: bool)
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id2360"} Set#IsMember(sts#0, st#0);
  modifies $Heap;
  // user-defined postconditions
  free ensures M0.__default.DomSt#canCall(st#0)
     && (Set#IsMember(M0.__default.DomSt(st#0), p#0)
       ==> M0.__default.Combine#canCall(sts#0, useCache#0)
         && M0.__default.DomSt#canCall(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, sts#0, useCache#0)));
  ensures {:id "id2361"} Set#IsMember(M0.__default.DomSt(st#0), p#0)
     ==> Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LS($LZ)), reveal_M0._default.Combine, sts#0, useCache#0)), 
      p#0);
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "M0.CombineExpandsDomain (correctness)"} Impl$$M0.__default.CombineExpandsDomain(p#0: Box, st#0: Box, sts#0: Set, useCache#0: bool)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: CombineExpandsDomain, Impl$$M0.__default.CombineExpandsDomain
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#sts0#0: Set, $ih#useCache0#0: bool :: 
      { M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0) } 
      $Is($ih#sts0#0, TSet(Tclass.M0.State()))
           && Set#IsMember($ih#sts0#0, st#0)
           && ((Set#Subset($ih#sts0#0, sts#0) && !Set#Subset(sts#0, $ih#sts0#0))
             || (Set#Equal($ih#sts0#0, sts#0) && !$ih#useCache0#0 && useCache#0))
         ==> 
        Set#IsMember(M0.__default.DomSt(st#0), p#0)
         ==> Set#IsMember(M0.__default.DomSt(M0.__default.Combine($LS($LZ), reveal_M0._default.Combine, $ih#sts0#0, $ih#useCache0#0)), 
          p#0));
    $_reverifyPost := false;
    // ----- hide/reveal statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1320,5)
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-CachedBuilds.dfy(1320,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id2362"} Call$$M0.__default.reveal__Combine();
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "M0.reveal_Combine (well-formedness)"} {:verify false} CheckWellFormed$$M0.__default.reveal__Combine();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.reveal_Combine (call)"} {:verify false} Call$$M0.__default.reveal__Combine();
  modifies $Heap;
  // frame condition
  free ensures old($Heap) == $Heap;
  free ensures reveal_M0._default.Combine;



procedure {:verboseName "M0.reveal_StateCorrespondence (well-formedness)"} {:verify false} CheckWellFormed$$M0.__default.reveal__StateCorrespondence();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.reveal_StateCorrespondence (call)"} {:verify false} Call$$M0.__default.reveal__StateCorrespondence();
  modifies $Heap;
  // frame condition
  free ensures old($Heap) == $Heap;
  free ensures reveal_M0._default.StateCorrespondence;



procedure {:verboseName "M0.reveal_Post (well-formedness)"} {:verify false} CheckWellFormed$$M0.__default.reveal__Post();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.reveal_Post (call)"} {:verify false} Call$$M0.__default.reveal__Post();
  modifies $Heap;
  // frame condition
  free ensures old($Heap) == $Heap;
  free ensures reveal_M0._default.Post;



procedure {:verboseName "M0.reveal_Extends (well-formedness)"} {:verify false} CheckWellFormed$$M0.__default.reveal__Extends();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.reveal_Extends (call)"} {:verify false} Call$$M0.__default.reveal__Extends();
  modifies $Heap;
  // frame condition
  free ensures old($Heap) == $Heap;
  free ensures reveal_M0._default.Extends;



procedure {:verboseName "M0.reveal_eval (well-formedness)"} {:verify false} CheckWellFormed$$M0.__default.reveal__eval();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "M0.reveal_eval (call)"} {:verify false} Call$$M0.__default.reveal__eval();
  modifies $Heap;
  // frame condition
  free ensures old($Heap) == $Heap;
  free ensures reveal_M0._default.eval;



const unique class.M0.State: ClassName;

const unique class.M0.HashValue: ClassName;

const unique class.M0.Env: ClassName;

// Constructor function declaration
function #M0.Program.Program(Seq) : DatatypeType;

const unique ##M0.Program.Program: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Seq :: 
  { #M0.Program.Program(a#0#0#0) } 
  DatatypeCtorId(#M0.Program.Program(a#0#0#0)) == ##M0.Program.Program);
}

function M0.Program.Program_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Program.Program_q(d) } 
  M0.Program.Program_q(d) <==> DatatypeCtorId(d) == ##M0.Program.Program);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Program.Program_q(d) } 
  M0.Program.Program_q(d)
     ==> (exists a#1#0#0: Seq :: d == #M0.Program.Program(a#1#0#0)));

// Constructor $Is
axiom (forall a#2#0#0: Seq :: 
  { $Is(#M0.Program.Program(a#2#0#0), Tclass.M0.Program()) } 
  $Is(#M0.Program.Program(a#2#0#0), Tclass.M0.Program())
     <==> $Is(a#2#0#0, TSeq(Tclass.M0.Statement())));

// Constructor $IsAlloc
axiom (forall a#2#0#0: Seq, $h: Heap :: 
  { $IsAlloc(#M0.Program.Program(a#2#0#0), Tclass.M0.Program(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Program.Program(a#2#0#0), Tclass.M0.Program(), $h)
       <==> $IsAlloc(a#2#0#0, TSeq(Tclass.M0.Statement()), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Program.stmts(d), TSeq(Tclass.M0.Statement()), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Program.Program_q(d)
       && $IsAlloc(d, Tclass.M0.Program(), $h)
     ==> $IsAlloc(M0.Program.stmts(d), TSeq(Tclass.M0.Statement()), $h));

// Constructor literal
axiom (forall a#3#0#0: Seq :: 
  { #M0.Program.Program(Lit(a#3#0#0)) } 
  #M0.Program.Program(Lit(a#3#0#0)) == Lit(#M0.Program.Program(a#3#0#0)));

function M0.Program.stmts(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#4#0#0: Seq :: 
  { #M0.Program.Program(a#4#0#0) } 
  M0.Program.stmts(#M0.Program.Program(a#4#0#0)) == a#4#0#0);

// Inductive seq element rank
axiom (forall a#5#0#0: Seq, i: int :: 
  { Seq#Index(a#5#0#0, i), #M0.Program.Program(a#5#0#0) } 
  0 <= i && i < Seq#Length(a#5#0#0)
     ==> DtRank($Unbox(Seq#Index(a#5#0#0, i)): DatatypeType)
       < DtRank(#M0.Program.Program(a#5#0#0)));

// Inductive seq rank
axiom (forall a#6#0#0: Seq :: 
  { #M0.Program.Program(a#6#0#0) } 
  Seq#Rank(a#6#0#0) < DtRank(#M0.Program.Program(a#6#0#0)));

// Depth-one case-split function
function $IsA#M0.Program(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M0.Program(d) } 
  $IsA#M0.Program(d) ==> M0.Program.Program_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M0.Program.Program_q(d), $Is(d, Tclass.M0.Program()) } 
  $Is(d, Tclass.M0.Program()) ==> M0.Program.Program_q(d));

// Datatype extensional equality declaration
function M0.Program#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M0.Program.Program
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Program#Equal(a, b) } 
  M0.Program#Equal(a, b) <==> Seq#Equal(M0.Program.stmts(a), M0.Program.stmts(b)));

// Datatype extensionality axiom: M0.Program
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Program#Equal(a, b) } 
  M0.Program#Equal(a, b) <==> a == b);

const unique class.M0.Program: ClassName;

// Constructor function declaration
function #M0.Statement.stmtVariable(Box, DatatypeType) : DatatypeType;

const unique ##M0.Statement.stmtVariable: DtCtorId
uses {
// Constructor identifier
axiom (forall a#7#0#0: Box, a#7#1#0: DatatypeType :: 
  { #M0.Statement.stmtVariable(a#7#0#0, a#7#1#0) } 
  DatatypeCtorId(#M0.Statement.stmtVariable(a#7#0#0, a#7#1#0))
     == ##M0.Statement.stmtVariable);
}

function M0.Statement.stmtVariable_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Statement.stmtVariable_q(d) } 
  M0.Statement.stmtVariable_q(d)
     <==> DatatypeCtorId(d) == ##M0.Statement.stmtVariable);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Statement.stmtVariable_q(d) } 
  M0.Statement.stmtVariable_q(d)
     ==> (exists a#8#0#0: Box, a#8#1#0: DatatypeType :: 
      d == #M0.Statement.stmtVariable(a#8#0#0, a#8#1#0)));

// Constructor $Is
axiom (forall a#9#0#0: Box, a#9#1#0: DatatypeType :: 
  { $Is(#M0.Statement.stmtVariable(a#9#0#0, a#9#1#0), Tclass.M0.Statement()) } 
  $Is(#M0.Statement.stmtVariable(a#9#0#0, a#9#1#0), Tclass.M0.Statement())
     <==> $IsBox(a#9#0#0, Tclass.M0.Identifier()) && $Is(a#9#1#0, Tclass.M0.Expression()));

// Constructor $IsAlloc
axiom (forall a#9#0#0: Box, a#9#1#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#M0.Statement.stmtVariable(a#9#0#0, a#9#1#0), Tclass.M0.Statement(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Statement.stmtVariable(a#9#0#0, a#9#1#0), Tclass.M0.Statement(), $h)
       <==> $IsAllocBox(a#9#0#0, Tclass.M0.Identifier(), $h)
         && $IsAlloc(a#9#1#0, Tclass.M0.Expression(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(M0.Statement.id(d), Tclass.M0.Identifier(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Statement.stmtVariable_q(d)
       && $IsAlloc(d, Tclass.M0.Statement(), $h)
     ==> $IsAllocBox(M0.Statement.id(d), Tclass.M0.Identifier(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Statement.expr(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Statement.stmtVariable_q(d)
       && $IsAlloc(d, Tclass.M0.Statement(), $h)
     ==> $IsAlloc(M0.Statement.expr(d), Tclass.M0.Expression(), $h));

// Constructor literal
axiom (forall a#10#0#0: Box, a#10#1#0: DatatypeType :: 
  { #M0.Statement.stmtVariable(Lit(a#10#0#0), Lit(a#10#1#0)) } 
  #M0.Statement.stmtVariable(Lit(a#10#0#0), Lit(a#10#1#0))
     == Lit(#M0.Statement.stmtVariable(a#10#0#0, a#10#1#0)));

function M0.Statement.id(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#11#0#0: Box, a#11#1#0: DatatypeType :: 
  { #M0.Statement.stmtVariable(a#11#0#0, a#11#1#0) } 
  M0.Statement.id(#M0.Statement.stmtVariable(a#11#0#0, a#11#1#0)) == a#11#0#0);

function M0.Statement.expr(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#12#0#0: Box, a#12#1#0: DatatypeType :: 
  { #M0.Statement.stmtVariable(a#12#0#0, a#12#1#0) } 
  M0.Statement.expr(#M0.Statement.stmtVariable(a#12#0#0, a#12#1#0)) == a#12#1#0);

// Inductive rank
axiom (forall a#13#0#0: Box, a#13#1#0: DatatypeType :: 
  { #M0.Statement.stmtVariable(a#13#0#0, a#13#1#0) } 
  DtRank(a#13#1#0) < DtRank(#M0.Statement.stmtVariable(a#13#0#0, a#13#1#0)));

// Constructor function declaration
function #M0.Statement.stmtReturn(DatatypeType) : DatatypeType;

const unique ##M0.Statement.stmtReturn: DtCtorId
uses {
// Constructor identifier
axiom (forall a#14#0#0: DatatypeType :: 
  { #M0.Statement.stmtReturn(a#14#0#0) } 
  DatatypeCtorId(#M0.Statement.stmtReturn(a#14#0#0)) == ##M0.Statement.stmtReturn);
}

function M0.Statement.stmtReturn_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Statement.stmtReturn_q(d) } 
  M0.Statement.stmtReturn_q(d) <==> DatatypeCtorId(d) == ##M0.Statement.stmtReturn);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Statement.stmtReturn_q(d) } 
  M0.Statement.stmtReturn_q(d)
     ==> (exists a#15#0#0: DatatypeType :: d == #M0.Statement.stmtReturn(a#15#0#0)));

// Constructor $Is
axiom (forall a#16#0#0: DatatypeType :: 
  { $Is(#M0.Statement.stmtReturn(a#16#0#0), Tclass.M0.Statement()) } 
  $Is(#M0.Statement.stmtReturn(a#16#0#0), Tclass.M0.Statement())
     <==> $Is(a#16#0#0, Tclass.M0.Expression()));

// Constructor $IsAlloc
axiom (forall a#16#0#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#M0.Statement.stmtReturn(a#16#0#0), Tclass.M0.Statement(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Statement.stmtReturn(a#16#0#0), Tclass.M0.Statement(), $h)
       <==> $IsAlloc(a#16#0#0, Tclass.M0.Expression(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Statement.ret(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Statement.stmtReturn_q(d)
       && $IsAlloc(d, Tclass.M0.Statement(), $h)
     ==> $IsAlloc(M0.Statement.ret(d), Tclass.M0.Expression(), $h));

// Constructor literal
axiom (forall a#17#0#0: DatatypeType :: 
  { #M0.Statement.stmtReturn(Lit(a#17#0#0)) } 
  #M0.Statement.stmtReturn(Lit(a#17#0#0))
     == Lit(#M0.Statement.stmtReturn(a#17#0#0)));

function M0.Statement.ret(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#18#0#0: DatatypeType :: 
  { #M0.Statement.stmtReturn(a#18#0#0) } 
  M0.Statement.ret(#M0.Statement.stmtReturn(a#18#0#0)) == a#18#0#0);

// Inductive rank
axiom (forall a#19#0#0: DatatypeType :: 
  { #M0.Statement.stmtReturn(a#19#0#0) } 
  DtRank(a#19#0#0) < DtRank(#M0.Statement.stmtReturn(a#19#0#0)));

// Depth-one case-split function
function $IsA#M0.Statement(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M0.Statement(d) } 
  $IsA#M0.Statement(d)
     ==> M0.Statement.stmtVariable_q(d) || M0.Statement.stmtReturn_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M0.Statement.stmtReturn_q(d), $Is(d, Tclass.M0.Statement()) } 
    { M0.Statement.stmtVariable_q(d), $Is(d, Tclass.M0.Statement()) } 
  $Is(d, Tclass.M0.Statement())
     ==> M0.Statement.stmtVariable_q(d) || M0.Statement.stmtReturn_q(d));

// Datatype extensional equality declaration
function M0.Statement#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M0.Statement.stmtVariable
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Statement#Equal(a, b), M0.Statement.stmtVariable_q(a) } 
    { M0.Statement#Equal(a, b), M0.Statement.stmtVariable_q(b) } 
  M0.Statement.stmtVariable_q(a) && M0.Statement.stmtVariable_q(b)
     ==> (M0.Statement#Equal(a, b)
       <==> M0.Statement.id(a) == M0.Statement.id(b)
         && M0.Expression#Equal(M0.Statement.expr(a), M0.Statement.expr(b))));

// Datatype extensional equality definition: #M0.Statement.stmtReturn
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Statement#Equal(a, b), M0.Statement.stmtReturn_q(a) } 
    { M0.Statement#Equal(a, b), M0.Statement.stmtReturn_q(b) } 
  M0.Statement.stmtReturn_q(a) && M0.Statement.stmtReturn_q(b)
     ==> (M0.Statement#Equal(a, b)
       <==> M0.Expression#Equal(M0.Statement.ret(a), M0.Statement.ret(b))));

// Datatype extensionality axiom: M0.Statement
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Statement#Equal(a, b) } 
  M0.Statement#Equal(a, b) <==> a == b);

const unique class.M0.Statement: ClassName;

// Constructor function declaration
function #M0.Expression.exprLiteral(DatatypeType) : DatatypeType;

const unique ##M0.Expression.exprLiteral: DtCtorId
uses {
// Constructor identifier
axiom (forall a#20#0#0: DatatypeType :: 
  { #M0.Expression.exprLiteral(a#20#0#0) } 
  DatatypeCtorId(#M0.Expression.exprLiteral(a#20#0#0))
     == ##M0.Expression.exprLiteral);
}

function M0.Expression.exprLiteral_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprLiteral_q(d) } 
  M0.Expression.exprLiteral_q(d)
     <==> DatatypeCtorId(d) == ##M0.Expression.exprLiteral);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprLiteral_q(d) } 
  M0.Expression.exprLiteral_q(d)
     ==> (exists a#21#0#0: DatatypeType :: d == #M0.Expression.exprLiteral(a#21#0#0)));

function Tclass.M0.Literal() : Ty
uses {
// Tclass.M0.Literal Tag
axiom Tag(Tclass.M0.Literal()) == Tagclass.M0.Literal
   && TagFamily(Tclass.M0.Literal()) == tytagFamily$Literal;
}

const unique Tagclass.M0.Literal: TyTag;

// Box/unbox axiom for Tclass.M0.Literal
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M0.Literal()) } 
  $IsBox(bx, Tclass.M0.Literal())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M0.Literal()));

// Constructor $Is
axiom (forall a#22#0#0: DatatypeType :: 
  { $Is(#M0.Expression.exprLiteral(a#22#0#0), Tclass.M0.Expression()) } 
  $Is(#M0.Expression.exprLiteral(a#22#0#0), Tclass.M0.Expression())
     <==> $Is(a#22#0#0, Tclass.M0.Literal()));

// Constructor $IsAlloc
axiom (forall a#22#0#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#M0.Expression.exprLiteral(a#22#0#0), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Expression.exprLiteral(a#22#0#0), Tclass.M0.Expression(), $h)
       <==> $IsAlloc(a#22#0#0, Tclass.M0.Literal(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.lit(d), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprLiteral_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.lit(d), Tclass.M0.Literal(), $h));

// Constructor literal
axiom (forall a#23#0#0: DatatypeType :: 
  { #M0.Expression.exprLiteral(Lit(a#23#0#0)) } 
  #M0.Expression.exprLiteral(Lit(a#23#0#0))
     == Lit(#M0.Expression.exprLiteral(a#23#0#0)));

function M0.Expression.lit(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#24#0#0: DatatypeType :: 
  { #M0.Expression.exprLiteral(a#24#0#0) } 
  M0.Expression.lit(#M0.Expression.exprLiteral(a#24#0#0)) == a#24#0#0);

// Inductive rank
axiom (forall a#25#0#0: DatatypeType :: 
  { #M0.Expression.exprLiteral(a#25#0#0) } 
  DtRank(a#25#0#0) < DtRank(#M0.Expression.exprLiteral(a#25#0#0)));

// Constructor function declaration
function #M0.Expression.exprIdentifier(Box) : DatatypeType;

const unique ##M0.Expression.exprIdentifier: DtCtorId
uses {
// Constructor identifier
axiom (forall a#26#0#0: Box :: 
  { #M0.Expression.exprIdentifier(a#26#0#0) } 
  DatatypeCtorId(#M0.Expression.exprIdentifier(a#26#0#0))
     == ##M0.Expression.exprIdentifier);
}

function M0.Expression.exprIdentifier_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprIdentifier_q(d) } 
  M0.Expression.exprIdentifier_q(d)
     <==> DatatypeCtorId(d) == ##M0.Expression.exprIdentifier);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprIdentifier_q(d) } 
  M0.Expression.exprIdentifier_q(d)
     ==> (exists a#27#0#0: Box :: d == #M0.Expression.exprIdentifier(a#27#0#0)));

// Constructor $Is
axiom (forall a#28#0#0: Box :: 
  { $Is(#M0.Expression.exprIdentifier(a#28#0#0), Tclass.M0.Expression()) } 
  $Is(#M0.Expression.exprIdentifier(a#28#0#0), Tclass.M0.Expression())
     <==> $IsBox(a#28#0#0, Tclass.M0.Identifier()));

// Constructor $IsAlloc
axiom (forall a#28#0#0: Box, $h: Heap :: 
  { $IsAlloc(#M0.Expression.exprIdentifier(a#28#0#0), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Expression.exprIdentifier(a#28#0#0), Tclass.M0.Expression(), $h)
       <==> $IsAllocBox(a#28#0#0, Tclass.M0.Identifier(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(M0.Expression.id(d), Tclass.M0.Identifier(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprIdentifier_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAllocBox(M0.Expression.id(d), Tclass.M0.Identifier(), $h));

// Constructor literal
axiom (forall a#29#0#0: Box :: 
  { #M0.Expression.exprIdentifier(Lit(a#29#0#0)) } 
  #M0.Expression.exprIdentifier(Lit(a#29#0#0))
     == Lit(#M0.Expression.exprIdentifier(a#29#0#0)));

function M0.Expression.id(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#30#0#0: Box :: 
  { #M0.Expression.exprIdentifier(a#30#0#0) } 
  M0.Expression.id(#M0.Expression.exprIdentifier(a#30#0#0)) == a#30#0#0);

// Constructor function declaration
function #M0.Expression.exprIf(DatatypeType, DatatypeType, DatatypeType) : DatatypeType;

const unique ##M0.Expression.exprIf: DtCtorId
uses {
// Constructor identifier
axiom (forall a#31#0#0: DatatypeType, a#31#1#0: DatatypeType, a#31#2#0: DatatypeType :: 
  { #M0.Expression.exprIf(a#31#0#0, a#31#1#0, a#31#2#0) } 
  DatatypeCtorId(#M0.Expression.exprIf(a#31#0#0, a#31#1#0, a#31#2#0))
     == ##M0.Expression.exprIf);
}

function M0.Expression.exprIf_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprIf_q(d) } 
  M0.Expression.exprIf_q(d) <==> DatatypeCtorId(d) == ##M0.Expression.exprIf);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprIf_q(d) } 
  M0.Expression.exprIf_q(d)
     ==> (exists a#32#0#0: DatatypeType, a#32#1#0: DatatypeType, a#32#2#0: DatatypeType :: 
      d == #M0.Expression.exprIf(a#32#0#0, a#32#1#0, a#32#2#0)));

// Constructor $Is
axiom (forall a#33#0#0: DatatypeType, a#33#1#0: DatatypeType, a#33#2#0: DatatypeType :: 
  { $Is(#M0.Expression.exprIf(a#33#0#0, a#33#1#0, a#33#2#0), Tclass.M0.Expression()) } 
  $Is(#M0.Expression.exprIf(a#33#0#0, a#33#1#0, a#33#2#0), Tclass.M0.Expression())
     <==> $Is(a#33#0#0, Tclass.M0.Expression())
       && $Is(a#33#1#0, Tclass.M0.Expression())
       && $Is(a#33#2#0, Tclass.M0.Expression()));

// Constructor $IsAlloc
axiom (forall a#33#0#0: DatatypeType, a#33#1#0: DatatypeType, a#33#2#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#M0.Expression.exprIf(a#33#0#0, a#33#1#0, a#33#2#0), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Expression.exprIf(a#33#0#0, a#33#1#0, a#33#2#0), Tclass.M0.Expression(), $h)
       <==> $IsAlloc(a#33#0#0, Tclass.M0.Expression(), $h)
         && $IsAlloc(a#33#1#0, Tclass.M0.Expression(), $h)
         && $IsAlloc(a#33#2#0, Tclass.M0.Expression(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.cond(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprIf_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.cond(d), Tclass.M0.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.ifTrue(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprIf_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.ifTrue(d), Tclass.M0.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.ifFalse(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprIf_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.ifFalse(d), Tclass.M0.Expression(), $h));

// Constructor literal
axiom (forall a#34#0#0: DatatypeType, a#34#1#0: DatatypeType, a#34#2#0: DatatypeType :: 
  { #M0.Expression.exprIf(Lit(a#34#0#0), Lit(a#34#1#0), Lit(a#34#2#0)) } 
  #M0.Expression.exprIf(Lit(a#34#0#0), Lit(a#34#1#0), Lit(a#34#2#0))
     == Lit(#M0.Expression.exprIf(a#34#0#0, a#34#1#0, a#34#2#0)));

function M0.Expression.cond(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#35#0#0: DatatypeType, a#35#1#0: DatatypeType, a#35#2#0: DatatypeType :: 
  { #M0.Expression.exprIf(a#35#0#0, a#35#1#0, a#35#2#0) } 
  M0.Expression.cond(#M0.Expression.exprIf(a#35#0#0, a#35#1#0, a#35#2#0))
     == a#35#0#0);

// Inductive rank
axiom (forall a#36#0#0: DatatypeType, a#36#1#0: DatatypeType, a#36#2#0: DatatypeType :: 
  { #M0.Expression.exprIf(a#36#0#0, a#36#1#0, a#36#2#0) } 
  DtRank(a#36#0#0) < DtRank(#M0.Expression.exprIf(a#36#0#0, a#36#1#0, a#36#2#0)));

function M0.Expression.ifTrue(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#37#0#0: DatatypeType, a#37#1#0: DatatypeType, a#37#2#0: DatatypeType :: 
  { #M0.Expression.exprIf(a#37#0#0, a#37#1#0, a#37#2#0) } 
  M0.Expression.ifTrue(#M0.Expression.exprIf(a#37#0#0, a#37#1#0, a#37#2#0))
     == a#37#1#0);

// Inductive rank
axiom (forall a#38#0#0: DatatypeType, a#38#1#0: DatatypeType, a#38#2#0: DatatypeType :: 
  { #M0.Expression.exprIf(a#38#0#0, a#38#1#0, a#38#2#0) } 
  DtRank(a#38#1#0) < DtRank(#M0.Expression.exprIf(a#38#0#0, a#38#1#0, a#38#2#0)));

function M0.Expression.ifFalse(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#39#0#0: DatatypeType, a#39#1#0: DatatypeType, a#39#2#0: DatatypeType :: 
  { #M0.Expression.exprIf(a#39#0#0, a#39#1#0, a#39#2#0) } 
  M0.Expression.ifFalse(#M0.Expression.exprIf(a#39#0#0, a#39#1#0, a#39#2#0))
     == a#39#2#0);

// Inductive rank
axiom (forall a#40#0#0: DatatypeType, a#40#1#0: DatatypeType, a#40#2#0: DatatypeType :: 
  { #M0.Expression.exprIf(a#40#0#0, a#40#1#0, a#40#2#0) } 
  DtRank(a#40#2#0) < DtRank(#M0.Expression.exprIf(a#40#0#0, a#40#1#0, a#40#2#0)));

// Constructor function declaration
function #M0.Expression.exprAnd(DatatypeType, DatatypeType) : DatatypeType;

const unique ##M0.Expression.exprAnd: DtCtorId
uses {
// Constructor identifier
axiom (forall a#41#0#0: DatatypeType, a#41#1#0: DatatypeType :: 
  { #M0.Expression.exprAnd(a#41#0#0, a#41#1#0) } 
  DatatypeCtorId(#M0.Expression.exprAnd(a#41#0#0, a#41#1#0))
     == ##M0.Expression.exprAnd);
}

function M0.Expression.exprAnd_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprAnd_q(d) } 
  M0.Expression.exprAnd_q(d) <==> DatatypeCtorId(d) == ##M0.Expression.exprAnd);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprAnd_q(d) } 
  M0.Expression.exprAnd_q(d)
     ==> (exists a#42#0#0: DatatypeType, a#42#1#0: DatatypeType :: 
      d == #M0.Expression.exprAnd(a#42#0#0, a#42#1#0)));

// Constructor $Is
axiom (forall a#43#0#0: DatatypeType, a#43#1#0: DatatypeType :: 
  { $Is(#M0.Expression.exprAnd(a#43#0#0, a#43#1#0), Tclass.M0.Expression()) } 
  $Is(#M0.Expression.exprAnd(a#43#0#0, a#43#1#0), Tclass.M0.Expression())
     <==> $Is(a#43#0#0, Tclass.M0.Expression()) && $Is(a#43#1#0, Tclass.M0.Expression()));

// Constructor $IsAlloc
axiom (forall a#43#0#0: DatatypeType, a#43#1#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#M0.Expression.exprAnd(a#43#0#0, a#43#1#0), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Expression.exprAnd(a#43#0#0, a#43#1#0), Tclass.M0.Expression(), $h)
       <==> $IsAlloc(a#43#0#0, Tclass.M0.Expression(), $h)
         && $IsAlloc(a#43#1#0, Tclass.M0.Expression(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.conj0(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprAnd_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.conj0(d), Tclass.M0.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.conj1(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprAnd_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.conj1(d), Tclass.M0.Expression(), $h));

// Constructor literal
axiom (forall a#44#0#0: DatatypeType, a#44#1#0: DatatypeType :: 
  { #M0.Expression.exprAnd(Lit(a#44#0#0), Lit(a#44#1#0)) } 
  #M0.Expression.exprAnd(Lit(a#44#0#0), Lit(a#44#1#0))
     == Lit(#M0.Expression.exprAnd(a#44#0#0, a#44#1#0)));

function M0.Expression.conj0(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#45#0#0: DatatypeType, a#45#1#0: DatatypeType :: 
  { #M0.Expression.exprAnd(a#45#0#0, a#45#1#0) } 
  M0.Expression.conj0(#M0.Expression.exprAnd(a#45#0#0, a#45#1#0)) == a#45#0#0);

// Inductive rank
axiom (forall a#46#0#0: DatatypeType, a#46#1#0: DatatypeType :: 
  { #M0.Expression.exprAnd(a#46#0#0, a#46#1#0) } 
  DtRank(a#46#0#0) < DtRank(#M0.Expression.exprAnd(a#46#0#0, a#46#1#0)));

function M0.Expression.conj1(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#47#0#0: DatatypeType, a#47#1#0: DatatypeType :: 
  { #M0.Expression.exprAnd(a#47#0#0, a#47#1#0) } 
  M0.Expression.conj1(#M0.Expression.exprAnd(a#47#0#0, a#47#1#0)) == a#47#1#0);

// Inductive rank
axiom (forall a#48#0#0: DatatypeType, a#48#1#0: DatatypeType :: 
  { #M0.Expression.exprAnd(a#48#0#0, a#48#1#0) } 
  DtRank(a#48#1#0) < DtRank(#M0.Expression.exprAnd(a#48#0#0, a#48#1#0)));

// Constructor function declaration
function #M0.Expression.exprOr(DatatypeType, DatatypeType) : DatatypeType;

const unique ##M0.Expression.exprOr: DtCtorId
uses {
// Constructor identifier
axiom (forall a#49#0#0: DatatypeType, a#49#1#0: DatatypeType :: 
  { #M0.Expression.exprOr(a#49#0#0, a#49#1#0) } 
  DatatypeCtorId(#M0.Expression.exprOr(a#49#0#0, a#49#1#0))
     == ##M0.Expression.exprOr);
}

function M0.Expression.exprOr_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprOr_q(d) } 
  M0.Expression.exprOr_q(d) <==> DatatypeCtorId(d) == ##M0.Expression.exprOr);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprOr_q(d) } 
  M0.Expression.exprOr_q(d)
     ==> (exists a#50#0#0: DatatypeType, a#50#1#0: DatatypeType :: 
      d == #M0.Expression.exprOr(a#50#0#0, a#50#1#0)));

// Constructor $Is
axiom (forall a#51#0#0: DatatypeType, a#51#1#0: DatatypeType :: 
  { $Is(#M0.Expression.exprOr(a#51#0#0, a#51#1#0), Tclass.M0.Expression()) } 
  $Is(#M0.Expression.exprOr(a#51#0#0, a#51#1#0), Tclass.M0.Expression())
     <==> $Is(a#51#0#0, Tclass.M0.Expression()) && $Is(a#51#1#0, Tclass.M0.Expression()));

// Constructor $IsAlloc
axiom (forall a#51#0#0: DatatypeType, a#51#1#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#M0.Expression.exprOr(a#51#0#0, a#51#1#0), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Expression.exprOr(a#51#0#0, a#51#1#0), Tclass.M0.Expression(), $h)
       <==> $IsAlloc(a#51#0#0, Tclass.M0.Expression(), $h)
         && $IsAlloc(a#51#1#0, Tclass.M0.Expression(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.disj0(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprOr_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.disj0(d), Tclass.M0.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.disj1(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprOr_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.disj1(d), Tclass.M0.Expression(), $h));

// Constructor literal
axiom (forall a#52#0#0: DatatypeType, a#52#1#0: DatatypeType :: 
  { #M0.Expression.exprOr(Lit(a#52#0#0), Lit(a#52#1#0)) } 
  #M0.Expression.exprOr(Lit(a#52#0#0), Lit(a#52#1#0))
     == Lit(#M0.Expression.exprOr(a#52#0#0, a#52#1#0)));

function M0.Expression.disj0(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#53#0#0: DatatypeType, a#53#1#0: DatatypeType :: 
  { #M0.Expression.exprOr(a#53#0#0, a#53#1#0) } 
  M0.Expression.disj0(#M0.Expression.exprOr(a#53#0#0, a#53#1#0)) == a#53#0#0);

// Inductive rank
axiom (forall a#54#0#0: DatatypeType, a#54#1#0: DatatypeType :: 
  { #M0.Expression.exprOr(a#54#0#0, a#54#1#0) } 
  DtRank(a#54#0#0) < DtRank(#M0.Expression.exprOr(a#54#0#0, a#54#1#0)));

function M0.Expression.disj1(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#55#0#0: DatatypeType, a#55#1#0: DatatypeType :: 
  { #M0.Expression.exprOr(a#55#0#0, a#55#1#0) } 
  M0.Expression.disj1(#M0.Expression.exprOr(a#55#0#0, a#55#1#0)) == a#55#1#0);

// Inductive rank
axiom (forall a#56#0#0: DatatypeType, a#56#1#0: DatatypeType :: 
  { #M0.Expression.exprOr(a#56#0#0, a#56#1#0) } 
  DtRank(a#56#1#0) < DtRank(#M0.Expression.exprOr(a#56#0#0, a#56#1#0)));

// Constructor function declaration
function #M0.Expression.exprInvocation(DatatypeType, Seq) : DatatypeType;

const unique ##M0.Expression.exprInvocation: DtCtorId
uses {
// Constructor identifier
axiom (forall a#57#0#0: DatatypeType, a#57#1#0: Seq :: 
  { #M0.Expression.exprInvocation(a#57#0#0, a#57#1#0) } 
  DatatypeCtorId(#M0.Expression.exprInvocation(a#57#0#0, a#57#1#0))
     == ##M0.Expression.exprInvocation);
}

function M0.Expression.exprInvocation_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprInvocation_q(d) } 
  M0.Expression.exprInvocation_q(d)
     <==> DatatypeCtorId(d) == ##M0.Expression.exprInvocation);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprInvocation_q(d) } 
  M0.Expression.exprInvocation_q(d)
     ==> (exists a#58#0#0: DatatypeType, a#58#1#0: Seq :: 
      d == #M0.Expression.exprInvocation(a#58#0#0, a#58#1#0)));

// Constructor $Is
axiom (forall a#59#0#0: DatatypeType, a#59#1#0: Seq :: 
  { $Is(#M0.Expression.exprInvocation(a#59#0#0, a#59#1#0), Tclass.M0.Expression()) } 
  $Is(#M0.Expression.exprInvocation(a#59#0#0, a#59#1#0), Tclass.M0.Expression())
     <==> $Is(a#59#0#0, Tclass.M0.Expression())
       && $Is(a#59#1#0, TSeq(Tclass.M0.Expression())));

// Constructor $IsAlloc
axiom (forall a#59#0#0: DatatypeType, a#59#1#0: Seq, $h: Heap :: 
  { $IsAlloc(#M0.Expression.exprInvocation(a#59#0#0, a#59#1#0), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Expression.exprInvocation(a#59#0#0, a#59#1#0), Tclass.M0.Expression(), $h)
       <==> $IsAlloc(a#59#0#0, Tclass.M0.Expression(), $h)
         && $IsAlloc(a#59#1#0, TSeq(Tclass.M0.Expression()), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.fun(d), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprInvocation_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.fun(d), Tclass.M0.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.args(d), TSeq(Tclass.M0.Expression()), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprInvocation_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.args(d), TSeq(Tclass.M0.Expression()), $h));

// Constructor literal
axiom (forall a#60#0#0: DatatypeType, a#60#1#0: Seq :: 
  { #M0.Expression.exprInvocation(Lit(a#60#0#0), Lit(a#60#1#0)) } 
  #M0.Expression.exprInvocation(Lit(a#60#0#0), Lit(a#60#1#0))
     == Lit(#M0.Expression.exprInvocation(a#60#0#0, a#60#1#0)));

function M0.Expression.fun(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#61#0#0: DatatypeType, a#61#1#0: Seq :: 
  { #M0.Expression.exprInvocation(a#61#0#0, a#61#1#0) } 
  M0.Expression.fun(#M0.Expression.exprInvocation(a#61#0#0, a#61#1#0)) == a#61#0#0);

// Inductive rank
axiom (forall a#62#0#0: DatatypeType, a#62#1#0: Seq :: 
  { #M0.Expression.exprInvocation(a#62#0#0, a#62#1#0) } 
  DtRank(a#62#0#0) < DtRank(#M0.Expression.exprInvocation(a#62#0#0, a#62#1#0)));

function M0.Expression.args(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#63#0#0: DatatypeType, a#63#1#0: Seq :: 
  { #M0.Expression.exprInvocation(a#63#0#0, a#63#1#0) } 
  M0.Expression.args(#M0.Expression.exprInvocation(a#63#0#0, a#63#1#0))
     == a#63#1#0);

// Inductive seq element rank
axiom (forall a#64#0#0: DatatypeType, a#64#1#0: Seq, i: int :: 
  { Seq#Index(a#64#1#0, i), #M0.Expression.exprInvocation(a#64#0#0, a#64#1#0) } 
  0 <= i && i < Seq#Length(a#64#1#0)
     ==> DtRank($Unbox(Seq#Index(a#64#1#0, i)): DatatypeType)
       < DtRank(#M0.Expression.exprInvocation(a#64#0#0, a#64#1#0)));

// Inductive seq rank
axiom (forall a#65#0#0: DatatypeType, a#65#1#0: Seq :: 
  { #M0.Expression.exprInvocation(a#65#0#0, a#65#1#0) } 
  Seq#Rank(a#65#1#0) < DtRank(#M0.Expression.exprInvocation(a#65#0#0, a#65#1#0)));

// Constructor function declaration
function #M0.Expression.exprError(DatatypeType) : DatatypeType;

const unique ##M0.Expression.exprError: DtCtorId
uses {
// Constructor identifier
axiom (forall a#66#0#0: DatatypeType :: 
  { #M0.Expression.exprError(a#66#0#0) } 
  DatatypeCtorId(#M0.Expression.exprError(a#66#0#0)) == ##M0.Expression.exprError);
}

function M0.Expression.exprError_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprError_q(d) } 
  M0.Expression.exprError_q(d) <==> DatatypeCtorId(d) == ##M0.Expression.exprError);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprError_q(d) } 
  M0.Expression.exprError_q(d)
     ==> (exists a#67#0#0: DatatypeType :: d == #M0.Expression.exprError(a#67#0#0)));

function Tclass.M0.Reason() : Ty
uses {
// Tclass.M0.Reason Tag
axiom Tag(Tclass.M0.Reason()) == Tagclass.M0.Reason
   && TagFamily(Tclass.M0.Reason()) == tytagFamily$Reason;
}

const unique Tagclass.M0.Reason: TyTag;

// Box/unbox axiom for Tclass.M0.Reason
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass.M0.Reason()) } 
  $IsBox(bx, Tclass.M0.Reason())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass.M0.Reason()));

// Constructor $Is
axiom (forall a#68#0#0: DatatypeType :: 
  { $Is(#M0.Expression.exprError(a#68#0#0), Tclass.M0.Expression()) } 
  $Is(#M0.Expression.exprError(a#68#0#0), Tclass.M0.Expression())
     <==> $Is(a#68#0#0, Tclass.M0.Reason()));

// Constructor $IsAlloc
axiom (forall a#68#0#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#M0.Expression.exprError(a#68#0#0), Tclass.M0.Expression(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Expression.exprError(a#68#0#0), Tclass.M0.Expression(), $h)
       <==> $IsAlloc(a#68#0#0, Tclass.M0.Reason(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Expression.r(d), Tclass.M0.Reason(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Expression.exprError_q(d)
       && $IsAlloc(d, Tclass.M0.Expression(), $h)
     ==> $IsAlloc(M0.Expression.r(d), Tclass.M0.Reason(), $h));

// Constructor literal
axiom (forall a#69#0#0: DatatypeType :: 
  { #M0.Expression.exprError(Lit(a#69#0#0)) } 
  #M0.Expression.exprError(Lit(a#69#0#0))
     == Lit(#M0.Expression.exprError(a#69#0#0)));

function M0.Expression.r(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#70#0#0: DatatypeType :: 
  { #M0.Expression.exprError(a#70#0#0) } 
  M0.Expression.r(#M0.Expression.exprError(a#70#0#0)) == a#70#0#0);

// Inductive rank
axiom (forall a#71#0#0: DatatypeType :: 
  { #M0.Expression.exprError(a#71#0#0) } 
  DtRank(a#71#0#0) < DtRank(#M0.Expression.exprError(a#71#0#0)));

// Depth-one case-split function
function $IsA#M0.Expression(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M0.Expression(d) } 
  $IsA#M0.Expression(d)
     ==> M0.Expression.exprLiteral_q(d)
       || M0.Expression.exprIdentifier_q(d)
       || M0.Expression.exprIf_q(d)
       || M0.Expression.exprAnd_q(d)
       || M0.Expression.exprOr_q(d)
       || M0.Expression.exprInvocation_q(d)
       || M0.Expression.exprError_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M0.Expression.exprError_q(d), $Is(d, Tclass.M0.Expression()) } 
    { M0.Expression.exprInvocation_q(d), $Is(d, Tclass.M0.Expression()) } 
    { M0.Expression.exprOr_q(d), $Is(d, Tclass.M0.Expression()) } 
    { M0.Expression.exprAnd_q(d), $Is(d, Tclass.M0.Expression()) } 
    { M0.Expression.exprIf_q(d), $Is(d, Tclass.M0.Expression()) } 
    { M0.Expression.exprIdentifier_q(d), $Is(d, Tclass.M0.Expression()) } 
    { M0.Expression.exprLiteral_q(d), $Is(d, Tclass.M0.Expression()) } 
  $Is(d, Tclass.M0.Expression())
     ==> M0.Expression.exprLiteral_q(d)
       || M0.Expression.exprIdentifier_q(d)
       || M0.Expression.exprIf_q(d)
       || M0.Expression.exprAnd_q(d)
       || M0.Expression.exprOr_q(d)
       || M0.Expression.exprInvocation_q(d)
       || M0.Expression.exprError_q(d));

// Datatype extensional equality declaration
function M0.Expression#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M0.Expression.exprLiteral
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Expression#Equal(a, b), M0.Expression.exprLiteral_q(a) } 
    { M0.Expression#Equal(a, b), M0.Expression.exprLiteral_q(b) } 
  M0.Expression.exprLiteral_q(a) && M0.Expression.exprLiteral_q(b)
     ==> (M0.Expression#Equal(a, b)
       <==> M0.Literal#Equal(M0.Expression.lit(a), M0.Expression.lit(b))));

// Datatype extensional equality definition: #M0.Expression.exprIdentifier
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Expression#Equal(a, b), M0.Expression.exprIdentifier_q(a) } 
    { M0.Expression#Equal(a, b), M0.Expression.exprIdentifier_q(b) } 
  M0.Expression.exprIdentifier_q(a) && M0.Expression.exprIdentifier_q(b)
     ==> (M0.Expression#Equal(a, b) <==> M0.Expression.id(a) == M0.Expression.id(b)));

// Datatype extensional equality definition: #M0.Expression.exprIf
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Expression#Equal(a, b), M0.Expression.exprIf_q(a) } 
    { M0.Expression#Equal(a, b), M0.Expression.exprIf_q(b) } 
  M0.Expression.exprIf_q(a) && M0.Expression.exprIf_q(b)
     ==> (M0.Expression#Equal(a, b)
       <==> M0.Expression#Equal(M0.Expression.cond(a), M0.Expression.cond(b))
         && M0.Expression#Equal(M0.Expression.ifTrue(a), M0.Expression.ifTrue(b))
         && M0.Expression#Equal(M0.Expression.ifFalse(a), M0.Expression.ifFalse(b))));

// Datatype extensional equality definition: #M0.Expression.exprAnd
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Expression#Equal(a, b), M0.Expression.exprAnd_q(a) } 
    { M0.Expression#Equal(a, b), M0.Expression.exprAnd_q(b) } 
  M0.Expression.exprAnd_q(a) && M0.Expression.exprAnd_q(b)
     ==> (M0.Expression#Equal(a, b)
       <==> M0.Expression#Equal(M0.Expression.conj0(a), M0.Expression.conj0(b))
         && M0.Expression#Equal(M0.Expression.conj1(a), M0.Expression.conj1(b))));

// Datatype extensional equality definition: #M0.Expression.exprOr
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Expression#Equal(a, b), M0.Expression.exprOr_q(a) } 
    { M0.Expression#Equal(a, b), M0.Expression.exprOr_q(b) } 
  M0.Expression.exprOr_q(a) && M0.Expression.exprOr_q(b)
     ==> (M0.Expression#Equal(a, b)
       <==> M0.Expression#Equal(M0.Expression.disj0(a), M0.Expression.disj0(b))
         && M0.Expression#Equal(M0.Expression.disj1(a), M0.Expression.disj1(b))));

// Datatype extensional equality definition: #M0.Expression.exprInvocation
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Expression#Equal(a, b), M0.Expression.exprInvocation_q(a) } 
    { M0.Expression#Equal(a, b), M0.Expression.exprInvocation_q(b) } 
  M0.Expression.exprInvocation_q(a) && M0.Expression.exprInvocation_q(b)
     ==> (M0.Expression#Equal(a, b)
       <==> M0.Expression#Equal(M0.Expression.fun(a), M0.Expression.fun(b))
         && Seq#Equal(M0.Expression.args(a), M0.Expression.args(b))));

// Datatype extensional equality definition: #M0.Expression.exprError
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Expression#Equal(a, b), M0.Expression.exprError_q(a) } 
    { M0.Expression#Equal(a, b), M0.Expression.exprError_q(b) } 
  M0.Expression.exprError_q(a) && M0.Expression.exprError_q(b)
     ==> (M0.Expression#Equal(a, b)
       <==> M0.Reason#Equal(M0.Expression.r(a), M0.Expression.r(b))));

// Datatype extensionality axiom: M0.Expression
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Expression#Equal(a, b) } 
  M0.Expression#Equal(a, b) <==> a == b);

const unique class.M0.Expression: ClassName;

// Constructor function declaration
function #M0.Literal.litTrue() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Literal.litTrue()) == ##M0.Literal.litTrue;
// Constructor $Is
axiom $Is(#M0.Literal.litTrue(), Tclass.M0.Literal());
// Constructor literal
axiom #M0.Literal.litTrue() == Lit(#M0.Literal.litTrue());
}

const unique ##M0.Literal.litTrue: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Literal.litTrue()) == ##M0.Literal.litTrue;
}

function M0.Literal.litTrue_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litTrue_q(d) } 
  M0.Literal.litTrue_q(d) <==> DatatypeCtorId(d) == ##M0.Literal.litTrue);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litTrue_q(d) } 
  M0.Literal.litTrue_q(d) ==> d == #M0.Literal.litTrue());

// Constructor $IsAlloc
axiom (forall $h: Heap :: 
  { $IsAlloc(#M0.Literal.litTrue(), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h) ==> $IsAlloc(#M0.Literal.litTrue(), Tclass.M0.Literal(), $h));

// Constructor function declaration
function #M0.Literal.litFalse() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Literal.litFalse()) == ##M0.Literal.litFalse;
// Constructor $Is
axiom $Is(#M0.Literal.litFalse(), Tclass.M0.Literal());
// Constructor literal
axiom #M0.Literal.litFalse() == Lit(#M0.Literal.litFalse());
}

const unique ##M0.Literal.litFalse: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Literal.litFalse()) == ##M0.Literal.litFalse;
}

function M0.Literal.litFalse_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litFalse_q(d) } 
  M0.Literal.litFalse_q(d) <==> DatatypeCtorId(d) == ##M0.Literal.litFalse);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litFalse_q(d) } 
  M0.Literal.litFalse_q(d) ==> d == #M0.Literal.litFalse());

// Constructor $IsAlloc
axiom (forall $h: Heap :: 
  { $IsAlloc(#M0.Literal.litFalse(), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h) ==> $IsAlloc(#M0.Literal.litFalse(), Tclass.M0.Literal(), $h));

// Constructor function declaration
function #M0.Literal.litUndefined() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Literal.litUndefined()) == ##M0.Literal.litUndefined;
// Constructor $Is
axiom $Is(#M0.Literal.litUndefined(), Tclass.M0.Literal());
// Constructor literal
axiom #M0.Literal.litUndefined() == Lit(#M0.Literal.litUndefined());
}

const unique ##M0.Literal.litUndefined: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Literal.litUndefined()) == ##M0.Literal.litUndefined;
}

function M0.Literal.litUndefined_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litUndefined_q(d) } 
  M0.Literal.litUndefined_q(d) <==> DatatypeCtorId(d) == ##M0.Literal.litUndefined);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litUndefined_q(d) } 
  M0.Literal.litUndefined_q(d) ==> d == #M0.Literal.litUndefined());

// Constructor $IsAlloc
axiom (forall $h: Heap :: 
  { $IsAlloc(#M0.Literal.litUndefined(), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h)
     ==> $IsAlloc(#M0.Literal.litUndefined(), Tclass.M0.Literal(), $h));

// Constructor function declaration
function #M0.Literal.litNull() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Literal.litNull()) == ##M0.Literal.litNull;
// Constructor $Is
axiom $Is(#M0.Literal.litNull(), Tclass.M0.Literal());
// Constructor literal
axiom #M0.Literal.litNull() == Lit(#M0.Literal.litNull());
}

const unique ##M0.Literal.litNull: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Literal.litNull()) == ##M0.Literal.litNull;
}

function M0.Literal.litNull_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litNull_q(d) } 
  M0.Literal.litNull_q(d) <==> DatatypeCtorId(d) == ##M0.Literal.litNull);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litNull_q(d) } 
  M0.Literal.litNull_q(d) ==> d == #M0.Literal.litNull());

// Constructor $IsAlloc
axiom (forall $h: Heap :: 
  { $IsAlloc(#M0.Literal.litNull(), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h) ==> $IsAlloc(#M0.Literal.litNull(), Tclass.M0.Literal(), $h));

// Constructor function declaration
function #M0.Literal.litNumber(int) : DatatypeType;

const unique ##M0.Literal.litNumber: DtCtorId
uses {
// Constructor identifier
axiom (forall a#88#0#0: int :: 
  { #M0.Literal.litNumber(a#88#0#0) } 
  DatatypeCtorId(#M0.Literal.litNumber(a#88#0#0)) == ##M0.Literal.litNumber);
}

function M0.Literal.litNumber_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litNumber_q(d) } 
  M0.Literal.litNumber_q(d) <==> DatatypeCtorId(d) == ##M0.Literal.litNumber);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litNumber_q(d) } 
  M0.Literal.litNumber_q(d)
     ==> (exists a#89#0#0: int :: d == #M0.Literal.litNumber(a#89#0#0)));

// Constructor $Is
axiom (forall a#90#0#0: int :: 
  { $Is(#M0.Literal.litNumber(a#90#0#0), Tclass.M0.Literal()) } 
  $Is(#M0.Literal.litNumber(a#90#0#0), Tclass.M0.Literal())
     <==> $Is(a#90#0#0, TInt));

// Constructor $IsAlloc
axiom (forall a#90#0#0: int, $h: Heap :: 
  { $IsAlloc(#M0.Literal.litNumber(a#90#0#0), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Literal.litNumber(a#90#0#0), Tclass.M0.Literal(), $h)
       <==> $IsAlloc(a#90#0#0, TInt, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Literal.num(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      M0.Literal.litNumber_q(d)
       && $IsAlloc(d, Tclass.M0.Literal(), $h)
     ==> $IsAlloc(M0.Literal.num(d), TInt, $h));

// Constructor literal
axiom (forall a#91#0#0: int :: 
  { #M0.Literal.litNumber(LitInt(a#91#0#0)) } 
  #M0.Literal.litNumber(LitInt(a#91#0#0)) == Lit(#M0.Literal.litNumber(a#91#0#0)));

function M0.Literal.num(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#92#0#0: int :: 
  { #M0.Literal.litNumber(a#92#0#0) } 
  M0.Literal.num(#M0.Literal.litNumber(a#92#0#0)) == a#92#0#0);

// Constructor function declaration
function #M0.Literal.litString(Seq) : DatatypeType;

const unique ##M0.Literal.litString: DtCtorId
uses {
// Constructor identifier
axiom (forall a#93#0#0: Seq :: 
  { #M0.Literal.litString(a#93#0#0) } 
  DatatypeCtorId(#M0.Literal.litString(a#93#0#0)) == ##M0.Literal.litString);
}

function M0.Literal.litString_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litString_q(d) } 
  M0.Literal.litString_q(d) <==> DatatypeCtorId(d) == ##M0.Literal.litString);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litString_q(d) } 
  M0.Literal.litString_q(d)
     ==> (exists a#94#0#0: Seq :: d == #M0.Literal.litString(a#94#0#0)));

// Constructor $Is
axiom (forall a#95#0#0: Seq :: 
  { $Is(#M0.Literal.litString(a#95#0#0), Tclass.M0.Literal()) } 
  $Is(#M0.Literal.litString(a#95#0#0), Tclass.M0.Literal())
     <==> $Is(a#95#0#0, TSeq(TChar)));

// Constructor $IsAlloc
axiom (forall a#95#0#0: Seq, $h: Heap :: 
  { $IsAlloc(#M0.Literal.litString(a#95#0#0), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Literal.litString(a#95#0#0), Tclass.M0.Literal(), $h)
       <==> $IsAlloc(a#95#0#0, TSeq(TChar), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Literal.str(d), TSeq(TChar), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Literal.litString_q(d)
       && $IsAlloc(d, Tclass.M0.Literal(), $h)
     ==> $IsAlloc(M0.Literal.str(d), TSeq(TChar), $h));

// Constructor literal
axiom (forall a#96#0#0: Seq :: 
  { #M0.Literal.litString(Lit(a#96#0#0)) } 
  #M0.Literal.litString(Lit(a#96#0#0)) == Lit(#M0.Literal.litString(a#96#0#0)));

function M0.Literal.str(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#97#0#0: Seq :: 
  { #M0.Literal.litString(a#97#0#0) } 
  M0.Literal.str(#M0.Literal.litString(a#97#0#0)) == a#97#0#0);

// Inductive seq element rank
axiom (forall a#98#0#0: Seq, i: int :: 
  { Seq#Index(a#98#0#0, i), #M0.Literal.litString(a#98#0#0) } 
  0 <= i && i < Seq#Length(a#98#0#0)
     ==> DtRank($Unbox(Seq#Index(a#98#0#0, i)): DatatypeType)
       < DtRank(#M0.Literal.litString(a#98#0#0)));

// Inductive seq rank
axiom (forall a#99#0#0: Seq :: 
  { #M0.Literal.litString(a#99#0#0) } 
  Seq#Rank(a#99#0#0) < DtRank(#M0.Literal.litString(a#99#0#0)));

// Constructor function declaration
function #M0.Literal.litPrimitive(DatatypeType) : DatatypeType;

const unique ##M0.Literal.litPrimitive: DtCtorId
uses {
// Constructor identifier
axiom (forall a#100#0#0: DatatypeType :: 
  { #M0.Literal.litPrimitive(a#100#0#0) } 
  DatatypeCtorId(#M0.Literal.litPrimitive(a#100#0#0)) == ##M0.Literal.litPrimitive);
}

function M0.Literal.litPrimitive_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litPrimitive_q(d) } 
  M0.Literal.litPrimitive_q(d) <==> DatatypeCtorId(d) == ##M0.Literal.litPrimitive);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litPrimitive_q(d) } 
  M0.Literal.litPrimitive_q(d)
     ==> (exists a#101#0#0: DatatypeType :: d == #M0.Literal.litPrimitive(a#101#0#0)));

// Constructor $Is
axiom (forall a#102#0#0: DatatypeType :: 
  { $Is(#M0.Literal.litPrimitive(a#102#0#0), Tclass.M0.Literal()) } 
  $Is(#M0.Literal.litPrimitive(a#102#0#0), Tclass.M0.Literal())
     <==> $Is(a#102#0#0, Tclass.M0.Primitive()));

// Constructor $IsAlloc
axiom (forall a#102#0#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#M0.Literal.litPrimitive(a#102#0#0), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Literal.litPrimitive(a#102#0#0), Tclass.M0.Literal(), $h)
       <==> $IsAlloc(a#102#0#0, Tclass.M0.Primitive(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Literal.prim(d), Tclass.M0.Primitive(), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Literal.litPrimitive_q(d)
       && $IsAlloc(d, Tclass.M0.Literal(), $h)
     ==> $IsAlloc(M0.Literal.prim(d), Tclass.M0.Primitive(), $h));

// Constructor literal
axiom (forall a#103#0#0: DatatypeType :: 
  { #M0.Literal.litPrimitive(Lit(a#103#0#0)) } 
  #M0.Literal.litPrimitive(Lit(a#103#0#0))
     == Lit(#M0.Literal.litPrimitive(a#103#0#0)));

function M0.Literal.prim(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#104#0#0: DatatypeType :: 
  { #M0.Literal.litPrimitive(a#104#0#0) } 
  M0.Literal.prim(#M0.Literal.litPrimitive(a#104#0#0)) == a#104#0#0);

// Inductive rank
axiom (forall a#105#0#0: DatatypeType :: 
  { #M0.Literal.litPrimitive(a#105#0#0) } 
  DtRank(a#105#0#0) < DtRank(#M0.Literal.litPrimitive(a#105#0#0)));

// Constructor function declaration
function #M0.Literal.litArrOfPaths(Set) : DatatypeType;

const unique ##M0.Literal.litArrOfPaths: DtCtorId
uses {
// Constructor identifier
axiom (forall a#106#0#0: Set :: 
  { #M0.Literal.litArrOfPaths(a#106#0#0) } 
  DatatypeCtorId(#M0.Literal.litArrOfPaths(a#106#0#0))
     == ##M0.Literal.litArrOfPaths);
}

function M0.Literal.litArrOfPaths_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litArrOfPaths_q(d) } 
  M0.Literal.litArrOfPaths_q(d)
     <==> DatatypeCtorId(d) == ##M0.Literal.litArrOfPaths);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litArrOfPaths_q(d) } 
  M0.Literal.litArrOfPaths_q(d)
     ==> (exists a#107#0#0: Set :: d == #M0.Literal.litArrOfPaths(a#107#0#0)));

// Constructor $Is
axiom (forall a#108#0#0: Set :: 
  { $Is(#M0.Literal.litArrOfPaths(a#108#0#0), Tclass.M0.Literal()) } 
  $Is(#M0.Literal.litArrOfPaths(a#108#0#0), Tclass.M0.Literal())
     <==> $Is(a#108#0#0, TSet(Tclass.M0.Path())));

// Constructor $IsAlloc
axiom (forall a#108#0#0: Set, $h: Heap :: 
  { $IsAlloc(#M0.Literal.litArrOfPaths(a#108#0#0), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Literal.litArrOfPaths(a#108#0#0), Tclass.M0.Literal(), $h)
       <==> $IsAlloc(a#108#0#0, TSet(Tclass.M0.Path()), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Literal.paths(d), TSet(Tclass.M0.Path()), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Literal.litArrOfPaths_q(d)
       && $IsAlloc(d, Tclass.M0.Literal(), $h)
     ==> $IsAlloc(M0.Literal.paths(d), TSet(Tclass.M0.Path()), $h));

// Constructor literal
axiom (forall a#109#0#0: Set :: 
  { #M0.Literal.litArrOfPaths(Lit(a#109#0#0)) } 
  #M0.Literal.litArrOfPaths(Lit(a#109#0#0))
     == Lit(#M0.Literal.litArrOfPaths(a#109#0#0)));

function M0.Literal.paths(DatatypeType) : Set;

// Constructor injectivity
axiom (forall a#110#0#0: Set :: 
  { #M0.Literal.litArrOfPaths(a#110#0#0) } 
  M0.Literal.paths(#M0.Literal.litArrOfPaths(a#110#0#0)) == a#110#0#0);

// Inductive set element rank
axiom (forall a#111#0#0: Set, d: DatatypeType :: 
  { Set#IsMember(a#111#0#0, $Box(d)), #M0.Literal.litArrOfPaths(a#111#0#0) } 
  Set#IsMember(a#111#0#0, $Box(d))
     ==> DtRank(d) < DtRank(#M0.Literal.litArrOfPaths(a#111#0#0)));

// Constructor function declaration
function #M0.Literal.litArrOfStrings(Set) : DatatypeType;

const unique ##M0.Literal.litArrOfStrings: DtCtorId
uses {
// Constructor identifier
axiom (forall a#112#0#0: Set :: 
  { #M0.Literal.litArrOfStrings(a#112#0#0) } 
  DatatypeCtorId(#M0.Literal.litArrOfStrings(a#112#0#0))
     == ##M0.Literal.litArrOfStrings);
}

function M0.Literal.litArrOfStrings_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litArrOfStrings_q(d) } 
  M0.Literal.litArrOfStrings_q(d)
     <==> DatatypeCtorId(d) == ##M0.Literal.litArrOfStrings);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litArrOfStrings_q(d) } 
  M0.Literal.litArrOfStrings_q(d)
     ==> (exists a#113#0#0: Set :: d == #M0.Literal.litArrOfStrings(a#113#0#0)));

// Constructor $Is
axiom (forall a#114#0#0: Set :: 
  { $Is(#M0.Literal.litArrOfStrings(a#114#0#0), Tclass.M0.Literal()) } 
  $Is(#M0.Literal.litArrOfStrings(a#114#0#0), Tclass.M0.Literal())
     <==> $Is(a#114#0#0, TSet(TSeq(TChar))));

// Constructor $IsAlloc
axiom (forall a#114#0#0: Set, $h: Heap :: 
  { $IsAlloc(#M0.Literal.litArrOfStrings(a#114#0#0), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Literal.litArrOfStrings(a#114#0#0), Tclass.M0.Literal(), $h)
       <==> $IsAlloc(a#114#0#0, TSet(TSeq(TChar)), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Literal.strs(d), TSet(TSeq(TChar)), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Literal.litArrOfStrings_q(d)
       && $IsAlloc(d, Tclass.M0.Literal(), $h)
     ==> $IsAlloc(M0.Literal.strs(d), TSet(TSeq(TChar)), $h));

// Constructor literal
axiom (forall a#115#0#0: Set :: 
  { #M0.Literal.litArrOfStrings(Lit(a#115#0#0)) } 
  #M0.Literal.litArrOfStrings(Lit(a#115#0#0))
     == Lit(#M0.Literal.litArrOfStrings(a#115#0#0)));

function M0.Literal.strs(DatatypeType) : Set;

// Constructor injectivity
axiom (forall a#116#0#0: Set :: 
  { #M0.Literal.litArrOfStrings(a#116#0#0) } 
  M0.Literal.strs(#M0.Literal.litArrOfStrings(a#116#0#0)) == a#116#0#0);

// Inductive set element rank
axiom (forall a#117#0#0: Set, d: DatatypeType :: 
  { Set#IsMember(a#117#0#0, $Box(d)), #M0.Literal.litArrOfStrings(a#117#0#0) } 
  Set#IsMember(a#117#0#0, $Box(d))
     ==> DtRank(d) < DtRank(#M0.Literal.litArrOfStrings(a#117#0#0)));

// Constructor function declaration
function #M0.Literal.litArray(Seq) : DatatypeType;

const unique ##M0.Literal.litArray: DtCtorId
uses {
// Constructor identifier
axiom (forall a#118#0#0: Seq :: 
  { #M0.Literal.litArray(a#118#0#0) } 
  DatatypeCtorId(#M0.Literal.litArray(a#118#0#0)) == ##M0.Literal.litArray);
}

function M0.Literal.litArray_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Literal.litArray_q(d) } 
  M0.Literal.litArray_q(d) <==> DatatypeCtorId(d) == ##M0.Literal.litArray);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Literal.litArray_q(d) } 
  M0.Literal.litArray_q(d)
     ==> (exists a#119#0#0: Seq :: d == #M0.Literal.litArray(a#119#0#0)));

// Constructor $Is
axiom (forall a#120#0#0: Seq :: 
  { $Is(#M0.Literal.litArray(a#120#0#0), Tclass.M0.Literal()) } 
  $Is(#M0.Literal.litArray(a#120#0#0), Tclass.M0.Literal())
     <==> $Is(a#120#0#0, TSeq(Tclass.M0.Expression())));

// Constructor $IsAlloc
axiom (forall a#120#0#0: Seq, $h: Heap :: 
  { $IsAlloc(#M0.Literal.litArray(a#120#0#0), Tclass.M0.Literal(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Literal.litArray(a#120#0#0), Tclass.M0.Literal(), $h)
       <==> $IsAlloc(a#120#0#0, TSeq(Tclass.M0.Expression()), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(M0.Literal.arr(d), TSeq(Tclass.M0.Expression()), $h) } 
  $IsGoodHeap($h)
       && 
      M0.Literal.litArray_q(d)
       && $IsAlloc(d, Tclass.M0.Literal(), $h)
     ==> $IsAlloc(M0.Literal.arr(d), TSeq(Tclass.M0.Expression()), $h));

// Constructor literal
axiom (forall a#121#0#0: Seq :: 
  { #M0.Literal.litArray(Lit(a#121#0#0)) } 
  #M0.Literal.litArray(Lit(a#121#0#0)) == Lit(#M0.Literal.litArray(a#121#0#0)));

function M0.Literal.arr(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#122#0#0: Seq :: 
  { #M0.Literal.litArray(a#122#0#0) } 
  M0.Literal.arr(#M0.Literal.litArray(a#122#0#0)) == a#122#0#0);

// Inductive seq element rank
axiom (forall a#123#0#0: Seq, i: int :: 
  { Seq#Index(a#123#0#0, i), #M0.Literal.litArray(a#123#0#0) } 
  0 <= i && i < Seq#Length(a#123#0#0)
     ==> DtRank($Unbox(Seq#Index(a#123#0#0, i)): DatatypeType)
       < DtRank(#M0.Literal.litArray(a#123#0#0)));

// Inductive seq rank
axiom (forall a#124#0#0: Seq :: 
  { #M0.Literal.litArray(a#124#0#0) } 
  Seq#Rank(a#124#0#0) < DtRank(#M0.Literal.litArray(a#124#0#0)));

// Depth-one case-split function
function $IsA#M0.Literal(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M0.Literal(d) } 
  $IsA#M0.Literal(d)
     ==> M0.Literal.litTrue_q(d)
       || M0.Literal.litFalse_q(d)
       || M0.Literal.litUndefined_q(d)
       || M0.Literal.litNull_q(d)
       || M0.Literal.litNumber_q(d)
       || M0.Literal.litString_q(d)
       || M0.Literal.litPrimitive_q(d)
       || M0.Literal.litArrOfPaths_q(d)
       || M0.Literal.litArrOfStrings_q(d)
       || M0.Literal.litArray_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M0.Literal.litArray_q(d), $Is(d, Tclass.M0.Literal()) } 
    { M0.Literal.litArrOfStrings_q(d), $Is(d, Tclass.M0.Literal()) } 
    { M0.Literal.litArrOfPaths_q(d), $Is(d, Tclass.M0.Literal()) } 
    { M0.Literal.litPrimitive_q(d), $Is(d, Tclass.M0.Literal()) } 
    { M0.Literal.litString_q(d), $Is(d, Tclass.M0.Literal()) } 
    { M0.Literal.litNumber_q(d), $Is(d, Tclass.M0.Literal()) } 
    { M0.Literal.litNull_q(d), $Is(d, Tclass.M0.Literal()) } 
    { M0.Literal.litUndefined_q(d), $Is(d, Tclass.M0.Literal()) } 
    { M0.Literal.litFalse_q(d), $Is(d, Tclass.M0.Literal()) } 
    { M0.Literal.litTrue_q(d), $Is(d, Tclass.M0.Literal()) } 
  $Is(d, Tclass.M0.Literal())
     ==> M0.Literal.litTrue_q(d)
       || M0.Literal.litFalse_q(d)
       || M0.Literal.litUndefined_q(d)
       || M0.Literal.litNull_q(d)
       || M0.Literal.litNumber_q(d)
       || M0.Literal.litString_q(d)
       || M0.Literal.litPrimitive_q(d)
       || M0.Literal.litArrOfPaths_q(d)
       || M0.Literal.litArrOfStrings_q(d)
       || M0.Literal.litArray_q(d));

// Datatype extensional equality declaration
function M0.Literal#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M0.Literal.litTrue
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litTrue_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litTrue_q(b) } 
  M0.Literal.litTrue_q(a) && M0.Literal.litTrue_q(b) ==> M0.Literal#Equal(a, b));

// Datatype extensional equality definition: #M0.Literal.litFalse
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litFalse_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litFalse_q(b) } 
  M0.Literal.litFalse_q(a) && M0.Literal.litFalse_q(b) ==> M0.Literal#Equal(a, b));

// Datatype extensional equality definition: #M0.Literal.litUndefined
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litUndefined_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litUndefined_q(b) } 
  M0.Literal.litUndefined_q(a) && M0.Literal.litUndefined_q(b)
     ==> M0.Literal#Equal(a, b));

// Datatype extensional equality definition: #M0.Literal.litNull
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litNull_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litNull_q(b) } 
  M0.Literal.litNull_q(a) && M0.Literal.litNull_q(b) ==> M0.Literal#Equal(a, b));

// Datatype extensional equality definition: #M0.Literal.litNumber
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litNumber_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litNumber_q(b) } 
  M0.Literal.litNumber_q(a) && M0.Literal.litNumber_q(b)
     ==> (M0.Literal#Equal(a, b) <==> M0.Literal.num(a) == M0.Literal.num(b)));

// Datatype extensional equality definition: #M0.Literal.litString
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litString_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litString_q(b) } 
  M0.Literal.litString_q(a) && M0.Literal.litString_q(b)
     ==> (M0.Literal#Equal(a, b) <==> Seq#Equal(M0.Literal.str(a), M0.Literal.str(b))));

// Datatype extensional equality definition: #M0.Literal.litPrimitive
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litPrimitive_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litPrimitive_q(b) } 
  M0.Literal.litPrimitive_q(a) && M0.Literal.litPrimitive_q(b)
     ==> (M0.Literal#Equal(a, b)
       <==> M0.Primitive#Equal(M0.Literal.prim(a), M0.Literal.prim(b))));

// Datatype extensional equality definition: #M0.Literal.litArrOfPaths
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litArrOfPaths_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litArrOfPaths_q(b) } 
  M0.Literal.litArrOfPaths_q(a) && M0.Literal.litArrOfPaths_q(b)
     ==> (M0.Literal#Equal(a, b)
       <==> Set#Equal(M0.Literal.paths(a), M0.Literal.paths(b))));

// Datatype extensional equality definition: #M0.Literal.litArrOfStrings
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litArrOfStrings_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litArrOfStrings_q(b) } 
  M0.Literal.litArrOfStrings_q(a) && M0.Literal.litArrOfStrings_q(b)
     ==> (M0.Literal#Equal(a, b) <==> Set#Equal(M0.Literal.strs(a), M0.Literal.strs(b))));

// Datatype extensional equality definition: #M0.Literal.litArray
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b), M0.Literal.litArray_q(a) } 
    { M0.Literal#Equal(a, b), M0.Literal.litArray_q(b) } 
  M0.Literal.litArray_q(a) && M0.Literal.litArray_q(b)
     ==> (M0.Literal#Equal(a, b) <==> Seq#Equal(M0.Literal.arr(a), M0.Literal.arr(b))));

// Datatype extensionality axiom: M0.Literal
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Literal#Equal(a, b) } 
  M0.Literal#Equal(a, b) <==> a == b);

const unique class.M0.Literal: ClassName;

// Constructor function declaration
function #M0.Primitive.primCreatePath() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Primitive.primCreatePath()) == ##M0.Primitive.primCreatePath;
// Constructor $Is
axiom $Is(#M0.Primitive.primCreatePath(), Tclass.M0.Primitive());
// Constructor literal
axiom #M0.Primitive.primCreatePath() == Lit(#M0.Primitive.primCreatePath());
}

const unique ##M0.Primitive.primCreatePath: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Primitive.primCreatePath()) == ##M0.Primitive.primCreatePath;
}

function M0.Primitive.primCreatePath_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Primitive.primCreatePath_q(d) } 
  M0.Primitive.primCreatePath_q(d)
     <==> DatatypeCtorId(d) == ##M0.Primitive.primCreatePath);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Primitive.primCreatePath_q(d) } 
  M0.Primitive.primCreatePath_q(d) ==> d == #M0.Primitive.primCreatePath());

// Constructor function declaration
function #M0.Primitive.primExec() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Primitive.primExec()) == ##M0.Primitive.primExec;
// Constructor $Is
axiom $Is(#M0.Primitive.primExec(), Tclass.M0.Primitive());
// Constructor literal
axiom #M0.Primitive.primExec() == Lit(#M0.Primitive.primExec());
}

const unique ##M0.Primitive.primExec: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Primitive.primExec()) == ##M0.Primitive.primExec;
}

function M0.Primitive.primExec_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Primitive.primExec_q(d) } 
  M0.Primitive.primExec_q(d) <==> DatatypeCtorId(d) == ##M0.Primitive.primExec);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Primitive.primExec_q(d) } 
  M0.Primitive.primExec_q(d) ==> d == #M0.Primitive.primExec());

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M0.Primitive(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M0.Primitive())
     ==> $IsAlloc(d, Tclass.M0.Primitive(), $h));

// Depth-one case-split function
function $IsA#M0.Primitive(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M0.Primitive(d) } 
  $IsA#M0.Primitive(d)
     ==> M0.Primitive.primCreatePath_q(d) || M0.Primitive.primExec_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M0.Primitive.primExec_q(d), $Is(d, Tclass.M0.Primitive()) } 
    { M0.Primitive.primCreatePath_q(d), $Is(d, Tclass.M0.Primitive()) } 
  $Is(d, Tclass.M0.Primitive())
     ==> M0.Primitive.primCreatePath_q(d) || M0.Primitive.primExec_q(d));

// Datatype extensional equality declaration
function M0.Primitive#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M0.Primitive.primCreatePath
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Primitive#Equal(a, b), M0.Primitive.primCreatePath_q(a) } 
    { M0.Primitive#Equal(a, b), M0.Primitive.primCreatePath_q(b) } 
  M0.Primitive.primCreatePath_q(a) && M0.Primitive.primCreatePath_q(b)
     ==> M0.Primitive#Equal(a, b));

// Datatype extensional equality definition: #M0.Primitive.primExec
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Primitive#Equal(a, b), M0.Primitive.primExec_q(a) } 
    { M0.Primitive#Equal(a, b), M0.Primitive.primExec_q(b) } 
  M0.Primitive.primExec_q(a) && M0.Primitive.primExec_q(b)
     ==> M0.Primitive#Equal(a, b));

// Datatype extensionality axiom: M0.Primitive
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Primitive#Equal(a, b) } 
  M0.Primitive#Equal(a, b) <==> a == b);

const unique class.M0.Primitive: ClassName;

// Constructor function declaration
function #M0.Reason.rCompatibility() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Reason.rCompatibility()) == ##M0.Reason.rCompatibility;
// Constructor $Is
axiom $Is(#M0.Reason.rCompatibility(), Tclass.M0.Reason());
// Constructor literal
axiom #M0.Reason.rCompatibility() == Lit(#M0.Reason.rCompatibility());
}

const unique ##M0.Reason.rCompatibility: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Reason.rCompatibility()) == ##M0.Reason.rCompatibility;
}

function M0.Reason.rCompatibility_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Reason.rCompatibility_q(d) } 
  M0.Reason.rCompatibility_q(d)
     <==> DatatypeCtorId(d) == ##M0.Reason.rCompatibility);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Reason.rCompatibility_q(d) } 
  M0.Reason.rCompatibility_q(d) ==> d == #M0.Reason.rCompatibility());

// Constructor function declaration
function #M0.Reason.rValidity() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Reason.rValidity()) == ##M0.Reason.rValidity;
// Constructor $Is
axiom $Is(#M0.Reason.rValidity(), Tclass.M0.Reason());
// Constructor literal
axiom #M0.Reason.rValidity() == Lit(#M0.Reason.rValidity());
}

const unique ##M0.Reason.rValidity: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Reason.rValidity()) == ##M0.Reason.rValidity;
}

function M0.Reason.rValidity_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Reason.rValidity_q(d) } 
  M0.Reason.rValidity_q(d) <==> DatatypeCtorId(d) == ##M0.Reason.rValidity);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Reason.rValidity_q(d) } 
  M0.Reason.rValidity_q(d) ==> d == #M0.Reason.rValidity());

// Constructor function declaration
function #M0.Reason.rInconsistentCache() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Reason.rInconsistentCache())
   == ##M0.Reason.rInconsistentCache;
// Constructor $Is
axiom $Is(#M0.Reason.rInconsistentCache(), Tclass.M0.Reason());
// Constructor literal
axiom #M0.Reason.rInconsistentCache() == Lit(#M0.Reason.rInconsistentCache());
}

const unique ##M0.Reason.rInconsistentCache: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#M0.Reason.rInconsistentCache())
   == ##M0.Reason.rInconsistentCache;
}

function M0.Reason.rInconsistentCache_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Reason.rInconsistentCache_q(d) } 
  M0.Reason.rInconsistentCache_q(d)
     <==> DatatypeCtorId(d) == ##M0.Reason.rInconsistentCache);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Reason.rInconsistentCache_q(d) } 
  M0.Reason.rInconsistentCache_q(d) ==> d == #M0.Reason.rInconsistentCache());

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass.M0.Reason(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass.M0.Reason())
     ==> $IsAlloc(d, Tclass.M0.Reason(), $h));

// Depth-one case-split function
function $IsA#M0.Reason(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M0.Reason(d) } 
  $IsA#M0.Reason(d)
     ==> M0.Reason.rCompatibility_q(d)
       || M0.Reason.rValidity_q(d)
       || M0.Reason.rInconsistentCache_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { M0.Reason.rInconsistentCache_q(d), $Is(d, Tclass.M0.Reason()) } 
    { M0.Reason.rValidity_q(d), $Is(d, Tclass.M0.Reason()) } 
    { M0.Reason.rCompatibility_q(d), $Is(d, Tclass.M0.Reason()) } 
  $Is(d, Tclass.M0.Reason())
     ==> M0.Reason.rCompatibility_q(d)
       || M0.Reason.rValidity_q(d)
       || M0.Reason.rInconsistentCache_q(d));

// Datatype extensional equality declaration
function M0.Reason#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M0.Reason.rCompatibility
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Reason#Equal(a, b), M0.Reason.rCompatibility_q(a) } 
    { M0.Reason#Equal(a, b), M0.Reason.rCompatibility_q(b) } 
  M0.Reason.rCompatibility_q(a) && M0.Reason.rCompatibility_q(b)
     ==> M0.Reason#Equal(a, b));

// Datatype extensional equality definition: #M0.Reason.rValidity
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Reason#Equal(a, b), M0.Reason.rValidity_q(a) } 
    { M0.Reason#Equal(a, b), M0.Reason.rValidity_q(b) } 
  M0.Reason.rValidity_q(a) && M0.Reason.rValidity_q(b) ==> M0.Reason#Equal(a, b));

// Datatype extensional equality definition: #M0.Reason.rInconsistentCache
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Reason#Equal(a, b), M0.Reason.rInconsistentCache_q(a) } 
    { M0.Reason#Equal(a, b), M0.Reason.rInconsistentCache_q(b) } 
  M0.Reason.rInconsistentCache_q(a) && M0.Reason.rInconsistentCache_q(b)
     ==> M0.Reason#Equal(a, b));

// Datatype extensionality axiom: M0.Reason
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Reason#Equal(a, b) } 
  M0.Reason#Equal(a, b) <==> a == b);

const unique class.M0.Reason: ClassName;

const unique class.M0.Path: ClassName;

const unique class.M0.Artifact: ClassName;

const unique class.M0.Identifier: ClassName;

// Constructor function declaration
function #M0.Tuple.Pair(Box, Box) : DatatypeType;

const unique ##M0.Tuple.Pair: DtCtorId
uses {
// Constructor identifier
axiom (forall a#145#0#0: Box, a#145#1#0: Box :: 
  { #M0.Tuple.Pair(a#145#0#0, a#145#1#0) } 
  DatatypeCtorId(#M0.Tuple.Pair(a#145#0#0, a#145#1#0)) == ##M0.Tuple.Pair);
}

function M0.Tuple.Pair_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Tuple.Pair_q(d) } 
  M0.Tuple.Pair_q(d) <==> DatatypeCtorId(d) == ##M0.Tuple.Pair);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Tuple.Pair_q(d) } 
  M0.Tuple.Pair_q(d)
     ==> (exists a#146#0#0: Box, a#146#1#0: Box :: 
      d == #M0.Tuple.Pair(a#146#0#0, a#146#1#0)));

// Constructor $Is
axiom (forall M0.Tuple$A: Ty, M0.Tuple$B: Ty, a#147#0#0: Box, a#147#1#0: Box :: 
  { $Is(#M0.Tuple.Pair(a#147#0#0, a#147#1#0), Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B)) } 
  $Is(#M0.Tuple.Pair(a#147#0#0, a#147#1#0), Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B))
     <==> $IsBox(a#147#0#0, M0.Tuple$A) && $IsBox(a#147#1#0, M0.Tuple$B));

// Constructor $IsAlloc
axiom (forall M0.Tuple$A: Ty, M0.Tuple$B: Ty, a#147#0#0: Box, a#147#1#0: Box, $h: Heap :: 
  { $IsAlloc(#M0.Tuple.Pair(a#147#0#0, a#147#1#0), 
      Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Tuple.Pair(a#147#0#0, a#147#1#0), 
        Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B), 
        $h)
       <==> $IsAllocBox(a#147#0#0, M0.Tuple$A, $h) && $IsAllocBox(a#147#1#0, M0.Tuple$B, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, M0.Tuple$A: Ty, $h: Heap :: 
  { $IsAllocBox(M0.Tuple.fst(d), M0.Tuple$A, $h) } 
  $IsGoodHeap($h)
       && 
      M0.Tuple.Pair_q(d)
       && (exists M0.Tuple$B: Ty :: 
        { $IsAlloc(d, Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B), $h) } 
        $IsAlloc(d, Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B), $h))
     ==> $IsAllocBox(M0.Tuple.fst(d), M0.Tuple$A, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, M0.Tuple$B: Ty, $h: Heap :: 
  { $IsAllocBox(M0.Tuple.snd(d), M0.Tuple$B, $h) } 
  $IsGoodHeap($h)
       && 
      M0.Tuple.Pair_q(d)
       && (exists M0.Tuple$A: Ty :: 
        { $IsAlloc(d, Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B), $h) } 
        $IsAlloc(d, Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B), $h))
     ==> $IsAllocBox(M0.Tuple.snd(d), M0.Tuple$B, $h));

// Constructor literal
axiom (forall a#148#0#0: Box, a#148#1#0: Box :: 
  { #M0.Tuple.Pair(Lit(a#148#0#0), Lit(a#148#1#0)) } 
  #M0.Tuple.Pair(Lit(a#148#0#0), Lit(a#148#1#0))
     == Lit(#M0.Tuple.Pair(a#148#0#0, a#148#1#0)));

function M0.Tuple.fst(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#149#0#0: Box, a#149#1#0: Box :: 
  { #M0.Tuple.Pair(a#149#0#0, a#149#1#0) } 
  M0.Tuple.fst(#M0.Tuple.Pair(a#149#0#0, a#149#1#0)) == a#149#0#0);

// Inductive rank
axiom (forall a#150#0#0: Box, a#150#1#0: Box :: 
  { #M0.Tuple.Pair(a#150#0#0, a#150#1#0) } 
  BoxRank(a#150#0#0) < DtRank(#M0.Tuple.Pair(a#150#0#0, a#150#1#0)));

function M0.Tuple.snd(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#151#0#0: Box, a#151#1#0: Box :: 
  { #M0.Tuple.Pair(a#151#0#0, a#151#1#0) } 
  M0.Tuple.snd(#M0.Tuple.Pair(a#151#0#0, a#151#1#0)) == a#151#1#0);

// Inductive rank
axiom (forall a#152#0#0: Box, a#152#1#0: Box :: 
  { #M0.Tuple.Pair(a#152#0#0, a#152#1#0) } 
  BoxRank(a#152#1#0) < DtRank(#M0.Tuple.Pair(a#152#0#0, a#152#1#0)));

// Depth-one case-split function
function $IsA#M0.Tuple(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M0.Tuple(d) } 
  $IsA#M0.Tuple(d) ==> M0.Tuple.Pair_q(d));

// Questionmark data type disjunctivity
axiom (forall M0.Tuple$A: Ty, M0.Tuple$B: Ty, d: DatatypeType :: 
  { M0.Tuple.Pair_q(d), $Is(d, Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B)) } 
  $Is(d, Tclass.M0.Tuple(M0.Tuple$A, M0.Tuple$B)) ==> M0.Tuple.Pair_q(d));

// Datatype extensional equality declaration
function M0.Tuple#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M0.Tuple.Pair
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Tuple#Equal(a, b) } 
  M0.Tuple#Equal(a, b)
     <==> M0.Tuple.fst(a) == M0.Tuple.fst(b) && M0.Tuple.snd(a) == M0.Tuple.snd(b));

// Datatype extensionality axiom: M0.Tuple
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Tuple#Equal(a, b) } 
  M0.Tuple#Equal(a, b) <==> a == b);

const unique class.M0.Tuple: ClassName;

// Constructor function declaration
function #M0.Triple.Tri(Box, Box, Box) : DatatypeType;

const unique ##M0.Triple.Tri: DtCtorId
uses {
// Constructor identifier
axiom (forall a#153#0#0: Box, a#153#1#0: Box, a#153#2#0: Box :: 
  { #M0.Triple.Tri(a#153#0#0, a#153#1#0, a#153#2#0) } 
  DatatypeCtorId(#M0.Triple.Tri(a#153#0#0, a#153#1#0, a#153#2#0))
     == ##M0.Triple.Tri);
}

function M0.Triple.Tri_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { M0.Triple.Tri_q(d) } 
  M0.Triple.Tri_q(d) <==> DatatypeCtorId(d) == ##M0.Triple.Tri);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { M0.Triple.Tri_q(d) } 
  M0.Triple.Tri_q(d)
     ==> (exists a#154#0#0: Box, a#154#1#0: Box, a#154#2#0: Box :: 
      d == #M0.Triple.Tri(a#154#0#0, a#154#1#0, a#154#2#0)));

// Constructor $Is
axiom (forall M0.Triple$A: Ty, 
    M0.Triple$B: Ty, 
    M0.Triple$C: Ty, 
    a#155#0#0: Box, 
    a#155#1#0: Box, 
    a#155#2#0: Box :: 
  { $Is(#M0.Triple.Tri(a#155#0#0, a#155#1#0, a#155#2#0), 
      Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C)) } 
  $Is(#M0.Triple.Tri(a#155#0#0, a#155#1#0, a#155#2#0), 
      Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C))
     <==> $IsBox(a#155#0#0, M0.Triple$A)
       && $IsBox(a#155#1#0, M0.Triple$B)
       && $IsBox(a#155#2#0, M0.Triple$C));

// Constructor $IsAlloc
axiom (forall M0.Triple$A: Ty, 
    M0.Triple$B: Ty, 
    M0.Triple$C: Ty, 
    a#155#0#0: Box, 
    a#155#1#0: Box, 
    a#155#2#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#M0.Triple.Tri(a#155#0#0, a#155#1#0, a#155#2#0), 
      Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#M0.Triple.Tri(a#155#0#0, a#155#1#0, a#155#2#0), 
        Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C), 
        $h)
       <==> $IsAllocBox(a#155#0#0, M0.Triple$A, $h)
         && $IsAllocBox(a#155#1#0, M0.Triple$B, $h)
         && $IsAllocBox(a#155#2#0, M0.Triple$C, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, M0.Triple$A: Ty, $h: Heap :: 
  { $IsAllocBox(M0.Triple._0(d), M0.Triple$A, $h) } 
  $IsGoodHeap($h)
       && 
      M0.Triple.Tri_q(d)
       && (exists M0.Triple$B: Ty, M0.Triple$C: Ty :: 
        { $IsAlloc(d, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C), $h) } 
        $IsAlloc(d, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C), $h))
     ==> $IsAllocBox(M0.Triple._0(d), M0.Triple$A, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, M0.Triple$B: Ty, $h: Heap :: 
  { $IsAllocBox(M0.Triple._1(d), M0.Triple$B, $h) } 
  $IsGoodHeap($h)
       && 
      M0.Triple.Tri_q(d)
       && (exists M0.Triple$A: Ty, M0.Triple$C: Ty :: 
        { $IsAlloc(d, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C), $h) } 
        $IsAlloc(d, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C), $h))
     ==> $IsAllocBox(M0.Triple._1(d), M0.Triple$B, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, M0.Triple$C: Ty, $h: Heap :: 
  { $IsAllocBox(M0.Triple._2(d), M0.Triple$C, $h) } 
  $IsGoodHeap($h)
       && 
      M0.Triple.Tri_q(d)
       && (exists M0.Triple$A: Ty, M0.Triple$B: Ty :: 
        { $IsAlloc(d, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C), $h) } 
        $IsAlloc(d, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C), $h))
     ==> $IsAllocBox(M0.Triple._2(d), M0.Triple$C, $h));

// Constructor literal
axiom (forall a#156#0#0: Box, a#156#1#0: Box, a#156#2#0: Box :: 
  { #M0.Triple.Tri(Lit(a#156#0#0), Lit(a#156#1#0), Lit(a#156#2#0)) } 
  #M0.Triple.Tri(Lit(a#156#0#0), Lit(a#156#1#0), Lit(a#156#2#0))
     == Lit(#M0.Triple.Tri(a#156#0#0, a#156#1#0, a#156#2#0)));

function M0.Triple._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#157#0#0: Box, a#157#1#0: Box, a#157#2#0: Box :: 
  { #M0.Triple.Tri(a#157#0#0, a#157#1#0, a#157#2#0) } 
  M0.Triple._0(#M0.Triple.Tri(a#157#0#0, a#157#1#0, a#157#2#0)) == a#157#0#0);

// Inductive rank
axiom (forall a#158#0#0: Box, a#158#1#0: Box, a#158#2#0: Box :: 
  { #M0.Triple.Tri(a#158#0#0, a#158#1#0, a#158#2#0) } 
  BoxRank(a#158#0#0) < DtRank(#M0.Triple.Tri(a#158#0#0, a#158#1#0, a#158#2#0)));

function M0.Triple._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#159#0#0: Box, a#159#1#0: Box, a#159#2#0: Box :: 
  { #M0.Triple.Tri(a#159#0#0, a#159#1#0, a#159#2#0) } 
  M0.Triple._1(#M0.Triple.Tri(a#159#0#0, a#159#1#0, a#159#2#0)) == a#159#1#0);

// Inductive rank
axiom (forall a#160#0#0: Box, a#160#1#0: Box, a#160#2#0: Box :: 
  { #M0.Triple.Tri(a#160#0#0, a#160#1#0, a#160#2#0) } 
  BoxRank(a#160#1#0) < DtRank(#M0.Triple.Tri(a#160#0#0, a#160#1#0, a#160#2#0)));

function M0.Triple._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#161#0#0: Box, a#161#1#0: Box, a#161#2#0: Box :: 
  { #M0.Triple.Tri(a#161#0#0, a#161#1#0, a#161#2#0) } 
  M0.Triple._2(#M0.Triple.Tri(a#161#0#0, a#161#1#0, a#161#2#0)) == a#161#2#0);

// Inductive rank
axiom (forall a#162#0#0: Box, a#162#1#0: Box, a#162#2#0: Box :: 
  { #M0.Triple.Tri(a#162#0#0, a#162#1#0, a#162#2#0) } 
  BoxRank(a#162#2#0) < DtRank(#M0.Triple.Tri(a#162#0#0, a#162#1#0, a#162#2#0)));

// Depth-one case-split function
function $IsA#M0.Triple(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#M0.Triple(d) } 
  $IsA#M0.Triple(d) ==> M0.Triple.Tri_q(d));

// Questionmark data type disjunctivity
axiom (forall M0.Triple$A: Ty, M0.Triple$B: Ty, M0.Triple$C: Ty, d: DatatypeType :: 
  { M0.Triple.Tri_q(d), $Is(d, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C)) } 
  $Is(d, Tclass.M0.Triple(M0.Triple$A, M0.Triple$B, M0.Triple$C))
     ==> M0.Triple.Tri_q(d));

// Datatype extensional equality declaration
function M0.Triple#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #M0.Triple.Tri
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Triple#Equal(a, b) } 
  M0.Triple#Equal(a, b)
     <==> M0.Triple._0(a) == M0.Triple._0(b)
       && M0.Triple._1(a) == M0.Triple._1(b)
       && M0.Triple._2(a) == M0.Triple._2(b));

// Datatype extensionality axiom: M0.Triple
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { M0.Triple#Equal(a, b) } 
  M0.Triple#Equal(a, b) <==> a == b);

const unique class.M0.Triple: ClassName;

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$_#Func2: TyTagFamily;

const unique tytagFamily$_#PartialFunc2: TyTagFamily;

const unique tytagFamily$_#TotalFunc2: TyTagFamily;

const unique tytagFamily$_#Func4: TyTagFamily;

const unique tytagFamily$_#PartialFunc4: TyTagFamily;

const unique tytagFamily$_#TotalFunc4: TyTagFamily;

const unique tytagFamily$_#Func3: TyTagFamily;

const unique tytagFamily$_#PartialFunc3: TyTagFamily;

const unique tytagFamily$_#TotalFunc3: TyTagFamily;

const unique tytagFamily$_#Func5: TyTagFamily;

const unique tytagFamily$_#PartialFunc5: TyTagFamily;

const unique tytagFamily$_#TotalFunc5: TyTagFamily;

const unique tytagFamily$Expression: TyTagFamily;

const unique tytagFamily$Tuple: TyTagFamily;

const unique tytagFamily$Program: TyTagFamily;

const unique tytagFamily$Statement: TyTagFamily;

const unique tytagFamily$Primitive: TyTagFamily;

const unique tytagFamily$Triple: TyTagFamily;

const unique tytagFamily$Literal: TyTagFamily;

const unique tytagFamily$Reason: TyTagFamily;
