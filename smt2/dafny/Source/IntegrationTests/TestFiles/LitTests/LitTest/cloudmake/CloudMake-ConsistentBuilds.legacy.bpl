// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy-@PROC@.smt2 /normalizeNames:0 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2
     && TagFamily(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == tytagFamily$_#Func2);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx) } 
  Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx)
     == Set#IsMember(rd[heap, bx0, bx1], bx));

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r)) } 
            r != null && Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hPartialFunc2
     && TagFamily(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#PartialFunc2);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hTotalFunc2
     && TagFamily(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#TotalFunc2);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc3: TyTag;

// Tclass._System.___hFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hFunc3
     && TagFamily(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#Func3);

function Tclass._System.___hFunc3_0(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_0(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hFunc3_1(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_1(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hFunc3_2(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_2(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hFunc3_3(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_3(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)));

function Handle3([Heap,Box,Box,Box]Box, [Heap,Box,Box,Box]bool, [Heap,Box,Box,Box]Set)
   : HandleType;

function Apply3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Box;

function Requires3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : bool;

function Reads3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)
     == h[heap, bx0, bx1, bx2]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  r[heap, bx0, bx1, bx2]
     ==> Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx: Box :: 
  { Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx) } 
  Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2], bx));

function {:inline} Requires3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

function {:inline} Reads3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// empty-reads property for Reads3 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     ==> (Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
       <==> Set#Equal(Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2), Set#Empty(): Set)));

// empty-reads property for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
     ==> Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, u0: Ty, u1: Ty, u2: Ty, u3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)), $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, t3) } { $IsBox(bx, u3) } 
        $IsBox(bx, t3) ==> $IsBox(bx, u3))
     ==> $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box :: 
        { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
          { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r)) } 
            r != null && Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsAllocBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3, h)));

function Tclass._System.___hPartialFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc3: TyTag;

// Tclass._System.___hPartialFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hPartialFunc3
     && TagFamily(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#PartialFunc3);

function Tclass._System.___hPartialFunc3_0(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_0(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc3_1(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_1(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc3_2(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_2(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc3_3(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_3(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Set#Equal(Reads3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hTotalFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc3: TyTag;

// Tclass._System.___hTotalFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hTotalFunc3
     && TagFamily(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#TotalFunc3);

function Tclass._System.___hTotalFunc3_0(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_0(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc3_1(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_1(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc3_2(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_2(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc3_3(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_3(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Requires3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc4: TyTag;

// Tclass._System.___hFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hFunc4
     && TagFamily(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#Func4);

function Tclass._System.___hFunc4_0(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_0(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hFunc4_1(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_1(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hFunc4_2(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_2(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hFunc4_3(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_3(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hFunc4_4(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_4(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

function Handle4([Heap,Box,Box,Box,Box]Box, [Heap,Box,Box,Box,Box]bool, [Heap,Box,Box,Box,Box]Set)
   : HandleType;

function Apply4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Box;

function Requires4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : bool;

function Reads4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)
     == h[heap, bx0, bx1, bx2, bx3]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  r[heap, bx0, bx1, bx2, bx3]
     ==> Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx: Box :: 
  { Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx) } 
  Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3], bx));

function {:inline} Requires4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

function {:inline} Reads4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// empty-reads property for Reads4 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     ==> (Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
       <==> Set#Equal(Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)));

// empty-reads property for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
     ==> Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)), $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, t4) } { $IsBox(bx, u4) } 
        $IsBox(bx, t4) ==> $IsBox(bx, u4))
     ==> $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
        { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
          { Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsAllocBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4, h)));

function Tclass._System.___hPartialFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc4: TyTag;

// Tclass._System.___hPartialFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hPartialFunc4
     && TagFamily(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#PartialFunc4);

function Tclass._System.___hPartialFunc4_0(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_0(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc4_1(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_1(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc4_2(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_2(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc4_3(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_3(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc4_4(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_4(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Set#Equal(Reads4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hTotalFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc4: TyTag;

// Tclass._System.___hTotalFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hTotalFunc4
     && TagFamily(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#TotalFunc4);

function Tclass._System.___hTotalFunc4_0(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_0(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc4_1(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_1(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc4_2(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_2(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc4_3(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_3(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc4_4(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_4(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Requires4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hFunc6(Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc6: TyTag;

// Tclass._System.___hFunc6 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tag(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == Tagclass._System.___hFunc6
     && TagFamily(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == tytagFamily$_#Func6);

function Tclass._System.___hFunc6_0(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_0(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T0);

function Tclass._System.___hFunc6_1(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_1(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T1);

function Tclass._System.___hFunc6_2(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_2(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T2);

function Tclass._System.___hFunc6_3(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_3(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T3);

function Tclass._System.___hFunc6_4(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_4(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T4);

function Tclass._System.___hFunc6_5(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_5(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T5);

function Tclass._System.___hFunc6_6(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_6(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)));

function Handle6([Heap,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply6(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box, Box)
   : Box;

function Requires6(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box, Box)
   : bool;

function Reads6(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box, Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { Apply6(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      heap, 
      Handle6(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5) } 
  Apply6(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      heap, 
      Handle6(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { Requires6(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      heap, 
      Handle6(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5]
     ==> Requires6(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      heap, 
      Handle6(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx: Box :: 
  { Set#IsMember(Reads6(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        heap, 
        Handle6(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5), 
      bx) } 
  Set#IsMember(Reads6(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        heap, 
        Handle6(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5], bx));

function {:inline} Requires6#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box)
   : bool
{
  true
}

function {:inline} Reads6#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box)
   : bool
{
  true
}

// frame axiom for Reads6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Reads6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Requires6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Requires6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Requires6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Requires6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Requires6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Requires6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Apply6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Apply6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Apply6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Apply6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Apply6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Apply6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// empty-reads property for Reads6 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { Reads6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5), $IsGoodHeap(heap) } 
    { Reads6(t0, t1, t2, t3, t4, t5, t6, heap, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
     ==> (Set#Equal(Reads6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads6(t0, t1, t2, t3, t4, t5, t6, heap, f, bx0, bx1, bx2, bx3, bx4, bx5), 
        Set#Empty(): Set)));

// empty-reads property for Requires6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { Requires6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5), $IsGoodHeap(heap) } 
    { Requires6(t0, t1, t2, t3, t4, t5, t6, heap, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && Set#Equal(Reads6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5), 
        Set#Empty(): Set)
     ==> Requires6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Requires6(t0, t1, t2, t3, t4, t5, t6, heap, f, bx0, bx1, bx2, bx3, bx4, bx5));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, t6: Ty :: 
  { $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6)) } 
  $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box :: 
      { Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && Requires6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5)
         ==> $IsBox(Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5), t6)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty :: 
  { $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6)), $Is(f, Tclass._System.___hFunc6(u0, u1, u2, u3, u4, u5, u6)) } 
  $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, t6) } { $IsBox(bx, u6) } 
        $IsBox(bx, t6) ==> $IsBox(bx, u6))
     ==> $Is(f, Tclass._System.___hFunc6(u0, u1, u2, u3, u4, u5, u6)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, t6: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box :: 
        { Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
          { Reads6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && Requires6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, t6: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box :: 
      { Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && Requires6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5)
         ==> $IsAllocBox(Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5), t6, h)));

function Tclass._System.___hPartialFunc6(Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc6: TyTag;

// Tclass._System.___hPartialFunc6 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tag(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == Tagclass._System.___hPartialFunc6
     && TagFamily(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == tytagFamily$_#PartialFunc6);

function Tclass._System.___hPartialFunc6_0(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_0(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc6_1(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_1(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc6_2(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_2(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc6_3(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_3(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc6_4(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_4(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc6_5(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_5(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T5);

function Tclass._System.___hPartialFunc6_6(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_6(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)));

// $Is axiom for subset type _System._#PartialFunc6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box, x5#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
           ==> Set#Equal(Reads6(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), 
      $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), $h));

function Tclass._System.___hTotalFunc6(Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc6: TyTag;

// Tclass._System.___hTotalFunc6 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tag(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == Tagclass._System.___hTotalFunc6
     && TagFamily(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == tytagFamily$_#TotalFunc6);

function Tclass._System.___hTotalFunc6_0(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_0(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc6_1(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_1(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc6_2(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_2(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc6_3(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_3(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc6_4(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_4(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc6_5(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_5(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T5);

function Tclass._System.___hTotalFunc6_6(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_6(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)));

// $Is axiom for subset type _System._#TotalFunc6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box, x5#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
           ==> Requires6(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), 
      $h));

const unique class._module.__default: ClassName;

// function declaration for _module._default.GetSt
function _module.__default.GetSt(p#0: DatatypeType, st#0: Box) : Box
uses {
// consequence axiom for _module.__default.GetSt
axiom 1 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, st#0: Box :: 
    { _module.__default.GetSt(p#0, st#0) } 
    _module.__default.GetSt#canCall(p#0, st#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass._module.Path())
           && $IsBox(st#0, Tclass._module.State()))
       ==> $IsBox(_module.__default.GetSt(p#0, st#0), Tclass._module.Artifact()));
}

function _module.__default.GetSt#canCall(p#0: DatatypeType, st#0: Box) : bool;

function Tclass._module.Path() : Ty
uses {
// Tclass._module.Path Tag
axiom Tag(Tclass._module.Path()) == Tagclass._module.Path
   && TagFamily(Tclass._module.Path()) == tytagFamily$Path;
}

const unique Tagclass._module.Path: TyTag;

// Box/unbox axiom for Tclass._module.Path
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Path()) } 
  $IsBox(bx, Tclass._module.Path())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.Path()));

function Tclass._module.State() : Ty
uses {
axiom $AlwaysAllocated(Tclass._module.State());
}

function Tclass._module.Artifact() : Ty
uses {
axiom $AlwaysAllocated(Tclass._module.Artifact());
}

function _module.__default.GetSt#requires(DatatypeType, Box) : bool;

// #requires axiom for _module.__default.GetSt
axiom (forall p#0: DatatypeType, st#0: Box :: 
  { _module.__default.GetSt#requires(p#0, st#0) } 
  $Is(p#0, Tclass._module.Path()) && $IsBox(st#0, Tclass._module.State())
     ==> _module.__default.GetSt#requires(p#0, st#0) == true);

procedure {:verboseName "GetSt (well-formedness)"} CheckWellformed$$_module.__default.GetSt(p#0: DatatypeType where $Is(p#0, Tclass._module.Path()), 
    st#0: Box where $IsBox(st#0, Tclass._module.State()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.SetSt
function _module.__default.SetSt(p#0: DatatypeType, a#0: Box, st#0: Box) : Box
uses {
// consequence axiom for _module.__default.SetSt
axiom 1 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType, a#0: Box, st#0: Box :: 
    { _module.__default.SetSt(p#0, a#0, st#0) } 
    _module.__default.SetSt#canCall(p#0, a#0, st#0)
         || (1 < $FunctionContextHeight
           && 
          $Is(p#0, Tclass._module.Path())
           && $IsBox(a#0, Tclass._module.Artifact())
           && $IsBox(st#0, Tclass._module.State()))
       ==> $IsBox(_module.__default.SetSt(p#0, a#0, st#0), Tclass._module.State()));
}

function _module.__default.SetSt#canCall(p#0: DatatypeType, a#0: Box, st#0: Box) : bool;

function _module.__default.SetSt#requires(DatatypeType, Box, Box) : bool;

// #requires axiom for _module.__default.SetSt
axiom (forall p#0: DatatypeType, a#0: Box, st#0: Box :: 
  { _module.__default.SetSt#requires(p#0, a#0, st#0) } 
  $Is(p#0, Tclass._module.Path())
       && $IsBox(a#0, Tclass._module.Artifact())
       && $IsBox(st#0, Tclass._module.State())
     ==> _module.__default.SetSt#requires(p#0, a#0, st#0) == true);

procedure {:verboseName "SetSt (well-formedness)"} CheckWellformed$$_module.__default.SetSt(p#0: DatatypeType where $Is(p#0, Tclass._module.Path()), 
    a#0: Box where $IsBox(a#0, Tclass._module.Artifact()), 
    st#0: Box where $IsBox(st#0, Tclass._module.State()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.DomSt
function _module.__default.DomSt(st#0: Box) : Set
uses {
// consequence axiom for _module.__default.DomSt
axiom 1 <= $FunctionContextHeight
   ==> (forall st#0: Box :: 
    { _module.__default.DomSt(st#0) } 
    _module.__default.DomSt#canCall(st#0)
         || (1 < $FunctionContextHeight && $IsBox(st#0, Tclass._module.State()))
       ==> $Is(_module.__default.DomSt(st#0), TSet(Tclass._module.Path())));
}

function _module.__default.DomSt#canCall(st#0: Box) : bool;

function _module.__default.DomSt#requires(Box) : bool;

// #requires axiom for _module.__default.DomSt
axiom (forall st#0: Box :: 
  { _module.__default.DomSt#requires(st#0) } 
  $IsBox(st#0, Tclass._module.State())
     ==> _module.__default.DomSt#requires(st#0) == true);

procedure {:verboseName "DomSt (well-formedness)"} CheckWellformed$$_module.__default.DomSt(st#0: Box where $IsBox(st#0, Tclass._module.State()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.Restrict
function _module.__default.Restrict(paths#0: Set, st#0: Box) : Box
uses {
// consequence axiom for _module.__default.Restrict
axiom 2 <= $FunctionContextHeight
   ==> (forall paths#0: Set, st#0: Box :: 
    { _module.__default.Restrict(paths#0, st#0) } 
    _module.__default.Restrict#canCall(paths#0, st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(paths#0, TSet(Tclass._module.Path()))
           && $IsBox(st#0, Tclass._module.State())
           && Set#Subset(paths#0, _module.__default.DomSt(st#0)))
       ==> (var st'#0 := _module.__default.Restrict(paths#0, st#0); 
          Set#Equal(_module.__default.DomSt(st'#0), paths#0)
             && (forall p#0: DatatypeType :: 
              { _module.__default.GetSt(p#0, st'#0) } 
                { _module.__default.GetSt(p#0, st#0) } 
                { Set#IsMember(paths#0, $Box(p#0)) } 
              $Is(p#0, Tclass._module.Path())
                 ==> 
                Set#IsMember(paths#0, $Box(p#0))
                 ==> _module.__default.GetSt(p#0, st#0) == _module.__default.GetSt(p#0, st'#0)))
         && $IsBox(_module.__default.Restrict(paths#0, st#0), Tclass._module.State()));
}

function _module.__default.Restrict#canCall(paths#0: Set, st#0: Box) : bool;

function _module.__default.Restrict#requires(Set, Box) : bool;

// #requires axiom for _module.__default.Restrict
axiom (forall paths#0: Set, st#0: Box :: 
  { _module.__default.Restrict#requires(paths#0, st#0) } 
  $Is(paths#0, TSet(Tclass._module.Path()))
       && $IsBox(st#0, Tclass._module.State())
     ==> _module.__default.Restrict#requires(paths#0, st#0)
       == Set#Subset(paths#0, _module.__default.DomSt(st#0)));

procedure {:verboseName "Restrict (well-formedness)"} CheckWellformed$$_module.__default.Restrict(paths#0: Set where $Is(paths#0, TSet(Tclass._module.Path())), 
    st#0: Box where $IsBox(st#0, Tclass._module.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id0"} (var st'#1 := _module.__default.Restrict(paths#0, st#0); 
    Set#Equal(_module.__default.DomSt(st'#1), paths#0));
  ensures {:id "id1"} (var st'#1 := _module.__default.Restrict(paths#0, st#0); 
    (forall p#1: DatatypeType :: 
      { _module.__default.GetSt(p#1, st'#1) } 
        { _module.__default.GetSt(p#1, st#0) } 
        { Set#IsMember(paths#0, $Box(p#1)) } 
      $Is(p#1, Tclass._module.Path())
         ==> 
        Set#IsMember(paths#0, $Box(p#1))
         ==> _module.__default.GetSt(p#1, st#0) == _module.__default.GetSt(p#1, st'#1)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Restrict (well-formedness)"} CheckWellformed$$_module.__default.Restrict(paths#0: Set, st#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##st#0: Box;
  var st'#Z#0: Box;
  var let#0#0#0: Box;
  var ##paths#0: Set;
  var ##st#1: Box;
  var ##st#2: Box;
  var p#2: DatatypeType;
  var ##p#0: DatatypeType;
  var ##st#3: Box;
  var ##p#1: DatatypeType;
  var ##st#4: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
    assume _module.__default.DomSt#canCall(st#0);
    assume {:id "id2"} Set#Subset(paths#0, _module.__default.DomSt(st#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(_module.__default.Restrict(paths#0, st#0), Tclass._module.State());
        havoc st'#Z#0;
        ##paths#0 := paths#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#0, TSet(Tclass._module.Path()), $Heap);
        ##st#1 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
        assert {:id "id3"} {:subsumption 0} Set#Subset(##paths#0, _module.__default.DomSt(##st#1));
        assume Set#Subset(##paths#0, _module.__default.DomSt(##st#1));
        assert {:id "id4"} (Set#Equal(paths#0, paths#0) && st#0 == st#0)
           || (Set#Subset(##paths#0, paths#0) && !Set#Subset(paths#0, ##paths#0));
        assume (Set#Equal(paths#0, paths#0) && st#0 == st#0)
           || _module.__default.Restrict#canCall(paths#0, st#0);
        assume {:id "id5"} let#0#0#0 == _module.__default.Restrict(paths#0, st#0);
        assume _module.__default.Restrict#canCall(paths#0, st#0);
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0#0#0, Tclass._module.State());
        assume {:id "id6"} st'#Z#0 == let#0#0#0;
        ##st#2 := st'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(st'#Z#0);
        if (Set#Equal(_module.__default.DomSt(st'#Z#0), paths#0))
        {
            // Begin Comprehension WF check
            havoc p#2;
            if ($Is(p#2, Tclass._module.Path()) && $IsAlloc(p#2, Tclass._module.Path(), $Heap))
            {
                if (Set#IsMember(paths#0, $Box(p#2)))
                {
                    ##p#0 := p#2;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                    ##st#3 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#3, Tclass._module.State(), $Heap);
                    assume _module.__default.GetSt#canCall(p#2, st#0);
                    ##p#1 := p#2;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1, Tclass._module.Path(), $Heap);
                    ##st#4 := st'#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#4, Tclass._module.State(), $Heap);
                    assume _module.__default.GetSt#canCall(p#2, st'#Z#0);
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id7"} (var st'#1 := _module.__default.Restrict(paths#0, st#0); 
          Set#Equal(_module.__default.DomSt(st'#1), paths#0)
             && (forall p#1: DatatypeType :: 
              { _module.__default.GetSt(p#1, st'#1) } 
                { _module.__default.GetSt(p#1, st#0) } 
                { Set#IsMember(paths#0, $Box(p#1)) } 
              $Is(p#1, Tclass._module.Path())
                 ==> 
                Set#IsMember(paths#0, $Box(p#1))
                 ==> _module.__default.GetSt(p#1, st#0) == _module.__default.GetSt(p#1, st'#1)));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module._default.Union
function _module.__default.Union(st#0: Box, st'#0: Box) : Box
uses {
// consequence axiom for _module.__default.Union
axiom 2 <= $FunctionContextHeight
   ==> (forall st#0: Box, st'#0: Box :: 
    { _module.__default.Union(st#0, st'#0) } 
    _module.__default.Union#canCall(st#0, st'#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(st#0, Tclass._module.State())
           && $IsBox(st'#0, Tclass._module.State()))
       ==> (var result#0 := _module.__default.Union(st#0, st'#0); 
          Set#Equal(_module.__default.DomSt(result#0), 
              Set#Union(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#0)))
             && (forall p#0: DatatypeType :: 
              { _module.__default.GetSt(p#0, st'#0) } 
                { Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#0)) } 
                { _module.__default.GetSt(p#0, st#0) } 
                { _module.__default.GetSt(p#0, result#0) } 
                { Set#IsMember(_module.__default.DomSt(st#0), $Box(p#0)) } 
                { Set#IsMember(_module.__default.DomSt(result#0), $Box(p#0)) } 
              $Is(p#0, Tclass._module.Path())
                 ==> (Set#IsMember(_module.__default.DomSt(result#0), $Box(p#0))
                     ==> 
                    Set#IsMember(_module.__default.DomSt(st#0), $Box(p#0))
                     ==> _module.__default.GetSt(p#0, result#0) == _module.__default.GetSt(p#0, st#0))
                   && (Set#IsMember(_module.__default.DomSt(result#0), $Box(p#0))
                     ==> 
                    Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#0))
                     ==> _module.__default.GetSt(p#0, result#0) == _module.__default.GetSt(p#0, st'#0))))
         && $IsBox(_module.__default.Union(st#0, st'#0), Tclass._module.State()));
}

function _module.__default.Union#canCall(st#0: Box, st'#0: Box) : bool;

function _module.__default.Union#requires(Box, Box) : bool;

// #requires axiom for _module.__default.Union
axiom (forall st#0: Box, st'#0: Box :: 
  { _module.__default.Union#requires(st#0, st'#0) } 
  $IsBox(st#0, Tclass._module.State()) && $IsBox(st'#0, Tclass._module.State())
     ==> _module.__default.Union#requires(st#0, st'#0) == true);

procedure {:verboseName "Union (well-formedness)"} CheckWellformed$$_module.__default.Union(st#0: Box where $IsBox(st#0, Tclass._module.State()), 
    st'#0: Box where $IsBox(st'#0, Tclass._module.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id8"} (var result#1 := _module.__default.Union(st#0, st'#0); 
    Set#Equal(_module.__default.DomSt(result#1), 
      Set#Union(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#0))));
  ensures {:id "id9"} (var result#1 := _module.__default.Union(st#0, st'#0); 
    (forall p#1: DatatypeType :: 
      { _module.__default.GetSt(p#1, st'#0) } 
        { Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#1)) } 
        { _module.__default.GetSt(p#1, st#0) } 
        { _module.__default.GetSt(p#1, result#1) } 
        { Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1)) } 
        { Set#IsMember(_module.__default.DomSt(result#1), $Box(p#1)) } 
      $Is(p#1, Tclass._module.Path())
         ==> (Set#IsMember(_module.__default.DomSt(result#1), $Box(p#1))
             ==> 
            Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1))
             ==> _module.__default.GetSt(p#1, result#1) == _module.__default.GetSt(p#1, st#0))
           && (Set#IsMember(_module.__default.DomSt(result#1), $Box(p#1))
             ==> 
            Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#1))
             ==> _module.__default.GetSt(p#1, result#1) == _module.__default.GetSt(p#1, st'#0))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Union (well-formedness)"} CheckWellformed$$_module.__default.Union(st#0: Box, st'#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var result#Z#0: Box;
  var let#0#0#0: Box;
  var ##st#0: Box;
  var ##st'#0: Box;
  var ##st#1: Box;
  var ##st#2: Box;
  var ##st#3: Box;
  var p#2: DatatypeType;
  var ##st#4: Box;
  var ##st#5: Box;
  var ##p#0: DatatypeType;
  var ##st#6: Box;
  var ##p#1: DatatypeType;
  var ##st#7: Box;
  var ##st#8: Box;
  var ##st#9: Box;
  var ##p#2: DatatypeType;
  var ##st#10: Box;
  var ##p#3: DatatypeType;
  var ##st#11: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(_module.__default.Union(st#0, st'#0), Tclass._module.State());
        havoc result#Z#0;
        ##st#0 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
        ##st'#0 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st'#0, Tclass._module.State(), $Heap);
        assert {:id "id10"} st#0 == st#0 && st'#0 == st'#0;
        assume (st#0 == st#0 && st'#0 == st'#0) || _module.__default.Union#canCall(st#0, st'#0);
        assume {:id "id11"} let#0#0#0 == _module.__default.Union(st#0, st'#0);
        assume _module.__default.Union#canCall(st#0, st'#0);
        // CheckWellformedWithResult: any expression
        assume $IsBox(let#0#0#0, Tclass._module.State());
        assume {:id "id12"} result#Z#0 == let#0#0#0;
        ##st#1 := result#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(result#Z#0);
        ##st#2 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(st#0);
        ##st#3 := st'#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(st'#0);
        if (Set#Equal(_module.__default.DomSt(result#Z#0), 
          Set#Union(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#0))))
        {
            // Begin Comprehension WF check
            havoc p#2;
            if ($Is(p#2, Tclass._module.Path()) && $IsAlloc(p#2, Tclass._module.Path(), $Heap))
            {
                ##st#4 := result#Z#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#4, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(result#Z#0);
                if (Set#IsMember(_module.__default.DomSt(result#Z#0), $Box(p#2)))
                {
                    ##st#5 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#5, Tclass._module.State(), $Heap);
                    assume _module.__default.DomSt#canCall(st#0);
                    if (Set#IsMember(_module.__default.DomSt(st#0), $Box(p#2)))
                    {
                        ##p#0 := p#2;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                        ##st#6 := result#Z#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#6, Tclass._module.State(), $Heap);
                        assume _module.__default.GetSt#canCall(p#2, result#Z#0);
                        ##p#1 := p#2;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#1, Tclass._module.Path(), $Heap);
                        ##st#7 := st#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#7, Tclass._module.State(), $Heap);
                        assume _module.__default.GetSt#canCall(p#2, st#0);
                    }
                }

                if (Set#IsMember(_module.__default.DomSt(result#Z#0), $Box(p#2))
                   ==> 
                  Set#IsMember(_module.__default.DomSt(st#0), $Box(p#2))
                   ==> _module.__default.GetSt(p#2, result#Z#0) == _module.__default.GetSt(p#2, st#0))
                {
                    ##st#8 := result#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#8, Tclass._module.State(), $Heap);
                    assume _module.__default.DomSt#canCall(result#Z#0);
                    if (Set#IsMember(_module.__default.DomSt(result#Z#0), $Box(p#2)))
                    {
                        ##st#9 := st'#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#9, Tclass._module.State(), $Heap);
                        assume _module.__default.DomSt#canCall(st'#0);
                        if (Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#2)))
                        {
                            ##p#2 := p#2;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##p#2, Tclass._module.Path(), $Heap);
                            ##st#10 := result#Z#0;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##st#10, Tclass._module.State(), $Heap);
                            assume _module.__default.GetSt#canCall(p#2, result#Z#0);
                            ##p#3 := p#2;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##p#3, Tclass._module.Path(), $Heap);
                            ##st#11 := st'#0;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##st#11, Tclass._module.State(), $Heap);
                            assume _module.__default.GetSt#canCall(p#2, st'#0);
                        }
                    }
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id13"} (var result#1 := _module.__default.Union(st#0, st'#0); 
          Set#Equal(_module.__default.DomSt(result#1), 
              Set#Union(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#0)))
             && (forall p#1: DatatypeType :: 
              { _module.__default.GetSt(p#1, st'#0) } 
                { Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#1)) } 
                { _module.__default.GetSt(p#1, st#0) } 
                { _module.__default.GetSt(p#1, result#1) } 
                { Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1)) } 
                { Set#IsMember(_module.__default.DomSt(result#1), $Box(p#1)) } 
              $Is(p#1, Tclass._module.Path())
                 ==> (Set#IsMember(_module.__default.DomSt(result#1), $Box(p#1))
                     ==> 
                    Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1))
                     ==> _module.__default.GetSt(p#1, result#1) == _module.__default.GetSt(p#1, st#0))
                   && (Set#IsMember(_module.__default.DomSt(result#1), $Box(p#1))
                     ==> 
                    Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#1))
                     ==> _module.__default.GetSt(p#1, result#1) == _module.__default.GetSt(p#1, st'#0))));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



procedure {:verboseName "StateEqualityProperty (well-formedness)"} CheckWellFormed$$_module.__default.StateEqualityProperty(st#0: Box
       where $IsBox(st#0, Tclass._module.State())
         && $IsAllocBox(st#0, Tclass._module.State(), $Heap), 
    st'#0: Box
       where $IsBox(st'#0, Tclass._module.State())
         && $IsAllocBox(st'#0, Tclass._module.State(), $Heap));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "StateEqualityProperty (call)"} Call$$_module.__default.StateEqualityProperty(st#0: Box
       where $IsBox(st#0, Tclass._module.State())
         && $IsAllocBox(st#0, Tclass._module.State(), $Heap), 
    st'#0: Box
       where $IsBox(st'#0, Tclass._module.State())
         && $IsAllocBox(st'#0, Tclass._module.State(), $Heap));
  // user-defined preconditions
  requires {:id "id20"} Set#Equal(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#0));
  requires {:id "id21"} (forall p#1: DatatypeType :: 
    { _module.__default.GetSt(p#1, st'#0) } 
      { _module.__default.GetSt(p#1, st#0) } 
      { Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1)) } 
    $Is(p#1, Tclass._module.Path())
       ==> 
      Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1))
       ==> _module.__default.GetSt(p#1, st#0) == _module.__default.GetSt(p#1, st'#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures true;
  ensures {:id "id22"} st#0 == st'#0;
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for _module._default.EmptyCache
function _module.__default.EmptyCache() : Box
uses {
// consequence axiom for _module.__default.EmptyCache
axiom 1 <= $FunctionContextHeight
   ==> 
  _module.__default.EmptyCache#canCall() || 1 < $FunctionContextHeight
   ==> Set#Equal(_module.__default.DomC(_module.__default.EmptyCache()), Set#Empty(): Set)
     && $IsBox(_module.__default.EmptyCache(), Tclass._module.Cache());
}

function _module.__default.EmptyCache#canCall() : bool;

function Tclass._module.Cache() : Ty
uses {
axiom $AlwaysAllocated(Tclass._module.Cache());
}

function _module.__default.EmptyCache#requires() : bool
uses {
// #requires axiom for _module.__default.EmptyCache
axiom _module.__default.EmptyCache#requires() == true;
}

procedure {:verboseName "EmptyCache (well-formedness)"} CheckWellformed$$_module.__default.EmptyCache();
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id23"} Set#Equal(_module.__default.DomC(_module.__default.EmptyCache()), Set#Empty(): Set);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EmptyCache (well-formedness)"} CheckWellformed$$_module.__default.EmptyCache()
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##c#0: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(_module.__default.EmptyCache(), Tclass._module.Cache());
        assert {:id "id24"} Lit(true);
        assume Lit(true) || _module.__default.EmptyCache#canCall();
        ##c#0 := _module.__default.EmptyCache();
        // assume allocatedness for argument to function
        assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
        assume _module.__default.DomC#canCall(_module.__default.EmptyCache());
        assume {:id "id25"} Set#Equal(_module.__default.DomC(_module.__default.EmptyCache()), Set#Empty(): Set);
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module._default.GetC
function _module.__default.GetC(h#0: Box, c#0: Box) : DatatypeType
uses {
// consequence axiom for _module.__default.GetC
axiom 2 <= $FunctionContextHeight
   ==> (forall h#0: Box, c#0: Box :: 
    { _module.__default.GetC(h#0, c#0) } 
    _module.__default.GetC#canCall(h#0, c#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(h#0, Tclass._module.HashValue())
           && $IsBox(c#0, Tclass._module.Cache()))
       ==> $Is(_module.__default.GetC(h#0, c#0), 
        Tclass._module.Triple(Tclass._module.Expression(), Tclass._module.Expression(), TSeq(TChar))));
}

function _module.__default.GetC#canCall(h#0: Box, c#0: Box) : bool;

function Tclass._module.HashValue() : Ty
uses {
axiom $AlwaysAllocated(Tclass._module.HashValue());
}

function Tclass._module.Expression() : Ty
uses {
// Tclass._module.Expression Tag
axiom Tag(Tclass._module.Expression()) == Tagclass._module.Expression
   && TagFamily(Tclass._module.Expression()) == tytagFamily$Expression;
}

const unique Tagclass._module.Expression: TyTag;

// Box/unbox axiom for Tclass._module.Expression
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Expression()) } 
  $IsBox(bx, Tclass._module.Expression())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.Expression()));

function Tclass._module.Triple(Ty, Ty, Ty) : Ty;

const unique Tagclass._module.Triple: TyTag;

// Tclass._module.Triple Tag
axiom (forall _module.Triple$A: Ty, _module.Triple$B: Ty, _module.Triple$C: Ty :: 
  { Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C) } 
  Tag(Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C))
       == Tagclass._module.Triple
     && TagFamily(Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C))
       == tytagFamily$Triple);

function Tclass._module.Triple_0(Ty) : Ty;

// Tclass._module.Triple injectivity 0
axiom (forall _module.Triple$A: Ty, _module.Triple$B: Ty, _module.Triple$C: Ty :: 
  { Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C) } 
  Tclass._module.Triple_0(Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C))
     == _module.Triple$A);

function Tclass._module.Triple_1(Ty) : Ty;

// Tclass._module.Triple injectivity 1
axiom (forall _module.Triple$A: Ty, _module.Triple$B: Ty, _module.Triple$C: Ty :: 
  { Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C) } 
  Tclass._module.Triple_1(Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C))
     == _module.Triple$B);

function Tclass._module.Triple_2(Ty) : Ty;

// Tclass._module.Triple injectivity 2
axiom (forall _module.Triple$A: Ty, _module.Triple$B: Ty, _module.Triple$C: Ty :: 
  { Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C) } 
  Tclass._module.Triple_2(Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C))
     == _module.Triple$C);

// Box/unbox axiom for Tclass._module.Triple
axiom (forall _module.Triple$A: Ty, _module.Triple$B: Ty, _module.Triple$C: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C)) } 
  $IsBox(bx, Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C)));

function _module.__default.GetC#requires(Box, Box) : bool;

// #requires axiom for _module.__default.GetC
axiom (forall h#0: Box, c#0: Box :: 
  { _module.__default.GetC#requires(h#0, c#0) } 
  $IsBox(h#0, Tclass._module.HashValue()) && $IsBox(c#0, Tclass._module.Cache())
     ==> _module.__default.GetC#requires(h#0, c#0) == true);

procedure {:verboseName "GetC (well-formedness)"} CheckWellformed$$_module.__default.GetC(h#0: Box where $IsBox(h#0, Tclass._module.HashValue()), 
    c#0: Box where $IsBox(c#0, Tclass._module.Cache()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.SetC
function _module.__default.SetC(h#0: Box, cmd#0: DatatypeType, c#0: Box) : Box
uses {
// consequence axiom for _module.__default.SetC
axiom 2 <= $FunctionContextHeight
   ==> (forall h#0: Box, cmd#0: DatatypeType, c#0: Box :: 
    { _module.__default.SetC(h#0, cmd#0, c#0) } 
    _module.__default.SetC#canCall(h#0, cmd#0, c#0)
         || (2 < $FunctionContextHeight
           && 
          $IsBox(h#0, Tclass._module.HashValue())
           && $Is(cmd#0, 
            Tclass._module.Triple(Tclass._module.Expression(), Tclass._module.Expression(), TSeq(TChar)))
           && $IsBox(c#0, Tclass._module.Cache()))
       ==> Set#Equal(_module.__default.DomC(_module.__default.SetC(h#0, cmd#0, c#0)), 
          Set#Union(_module.__default.DomC(c#0), Set#UnionOne(Set#Empty(): Set, h#0)))
         && $IsBox(_module.__default.SetC(h#0, cmd#0, c#0), Tclass._module.Cache()));
}

function _module.__default.SetC#canCall(h#0: Box, cmd#0: DatatypeType, c#0: Box) : bool;

function _module.__default.SetC#requires(Box, DatatypeType, Box) : bool;

// #requires axiom for _module.__default.SetC
axiom (forall h#0: Box, cmd#0: DatatypeType, c#0: Box :: 
  { _module.__default.SetC#requires(h#0, cmd#0, c#0) } 
  $IsBox(h#0, Tclass._module.HashValue())
       && $Is(cmd#0, 
        Tclass._module.Triple(Tclass._module.Expression(), Tclass._module.Expression(), TSeq(TChar)))
       && $IsBox(c#0, Tclass._module.Cache())
     ==> _module.__default.SetC#requires(h#0, cmd#0, c#0) == true);

procedure {:verboseName "SetC (well-formedness)"} CheckWellformed$$_module.__default.SetC(h#0: Box where $IsBox(h#0, Tclass._module.HashValue()), 
    cmd#0: DatatypeType
       where $Is(cmd#0, 
        Tclass._module.Triple(Tclass._module.Expression(), Tclass._module.Expression(), TSeq(TChar))), 
    c#0: Box where $IsBox(c#0, Tclass._module.Cache()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id26"} Set#Equal(_module.__default.DomC(_module.__default.SetC(h#0, cmd#0, c#0)), 
    Set#Union(_module.__default.DomC(c#0), Set#UnionOne(Set#Empty(): Set, h#0)));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "SetC (well-formedness)"} CheckWellformed$$_module.__default.SetC(h#0: Box, cmd#0: DatatypeType, c#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##c#0: Box;
  var ##h#0: Box;
  var ##cmd#0: DatatypeType;
  var ##c#1: Box;
  var ##c#2: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $IsBox(_module.__default.SetC(h#0, cmd#0, c#0), Tclass._module.Cache());
        ##h#0 := h#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##h#0, Tclass._module.HashValue(), $Heap);
        ##cmd#0 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#0, 
          Tclass._module.Triple(Tclass._module.Expression(), Tclass._module.Expression(), TSeq(TChar)), 
          $Heap);
        ##c#1 := c#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##c#1, Tclass._module.Cache(), $Heap);
        assert {:id "id27"} (h#0 == h#0 && _module.Triple#Equal(cmd#0, cmd#0) && c#0 == c#0)
           || DtRank(##cmd#0) < DtRank(cmd#0);
        assume (h#0 == h#0 && _module.Triple#Equal(cmd#0, cmd#0) && c#0 == c#0)
           || _module.__default.SetC#canCall(h#0, cmd#0, c#0);
        ##c#0 := _module.__default.SetC(h#0, cmd#0, c#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
        assume _module.__default.DomC#canCall(_module.__default.SetC(h#0, cmd#0, c#0));
        ##c#2 := c#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##c#2, Tclass._module.Cache(), $Heap);
        assume _module.__default.DomC#canCall(c#0);
        assume {:id "id28"} Set#Equal(_module.__default.DomC(_module.__default.SetC(h#0, cmd#0, c#0)), 
          Set#Union(_module.__default.DomC(c#0), Set#UnionOne(Set#Empty(): Set, h#0)));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module._default.UpdateC
function _module.__default.UpdateC($ly: LayerType, 
    cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for _module.__default.UpdateC
axiom 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    { _module.__default.UpdateC($ly, cmd#0, deps#0, exts#0, stC#0) } 
    _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0)))
       ==> (var stC'#0 := _module.__default.UpdateC($ly, cmd#0, deps#0, exts#0, stC#0); 
          (var hashValues#0 := Set#FromBoogieMap((lambda $y#0: Box :: 
                  (exists e#0: Seq :: 
                    { _module.__default.Loc(cmd#0, deps#0, e#0) } 
                      { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
                    $Is(e#0, TSeq(TChar))
                       && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
                       && $y#0 == _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0))))); 
            _module.StateC.st(stC'#0) == _module.StateC.st(stC#0)
               && Set#Equal(Set#Union(_module.__default.DomC(_module.StateC.c(stC#0)), hashValues#0), 
                _module.__default.DomC(_module.StateC.c(stC'#0)))))
         && $Is(_module.__default.UpdateC($ly, cmd#0, deps#0, exts#0, stC#0), 
          Tclass._module.StateC()));
// definition axiom for _module.__default.UpdateC (revealed)
axiom {:id "id29"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    { _module.__default.UpdateC($LS($ly), cmd#0, deps#0, exts#0, stC#0) } 
    _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0)))
       ==> (var strs#0 := _module.Literal.strs(_module.Expression.lit(exts#0)); 
          !Set#Equal(strs#0, Set#Empty(): Set)
             ==> _module.__default.Choose#canCall(strs#0)
               && (var e#1 := _module.__default.Choose(strs#0); 
                _module.__default.Loc#canCall(cmd#0, deps#0, e#1)
                   && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#1))
                   && _module.StateC.S_q(stC#0)
                   && _module.__default.SetC#canCall(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1)), 
                    #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#1)), 
                    _module.StateC.c(stC#0))
                   && (var c'#0 := _module.__default.SetC(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1)), 
                        #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#1)), 
                        _module.StateC.c(stC#0)); 
                    (var exts'#0 := #_module.Expression.exprLiteral(#_module.Literal.litArrOfStrings(Set#Difference(strs#0, Set#UnionOne(Set#Empty(): Set, $Box(e#1))))); 
                      _module.StateC.S_q(stC#0)
                         && _module.__default.UpdateC#canCall(cmd#0, deps#0, exts'#0, #_module.StateC.S(_module.StateC.st(stC#0), c'#0))))))
         && _module.__default.UpdateC($LS($ly), cmd#0, deps#0, exts#0, stC#0)
           == (var strs#0 := _module.Literal.strs(_module.Expression.lit(exts#0)); 
            (if Set#Equal(strs#0, Set#Empty(): Set)
               then stC#0
               else (var e#1 := _module.__default.Choose(strs#0); 
                (var c'#0 := _module.__default.SetC(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1)), 
                      #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#1)), 
                      _module.StateC.c(stC#0)); 
                  (var exts'#0 := #_module.Expression.exprLiteral(#_module.Literal.litArrOfStrings(Set#Difference(strs#0, Set#UnionOne(Set#Empty(): Set, $Box(e#1))))); 
                    _module.__default.UpdateC($ly, cmd#0, deps#0, exts'#0, #_module.StateC.S(_module.StateC.st(stC#0), c'#0))))))));
// definition axiom for _module.__default.UpdateC for decreasing-related literals (revealed)
axiom {:id "id30"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    {:weight 3} { _module.__default.UpdateC($LS($ly), cmd#0, deps#0, Lit(exts#0), stC#0) } 
    _module.__default.UpdateC#canCall(cmd#0, deps#0, Lit(exts#0), stC#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(Lit(exts#0))
           && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0)))))
       ==> (var strs#1 := Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))); 
          !Set#Equal(strs#1, Set#Empty(): Set)
             ==> _module.__default.Choose#canCall(strs#1)
               && (var e#2 := _module.__default.Choose(strs#1); 
                _module.__default.Loc#canCall(cmd#0, deps#0, e#2)
                   && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#2))
                   && _module.StateC.S_q(stC#0)
                   && _module.__default.SetC#canCall(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#2)), 
                    #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#2)), 
                    _module.StateC.c(stC#0))
                   && (var c'#1 := _module.__default.SetC(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#2)), 
                        #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#2)), 
                        _module.StateC.c(stC#0)); 
                    (var exts'#1 := #_module.Expression.exprLiteral(#_module.Literal.litArrOfStrings(Set#Difference(strs#1, Set#UnionOne(Set#Empty(): Set, $Box(e#2))))); 
                      _module.StateC.S_q(stC#0)
                         && _module.__default.UpdateC#canCall(cmd#0, deps#0, exts'#1, #_module.StateC.S(_module.StateC.st(stC#0), c'#1))))))
         && _module.__default.UpdateC($LS($ly), cmd#0, deps#0, Lit(exts#0), stC#0)
           == (var strs#1 := Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))); 
            (if Set#Equal(strs#1, Set#Empty(): Set)
               then stC#0
               else (var e#2 := Lit(_module.__default.Choose(strs#1)); 
                (var c'#1 := _module.__default.SetC(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#2)), 
                      #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#2)), 
                      _module.StateC.c(stC#0)); 
                  (var exts'#1 := #_module.Expression.exprLiteral(#_module.Literal.litArrOfStrings(Set#Difference(strs#1, Set#UnionOne(Set#Empty(): Set, $Box(e#2))))); 
                    _module.__default.UpdateC($LS($ly), 
                      cmd#0, 
                      deps#0, 
                      exts'#1, 
                      #_module.StateC.S(_module.StateC.st(stC#0), c'#1))))))));
// definition axiom for _module.__default.UpdateC for all literals (revealed)
axiom {:id "id31"} 3 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    {:weight 3} { _module.__default.UpdateC($LS($ly), Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0)) } 
    _module.__default.UpdateC#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && Lit(_module.Expression.exprLiteral_q(Lit(cmd#0))
               && _module.Literal.litString_q(Lit(_module.Expression.lit(Lit(cmd#0))))
               && _module.Expression.exprLiteral_q(Lit(deps#0))
               && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(deps#0))))
               && _module.Expression.exprLiteral_q(Lit(exts#0))
               && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0))))))
       ==> (var strs#2 := Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))); 
          !Set#Equal(strs#2, Set#Empty(): Set)
             ==> _module.__default.Choose#canCall(strs#2)
               && (var e#3 := _module.__default.Choose(strs#2); 
                _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#3)
                   && _module.__default.Hash#canCall(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#3))
                   && _module.StateC.S_q(Lit(stC#0))
                   && _module.__default.SetC#canCall(_module.__default.Hash(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#3)), 
                    #_module.Triple.Trio($Box(Lit(cmd#0)), $Box(Lit(deps#0)), $Box(e#3)), 
                    Lit(_module.StateC.c(Lit(stC#0))))
                   && (var c'#2 := _module.__default.SetC(_module.__default.Hash(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#3)), 
                        #_module.Triple.Trio($Box(Lit(cmd#0)), $Box(Lit(deps#0)), $Box(e#3)), 
                        Lit(_module.StateC.c(Lit(stC#0)))); 
                    (var exts'#2 := #_module.Expression.exprLiteral(#_module.Literal.litArrOfStrings(Set#Difference(strs#2, Set#UnionOne(Set#Empty(): Set, $Box(e#3))))); 
                      _module.StateC.S_q(Lit(stC#0))
                         && _module.__default.UpdateC#canCall(Lit(cmd#0), 
                          Lit(deps#0), 
                          exts'#2, 
                          #_module.StateC.S(Lit(_module.StateC.st(Lit(stC#0))), c'#2))))))
         && _module.__default.UpdateC($LS($ly), Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0))
           == (var strs#2 := Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))); 
            (if Set#Equal(strs#2, Set#Empty(): Set)
               then stC#0
               else (var e#3 := Lit(_module.__default.Choose(strs#2)); 
                (var c'#2 := _module.__default.SetC(_module.__default.Hash(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#3)), 
                      Lit(#_module.Triple.Trio($Box(Lit(cmd#0)), $Box(Lit(deps#0)), $Box(e#3))), 
                      Lit(_module.StateC.c(Lit(stC#0)))); 
                  (var exts'#2 := #_module.Expression.exprLiteral(#_module.Literal.litArrOfStrings(Set#Difference(strs#2, Set#UnionOne(Set#Empty(): Set, $Box(e#3))))); 
                    _module.__default.UpdateC($LS($ly), 
                      Lit(cmd#0), 
                      Lit(deps#0), 
                      exts'#2, 
                      #_module.StateC.S(Lit(_module.StateC.st(Lit(stC#0))), c'#2))))))));
}

function _module.__default.UpdateC#canCall(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, 
    cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType :: 
  { _module.__default.UpdateC($LS($ly), cmd#0, deps#0, exts#0, stC#0) } 
  _module.__default.UpdateC($LS($ly), cmd#0, deps#0, exts#0, stC#0)
     == _module.__default.UpdateC($ly, cmd#0, deps#0, exts#0, stC#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, 
    cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType :: 
  { _module.__default.UpdateC(AsFuelBottom($ly), cmd#0, deps#0, exts#0, stC#0) } 
  _module.__default.UpdateC($ly, cmd#0, deps#0, exts#0, stC#0)
     == _module.__default.UpdateC($LZ, cmd#0, deps#0, exts#0, stC#0));

function Tclass._module.StateC() : Ty
uses {
// Tclass._module.StateC Tag
axiom Tag(Tclass._module.StateC()) == Tagclass._module.StateC
   && TagFamily(Tclass._module.StateC()) == tytagFamily$StateC;
}

const unique Tagclass._module.StateC: TyTag;

// Box/unbox axiom for Tclass._module.StateC
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.StateC()) } 
  $IsBox(bx, Tclass._module.StateC())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.StateC()));

function _module.__default.UpdateC#requires(LayerType, DatatypeType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.UpdateC
axiom (forall $ly: LayerType, 
    cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType :: 
  { _module.__default.UpdateC#requires($ly, cmd#0, deps#0, exts#0, stC#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(exts#0, Tclass._module.Expression())
       && $Is(stC#0, Tclass._module.StateC())
     ==> _module.__default.UpdateC#requires($ly, cmd#0, deps#0, exts#0, stC#0)
       == (
        _module.Expression.exprLiteral_q(cmd#0)
         && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
         && _module.Expression.exprLiteral_q(deps#0)
         && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
         && _module.Expression.exprLiteral_q(exts#0)
         && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))));

procedure {:verboseName "UpdateC (well-formedness)"} CheckWellformed$$_module.__default.UpdateC(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    exts#0: DatatypeType where $Is(exts#0, Tclass._module.Expression()), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id32"} (var stC'#1 := _module.__default.UpdateC($LS($LS($LZ)), cmd#0, deps#0, exts#0, stC#0); 
    (var hashValues#1 := Set#FromBoogieMap((lambda $y#1: Box :: 
            (exists e#4: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#4) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4)) } 
              $Is(e#4, TSeq(TChar))
                 && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
                 && $y#1 == _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#4))))); 
      _module.StateC.st(stC'#1) == _module.StateC.st(stC#0)));
  ensures {:id "id33"} (var stC'#1 := _module.__default.UpdateC($LS($LS($LZ)), cmd#0, deps#0, exts#0, stC#0); 
    (var hashValues#1 := Set#FromBoogieMap((lambda $y#1: Box :: 
            (exists e#4: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#4) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4)) } 
              $Is(e#4, TSeq(TChar))
                 && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
                 && $y#1 == _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#4))))); 
      Set#Equal(Set#Union(_module.__default.DomC(_module.StateC.c(stC#0)), hashValues#1), 
        _module.__default.DomC(_module.StateC.c(stC'#1)))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "UpdateC (well-formedness)"} CheckWellformed$$_module.__default.UpdateC(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var stC'#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##exts#0: DatatypeType;
  var ##stC#0: DatatypeType;
  var hashValues#Z#0: Set;
  var let#1#0#0: Set;
  var e#5: Seq;
  var ##p#0: DatatypeType;
  var ##cmd#1: DatatypeType;
  var ##deps#1: DatatypeType;
  var ##ext#0: Seq;
  var ##c#0: Box;
  var ##c#1: Box;
  var strs#Z#0: Set;
  var let#2#0#0: Set;
  var e#Z#0: Seq;
  var let#3#0#0: Seq;
  var ##ss#0: Set;
  var c'#Z#0: Box;
  var let#4#0#0: Box;
  var ##h#0: Box;
  var ##p#1: DatatypeType;
  var ##cmd#2: DatatypeType;
  var ##deps#2: DatatypeType;
  var ##ext#1: Seq;
  var ##cmd#3: DatatypeType;
  var ##c#2: Box;
  var exts'#Z#0: DatatypeType;
  var let#5#0#0: DatatypeType;
  var ##cmd#4: DatatypeType;
  var ##deps#3: DatatypeType;
  var ##exts#1: DatatypeType;
  var ##stC#1: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id34"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id35"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id36"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id37"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id38"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id39"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id40"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id41"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id42"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    assert {:id "id43"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id44"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0), 
          Tclass._module.StateC());
        havoc stC'#Z#0;
        ##cmd#0 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
        ##deps#0 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
        ##exts#0 := exts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exts#0, Tclass._module.Expression(), $Heap);
        ##stC#0 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
        assert {:id "id45"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#0);
        assert {:id "id46"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#0));
        assert {:id "id47"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#0);
        assert {:id "id48"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0));
        assert {:id "id49"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#0);
        assert {:id "id50"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
        assume _module.Expression.exprLiteral_q(##cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(##cmd#0))
           && _module.Expression.exprLiteral_q(##deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0))
           && _module.Expression.exprLiteral_q(##exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
        assert {:id "id51"} (
            _module.Expression#Equal(cmd#0, cmd#0)
             && _module.Expression#Equal(deps#0, deps#0)
             && _module.Expression#Equal(exts#0, exts#0)
             && _module.StateC#Equal(stC#0, stC#0))
           || (Set#Subset(_module.Literal.strs(_module.Expression.lit(##exts#0)), 
              _module.Literal.strs(_module.Expression.lit(exts#0)))
             && !Set#Subset(_module.Literal.strs(_module.Expression.lit(exts#0)), 
              _module.Literal.strs(_module.Expression.lit(##exts#0))));
        assume (
            _module.Expression#Equal(cmd#0, cmd#0)
             && _module.Expression#Equal(deps#0, deps#0)
             && _module.Expression#Equal(exts#0, exts#0)
             && _module.StateC#Equal(stC#0, stC#0))
           || _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0);
        assume _module.StateC.S_q(_module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0));
        assume {:id "id52"} let#0#0#0 == _module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0);
        assume _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, Tclass._module.StateC());
        assume {:id "id53"} stC'#Z#0 == let#0#0#0;
        havoc hashValues#Z#0;
        // Begin Comprehension WF check
        havoc e#5;
        if ($Is(e#5, TSeq(TChar)) && $IsAlloc(e#5, TSeq(TChar), $Heap))
        {
            assert {:id "id54"} _module.Expression.exprLiteral_q(exts#0);
            assert {:id "id55"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
            if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#5)))
            {
                ##cmd#1 := cmd#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#1, Tclass._module.Expression(), $Heap);
                ##deps#1 := deps#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#1, Tclass._module.Expression(), $Heap);
                ##ext#0 := e#5;
                // assume allocatedness for argument to function
                assume $IsAlloc(##ext#0, TSeq(TChar), $Heap);
                assume _module.__default.Loc#canCall(cmd#0, deps#0, e#5);
                ##p#0 := _module.__default.Loc(cmd#0, deps#0, e#5);
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                assume _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#5));
            }
        }

        // End Comprehension WF check
        assume {:id "id56"} let#1#0#0
           == Set#FromBoogieMap((lambda $y#3: Box :: 
              (exists e#6: Seq :: 
                { _module.__default.Loc(cmd#0, deps#0, e#6) } 
                  { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#6)) } 
                $Is(e#6, TSeq(TChar))
                   && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#6))
                   && $y#3 == _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#6)))));
        assume (forall e#6: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#6) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#6)) } 
          $Is(e#6, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#6))
             ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#6)
               && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#6)));
        // CheckWellformedWithResult: any expression
        assume $Is(let#1#0#0, TSet(Tclass._module.HashValue()));
        assume {:id "id57"} hashValues#Z#0 == let#1#0#0;
        assume _module.StateC.S_q(stC'#Z#0);
        assume _module.StateC.S_q(stC#0);
        if (_module.StateC.st(stC'#Z#0) == _module.StateC.st(stC#0))
        {
            assume _module.StateC.S_q(stC#0);
            ##c#0 := _module.StateC.c(stC#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
            assume _module.__default.DomC#canCall(_module.StateC.c(stC#0));
            assume _module.StateC.S_q(stC'#Z#0);
            ##c#1 := _module.StateC.c(stC'#Z#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##c#1, Tclass._module.Cache(), $Heap);
            assume _module.__default.DomC#canCall(_module.StateC.c(stC'#Z#0));
        }

        assume {:id "id58"} (var stC'#1 := _module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0); 
          (var hashValues#1 := Set#FromBoogieMap((lambda $y#4: Box :: 
                  (exists e#4: Seq :: 
                    { _module.__default.Loc(cmd#0, deps#0, e#4) } 
                      { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4)) } 
                    $Is(e#4, TSeq(TChar))
                       && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
                       && $y#4 == _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#4))))); 
            _module.StateC.st(stC'#1) == _module.StateC.st(stC#0)
               && Set#Equal(Set#Union(_module.__default.DomC(_module.StateC.c(stC#0)), hashValues#1), 
                _module.__default.DomC(_module.StateC.c(stC'#1)))));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc strs#Z#0;
        assert {:id "id59"} _module.Expression.exprLiteral_q(exts#0);
        assert {:id "id60"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
        assume {:id "id61"} let#2#0#0 == _module.Literal.strs(_module.Expression.lit(exts#0));
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#2#0#0, TSet(TSeq(TChar)));
        assume {:id "id62"} strs#Z#0 == let#2#0#0;
        if (Set#Equal(strs#Z#0, Set#Empty(): Set))
        {
            assume {:id "id63"} _module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0) == stC#0;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0), 
              Tclass._module.StateC());
            return;
        }
        else
        {
            havoc e#Z#0;
            ##ss#0 := strs#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ss#0, TSet(TSeq(TChar)), $Heap);
            assert {:id "id64"} {:subsumption 0} !Set#Equal(##ss#0, Set#Empty(): Set);
            assume !Set#Equal(##ss#0, Set#Empty(): Set);
            assume _module.__default.Choose#canCall(strs#Z#0);
            assume {:id "id65"} let#3#0#0 == _module.__default.Choose(strs#Z#0);
            assume _module.__default.Choose#canCall(strs#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#3#0#0, TSeq(TChar));
            assume {:id "id66"} e#Z#0 == let#3#0#0;
            havoc c'#Z#0;
            ##cmd#2 := cmd#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#2, Tclass._module.Expression(), $Heap);
            ##deps#2 := deps#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#2, Tclass._module.Expression(), $Heap);
            ##ext#1 := e#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ext#1, TSeq(TChar), $Heap);
            assume _module.__default.Loc#canCall(cmd#0, deps#0, e#Z#0);
            ##p#1 := _module.__default.Loc(cmd#0, deps#0, e#Z#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#1, Tclass._module.Path(), $Heap);
            assume _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#Z#0));
            ##h#0 := _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#Z#0));
            // assume allocatedness for argument to function
            assume $IsAllocBox(##h#0, Tclass._module.HashValue(), $Heap);
            ##cmd#3 := #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#Z#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#3, 
              Tclass._module.Triple(Tclass._module.Expression(), Tclass._module.Expression(), TSeq(TChar)), 
              $Heap);
            assume _module.StateC.S_q(stC#0);
            ##c#2 := _module.StateC.c(stC#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##c#2, Tclass._module.Cache(), $Heap);
            assume _module.__default.SetC#canCall(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#Z#0)), 
              #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#Z#0)), 
              _module.StateC.c(stC#0));
            assume {:id "id67"} let#4#0#0
               == _module.__default.SetC(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#Z#0)), 
                #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#Z#0)), 
                _module.StateC.c(stC#0));
            assume _module.__default.Loc#canCall(cmd#0, deps#0, e#Z#0)
               && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#Z#0))
               && _module.StateC.S_q(stC#0)
               && _module.__default.SetC#canCall(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#Z#0)), 
                #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#Z#0)), 
                _module.StateC.c(stC#0));
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#4#0#0, Tclass._module.Cache());
            assume {:id "id68"} c'#Z#0 == let#4#0#0;
            havoc exts'#Z#0;
            assume {:id "id69"} let#5#0#0
               == #_module.Expression.exprLiteral(#_module.Literal.litArrOfStrings(Set#Difference(strs#Z#0, Set#UnionOne(Set#Empty(): Set, $Box(e#Z#0)))));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#5#0#0, Tclass._module.Expression());
            assume {:id "id70"} exts'#Z#0 == let#5#0#0;
            ##cmd#4 := cmd#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#4, Tclass._module.Expression(), $Heap);
            ##deps#3 := deps#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#3, Tclass._module.Expression(), $Heap);
            ##exts#1 := exts'#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##exts#1, Tclass._module.Expression(), $Heap);
            assume _module.StateC.S_q(stC#0);
            ##stC#1 := #_module.StateC.S(_module.StateC.st(stC#0), c'#Z#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
            assert {:id "id71"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#4);
            assert {:id "id72"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#4));
            assert {:id "id73"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#3);
            assert {:id "id74"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3));
            assert {:id "id75"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#1);
            assert {:id "id76"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1));
            assume _module.Expression.exprLiteral_q(##cmd#4)
               && _module.Literal.litString_q(_module.Expression.lit(##cmd#4))
               && _module.Expression.exprLiteral_q(##deps#3)
               && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3))
               && _module.Expression.exprLiteral_q(##exts#1)
               && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1));
            assert {:id "id77"} Set#Subset(_module.Literal.strs(_module.Expression.lit(##exts#1)), 
                _module.Literal.strs(_module.Expression.lit(exts#0)))
               && !Set#Subset(_module.Literal.strs(_module.Expression.lit(exts#0)), 
                _module.Literal.strs(_module.Expression.lit(##exts#1)));
            assume _module.__default.UpdateC#canCall(cmd#0, deps#0, exts'#Z#0, #_module.StateC.S(_module.StateC.st(stC#0), c'#Z#0));
            assume _module.StateC.S_q(_module.__default.UpdateC($LS($LZ), 
                cmd#0, 
                deps#0, 
                exts'#Z#0, 
                #_module.StateC.S(_module.StateC.st(stC#0), c'#Z#0)));
            assume {:id "id78"} _module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0)
               == _module.__default.UpdateC($LS($LZ), 
                cmd#0, 
                deps#0, 
                exts'#Z#0, 
                #_module.StateC.S(_module.StateC.st(stC#0), c'#Z#0));
            assume _module.StateC.S_q(stC#0)
               && _module.__default.UpdateC#canCall(cmd#0, deps#0, exts'#Z#0, #_module.StateC.S(_module.StateC.st(stC#0), c'#Z#0));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0), 
              Tclass._module.StateC());
            return;
        }

        assume false;
    }
}



procedure {:verboseName "UpdateCLemma (well-formedness)"} CheckWellFormed$$_module.__default.UpdateCLemma(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    exts#0: DatatypeType
       where $Is(exts#0, Tclass._module.Expression())
         && $IsAlloc(exts#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(exts#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "UpdateCLemma (well-formedness)"} CheckWellFormed$$_module.__default.UpdateCLemma(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stC#0: DatatypeType;
  var e#0: Seq;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##ext#0: Seq;
  var ##st#0: Box;
  var stC'#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##cmd#1: DatatypeType;
  var ##deps#1: DatatypeType;
  var ##exts#0: DatatypeType;
  var ##stC#1: DatatypeType;
  var ##stC#2: DatatypeType;
  var e#2: Seq;
  var ##p#0: DatatypeType;
  var ##cmd#2: DatatypeType;
  var ##deps#2: DatatypeType;
  var ##ext#1: Seq;
  var ##c#0: Box;


    // AddMethodImpl: UpdateCLemma, CheckWellFormed$$_module.__default.UpdateCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id79"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id80"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id81"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id82"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id83"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id84"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id85"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id86"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id87"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id88"} _module.__default.ConsistentCache(stC#0);
    havoc e#0;
    assume $Is(e#0, TSeq(TChar)) && $IsAlloc(e#0, TSeq(TChar), $Heap);
    if (*)
    {
        assert {:id "id89"} _module.Expression.exprLiteral_q(exts#0);
        assert {:id "id90"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
        assume {:id "id91"} Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0));
        ##cmd#0 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
        ##deps#0 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
        ##ext#0 := e#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##ext#0, TSeq(TChar), $Heap);
        assume _module.__default.Loc#canCall(cmd#0, deps#0, e#0);
        assume _module.StateC.S_q(stC#0);
        ##st#0 := _module.StateC.st(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
        assume {:id "id92"} Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#0, deps#0, e#0)));
    }
    else
    {
        assume {:id "id93"} Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#0)));
    }

    assume {:id "id94"} (forall e#1: Seq :: 
      { _module.__default.Loc(cmd#0, deps#0, e#1) } 
        { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
      $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1))
         ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#0, deps#0, e#1))));
    assert {:id "id95"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id96"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc stC'#Z#0;
    ##cmd#1 := cmd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##cmd#1, Tclass._module.Expression(), $Heap);
    ##deps#1 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##deps#1, Tclass._module.Expression(), $Heap);
    ##exts#0 := exts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##exts#0, Tclass._module.Expression(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
    assert {:id "id97"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#1);
    assert {:id "id98"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#1));
    assert {:id "id99"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#1);
    assert {:id "id100"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#1));
    assert {:id "id101"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#0);
    assert {:id "id102"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
    assume _module.Expression.exprLiteral_q(##cmd#1)
       && _module.Literal.litString_q(_module.Expression.lit(##cmd#1))
       && _module.Expression.exprLiteral_q(##deps#1)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#1))
       && _module.Expression.exprLiteral_q(##exts#0)
       && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
    assume _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0);
    assume _module.StateC.S_q(_module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0));
    assume {:id "id103"} let#0#0#0 == _module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0);
    assume _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, Tclass._module.StateC());
    assume {:id "id104"} stC'#Z#0 == let#0#0#0;
    ##stC#2 := stC'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC'#Z#0);
    if (_module.__default.ConsistentCache(stC'#Z#0))
    {
        // Begin Comprehension WF check
        havoc e#2;
        if ($Is(e#2, TSeq(TChar)) && $IsAlloc(e#2, TSeq(TChar), $Heap))
        {
            assert {:id "id105"} _module.Expression.exprLiteral_q(exts#0);
            assert {:id "id106"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
            if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)))
            {
                ##cmd#2 := cmd#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#2, Tclass._module.Expression(), $Heap);
                ##deps#2 := deps#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#2, Tclass._module.Expression(), $Heap);
                ##ext#1 := e#2;
                // assume allocatedness for argument to function
                assume $IsAlloc(##ext#1, TSeq(TChar), $Heap);
                assume _module.__default.Loc#canCall(cmd#0, deps#0, e#2);
                ##p#0 := _module.__default.Loc(cmd#0, deps#0, e#2);
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                assume _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#2));
                assume _module.StateC.S_q(stC'#Z#0);
                ##c#0 := _module.StateC.c(stC'#Z#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
                assume _module.__default.DomC#canCall(_module.StateC.c(stC'#Z#0));
            }
        }

        // End Comprehension WF check
    }

    assume {:id "id107"} (var stC'#0 := _module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0); 
      _module.__default.ConsistentCache(stC'#0)
         && (forall e#3: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#3) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
          $Is(e#3, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
             ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
              _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#3)))));
}



procedure {:verboseName "UpdateCLemma (call)"} Call$$_module.__default.UpdateCLemma(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    exts#0: DatatypeType
       where $Is(exts#0, Tclass._module.Expression())
         && $IsAlloc(exts#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(exts#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0));
  // user-defined preconditions
  requires {:id "id108"} _module.Expression.exprLiteral_q(cmd#0);
  requires {:id "id109"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
  requires {:id "id110"} _module.Expression.exprLiteral_q(deps#0);
  requires {:id "id111"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
  requires {:id "id112"} _module.Expression.exprLiteral_q(exts#0);
  requires {:id "id113"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
  requires {:id "id114"} _module.__default.ConsistentCache#canCall(stC#0)
     ==> _module.__default.ConsistentCache(stC#0)
       || (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#4: Seq :: 
        { _module.__default.Loc(cmd#1, deps#1, e#4) } 
        $Is(cmd#1, Tclass._module.Expression())
             && $Is(deps#1, Tclass._module.Expression())
             && $Is(e#4, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#4)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            $Box(_module.__default.Loc(cmd#1, deps#1, e#4))));
  requires {:id "id115"} (forall e#1: Seq :: 
    { _module.__default.Loc(cmd#0, deps#0, e#1) } 
      { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
    $Is(e#1, TSeq(TChar))
       ==> 
      Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1))
       ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        $Box(_module.__default.Loc(cmd#0, deps#0, e#1))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0)
     && (var stC'#0 := _module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0); 
      _module.__default.ConsistentCache#canCall(stC'#0)
         && (_module.__default.ConsistentCache(stC'#0)
           ==> (forall e#3: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#3) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
            $Is(e#3, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
               ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#3)
                 && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#3))
                 && 
                _module.StateC.S_q(stC'#0)
                 && _module.__default.DomC#canCall(_module.StateC.c(stC'#0)))));
  free ensures {:id "id116"} (var stC'#0 := _module.__default.UpdateC($LS($LS($LZ)), cmd#0, deps#0, exts#0, stC#0); 
    _module.__default.ConsistentCache#canCall(stC'#0)
       && 
      _module.__default.ConsistentCache(stC'#0)
       && (forall cmd#2: DatatypeType, deps#2: DatatypeType, e#5: Seq :: 
        { _module.__default.Loc(cmd#2, deps#2, e#5) } 
        $Is(cmd#2, Tclass._module.Expression())
             && $Is(deps#2, Tclass._module.Expression())
             && $Is(e#5, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#2, deps#2, e#5)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
            $Box(_module.__default.Loc(cmd#2, deps#2, e#5)))));
  ensures {:id "id117"} (var stC'#0 := _module.__default.UpdateC($LS($LS($LZ)), cmd#0, deps#0, exts#0, stC#0); 
    (forall e#3: Seq :: 
      { _module.__default.Loc(cmd#0, deps#0, e#3) } 
        { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
      $Is(e#3, TSeq(TChar))
         ==> 
        Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
         ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#3)))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "UpdateCLemma (correctness)"} Impl$$_module.__default.UpdateCLemma(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    exts#0: DatatypeType
       where $Is(exts#0, Tclass._module.Expression())
         && $IsAlloc(exts#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(exts#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0))
   returns ($_reverifyPost: bool);
  free requires 4 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id118"} _module.Expression.exprLiteral_q(cmd#0);
  requires {:id "id119"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
  requires {:id "id120"} _module.Expression.exprLiteral_q(deps#0);
  requires {:id "id121"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
  requires {:id "id122"} _module.Expression.exprLiteral_q(exts#0);
  requires {:id "id123"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
  free requires {:id "id124"} _module.__default.ConsistentCache#canCall(stC#0)
     && 
    _module.__default.ConsistentCache(stC#0)
     && (forall cmd#3: DatatypeType, deps#3: DatatypeType, e#6: Seq :: 
      { _module.__default.Loc(cmd#3, deps#3, e#6) } 
      $Is(cmd#3, Tclass._module.Expression())
           && $Is(deps#3, Tclass._module.Expression())
           && $Is(e#6, TSeq(TChar))
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#3, deps#3, e#6)))
         ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#3, deps#3, e#6))));
  requires {:id "id125"} (forall e#1: Seq :: 
    { _module.__default.Loc(cmd#0, deps#0, e#1) } 
      { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
    $Is(e#1, TSeq(TChar))
       ==> 
      Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1))
       ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        $Box(_module.__default.Loc(cmd#0, deps#0, e#1))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0)
     && (var stC'#0 := _module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0); 
      _module.__default.ConsistentCache#canCall(stC'#0)
         && (_module.__default.ConsistentCache(stC'#0)
           ==> (forall e#3: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#3) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
            $Is(e#3, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
               ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#3)
                 && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#3))
                 && 
                _module.StateC.S_q(stC'#0)
                 && _module.__default.DomC#canCall(_module.StateC.c(stC'#0)))));
  ensures {:id "id126"} (var stC'#0 := _module.__default.UpdateC($LS($LS($LZ)), cmd#0, deps#0, exts#0, stC#0); 
    _module.__default.ConsistentCache#canCall(stC'#0)
       ==> _module.__default.ConsistentCache(stC'#0)
         || (forall cmd#4: DatatypeType, deps#4: DatatypeType, e#7: Seq :: 
          { _module.__default.Loc(cmd#4, deps#4, e#7) } 
          $Is(cmd#4, Tclass._module.Expression())
               && $Is(deps#4, Tclass._module.Expression())
               && $Is(e#7, TSeq(TChar))
             ==> 
            Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
              _module.__default.Hash(_module.__default.Loc(cmd#4, deps#4, e#7)))
             ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
              $Box(_module.__default.Loc(cmd#4, deps#4, e#7)))));
  ensures {:id "id127"} (var stC'#0 := _module.__default.UpdateC($LS($LS($LZ)), cmd#0, deps#0, exts#0, stC#0); 
    (forall e#3: Seq :: 
      { _module.__default.Loc(cmd#0, deps#0, e#3) } 
        { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
      $Is(e#3, TSeq(TChar))
         ==> 
        Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
         ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#3)))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "UpdateCLemma (correctness)"} Impl$$_module.__default.UpdateCLemma(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var strs#0: Set
     where $Is(strs#0, TSet(TSeq(TChar))) && $IsAlloc(strs#0, TSet(TSeq(TChar)), $Heap);
  var defass#stC'#2: bool;
  var stC'#2: DatatypeType
     where defass#stC'#2
       ==> $Is(stC'#2, Tclass._module.StateC())
         && $IsAlloc(stC'#2, Tclass._module.StateC(), $Heap);
  var ##cmd#3: DatatypeType;
  var ##deps#3: DatatypeType;
  var ##exts#1: DatatypeType;
  var ##stC#3: DatatypeType;
  var e#1_0: Seq where $Is(e#1_0, TSeq(TChar)) && $IsAlloc(e#1_0, TSeq(TChar), $Heap);
  var ##ss#1_0: Set;
  var defass#c'#1_0: bool;
  var c'#1_0: Box
     where defass#c'#1_0
       ==> $IsBox(c'#1_0, Tclass._module.Cache())
         && $IsAllocBox(c'#1_0, Tclass._module.Cache(), $Heap);
  var ##h#1_0: Box;
  var ##p#1_0: DatatypeType;
  var ##cmd#1_0: DatatypeType;
  var ##deps#1_0: DatatypeType;
  var ##ext#1_0: Seq;
  var ##cmd#1_1: DatatypeType;
  var ##c#1_0: Box;
  var exts'#1_0: DatatypeType
     where $Is(exts'#1_0, Tclass._module.Expression())
       && $IsAlloc(exts'#1_0, Tclass._module.Expression(), $Heap);
  var ##cmd#1_2: DatatypeType;
  var ##deps#1_1: DatatypeType;
  var ##exts#1_0: DatatypeType;
  var ##stC#1_0: DatatypeType;
  var cmd'#1_0_0: DatatypeType;
  var deps'#1_0_0: DatatypeType;
  var e'#1_0_0: Seq;
  var ##p#1_0_0: DatatypeType;
  var ##cmd#1_0_0: DatatypeType;
  var ##deps#1_0_0: DatatypeType;
  var ##ext#1_0_0: Seq;
  var ##p#1_0_1: DatatypeType;
  var ##cmd#1_0_1: DatatypeType;
  var ##deps#1_0_1: DatatypeType;
  var ##ext#1_0_1: Seq;
  var cmd##1_0_0: DatatypeType;
  var deps##1_0_0: DatatypeType;
  var ext##1_0_0: Seq;
  var cmd'##1_0_0: DatatypeType;
  var deps'##1_0_0: DatatypeType;
  var ext'##1_0_0: Seq;
  var $initHeapForallStmt#1_0_0: Heap;

    // AddMethodImpl: UpdateCLemma, Impl$$_module.__default.UpdateCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.Expression(cmd#0);
    assume $IsA#_module.Expression(deps#0);
    assume $IsA#_module.Expression(exts#0);
    assume $IsA#_module.StateC(stC#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#cmd0#0: DatatypeType, 
        $ih#deps0#0: DatatypeType, 
        $ih#exts0#0: DatatypeType, 
        $ih#stC0#0: DatatypeType :: 
      { _module.__default.UpdateC($LS($LZ), $ih#cmd0#0, $ih#deps0#0, $ih#exts0#0, $ih#stC0#0) } 
        { _module.StateC.st($ih#stC0#0), _module.Expression.lit($ih#exts0#0), _module.Expression.lit($ih#deps0#0), _module.Expression.lit($ih#cmd0#0) } 
        { _module.StateC.st($ih#stC0#0), _module.Expression.lit($ih#exts0#0), _module.Expression.lit($ih#deps0#0), _module.Expression.exprLiteral_q($ih#cmd0#0) } 
        { _module.StateC.st($ih#stC0#0), _module.Expression.lit($ih#exts0#0), _module.Expression.exprLiteral_q($ih#deps0#0), _module.Expression.lit($ih#cmd0#0) } 
        { _module.StateC.st($ih#stC0#0), _module.Expression.lit($ih#exts0#0), _module.Expression.exprLiteral_q($ih#deps0#0), _module.Expression.exprLiteral_q($ih#cmd0#0) } 
        { _module.StateC.st($ih#stC0#0), _module.Expression.exprLiteral_q($ih#exts0#0), _module.Expression.lit($ih#deps0#0), _module.Expression.lit($ih#cmd0#0) } 
        { _module.StateC.st($ih#stC0#0), _module.Expression.exprLiteral_q($ih#exts0#0), _module.Expression.lit($ih#deps0#0), _module.Expression.exprLiteral_q($ih#cmd0#0) } 
        { _module.StateC.st($ih#stC0#0), _module.Expression.exprLiteral_q($ih#exts0#0), _module.Expression.exprLiteral_q($ih#deps0#0), _module.Expression.lit($ih#cmd0#0) } 
        { _module.StateC.st($ih#stC0#0), _module.Expression.exprLiteral_q($ih#exts0#0), _module.Expression.exprLiteral_q($ih#deps0#0), _module.Expression.exprLiteral_q($ih#cmd0#0) } 
      $Is($ih#cmd0#0, Tclass._module.Expression())
           && $Is($ih#deps0#0, Tclass._module.Expression())
           && $Is($ih#exts0#0, Tclass._module.Expression())
           && $Is($ih#stC0#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q($ih#cmd0#0)
           && _module.Literal.litString_q(_module.Expression.lit($ih#cmd0#0))
           && _module.Expression.exprLiteral_q($ih#deps0#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit($ih#deps0#0))
           && _module.Expression.exprLiteral_q($ih#exts0#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit($ih#exts0#0))
           && _module.__default.ConsistentCache($ih#stC0#0)
           && (forall e#8: Seq :: 
            { _module.__default.Loc($ih#cmd0#0, $ih#deps0#0, e#8) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit($ih#exts0#0)), $Box(e#8)) } 
            $Is(e#8, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit($ih#exts0#0)), $Box(e#8))
               ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st($ih#stC0#0)), 
                $Box(_module.__default.Loc($ih#cmd0#0, $ih#deps0#0, e#8))))
           && 
          Set#Subset(_module.Literal.strs(_module.Expression.lit($ih#exts0#0)), 
            _module.Literal.strs(_module.Expression.lit(exts#0)))
           && !Set#Subset(_module.Literal.strs(_module.Expression.lit(exts#0)), 
            _module.Literal.strs(_module.Expression.lit($ih#exts0#0)))
         ==> (var stC'#1 := _module.__default.UpdateC($LS($LZ), $ih#cmd0#0, $ih#deps0#0, $ih#exts0#0, $ih#stC0#0); 
          _module.__default.ConsistentCache(stC'#1)
             && (forall e#9: Seq :: 
              { _module.__default.Loc($ih#cmd0#0, $ih#deps0#0, e#9) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit($ih#exts0#0)), $Box(e#9)) } 
              $Is(e#9, TSeq(TChar))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit($ih#exts0#0)), $Box(e#9))
                 ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#1)), 
                  _module.__default.Hash(_module.__default.Loc($ih#cmd0#0, $ih#deps0#0, e#9))))));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(76,12)
    assume true;
    assert {:id "id128"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id129"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    assume true;
    strs#0 := _module.Literal.strs(_module.Expression.lit(exts#0));
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(77,12)
    assume true;
    ##cmd#3 := cmd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##cmd#3, Tclass._module.Expression(), $Heap);
    ##deps#3 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##deps#3, Tclass._module.Expression(), $Heap);
    ##exts#1 := exts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##exts#1, Tclass._module.Expression(), $Heap);
    ##stC#3 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#3, Tclass._module.StateC(), $Heap);
    assert {:id "id131"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#3);
    assert {:id "id132"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#3));
    assert {:id "id133"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#3);
    assert {:id "id134"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3));
    assert {:id "id135"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#1);
    assert {:id "id136"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1));
    assume _module.Expression.exprLiteral_q(##cmd#3)
       && _module.Literal.litString_q(_module.Expression.lit(##cmd#3))
       && _module.Expression.exprLiteral_q(##deps#3)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3))
       && _module.Expression.exprLiteral_q(##exts#1)
       && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1));
    assume _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0);
    assume _module.StateC.S_q(_module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0));
    assume _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, stC#0);
    stC'#2 := _module.__default.UpdateC($LS($LZ), cmd#0, deps#0, exts#0, stC#0);
    defass#stC'#2 := true;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(78,3)
    assume true;
    if (Set#Equal(strs#0, Set#Empty(): Set))
    {
    }
    else
    {
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(80,11)
        assume true;
        ##ss#1_0 := strs#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##ss#1_0, TSet(TSeq(TChar)), $Heap);
        assert {:id "id138"} {:subsumption 0} !Set#Equal(##ss#1_0, Set#Empty(): Set);
        assume !Set#Equal(##ss#1_0, Set#Empty(): Set);
        assume _module.__default.Choose#canCall(strs#0);
        assume _module.__default.Choose#canCall(strs#0);
        e#1_0 := _module.__default.Choose(strs#0);
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(81,12)
        assume true;
        ##cmd#1_0 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#1_0, Tclass._module.Expression(), $Heap);
        ##deps#1_0 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#1_0, Tclass._module.Expression(), $Heap);
        ##ext#1_0 := e#1_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##ext#1_0, TSeq(TChar), $Heap);
        assume _module.__default.Loc#canCall(cmd#0, deps#0, e#1_0);
        ##p#1_0 := _module.__default.Loc(cmd#0, deps#0, e#1_0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##p#1_0, Tclass._module.Path(), $Heap);
        assume _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#1_0));
        ##h#1_0 := _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1_0));
        // assume allocatedness for argument to function
        assume $IsAllocBox(##h#1_0, Tclass._module.HashValue(), $Heap);
        ##cmd#1_1 := #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#1_0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#1_1, 
          Tclass._module.Triple(Tclass._module.Expression(), Tclass._module.Expression(), TSeq(TChar)), 
          $Heap);
        assume _module.StateC.S_q(stC#0);
        ##c#1_0 := _module.StateC.c(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##c#1_0, Tclass._module.Cache(), $Heap);
        assume _module.__default.SetC#canCall(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1_0)), 
          #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#1_0)), 
          _module.StateC.c(stC#0));
        assume _module.__default.Loc#canCall(cmd#0, deps#0, e#1_0)
           && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#1_0))
           && _module.StateC.S_q(stC#0)
           && _module.__default.SetC#canCall(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1_0)), 
            #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#1_0)), 
            _module.StateC.c(stC#0));
        c'#1_0 := _module.__default.SetC(_module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1_0)), 
          #_module.Triple.Trio($Box(cmd#0), $Box(deps#0), $Box(e#1_0)), 
          _module.StateC.c(stC#0));
        defass#c'#1_0 := true;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(82,15)
        assume true;
        assume true;
        exts'#1_0 := #_module.Expression.exprLiteral(#_module.Literal.litArrOfStrings(Set#Difference(strs#0, Set#UnionOne(Set#Empty(): Set, $Box(e#1_0)))));
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(84,5)
        assert {:id "id142"} defass#stC'#2;
        ##cmd#1_2 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#1_2, Tclass._module.Expression(), $Heap);
        ##deps#1_1 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#1_1, Tclass._module.Expression(), $Heap);
        ##exts#1_0 := exts'#1_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exts#1_0, Tclass._module.Expression(), $Heap);
        assume _module.StateC.S_q(stC#0);
        assert {:id "id143"} defass#c'#1_0;
        ##stC#1_0 := #_module.StateC.S(_module.StateC.st(stC#0), c'#1_0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#1_0, Tclass._module.StateC(), $Heap);
        assert {:id "id144"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#1_2);
        assert {:id "id145"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#1_2));
        assert {:id "id146"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#1_1);
        assert {:id "id147"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#1_1));
        assert {:id "id148"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#1_0);
        assert {:id "id149"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1_0));
        assume _module.__default.UpdateC#canCall(cmd#0, deps#0, exts'#1_0, #_module.StateC.S(_module.StateC.st(stC#0), c'#1_0));
        assume _module.StateC.S_q(_module.__default.UpdateC($LS($LZ), 
            cmd#0, 
            deps#0, 
            exts'#1_0, 
            #_module.StateC.S(_module.StateC.st(stC#0), c'#1_0)));
        assume $IsA#_module.StateC(stC'#2)
           && $IsA#_module.StateC(_module.__default.UpdateC($LS($LZ), 
              cmd#0, 
              deps#0, 
              exts'#1_0, 
              #_module.StateC.S(_module.StateC.st(stC#0), c'#1_0)))
           && 
          _module.StateC.S_q(stC#0)
           && _module.__default.UpdateC#canCall(cmd#0, deps#0, exts'#1_0, #_module.StateC.S(_module.StateC.st(stC#0), c'#1_0));
        assert {:id "id150"} {:subsumption 0} _module.StateC#Equal(stC'#2, 
          _module.__default.UpdateC($LS($LS($LZ)), 
            cmd#0, 
            deps#0, 
            exts'#1_0, 
            #_module.StateC.S(_module.StateC.st(stC#0), c'#1_0)));
        assume {:id "id151"} _module.StateC#Equal(stC'#2, 
          _module.__default.UpdateC($LS($LZ), 
            cmd#0, 
            deps#0, 
            exts'#1_0, 
            #_module.StateC.S(_module.StateC.st(stC#0), c'#1_0)));
        // ----- forall statement (call) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(85,5)
        if (*)
        {
            // Assume Fuel Constant
            havoc cmd'#1_0_0, deps'#1_0_0, e'#1_0_0;
            assume $Is(cmd'#1_0_0, Tclass._module.Expression())
               && $Is(deps'#1_0_0, Tclass._module.Expression())
               && $Is(e'#1_0_0, TSeq(TChar));
            ##cmd#1_0_0 := cmd'#1_0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#1_0_0, Tclass._module.Expression(), $Heap);
            ##deps#1_0_0 := deps'#1_0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#1_0_0, Tclass._module.Expression(), $Heap);
            ##ext#1_0_0 := e'#1_0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ext#1_0_0, TSeq(TChar), $Heap);
            assume _module.__default.Loc#canCall(cmd'#1_0_0, deps'#1_0_0, e'#1_0_0);
            ##p#1_0_0 := _module.__default.Loc(cmd'#1_0_0, deps'#1_0_0, e'#1_0_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#1_0_0, Tclass._module.Path(), $Heap);
            assume _module.__default.Hash#canCall(_module.__default.Loc(cmd'#1_0_0, deps'#1_0_0, e'#1_0_0));
            ##cmd#1_0_1 := cmd#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#1_0_1, Tclass._module.Expression(), $Heap);
            ##deps#1_0_1 := deps#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#1_0_1, Tclass._module.Expression(), $Heap);
            ##ext#1_0_1 := e#1_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ext#1_0_1, TSeq(TChar), $Heap);
            assume _module.__default.Loc#canCall(cmd#0, deps#0, e#1_0);
            ##p#1_0_1 := _module.__default.Loc(cmd#0, deps#0, e#1_0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#1_0_1, Tclass._module.Path(), $Heap);
            assume _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#1_0));
            assume _module.__default.Loc#canCall(cmd'#1_0_0, deps'#1_0_0, e'#1_0_0)
               && _module.__default.Hash#canCall(_module.__default.Loc(cmd'#1_0_0, deps'#1_0_0, e'#1_0_0))
               && 
              _module.__default.Loc#canCall(cmd#0, deps#0, e#1_0)
               && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#1_0));
            assume _module.__default.Hash(_module.__default.Loc(cmd'#1_0_0, deps'#1_0_0, e'#1_0_0))
               == _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1_0));
            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(86,19)
            // TrCallStmt: Before ProcessCallStmt
            assume true;
            // ProcessCallStmt: CheckSubrange
            cmd##1_0_0 := cmd'#1_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            deps##1_0_0 := deps'#1_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            ext##1_0_0 := e'#1_0_0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            cmd'##1_0_0 := cmd#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            deps'##1_0_0 := deps#0;
            assume true;
            // ProcessCallStmt: CheckSubrange
            ext'##1_0_0 := e#1_0;
            call {:id "id152"} Call$$_module.__default.HashProperty(cmd##1_0_0, deps##1_0_0, ext##1_0_0, cmd'##1_0_0, deps'##1_0_0, ext'##1_0_0);
            // TrCallStmt: After ProcessCallStmt
            assume false;
        }
        else
        {
            $initHeapForallStmt#1_0_0 := $Heap;
            havoc $Heap;
            assume $initHeapForallStmt#1_0_0 == $Heap;
            assume (forall cmd'#1_0_1: DatatypeType, deps'#1_0_1: DatatypeType, e'#1_0_1: Seq :: 
              { _module.__default.Loc(cmd'#1_0_1, deps'#1_0_1, e'#1_0_1) } 
              $Is(cmd'#1_0_1, Tclass._module.Expression())
                   && $Is(deps'#1_0_1, Tclass._module.Expression())
                   && $Is(e'#1_0_1, TSeq(TChar))
                   && _module.__default.Hash(_module.__default.Loc(cmd'#1_0_1, deps'#1_0_1, e'#1_0_1))
                     == _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1_0))
                 ==> _module.Expression#Equal(cmd'#1_0_1, cmd#0)
                   && _module.Expression#Equal(deps'#1_0_1, deps#0)
                   && Seq#Equal(e'#1_0_1, e#1_0));
        }
    }
}



// function declaration for _module._default.Choose
function _module.__default.Choose(ss#0: Set) : Seq
uses {
// consequence axiom for _module.__default.Choose
axiom 0 <= $FunctionContextHeight
   ==> (forall ss#0: Set :: 
    { _module.__default.Choose(ss#0) } 
    _module.__default.Choose#canCall(ss#0)
         || (0 < $FunctionContextHeight
           && 
          $Is(ss#0, TSet(TSeq(TChar)))
           && !Set#Equal(ss#0, Set#Empty(): Set))
       ==> $Is(_module.__default.Choose(ss#0), TSeq(TChar)));
// definition axiom for _module.__default.Choose (revealed)
axiom {:id "id153"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, ss#0: Set :: 
    { _module.__default.Choose(ss#0), $IsGoodHeap($Heap) } 
    _module.__default.Choose#canCall(ss#0)
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(ss#0, TSet(TSeq(TChar)))
           && !Set#Equal(ss#0, Set#Empty(): Set))
       ==> $let#0$canCall(ss#0)
         && _module.__default.Choose(ss#0) == (var s#0 := $let#0_s(ss#0); s#0));
// definition axiom for _module.__default.Choose for all literals (revealed)
axiom {:id "id154"} 0 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, ss#0: Set :: 
    {:weight 3} { _module.__default.Choose(Lit(ss#0)), $IsGoodHeap($Heap) } 
    _module.__default.Choose#canCall(Lit(ss#0))
         || (0 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(ss#0, TSet(TSeq(TChar)))
           && !Set#Equal(ss#0, Set#Empty(): Set))
       ==> $let#0$canCall(Lit(ss#0))
         && _module.__default.Choose(Lit(ss#0)) == (var s#1 := $let#0_s(Lit(ss#0)); s#1));
}

function _module.__default.Choose#canCall(ss#0: Set) : bool;

function _module.__default.Choose#requires(Set) : bool;

// #requires axiom for _module.__default.Choose
axiom (forall $Heap: Heap, ss#0: Set :: 
  { _module.__default.Choose#requires(ss#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(ss#0, TSet(TSeq(TChar)))
     ==> _module.__default.Choose#requires(ss#0) == !Set#Equal(ss#0, Set#Empty(): Set));

function $let#0_s(ss: Set) : Seq;

function $let#0$canCall(ss: Set) : bool;

axiom (forall ss: Set :: 
  { $let#0_s(ss) } 
  $let#0$canCall(ss)
     ==> $Is($let#0_s(ss), TSeq(TChar)) && Set#IsMember(ss, $Box($let#0_s(ss))));

procedure {:verboseName "Choose (well-formedness)"} CheckWellformed$$_module.__default.Choose(ss#0: Set where $Is(ss#0, TSet(TSeq(TChar))));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Choose (well-formedness)"} CheckWellformed$$_module.__default.Choose(ss#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var s#2: Seq;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id155"} !Set#Equal(ss#0, Set#Empty(): Set);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.Choose(ss#0), TSeq(TChar));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc s#2;
        if ($Is(s#2, TSeq(TChar)) && $IsAlloc(s#2, TSeq(TChar), $Heap))
        {
        }

        assert {:id "id156"} ($Is(Lit(Seq#Empty(): Seq), TSeq(TChar))
             && Set#IsMember(ss#0, $Box(Lit(Seq#Empty(): Seq))))
           || (exists s#3: Seq :: $Is(s#3, TSeq(TChar)) && Set#IsMember(ss#0, $Box(s#3)));
        assume $Is(s#2, TSeq(TChar)) && $IsAlloc(s#2, TSeq(TChar), $Heap);
        assume Set#IsMember(ss#0, $Box(s#2));
        assume $let#0$canCall(ss#0);
        assume {:id "id157"} _module.__default.Choose(ss#0) == s#2;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.Choose(ss#0), TSeq(TChar));
        return;

        assume false;
    }
}



// function declaration for _module._default.DomC
function _module.__default.DomC(c#0: Box) : Set
uses {
// consequence axiom for _module.__default.DomC
axiom 0 <= $FunctionContextHeight
   ==> (forall c#0: Box :: 
    { _module.__default.DomC(c#0) } 
    _module.__default.DomC#canCall(c#0)
         || (0 < $FunctionContextHeight && $IsBox(c#0, Tclass._module.Cache()))
       ==> $Is(_module.__default.DomC(c#0), TSet(Tclass._module.HashValue())));
}

function _module.__default.DomC#canCall(c#0: Box) : bool;

function _module.__default.DomC#requires(Box) : bool;

// #requires axiom for _module.__default.DomC
axiom (forall c#0: Box :: 
  { _module.__default.DomC#requires(c#0) } 
  $IsBox(c#0, Tclass._module.Cache())
     ==> _module.__default.DomC#requires(c#0) == true);

procedure {:verboseName "DomC (well-formedness)"} CheckWellformed$$_module.__default.DomC(c#0: Box where $IsBox(c#0, Tclass._module.Cache()));
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.UnionC
function _module.__default.UnionC(stC#0: DatatypeType, stC'#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.UnionC
axiom 3 <= $FunctionContextHeight
   ==> (forall stC#0: DatatypeType, stC'#0: DatatypeType :: 
    { _module.__default.UnionC(stC#0, stC'#0) } 
    _module.__default.UnionC#canCall(stC#0, stC'#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(stC#0, Tclass._module.StateC())
           && $Is(stC'#0, Tclass._module.StateC()))
       ==> (var result#0 := _module.__default.UnionC(stC#0, stC'#0); 
          Set#Equal(_module.__default.DomSt(_module.StateC.st(result#0)), 
              Set#Union(_module.__default.DomSt(_module.StateC.st(stC#0)), 
                _module.__default.DomSt(_module.StateC.st(stC'#0))))
             && (forall p#0: DatatypeType :: 
              { _module.__default.GetSt(p#0, _module.StateC.st(stC'#0)) } 
                { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#0)) } 
                { _module.__default.GetSt(p#0, _module.StateC.st(stC#0)) } 
                { _module.__default.GetSt(p#0, _module.StateC.st(result#0)) } 
                { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0)) } 
                { Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#0)), $Box(p#0)) } 
              $Is(p#0, Tclass._module.Path())
                 ==> (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#0)), $Box(p#0))
                     ==> 
                    Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0))
                     ==> _module.__default.GetSt(p#0, _module.StateC.st(result#0))
                       == _module.__default.GetSt(p#0, _module.StateC.st(stC#0)))
                   && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#0)), $Box(p#0))
                     ==> 
                    Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#0))
                     ==> _module.__default.GetSt(p#0, _module.StateC.st(result#0))
                       == _module.__default.GetSt(p#0, _module.StateC.st(stC'#0))))
             && Set#Equal(_module.__default.DomC(_module.StateC.c(result#0)), 
              Set#Union(_module.__default.DomC(_module.StateC.c(stC#0)), 
                _module.__default.DomC(_module.StateC.c(stC'#0))))
             && (forall h#0: Box :: 
              { _module.__default.GetC(h#0, _module.StateC.c(stC'#0)) } 
                { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#0) } 
                { _module.__default.GetC(h#0, _module.StateC.c(stC#0)) } 
                { _module.__default.GetC(h#0, _module.StateC.c(result#0)) } 
                { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0) } 
                { Set#IsMember(_module.__default.DomC(_module.StateC.c(result#0)), h#0) } 
              $IsBox(h#0, Tclass._module.HashValue())
                 ==> (Set#IsMember(_module.__default.DomC(_module.StateC.c(result#0)), h#0)
                     ==> 
                    Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0)
                     ==> _module.Triple#Equal(_module.__default.GetC(h#0, _module.StateC.c(result#0)), 
                      _module.__default.GetC(h#0, _module.StateC.c(stC#0))))
                   && (Set#IsMember(_module.__default.DomC(_module.StateC.c(result#0)), h#0)
                     ==> 
                    Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#0)
                     ==> _module.Triple#Equal(_module.__default.GetC(h#0, _module.StateC.c(result#0)), 
                      _module.__default.GetC(h#0, _module.StateC.c(stC'#0))))))
         && $Is(_module.__default.UnionC(stC#0, stC'#0), Tclass._module.StateC()));
}

function _module.__default.UnionC#canCall(stC#0: DatatypeType, stC'#0: DatatypeType) : bool;

function _module.__default.UnionC#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.UnionC
axiom (forall stC#0: DatatypeType, stC'#0: DatatypeType :: 
  { _module.__default.UnionC#requires(stC#0, stC'#0) } 
  $Is(stC#0, Tclass._module.StateC()) && $Is(stC'#0, Tclass._module.StateC())
     ==> _module.__default.UnionC#requires(stC#0, stC'#0) == true);

procedure {:verboseName "UnionC (well-formedness)"} CheckWellformed$$_module.__default.UnionC(stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()), 
    stC'#0: DatatypeType where $Is(stC'#0, Tclass._module.StateC()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id158"} (var result#1 := _module.__default.UnionC(stC#0, stC'#0); 
    Set#Equal(_module.__default.DomSt(_module.StateC.st(result#1)), 
      Set#Union(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#0)))));
  ensures {:id "id159"} (var result#1 := _module.__default.UnionC(stC#0, stC'#0); 
    (forall p#1: DatatypeType :: 
      { _module.__default.GetSt(p#1, _module.StateC.st(stC'#0)) } 
        { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#1)) } 
        { _module.__default.GetSt(p#1, _module.StateC.st(stC#0)) } 
        { _module.__default.GetSt(p#1, _module.StateC.st(result#1)) } 
        { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#1)) } 
        { Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#1)), $Box(p#1)) } 
      $Is(p#1, Tclass._module.Path())
         ==> (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#1)), $Box(p#1))
             ==> 
            Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#1))
             ==> _module.__default.GetSt(p#1, _module.StateC.st(result#1))
               == _module.__default.GetSt(p#1, _module.StateC.st(stC#0)))
           && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#1)), $Box(p#1))
             ==> 
            Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#1))
             ==> _module.__default.GetSt(p#1, _module.StateC.st(result#1))
               == _module.__default.GetSt(p#1, _module.StateC.st(stC'#0)))));
  ensures {:id "id160"} (var result#1 := _module.__default.UnionC(stC#0, stC'#0); 
    Set#Equal(_module.__default.DomC(_module.StateC.c(result#1)), 
      Set#Union(_module.__default.DomC(_module.StateC.c(stC#0)), 
        _module.__default.DomC(_module.StateC.c(stC'#0)))));
  ensures {:id "id161"} (var result#1 := _module.__default.UnionC(stC#0, stC'#0); 
    (forall h#1: Box :: 
      { _module.__default.GetC(h#1, _module.StateC.c(stC'#0)) } 
        { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#1) } 
        { _module.__default.GetC(h#1, _module.StateC.c(stC#0)) } 
        { _module.__default.GetC(h#1, _module.StateC.c(result#1)) } 
        { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#1) } 
        { Set#IsMember(_module.__default.DomC(_module.StateC.c(result#1)), h#1) } 
      $IsBox(h#1, Tclass._module.HashValue())
         ==> (Set#IsMember(_module.__default.DomC(_module.StateC.c(result#1)), h#1)
             ==> 
            Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#1)
             ==> _module.Triple#Equal(_module.__default.GetC(h#1, _module.StateC.c(result#1)), 
              _module.__default.GetC(h#1, _module.StateC.c(stC#0))))
           && (Set#IsMember(_module.__default.DomC(_module.StateC.c(result#1)), h#1)
             ==> 
            Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#1)
             ==> _module.Triple#Equal(_module.__default.GetC(h#1, _module.StateC.c(result#1)), 
              _module.__default.GetC(h#1, _module.StateC.c(stC'#0))))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "UnionC (well-formedness)"} CheckWellformed$$_module.__default.UnionC(stC#0: DatatypeType, stC'#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##stC#0: DatatypeType;
  var ##stC'#0: DatatypeType;
  var ##st#0: Box;
  var ##st#1: Box;
  var ##st#2: Box;
  var p#2: DatatypeType;
  var ##st#3: Box;
  var ##st#4: Box;
  var ##p#0: DatatypeType;
  var ##st#5: Box;
  var ##p#1: DatatypeType;
  var ##st#6: Box;
  var ##st#7: Box;
  var ##st#8: Box;
  var ##p#2: DatatypeType;
  var ##st#9: Box;
  var ##p#3: DatatypeType;
  var ##st#10: Box;
  var ##c#0: Box;
  var ##c#1: Box;
  var ##c#2: Box;
  var h#2: Box;
  var ##c#3: Box;
  var ##c#4: Box;
  var ##h#0: Box;
  var ##c#5: Box;
  var ##h#1: Box;
  var ##c#6: Box;
  var ##c#7: Box;
  var ##c#8: Box;
  var ##h#2: Box;
  var ##c#9: Box;
  var ##h#3: Box;
  var ##c#10: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.UnionC(stC#0, stC'#0), Tclass._module.StateC());
        havoc result#Z#0;
        ##stC#0 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
        ##stC'#0 := stC'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC'#0, Tclass._module.StateC(), $Heap);
        assert {:id "id162"} (_module.StateC#Equal(stC#0, stC#0) && _module.StateC#Equal(stC'#0, stC'#0))
           || 
          DtRank(##stC#0) < DtRank(stC#0)
           || (DtRank(##stC#0) == DtRank(stC#0) && DtRank(##stC'#0) < DtRank(stC'#0));
        assume (_module.StateC#Equal(stC#0, stC#0) && _module.StateC#Equal(stC'#0, stC'#0))
           || _module.__default.UnionC#canCall(stC#0, stC'#0);
        assume _module.StateC.S_q(_module.__default.UnionC(stC#0, stC'#0));
        assume {:id "id163"} let#0#0#0 == _module.__default.UnionC(stC#0, stC'#0);
        assume _module.__default.UnionC#canCall(stC#0, stC'#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, Tclass._module.StateC());
        assume {:id "id164"} result#Z#0 == let#0#0#0;
        assume _module.StateC.S_q(result#Z#0);
        ##st#0 := _module.StateC.st(result#Z#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(result#Z#0));
        assume _module.StateC.S_q(stC#0);
        ##st#1 := _module.StateC.st(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
        assume _module.StateC.S_q(stC'#0);
        ##st#2 := _module.StateC.st(stC'#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(stC'#0));
        if (Set#Equal(_module.__default.DomSt(_module.StateC.st(result#Z#0)), 
          Set#Union(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            _module.__default.DomSt(_module.StateC.st(stC'#0)))))
        {
            // Begin Comprehension WF check
            havoc p#2;
            if ($Is(p#2, Tclass._module.Path()) && $IsAlloc(p#2, Tclass._module.Path(), $Heap))
            {
                assume _module.StateC.S_q(result#Z#0);
                ##st#3 := _module.StateC.st(result#Z#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#3, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(_module.StateC.st(result#Z#0));
                if (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#Z#0)), $Box(p#2)))
                {
                    assume _module.StateC.S_q(stC#0);
                    ##st#4 := _module.StateC.st(stC#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#4, Tclass._module.State(), $Heap);
                    assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
                    if (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2)))
                    {
                        ##p#0 := p#2;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                        assume _module.StateC.S_q(result#Z#0);
                        ##st#5 := _module.StateC.st(result#Z#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#5, Tclass._module.State(), $Heap);
                        assume _module.__default.GetSt#canCall(p#2, _module.StateC.st(result#Z#0));
                        ##p#1 := p#2;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##p#1, Tclass._module.Path(), $Heap);
                        assume _module.StateC.S_q(stC#0);
                        ##st#6 := _module.StateC.st(stC#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#6, Tclass._module.State(), $Heap);
                        assume _module.__default.GetSt#canCall(p#2, _module.StateC.st(stC#0));
                    }
                }

                if (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#Z#0)), $Box(p#2))
                   ==> 
                  Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2))
                   ==> _module.__default.GetSt(p#2, _module.StateC.st(result#Z#0))
                     == _module.__default.GetSt(p#2, _module.StateC.st(stC#0)))
                {
                    assume _module.StateC.S_q(result#Z#0);
                    ##st#7 := _module.StateC.st(result#Z#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#7, Tclass._module.State(), $Heap);
                    assume _module.__default.DomSt#canCall(_module.StateC.st(result#Z#0));
                    if (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#Z#0)), $Box(p#2)))
                    {
                        assume _module.StateC.S_q(stC'#0);
                        ##st#8 := _module.StateC.st(stC'#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##st#8, Tclass._module.State(), $Heap);
                        assume _module.__default.DomSt#canCall(_module.StateC.st(stC'#0));
                        if (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2)))
                        {
                            ##p#2 := p#2;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##p#2, Tclass._module.Path(), $Heap);
                            assume _module.StateC.S_q(result#Z#0);
                            ##st#9 := _module.StateC.st(result#Z#0);
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##st#9, Tclass._module.State(), $Heap);
                            assume _module.__default.GetSt#canCall(p#2, _module.StateC.st(result#Z#0));
                            ##p#3 := p#2;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##p#3, Tclass._module.Path(), $Heap);
                            assume _module.StateC.S_q(stC'#0);
                            ##st#10 := _module.StateC.st(stC'#0);
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##st#10, Tclass._module.State(), $Heap);
                            assume _module.__default.GetSt#canCall(p#2, _module.StateC.st(stC'#0));
                        }
                    }
                }
            }

            // End Comprehension WF check
        }

        if (Set#Equal(_module.__default.DomSt(_module.StateC.st(result#Z#0)), 
            Set#Union(_module.__default.DomSt(_module.StateC.st(stC#0)), 
              _module.__default.DomSt(_module.StateC.st(stC'#0))))
           && (forall p#3: DatatypeType :: 
            { _module.__default.GetSt(p#3, _module.StateC.st(stC'#0)) } 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#3)) } 
              { _module.__default.GetSt(p#3, _module.StateC.st(stC#0)) } 
              { _module.__default.GetSt(p#3, _module.StateC.st(result#Z#0)) } 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#3)) } 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#Z#0)), $Box(p#3)) } 
            $Is(p#3, Tclass._module.Path())
               ==> (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#Z#0)), $Box(p#3))
                   ==> 
                  Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#3))
                   ==> _module.__default.GetSt(p#3, _module.StateC.st(result#Z#0))
                     == _module.__default.GetSt(p#3, _module.StateC.st(stC#0)))
                 && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#Z#0)), $Box(p#3))
                   ==> 
                  Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#3))
                   ==> _module.__default.GetSt(p#3, _module.StateC.st(result#Z#0))
                     == _module.__default.GetSt(p#3, _module.StateC.st(stC'#0)))))
        {
            assume _module.StateC.S_q(result#Z#0);
            ##c#0 := _module.StateC.c(result#Z#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
            assume _module.__default.DomC#canCall(_module.StateC.c(result#Z#0));
            assume _module.StateC.S_q(stC#0);
            ##c#1 := _module.StateC.c(stC#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##c#1, Tclass._module.Cache(), $Heap);
            assume _module.__default.DomC#canCall(_module.StateC.c(stC#0));
            assume _module.StateC.S_q(stC'#0);
            ##c#2 := _module.StateC.c(stC'#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##c#2, Tclass._module.Cache(), $Heap);
            assume _module.__default.DomC#canCall(_module.StateC.c(stC'#0));
        }

        if (Set#Equal(_module.__default.DomSt(_module.StateC.st(result#Z#0)), 
            Set#Union(_module.__default.DomSt(_module.StateC.st(stC#0)), 
              _module.__default.DomSt(_module.StateC.st(stC'#0))))
           && (forall p#3: DatatypeType :: 
            { _module.__default.GetSt(p#3, _module.StateC.st(stC'#0)) } 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#3)) } 
              { _module.__default.GetSt(p#3, _module.StateC.st(stC#0)) } 
              { _module.__default.GetSt(p#3, _module.StateC.st(result#Z#0)) } 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#3)) } 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#Z#0)), $Box(p#3)) } 
            $Is(p#3, Tclass._module.Path())
               ==> (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#Z#0)), $Box(p#3))
                   ==> 
                  Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#3))
                   ==> _module.__default.GetSt(p#3, _module.StateC.st(result#Z#0))
                     == _module.__default.GetSt(p#3, _module.StateC.st(stC#0)))
                 && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#Z#0)), $Box(p#3))
                   ==> 
                  Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#3))
                   ==> _module.__default.GetSt(p#3, _module.StateC.st(result#Z#0))
                     == _module.__default.GetSt(p#3, _module.StateC.st(stC'#0))))
           && Set#Equal(_module.__default.DomC(_module.StateC.c(result#Z#0)), 
            Set#Union(_module.__default.DomC(_module.StateC.c(stC#0)), 
              _module.__default.DomC(_module.StateC.c(stC'#0)))))
        {
            // Begin Comprehension WF check
            havoc h#2;
            if ($IsBox(h#2, Tclass._module.HashValue())
               && $IsAllocBox(h#2, Tclass._module.HashValue(), $Heap))
            {
                assume _module.StateC.S_q(result#Z#0);
                ##c#3 := _module.StateC.c(result#Z#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##c#3, Tclass._module.Cache(), $Heap);
                assume _module.__default.DomC#canCall(_module.StateC.c(result#Z#0));
                if (Set#IsMember(_module.__default.DomC(_module.StateC.c(result#Z#0)), h#2))
                {
                    assume _module.StateC.S_q(stC#0);
                    ##c#4 := _module.StateC.c(stC#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##c#4, Tclass._module.Cache(), $Heap);
                    assume _module.__default.DomC#canCall(_module.StateC.c(stC#0));
                    if (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#2))
                    {
                        ##h#0 := h#2;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##h#0, Tclass._module.HashValue(), $Heap);
                        assume _module.StateC.S_q(result#Z#0);
                        ##c#5 := _module.StateC.c(result#Z#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##c#5, Tclass._module.Cache(), $Heap);
                        assume _module.__default.GetC#canCall(h#2, _module.StateC.c(result#Z#0));
                        assume _module.Triple.Trio_q(_module.__default.GetC(h#2, _module.StateC.c(result#Z#0)));
                        ##h#1 := h#2;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##h#1, Tclass._module.HashValue(), $Heap);
                        assume _module.StateC.S_q(stC#0);
                        ##c#6 := _module.StateC.c(stC#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##c#6, Tclass._module.Cache(), $Heap);
                        assume _module.__default.GetC#canCall(h#2, _module.StateC.c(stC#0));
                        assume _module.Triple.Trio_q(_module.__default.GetC(h#2, _module.StateC.c(stC#0)));
                    }
                }

                if (Set#IsMember(_module.__default.DomC(_module.StateC.c(result#Z#0)), h#2)
                   ==> 
                  Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#2)
                   ==> _module.Triple#Equal(_module.__default.GetC(h#2, _module.StateC.c(result#Z#0)), 
                    _module.__default.GetC(h#2, _module.StateC.c(stC#0))))
                {
                    assume _module.StateC.S_q(result#Z#0);
                    ##c#7 := _module.StateC.c(result#Z#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##c#7, Tclass._module.Cache(), $Heap);
                    assume _module.__default.DomC#canCall(_module.StateC.c(result#Z#0));
                    if (Set#IsMember(_module.__default.DomC(_module.StateC.c(result#Z#0)), h#2))
                    {
                        assume _module.StateC.S_q(stC'#0);
                        ##c#8 := _module.StateC.c(stC'#0);
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##c#8, Tclass._module.Cache(), $Heap);
                        assume _module.__default.DomC#canCall(_module.StateC.c(stC'#0));
                        if (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#2))
                        {
                            ##h#2 := h#2;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##h#2, Tclass._module.HashValue(), $Heap);
                            assume _module.StateC.S_q(result#Z#0);
                            ##c#9 := _module.StateC.c(result#Z#0);
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##c#9, Tclass._module.Cache(), $Heap);
                            assume _module.__default.GetC#canCall(h#2, _module.StateC.c(result#Z#0));
                            assume _module.Triple.Trio_q(_module.__default.GetC(h#2, _module.StateC.c(result#Z#0)));
                            ##h#3 := h#2;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##h#3, Tclass._module.HashValue(), $Heap);
                            assume _module.StateC.S_q(stC'#0);
                            ##c#10 := _module.StateC.c(stC'#0);
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##c#10, Tclass._module.Cache(), $Heap);
                            assume _module.__default.GetC#canCall(h#2, _module.StateC.c(stC'#0));
                            assume _module.Triple.Trio_q(_module.__default.GetC(h#2, _module.StateC.c(stC'#0)));
                        }
                    }
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id165"} (var result#1 := _module.__default.UnionC(stC#0, stC'#0); 
          Set#Equal(_module.__default.DomSt(_module.StateC.st(result#1)), 
              Set#Union(_module.__default.DomSt(_module.StateC.st(stC#0)), 
                _module.__default.DomSt(_module.StateC.st(stC'#0))))
             && (forall p#1: DatatypeType :: 
              { _module.__default.GetSt(p#1, _module.StateC.st(stC'#0)) } 
                { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#1)) } 
                { _module.__default.GetSt(p#1, _module.StateC.st(stC#0)) } 
                { _module.__default.GetSt(p#1, _module.StateC.st(result#1)) } 
                { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#1)) } 
                { Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#1)), $Box(p#1)) } 
              $Is(p#1, Tclass._module.Path())
                 ==> (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#1)), $Box(p#1))
                     ==> 
                    Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#1))
                     ==> _module.__default.GetSt(p#1, _module.StateC.st(result#1))
                       == _module.__default.GetSt(p#1, _module.StateC.st(stC#0)))
                   && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(result#1)), $Box(p#1))
                     ==> 
                    Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#1))
                     ==> _module.__default.GetSt(p#1, _module.StateC.st(result#1))
                       == _module.__default.GetSt(p#1, _module.StateC.st(stC'#0))))
             && Set#Equal(_module.__default.DomC(_module.StateC.c(result#1)), 
              Set#Union(_module.__default.DomC(_module.StateC.c(stC#0)), 
                _module.__default.DomC(_module.StateC.c(stC'#0))))
             && (forall h#1: Box :: 
              { _module.__default.GetC(h#1, _module.StateC.c(stC'#0)) } 
                { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#1) } 
                { _module.__default.GetC(h#1, _module.StateC.c(stC#0)) } 
                { _module.__default.GetC(h#1, _module.StateC.c(result#1)) } 
                { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#1) } 
                { Set#IsMember(_module.__default.DomC(_module.StateC.c(result#1)), h#1) } 
              $IsBox(h#1, Tclass._module.HashValue())
                 ==> (Set#IsMember(_module.__default.DomC(_module.StateC.c(result#1)), h#1)
                     ==> 
                    Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#1)
                     ==> _module.Triple#Equal(_module.__default.GetC(h#1, _module.StateC.c(result#1)), 
                      _module.__default.GetC(h#1, _module.StateC.c(stC#0))))
                   && (Set#IsMember(_module.__default.DomC(_module.StateC.c(result#1)), h#1)
                     ==> 
                    Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#1)
                     ==> _module.Triple#Equal(_module.__default.GetC(h#1, _module.StateC.c(result#1)), 
                      _module.__default.GetC(h#1, _module.StateC.c(stC'#0))))));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module._default.CompatibleC
function _module.__default.CompatibleC(stsC#0: Set) : bool
uses {
// definition axiom for _module.__default.CompatibleC (revealed)
axiom {:id "id166"} 3 <= $FunctionContextHeight
   ==> (forall stsC#0: Set :: 
    { _module.__default.CompatibleC(stsC#0) } 
    _module.__default.CompatibleC#canCall(stsC#0)
         || (3 < $FunctionContextHeight && $Is(stsC#0, TSet(Tclass._module.StateC())))
       ==> (forall stC#0: DatatypeType, stC'#0: DatatypeType, p#0: DatatypeType, h#0: Box :: 
          { _module.__default.GetC(h#0, _module.StateC.c(stC'#0)), _module.__default.GetSt(p#0, _module.StateC.st(stC#0)) } 
            { _module.__default.GetC(h#0, _module.StateC.c(stC#0)), _module.__default.GetSt(p#0, _module.StateC.st(stC'#0)) } 
            { _module.__default.GetC(h#0, _module.StateC.c(stC#0)), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#0)) } 
            { _module.__default.GetSt(p#0, _module.StateC.st(stC#0)), Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#0) } 
            { _module.StateC.c(stC'#0), Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0)) } 
            { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0), _module.StateC.st(stC'#0), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0)) } 
            { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0)), Set#IsMember(stsC#0, $Box(stC'#0)) } 
          $Is(stC#0, Tclass._module.StateC())
               && $Is(stC'#0, Tclass._module.StateC())
               && $Is(p#0, Tclass._module.Path())
               && $IsBox(h#0, Tclass._module.HashValue())
             ==> (Set#IsMember(stsC#0, $Box(stC#0))
                 ==> 
                Set#IsMember(stsC#0, $Box(stC'#0))
                 ==> _module.StateC.S_q(stC#0)
                   && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                   && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0))
                     ==> _module.StateC.S_q(stC'#0)
                       && _module.__default.DomSt#canCall(_module.StateC.st(stC'#0))
                       && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#0))
                         ==> _module.StateC.S_q(stC#0)
                           && _module.__default.DomC#canCall(_module.StateC.c(stC#0))
                           && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0)
                             ==> _module.StateC.S_q(stC'#0)
                               && _module.__default.DomC#canCall(_module.StateC.c(stC'#0))
                               && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#0)
                                 ==> _module.StateC.S_q(stC#0)
                                   && _module.__default.GetSt#canCall(p#0, _module.StateC.st(stC#0))
                                   && 
                                  _module.StateC.S_q(stC'#0)
                                   && _module.__default.GetSt#canCall(p#0, _module.StateC.st(stC'#0)))))))
               && (
                (Set#IsMember(stsC#0, $Box(stC#0))
                   && Set#IsMember(stsC#0, $Box(stC'#0))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#0))
                   && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0)
                   && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#0)
                 ==> _module.__default.GetSt(p#0, _module.StateC.st(stC#0))
                   == _module.__default.GetSt(p#0, _module.StateC.st(stC'#0)))
                 ==> 
                Set#IsMember(stsC#0, $Box(stC#0))
                 ==> 
                Set#IsMember(stsC#0, $Box(stC'#0))
                 ==> _module.StateC.S_q(stC#0)
                   && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                   && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0))
                     ==> _module.StateC.S_q(stC'#0)
                       && _module.__default.DomSt#canCall(_module.StateC.st(stC'#0))
                       && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#0))
                         ==> _module.StateC.S_q(stC#0)
                           && _module.__default.DomC#canCall(_module.StateC.c(stC#0))
                           && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0)
                             ==> _module.StateC.S_q(stC'#0)
                               && _module.__default.DomC#canCall(_module.StateC.c(stC'#0))
                               && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#0)
                                 ==> $IsA#_module.Triple(_module.__default.GetC(h#0, _module.StateC.c(stC#0)))
                                   && $IsA#_module.Triple(_module.__default.GetC(h#0, _module.StateC.c(stC'#0)))
                                   && 
                                  _module.StateC.S_q(stC#0)
                                   && _module.__default.GetC#canCall(h#0, _module.StateC.c(stC#0))
                                   && 
                                  _module.StateC.S_q(stC'#0)
                                   && _module.__default.GetC#canCall(h#0, _module.StateC.c(stC'#0))))))))
         && _module.__default.CompatibleC(stsC#0)
           == (forall stC#0: DatatypeType, stC'#0: DatatypeType, p#0: DatatypeType, h#0: Box :: 
            { _module.__default.GetC(h#0, _module.StateC.c(stC'#0)), _module.__default.GetSt(p#0, _module.StateC.st(stC#0)) } 
              { _module.__default.GetC(h#0, _module.StateC.c(stC#0)), _module.__default.GetSt(p#0, _module.StateC.st(stC'#0)) } 
              { _module.__default.GetC(h#0, _module.StateC.c(stC#0)), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#0)) } 
              { _module.__default.GetSt(p#0, _module.StateC.st(stC#0)), Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#0) } 
              { _module.StateC.c(stC'#0), Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0)) } 
              { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0), _module.StateC.st(stC'#0), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0)) } 
              { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0)), Set#IsMember(stsC#0, $Box(stC'#0)) } 
            $Is(stC#0, Tclass._module.StateC())
                 && $Is(stC'#0, Tclass._module.StateC())
                 && $Is(p#0, Tclass._module.Path())
                 && $IsBox(h#0, Tclass._module.HashValue())
               ==> (Set#IsMember(stsC#0, $Box(stC#0))
                     && Set#IsMember(stsC#0, $Box(stC'#0))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#0))
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0)
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#0)
                   ==> _module.__default.GetSt(p#0, _module.StateC.st(stC#0))
                     == _module.__default.GetSt(p#0, _module.StateC.st(stC'#0)))
                 && (Set#IsMember(stsC#0, $Box(stC#0))
                     && Set#IsMember(stsC#0, $Box(stC'#0))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#0))
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), h#0)
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), h#0)
                   ==> _module.Triple#Equal(_module.__default.GetC(h#0, _module.StateC.c(stC#0)), 
                    _module.__default.GetC(h#0, _module.StateC.c(stC'#0))))));
// definition axiom for _module.__default.CompatibleC for all literals (revealed)
axiom {:id "id167"} 3 <= $FunctionContextHeight
   ==> (forall stsC#0: Set :: 
    {:weight 3} { _module.__default.CompatibleC(Lit(stsC#0)) } 
    _module.__default.CompatibleC#canCall(Lit(stsC#0))
         || (3 < $FunctionContextHeight && $Is(stsC#0, TSet(Tclass._module.StateC())))
       ==> (forall stC#1: DatatypeType, stC'#1: DatatypeType, p#1: DatatypeType, h#1: Box :: 
          { _module.__default.GetC(h#1, _module.StateC.c(stC'#1)), _module.__default.GetSt(p#1, _module.StateC.st(stC#1)) } 
            { _module.__default.GetC(h#1, _module.StateC.c(stC#1)), _module.__default.GetSt(p#1, _module.StateC.st(stC'#1)) } 
            { _module.__default.GetC(h#1, _module.StateC.c(stC#1)), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#1)), $Box(p#1)) } 
            { _module.__default.GetSt(p#1, _module.StateC.st(stC#1)), Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#1)), h#1) } 
            { _module.StateC.c(stC'#1), Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1)) } 
            { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1), _module.StateC.st(stC'#1), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1)) } 
            { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1)), Set#IsMember(stsC#0, $Box(stC'#1)) } 
          $Is(stC#1, Tclass._module.StateC())
               && $Is(stC'#1, Tclass._module.StateC())
               && $Is(p#1, Tclass._module.Path())
               && $IsBox(h#1, Tclass._module.HashValue())
             ==> (Set#IsMember(Lit(stsC#0), $Box(stC#1))
                 ==> 
                Set#IsMember(Lit(stsC#0), $Box(stC'#1))
                 ==> _module.StateC.S_q(stC#1)
                   && _module.__default.DomSt#canCall(_module.StateC.st(stC#1))
                   && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1))
                     ==> _module.StateC.S_q(stC'#1)
                       && _module.__default.DomSt#canCall(_module.StateC.st(stC'#1))
                       && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#1)), $Box(p#1))
                         ==> _module.StateC.S_q(stC#1)
                           && _module.__default.DomC#canCall(_module.StateC.c(stC#1))
                           && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1)
                             ==> _module.StateC.S_q(stC'#1)
                               && _module.__default.DomC#canCall(_module.StateC.c(stC'#1))
                               && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#1)), h#1)
                                 ==> _module.StateC.S_q(stC#1)
                                   && _module.__default.GetSt#canCall(p#1, _module.StateC.st(stC#1))
                                   && 
                                  _module.StateC.S_q(stC'#1)
                                   && _module.__default.GetSt#canCall(p#1, _module.StateC.st(stC'#1)))))))
               && (
                (Set#IsMember(Lit(stsC#0), $Box(stC#1))
                   && Set#IsMember(Lit(stsC#0), $Box(stC'#1))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#1)), $Box(p#1))
                   && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1)
                   && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#1)), h#1)
                 ==> _module.__default.GetSt(p#1, _module.StateC.st(stC#1))
                   == _module.__default.GetSt(p#1, _module.StateC.st(stC'#1)))
                 ==> 
                Set#IsMember(Lit(stsC#0), $Box(stC#1))
                 ==> 
                Set#IsMember(Lit(stsC#0), $Box(stC'#1))
                 ==> _module.StateC.S_q(stC#1)
                   && _module.__default.DomSt#canCall(_module.StateC.st(stC#1))
                   && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1))
                     ==> _module.StateC.S_q(stC'#1)
                       && _module.__default.DomSt#canCall(_module.StateC.st(stC'#1))
                       && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#1)), $Box(p#1))
                         ==> _module.StateC.S_q(stC#1)
                           && _module.__default.DomC#canCall(_module.StateC.c(stC#1))
                           && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1)
                             ==> _module.StateC.S_q(stC'#1)
                               && _module.__default.DomC#canCall(_module.StateC.c(stC'#1))
                               && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#1)), h#1)
                                 ==> $IsA#_module.Triple(_module.__default.GetC(h#1, _module.StateC.c(stC#1)))
                                   && $IsA#_module.Triple(_module.__default.GetC(h#1, _module.StateC.c(stC'#1)))
                                   && 
                                  _module.StateC.S_q(stC#1)
                                   && _module.__default.GetC#canCall(h#1, _module.StateC.c(stC#1))
                                   && 
                                  _module.StateC.S_q(stC'#1)
                                   && _module.__default.GetC#canCall(h#1, _module.StateC.c(stC'#1))))))))
         && _module.__default.CompatibleC(Lit(stsC#0))
           == (forall stC#1: DatatypeType, stC'#1: DatatypeType, p#1: DatatypeType, h#1: Box :: 
            { _module.__default.GetC(h#1, _module.StateC.c(stC'#1)), _module.__default.GetSt(p#1, _module.StateC.st(stC#1)) } 
              { _module.__default.GetC(h#1, _module.StateC.c(stC#1)), _module.__default.GetSt(p#1, _module.StateC.st(stC'#1)) } 
              { _module.__default.GetC(h#1, _module.StateC.c(stC#1)), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#1)), $Box(p#1)) } 
              { _module.__default.GetSt(p#1, _module.StateC.st(stC#1)), Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#1)), h#1) } 
              { _module.StateC.c(stC'#1), Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1)) } 
              { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1), _module.StateC.st(stC'#1), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1)) } 
              { Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1), Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1)), Set#IsMember(stsC#0, $Box(stC'#1)) } 
            $Is(stC#1, Tclass._module.StateC())
                 && $Is(stC'#1, Tclass._module.StateC())
                 && $Is(p#1, Tclass._module.Path())
                 && $IsBox(h#1, Tclass._module.HashValue())
               ==> (Set#IsMember(Lit(stsC#0), $Box(stC#1))
                     && Set#IsMember(Lit(stsC#0), $Box(stC'#1))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#1)), $Box(p#1))
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1)
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#1)), h#1)
                   ==> _module.__default.GetSt(p#1, _module.StateC.st(stC#1))
                     == _module.__default.GetSt(p#1, _module.StateC.st(stC'#1)))
                 && (Set#IsMember(Lit(stsC#0), $Box(stC#1))
                     && Set#IsMember(Lit(stsC#0), $Box(stC'#1))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#1))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#1)), $Box(p#1))
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#1)), h#1)
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#1)), h#1)
                   ==> _module.Triple#Equal(_module.__default.GetC(h#1, _module.StateC.c(stC#1)), 
                    _module.__default.GetC(h#1, _module.StateC.c(stC'#1))))));
}

function _module.__default.CompatibleC#canCall(stsC#0: Set) : bool;

function _module.__default.CompatibleC#requires(Set) : bool;

// #requires axiom for _module.__default.CompatibleC
axiom (forall stsC#0: Set :: 
  { _module.__default.CompatibleC#requires(stsC#0) } 
  $Is(stsC#0, TSet(Tclass._module.StateC()))
     ==> _module.__default.CompatibleC#requires(stsC#0) == true);

procedure {:verboseName "CompatibleC (well-formedness)"} CheckWellformed$$_module.__default.CompatibleC(stsC#0: Set where $Is(stsC#0, TSet(Tclass._module.StateC())));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.CombineC
function _module.__default.CombineC($ly: LayerType, stsC#0: Set) : DatatypeType
uses {
// consequence axiom for _module.__default.CombineC
axiom 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stsC#0: Set :: 
    { _module.__default.CombineC($ly, stsC#0) } 
    _module.__default.CombineC#canCall(stsC#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(stsC#0, TSet(Tclass._module.StateC()))
           && !Set#Equal(stsC#0, Set#Empty(): Set))
       ==> (var stCombinedC#0 := _module.__default.CombineC($ly, stsC#0); 
          (forall stC#0: DatatypeType :: 
              { _module.StateC.st(stC#0) } { Set#IsMember(stsC#0, $Box(stC#0)) } 
              $Is(stC#0, Tclass._module.StateC())
                 ==> 
                Set#IsMember(stsC#0, $Box(stC#0))
                 ==> Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
                  _module.__default.DomSt(_module.StateC.st(stCombinedC#0))))
             && (forall stC#1: DatatypeType, p#0: DatatypeType :: 
              { _module.__default.GetSt(p#0, _module.StateC.st(stCombinedC#0)), _module.StateC.st(stC#1) } 
                { _module.__default.GetSt(p#0, _module.StateC.st(stCombinedC#0)), Set#IsMember(stsC#0, $Box(stC#1)) } 
              $Is(stC#1, Tclass._module.StateC()) && $Is(p#0, Tclass._module.Path())
                 ==> 
                Set#IsMember(stsC#0, $Box(stC#1))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#1)), $Box(p#0))
                 ==> _module.__default.GetSt(p#0, _module.StateC.st(stC#1))
                   == _module.__default.GetSt(p#0, _module.StateC.st(stCombinedC#0)))
             && (forall p#1: DatatypeType :: 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#0)), $Box(p#1)) } 
              $Is(p#1, Tclass._module.Path())
                 ==> 
                Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#0)), $Box(p#1))
                 ==> (exists stC#2: DatatypeType :: 
                  { _module.StateC.st(stC#2) } { Set#IsMember(stsC#0, $Box(stC#2)) } 
                  $Is(stC#2, Tclass._module.StateC())
                     && 
                    Set#IsMember(stsC#0, $Box(stC#2))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#2)), $Box(p#1))))
             && (forall stC#3: DatatypeType :: 
              { _module.StateC.c(stC#3) } { Set#IsMember(stsC#0, $Box(stC#3)) } 
              $Is(stC#3, Tclass._module.StateC())
                 ==> 
                Set#IsMember(stsC#0, $Box(stC#3))
                 ==> Set#Subset(_module.__default.DomC(_module.StateC.c(stC#3)), 
                  _module.__default.DomC(_module.StateC.c(stCombinedC#0))))
             && (forall stC#4: DatatypeType, h#0: Box :: 
              { _module.__default.GetC(h#0, _module.StateC.c(stCombinedC#0)), _module.StateC.c(stC#4) } 
                { _module.__default.GetC(h#0, _module.StateC.c(stCombinedC#0)), Set#IsMember(stsC#0, $Box(stC#4)) } 
              $Is(stC#4, Tclass._module.StateC()) && $IsBox(h#0, Tclass._module.HashValue())
                 ==> 
                Set#IsMember(stsC#0, $Box(stC#4))
                   && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#4)), h#0)
                 ==> _module.Triple#Equal(_module.__default.GetC(h#0, _module.StateC.c(stC#4)), 
                  _module.__default.GetC(h#0, _module.StateC.c(stCombinedC#0))))
             && (forall h#1: Box :: 
              { Set#IsMember(_module.__default.DomC(_module.StateC.c(stCombinedC#0)), h#1) } 
              $IsBox(h#1, Tclass._module.HashValue())
                 ==> 
                Set#IsMember(_module.__default.DomC(_module.StateC.c(stCombinedC#0)), h#1)
                 ==> (exists stC#5: DatatypeType :: 
                  { _module.StateC.c(stC#5) } { Set#IsMember(stsC#0, $Box(stC#5)) } 
                  $Is(stC#5, Tclass._module.StateC())
                     && 
                    Set#IsMember(stsC#0, $Box(stC#5))
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#5)), h#1))))
         && $Is(_module.__default.CombineC($ly, stsC#0), Tclass._module.StateC()));
// definition axiom for _module.__default.CombineC (revealed)
axiom {:id "id169"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, stsC#0: Set :: 
    { _module.__default.CombineC($LS($ly), stsC#0), $IsGoodHeap($Heap) } 
    _module.__default.CombineC#canCall(stsC#0)
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(stsC#0, TSet(Tclass._module.StateC()))
           && !Set#Equal(stsC#0, Set#Empty(): Set))
       ==> $let#3$canCall(stsC#0)
         && (!Set#Equal(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box($let#3_stC(stsC#0))))
           ==> _module.__default.CombineC#canCall(Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box($let#3_stC(stsC#0)))))
             && _module.__default.UnionC#canCall($let#3_stC(stsC#0), 
              _module.__default.CombineC($ly, 
                Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box($let#3_stC(stsC#0)))))))
         && _module.__default.CombineC($LS($ly), stsC#0)
           == (var stC#6 := $let#3_stC(stsC#0); 
            (if Set#Equal(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#6)))
               then stC#6
               else _module.__default.UnionC(stC#6, 
                _module.__default.CombineC($ly, Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#6))))))));
// definition axiom for _module.__default.CombineC for all literals (revealed)
axiom {:id "id170"} 4 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, $Heap: Heap, stsC#0: Set :: 
    {:weight 3} { _module.__default.CombineC($LS($ly), Lit(stsC#0)), $IsGoodHeap($Heap) } 
    _module.__default.CombineC#canCall(Lit(stsC#0))
         || (4 < $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(stsC#0, TSet(Tclass._module.StateC()))
           && !Set#Equal(stsC#0, Set#Empty(): Set))
       ==> $let#3$canCall(Lit(stsC#0))
         && (!Set#Equal(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box($let#3_stC(Lit(stsC#0)))))
           ==> _module.__default.CombineC#canCall(Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box($let#3_stC(Lit(stsC#0))))))
             && _module.__default.UnionC#canCall($let#3_stC(Lit(stsC#0)), 
              _module.__default.CombineC($LS($ly), 
                Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box($let#3_stC(Lit(stsC#0))))))))
         && _module.__default.CombineC($LS($ly), Lit(stsC#0))
           == (var stC#7 := $let#3_stC(Lit(stsC#0)); 
            (if Set#Equal(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#7)))
               then stC#7
               else _module.__default.UnionC(stC#7, 
                _module.__default.CombineC($LS($ly), Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#7))))))));
}

function _module.__default.CombineC#canCall(stsC#0: Set) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, stsC#0: Set :: 
  { _module.__default.CombineC($LS($ly), stsC#0) } 
  _module.__default.CombineC($LS($ly), stsC#0)
     == _module.__default.CombineC($ly, stsC#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, stsC#0: Set :: 
  { _module.__default.CombineC(AsFuelBottom($ly), stsC#0) } 
  _module.__default.CombineC($ly, stsC#0)
     == _module.__default.CombineC($LZ, stsC#0));

function _module.__default.CombineC#requires(LayerType, Set) : bool;

// #requires axiom for _module.__default.CombineC
axiom (forall $ly: LayerType, $Heap: Heap, stsC#0: Set :: 
  { _module.__default.CombineC#requires($ly, stsC#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap) && $Is(stsC#0, TSet(Tclass._module.StateC()))
     ==> _module.__default.CombineC#requires($ly, stsC#0)
       == !Set#Equal(stsC#0, Set#Empty(): Set));

function $let#3_stC(stsC: Set) : DatatypeType;

function $let#3$canCall(stsC: Set) : bool;

axiom (forall stsC: Set :: 
  { $let#3_stC(stsC) } 
  $let#3$canCall(stsC)
     ==> $Is($let#3_stC(stsC), Tclass._module.StateC())
       && Set#IsMember(stsC, $Box($let#3_stC(stsC))));

procedure {:verboseName "CombineC (well-formedness)"} CheckWellformed$$_module.__default.CombineC(stsC#0: Set where $Is(stsC#0, TSet(Tclass._module.StateC())));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id171"} (var stCombinedC#1 := _module.__default.CombineC($LS($LS($LZ)), stsC#0); 
    (forall stC#8: DatatypeType :: 
      { _module.StateC.st(stC#8) } { Set#IsMember(stsC#0, $Box(stC#8)) } 
      $Is(stC#8, Tclass._module.StateC())
         ==> 
        Set#IsMember(stsC#0, $Box(stC#8))
         ==> Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#8)), 
          _module.__default.DomSt(_module.StateC.st(stCombinedC#1)))));
  ensures {:id "id172"} (var stCombinedC#1 := _module.__default.CombineC($LS($LS($LZ)), stsC#0); 
    (forall stC#9: DatatypeType, p#2: DatatypeType :: 
      { _module.__default.GetSt(p#2, _module.StateC.st(stCombinedC#1)), _module.StateC.st(stC#9) } 
        { _module.__default.GetSt(p#2, _module.StateC.st(stCombinedC#1)), Set#IsMember(stsC#0, $Box(stC#9)) } 
      $Is(stC#9, Tclass._module.StateC()) && $Is(p#2, Tclass._module.Path())
         ==> 
        Set#IsMember(stsC#0, $Box(stC#9))
           && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#9)), $Box(p#2))
         ==> _module.__default.GetSt(p#2, _module.StateC.st(stC#9))
           == _module.__default.GetSt(p#2, _module.StateC.st(stCombinedC#1))));
  ensures {:id "id173"} (var stCombinedC#1 := _module.__default.CombineC($LS($LS($LZ)), stsC#0); 
    (forall p#3: DatatypeType :: 
      { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#1)), $Box(p#3)) } 
      $Is(p#3, Tclass._module.Path())
         ==> 
        Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#1)), $Box(p#3))
         ==> (exists stC#10: DatatypeType :: 
          { _module.StateC.st(stC#10) } { Set#IsMember(stsC#0, $Box(stC#10)) } 
          $Is(stC#10, Tclass._module.StateC())
             && 
            Set#IsMember(stsC#0, $Box(stC#10))
             && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#10)), $Box(p#3)))));
  ensures {:id "id174"} (var stCombinedC#1 := _module.__default.CombineC($LS($LS($LZ)), stsC#0); 
    (forall stC#11: DatatypeType :: 
      { _module.StateC.c(stC#11) } { Set#IsMember(stsC#0, $Box(stC#11)) } 
      $Is(stC#11, Tclass._module.StateC())
         ==> 
        Set#IsMember(stsC#0, $Box(stC#11))
         ==> Set#Subset(_module.__default.DomC(_module.StateC.c(stC#11)), 
          _module.__default.DomC(_module.StateC.c(stCombinedC#1)))));
  ensures {:id "id175"} (var stCombinedC#1 := _module.__default.CombineC($LS($LS($LZ)), stsC#0); 
    (forall stC#12: DatatypeType, h#2: Box :: 
      { _module.__default.GetC(h#2, _module.StateC.c(stCombinedC#1)), _module.StateC.c(stC#12) } 
        { _module.__default.GetC(h#2, _module.StateC.c(stCombinedC#1)), Set#IsMember(stsC#0, $Box(stC#12)) } 
      $Is(stC#12, Tclass._module.StateC()) && $IsBox(h#2, Tclass._module.HashValue())
         ==> 
        Set#IsMember(stsC#0, $Box(stC#12))
           && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#12)), h#2)
         ==> _module.Triple#Equal(_module.__default.GetC(h#2, _module.StateC.c(stC#12)), 
          _module.__default.GetC(h#2, _module.StateC.c(stCombinedC#1)))));
  ensures {:id "id176"} (var stCombinedC#1 := _module.__default.CombineC($LS($LS($LZ)), stsC#0); 
    (forall h#3: Box :: 
      { Set#IsMember(_module.__default.DomC(_module.StateC.c(stCombinedC#1)), h#3) } 
      $IsBox(h#3, Tclass._module.HashValue())
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stCombinedC#1)), h#3)
         ==> (exists stC#13: DatatypeType :: 
          { _module.StateC.c(stC#13) } { Set#IsMember(stsC#0, $Box(stC#13)) } 
          $Is(stC#13, Tclass._module.StateC())
             && 
            Set#IsMember(stsC#0, $Box(stC#13))
             && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#13)), h#3))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "CombineC (well-formedness)"} CheckWellformed$$_module.__default.CombineC(stsC#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var stCombinedC#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##stsC#0: Set;
  var stC#14: DatatypeType;
  var ##st#0: Box;
  var ##st#1: Box;
  var stC#15: DatatypeType;
  var p#4: DatatypeType;
  var ##st#2: Box;
  var ##p#0: DatatypeType;
  var ##st#3: Box;
  var ##p#1: DatatypeType;
  var ##st#4: Box;
  var p#5: DatatypeType;
  var ##st#5: Box;
  var stC#17: DatatypeType;
  var ##st#6: Box;
  var stC#19: DatatypeType;
  var ##c#0: Box;
  var ##c#1: Box;
  var stC#21: DatatypeType;
  var h#4: Box;
  var ##c#2: Box;
  var ##h#0: Box;
  var ##c#3: Box;
  var ##h#1: Box;
  var ##c#4: Box;
  var h#5: Box;
  var ##c#5: Box;
  var stC#23: DatatypeType;
  var ##c#6: Box;
  var stC#25: DatatypeType;
  var ##stC#0: DatatypeType;
  var ##stC'#0: DatatypeType;
  var ##stsC#1: Set;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id177"} !Set#Equal(stsC#0, Set#Empty(): Set);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.CombineC($LS($LZ), stsC#0), Tclass._module.StateC());
        havoc stCombinedC#Z#0;
        ##stsC#0 := stsC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stsC#0, TSet(Tclass._module.StateC()), $Heap);
        assert {:id "id178"} {:subsumption 0} !Set#Equal(##stsC#0, Set#Empty(): Set);
        assume !Set#Equal(##stsC#0, Set#Empty(): Set);
        assert {:id "id179"} Set#Equal(stsC#0, stsC#0)
           || (Set#Subset(##stsC#0, stsC#0) && !Set#Subset(stsC#0, ##stsC#0));
        assume Set#Equal(stsC#0, stsC#0) || _module.__default.CombineC#canCall(stsC#0);
        assume _module.StateC.S_q(_module.__default.CombineC($LS($LZ), stsC#0));
        assume {:id "id180"} let#0#0#0 == _module.__default.CombineC($LS($LZ), stsC#0);
        assume _module.__default.CombineC#canCall(stsC#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, Tclass._module.StateC());
        assume {:id "id181"} stCombinedC#Z#0 == let#0#0#0;
        // Begin Comprehension WF check
        havoc stC#14;
        if ($Is(stC#14, Tclass._module.StateC())
           && $IsAlloc(stC#14, Tclass._module.StateC(), $Heap))
        {
            if (Set#IsMember(stsC#0, $Box(stC#14)))
            {
                assume _module.StateC.S_q(stC#14);
                ##st#0 := _module.StateC.st(stC#14);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(_module.StateC.st(stC#14));
                assume _module.StateC.S_q(stCombinedC#Z#0);
                ##st#1 := _module.StateC.st(stCombinedC#Z#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#Z#0));
            }
        }

        // End Comprehension WF check
        if ((forall stC#16: DatatypeType :: 
          { _module.StateC.st(stC#16) } { Set#IsMember(stsC#0, $Box(stC#16)) } 
          $Is(stC#16, Tclass._module.StateC())
             ==> 
            Set#IsMember(stsC#0, $Box(stC#16))
             ==> Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#16)), 
              _module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0)))))
        {
            // Begin Comprehension WF check
            havoc stC#15;
            havoc p#4;
            if ($Is(stC#15, Tclass._module.StateC())
               && $IsAlloc(stC#15, Tclass._module.StateC(), $Heap)
               && 
              $Is(p#4, Tclass._module.Path())
               && $IsAlloc(p#4, Tclass._module.Path(), $Heap))
            {
                if (Set#IsMember(stsC#0, $Box(stC#15)))
                {
                    assume _module.StateC.S_q(stC#15);
                    ##st#2 := _module.StateC.st(stC#15);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
                    assume _module.__default.DomSt#canCall(_module.StateC.st(stC#15));
                }

                if (Set#IsMember(stsC#0, $Box(stC#15))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#15)), $Box(p#4)))
                {
                    ##p#0 := p#4;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                    assume _module.StateC.S_q(stC#15);
                    ##st#3 := _module.StateC.st(stC#15);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#3, Tclass._module.State(), $Heap);
                    assume _module.__default.GetSt#canCall(p#4, _module.StateC.st(stC#15));
                    ##p#1 := p#4;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#1, Tclass._module.Path(), $Heap);
                    assume _module.StateC.S_q(stCombinedC#Z#0);
                    ##st#4 := _module.StateC.st(stCombinedC#Z#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#4, Tclass._module.State(), $Heap);
                    assume _module.__default.GetSt#canCall(p#4, _module.StateC.st(stCombinedC#Z#0));
                }
            }

            // End Comprehension WF check
        }

        if ((forall stC#16: DatatypeType :: 
            { _module.StateC.st(stC#16) } { Set#IsMember(stsC#0, $Box(stC#16)) } 
            $Is(stC#16, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#16))
               ==> Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#16)), 
                _module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0))))
           && (forall stC#18: DatatypeType, p#6: DatatypeType :: 
            { _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)), _module.StateC.st(stC#18) } 
              { _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)), Set#IsMember(stsC#0, $Box(stC#18)) } 
            $Is(stC#18, Tclass._module.StateC()) && $Is(p#6, Tclass._module.Path())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#18))
                 && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#18)), $Box(p#6))
               ==> _module.__default.GetSt(p#6, _module.StateC.st(stC#18))
                 == _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0))))
        {
            // Begin Comprehension WF check
            havoc p#5;
            if ($Is(p#5, Tclass._module.Path()) && $IsAlloc(p#5, Tclass._module.Path(), $Heap))
            {
                assume _module.StateC.S_q(stCombinedC#Z#0);
                ##st#5 := _module.StateC.st(stCombinedC#Z#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#5, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#Z#0));
                if (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0)), $Box(p#5)))
                {
                    // Begin Comprehension WF check
                    havoc stC#17;
                    if ($Is(stC#17, Tclass._module.StateC())
                       && $IsAlloc(stC#17, Tclass._module.StateC(), $Heap))
                    {
                        if (Set#IsMember(stsC#0, $Box(stC#17)))
                        {
                            assume _module.StateC.S_q(stC#17);
                            ##st#6 := _module.StateC.st(stC#17);
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##st#6, Tclass._module.State(), $Heap);
                            assume _module.__default.DomSt#canCall(_module.StateC.st(stC#17));
                        }
                    }

                    // End Comprehension WF check
                }
            }

            // End Comprehension WF check
        }

        if ((forall stC#16: DatatypeType :: 
            { _module.StateC.st(stC#16) } { Set#IsMember(stsC#0, $Box(stC#16)) } 
            $Is(stC#16, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#16))
               ==> Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#16)), 
                _module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0))))
           && (forall stC#18: DatatypeType, p#6: DatatypeType :: 
            { _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)), _module.StateC.st(stC#18) } 
              { _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)), Set#IsMember(stsC#0, $Box(stC#18)) } 
            $Is(stC#18, Tclass._module.StateC()) && $Is(p#6, Tclass._module.Path())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#18))
                 && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#18)), $Box(p#6))
               ==> _module.__default.GetSt(p#6, _module.StateC.st(stC#18))
                 == _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)))
           && (forall p#7: DatatypeType :: 
            { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0)), $Box(p#7)) } 
            $Is(p#7, Tclass._module.Path())
               ==> 
              Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0)), $Box(p#7))
               ==> (exists stC#20: DatatypeType :: 
                { _module.StateC.st(stC#20) } { Set#IsMember(stsC#0, $Box(stC#20)) } 
                $Is(stC#20, Tclass._module.StateC())
                   && 
                  Set#IsMember(stsC#0, $Box(stC#20))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#20)), $Box(p#7)))))
        {
            // Begin Comprehension WF check
            havoc stC#19;
            if ($Is(stC#19, Tclass._module.StateC())
               && $IsAlloc(stC#19, Tclass._module.StateC(), $Heap))
            {
                if (Set#IsMember(stsC#0, $Box(stC#19)))
                {
                    assume _module.StateC.S_q(stC#19);
                    ##c#0 := _module.StateC.c(stC#19);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
                    assume _module.__default.DomC#canCall(_module.StateC.c(stC#19));
                    assume _module.StateC.S_q(stCombinedC#Z#0);
                    ##c#1 := _module.StateC.c(stCombinedC#Z#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##c#1, Tclass._module.Cache(), $Heap);
                    assume _module.__default.DomC#canCall(_module.StateC.c(stCombinedC#Z#0));
                }
            }

            // End Comprehension WF check
        }

        if ((forall stC#16: DatatypeType :: 
            { _module.StateC.st(stC#16) } { Set#IsMember(stsC#0, $Box(stC#16)) } 
            $Is(stC#16, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#16))
               ==> Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#16)), 
                _module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0))))
           && (forall stC#18: DatatypeType, p#6: DatatypeType :: 
            { _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)), _module.StateC.st(stC#18) } 
              { _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)), Set#IsMember(stsC#0, $Box(stC#18)) } 
            $Is(stC#18, Tclass._module.StateC()) && $Is(p#6, Tclass._module.Path())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#18))
                 && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#18)), $Box(p#6))
               ==> _module.__default.GetSt(p#6, _module.StateC.st(stC#18))
                 == _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)))
           && (forall p#7: DatatypeType :: 
            { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0)), $Box(p#7)) } 
            $Is(p#7, Tclass._module.Path())
               ==> 
              Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0)), $Box(p#7))
               ==> (exists stC#20: DatatypeType :: 
                { _module.StateC.st(stC#20) } { Set#IsMember(stsC#0, $Box(stC#20)) } 
                $Is(stC#20, Tclass._module.StateC())
                   && 
                  Set#IsMember(stsC#0, $Box(stC#20))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#20)), $Box(p#7))))
           && (forall stC#22: DatatypeType :: 
            { _module.StateC.c(stC#22) } { Set#IsMember(stsC#0, $Box(stC#22)) } 
            $Is(stC#22, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#22))
               ==> Set#Subset(_module.__default.DomC(_module.StateC.c(stC#22)), 
                _module.__default.DomC(_module.StateC.c(stCombinedC#Z#0)))))
        {
            // Begin Comprehension WF check
            havoc stC#21;
            havoc h#4;
            if ($Is(stC#21, Tclass._module.StateC())
               && $IsAlloc(stC#21, Tclass._module.StateC(), $Heap)
               && 
              $IsBox(h#4, Tclass._module.HashValue())
               && $IsAllocBox(h#4, Tclass._module.HashValue(), $Heap))
            {
                if (Set#IsMember(stsC#0, $Box(stC#21)))
                {
                    assume _module.StateC.S_q(stC#21);
                    ##c#2 := _module.StateC.c(stC#21);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##c#2, Tclass._module.Cache(), $Heap);
                    assume _module.__default.DomC#canCall(_module.StateC.c(stC#21));
                }

                if (Set#IsMember(stsC#0, $Box(stC#21))
                   && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#21)), h#4))
                {
                    ##h#0 := h#4;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##h#0, Tclass._module.HashValue(), $Heap);
                    assume _module.StateC.S_q(stC#21);
                    ##c#3 := _module.StateC.c(stC#21);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##c#3, Tclass._module.Cache(), $Heap);
                    assume _module.__default.GetC#canCall(h#4, _module.StateC.c(stC#21));
                    assume _module.Triple.Trio_q(_module.__default.GetC(h#4, _module.StateC.c(stC#21)));
                    ##h#1 := h#4;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##h#1, Tclass._module.HashValue(), $Heap);
                    assume _module.StateC.S_q(stCombinedC#Z#0);
                    ##c#4 := _module.StateC.c(stCombinedC#Z#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##c#4, Tclass._module.Cache(), $Heap);
                    assume _module.__default.GetC#canCall(h#4, _module.StateC.c(stCombinedC#Z#0));
                    assume _module.Triple.Trio_q(_module.__default.GetC(h#4, _module.StateC.c(stCombinedC#Z#0)));
                }
            }

            // End Comprehension WF check
        }

        if ((forall stC#16: DatatypeType :: 
            { _module.StateC.st(stC#16) } { Set#IsMember(stsC#0, $Box(stC#16)) } 
            $Is(stC#16, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#16))
               ==> Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#16)), 
                _module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0))))
           && (forall stC#18: DatatypeType, p#6: DatatypeType :: 
            { _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)), _module.StateC.st(stC#18) } 
              { _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)), Set#IsMember(stsC#0, $Box(stC#18)) } 
            $Is(stC#18, Tclass._module.StateC()) && $Is(p#6, Tclass._module.Path())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#18))
                 && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#18)), $Box(p#6))
               ==> _module.__default.GetSt(p#6, _module.StateC.st(stC#18))
                 == _module.__default.GetSt(p#6, _module.StateC.st(stCombinedC#Z#0)))
           && (forall p#7: DatatypeType :: 
            { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0)), $Box(p#7)) } 
            $Is(p#7, Tclass._module.Path())
               ==> 
              Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#Z#0)), $Box(p#7))
               ==> (exists stC#20: DatatypeType :: 
                { _module.StateC.st(stC#20) } { Set#IsMember(stsC#0, $Box(stC#20)) } 
                $Is(stC#20, Tclass._module.StateC())
                   && 
                  Set#IsMember(stsC#0, $Box(stC#20))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#20)), $Box(p#7))))
           && (forall stC#22: DatatypeType :: 
            { _module.StateC.c(stC#22) } { Set#IsMember(stsC#0, $Box(stC#22)) } 
            $Is(stC#22, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#22))
               ==> Set#Subset(_module.__default.DomC(_module.StateC.c(stC#22)), 
                _module.__default.DomC(_module.StateC.c(stCombinedC#Z#0))))
           && (forall stC#24: DatatypeType, h#6: Box :: 
            { _module.__default.GetC(h#6, _module.StateC.c(stCombinedC#Z#0)), _module.StateC.c(stC#24) } 
              { _module.__default.GetC(h#6, _module.StateC.c(stCombinedC#Z#0)), Set#IsMember(stsC#0, $Box(stC#24)) } 
            $Is(stC#24, Tclass._module.StateC()) && $IsBox(h#6, Tclass._module.HashValue())
               ==> 
              Set#IsMember(stsC#0, $Box(stC#24))
                 && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#24)), h#6)
               ==> _module.Triple#Equal(_module.__default.GetC(h#6, _module.StateC.c(stC#24)), 
                _module.__default.GetC(h#6, _module.StateC.c(stCombinedC#Z#0)))))
        {
            // Begin Comprehension WF check
            havoc h#5;
            if ($IsBox(h#5, Tclass._module.HashValue())
               && $IsAllocBox(h#5, Tclass._module.HashValue(), $Heap))
            {
                assume _module.StateC.S_q(stCombinedC#Z#0);
                ##c#5 := _module.StateC.c(stCombinedC#Z#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##c#5, Tclass._module.Cache(), $Heap);
                assume _module.__default.DomC#canCall(_module.StateC.c(stCombinedC#Z#0));
                if (Set#IsMember(_module.__default.DomC(_module.StateC.c(stCombinedC#Z#0)), h#5))
                {
                    // Begin Comprehension WF check
                    havoc stC#23;
                    if ($Is(stC#23, Tclass._module.StateC())
                       && $IsAlloc(stC#23, Tclass._module.StateC(), $Heap))
                    {
                        if (Set#IsMember(stsC#0, $Box(stC#23)))
                        {
                            assume _module.StateC.S_q(stC#23);
                            ##c#6 := _module.StateC.c(stC#23);
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##c#6, Tclass._module.Cache(), $Heap);
                            assume _module.__default.DomC#canCall(_module.StateC.c(stC#23));
                        }
                    }

                    // End Comprehension WF check
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id182"} (var stCombinedC#1 := _module.__default.CombineC($LS($LZ), stsC#0); 
          (forall stC#8: DatatypeType :: 
              { _module.StateC.st(stC#8) } { Set#IsMember(stsC#0, $Box(stC#8)) } 
              $Is(stC#8, Tclass._module.StateC())
                 ==> 
                Set#IsMember(stsC#0, $Box(stC#8))
                 ==> Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#8)), 
                  _module.__default.DomSt(_module.StateC.st(stCombinedC#1))))
             && (forall stC#9: DatatypeType, p#2: DatatypeType :: 
              { _module.__default.GetSt(p#2, _module.StateC.st(stCombinedC#1)), _module.StateC.st(stC#9) } 
                { _module.__default.GetSt(p#2, _module.StateC.st(stCombinedC#1)), Set#IsMember(stsC#0, $Box(stC#9)) } 
              $Is(stC#9, Tclass._module.StateC()) && $Is(p#2, Tclass._module.Path())
                 ==> 
                Set#IsMember(stsC#0, $Box(stC#9))
                   && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#9)), $Box(p#2))
                 ==> _module.__default.GetSt(p#2, _module.StateC.st(stC#9))
                   == _module.__default.GetSt(p#2, _module.StateC.st(stCombinedC#1)))
             && (forall p#3: DatatypeType :: 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#1)), $Box(p#3)) } 
              $Is(p#3, Tclass._module.Path())
                 ==> 
                Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#1)), $Box(p#3))
                 ==> (exists stC#10: DatatypeType :: 
                  { _module.StateC.st(stC#10) } { Set#IsMember(stsC#0, $Box(stC#10)) } 
                  $Is(stC#10, Tclass._module.StateC())
                     && 
                    Set#IsMember(stsC#0, $Box(stC#10))
                     && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#10)), $Box(p#3))))
             && (forall stC#11: DatatypeType :: 
              { _module.StateC.c(stC#11) } { Set#IsMember(stsC#0, $Box(stC#11)) } 
              $Is(stC#11, Tclass._module.StateC())
                 ==> 
                Set#IsMember(stsC#0, $Box(stC#11))
                 ==> Set#Subset(_module.__default.DomC(_module.StateC.c(stC#11)), 
                  _module.__default.DomC(_module.StateC.c(stCombinedC#1))))
             && (forall stC#12: DatatypeType, h#2: Box :: 
              { _module.__default.GetC(h#2, _module.StateC.c(stCombinedC#1)), _module.StateC.c(stC#12) } 
                { _module.__default.GetC(h#2, _module.StateC.c(stCombinedC#1)), Set#IsMember(stsC#0, $Box(stC#12)) } 
              $Is(stC#12, Tclass._module.StateC()) && $IsBox(h#2, Tclass._module.HashValue())
                 ==> 
                Set#IsMember(stsC#0, $Box(stC#12))
                   && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#12)), h#2)
                 ==> _module.Triple#Equal(_module.__default.GetC(h#2, _module.StateC.c(stC#12)), 
                  _module.__default.GetC(h#2, _module.StateC.c(stCombinedC#1))))
             && (forall h#3: Box :: 
              { Set#IsMember(_module.__default.DomC(_module.StateC.c(stCombinedC#1)), h#3) } 
              $IsBox(h#3, Tclass._module.HashValue())
                 ==> 
                Set#IsMember(_module.__default.DomC(_module.StateC.c(stCombinedC#1)), h#3)
                 ==> (exists stC#13: DatatypeType :: 
                  { _module.StateC.c(stC#13) } { Set#IsMember(stsC#0, $Box(stC#13)) } 
                  $Is(stC#13, Tclass._module.StateC())
                     && 
                    Set#IsMember(stsC#0, $Box(stC#13))
                     && Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#13)), h#3))));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc stC#25;
        if ($Is(stC#25, Tclass._module.StateC())
           && $IsAlloc(stC#25, Tclass._module.StateC(), $Heap))
        {
        }

        assert {:id "id183"} (exists stC#26: DatatypeType :: 
          $Is(stC#26, Tclass._module.StateC()) && Set#IsMember(stsC#0, $Box(stC#26)));
        assume $Is(stC#25, Tclass._module.StateC())
           && $IsAlloc(stC#25, Tclass._module.StateC(), $Heap);
        assume Set#IsMember(stsC#0, $Box(stC#25));
        if (Set#Equal(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25))))
        {
        }
        else
        {
            ##stC#0 := stC#25;
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
            ##stsC#1 := Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##stsC#1, TSet(Tclass._module.StateC()), $Heap);
            assert {:id "id184"} {:subsumption 0} !Set#Equal(##stsC#1, Set#Empty(): Set);
            assume !Set#Equal(##stsC#1, Set#Empty(): Set);
            assert {:id "id185"} Set#Subset(##stsC#1, stsC#0) && !Set#Subset(stsC#0, ##stsC#1);
            assume _module.__default.CombineC#canCall(Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25))));
            assume _module.StateC.S_q(_module.__default.CombineC($LS($LZ), Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25)))));
            ##stC'#0 := _module.__default.CombineC($LS($LZ), Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25))));
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC'#0, Tclass._module.StateC(), $Heap);
            assume _module.__default.UnionC#canCall(stC#25, 
              _module.__default.CombineC($LS($LZ), Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25)))));
            assume _module.StateC.S_q(_module.__default.UnionC(stC#25, 
                _module.__default.CombineC($LS($LZ), Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25))))));
        }

        assume $let#3$canCall(stsC#0);
        assume {:id "id186"} _module.__default.CombineC($LS($LZ), stsC#0)
           == (if Set#Equal(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25)))
             then stC#25
             else _module.__default.UnionC(stC#25, 
              _module.__default.CombineC($LS($LZ), Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25))))));
        assume !Set#Equal(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25)))
           ==> _module.__default.CombineC#canCall(Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25))))
             && _module.__default.UnionC#canCall(stC#25, 
              _module.__default.CombineC($LS($LZ), Set#Difference(stsC#0, Set#UnionOne(Set#Empty(): Set, $Box(stC#25)))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.CombineC($LS($LZ), stsC#0), Tclass._module.StateC());
        return;

        assume false;
    }
}



procedure {:verboseName "CombineCLemma (well-formedness)"} CheckWellFormed$$_module.__default.CombineCLemma(stsC#0: Set
       where $Is(stsC#0, TSet(Tclass._module.StateC()))
         && $IsAlloc(stsC#0, TSet(Tclass._module.StateC()), $Heap));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "CombineCLemma (well-formedness)"} CheckWellFormed$$_module.__default.CombineCLemma(stsC#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var stC#0: DatatypeType;
  var ##stC#0: DatatypeType;
  var stC'#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##stsC#0: Set;
  var ##stC#1: DatatypeType;


    // AddMethodImpl: CombineCLemma, CheckWellFormed$$_module.__default.CombineCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id187"} !Set#Equal(stsC#0, Set#Empty(): Set);
    havoc stC#0;
    assume $Is(stC#0, Tclass._module.StateC())
       && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap);
    if (*)
    {
        assume {:id "id188"} Set#IsMember(stsC#0, $Box(stC#0));
        ##stC#0 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
        assume _module.__default.ConsistentCache#canCall(stC#0);
        assume {:id "id189"} _module.__default.ConsistentCache(stC#0);
    }
    else
    {
        assume {:id "id190"} Set#IsMember(stsC#0, $Box(stC#0)) ==> _module.__default.ConsistentCache(stC#0);
    }

    assume {:id "id191"} (forall stC#1: DatatypeType :: 
      { _module.__default.ConsistentCache(stC#1) } 
        { Set#IsMember(stsC#0, $Box(stC#1)) } 
      $Is(stC#1, Tclass._module.StateC())
         ==> 
        Set#IsMember(stsC#0, $Box(stC#1))
         ==> _module.__default.ConsistentCache(stC#1));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc stC'#Z#0;
    ##stsC#0 := stsC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stsC#0, TSet(Tclass._module.StateC()), $Heap);
    assert {:id "id192"} {:subsumption 0} !Set#Equal(##stsC#0, Set#Empty(): Set);
    assume !Set#Equal(##stsC#0, Set#Empty(): Set);
    assume _module.__default.CombineC#canCall(stsC#0);
    assume _module.StateC.S_q(_module.__default.CombineC($LS($LZ), stsC#0));
    assume {:id "id193"} let#0#0#0 == _module.__default.CombineC($LS($LZ), stsC#0);
    assume _module.__default.CombineC#canCall(stsC#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, Tclass._module.StateC());
    assume {:id "id194"} stC'#Z#0 == let#0#0#0;
    ##stC#1 := stC'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC'#Z#0);
    assume {:id "id195"} (var stC'#0 := _module.__default.CombineC($LS($LZ), stsC#0); 
      _module.__default.ConsistentCache(stC'#0));
}



procedure {:verboseName "CombineCLemma (call)"} Call$$_module.__default.CombineCLemma(stsC#0: Set
       where $Is(stsC#0, TSet(Tclass._module.StateC()))
         && $IsAlloc(stsC#0, TSet(Tclass._module.StateC()), $Heap));
  // user-defined preconditions
  requires {:id "id196"} !Set#Equal(stsC#0, Set#Empty(): Set);
  requires {:id "id197"} (forall stC#1: DatatypeType :: 
    { _module.__default.ConsistentCache(stC#1) } 
      { Set#IsMember(stsC#0, $Box(stC#1)) } 
    $Is(stC#1, Tclass._module.StateC())
       ==> 
      Set#IsMember(stsC#0, $Box(stC#1))
       ==> _module.__default.ConsistentCache(stC#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.CombineC#canCall(stsC#0)
     && (var stC'#0 := _module.__default.CombineC($LS($LZ), stsC#0); 
      _module.__default.ConsistentCache#canCall(stC'#0));
  free ensures {:id "id198"} (var stC'#0 := _module.__default.CombineC($LS($LS($LZ)), stsC#0); 
    _module.__default.ConsistentCache#canCall(stC'#0)
       && 
      _module.__default.ConsistentCache(stC'#0)
       && (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
        { _module.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, Tclass._module.Expression())
             && $Is(deps#0, Tclass._module.Expression())
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#0)))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "CombineCLemma (correctness)"} Impl$$_module.__default.CombineCLemma(stsC#0: Set
       where $Is(stsC#0, TSet(Tclass._module.StateC()))
         && $IsAlloc(stsC#0, TSet(Tclass._module.StateC()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id199"} !Set#Equal(stsC#0, Set#Empty(): Set);
  requires {:id "id200"} (forall stC#1: DatatypeType :: 
    { _module.__default.ConsistentCache(stC#1) } 
      { Set#IsMember(stsC#0, $Box(stC#1)) } 
    $Is(stC#1, Tclass._module.StateC())
       ==> 
      Set#IsMember(stsC#0, $Box(stC#1))
       ==> _module.__default.ConsistentCache(stC#1));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.CombineC#canCall(stsC#0)
     && (var stC'#0 := _module.__default.CombineC($LS($LZ), stsC#0); 
      _module.__default.ConsistentCache#canCall(stC'#0));
  ensures {:id "id201"} (var stC'#0 := _module.__default.CombineC($LS($LS($LZ)), stsC#0); 
    _module.__default.ConsistentCache#canCall(stC'#0)
       ==> _module.__default.ConsistentCache(stC'#0)
         || (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#1: Seq :: 
          { _module.__default.Loc(cmd#1, deps#1, e#1) } 
          $Is(cmd#1, Tclass._module.Expression())
               && $Is(deps#1, Tclass._module.Expression())
               && $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
              _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#1)))
             ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
              $Box(_module.__default.Loc(cmd#1, deps#1, e#1)))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "CombineCLemma (correctness)"} Impl$$_module.__default.CombineCLemma(stsC#0: Set) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;

    // AddMethodImpl: CombineCLemma, Impl$$_module.__default.CombineCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#stsC0#0: Set :: 
      { _module.__default.CombineC($LS($LZ), $ih#stsC0#0) } 
      $Is($ih#stsC0#0, TSet(Tclass._module.StateC()))
           && 
          !Set#Equal($ih#stsC0#0, Set#Empty(): Set)
           && (forall stC#2: DatatypeType :: 
            { _module.__default.ConsistentCache(stC#2) } 
              { Set#IsMember($ih#stsC0#0, $Box(stC#2)) } 
            $Is(stC#2, Tclass._module.StateC())
               ==> 
              Set#IsMember($ih#stsC0#0, $Box(stC#2))
               ==> _module.__default.ConsistentCache(stC#2))
           && 
          Set#Subset($ih#stsC0#0, stsC#0)
           && !Set#Subset(stsC#0, $ih#stsC0#0)
         ==> (var stC'#1 := _module.__default.CombineC($LS($LZ), $ih#stsC0#0); 
          _module.__default.ConsistentCache(stC'#1)));
    $_reverifyPost := false;
}



// function declaration for _module._default.ConsistentCache
function _module.__default.ConsistentCache(stC#0: DatatypeType) : bool
uses {
// definition axiom for _module.__default.ConsistentCache (revealed)
axiom {:id "id202"} 3 <= $FunctionContextHeight
   ==> (forall stC#0: DatatypeType :: 
    { _module.__default.ConsistentCache(stC#0) } 
    _module.__default.ConsistentCache#canCall(stC#0)
         || (3 < $FunctionContextHeight && $Is(stC#0, Tclass._module.StateC()))
       ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#0) } 
          $Is(cmd#0, Tclass._module.Expression())
               && $Is(deps#0, Tclass._module.Expression())
               && $Is(e#0, TSeq(TChar))
             ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0)
               && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#0))
               && 
              _module.StateC.S_q(stC#0)
               && _module.__default.DomC#canCall(_module.StateC.c(stC#0))
               && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                  _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && 
                  _module.StateC.S_q(stC#0)
                   && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))))
         && _module.__default.ConsistentCache(stC#0)
           == (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#0) } 
            $Is(cmd#0, Tclass._module.Expression())
                 && $Is(deps#0, Tclass._module.Expression())
                 && $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
               ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
                $Box(_module.__default.Loc(cmd#0, deps#0, e#0)))));
// definition axiom for _module.__default.ConsistentCache for all literals (revealed)
axiom {:id "id203"} 3 <= $FunctionContextHeight
   ==> (forall stC#0: DatatypeType :: 
    {:weight 3} { _module.__default.ConsistentCache(Lit(stC#0)) } 
    _module.__default.ConsistentCache#canCall(Lit(stC#0))
         || (3 < $FunctionContextHeight && $Is(stC#0, Tclass._module.StateC()))
       ==> (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#1: Seq :: 
          { _module.__default.Loc(cmd#1, deps#1, e#1) } 
          $Is(cmd#1, Tclass._module.Expression())
               && $Is(deps#1, Tclass._module.Expression())
               && $Is(e#1, TSeq(TChar))
             ==> _module.__default.Loc#canCall(cmd#1, deps#1, e#1)
               && _module.__default.Hash#canCall(_module.__default.Loc(cmd#1, deps#1, e#1))
               && 
              _module.StateC.S_q(Lit(stC#0))
               && _module.__default.DomC#canCall(Lit(_module.StateC.c(Lit(stC#0))))
               && (Set#IsMember(_module.__default.DomC(Lit(_module.StateC.c(Lit(stC#0)))), 
                  _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#1)))
                 ==> _module.__default.Loc#canCall(cmd#1, deps#1, e#1)
                   && 
                  _module.StateC.S_q(Lit(stC#0))
                   && _module.__default.DomSt#canCall(Lit(_module.StateC.st(Lit(stC#0))))))
         && _module.__default.ConsistentCache(Lit(stC#0))
           == (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#1: Seq :: 
            { _module.__default.Loc(cmd#1, deps#1, e#1) } 
            $Is(cmd#1, Tclass._module.Expression())
                 && $Is(deps#1, Tclass._module.Expression())
                 && $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(_module.__default.DomC(Lit(_module.StateC.c(Lit(stC#0)))), 
                _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#1)))
               ==> Set#IsMember(_module.__default.DomSt(Lit(_module.StateC.st(Lit(stC#0)))), 
                $Box(_module.__default.Loc(cmd#1, deps#1, e#1)))));
}

function _module.__default.ConsistentCache#canCall(stC#0: DatatypeType) : bool;

function _module.__default.ConsistentCache#requires(DatatypeType) : bool;

// #requires axiom for _module.__default.ConsistentCache
axiom (forall stC#0: DatatypeType :: 
  { _module.__default.ConsistentCache#requires(stC#0) } 
  $Is(stC#0, Tclass._module.StateC())
     ==> _module.__default.ConsistentCache#requires(stC#0) == true);

procedure {:verboseName "ConsistentCache (well-formedness)"} CheckWellformed$$_module.__default.ConsistentCache(stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.ClearCache
function _module.__default.ClearCache(stC#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.ClearCache
axiom 4 <= $FunctionContextHeight
   ==> (forall stC#0: DatatypeType :: 
    { _module.__default.ClearCache(stC#0) } 
    _module.__default.ClearCache#canCall(stC#0)
         || (4 < $FunctionContextHeight && $Is(stC#0, Tclass._module.StateC()))
       ==> (var stC'#0 := _module.__default.ClearCache(stC#0); 
          _module.StateC.st(stC#0) == _module.StateC.st(stC'#0)
             && Set#Equal(_module.__default.DomC(_module.StateC.c(stC'#0)), Set#Empty(): Set)
             && _module.__default.ConsistentCache(stC'#0))
         && $Is(_module.__default.ClearCache(stC#0), Tclass._module.StateC()));
// definition axiom for _module.__default.ClearCache (revealed)
axiom {:id "id205"} 4 <= $FunctionContextHeight
   ==> (forall stC#0: DatatypeType :: 
    { _module.__default.ClearCache(stC#0) } 
    _module.__default.ClearCache#canCall(stC#0)
         || (4 < $FunctionContextHeight && $Is(stC#0, Tclass._module.StateC()))
       ==> _module.StateC.S_q(stC#0)
         && _module.__default.EmptyCache#canCall()
         && _module.__default.ClearCache(stC#0)
           == #_module.StateC.S(_module.StateC.st(stC#0), _module.__default.EmptyCache()));
// definition axiom for _module.__default.ClearCache for all literals (revealed)
axiom {:id "id206"} 4 <= $FunctionContextHeight
   ==> (forall stC#0: DatatypeType :: 
    {:weight 3} { _module.__default.ClearCache(Lit(stC#0)) } 
    _module.__default.ClearCache#canCall(Lit(stC#0))
         || (4 < $FunctionContextHeight && $Is(stC#0, Tclass._module.StateC()))
       ==> _module.StateC.S_q(Lit(stC#0))
         && _module.__default.EmptyCache#canCall()
         && _module.__default.ClearCache(Lit(stC#0))
           == #_module.StateC.S(Lit(_module.StateC.st(Lit(stC#0))), _module.__default.EmptyCache()));
}

function _module.__default.ClearCache#canCall(stC#0: DatatypeType) : bool;

function _module.__default.ClearCache#requires(DatatypeType) : bool;

// #requires axiom for _module.__default.ClearCache
axiom (forall stC#0: DatatypeType :: 
  { _module.__default.ClearCache#requires(stC#0) } 
  $Is(stC#0, Tclass._module.StateC())
     ==> _module.__default.ClearCache#requires(stC#0) == true);

procedure {:verboseName "ClearCache (well-formedness)"} CheckWellformed$$_module.__default.ClearCache(stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id207"} (var stC'#1 := _module.__default.ClearCache(stC#0); 
    _module.StateC.st(stC#0) == _module.StateC.st(stC'#1));
  ensures {:id "id208"} (var stC'#1 := _module.__default.ClearCache(stC#0); 
    Set#Equal(_module.__default.DomC(_module.StateC.c(stC'#1)), Set#Empty(): Set));
  ensures {:id "id209"} (var stC'#1 := _module.__default.ClearCache(stC#0); 
    _module.__default.ConsistentCache#canCall(stC'#1)
       ==> _module.__default.ConsistentCache(stC'#1)
         || (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#0) } 
          $Is(cmd#0, Tclass._module.Expression())
               && $Is(deps#0, Tclass._module.Expression())
               && $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#1)), 
              _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
             ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#1)), 
              $Box(_module.__default.Loc(cmd#0, deps#0, e#0)))));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "ClearCache (well-formedness)"} CheckWellformed$$_module.__default.ClearCache(stC#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var stC'#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##stC#0: DatatypeType;
  var ##c#0: Box;
  var ##stC#1: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.ClearCache(stC#0), Tclass._module.StateC());
        havoc stC'#Z#0;
        ##stC#0 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
        assert {:id "id210"} _module.StateC#Equal(stC#0, stC#0) || DtRank(##stC#0) < DtRank(stC#0);
        assume _module.StateC#Equal(stC#0, stC#0)
           || _module.__default.ClearCache#canCall(stC#0);
        assume _module.StateC.S_q(_module.__default.ClearCache(stC#0));
        assume {:id "id211"} let#0#0#0 == _module.__default.ClearCache(stC#0);
        assume _module.__default.ClearCache#canCall(stC#0);
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, Tclass._module.StateC());
        assume {:id "id212"} stC'#Z#0 == let#0#0#0;
        assume _module.StateC.S_q(stC#0);
        assume _module.StateC.S_q(stC'#Z#0);
        if (_module.StateC.st(stC#0) == _module.StateC.st(stC'#Z#0))
        {
            assume _module.StateC.S_q(stC'#Z#0);
            ##c#0 := _module.StateC.c(stC'#Z#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
            assume _module.__default.DomC#canCall(_module.StateC.c(stC'#Z#0));
        }

        if (_module.StateC.st(stC#0) == _module.StateC.st(stC'#Z#0)
           && Set#Equal(_module.__default.DomC(_module.StateC.c(stC'#Z#0)), Set#Empty(): Set))
        {
            ##stC#1 := stC'#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
            assume _module.__default.ConsistentCache#canCall(stC'#Z#0);
        }

        assume {:id "id213"} (var stC'#1 := _module.__default.ClearCache(stC#0); 
          _module.StateC.st(stC#0) == _module.StateC.st(stC'#1)
             && Set#Equal(_module.__default.DomC(_module.StateC.c(stC'#1)), Set#Empty(): Set)
             && _module.__default.ConsistentCache(stC'#1));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume _module.StateC.S_q(stC#0);
        assume _module.__default.EmptyCache#canCall();
        assume {:id "id214"} _module.__default.ClearCache(stC#0)
           == #_module.StateC.S(_module.StateC.st(stC#0), _module.__default.EmptyCache());
        assume _module.StateC.S_q(stC#0) && _module.__default.EmptyCache#canCall();
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.ClearCache(stC#0), Tclass._module.StateC());
        return;

        assume false;
    }
}



// function declaration for _module._default.EmptyEnv
function _module.__default.EmptyEnv() : Box
uses {
// consequence axiom for _module.__default.EmptyEnv
axiom 0 <= $FunctionContextHeight
   ==> 
  _module.__default.EmptyEnv#canCall() || 0 < $FunctionContextHeight
   ==> $IsBox(_module.__default.EmptyEnv(), Tclass._module.Env());
}

function _module.__default.EmptyEnv#canCall() : bool;

function Tclass._module.Env() : Ty
uses {
axiom $AlwaysAllocated(Tclass._module.Env());
}

function _module.__default.EmptyEnv#requires() : bool
uses {
// #requires axiom for _module.__default.EmptyEnv
axiom _module.__default.EmptyEnv#requires() == true;
}

procedure {:verboseName "EmptyEnv (well-formedness)"} CheckWellformed$$_module.__default.EmptyEnv();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.GetEnv
function _module.__default.GetEnv(id#0: Box, env#0: Box) : DatatypeType
uses {
// consequence axiom for _module.__default.GetEnv
axiom 3 <= $FunctionContextHeight
   ==> (forall id#0: Box, env#0: Box :: 
    { _module.__default.GetEnv(id#0, env#0) } 
    _module.__default.GetEnv#canCall(id#0, env#0)
         || (3 < $FunctionContextHeight
           && 
          $IsBox(id#0, Tclass._module.Identifier())
           && $IsBox(env#0, Tclass._module.Env()))
       ==> _module.__default.Value(_module.__default.GetEnv(id#0, env#0))
         && $Is(_module.__default.GetEnv(id#0, env#0), Tclass._module.Expression()));
}

function _module.__default.GetEnv#canCall(id#0: Box, env#0: Box) : bool;

function Tclass._module.Identifier() : Ty
uses {
axiom $AlwaysAllocated(Tclass._module.Identifier());
}

function _module.__default.GetEnv#requires(Box, Box) : bool;

// #requires axiom for _module.__default.GetEnv
axiom (forall id#0: Box, env#0: Box :: 
  { _module.__default.GetEnv#requires(id#0, env#0) } 
  $IsBox(id#0, Tclass._module.Identifier()) && $IsBox(env#0, Tclass._module.Env())
     ==> _module.__default.GetEnv#requires(id#0, env#0) == true);

procedure {:verboseName "GetEnv (well-formedness)"} CheckWellformed$$_module.__default.GetEnv(id#0: Box where $IsBox(id#0, Tclass._module.Identifier()), 
    env#0: Box where $IsBox(env#0, Tclass._module.Env()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;
  ensures {:id "id215"} _module.__default.Value#canCall(_module.__default.GetEnv(id#0, env#0))
     ==> _module.__default.Value(_module.__default.GetEnv(id#0, env#0))
       || _module.Expression.exprLiteral_q(_module.__default.GetEnv(id#0, env#0));



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "GetEnv (well-formedness)"} CheckWellformed$$_module.__default.GetEnv(id#0: Box, env#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##expr#0: DatatypeType;
  var ##id#0: Box;
  var ##env#0: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.GetEnv(id#0, env#0), Tclass._module.Expression());
        ##id#0 := id#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##id#0, Tclass._module.Identifier(), $Heap);
        ##env#0 := env#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
        assert {:id "id216"} id#0 == id#0 && env#0 == env#0;
        assume (id#0 == id#0 && env#0 == env#0)
           || _module.__default.GetEnv#canCall(id#0, env#0);
        ##expr#0 := _module.__default.GetEnv(id#0, env#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0, Tclass._module.Expression(), $Heap);
        assume _module.__default.Value#canCall(_module.__default.GetEnv(id#0, env#0));
        assume {:id "id217"} _module.__default.Value(_module.__default.GetEnv(id#0, env#0));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume false;
    }
}



// function declaration for _module._default.SetEnv
function _module.__default.SetEnv(id#0: Box, expr#0: DatatypeType, env#0: Box) : Box
uses {
// consequence axiom for _module.__default.SetEnv
axiom 3 <= $FunctionContextHeight
   ==> (forall id#0: Box, expr#0: DatatypeType, env#0: Box :: 
    { _module.__default.SetEnv(id#0, expr#0, env#0) } 
    _module.__default.SetEnv#canCall(id#0, expr#0, env#0)
         || (3 < $FunctionContextHeight
           && 
          $IsBox(id#0, Tclass._module.Identifier())
           && $Is(expr#0, Tclass._module.Expression())
           && $IsBox(env#0, Tclass._module.Env())
           && _module.__default.Value(expr#0))
       ==> $IsBox(_module.__default.SetEnv(id#0, expr#0, env#0), Tclass._module.Env()));
}

function _module.__default.SetEnv#canCall(id#0: Box, expr#0: DatatypeType, env#0: Box) : bool;

function _module.__default.SetEnv#requires(Box, DatatypeType, Box) : bool;

// #requires axiom for _module.__default.SetEnv
axiom (forall id#0: Box, expr#0: DatatypeType, env#0: Box :: 
  { _module.__default.SetEnv#requires(id#0, expr#0, env#0) } 
  $IsBox(id#0, Tclass._module.Identifier())
       && $Is(expr#0, Tclass._module.Expression())
       && $IsBox(env#0, Tclass._module.Env())
     ==> _module.__default.SetEnv#requires(id#0, expr#0, env#0)
       == _module.__default.Value(expr#0));

procedure {:verboseName "SetEnv (well-formedness)"} CheckWellformed$$_module.__default.SetEnv(id#0: Box where $IsBox(id#0, Tclass._module.Identifier()), 
    expr#0: DatatypeType where $Is(expr#0, Tclass._module.Expression()), 
    env#0: Box where $IsBox(env#0, Tclass._module.Env()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.exec
function _module.__default.exec(cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box)
   : DatatypeType
uses {
// consequence axiom for _module.__default.exec
axiom 2 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
    { _module.__default.exec(cmd#0, deps#0, exts#0, st#0) } 
    _module.__default.exec#canCall(cmd#0, deps#0, exts#0, st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $IsBox(st#0, Tclass._module.State()))
       ==> $Is(_module.__default.exec(cmd#0, deps#0, exts#0, st#0), 
        Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.State())));
}

function _module.__default.exec#canCall(cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box)
   : bool;

function Tclass._module.Tuple(Ty, Ty) : Ty;

const unique Tagclass._module.Tuple: TyTag;

// Tclass._module.Tuple Tag
axiom (forall _module.Tuple$A: Ty, _module.Tuple$B: Ty :: 
  { Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B) } 
  Tag(Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B))
       == Tagclass._module.Tuple
     && TagFamily(Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B))
       == tytagFamily$Tuple);

function Tclass._module.Tuple_0(Ty) : Ty;

// Tclass._module.Tuple injectivity 0
axiom (forall _module.Tuple$A: Ty, _module.Tuple$B: Ty :: 
  { Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B) } 
  Tclass._module.Tuple_0(Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B))
     == _module.Tuple$A);

function Tclass._module.Tuple_1(Ty) : Ty;

// Tclass._module.Tuple injectivity 1
axiom (forall _module.Tuple$A: Ty, _module.Tuple$B: Ty :: 
  { Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B) } 
  Tclass._module.Tuple_1(Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B))
     == _module.Tuple$B);

// Box/unbox axiom for Tclass._module.Tuple
axiom (forall _module.Tuple$A: Ty, _module.Tuple$B: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B)) } 
  $IsBox(bx, Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B)));

function _module.__default.exec#requires(DatatypeType, DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _module.__default.exec
axiom (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
  { _module.__default.exec#requires(cmd#0, deps#0, exts#0, st#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(exts#0, Tclass._module.Expression())
       && $IsBox(st#0, Tclass._module.State())
     ==> _module.__default.exec#requires(cmd#0, deps#0, exts#0, st#0) == true);

procedure {:verboseName "exec (well-formedness)"} CheckWellformed$$_module.__default.exec(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    exts#0: DatatypeType where $Is(exts#0, Tclass._module.Expression()), 
    st#0: Box where $IsBox(st#0, Tclass._module.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "ExecProperty (well-formedness)"} CheckWellFormed$$_module.__default.ExecProperty(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    exts#0: DatatypeType
       where $Is(exts#0, Tclass._module.Expression())
         && $IsAlloc(exts#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(exts#0), 
    st#0: Box
       where $IsBox(st#0, Tclass._module.State())
         && $IsAllocBox(st#0, Tclass._module.State(), $Heap));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "ExecProperty (well-formedness)"} CheckWellFormed$$_module.__default.ExecProperty(cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##exts#0: DatatypeType;
  var ##st#1: Box;
  var ##paths#0: Set;
  var ##st#2: Box;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##cmd#1: DatatypeType;
  var ##deps#1: DatatypeType;
  var ##exts#1: DatatypeType;
  var ##st#3: Box;
  var expr'#Z#0: DatatypeType;
  var st'#Z#0: Box;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: Box;
  var ##st#4: Box;
  var ##st#5: Box;
  var ##st#6: Box;
  var ##paths#1: Set;
  var ##st#7: Box;
  var ##st#8: Box;
  var ##cmd#2: DatatypeType;
  var ##deps#2: DatatypeType;
  var ##exts#2: DatatypeType;
  var ##paths#2: DatatypeType;
  var ##cmd#3: DatatypeType;
  var ##deps#3: DatatypeType;
  var ##exts#3: DatatypeType;
  var ##st#9: Box;
  var ##paths#3: Set;
  var ##st#10: Box;
  var p#0: DatatypeType;
  var ##st#11: Box;
  var ##st#12: Box;


    // AddMethodImpl: ExecProperty, CheckWellFormed$$_module.__default.ExecProperty
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id219"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id220"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id221"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id222"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id223"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id224"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id225"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id226"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id227"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    assert {:id "id228"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id229"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    ##st#0 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
    assume _module.__default.DomSt#canCall(st#0);
    assume {:id "id230"} Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
      _module.__default.DomSt(st#0));
    ##cmd#0 := cmd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
    ##deps#0 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
    ##exts#0 := exts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##exts#0, Tclass._module.Expression(), $Heap);
    assert {:id "id231"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id232"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    ##paths#0 := _module.Literal.paths(_module.Expression.lit(deps#0));
    // assume allocatedness for argument to function
    assume $IsAlloc(##paths#0, TSet(Tclass._module.Path()), $Heap);
    ##st#2 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
    assert {:id "id233"} {:subsumption 0} Set#Subset(##paths#0, _module.__default.DomSt(##st#2));
    assume Set#Subset(##paths#0, _module.__default.DomSt(##st#2));
    assume _module.__default.Restrict#canCall(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0);
    ##st#1 := _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
    assert {:id "id234"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#0);
    assert {:id "id235"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#0));
    assert {:id "id236"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#0);
    assert {:id "id237"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0));
    assert {:id "id238"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#0);
    assert {:id "id239"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
    assume _module.Expression.exprLiteral_q(##cmd#0)
       && _module.Literal.litString_q(_module.Expression.lit(##cmd#0))
       && _module.Expression.exprLiteral_q(##deps#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0))
       && _module.Expression.exprLiteral_q(##exts#0)
       && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
    assume _module.__default.Pre#canCall(cmd#0, 
      deps#0, 
      exts#0, 
      _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0));
    assume {:id "id240"} _module.__default.Pre(cmd#0, 
      deps#0, 
      exts#0, 
      _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##cmd#1 := cmd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##cmd#1, Tclass._module.Expression(), $Heap);
    ##deps#1 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##deps#1, Tclass._module.Expression(), $Heap);
    ##exts#1 := exts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##exts#1, Tclass._module.Expression(), $Heap);
    ##st#3 := st#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#3, Tclass._module.State(), $Heap);
    assume _module.__default.exec#canCall(cmd#0, deps#0, exts#0, st#0);
    assume _module.Tuple.Pair_q(_module.__default.exec(cmd#0, deps#0, exts#0, st#0));
    assume {:id "id241"} let#0#0#0 == _module.__default.exec(cmd#0, deps#0, exts#0, st#0);
    assume _module.__default.exec#canCall(cmd#0, deps#0, exts#0, st#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, 
      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.State()));
    assume {:id "id242"} result#Z#0 == let#0#0#0;
    havoc expr'#Z#0;
    havoc st'#Z#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id243"} let#1#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass._module.Expression());
    assume {:id "id244"} expr'#Z#0 == let#1#0#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id245"} let#1#1#0 == _module.Tuple.snd(result#Z#0);
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $IsBox(let#1#1#0, Tclass._module.State());
    assume {:id "id246"} st'#Z#0 == let#1#1#0;
    if (_module.Expression.exprLiteral_q(expr'#Z#0))
    {
        assert {:id "id247"} _module.Expression.exprLiteral_q(expr'#Z#0);
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0)))
    {
        assert {:id "id248"} _module.Expression.exprLiteral_q(expr'#Z#0);
        assert {:id "id249"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0));
        ##st#4 := st'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#4, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(st'#Z#0);
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(st'#Z#0)))
    {
        ##st#5 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#5, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(st#0);
        ##st#6 := st'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#6, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(st'#Z#0);
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(st'#Z#0))
       && Set#Subset(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#Z#0)))
    {
        ##st#7 := st#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#7, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(st#0);
        ##paths#1 := _module.__default.DomSt(st#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#1, TSet(Tclass._module.Path()), $Heap);
        ##st#8 := st'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#8, Tclass._module.State(), $Heap);
        assert {:id "id250"} {:subsumption 0} Set#Subset(##paths#1, _module.__default.DomSt(##st#8));
        assume Set#Subset(##paths#1, _module.__default.DomSt(##st#8));
        assume _module.__default.Restrict#canCall(_module.__default.DomSt(st#0), st'#Z#0);
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(st'#Z#0))
       && Set#Subset(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#Z#0))
       && st#0 == _module.__default.Restrict(_module.__default.DomSt(st#0), st'#Z#0))
    {
        ##cmd#2 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#2, Tclass._module.Expression(), $Heap);
        ##deps#2 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#2, Tclass._module.Expression(), $Heap);
        ##exts#2 := exts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exts#2, Tclass._module.Expression(), $Heap);
        ##paths#2 := expr'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#2, Tclass._module.Expression(), $Heap);
        assert {:id "id251"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#2);
        assert {:id "id252"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#2));
        assert {:id "id253"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#2);
        assert {:id "id254"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#2));
        assert {:id "id255"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#2);
        assert {:id "id256"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#2));
        assert {:id "id257"} {:subsumption 0} _module.Expression.exprLiteral_q(##paths#2);
        assert {:id "id258"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##paths#2));
        assume _module.Expression.exprLiteral_q(##cmd#2)
           && _module.Literal.litString_q(_module.Expression.lit(##cmd#2))
           && _module.Expression.exprLiteral_q(##deps#2)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#2))
           && _module.Expression.exprLiteral_q(##exts#2)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#2))
           && _module.Expression.exprLiteral_q(##paths#2)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##paths#2));
        assume _module.__default.OneToOne#canCall(cmd#0, deps#0, exts#0, expr'#Z#0);
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(st'#Z#0))
       && Set#Subset(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#Z#0))
       && st#0 == _module.__default.Restrict(_module.__default.DomSt(st#0), st'#Z#0)
       && _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#Z#0))
    {
        ##cmd#3 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#3, Tclass._module.Expression(), $Heap);
        ##deps#3 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#3, Tclass._module.Expression(), $Heap);
        ##exts#3 := exts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exts#3, Tclass._module.Expression(), $Heap);
        assert {:id "id259"} _module.Expression.exprLiteral_q(deps#0);
        assert {:id "id260"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
        ##paths#3 := _module.Literal.paths(_module.Expression.lit(deps#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#3, TSet(Tclass._module.Path()), $Heap);
        ##st#10 := st'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#10, Tclass._module.State(), $Heap);
        assert {:id "id261"} {:subsumption 0} Set#Subset(##paths#3, _module.__default.DomSt(##st#10));
        assume Set#Subset(##paths#3, _module.__default.DomSt(##st#10));
        assume _module.__default.Restrict#canCall(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#Z#0);
        ##st#9 := _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#Z#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#9, Tclass._module.State(), $Heap);
        assert {:id "id262"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#3);
        assert {:id "id263"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#3));
        assert {:id "id264"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#3);
        assert {:id "id265"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3));
        assert {:id "id266"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#3);
        assert {:id "id267"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#3));
        assume _module.Expression.exprLiteral_q(##cmd#3)
           && _module.Literal.litString_q(_module.Expression.lit(##cmd#3))
           && _module.Expression.exprLiteral_q(##deps#3)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3))
           && _module.Expression.exprLiteral_q(##exts#3)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#3));
        assume _module.__default.Post#canCall(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#Z#0));
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(st'#Z#0))
       && Set#Subset(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#Z#0))
       && st#0 == _module.__default.Restrict(_module.__default.DomSt(st#0), st'#Z#0)
       && _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#Z#0)
       && _module.__default.Post(cmd#0, 
        deps#0, 
        exts#0, 
        _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#Z#0)))
    {
        // Begin Comprehension WF check
        havoc p#0;
        if ($Is(p#0, Tclass._module.Path()) && $IsAlloc(p#0, Tclass._module.Path(), $Heap))
        {
            ##st#11 := st#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#11, Tclass._module.State(), $Heap);
            assume _module.__default.DomSt#canCall(st#0);
            if (!Set#IsMember(_module.__default.DomSt(st#0), $Box(p#0)))
            {
                ##st#12 := st'#Z#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#12, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(st'#Z#0);
            }

            if (!Set#IsMember(_module.__default.DomSt(st#0), $Box(p#0))
               && Set#IsMember(_module.__default.DomSt(st'#Z#0), $Box(p#0)))
            {
            }
        }

        // End Comprehension WF check
    }

    assume {:id "id268"} (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
      (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
        _module.Expression.exprLiteral_q(expr'#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#0))
           && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
            _module.__default.DomSt(st'#0))
           && Set#Subset(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#0))
           && st#0 == _module.__default.Restrict(_module.__default.DomSt(st#0), st'#0)
           && _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#0)
           && _module.__default.Post(cmd#0, 
            deps#0, 
            exts#0, 
            _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0))
           && (forall p#1: DatatypeType :: 
            { _module.Path.OpaquePath_q(p#1) } 
              { Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#1)) } 
              { Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1)) } 
            $Is(p#1, Tclass._module.Path())
               ==> 
              !Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1))
                 && Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#1))
               ==> _module.Path.OpaquePath_q(p#1))));
}



procedure {:verboseName "ExecProperty (call)"} Call$$_module.__default.ExecProperty(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    exts#0: DatatypeType
       where $Is(exts#0, Tclass._module.Expression())
         && $IsAlloc(exts#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(exts#0), 
    st#0: Box
       where $IsBox(st#0, Tclass._module.State())
         && $IsAllocBox(st#0, Tclass._module.State(), $Heap));
  // user-defined preconditions
  requires {:id "id269"} _module.Expression.exprLiteral_q(cmd#0);
  requires {:id "id270"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
  requires {:id "id271"} _module.Expression.exprLiteral_q(deps#0);
  requires {:id "id272"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
  requires {:id "id273"} _module.Expression.exprLiteral_q(exts#0);
  requires {:id "id274"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
  requires {:id "id275"} Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
    _module.__default.DomSt(st#0));
  requires {:id "id276"} _module.__default.Pre#canCall(cmd#0, 
      deps#0, 
      exts#0, 
      _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0))
     ==> _module.__default.Pre(cmd#0, 
        deps#0, 
        exts#0, 
        _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0))
       || (forall e#0: Seq :: 
        { _module.__default.Res(cmd#0, 
            deps#0, 
            e#0, 
            _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0)) } 
          { _module.__default.Loc(cmd#0, deps#0, e#0) } 
          { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
        $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
           ==> 
          Set#IsMember(_module.__default.DomSt(_module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#0)))
           ==> _module.__default.GetSt(_module.__default.Loc(cmd#0, deps#0, e#0), 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0))
             == _module.__default.Res(cmd#0, 
              deps#0, 
              e#0, 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st#0)));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.exec#canCall(cmd#0, deps#0, exts#0, st#0)
     && (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
          _module.Expression.exprLiteral_q(expr'#0)
             ==> 
            _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#0))
             ==> _module.__default.DomSt#canCall(st'#0)
               && (Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
                  _module.__default.DomSt(st'#0))
                 ==> _module.__default.DomSt#canCall(st#0)
                   && _module.__default.DomSt#canCall(st'#0)
                   && (Set#Subset(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#0))
                     ==> _module.__default.DomSt#canCall(st#0)
                       && _module.__default.Restrict#canCall(_module.__default.DomSt(st#0), st'#0)
                       && (st#0 == _module.__default.Restrict(_module.__default.DomSt(st#0), st'#0)
                         ==> _module.__default.OneToOne#canCall(cmd#0, deps#0, exts#0, expr'#0)
                           && (_module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#0)
                             ==> _module.__default.Restrict#canCall(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0)
                               && _module.__default.Post#canCall(cmd#0, 
                                deps#0, 
                                exts#0, 
                                _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0))
                               && (_module.__default.Post(cmd#0, 
                                  deps#0, 
                                  exts#0, 
                                  _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0))
                                 ==> (forall p#1: DatatypeType :: 
                                  { _module.Path.OpaquePath_q(p#1) } 
                                    { Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#1)) } 
                                    { Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1)) } 
                                  $Is(p#1, Tclass._module.Path())
                                     ==> _module.__default.DomSt#canCall(st#0)
                                       && (!Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1))
                                         ==> _module.__default.DomSt#canCall(st'#0))))))))));
  ensures {:id "id277"} (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
    (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
      _module.Expression.exprLiteral_q(expr'#0)));
  ensures {:id "id278"} (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
    (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
      _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#0))));
  ensures {:id "id279"} (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
    (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
      Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
        _module.__default.DomSt(st'#0))));
  ensures {:id "id280"} (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
    (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
      Set#Subset(_module.__default.DomSt(st#0), _module.__default.DomSt(st'#0))));
  ensures {:id "id281"} (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
    (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
      st#0 == _module.__default.Restrict(_module.__default.DomSt(st#0), st'#0)));
  free ensures {:id "id282"} (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
    (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
      _module.__default.OneToOne#canCall(cmd#0, deps#0, exts#0, expr'#0)
         && 
        _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#0)
         && (forall e#1: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#1) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1))
             ==> Set#IsMember(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
              $Box(_module.__default.Loc(cmd#0, deps#0, e#1))))));
  free ensures {:id "id283"} (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
    (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
      _module.__default.Post#canCall(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0))
         && 
        _module.__default.Post(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0))
         && (forall e#2: Seq :: 
          { _module.__default.Res(cmd#0, 
              deps#0, 
              e#2, 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0)) } 
            { _module.__default.Loc(cmd#0, deps#0, e#2) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2))
                 ==> Set#IsMember(_module.__default.DomSt(_module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0)), 
                  $Box(_module.__default.Loc(cmd#0, deps#0, e#2))))
               && (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2))
                 ==> _module.__default.GetSt(_module.__default.Loc(cmd#0, deps#0, e#2), 
                    _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0))
                   == _module.__default.Res(cmd#0, 
                    deps#0, 
                    e#2, 
                    _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), st'#0))))));
  ensures {:id "id284"} (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, st#0); 
    (var expr'#0, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
      (forall p#1: DatatypeType :: 
        { _module.Path.OpaquePath_q(p#1) } 
          { Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#1)) } 
          { Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1)) } 
        $Is(p#1, Tclass._module.Path())
           ==> 
          !Set#IsMember(_module.__default.DomSt(st#0), $Box(p#1))
             && Set#IsMember(_module.__default.DomSt(st'#0), $Box(p#1))
           ==> _module.Path.OpaquePath_q(p#1))));
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for _module._default.Pre
function _module.__default.Pre(cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box)
   : bool
uses {
// definition axiom for _module.__default.Pre (revealed)
axiom {:id "id285"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
    { _module.__default.Pre(cmd#0, deps#0, exts#0, st#0) } 
    _module.__default.Pre#canCall(cmd#0, deps#0, exts#0, st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $IsBox(st#0, Tclass._module.State())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0)))
       ==> (forall e#0: Seq :: 
          { _module.__default.Res(cmd#0, deps#0, e#0, st#0) } 
            { _module.__default.Loc(cmd#0, deps#0, e#0) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
             ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0)
               && _module.__default.DomSt#canCall(st#0)
               && (Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#0)))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && _module.__default.GetSt#canCall(_module.__default.Loc(cmd#0, deps#0, e#0), st#0)
                   && _module.__default.Res#canCall(cmd#0, deps#0, e#0, st#0)))
         && _module.__default.Pre(cmd#0, deps#0, exts#0, st#0)
           == (forall e#0: Seq :: 
            { _module.__default.Res(cmd#0, deps#0, e#0, st#0) } 
              { _module.__default.Loc(cmd#0, deps#0, e#0) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
               ==> 
              Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#0)))
               ==> _module.__default.GetSt(_module.__default.Loc(cmd#0, deps#0, e#0), st#0)
                 == _module.__default.Res(cmd#0, deps#0, e#0, st#0)));
// definition axiom for _module.__default.Pre for decreasing-related literals (revealed)
axiom {:id "id286"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
    {:weight 3} { _module.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exts#0), st#0) } 
    _module.__default.Pre#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $IsBox(st#0, Tclass._module.State())
           && Lit(_module.Expression.exprLiteral_q(Lit(cmd#0))
               && _module.Literal.litString_q(Lit(_module.Expression.lit(Lit(cmd#0))))
               && _module.Expression.exprLiteral_q(Lit(deps#0))
               && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(deps#0))))
               && _module.Expression.exprLiteral_q(Lit(exts#0))
               && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0))))))
       ==> (forall e#1: Seq :: 
          { _module.__default.Res(cmd#0, deps#0, e#1, st#0) } 
            { _module.__default.Loc(cmd#0, deps#0, e#1) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
             ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
               && _module.__default.DomSt#canCall(st#0)
               && (Set#IsMember(_module.__default.DomSt(st#0), 
                  $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))
                 ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && _module.__default.GetSt#canCall(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                   && _module.__default.Res#canCall(Lit(cmd#0), Lit(deps#0), e#1, st#0)))
         && _module.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exts#0), st#0)
           == (forall e#1: Seq :: 
            { _module.__default.Res(cmd#0, deps#0, e#1, st#0) } 
              { _module.__default.Loc(cmd#0, deps#0, e#1) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
               ==> 
              Set#IsMember(_module.__default.DomSt(st#0), 
                $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))
               ==> _module.__default.GetSt(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                 == _module.__default.Res(Lit(cmd#0), Lit(deps#0), e#1, st#0)));
// definition axiom for _module.__default.Pre for all literals (revealed)
axiom {:id "id287"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
    {:weight 3} { _module.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(st#0)) } 
    _module.__default.Pre#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(st#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $IsBox(st#0, Tclass._module.State())
           && Lit(_module.Expression.exprLiteral_q(Lit(cmd#0))
               && _module.Literal.litString_q(Lit(_module.Expression.lit(Lit(cmd#0))))
               && _module.Expression.exprLiteral_q(Lit(deps#0))
               && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(deps#0))))
               && _module.Expression.exprLiteral_q(Lit(exts#0))
               && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0))))))
       ==> (forall e#2: Seq :: 
          { _module.__default.Res(cmd#0, deps#0, e#2, st#0) } 
            { _module.__default.Loc(cmd#0, deps#0, e#2) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
             ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
               && _module.__default.DomSt#canCall(Lit(st#0))
               && (Set#IsMember(_module.__default.DomSt(Lit(st#0)), 
                  $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2)))
                 ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && _module.__default.GetSt#canCall(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                   && _module.__default.Res#canCall(Lit(cmd#0), Lit(deps#0), e#2, Lit(st#0))))
         && _module.__default.Pre(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(st#0))
           == (forall e#2: Seq :: 
            { _module.__default.Res(cmd#0, deps#0, e#2, st#0) } 
              { _module.__default.Loc(cmd#0, deps#0, e#2) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)) } 
            $Is(e#2, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
               ==> 
              Set#IsMember(_module.__default.DomSt(Lit(st#0)), 
                $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2)))
               ==> _module.__default.GetSt(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                 == _module.__default.Res(Lit(cmd#0), Lit(deps#0), e#2, Lit(st#0))));
}

function _module.__default.Pre#canCall(cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box)
   : bool;

function _module.__default.Pre#requires(DatatypeType, DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _module.__default.Pre
axiom (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
  { _module.__default.Pre#requires(cmd#0, deps#0, exts#0, st#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(exts#0, Tclass._module.Expression())
       && $IsBox(st#0, Tclass._module.State())
     ==> _module.__default.Pre#requires(cmd#0, deps#0, exts#0, st#0)
       == (
        _module.Expression.exprLiteral_q(cmd#0)
         && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
         && _module.Expression.exprLiteral_q(deps#0)
         && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
         && _module.Expression.exprLiteral_q(exts#0)
         && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))));

procedure {:verboseName "Pre (well-formedness)"} CheckWellformed$$_module.__default.Pre(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    exts#0: DatatypeType where $Is(exts#0, Tclass._module.Expression()), 
    st#0: Box where $IsBox(st#0, Tclass._module.State()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Pre (well-formedness)"} CheckWellformed$$_module.__default.Pre(cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var e#3: Seq;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##ext#0: Seq;
  var ##st#0: Box;
  var ##p#0: DatatypeType;
  var ##cmd#1: DatatypeType;
  var ##deps#1: DatatypeType;
  var ##ext#1: Seq;
  var ##st#1: Box;
  var ##cmd#2: DatatypeType;
  var ##deps#2: DatatypeType;
  var ##ext#2: Seq;
  var ##st#2: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id288"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id289"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id290"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id291"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id292"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id293"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id294"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id295"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id296"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc e#3;
        if ($Is(e#3, TSeq(TChar)) && $IsAlloc(e#3, TSeq(TChar), $Heap))
        {
            assert {:id "id297"} _module.Expression.exprLiteral_q(exts#0);
            assert {:id "id298"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
            if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)))
            {
                ##cmd#0 := cmd#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
                ##deps#0 := deps#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
                ##ext#0 := e#3;
                // assume allocatedness for argument to function
                assume $IsAlloc(##ext#0, TSeq(TChar), $Heap);
                assume _module.__default.Loc#canCall(cmd#0, deps#0, e#3);
                ##st#0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(st#0);
                if (Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#3))))
                {
                    ##cmd#1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1, Tclass._module.Expression(), $Heap);
                    ##deps#1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1, Tclass._module.Expression(), $Heap);
                    ##ext#1 := e#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ext#1, TSeq(TChar), $Heap);
                    assume _module.__default.Loc#canCall(cmd#0, deps#0, e#3);
                    ##p#0 := _module.__default.Loc(cmd#0, deps#0, e#3);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                    ##st#1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
                    assume _module.__default.GetSt#canCall(_module.__default.Loc(cmd#0, deps#0, e#3), st#0);
                    ##cmd#2 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#2, Tclass._module.Expression(), $Heap);
                    ##deps#2 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#2, Tclass._module.Expression(), $Heap);
                    ##ext#2 := e#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ext#2, TSeq(TChar), $Heap);
                    ##st#2 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
                    assume _module.__default.Res#canCall(cmd#0, deps#0, e#3, st#0);
                }
            }
        }

        // End Comprehension WF check
        assume {:id "id299"} _module.__default.Pre(cmd#0, deps#0, exts#0, st#0)
           == (forall e#4: Seq :: 
            { _module.__default.Res(cmd#0, deps#0, e#4, st#0) } 
              { _module.__default.Loc(cmd#0, deps#0, e#4) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4)) } 
            $Is(e#4, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
               ==> 
              Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#4)))
               ==> _module.__default.GetSt(_module.__default.Loc(cmd#0, deps#0, e#4), st#0)
                 == _module.__default.Res(cmd#0, deps#0, e#4, st#0));
        assume (forall e#4: Seq :: 
          { _module.__default.Res(cmd#0, deps#0, e#4, st#0) } 
            { _module.__default.Loc(cmd#0, deps#0, e#4) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4)) } 
          $Is(e#4, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
             ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#4)
               && _module.__default.DomSt#canCall(st#0)
               && (Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#4)))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#4)
                   && _module.__default.GetSt#canCall(_module.__default.Loc(cmd#0, deps#0, e#4), st#0)
                   && _module.__default.Res#canCall(cmd#0, deps#0, e#4, st#0)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.Pre(cmd#0, deps#0, exts#0, st#0), TBool);
        return;

        assume false;
    }
}



// function declaration for _module._default.Post
function _module.__default.Post(cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box)
   : bool
uses {
// definition axiom for _module.__default.Post (revealed)
axiom {:id "id300"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
    { _module.__default.Post(cmd#0, deps#0, exts#0, st#0) } 
    _module.__default.Post#canCall(cmd#0, deps#0, exts#0, st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $IsBox(st#0, Tclass._module.State())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0)))
       ==> (forall e#0: Seq :: 
          { _module.__default.Res(cmd#0, deps#0, e#0, st#0) } 
            { _module.__default.Loc(cmd#0, deps#0, e#0) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && _module.__default.DomSt#canCall(st#0))
               && (
                (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
                 ==> Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#0))))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0)
                   && _module.__default.GetSt#canCall(_module.__default.Loc(cmd#0, deps#0, e#0), st#0)
                   && _module.__default.Res#canCall(cmd#0, deps#0, e#0, st#0)))
         && _module.__default.Post(cmd#0, deps#0, exts#0, st#0)
           == (forall e#0: Seq :: 
            { _module.__default.Res(cmd#0, deps#0, e#0, st#0) } 
              { _module.__default.Loc(cmd#0, deps#0, e#0) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
                   ==> Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#0))))
                 && (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
                   ==> _module.__default.GetSt(_module.__default.Loc(cmd#0, deps#0, e#0), st#0)
                     == _module.__default.Res(cmd#0, deps#0, e#0, st#0))));
// definition axiom for _module.__default.Post for decreasing-related literals (revealed)
axiom {:id "id301"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
    {:weight 3} { _module.__default.Post(Lit(cmd#0), Lit(deps#0), Lit(exts#0), st#0) } 
    _module.__default.Post#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), st#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $IsBox(st#0, Tclass._module.State())
           && Lit(_module.Expression.exprLiteral_q(Lit(cmd#0))
               && _module.Literal.litString_q(Lit(_module.Expression.lit(Lit(cmd#0))))
               && _module.Expression.exprLiteral_q(Lit(deps#0))
               && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(deps#0))))
               && _module.Expression.exprLiteral_q(Lit(exts#0))
               && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0))))))
       ==> (forall e#1: Seq :: 
          { _module.__default.Res(cmd#0, deps#0, e#1, st#0) } 
            { _module.__default.Loc(cmd#0, deps#0, e#1) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> (Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
                 ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && _module.__default.DomSt#canCall(st#0))
               && (
                (Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
                 ==> Set#IsMember(_module.__default.DomSt(st#0), 
                  $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))))
                 ==> 
                Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
                 ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                   && _module.__default.GetSt#canCall(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                   && _module.__default.Res#canCall(Lit(cmd#0), Lit(deps#0), e#1, st#0)))
         && _module.__default.Post(Lit(cmd#0), Lit(deps#0), Lit(exts#0), st#0)
           == (forall e#1: Seq :: 
            { _module.__default.Res(cmd#0, deps#0, e#1, st#0) } 
              { _module.__default.Loc(cmd#0, deps#0, e#1) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> (Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
                   ==> Set#IsMember(_module.__default.DomSt(st#0), 
                    $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))))
                 && (Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
                   ==> _module.__default.GetSt(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1), st#0)
                     == _module.__default.Res(Lit(cmd#0), Lit(deps#0), e#1, st#0))));
// definition axiom for _module.__default.Post for all literals (revealed)
axiom {:id "id302"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
    {:weight 3} { _module.__default.Post(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(st#0)) } 
    _module.__default.Post#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(st#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $IsBox(st#0, Tclass._module.State())
           && Lit(_module.Expression.exprLiteral_q(Lit(cmd#0))
               && _module.Literal.litString_q(Lit(_module.Expression.lit(Lit(cmd#0))))
               && _module.Expression.exprLiteral_q(Lit(deps#0))
               && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(deps#0))))
               && _module.Expression.exprLiteral_q(Lit(exts#0))
               && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0))))))
       ==> (forall e#2: Seq :: 
          { _module.__default.Res(cmd#0, deps#0, e#2, st#0) } 
            { _module.__default.Loc(cmd#0, deps#0, e#2) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> (Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
                 ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && _module.__default.DomSt#canCall(Lit(st#0)))
               && (
                (Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
                 ==> Set#IsMember(_module.__default.DomSt(Lit(st#0)), 
                  $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
                 ==> 
                Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
                 ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
                   && _module.__default.GetSt#canCall(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                   && _module.__default.Res#canCall(Lit(cmd#0), Lit(deps#0), e#2, Lit(st#0))))
         && _module.__default.Post(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(st#0))
           == (forall e#2: Seq :: 
            { _module.__default.Res(cmd#0, deps#0, e#2, st#0) } 
              { _module.__default.Loc(cmd#0, deps#0, e#2) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)) } 
            $Is(e#2, TSeq(TChar))
               ==> (Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
                   ==> Set#IsMember(_module.__default.DomSt(Lit(st#0)), 
                    $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
                 && (Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
                   ==> _module.__default.GetSt(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2), Lit(st#0))
                     == _module.__default.Res(Lit(cmd#0), Lit(deps#0), e#2, Lit(st#0)))));
}

function _module.__default.Post#canCall(cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box)
   : bool;

function _module.__default.Post#requires(DatatypeType, DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _module.__default.Post
axiom (forall cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box :: 
  { _module.__default.Post#requires(cmd#0, deps#0, exts#0, st#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(exts#0, Tclass._module.Expression())
       && $IsBox(st#0, Tclass._module.State())
     ==> _module.__default.Post#requires(cmd#0, deps#0, exts#0, st#0)
       == (
        _module.Expression.exprLiteral_q(cmd#0)
         && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
         && _module.Expression.exprLiteral_q(deps#0)
         && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
         && _module.Expression.exprLiteral_q(exts#0)
         && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))));

procedure {:verboseName "Post (well-formedness)"} CheckWellformed$$_module.__default.Post(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    exts#0: DatatypeType where $Is(exts#0, Tclass._module.Expression()), 
    st#0: Box where $IsBox(st#0, Tclass._module.State()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Post (well-formedness)"} CheckWellformed$$_module.__default.Post(cmd#0: DatatypeType, deps#0: DatatypeType, exts#0: DatatypeType, st#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var e#3: Seq;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##ext#0: Seq;
  var ##st#0: Box;
  var ##p#0: DatatypeType;
  var ##cmd#1: DatatypeType;
  var ##deps#1: DatatypeType;
  var ##ext#1: Seq;
  var ##st#1: Box;
  var ##cmd#2: DatatypeType;
  var ##deps#2: DatatypeType;
  var ##ext#2: Seq;
  var ##st#2: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id303"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id304"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id305"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id306"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id307"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id308"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id309"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id310"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id311"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc e#3;
        if ($Is(e#3, TSeq(TChar)) && $IsAlloc(e#3, TSeq(TChar), $Heap))
        {
            assert {:id "id312"} _module.Expression.exprLiteral_q(exts#0);
            assert {:id "id313"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
            if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)))
            {
                ##cmd#0 := cmd#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
                ##deps#0 := deps#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
                ##ext#0 := e#3;
                // assume allocatedness for argument to function
                assume $IsAlloc(##ext#0, TSeq(TChar), $Heap);
                assume _module.__default.Loc#canCall(cmd#0, deps#0, e#3);
                ##st#0 := st#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(st#0);
                if (Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#3))))
                {
                    ##cmd#1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1, Tclass._module.Expression(), $Heap);
                    ##deps#1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1, Tclass._module.Expression(), $Heap);
                    ##ext#1 := e#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ext#1, TSeq(TChar), $Heap);
                    assume _module.__default.Loc#canCall(cmd#0, deps#0, e#3);
                    ##p#0 := _module.__default.Loc(cmd#0, deps#0, e#3);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                    ##st#1 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
                    assume _module.__default.GetSt#canCall(_module.__default.Loc(cmd#0, deps#0, e#3), st#0);
                    ##cmd#2 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#2, Tclass._module.Expression(), $Heap);
                    ##deps#2 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#2, Tclass._module.Expression(), $Heap);
                    ##ext#2 := e#3;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ext#2, TSeq(TChar), $Heap);
                    ##st#2 := st#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
                    assume _module.__default.Res#canCall(cmd#0, deps#0, e#3, st#0);
                }
            }
        }

        // End Comprehension WF check
        assume {:id "id314"} _module.__default.Post(cmd#0, deps#0, exts#0, st#0)
           == (forall e#4: Seq :: 
            { _module.__default.Res(cmd#0, deps#0, e#4, st#0) } 
              { _module.__default.Loc(cmd#0, deps#0, e#4) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4)) } 
            $Is(e#4, TSeq(TChar))
               ==> (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
                   ==> Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#4))))
                 && (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
                   ==> _module.__default.GetSt(_module.__default.Loc(cmd#0, deps#0, e#4), st#0)
                     == _module.__default.Res(cmd#0, deps#0, e#4, st#0)));
        assume (forall e#4: Seq :: 
          { _module.__default.Res(cmd#0, deps#0, e#4, st#0) } 
            { _module.__default.Loc(cmd#0, deps#0, e#4) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4)) } 
          $Is(e#4, TSeq(TChar))
             ==> (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#4)
                   && _module.__default.DomSt#canCall(st#0))
               && (
                (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
                 ==> Set#IsMember(_module.__default.DomSt(st#0), $Box(_module.__default.Loc(cmd#0, deps#0, e#4))))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#4)
                   && _module.__default.GetSt#canCall(_module.__default.Loc(cmd#0, deps#0, e#4), st#0)
                   && _module.__default.Res#canCall(cmd#0, deps#0, e#4, st#0)));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.Post(cmd#0, deps#0, exts#0, st#0), TBool);
        return;

        assume false;
    }
}



// function declaration for _module._default.Res
function _module.__default.Res(cmd#0: DatatypeType, deps#0: DatatypeType, ext#0: Seq, st#0: Box) : Box
uses {
// consequence axiom for _module.__default.Res
axiom 2 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, ext#0: Seq, st#0: Box :: 
    { _module.__default.Res(cmd#0, deps#0, ext#0, st#0) } 
    _module.__default.Res#canCall(cmd#0, deps#0, ext#0, st#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(ext#0, TSeq(TChar))
           && $IsBox(st#0, Tclass._module.State()))
       ==> $IsBox(_module.__default.Res(cmd#0, deps#0, ext#0, st#0), Tclass._module.Artifact()));
}

function _module.__default.Res#canCall(cmd#0: DatatypeType, deps#0: DatatypeType, ext#0: Seq, st#0: Box) : bool;

function _module.__default.Res#requires(DatatypeType, DatatypeType, Seq, Box) : bool;

// #requires axiom for _module.__default.Res
axiom (forall cmd#0: DatatypeType, deps#0: DatatypeType, ext#0: Seq, st#0: Box :: 
  { _module.__default.Res#requires(cmd#0, deps#0, ext#0, st#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(ext#0, TSeq(TChar))
       && $IsBox(st#0, Tclass._module.State())
     ==> _module.__default.Res#requires(cmd#0, deps#0, ext#0, st#0) == true);

procedure {:verboseName "Res (well-formedness)"} CheckWellformed$$_module.__default.Res(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    ext#0: Seq where $Is(ext#0, TSeq(TChar)), 
    st#0: Box where $IsBox(st#0, Tclass._module.State()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.OneToOne
function _module.__default.OneToOne(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    paths#0: DatatypeType)
   : bool
uses {
// definition axiom for _module.__default.OneToOne (revealed)
axiom {:id "id315"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      paths#0: DatatypeType :: 
    { _module.__default.OneToOne(cmd#0, deps#0, exts#0, paths#0) } 
    _module.__default.OneToOne#canCall(cmd#0, deps#0, exts#0, paths#0)
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(paths#0, Tclass._module.Expression())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))
           && _module.Expression.exprLiteral_q(paths#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(paths#0)))
       ==> (forall e#0: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#0) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
             ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0))
         && _module.__default.OneToOne(cmd#0, deps#0, exts#0, paths#0)
           == (forall e#0: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#0) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
               ==> Set#IsMember(_module.Literal.paths(_module.Expression.lit(paths#0)), 
                $Box(_module.__default.Loc(cmd#0, deps#0, e#0)))));
// definition axiom for _module.__default.OneToOne for all literals (revealed)
axiom {:id "id316"} 3 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      paths#0: DatatypeType :: 
    {:weight 3} { _module.__default.OneToOne(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(paths#0)) } 
    _module.__default.OneToOne#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(paths#0))
         || (3 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(paths#0, Tclass._module.Expression())
           && Lit(_module.Expression.exprLiteral_q(Lit(cmd#0))
               && _module.Literal.litString_q(Lit(_module.Expression.lit(Lit(cmd#0))))
               && _module.Expression.exprLiteral_q(Lit(deps#0))
               && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(deps#0))))
               && _module.Expression.exprLiteral_q(Lit(exts#0))
               && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0))))
               && _module.Expression.exprLiteral_q(Lit(paths#0))
               && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(paths#0))))))
       ==> (forall e#1: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#1) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
          $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
             ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1))
         && _module.__default.OneToOne(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(paths#0))
           == (forall e#1: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#1) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
               ==> Set#IsMember(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(paths#0))))), 
                $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))));
}

function _module.__default.OneToOne#canCall(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    paths#0: DatatypeType)
   : bool;

function _module.__default.OneToOne#requires(DatatypeType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.OneToOne
axiom (forall cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    paths#0: DatatypeType :: 
  { _module.__default.OneToOne#requires(cmd#0, deps#0, exts#0, paths#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(exts#0, Tclass._module.Expression())
       && $Is(paths#0, Tclass._module.Expression())
     ==> _module.__default.OneToOne#requires(cmd#0, deps#0, exts#0, paths#0)
       == (
        _module.Expression.exprLiteral_q(cmd#0)
         && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
         && _module.Expression.exprLiteral_q(deps#0)
         && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
         && _module.Expression.exprLiteral_q(exts#0)
         && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))
         && _module.Expression.exprLiteral_q(paths#0)
         && _module.Literal.litArrOfPaths_q(_module.Expression.lit(paths#0))));

procedure {:verboseName "OneToOne (well-formedness)"} CheckWellformed$$_module.__default.OneToOne(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    exts#0: DatatypeType where $Is(exts#0, Tclass._module.Expression()), 
    paths#0: DatatypeType where $Is(paths#0, Tclass._module.Expression()));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "OneToOne (well-formedness)"} CheckWellformed$$_module.__default.OneToOne(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    paths#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var e#2: Seq;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##ext#0: Seq;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id317"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id318"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id319"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id320"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id321"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id322"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id323"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id324"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id325"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    assume {:id "id326"} _module.Expression.exprLiteral_q(paths#0);
    assert {:id "id327"} _module.Expression.exprLiteral_q(paths#0);
    assume {:id "id328"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(paths#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc e#2;
        if ($Is(e#2, TSeq(TChar)) && $IsAlloc(e#2, TSeq(TChar), $Heap))
        {
            assert {:id "id329"} _module.Expression.exprLiteral_q(exts#0);
            assert {:id "id330"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
            if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)))
            {
                ##cmd#0 := cmd#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
                ##deps#0 := deps#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
                ##ext#0 := e#2;
                // assume allocatedness for argument to function
                assume $IsAlloc(##ext#0, TSeq(TChar), $Heap);
                assume _module.__default.Loc#canCall(cmd#0, deps#0, e#2);
                assert {:id "id331"} _module.Expression.exprLiteral_q(paths#0);
                assert {:id "id332"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(paths#0));
            }
        }

        // End Comprehension WF check
        assume {:id "id333"} _module.__default.OneToOne(cmd#0, deps#0, exts#0, paths#0)
           == (forall e#3: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#3) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
            $Is(e#3, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
               ==> Set#IsMember(_module.Literal.paths(_module.Expression.lit(paths#0)), 
                $Box(_module.__default.Loc(cmd#0, deps#0, e#3))));
        assume (forall e#3: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#3) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
          $Is(e#3, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
             ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#3));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.OneToOne(cmd#0, deps#0, exts#0, paths#0), TBool);
        return;

        assume false;
    }
}



// function declaration for _module._default.Loc
function _module.__default.Loc(cmd#0: DatatypeType, deps#0: DatatypeType, ext#0: Seq) : DatatypeType
uses {
// consequence axiom for _module.__default.Loc
axiom 2 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, deps#0: DatatypeType, ext#0: Seq :: 
    { _module.__default.Loc(cmd#0, deps#0, ext#0) } 
    _module.__default.Loc#canCall(cmd#0, deps#0, ext#0)
         || (2 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(ext#0, TSeq(TChar)))
       ==> $Is(_module.__default.Loc(cmd#0, deps#0, ext#0), Tclass._module.Path()));
}

function _module.__default.Loc#canCall(cmd#0: DatatypeType, deps#0: DatatypeType, ext#0: Seq) : bool;

function _module.__default.Loc#requires(DatatypeType, DatatypeType, Seq) : bool;

// #requires axiom for _module.__default.Loc
axiom (forall cmd#0: DatatypeType, deps#0: DatatypeType, ext#0: Seq :: 
  { _module.__default.Loc#requires(cmd#0, deps#0, ext#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(ext#0, TSeq(TChar))
     ==> _module.__default.Loc#requires(cmd#0, deps#0, ext#0) == true);

procedure {:verboseName "Loc (well-formedness)"} CheckWellformed$$_module.__default.Loc(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    ext#0: Seq where $Is(ext#0, TSeq(TChar)));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.execC
function _module.__default.execC(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   : DatatypeType
uses {
// consequence axiom for _module.__default.execC
axiom 4 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    { _module.__default.execC(cmd#0, deps#0, exts#0, stC#0) } 
    _module.__default.execC#canCall(cmd#0, deps#0, exts#0, stC#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0)))
       ==> $Is(_module.__default.execC(cmd#0, deps#0, exts#0, stC#0), 
        Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC())));
// definition axiom for _module.__default.execC (revealed)
axiom {:id "id334"} 4 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    { _module.__default.execC(cmd#0, deps#0, exts#0, stC#0) } 
    _module.__default.execC#canCall(cmd#0, deps#0, exts#0, stC#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0)))
       ==> (forall e#0: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#0) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
          $Is(e#0, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
             ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0)
               && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#0))
               && 
              _module.StateC.S_q(stC#0)
               && _module.__default.DomC#canCall(_module.StateC.c(stC#0)))
         && ((forall e#0: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#0) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
                 && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
               ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0))))
           ==> (forall e#1: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#1) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1))
               ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#1)))
         && (!(forall e#0: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#0) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
                 && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
               ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0))))
           ==> _module.StateC.S_q(stC#0)
             && _module.__default.exec#canCall(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0))
             && (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0)); 
              _module.Tuple.Pair_q(result#0)
                 && _module.Tuple.Pair_q(result#0)
                 && (var st'#0 := _module.Tuple.snd(result#0); 
                  _module.StateC.S_q(stC#0)
                     && _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, #_module.StateC.S(st'#0, _module.StateC.c(stC#0))))))
         && _module.__default.execC(cmd#0, deps#0, exts#0, stC#0)
           == (if (forall e#0: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#0) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
              $Is(e#0, TSeq(TChar))
                   && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
                 ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                  _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0))))
             then (var paths#0 := Set#FromBoogieMap((lambda $y#0: Box :: 
                    (exists e#1: Seq :: 
                      { _module.__default.Loc(cmd#0, deps#0, e#1) } 
                        { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
                      $Is(e#1, TSeq(TChar))
                         && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1))
                         && $y#0 == $Box(_module.__default.Loc(cmd#0, deps#0, e#1))))); 
              (var expr'#0 := #_module.Expression.exprLiteral(#_module.Literal.litArrOfPaths(paths#0)); 
                #_module.Tuple.Pair($Box(expr'#0), $Box(stC#0))))
             else (var result#0 := _module.__default.exec(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0)); 
              (var expr'#1, st'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, _module.Tuple.snd(result#0); 
                (var stC'#0 := _module.__default.UpdateC($LS($LZ), 
                      cmd#0, 
                      deps#0, 
                      exts#0, 
                      #_module.StateC.S(st'#0, _module.StateC.c(stC#0))); 
                  #_module.Tuple.Pair($Box(expr'#1), $Box(stC'#0)))))));
// definition axiom for _module.__default.execC for all literals (revealed)
axiom {:id "id335"} 4 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    {:weight 3} { _module.__default.execC(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0)) } 
    _module.__default.execC#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && Lit(_module.Expression.exprLiteral_q(Lit(cmd#0))
               && _module.Literal.litString_q(Lit(_module.Expression.lit(Lit(cmd#0))))
               && _module.Expression.exprLiteral_q(Lit(deps#0))
               && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(deps#0))))
               && _module.Expression.exprLiteral_q(Lit(exts#0))
               && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0))))))
       ==> (forall e#2: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#2) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)) } 
          $Is(e#2, TSeq(TChar))
             ==> 
            Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
             ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#2)
               && _module.__default.Hash#canCall(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))
               && 
              _module.StateC.S_q(Lit(stC#0))
               && _module.__default.DomC#canCall(Lit(_module.StateC.c(Lit(stC#0)))))
         && ((forall e#2: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#2) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)) } 
            $Is(e#2, TSeq(TChar))
                 && Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
               ==> Set#IsMember(_module.__default.DomC(Lit(_module.StateC.c(Lit(stC#0)))), 
                _module.__default.Hash(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
           ==> (forall e#3: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#3) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
            $Is(e#3, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#3))
               ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#3)))
         && (!(forall e#2: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#2) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)) } 
            $Is(e#2, TSeq(TChar))
                 && Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
               ==> Set#IsMember(_module.__default.DomC(Lit(_module.StateC.c(Lit(stC#0)))), 
                _module.__default.Hash(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
           ==> _module.StateC.S_q(Lit(stC#0))
             && _module.__default.exec#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(_module.StateC.st(Lit(stC#0))))
             && (var result#1 := _module.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(_module.StateC.st(Lit(stC#0)))); 
              _module.Tuple.Pair_q(result#1)
                 && _module.Tuple.Pair_q(result#1)
                 && (var st'#1 := _module.Tuple.snd(result#1); 
                  _module.StateC.S_q(Lit(stC#0))
                     && _module.__default.UpdateC#canCall(Lit(cmd#0), 
                      Lit(deps#0), 
                      Lit(exts#0), 
                      #_module.StateC.S(st'#1, Lit(_module.StateC.c(Lit(stC#0))))))))
         && _module.__default.execC(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0))
           == (if (forall e#2: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#2) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)) } 
              $Is(e#2, TSeq(TChar))
                   && Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#2))
                 ==> Set#IsMember(_module.__default.DomC(Lit(_module.StateC.c(Lit(stC#0)))), 
                  _module.__default.Hash(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#2))))
             then (var paths#1 := Set#FromBoogieMap((lambda $y#2: Box :: 
                    (exists e#3: Seq :: 
                      { _module.__default.Loc(cmd#0, deps#0, e#3) } 
                        { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
                      $Is(e#3, TSeq(TChar))
                         && Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#3))
                         && $y#2 == $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#3))))); 
              (var expr'#2 := #_module.Expression.exprLiteral(#_module.Literal.litArrOfPaths(paths#1)); 
                #_module.Tuple.Pair($Box(expr'#2), $Box(Lit(stC#0)))))
             else (var result#1 := _module.__default.exec(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(_module.StateC.st(Lit(stC#0)))); 
              (var expr'#3, st'#1 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType, _module.Tuple.snd(result#1); 
                (var stC'#1 := _module.__default.UpdateC($LS($LZ), 
                      Lit(cmd#0), 
                      Lit(deps#0), 
                      Lit(exts#0), 
                      #_module.StateC.S(st'#1, Lit(_module.StateC.c(Lit(stC#0))))); 
                  #_module.Tuple.Pair($Box(expr'#3), $Box(stC'#1)))))));
}

function _module.__default.execC#canCall(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   : bool;

function _module.__default.execC#requires(DatatypeType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.execC
axiom (forall cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType :: 
  { _module.__default.execC#requires(cmd#0, deps#0, exts#0, stC#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(exts#0, Tclass._module.Expression())
       && $Is(stC#0, Tclass._module.StateC())
     ==> _module.__default.execC#requires(cmd#0, deps#0, exts#0, stC#0)
       == (
        _module.Expression.exprLiteral_q(cmd#0)
         && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
         && _module.Expression.exprLiteral_q(deps#0)
         && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
         && _module.Expression.exprLiteral_q(exts#0)
         && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))));

procedure {:verboseName "execC (well-formedness)"} CheckWellformed$$_module.__default.execC(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    exts#0: DatatypeType where $Is(exts#0, Tclass._module.Expression()), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "execC (well-formedness)"} CheckWellformed$$_module.__default.execC(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var e#4: Seq;
  var ##p#0: DatatypeType;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##ext#0: Seq;
  var ##c#0: Box;
  var paths#Z#0: Set;
  var let#0#0#0: Set;
  var e#5: Seq;
  var ##cmd#1: DatatypeType;
  var ##deps#1: DatatypeType;
  var ##ext#1: Seq;
  var expr'#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#2#0#0: DatatypeType;
  var ##cmd#2: DatatypeType;
  var ##deps#2: DatatypeType;
  var ##exts#0: DatatypeType;
  var ##st#0: Box;
  var expr'#Z#1: DatatypeType;
  var st'#Z#0: Box;
  var let#3#0#0: DatatypeType;
  var let#3#1#0: Box;
  var stC'#Z#0: DatatypeType;
  var let#4#0#0: DatatypeType;
  var ##cmd#3: DatatypeType;
  var ##deps#3: DatatypeType;
  var ##exts#1: DatatypeType;
  var ##stC#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id336"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id337"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id338"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id339"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id340"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id341"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id342"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id343"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id344"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.execC(cmd#0, deps#0, exts#0, stC#0), 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        // Begin Comprehension WF check
        havoc e#4;
        if ($Is(e#4, TSeq(TChar)) && $IsAlloc(e#4, TSeq(TChar), $Heap))
        {
            assert {:id "id345"} _module.Expression.exprLiteral_q(exts#0);
            assert {:id "id346"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
            if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#4)))
            {
                ##cmd#0 := cmd#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
                ##deps#0 := deps#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
                ##ext#0 := e#4;
                // assume allocatedness for argument to function
                assume $IsAlloc(##ext#0, TSeq(TChar), $Heap);
                assume _module.__default.Loc#canCall(cmd#0, deps#0, e#4);
                ##p#0 := _module.__default.Loc(cmd#0, deps#0, e#4);
                // assume allocatedness for argument to function
                assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                assume _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#4));
                assume _module.StateC.S_q(stC#0);
                ##c#0 := _module.StateC.c(stC#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
                assume _module.__default.DomC#canCall(_module.StateC.c(stC#0));
            }
        }

        // End Comprehension WF check
        if ((forall e#7: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#7) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#7)) } 
          $Is(e#7, TSeq(TChar))
               && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#7))
             ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
              _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#7)))))
        {
            havoc paths#Z#0;
            // Begin Comprehension WF check
            havoc e#5;
            if ($Is(e#5, TSeq(TChar)) && $IsAlloc(e#5, TSeq(TChar), $Heap))
            {
                assert {:id "id347"} _module.Expression.exprLiteral_q(exts#0);
                assert {:id "id348"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
                if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#5)))
                {
                    ##cmd#1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1, Tclass._module.Expression(), $Heap);
                    ##deps#1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1, Tclass._module.Expression(), $Heap);
                    ##ext#1 := e#5;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ext#1, TSeq(TChar), $Heap);
                    assume _module.__default.Loc#canCall(cmd#0, deps#0, e#5);
                }
            }

            // End Comprehension WF check
            assume {:id "id349"} let#0#0#0
               == Set#FromBoogieMap((lambda $y#5: Box :: 
                  (exists e#6: Seq :: 
                    { _module.__default.Loc(cmd#0, deps#0, e#6) } 
                      { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#6)) } 
                    $Is(e#6, TSeq(TChar))
                       && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#6))
                       && $y#5 == $Box(_module.__default.Loc(cmd#0, deps#0, e#6)))));
            assume (forall e#6: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#6) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#6)) } 
              $Is(e#6, TSeq(TChar))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#6))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#6));
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, TSet(Tclass._module.Path()));
            assume {:id "id350"} paths#Z#0 == let#0#0#0;
            havoc expr'#Z#0;
            assume {:id "id351"} let#1#0#0
               == #_module.Expression.exprLiteral(#_module.Literal.litArrOfPaths(paths#Z#0));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, Tclass._module.Expression());
            assume {:id "id352"} expr'#Z#0 == let#1#0#0;
            assume {:id "id353"} _module.__default.execC(cmd#0, deps#0, exts#0, stC#0)
               == #_module.Tuple.Pair($Box(expr'#Z#0), $Box(stC#0));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.execC(cmd#0, deps#0, exts#0, stC#0), 
              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
            return;
        }
        else
        {
            havoc result#Z#0;
            ##cmd#2 := cmd#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#2, Tclass._module.Expression(), $Heap);
            ##deps#2 := deps#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#2, Tclass._module.Expression(), $Heap);
            ##exts#0 := exts#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##exts#0, Tclass._module.Expression(), $Heap);
            assume _module.StateC.S_q(stC#0);
            ##st#0 := _module.StateC.st(stC#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
            assume _module.__default.exec#canCall(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0));
            assume _module.Tuple.Pair_q(_module.__default.exec(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0)));
            assume {:id "id354"} let#2#0#0
               == _module.__default.exec(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0));
            assume _module.StateC.S_q(stC#0)
               && _module.__default.exec#canCall(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0));
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#0#0, 
              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.State()));
            assume {:id "id355"} result#Z#0 == let#2#0#0;
            havoc expr'#Z#1;
            havoc st'#Z#0;
            assume _module.Tuple.Pair_q(result#Z#0);
            assume {:id "id356"} let#3#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
            assume _module.Tuple.Pair_q(result#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#3#0#0, Tclass._module.Expression());
            assume {:id "id357"} expr'#Z#1 == let#3#0#0;
            assume _module.Tuple.Pair_q(result#Z#0);
            assume {:id "id358"} let#3#1#0 == _module.Tuple.snd(result#Z#0);
            assume _module.Tuple.Pair_q(result#Z#0);
            // CheckWellformedWithResult: any expression
            assume $IsBox(let#3#1#0, Tclass._module.State());
            assume {:id "id359"} st'#Z#0 == let#3#1#0;
            havoc stC'#Z#0;
            ##cmd#3 := cmd#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#3, Tclass._module.Expression(), $Heap);
            ##deps#3 := deps#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#3, Tclass._module.Expression(), $Heap);
            ##exts#1 := exts#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##exts#1, Tclass._module.Expression(), $Heap);
            assume _module.StateC.S_q(stC#0);
            ##stC#0 := #_module.StateC.S(st'#Z#0, _module.StateC.c(stC#0));
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
            assert {:id "id360"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#3);
            assert {:id "id361"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#3));
            assert {:id "id362"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#3);
            assert {:id "id363"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3));
            assert {:id "id364"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#1);
            assert {:id "id365"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1));
            assume _module.Expression.exprLiteral_q(##cmd#3)
               && _module.Literal.litString_q(_module.Expression.lit(##cmd#3))
               && _module.Expression.exprLiteral_q(##deps#3)
               && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3))
               && _module.Expression.exprLiteral_q(##exts#1)
               && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1));
            assume _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, #_module.StateC.S(st'#Z#0, _module.StateC.c(stC#0)));
            assume _module.StateC.S_q(_module.__default.UpdateC($LS($LZ), 
                cmd#0, 
                deps#0, 
                exts#0, 
                #_module.StateC.S(st'#Z#0, _module.StateC.c(stC#0))));
            assume {:id "id366"} let#4#0#0
               == _module.__default.UpdateC($LS($LZ), 
                cmd#0, 
                deps#0, 
                exts#0, 
                #_module.StateC.S(st'#Z#0, _module.StateC.c(stC#0)));
            assume _module.StateC.S_q(stC#0)
               && _module.__default.UpdateC#canCall(cmd#0, deps#0, exts#0, #_module.StateC.S(st'#Z#0, _module.StateC.c(stC#0)));
            // CheckWellformedWithResult: any expression
            assume $Is(let#4#0#0, Tclass._module.StateC());
            assume {:id "id367"} stC'#Z#0 == let#4#0#0;
            assume {:id "id368"} _module.__default.execC(cmd#0, deps#0, exts#0, stC#0)
               == #_module.Tuple.Pair($Box(expr'#Z#1), $Box(stC'#Z#0));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.execC(cmd#0, deps#0, exts#0, stC#0), 
              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
            return;
        }

        assume false;
    }
}



procedure {:verboseName "ExecCProperty (well-formedness)"} CheckWellFormed$$_module.__default.ExecCProperty(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    exts#0: DatatypeType
       where $Is(exts#0, Tclass._module.Expression())
         && $IsAlloc(exts#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(exts#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "ExecCProperty (well-formedness)"} CheckWellFormed$$_module.__default.ExecCProperty(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##exts#0: DatatypeType;
  var ##stC#0: DatatypeType;
  var ##stC#1: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##cmd#1: DatatypeType;
  var ##deps#1: DatatypeType;
  var ##exts#1: DatatypeType;
  var ##stC#2: DatatypeType;
  var expr'#Z#0: DatatypeType;
  var stC'#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: DatatypeType;
  var ##st#1: Box;
  var ##st#2: Box;
  var ##st#3: Box;
  var ##paths#0: Set;
  var ##st#4: Box;
  var ##st#5: Box;
  var ##cmd#2: DatatypeType;
  var ##deps#2: DatatypeType;
  var ##exts#2: DatatypeType;
  var ##paths#1: DatatypeType;
  var ##cmd#3: DatatypeType;
  var ##deps#3: DatatypeType;
  var ##exts#3: DatatypeType;
  var ##stC#3: DatatypeType;
  var p#0: DatatypeType;
  var ##st#6: Box;
  var ##st#7: Box;
  var ##stC#4: DatatypeType;


    // AddMethodImpl: ExecCProperty, CheckWellFormed$$_module.__default.ExecCProperty
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume {:id "id369"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id370"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id371"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id372"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id373"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id374"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id375"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id376"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id377"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    assert {:id "id378"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id379"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume _module.StateC.S_q(stC#0);
    ##st#0 := _module.StateC.st(stC#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
    assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
    assume {:id "id380"} Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
      _module.__default.DomSt(_module.StateC.st(stC#0)));
    ##cmd#0 := cmd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
    ##deps#0 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
    ##exts#0 := exts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##exts#0, Tclass._module.Expression(), $Heap);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
    assert {:id "id381"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#0);
    assert {:id "id382"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#0));
    assert {:id "id383"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#0);
    assert {:id "id384"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0));
    assert {:id "id385"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#0);
    assert {:id "id386"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
    assert {:id "id387"} {:subsumption 0} Set#Subset(_module.Literal.paths(_module.Expression.lit(##deps#0)), 
      _module.__default.DomSt(_module.StateC.st(##stC#0)));
    assume _module.Expression.exprLiteral_q(##cmd#0)
       && _module.Literal.litString_q(_module.Expression.lit(##cmd#0))
       && _module.Expression.exprLiteral_q(##deps#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0))
       && _module.Expression.exprLiteral_q(##exts#0)
       && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(##deps#0)), 
        _module.__default.DomSt(_module.StateC.st(##stC#0)));
    assume _module.__default.PreC#canCall(cmd#0, deps#0, exts#0, stC#0);
    assume {:id "id388"} _module.__default.PreC(cmd#0, deps#0, exts#0, stC#0);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id389"} _module.__default.ConsistentCache(stC#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##cmd#1 := cmd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##cmd#1, Tclass._module.Expression(), $Heap);
    ##deps#1 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##deps#1, Tclass._module.Expression(), $Heap);
    ##exts#1 := exts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##exts#1, Tclass._module.Expression(), $Heap);
    ##stC#2 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
    assert {:id "id390"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#1);
    assert {:id "id391"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#1));
    assert {:id "id392"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#1);
    assert {:id "id393"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#1));
    assert {:id "id394"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#1);
    assert {:id "id395"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1));
    assume _module.Expression.exprLiteral_q(##cmd#1)
       && _module.Literal.litString_q(_module.Expression.lit(##cmd#1))
       && _module.Expression.exprLiteral_q(##deps#1)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#1))
       && _module.Expression.exprLiteral_q(##exts#1)
       && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1));
    assume _module.__default.execC#canCall(cmd#0, deps#0, exts#0, stC#0);
    assume _module.Tuple.Pair_q(_module.__default.execC(cmd#0, deps#0, exts#0, stC#0));
    assume {:id "id396"} let#0#0#0 == _module.__default.execC(cmd#0, deps#0, exts#0, stC#0);
    assume _module.__default.execC#canCall(cmd#0, deps#0, exts#0, stC#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, 
      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
    assume {:id "id397"} result#Z#0 == let#0#0#0;
    havoc expr'#Z#0;
    havoc stC'#Z#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id398"} let#1#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass._module.Expression());
    assume {:id "id399"} expr'#Z#0 == let#1#0#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id400"} let#1#1#0 == $Unbox(_module.Tuple.snd(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#1#0, Tclass._module.StateC());
    assume {:id "id401"} stC'#Z#0 == let#1#1#0;
    if (_module.Expression.exprLiteral_q(expr'#Z#0))
    {
        assert {:id "id402"} _module.Expression.exprLiteral_q(expr'#Z#0);
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0)))
    {
        assert {:id "id403"} _module.Expression.exprLiteral_q(expr'#Z#0);
        assert {:id "id404"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0));
        assume _module.StateC.S_q(stC'#Z#0);
        ##st#1 := _module.StateC.st(stC'#Z#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(stC'#Z#0));
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0))))
    {
        assume _module.StateC.S_q(stC#0);
        ##st#2 := _module.StateC.st(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
        assume _module.StateC.S_q(stC'#Z#0);
        ##st#3 := _module.StateC.st(stC'#Z#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#3, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(stC'#Z#0));
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0)))
       && Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0))))
    {
        assume _module.StateC.S_q(stC#0);
        assume _module.StateC.S_q(stC#0);
        ##st#4 := _module.StateC.st(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#4, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
        ##paths#0 := _module.__default.DomSt(_module.StateC.st(stC#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#0, TSet(Tclass._module.Path()), $Heap);
        assume _module.StateC.S_q(stC'#Z#0);
        ##st#5 := _module.StateC.st(stC'#Z#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#5, Tclass._module.State(), $Heap);
        assert {:id "id405"} {:subsumption 0} Set#Subset(##paths#0, _module.__default.DomSt(##st#5));
        assume Set#Subset(##paths#0, _module.__default.DomSt(##st#5));
        assume _module.__default.Restrict#canCall(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#Z#0));
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0)))
       && Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0)))
       && _module.StateC.st(stC#0)
         == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#Z#0)))
    {
        ##cmd#2 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#2, Tclass._module.Expression(), $Heap);
        ##deps#2 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#2, Tclass._module.Expression(), $Heap);
        ##exts#2 := exts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exts#2, Tclass._module.Expression(), $Heap);
        ##paths#1 := expr'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#1, Tclass._module.Expression(), $Heap);
        assert {:id "id406"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#2);
        assert {:id "id407"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#2));
        assert {:id "id408"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#2);
        assert {:id "id409"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#2));
        assert {:id "id410"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#2);
        assert {:id "id411"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#2));
        assert {:id "id412"} {:subsumption 0} _module.Expression.exprLiteral_q(##paths#1);
        assert {:id "id413"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##paths#1));
        assume _module.Expression.exprLiteral_q(##cmd#2)
           && _module.Literal.litString_q(_module.Expression.lit(##cmd#2))
           && _module.Expression.exprLiteral_q(##deps#2)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#2))
           && _module.Expression.exprLiteral_q(##exts#2)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#2))
           && _module.Expression.exprLiteral_q(##paths#1)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##paths#1));
        assume _module.__default.OneToOne#canCall(cmd#0, deps#0, exts#0, expr'#Z#0);
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0)))
       && Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0)))
       && _module.StateC.st(stC#0)
         == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#Z#0))
       && _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#Z#0))
    {
        ##cmd#3 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#3, Tclass._module.Expression(), $Heap);
        ##deps#3 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#3, Tclass._module.Expression(), $Heap);
        ##exts#3 := exts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exts#3, Tclass._module.Expression(), $Heap);
        ##stC#3 := stC'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#3, Tclass._module.StateC(), $Heap);
        assert {:id "id414"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#3);
        assert {:id "id415"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#3));
        assert {:id "id416"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#3);
        assert {:id "id417"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3));
        assert {:id "id418"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#3);
        assert {:id "id419"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#3));
        assert {:id "id420"} {:subsumption 0} Set#Subset(_module.Literal.paths(_module.Expression.lit(##deps#3)), 
          _module.__default.DomSt(_module.StateC.st(##stC#3)));
        assume _module.Expression.exprLiteral_q(##cmd#3)
           && _module.Literal.litString_q(_module.Expression.lit(##cmd#3))
           && _module.Expression.exprLiteral_q(##deps#3)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#3))
           && _module.Expression.exprLiteral_q(##exts#3)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#3))
           && Set#Subset(_module.Literal.paths(_module.Expression.lit(##deps#3)), 
            _module.__default.DomSt(_module.StateC.st(##stC#3)));
        assume _module.__default.PostC#canCall(cmd#0, deps#0, exts#0, stC'#Z#0);
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0)))
       && Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0)))
       && _module.StateC.st(stC#0)
         == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#Z#0))
       && _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#Z#0)
       && _module.__default.PostC(cmd#0, deps#0, exts#0, stC'#Z#0))
    {
        // Begin Comprehension WF check
        havoc p#0;
        if ($Is(p#0, Tclass._module.Path()) && $IsAlloc(p#0, Tclass._module.Path(), $Heap))
        {
            assume _module.StateC.S_q(stC#0);
            ##st#6 := _module.StateC.st(stC#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##st#6, Tclass._module.State(), $Heap);
            assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
            if (!Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0)))
            {
                assume _module.StateC.S_q(stC'#Z#0);
                ##st#7 := _module.StateC.st(stC'#Z#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#7, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(_module.StateC.st(stC'#Z#0));
            }

            if (!Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#0))
               && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#Z#0)), $Box(p#0)))
            {
            }
        }

        // End Comprehension WF check
    }

    if (_module.Expression.exprLiteral_q(expr'#Z#0)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#Z#0))
       && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#Z#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0)))
       && Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#Z#0)))
       && _module.StateC.st(stC#0)
         == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#Z#0))
       && _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#Z#0)
       && _module.__default.PostC(cmd#0, deps#0, exts#0, stC'#Z#0)
       && (forall p#1: DatatypeType :: 
        { _module.Path.OpaquePath_q(p#1) } 
          { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#Z#0)), $Box(p#1)) } 
          { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#1)) } 
        $Is(p#1, Tclass._module.Path())
           ==> 
          !Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#1))
             && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#Z#0)), $Box(p#1))
           ==> _module.Path.OpaquePath_q(p#1)))
    {
        ##stC#4 := stC'#Z#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#4, Tclass._module.StateC(), $Heap);
        assume _module.__default.ConsistentCache#canCall(stC'#Z#0);
    }

    assume {:id "id421"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
      (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
          $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
        _module.Expression.exprLiteral_q(expr'#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#0))
           && Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
            _module.__default.DomSt(_module.StateC.st(stC'#0)))
           && Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            _module.__default.DomSt(_module.StateC.st(stC'#0)))
           && _module.StateC.st(stC#0)
             == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#0))
           && _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#0)
           && _module.__default.PostC(cmd#0, deps#0, exts#0, stC'#0)
           && (forall p#2: DatatypeType :: 
            { _module.Path.OpaquePath_q(p#2) } 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2)) } 
              { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2)) } 
            $Is(p#2, Tclass._module.Path())
               ==> 
              !Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2))
                 && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2))
               ==> _module.Path.OpaquePath_q(p#2))
           && _module.__default.ConsistentCache(stC'#0)));
}



procedure {:verboseName "ExecCProperty (call)"} Call$$_module.__default.ExecCProperty(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    exts#0: DatatypeType
       where $Is(exts#0, Tclass._module.Expression())
         && $IsAlloc(exts#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(exts#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0));
  // user-defined preconditions
  requires {:id "id422"} _module.Expression.exprLiteral_q(cmd#0);
  requires {:id "id423"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
  requires {:id "id424"} _module.Expression.exprLiteral_q(deps#0);
  requires {:id "id425"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
  requires {:id "id426"} _module.Expression.exprLiteral_q(exts#0);
  requires {:id "id427"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
  requires {:id "id428"} Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
    _module.__default.DomSt(_module.StateC.st(stC#0)));
  requires {:id "id429"} _module.__default.PreC#canCall(cmd#0, deps#0, exts#0, stC#0)
     ==> _module.__default.PreC(cmd#0, deps#0, exts#0, stC#0)
       || (_module.__default.Pre#canCall(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
         ==> _module.__default.Pre(cmd#0, 
            deps#0, 
            exts#0, 
            _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
           || (forall e#0: Seq :: 
            { _module.__default.Res(cmd#0, 
                deps#0, 
                e#0, 
                _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0))) } 
              { _module.__default.Loc(cmd#0, deps#0, e#0) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
               ==> 
              Set#IsMember(_module.__default.DomSt(_module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0))), 
                $Box(_module.__default.Loc(cmd#0, deps#0, e#0)))
               ==> _module.__default.GetSt(_module.__default.Loc(cmd#0, deps#0, e#0), 
                  _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
                 == _module.__default.Res(cmd#0, 
                  deps#0, 
                  e#0, 
                  _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))));
  requires {:id "id430"} _module.__default.PreC#canCall(cmd#0, deps#0, exts#0, stC#0)
     ==> _module.__default.PreC(cmd#0, deps#0, exts#0, stC#0)
       || (forall e#1: Seq :: 
        { _module.__default.Loc(cmd#0, deps#0, e#1) } 
          { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
        $Is(e#1, TSeq(TChar))
           ==> 
          Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#1)))
           ==> Set#IsMember(_module.Literal.paths(_module.Expression.lit(deps#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#1))));
  requires {:id "id431"} _module.__default.ConsistentCache#canCall(stC#0)
     ==> _module.__default.ConsistentCache(stC#0)
       || (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#2: Seq :: 
        { _module.__default.Loc(cmd#1, deps#1, e#2) } 
        $Is(cmd#1, Tclass._module.Expression())
             && $Is(deps#1, Tclass._module.Expression())
             && $Is(e#2, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#2)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            $Box(_module.__default.Loc(cmd#1, deps#1, e#2))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.execC#canCall(cmd#0, deps#0, exts#0, stC#0)
     && (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.Expression.exprLiteral_q(expr'#0)
             ==> 
            _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#0))
             ==> _module.StateC.S_q(stC'#0)
               && _module.__default.DomSt#canCall(_module.StateC.st(stC'#0))
               && (Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
                  _module.__default.DomSt(_module.StateC.st(stC'#0)))
                 ==> _module.StateC.S_q(stC#0)
                   && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                   && 
                  _module.StateC.S_q(stC'#0)
                   && _module.__default.DomSt#canCall(_module.StateC.st(stC'#0))
                   && (Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
                      _module.__default.DomSt(_module.StateC.st(stC'#0)))
                     ==> _module.StateC.S_q(stC#0)
                       && 
                      _module.StateC.S_q(stC#0)
                       && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                       && _module.StateC.S_q(stC'#0)
                       && _module.__default.Restrict#canCall(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#0))
                       && (_module.StateC.st(stC#0)
                           == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#0))
                         ==> _module.__default.OneToOne#canCall(cmd#0, deps#0, exts#0, expr'#0)
                           && (_module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#0)
                             ==> _module.__default.PostC#canCall(cmd#0, deps#0, exts#0, stC'#0)
                               && (_module.__default.PostC(cmd#0, deps#0, exts#0, stC'#0)
                                 ==> (forall p#2: DatatypeType :: 
                                    { _module.Path.OpaquePath_q(p#2) } 
                                      { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2)) } 
                                      { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2)) } 
                                    $Is(p#2, Tclass._module.Path())
                                       ==> _module.StateC.S_q(stC#0)
                                         && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                                         && (!Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2))
                                           ==> _module.StateC.S_q(stC'#0)
                                             && _module.__default.DomSt#canCall(_module.StateC.st(stC'#0))))
                                   && ((forall p#2: DatatypeType :: 
                                      { _module.Path.OpaquePath_q(p#2) } 
                                        { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2)) } 
                                        { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2)) } 
                                      $Is(p#2, Tclass._module.Path())
                                         ==> 
                                        !Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2))
                                           && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2))
                                         ==> _module.Path.OpaquePath_q(p#2))
                                     ==> _module.__default.ConsistentCache#canCall(stC'#0)))))))));
  ensures {:id "id432"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Expression.exprLiteral_q(expr'#0)));
  ensures {:id "id433"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#0))));
  ensures {:id "id434"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#0)))));
  ensures {:id "id435"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#0)))));
  ensures {:id "id436"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.StateC.st(stC#0)
         == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#0))));
  free ensures {:id "id437"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.OneToOne#canCall(cmd#0, deps#0, exts#0, expr'#0)
         && 
        _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#0)
         && (forall e#3: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#3) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
          $Is(e#3, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
             ==> Set#IsMember(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
              $Box(_module.__default.Loc(cmd#0, deps#0, e#3))))));
  free ensures {:id "id438"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.PostC#canCall(cmd#0, deps#0, exts#0, stC'#0)
         && 
        _module.__default.PostC(cmd#0, deps#0, exts#0, stC'#0)
         && 
        _module.__default.Post(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC'#0)))
         && (forall e#5: Seq :: 
          { _module.__default.Loc(cmd#0, deps#0, e#5) } 
            { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#5)) } 
          $Is(e#5, TSeq(TChar))
             ==> 
            Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#5))
             ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
              _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#5))))));
  ensures {:id "id439"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      (forall p#2: DatatypeType :: 
        { _module.Path.OpaquePath_q(p#2) } 
          { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2)) } 
          { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2)) } 
        $Is(p#2, Tclass._module.Path())
           ==> 
          !Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2))
             && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2))
           ==> _module.Path.OpaquePath_q(p#2))));
  free ensures {:id "id440"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache#canCall(stC'#0)
         && 
        _module.__default.ConsistentCache(stC'#0)
         && (forall cmd#2: DatatypeType, deps#2: DatatypeType, e#6: Seq :: 
          { _module.__default.Loc(cmd#2, deps#2, e#6) } 
          $Is(cmd#2, Tclass._module.Expression())
               && $Is(deps#2, Tclass._module.Expression())
               && $Is(e#6, TSeq(TChar))
             ==> 
            Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
              _module.__default.Hash(_module.__default.Loc(cmd#2, deps#2, e#6)))
             ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
              $Box(_module.__default.Loc(cmd#2, deps#2, e#6))))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "ExecCProperty (correctness)"} Impl$$_module.__default.ExecCProperty(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    exts#0: DatatypeType
       where $Is(exts#0, Tclass._module.Expression())
         && $IsAlloc(exts#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(exts#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  requires {:id "id441"} _module.Expression.exprLiteral_q(cmd#0);
  requires {:id "id442"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
  requires {:id "id443"} _module.Expression.exprLiteral_q(deps#0);
  requires {:id "id444"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
  requires {:id "id445"} _module.Expression.exprLiteral_q(exts#0);
  requires {:id "id446"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
  requires {:id "id447"} Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
    _module.__default.DomSt(_module.StateC.st(stC#0)));
  free requires {:id "id448"} _module.__default.PreC#canCall(cmd#0, deps#0, exts#0, stC#0)
     && 
    _module.__default.PreC(cmd#0, deps#0, exts#0, stC#0)
     && 
    _module.__default.Pre(cmd#0, 
      deps#0, 
      exts#0, 
      _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
     && (forall e#8: Seq :: 
      { _module.__default.Loc(cmd#0, deps#0, e#8) } 
        { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#8)) } 
      $Is(e#8, TSeq(TChar))
         ==> 
        Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#8))
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#8)))
         ==> Set#IsMember(_module.Literal.paths(_module.Expression.lit(deps#0)), 
          $Box(_module.__default.Loc(cmd#0, deps#0, e#8))));
  free requires {:id "id449"} _module.__default.ConsistentCache#canCall(stC#0)
     && 
    _module.__default.ConsistentCache(stC#0)
     && (forall cmd#3: DatatypeType, deps#3: DatatypeType, e#9: Seq :: 
      { _module.__default.Loc(cmd#3, deps#3, e#9) } 
      $Is(cmd#3, Tclass._module.Expression())
           && $Is(deps#3, Tclass._module.Expression())
           && $Is(e#9, TSeq(TChar))
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#3, deps#3, e#9)))
         ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#3, deps#3, e#9))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.execC#canCall(cmd#0, deps#0, exts#0, stC#0)
     && (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.Expression.exprLiteral_q(expr'#0)
             ==> 
            _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#0))
             ==> _module.StateC.S_q(stC'#0)
               && _module.__default.DomSt#canCall(_module.StateC.st(stC'#0))
               && (Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
                  _module.__default.DomSt(_module.StateC.st(stC'#0)))
                 ==> _module.StateC.S_q(stC#0)
                   && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                   && 
                  _module.StateC.S_q(stC'#0)
                   && _module.__default.DomSt#canCall(_module.StateC.st(stC'#0))
                   && (Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
                      _module.__default.DomSt(_module.StateC.st(stC'#0)))
                     ==> _module.StateC.S_q(stC#0)
                       && 
                      _module.StateC.S_q(stC#0)
                       && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                       && _module.StateC.S_q(stC'#0)
                       && _module.__default.Restrict#canCall(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#0))
                       && (_module.StateC.st(stC#0)
                           == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#0))
                         ==> _module.__default.OneToOne#canCall(cmd#0, deps#0, exts#0, expr'#0)
                           && (_module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#0)
                             ==> _module.__default.PostC#canCall(cmd#0, deps#0, exts#0, stC'#0)
                               && (_module.__default.PostC(cmd#0, deps#0, exts#0, stC'#0)
                                 ==> (forall p#2: DatatypeType :: 
                                    { _module.Path.OpaquePath_q(p#2) } 
                                      { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2)) } 
                                      { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2)) } 
                                    $Is(p#2, Tclass._module.Path())
                                       ==> _module.StateC.S_q(stC#0)
                                         && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                                         && (!Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2))
                                           ==> _module.StateC.S_q(stC'#0)
                                             && _module.__default.DomSt#canCall(_module.StateC.st(stC'#0))))
                                   && ((forall p#2: DatatypeType :: 
                                      { _module.Path.OpaquePath_q(p#2) } 
                                        { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2)) } 
                                        { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2)) } 
                                      $Is(p#2, Tclass._module.Path())
                                         ==> 
                                        !Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2))
                                           && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2))
                                         ==> _module.Path.OpaquePath_q(p#2))
                                     ==> _module.__default.ConsistentCache#canCall(stC'#0)))))))));
  ensures {:id "id450"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Expression.exprLiteral_q(expr'#0)));
  ensures {:id "id451"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Literal.litArrOfPaths_q(_module.Expression.lit(expr'#0))));
  ensures {:id "id452"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      Set#Subset(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#0)))));
  ensures {:id "id453"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
        _module.__default.DomSt(_module.StateC.st(stC'#0)))));
  ensures {:id "id454"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.StateC.st(stC#0)
         == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#0))));
  ensures {:id "id455"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.OneToOne#canCall(cmd#0, deps#0, exts#0, expr'#0)
         ==> _module.__default.OneToOne(cmd#0, deps#0, exts#0, expr'#0)
           || (forall e#10: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#10) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#10)) } 
            $Is(e#10, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#10))
               ==> Set#IsMember(_module.Literal.paths(_module.Expression.lit(expr'#0)), 
                $Box(_module.__default.Loc(cmd#0, deps#0, e#10))))));
  ensures {:id "id456"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.PostC#canCall(cmd#0, deps#0, exts#0, stC'#0)
         ==> _module.__default.PostC(cmd#0, deps#0, exts#0, stC'#0)
           || (_module.__default.Post#canCall(cmd#0, 
              deps#0, 
              exts#0, 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC'#0)))
             ==> _module.__default.Post(cmd#0, 
                deps#0, 
                exts#0, 
                _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC'#0)))
               || (forall e#11: Seq :: 
                { _module.__default.Res(cmd#0, 
                    deps#0, 
                    e#11, 
                    _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC'#0))) } 
                  { _module.__default.Loc(cmd#0, deps#0, e#11) } 
                  { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#11)) } 
                $Is(e#11, TSeq(TChar))
                   ==> (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#11))
                       ==> Set#IsMember(_module.__default.DomSt(_module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC'#0))), 
                        $Box(_module.__default.Loc(cmd#0, deps#0, e#11))))
                     && (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#11))
                       ==> _module.__default.GetSt(_module.__default.Loc(cmd#0, deps#0, e#11), 
                          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC'#0)))
                         == _module.__default.Res(cmd#0, 
                          deps#0, 
                          e#11, 
                          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC'#0))))))));
  ensures {:id "id457"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.PostC#canCall(cmd#0, deps#0, exts#0, stC'#0)
         ==> _module.__default.PostC(cmd#0, deps#0, exts#0, stC'#0)
           || (forall e#12: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#12) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#12)) } 
            $Is(e#12, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#12))
               ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
                _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#12))))));
  ensures {:id "id458"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      (forall p#2: DatatypeType :: 
        { _module.Path.OpaquePath_q(p#2) } 
          { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2)) } 
          { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2)) } 
        $Is(p#2, Tclass._module.Path())
           ==> 
          !Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), $Box(p#2))
             && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), $Box(p#2))
           ==> _module.Path.OpaquePath_q(p#2))));
  ensures {:id "id459"} (var result#0 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache#canCall(stC'#0)
         ==> _module.__default.ConsistentCache(stC'#0)
           || (forall cmd#4: DatatypeType, deps#4: DatatypeType, e#13: Seq :: 
            { _module.__default.Loc(cmd#4, deps#4, e#13) } 
            $Is(cmd#4, Tclass._module.Expression())
                 && $Is(deps#4, Tclass._module.Expression())
                 && $Is(e#13, TSeq(TChar))
               ==> 
              Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
                _module.__default.Hash(_module.__default.Loc(cmd#4, deps#4, e#13)))
               ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
                $Box(_module.__default.Loc(cmd#4, deps#4, e#13))))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "ExecCProperty (correctness)"} Impl$$_module.__default.ExecCProperty(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var defass#result#1: bool;
  var result#1: DatatypeType
     where defass#result#1
       ==> $Is(result#1, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()))
         && $IsAlloc(result#1, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()), 
          $Heap);
  var ##cmd#4: DatatypeType;
  var ##deps#4: DatatypeType;
  var ##exts#4: DatatypeType;
  var ##stC#5: DatatypeType;
  var expr'#1: DatatypeType
     where $Is(expr'#1, Tclass._module.Expression())
       && $IsAlloc(expr'#1, Tclass._module.Expression(), $Heap);
  var defass#stC'#1: bool;
  var stC'#1: DatatypeType
     where defass#stC'#1
       ==> $Is(stC'#1, Tclass._module.StateC())
         && $IsAlloc(stC'#1, Tclass._module.StateC(), $Heap);
  var $rhs#0: DatatypeType;
  var $rhs#1: DatatypeType;
  var e#14: Seq;
  var ##p#0: DatatypeType;
  var ##cmd#5: DatatypeType;
  var ##deps#5: DatatypeType;
  var ##ext#0: Seq;
  var ##c#0: Box;
  var st##0_0: Box;
  var st'##0_0: Box;
  var ##paths#0_0: Set;
  var ##st#0_0: Box;
  var ##st#0_1: Box;
  var cmd##1_0: DatatypeType;
  var deps##1_0: DatatypeType;
  var exts##1_0: DatatypeType;
  var st##1_0: Box;
  var defass#execResult#1_0: bool;
  var execResult#1_0: DatatypeType
     where defass#execResult#1_0
       ==> $Is(execResult#1_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.State()))
         && $IsAlloc(execResult#1_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.State()), 
          $Heap);
  var ##cmd#1_0: DatatypeType;
  var ##deps#1_0: DatatypeType;
  var ##exts#1_0: DatatypeType;
  var ##st#1_0: Box;
  var defass#st'#1_0: bool;
  var st'#1_0: Box
     where defass#st'#1_0
       ==> $IsBox(st'#1_0, Tclass._module.State())
         && $IsAllocBox(st'#1_0, Tclass._module.State(), $Heap);
  var ##st#1_1: Box;
  var ##st#1_2: Box;
  var st##1_1: Box;
  var st'##1_0: Box;
  var cmd##1_1: DatatypeType;
  var deps##1_1: DatatypeType;
  var exts##1_1: DatatypeType;
  var stC##1_0: DatatypeType;

    // AddMethodImpl: ExecCProperty, Impl$$_module.__default.ExecCProperty
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(268,14)
    assume true;
    ##cmd#4 := cmd#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##cmd#4, Tclass._module.Expression(), $Heap);
    ##deps#4 := deps#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##deps#4, Tclass._module.Expression(), $Heap);
    ##exts#4 := exts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##exts#4, Tclass._module.Expression(), $Heap);
    ##stC#5 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#5, Tclass._module.StateC(), $Heap);
    assert {:id "id460"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#4);
    assert {:id "id461"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#4));
    assert {:id "id462"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#4);
    assert {:id "id463"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#4));
    assert {:id "id464"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#4);
    assert {:id "id465"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#4));
    assume _module.Expression.exprLiteral_q(##cmd#4)
       && _module.Literal.litString_q(_module.Expression.lit(##cmd#4))
       && _module.Expression.exprLiteral_q(##deps#4)
       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#4))
       && _module.Expression.exprLiteral_q(##exts#4)
       && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#4));
    assume _module.__default.execC#canCall(cmd#0, deps#0, exts#0, stC#0);
    assume _module.Tuple.Pair_q(_module.__default.execC(cmd#0, deps#0, exts#0, stC#0));
    assume _module.__default.execC#canCall(cmd#0, deps#0, exts#0, stC#0);
    result#1 := _module.__default.execC(cmd#0, deps#0, exts#0, stC#0);
    defass#result#1 := true;
    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(269,19)
    assume true;
    assume true;
    assert {:id "id467"} defass#result#1;
    assume _module.Tuple.Pair_q(result#1);
    assume _module.Tuple.Pair_q(result#1);
    $rhs#0 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType;
    assert {:id "id469"} defass#result#1;
    assume _module.Tuple.Pair_q(result#1);
    assume _module.Tuple.Pair_q(result#1);
    $rhs#1 := $Unbox(_module.Tuple.snd(result#1)): DatatypeType;
    expr'#1 := $rhs#0;
    stC'#1 := $rhs#1;
    defass#stC'#1 := true;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(270,3)
    // Begin Comprehension WF check
    havoc e#14;
    if ($Is(e#14, TSeq(TChar)) && $IsAlloc(e#14, TSeq(TChar), $Heap))
    {
        assert {:id "id473"} _module.Expression.exprLiteral_q(exts#0);
        assert {:id "id474"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
        if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#14)))
        {
            ##cmd#5 := cmd#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##cmd#5, Tclass._module.Expression(), $Heap);
            ##deps#5 := deps#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##deps#5, Tclass._module.Expression(), $Heap);
            ##ext#0 := e#14;
            // assume allocatedness for argument to function
            assume $IsAlloc(##ext#0, TSeq(TChar), $Heap);
            assume _module.__default.Loc#canCall(cmd#0, deps#0, e#14);
            ##p#0 := _module.__default.Loc(cmd#0, deps#0, e#14);
            // assume allocatedness for argument to function
            assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
            assume _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#14));
            assume _module.StateC.S_q(stC#0);
            ##c#0 := _module.StateC.c(stC#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
            assume _module.__default.DomC#canCall(_module.StateC.c(stC#0));
        }
    }

    // End Comprehension WF check
    assume (forall e#15: Seq :: 
      { _module.__default.Loc(cmd#0, deps#0, e#15) } 
        { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#15)) } 
      $Is(e#15, TSeq(TChar))
         ==> 
        Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#15))
         ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#15)
           && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#15))
           && 
          _module.StateC.S_q(stC#0)
           && _module.__default.DomC#canCall(_module.StateC.c(stC#0)));
    if ((forall e#15: Seq :: 
      { _module.__default.Loc(cmd#0, deps#0, e#15) } 
        { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#15)) } 
      $Is(e#15, TSeq(TChar))
           && Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#15))
         ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#15)))))
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(271,26)
        // TrCallStmt: Before ProcessCallStmt
        assume _module.StateC.S_q(stC#0);
        assume _module.StateC.S_q(stC#0);
        // ProcessCallStmt: CheckSubrange
        st##0_0 := _module.StateC.st(stC#0);
        assume _module.StateC.S_q(stC#0);
        ##st#0_0 := _module.StateC.st(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_0, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
        ##paths#0_0 := _module.__default.DomSt(_module.StateC.st(stC#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#0_0, TSet(Tclass._module.Path()), $Heap);
        assert {:id "id475"} defass#stC'#1;
        assume _module.StateC.S_q(stC'#1);
        ##st#0_1 := _module.StateC.st(stC'#1);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#0_1, Tclass._module.State(), $Heap);
        assert {:id "id476"} {:subsumption 0} Set#Subset(##paths#0_0, _module.__default.DomSt(##st#0_1));
        assume Set#Subset(##paths#0_0, _module.__default.DomSt(##st#0_1));
        assume _module.__default.Restrict#canCall(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#1));
        assume _module.StateC.S_q(stC#0)
           && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
           && _module.StateC.S_q(stC'#1)
           && _module.__default.Restrict#canCall(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#1));
        // ProcessCallStmt: CheckSubrange
        st'##0_0 := _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stC#0)), _module.StateC.st(stC'#1));
        call {:id "id477"} Call$$_module.__default.StateEqualityProperty(st##0_0, st'##0_0);
        // TrCallStmt: After ProcessCallStmt
    }
    else
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(273,17)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        cmd##1_0 := cmd#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        deps##1_0 := deps#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        exts##1_0 := exts#0;
        assume _module.StateC.S_q(stC#0);
        assume _module.StateC.S_q(stC#0);
        // ProcessCallStmt: CheckSubrange
        st##1_0 := _module.StateC.st(stC#0);
        call {:id "id478"} Call$$_module.__default.ExecProperty(cmd##1_0, deps##1_0, exts##1_0, st##1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(274,20)
        assume true;
        ##cmd#1_0 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#1_0, Tclass._module.Expression(), $Heap);
        ##deps#1_0 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#1_0, Tclass._module.Expression(), $Heap);
        ##exts#1_0 := exts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exts#1_0, Tclass._module.Expression(), $Heap);
        assume _module.StateC.S_q(stC#0);
        ##st#1_0 := _module.StateC.st(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1_0, Tclass._module.State(), $Heap);
        assume _module.__default.exec#canCall(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0));
        assume _module.Tuple.Pair_q(_module.__default.exec(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0)));
        assume _module.StateC.S_q(stC#0)
           && _module.__default.exec#canCall(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0));
        execResult#1_0 := _module.__default.exec(cmd#0, deps#0, exts#0, _module.StateC.st(stC#0));
        defass#execResult#1_0 := true;
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(275,13)
        assume true;
        assert {:id "id480"} defass#execResult#1_0;
        assume _module.Tuple.Pair_q(execResult#1_0);
        assume _module.Tuple.Pair_q(execResult#1_0);
        st'#1_0 := _module.Tuple.snd(execResult#1_0);
        defass#st'#1_0 := true;
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(276,5)
        assume _module.StateC.S_q(stC#0);
        ##st#1_1 := _module.StateC.st(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1_1, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
        assert {:id "id482"} defass#st'#1_0;
        ##st#1_2 := st'#1_0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1_2, Tclass._module.State(), $Heap);
        assume _module.__default.DomSt#canCall(st'#1_0);
        assume _module.StateC.S_q(stC#0)
           && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
           && _module.__default.DomSt#canCall(st'#1_0);
        assert {:id "id483"} Set#Subset(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          _module.__default.DomSt(st'#1_0));
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(277,26)
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id484"} defass#stC'#1;
        assume _module.StateC.S_q(stC'#1);
        assume _module.StateC.S_q(stC'#1);
        // ProcessCallStmt: CheckSubrange
        st##1_1 := _module.StateC.st(stC'#1);
        assert {:id "id485"} defass#st'#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        st'##1_0 := st'#1_0;
        call {:id "id486"} Call$$_module.__default.StateEqualityProperty(st##1_1, st'##1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(278,17)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        cmd##1_1 := cmd#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        deps##1_1 := deps#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        exts##1_1 := exts#0;
        assert {:id "id487"} defass#st'#1_0;
        assume _module.StateC.S_q(stC#0);
        assume _module.StateC.S_q(stC#0);
        // ProcessCallStmt: CheckSubrange
        stC##1_0 := #_module.StateC.S(st'#1_0, _module.StateC.c(stC#0));
        call {:id "id488"} Call$$_module.__default.UpdateCLemma(cmd##1_1, deps##1_1, exts##1_1, stC##1_0);
        // TrCallStmt: After ProcessCallStmt
    }
}



// function declaration for _module._default.PreC
function _module.__default.PreC(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   : bool
uses {
// definition axiom for _module.__default.PreC (revealed)
axiom {:id "id489"} 4 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    { _module.__default.PreC(cmd#0, deps#0, exts#0, stC#0) } 
    _module.__default.PreC#canCall(cmd#0, deps#0, exts#0, stC#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))
           && Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
            _module.__default.DomSt(_module.StateC.st(stC#0))))
       ==> _module.StateC.S_q(stC#0)
         && _module.__default.Restrict#canCall(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0))
         && _module.__default.Pre#canCall(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
         && (_module.__default.Pre(cmd#0, 
            deps#0, 
            exts#0, 
            _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
           ==> (forall e#0: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#0) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
               ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0)
                 && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#0))
                 && 
                _module.StateC.S_q(stC#0)
                 && _module.__default.DomC#canCall(_module.StateC.c(stC#0))
                 && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                    _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
                   ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0))))
         && _module.__default.PreC(cmd#0, deps#0, exts#0, stC#0)
           == (_module.__default.Pre(cmd#0, 
              deps#0, 
              exts#0, 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
             && (forall e#0: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#0) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
              $Is(e#0, TSeq(TChar))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
                 ==> 
                Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                  _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
                 ==> Set#IsMember(_module.Literal.paths(_module.Expression.lit(deps#0)), 
                  $Box(_module.__default.Loc(cmd#0, deps#0, e#0))))));
// definition axiom for _module.__default.PreC for all literals (revealed)
axiom {:id "id490"} 4 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    {:weight 3} { _module.__default.PreC(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0)) } 
    _module.__default.PreC#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q(Lit(cmd#0))
           && _module.Literal.litString_q(Lit(_module.Expression.lit(Lit(cmd#0))))
           && _module.Expression.exprLiteral_q(Lit(deps#0))
           && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(deps#0))))
           && _module.Expression.exprLiteral_q(Lit(exts#0))
           && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0))))
           && Set#Subset(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0)))), 
            _module.__default.DomSt(Lit(_module.StateC.st(Lit(stC#0))))))
       ==> _module.StateC.S_q(Lit(stC#0))
         && _module.__default.Restrict#canCall(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0))))), 
          Lit(_module.StateC.st(Lit(stC#0))))
         && _module.__default.Pre#canCall(Lit(cmd#0), 
          Lit(deps#0), 
          Lit(exts#0), 
          _module.__default.Restrict(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0))))), 
            Lit(_module.StateC.st(Lit(stC#0)))))
         && (_module.__default.Pre(Lit(cmd#0), 
            Lit(deps#0), 
            Lit(exts#0), 
            _module.__default.Restrict(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0))))), 
              Lit(_module.StateC.st(Lit(stC#0)))))
           ==> (forall e#1: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#1) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
               ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                 && _module.__default.Hash#canCall(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))
                 && 
                _module.StateC.S_q(Lit(stC#0))
                 && _module.__default.DomC#canCall(Lit(_module.StateC.c(Lit(stC#0))))
                 && (Set#IsMember(_module.__default.DomC(Lit(_module.StateC.c(Lit(stC#0)))), 
                    _module.__default.Hash(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))
                   ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1))))
         && _module.__default.PreC(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0))
           == (_module.__default.Pre(Lit(cmd#0), 
              Lit(deps#0), 
              Lit(exts#0), 
              _module.__default.Restrict(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0))))), 
                Lit(_module.StateC.st(Lit(stC#0)))))
             && (forall e#1: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#1) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
              $Is(e#1, TSeq(TChar))
                 ==> 
                Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
                 ==> 
                Set#IsMember(_module.__default.DomC(Lit(_module.StateC.c(Lit(stC#0)))), 
                  _module.__default.Hash(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1)))
                 ==> Set#IsMember(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0))))), 
                  $Box(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))))));
}

function _module.__default.PreC#canCall(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   : bool;

function _module.__default.PreC#requires(DatatypeType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.PreC
axiom (forall cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType :: 
  { _module.__default.PreC#requires(cmd#0, deps#0, exts#0, stC#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(exts#0, Tclass._module.Expression())
       && $Is(stC#0, Tclass._module.StateC())
     ==> _module.__default.PreC#requires(cmd#0, deps#0, exts#0, stC#0)
       == (
        _module.Expression.exprLiteral_q(cmd#0)
         && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
         && _module.Expression.exprLiteral_q(deps#0)
         && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
         && _module.Expression.exprLiteral_q(exts#0)
         && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))
         && Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
          _module.__default.DomSt(_module.StateC.st(stC#0)))));

procedure {:verboseName "PreC (well-formedness)"} CheckWellformed$$_module.__default.PreC(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    exts#0: DatatypeType where $Is(exts#0, Tclass._module.Expression()), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "PreC (well-formedness)"} CheckWellformed$$_module.__default.PreC(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##exts#0: DatatypeType;
  var ##st#1: Box;
  var ##paths#0: Set;
  var ##st#2: Box;
  var e#2: Seq;
  var ##p#0: DatatypeType;
  var ##cmd#1: DatatypeType;
  var ##deps#1: DatatypeType;
  var ##ext#0: Seq;
  var ##c#0: Box;
  var ##cmd#2: DatatypeType;
  var ##deps#2: DatatypeType;
  var ##ext#1: Seq;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id491"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id492"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id493"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id494"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id495"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id496"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id497"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id498"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id499"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    assert {:id "id500"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id501"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume _module.StateC.S_q(stC#0);
    ##st#0 := _module.StateC.st(stC#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
    assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
    assume {:id "id502"} Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
      _module.__default.DomSt(_module.StateC.st(stC#0)));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##cmd#0 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
        ##deps#0 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
        ##exts#0 := exts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exts#0, Tclass._module.Expression(), $Heap);
        assert {:id "id503"} _module.Expression.exprLiteral_q(deps#0);
        assert {:id "id504"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
        ##paths#0 := _module.Literal.paths(_module.Expression.lit(deps#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#0, TSet(Tclass._module.Path()), $Heap);
        assume _module.StateC.S_q(stC#0);
        ##st#2 := _module.StateC.st(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
        assert {:id "id505"} {:subsumption 0} Set#Subset(##paths#0, _module.__default.DomSt(##st#2));
        assume Set#Subset(##paths#0, _module.__default.DomSt(##st#2));
        assume _module.__default.Restrict#canCall(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0));
        ##st#1 := _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0));
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
        assert {:id "id506"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#0);
        assert {:id "id507"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#0));
        assert {:id "id508"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#0);
        assert {:id "id509"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0));
        assert {:id "id510"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#0);
        assert {:id "id511"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
        assume _module.Expression.exprLiteral_q(##cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(##cmd#0))
           && _module.Expression.exprLiteral_q(##deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0))
           && _module.Expression.exprLiteral_q(##exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
        assume _module.__default.Pre#canCall(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)));
        if (_module.__default.Pre(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0))))
        {
            // Begin Comprehension WF check
            havoc e#2;
            if ($Is(e#2, TSeq(TChar)) && $IsAlloc(e#2, TSeq(TChar), $Heap))
            {
                assert {:id "id512"} _module.Expression.exprLiteral_q(exts#0);
                assert {:id "id513"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
                if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)))
                {
                    ##cmd#1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1, Tclass._module.Expression(), $Heap);
                    ##deps#1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1, Tclass._module.Expression(), $Heap);
                    ##ext#0 := e#2;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ext#0, TSeq(TChar), $Heap);
                    assume _module.__default.Loc#canCall(cmd#0, deps#0, e#2);
                    ##p#0 := _module.__default.Loc(cmd#0, deps#0, e#2);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                    assume _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#2));
                    assume _module.StateC.S_q(stC#0);
                    ##c#0 := _module.StateC.c(stC#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
                    assume _module.__default.DomC#canCall(_module.StateC.c(stC#0));
                    if (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                      _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#2))))
                    {
                        ##cmd#2 := cmd#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##cmd#2, Tclass._module.Expression(), $Heap);
                        ##deps#2 := deps#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##deps#2, Tclass._module.Expression(), $Heap);
                        ##ext#1 := e#2;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##ext#1, TSeq(TChar), $Heap);
                        assume _module.__default.Loc#canCall(cmd#0, deps#0, e#2);
                        assert {:id "id514"} _module.Expression.exprLiteral_q(deps#0);
                        assert {:id "id515"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
                    }
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id516"} _module.__default.PreC(cmd#0, deps#0, exts#0, stC#0)
           == (_module.__default.Pre(cmd#0, 
              deps#0, 
              exts#0, 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
             && (forall e#3: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#3) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
              $Is(e#3, TSeq(TChar))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
                 ==> 
                Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                  _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#3)))
                 ==> Set#IsMember(_module.Literal.paths(_module.Expression.lit(deps#0)), 
                  $Box(_module.__default.Loc(cmd#0, deps#0, e#3)))));
        assume _module.StateC.S_q(stC#0)
           && _module.__default.Restrict#canCall(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0))
           && _module.__default.Pre#canCall(cmd#0, 
            deps#0, 
            exts#0, 
            _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
           && (_module.__default.Pre(cmd#0, 
              deps#0, 
              exts#0, 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
             ==> (forall e#3: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#3) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
              $Is(e#3, TSeq(TChar))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#3)
                   && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#3))
                   && 
                  _module.StateC.S_q(stC#0)
                   && _module.__default.DomC#canCall(_module.StateC.c(stC#0))
                   && (Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                      _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#3)))
                     ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#3))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.PreC(cmd#0, deps#0, exts#0, stC#0), TBool);
        return;

        assume false;
    }
}



// function declaration for _module._default.PostC
function _module.__default.PostC(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   : bool
uses {
// definition axiom for _module.__default.PostC (revealed)
axiom {:id "id517"} 4 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    { _module.__default.PostC(cmd#0, deps#0, exts#0, stC#0) } 
    _module.__default.PostC#canCall(cmd#0, deps#0, exts#0, stC#0)
         || (4 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q(cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
           && _module.Expression.exprLiteral_q(deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
           && _module.Expression.exprLiteral_q(exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))
           && Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
            _module.__default.DomSt(_module.StateC.st(stC#0))))
       ==> _module.StateC.S_q(stC#0)
         && _module.__default.Restrict#canCall(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0))
         && _module.__default.Post#canCall(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
         && (_module.__default.Post(cmd#0, 
            deps#0, 
            exts#0, 
            _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
           ==> (forall e#0: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#0) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
            $Is(e#0, TSeq(TChar))
               ==> 
              Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
               ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#0)
                 && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#0))
                 && 
                _module.StateC.S_q(stC#0)
                 && _module.__default.DomC#canCall(_module.StateC.c(stC#0))))
         && _module.__default.PostC(cmd#0, deps#0, exts#0, stC#0)
           == (_module.__default.Post(cmd#0, 
              deps#0, 
              exts#0, 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
             && (forall e#0: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#0) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0)) } 
              $Is(e#0, TSeq(TChar))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#0))
                 ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                  _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0))))));
// definition axiom for _module.__default.PostC for all literals (revealed)
axiom {:id "id518"} 4 <= $FunctionContextHeight
   ==> (forall cmd#0: DatatypeType, 
      deps#0: DatatypeType, 
      exts#0: DatatypeType, 
      stC#0: DatatypeType :: 
    {:weight 3} { _module.__default.PostC(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0)) } 
    _module.__default.PostC#canCall(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0))
         || (4 < $FunctionContextHeight
           && 
          $Is(cmd#0, Tclass._module.Expression())
           && $Is(deps#0, Tclass._module.Expression())
           && $Is(exts#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && 
          _module.Expression.exprLiteral_q(Lit(cmd#0))
           && _module.Literal.litString_q(Lit(_module.Expression.lit(Lit(cmd#0))))
           && _module.Expression.exprLiteral_q(Lit(deps#0))
           && _module.Literal.litArrOfPaths_q(Lit(_module.Expression.lit(Lit(deps#0))))
           && _module.Expression.exprLiteral_q(Lit(exts#0))
           && _module.Literal.litArrOfStrings_q(Lit(_module.Expression.lit(Lit(exts#0))))
           && Set#Subset(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0)))), 
            _module.__default.DomSt(Lit(_module.StateC.st(Lit(stC#0))))))
       ==> _module.StateC.S_q(Lit(stC#0))
         && _module.__default.Restrict#canCall(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0))))), 
          Lit(_module.StateC.st(Lit(stC#0))))
         && _module.__default.Post#canCall(Lit(cmd#0), 
          Lit(deps#0), 
          Lit(exts#0), 
          _module.__default.Restrict(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0))))), 
            Lit(_module.StateC.st(Lit(stC#0)))))
         && (_module.__default.Post(Lit(cmd#0), 
            Lit(deps#0), 
            Lit(exts#0), 
            _module.__default.Restrict(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0))))), 
              Lit(_module.StateC.st(Lit(stC#0)))))
           ==> (forall e#1: Seq :: 
            { _module.__default.Loc(cmd#0, deps#0, e#1) } 
              { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
            $Is(e#1, TSeq(TChar))
               ==> 
              Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
               ==> _module.__default.Loc#canCall(Lit(cmd#0), Lit(deps#0), e#1)
                 && _module.__default.Hash#canCall(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))
                 && 
                _module.StateC.S_q(Lit(stC#0))
                 && _module.__default.DomC#canCall(Lit(_module.StateC.c(Lit(stC#0))))))
         && _module.__default.PostC(Lit(cmd#0), Lit(deps#0), Lit(exts#0), Lit(stC#0))
           == (_module.__default.Post(Lit(cmd#0), 
              Lit(deps#0), 
              Lit(exts#0), 
              _module.__default.Restrict(Lit(_module.Literal.paths(Lit(_module.Expression.lit(Lit(deps#0))))), 
                Lit(_module.StateC.st(Lit(stC#0)))))
             && (forall e#1: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#1) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#1)) } 
              $Is(e#1, TSeq(TChar))
                 ==> 
                Set#IsMember(Lit(_module.Literal.strs(Lit(_module.Expression.lit(Lit(exts#0))))), $Box(e#1))
                 ==> Set#IsMember(_module.__default.DomC(Lit(_module.StateC.c(Lit(stC#0)))), 
                  _module.__default.Hash(_module.__default.Loc(Lit(cmd#0), Lit(deps#0), e#1))))));
}

function _module.__default.PostC#canCall(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
   : bool;

function _module.__default.PostC#requires(DatatypeType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.PostC
axiom (forall cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType :: 
  { _module.__default.PostC#requires(cmd#0, deps#0, exts#0, stC#0) } 
  $Is(cmd#0, Tclass._module.Expression())
       && $Is(deps#0, Tclass._module.Expression())
       && $Is(exts#0, Tclass._module.Expression())
       && $Is(stC#0, Tclass._module.StateC())
     ==> _module.__default.PostC#requires(cmd#0, deps#0, exts#0, stC#0)
       == (
        _module.Expression.exprLiteral_q(cmd#0)
         && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
         && _module.Expression.exprLiteral_q(deps#0)
         && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
         && _module.Expression.exprLiteral_q(exts#0)
         && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))
         && Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
          _module.__default.DomSt(_module.StateC.st(stC#0)))));

procedure {:verboseName "PostC (well-formedness)"} CheckWellformed$$_module.__default.PostC(cmd#0: DatatypeType where $Is(cmd#0, Tclass._module.Expression()), 
    deps#0: DatatypeType where $Is(deps#0, Tclass._module.Expression()), 
    exts#0: DatatypeType where $Is(exts#0, Tclass._module.Expression()), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "PostC (well-formedness)"} CheckWellformed$$_module.__default.PostC(cmd#0: DatatypeType, 
    deps#0: DatatypeType, 
    exts#0: DatatypeType, 
    stC#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##st#0: Box;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##exts#0: DatatypeType;
  var ##st#1: Box;
  var ##paths#0: Set;
  var ##st#2: Box;
  var e#2: Seq;
  var ##p#0: DatatypeType;
  var ##cmd#1: DatatypeType;
  var ##deps#1: DatatypeType;
  var ##ext#0: Seq;
  var ##c#0: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume {:id "id519"} _module.Expression.exprLiteral_q(cmd#0);
    assert {:id "id520"} _module.Expression.exprLiteral_q(cmd#0);
    assume {:id "id521"} _module.Literal.litString_q(_module.Expression.lit(cmd#0));
    assume {:id "id522"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id523"} _module.Expression.exprLiteral_q(deps#0);
    assume {:id "id524"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume {:id "id525"} _module.Expression.exprLiteral_q(exts#0);
    assert {:id "id526"} _module.Expression.exprLiteral_q(exts#0);
    assume {:id "id527"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
    assert {:id "id528"} _module.Expression.exprLiteral_q(deps#0);
    assert {:id "id529"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
    assume _module.StateC.S_q(stC#0);
    ##st#0 := _module.StateC.st(stC#0);
    // assume allocatedness for argument to function
    assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
    assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
    assume {:id "id530"} Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
      _module.__default.DomSt(_module.StateC.st(stC#0)));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##cmd#0 := cmd#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
        ##deps#0 := deps#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
        ##exts#0 := exts#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##exts#0, Tclass._module.Expression(), $Heap);
        assert {:id "id531"} _module.Expression.exprLiteral_q(deps#0);
        assert {:id "id532"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0));
        ##paths#0 := _module.Literal.paths(_module.Expression.lit(deps#0));
        // assume allocatedness for argument to function
        assume $IsAlloc(##paths#0, TSet(Tclass._module.Path()), $Heap);
        assume _module.StateC.S_q(stC#0);
        ##st#2 := _module.StateC.st(stC#0);
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#2, Tclass._module.State(), $Heap);
        assert {:id "id533"} {:subsumption 0} Set#Subset(##paths#0, _module.__default.DomSt(##st#2));
        assume Set#Subset(##paths#0, _module.__default.DomSt(##st#2));
        assume _module.__default.Restrict#canCall(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0));
        ##st#1 := _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0));
        // assume allocatedness for argument to function
        assume $IsAllocBox(##st#1, Tclass._module.State(), $Heap);
        assert {:id "id534"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#0);
        assert {:id "id535"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#0));
        assert {:id "id536"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#0);
        assert {:id "id537"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0));
        assert {:id "id538"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#0);
        assert {:id "id539"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
        assume _module.Expression.exprLiteral_q(##cmd#0)
           && _module.Literal.litString_q(_module.Expression.lit(##cmd#0))
           && _module.Expression.exprLiteral_q(##deps#0)
           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0))
           && _module.Expression.exprLiteral_q(##exts#0)
           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
        assume _module.__default.Post#canCall(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)));
        if (_module.__default.Post(cmd#0, 
          deps#0, 
          exts#0, 
          _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0))))
        {
            // Begin Comprehension WF check
            havoc e#2;
            if ($Is(e#2, TSeq(TChar)) && $IsAlloc(e#2, TSeq(TChar), $Heap))
            {
                assert {:id "id540"} _module.Expression.exprLiteral_q(exts#0);
                assert {:id "id541"} _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0));
                if (Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#2)))
                {
                    ##cmd#1 := cmd#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##cmd#1, Tclass._module.Expression(), $Heap);
                    ##deps#1 := deps#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##deps#1, Tclass._module.Expression(), $Heap);
                    ##ext#0 := e#2;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##ext#0, TSeq(TChar), $Heap);
                    assume _module.__default.Loc#canCall(cmd#0, deps#0, e#2);
                    ##p#0 := _module.__default.Loc(cmd#0, deps#0, e#2);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##p#0, Tclass._module.Path(), $Heap);
                    assume _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#2));
                    assume _module.StateC.S_q(stC#0);
                    ##c#0 := _module.StateC.c(stC#0);
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##c#0, Tclass._module.Cache(), $Heap);
                    assume _module.__default.DomC#canCall(_module.StateC.c(stC#0));
                }
            }

            // End Comprehension WF check
        }

        assume {:id "id542"} _module.__default.PostC(cmd#0, deps#0, exts#0, stC#0)
           == (_module.__default.Post(cmd#0, 
              deps#0, 
              exts#0, 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
             && (forall e#3: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#3) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
              $Is(e#3, TSeq(TChar))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
                 ==> Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
                  _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#3)))));
        assume _module.StateC.S_q(stC#0)
           && _module.__default.Restrict#canCall(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0))
           && _module.__default.Post#canCall(cmd#0, 
            deps#0, 
            exts#0, 
            _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
           && (_module.__default.Post(cmd#0, 
              deps#0, 
              exts#0, 
              _module.__default.Restrict(_module.Literal.paths(_module.Expression.lit(deps#0)), _module.StateC.st(stC#0)))
             ==> (forall e#3: Seq :: 
              { _module.__default.Loc(cmd#0, deps#0, e#3) } 
                { Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3)) } 
              $Is(e#3, TSeq(TChar))
                 ==> 
                Set#IsMember(_module.Literal.strs(_module.Expression.lit(exts#0)), $Box(e#3))
                 ==> _module.__default.Loc#canCall(cmd#0, deps#0, e#3)
                   && _module.__default.Hash#canCall(_module.__default.Loc(cmd#0, deps#0, e#3))
                   && 
                  _module.StateC.S_q(stC#0)
                   && _module.__default.DomC#canCall(_module.StateC.c(stC#0))));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.PostC(cmd#0, deps#0, exts#0, stC#0), TBool);
        return;

        assume false;
    }
}



// function declaration for _module._default.Hash
function _module.__default.Hash(p#0: DatatypeType) : Box
uses {
// consequence axiom for _module.__default.Hash
axiom 1 <= $FunctionContextHeight
   ==> (forall p#0: DatatypeType :: 
    { _module.__default.Hash(p#0) } 
    _module.__default.Hash#canCall(p#0)
         || (1 < $FunctionContextHeight && $Is(p#0, Tclass._module.Path()))
       ==> $IsBox(_module.__default.Hash(p#0), Tclass._module.HashValue()));
}

function _module.__default.Hash#canCall(p#0: DatatypeType) : bool;

function _module.__default.Hash#requires(DatatypeType) : bool;

// #requires axiom for _module.__default.Hash
axiom (forall p#0: DatatypeType :: 
  { _module.__default.Hash#requires(p#0) } 
  $Is(p#0, Tclass._module.Path()) ==> _module.__default.Hash#requires(p#0) == true);

procedure {:verboseName "Hash (well-formedness)"} CheckWellformed$$_module.__default.Hash(p#0: DatatypeType where $Is(p#0, Tclass._module.Path()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "HashProperty (well-formedness)"} CheckWellFormed$$_module.__default.HashProperty(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    ext#0: Seq where $Is(ext#0, TSeq(TChar)) && $IsAlloc(ext#0, TSeq(TChar), $Heap), 
    cmd'#0: DatatypeType
       where $Is(cmd'#0, Tclass._module.Expression())
         && $IsAlloc(cmd'#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd'#0), 
    deps'#0: DatatypeType
       where $Is(deps'#0, Tclass._module.Expression())
         && $IsAlloc(deps'#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps'#0), 
    ext'#0: Seq
       where $Is(ext'#0, TSeq(TChar)) && $IsAlloc(ext'#0, TSeq(TChar), $Heap));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "HashProperty (call)"} Call$$_module.__default.HashProperty(cmd#0: DatatypeType
       where $Is(cmd#0, Tclass._module.Expression())
         && $IsAlloc(cmd#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd#0), 
    deps#0: DatatypeType
       where $Is(deps#0, Tclass._module.Expression())
         && $IsAlloc(deps#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps#0), 
    ext#0: Seq where $Is(ext#0, TSeq(TChar)) && $IsAlloc(ext#0, TSeq(TChar), $Heap), 
    cmd'#0: DatatypeType
       where $Is(cmd'#0, Tclass._module.Expression())
         && $IsAlloc(cmd'#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(cmd'#0), 
    deps'#0: DatatypeType
       where $Is(deps'#0, Tclass._module.Expression())
         && $IsAlloc(deps'#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(deps'#0), 
    ext'#0: Seq
       where $Is(ext'#0, TSeq(TChar)) && $IsAlloc(ext'#0, TSeq(TChar), $Heap));
  // user-defined preconditions
  requires {:id "id547"} _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, ext#0))
     == _module.__default.Hash(_module.__default.Loc(cmd'#0, deps'#0, ext'#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures $IsA#_module.Expression(cmd#0)
     && $IsA#_module.Expression(cmd'#0)
     && (_module.Expression#Equal(cmd#0, cmd'#0)
       ==> $IsA#_module.Expression(deps#0) && $IsA#_module.Expression(deps'#0));
  ensures {:id "id548"} _module.Expression#Equal(cmd#0, cmd'#0);
  ensures {:id "id549"} _module.Expression#Equal(deps#0, deps'#0);
  ensures {:id "id550"} Seq#Equal(ext#0, ext'#0);
  // frame condition
  free ensures old($Heap) == $Heap;



// function declaration for _module._default.Value
function _module.__default.Value(expr#0: DatatypeType) : bool
uses {
// definition axiom for _module.__default.Value (revealed)
axiom {:id "id551"} 2 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType :: 
    { _module.__default.Value(expr#0) } 
    _module.__default.Value#canCall(expr#0)
         || (2 < $FunctionContextHeight && $Is(expr#0, Tclass._module.Expression()))
       ==> _module.__default.Value(expr#0) == _module.Expression.exprLiteral_q(expr#0));
// definition axiom for _module.__default.Value for all literals (revealed)
axiom {:id "id552"} 2 <= $FunctionContextHeight
   ==> (forall expr#0: DatatypeType :: 
    {:weight 3} { _module.__default.Value(Lit(expr#0)) } 
    _module.__default.Value#canCall(Lit(expr#0))
         || (2 < $FunctionContextHeight && $Is(expr#0, Tclass._module.Expression()))
       ==> _module.__default.Value(Lit(expr#0))
         == Lit(_module.Expression.exprLiteral_q(Lit(expr#0))));
}

function _module.__default.Value#canCall(expr#0: DatatypeType) : bool;

function _module.__default.Value#requires(DatatypeType) : bool;

// #requires axiom for _module.__default.Value
axiom (forall expr#0: DatatypeType :: 
  { _module.__default.Value#requires(expr#0) } 
  $Is(expr#0, Tclass._module.Expression())
     ==> _module.__default.Value#requires(expr#0) == true);

procedure {:verboseName "Value (well-formedness)"} CheckWellformed$$_module.__default.Value(expr#0: DatatypeType where $Is(expr#0, Tclass._module.Expression()));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.Legal
function _module.__default.Legal(stmts#0: Seq) : bool
uses {
// definition axiom for _module.__default.Legal (revealed)
axiom {:id "id554"} 3 <= $FunctionContextHeight
   ==> (forall stmts#0: Seq :: 
    { _module.__default.Legal(stmts#0) } 
    _module.__default.Legal#canCall(stmts#0)
         || (3 < $FunctionContextHeight && $Is(stmts#0, TSeq(Tclass._module.Statement())))
       ==> _module.__default.Legal(stmts#0) == (Seq#Length(stmts#0) != 0));
// definition axiom for _module.__default.Legal for all literals (revealed)
axiom {:id "id555"} 3 <= $FunctionContextHeight
   ==> (forall stmts#0: Seq :: 
    {:weight 3} { _module.__default.Legal(Lit(stmts#0)) } 
    _module.__default.Legal#canCall(Lit(stmts#0))
         || (3 < $FunctionContextHeight && $Is(stmts#0, TSeq(Tclass._module.Statement())))
       ==> _module.__default.Legal(Lit(stmts#0)) == (Seq#Length(Lit(stmts#0)) != 0));
}

function _module.__default.Legal#canCall(stmts#0: Seq) : bool;

function Tclass._module.Statement() : Ty
uses {
// Tclass._module.Statement Tag
axiom Tag(Tclass._module.Statement()) == Tagclass._module.Statement
   && TagFamily(Tclass._module.Statement()) == tytagFamily$Statement;
}

const unique Tagclass._module.Statement: TyTag;

// Box/unbox axiom for Tclass._module.Statement
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Statement()) } 
  $IsBox(bx, Tclass._module.Statement())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.Statement()));

function _module.__default.Legal#requires(Seq) : bool;

// #requires axiom for _module.__default.Legal
axiom (forall stmts#0: Seq :: 
  { _module.__default.Legal#requires(stmts#0) } 
  $Is(stmts#0, TSeq(Tclass._module.Statement()))
     ==> _module.__default.Legal#requires(stmts#0) == true);

procedure {:verboseName "Legal (well-formedness)"} CheckWellformed$$_module.__default.Legal(stmts#0: Seq where $Is(stmts#0, TSeq(Tclass._module.Statement())));
  free requires 3 == $FunctionContextHeight;
  modifies $Heap;



// function declaration for _module._default.Arity
function _module.__default.Arity(prim#0: DatatypeType) : int
uses {
// consequence axiom for _module.__default.Arity
axiom 1 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType :: 
    { _module.__default.Arity(prim#0) } 
    _module.__default.Arity#canCall(prim#0)
         || (1 < $FunctionContextHeight && $Is(prim#0, Tclass._module.Primitive()))
       ==> LitInt(0) <= _module.__default.Arity(prim#0));
// definition axiom for _module.__default.Arity (revealed)
axiom {:id "id557"} 1 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType :: 
    { _module.__default.Arity(prim#0) } 
    _module.__default.Arity#canCall(prim#0)
         || (1 < $FunctionContextHeight && $Is(prim#0, Tclass._module.Primitive()))
       ==> _module.__default.Arity(prim#0)
         == (if _module.Primitive.primCreatePath_q(prim#0) then 1 else 3));
// definition axiom for _module.__default.Arity for all literals (revealed)
axiom {:id "id558"} 1 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType :: 
    {:weight 3} { _module.__default.Arity(Lit(prim#0)) } 
    _module.__default.Arity#canCall(Lit(prim#0))
         || (1 < $FunctionContextHeight && $Is(prim#0, Tclass._module.Primitive()))
       ==> _module.__default.Arity(Lit(prim#0))
         == (if _module.Primitive.primCreatePath_q(Lit(prim#0)) then 1 else 3));
}

function _module.__default.Arity#canCall(prim#0: DatatypeType) : bool;

function Tclass._module.Primitive() : Ty
uses {
// Tclass._module.Primitive Tag
axiom Tag(Tclass._module.Primitive()) == Tagclass._module.Primitive
   && TagFamily(Tclass._module.Primitive()) == tytagFamily$Primitive;
}

const unique Tagclass._module.Primitive: TyTag;

// Box/unbox axiom for Tclass._module.Primitive
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Primitive()) } 
  $IsBox(bx, Tclass._module.Primitive())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.Primitive()));

function _module.__default.Arity#requires(DatatypeType) : bool;

// #requires axiom for _module.__default.Arity
axiom (forall prim#0: DatatypeType :: 
  { _module.__default.Arity#requires(prim#0) } 
  $Is(prim#0, Tclass._module.Primitive())
     ==> _module.__default.Arity#requires(prim#0) == true);

procedure {:verboseName "Arity (well-formedness)"} CheckWellformed$$_module.__default.Arity(prim#0: DatatypeType where $Is(prim#0, Tclass._module.Primitive()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Arity (well-formedness)"} CheckWellformed$$_module.__default.Arity(prim#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume LitInt(0) <= _module.__default.Arity(prim#0);
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (prim#0 == #_module.Primitive.primCreatePath())
        {
            assert {:id "id561"} $Is(LitInt(1), Tclass._System.nat());
            assume {:id "id562"} _module.__default.Arity(prim#0) == LitInt(1);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.Arity(prim#0), Tclass._System.nat());
            return;
        }
        else if (prim#0 == #_module.Primitive.primExec())
        {
            assert {:id "id559"} $Is(LitInt(3), Tclass._System.nat());
            assume {:id "id560"} _module.__default.Arity(prim#0) == LitInt(3);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.Arity(prim#0), Tclass._System.nat());
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



// function declaration for _module._default.buildC
function _module.__default.buildC(prog#0: DatatypeType, stC#0: DatatypeType) : DatatypeType
uses {
// consequence axiom for _module.__default.buildC
axiom 8 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, stC#0: DatatypeType :: 
    { _module.__default.buildC(prog#0, stC#0) } 
    _module.__default.buildC#canCall(prog#0, stC#0)
         || (8 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass._module.Program())
           && $Is(stC#0, Tclass._module.StateC())
           && _module.__default.Legal(_module.Program.stmts(prog#0)))
       ==> $Is(_module.__default.buildC(prog#0, stC#0), 
        Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC())));
// definition axiom for _module.__default.buildC (revealed)
axiom {:id "id563"} 8 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, stC#0: DatatypeType :: 
    { _module.__default.buildC(prog#0, stC#0) } 
    _module.__default.buildC#canCall(prog#0, stC#0)
         || (8 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass._module.Program())
           && $Is(stC#0, Tclass._module.StateC())
           && _module.__default.Legal(_module.Program.stmts(prog#0)))
       ==> _module.Program.Program_q(prog#0)
         && _module.__default.EmptyEnv#canCall()
         && _module.__default.doC#canCall(_module.Program.stmts(prog#0), stC#0, _module.__default.EmptyEnv())
         && _module.__default.buildC(prog#0, stC#0)
           == _module.__default.doC($LS($LZ), _module.Program.stmts(prog#0), stC#0, _module.__default.EmptyEnv()));
// definition axiom for _module.__default.buildC for all literals (revealed)
axiom {:id "id564"} 8 <= $FunctionContextHeight
   ==> (forall prog#0: DatatypeType, stC#0: DatatypeType :: 
    {:weight 3} { _module.__default.buildC(Lit(prog#0), Lit(stC#0)) } 
    _module.__default.buildC#canCall(Lit(prog#0), Lit(stC#0))
         || (8 < $FunctionContextHeight
           && 
          $Is(prog#0, Tclass._module.Program())
           && $Is(stC#0, Tclass._module.StateC())
           && Lit(_module.__default.Legal(Lit(_module.Program.stmts(Lit(prog#0))))))
       ==> _module.Program.Program_q(Lit(prog#0))
         && _module.__default.EmptyEnv#canCall()
         && _module.__default.doC#canCall(Lit(_module.Program.stmts(Lit(prog#0))), 
          Lit(stC#0), 
          _module.__default.EmptyEnv())
         && _module.__default.buildC(Lit(prog#0), Lit(stC#0))
           == _module.__default.doC($LS($LZ), 
            Lit(_module.Program.stmts(Lit(prog#0))), 
            Lit(stC#0), 
            _module.__default.EmptyEnv()));
}

function _module.__default.buildC#canCall(prog#0: DatatypeType, stC#0: DatatypeType) : bool;

function Tclass._module.Program() : Ty
uses {
// Tclass._module.Program Tag
axiom Tag(Tclass._module.Program()) == Tagclass._module.Program
   && TagFamily(Tclass._module.Program()) == tytagFamily$Program;
}

const unique Tagclass._module.Program: TyTag;

// Box/unbox axiom for Tclass._module.Program
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Program()) } 
  $IsBox(bx, Tclass._module.Program())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.Program()));

function _module.__default.buildC#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _module.__default.buildC
axiom (forall prog#0: DatatypeType, stC#0: DatatypeType :: 
  { _module.__default.buildC#requires(prog#0, stC#0) } 
  $Is(prog#0, Tclass._module.Program()) && $Is(stC#0, Tclass._module.StateC())
     ==> _module.__default.buildC#requires(prog#0, stC#0)
       == _module.__default.Legal(_module.Program.stmts(prog#0)));

procedure {:verboseName "buildC (well-formedness)"} CheckWellformed$$_module.__default.buildC(prog#0: DatatypeType where $Is(prog#0, Tclass._module.Program()), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "buildC (well-formedness)"} CheckWellformed$$_module.__default.buildC(prog#0: DatatypeType, stC#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##stmts#1: Seq;
  var ##stC#0: DatatypeType;
  var ##env#0: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    assume _module.Program.Program_q(prog#0);
    ##stmts#0 := _module.Program.stmts(prog#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass._module.Statement()), $Heap);
    assume _module.__default.Legal#canCall(_module.Program.stmts(prog#0));
    assume {:id "id565"} _module.__default.Legal(_module.Program.stmts(prog#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.buildC(prog#0, stC#0), 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        assume _module.Program.Program_q(prog#0);
        ##stmts#1 := _module.Program.stmts(prog#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##stmts#1, TSeq(Tclass._module.Statement()), $Heap);
        ##stC#0 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
        assume _module.__default.EmptyEnv#canCall();
        ##env#0 := _module.__default.EmptyEnv();
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
        assert {:id "id566"} {:subsumption 0} _module.__default.Legal#canCall(##stmts#1)
           ==> _module.__default.Legal(##stmts#1) || Seq#Length(##stmts#1) != 0;
        assume _module.__default.Legal(##stmts#1);
        assume _module.__default.doC#canCall(_module.Program.stmts(prog#0), stC#0, _module.__default.EmptyEnv());
        assume _module.Tuple.Pair_q(_module.__default.doC($LS($LZ), _module.Program.stmts(prog#0), stC#0, _module.__default.EmptyEnv()));
        assume {:id "id567"} _module.__default.buildC(prog#0, stC#0)
           == _module.__default.doC($LS($LZ), _module.Program.stmts(prog#0), stC#0, _module.__default.EmptyEnv());
        assume _module.Program.Program_q(prog#0)
           && _module.__default.EmptyEnv#canCall()
           && _module.__default.doC#canCall(_module.Program.stmts(prog#0), stC#0, _module.__default.EmptyEnv());
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.buildC(prog#0, stC#0), 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
        return;

        assume false;
    }
}



// function declaration for _module._default.doC
function _module.__default.doC($ly: LayerType, stmts#0: Seq, stC#0: DatatypeType, env#0: Box) : DatatypeType
uses {
// consequence axiom for _module.__default.doC
axiom 7 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, stC#0: DatatypeType, env#0: Box :: 
    { _module.__default.doC($ly, stmts#0, stC#0, env#0) } 
    _module.__default.doC#canCall(stmts#0, stC#0, env#0)
         || (7 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass._module.Statement()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && _module.__default.Legal(stmts#0))
       ==> $Is(_module.__default.doC($ly, stmts#0, stC#0, env#0), 
        Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC())));
// definition axiom for _module.__default.doC (revealed)
axiom {:id "id568"} 7 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, stC#0: DatatypeType, env#0: Box :: 
    { _module.__default.doC($LS($ly), stmts#0, stC#0, env#0) } 
    _module.__default.doC#canCall(stmts#0, stC#0, env#0)
         || (7 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass._module.Statement()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && _module.__default.Legal(stmts#0))
       ==> (var stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType; 
          (_module.Statement.stmtVariable_q(stmt#0)
               ==> _module.__default.evalC#canCall(_module.Statement.expr(stmt#0), stC#0, env#0)
                 && (var result#0 := _module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#0), stC#0, env#0); 
                  _module.Tuple.Pair_q(result#0)
                     && _module.Tuple.Pair_q(result#0)
                     && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
                        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
                      _module.__default.Value#canCall(expr'#0)
                         && (_module.__default.Value(expr'#0)
                           ==> _module.__default.SetEnv#canCall(_module.Statement.id(stmt#0), expr'#0, env#0)
                             && (var env'#0 := _module.__default.SetEnv(_module.Statement.id(stmt#0), expr'#0, env#0); 
                              _module.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)))
                                 && (_module.__default.Legal(Seq#Drop(stmts#0, LitInt(1)))
                                   ==> _module.__default.doC#canCall(Seq#Drop(stmts#0, LitInt(1)), stC'#0, env'#0)))))))
             && (!_module.Statement.stmtVariable_q(stmt#0)
               ==> _module.__default.evalC#canCall(_module.Statement.ret(stmt#0), stC#0, env#0)))
         && _module.__default.doC($LS($ly), stmts#0, stC#0, env#0)
           == (var stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType; 
            (if _module.Statement.stmtVariable_q(stmt#0)
               then (var result#0 := _module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#0), stC#0, env#0); 
                (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
                    $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
                  (if _module.__default.Value(expr'#0)
                     then (var env'#0 := _module.__default.SetEnv(_module.Statement.id(stmt#0), expr'#0, env#0); 
                      (if _module.__default.Legal(Seq#Drop(stmts#0, LitInt(1)))
                         then _module.__default.doC($ly, Seq#Drop(stmts#0, LitInt(1)), stC'#0, env'#0)
                         else #_module.Tuple.Pair($Box(expr'#0), $Box(stC'#0))))
                     else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                      $Box(stC#0)))))
               else _module.__default.evalC($LS($LZ), _module.Statement.ret(stmt#0), stC#0, env#0))));
// definition axiom for _module.__default.doC for decreasing-related literals (revealed)
axiom {:id "id569"} 7 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, stC#0: DatatypeType, env#0: Box :: 
    {:weight 3} { _module.__default.doC($LS($ly), Lit(stmts#0), Lit(stC#0), env#0) } 
    _module.__default.doC#canCall(Lit(stmts#0), Lit(stC#0), env#0)
         || (7 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass._module.Statement()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && Lit(_module.__default.Legal(Lit(stmts#0))))
       ==> (var stmt#1 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
          (_module.Statement.stmtVariable_q(stmt#1)
               ==> _module.__default.evalC#canCall(_module.Statement.expr(stmt#1), Lit(stC#0), env#0)
                 && (var result#1 := _module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#1), Lit(stC#0), env#0); 
                  _module.Tuple.Pair_q(result#1)
                     && _module.Tuple.Pair_q(result#1)
                     && (var expr'#1, stC'#1 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType, 
                        $Unbox(_module.Tuple.snd(result#1)): DatatypeType; 
                      _module.__default.Value#canCall(expr'#1)
                         && (_module.__default.Value(expr'#1)
                           ==> _module.__default.SetEnv#canCall(_module.Statement.id(stmt#1), expr'#1, env#0)
                             && (var env'#1 := _module.__default.SetEnv(_module.Statement.id(stmt#1), expr'#1, env#0); 
                              _module.__default.Legal#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                                 && (Lit(_module.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1)))))
                                   ==> _module.__default.doC#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), stC'#1, env'#1)))))))
             && (!_module.Statement.stmtVariable_q(stmt#1)
               ==> _module.__default.evalC#canCall(_module.Statement.ret(stmt#1), Lit(stC#0), env#0)))
         && _module.__default.doC($LS($ly), Lit(stmts#0), Lit(stC#0), env#0)
           == (var stmt#1 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
            (if _module.Statement.stmtVariable_q(stmt#1)
               then (var result#1 := _module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#1), Lit(stC#0), env#0); 
                (var expr'#1, stC'#1 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType, 
                    $Unbox(_module.Tuple.snd(result#1)): DatatypeType; 
                  (if _module.__default.Value(expr'#1)
                     then (var env'#1 := _module.__default.SetEnv(_module.Statement.id(stmt#1), expr'#1, env#0); 
                      (if _module.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                         then _module.__default.doC($LS($ly), Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), stC'#1, env'#1)
                         else #_module.Tuple.Pair($Box(expr'#1), $Box(stC'#1))))
                     else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                      $Box(Lit(stC#0))))))
               else _module.__default.evalC($LS($LZ), _module.Statement.ret(stmt#1), Lit(stC#0), env#0))));
// definition axiom for _module.__default.doC for all literals (revealed)
axiom {:id "id570"} 7 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, stmts#0: Seq, stC#0: DatatypeType, env#0: Box :: 
    {:weight 3} { _module.__default.doC($LS($ly), Lit(stmts#0), Lit(stC#0), Lit(env#0)) } 
    _module.__default.doC#canCall(Lit(stmts#0), Lit(stC#0), Lit(env#0))
         || (7 < $FunctionContextHeight
           && 
          $Is(stmts#0, TSeq(Tclass._module.Statement()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && Lit(_module.__default.Legal(Lit(stmts#0))))
       ==> (var stmt#2 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
          (_module.Statement.stmtVariable_q(stmt#2)
               ==> _module.__default.evalC#canCall(_module.Statement.expr(stmt#2), Lit(stC#0), Lit(env#0))
                 && (var result#2 := _module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#2), Lit(stC#0), Lit(env#0)); 
                  _module.Tuple.Pair_q(result#2)
                     && _module.Tuple.Pair_q(result#2)
                     && (var expr'#2, stC'#2 := $Unbox(_module.Tuple.fst(result#2)): DatatypeType, 
                        $Unbox(_module.Tuple.snd(result#2)): DatatypeType; 
                      _module.__default.Value#canCall(expr'#2)
                         && (_module.__default.Value(expr'#2)
                           ==> _module.__default.SetEnv#canCall(_module.Statement.id(stmt#2), expr'#2, Lit(env#0))
                             && (var env'#2 := _module.__default.SetEnv(_module.Statement.id(stmt#2), expr'#2, Lit(env#0)); 
                              _module.__default.Legal#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                                 && (Lit(_module.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1)))))
                                   ==> _module.__default.doC#canCall(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), stC'#2, env'#2)))))))
             && (!_module.Statement.stmtVariable_q(stmt#2)
               ==> _module.__default.evalC#canCall(_module.Statement.ret(stmt#2), Lit(stC#0), Lit(env#0))))
         && _module.__default.doC($LS($ly), Lit(stmts#0), Lit(stC#0), Lit(env#0))
           == (var stmt#2 := $Unbox(Seq#Index(Lit(stmts#0), LitInt(0))): DatatypeType; 
            (if _module.Statement.stmtVariable_q(stmt#2)
               then (var result#2 := _module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#2), Lit(stC#0), Lit(env#0)); 
                (var expr'#2, stC'#2 := $Unbox(_module.Tuple.fst(result#2)): DatatypeType, 
                    $Unbox(_module.Tuple.snd(result#2)): DatatypeType; 
                  (if _module.__default.Value(expr'#2)
                     then (var env'#2 := _module.__default.SetEnv(_module.Statement.id(stmt#2), expr'#2, Lit(env#0)); 
                      (if _module.__default.Legal(Lit(Seq#Drop(Lit(stmts#0), LitInt(1))))
                         then _module.__default.doC($LS($ly), Lit(Seq#Drop(Lit(stmts#0), LitInt(1))), stC'#2, env'#2)
                         else #_module.Tuple.Pair($Box(expr'#2), $Box(stC'#2))))
                     else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                      $Box(Lit(stC#0))))))
               else _module.__default.evalC($LS($LZ), _module.Statement.ret(stmt#2), Lit(stC#0), Lit(env#0)))));
}

function _module.__default.doC#canCall(stmts#0: Seq, stC#0: DatatypeType, env#0: Box) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, stmts#0: Seq, stC#0: DatatypeType, env#0: Box :: 
  { _module.__default.doC($LS($ly), stmts#0, stC#0, env#0) } 
  _module.__default.doC($LS($ly), stmts#0, stC#0, env#0)
     == _module.__default.doC($ly, stmts#0, stC#0, env#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, stmts#0: Seq, stC#0: DatatypeType, env#0: Box :: 
  { _module.__default.doC(AsFuelBottom($ly), stmts#0, stC#0, env#0) } 
  _module.__default.doC($ly, stmts#0, stC#0, env#0)
     == _module.__default.doC($LZ, stmts#0, stC#0, env#0));

function _module.__default.doC#requires(LayerType, Seq, DatatypeType, Box) : bool;

// #requires axiom for _module.__default.doC
axiom (forall $ly: LayerType, stmts#0: Seq, stC#0: DatatypeType, env#0: Box :: 
  { _module.__default.doC#requires($ly, stmts#0, stC#0, env#0) } 
  $Is(stmts#0, TSeq(Tclass._module.Statement()))
       && $Is(stC#0, Tclass._module.StateC())
       && $IsBox(env#0, Tclass._module.Env())
     ==> _module.__default.doC#requires($ly, stmts#0, stC#0, env#0)
       == _module.__default.Legal(stmts#0));

procedure {:verboseName "doC (well-formedness)"} CheckWellformed$$_module.__default.doC(stmts#0: Seq where $Is(stmts#0, TSeq(Tclass._module.Statement())), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()), 
    env#0: Box where $IsBox(env#0, Tclass._module.Env()));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "doC (well-formedness)"} CheckWellformed$$_module.__default.doC(stmts#0: Seq, stC#0: DatatypeType, env#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var stmt#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##stC#0: DatatypeType;
  var ##env#0: Box;
  var expr'#Z#0: DatatypeType;
  var stC'#Z#0: DatatypeType;
  var let#2#0#0: DatatypeType;
  var let#2#1#0: DatatypeType;
  var ##expr#1: DatatypeType;
  var env'#Z#0: Box;
  var let#3#0#0: Box;
  var ##id#0: Box;
  var ##expr#2: DatatypeType;
  var ##env#1: Box;
  var ##stmts#1: Seq;
  var ##stmts#2: Seq;
  var ##stC#1: DatatypeType;
  var ##env#2: Box;
  var ##expr#3: DatatypeType;
  var ##stC#2: DatatypeType;
  var ##env#3: Box;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    ##stmts#0 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass._module.Statement()), $Heap);
    assume _module.__default.Legal#canCall(stmts#0);
    assume {:id "id571"} _module.__default.Legal(stmts#0);
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.doC($LS($LZ), stmts#0, stC#0, env#0), 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        havoc stmt#Z#0;
        assert {:id "id572"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(stmts#0);
        assume {:id "id573"} let#0#0#0 == $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType;
        assume true;
        // CheckWellformedWithResult: any expression
        assume $Is(let#0#0#0, Tclass._module.Statement());
        assume {:id "id574"} stmt#Z#0 == let#0#0#0;
        if (_module.Statement.stmtVariable_q(stmt#Z#0))
        {
            havoc result#Z#0;
            assert {:id "id575"} _module.Statement.stmtVariable_q(stmt#Z#0);
            ##expr#0 := _module.Statement.expr(stmt#Z#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#0, Tclass._module.Expression(), $Heap);
            ##stC#0 := stC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
            ##env#0 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
            assume _module.__default.evalC#canCall(_module.Statement.expr(stmt#Z#0), stC#0, env#0);
            assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#Z#0), stC#0, env#0));
            assume {:id "id576"} let#1#0#0
               == _module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#Z#0), stC#0, env#0);
            assume _module.__default.evalC#canCall(_module.Statement.expr(stmt#Z#0), stC#0, env#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, 
              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
            assume {:id "id577"} result#Z#0 == let#1#0#0;
            havoc expr'#Z#0;
            havoc stC'#Z#0;
            assume _module.Tuple.Pair_q(result#Z#0);
            assume {:id "id578"} let#2#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
            assume _module.Tuple.Pair_q(result#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#0#0, Tclass._module.Expression());
            assume {:id "id579"} expr'#Z#0 == let#2#0#0;
            assume _module.Tuple.Pair_q(result#Z#0);
            assume {:id "id580"} let#2#1#0 == $Unbox(_module.Tuple.snd(result#Z#0)): DatatypeType;
            assume _module.Tuple.Pair_q(result#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#1#0, Tclass._module.StateC());
            assume {:id "id581"} stC'#Z#0 == let#2#1#0;
            ##expr#1 := expr'#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#1, Tclass._module.Expression(), $Heap);
            assume _module.__default.Value#canCall(expr'#Z#0);
            if (_module.__default.Value(expr'#Z#0))
            {
                havoc env'#Z#0;
                assert {:id "id582"} _module.Statement.stmtVariable_q(stmt#Z#0);
                ##id#0 := _module.Statement.id(stmt#Z#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##id#0, Tclass._module.Identifier(), $Heap);
                ##expr#2 := expr'#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##expr#2, Tclass._module.Expression(), $Heap);
                ##env#1 := env#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##env#1, Tclass._module.Env(), $Heap);
                assert {:id "id583"} {:subsumption 0} _module.__default.Value#canCall(##expr#2)
                   ==> _module.__default.Value(##expr#2) || _module.Expression.exprLiteral_q(##expr#2);
                assume _module.__default.Value(##expr#2);
                assume _module.__default.SetEnv#canCall(_module.Statement.id(stmt#Z#0), expr'#Z#0, env#0);
                assume {:id "id584"} let#3#0#0
                   == _module.__default.SetEnv(_module.Statement.id(stmt#Z#0), expr'#Z#0, env#0);
                assume _module.__default.SetEnv#canCall(_module.Statement.id(stmt#Z#0), expr'#Z#0, env#0);
                // CheckWellformedWithResult: any expression
                assume $IsBox(let#3#0#0, Tclass._module.Env());
                assume {:id "id585"} env'#Z#0 == let#3#0#0;
                assert {:id "id586"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
                ##stmts#1 := Seq#Drop(stmts#0, LitInt(1));
                // assume allocatedness for argument to function
                assume $IsAlloc(##stmts#1, TSeq(Tclass._module.Statement()), $Heap);
                assume _module.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
                if (_module.__default.Legal(Seq#Drop(stmts#0, LitInt(1))))
                {
                    assert {:id "id587"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
                    ##stmts#2 := Seq#Drop(stmts#0, LitInt(1));
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##stmts#2, TSeq(Tclass._module.Statement()), $Heap);
                    ##stC#1 := stC'#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
                    ##env#2 := env'#Z#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##env#2, Tclass._module.Env(), $Heap);
                    assert {:id "id588"} {:subsumption 0} _module.__default.Legal#canCall(##stmts#2)
                       ==> _module.__default.Legal(##stmts#2) || Seq#Length(##stmts#2) != 0;
                    assume _module.__default.Legal(##stmts#2);
                    assert {:id "id589"} Seq#Rank(##stmts#2) < Seq#Rank(stmts#0)
                       || (Seq#Rank(##stmts#2) == Seq#Rank(stmts#0) && DtRank(##stC#1) < DtRank(stC#0));
                    assume _module.__default.doC#canCall(Seq#Drop(stmts#0, LitInt(1)), stC'#Z#0, env'#Z#0);
                    assume _module.Tuple.Pair_q(_module.__default.doC($LS($LZ), Seq#Drop(stmts#0, LitInt(1)), stC'#Z#0, env'#Z#0));
                    assume {:id "id590"} _module.__default.doC($LS($LZ), stmts#0, stC#0, env#0)
                       == _module.__default.doC($LS($LZ), Seq#Drop(stmts#0, LitInt(1)), stC'#Z#0, env'#Z#0);
                    assume _module.__default.doC#canCall(Seq#Drop(stmts#0, LitInt(1)), stC'#Z#0, env'#Z#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(_module.__default.doC($LS($LZ), stmts#0, stC#0, env#0), 
                      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                    return;
                }
                else
                {
                    assume {:id "id591"} _module.__default.doC($LS($LZ), stmts#0, stC#0, env#0)
                       == #_module.Tuple.Pair($Box(expr'#Z#0), $Box(stC'#Z#0));
                    assume true;
                    // CheckWellformedWithResult: any expression
                    assume $Is(_module.__default.doC($LS($LZ), stmts#0, stC#0, env#0), 
                      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                    return;
                }
            }
            else
            {
                assume {:id "id592"} _module.__default.doC($LS($LZ), stmts#0, stC#0, env#0)
                   == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                    $Box(stC#0));
                assume true;
                // CheckWellformedWithResult: any expression
                assume $Is(_module.__default.doC($LS($LZ), stmts#0, stC#0, env#0), 
                  Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                return;
            }
        }
        else
        {
            // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(392,5)
            if (!_module.Statement.stmtVariable_q(stmt#Z#0))
            {
            }

            assume true;
            assert {:id "id593"} _module.Statement.stmtVariable_q(stmt#Z#0)
               || _module.Statement.stmtReturn_q(stmt#Z#0);
            assert {:id "id594"} _module.Statement.stmtReturn_q(stmt#Z#0);
            ##expr#3 := _module.Statement.ret(stmt#Z#0);
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#3, Tclass._module.Expression(), $Heap);
            ##stC#2 := stC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
            ##env#3 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#3, Tclass._module.Env(), $Heap);
            assume _module.__default.evalC#canCall(_module.Statement.ret(stmt#Z#0), stC#0, env#0);
            assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Statement.ret(stmt#Z#0), stC#0, env#0));
            assume {:id "id595"} _module.__default.doC($LS($LZ), stmts#0, stC#0, env#0)
               == _module.__default.evalC($LS($LZ), _module.Statement.ret(stmt#Z#0), stC#0, env#0);
            assume _module.__default.evalC#canCall(_module.Statement.ret(stmt#Z#0), stC#0, env#0);
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.doC($LS($LZ), stmts#0, stC#0, env#0), 
              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
            return;
        }

        assume false;
    }
}



// function declaration for _module._default.evalC
function _module.__default.evalC($ly: LayerType, expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box)
   : DatatypeType
uses {
// consequence axiom for _module.__default.evalC
axiom 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box :: 
    { _module.__default.evalC($ly, expr#0, stC#0, env#0) } 
    _module.__default.evalC#canCall(expr#0, stC#0, env#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env()))
       ==> $Is(_module.__default.evalC($ly, expr#0, stC#0, env#0), 
        Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC())));
// definition axiom for _module.__default.evalC (revealed)
axiom {:id "id596"} 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box :: 
    { _module.__default.evalC($LS($ly), expr#0, stC#0, env#0) } 
    _module.__default.evalC#canCall(expr#0, stC#0, env#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env()))
       ==> _module.__default.Value#canCall(expr#0)
         && (!_module.__default.Value(expr#0)
           ==> (_module.Expression.exprIdentifier_q(expr#0)
               ==> _module.__default.GetEnv#canCall(_module.Expression.id(expr#0), env#0))
             && (!_module.Expression.exprIdentifier_q(expr#0)
               ==> (_module.Expression.exprIf_q(expr#0)
                   ==> 
                  _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                   ==> $IsA#_module.Literal(_module.Expression.lit(_module.Expression.cond(expr#0))))
                 && (_module.Expression.exprIf_q(expr#0)
                     && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                     && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                      #_module.Literal.litTrue())
                   ==> _module.__default.evalC#canCall(_module.Expression.ifTrue(expr#0), stC#0, env#0))
                 && (!(
                    _module.Expression.exprIf_q(expr#0)
                     && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                     && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                      #_module.Literal.litTrue()))
                   ==> (_module.Expression.exprIf_q(expr#0)
                       ==> 
                      _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                       ==> $IsA#_module.Literal(_module.Expression.lit(_module.Expression.cond(expr#0))))
                     && (_module.Expression.exprIf_q(expr#0)
                         && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                         && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                          #_module.Literal.litFalse())
                       ==> _module.__default.evalC#canCall(_module.Expression.ifFalse(expr#0), stC#0, env#0))
                     && (!(
                        _module.Expression.exprIf_q(expr#0)
                         && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                         && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                          #_module.Literal.litFalse()))
                       ==> (_module.Expression.exprIf_q(expr#0)
                           ==> _module.__default.evalC#canCall(_module.Expression.cond(expr#0), stC#0, env#0)
                             && (var result#0 := _module.__default.evalC($ly, _module.Expression.cond(expr#0), stC#0, env#0); 
                              _module.Tuple.Pair_q(result#0)
                                 && _module.Tuple.Pair_q(result#0)
                                 && (var cond'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
                                    $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
                                  (_module.Expression.exprLiteral_q(cond'#0)
                                       ==> $IsA#_module.Literal(_module.Expression.lit(cond'#0)))
                                     && (_module.Expression.exprLiteral_q(cond'#0)
                                         && _module.Literal#Equal(_module.Expression.lit(cond'#0), #_module.Literal.litTrue())
                                       ==> _module.__default.evalC#canCall(_module.Expression.ifTrue(expr#0), stC'#0, env#0))
                                     && (!(_module.Expression.exprLiteral_q(cond'#0)
                                         && _module.Literal#Equal(_module.Expression.lit(cond'#0), #_module.Literal.litTrue()))
                                       ==> (_module.Expression.exprLiteral_q(cond'#0)
                                           ==> $IsA#_module.Literal(_module.Expression.lit(cond'#0)))
                                         && (_module.Expression.exprLiteral_q(cond'#0)
                                             && _module.Literal#Equal(_module.Expression.lit(cond'#0), #_module.Literal.litFalse())
                                           ==> _module.__default.evalC#canCall(_module.Expression.ifFalse(expr#0), stC'#0, env#0))))))
                         && (!_module.Expression.exprIf_q(expr#0)
                           ==> (_module.Expression.exprAnd_q(expr#0)
                               ==> _module.__default.evalC#canCall(_module.Expression.conj0(expr#0), stC#0, env#0)
                                 && (var result#1 := _module.__default.evalC($ly, _module.Expression.conj0(expr#0), stC#0, env#0); 
                                  _module.Tuple.Pair_q(result#1)
                                     && _module.Tuple.Pair_q(result#1)
                                     && (var conj0'#0, stC'#1 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType, 
                                        $Unbox(_module.Tuple.snd(result#1)): DatatypeType; 
                                      (_module.Expression.exprLiteral_q(conj0'#0)
                                           ==> $IsA#_module.Literal(_module.Expression.lit(conj0'#0)))
                                         && (_module.Expression.exprLiteral_q(conj0'#0)
                                             && _module.Literal#Equal(_module.Expression.lit(conj0'#0), #_module.Literal.litTrue())
                                           ==> _module.__default.evalC#canCall(_module.Expression.conj1(expr#0), stC'#1, env#0))
                                         && (!(_module.Expression.exprLiteral_q(conj0'#0)
                                             && _module.Literal#Equal(_module.Expression.lit(conj0'#0), #_module.Literal.litTrue()))
                                           ==> 
                                          _module.Expression.exprLiteral_q(conj0'#0)
                                           ==> $IsA#_module.Literal(_module.Expression.lit(conj0'#0))))))
                             && (!_module.Expression.exprAnd_q(expr#0)
                               ==> (_module.Expression.exprOr_q(expr#0)
                                   ==> _module.__default.evalC#canCall(_module.Expression.disj0(expr#0), stC#0, env#0)
                                     && (var result#2 := _module.__default.evalC($ly, _module.Expression.disj0(expr#0), stC#0, env#0); 
                                      _module.Tuple.Pair_q(result#2)
                                         && _module.Tuple.Pair_q(result#2)
                                         && (var disj0'#0, stC'#2 := $Unbox(_module.Tuple.fst(result#2)): DatatypeType, 
                                            $Unbox(_module.Tuple.snd(result#2)): DatatypeType; 
                                          (_module.Expression.exprLiteral_q(disj0'#0)
                                               ==> $IsA#_module.Literal(_module.Expression.lit(disj0'#0)))
                                             && (!(_module.Expression.exprLiteral_q(disj0'#0)
                                                 && _module.Literal#Equal(_module.Expression.lit(disj0'#0), #_module.Literal.litTrue()))
                                               ==> (_module.Expression.exprLiteral_q(disj0'#0)
                                                   ==> $IsA#_module.Literal(_module.Expression.lit(disj0'#0)))
                                                 && (_module.Expression.exprLiteral_q(disj0'#0)
                                                     && _module.Literal#Equal(_module.Expression.lit(disj0'#0), #_module.Literal.litFalse())
                                                   ==> _module.__default.evalC#canCall(_module.Expression.disj1(expr#0), stC'#2, env#0))))))
                                 && (!_module.Expression.exprOr_q(expr#0)
                                   ==> 
                                  _module.Expression.exprInvocation_q(expr#0)
                                   ==> _module.__default.evalC#canCall(_module.Expression.fun(expr#0), stC#0, env#0)
                                     && (var resultFun#0 := _module.__default.evalC($ly, _module.Expression.fun(expr#0), stC#0, env#0); 
                                      _module.Tuple.Pair_q(resultFun#0)
                                         && _module.Tuple.Pair_q(resultFun#0)
                                         && (var fun'#0, stC'#3 := $Unbox(_module.Tuple.fst(resultFun#0)): DatatypeType, 
                                            $Unbox(_module.Tuple.snd(resultFun#0)): DatatypeType; 
                                          _module.__default.evalArgsC#canCall(expr#0, _module.Expression.args(expr#0), stC#0, env#0)
                                             && (var resultArgs#0 := _module.__default.evalArgsC($ly, expr#0, _module.Expression.args(expr#0), stC#0, env#0); 
                                              _module.Tuple.Pair_q(resultArgs#0)
                                                 && _module.Tuple.Pair_q(resultArgs#0)
                                                 && (var args'#0, stsC'#0 := $Unbox(_module.Tuple.fst(resultArgs#0)): Seq, 
                                                    $Unbox(_module.Tuple.snd(resultArgs#0)): Set; 
                                                  (var stsC''#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(stC'#3)), stsC'#0); 
                                                    _module.__default.CompatibleC#canCall(stsC''#0)
                                                       && (_module.__default.CompatibleC(stsC''#0)
                                                         ==> _module.__default.CombineC#canCall(stsC''#0)
                                                           && (var stCombinedC#0 := _module.__default.CombineC($LS($LZ), stsC''#0); 
                                                            _module.Expression.exprLiteral_q(fun'#0)
                                                                 && _module.Literal.litPrimitive_q(_module.Expression.lit(fun'#0))
                                                               ==> 
                                                              _module.Primitive.primExec_q(_module.Literal.prim(_module.Expression.lit(fun'#0)))
                                                               ==> _module.__default.Arity#canCall(Lit(#_module.Primitive.primExec()))
                                                                 && (Seq#Length(args'#0)
                                                                     == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                                   ==> _module.__default.ValidArgsC#canCall(Lit(#_module.Primitive.primExec()), args'#0, stCombinedC#0))
                                                                 && (Seq#Length(args'#0)
                                                                       == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                                     && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#0, stCombinedC#0)
                                                                   ==> _module.__default.execC#canCall($Unbox(Seq#Index(args'#0, LitInt(0))): DatatypeType, 
                                                                    $Unbox(Seq#Index(args'#0, LitInt(1))): DatatypeType, 
                                                                    $Unbox(Seq#Index(args'#0, LitInt(2))): DatatypeType, 
                                                                    stCombinedC#0))
                                                                 && (!(Seq#Length(args'#0)
                                                                       == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                                     && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#0, stCombinedC#0))
                                                                   ==> _module.__default.ConsistentCache#canCall(stCombinedC#0))))))))))))))))
         && _module.__default.evalC($LS($ly), expr#0, stC#0, env#0)
           == (if _module.__default.Value(expr#0)
             then #_module.Tuple.Pair($Box(expr#0), $Box(stC#0))
             else (if _module.Expression.exprIdentifier_q(expr#0)
               then #_module.Tuple.Pair($Box(_module.__default.GetEnv(_module.Expression.id(expr#0), env#0)), 
                $Box(stC#0))
               else (if _module.Expression.exprIf_q(expr#0)
                   && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                   && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                    #_module.Literal.litTrue())
                 then _module.__default.evalC($ly, _module.Expression.ifTrue(expr#0), stC#0, env#0)
                 else (if _module.Expression.exprIf_q(expr#0)
                     && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                     && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                      #_module.Literal.litFalse())
                   then _module.__default.evalC($ly, _module.Expression.ifFalse(expr#0), stC#0, env#0)
                   else (if _module.Expression.exprIf_q(expr#0)
                     then (var result#0 := _module.__default.evalC($ly, _module.Expression.cond(expr#0), stC#0, env#0); 
                      (var cond'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
                          $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
                        (if _module.Expression.exprLiteral_q(cond'#0)
                             && _module.Literal#Equal(_module.Expression.lit(cond'#0), #_module.Literal.litTrue())
                           then _module.__default.evalC($ly, _module.Expression.ifTrue(expr#0), stC'#0, env#0)
                           else (if _module.Expression.exprLiteral_q(cond'#0)
                               && _module.Literal#Equal(_module.Expression.lit(cond'#0), #_module.Literal.litFalse())
                             then _module.__default.evalC($ly, _module.Expression.ifFalse(expr#0), stC'#0, env#0)
                             else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                              $Box(stC#0))))))
                     else (if _module.Expression.exprAnd_q(expr#0)
                       then (var result#1 := _module.__default.evalC($ly, _module.Expression.conj0(expr#0), stC#0, env#0); 
                        (var conj0'#0, stC'#1 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType, 
                            $Unbox(_module.Tuple.snd(result#1)): DatatypeType; 
                          (if _module.Expression.exprLiteral_q(conj0'#0)
                               && _module.Literal#Equal(_module.Expression.lit(conj0'#0), #_module.Literal.litTrue())
                             then _module.__default.evalC($ly, _module.Expression.conj1(expr#0), stC'#1, env#0)
                             else (if _module.Expression.exprLiteral_q(conj0'#0)
                                 && _module.Literal#Equal(_module.Expression.lit(conj0'#0), #_module.Literal.litFalse())
                               then #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprLiteral(Lit(#_module.Literal.litFalse())))), 
                                $Box(stC'#1))
                               else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                $Box(stC#0))))))
                       else (if _module.Expression.exprOr_q(expr#0)
                         then (var result#2 := _module.__default.evalC($ly, _module.Expression.disj0(expr#0), stC#0, env#0); 
                          (var disj0'#0, stC'#2 := $Unbox(_module.Tuple.fst(result#2)): DatatypeType, 
                              $Unbox(_module.Tuple.snd(result#2)): DatatypeType; 
                            (if _module.Expression.exprLiteral_q(disj0'#0)
                                 && _module.Literal#Equal(_module.Expression.lit(disj0'#0), #_module.Literal.litTrue())
                               then #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprLiteral(Lit(#_module.Literal.litTrue())))), 
                                $Box(stC'#2))
                               else (if _module.Expression.exprLiteral_q(disj0'#0)
                                   && _module.Literal#Equal(_module.Expression.lit(disj0'#0), #_module.Literal.litFalse())
                                 then _module.__default.evalC($ly, _module.Expression.disj1(expr#0), stC'#2, env#0)
                                 else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                  $Box(stC#0))))))
                         else (if _module.Expression.exprInvocation_q(expr#0)
                           then (var resultFun#0 := _module.__default.evalC($ly, _module.Expression.fun(expr#0), stC#0, env#0); 
                            (var fun'#0, stC'#3 := $Unbox(_module.Tuple.fst(resultFun#0)): DatatypeType, 
                                $Unbox(_module.Tuple.snd(resultFun#0)): DatatypeType; 
                              (var resultArgs#0 := _module.__default.evalArgsC($ly, expr#0, _module.Expression.args(expr#0), stC#0, env#0); 
                                (var args'#0, stsC'#0 := $Unbox(_module.Tuple.fst(resultArgs#0)): Seq, 
                                    $Unbox(_module.Tuple.snd(resultArgs#0)): Set; 
                                  (var stsC''#0 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(stC'#3)), stsC'#0); 
                                    (if _module.__default.CompatibleC(stsC''#0)
                                       then (var stCombinedC#0 := _module.__default.CombineC($LS($LZ), stsC''#0); 
                                        (if _module.Expression.exprLiteral_q(fun'#0)
                                             && _module.Literal.litPrimitive_q(_module.Expression.lit(fun'#0))
                                           then (if _module.Primitive.primExec_q(_module.Literal.prim(_module.Expression.lit(fun'#0)))
                                             then (if Seq#Length(args'#0)
                                                   == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                 && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#0, stCombinedC#0)
                                               then _module.__default.execC($Unbox(Seq#Index(args'#0, LitInt(0))): DatatypeType, 
                                                $Unbox(Seq#Index(args'#0, LitInt(1))): DatatypeType, 
                                                $Unbox(Seq#Index(args'#0, LitInt(2))): DatatypeType, 
                                                stCombinedC#0)
                                               else (if _module.__default.ConsistentCache(stCombinedC#0)
                                                 then #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                                  $Box(stC#0))
                                                 else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rInconsistentCache())))), 
                                                  $Box(stC#0))))
                                             else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                              $Box(stC#0)))
                                           else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                            $Box(stC#0))))
                                       else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rCompatibility())))), 
                                        $Box(stC#0))))))))
                           else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                            $Box(stC#0)))))))))));
// definition axiom for _module.__default.evalC for decreasing-related literals (revealed)
axiom {:id "id597"} 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box :: 
    {:weight 3} { _module.__default.evalC($LS($ly), Lit(expr#0), stC#0, env#0) } 
    _module.__default.evalC#canCall(Lit(expr#0), stC#0, env#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env()))
       ==> _module.__default.Value#canCall(Lit(expr#0))
         && (!Lit(_module.__default.Value(Lit(expr#0)))
           ==> (Lit(_module.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> _module.__default.GetEnv#canCall(Lit(_module.Expression.id(Lit(expr#0))), env#0))
             && (!Lit(_module.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> (Lit(_module.Expression.exprIf_q(Lit(expr#0)))
                   ==> 
                  Lit(_module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0)))))
                   ==> $IsA#_module.Literal(Lit(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))))))
                 && (_module.Expression.exprIf_q(Lit(expr#0))
                     && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                     && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                      #_module.Literal.litTrue())
                   ==> _module.__default.evalC#canCall(Lit(_module.Expression.ifTrue(Lit(expr#0))), stC#0, env#0))
                 && (!(
                    _module.Expression.exprIf_q(Lit(expr#0))
                     && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                     && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                      #_module.Literal.litTrue()))
                   ==> (Lit(_module.Expression.exprIf_q(Lit(expr#0)))
                       ==> 
                      Lit(_module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0)))))
                       ==> $IsA#_module.Literal(Lit(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))))))
                     && (_module.Expression.exprIf_q(Lit(expr#0))
                         && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                         && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                          #_module.Literal.litFalse())
                       ==> _module.__default.evalC#canCall(Lit(_module.Expression.ifFalse(Lit(expr#0))), stC#0, env#0))
                     && (!(
                        _module.Expression.exprIf_q(Lit(expr#0))
                         && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                         && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                          #_module.Literal.litFalse()))
                       ==> (Lit(_module.Expression.exprIf_q(Lit(expr#0)))
                           ==> _module.__default.evalC#canCall(Lit(_module.Expression.cond(Lit(expr#0))), stC#0, env#0)
                             && (var result#3 := _module.__default.evalC($LS($ly), Lit(_module.Expression.cond(Lit(expr#0))), stC#0, env#0); 
                              _module.Tuple.Pair_q(result#3)
                                 && _module.Tuple.Pair_q(result#3)
                                 && (var cond'#1, stC'#4 := $Unbox(_module.Tuple.fst(result#3)): DatatypeType, 
                                    $Unbox(_module.Tuple.snd(result#3)): DatatypeType; 
                                  (_module.Expression.exprLiteral_q(cond'#1)
                                       ==> $IsA#_module.Literal(_module.Expression.lit(cond'#1)))
                                     && (_module.Expression.exprLiteral_q(cond'#1)
                                         && _module.Literal#Equal(_module.Expression.lit(cond'#1), #_module.Literal.litTrue())
                                       ==> _module.__default.evalC#canCall(Lit(_module.Expression.ifTrue(Lit(expr#0))), stC'#4, env#0))
                                     && (!(_module.Expression.exprLiteral_q(cond'#1)
                                         && _module.Literal#Equal(_module.Expression.lit(cond'#1), #_module.Literal.litTrue()))
                                       ==> (_module.Expression.exprLiteral_q(cond'#1)
                                           ==> $IsA#_module.Literal(_module.Expression.lit(cond'#1)))
                                         && (_module.Expression.exprLiteral_q(cond'#1)
                                             && _module.Literal#Equal(_module.Expression.lit(cond'#1), #_module.Literal.litFalse())
                                           ==> _module.__default.evalC#canCall(Lit(_module.Expression.ifFalse(Lit(expr#0))), stC'#4, env#0))))))
                         && (!Lit(_module.Expression.exprIf_q(Lit(expr#0)))
                           ==> (Lit(_module.Expression.exprAnd_q(Lit(expr#0)))
                               ==> _module.__default.evalC#canCall(Lit(_module.Expression.conj0(Lit(expr#0))), stC#0, env#0)
                                 && (var result#4 := _module.__default.evalC($LS($ly), Lit(_module.Expression.conj0(Lit(expr#0))), stC#0, env#0); 
                                  _module.Tuple.Pair_q(result#4)
                                     && _module.Tuple.Pair_q(result#4)
                                     && (var conj0'#1, stC'#5 := $Unbox(_module.Tuple.fst(result#4)): DatatypeType, 
                                        $Unbox(_module.Tuple.snd(result#4)): DatatypeType; 
                                      (_module.Expression.exprLiteral_q(conj0'#1)
                                           ==> $IsA#_module.Literal(_module.Expression.lit(conj0'#1)))
                                         && (_module.Expression.exprLiteral_q(conj0'#1)
                                             && _module.Literal#Equal(_module.Expression.lit(conj0'#1), #_module.Literal.litTrue())
                                           ==> _module.__default.evalC#canCall(Lit(_module.Expression.conj1(Lit(expr#0))), stC'#5, env#0))
                                         && (!(_module.Expression.exprLiteral_q(conj0'#1)
                                             && _module.Literal#Equal(_module.Expression.lit(conj0'#1), #_module.Literal.litTrue()))
                                           ==> 
                                          _module.Expression.exprLiteral_q(conj0'#1)
                                           ==> $IsA#_module.Literal(_module.Expression.lit(conj0'#1))))))
                             && (!Lit(_module.Expression.exprAnd_q(Lit(expr#0)))
                               ==> (Lit(_module.Expression.exprOr_q(Lit(expr#0)))
                                   ==> _module.__default.evalC#canCall(Lit(_module.Expression.disj0(Lit(expr#0))), stC#0, env#0)
                                     && (var result#5 := _module.__default.evalC($LS($ly), Lit(_module.Expression.disj0(Lit(expr#0))), stC#0, env#0); 
                                      _module.Tuple.Pair_q(result#5)
                                         && _module.Tuple.Pair_q(result#5)
                                         && (var disj0'#1, stC'#6 := $Unbox(_module.Tuple.fst(result#5)): DatatypeType, 
                                            $Unbox(_module.Tuple.snd(result#5)): DatatypeType; 
                                          (_module.Expression.exprLiteral_q(disj0'#1)
                                               ==> $IsA#_module.Literal(_module.Expression.lit(disj0'#1)))
                                             && (!(_module.Expression.exprLiteral_q(disj0'#1)
                                                 && _module.Literal#Equal(_module.Expression.lit(disj0'#1), #_module.Literal.litTrue()))
                                               ==> (_module.Expression.exprLiteral_q(disj0'#1)
                                                   ==> $IsA#_module.Literal(_module.Expression.lit(disj0'#1)))
                                                 && (_module.Expression.exprLiteral_q(disj0'#1)
                                                     && _module.Literal#Equal(_module.Expression.lit(disj0'#1), #_module.Literal.litFalse())
                                                   ==> _module.__default.evalC#canCall(Lit(_module.Expression.disj1(Lit(expr#0))), stC'#6, env#0))))))
                                 && (!Lit(_module.Expression.exprOr_q(Lit(expr#0)))
                                   ==> 
                                  Lit(_module.Expression.exprInvocation_q(Lit(expr#0)))
                                   ==> _module.__default.evalC#canCall(Lit(_module.Expression.fun(Lit(expr#0))), stC#0, env#0)
                                     && (var resultFun#1 := _module.__default.evalC($LS($ly), Lit(_module.Expression.fun(Lit(expr#0))), stC#0, env#0); 
                                      _module.Tuple.Pair_q(resultFun#1)
                                         && _module.Tuple.Pair_q(resultFun#1)
                                         && (var fun'#1, stC'#7 := $Unbox(_module.Tuple.fst(resultFun#1)): DatatypeType, 
                                            $Unbox(_module.Tuple.snd(resultFun#1)): DatatypeType; 
                                          _module.__default.evalArgsC#canCall(Lit(expr#0), Lit(_module.Expression.args(Lit(expr#0))), stC#0, env#0)
                                             && (var resultArgs#1 := _module.__default.evalArgsC($LS($ly), Lit(expr#0), Lit(_module.Expression.args(Lit(expr#0))), stC#0, env#0); 
                                              _module.Tuple.Pair_q(resultArgs#1)
                                                 && _module.Tuple.Pair_q(resultArgs#1)
                                                 && (var args'#1, stsC'#1 := $Unbox(_module.Tuple.fst(resultArgs#1)): Seq, 
                                                    $Unbox(_module.Tuple.snd(resultArgs#1)): Set; 
                                                  (var stsC''#1 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(stC'#7)), stsC'#1); 
                                                    _module.__default.CompatibleC#canCall(stsC''#1)
                                                       && (_module.__default.CompatibleC(stsC''#1)
                                                         ==> _module.__default.CombineC#canCall(stsC''#1)
                                                           && (var stCombinedC#1 := _module.__default.CombineC($LS($LZ), stsC''#1); 
                                                            _module.Expression.exprLiteral_q(fun'#1)
                                                                 && _module.Literal.litPrimitive_q(_module.Expression.lit(fun'#1))
                                                               ==> 
                                                              _module.Primitive.primExec_q(_module.Literal.prim(_module.Expression.lit(fun'#1)))
                                                               ==> _module.__default.Arity#canCall(Lit(#_module.Primitive.primExec()))
                                                                 && (Seq#Length(args'#1)
                                                                     == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                                   ==> _module.__default.ValidArgsC#canCall(Lit(#_module.Primitive.primExec()), args'#1, stCombinedC#1))
                                                                 && (Seq#Length(args'#1)
                                                                       == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                                     && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#1, stCombinedC#1)
                                                                   ==> _module.__default.execC#canCall($Unbox(Seq#Index(args'#1, LitInt(0))): DatatypeType, 
                                                                    $Unbox(Seq#Index(args'#1, LitInt(1))): DatatypeType, 
                                                                    $Unbox(Seq#Index(args'#1, LitInt(2))): DatatypeType, 
                                                                    stCombinedC#1))
                                                                 && (!(Seq#Length(args'#1)
                                                                       == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                                     && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#1, stCombinedC#1))
                                                                   ==> _module.__default.ConsistentCache#canCall(stCombinedC#1))))))))))))))))
         && _module.__default.evalC($LS($ly), Lit(expr#0), stC#0, env#0)
           == (if _module.__default.Value(Lit(expr#0))
             then #_module.Tuple.Pair($Box(Lit(expr#0)), $Box(stC#0))
             else (if _module.Expression.exprIdentifier_q(Lit(expr#0))
               then #_module.Tuple.Pair($Box(_module.__default.GetEnv(Lit(_module.Expression.id(Lit(expr#0))), env#0)), 
                $Box(stC#0))
               else (if _module.Expression.exprIf_q(Lit(expr#0))
                   && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                   && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                    #_module.Literal.litTrue())
                 then _module.__default.evalC($LS($ly), Lit(_module.Expression.ifTrue(Lit(expr#0))), stC#0, env#0)
                 else (if _module.Expression.exprIf_q(Lit(expr#0))
                     && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                     && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                      #_module.Literal.litFalse())
                   then _module.__default.evalC($LS($ly), Lit(_module.Expression.ifFalse(Lit(expr#0))), stC#0, env#0)
                   else (if _module.Expression.exprIf_q(Lit(expr#0))
                     then (var result#3 := _module.__default.evalC($LS($ly), Lit(_module.Expression.cond(Lit(expr#0))), stC#0, env#0); 
                      (var cond'#1, stC'#4 := $Unbox(_module.Tuple.fst(result#3)): DatatypeType, 
                          $Unbox(_module.Tuple.snd(result#3)): DatatypeType; 
                        (if _module.Expression.exprLiteral_q(cond'#1)
                             && _module.Literal#Equal(_module.Expression.lit(cond'#1), #_module.Literal.litTrue())
                           then _module.__default.evalC($LS($ly), Lit(_module.Expression.ifTrue(Lit(expr#0))), stC'#4, env#0)
                           else (if _module.Expression.exprLiteral_q(cond'#1)
                               && _module.Literal#Equal(_module.Expression.lit(cond'#1), #_module.Literal.litFalse())
                             then _module.__default.evalC($LS($ly), Lit(_module.Expression.ifFalse(Lit(expr#0))), stC'#4, env#0)
                             else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                              $Box(stC#0))))))
                     else (if _module.Expression.exprAnd_q(Lit(expr#0))
                       then (var result#4 := _module.__default.evalC($LS($ly), Lit(_module.Expression.conj0(Lit(expr#0))), stC#0, env#0); 
                        (var conj0'#1, stC'#5 := $Unbox(_module.Tuple.fst(result#4)): DatatypeType, 
                            $Unbox(_module.Tuple.snd(result#4)): DatatypeType; 
                          (if _module.Expression.exprLiteral_q(conj0'#1)
                               && _module.Literal#Equal(_module.Expression.lit(conj0'#1), #_module.Literal.litTrue())
                             then _module.__default.evalC($LS($ly), Lit(_module.Expression.conj1(Lit(expr#0))), stC'#5, env#0)
                             else (if _module.Expression.exprLiteral_q(conj0'#1)
                                 && _module.Literal#Equal(_module.Expression.lit(conj0'#1), #_module.Literal.litFalse())
                               then #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprLiteral(Lit(#_module.Literal.litFalse())))), 
                                $Box(stC'#5))
                               else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                $Box(stC#0))))))
                       else (if _module.Expression.exprOr_q(Lit(expr#0))
                         then (var result#5 := _module.__default.evalC($LS($ly), Lit(_module.Expression.disj0(Lit(expr#0))), stC#0, env#0); 
                          (var disj0'#1, stC'#6 := $Unbox(_module.Tuple.fst(result#5)): DatatypeType, 
                              $Unbox(_module.Tuple.snd(result#5)): DatatypeType; 
                            (if _module.Expression.exprLiteral_q(disj0'#1)
                                 && _module.Literal#Equal(_module.Expression.lit(disj0'#1), #_module.Literal.litTrue())
                               then #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprLiteral(Lit(#_module.Literal.litTrue())))), 
                                $Box(stC'#6))
                               else (if _module.Expression.exprLiteral_q(disj0'#1)
                                   && _module.Literal#Equal(_module.Expression.lit(disj0'#1), #_module.Literal.litFalse())
                                 then _module.__default.evalC($LS($ly), Lit(_module.Expression.disj1(Lit(expr#0))), stC'#6, env#0)
                                 else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                  $Box(stC#0))))))
                         else (if _module.Expression.exprInvocation_q(Lit(expr#0))
                           then (var resultFun#1 := _module.__default.evalC($LS($ly), Lit(_module.Expression.fun(Lit(expr#0))), stC#0, env#0); 
                            (var fun'#1, stC'#7 := $Unbox(_module.Tuple.fst(resultFun#1)): DatatypeType, 
                                $Unbox(_module.Tuple.snd(resultFun#1)): DatatypeType; 
                              (var resultArgs#1 := _module.__default.evalArgsC($LS($ly), Lit(expr#0), Lit(_module.Expression.args(Lit(expr#0))), stC#0, env#0); 
                                (var args'#1, stsC'#1 := $Unbox(_module.Tuple.fst(resultArgs#1)): Seq, 
                                    $Unbox(_module.Tuple.snd(resultArgs#1)): Set; 
                                  (var stsC''#1 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(stC'#7)), stsC'#1); 
                                    (if _module.__default.CompatibleC(stsC''#1)
                                       then (var stCombinedC#1 := _module.__default.CombineC($LS($LZ), stsC''#1); 
                                        (if _module.Expression.exprLiteral_q(fun'#1)
                                             && _module.Literal.litPrimitive_q(_module.Expression.lit(fun'#1))
                                           then (if _module.Primitive.primExec_q(_module.Literal.prim(_module.Expression.lit(fun'#1)))
                                             then (if Seq#Length(args'#1)
                                                   == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                 && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#1, stCombinedC#1)
                                               then _module.__default.execC($Unbox(Seq#Index(args'#1, LitInt(0))): DatatypeType, 
                                                $Unbox(Seq#Index(args'#1, LitInt(1))): DatatypeType, 
                                                $Unbox(Seq#Index(args'#1, LitInt(2))): DatatypeType, 
                                                stCombinedC#1)
                                               else (if _module.__default.ConsistentCache(stCombinedC#1)
                                                 then #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                                  $Box(stC#0))
                                                 else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rInconsistentCache())))), 
                                                  $Box(stC#0))))
                                             else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                              $Box(stC#0)))
                                           else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                            $Box(stC#0))))
                                       else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rCompatibility())))), 
                                        $Box(stC#0))))))))
                           else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                            $Box(stC#0)))))))))));
// definition axiom for _module.__default.evalC for all literals (revealed)
axiom {:id "id598"} 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box :: 
    {:weight 3} { _module.__default.evalC($LS($ly), Lit(expr#0), Lit(stC#0), Lit(env#0)) } 
    _module.__default.evalC#canCall(Lit(expr#0), Lit(stC#0), Lit(env#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env()))
       ==> _module.__default.Value#canCall(Lit(expr#0))
         && (!Lit(_module.__default.Value(Lit(expr#0)))
           ==> (Lit(_module.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> _module.__default.GetEnv#canCall(Lit(_module.Expression.id(Lit(expr#0))), Lit(env#0)))
             && (!Lit(_module.Expression.exprIdentifier_q(Lit(expr#0)))
               ==> (Lit(_module.Expression.exprIf_q(Lit(expr#0)))
                   ==> 
                  Lit(_module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0)))))
                   ==> $IsA#_module.Literal(Lit(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))))))
                 && (_module.Expression.exprIf_q(Lit(expr#0))
                     && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                     && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                      #_module.Literal.litTrue())
                   ==> _module.__default.evalC#canCall(Lit(_module.Expression.ifTrue(Lit(expr#0))), Lit(stC#0), Lit(env#0)))
                 && (!(
                    _module.Expression.exprIf_q(Lit(expr#0))
                     && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                     && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                      #_module.Literal.litTrue()))
                   ==> (Lit(_module.Expression.exprIf_q(Lit(expr#0)))
                       ==> 
                      Lit(_module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0)))))
                       ==> $IsA#_module.Literal(Lit(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))))))
                     && (_module.Expression.exprIf_q(Lit(expr#0))
                         && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                         && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                          #_module.Literal.litFalse())
                       ==> _module.__default.evalC#canCall(Lit(_module.Expression.ifFalse(Lit(expr#0))), Lit(stC#0), Lit(env#0)))
                     && (!(
                        _module.Expression.exprIf_q(Lit(expr#0))
                         && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                         && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                          #_module.Literal.litFalse()))
                       ==> (Lit(_module.Expression.exprIf_q(Lit(expr#0)))
                           ==> _module.__default.evalC#canCall(Lit(_module.Expression.cond(Lit(expr#0))), Lit(stC#0), Lit(env#0))
                             && (var result#6 := Lit(_module.__default.evalC($LS($ly), Lit(_module.Expression.cond(Lit(expr#0))), Lit(stC#0), Lit(env#0))); 
                              _module.Tuple.Pair_q(result#6)
                                 && _module.Tuple.Pair_q(result#6)
                                 && (var cond'#2, stC'#8 := $Unbox(_module.Tuple.fst(result#6)): DatatypeType, 
                                    $Unbox(_module.Tuple.snd(result#6)): DatatypeType; 
                                  (_module.Expression.exprLiteral_q(cond'#2)
                                       ==> $IsA#_module.Literal(_module.Expression.lit(cond'#2)))
                                     && (_module.Expression.exprLiteral_q(cond'#2)
                                         && _module.Literal#Equal(_module.Expression.lit(cond'#2), #_module.Literal.litTrue())
                                       ==> _module.__default.evalC#canCall(Lit(_module.Expression.ifTrue(Lit(expr#0))), stC'#8, Lit(env#0)))
                                     && (!(_module.Expression.exprLiteral_q(cond'#2)
                                         && _module.Literal#Equal(_module.Expression.lit(cond'#2), #_module.Literal.litTrue()))
                                       ==> (_module.Expression.exprLiteral_q(cond'#2)
                                           ==> $IsA#_module.Literal(_module.Expression.lit(cond'#2)))
                                         && (_module.Expression.exprLiteral_q(cond'#2)
                                             && _module.Literal#Equal(_module.Expression.lit(cond'#2), #_module.Literal.litFalse())
                                           ==> _module.__default.evalC#canCall(Lit(_module.Expression.ifFalse(Lit(expr#0))), stC'#8, Lit(env#0)))))))
                         && (!Lit(_module.Expression.exprIf_q(Lit(expr#0)))
                           ==> (Lit(_module.Expression.exprAnd_q(Lit(expr#0)))
                               ==> _module.__default.evalC#canCall(Lit(_module.Expression.conj0(Lit(expr#0))), Lit(stC#0), Lit(env#0))
                                 && (var result#7 := Lit(_module.__default.evalC($LS($ly), Lit(_module.Expression.conj0(Lit(expr#0))), Lit(stC#0), Lit(env#0))); 
                                  _module.Tuple.Pair_q(result#7)
                                     && _module.Tuple.Pair_q(result#7)
                                     && (var conj0'#2, stC'#9 := $Unbox(_module.Tuple.fst(result#7)): DatatypeType, 
                                        $Unbox(_module.Tuple.snd(result#7)): DatatypeType; 
                                      (_module.Expression.exprLiteral_q(conj0'#2)
                                           ==> $IsA#_module.Literal(_module.Expression.lit(conj0'#2)))
                                         && (_module.Expression.exprLiteral_q(conj0'#2)
                                             && _module.Literal#Equal(_module.Expression.lit(conj0'#2), #_module.Literal.litTrue())
                                           ==> _module.__default.evalC#canCall(Lit(_module.Expression.conj1(Lit(expr#0))), stC'#9, Lit(env#0)))
                                         && (!(_module.Expression.exprLiteral_q(conj0'#2)
                                             && _module.Literal#Equal(_module.Expression.lit(conj0'#2), #_module.Literal.litTrue()))
                                           ==> 
                                          _module.Expression.exprLiteral_q(conj0'#2)
                                           ==> $IsA#_module.Literal(_module.Expression.lit(conj0'#2))))))
                             && (!Lit(_module.Expression.exprAnd_q(Lit(expr#0)))
                               ==> (Lit(_module.Expression.exprOr_q(Lit(expr#0)))
                                   ==> _module.__default.evalC#canCall(Lit(_module.Expression.disj0(Lit(expr#0))), Lit(stC#0), Lit(env#0))
                                     && (var result#8 := Lit(_module.__default.evalC($LS($ly), Lit(_module.Expression.disj0(Lit(expr#0))), Lit(stC#0), Lit(env#0))); 
                                      _module.Tuple.Pair_q(result#8)
                                         && _module.Tuple.Pair_q(result#8)
                                         && (var disj0'#2, stC'#10 := $Unbox(_module.Tuple.fst(result#8)): DatatypeType, 
                                            $Unbox(_module.Tuple.snd(result#8)): DatatypeType; 
                                          (_module.Expression.exprLiteral_q(disj0'#2)
                                               ==> $IsA#_module.Literal(_module.Expression.lit(disj0'#2)))
                                             && (!(_module.Expression.exprLiteral_q(disj0'#2)
                                                 && _module.Literal#Equal(_module.Expression.lit(disj0'#2), #_module.Literal.litTrue()))
                                               ==> (_module.Expression.exprLiteral_q(disj0'#2)
                                                   ==> $IsA#_module.Literal(_module.Expression.lit(disj0'#2)))
                                                 && (_module.Expression.exprLiteral_q(disj0'#2)
                                                     && _module.Literal#Equal(_module.Expression.lit(disj0'#2), #_module.Literal.litFalse())
                                                   ==> _module.__default.evalC#canCall(Lit(_module.Expression.disj1(Lit(expr#0))), stC'#10, Lit(env#0)))))))
                                 && (!Lit(_module.Expression.exprOr_q(Lit(expr#0)))
                                   ==> 
                                  Lit(_module.Expression.exprInvocation_q(Lit(expr#0)))
                                   ==> _module.__default.evalC#canCall(Lit(_module.Expression.fun(Lit(expr#0))), Lit(stC#0), Lit(env#0))
                                     && (var resultFun#2 := Lit(_module.__default.evalC($LS($ly), Lit(_module.Expression.fun(Lit(expr#0))), Lit(stC#0), Lit(env#0))); 
                                      _module.Tuple.Pair_q(resultFun#2)
                                         && _module.Tuple.Pair_q(resultFun#2)
                                         && (var fun'#2, stC'#11 := $Unbox(_module.Tuple.fst(resultFun#2)): DatatypeType, 
                                            $Unbox(_module.Tuple.snd(resultFun#2)): DatatypeType; 
                                          _module.__default.evalArgsC#canCall(Lit(expr#0), Lit(_module.Expression.args(Lit(expr#0))), Lit(stC#0), Lit(env#0))
                                             && (var resultArgs#2 := Lit(_module.__default.evalArgsC($LS($ly), 
                                                    Lit(expr#0), 
                                                    Lit(_module.Expression.args(Lit(expr#0))), 
                                                    Lit(stC#0), 
                                                    Lit(env#0))); 
                                              _module.Tuple.Pair_q(resultArgs#2)
                                                 && _module.Tuple.Pair_q(resultArgs#2)
                                                 && (var args'#2, stsC'#2 := $Unbox(_module.Tuple.fst(resultArgs#2)): Seq, 
                                                    $Unbox(_module.Tuple.snd(resultArgs#2)): Set; 
                                                  (var stsC''#2 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(stC'#11)), stsC'#2); 
                                                    _module.__default.CompatibleC#canCall(stsC''#2)
                                                       && (_module.__default.CompatibleC(stsC''#2)
                                                         ==> _module.__default.CombineC#canCall(stsC''#2)
                                                           && (var stCombinedC#2 := _module.__default.CombineC($LS($LZ), stsC''#2); 
                                                            _module.Expression.exprLiteral_q(fun'#2)
                                                                 && _module.Literal.litPrimitive_q(_module.Expression.lit(fun'#2))
                                                               ==> 
                                                              _module.Primitive.primExec_q(_module.Literal.prim(_module.Expression.lit(fun'#2)))
                                                               ==> _module.__default.Arity#canCall(Lit(#_module.Primitive.primExec()))
                                                                 && (Seq#Length(args'#2)
                                                                     == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                                   ==> _module.__default.ValidArgsC#canCall(Lit(#_module.Primitive.primExec()), args'#2, stCombinedC#2))
                                                                 && (Seq#Length(args'#2)
                                                                       == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                                     && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#2, stCombinedC#2)
                                                                   ==> _module.__default.execC#canCall($Unbox(Seq#Index(args'#2, LitInt(0))): DatatypeType, 
                                                                    $Unbox(Seq#Index(args'#2, LitInt(1))): DatatypeType, 
                                                                    $Unbox(Seq#Index(args'#2, LitInt(2))): DatatypeType, 
                                                                    stCombinedC#2))
                                                                 && (!(Seq#Length(args'#2)
                                                                       == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                                     && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#2, stCombinedC#2))
                                                                   ==> _module.__default.ConsistentCache#canCall(stCombinedC#2))))))))))))))))
         && _module.__default.evalC($LS($ly), Lit(expr#0), Lit(stC#0), Lit(env#0))
           == (if _module.__default.Value(Lit(expr#0))
             then #_module.Tuple.Pair($Box(Lit(expr#0)), $Box(Lit(stC#0)))
             else (if _module.Expression.exprIdentifier_q(Lit(expr#0))
               then #_module.Tuple.Pair($Box(_module.__default.GetEnv(Lit(_module.Expression.id(Lit(expr#0))), Lit(env#0))), 
                $Box(Lit(stC#0)))
               else (if _module.Expression.exprIf_q(Lit(expr#0))
                   && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                   && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                    #_module.Literal.litTrue())
                 then _module.__default.evalC($LS($ly), Lit(_module.Expression.ifTrue(Lit(expr#0))), Lit(stC#0), Lit(env#0))
                 else (if _module.Expression.exprIf_q(Lit(expr#0))
                     && _module.Expression.exprLiteral_q(Lit(_module.Expression.cond(Lit(expr#0))))
                     && _module.Literal#Equal(_module.Expression.lit(Lit(_module.Expression.cond(Lit(expr#0)))), 
                      #_module.Literal.litFalse())
                   then _module.__default.evalC($LS($ly), Lit(_module.Expression.ifFalse(Lit(expr#0))), Lit(stC#0), Lit(env#0))
                   else (if _module.Expression.exprIf_q(Lit(expr#0))
                     then (var result#6 := Lit(_module.__default.evalC($LS($ly), Lit(_module.Expression.cond(Lit(expr#0))), Lit(stC#0), Lit(env#0))); 
                      (var cond'#2, stC'#8 := Lit($Unbox(_module.Tuple.fst(result#6)): DatatypeType), 
                          Lit($Unbox(_module.Tuple.snd(result#6)): DatatypeType); 
                        (if _module.Expression.exprLiteral_q(cond'#2)
                             && _module.Literal#Equal(_module.Expression.lit(cond'#2), #_module.Literal.litTrue())
                           then _module.__default.evalC($LS($ly), Lit(_module.Expression.ifTrue(Lit(expr#0))), stC'#8, Lit(env#0))
                           else (if _module.Expression.exprLiteral_q(cond'#2)
                               && _module.Literal#Equal(_module.Expression.lit(cond'#2), #_module.Literal.litFalse())
                             then _module.__default.evalC($LS($ly), Lit(_module.Expression.ifFalse(Lit(expr#0))), stC'#8, Lit(env#0))
                             else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                              $Box(Lit(stC#0)))))))
                     else (if _module.Expression.exprAnd_q(Lit(expr#0))
                       then (var result#7 := Lit(_module.__default.evalC($LS($ly), Lit(_module.Expression.conj0(Lit(expr#0))), Lit(stC#0), Lit(env#0))); 
                        (var conj0'#2, stC'#9 := Lit($Unbox(_module.Tuple.fst(result#7)): DatatypeType), 
                            Lit($Unbox(_module.Tuple.snd(result#7)): DatatypeType); 
                          (if _module.Expression.exprLiteral_q(conj0'#2)
                               && _module.Literal#Equal(_module.Expression.lit(conj0'#2), #_module.Literal.litTrue())
                             then _module.__default.evalC($LS($ly), Lit(_module.Expression.conj1(Lit(expr#0))), stC'#9, Lit(env#0))
                             else (if _module.Expression.exprLiteral_q(conj0'#2)
                                 && _module.Literal#Equal(_module.Expression.lit(conj0'#2), #_module.Literal.litFalse())
                               then #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprLiteral(Lit(#_module.Literal.litFalse())))), 
                                $Box(stC'#9))
                               else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                $Box(Lit(stC#0)))))))
                       else (if _module.Expression.exprOr_q(Lit(expr#0))
                         then (var result#8 := Lit(_module.__default.evalC($LS($ly), Lit(_module.Expression.disj0(Lit(expr#0))), Lit(stC#0), Lit(env#0))); 
                          (var disj0'#2, stC'#10 := Lit($Unbox(_module.Tuple.fst(result#8)): DatatypeType), 
                              Lit($Unbox(_module.Tuple.snd(result#8)): DatatypeType); 
                            (if _module.Expression.exprLiteral_q(disj0'#2)
                                 && _module.Literal#Equal(_module.Expression.lit(disj0'#2), #_module.Literal.litTrue())
                               then #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprLiteral(Lit(#_module.Literal.litTrue())))), 
                                $Box(stC'#10))
                               else (if _module.Expression.exprLiteral_q(disj0'#2)
                                   && _module.Literal#Equal(_module.Expression.lit(disj0'#2), #_module.Literal.litFalse())
                                 then _module.__default.evalC($LS($ly), Lit(_module.Expression.disj1(Lit(expr#0))), stC'#10, Lit(env#0))
                                 else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                  $Box(Lit(stC#0)))))))
                         else (if _module.Expression.exprInvocation_q(Lit(expr#0))
                           then (var resultFun#2 := Lit(_module.__default.evalC($LS($ly), Lit(_module.Expression.fun(Lit(expr#0))), Lit(stC#0), Lit(env#0))); 
                            (var fun'#2, stC'#11 := Lit($Unbox(_module.Tuple.fst(resultFun#2)): DatatypeType), 
                                Lit($Unbox(_module.Tuple.snd(resultFun#2)): DatatypeType); 
                              (var resultArgs#2 := Lit(_module.__default.evalArgsC($LS($ly), 
                                      Lit(expr#0), 
                                      Lit(_module.Expression.args(Lit(expr#0))), 
                                      Lit(stC#0), 
                                      Lit(env#0))); 
                                (var args'#2, stsC'#2 := Lit($Unbox(_module.Tuple.fst(resultArgs#2)): Seq), 
                                    Lit($Unbox(_module.Tuple.snd(resultArgs#2)): Set); 
                                  (var stsC''#2 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(stC'#11)), stsC'#2); 
                                    (if _module.__default.CompatibleC(stsC''#2)
                                       then (var stCombinedC#2 := _module.__default.CombineC($LS($LZ), stsC''#2); 
                                        (if _module.Expression.exprLiteral_q(fun'#2)
                                             && _module.Literal.litPrimitive_q(Lit(_module.Expression.lit(fun'#2)))
                                           then (if _module.Primitive.primExec_q(Lit(_module.Literal.prim(Lit(_module.Expression.lit(fun'#2)))))
                                             then (if Seq#Length(args'#2)
                                                   == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                 && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#2, stCombinedC#2)
                                               then _module.__default.execC($Unbox(Seq#Index(args'#2, LitInt(0))): DatatypeType, 
                                                $Unbox(Seq#Index(args'#2, LitInt(1))): DatatypeType, 
                                                $Unbox(Seq#Index(args'#2, LitInt(2))): DatatypeType, 
                                                stCombinedC#2)
                                               else (if _module.__default.ConsistentCache(stCombinedC#2)
                                                 then #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                                  $Box(Lit(stC#0)))
                                                 else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rInconsistentCache())))), 
                                                  $Box(Lit(stC#0)))))
                                             else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                              $Box(Lit(stC#0))))
                                           else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                            $Box(Lit(stC#0)))))
                                       else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rCompatibility())))), 
                                        $Box(Lit(stC#0)))))))))
                           else #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                            $Box(Lit(stC#0))))))))))));
}

function _module.__default.evalC#canCall(expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box :: 
  { _module.__default.evalC($LS($ly), expr#0, stC#0, env#0) } 
  _module.__default.evalC($LS($ly), expr#0, stC#0, env#0)
     == _module.__default.evalC($ly, expr#0, stC#0, env#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box :: 
  { _module.__default.evalC(AsFuelBottom($ly), expr#0, stC#0, env#0) } 
  _module.__default.evalC($ly, expr#0, stC#0, env#0)
     == _module.__default.evalC($LZ, expr#0, stC#0, env#0));

function _module.__default.evalC#requires(LayerType, DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _module.__default.evalC
axiom (forall $ly: LayerType, expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box :: 
  { _module.__default.evalC#requires($ly, expr#0, stC#0, env#0) } 
  $Is(expr#0, Tclass._module.Expression())
       && $Is(stC#0, Tclass._module.StateC())
       && $IsBox(env#0, Tclass._module.Env())
     ==> _module.__default.evalC#requires($ly, expr#0, stC#0, env#0) == true);

procedure {:verboseName "evalC (well-formedness)"} CheckWellformed$$_module.__default.evalC(expr#0: DatatypeType where $Is(expr#0, Tclass._module.Expression()), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()), 
    env#0: Box where $IsBox(env#0, Tclass._module.Env()));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "evalC (well-formedness)"} CheckWellformed$$_module.__default.evalC(expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var ##expr#0: DatatypeType;
  var ##id#0: Box;
  var ##env#0: Box;
  var ##expr#1: DatatypeType;
  var ##stC#0: DatatypeType;
  var ##env#1: Box;
  var ##expr#2: DatatypeType;
  var ##stC#1: DatatypeType;
  var ##env#2: Box;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##expr#3: DatatypeType;
  var ##stC#2: DatatypeType;
  var ##env#3: Box;
  var cond'#Z#0: DatatypeType;
  var stC'#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: DatatypeType;
  var ##expr#4: DatatypeType;
  var ##stC#3: DatatypeType;
  var ##env#4: Box;
  var ##expr#5: DatatypeType;
  var ##stC#4: DatatypeType;
  var ##env#5: Box;
  var result#Z#1: DatatypeType;
  var let#2#0#0: DatatypeType;
  var ##expr#6: DatatypeType;
  var ##stC#5: DatatypeType;
  var ##env#6: Box;
  var conj0'#Z#0: DatatypeType;
  var stC'#Z#1: DatatypeType;
  var let#3#0#0: DatatypeType;
  var let#3#1#0: DatatypeType;
  var ##expr#7: DatatypeType;
  var ##stC#6: DatatypeType;
  var ##env#7: Box;
  var result#Z#2: DatatypeType;
  var let#4#0#0: DatatypeType;
  var ##expr#8: DatatypeType;
  var ##stC#7: DatatypeType;
  var ##env#8: Box;
  var disj0'#Z#0: DatatypeType;
  var stC'#Z#2: DatatypeType;
  var let#5#0#0: DatatypeType;
  var let#5#1#0: DatatypeType;
  var ##expr#9: DatatypeType;
  var ##stC#8: DatatypeType;
  var ##env#9: Box;
  var resultFun#Z#0: DatatypeType;
  var let#6#0#0: DatatypeType;
  var ##expr#10: DatatypeType;
  var ##stC#9: DatatypeType;
  var ##env#10: Box;
  var fun'#Z#0: DatatypeType;
  var stC'#Z#3: DatatypeType;
  var let#7#0#0: DatatypeType;
  var let#7#1#0: DatatypeType;
  var resultArgs#Z#0: DatatypeType;
  var let#8#0#0: DatatypeType;
  var ##expr#11: DatatypeType;
  var ##args#0: Seq;
  var ##stC#10: DatatypeType;
  var ##env#11: Box;
  var args'#Z#0: Seq;
  var stsC'#Z#0: Set;
  var let#9#0#0: Seq;
  var let#9#1#0: Set;
  var stsC''#Z#0: Set;
  var let#10#0#0: Set;
  var ##stsC#0: Set;
  var stCombinedC#Z#0: DatatypeType;
  var let#11#0#0: DatatypeType;
  var ##stsC#1: Set;
  var ##prim#0: DatatypeType;
  var ##prim#1: DatatypeType;
  var ##args#1: Seq;
  var ##stC#11: DatatypeType;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##exts#0: DatatypeType;
  var ##stC#12: DatatypeType;
  var ##stC#13: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##expr#0 := expr#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0, Tclass._module.Expression(), $Heap);
        assume _module.__default.Value#canCall(expr#0);
        if (_module.__default.Value(expr#0))
        {
            assume {:id "id599"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
               == #_module.Tuple.Pair($Box(expr#0), $Box(stC#0));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
            return;
        }
        else
        {
            if (_module.Expression.exprIdentifier_q(expr#0))
            {
                assert {:id "id600"} _module.Expression.exprIdentifier_q(expr#0);
                ##id#0 := _module.Expression.id(expr#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##id#0, Tclass._module.Identifier(), $Heap);
                ##env#0 := env#0;
                // assume allocatedness for argument to function
                assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
                assume _module.__default.GetEnv#canCall(_module.Expression.id(expr#0), env#0);
                assume {:id "id601"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                   == #_module.Tuple.Pair($Box(_module.__default.GetEnv(_module.Expression.id(expr#0), env#0)), 
                    $Box(stC#0));
                assume _module.__default.GetEnv#canCall(_module.Expression.id(expr#0), env#0);
                // CheckWellformedWithResult: any expression
                assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                  Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                return;
            }
            else
            {
                if (_module.Expression.exprIf_q(expr#0))
                {
                    assert {:id "id602"} _module.Expression.exprIf_q(expr#0);
                }

                if (_module.Expression.exprIf_q(expr#0)
                   && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0)))
                {
                    assert {:id "id603"} _module.Expression.exprIf_q(expr#0);
                    assert {:id "id604"} _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0));
                }

                if (_module.Expression.exprIf_q(expr#0)
                   && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                   && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                    #_module.Literal.litTrue()))
                {
                    assert {:id "id605"} _module.Expression.exprIf_q(expr#0);
                    ##expr#1 := _module.Expression.ifTrue(expr#0);
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##expr#1, Tclass._module.Expression(), $Heap);
                    ##stC#0 := stC#0;
                    // assume allocatedness for argument to function
                    assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
                    ##env#1 := env#0;
                    // assume allocatedness for argument to function
                    assume $IsAllocBox(##env#1, Tclass._module.Env(), $Heap);
                    assert {:id "id606"} DtRank(##expr#1) < DtRank(expr#0);
                    assume _module.__default.evalC#canCall(_module.Expression.ifTrue(expr#0), stC#0, env#0);
                    assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.ifTrue(expr#0), stC#0, env#0));
                    assume {:id "id607"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                       == _module.__default.evalC($LS($LZ), _module.Expression.ifTrue(expr#0), stC#0, env#0);
                    assume _module.__default.evalC#canCall(_module.Expression.ifTrue(expr#0), stC#0, env#0);
                    // CheckWellformedWithResult: any expression
                    assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                    return;
                }
                else
                {
                    if (_module.Expression.exprIf_q(expr#0))
                    {
                        assert {:id "id608"} _module.Expression.exprIf_q(expr#0);
                    }

                    if (_module.Expression.exprIf_q(expr#0)
                       && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0)))
                    {
                        assert {:id "id609"} _module.Expression.exprIf_q(expr#0);
                        assert {:id "id610"} _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0));
                    }

                    if (_module.Expression.exprIf_q(expr#0)
                       && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                       && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                        #_module.Literal.litFalse()))
                    {
                        assert {:id "id611"} _module.Expression.exprIf_q(expr#0);
                        ##expr#2 := _module.Expression.ifFalse(expr#0);
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##expr#2, Tclass._module.Expression(), $Heap);
                        ##stC#1 := stC#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
                        ##env#2 := env#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##env#2, Tclass._module.Env(), $Heap);
                        assert {:id "id612"} DtRank(##expr#2) < DtRank(expr#0);
                        assume _module.__default.evalC#canCall(_module.Expression.ifFalse(expr#0), stC#0, env#0);
                        assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.ifFalse(expr#0), stC#0, env#0));
                        assume {:id "id613"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                           == _module.__default.evalC($LS($LZ), _module.Expression.ifFalse(expr#0), stC#0, env#0);
                        assume _module.__default.evalC#canCall(_module.Expression.ifFalse(expr#0), stC#0, env#0);
                        // CheckWellformedWithResult: any expression
                        assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                        return;
                    }
                    else
                    {
                        if (_module.Expression.exprIf_q(expr#0))
                        {
                            havoc result#Z#0;
                            assert {:id "id614"} _module.Expression.exprIf_q(expr#0);
                            ##expr#3 := _module.Expression.cond(expr#0);
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##expr#3, Tclass._module.Expression(), $Heap);
                            ##stC#2 := stC#0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
                            ##env#3 := env#0;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##env#3, Tclass._module.Env(), $Heap);
                            assert {:id "id615"} DtRank(##expr#3) < DtRank(expr#0);
                            assume _module.__default.evalC#canCall(_module.Expression.cond(expr#0), stC#0, env#0);
                            assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.cond(expr#0), stC#0, env#0));
                            assume {:id "id616"} let#0#0#0
                               == _module.__default.evalC($LS($LZ), _module.Expression.cond(expr#0), stC#0, env#0);
                            assume _module.__default.evalC#canCall(_module.Expression.cond(expr#0), stC#0, env#0);
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#0#0#0, 
                              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                            assume {:id "id617"} result#Z#0 == let#0#0#0;
                            havoc cond'#Z#0;
                            havoc stC'#Z#0;
                            assume _module.Tuple.Pair_q(result#Z#0);
                            assume {:id "id618"} let#1#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
                            assume _module.Tuple.Pair_q(result#Z#0);
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#1#0#0, Tclass._module.Expression());
                            assume {:id "id619"} cond'#Z#0 == let#1#0#0;
                            assume _module.Tuple.Pair_q(result#Z#0);
                            assume {:id "id620"} let#1#1#0 == $Unbox(_module.Tuple.snd(result#Z#0)): DatatypeType;
                            assume _module.Tuple.Pair_q(result#Z#0);
                            // CheckWellformedWithResult: any expression
                            assume $Is(let#1#1#0, Tclass._module.StateC());
                            assume {:id "id621"} stC'#Z#0 == let#1#1#0;
                            if (_module.Expression.exprLiteral_q(cond'#Z#0))
                            {
                                assert {:id "id622"} _module.Expression.exprLiteral_q(cond'#Z#0);
                            }

                            if (_module.Expression.exprLiteral_q(cond'#Z#0)
                               && _module.Literal#Equal(_module.Expression.lit(cond'#Z#0), #_module.Literal.litTrue()))
                            {
                                assert {:id "id623"} _module.Expression.exprIf_q(expr#0);
                                ##expr#4 := _module.Expression.ifTrue(expr#0);
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##expr#4, Tclass._module.Expression(), $Heap);
                                ##stC#3 := stC'#Z#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##stC#3, Tclass._module.StateC(), $Heap);
                                ##env#4 := env#0;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##env#4, Tclass._module.Env(), $Heap);
                                assert {:id "id624"} DtRank(##expr#4) < DtRank(expr#0);
                                assume _module.__default.evalC#canCall(_module.Expression.ifTrue(expr#0), stC'#Z#0, env#0);
                                assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.ifTrue(expr#0), stC'#Z#0, env#0));
                                assume {:id "id625"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                   == _module.__default.evalC($LS($LZ), _module.Expression.ifTrue(expr#0), stC'#Z#0, env#0);
                                assume _module.__default.evalC#canCall(_module.Expression.ifTrue(expr#0), stC'#Z#0, env#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                  Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                return;
                            }
                            else
                            {
                                if (_module.Expression.exprLiteral_q(cond'#Z#0))
                                {
                                    assert {:id "id626"} _module.Expression.exprLiteral_q(cond'#Z#0);
                                }

                                if (_module.Expression.exprLiteral_q(cond'#Z#0)
                                   && _module.Literal#Equal(_module.Expression.lit(cond'#Z#0), #_module.Literal.litFalse()))
                                {
                                    assert {:id "id627"} _module.Expression.exprIf_q(expr#0);
                                    ##expr#5 := _module.Expression.ifFalse(expr#0);
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##expr#5, Tclass._module.Expression(), $Heap);
                                    ##stC#4 := stC'#Z#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##stC#4, Tclass._module.StateC(), $Heap);
                                    ##env#5 := env#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAllocBox(##env#5, Tclass._module.Env(), $Heap);
                                    assert {:id "id628"} DtRank(##expr#5) < DtRank(expr#0);
                                    assume _module.__default.evalC#canCall(_module.Expression.ifFalse(expr#0), stC'#Z#0, env#0);
                                    assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.ifFalse(expr#0), stC'#Z#0, env#0));
                                    assume {:id "id629"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                       == _module.__default.evalC($LS($LZ), _module.Expression.ifFalse(expr#0), stC'#Z#0, env#0);
                                    assume _module.__default.evalC#canCall(_module.Expression.ifFalse(expr#0), stC'#Z#0, env#0);
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                    return;
                                }
                                else
                                {
                                    assume {:id "id630"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                       == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                        $Box(stC#0));
                                    assume true;
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                    return;
                                }
                            }
                        }
                        else
                        {
                            if (_module.Expression.exprAnd_q(expr#0))
                            {
                                havoc result#Z#1;
                                assert {:id "id631"} _module.Expression.exprAnd_q(expr#0);
                                ##expr#6 := _module.Expression.conj0(expr#0);
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##expr#6, Tclass._module.Expression(), $Heap);
                                ##stC#5 := stC#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##stC#5, Tclass._module.StateC(), $Heap);
                                ##env#6 := env#0;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##env#6, Tclass._module.Env(), $Heap);
                                assert {:id "id632"} DtRank(##expr#6) < DtRank(expr#0);
                                assume _module.__default.evalC#canCall(_module.Expression.conj0(expr#0), stC#0, env#0);
                                assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.conj0(expr#0), stC#0, env#0));
                                assume {:id "id633"} let#2#0#0
                                   == _module.__default.evalC($LS($LZ), _module.Expression.conj0(expr#0), stC#0, env#0);
                                assume _module.__default.evalC#canCall(_module.Expression.conj0(expr#0), stC#0, env#0);
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#2#0#0, 
                                  Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                assume {:id "id634"} result#Z#1 == let#2#0#0;
                                havoc conj0'#Z#0;
                                havoc stC'#Z#1;
                                assume _module.Tuple.Pair_q(result#Z#1);
                                assume {:id "id635"} let#3#0#0 == $Unbox(_module.Tuple.fst(result#Z#1)): DatatypeType;
                                assume _module.Tuple.Pair_q(result#Z#1);
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#3#0#0, Tclass._module.Expression());
                                assume {:id "id636"} conj0'#Z#0 == let#3#0#0;
                                assume _module.Tuple.Pair_q(result#Z#1);
                                assume {:id "id637"} let#3#1#0 == $Unbox(_module.Tuple.snd(result#Z#1)): DatatypeType;
                                assume _module.Tuple.Pair_q(result#Z#1);
                                // CheckWellformedWithResult: any expression
                                assume $Is(let#3#1#0, Tclass._module.StateC());
                                assume {:id "id638"} stC'#Z#1 == let#3#1#0;
                                if (_module.Expression.exprLiteral_q(conj0'#Z#0))
                                {
                                    assert {:id "id639"} _module.Expression.exprLiteral_q(conj0'#Z#0);
                                }

                                if (_module.Expression.exprLiteral_q(conj0'#Z#0)
                                   && _module.Literal#Equal(_module.Expression.lit(conj0'#Z#0), #_module.Literal.litTrue()))
                                {
                                    assert {:id "id640"} _module.Expression.exprAnd_q(expr#0);
                                    ##expr#7 := _module.Expression.conj1(expr#0);
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##expr#7, Tclass._module.Expression(), $Heap);
                                    ##stC#6 := stC'#Z#1;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##stC#6, Tclass._module.StateC(), $Heap);
                                    ##env#7 := env#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAllocBox(##env#7, Tclass._module.Env(), $Heap);
                                    assert {:id "id641"} DtRank(##expr#7) < DtRank(expr#0);
                                    assume _module.__default.evalC#canCall(_module.Expression.conj1(expr#0), stC'#Z#1, env#0);
                                    assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.conj1(expr#0), stC'#Z#1, env#0));
                                    assume {:id "id642"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                       == _module.__default.evalC($LS($LZ), _module.Expression.conj1(expr#0), stC'#Z#1, env#0);
                                    assume _module.__default.evalC#canCall(_module.Expression.conj1(expr#0), stC'#Z#1, env#0);
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                    return;
                                }
                                else
                                {
                                    if (_module.Expression.exprLiteral_q(conj0'#Z#0))
                                    {
                                        assert {:id "id643"} _module.Expression.exprLiteral_q(conj0'#Z#0);
                                    }

                                    if (_module.Expression.exprLiteral_q(conj0'#Z#0)
                                       && _module.Literal#Equal(_module.Expression.lit(conj0'#Z#0), #_module.Literal.litFalse()))
                                    {
                                        assume {:id "id644"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                           == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprLiteral(Lit(#_module.Literal.litFalse())))), 
                                            $Box(stC'#Z#1));
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                        return;
                                    }
                                    else
                                    {
                                        assume {:id "id645"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                           == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                            $Box(stC#0));
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                        return;
                                    }
                                }
                            }
                            else
                            {
                                if (_module.Expression.exprOr_q(expr#0))
                                {
                                    havoc result#Z#2;
                                    assert {:id "id646"} _module.Expression.exprOr_q(expr#0);
                                    ##expr#8 := _module.Expression.disj0(expr#0);
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##expr#8, Tclass._module.Expression(), $Heap);
                                    ##stC#7 := stC#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##stC#7, Tclass._module.StateC(), $Heap);
                                    ##env#8 := env#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAllocBox(##env#8, Tclass._module.Env(), $Heap);
                                    assert {:id "id647"} DtRank(##expr#8) < DtRank(expr#0);
                                    assume _module.__default.evalC#canCall(_module.Expression.disj0(expr#0), stC#0, env#0);
                                    assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.disj0(expr#0), stC#0, env#0));
                                    assume {:id "id648"} let#4#0#0
                                       == _module.__default.evalC($LS($LZ), _module.Expression.disj0(expr#0), stC#0, env#0);
                                    assume _module.__default.evalC#canCall(_module.Expression.disj0(expr#0), stC#0, env#0);
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#4#0#0, 
                                      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                    assume {:id "id649"} result#Z#2 == let#4#0#0;
                                    havoc disj0'#Z#0;
                                    havoc stC'#Z#2;
                                    assume _module.Tuple.Pair_q(result#Z#2);
                                    assume {:id "id650"} let#5#0#0 == $Unbox(_module.Tuple.fst(result#Z#2)): DatatypeType;
                                    assume _module.Tuple.Pair_q(result#Z#2);
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#5#0#0, Tclass._module.Expression());
                                    assume {:id "id651"} disj0'#Z#0 == let#5#0#0;
                                    assume _module.Tuple.Pair_q(result#Z#2);
                                    assume {:id "id652"} let#5#1#0 == $Unbox(_module.Tuple.snd(result#Z#2)): DatatypeType;
                                    assume _module.Tuple.Pair_q(result#Z#2);
                                    // CheckWellformedWithResult: any expression
                                    assume $Is(let#5#1#0, Tclass._module.StateC());
                                    assume {:id "id653"} stC'#Z#2 == let#5#1#0;
                                    if (_module.Expression.exprLiteral_q(disj0'#Z#0))
                                    {
                                        assert {:id "id654"} _module.Expression.exprLiteral_q(disj0'#Z#0);
                                    }

                                    if (_module.Expression.exprLiteral_q(disj0'#Z#0)
                                       && _module.Literal#Equal(_module.Expression.lit(disj0'#Z#0), #_module.Literal.litTrue()))
                                    {
                                        assume {:id "id655"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                           == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprLiteral(Lit(#_module.Literal.litTrue())))), 
                                            $Box(stC'#Z#2));
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                        return;
                                    }
                                    else
                                    {
                                        if (_module.Expression.exprLiteral_q(disj0'#Z#0))
                                        {
                                            assert {:id "id656"} _module.Expression.exprLiteral_q(disj0'#Z#0);
                                        }

                                        if (_module.Expression.exprLiteral_q(disj0'#Z#0)
                                           && _module.Literal#Equal(_module.Expression.lit(disj0'#Z#0), #_module.Literal.litFalse()))
                                        {
                                            assert {:id "id657"} _module.Expression.exprOr_q(expr#0);
                                            ##expr#9 := _module.Expression.disj1(expr#0);
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##expr#9, Tclass._module.Expression(), $Heap);
                                            ##stC#8 := stC'#Z#2;
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##stC#8, Tclass._module.StateC(), $Heap);
                                            ##env#9 := env#0;
                                            // assume allocatedness for argument to function
                                            assume $IsAllocBox(##env#9, Tclass._module.Env(), $Heap);
                                            assert {:id "id658"} DtRank(##expr#9) < DtRank(expr#0);
                                            assume _module.__default.evalC#canCall(_module.Expression.disj1(expr#0), stC'#Z#2, env#0);
                                            assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.disj1(expr#0), stC'#Z#2, env#0));
                                            assume {:id "id659"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                               == _module.__default.evalC($LS($LZ), _module.Expression.disj1(expr#0), stC'#Z#2, env#0);
                                            assume _module.__default.evalC#canCall(_module.Expression.disj1(expr#0), stC'#Z#2, env#0);
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                            return;
                                        }
                                        else
                                        {
                                            assume {:id "id660"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                               == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                                $Box(stC#0));
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                            return;
                                        }
                                    }
                                }
                                else
                                {
                                    if (_module.Expression.exprInvocation_q(expr#0))
                                    {
                                        havoc resultFun#Z#0;
                                        assert {:id "id661"} _module.Expression.exprInvocation_q(expr#0);
                                        ##expr#10 := _module.Expression.fun(expr#0);
                                        // assume allocatedness for argument to function
                                        assume $IsAlloc(##expr#10, Tclass._module.Expression(), $Heap);
                                        ##stC#9 := stC#0;
                                        // assume allocatedness for argument to function
                                        assume $IsAlloc(##stC#9, Tclass._module.StateC(), $Heap);
                                        ##env#10 := env#0;
                                        // assume allocatedness for argument to function
                                        assume $IsAllocBox(##env#10, Tclass._module.Env(), $Heap);
                                        assert {:id "id662"} DtRank(##expr#10) < DtRank(expr#0);
                                        assume _module.__default.evalC#canCall(_module.Expression.fun(expr#0), stC#0, env#0);
                                        assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.fun(expr#0), stC#0, env#0));
                                        assume {:id "id663"} let#6#0#0
                                           == _module.__default.evalC($LS($LZ), _module.Expression.fun(expr#0), stC#0, env#0);
                                        assume _module.__default.evalC#canCall(_module.Expression.fun(expr#0), stC#0, env#0);
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#6#0#0, 
                                          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                        assume {:id "id664"} resultFun#Z#0 == let#6#0#0;
                                        havoc fun'#Z#0;
                                        havoc stC'#Z#3;
                                        assume _module.Tuple.Pair_q(resultFun#Z#0);
                                        assume {:id "id665"} let#7#0#0 == $Unbox(_module.Tuple.fst(resultFun#Z#0)): DatatypeType;
                                        assume _module.Tuple.Pair_q(resultFun#Z#0);
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#7#0#0, Tclass._module.Expression());
                                        assume {:id "id666"} fun'#Z#0 == let#7#0#0;
                                        assume _module.Tuple.Pair_q(resultFun#Z#0);
                                        assume {:id "id667"} let#7#1#0 == $Unbox(_module.Tuple.snd(resultFun#Z#0)): DatatypeType;
                                        assume _module.Tuple.Pair_q(resultFun#Z#0);
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#7#1#0, Tclass._module.StateC());
                                        assume {:id "id668"} stC'#Z#3 == let#7#1#0;
                                        havoc resultArgs#Z#0;
                                        ##expr#11 := expr#0;
                                        // assume allocatedness for argument to function
                                        assume $IsAlloc(##expr#11, Tclass._module.Expression(), $Heap);
                                        assert {:id "id669"} _module.Expression.exprInvocation_q(expr#0);
                                        ##args#0 := _module.Expression.args(expr#0);
                                        // assume allocatedness for argument to function
                                        assume $IsAlloc(##args#0, TSeq(Tclass._module.Expression()), $Heap);
                                        ##stC#10 := stC#0;
                                        // assume allocatedness for argument to function
                                        assume $IsAlloc(##stC#10, Tclass._module.StateC(), $Heap);
                                        ##env#11 := env#0;
                                        // assume allocatedness for argument to function
                                        assume $IsAllocBox(##env#11, Tclass._module.Env(), $Heap);
                                        assert {:id "id670"} {:subsumption 0} (forall arg#0: DatatypeType :: 
                                          { Seq#Contains(##args#0, $Box(arg#0)) } 
                                          $Is(arg#0, Tclass._module.Expression())
                                             ==> 
                                            Seq#Contains(##args#0, $Box(arg#0))
                                             ==> DtRank(arg#0) < DtRank(##expr#11));
                                        assume (forall arg#0: DatatypeType :: 
                                          { Seq#Contains(##args#0, $Box(arg#0)) } 
                                          $Is(arg#0, Tclass._module.Expression())
                                             ==> 
                                            Seq#Contains(##args#0, $Box(arg#0))
                                             ==> DtRank(arg#0) < DtRank(##expr#11));
                                        assert {:id "id671"} DtRank(##expr#11) <= DtRank(expr#0);
                                        assume _module.__default.evalArgsC#canCall(expr#0, _module.Expression.args(expr#0), stC#0, env#0);
                                        assume _module.Tuple.Pair_q(_module.__default.evalArgsC($LS($LZ), expr#0, _module.Expression.args(expr#0), stC#0, env#0));
                                        assume {:id "id672"} let#8#0#0
                                           == _module.__default.evalArgsC($LS($LZ), expr#0, _module.Expression.args(expr#0), stC#0, env#0);
                                        assume _module.__default.evalArgsC#canCall(expr#0, _module.Expression.args(expr#0), stC#0, env#0);
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#8#0#0, 
                                          Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())));
                                        assume {:id "id673"} resultArgs#Z#0 == let#8#0#0;
                                        havoc args'#Z#0;
                                        havoc stsC'#Z#0;
                                        assume _module.Tuple.Pair_q(resultArgs#Z#0);
                                        assume {:id "id674"} let#9#0#0 == $Unbox(_module.Tuple.fst(resultArgs#Z#0)): Seq;
                                        assume _module.Tuple.Pair_q(resultArgs#Z#0);
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#9#0#0, TSeq(Tclass._module.Expression()));
                                        assume {:id "id675"} args'#Z#0 == let#9#0#0;
                                        assume _module.Tuple.Pair_q(resultArgs#Z#0);
                                        assume {:id "id676"} let#9#1#0 == $Unbox(_module.Tuple.snd(resultArgs#Z#0)): Set;
                                        assume _module.Tuple.Pair_q(resultArgs#Z#0);
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#9#1#0, TSet(Tclass._module.StateC()));
                                        assume {:id "id677"} stsC'#Z#0 == let#9#1#0;
                                        havoc stsC''#Z#0;
                                        assume {:id "id678"} let#10#0#0
                                           == Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(stC'#Z#3)), stsC'#Z#0);
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(let#10#0#0, TSet(Tclass._module.StateC()));
                                        assume {:id "id679"} stsC''#Z#0 == let#10#0#0;
                                        ##stsC#0 := stsC''#Z#0;
                                        // assume allocatedness for argument to function
                                        assume $IsAlloc(##stsC#0, TSet(Tclass._module.StateC()), $Heap);
                                        assume _module.__default.CompatibleC#canCall(stsC''#Z#0);
                                        if (_module.__default.CompatibleC(stsC''#Z#0))
                                        {
                                            havoc stCombinedC#Z#0;
                                            ##stsC#1 := stsC''#Z#0;
                                            // assume allocatedness for argument to function
                                            assume $IsAlloc(##stsC#1, TSet(Tclass._module.StateC()), $Heap);
                                            assert {:id "id680"} {:subsumption 0} !Set#Equal(##stsC#1, Set#Empty(): Set);
                                            assume !Set#Equal(##stsC#1, Set#Empty(): Set);
                                            assume _module.__default.CombineC#canCall(stsC''#Z#0);
                                            assume _module.StateC.S_q(_module.__default.CombineC($LS($LZ), stsC''#Z#0));
                                            assume {:id "id681"} let#11#0#0 == _module.__default.CombineC($LS($LZ), stsC''#Z#0);
                                            assume _module.__default.CombineC#canCall(stsC''#Z#0);
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(let#11#0#0, Tclass._module.StateC());
                                            assume {:id "id682"} stCombinedC#Z#0 == let#11#0#0;
                                            if (_module.Expression.exprLiteral_q(fun'#Z#0))
                                            {
                                                assert {:id "id683"} _module.Expression.exprLiteral_q(fun'#Z#0);
                                            }

                                            if (_module.Expression.exprLiteral_q(fun'#Z#0)
                                               && _module.Literal.litPrimitive_q(_module.Expression.lit(fun'#Z#0)))
                                            {
                                                assert {:id "id684"} _module.Expression.exprLiteral_q(fun'#Z#0);
                                                assert {:id "id685"} _module.Literal.litPrimitive_q(_module.Expression.lit(fun'#Z#0));
                                                if (_module.Primitive.primExec_q(_module.Literal.prim(_module.Expression.lit(fun'#Z#0))))
                                                {
                                                    ##prim#0 := Lit(#_module.Primitive.primExec());
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##prim#0, Tclass._module.Primitive(), $Heap);
                                                    assume _module.__default.Arity#canCall(Lit(#_module.Primitive.primExec()));
                                                    if (Seq#Length(args'#Z#0)
                                                       == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec()))))
                                                    {
                                                        ##prim#1 := Lit(#_module.Primitive.primExec());
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##prim#1, Tclass._module.Primitive(), $Heap);
                                                        ##args#1 := args'#Z#0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##args#1, TSeq(Tclass._module.Expression()), $Heap);
                                                        ##stC#11 := stCombinedC#Z#0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##stC#11, Tclass._module.StateC(), $Heap);
                                                        assert {:id "id686"} {:subsumption 0} _module.Primitive.primExec_q(##prim#1) ==> Seq#Length(##args#1) == LitInt(3);
                                                        assume _module.Primitive.primExec_q(##prim#1) ==> Seq#Length(##args#1) == LitInt(3);
                                                        assert {:id "id687"} {:subsumption 0} _module.Primitive.primCreatePath_q(##prim#1)
                                                           ==> Seq#Length(##args#1) == LitInt(1);
                                                        assume _module.Primitive.primCreatePath_q(##prim#1)
                                                           ==> Seq#Length(##args#1) == LitInt(1);
                                                        assume _module.__default.ValidArgsC#canCall(Lit(#_module.Primitive.primExec()), args'#Z#0, stCombinedC#Z#0);
                                                    }

                                                    if (Seq#Length(args'#Z#0)
                                                         == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                       && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), args'#Z#0, stCombinedC#Z#0))
                                                    {
                                                        assert {:id "id688"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args'#Z#0);
                                                        ##cmd#0 := $Unbox(Seq#Index(args'#Z#0, LitInt(0))): DatatypeType;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
                                                        assert {:id "id689"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args'#Z#0);
                                                        ##deps#0 := $Unbox(Seq#Index(args'#Z#0, LitInt(1))): DatatypeType;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
                                                        assert {:id "id690"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args'#Z#0);
                                                        ##exts#0 := $Unbox(Seq#Index(args'#Z#0, LitInt(2))): DatatypeType;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##exts#0, Tclass._module.Expression(), $Heap);
                                                        ##stC#12 := stCombinedC#Z#0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##stC#12, Tclass._module.StateC(), $Heap);
                                                        assert {:id "id691"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#0);
                                                        assert {:id "id692"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#0));
                                                        assert {:id "id693"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#0);
                                                        assert {:id "id694"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0));
                                                        assert {:id "id695"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#0);
                                                        assert {:id "id696"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
                                                        assume _module.Expression.exprLiteral_q(##cmd#0)
                                                           && _module.Literal.litString_q(_module.Expression.lit(##cmd#0))
                                                           && _module.Expression.exprLiteral_q(##deps#0)
                                                           && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0))
                                                           && _module.Expression.exprLiteral_q(##exts#0)
                                                           && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
                                                        assume _module.__default.execC#canCall($Unbox(Seq#Index(args'#Z#0, LitInt(0))): DatatypeType, 
                                                          $Unbox(Seq#Index(args'#Z#0, LitInt(1))): DatatypeType, 
                                                          $Unbox(Seq#Index(args'#Z#0, LitInt(2))): DatatypeType, 
                                                          stCombinedC#Z#0);
                                                        assume _module.Tuple.Pair_q(_module.__default.execC($Unbox(Seq#Index(args'#Z#0, LitInt(0))): DatatypeType, 
                                                            $Unbox(Seq#Index(args'#Z#0, LitInt(1))): DatatypeType, 
                                                            $Unbox(Seq#Index(args'#Z#0, LitInt(2))): DatatypeType, 
                                                            stCombinedC#Z#0));
                                                        assume {:id "id697"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                                           == _module.__default.execC($Unbox(Seq#Index(args'#Z#0, LitInt(0))): DatatypeType, 
                                                            $Unbox(Seq#Index(args'#Z#0, LitInt(1))): DatatypeType, 
                                                            $Unbox(Seq#Index(args'#Z#0, LitInt(2))): DatatypeType, 
                                                            stCombinedC#Z#0);
                                                        assume _module.__default.execC#canCall($Unbox(Seq#Index(args'#Z#0, LitInt(0))): DatatypeType, 
                                                          $Unbox(Seq#Index(args'#Z#0, LitInt(1))): DatatypeType, 
                                                          $Unbox(Seq#Index(args'#Z#0, LitInt(2))): DatatypeType, 
                                                          stCombinedC#Z#0);
                                                        // CheckWellformedWithResult: any expression
                                                        assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                                          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        ##stC#13 := stCombinedC#Z#0;
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##stC#13, Tclass._module.StateC(), $Heap);
                                                        assume _module.__default.ConsistentCache#canCall(stCombinedC#Z#0);
                                                        if (_module.__default.ConsistentCache(stCombinedC#Z#0))
                                                        {
                                                            assume {:id "id698"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                                               == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                                                $Box(stC#0));
                                                            assume true;
                                                            // CheckWellformedWithResult: any expression
                                                            assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                                              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                                            return;
                                                        }
                                                        else
                                                        {
                                                            assume {:id "id699"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                                               == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rInconsistentCache())))), 
                                                                $Box(stC#0));
                                                            assume true;
                                                            // CheckWellformedWithResult: any expression
                                                            assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                                              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                                            return;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    assume {:id "id700"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                                       == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                                        $Box(stC#0));
                                                    assume true;
                                                    // CheckWellformedWithResult: any expression
                                                    assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                                      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                assume {:id "id701"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                                   == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                                    $Box(stC#0));
                                                assume true;
                                                // CheckWellformedWithResult: any expression
                                                assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                                  Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            assume {:id "id702"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                               == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rCompatibility())))), 
                                                $Box(stC#0));
                                            assume true;
                                            // CheckWellformedWithResult: any expression
                                            assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        assume {:id "id703"} _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0)
                                           == #_module.Tuple.Pair($Box(Lit(#_module.Expression.exprError(Lit(#_module.Reason.rValidity())))), 
                                            $Box(stC#0));
                                        assume true;
                                        // CheckWellformedWithResult: any expression
                                        assume $Is(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0), 
                                          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        assume false;
    }
}



// function declaration for _module._default.evalArgsC
function _module.__default.evalArgsC($ly: LayerType, 
    expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box)
   : DatatypeType
uses {
// consequence axiom for _module.__default.evalArgsC
axiom 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      expr#0: DatatypeType, 
      args#0: Seq, 
      stC#0: DatatypeType, 
      env#0: Box :: 
    { _module.__default.evalArgsC($ly, expr#0, args#0, stC#0, env#0) } 
    _module.__default.evalArgsC#canCall(expr#0, args#0, stC#0, env#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && (forall arg#0: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#0)) } 
            $Is(arg#0, Tclass._module.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#0))
               ==> DtRank(arg#0) < DtRank(expr#0)))
       ==> $Is(_module.__default.evalArgsC($ly, expr#0, args#0, stC#0, env#0), 
        Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC()))));
// definition axiom for _module.__default.evalArgsC (revealed)
axiom {:id "id704"} 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      expr#0: DatatypeType, 
      args#0: Seq, 
      stC#0: DatatypeType, 
      env#0: Box :: 
    { _module.__default.evalArgsC($LS($ly), expr#0, args#0, stC#0, env#0) } 
    _module.__default.evalArgsC#canCall(expr#0, args#0, stC#0, env#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && (forall arg#1: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#1)) } 
            $Is(arg#1, Tclass._module.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#1))
               ==> DtRank(arg#1) < DtRank(expr#0)))
       ==> _module.__default.evalArgsC_k#canCall(expr#0, args#0, stC#0, env#0, Lit(Seq#Empty(): Seq), Lit(Set#Empty(): Set))
         && _module.__default.evalArgsC($LS($ly), expr#0, args#0, stC#0, env#0)
           == _module.__default.evalArgsC_k($ly, expr#0, args#0, stC#0, env#0, Lit(Seq#Empty(): Seq), Lit(Set#Empty(): Set)));
// definition axiom for _module.__default.evalArgsC for decreasing-related literals (revealed)
axiom {:id "id705"} 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      expr#0: DatatypeType, 
      args#0: Seq, 
      stC#0: DatatypeType, 
      env#0: Box :: 
    {:weight 3} { _module.__default.evalArgsC($LS($ly), Lit(expr#0), Lit(args#0), stC#0, env#0) } 
    _module.__default.evalArgsC#canCall(Lit(expr#0), Lit(args#0), stC#0, env#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && (forall arg#2: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#2)) } 
            $Is(arg#2, Tclass._module.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#2))
               ==> DtRank(arg#2) < DtRank(expr#0)))
       ==> _module.__default.evalArgsC_k#canCall(Lit(expr#0), 
          Lit(args#0), 
          stC#0, 
          env#0, 
          Lit(Seq#Empty(): Seq), 
          Lit(Set#Empty(): Set))
         && _module.__default.evalArgsC($LS($ly), Lit(expr#0), Lit(args#0), stC#0, env#0)
           == _module.__default.evalArgsC_k($LS($ly), 
            Lit(expr#0), 
            Lit(args#0), 
            stC#0, 
            env#0, 
            Lit(Seq#Empty(): Seq), 
            Lit(Set#Empty(): Set)));
// definition axiom for _module.__default.evalArgsC for all literals (revealed)
axiom {:id "id706"} 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      expr#0: DatatypeType, 
      args#0: Seq, 
      stC#0: DatatypeType, 
      env#0: Box :: 
    {:weight 3} { _module.__default.evalArgsC($LS($ly), Lit(expr#0), Lit(args#0), Lit(stC#0), Lit(env#0)) } 
    _module.__default.evalArgsC#canCall(Lit(expr#0), Lit(args#0), Lit(stC#0), Lit(env#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && (forall arg#3: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#3)) } 
            $Is(arg#3, Tclass._module.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#3))
               ==> DtRank(arg#3) < DtRank(expr#0)))
       ==> _module.__default.evalArgsC_k#canCall(Lit(expr#0), 
          Lit(args#0), 
          Lit(stC#0), 
          Lit(env#0), 
          Lit(Seq#Empty(): Seq), 
          Lit(Set#Empty(): Set))
         && _module.__default.evalArgsC($LS($ly), Lit(expr#0), Lit(args#0), Lit(stC#0), Lit(env#0))
           == Lit(_module.__default.evalArgsC_k($LS($ly), 
              Lit(expr#0), 
              Lit(args#0), 
              Lit(stC#0), 
              Lit(env#0), 
              Lit(Seq#Empty(): Seq), 
              Lit(Set#Empty(): Set))));
}

function _module.__default.evalArgsC#canCall(expr#0: DatatypeType, args#0: Seq, stC#0: DatatypeType, env#0: Box) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, 
    expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box :: 
  { _module.__default.evalArgsC($LS($ly), expr#0, args#0, stC#0, env#0) } 
  _module.__default.evalArgsC($LS($ly), expr#0, args#0, stC#0, env#0)
     == _module.__default.evalArgsC($ly, expr#0, args#0, stC#0, env#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, 
    expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box :: 
  { _module.__default.evalArgsC(AsFuelBottom($ly), expr#0, args#0, stC#0, env#0) } 
  _module.__default.evalArgsC($ly, expr#0, args#0, stC#0, env#0)
     == _module.__default.evalArgsC($LZ, expr#0, args#0, stC#0, env#0));

function _module.__default.evalArgsC#requires(LayerType, DatatypeType, Seq, DatatypeType, Box) : bool;

// #requires axiom for _module.__default.evalArgsC
axiom (forall $ly: LayerType, 
    expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box :: 
  { _module.__default.evalArgsC#requires($ly, expr#0, args#0, stC#0, env#0) } 
  $Is(expr#0, Tclass._module.Expression())
       && $Is(args#0, TSeq(Tclass._module.Expression()))
       && $Is(stC#0, Tclass._module.StateC())
       && $IsBox(env#0, Tclass._module.Env())
     ==> _module.__default.evalArgsC#requires($ly, expr#0, args#0, stC#0, env#0)
       == (forall arg#1: DatatypeType :: 
        { Seq#Contains(args#0, $Box(arg#1)) } 
        $Is(arg#1, Tclass._module.Expression())
           ==> 
          Seq#Contains(args#0, $Box(arg#1))
           ==> DtRank(arg#1) < DtRank(expr#0)));

procedure {:verboseName "evalArgsC (well-formedness)"} CheckWellformed$$_module.__default.evalArgsC(expr#0: DatatypeType where $Is(expr#0, Tclass._module.Expression()), 
    args#0: Seq where $Is(args#0, TSeq(Tclass._module.Expression())), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()), 
    env#0: Box where $IsBox(env#0, Tclass._module.Env()));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "evalArgsC (well-formedness)"} CheckWellformed$$_module.__default.evalArgsC(expr#0: DatatypeType, args#0: Seq, stC#0: DatatypeType, env#0: Box)
{
  var $_ReadsFrame: [ref,Field]bool;
  var arg#4: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##args#0: Seq;
  var ##stC#0: DatatypeType;
  var ##env#0: Box;
  var ##args'#0: Seq;
  var ##stsC'#0: Set;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    havoc arg#4;
    assume $Is(arg#4, Tclass._module.Expression())
       && $IsAlloc(arg#4, Tclass._module.Expression(), $Heap);
    if (*)
    {
        assume {:id "id707"} Seq#Contains(args#0, $Box(arg#4));
        assume {:id "id708"} DtRank(arg#4) < DtRank(expr#0);
    }
    else
    {
        assume {:id "id709"} Seq#Contains(args#0, $Box(arg#4)) ==> DtRank(arg#4) < DtRank(expr#0);
    }

    assume {:id "id710"} (forall arg#0: DatatypeType :: 
      { Seq#Contains(args#0, $Box(arg#0)) } 
      $Is(arg#0, Tclass._module.Expression())
         ==> 
        Seq#Contains(args#0, $Box(arg#0))
         ==> DtRank(arg#0) < DtRank(expr#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.evalArgsC($LS($LZ), expr#0, args#0, stC#0, env#0), 
          Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        ##expr#0 := expr#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0, Tclass._module.Expression(), $Heap);
        ##args#0 := args#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##args#0, TSeq(Tclass._module.Expression()), $Heap);
        ##stC#0 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
        ##env#0 := env#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
        ##args'#0 := Lit(Seq#Empty(): Seq);
        // assume allocatedness for argument to function
        assume $IsAlloc(##args'#0, TSeq(Tclass._module.Expression()), $Heap);
        ##stsC'#0 := Lit(Set#Empty(): Set);
        // assume allocatedness for argument to function
        assume $IsAlloc(##stsC'#0, TSet(Tclass._module.StateC()), $Heap);
        assert {:id "id711"} {:subsumption 0} (forall arg#5: DatatypeType :: 
          { Seq#Contains(##args#0, $Box(arg#5)) } 
          $Is(arg#5, Tclass._module.Expression())
             ==> 
            Seq#Contains(##args#0, $Box(arg#5))
             ==> DtRank(arg#5) < DtRank(##expr#0));
        assume (forall arg#5: DatatypeType :: 
          { Seq#Contains(##args#0, $Box(arg#5)) } 
          $Is(arg#5, Tclass._module.Expression())
             ==> 
            Seq#Contains(##args#0, $Box(arg#5))
             ==> DtRank(arg#5) < DtRank(##expr#0));
        assert {:id "id712"} 0 <= Seq#Length(args#0) + 1
           || DtRank(##expr#0) < DtRank(expr#0)
           || Seq#Length(##args#0) == Seq#Length(args#0) + 1;
        assert {:id "id713"} DtRank(##expr#0) < DtRank(expr#0)
           || (DtRank(##expr#0) == DtRank(expr#0)
             && Seq#Length(##args#0) < Seq#Length(args#0) + 1);
        assume _module.__default.evalArgsC_k#canCall(expr#0, args#0, stC#0, env#0, Lit(Seq#Empty(): Seq), Lit(Set#Empty(): Set));
        assume _module.Tuple.Pair_q(_module.__default.evalArgsC_k($LS($LZ), 
            expr#0, 
            args#0, 
            stC#0, 
            env#0, 
            Lit(Seq#Empty(): Seq), 
            Lit(Set#Empty(): Set)));
        assume {:id "id714"} _module.__default.evalArgsC($LS($LZ), expr#0, args#0, stC#0, env#0)
           == _module.__default.evalArgsC_k($LS($LZ), 
            expr#0, 
            args#0, 
            stC#0, 
            env#0, 
            Lit(Seq#Empty(): Seq), 
            Lit(Set#Empty(): Set));
        assume _module.__default.evalArgsC_k#canCall(expr#0, args#0, stC#0, env#0, Lit(Seq#Empty(): Seq), Lit(Set#Empty(): Set));
        // CheckWellformedWithResult: any expression
        assume $Is(_module.__default.evalArgsC($LS($LZ), expr#0, args#0, stC#0, env#0), 
          Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())));
        return;

        assume false;
    }
}



// function declaration for _module._default.evalArgsC'
function _module.__default.evalArgsC_k($ly: LayerType, 
    expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box, 
    args'#0: Seq, 
    stsC'#0: Set)
   : DatatypeType
uses {
// consequence axiom for _module.__default.evalArgsC_k
axiom 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      expr#0: DatatypeType, 
      args#0: Seq, 
      stC#0: DatatypeType, 
      env#0: Box, 
      args'#0: Seq, 
      stsC'#0: Set :: 
    { _module.__default.evalArgsC_k($ly, expr#0, args#0, stC#0, env#0, args'#0, stsC'#0) } 
    _module.__default.evalArgsC_k#canCall(expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && $Is(args'#0, TSeq(Tclass._module.Expression()))
           && $Is(stsC'#0, TSet(Tclass._module.StateC()))
           && (forall arg#0: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#0)) } 
            $Is(arg#0, Tclass._module.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#0))
               ==> DtRank(arg#0) < DtRank(expr#0)))
       ==> $Is(_module.__default.evalArgsC_k($ly, expr#0, args#0, stC#0, env#0, args'#0, stsC'#0), 
        Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC()))));
// definition axiom for _module.__default.evalArgsC_k (revealed)
axiom {:id "id715"} 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      expr#0: DatatypeType, 
      args#0: Seq, 
      stC#0: DatatypeType, 
      env#0: Box, 
      args'#0: Seq, 
      stsC'#0: Set :: 
    { _module.__default.evalArgsC_k($LS($ly), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0) } 
    _module.__default.evalArgsC_k#canCall(expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && $Is(args'#0, TSeq(Tclass._module.Expression()))
           && $Is(stsC'#0, TSet(Tclass._module.StateC()))
           && (forall arg#1: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#1)) } 
            $Is(arg#1, Tclass._module.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#1))
               ==> DtRank(arg#1) < DtRank(expr#0)))
       ==> (!Seq#Equal(args#0, Seq#Empty(): Seq)
           ==> (var arg#2 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType; 
            _module.__default.evalC#canCall(arg#2, stC#0, env#0)
               && (var result#0 := _module.__default.evalC($ly, arg#2, stC#0, env#0); 
                _module.Tuple.Pair_q(result#0)
                   && _module.Tuple.Pair_q(result#0)
                   && (var arg'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
                      $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
                    _module.__default.evalArgsC_k#canCall(expr#0, 
                      Seq#Drop(args#0, LitInt(1)), 
                      stC#0, 
                      env#0, 
                      Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#0))), 
                      Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#0))))))))
         && _module.__default.evalArgsC_k($LS($ly), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
           == (if Seq#Equal(args#0, Seq#Empty(): Seq)
             then #_module.Tuple.Pair($Box(args'#0), $Box(stsC'#0))
             else (var arg#2 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType; 
              (var result#0 := _module.__default.evalC($ly, arg#2, stC#0, env#0); 
                (var arg'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
                    $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
                  _module.__default.evalArgsC_k($ly, 
                    expr#0, 
                    Seq#Drop(args#0, LitInt(1)), 
                    stC#0, 
                    env#0, 
                    Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#0))), 
                    Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#0)))))))));
// definition axiom for _module.__default.evalArgsC_k for decreasing-related literals (revealed)
axiom {:id "id716"} 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      expr#0: DatatypeType, 
      args#0: Seq, 
      stC#0: DatatypeType, 
      env#0: Box, 
      args'#0: Seq, 
      stsC'#0: Set :: 
    {:weight 3} { _module.__default.evalArgsC_k($LS($ly), Lit(expr#0), Lit(args#0), stC#0, env#0, args'#0, stsC'#0) } 
    _module.__default.evalArgsC_k#canCall(Lit(expr#0), Lit(args#0), stC#0, env#0, args'#0, stsC'#0)
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && $Is(args'#0, TSeq(Tclass._module.Expression()))
           && $Is(stsC'#0, TSet(Tclass._module.StateC()))
           && (forall arg#3: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#3)) } 
            $Is(arg#3, Tclass._module.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#3))
               ==> DtRank(arg#3) < DtRank(expr#0)))
       ==> (!Seq#Equal(args#0, Seq#Empty(): Seq)
           ==> (var arg#4 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType; 
            _module.__default.evalC#canCall(arg#4, stC#0, env#0)
               && (var result#1 := _module.__default.evalC($LS($ly), arg#4, stC#0, env#0); 
                _module.Tuple.Pair_q(result#1)
                   && _module.Tuple.Pair_q(result#1)
                   && (var arg'#1, stC'#1 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType, 
                      $Unbox(_module.Tuple.snd(result#1)): DatatypeType; 
                    _module.__default.evalArgsC_k#canCall(Lit(expr#0), 
                      Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                      stC#0, 
                      env#0, 
                      Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#1))), 
                      Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#1))))))))
         && _module.__default.evalArgsC_k($LS($ly), Lit(expr#0), Lit(args#0), stC#0, env#0, args'#0, stsC'#0)
           == (if Seq#Equal(args#0, Seq#Empty(): Seq)
             then #_module.Tuple.Pair($Box(args'#0), $Box(stsC'#0))
             else (var arg#4 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType; 
              (var result#1 := _module.__default.evalC($LS($ly), arg#4, stC#0, env#0); 
                (var arg'#1, stC'#1 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType, 
                    $Unbox(_module.Tuple.snd(result#1)): DatatypeType; 
                  _module.__default.evalArgsC_k($LS($ly), 
                    Lit(expr#0), 
                    Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                    stC#0, 
                    env#0, 
                    Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#1))), 
                    Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#1)))))))));
// definition axiom for _module.__default.evalArgsC_k for all literals (revealed)
axiom {:id "id717"} 6 <= $FunctionContextHeight
   ==> (forall $ly: LayerType, 
      expr#0: DatatypeType, 
      args#0: Seq, 
      stC#0: DatatypeType, 
      env#0: Box, 
      args'#0: Seq, 
      stsC'#0: Set :: 
    {:weight 3} { _module.__default.evalArgsC_k($LS($ly), 
        Lit(expr#0), 
        Lit(args#0), 
        Lit(stC#0), 
        Lit(env#0), 
        Lit(args'#0), 
        Lit(stsC'#0)) } 
    _module.__default.evalArgsC_k#canCall(Lit(expr#0), Lit(args#0), Lit(stC#0), Lit(env#0), Lit(args'#0), Lit(stsC'#0))
         || (6 < $FunctionContextHeight
           && 
          $Is(expr#0, Tclass._module.Expression())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && $IsBox(env#0, Tclass._module.Env())
           && $Is(args'#0, TSeq(Tclass._module.Expression()))
           && $Is(stsC'#0, TSet(Tclass._module.StateC()))
           && (forall arg#5: DatatypeType :: 
            { Seq#Contains(args#0, $Box(arg#5)) } 
            $Is(arg#5, Tclass._module.Expression())
               ==> 
              Seq#Contains(args#0, $Box(arg#5))
               ==> DtRank(arg#5) < DtRank(expr#0)))
       ==> (!Seq#Equal(args#0, Seq#Empty(): Seq)
           ==> (var arg#6 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType; 
            _module.__default.evalC#canCall(arg#6, Lit(stC#0), Lit(env#0))
               && (var result#2 := _module.__default.evalC($LS($ly), arg#6, Lit(stC#0), Lit(env#0)); 
                _module.Tuple.Pair_q(result#2)
                   && _module.Tuple.Pair_q(result#2)
                   && (var arg'#2, stC'#2 := $Unbox(_module.Tuple.fst(result#2)): DatatypeType, 
                      $Unbox(_module.Tuple.snd(result#2)): DatatypeType; 
                    _module.__default.evalArgsC_k#canCall(Lit(expr#0), 
                      Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                      Lit(stC#0), 
                      Lit(env#0), 
                      Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#2))), 
                      Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#2))))))))
         && _module.__default.evalArgsC_k($LS($ly), 
            Lit(expr#0), 
            Lit(args#0), 
            Lit(stC#0), 
            Lit(env#0), 
            Lit(args'#0), 
            Lit(stsC'#0))
           == (if Seq#Equal(args#0, Seq#Empty(): Seq)
             then #_module.Tuple.Pair($Box(Lit(args'#0)), $Box(Lit(stsC'#0)))
             else (var arg#6 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType; 
              (var result#2 := _module.__default.evalC($LS($ly), arg#6, Lit(stC#0), Lit(env#0)); 
                (var arg'#2, stC'#2 := $Unbox(_module.Tuple.fst(result#2)): DatatypeType, 
                    $Unbox(_module.Tuple.snd(result#2)): DatatypeType; 
                  _module.__default.evalArgsC_k($LS($ly), 
                    Lit(expr#0), 
                    Lit(Seq#Drop(Lit(args#0), LitInt(1))), 
                    Lit(stC#0), 
                    Lit(env#0), 
                    Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#2))), 
                    Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#2)))))))));
}

function _module.__default.evalArgsC_k#canCall(expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box, 
    args'#0: Seq, 
    stsC'#0: Set)
   : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, 
    expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box, 
    args'#0: Seq, 
    stsC'#0: Set :: 
  { _module.__default.evalArgsC_k($LS($ly), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0) } 
  _module.__default.evalArgsC_k($LS($ly), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
     == _module.__default.evalArgsC_k($ly, expr#0, args#0, stC#0, env#0, args'#0, stsC'#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, 
    expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box, 
    args'#0: Seq, 
    stsC'#0: Set :: 
  { _module.__default.evalArgsC_k(AsFuelBottom($ly), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0) } 
  _module.__default.evalArgsC_k($ly, expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
     == _module.__default.evalArgsC_k($LZ, expr#0, args#0, stC#0, env#0, args'#0, stsC'#0));

function _module.__default.evalArgsC_k#requires(LayerType, DatatypeType, Seq, DatatypeType, Box, Seq, Set) : bool;

// #requires axiom for _module.__default.evalArgsC_k
axiom (forall $ly: LayerType, 
    expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box, 
    args'#0: Seq, 
    stsC'#0: Set :: 
  { _module.__default.evalArgsC_k#requires($ly, expr#0, args#0, stC#0, env#0, args'#0, stsC'#0) } 
  $Is(expr#0, Tclass._module.Expression())
       && $Is(args#0, TSeq(Tclass._module.Expression()))
       && $Is(stC#0, Tclass._module.StateC())
       && $IsBox(env#0, Tclass._module.Env())
       && $Is(args'#0, TSeq(Tclass._module.Expression()))
       && $Is(stsC'#0, TSet(Tclass._module.StateC()))
     ==> _module.__default.evalArgsC_k#requires($ly, expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
       == (forall arg#1: DatatypeType :: 
        { Seq#Contains(args#0, $Box(arg#1)) } 
        $Is(arg#1, Tclass._module.Expression())
           ==> 
          Seq#Contains(args#0, $Box(arg#1))
           ==> DtRank(arg#1) < DtRank(expr#0)));

procedure {:verboseName "evalArgsC' (well-formedness)"} CheckWellformed$$_module.__default.evalArgsC_k(expr#0: DatatypeType where $Is(expr#0, Tclass._module.Expression()), 
    args#0: Seq where $Is(args#0, TSeq(Tclass._module.Expression())), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()), 
    env#0: Box where $IsBox(env#0, Tclass._module.Env()), 
    args'#0: Seq where $Is(args'#0, TSeq(Tclass._module.Expression())), 
    stsC'#0: Set where $Is(stsC'#0, TSet(Tclass._module.StateC())));
  free requires 6 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "evalArgsC' (well-formedness)"} CheckWellformed$$_module.__default.evalArgsC_k(expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box, 
    args'#0: Seq, 
    stsC'#0: Set)
{
  var $_ReadsFrame: [ref,Field]bool;
  var arg#7: DatatypeType;
  var arg#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##stC#0: DatatypeType;
  var ##env#0: Box;
  var arg'#Z#0: DatatypeType;
  var stC'#Z#0: DatatypeType;
  var let#2#0#0: DatatypeType;
  var let#2#1#0: DatatypeType;
  var ##expr#1: DatatypeType;
  var ##args#0: Seq;
  var ##stC#1: DatatypeType;
  var ##env#1: Box;
  var ##args'#0: Seq;
  var ##stsC'#0: Set;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    havoc arg#7;
    assume $Is(arg#7, Tclass._module.Expression())
       && $IsAlloc(arg#7, Tclass._module.Expression(), $Heap);
    if (*)
    {
        assume {:id "id718"} Seq#Contains(args#0, $Box(arg#7));
        assume {:id "id719"} DtRank(arg#7) < DtRank(expr#0);
    }
    else
    {
        assume {:id "id720"} Seq#Contains(args#0, $Box(arg#7)) ==> DtRank(arg#7) < DtRank(expr#0);
    }

    assume {:id "id721"} (forall arg#0: DatatypeType :: 
      { Seq#Contains(args#0, $Box(arg#0)) } 
      $Is(arg#0, Tclass._module.Expression())
         ==> 
        Seq#Contains(args#0, $Box(arg#0))
         ==> DtRank(arg#0) < DtRank(expr#0));
    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume $Is(_module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0), 
          Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())));
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (Seq#Equal(args#0, Seq#Empty(): Seq))
        {
            assume {:id "id722"} _module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
               == #_module.Tuple.Pair($Box(args'#0), $Box(stsC'#0));
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0), 
              Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())));
            return;
        }
        else
        {
            havoc arg#Z#0;
            assert {:id "id723"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
            assume {:id "id724"} let#0#0#0 == $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.Expression());
            assume {:id "id725"} arg#Z#0 == let#0#0#0;
            havoc result#Z#0;
            ##expr#0 := arg#Z#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#0, Tclass._module.Expression(), $Heap);
            ##stC#0 := stC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
            ##env#0 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
            assert {:id "id726"} DtRank(##expr#0) < DtRank(expr#0);
            assume _module.__default.evalC#canCall(arg#Z#0, stC#0, env#0);
            assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), arg#Z#0, stC#0, env#0));
            assume {:id "id727"} let#1#0#0 == _module.__default.evalC($LS($LZ), arg#Z#0, stC#0, env#0);
            assume _module.__default.evalC#canCall(arg#Z#0, stC#0, env#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#1#0#0, 
              Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
            assume {:id "id728"} result#Z#0 == let#1#0#0;
            havoc arg'#Z#0;
            havoc stC'#Z#0;
            assume _module.Tuple.Pair_q(result#Z#0);
            assume {:id "id729"} let#2#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
            assume _module.Tuple.Pair_q(result#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#0#0, Tclass._module.Expression());
            assume {:id "id730"} arg'#Z#0 == let#2#0#0;
            assume _module.Tuple.Pair_q(result#Z#0);
            assume {:id "id731"} let#2#1#0 == $Unbox(_module.Tuple.snd(result#Z#0)): DatatypeType;
            assume _module.Tuple.Pair_q(result#Z#0);
            // CheckWellformedWithResult: any expression
            assume $Is(let#2#1#0, Tclass._module.StateC());
            assume {:id "id732"} stC'#Z#0 == let#2#1#0;
            ##expr#1 := expr#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#1, Tclass._module.Expression(), $Heap);
            assert {:id "id733"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(args#0);
            ##args#0 := Seq#Drop(args#0, LitInt(1));
            // assume allocatedness for argument to function
            assume $IsAlloc(##args#0, TSeq(Tclass._module.Expression()), $Heap);
            ##stC#1 := stC#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
            ##env#1 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#1, Tclass._module.Env(), $Heap);
            ##args'#0 := Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#Z#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##args'#0, TSeq(Tclass._module.Expression()), $Heap);
            ##stsC'#0 := Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#Z#0)));
            // assume allocatedness for argument to function
            assume $IsAlloc(##stsC'#0, TSet(Tclass._module.StateC()), $Heap);
            assert {:id "id734"} {:subsumption 0} (forall arg#8: DatatypeType :: 
              { Seq#Contains(##args#0, $Box(arg#8)) } 
              $Is(arg#8, Tclass._module.Expression())
                 ==> 
                Seq#Contains(##args#0, $Box(arg#8))
                 ==> DtRank(arg#8) < DtRank(##expr#1));
            assume (forall arg#8: DatatypeType :: 
              { Seq#Contains(##args#0, $Box(arg#8)) } 
              $Is(arg#8, Tclass._module.Expression())
                 ==> 
                Seq#Contains(##args#0, $Box(arg#8))
                 ==> DtRank(arg#8) < DtRank(##expr#1));
            assert {:id "id735"} 0 <= Seq#Length(args#0)
               || DtRank(##expr#1) < DtRank(expr#0)
               || Seq#Length(##args#0) == Seq#Length(args#0);
            assert {:id "id736"} DtRank(##expr#1) < DtRank(expr#0)
               || (DtRank(##expr#1) == DtRank(expr#0)
                 && Seq#Length(##args#0) < Seq#Length(args#0));
            assume _module.__default.evalArgsC_k#canCall(expr#0, 
              Seq#Drop(args#0, LitInt(1)), 
              stC#0, 
              env#0, 
              Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#Z#0))), 
              Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#Z#0))));
            assume _module.Tuple.Pair_q(_module.__default.evalArgsC_k($LS($LZ), 
                expr#0, 
                Seq#Drop(args#0, LitInt(1)), 
                stC#0, 
                env#0, 
                Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#Z#0))), 
                Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#Z#0)))));
            assume {:id "id737"} _module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
               == _module.__default.evalArgsC_k($LS($LZ), 
                expr#0, 
                Seq#Drop(args#0, LitInt(1)), 
                stC#0, 
                env#0, 
                Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#Z#0))), 
                Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#Z#0))));
            assume _module.__default.evalArgsC_k#canCall(expr#0, 
              Seq#Drop(args#0, LitInt(1)), 
              stC#0, 
              env#0, 
              Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#Z#0))), 
              Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#Z#0))));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0), 
              Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())));
            return;
        }

        assume false;
    }
}



// function declaration for _module._default.ValidArgsC
function _module.__default.ValidArgsC(prim#0: DatatypeType, args#0: Seq, stC#0: DatatypeType) : bool
uses {
// definition axiom for _module.__default.ValidArgsC (revealed)
axiom {:id "id738"} 5 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType, args#0: Seq, stC#0: DatatypeType :: 
    { _module.__default.ValidArgsC(prim#0, args#0, stC#0) } 
    _module.__default.ValidArgsC#canCall(prim#0, args#0, stC#0)
         || (5 < $FunctionContextHeight
           && 
          $Is(prim#0, Tclass._module.Primitive())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && 
          (_module.Primitive.primExec_q(prim#0) ==> Seq#Length(args#0) == LitInt(3))
           && (_module.Primitive.primCreatePath_q(prim#0) ==> Seq#Length(args#0) == LitInt(1)))
       ==> (!_module.Primitive.primCreatePath_q(prim#0)
           ==> (var cmd#1, deps#1, exts#1 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
              $Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType, 
              $Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType; 
            _module.Expression.exprLiteral_q(cmd#1)
               ==> 
              _module.Literal.litString_q(_module.Expression.lit(cmd#1))
               ==> 
              _module.Expression.exprLiteral_q(deps#1)
               ==> 
              _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#1))
               ==> 
              _module.Expression.exprLiteral_q(exts#1)
               ==> 
              _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#1))
               ==> _module.StateC.S_q(stC#0)
                 && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                 && (Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#1)), 
                    _module.__default.DomSt(_module.StateC.st(stC#0)))
                   ==> _module.__default.PreC#canCall(cmd#1, deps#1, exts#1, stC#0))))
         && _module.__default.ValidArgsC(prim#0, args#0, stC#0)
           == (if _module.Primitive.primCreatePath_q(prim#0)
             then false
             else (var cmd#0, deps#0, exts#0 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType, 
                $Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType, 
                $Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType; 
              _module.Expression.exprLiteral_q(cmd#0)
                 && _module.Literal.litString_q(_module.Expression.lit(cmd#0))
                 && _module.Expression.exprLiteral_q(deps#0)
                 && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#0))
                 && _module.Expression.exprLiteral_q(exts#0)
                 && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#0))
                 && Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#0)), 
                  _module.__default.DomSt(_module.StateC.st(stC#0)))
                 && _module.__default.PreC(cmd#0, deps#0, exts#0, stC#0))));
// definition axiom for _module.__default.ValidArgsC for all literals (revealed)
axiom {:id "id739"} 5 <= $FunctionContextHeight
   ==> (forall prim#0: DatatypeType, args#0: Seq, stC#0: DatatypeType :: 
    {:weight 3} { _module.__default.ValidArgsC(Lit(prim#0), Lit(args#0), Lit(stC#0)) } 
    _module.__default.ValidArgsC#canCall(Lit(prim#0), Lit(args#0), Lit(stC#0))
         || (5 < $FunctionContextHeight
           && 
          $Is(prim#0, Tclass._module.Primitive())
           && $Is(args#0, TSeq(Tclass._module.Expression()))
           && $Is(stC#0, Tclass._module.StateC())
           && 
          (_module.Primitive.primExec_q(Lit(prim#0))
             ==> Seq#Length(Lit(args#0)) == LitInt(3))
           && (_module.Primitive.primCreatePath_q(Lit(prim#0))
             ==> Seq#Length(Lit(args#0)) == LitInt(1)))
       ==> (!Lit(_module.Primitive.primCreatePath_q(Lit(prim#0)))
           ==> (var cmd#3, deps#3, exts#3 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
              $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
            _module.Expression.exprLiteral_q(cmd#3)
               ==> 
              _module.Literal.litString_q(_module.Expression.lit(cmd#3))
               ==> 
              _module.Expression.exprLiteral_q(deps#3)
               ==> 
              _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#3))
               ==> 
              _module.Expression.exprLiteral_q(exts#3)
               ==> 
              _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#3))
               ==> _module.StateC.S_q(Lit(stC#0))
                 && _module.__default.DomSt#canCall(Lit(_module.StateC.st(Lit(stC#0))))
                 && (Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#3)), 
                    _module.__default.DomSt(Lit(_module.StateC.st(Lit(stC#0)))))
                   ==> _module.__default.PreC#canCall(cmd#3, deps#3, exts#3, Lit(stC#0)))))
         && _module.__default.ValidArgsC(Lit(prim#0), Lit(args#0), Lit(stC#0))
           == (if _module.Primitive.primCreatePath_q(Lit(prim#0))
             then false
             else (var cmd#2, deps#2, exts#2 := $Unbox(Seq#Index(Lit(args#0), LitInt(0))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(1))): DatatypeType, 
                $Unbox(Seq#Index(Lit(args#0), LitInt(2))): DatatypeType; 
              _module.Expression.exprLiteral_q(cmd#2)
                 && _module.Literal.litString_q(_module.Expression.lit(cmd#2))
                 && _module.Expression.exprLiteral_q(deps#2)
                 && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#2))
                 && _module.Expression.exprLiteral_q(exts#2)
                 && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#2))
                 && Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#2)), 
                  _module.__default.DomSt(Lit(_module.StateC.st(Lit(stC#0)))))
                 && _module.__default.PreC(cmd#2, deps#2, exts#2, Lit(stC#0)))));
}

function _module.__default.ValidArgsC#canCall(prim#0: DatatypeType, args#0: Seq, stC#0: DatatypeType) : bool;

function _module.__default.ValidArgsC#requires(DatatypeType, Seq, DatatypeType) : bool;

// #requires axiom for _module.__default.ValidArgsC
axiom (forall prim#0: DatatypeType, args#0: Seq, stC#0: DatatypeType :: 
  { _module.__default.ValidArgsC#requires(prim#0, args#0, stC#0) } 
  $Is(prim#0, Tclass._module.Primitive())
       && $Is(args#0, TSeq(Tclass._module.Expression()))
       && $Is(stC#0, Tclass._module.StateC())
     ==> _module.__default.ValidArgsC#requires(prim#0, args#0, stC#0)
       == ((_module.Primitive.primExec_q(prim#0) ==> Seq#Length(args#0) == LitInt(3))
         && (_module.Primitive.primCreatePath_q(prim#0) ==> Seq#Length(args#0) == LitInt(1))));

procedure {:verboseName "ValidArgsC (well-formedness)"} CheckWellformed$$_module.__default.ValidArgsC(prim#0: DatatypeType where $Is(prim#0, Tclass._module.Primitive()), 
    args#0: Seq where $Is(args#0, TSeq(Tclass._module.Expression())), 
    stC#0: DatatypeType where $Is(stC#0, Tclass._module.StateC()));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "ValidArgsC (well-formedness)"} CheckWellformed$$_module.__default.ValidArgsC(prim#0: DatatypeType, args#0: Seq, stC#0: DatatypeType)
{
  var $_ReadsFrame: [ref,Field]bool;
  var cmd#Z#0: DatatypeType;
  var deps#Z#0: DatatypeType;
  var exts#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var let#0#1#0: DatatypeType;
  var let#0#2#0: DatatypeType;
  var ##st#0: Box;
  var ##cmd#0: DatatypeType;
  var ##deps#0: DatatypeType;
  var ##exts#0: DatatypeType;
  var ##stC#0: DatatypeType;


    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    // Check well-formedness of preconditions, and then assume them
    if (*)
    {
        assume {:id "id740"} _module.Primitive.primExec_q(prim#0);
        assume {:id "id741"} Seq#Length(args#0) == LitInt(3);
    }
    else
    {
        assume {:id "id742"} _module.Primitive.primExec_q(prim#0) ==> Seq#Length(args#0) == LitInt(3);
    }

    if (*)
    {
        assume {:id "id743"} _module.Primitive.primCreatePath_q(prim#0);
        assume {:id "id744"} Seq#Length(args#0) == LitInt(1);
    }
    else
    {
        assume {:id "id745"} _module.Primitive.primCreatePath_q(prim#0) ==> Seq#Length(args#0) == LitInt(1);
    }

    // Check well-formedness of the reads clause
    // Check well-formedness of the decreases clause
    // Check body and ensures clauses
    if (*)
    {
        // Check well-formedness of postcondition and assume false
        assume false;
    }
    else
    {
        // Check well-formedness of body and result subset type constraint
        if (prim#0 == #_module.Primitive.primCreatePath())
        {
            assume {:id "id768"} _module.__default.ValidArgsC(prim#0, args#0, stC#0) == Lit(false);
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.ValidArgsC(prim#0, args#0, stC#0), TBool);
            return;
        }
        else if (prim#0 == #_module.Primitive.primExec())
        {
            havoc cmd#Z#0;
            havoc deps#Z#0;
            havoc exts#Z#0;
            assert {:id "id746"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
            assume {:id "id747"} let#0#0#0 == $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#0#0, Tclass._module.Expression());
            assume {:id "id748"} cmd#Z#0 == let#0#0#0;
            assert {:id "id749"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args#0);
            assume {:id "id750"} let#0#1#0 == $Unbox(Seq#Index(args#0, LitInt(1))): DatatypeType;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#1#0, Tclass._module.Expression());
            assume {:id "id751"} deps#Z#0 == let#0#1#0;
            assert {:id "id752"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args#0);
            assume {:id "id753"} let#0#2#0 == $Unbox(Seq#Index(args#0, LitInt(2))): DatatypeType;
            assume true;
            // CheckWellformedWithResult: any expression
            assume $Is(let#0#2#0, Tclass._module.Expression());
            assume {:id "id754"} exts#Z#0 == let#0#2#0;
            if (_module.Expression.exprLiteral_q(cmd#Z#0))
            {
                assert {:id "id755"} _module.Expression.exprLiteral_q(cmd#Z#0);
            }

            if (_module.Expression.exprLiteral_q(cmd#Z#0)
               && _module.Literal.litString_q(_module.Expression.lit(cmd#Z#0)))
            {
            }

            if (_module.Expression.exprLiteral_q(cmd#Z#0)
               && _module.Literal.litString_q(_module.Expression.lit(cmd#Z#0))
               && _module.Expression.exprLiteral_q(deps#Z#0))
            {
                assert {:id "id756"} _module.Expression.exprLiteral_q(deps#Z#0);
            }

            if (_module.Expression.exprLiteral_q(cmd#Z#0)
               && _module.Literal.litString_q(_module.Expression.lit(cmd#Z#0))
               && _module.Expression.exprLiteral_q(deps#Z#0)
               && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#Z#0)))
            {
            }

            if (_module.Expression.exprLiteral_q(cmd#Z#0)
               && _module.Literal.litString_q(_module.Expression.lit(cmd#Z#0))
               && _module.Expression.exprLiteral_q(deps#Z#0)
               && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#Z#0))
               && _module.Expression.exprLiteral_q(exts#Z#0))
            {
                assert {:id "id757"} _module.Expression.exprLiteral_q(exts#Z#0);
            }

            if (_module.Expression.exprLiteral_q(cmd#Z#0)
               && _module.Literal.litString_q(_module.Expression.lit(cmd#Z#0))
               && _module.Expression.exprLiteral_q(deps#Z#0)
               && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#Z#0))
               && _module.Expression.exprLiteral_q(exts#Z#0)
               && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#Z#0)))
            {
                assert {:id "id758"} _module.Expression.exprLiteral_q(deps#Z#0);
                assert {:id "id759"} _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#Z#0));
                assume _module.StateC.S_q(stC#0);
                ##st#0 := _module.StateC.st(stC#0);
                // assume allocatedness for argument to function
                assume $IsAllocBox(##st#0, Tclass._module.State(), $Heap);
                assume _module.__default.DomSt#canCall(_module.StateC.st(stC#0));
            }

            if (_module.Expression.exprLiteral_q(cmd#Z#0)
               && _module.Literal.litString_q(_module.Expression.lit(cmd#Z#0))
               && _module.Expression.exprLiteral_q(deps#Z#0)
               && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#Z#0))
               && _module.Expression.exprLiteral_q(exts#Z#0)
               && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#Z#0))
               && Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#Z#0)), 
                _module.__default.DomSt(_module.StateC.st(stC#0))))
            {
                ##cmd#0 := cmd#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##cmd#0, Tclass._module.Expression(), $Heap);
                ##deps#0 := deps#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##deps#0, Tclass._module.Expression(), $Heap);
                ##exts#0 := exts#Z#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##exts#0, Tclass._module.Expression(), $Heap);
                ##stC#0 := stC#0;
                // assume allocatedness for argument to function
                assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
                assert {:id "id760"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#0);
                assert {:id "id761"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#0));
                assert {:id "id762"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#0);
                assert {:id "id763"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0));
                assert {:id "id764"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#0);
                assert {:id "id765"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0));
                assert {:id "id766"} {:subsumption 0} Set#Subset(_module.Literal.paths(_module.Expression.lit(##deps#0)), 
                  _module.__default.DomSt(_module.StateC.st(##stC#0)));
                assume _module.Expression.exprLiteral_q(##cmd#0)
                   && _module.Literal.litString_q(_module.Expression.lit(##cmd#0))
                   && _module.Expression.exprLiteral_q(##deps#0)
                   && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#0))
                   && _module.Expression.exprLiteral_q(##exts#0)
                   && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#0))
                   && Set#Subset(_module.Literal.paths(_module.Expression.lit(##deps#0)), 
                    _module.__default.DomSt(_module.StateC.st(##stC#0)));
                assume _module.__default.PreC#canCall(cmd#Z#0, deps#Z#0, exts#Z#0, stC#0);
            }

            assume {:id "id767"} _module.__default.ValidArgsC(prim#0, args#0, stC#0)
               == (
                _module.Expression.exprLiteral_q(cmd#Z#0)
                 && _module.Literal.litString_q(_module.Expression.lit(cmd#Z#0))
                 && _module.Expression.exprLiteral_q(deps#Z#0)
                 && _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#Z#0))
                 && _module.Expression.exprLiteral_q(exts#Z#0)
                 && _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#Z#0))
                 && Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#Z#0)), 
                  _module.__default.DomSt(_module.StateC.st(stC#0)))
                 && _module.__default.PreC(cmd#Z#0, deps#Z#0, exts#Z#0, stC#0));
            assume _module.Expression.exprLiteral_q(cmd#Z#0)
               ==> 
              _module.Literal.litString_q(_module.Expression.lit(cmd#Z#0))
               ==> 
              _module.Expression.exprLiteral_q(deps#Z#0)
               ==> 
              _module.Literal.litArrOfPaths_q(_module.Expression.lit(deps#Z#0))
               ==> 
              _module.Expression.exprLiteral_q(exts#Z#0)
               ==> 
              _module.Literal.litArrOfStrings_q(_module.Expression.lit(exts#Z#0))
               ==> _module.StateC.S_q(stC#0)
                 && _module.__default.DomSt#canCall(_module.StateC.st(stC#0))
                 && (Set#Subset(_module.Literal.paths(_module.Expression.lit(deps#Z#0)), 
                    _module.__default.DomSt(_module.StateC.st(stC#0)))
                   ==> _module.__default.PreC#canCall(cmd#Z#0, deps#Z#0, exts#Z#0, stC#0));
            // CheckWellformedWithResult: any expression
            assume $Is(_module.__default.ValidArgsC(prim#0, args#0, stC#0), TBool);
            return;
        }
        else
        {
            assume false;
        }

        assume false;
    }
}



procedure {:verboseName "CachedBuildsTheorem (well-formedness)"} CheckWellFormed$$_module.__default.CachedBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass._module.Program())
         && $IsAlloc(prog#0, Tclass._module.Program(), $Heap)
         && $IsA#_module.Program(prog#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0));
  free requires 10 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "CachedBuildsTheorem (well-formedness)"} CheckWellFormed$$_module.__default.CachedBuildsTheorem(prog#0: DatatypeType, stC#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##stC#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##prog#0: DatatypeType;
  var ##stC#1: DatatypeType;
  var expr'#Z#0: DatatypeType;
  var stC'#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: DatatypeType;
  var ##stC#2: DatatypeType;


    // AddMethodImpl: CachedBuildsTheorem, CheckWellFormed$$_module.__default.CachedBuildsTheorem
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume _module.Program.Program_q(prog#0);
    ##stmts#0 := _module.Program.stmts(prog#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass._module.Statement()), $Heap);
    assume _module.__default.Legal#canCall(_module.Program.stmts(prog#0));
    assume {:id "id769"} _module.__default.Legal(_module.Program.stmts(prog#0));
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id770"} _module.__default.ConsistentCache(stC#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##prog#0 := prog#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##prog#0, Tclass._module.Program(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
    assert {:id "id771"} {:subsumption 0} _module.__default.Legal#canCall(_module.Program.stmts(##prog#0))
       ==> _module.__default.Legal(_module.Program.stmts(##prog#0))
         || Seq#Length(_module.Program.stmts(##prog#0)) != 0;
    assume _module.__default.Legal(_module.Program.stmts(##prog#0));
    assume _module.__default.buildC#canCall(prog#0, stC#0);
    assume _module.Tuple.Pair_q(_module.__default.buildC(prog#0, stC#0));
    assume {:id "id772"} let#0#0#0 == _module.__default.buildC(prog#0, stC#0);
    assume _module.__default.buildC#canCall(prog#0, stC#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, 
      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
    assume {:id "id773"} result#Z#0 == let#0#0#0;
    havoc expr'#Z#0;
    havoc stC'#Z#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id774"} let#1#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass._module.Expression());
    assume {:id "id775"} expr'#Z#0 == let#1#0#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id776"} let#1#1#0 == $Unbox(_module.Tuple.snd(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#1#0, Tclass._module.StateC());
    assume {:id "id777"} stC'#Z#0 == let#1#1#0;
    ##stC#2 := stC'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC'#Z#0);
    if (_module.__default.ConsistentCache(stC'#Z#0))
    {
    }

    if (_module.__default.ConsistentCache(stC'#Z#0)
       && _module.Expression.exprError_q(expr'#Z#0))
    {
        assert {:id "id778"} _module.Expression.exprError_q(expr'#Z#0);
    }

    assume {:id "id779"} (var result#0 := _module.__default.buildC(prog#0, stC#0); 
      (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
          $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
        _module.__default.ConsistentCache(stC'#0)
             && _module.Expression.exprError_q(expr'#0)
           ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache())));
}



procedure {:verboseName "CachedBuildsTheorem (call)"} Call$$_module.__default.CachedBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass._module.Program())
         && $IsAlloc(prog#0, Tclass._module.Program(), $Heap)
         && $IsA#_module.Program(prog#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0));
  // user-defined preconditions
  requires {:id "id780"} _module.__default.Legal#canCall(_module.Program.stmts(prog#0))
     ==> _module.__default.Legal(_module.Program.stmts(prog#0))
       || Seq#Length(_module.Program.stmts(prog#0)) != 0;
  requires {:id "id781"} _module.__default.ConsistentCache#canCall(stC#0)
     ==> _module.__default.ConsistentCache(stC#0)
       || (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
        { _module.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, Tclass._module.Expression())
             && $Is(deps#0, Tclass._module.Expression())
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#0))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.buildC#canCall(prog#0, stC#0)
     && (var result#0 := _module.__default.buildC(prog#0, stC#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.__default.ConsistentCache#canCall(stC'#0)
             && (_module.__default.ConsistentCache(stC'#0)
               ==> 
              _module.Expression.exprError_q(expr'#0)
               ==> $IsA#_module.Reason(_module.Expression.r(expr'#0)))));
  ensures {:id "id782"} (var result#0 := _module.__default.buildC(prog#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache(stC'#0)
           && _module.Expression.exprError_q(expr'#0)
         ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache())));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "CachedBuildsTheorem (correctness)"} Impl$$_module.__default.CachedBuildsTheorem(prog#0: DatatypeType
       where $Is(prog#0, Tclass._module.Program())
         && $IsAlloc(prog#0, Tclass._module.Program(), $Heap)
         && $IsA#_module.Program(prog#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0))
   returns ($_reverifyPost: bool);
  free requires 10 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id783"} _module.__default.Legal#canCall(_module.Program.stmts(prog#0))
     && 
    _module.__default.Legal(_module.Program.stmts(prog#0))
     && Seq#Length(_module.Program.stmts(prog#0)) != 0;
  free requires {:id "id784"} _module.__default.ConsistentCache#canCall(stC#0)
     && 
    _module.__default.ConsistentCache(stC#0)
     && (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#1: Seq :: 
      { _module.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, Tclass._module.Expression())
           && $Is(deps#1, Tclass._module.Expression())
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#1, deps#1, e#1))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.buildC#canCall(prog#0, stC#0)
     && (var result#0 := _module.__default.buildC(prog#0, stC#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.__default.ConsistentCache#canCall(stC'#0)
             && (_module.__default.ConsistentCache(stC'#0)
               ==> 
              _module.Expression.exprError_q(expr'#0)
               ==> $IsA#_module.Reason(_module.Expression.r(expr'#0)))));
  ensures {:id "id785"} (var result#0 := _module.__default.buildC(prog#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache(stC'#0)
           && _module.Expression.exprError_q(expr'#0)
         ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache())));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "CachedBuildsTheorem (correctness)"} Impl$$_module.__default.CachedBuildsTheorem(prog#0: DatatypeType, stC#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var prog##0: DatatypeType;
  var stC##0: DatatypeType;

    // AddMethodImpl: CachedBuildsTheorem, Impl$$_module.__default.CachedBuildsTheorem
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(522,14)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    prog##0 := prog#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##0 := stC#0;
    call {:id "id786"} Call$$_module.__default.BuildCLemma(prog##0, stC##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "BuildCLemma (well-formedness)"} CheckWellFormed$$_module.__default.BuildCLemma(prog#0: DatatypeType
       where $Is(prog#0, Tclass._module.Program())
         && $IsAlloc(prog#0, Tclass._module.Program(), $Heap)
         && $IsA#_module.Program(prog#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0));
  free requires 9 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "BuildCLemma (well-formedness)"} CheckWellFormed$$_module.__default.BuildCLemma(prog#0: DatatypeType, stC#0: DatatypeType)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##stC#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##prog#0: DatatypeType;
  var ##stC#1: DatatypeType;
  var expr'#Z#0: DatatypeType;
  var stC'#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: DatatypeType;
  var ##stC#2: DatatypeType;


    // AddMethodImpl: BuildCLemma, CheckWellFormed$$_module.__default.BuildCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume _module.Program.Program_q(prog#0);
    ##stmts#0 := _module.Program.stmts(prog#0);
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass._module.Statement()), $Heap);
    assume _module.__default.Legal#canCall(_module.Program.stmts(prog#0));
    assume {:id "id787"} _module.__default.Legal(_module.Program.stmts(prog#0));
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id788"} _module.__default.ConsistentCache(stC#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##prog#0 := prog#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##prog#0, Tclass._module.Program(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
    assert {:id "id789"} {:subsumption 0} _module.__default.Legal#canCall(_module.Program.stmts(##prog#0))
       ==> _module.__default.Legal(_module.Program.stmts(##prog#0))
         || Seq#Length(_module.Program.stmts(##prog#0)) != 0;
    assume _module.__default.Legal(_module.Program.stmts(##prog#0));
    assume _module.__default.buildC#canCall(prog#0, stC#0);
    assume _module.Tuple.Pair_q(_module.__default.buildC(prog#0, stC#0));
    assume {:id "id790"} let#0#0#0 == _module.__default.buildC(prog#0, stC#0);
    assume _module.__default.buildC#canCall(prog#0, stC#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, 
      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
    assume {:id "id791"} result#Z#0 == let#0#0#0;
    havoc expr'#Z#0;
    havoc stC'#Z#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id792"} let#1#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass._module.Expression());
    assume {:id "id793"} expr'#Z#0 == let#1#0#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id794"} let#1#1#0 == $Unbox(_module.Tuple.snd(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#1#0, Tclass._module.StateC());
    assume {:id "id795"} stC'#Z#0 == let#1#1#0;
    ##stC#2 := stC'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC'#Z#0);
    if (_module.__default.ConsistentCache(stC'#Z#0))
    {
        if (_module.Expression.exprError_q(expr'#Z#0))
        {
            assert {:id "id796"} _module.Expression.exprError_q(expr'#Z#0);
        }
    }

    assume {:id "id797"} (var result#0 := _module.__default.buildC(prog#0, stC#0); 
      (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
          $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
        _module.__default.ConsistentCache(stC'#0)
           && (_module.Expression.exprError_q(expr'#0)
             ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache()))));
}



procedure {:verboseName "BuildCLemma (call)"} Call$$_module.__default.BuildCLemma(prog#0: DatatypeType
       where $Is(prog#0, Tclass._module.Program())
         && $IsAlloc(prog#0, Tclass._module.Program(), $Heap)
         && $IsA#_module.Program(prog#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0));
  // user-defined preconditions
  requires {:id "id798"} _module.__default.Legal#canCall(_module.Program.stmts(prog#0))
     ==> _module.__default.Legal(_module.Program.stmts(prog#0))
       || Seq#Length(_module.Program.stmts(prog#0)) != 0;
  requires {:id "id799"} _module.__default.ConsistentCache#canCall(stC#0)
     ==> _module.__default.ConsistentCache(stC#0)
       || (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
        { _module.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, Tclass._module.Expression())
             && $Is(deps#0, Tclass._module.Expression())
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#0))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.buildC#canCall(prog#0, stC#0)
     && (var result#0 := _module.__default.buildC(prog#0, stC#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.__default.ConsistentCache#canCall(stC'#0)
             && (_module.__default.ConsistentCache(stC'#0)
               ==> 
              _module.Expression.exprError_q(expr'#0)
               ==> $IsA#_module.Reason(_module.Expression.r(expr'#0)))));
  free ensures {:id "id800"} (var result#0 := _module.__default.buildC(prog#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache#canCall(stC'#0)
         && 
        _module.__default.ConsistentCache(stC'#0)
         && (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#1: Seq :: 
          { _module.__default.Loc(cmd#1, deps#1, e#1) } 
          $Is(cmd#1, Tclass._module.Expression())
               && $Is(deps#1, Tclass._module.Expression())
               && $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
              _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#1)))
             ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
              $Box(_module.__default.Loc(cmd#1, deps#1, e#1))))));
  ensures {:id "id801"} (var result#0 := _module.__default.buildC(prog#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Expression.exprError_q(expr'#0)
         ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache())));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "BuildCLemma (correctness)"} Impl$$_module.__default.BuildCLemma(prog#0: DatatypeType
       where $Is(prog#0, Tclass._module.Program())
         && $IsAlloc(prog#0, Tclass._module.Program(), $Heap)
         && $IsA#_module.Program(prog#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0))
   returns ($_reverifyPost: bool);
  free requires 9 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id802"} _module.__default.Legal#canCall(_module.Program.stmts(prog#0))
     && 
    _module.__default.Legal(_module.Program.stmts(prog#0))
     && Seq#Length(_module.Program.stmts(prog#0)) != 0;
  free requires {:id "id803"} _module.__default.ConsistentCache#canCall(stC#0)
     && 
    _module.__default.ConsistentCache(stC#0)
     && (forall cmd#2: DatatypeType, deps#2: DatatypeType, e#2: Seq :: 
      { _module.__default.Loc(cmd#2, deps#2, e#2) } 
      $Is(cmd#2, Tclass._module.Expression())
           && $Is(deps#2, Tclass._module.Expression())
           && $Is(e#2, TSeq(TChar))
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#2, deps#2, e#2)))
         ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#2, deps#2, e#2))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.buildC#canCall(prog#0, stC#0)
     && (var result#0 := _module.__default.buildC(prog#0, stC#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.__default.ConsistentCache#canCall(stC'#0)
             && (_module.__default.ConsistentCache(stC'#0)
               ==> 
              _module.Expression.exprError_q(expr'#0)
               ==> $IsA#_module.Reason(_module.Expression.r(expr'#0)))));
  ensures {:id "id804"} (var result#0 := _module.__default.buildC(prog#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache#canCall(stC'#0)
         ==> _module.__default.ConsistentCache(stC'#0)
           || (forall cmd#3: DatatypeType, deps#3: DatatypeType, e#3: Seq :: 
            { _module.__default.Loc(cmd#3, deps#3, e#3) } 
            $Is(cmd#3, Tclass._module.Expression())
                 && $Is(deps#3, Tclass._module.Expression())
                 && $Is(e#3, TSeq(TChar))
               ==> 
              Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
                _module.__default.Hash(_module.__default.Loc(cmd#3, deps#3, e#3)))
               ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
                $Box(_module.__default.Loc(cmd#3, deps#3, e#3))))));
  ensures {:id "id805"} (var result#0 := _module.__default.buildC(prog#0, stC#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Expression.exprError_q(expr'#0)
         ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache())));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "BuildCLemma (correctness)"} Impl$$_module.__default.BuildCLemma(prog#0: DatatypeType, stC#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var stmts##0: Seq;
  var stC##0: DatatypeType;
  var env##0: Box;

    // AddMethodImpl: BuildCLemma, Impl$$_module.__default.BuildCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(533,11)
    // TrCallStmt: Before ProcessCallStmt
    assume _module.Program.Program_q(prog#0);
    assume _module.Program.Program_q(prog#0);
    // ProcessCallStmt: CheckSubrange
    stmts##0 := _module.Program.stmts(prog#0);
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##0 := stC#0;
    assume _module.__default.EmptyEnv#canCall();
    assume _module.__default.EmptyEnv#canCall();
    // ProcessCallStmt: CheckSubrange
    env##0 := _module.__default.EmptyEnv();
    call {:id "id806"} Call$$_module.__default.DoCLemma(stmts##0, stC##0, env##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "DoCLemma (well-formedness)"} CheckWellFormed$$_module.__default.DoCLemma(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass._module.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass._module.Statement()), $Heap), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap));
  free requires 8 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "DoCLemma (well-formedness)"} CheckWellFormed$$_module.__default.DoCLemma(stmts#0: Seq, stC#0: DatatypeType, env#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stmts#0: Seq;
  var ##stC#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##stmts#1: Seq;
  var ##stC#1: DatatypeType;
  var ##env#0: Box;
  var expr'#Z#0: DatatypeType;
  var stC'#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: DatatypeType;
  var ##stC#2: DatatypeType;


    // AddMethodImpl: DoCLemma, CheckWellFormed$$_module.__default.DoCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##stmts#0 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#0, TSeq(Tclass._module.Statement()), $Heap);
    assume _module.__default.Legal#canCall(stmts#0);
    assume {:id "id807"} _module.__default.Legal(stmts#0);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id808"} _module.__default.ConsistentCache(stC#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##stmts#1 := stmts#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stmts#1, TSeq(Tclass._module.Statement()), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
    assert {:id "id809"} {:subsumption 0} _module.__default.Legal#canCall(##stmts#1)
       ==> _module.__default.Legal(##stmts#1) || Seq#Length(##stmts#1) != 0;
    assume _module.__default.Legal(##stmts#1);
    assume _module.__default.doC#canCall(stmts#0, stC#0, env#0);
    assume _module.Tuple.Pair_q(_module.__default.doC($LS($LZ), stmts#0, stC#0, env#0));
    assume {:id "id810"} let#0#0#0 == _module.__default.doC($LS($LZ), stmts#0, stC#0, env#0);
    assume _module.__default.doC#canCall(stmts#0, stC#0, env#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, 
      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
    assume {:id "id811"} result#Z#0 == let#0#0#0;
    havoc expr'#Z#0;
    havoc stC'#Z#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id812"} let#1#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass._module.Expression());
    assume {:id "id813"} expr'#Z#0 == let#1#0#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id814"} let#1#1#0 == $Unbox(_module.Tuple.snd(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#1#0, Tclass._module.StateC());
    assume {:id "id815"} stC'#Z#0 == let#1#1#0;
    ##stC#2 := stC'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC'#Z#0);
    if (_module.__default.ConsistentCache(stC'#Z#0))
    {
        if (_module.Expression.exprError_q(expr'#Z#0))
        {
            assert {:id "id816"} _module.Expression.exprError_q(expr'#Z#0);
        }
    }

    assume {:id "id817"} (var result#0 := _module.__default.doC($LS($LZ), stmts#0, stC#0, env#0); 
      (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
          $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
        _module.__default.ConsistentCache(stC'#0)
           && (_module.Expression.exprError_q(expr'#0)
             ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache()))));
}



procedure {:verboseName "DoCLemma (call)"} Call$$_module.__default.DoCLemma(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass._module.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass._module.Statement()), $Heap), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap));
  // user-defined preconditions
  requires {:id "id818"} _module.__default.Legal#canCall(stmts#0)
     ==> _module.__default.Legal(stmts#0) || Seq#Length(stmts#0) != 0;
  requires {:id "id819"} _module.__default.ConsistentCache#canCall(stC#0)
     ==> _module.__default.ConsistentCache(stC#0)
       || (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
        { _module.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, Tclass._module.Expression())
             && $Is(deps#0, Tclass._module.Expression())
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#0))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.doC#canCall(stmts#0, stC#0, env#0)
     && (var result#0 := _module.__default.doC($LS($LZ), stmts#0, stC#0, env#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.__default.ConsistentCache#canCall(stC'#0)
             && (_module.__default.ConsistentCache(stC'#0)
               ==> 
              _module.Expression.exprError_q(expr'#0)
               ==> $IsA#_module.Reason(_module.Expression.r(expr'#0)))));
  free ensures {:id "id820"} (var result#0 := _module.__default.doC($LS($LS($LZ)), stmts#0, stC#0, env#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache#canCall(stC'#0)
         && 
        _module.__default.ConsistentCache(stC'#0)
         && (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#1: Seq :: 
          { _module.__default.Loc(cmd#1, deps#1, e#1) } 
          $Is(cmd#1, Tclass._module.Expression())
               && $Is(deps#1, Tclass._module.Expression())
               && $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
              _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#1)))
             ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
              $Box(_module.__default.Loc(cmd#1, deps#1, e#1))))));
  ensures {:id "id821"} (var result#0 := _module.__default.doC($LS($LS($LZ)), stmts#0, stC#0, env#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Expression.exprError_q(expr'#0)
         ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache())));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "DoCLemma (correctness)"} Impl$$_module.__default.DoCLemma(stmts#0: Seq
       where $Is(stmts#0, TSeq(Tclass._module.Statement()))
         && $IsAlloc(stmts#0, TSeq(Tclass._module.Statement()), $Heap), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 8 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id822"} _module.__default.Legal#canCall(stmts#0)
     && 
    _module.__default.Legal(stmts#0)
     && Seq#Length(stmts#0) != 0;
  free requires {:id "id823"} _module.__default.ConsistentCache#canCall(stC#0)
     && 
    _module.__default.ConsistentCache(stC#0)
     && (forall cmd#2: DatatypeType, deps#2: DatatypeType, e#2: Seq :: 
      { _module.__default.Loc(cmd#2, deps#2, e#2) } 
      $Is(cmd#2, Tclass._module.Expression())
           && $Is(deps#2, Tclass._module.Expression())
           && $Is(e#2, TSeq(TChar))
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#2, deps#2, e#2)))
         ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#2, deps#2, e#2))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.doC#canCall(stmts#0, stC#0, env#0)
     && (var result#0 := _module.__default.doC($LS($LZ), stmts#0, stC#0, env#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.__default.ConsistentCache#canCall(stC'#0)
             && (_module.__default.ConsistentCache(stC'#0)
               ==> 
              _module.Expression.exprError_q(expr'#0)
               ==> $IsA#_module.Reason(_module.Expression.r(expr'#0)))));
  ensures {:id "id824"} (var result#0 := _module.__default.doC($LS($LS($LZ)), stmts#0, stC#0, env#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache#canCall(stC'#0)
         ==> _module.__default.ConsistentCache(stC'#0)
           || (forall cmd#3: DatatypeType, deps#3: DatatypeType, e#3: Seq :: 
            { _module.__default.Loc(cmd#3, deps#3, e#3) } 
            $Is(cmd#3, Tclass._module.Expression())
                 && $Is(deps#3, Tclass._module.Expression())
                 && $Is(e#3, TSeq(TChar))
               ==> 
              Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
                _module.__default.Hash(_module.__default.Loc(cmd#3, deps#3, e#3)))
               ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
                $Box(_module.__default.Loc(cmd#3, deps#3, e#3))))));
  ensures {:id "id825"} (var result#0 := _module.__default.doC($LS($LS($LZ)), stmts#0, stC#0, env#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Expression.exprError_q(expr'#0)
         ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache())));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "DoCLemma (correctness)"} Impl$$_module.__default.DoCLemma(stmts#0: Seq, stC#0: DatatypeType, env#0: Box) returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var defass#stmt#0: bool;
  var stmt#0: DatatypeType
     where defass#stmt#0
       ==> $Is(stmt#0, Tclass._module.Statement())
         && $IsAlloc(stmt#0, Tclass._module.Statement(), $Heap);
  var expr##0_0: DatatypeType;
  var stC##0_0: DatatypeType;
  var env##0_0: Box;
  var defass#result#0_0: bool;
  var result#0_0: DatatypeType
     where defass#result#0_0
       ==> $Is(result#0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()))
         && $IsAlloc(result#0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()), 
          $Heap);
  var ##expr#0_0: DatatypeType;
  var ##stC#0_0: DatatypeType;
  var ##env#0_0: Box;
  var expr'#0_0: DatatypeType
     where $Is(expr'#0_0, Tclass._module.Expression())
       && $IsAlloc(expr'#0_0, Tclass._module.Expression(), $Heap);
  var defass#stC'#0_0: bool;
  var stC'#0_0: DatatypeType
     where defass#stC'#0_0
       ==> $Is(stC'#0_0, Tclass._module.StateC())
         && $IsAlloc(stC'#0_0, Tclass._module.StateC(), $Heap);
  var $rhs#0_0: DatatypeType;
  var $rhs#0_1: DatatypeType;
  var ##expr#0_1: DatatypeType;
  var defass#env'#0_0_0: bool;
  var env'#0_0_0: Box
     where defass#env'#0_0_0
       ==> $IsBox(env'#0_0_0, Tclass._module.Env())
         && $IsAllocBox(env'#0_0_0, Tclass._module.Env(), $Heap);
  var ##id#0_0_0: Box;
  var ##expr#0_0_0: DatatypeType;
  var ##env#0_0_0: Box;
  var ##stmts#0_0_0: Seq;
  var stmts##0_0_0_0: Seq;
  var stC##0_0_0_0: DatatypeType;
  var env##0_0_0_0: Box;
  var expr##1_0: DatatypeType;
  var stC##1_0: DatatypeType;
  var env##1_0: Box;

    // AddMethodImpl: DoCLemma, Impl$$_module.__default.DoCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.StateC(stC#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#stmts0#0: Seq, $ih#stC0#0: DatatypeType :: 
      { _module.__default.doC($LS($LZ), $ih#stmts0#0, $ih#stC0#0, env#0) } 
      $Is($ih#stmts0#0, TSeq(Tclass._module.Statement()))
           && $Is($ih#stC0#0, Tclass._module.StateC())
           && 
          _module.__default.Legal($ih#stmts0#0)
           && _module.__default.ConsistentCache($ih#stC0#0)
           && (Seq#Rank($ih#stmts0#0) < Seq#Rank(stmts#0)
             || (Seq#Rank($ih#stmts0#0) == Seq#Rank(stmts#0)
               && DtRank($ih#stC0#0) < DtRank(stC#0)))
         ==> (var result#1 := _module.__default.doC($LS($LZ), $ih#stmts0#0, $ih#stC0#0, env#0); 
          (var expr'#1, stC'#1 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType, 
              $Unbox(_module.Tuple.snd(result#1)): DatatypeType; 
            _module.__default.ConsistentCache(stC'#1)
               && (_module.Expression.exprError_q(expr'#1)
                 ==> !_module.Reason#Equal(_module.Expression.r(expr'#1), #_module.Reason.rInconsistentCache())))));
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(544,12)
    assume true;
    assert {:id "id826"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(stmts#0);
    assume true;
    stmt#0 := $Unbox(Seq#Index(stmts#0, LitInt(0))): DatatypeType;
    defass#stmt#0 := true;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(545,3)
    assert {:id "id828"} defass#stmt#0;
    assume true;
    if (_module.Statement.stmtVariable_q(stmt#0))
    {
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(546,15)
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id829"} defass#stmt#0;
        assert {:id "id830"} _module.Statement.stmtVariable_q(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##0_0 := _module.Statement.expr(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##0_0 := stC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##0_0 := env#0;
        call {:id "id831"} Call$$_module.__default.EvalCLemma(expr##0_0, stC##0_0, env##0_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(547,16)
        assume true;
        assert {:id "id832"} defass#stmt#0;
        assert {:id "id833"} _module.Statement.stmtVariable_q(stmt#0);
        ##expr#0_0 := _module.Statement.expr(stmt#0);
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0_0, Tclass._module.Expression(), $Heap);
        ##stC#0_0 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#0_0, Tclass._module.StateC(), $Heap);
        ##env#0_0 := env#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#0_0, Tclass._module.Env(), $Heap);
        assume _module.__default.evalC#canCall(_module.Statement.expr(stmt#0), stC#0, env#0);
        assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#0), stC#0, env#0));
        assume _module.__default.evalC#canCall(_module.Statement.expr(stmt#0), stC#0, env#0);
        result#0_0 := _module.__default.evalC($LS($LZ), _module.Statement.expr(stmt#0), stC#0, env#0);
        defass#result#0_0 := true;
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(548,21)
        assume true;
        assume true;
        assert {:id "id835"} defass#result#0_0;
        assume _module.Tuple.Pair_q(result#0_0);
        assume _module.Tuple.Pair_q(result#0_0);
        $rhs#0_0 := $Unbox(_module.Tuple.fst(result#0_0)): DatatypeType;
        assert {:id "id837"} defass#result#0_0;
        assume _module.Tuple.Pair_q(result#0_0);
        assume _module.Tuple.Pair_q(result#0_0);
        $rhs#0_1 := $Unbox(_module.Tuple.snd(result#0_0)): DatatypeType;
        expr'#0_0 := $rhs#0_0;
        stC'#0_0 := $rhs#0_1;
        defass#stC'#0_0 := true;
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(549,5)
        ##expr#0_1 := expr'#0_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#0_1, Tclass._module.Expression(), $Heap);
        assume _module.__default.Value#canCall(expr'#0_0);
        assume _module.__default.Value#canCall(expr'#0_0);
        if (_module.__default.Value(expr'#0_0))
        {
            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(550,16)
            assume true;
            assert {:id "id841"} defass#stmt#0;
            assert {:id "id842"} _module.Statement.stmtVariable_q(stmt#0);
            ##id#0_0_0 := _module.Statement.id(stmt#0);
            // assume allocatedness for argument to function
            assume $IsAllocBox(##id#0_0_0, Tclass._module.Identifier(), $Heap);
            ##expr#0_0_0 := expr'#0_0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##expr#0_0_0, Tclass._module.Expression(), $Heap);
            ##env#0_0_0 := env#0;
            // assume allocatedness for argument to function
            assume $IsAllocBox(##env#0_0_0, Tclass._module.Env(), $Heap);
            assert {:id "id843"} {:subsumption 0} _module.__default.Value#canCall(##expr#0_0_0)
               ==> _module.__default.Value(##expr#0_0_0)
                 || _module.Expression.exprLiteral_q(##expr#0_0_0);
            assume _module.__default.Value(##expr#0_0_0);
            assume _module.__default.SetEnv#canCall(_module.Statement.id(stmt#0), expr'#0_0, env#0);
            assume _module.__default.SetEnv#canCall(_module.Statement.id(stmt#0), expr'#0_0, env#0);
            env'#0_0_0 := _module.__default.SetEnv(_module.Statement.id(stmt#0), expr'#0_0, env#0);
            defass#env'#0_0_0 := true;
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(551,7)
            assert {:id "id845"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
            ##stmts#0_0_0 := Seq#Drop(stmts#0, LitInt(1));
            // assume allocatedness for argument to function
            assume $IsAlloc(##stmts#0_0_0, TSeq(Tclass._module.Statement()), $Heap);
            assume _module.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
            assume _module.__default.Legal#canCall(Seq#Drop(stmts#0, LitInt(1)));
            if (_module.__default.Legal(Seq#Drop(stmts#0, LitInt(1))))
            {
                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(552,17)
                // TrCallStmt: Before ProcessCallStmt
                assert {:id "id846"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(stmts#0);
                assume true;
                // ProcessCallStmt: CheckSubrange
                stmts##0_0_0_0 := Seq#Drop(stmts#0, LitInt(1));
                assert {:id "id847"} defass#stC'#0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                stC##0_0_0_0 := stC'#0_0;
                assert {:id "id848"} defass#env'#0_0_0;
                assume true;
                // ProcessCallStmt: CheckSubrange
                env##0_0_0_0 := env'#0_0_0;
                assert {:id "id849"} Seq#Rank(stmts##0_0_0_0) < Seq#Rank(stmts#0)
                   || (Seq#Rank(stmts##0_0_0_0) == Seq#Rank(stmts#0)
                     && DtRank(stC##0_0_0_0) < DtRank(stC#0));
                call {:id "id850"} Call$$_module.__default.DoCLemma(stmts##0_0_0_0, stC##0_0_0_0, env##0_0_0_0);
                // TrCallStmt: After ProcessCallStmt
            }
            else
            {
            }
        }
        else
        {
        }
    }
    else
    {
        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(557,5)
        assert {:id "id851"} defass#stmt#0;
        if (!_module.Statement.stmtVariable_q(stmt#0))
        {
            assert {:id "id852"} defass#stmt#0;
        }

        assume true;
        assert {:id "id853"} _module.Statement.stmtVariable_q(stmt#0)
           || _module.Statement.stmtReturn_q(stmt#0);
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(558,15)
        // TrCallStmt: Before ProcessCallStmt
        assert {:id "id854"} defass#stmt#0;
        assert {:id "id855"} _module.Statement.stmtReturn_q(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##1_0 := _module.Statement.ret(stmt#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##1_0 := stC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_0 := env#0;
        call {:id "id856"} Call$$_module.__default.EvalCLemma(expr##1_0, stC##1_0, env##1_0);
        // TrCallStmt: After ProcessCallStmt
    }
}



procedure {:verboseName "EvalCLemma (well-formedness)"} CheckWellFormed$$_module.__default.EvalCLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass._module.Expression())
         && $IsAlloc(expr#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(expr#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EvalCLemma (well-formedness)"} CheckWellFormed$$_module.__default.EvalCLemma(expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stC#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##stC#1: DatatypeType;
  var ##env#0: Box;
  var expr'#Z#0: DatatypeType;
  var stC'#Z#0: DatatypeType;
  var let#1#0#0: DatatypeType;
  var let#1#1#0: DatatypeType;
  var ##stC#2: DatatypeType;


    // AddMethodImpl: EvalCLemma, CheckWellFormed$$_module.__default.EvalCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id857"} _module.__default.ConsistentCache(stC#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass._module.Expression(), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
    assume _module.__default.evalC#canCall(expr#0, stC#0, env#0);
    assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), expr#0, stC#0, env#0));
    assume {:id "id858"} let#0#0#0 == _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0);
    assume _module.__default.evalC#canCall(expr#0, stC#0, env#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, 
      Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()));
    assume {:id "id859"} result#Z#0 == let#0#0#0;
    havoc expr'#Z#0;
    havoc stC'#Z#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id860"} let#1#0#0 == $Unbox(_module.Tuple.fst(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, Tclass._module.Expression());
    assume {:id "id861"} expr'#Z#0 == let#1#0#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id862"} let#1#1#0 == $Unbox(_module.Tuple.snd(result#Z#0)): DatatypeType;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#1#0, Tclass._module.StateC());
    assume {:id "id863"} stC'#Z#0 == let#1#1#0;
    ##stC#2 := stC'#Z#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC'#Z#0);
    if (_module.__default.ConsistentCache(stC'#Z#0))
    {
        if (_module.Expression.exprError_q(expr'#Z#0))
        {
            assert {:id "id864"} _module.Expression.exprError_q(expr'#Z#0);
        }
    }

    assume {:id "id865"} (var result#0 := _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0); 
      (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
          $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
        _module.__default.ConsistentCache(stC'#0)
           && (_module.Expression.exprError_q(expr'#0)
             ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache()))));
}



procedure {:verboseName "EvalCLemma (call)"} Call$$_module.__default.EvalCLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass._module.Expression())
         && $IsAlloc(expr#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(expr#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap));
  // user-defined preconditions
  requires {:id "id866"} _module.__default.ConsistentCache#canCall(stC#0)
     ==> _module.__default.ConsistentCache(stC#0)
       || (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
        { _module.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, Tclass._module.Expression())
             && $Is(deps#0, Tclass._module.Expression())
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#0))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.evalC#canCall(expr#0, stC#0, env#0)
     && (var result#0 := _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.__default.ConsistentCache#canCall(stC'#0)
             && (_module.__default.ConsistentCache(stC'#0)
               ==> 
              _module.Expression.exprError_q(expr'#0)
               ==> $IsA#_module.Reason(_module.Expression.r(expr'#0)))));
  free ensures {:id "id867"} (var result#0 := _module.__default.evalC($LS($LS($LZ)), expr#0, stC#0, env#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache#canCall(stC'#0)
         && 
        _module.__default.ConsistentCache(stC'#0)
         && (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#1: Seq :: 
          { _module.__default.Loc(cmd#1, deps#1, e#1) } 
          $Is(cmd#1, Tclass._module.Expression())
               && $Is(deps#1, Tclass._module.Expression())
               && $Is(e#1, TSeq(TChar))
             ==> 
            Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
              _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#1)))
             ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
              $Box(_module.__default.Loc(cmd#1, deps#1, e#1))))));
  ensures {:id "id868"} (var result#0 := _module.__default.evalC($LS($LS($LZ)), expr#0, stC#0, env#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Expression.exprError_q(expr'#0)
         ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache())));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "EvalCLemma (correctness)"} Impl$$_module.__default.EvalCLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass._module.Expression())
         && $IsAlloc(expr#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(expr#0), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id869"} _module.__default.ConsistentCache#canCall(stC#0)
     && 
    _module.__default.ConsistentCache(stC#0)
     && (forall cmd#2: DatatypeType, deps#2: DatatypeType, e#2: Seq :: 
      { _module.__default.Loc(cmd#2, deps#2, e#2) } 
      $Is(cmd#2, Tclass._module.Expression())
           && $Is(deps#2, Tclass._module.Expression())
           && $Is(e#2, TSeq(TChar))
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#2, deps#2, e#2)))
         ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#2, deps#2, e#2))));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.evalC#canCall(expr#0, stC#0, env#0)
     && (var result#0 := _module.__default.evalC($LS($LZ), expr#0, stC#0, env#0); 
      _module.Tuple.Pair_q(result#0)
         && _module.Tuple.Pair_q(result#0)
         && (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
            $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
          _module.__default.ConsistentCache#canCall(stC'#0)
             && (_module.__default.ConsistentCache(stC'#0)
               ==> 
              _module.Expression.exprError_q(expr'#0)
               ==> $IsA#_module.Reason(_module.Expression.r(expr'#0)))));
  ensures {:id "id870"} (var result#0 := _module.__default.evalC($LS($LS($LZ)), expr#0, stC#0, env#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.__default.ConsistentCache#canCall(stC'#0)
         ==> _module.__default.ConsistentCache(stC'#0)
           || (forall cmd#3: DatatypeType, deps#3: DatatypeType, e#3: Seq :: 
            { _module.__default.Loc(cmd#3, deps#3, e#3) } 
            $Is(cmd#3, Tclass._module.Expression())
                 && $Is(deps#3, Tclass._module.Expression())
                 && $Is(e#3, TSeq(TChar))
               ==> 
              Set#IsMember(_module.__default.DomC(_module.StateC.c(stC'#0)), 
                _module.__default.Hash(_module.__default.Loc(cmd#3, deps#3, e#3)))
               ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC'#0)), 
                $Box(_module.__default.Loc(cmd#3, deps#3, e#3))))));
  ensures {:id "id871"} (var result#0 := _module.__default.evalC($LS($LS($LZ)), expr#0, stC#0, env#0); 
    (var expr'#0, stC'#0 := $Unbox(_module.Tuple.fst(result#0)): DatatypeType, 
        $Unbox(_module.Tuple.snd(result#0)): DatatypeType; 
      _module.Expression.exprError_q(expr'#0)
         ==> !_module.Reason#Equal(_module.Expression.r(expr'#0), #_module.Reason.rInconsistentCache())));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EvalCLemma (correctness)"} Impl$$_module.__default.EvalCLemma(expr#0: DatatypeType, stC#0: DatatypeType, env#0: Box)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var ##expr#1: DatatypeType;
  var defass#result#1_1_1_1_0_0: bool;
  var result#1_1_1_1_0_0: DatatypeType
     where defass#result#1_1_1_1_0_0
       ==> $Is(result#1_1_1_1_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()))
         && $IsAlloc(result#1_1_1_1_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()), 
          $Heap);
  var ##expr#1_1_1_1_0_0: DatatypeType;
  var ##stC#1_1_1_1_0_0: DatatypeType;
  var ##env#1_1_1_1_0_0: Box;
  var cond'#1_1_1_1_0_0: DatatypeType
     where $Is(cond'#1_1_1_1_0_0, Tclass._module.Expression())
       && $IsAlloc(cond'#1_1_1_1_0_0, Tclass._module.Expression(), $Heap);
  var defass#stC'#1_1_1_1_0_0: bool;
  var stC'#1_1_1_1_0_0: DatatypeType
     where defass#stC'#1_1_1_1_0_0
       ==> $Is(stC'#1_1_1_1_0_0, Tclass._module.StateC())
         && $IsAlloc(stC'#1_1_1_1_0_0, Tclass._module.StateC(), $Heap);
  var $rhs#1_1_1_1_0_0: DatatypeType;
  var $rhs#1_1_1_1_0_1: DatatypeType;
  var expr##1_1_1_1_0_0_0: DatatypeType;
  var stC##1_1_1_1_0_0_0: DatatypeType;
  var env##1_1_1_1_0_0_0: Box;
  var expr##1_1_1_1_0_1_0_0: DatatypeType;
  var stC##1_1_1_1_0_1_0_0: DatatypeType;
  var env##1_1_1_1_0_1_0_0: Box;
  var defass#result#1_1_1_1_1_0_0: bool;
  var result#1_1_1_1_1_0_0: DatatypeType
     where defass#result#1_1_1_1_1_0_0
       ==> $Is(result#1_1_1_1_1_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()))
         && $IsAlloc(result#1_1_1_1_1_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()), 
          $Heap);
  var ##expr#1_1_1_1_1_0_0: DatatypeType;
  var ##stC#1_1_1_1_1_0_0: DatatypeType;
  var ##env#1_1_1_1_1_0_0: Box;
  var conj0'#1_1_1_1_1_0_0: DatatypeType
     where $Is(conj0'#1_1_1_1_1_0_0, Tclass._module.Expression())
       && $IsAlloc(conj0'#1_1_1_1_1_0_0, Tclass._module.Expression(), $Heap);
  var defass#stC'#1_1_1_1_1_0_0: bool;
  var stC'#1_1_1_1_1_0_0: DatatypeType
     where defass#stC'#1_1_1_1_1_0_0
       ==> $Is(stC'#1_1_1_1_1_0_0, Tclass._module.StateC())
         && $IsAlloc(stC'#1_1_1_1_1_0_0, Tclass._module.StateC(), $Heap);
  var $rhs#1_1_1_1_1_0_0: DatatypeType;
  var $rhs#1_1_1_1_1_0_1: DatatypeType;
  var expr##1_1_1_1_1_0_0_0: DatatypeType;
  var stC##1_1_1_1_1_0_0_0: DatatypeType;
  var env##1_1_1_1_1_0_0_0: Box;
  var defass#result#1_1_1_1_1_1_0_0: bool;
  var result#1_1_1_1_1_1_0_0: DatatypeType
     where defass#result#1_1_1_1_1_1_0_0
       ==> $Is(result#1_1_1_1_1_1_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()))
         && $IsAlloc(result#1_1_1_1_1_1_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()), 
          $Heap);
  var ##expr#1_1_1_1_1_1_0_0: DatatypeType;
  var ##stC#1_1_1_1_1_1_0_0: DatatypeType;
  var ##env#1_1_1_1_1_1_0_0: Box;
  var disj0'#1_1_1_1_1_1_0_0: DatatypeType
     where $Is(disj0'#1_1_1_1_1_1_0_0, Tclass._module.Expression())
       && $IsAlloc(disj0'#1_1_1_1_1_1_0_0, Tclass._module.Expression(), $Heap);
  var defass#stC'#1_1_1_1_1_1_0_0: bool;
  var stC'#1_1_1_1_1_1_0_0: DatatypeType
     where defass#stC'#1_1_1_1_1_1_0_0
       ==> $Is(stC'#1_1_1_1_1_1_0_0, Tclass._module.StateC())
         && $IsAlloc(stC'#1_1_1_1_1_1_0_0, Tclass._module.StateC(), $Heap);
  var $rhs#1_1_1_1_1_1_0_0: DatatypeType;
  var $rhs#1_1_1_1_1_1_0_1: DatatypeType;
  var expr##1_1_1_1_1_1_0_1_0_0: DatatypeType;
  var stC##1_1_1_1_1_1_0_1_0_0: DatatypeType;
  var env##1_1_1_1_1_1_0_1_0_0: Box;
  var expr##1_1_1_1_1_1_1_0_0: DatatypeType;
  var stC##1_1_1_1_1_1_1_0_0: DatatypeType;
  var env##1_1_1_1_1_1_1_0_0: Box;
  var defass#resultFun#1_1_1_1_1_1_1_0_0: bool;
  var resultFun#1_1_1_1_1_1_1_0_0: DatatypeType
     where defass#resultFun#1_1_1_1_1_1_1_0_0
       ==> $Is(resultFun#1_1_1_1_1_1_1_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()))
         && $IsAlloc(resultFun#1_1_1_1_1_1_1_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()), 
          $Heap);
  var ##expr#1_1_1_1_1_1_1_0_0: DatatypeType;
  var ##stC#1_1_1_1_1_1_1_0_0: DatatypeType;
  var ##env#1_1_1_1_1_1_1_0_0: Box;
  var fun'#1_1_1_1_1_1_1_0_0: DatatypeType
     where $Is(fun'#1_1_1_1_1_1_1_0_0, Tclass._module.Expression())
       && $IsAlloc(fun'#1_1_1_1_1_1_1_0_0, Tclass._module.Expression(), $Heap);
  var defass#stC'#1_1_1_1_1_1_1_0_0: bool;
  var stC'#1_1_1_1_1_1_1_0_0: DatatypeType
     where defass#stC'#1_1_1_1_1_1_1_0_0
       ==> $Is(stC'#1_1_1_1_1_1_1_0_0, Tclass._module.StateC())
         && $IsAlloc(stC'#1_1_1_1_1_1_1_0_0, Tclass._module.StateC(), $Heap);
  var $rhs#1_1_1_1_1_1_1_0_0: DatatypeType;
  var $rhs#1_1_1_1_1_1_1_0_1: DatatypeType;
  var expr##1_1_1_1_1_1_1_0_1: DatatypeType;
  var args##1_1_1_1_1_1_1_0_0: Seq;
  var stC##1_1_1_1_1_1_1_0_1: DatatypeType;
  var env##1_1_1_1_1_1_1_0_1: Box;
  var resultArgs#1_1_1_1_1_1_1_0_0: DatatypeType
     where $Is(resultArgs#1_1_1_1_1_1_1_0_0, 
        Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())))
       && $IsAlloc(resultArgs#1_1_1_1_1_1_1_0_0, 
        Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())), 
        $Heap);
  var ##expr#1_1_1_1_1_1_1_0_1: DatatypeType;
  var ##args#1_1_1_1_1_1_1_0_0: Seq;
  var ##stC#1_1_1_1_1_1_1_0_1: DatatypeType;
  var ##env#1_1_1_1_1_1_1_0_1: Box;
  var args'#1_1_1_1_1_1_1_0_0: Seq
     where $Is(args'#1_1_1_1_1_1_1_0_0, TSeq(Tclass._module.Expression()))
       && $IsAlloc(args'#1_1_1_1_1_1_1_0_0, TSeq(Tclass._module.Expression()), $Heap);
  var stsC'#1_1_1_1_1_1_1_0_0: Set
     where $Is(stsC'#1_1_1_1_1_1_1_0_0, TSet(Tclass._module.StateC()))
       && $IsAlloc(stsC'#1_1_1_1_1_1_1_0_0, TSet(Tclass._module.StateC()), $Heap);
  var $rhs#1_1_1_1_1_1_1_0_2: Seq;
  var $rhs#1_1_1_1_1_1_1_0_3: Set;
  var stsC''#1_1_1_1_1_1_1_0_0: Set
     where $Is(stsC''#1_1_1_1_1_1_1_0_0, TSet(Tclass._module.StateC()))
       && $IsAlloc(stsC''#1_1_1_1_1_1_1_0_0, TSet(Tclass._module.StateC()), $Heap);
  var ##stsC#1_1_1_1_1_1_1_0_0: Set;
  var stsC##1_1_1_1_1_1_1_0_0_0: Set;
  var defass#stCombinedC#1_1_1_1_1_1_1_0_0_0: bool;
  var stCombinedC#1_1_1_1_1_1_1_0_0_0: DatatypeType
     where defass#stCombinedC#1_1_1_1_1_1_1_0_0_0
       ==> $Is(stCombinedC#1_1_1_1_1_1_1_0_0_0, Tclass._module.StateC())
         && $IsAlloc(stCombinedC#1_1_1_1_1_1_1_0_0_0, Tclass._module.StateC(), $Heap);
  var ##stsC#1_1_1_1_1_1_1_0_0_0: Set;
  var ##prim#1_1_1_1_1_1_1_0_0_0_0_0: DatatypeType;
  var ##prim#1_1_1_1_1_1_1_0_0_0_0_1: DatatypeType;
  var ##args#1_1_1_1_1_1_1_0_0_0_0_0: Seq;
  var ##stC#1_1_1_1_1_1_1_0_0_0_0_0: DatatypeType;
  var cmd##1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var deps##1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var exts##1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var stC##1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var defass#resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0: bool;
  var resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType
     where defass#resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0
       ==> $Is(resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()))
         && $IsAlloc(resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()), 
          $Heap);
  var ##cmd#1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var ##deps#1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var ##exts#1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var ##stC#1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType;
  var defass#stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0: bool;
  var stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0: DatatypeType
     where defass#stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0
       ==> $Is(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0, Tclass._module.StateC())
         && $IsAlloc(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0, Tclass._module.StateC(), $Heap);
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_0: Box;
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_1: Box;
  var p#1_1_1_1_1_1_1_0_0_0_0_0_0_0: DatatypeType;
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_0: Box;
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_1: Box;
  var ##p#1_1_1_1_1_1_1_0_0_0_0_0_0_0: DatatypeType;
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_2: Box;
  var ##p#1_1_1_1_1_1_1_0_0_0_0_0_0_1: DatatypeType;
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_3: Box;
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_4: Box;
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_5: Box;
  var ##paths#1_1_1_1_1_1_1_0_0_0_0_0_0_0: Set;
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_6: Box;
  var ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_7: Box;
  var ##stC#1_1_1_1_1_1_1_0_0_0_0_1_0: DatatypeType;

    // AddMethodImpl: EvalCLemma, Impl$$_module.__default.EvalCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.Expression(expr#0);
    assume $IsA#_module.StateC(stC#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#expr0#0: DatatypeType :: 
      { _module.__default.evalC($LS($LZ), $ih#expr0#0, stC#0, env#0) } 
      $Is($ih#expr0#0, Tclass._module.Expression())
           && _module.__default.ConsistentCache(stC#0)
           && DtRank($ih#expr0#0) < DtRank(expr#0)
         ==> (var result#1 := _module.__default.evalC($LS($LZ), $ih#expr0#0, stC#0, env#0); 
          (var expr'#1, stC'#1 := $Unbox(_module.Tuple.fst(result#1)): DatatypeType, 
              $Unbox(_module.Tuple.snd(result#1)): DatatypeType; 
            _module.__default.ConsistentCache(stC'#1)
               && (_module.Expression.exprError_q(expr'#1)
                 ==> !_module.Reason#Equal(_module.Expression.r(expr'#1), #_module.Reason.rInconsistentCache())))));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(570,3)
    ##expr#1 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#1, Tclass._module.Expression(), $Heap);
    assume _module.__default.Value#canCall(expr#0);
    assume _module.__default.Value#canCall(expr#0);
    if (_module.__default.Value(expr#0))
    {
    }
    else
    {
        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(571,10)
        assume true;
        if (_module.Expression.exprIdentifier_q(expr#0))
        {
        }
        else
        {
            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(572,10)
            if (_module.Expression.exprIf_q(expr#0))
            {
                assert {:id "id872"} _module.Expression.exprIf_q(expr#0);
            }

            if (_module.Expression.exprIf_q(expr#0)
               && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0)))
            {
                assert {:id "id873"} _module.Expression.exprIf_q(expr#0);
                assert {:id "id874"} _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0));
            }

            assume _module.Expression.exprIf_q(expr#0)
               ==> 
              _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
               ==> $IsA#_module.Literal(_module.Expression.lit(_module.Expression.cond(expr#0)));
            if (_module.Expression.exprIf_q(expr#0)
               && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
               && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                #_module.Literal.litTrue()))
            {
            }
            else
            {
                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(573,10)
                if (_module.Expression.exprIf_q(expr#0))
                {
                    assert {:id "id875"} _module.Expression.exprIf_q(expr#0);
                }

                if (_module.Expression.exprIf_q(expr#0)
                   && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0)))
                {
                    assert {:id "id876"} _module.Expression.exprIf_q(expr#0);
                    assert {:id "id877"} _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0));
                }

                assume _module.Expression.exprIf_q(expr#0)
                   ==> 
                  _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                   ==> $IsA#_module.Literal(_module.Expression.lit(_module.Expression.cond(expr#0)));
                if (_module.Expression.exprIf_q(expr#0)
                   && _module.Expression.exprLiteral_q(_module.Expression.cond(expr#0))
                   && _module.Literal#Equal(_module.Expression.lit(_module.Expression.cond(expr#0)), 
                    #_module.Literal.litFalse()))
                {
                }
                else
                {
                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(574,10)
                    assume true;
                    if (_module.Expression.exprIf_q(expr#0))
                    {
                        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(575,16)
                        assume true;
                        assert {:id "id878"} _module.Expression.exprIf_q(expr#0);
                        ##expr#1_1_1_1_0_0 := _module.Expression.cond(expr#0);
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##expr#1_1_1_1_0_0, Tclass._module.Expression(), $Heap);
                        ##stC#1_1_1_1_0_0 := stC#0;
                        // assume allocatedness for argument to function
                        assume $IsAlloc(##stC#1_1_1_1_0_0, Tclass._module.StateC(), $Heap);
                        ##env#1_1_1_1_0_0 := env#0;
                        // assume allocatedness for argument to function
                        assume $IsAllocBox(##env#1_1_1_1_0_0, Tclass._module.Env(), $Heap);
                        assume _module.__default.evalC#canCall(_module.Expression.cond(expr#0), stC#0, env#0);
                        assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.cond(expr#0), stC#0, env#0));
                        assume _module.__default.evalC#canCall(_module.Expression.cond(expr#0), stC#0, env#0);
                        result#1_1_1_1_0_0 := _module.__default.evalC($LS($LZ), _module.Expression.cond(expr#0), stC#0, env#0);
                        defass#result#1_1_1_1_0_0 := true;
                        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(576,21)
                        assume true;
                        assume true;
                        assert {:id "id880"} defass#result#1_1_1_1_0_0;
                        assume _module.Tuple.Pair_q(result#1_1_1_1_0_0);
                        assume _module.Tuple.Pair_q(result#1_1_1_1_0_0);
                        $rhs#1_1_1_1_0_0 := $Unbox(_module.Tuple.fst(result#1_1_1_1_0_0)): DatatypeType;
                        assert {:id "id882"} defass#result#1_1_1_1_0_0;
                        assume _module.Tuple.Pair_q(result#1_1_1_1_0_0);
                        assume _module.Tuple.Pair_q(result#1_1_1_1_0_0);
                        $rhs#1_1_1_1_0_1 := $Unbox(_module.Tuple.snd(result#1_1_1_1_0_0)): DatatypeType;
                        cond'#1_1_1_1_0_0 := $rhs#1_1_1_1_0_0;
                        stC'#1_1_1_1_0_0 := $rhs#1_1_1_1_0_1;
                        defass#stC'#1_1_1_1_0_0 := true;
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(577,5)
                        if (_module.Expression.exprLiteral_q(cond'#1_1_1_1_0_0))
                        {
                            assert {:id "id886"} _module.Expression.exprLiteral_q(cond'#1_1_1_1_0_0);
                        }

                        assume _module.Expression.exprLiteral_q(cond'#1_1_1_1_0_0)
                           ==> $IsA#_module.Literal(_module.Expression.lit(cond'#1_1_1_1_0_0));
                        if (_module.Expression.exprLiteral_q(cond'#1_1_1_1_0_0)
                           && _module.Literal#Equal(_module.Expression.lit(cond'#1_1_1_1_0_0), #_module.Literal.litTrue()))
                        {
                            // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(578,17)
                            // TrCallStmt: Before ProcessCallStmt
                            assert {:id "id887"} _module.Expression.exprIf_q(expr#0);
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            expr##1_1_1_1_0_0_0 := _module.Expression.ifTrue(expr#0);
                            assert {:id "id888"} defass#stC'#1_1_1_1_0_0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            stC##1_1_1_1_0_0_0 := stC'#1_1_1_1_0_0;
                            assume true;
                            // ProcessCallStmt: CheckSubrange
                            env##1_1_1_1_0_0_0 := env#0;
                            assert {:id "id889"} DtRank(expr##1_1_1_1_0_0_0) < DtRank(expr#0);
                            call {:id "id890"} Call$$_module.__default.EvalCLemma(expr##1_1_1_1_0_0_0, stC##1_1_1_1_0_0_0, env##1_1_1_1_0_0_0);
                            // TrCallStmt: After ProcessCallStmt
                        }
                        else
                        {
                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(579,12)
                            if (_module.Expression.exprLiteral_q(cond'#1_1_1_1_0_0))
                            {
                                assert {:id "id891"} _module.Expression.exprLiteral_q(cond'#1_1_1_1_0_0);
                            }

                            assume _module.Expression.exprLiteral_q(cond'#1_1_1_1_0_0)
                               ==> $IsA#_module.Literal(_module.Expression.lit(cond'#1_1_1_1_0_0));
                            if (_module.Expression.exprLiteral_q(cond'#1_1_1_1_0_0)
                               && _module.Literal#Equal(_module.Expression.lit(cond'#1_1_1_1_0_0), #_module.Literal.litFalse()))
                            {
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(580,17)
                                // TrCallStmt: Before ProcessCallStmt
                                assert {:id "id892"} _module.Expression.exprIf_q(expr#0);
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                expr##1_1_1_1_0_1_0_0 := _module.Expression.ifFalse(expr#0);
                                assert {:id "id893"} defass#stC'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                stC##1_1_1_1_0_1_0_0 := stC'#1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                env##1_1_1_1_0_1_0_0 := env#0;
                                assert {:id "id894"} DtRank(expr##1_1_1_1_0_1_0_0) < DtRank(expr#0);
                                call {:id "id895"} Call$$_module.__default.EvalCLemma(expr##1_1_1_1_0_1_0_0, stC##1_1_1_1_0_1_0_0, env##1_1_1_1_0_1_0_0);
                                // TrCallStmt: After ProcessCallStmt
                            }
                            else
                            {
                            }
                        }
                    }
                    else
                    {
                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(582,10)
                        assume true;
                        if (_module.Expression.exprAnd_q(expr#0))
                        {
                            // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(583,16)
                            assume true;
                            assert {:id "id896"} _module.Expression.exprAnd_q(expr#0);
                            ##expr#1_1_1_1_1_0_0 := _module.Expression.conj0(expr#0);
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##expr#1_1_1_1_1_0_0, Tclass._module.Expression(), $Heap);
                            ##stC#1_1_1_1_1_0_0 := stC#0;
                            // assume allocatedness for argument to function
                            assume $IsAlloc(##stC#1_1_1_1_1_0_0, Tclass._module.StateC(), $Heap);
                            ##env#1_1_1_1_1_0_0 := env#0;
                            // assume allocatedness for argument to function
                            assume $IsAllocBox(##env#1_1_1_1_1_0_0, Tclass._module.Env(), $Heap);
                            assume _module.__default.evalC#canCall(_module.Expression.conj0(expr#0), stC#0, env#0);
                            assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.conj0(expr#0), stC#0, env#0));
                            assume _module.__default.evalC#canCall(_module.Expression.conj0(expr#0), stC#0, env#0);
                            result#1_1_1_1_1_0_0 := _module.__default.evalC($LS($LZ), _module.Expression.conj0(expr#0), stC#0, env#0);
                            defass#result#1_1_1_1_1_0_0 := true;
                            // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(584,22)
                            assume true;
                            assume true;
                            assert {:id "id898"} defass#result#1_1_1_1_1_0_0;
                            assume _module.Tuple.Pair_q(result#1_1_1_1_1_0_0);
                            assume _module.Tuple.Pair_q(result#1_1_1_1_1_0_0);
                            $rhs#1_1_1_1_1_0_0 := $Unbox(_module.Tuple.fst(result#1_1_1_1_1_0_0)): DatatypeType;
                            assert {:id "id900"} defass#result#1_1_1_1_1_0_0;
                            assume _module.Tuple.Pair_q(result#1_1_1_1_1_0_0);
                            assume _module.Tuple.Pair_q(result#1_1_1_1_1_0_0);
                            $rhs#1_1_1_1_1_0_1 := $Unbox(_module.Tuple.snd(result#1_1_1_1_1_0_0)): DatatypeType;
                            conj0'#1_1_1_1_1_0_0 := $rhs#1_1_1_1_1_0_0;
                            stC'#1_1_1_1_1_0_0 := $rhs#1_1_1_1_1_0_1;
                            defass#stC'#1_1_1_1_1_0_0 := true;
                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(585,5)
                            if (_module.Expression.exprLiteral_q(conj0'#1_1_1_1_1_0_0))
                            {
                                assert {:id "id904"} _module.Expression.exprLiteral_q(conj0'#1_1_1_1_1_0_0);
                            }

                            assume _module.Expression.exprLiteral_q(conj0'#1_1_1_1_1_0_0)
                               ==> $IsA#_module.Literal(_module.Expression.lit(conj0'#1_1_1_1_1_0_0));
                            if (_module.Expression.exprLiteral_q(conj0'#1_1_1_1_1_0_0)
                               && _module.Literal#Equal(_module.Expression.lit(conj0'#1_1_1_1_1_0_0), #_module.Literal.litTrue()))
                            {
                                // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(586,17)
                                // TrCallStmt: Before ProcessCallStmt
                                assert {:id "id905"} _module.Expression.exprAnd_q(expr#0);
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                expr##1_1_1_1_1_0_0_0 := _module.Expression.conj1(expr#0);
                                assert {:id "id906"} defass#stC'#1_1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                stC##1_1_1_1_1_0_0_0 := stC'#1_1_1_1_1_0_0;
                                assume true;
                                // ProcessCallStmt: CheckSubrange
                                env##1_1_1_1_1_0_0_0 := env#0;
                                assert {:id "id907"} DtRank(expr##1_1_1_1_1_0_0_0) < DtRank(expr#0);
                                call {:id "id908"} Call$$_module.__default.EvalCLemma(expr##1_1_1_1_1_0_0_0, stC##1_1_1_1_1_0_0_0, env##1_1_1_1_1_0_0_0);
                                // TrCallStmt: After ProcessCallStmt
                            }
                            else
                            {
                                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(587,12)
                                if (_module.Expression.exprLiteral_q(conj0'#1_1_1_1_1_0_0))
                                {
                                    assert {:id "id909"} _module.Expression.exprLiteral_q(conj0'#1_1_1_1_1_0_0);
                                }

                                assume _module.Expression.exprLiteral_q(conj0'#1_1_1_1_1_0_0)
                                   ==> $IsA#_module.Literal(_module.Expression.lit(conj0'#1_1_1_1_1_0_0));
                                if (_module.Expression.exprLiteral_q(conj0'#1_1_1_1_1_0_0)
                                   && _module.Literal#Equal(_module.Expression.lit(conj0'#1_1_1_1_1_0_0), #_module.Literal.litFalse()))
                                {
                                }
                                else
                                {
                                }
                            }
                        }
                        else
                        {
                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(589,10)
                            assume true;
                            if (_module.Expression.exprOr_q(expr#0))
                            {
                                // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(590,16)
                                assume true;
                                assert {:id "id910"} _module.Expression.exprOr_q(expr#0);
                                ##expr#1_1_1_1_1_1_0_0 := _module.Expression.disj0(expr#0);
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##expr#1_1_1_1_1_1_0_0, Tclass._module.Expression(), $Heap);
                                ##stC#1_1_1_1_1_1_0_0 := stC#0;
                                // assume allocatedness for argument to function
                                assume $IsAlloc(##stC#1_1_1_1_1_1_0_0, Tclass._module.StateC(), $Heap);
                                ##env#1_1_1_1_1_1_0_0 := env#0;
                                // assume allocatedness for argument to function
                                assume $IsAllocBox(##env#1_1_1_1_1_1_0_0, Tclass._module.Env(), $Heap);
                                assume _module.__default.evalC#canCall(_module.Expression.disj0(expr#0), stC#0, env#0);
                                assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.disj0(expr#0), stC#0, env#0));
                                assume _module.__default.evalC#canCall(_module.Expression.disj0(expr#0), stC#0, env#0);
                                result#1_1_1_1_1_1_0_0 := _module.__default.evalC($LS($LZ), _module.Expression.disj0(expr#0), stC#0, env#0);
                                defass#result#1_1_1_1_1_1_0_0 := true;
                                // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(591,22)
                                assume true;
                                assume true;
                                assert {:id "id912"} defass#result#1_1_1_1_1_1_0_0;
                                assume _module.Tuple.Pair_q(result#1_1_1_1_1_1_0_0);
                                assume _module.Tuple.Pair_q(result#1_1_1_1_1_1_0_0);
                                $rhs#1_1_1_1_1_1_0_0 := $Unbox(_module.Tuple.fst(result#1_1_1_1_1_1_0_0)): DatatypeType;
                                assert {:id "id914"} defass#result#1_1_1_1_1_1_0_0;
                                assume _module.Tuple.Pair_q(result#1_1_1_1_1_1_0_0);
                                assume _module.Tuple.Pair_q(result#1_1_1_1_1_1_0_0);
                                $rhs#1_1_1_1_1_1_0_1 := $Unbox(_module.Tuple.snd(result#1_1_1_1_1_1_0_0)): DatatypeType;
                                disj0'#1_1_1_1_1_1_0_0 := $rhs#1_1_1_1_1_1_0_0;
                                stC'#1_1_1_1_1_1_0_0 := $rhs#1_1_1_1_1_1_0_1;
                                defass#stC'#1_1_1_1_1_1_0_0 := true;
                                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(592,5)
                                if (_module.Expression.exprLiteral_q(disj0'#1_1_1_1_1_1_0_0))
                                {
                                    assert {:id "id918"} _module.Expression.exprLiteral_q(disj0'#1_1_1_1_1_1_0_0);
                                }

                                assume _module.Expression.exprLiteral_q(disj0'#1_1_1_1_1_1_0_0)
                                   ==> $IsA#_module.Literal(_module.Expression.lit(disj0'#1_1_1_1_1_1_0_0));
                                if (_module.Expression.exprLiteral_q(disj0'#1_1_1_1_1_1_0_0)
                                   && _module.Literal#Equal(_module.Expression.lit(disj0'#1_1_1_1_1_1_0_0), #_module.Literal.litTrue()))
                                {
                                }
                                else
                                {
                                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(593,12)
                                    if (_module.Expression.exprLiteral_q(disj0'#1_1_1_1_1_1_0_0))
                                    {
                                        assert {:id "id919"} _module.Expression.exprLiteral_q(disj0'#1_1_1_1_1_1_0_0);
                                    }

                                    assume _module.Expression.exprLiteral_q(disj0'#1_1_1_1_1_1_0_0)
                                       ==> $IsA#_module.Literal(_module.Expression.lit(disj0'#1_1_1_1_1_1_0_0));
                                    if (_module.Expression.exprLiteral_q(disj0'#1_1_1_1_1_1_0_0)
                                       && _module.Literal#Equal(_module.Expression.lit(disj0'#1_1_1_1_1_1_0_0), #_module.Literal.litFalse()))
                                    {
                                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(594,17)
                                        // TrCallStmt: Before ProcessCallStmt
                                        assert {:id "id920"} _module.Expression.exprOr_q(expr#0);
                                        assume true;
                                        // ProcessCallStmt: CheckSubrange
                                        expr##1_1_1_1_1_1_0_1_0_0 := _module.Expression.disj1(expr#0);
                                        assert {:id "id921"} defass#stC'#1_1_1_1_1_1_0_0;
                                        assume true;
                                        // ProcessCallStmt: CheckSubrange
                                        stC##1_1_1_1_1_1_0_1_0_0 := stC'#1_1_1_1_1_1_0_0;
                                        assume true;
                                        // ProcessCallStmt: CheckSubrange
                                        env##1_1_1_1_1_1_0_1_0_0 := env#0;
                                        assert {:id "id922"} DtRank(expr##1_1_1_1_1_1_0_1_0_0) < DtRank(expr#0);
                                        call {:id "id923"} Call$$_module.__default.EvalCLemma(expr##1_1_1_1_1_1_0_1_0_0, stC##1_1_1_1_1_1_0_1_0_0, env##1_1_1_1_1_1_0_1_0_0);
                                        // TrCallStmt: After ProcessCallStmt
                                    }
                                    else
                                    {
                                    }
                                }
                            }
                            else
                            {
                                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(596,10)
                                assume true;
                                if (_module.Expression.exprInvocation_q(expr#0))
                                {
                                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(597,15)
                                    // TrCallStmt: Before ProcessCallStmt
                                    assert {:id "id924"} _module.Expression.exprInvocation_q(expr#0);
                                    assume true;
                                    // ProcessCallStmt: CheckSubrange
                                    expr##1_1_1_1_1_1_1_0_0 := _module.Expression.fun(expr#0);
                                    assume true;
                                    // ProcessCallStmt: CheckSubrange
                                    stC##1_1_1_1_1_1_1_0_0 := stC#0;
                                    assume true;
                                    // ProcessCallStmt: CheckSubrange
                                    env##1_1_1_1_1_1_1_0_0 := env#0;
                                    assert {:id "id925"} DtRank(expr##1_1_1_1_1_1_1_0_0) < DtRank(expr#0);
                                    call {:id "id926"} Call$$_module.__default.EvalCLemma(expr##1_1_1_1_1_1_1_0_0, stC##1_1_1_1_1_1_1_0_0, env##1_1_1_1_1_1_1_0_0);
                                    // TrCallStmt: After ProcessCallStmt
                                    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(598,19)
                                    assume true;
                                    assert {:id "id927"} _module.Expression.exprInvocation_q(expr#0);
                                    ##expr#1_1_1_1_1_1_1_0_0 := _module.Expression.fun(expr#0);
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##expr#1_1_1_1_1_1_1_0_0, Tclass._module.Expression(), $Heap);
                                    ##stC#1_1_1_1_1_1_1_0_0 := stC#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##stC#1_1_1_1_1_1_1_0_0, Tclass._module.StateC(), $Heap);
                                    ##env#1_1_1_1_1_1_1_0_0 := env#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAllocBox(##env#1_1_1_1_1_1_1_0_0, Tclass._module.Env(), $Heap);
                                    assume _module.__default.evalC#canCall(_module.Expression.fun(expr#0), stC#0, env#0);
                                    assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), _module.Expression.fun(expr#0), stC#0, env#0));
                                    assume _module.__default.evalC#canCall(_module.Expression.fun(expr#0), stC#0, env#0);
                                    resultFun#1_1_1_1_1_1_1_0_0 := _module.__default.evalC($LS($LZ), _module.Expression.fun(expr#0), stC#0, env#0);
                                    defass#resultFun#1_1_1_1_1_1_1_0_0 := true;
                                    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(599,20)
                                    assume true;
                                    assume true;
                                    assert {:id "id929"} defass#resultFun#1_1_1_1_1_1_1_0_0;
                                    assume _module.Tuple.Pair_q(resultFun#1_1_1_1_1_1_1_0_0);
                                    assume _module.Tuple.Pair_q(resultFun#1_1_1_1_1_1_1_0_0);
                                    $rhs#1_1_1_1_1_1_1_0_0 := $Unbox(_module.Tuple.fst(resultFun#1_1_1_1_1_1_1_0_0)): DatatypeType;
                                    assert {:id "id931"} defass#resultFun#1_1_1_1_1_1_1_0_0;
                                    assume _module.Tuple.Pair_q(resultFun#1_1_1_1_1_1_1_0_0);
                                    assume _module.Tuple.Pair_q(resultFun#1_1_1_1_1_1_1_0_0);
                                    $rhs#1_1_1_1_1_1_1_0_1 := $Unbox(_module.Tuple.snd(resultFun#1_1_1_1_1_1_1_0_0)): DatatypeType;
                                    fun'#1_1_1_1_1_1_1_0_0 := $rhs#1_1_1_1_1_1_1_0_0;
                                    stC'#1_1_1_1_1_1_1_0_0 := $rhs#1_1_1_1_1_1_1_0_1;
                                    defass#stC'#1_1_1_1_1_1_1_0_0 := true;
                                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(600,19)
                                    // TrCallStmt: Before ProcessCallStmt
                                    assume true;
                                    // ProcessCallStmt: CheckSubrange
                                    expr##1_1_1_1_1_1_1_0_1 := expr#0;
                                    assert {:id "id935"} _module.Expression.exprInvocation_q(expr#0);
                                    assume true;
                                    // ProcessCallStmt: CheckSubrange
                                    args##1_1_1_1_1_1_1_0_0 := _module.Expression.args(expr#0);
                                    assume true;
                                    // ProcessCallStmt: CheckSubrange
                                    stC##1_1_1_1_1_1_1_0_1 := stC#0;
                                    assume true;
                                    // ProcessCallStmt: CheckSubrange
                                    env##1_1_1_1_1_1_1_0_1 := env#0;
                                    assert {:id "id936"} DtRank(expr##1_1_1_1_1_1_1_0_1) <= DtRank(expr#0);
                                    call {:id "id937"} Call$$_module.__default.EvalArgsCLemma(expr##1_1_1_1_1_1_1_0_1, args##1_1_1_1_1_1_1_0_0, stC##1_1_1_1_1_1_1_0_1, env##1_1_1_1_1_1_1_0_1);
                                    // TrCallStmt: After ProcessCallStmt
                                    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(601,20)
                                    assume true;
                                    ##expr#1_1_1_1_1_1_1_0_1 := expr#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##expr#1_1_1_1_1_1_1_0_1, Tclass._module.Expression(), $Heap);
                                    assert {:id "id938"} _module.Expression.exprInvocation_q(expr#0);
                                    ##args#1_1_1_1_1_1_1_0_0 := _module.Expression.args(expr#0);
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##args#1_1_1_1_1_1_1_0_0, TSeq(Tclass._module.Expression()), $Heap);
                                    ##stC#1_1_1_1_1_1_1_0_1 := stC#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##stC#1_1_1_1_1_1_1_0_1, Tclass._module.StateC(), $Heap);
                                    ##env#1_1_1_1_1_1_1_0_1 := env#0;
                                    // assume allocatedness for argument to function
                                    assume $IsAllocBox(##env#1_1_1_1_1_1_1_0_1, Tclass._module.Env(), $Heap);
                                    assert {:id "id939"} {:subsumption 0} (forall arg#1_1_1_1_1_1_1_0_0: DatatypeType :: 
                                      { Seq#Contains(##args#1_1_1_1_1_1_1_0_0, $Box(arg#1_1_1_1_1_1_1_0_0)) } 
                                      $Is(arg#1_1_1_1_1_1_1_0_0, Tclass._module.Expression())
                                         ==> 
                                        Seq#Contains(##args#1_1_1_1_1_1_1_0_0, $Box(arg#1_1_1_1_1_1_1_0_0))
                                         ==> DtRank(arg#1_1_1_1_1_1_1_0_0) < DtRank(##expr#1_1_1_1_1_1_1_0_1));
                                    assume (forall arg#1_1_1_1_1_1_1_0_0: DatatypeType :: 
                                      { Seq#Contains(##args#1_1_1_1_1_1_1_0_0, $Box(arg#1_1_1_1_1_1_1_0_0)) } 
                                      $Is(arg#1_1_1_1_1_1_1_0_0, Tclass._module.Expression())
                                         ==> 
                                        Seq#Contains(##args#1_1_1_1_1_1_1_0_0, $Box(arg#1_1_1_1_1_1_1_0_0))
                                         ==> DtRank(arg#1_1_1_1_1_1_1_0_0) < DtRank(##expr#1_1_1_1_1_1_1_0_1));
                                    assume _module.__default.evalArgsC#canCall(expr#0, _module.Expression.args(expr#0), stC#0, env#0);
                                    assume _module.Tuple.Pair_q(_module.__default.evalArgsC($LS($LZ), expr#0, _module.Expression.args(expr#0), stC#0, env#0));
                                    assume _module.__default.evalArgsC#canCall(expr#0, _module.Expression.args(expr#0), stC#0, env#0);
                                    resultArgs#1_1_1_1_1_1_1_0_0 := _module.__default.evalArgsC($LS($LZ), expr#0, _module.Expression.args(expr#0), stC#0, env#0);
                                    // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(602,22)
                                    assume true;
                                    assume true;
                                    assume _module.Tuple.Pair_q(resultArgs#1_1_1_1_1_1_1_0_0);
                                    assume _module.Tuple.Pair_q(resultArgs#1_1_1_1_1_1_1_0_0);
                                    $rhs#1_1_1_1_1_1_1_0_2 := $Unbox(_module.Tuple.fst(resultArgs#1_1_1_1_1_1_1_0_0)): Seq;
                                    assume _module.Tuple.Pair_q(resultArgs#1_1_1_1_1_1_1_0_0);
                                    assume _module.Tuple.Pair_q(resultArgs#1_1_1_1_1_1_1_0_0);
                                    $rhs#1_1_1_1_1_1_1_0_3 := $Unbox(_module.Tuple.snd(resultArgs#1_1_1_1_1_1_1_0_0)): Set;
                                    args'#1_1_1_1_1_1_1_0_0 := $rhs#1_1_1_1_1_1_1_0_2;
                                    stsC'#1_1_1_1_1_1_1_0_0 := $rhs#1_1_1_1_1_1_1_0_3;
                                    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(603,16)
                                    assume true;
                                    assert {:id "id945"} defass#stC'#1_1_1_1_1_1_1_0_0;
                                    assume true;
                                    stsC''#1_1_1_1_1_1_1_0_0 := Set#Union(Set#UnionOne(Set#Empty(): Set, $Box(stC'#1_1_1_1_1_1_1_0_0)), 
                                      stsC'#1_1_1_1_1_1_1_0_0);
                                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(604,5)
                                    ##stsC#1_1_1_1_1_1_1_0_0 := stsC''#1_1_1_1_1_1_1_0_0;
                                    // assume allocatedness for argument to function
                                    assume $IsAlloc(##stsC#1_1_1_1_1_1_1_0_0, TSet(Tclass._module.StateC()), $Heap);
                                    assume _module.__default.CompatibleC#canCall(stsC''#1_1_1_1_1_1_1_0_0);
                                    assume _module.__default.CompatibleC#canCall(stsC''#1_1_1_1_1_1_1_0_0);
                                    if (_module.__default.CompatibleC(stsC''#1_1_1_1_1_1_1_0_0))
                                    {
                                        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(605,20)
                                        // TrCallStmt: Before ProcessCallStmt
                                        assume true;
                                        // ProcessCallStmt: CheckSubrange
                                        stsC##1_1_1_1_1_1_1_0_0_0 := stsC''#1_1_1_1_1_1_1_0_0;
                                        call {:id "id947"} Call$$_module.__default.CombineCLemma(stsC##1_1_1_1_1_1_1_0_0_0);
                                        // TrCallStmt: After ProcessCallStmt
                                        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(606,23)
                                        assume true;
                                        ##stsC#1_1_1_1_1_1_1_0_0_0 := stsC''#1_1_1_1_1_1_1_0_0;
                                        // assume allocatedness for argument to function
                                        assume $IsAlloc(##stsC#1_1_1_1_1_1_1_0_0_0, TSet(Tclass._module.StateC()), $Heap);
                                        assert {:id "id948"} {:subsumption 0} !Set#Equal(##stsC#1_1_1_1_1_1_1_0_0_0, Set#Empty(): Set);
                                        assume !Set#Equal(##stsC#1_1_1_1_1_1_1_0_0_0, Set#Empty(): Set);
                                        assume _module.__default.CombineC#canCall(stsC''#1_1_1_1_1_1_1_0_0);
                                        assume _module.StateC.S_q(_module.__default.CombineC($LS($LZ), stsC''#1_1_1_1_1_1_1_0_0));
                                        assume _module.__default.CombineC#canCall(stsC''#1_1_1_1_1_1_1_0_0);
                                        stCombinedC#1_1_1_1_1_1_1_0_0_0 := _module.__default.CombineC($LS($LZ), stsC''#1_1_1_1_1_1_1_0_0);
                                        defass#stCombinedC#1_1_1_1_1_1_1_0_0_0 := true;
                                        // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(607,7)
                                        if (_module.Expression.exprLiteral_q(fun'#1_1_1_1_1_1_1_0_0))
                                        {
                                            assert {:id "id950"} _module.Expression.exprLiteral_q(fun'#1_1_1_1_1_1_1_0_0);
                                        }

                                        assume true;
                                        if (_module.Expression.exprLiteral_q(fun'#1_1_1_1_1_1_1_0_0)
                                           && _module.Literal.litPrimitive_q(_module.Expression.lit(fun'#1_1_1_1_1_1_1_0_0)))
                                        {
                                            // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(608,9)
                                            assert {:id "id951"} _module.Expression.exprLiteral_q(fun'#1_1_1_1_1_1_1_0_0);
                                            assert {:id "id952"} _module.Literal.litPrimitive_q(_module.Expression.lit(fun'#1_1_1_1_1_1_1_0_0));
                                            assume true;
                                            if (_module.Primitive.primExec_q(_module.Literal.prim(_module.Expression.lit(fun'#1_1_1_1_1_1_1_0_0))))
                                            {
                                                // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(609,11)
                                                ##prim#1_1_1_1_1_1_1_0_0_0_0_0 := Lit(#_module.Primitive.primExec());
                                                // assume allocatedness for argument to function
                                                assume $IsAlloc(##prim#1_1_1_1_1_1_1_0_0_0_0_0, Tclass._module.Primitive(), $Heap);
                                                assume _module.__default.Arity#canCall(Lit(#_module.Primitive.primExec()));
                                                if (Seq#Length(args'#1_1_1_1_1_1_1_0_0)
                                                   == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec()))))
                                                {
                                                    ##prim#1_1_1_1_1_1_1_0_0_0_0_1 := Lit(#_module.Primitive.primExec());
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##prim#1_1_1_1_1_1_1_0_0_0_0_1, Tclass._module.Primitive(), $Heap);
                                                    ##args#1_1_1_1_1_1_1_0_0_0_0_0 := args'#1_1_1_1_1_1_1_0_0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##args#1_1_1_1_1_1_1_0_0_0_0_0, TSeq(Tclass._module.Expression()), $Heap);
                                                    assert {:id "id953"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                    ##stC#1_1_1_1_1_1_1_0_0_0_0_0 := stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##stC#1_1_1_1_1_1_1_0_0_0_0_0, Tclass._module.StateC(), $Heap);
                                                    assert {:id "id954"} {:subsumption 0} _module.Primitive.primExec_q(##prim#1_1_1_1_1_1_1_0_0_0_0_1)
                                                       ==> Seq#Length(##args#1_1_1_1_1_1_1_0_0_0_0_0) == LitInt(3);
                                                    assume _module.Primitive.primExec_q(##prim#1_1_1_1_1_1_1_0_0_0_0_1)
                                                       ==> Seq#Length(##args#1_1_1_1_1_1_1_0_0_0_0_0) == LitInt(3);
                                                    assert {:id "id955"} {:subsumption 0} _module.Primitive.primCreatePath_q(##prim#1_1_1_1_1_1_1_0_0_0_0_1)
                                                       ==> Seq#Length(##args#1_1_1_1_1_1_1_0_0_0_0_0) == LitInt(1);
                                                    assume _module.Primitive.primCreatePath_q(##prim#1_1_1_1_1_1_1_0_0_0_0_1)
                                                       ==> Seq#Length(##args#1_1_1_1_1_1_1_0_0_0_0_0) == LitInt(1);
                                                    assume _module.__default.ValidArgsC#canCall(Lit(#_module.Primitive.primExec()), 
                                                      args'#1_1_1_1_1_1_1_0_0, 
                                                      stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                }

                                                assume _module.__default.Arity#canCall(Lit(#_module.Primitive.primExec()))
                                                   && (Seq#Length(args'#1_1_1_1_1_1_1_0_0)
                                                       == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                     ==> _module.__default.ValidArgsC#canCall(Lit(#_module.Primitive.primExec()), 
                                                      args'#1_1_1_1_1_1_1_0_0, 
                                                      stCombinedC#1_1_1_1_1_1_1_0_0_0));
                                                if (Seq#Length(args'#1_1_1_1_1_1_1_0_0)
                                                     == LitInt(_module.__default.Arity(Lit(#_module.Primitive.primExec())))
                                                   && _module.__default.ValidArgsC(Lit(#_module.Primitive.primExec()), 
                                                    args'#1_1_1_1_1_1_1_0_0, 
                                                    stCombinedC#1_1_1_1_1_1_1_0_0_0))
                                                {
                                                    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(610,26)
                                                    // TrCallStmt: Before ProcessCallStmt
                                                    assert {:id "id956"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args'#1_1_1_1_1_1_1_0_0);
                                                    assume true;
                                                    // ProcessCallStmt: CheckSubrange
                                                    cmd##1_1_1_1_1_1_1_0_0_0_0_0_0 := $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(0))): DatatypeType;
                                                    assert {:id "id957"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args'#1_1_1_1_1_1_1_0_0);
                                                    assume true;
                                                    // ProcessCallStmt: CheckSubrange
                                                    deps##1_1_1_1_1_1_1_0_0_0_0_0_0 := $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(1))): DatatypeType;
                                                    assert {:id "id958"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args'#1_1_1_1_1_1_1_0_0);
                                                    assume true;
                                                    // ProcessCallStmt: CheckSubrange
                                                    exts##1_1_1_1_1_1_1_0_0_0_0_0_0 := $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(2))): DatatypeType;
                                                    assert {:id "id959"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                    assume true;
                                                    // ProcessCallStmt: CheckSubrange
                                                    stC##1_1_1_1_1_1_1_0_0_0_0_0_0 := stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                    call {:id "id960"} Call$$_module.__default.ExecCProperty(cmd##1_1_1_1_1_1_1_0_0_0_0_0_0, deps##1_1_1_1_1_1_1_0_0_0_0_0_0, exts##1_1_1_1_1_1_1_0_0_0_0_0_0, stC##1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                    // TrCallStmt: After ProcessCallStmt
                                                    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(611,28)
                                                    assume true;
                                                    assert {:id "id961"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args'#1_1_1_1_1_1_1_0_0);
                                                    ##cmd#1_1_1_1_1_1_1_0_0_0_0_0_0 := $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(0))): DatatypeType;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##cmd#1_1_1_1_1_1_1_0_0_0_0_0_0, Tclass._module.Expression(), $Heap);
                                                    assert {:id "id962"} 0 <= LitInt(1) && LitInt(1) < Seq#Length(args'#1_1_1_1_1_1_1_0_0);
                                                    ##deps#1_1_1_1_1_1_1_0_0_0_0_0_0 := $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(1))): DatatypeType;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##deps#1_1_1_1_1_1_1_0_0_0_0_0_0, Tclass._module.Expression(), $Heap);
                                                    assert {:id "id963"} 0 <= LitInt(2) && LitInt(2) < Seq#Length(args'#1_1_1_1_1_1_1_0_0);
                                                    ##exts#1_1_1_1_1_1_1_0_0_0_0_0_0 := $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(2))): DatatypeType;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##exts#1_1_1_1_1_1_1_0_0_0_0_0_0, Tclass._module.Expression(), $Heap);
                                                    assert {:id "id964"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                    ##stC#1_1_1_1_1_1_1_0_0_0_0_0_0 := stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##stC#1_1_1_1_1_1_1_0_0_0_0_0_0, Tclass._module.StateC(), $Heap);
                                                    assert {:id "id965"} {:subsumption 0} _module.Expression.exprLiteral_q(##cmd#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                    assert {:id "id966"} {:subsumption 0} _module.Literal.litString_q(_module.Expression.lit(##cmd#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                    assert {:id "id967"} {:subsumption 0} _module.Expression.exprLiteral_q(##deps#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                    assert {:id "id968"} {:subsumption 0} _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                    assert {:id "id969"} {:subsumption 0} _module.Expression.exprLiteral_q(##exts#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                    assert {:id "id970"} {:subsumption 0} _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                    assume _module.Expression.exprLiteral_q(##cmd#1_1_1_1_1_1_1_0_0_0_0_0_0)
                                                       && _module.Literal.litString_q(_module.Expression.lit(##cmd#1_1_1_1_1_1_1_0_0_0_0_0_0))
                                                       && _module.Expression.exprLiteral_q(##deps#1_1_1_1_1_1_1_0_0_0_0_0_0)
                                                       && _module.Literal.litArrOfPaths_q(_module.Expression.lit(##deps#1_1_1_1_1_1_1_0_0_0_0_0_0))
                                                       && _module.Expression.exprLiteral_q(##exts#1_1_1_1_1_1_1_0_0_0_0_0_0)
                                                       && _module.Literal.litArrOfStrings_q(_module.Expression.lit(##exts#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                    assume _module.__default.execC#canCall($Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(0))): DatatypeType, 
                                                      $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(1))): DatatypeType, 
                                                      $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(2))): DatatypeType, 
                                                      stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                    assume _module.Tuple.Pair_q(_module.__default.execC($Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(0))): DatatypeType, 
                                                        $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(1))): DatatypeType, 
                                                        $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(2))): DatatypeType, 
                                                        stCombinedC#1_1_1_1_1_1_1_0_0_0));
                                                    assume _module.__default.execC#canCall($Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(0))): DatatypeType, 
                                                      $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(1))): DatatypeType, 
                                                      $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(2))): DatatypeType, 
                                                      stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                    resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0 := _module.__default.execC($Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(0))): DatatypeType, 
                                                      $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(1))): DatatypeType, 
                                                      $Unbox(Seq#Index(args'#1_1_1_1_1_1_1_0_0, LitInt(2))): DatatypeType, 
                                                      stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                    defass#resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0 := true;
                                                    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(612,25)
                                                    assume true;
                                                    assert {:id "id972"} defass#resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0;
                                                    assume _module.Tuple.Pair_q(resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                    assume _module.Tuple.Pair_q(resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                    stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0 := $Unbox(_module.Tuple.snd(resultExec#1_1_1_1_1_1_1_0_0_0_0_0_0)): DatatypeType;
                                                    defass#stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0 := true;
                                                    // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(614,13)
                                                    assert {:id "id974"} defass#stC'#1_1_1_1_1_1_1_0_0;
                                                    assume _module.StateC.S_q(stC'#1_1_1_1_1_1_1_0_0);
                                                    ##st#1_1_1_1_1_1_1_0_0_0_0_0_0 := _module.StateC.st(stC'#1_1_1_1_1_1_1_0_0);
                                                    // assume allocatedness for argument to function
                                                    assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_0, Tclass._module.State(), $Heap);
                                                    assume _module.__default.DomSt#canCall(_module.StateC.st(stC'#1_1_1_1_1_1_1_0_0));
                                                    assert {:id "id975"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                    assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                    ##st#1_1_1_1_1_1_1_0_0_0_0_0_1 := _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                    // assume allocatedness for argument to function
                                                    assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_1, Tclass._module.State(), $Heap);
                                                    assume _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0));
                                                    assume _module.StateC.S_q(stC'#1_1_1_1_1_1_1_0_0)
                                                       && _module.__default.DomSt#canCall(_module.StateC.st(stC'#1_1_1_1_1_1_1_0_0))
                                                       && 
                                                      _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0)
                                                       && _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0));
                                                    assert {:id "id976"} Set#Subset(_module.__default.DomSt(_module.StateC.st(stC'#1_1_1_1_1_1_1_0_0)), 
                                                      _module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)));
                                                    // ----- forall statement (proof) ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(615,13)
                                                    if (*)
                                                    {
                                                        // Assume Fuel Constant
                                                        havoc p#1_1_1_1_1_1_1_0_0_0_0_0_0_0;
                                                        assume $Is(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, Tclass._module.Path());
                                                        assert {:id "id977"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                        assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                        ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_0 := _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                        // assume allocatedness for argument to function
                                                        assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_0_0, Tclass._module.State(), $Heap);
                                                        assume _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0));
                                                        if (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)), 
                                                          $Box(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0)))
                                                        {
                                                            assert {:id "id978"} defass#stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0;
                                                            assume _module.StateC.S_q(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                            ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_1 := _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                            // assume allocatedness for argument to function
                                                            assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_0_1, Tclass._module.State(), $Heap);
                                                            assume _module.__default.DomSt#canCall(_module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                        }

                                                        assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0)
                                                           && _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0))
                                                           && (Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)), 
                                                              $Box(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0))
                                                             ==> _module.StateC.S_q(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)
                                                               && _module.__default.DomSt#canCall(_module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)));
                                                        assume {:id "id979"} Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)), 
                                                            $Box(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0))
                                                           && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)), 
                                                            $Box(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0));
                                                        if (*)
                                                        {
                                                            ##p#1_1_1_1_1_1_1_0_0_0_0_0_0_0 := p#1_1_1_1_1_1_1_0_0_0_0_0_0_0;
                                                            // assume allocatedness for argument to function
                                                            assume $IsAlloc(##p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, Tclass._module.Path(), $Heap);
                                                            assert {:id "id980"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                            assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                            ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_2 := _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                            // assume allocatedness for argument to function
                                                            assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_0_2, Tclass._module.State(), $Heap);
                                                            assume _module.__default.GetSt#canCall(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, 
                                                              _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0));
                                                            ##p#1_1_1_1_1_1_1_0_0_0_0_0_0_1 := p#1_1_1_1_1_1_1_0_0_0_0_0_0_0;
                                                            // assume allocatedness for argument to function
                                                            assume $IsAlloc(##p#1_1_1_1_1_1_1_0_0_0_0_0_0_1, Tclass._module.Path(), $Heap);
                                                            assert {:id "id981"} defass#stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0;
                                                            assume _module.StateC.S_q(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                            ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_3 := _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                            // assume allocatedness for argument to function
                                                            assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_0_3, Tclass._module.State(), $Heap);
                                                            assume _module.__default.GetSt#canCall(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, 
                                                              _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                            assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0)
                                                               && _module.__default.GetSt#canCall(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, 
                                                                _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0))
                                                               && 
                                                              _module.StateC.S_q(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)
                                                               && _module.__default.GetSt#canCall(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, 
                                                                _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                            assume {:id "id982"} _module.__default.GetSt(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, 
                                                                _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0))
                                                               == _module.__default.GetSt(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, 
                                                                _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                            assume false;
                                                        }

                                                        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(618,15)
                                                        assert {:id "id983"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                        assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                        ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_4 := _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                        // assume allocatedness for argument to function
                                                        assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_0_4, Tclass._module.State(), $Heap);
                                                        assume _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0));
                                                        assert {:id "id984"} defass#stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0;
                                                        assume _module.StateC.S_q(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                        ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_5 := _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                        // assume allocatedness for argument to function
                                                        assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_0_5, Tclass._module.State(), $Heap);
                                                        assume _module.__default.DomSt#canCall(_module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                        assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0)
                                                           && _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0))
                                                           && 
                                                          _module.StateC.S_q(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)
                                                           && _module.__default.DomSt#canCall(_module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                        assert {:id "id985"} Set#Subset(_module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)), 
                                                          _module.__default.DomSt(_module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)));
                                                        // ----- assert statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(619,15)
                                                        assert {:id "id986"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                        assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                        assert {:id "id987"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                        assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                        ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_6 := _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                        // assume allocatedness for argument to function
                                                        assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_0_6, Tclass._module.State(), $Heap);
                                                        assume _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0));
                                                        ##paths#1_1_1_1_1_1_1_0_0_0_0_0_0_0 := _module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0));
                                                        // assume allocatedness for argument to function
                                                        assume $IsAlloc(##paths#1_1_1_1_1_1_1_0_0_0_0_0_0_0, TSet(Tclass._module.Path()), $Heap);
                                                        assert {:id "id988"} defass#stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0;
                                                        assume _module.StateC.S_q(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                        ##st#1_1_1_1_1_1_1_0_0_0_0_0_0_7 := _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0);
                                                        // assume allocatedness for argument to function
                                                        assume $IsAllocBox(##st#1_1_1_1_1_1_1_0_0_0_0_0_0_7, Tclass._module.State(), $Heap);
                                                        assert {:id "id989"} {:subsumption 0} Set#Subset(##paths#1_1_1_1_1_1_1_0_0_0_0_0_0_0, 
                                                          _module.__default.DomSt(##st#1_1_1_1_1_1_1_0_0_0_0_0_0_7));
                                                        assume _module.__default.Restrict#canCall(_module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)), 
                                                          _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                        assume _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0)
                                                           && 
                                                          _module.StateC.S_q(stCombinedC#1_1_1_1_1_1_1_0_0_0)
                                                           && _module.__default.DomSt#canCall(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0))
                                                           && _module.StateC.S_q(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)
                                                           && _module.__default.Restrict#canCall(_module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)), 
                                                            _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                        assert {:id "id990"} _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)
                                                           == _module.__default.Restrict(_module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)), 
                                                            _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                        assert {:id "id991"} _module.__default.GetSt(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, 
                                                            _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0))
                                                           == _module.__default.GetSt(p#1_1_1_1_1_1_1_0_0_0_0_0_0_0, 
                                                            _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0));
                                                        assume false;
                                                    }
                                                    else
                                                    {
                                                        assume (forall p#1_1_1_1_1_1_1_0_0_0_0_0_0_1: DatatypeType :: 
                                                          { _module.__default.GetSt(p#1_1_1_1_1_1_1_0_0_0_0_0_0_1, 
                                                              _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)) } 
                                                            { _module.__default.GetSt(p#1_1_1_1_1_1_1_0_0_0_0_0_0_1, 
                                                              _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)) } 
                                                            { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)), 
                                                              $Box(p#1_1_1_1_1_1_1_0_0_0_0_0_0_1)) } 
                                                            { Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)), 
                                                              $Box(p#1_1_1_1_1_1_1_0_0_0_0_0_0_1)) } 
                                                          $Is(p#1_1_1_1_1_1_1_0_0_0_0_0_0_1, Tclass._module.Path())
                                                               && 
                                                              Set#IsMember(_module.__default.DomSt(_module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0)), 
                                                                $Box(p#1_1_1_1_1_1_1_0_0_0_0_0_0_1))
                                                               && Set#IsMember(_module.__default.DomSt(_module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)), 
                                                                $Box(p#1_1_1_1_1_1_1_0_0_0_0_0_0_1))
                                                             ==> _module.__default.GetSt(p#1_1_1_1_1_1_1_0_0_0_0_0_0_1, 
                                                                _module.StateC.st(stCombinedC#1_1_1_1_1_1_1_0_0_0))
                                                               == _module.__default.GetSt(p#1_1_1_1_1_1_1_0_0_0_0_0_0_1, 
                                                                _module.StateC.st(stExecC#1_1_1_1_1_1_1_0_0_0_0_0_0)));
                                                    }
                                                }
                                                else
                                                {
                                                    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(622,13)
                                                    assert {:id "id992"} defass#stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                    ##stC#1_1_1_1_1_1_1_0_0_0_0_1_0 := stCombinedC#1_1_1_1_1_1_1_0_0_0;
                                                    // assume allocatedness for argument to function
                                                    assume $IsAlloc(##stC#1_1_1_1_1_1_1_0_0_0_0_1_0, Tclass._module.StateC(), $Heap);
                                                    assume _module.__default.ConsistentCache#canCall(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                    assume _module.__default.ConsistentCache#canCall(stCombinedC#1_1_1_1_1_1_1_0_0_0);
                                                    if (_module.__default.ConsistentCache(stCombinedC#1_1_1_1_1_1_1_0_0_0))
                                                    {
                                                    }
                                                    else
                                                    {
                                                    }
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    else
                                    {
                                    }
                                }
                                else
                                {
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}



procedure {:verboseName "EvalArgsCLemma (well-formedness)"} CheckWellFormed$$_module.__default.EvalArgsCLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass._module.Expression())
         && $IsAlloc(expr#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(expr#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass._module.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass._module.Expression()), $Heap), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EvalArgsCLemma (well-formedness)"} CheckWellFormed$$_module.__default.EvalArgsCLemma(expr#0: DatatypeType, args#0: Seq, stC#0: DatatypeType, env#0: Box)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stC#0: DatatypeType;
  var arg#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##args#0: Seq;
  var ##stC#1: DatatypeType;
  var ##env#0: Box;
  var stsC'#Z#0: Set;
  var let#1#0#0: Set;
  var stC'#0: DatatypeType;
  var ##stC#2: DatatypeType;


    // AddMethodImpl: EvalArgsCLemma, CheckWellFormed$$_module.__default.EvalArgsCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id993"} _module.__default.ConsistentCache(stC#0);
    havoc arg#0;
    assume $Is(arg#0, Tclass._module.Expression())
       && $IsAlloc(arg#0, Tclass._module.Expression(), $Heap);
    if (*)
    {
        assume {:id "id994"} Seq#Contains(args#0, $Box(arg#0));
        assume {:id "id995"} DtRank(arg#0) < DtRank(expr#0);
    }
    else
    {
        assume {:id "id996"} Seq#Contains(args#0, $Box(arg#0)) ==> DtRank(arg#0) < DtRank(expr#0);
    }

    assume {:id "id997"} (forall arg#1: DatatypeType :: 
      { Seq#Contains(args#0, $Box(arg#1)) } 
      $Is(arg#1, Tclass._module.Expression())
         ==> 
        Seq#Contains(args#0, $Box(arg#1))
         ==> DtRank(arg#1) < DtRank(expr#0));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass._module.Expression(), $Heap);
    ##args#0 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass._module.Expression()), $Heap);
    ##stC#1 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
    assert {:id "id998"} {:subsumption 0} (forall arg#2: DatatypeType :: 
      { Seq#Contains(##args#0, $Box(arg#2)) } 
      $Is(arg#2, Tclass._module.Expression())
         ==> 
        Seq#Contains(##args#0, $Box(arg#2))
         ==> DtRank(arg#2) < DtRank(##expr#0));
    assume (forall arg#2: DatatypeType :: 
      { Seq#Contains(##args#0, $Box(arg#2)) } 
      $Is(arg#2, Tclass._module.Expression())
         ==> 
        Seq#Contains(##args#0, $Box(arg#2))
         ==> DtRank(arg#2) < DtRank(##expr#0));
    assume _module.__default.evalArgsC#canCall(expr#0, args#0, stC#0, env#0);
    assume _module.Tuple.Pair_q(_module.__default.evalArgsC($LS($LZ), expr#0, args#0, stC#0, env#0));
    assume {:id "id999"} let#0#0#0 == _module.__default.evalArgsC($LS($LZ), expr#0, args#0, stC#0, env#0);
    assume _module.__default.evalArgsC#canCall(expr#0, args#0, stC#0, env#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, 
      Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())));
    assume {:id "id1000"} result#Z#0 == let#0#0#0;
    havoc stsC'#Z#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id1001"} let#1#0#0 == $Unbox(_module.Tuple.snd(result#Z#0)): Set;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, TSet(Tclass._module.StateC()));
    assume {:id "id1002"} stsC'#Z#0 == let#1#0#0;
    // Begin Comprehension WF check
    havoc stC'#0;
    if ($Is(stC'#0, Tclass._module.StateC())
       && $IsAlloc(stC'#0, Tclass._module.StateC(), $Heap))
    {
        if (Set#IsMember(stsC'#Z#0, $Box(stC'#0)))
        {
            ##stC#2 := stC'#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
            assume _module.__default.ConsistentCache#canCall(stC'#0);
        }
    }

    // End Comprehension WF check
    assume {:id "id1003"} (var result#0 := _module.__default.evalArgsC($LS($LZ), expr#0, args#0, stC#0, env#0); 
      (var stsC'#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
        (forall stC'#1: DatatypeType :: 
          { _module.__default.ConsistentCache(stC'#1) } 
            { Set#IsMember(stsC'#0, $Box(stC'#1)) } 
          $Is(stC'#1, Tclass._module.StateC())
             ==> 
            Set#IsMember(stsC'#0, $Box(stC'#1))
             ==> _module.__default.ConsistentCache(stC'#1))));
}



procedure {:verboseName "EvalArgsCLemma (call)"} Call$$_module.__default.EvalArgsCLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass._module.Expression())
         && $IsAlloc(expr#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(expr#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass._module.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass._module.Expression()), $Heap), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap));
  // user-defined preconditions
  requires {:id "id1004"} _module.__default.ConsistentCache#canCall(stC#0)
     ==> _module.__default.ConsistentCache(stC#0)
       || (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
        { _module.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, Tclass._module.Expression())
             && $Is(deps#0, Tclass._module.Expression())
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#0))));
  requires {:id "id1005"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass._module.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(expr#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.evalArgsC#canCall(expr#0, args#0, stC#0, env#0)
     && (var result#0 := _module.__default.evalArgsC($LS($LZ), expr#0, args#0, stC#0, env#0); 
      _module.Tuple.Pair_q(result#0)
         && (var stsC'#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
          (forall stC'#1: DatatypeType :: 
            { _module.__default.ConsistentCache(stC'#1) } 
              { Set#IsMember(stsC'#0, $Box(stC'#1)) } 
            $Is(stC'#1, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC'#0, $Box(stC'#1))
               ==> _module.__default.ConsistentCache#canCall(stC'#1))));
  ensures {:id "id1006"} (var result#0 := _module.__default.evalArgsC($LS($LS($LZ)), expr#0, args#0, stC#0, env#0); 
    (var stsC'#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
      (forall stC'#1: DatatypeType :: 
        { _module.__default.ConsistentCache(stC'#1) } 
          { Set#IsMember(stsC'#0, $Box(stC'#1)) } 
        $Is(stC'#1, Tclass._module.StateC())
           ==> 
          Set#IsMember(stsC'#0, $Box(stC'#1))
           ==> _module.__default.ConsistentCache(stC'#1))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "EvalArgsCLemma (correctness)"} Impl$$_module.__default.EvalArgsCLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass._module.Expression())
         && $IsAlloc(expr#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(expr#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass._module.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass._module.Expression()), $Heap), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1007"} _module.__default.ConsistentCache#canCall(stC#0)
     && 
    _module.__default.ConsistentCache(stC#0)
     && (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#1: Seq :: 
      { _module.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, Tclass._module.Expression())
           && $Is(deps#1, Tclass._module.Expression())
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#1, deps#1, e#1))));
  requires {:id "id1008"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass._module.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(expr#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.evalArgsC#canCall(expr#0, args#0, stC#0, env#0)
     && (var result#0 := _module.__default.evalArgsC($LS($LZ), expr#0, args#0, stC#0, env#0); 
      _module.Tuple.Pair_q(result#0)
         && (var stsC'#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
          (forall stC'#1: DatatypeType :: 
            { _module.__default.ConsistentCache(stC'#1) } 
              { Set#IsMember(stsC'#0, $Box(stC'#1)) } 
            $Is(stC'#1, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC'#0, $Box(stC'#1))
               ==> _module.__default.ConsistentCache#canCall(stC'#1))));
  ensures {:id "id1009"} (var result#0 := _module.__default.evalArgsC($LS($LS($LZ)), expr#0, args#0, stC#0, env#0); 
    (var stsC'#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
      (forall stC'#1: DatatypeType :: 
        { _module.__default.ConsistentCache(stC'#1) } 
          { Set#IsMember(stsC'#0, $Box(stC'#1)) } 
        $Is(stC'#1, Tclass._module.StateC())
           ==> 
          Set#IsMember(stsC'#0, $Box(stC'#1))
           ==> _module.__default.ConsistentCache(stC'#1))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EvalArgsCLemma (correctness)"} Impl$$_module.__default.EvalArgsCLemma(expr#0: DatatypeType, args#0: Seq, stC#0: DatatypeType, env#0: Box)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var expr##0: DatatypeType;
  var args##0: Seq;
  var stC##0: DatatypeType;
  var env##0: Box;
  var args'##0: Seq;
  var stsC'##0: Set;

    // AddMethodImpl: EvalArgsCLemma, Impl$$_module.__default.EvalArgsCLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.Expression(expr#0);
    assume $IsA#_module.StateC(stC#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#expr0#0: DatatypeType, $ih#args0#0: Seq, $ih#stC0#0: DatatypeType :: 
      { _module.__default.evalArgsC($LS($LZ), $ih#expr0#0, $ih#args0#0, $ih#stC0#0, env#0) } 
      $Is($ih#expr0#0, Tclass._module.Expression())
           && $Is($ih#args0#0, TSeq(Tclass._module.Expression()))
           && $Is($ih#stC0#0, Tclass._module.StateC())
           && 
          _module.__default.ConsistentCache($ih#stC0#0)
           && (forall arg#3: DatatypeType :: 
            { Seq#Contains($ih#args0#0, $Box(arg#3)) } 
            $Is(arg#3, Tclass._module.Expression())
               ==> 
              Seq#Contains($ih#args0#0, $Box(arg#3))
               ==> DtRank(arg#3) < DtRank($ih#expr0#0))
           && (DtRank($ih#expr0#0) < DtRank(expr#0)
             || (DtRank($ih#expr0#0) == DtRank(expr#0)
               && 
              0 <= Seq#Length($ih#args0#0) + 1
               && Seq#Length($ih#args0#0) + 1 < Seq#Length(args#0) + 1))
         ==> (var result#1 := _module.__default.evalArgsC($LS($LZ), $ih#expr0#0, $ih#args0#0, $ih#stC0#0, env#0); 
          (var stsC'#1 := $Unbox(_module.Tuple.snd(result#1)): Set; 
            (forall stC'#2: DatatypeType :: 
              { _module.__default.ConsistentCache(stC'#2) } 
                { Set#IsMember(stsC'#1, $Box(stC'#2)) } 
              $Is(stC'#2, Tclass._module.StateC())
                 ==> 
                Set#IsMember(stsC'#1, $Box(stC'#2))
                 ==> _module.__default.ConsistentCache(stC'#2)))));
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(641,18)
    // TrCallStmt: Before ProcessCallStmt
    assume true;
    // ProcessCallStmt: CheckSubrange
    expr##0 := expr#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    args##0 := args#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    stC##0 := stC#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    env##0 := env#0;
    assume true;
    // ProcessCallStmt: CheckSubrange
    args'##0 := Lit(Seq#Empty(): Seq);
    assume true;
    // ProcessCallStmt: CheckSubrange
    stsC'##0 := Lit(Set#Empty(): Set);
    assert {:id "id1010"} 0 <= Seq#Length(args#0) + 1
       || DtRank(expr##0) < DtRank(expr#0)
       || Seq#Length(args##0) == Seq#Length(args#0) + 1;
    assert {:id "id1011"} DtRank(expr##0) < DtRank(expr#0)
       || (DtRank(expr##0) == DtRank(expr#0)
         && Seq#Length(args##0) < Seq#Length(args#0) + 1);
    call {:id "id1012"} Call$$_module.__default.EvalArgsC_kLemma(expr##0, args##0, stC##0, env##0, args'##0, stsC'##0);
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "EvalArgsC'Lemma (well-formedness)"} CheckWellFormed$$_module.__default.EvalArgsC_kLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass._module.Expression())
         && $IsAlloc(expr#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(expr#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass._module.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass._module.Expression()), $Heap), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap), 
    args'#0: Seq
       where $Is(args'#0, TSeq(Tclass._module.Expression()))
         && $IsAlloc(args'#0, TSeq(Tclass._module.Expression()), $Heap), 
    stsC'#0: Set
       where $Is(stsC'#0, TSet(Tclass._module.StateC()))
         && $IsAlloc(stsC'#0, TSet(Tclass._module.StateC()), $Heap));
  free requires 7 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EvalArgsC'Lemma (well-formedness)"} CheckWellFormed$$_module.__default.EvalArgsC_kLemma(expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box, 
    args'#0: Seq, 
    stsC'#0: Set)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var ##stC#0: DatatypeType;
  var stC'#0: DatatypeType;
  var ##stC#1: DatatypeType;
  var arg#0: DatatypeType;
  var result#Z#0: DatatypeType;
  var let#0#0#0: DatatypeType;
  var ##expr#0: DatatypeType;
  var ##args#0: Seq;
  var ##stC#2: DatatypeType;
  var ##env#0: Box;
  var ##args'#0: Seq;
  var ##stsC'#0: Set;
  var stsC''#Z#0: Set;
  var let#1#0#0: Set;
  var stC''#0: DatatypeType;
  var ##stC#3: DatatypeType;


    // AddMethodImpl: EvalArgsC'Lemma, CheckWellFormed$$_module.__default.EvalArgsC_kLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    ##stC#0 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#0, Tclass._module.StateC(), $Heap);
    assume _module.__default.ConsistentCache#canCall(stC#0);
    assume {:id "id1013"} _module.__default.ConsistentCache(stC#0);
    havoc stC'#0;
    assume $Is(stC'#0, Tclass._module.StateC())
       && $IsAlloc(stC'#0, Tclass._module.StateC(), $Heap);
    if (*)
    {
        assume {:id "id1014"} Set#IsMember(stsC'#0, $Box(stC'#0));
        ##stC#1 := stC'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#1, Tclass._module.StateC(), $Heap);
        assume _module.__default.ConsistentCache#canCall(stC'#0);
        assume {:id "id1015"} _module.__default.ConsistentCache(stC'#0);
    }
    else
    {
        assume {:id "id1016"} Set#IsMember(stsC'#0, $Box(stC'#0))
           ==> _module.__default.ConsistentCache(stC'#0);
    }

    assume {:id "id1017"} (forall stC'#1: DatatypeType :: 
      { _module.__default.ConsistentCache(stC'#1) } 
        { Set#IsMember(stsC'#0, $Box(stC'#1)) } 
      $Is(stC'#1, Tclass._module.StateC())
         ==> 
        Set#IsMember(stsC'#0, $Box(stC'#1))
         ==> _module.__default.ConsistentCache(stC'#1));
    havoc arg#0;
    assume $Is(arg#0, Tclass._module.Expression())
       && $IsAlloc(arg#0, Tclass._module.Expression(), $Heap);
    if (*)
    {
        assume {:id "id1018"} Seq#Contains(args#0, $Box(arg#0));
        assume {:id "id1019"} DtRank(arg#0) < DtRank(expr#0);
    }
    else
    {
        assume {:id "id1020"} Seq#Contains(args#0, $Box(arg#0)) ==> DtRank(arg#0) < DtRank(expr#0);
    }

    assume {:id "id1021"} (forall arg#1: DatatypeType :: 
      { Seq#Contains(args#0, $Box(arg#1)) } 
      $Is(arg#1, Tclass._module.Expression())
         ==> 
        Seq#Contains(args#0, $Box(arg#1))
         ==> DtRank(arg#1) < DtRank(expr#0));
    havoc $Heap;
    assume old($Heap) == $Heap;
    havoc result#Z#0;
    ##expr#0 := expr#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##expr#0, Tclass._module.Expression(), $Heap);
    ##args#0 := args#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args#0, TSeq(Tclass._module.Expression()), $Heap);
    ##stC#2 := stC#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stC#2, Tclass._module.StateC(), $Heap);
    ##env#0 := env#0;
    // assume allocatedness for argument to function
    assume $IsAllocBox(##env#0, Tclass._module.Env(), $Heap);
    ##args'#0 := args'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##args'#0, TSeq(Tclass._module.Expression()), $Heap);
    ##stsC'#0 := stsC'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##stsC'#0, TSet(Tclass._module.StateC()), $Heap);
    assert {:id "id1022"} {:subsumption 0} (forall arg#2: DatatypeType :: 
      { Seq#Contains(##args#0, $Box(arg#2)) } 
      $Is(arg#2, Tclass._module.Expression())
         ==> 
        Seq#Contains(##args#0, $Box(arg#2))
         ==> DtRank(arg#2) < DtRank(##expr#0));
    assume (forall arg#2: DatatypeType :: 
      { Seq#Contains(##args#0, $Box(arg#2)) } 
      $Is(arg#2, Tclass._module.Expression())
         ==> 
        Seq#Contains(##args#0, $Box(arg#2))
         ==> DtRank(arg#2) < DtRank(##expr#0));
    assume _module.__default.evalArgsC_k#canCall(expr#0, args#0, stC#0, env#0, args'#0, stsC'#0);
    assume _module.Tuple.Pair_q(_module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0));
    assume {:id "id1023"} let#0#0#0
       == _module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0);
    assume _module.__default.evalArgsC_k#canCall(expr#0, args#0, stC#0, env#0, args'#0, stsC'#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#0#0#0, 
      Tclass._module.Tuple(TSeq(Tclass._module.Expression()), TSet(Tclass._module.StateC())));
    assume {:id "id1024"} result#Z#0 == let#0#0#0;
    havoc stsC''#Z#0;
    assume _module.Tuple.Pair_q(result#Z#0);
    assume {:id "id1025"} let#1#0#0 == $Unbox(_module.Tuple.snd(result#Z#0)): Set;
    assume _module.Tuple.Pair_q(result#Z#0);
    // CheckWellformedWithResult: any expression
    assume $Is(let#1#0#0, TSet(Tclass._module.StateC()));
    assume {:id "id1026"} stsC''#Z#0 == let#1#0#0;
    // Begin Comprehension WF check
    havoc stC''#0;
    if ($Is(stC''#0, Tclass._module.StateC())
       && $IsAlloc(stC''#0, Tclass._module.StateC(), $Heap))
    {
        if (Set#IsMember(stsC''#Z#0, $Box(stC''#0)))
        {
            ##stC#3 := stC''#0;
            // assume allocatedness for argument to function
            assume $IsAlloc(##stC#3, Tclass._module.StateC(), $Heap);
            assume _module.__default.ConsistentCache#canCall(stC''#0);
        }
    }

    // End Comprehension WF check
    assume {:id "id1027"} (var result#0 := _module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0); 
      (var stsC''#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
        (forall stC''#1: DatatypeType :: 
          { _module.__default.ConsistentCache(stC''#1) } 
            { Set#IsMember(stsC''#0, $Box(stC''#1)) } 
          $Is(stC''#1, Tclass._module.StateC())
             ==> 
            Set#IsMember(stsC''#0, $Box(stC''#1))
             ==> _module.__default.ConsistentCache(stC''#1))));
}



procedure {:verboseName "EvalArgsC'Lemma (call)"} Call$$_module.__default.EvalArgsC_kLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass._module.Expression())
         && $IsAlloc(expr#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(expr#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass._module.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass._module.Expression()), $Heap), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap), 
    args'#0: Seq
       where $Is(args'#0, TSeq(Tclass._module.Expression()))
         && $IsAlloc(args'#0, TSeq(Tclass._module.Expression()), $Heap), 
    stsC'#0: Set
       where $Is(stsC'#0, TSet(Tclass._module.StateC()))
         && $IsAlloc(stsC'#0, TSet(Tclass._module.StateC()), $Heap));
  // user-defined preconditions
  requires {:id "id1028"} _module.__default.ConsistentCache#canCall(stC#0)
     ==> _module.__default.ConsistentCache(stC#0)
       || (forall cmd#0: DatatypeType, deps#0: DatatypeType, e#0: Seq :: 
        { _module.__default.Loc(cmd#0, deps#0, e#0) } 
        $Is(cmd#0, Tclass._module.Expression())
             && $Is(deps#0, Tclass._module.Expression())
             && $Is(e#0, TSeq(TChar))
           ==> 
          Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
            _module.__default.Hash(_module.__default.Loc(cmd#0, deps#0, e#0)))
           ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
            $Box(_module.__default.Loc(cmd#0, deps#0, e#0))));
  requires {:id "id1029"} (forall stC'#1: DatatypeType :: 
    { _module.__default.ConsistentCache(stC'#1) } 
      { Set#IsMember(stsC'#0, $Box(stC'#1)) } 
    $Is(stC'#1, Tclass._module.StateC())
       ==> 
      Set#IsMember(stsC'#0, $Box(stC'#1))
       ==> _module.__default.ConsistentCache(stC'#1));
  requires {:id "id1030"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass._module.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(expr#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.evalArgsC_k#canCall(expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
     && (var result#0 := _module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0); 
      _module.Tuple.Pair_q(result#0)
         && (var stsC''#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
          (forall stC''#1: DatatypeType :: 
            { _module.__default.ConsistentCache(stC''#1) } 
              { Set#IsMember(stsC''#0, $Box(stC''#1)) } 
            $Is(stC''#1, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC''#0, $Box(stC''#1))
               ==> _module.__default.ConsistentCache#canCall(stC''#1))));
  ensures {:id "id1031"} (var result#0 := _module.__default.evalArgsC_k($LS($LS($LZ)), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0); 
    (var stsC''#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
      (forall stC''#1: DatatypeType :: 
        { _module.__default.ConsistentCache(stC''#1) } 
          { Set#IsMember(stsC''#0, $Box(stC''#1)) } 
        $Is(stC''#1, Tclass._module.StateC())
           ==> 
          Set#IsMember(stsC''#0, $Box(stC''#1))
           ==> _module.__default.ConsistentCache(stC''#1))));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure {:verboseName "EvalArgsC'Lemma (correctness)"} Impl$$_module.__default.EvalArgsC_kLemma(expr#0: DatatypeType
       where $Is(expr#0, Tclass._module.Expression())
         && $IsAlloc(expr#0, Tclass._module.Expression(), $Heap)
         && $IsA#_module.Expression(expr#0), 
    args#0: Seq
       where $Is(args#0, TSeq(Tclass._module.Expression()))
         && $IsAlloc(args#0, TSeq(Tclass._module.Expression()), $Heap), 
    stC#0: DatatypeType
       where $Is(stC#0, Tclass._module.StateC())
         && $IsAlloc(stC#0, Tclass._module.StateC(), $Heap)
         && $IsA#_module.StateC(stC#0), 
    env#0: Box
       where $IsBox(env#0, Tclass._module.Env())
         && $IsAllocBox(env#0, Tclass._module.Env(), $Heap), 
    args'#0: Seq
       where $Is(args'#0, TSeq(Tclass._module.Expression()))
         && $IsAlloc(args'#0, TSeq(Tclass._module.Expression()), $Heap), 
    stsC'#0: Set
       where $Is(stsC'#0, TSet(Tclass._module.StateC()))
         && $IsAlloc(stsC'#0, TSet(Tclass._module.StateC()), $Heap))
   returns ($_reverifyPost: bool);
  free requires 7 == $FunctionContextHeight;
  // user-defined preconditions
  free requires {:id "id1032"} _module.__default.ConsistentCache#canCall(stC#0)
     && 
    _module.__default.ConsistentCache(stC#0)
     && (forall cmd#1: DatatypeType, deps#1: DatatypeType, e#1: Seq :: 
      { _module.__default.Loc(cmd#1, deps#1, e#1) } 
      $Is(cmd#1, Tclass._module.Expression())
           && $Is(deps#1, Tclass._module.Expression())
           && $Is(e#1, TSeq(TChar))
         ==> 
        Set#IsMember(_module.__default.DomC(_module.StateC.c(stC#0)), 
          _module.__default.Hash(_module.__default.Loc(cmd#1, deps#1, e#1)))
         ==> Set#IsMember(_module.__default.DomSt(_module.StateC.st(stC#0)), 
          $Box(_module.__default.Loc(cmd#1, deps#1, e#1))));
  requires {:id "id1033"} (forall stC'#1: DatatypeType :: 
    { _module.__default.ConsistentCache(stC'#1) } 
      { Set#IsMember(stsC'#0, $Box(stC'#1)) } 
    $Is(stC'#1, Tclass._module.StateC())
       ==> 
      Set#IsMember(stsC'#0, $Box(stC'#1))
       ==> _module.__default.ConsistentCache(stC'#1));
  requires {:id "id1034"} (forall arg#1: DatatypeType :: 
    { Seq#Contains(args#0, $Box(arg#1)) } 
    $Is(arg#1, Tclass._module.Expression())
       ==> 
      Seq#Contains(args#0, $Box(arg#1))
       ==> DtRank(arg#1) < DtRank(expr#0));
  modifies $Heap;
  // user-defined postconditions
  free ensures _module.__default.evalArgsC_k#canCall(expr#0, args#0, stC#0, env#0, args'#0, stsC'#0)
     && (var result#0 := _module.__default.evalArgsC_k($LS($LZ), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0); 
      _module.Tuple.Pair_q(result#0)
         && (var stsC''#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
          (forall stC''#1: DatatypeType :: 
            { _module.__default.ConsistentCache(stC''#1) } 
              { Set#IsMember(stsC''#0, $Box(stC''#1)) } 
            $Is(stC''#1, Tclass._module.StateC())
               ==> 
              Set#IsMember(stsC''#0, $Box(stC''#1))
               ==> _module.__default.ConsistentCache#canCall(stC''#1))));
  ensures {:id "id1035"} (var result#0 := _module.__default.evalArgsC_k($LS($LS($LZ)), expr#0, args#0, stC#0, env#0, args'#0, stsC'#0); 
    (var stsC''#0 := $Unbox(_module.Tuple.snd(result#0)): Set; 
      (forall stC''#1: DatatypeType :: 
        { _module.__default.ConsistentCache(stC''#1) } 
          { Set#IsMember(stsC''#0, $Box(stC''#1)) } 
        $Is(stC''#1, Tclass._module.StateC())
           ==> 
          Set#IsMember(stsC''#0, $Box(stC''#1))
           ==> _module.__default.ConsistentCache(stC''#1))));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "EvalArgsC'Lemma (correctness)"} Impl$$_module.__default.EvalArgsC_kLemma(expr#0: DatatypeType, 
    args#0: Seq, 
    stC#0: DatatypeType, 
    env#0: Box, 
    args'#0: Seq, 
    stsC'#0: Set)
   returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var $initHeapForallStmt#0: Heap;
  var arg#1_0: DatatypeType
     where $Is(arg#1_0, Tclass._module.Expression())
       && $IsAlloc(arg#1_0, Tclass._module.Expression(), $Heap);
  var expr##1_0: DatatypeType;
  var stC##1_0: DatatypeType;
  var env##1_0: Box;
  var defass#result#1_0: bool;
  var result#1_0: DatatypeType
     where defass#result#1_0
       ==> $Is(result#1_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()))
         && $IsAlloc(result#1_0, 
          Tclass._module.Tuple(Tclass._module.Expression(), Tclass._module.StateC()), 
          $Heap);
  var ##expr#1_0: DatatypeType;
  var ##stC#1_0: DatatypeType;
  var ##env#1_0: Box;
  var arg'#1_0: DatatypeType
     where $Is(arg'#1_0, Tclass._module.Expression())
       && $IsAlloc(arg'#1_0, Tclass._module.Expression(), $Heap);
  var defass#stC'#1_0: bool;
  var stC'#1_0: DatatypeType
     where defass#stC'#1_0
       ==> $Is(stC'#1_0, Tclass._module.StateC())
         && $IsAlloc(stC'#1_0, Tclass._module.StateC(), $Heap);
  var $rhs#1_0: DatatypeType;
  var $rhs#1_1: DatatypeType;
  var expr##1_1: DatatypeType;
  var args##1_0: Seq;
  var stC##1_1: DatatypeType;
  var env##1_1: Box;
  var args'##1_0: Seq;
  var stsC'##1_0: Set;

    // AddMethodImpl: EvalArgsC'Lemma, Impl$$_module.__default.EvalArgsC_kLemma
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    assume $IsA#_module.Expression(expr#0);
    assume $IsA#_module.StateC(stC#0);
    $initHeapForallStmt#0 := $Heap;
    havoc $Heap;
    assume $initHeapForallStmt#0 == $Heap;
    assume (forall $ih#expr0#0: DatatypeType, 
        $ih#args0#0: Seq, 
        $ih#stC0#0: DatatypeType, 
        $ih#args'0#0: Seq, 
        $ih#stsC'0#0: Set :: 
      { _module.__default.evalArgsC_k($LS($LZ), 
          $ih#expr0#0, 
          $ih#args0#0, 
          $ih#stC0#0, 
          env#0, 
          $ih#args'0#0, 
          $ih#stsC'0#0) } 
      $Is($ih#expr0#0, Tclass._module.Expression())
           && $Is($ih#args0#0, TSeq(Tclass._module.Expression()))
           && $Is($ih#stC0#0, Tclass._module.StateC())
           && $Is($ih#args'0#0, TSeq(Tclass._module.Expression()))
           && $Is($ih#stsC'0#0, TSet(Tclass._module.StateC()))
           && 
          _module.__default.ConsistentCache($ih#stC0#0)
           && (forall stC'#2: DatatypeType :: 
            { _module.__default.ConsistentCache(stC'#2) } 
              { Set#IsMember($ih#stsC'0#0, $Box(stC'#2)) } 
            $Is(stC'#2, Tclass._module.StateC())
               ==> 
              Set#IsMember($ih#stsC'0#0, $Box(stC'#2))
               ==> _module.__default.ConsistentCache(stC'#2))
           && (forall arg#3: DatatypeType :: 
            { Seq#Contains($ih#args0#0, $Box(arg#3)) } 
            $Is(arg#3, Tclass._module.Expression())
               ==> 
              Seq#Contains($ih#args0#0, $Box(arg#3))
               ==> DtRank(arg#3) < DtRank($ih#expr0#0))
           && (DtRank($ih#expr0#0) < DtRank(expr#0)
             || (DtRank($ih#expr0#0) == DtRank(expr#0)
               && 
              0 <= Seq#Length($ih#args0#0)
               && Seq#Length($ih#args0#0) < Seq#Length(args#0)))
         ==> (var result#1 := _module.__default.evalArgsC_k($LS($LZ), 
              $ih#expr0#0, 
              $ih#args0#0, 
              $ih#stC0#0, 
              env#0, 
              $ih#args'0#0, 
              $ih#stsC'0#0); 
          (var stsC''#1 := $Unbox(_module.Tuple.snd(result#1)): Set; 
            (forall stC''#2: DatatypeType :: 
              { _module.__default.ConsistentCache(stC''#2) } 
                { Set#IsMember(stsC''#1, $Box(stC''#2)) } 
              $Is(stC''#2, Tclass._module.StateC())
                 ==> 
                Set#IsMember(stsC''#1, $Box(stC''#2))
                 ==> _module.__default.ConsistentCache(stC''#2)))));
    $_reverifyPost := false;
    // ----- if statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(655,3)
    assume true;
    if (Seq#Equal(args#0, Seq#Empty(): Seq))
    {
    }
    else
    {
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(657,13)
        assume true;
        assert {:id "id1036"} 0 <= LitInt(0) && LitInt(0) < Seq#Length(args#0);
        assume true;
        arg#1_0 := $Unbox(Seq#Index(args#0, LitInt(0))): DatatypeType;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(658,15)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##1_0 := arg#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##1_0 := stC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_0 := env#0;
        assert {:id "id1038"} DtRank(expr##1_0) < DtRank(expr#0);
        call {:id "id1039"} Call$$_module.__default.EvalCLemma(expr##1_0, stC##1_0, env##1_0);
        // TrCallStmt: After ProcessCallStmt
        // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(659,16)
        assume true;
        ##expr#1_0 := arg#1_0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##expr#1_0, Tclass._module.Expression(), $Heap);
        ##stC#1_0 := stC#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##stC#1_0, Tclass._module.StateC(), $Heap);
        ##env#1_0 := env#0;
        // assume allocatedness for argument to function
        assume $IsAllocBox(##env#1_0, Tclass._module.Env(), $Heap);
        assume _module.__default.evalC#canCall(arg#1_0, stC#0, env#0);
        assume _module.Tuple.Pair_q(_module.__default.evalC($LS($LZ), arg#1_0, stC#0, env#0));
        assume _module.__default.evalC#canCall(arg#1_0, stC#0, env#0);
        result#1_0 := _module.__default.evalC($LS($LZ), arg#1_0, stC#0, env#0);
        defass#result#1_0 := true;
        // ----- update statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(660,20)
        assume true;
        assume true;
        assert {:id "id1041"} defass#result#1_0;
        assume _module.Tuple.Pair_q(result#1_0);
        assume _module.Tuple.Pair_q(result#1_0);
        $rhs#1_0 := $Unbox(_module.Tuple.fst(result#1_0)): DatatypeType;
        assert {:id "id1043"} defass#result#1_0;
        assume _module.Tuple.Pair_q(result#1_0);
        assume _module.Tuple.Pair_q(result#1_0);
        $rhs#1_1 := $Unbox(_module.Tuple.snd(result#1_0)): DatatypeType;
        arg'#1_0 := $rhs#1_0;
        stC'#1_0 := $rhs#1_1;
        defass#stC'#1_0 := true;
        // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/cloudmake/CloudMake-ConsistentBuilds.legacy.dfy(661,20)
        // TrCallStmt: Before ProcessCallStmt
        assume true;
        // ProcessCallStmt: CheckSubrange
        expr##1_1 := expr#0;
        assert {:id "id1047"} 0 <= LitInt(1) && LitInt(1) <= Seq#Length(args#0);
        assume true;
        // ProcessCallStmt: CheckSubrange
        args##1_0 := Seq#Drop(args#0, LitInt(1));
        assume true;
        // ProcessCallStmt: CheckSubrange
        stC##1_1 := stC#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        env##1_1 := env#0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        args'##1_0 := Seq#Append(args'#0, Seq#Build(Seq#Empty(): Seq, $Box(arg'#1_0)));
        assert {:id "id1048"} defass#stC'#1_0;
        assume true;
        // ProcessCallStmt: CheckSubrange
        stsC'##1_0 := Set#Union(stsC'#0, Set#UnionOne(Set#Empty(): Set, $Box(stC'#1_0)));
        assert {:id "id1049"} 0 <= Seq#Length(args#0)
           || DtRank(expr##1_1) < DtRank(expr#0)
           || Seq#Length(args##1_0) == Seq#Length(args#0);
        assert {:id "id1050"} DtRank(expr##1_1) < DtRank(expr#0)
           || (DtRank(expr##1_1) == DtRank(expr#0)
             && Seq#Length(args##1_0) < Seq#Length(args#0));
        call {:id "id1051"} Call$$_module.__default.EvalArgsC_kLemma(expr##1_1, args##1_0, stC##1_1, env##1_1, args'##1_0, stsC'##1_0);
        // TrCallStmt: After ProcessCallStmt
    }
}



const unique class._module.State: ClassName;

// Constructor function declaration
function #_module.StateC.S(Box, Box) : DatatypeType;

const unique ##_module.StateC.S: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_module.StateC.S(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_module.StateC.S(a#0#0#0, a#0#1#0)) == ##_module.StateC.S);
}

function _module.StateC.S_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.StateC.S_q(d) } 
  _module.StateC.S_q(d) <==> DatatypeCtorId(d) == ##_module.StateC.S);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.StateC.S_q(d) } 
  _module.StateC.S_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: d == #_module.StateC.S(a#1#0#0, a#1#1#0)));

// Constructor $Is
axiom (forall a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_module.StateC.S(a#2#0#0, a#2#1#0), Tclass._module.StateC()) } 
  $Is(#_module.StateC.S(a#2#0#0, a#2#1#0), Tclass._module.StateC())
     <==> $IsBox(a#2#0#0, Tclass._module.State())
       && $IsBox(a#2#1#0, Tclass._module.Cache()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_module.StateC.st(d), Tclass._module.State(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.StateC.S_q(d)
       && $IsAlloc(d, Tclass._module.StateC(), $h)
     ==> $IsAllocBox(_module.StateC.st(d), Tclass._module.State(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_module.StateC.c(d), Tclass._module.Cache(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.StateC.S_q(d)
       && $IsAlloc(d, Tclass._module.StateC(), $h)
     ==> $IsAllocBox(_module.StateC.c(d), Tclass._module.Cache(), $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_module.StateC.S(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_module.StateC.S(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_module.StateC.S(a#3#0#0, a#3#1#0)));

function _module.StateC.st(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_module.StateC.S(a#4#0#0, a#4#1#0) } 
  _module.StateC.st(#_module.StateC.S(a#4#0#0, a#4#1#0)) == a#4#0#0);

function _module.StateC.c(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_module.StateC.S(a#5#0#0, a#5#1#0) } 
  _module.StateC.c(#_module.StateC.S(a#5#0#0, a#5#1#0)) == a#5#1#0);

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._module.StateC(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._module.StateC())
     ==> $IsAlloc(d, Tclass._module.StateC(), $h));

// Depth-one case-split function
function $IsA#_module.StateC(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.StateC(d) } 
  $IsA#_module.StateC(d) ==> _module.StateC.S_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.StateC.S_q(d), $Is(d, Tclass._module.StateC()) } 
  $Is(d, Tclass._module.StateC()) ==> _module.StateC.S_q(d));

// Datatype extensional equality declaration
function _module.StateC#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.StateC.S
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.StateC#Equal(a, b) } 
  _module.StateC#Equal(a, b)
     <==> _module.StateC.st(a) == _module.StateC.st(b)
       && _module.StateC.c(a) == _module.StateC.c(b));

// Datatype extensionality axiom: _module.StateC
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.StateC#Equal(a, b) } 
  _module.StateC#Equal(a, b) <==> a == b);

const unique class._module.StateC: ClassName;

const unique class._module.Env: ClassName;

// Constructor function declaration
function #_module.Program.Program(Seq) : DatatypeType;

const unique ##_module.Program.Program: DtCtorId
uses {
// Constructor identifier
axiom (forall a#6#0#0: Seq :: 
  { #_module.Program.Program(a#6#0#0) } 
  DatatypeCtorId(#_module.Program.Program(a#6#0#0)) == ##_module.Program.Program);
}

function _module.Program.Program_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Program.Program_q(d) } 
  _module.Program.Program_q(d) <==> DatatypeCtorId(d) == ##_module.Program.Program);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Program.Program_q(d) } 
  _module.Program.Program_q(d)
     ==> (exists a#7#0#0: Seq :: d == #_module.Program.Program(a#7#0#0)));

// Constructor $Is
axiom (forall a#8#0#0: Seq :: 
  { $Is(#_module.Program.Program(a#8#0#0), Tclass._module.Program()) } 
  $Is(#_module.Program.Program(a#8#0#0), Tclass._module.Program())
     <==> $Is(a#8#0#0, TSeq(Tclass._module.Statement())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Program.stmts(d), TSeq(Tclass._module.Statement()), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Program.Program_q(d)
       && $IsAlloc(d, Tclass._module.Program(), $h)
     ==> $IsAlloc(_module.Program.stmts(d), TSeq(Tclass._module.Statement()), $h));

// Constructor literal
axiom (forall a#9#0#0: Seq :: 
  { #_module.Program.Program(Lit(a#9#0#0)) } 
  #_module.Program.Program(Lit(a#9#0#0)) == Lit(#_module.Program.Program(a#9#0#0)));

function _module.Program.stmts(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#10#0#0: Seq :: 
  { #_module.Program.Program(a#10#0#0) } 
  _module.Program.stmts(#_module.Program.Program(a#10#0#0)) == a#10#0#0);

// Inductive seq element rank
axiom (forall a#11#0#0: Seq, i: int :: 
  { Seq#Index(a#11#0#0, i), #_module.Program.Program(a#11#0#0) } 
  0 <= i && i < Seq#Length(a#11#0#0)
     ==> DtRank($Unbox(Seq#Index(a#11#0#0, i)): DatatypeType)
       < DtRank(#_module.Program.Program(a#11#0#0)));

// Inductive seq rank
axiom (forall a#12#0#0: Seq :: 
  { #_module.Program.Program(a#12#0#0) } 
  Seq#Rank(a#12#0#0) < DtRank(#_module.Program.Program(a#12#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._module.Program(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._module.Program())
     ==> $IsAlloc(d, Tclass._module.Program(), $h));

// Depth-one case-split function
function $IsA#_module.Program(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Program(d) } 
  $IsA#_module.Program(d) ==> _module.Program.Program_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.Program.Program_q(d), $Is(d, Tclass._module.Program()) } 
  $Is(d, Tclass._module.Program()) ==> _module.Program.Program_q(d));

// Datatype extensional equality declaration
function _module.Program#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Program.Program
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Program#Equal(a, b) } 
  _module.Program#Equal(a, b)
     <==> Seq#Equal(_module.Program.stmts(a), _module.Program.stmts(b)));

// Datatype extensionality axiom: _module.Program
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Program#Equal(a, b) } 
  _module.Program#Equal(a, b) <==> a == b);

const unique class._module.Program: ClassName;

// Constructor function declaration
function #_module.Statement.stmtVariable(Box, DatatypeType) : DatatypeType;

const unique ##_module.Statement.stmtVariable: DtCtorId
uses {
// Constructor identifier
axiom (forall a#13#0#0: Box, a#13#1#0: DatatypeType :: 
  { #_module.Statement.stmtVariable(a#13#0#0, a#13#1#0) } 
  DatatypeCtorId(#_module.Statement.stmtVariable(a#13#0#0, a#13#1#0))
     == ##_module.Statement.stmtVariable);
}

function _module.Statement.stmtVariable_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Statement.stmtVariable_q(d) } 
  _module.Statement.stmtVariable_q(d)
     <==> DatatypeCtorId(d) == ##_module.Statement.stmtVariable);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Statement.stmtVariable_q(d) } 
  _module.Statement.stmtVariable_q(d)
     ==> (exists a#14#0#0: Box, a#14#1#0: DatatypeType :: 
      d == #_module.Statement.stmtVariable(a#14#0#0, a#14#1#0)));

// Constructor $Is
axiom (forall a#15#0#0: Box, a#15#1#0: DatatypeType :: 
  { $Is(#_module.Statement.stmtVariable(a#15#0#0, a#15#1#0), Tclass._module.Statement()) } 
  $Is(#_module.Statement.stmtVariable(a#15#0#0, a#15#1#0), Tclass._module.Statement())
     <==> $IsBox(a#15#0#0, Tclass._module.Identifier())
       && $Is(a#15#1#0, Tclass._module.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_module.Statement.id(d), Tclass._module.Identifier(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Statement.stmtVariable_q(d)
       && $IsAlloc(d, Tclass._module.Statement(), $h)
     ==> $IsAllocBox(_module.Statement.id(d), Tclass._module.Identifier(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Statement.expr(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Statement.stmtVariable_q(d)
       && $IsAlloc(d, Tclass._module.Statement(), $h)
     ==> $IsAlloc(_module.Statement.expr(d), Tclass._module.Expression(), $h));

// Constructor literal
axiom (forall a#16#0#0: Box, a#16#1#0: DatatypeType :: 
  { #_module.Statement.stmtVariable(Lit(a#16#0#0), Lit(a#16#1#0)) } 
  #_module.Statement.stmtVariable(Lit(a#16#0#0), Lit(a#16#1#0))
     == Lit(#_module.Statement.stmtVariable(a#16#0#0, a#16#1#0)));

function _module.Statement.id(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#17#0#0: Box, a#17#1#0: DatatypeType :: 
  { #_module.Statement.stmtVariable(a#17#0#0, a#17#1#0) } 
  _module.Statement.id(#_module.Statement.stmtVariable(a#17#0#0, a#17#1#0))
     == a#17#0#0);

function _module.Statement.expr(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#18#0#0: Box, a#18#1#0: DatatypeType :: 
  { #_module.Statement.stmtVariable(a#18#0#0, a#18#1#0) } 
  _module.Statement.expr(#_module.Statement.stmtVariable(a#18#0#0, a#18#1#0))
     == a#18#1#0);

// Inductive rank
axiom (forall a#19#0#0: Box, a#19#1#0: DatatypeType :: 
  { #_module.Statement.stmtVariable(a#19#0#0, a#19#1#0) } 
  DtRank(a#19#1#0) < DtRank(#_module.Statement.stmtVariable(a#19#0#0, a#19#1#0)));

// Constructor function declaration
function #_module.Statement.stmtReturn(DatatypeType) : DatatypeType;

const unique ##_module.Statement.stmtReturn: DtCtorId
uses {
// Constructor identifier
axiom (forall a#20#0#0: DatatypeType :: 
  { #_module.Statement.stmtReturn(a#20#0#0) } 
  DatatypeCtorId(#_module.Statement.stmtReturn(a#20#0#0))
     == ##_module.Statement.stmtReturn);
}

function _module.Statement.stmtReturn_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Statement.stmtReturn_q(d) } 
  _module.Statement.stmtReturn_q(d)
     <==> DatatypeCtorId(d) == ##_module.Statement.stmtReturn);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Statement.stmtReturn_q(d) } 
  _module.Statement.stmtReturn_q(d)
     ==> (exists a#21#0#0: DatatypeType :: d == #_module.Statement.stmtReturn(a#21#0#0)));

// Constructor $Is
axiom (forall a#22#0#0: DatatypeType :: 
  { $Is(#_module.Statement.stmtReturn(a#22#0#0), Tclass._module.Statement()) } 
  $Is(#_module.Statement.stmtReturn(a#22#0#0), Tclass._module.Statement())
     <==> $Is(a#22#0#0, Tclass._module.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Statement.ret(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Statement.stmtReturn_q(d)
       && $IsAlloc(d, Tclass._module.Statement(), $h)
     ==> $IsAlloc(_module.Statement.ret(d), Tclass._module.Expression(), $h));

// Constructor literal
axiom (forall a#23#0#0: DatatypeType :: 
  { #_module.Statement.stmtReturn(Lit(a#23#0#0)) } 
  #_module.Statement.stmtReturn(Lit(a#23#0#0))
     == Lit(#_module.Statement.stmtReturn(a#23#0#0)));

function _module.Statement.ret(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#24#0#0: DatatypeType :: 
  { #_module.Statement.stmtReturn(a#24#0#0) } 
  _module.Statement.ret(#_module.Statement.stmtReturn(a#24#0#0)) == a#24#0#0);

// Inductive rank
axiom (forall a#25#0#0: DatatypeType :: 
  { #_module.Statement.stmtReturn(a#25#0#0) } 
  DtRank(a#25#0#0) < DtRank(#_module.Statement.stmtReturn(a#25#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._module.Statement(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._module.Statement())
     ==> $IsAlloc(d, Tclass._module.Statement(), $h));

// Depth-one case-split function
function $IsA#_module.Statement(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Statement(d) } 
  $IsA#_module.Statement(d)
     ==> _module.Statement.stmtVariable_q(d) || _module.Statement.stmtReturn_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.Statement.stmtReturn_q(d), $Is(d, Tclass._module.Statement()) } 
    { _module.Statement.stmtVariable_q(d), $Is(d, Tclass._module.Statement()) } 
  $Is(d, Tclass._module.Statement())
     ==> _module.Statement.stmtVariable_q(d) || _module.Statement.stmtReturn_q(d));

// Datatype extensional equality declaration
function _module.Statement#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Statement.stmtVariable
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Statement#Equal(a, b), _module.Statement.stmtVariable_q(a) } 
    { _module.Statement#Equal(a, b), _module.Statement.stmtVariable_q(b) } 
  _module.Statement.stmtVariable_q(a) && _module.Statement.stmtVariable_q(b)
     ==> (_module.Statement#Equal(a, b)
       <==> _module.Statement.id(a) == _module.Statement.id(b)
         && _module.Expression#Equal(_module.Statement.expr(a), _module.Statement.expr(b))));

// Datatype extensional equality definition: #_module.Statement.stmtReturn
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Statement#Equal(a, b), _module.Statement.stmtReturn_q(a) } 
    { _module.Statement#Equal(a, b), _module.Statement.stmtReturn_q(b) } 
  _module.Statement.stmtReturn_q(a) && _module.Statement.stmtReturn_q(b)
     ==> (_module.Statement#Equal(a, b)
       <==> _module.Expression#Equal(_module.Statement.ret(a), _module.Statement.ret(b))));

// Datatype extensionality axiom: _module.Statement
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Statement#Equal(a, b) } 
  _module.Statement#Equal(a, b) <==> a == b);

const unique class._module.Statement: ClassName;

// Constructor function declaration
function #_module.Expression.exprLiteral(DatatypeType) : DatatypeType;

const unique ##_module.Expression.exprLiteral: DtCtorId
uses {
// Constructor identifier
axiom (forall a#26#0#0: DatatypeType :: 
  { #_module.Expression.exprLiteral(a#26#0#0) } 
  DatatypeCtorId(#_module.Expression.exprLiteral(a#26#0#0))
     == ##_module.Expression.exprLiteral);
}

function _module.Expression.exprLiteral_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprLiteral_q(d) } 
  _module.Expression.exprLiteral_q(d)
     <==> DatatypeCtorId(d) == ##_module.Expression.exprLiteral);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprLiteral_q(d) } 
  _module.Expression.exprLiteral_q(d)
     ==> (exists a#27#0#0: DatatypeType :: 
      d == #_module.Expression.exprLiteral(a#27#0#0)));

function Tclass._module.Literal() : Ty
uses {
// Tclass._module.Literal Tag
axiom Tag(Tclass._module.Literal()) == Tagclass._module.Literal
   && TagFamily(Tclass._module.Literal()) == tytagFamily$Literal;
}

const unique Tagclass._module.Literal: TyTag;

// Box/unbox axiom for Tclass._module.Literal
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Literal()) } 
  $IsBox(bx, Tclass._module.Literal())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.Literal()));

// Constructor $Is
axiom (forall a#28#0#0: DatatypeType :: 
  { $Is(#_module.Expression.exprLiteral(a#28#0#0), Tclass._module.Expression()) } 
  $Is(#_module.Expression.exprLiteral(a#28#0#0), Tclass._module.Expression())
     <==> $Is(a#28#0#0, Tclass._module.Literal()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.lit(d), Tclass._module.Literal(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprLiteral_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.lit(d), Tclass._module.Literal(), $h));

// Constructor literal
axiom (forall a#29#0#0: DatatypeType :: 
  { #_module.Expression.exprLiteral(Lit(a#29#0#0)) } 
  #_module.Expression.exprLiteral(Lit(a#29#0#0))
     == Lit(#_module.Expression.exprLiteral(a#29#0#0)));

function _module.Expression.lit(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#30#0#0: DatatypeType :: 
  { #_module.Expression.exprLiteral(a#30#0#0) } 
  _module.Expression.lit(#_module.Expression.exprLiteral(a#30#0#0)) == a#30#0#0);

// Inductive rank
axiom (forall a#31#0#0: DatatypeType :: 
  { #_module.Expression.exprLiteral(a#31#0#0) } 
  DtRank(a#31#0#0) < DtRank(#_module.Expression.exprLiteral(a#31#0#0)));

// Constructor function declaration
function #_module.Expression.exprIdentifier(Box) : DatatypeType;

const unique ##_module.Expression.exprIdentifier: DtCtorId
uses {
// Constructor identifier
axiom (forall a#32#0#0: Box :: 
  { #_module.Expression.exprIdentifier(a#32#0#0) } 
  DatatypeCtorId(#_module.Expression.exprIdentifier(a#32#0#0))
     == ##_module.Expression.exprIdentifier);
}

function _module.Expression.exprIdentifier_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprIdentifier_q(d) } 
  _module.Expression.exprIdentifier_q(d)
     <==> DatatypeCtorId(d) == ##_module.Expression.exprIdentifier);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprIdentifier_q(d) } 
  _module.Expression.exprIdentifier_q(d)
     ==> (exists a#33#0#0: Box :: d == #_module.Expression.exprIdentifier(a#33#0#0)));

// Constructor $Is
axiom (forall a#34#0#0: Box :: 
  { $Is(#_module.Expression.exprIdentifier(a#34#0#0), Tclass._module.Expression()) } 
  $Is(#_module.Expression.exprIdentifier(a#34#0#0), Tclass._module.Expression())
     <==> $IsBox(a#34#0#0, Tclass._module.Identifier()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_module.Expression.id(d), Tclass._module.Identifier(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprIdentifier_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAllocBox(_module.Expression.id(d), Tclass._module.Identifier(), $h));

// Constructor literal
axiom (forall a#35#0#0: Box :: 
  { #_module.Expression.exprIdentifier(Lit(a#35#0#0)) } 
  #_module.Expression.exprIdentifier(Lit(a#35#0#0))
     == Lit(#_module.Expression.exprIdentifier(a#35#0#0)));

function _module.Expression.id(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#36#0#0: Box :: 
  { #_module.Expression.exprIdentifier(a#36#0#0) } 
  _module.Expression.id(#_module.Expression.exprIdentifier(a#36#0#0)) == a#36#0#0);

// Constructor function declaration
function #_module.Expression.exprIf(DatatypeType, DatatypeType, DatatypeType) : DatatypeType;

const unique ##_module.Expression.exprIf: DtCtorId
uses {
// Constructor identifier
axiom (forall a#37#0#0: DatatypeType, a#37#1#0: DatatypeType, a#37#2#0: DatatypeType :: 
  { #_module.Expression.exprIf(a#37#0#0, a#37#1#0, a#37#2#0) } 
  DatatypeCtorId(#_module.Expression.exprIf(a#37#0#0, a#37#1#0, a#37#2#0))
     == ##_module.Expression.exprIf);
}

function _module.Expression.exprIf_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprIf_q(d) } 
  _module.Expression.exprIf_q(d)
     <==> DatatypeCtorId(d) == ##_module.Expression.exprIf);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprIf_q(d) } 
  _module.Expression.exprIf_q(d)
     ==> (exists a#38#0#0: DatatypeType, a#38#1#0: DatatypeType, a#38#2#0: DatatypeType :: 
      d == #_module.Expression.exprIf(a#38#0#0, a#38#1#0, a#38#2#0)));

// Constructor $Is
axiom (forall a#39#0#0: DatatypeType, a#39#1#0: DatatypeType, a#39#2#0: DatatypeType :: 
  { $Is(#_module.Expression.exprIf(a#39#0#0, a#39#1#0, a#39#2#0), 
      Tclass._module.Expression()) } 
  $Is(#_module.Expression.exprIf(a#39#0#0, a#39#1#0, a#39#2#0), 
      Tclass._module.Expression())
     <==> $Is(a#39#0#0, Tclass._module.Expression())
       && $Is(a#39#1#0, Tclass._module.Expression())
       && $Is(a#39#2#0, Tclass._module.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.cond(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprIf_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.cond(d), Tclass._module.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.ifTrue(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprIf_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.ifTrue(d), Tclass._module.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.ifFalse(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprIf_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.ifFalse(d), Tclass._module.Expression(), $h));

// Constructor literal
axiom (forall a#40#0#0: DatatypeType, a#40#1#0: DatatypeType, a#40#2#0: DatatypeType :: 
  { #_module.Expression.exprIf(Lit(a#40#0#0), Lit(a#40#1#0), Lit(a#40#2#0)) } 
  #_module.Expression.exprIf(Lit(a#40#0#0), Lit(a#40#1#0), Lit(a#40#2#0))
     == Lit(#_module.Expression.exprIf(a#40#0#0, a#40#1#0, a#40#2#0)));

function _module.Expression.cond(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#41#0#0: DatatypeType, a#41#1#0: DatatypeType, a#41#2#0: DatatypeType :: 
  { #_module.Expression.exprIf(a#41#0#0, a#41#1#0, a#41#2#0) } 
  _module.Expression.cond(#_module.Expression.exprIf(a#41#0#0, a#41#1#0, a#41#2#0))
     == a#41#0#0);

// Inductive rank
axiom (forall a#42#0#0: DatatypeType, a#42#1#0: DatatypeType, a#42#2#0: DatatypeType :: 
  { #_module.Expression.exprIf(a#42#0#0, a#42#1#0, a#42#2#0) } 
  DtRank(a#42#0#0)
     < DtRank(#_module.Expression.exprIf(a#42#0#0, a#42#1#0, a#42#2#0)));

function _module.Expression.ifTrue(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#43#0#0: DatatypeType, a#43#1#0: DatatypeType, a#43#2#0: DatatypeType :: 
  { #_module.Expression.exprIf(a#43#0#0, a#43#1#0, a#43#2#0) } 
  _module.Expression.ifTrue(#_module.Expression.exprIf(a#43#0#0, a#43#1#0, a#43#2#0))
     == a#43#1#0);

// Inductive rank
axiom (forall a#44#0#0: DatatypeType, a#44#1#0: DatatypeType, a#44#2#0: DatatypeType :: 
  { #_module.Expression.exprIf(a#44#0#0, a#44#1#0, a#44#2#0) } 
  DtRank(a#44#1#0)
     < DtRank(#_module.Expression.exprIf(a#44#0#0, a#44#1#0, a#44#2#0)));

function _module.Expression.ifFalse(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#45#0#0: DatatypeType, a#45#1#0: DatatypeType, a#45#2#0: DatatypeType :: 
  { #_module.Expression.exprIf(a#45#0#0, a#45#1#0, a#45#2#0) } 
  _module.Expression.ifFalse(#_module.Expression.exprIf(a#45#0#0, a#45#1#0, a#45#2#0))
     == a#45#2#0);

// Inductive rank
axiom (forall a#46#0#0: DatatypeType, a#46#1#0: DatatypeType, a#46#2#0: DatatypeType :: 
  { #_module.Expression.exprIf(a#46#0#0, a#46#1#0, a#46#2#0) } 
  DtRank(a#46#2#0)
     < DtRank(#_module.Expression.exprIf(a#46#0#0, a#46#1#0, a#46#2#0)));

// Constructor function declaration
function #_module.Expression.exprAnd(DatatypeType, DatatypeType) : DatatypeType;

const unique ##_module.Expression.exprAnd: DtCtorId
uses {
// Constructor identifier
axiom (forall a#47#0#0: DatatypeType, a#47#1#0: DatatypeType :: 
  { #_module.Expression.exprAnd(a#47#0#0, a#47#1#0) } 
  DatatypeCtorId(#_module.Expression.exprAnd(a#47#0#0, a#47#1#0))
     == ##_module.Expression.exprAnd);
}

function _module.Expression.exprAnd_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprAnd_q(d) } 
  _module.Expression.exprAnd_q(d)
     <==> DatatypeCtorId(d) == ##_module.Expression.exprAnd);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprAnd_q(d) } 
  _module.Expression.exprAnd_q(d)
     ==> (exists a#48#0#0: DatatypeType, a#48#1#0: DatatypeType :: 
      d == #_module.Expression.exprAnd(a#48#0#0, a#48#1#0)));

// Constructor $Is
axiom (forall a#49#0#0: DatatypeType, a#49#1#0: DatatypeType :: 
  { $Is(#_module.Expression.exprAnd(a#49#0#0, a#49#1#0), Tclass._module.Expression()) } 
  $Is(#_module.Expression.exprAnd(a#49#0#0, a#49#1#0), Tclass._module.Expression())
     <==> $Is(a#49#0#0, Tclass._module.Expression())
       && $Is(a#49#1#0, Tclass._module.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.conj0(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprAnd_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.conj0(d), Tclass._module.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.conj1(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprAnd_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.conj1(d), Tclass._module.Expression(), $h));

// Constructor literal
axiom (forall a#50#0#0: DatatypeType, a#50#1#0: DatatypeType :: 
  { #_module.Expression.exprAnd(Lit(a#50#0#0), Lit(a#50#1#0)) } 
  #_module.Expression.exprAnd(Lit(a#50#0#0), Lit(a#50#1#0))
     == Lit(#_module.Expression.exprAnd(a#50#0#0, a#50#1#0)));

function _module.Expression.conj0(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#51#0#0: DatatypeType, a#51#1#0: DatatypeType :: 
  { #_module.Expression.exprAnd(a#51#0#0, a#51#1#0) } 
  _module.Expression.conj0(#_module.Expression.exprAnd(a#51#0#0, a#51#1#0))
     == a#51#0#0);

// Inductive rank
axiom (forall a#52#0#0: DatatypeType, a#52#1#0: DatatypeType :: 
  { #_module.Expression.exprAnd(a#52#0#0, a#52#1#0) } 
  DtRank(a#52#0#0) < DtRank(#_module.Expression.exprAnd(a#52#0#0, a#52#1#0)));

function _module.Expression.conj1(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#53#0#0: DatatypeType, a#53#1#0: DatatypeType :: 
  { #_module.Expression.exprAnd(a#53#0#0, a#53#1#0) } 
  _module.Expression.conj1(#_module.Expression.exprAnd(a#53#0#0, a#53#1#0))
     == a#53#1#0);

// Inductive rank
axiom (forall a#54#0#0: DatatypeType, a#54#1#0: DatatypeType :: 
  { #_module.Expression.exprAnd(a#54#0#0, a#54#1#0) } 
  DtRank(a#54#1#0) < DtRank(#_module.Expression.exprAnd(a#54#0#0, a#54#1#0)));

// Constructor function declaration
function #_module.Expression.exprOr(DatatypeType, DatatypeType) : DatatypeType;

const unique ##_module.Expression.exprOr: DtCtorId
uses {
// Constructor identifier
axiom (forall a#55#0#0: DatatypeType, a#55#1#0: DatatypeType :: 
  { #_module.Expression.exprOr(a#55#0#0, a#55#1#0) } 
  DatatypeCtorId(#_module.Expression.exprOr(a#55#0#0, a#55#1#0))
     == ##_module.Expression.exprOr);
}

function _module.Expression.exprOr_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprOr_q(d) } 
  _module.Expression.exprOr_q(d)
     <==> DatatypeCtorId(d) == ##_module.Expression.exprOr);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprOr_q(d) } 
  _module.Expression.exprOr_q(d)
     ==> (exists a#56#0#0: DatatypeType, a#56#1#0: DatatypeType :: 
      d == #_module.Expression.exprOr(a#56#0#0, a#56#1#0)));

// Constructor $Is
axiom (forall a#57#0#0: DatatypeType, a#57#1#0: DatatypeType :: 
  { $Is(#_module.Expression.exprOr(a#57#0#0, a#57#1#0), Tclass._module.Expression()) } 
  $Is(#_module.Expression.exprOr(a#57#0#0, a#57#1#0), Tclass._module.Expression())
     <==> $Is(a#57#0#0, Tclass._module.Expression())
       && $Is(a#57#1#0, Tclass._module.Expression()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.disj0(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprOr_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.disj0(d), Tclass._module.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.disj1(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprOr_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.disj1(d), Tclass._module.Expression(), $h));

// Constructor literal
axiom (forall a#58#0#0: DatatypeType, a#58#1#0: DatatypeType :: 
  { #_module.Expression.exprOr(Lit(a#58#0#0), Lit(a#58#1#0)) } 
  #_module.Expression.exprOr(Lit(a#58#0#0), Lit(a#58#1#0))
     == Lit(#_module.Expression.exprOr(a#58#0#0, a#58#1#0)));

function _module.Expression.disj0(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#59#0#0: DatatypeType, a#59#1#0: DatatypeType :: 
  { #_module.Expression.exprOr(a#59#0#0, a#59#1#0) } 
  _module.Expression.disj0(#_module.Expression.exprOr(a#59#0#0, a#59#1#0))
     == a#59#0#0);

// Inductive rank
axiom (forall a#60#0#0: DatatypeType, a#60#1#0: DatatypeType :: 
  { #_module.Expression.exprOr(a#60#0#0, a#60#1#0) } 
  DtRank(a#60#0#0) < DtRank(#_module.Expression.exprOr(a#60#0#0, a#60#1#0)));

function _module.Expression.disj1(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#61#0#0: DatatypeType, a#61#1#0: DatatypeType :: 
  { #_module.Expression.exprOr(a#61#0#0, a#61#1#0) } 
  _module.Expression.disj1(#_module.Expression.exprOr(a#61#0#0, a#61#1#0))
     == a#61#1#0);

// Inductive rank
axiom (forall a#62#0#0: DatatypeType, a#62#1#0: DatatypeType :: 
  { #_module.Expression.exprOr(a#62#0#0, a#62#1#0) } 
  DtRank(a#62#1#0) < DtRank(#_module.Expression.exprOr(a#62#0#0, a#62#1#0)));

// Constructor function declaration
function #_module.Expression.exprInvocation(DatatypeType, Seq) : DatatypeType;

const unique ##_module.Expression.exprInvocation: DtCtorId
uses {
// Constructor identifier
axiom (forall a#63#0#0: DatatypeType, a#63#1#0: Seq :: 
  { #_module.Expression.exprInvocation(a#63#0#0, a#63#1#0) } 
  DatatypeCtorId(#_module.Expression.exprInvocation(a#63#0#0, a#63#1#0))
     == ##_module.Expression.exprInvocation);
}

function _module.Expression.exprInvocation_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprInvocation_q(d) } 
  _module.Expression.exprInvocation_q(d)
     <==> DatatypeCtorId(d) == ##_module.Expression.exprInvocation);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprInvocation_q(d) } 
  _module.Expression.exprInvocation_q(d)
     ==> (exists a#64#0#0: DatatypeType, a#64#1#0: Seq :: 
      d == #_module.Expression.exprInvocation(a#64#0#0, a#64#1#0)));

// Constructor $Is
axiom (forall a#65#0#0: DatatypeType, a#65#1#0: Seq :: 
  { $Is(#_module.Expression.exprInvocation(a#65#0#0, a#65#1#0), 
      Tclass._module.Expression()) } 
  $Is(#_module.Expression.exprInvocation(a#65#0#0, a#65#1#0), 
      Tclass._module.Expression())
     <==> $Is(a#65#0#0, Tclass._module.Expression())
       && $Is(a#65#1#0, TSeq(Tclass._module.Expression())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.fun(d), Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprInvocation_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.fun(d), Tclass._module.Expression(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.args(d), TSeq(Tclass._module.Expression()), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprInvocation_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.args(d), TSeq(Tclass._module.Expression()), $h));

// Constructor literal
axiom (forall a#66#0#0: DatatypeType, a#66#1#0: Seq :: 
  { #_module.Expression.exprInvocation(Lit(a#66#0#0), Lit(a#66#1#0)) } 
  #_module.Expression.exprInvocation(Lit(a#66#0#0), Lit(a#66#1#0))
     == Lit(#_module.Expression.exprInvocation(a#66#0#0, a#66#1#0)));

function _module.Expression.fun(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#67#0#0: DatatypeType, a#67#1#0: Seq :: 
  { #_module.Expression.exprInvocation(a#67#0#0, a#67#1#0) } 
  _module.Expression.fun(#_module.Expression.exprInvocation(a#67#0#0, a#67#1#0))
     == a#67#0#0);

// Inductive rank
axiom (forall a#68#0#0: DatatypeType, a#68#1#0: Seq :: 
  { #_module.Expression.exprInvocation(a#68#0#0, a#68#1#0) } 
  DtRank(a#68#0#0)
     < DtRank(#_module.Expression.exprInvocation(a#68#0#0, a#68#1#0)));

function _module.Expression.args(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#69#0#0: DatatypeType, a#69#1#0: Seq :: 
  { #_module.Expression.exprInvocation(a#69#0#0, a#69#1#0) } 
  _module.Expression.args(#_module.Expression.exprInvocation(a#69#0#0, a#69#1#0))
     == a#69#1#0);

// Inductive seq element rank
axiom (forall a#70#0#0: DatatypeType, a#70#1#0: Seq, i: int :: 
  { Seq#Index(a#70#1#0, i), #_module.Expression.exprInvocation(a#70#0#0, a#70#1#0) } 
  0 <= i && i < Seq#Length(a#70#1#0)
     ==> DtRank($Unbox(Seq#Index(a#70#1#0, i)): DatatypeType)
       < DtRank(#_module.Expression.exprInvocation(a#70#0#0, a#70#1#0)));

// Inductive seq rank
axiom (forall a#71#0#0: DatatypeType, a#71#1#0: Seq :: 
  { #_module.Expression.exprInvocation(a#71#0#0, a#71#1#0) } 
  Seq#Rank(a#71#1#0)
     < DtRank(#_module.Expression.exprInvocation(a#71#0#0, a#71#1#0)));

// Constructor function declaration
function #_module.Expression.exprError(DatatypeType) : DatatypeType;

const unique ##_module.Expression.exprError: DtCtorId
uses {
// Constructor identifier
axiom (forall a#72#0#0: DatatypeType :: 
  { #_module.Expression.exprError(a#72#0#0) } 
  DatatypeCtorId(#_module.Expression.exprError(a#72#0#0))
     == ##_module.Expression.exprError);
}

function _module.Expression.exprError_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprError_q(d) } 
  _module.Expression.exprError_q(d)
     <==> DatatypeCtorId(d) == ##_module.Expression.exprError);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprError_q(d) } 
  _module.Expression.exprError_q(d)
     ==> (exists a#73#0#0: DatatypeType :: d == #_module.Expression.exprError(a#73#0#0)));

function Tclass._module.Reason() : Ty
uses {
// Tclass._module.Reason Tag
axiom Tag(Tclass._module.Reason()) == Tagclass._module.Reason
   && TagFamily(Tclass._module.Reason()) == tytagFamily$Reason;
}

const unique Tagclass._module.Reason: TyTag;

// Box/unbox axiom for Tclass._module.Reason
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.Reason()) } 
  $IsBox(bx, Tclass._module.Reason())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._module.Reason()));

// Constructor $Is
axiom (forall a#74#0#0: DatatypeType :: 
  { $Is(#_module.Expression.exprError(a#74#0#0), Tclass._module.Expression()) } 
  $Is(#_module.Expression.exprError(a#74#0#0), Tclass._module.Expression())
     <==> $Is(a#74#0#0, Tclass._module.Reason()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Expression.r(d), Tclass._module.Reason(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Expression.exprError_q(d)
       && $IsAlloc(d, Tclass._module.Expression(), $h)
     ==> $IsAlloc(_module.Expression.r(d), Tclass._module.Reason(), $h));

// Constructor literal
axiom (forall a#75#0#0: DatatypeType :: 
  { #_module.Expression.exprError(Lit(a#75#0#0)) } 
  #_module.Expression.exprError(Lit(a#75#0#0))
     == Lit(#_module.Expression.exprError(a#75#0#0)));

function _module.Expression.r(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#76#0#0: DatatypeType :: 
  { #_module.Expression.exprError(a#76#0#0) } 
  _module.Expression.r(#_module.Expression.exprError(a#76#0#0)) == a#76#0#0);

// Inductive rank
axiom (forall a#77#0#0: DatatypeType :: 
  { #_module.Expression.exprError(a#77#0#0) } 
  DtRank(a#77#0#0) < DtRank(#_module.Expression.exprError(a#77#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._module.Expression(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._module.Expression())
     ==> $IsAlloc(d, Tclass._module.Expression(), $h));

// Depth-one case-split function
function $IsA#_module.Expression(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Expression(d) } 
  $IsA#_module.Expression(d)
     ==> _module.Expression.exprLiteral_q(d)
       || _module.Expression.exprIdentifier_q(d)
       || _module.Expression.exprIf_q(d)
       || _module.Expression.exprAnd_q(d)
       || _module.Expression.exprOr_q(d)
       || _module.Expression.exprInvocation_q(d)
       || _module.Expression.exprError_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.Expression.exprError_q(d), $Is(d, Tclass._module.Expression()) } 
    { _module.Expression.exprInvocation_q(d), $Is(d, Tclass._module.Expression()) } 
    { _module.Expression.exprOr_q(d), $Is(d, Tclass._module.Expression()) } 
    { _module.Expression.exprAnd_q(d), $Is(d, Tclass._module.Expression()) } 
    { _module.Expression.exprIf_q(d), $Is(d, Tclass._module.Expression()) } 
    { _module.Expression.exprIdentifier_q(d), $Is(d, Tclass._module.Expression()) } 
    { _module.Expression.exprLiteral_q(d), $Is(d, Tclass._module.Expression()) } 
  $Is(d, Tclass._module.Expression())
     ==> _module.Expression.exprLiteral_q(d)
       || _module.Expression.exprIdentifier_q(d)
       || _module.Expression.exprIf_q(d)
       || _module.Expression.exprAnd_q(d)
       || _module.Expression.exprOr_q(d)
       || _module.Expression.exprInvocation_q(d)
       || _module.Expression.exprError_q(d));

// Datatype extensional equality declaration
function _module.Expression#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Expression.exprLiteral
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Expression#Equal(a, b), _module.Expression.exprLiteral_q(a) } 
    { _module.Expression#Equal(a, b), _module.Expression.exprLiteral_q(b) } 
  _module.Expression.exprLiteral_q(a) && _module.Expression.exprLiteral_q(b)
     ==> (_module.Expression#Equal(a, b)
       <==> _module.Literal#Equal(_module.Expression.lit(a), _module.Expression.lit(b))));

// Datatype extensional equality definition: #_module.Expression.exprIdentifier
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Expression#Equal(a, b), _module.Expression.exprIdentifier_q(a) } 
    { _module.Expression#Equal(a, b), _module.Expression.exprIdentifier_q(b) } 
  _module.Expression.exprIdentifier_q(a) && _module.Expression.exprIdentifier_q(b)
     ==> (_module.Expression#Equal(a, b)
       <==> _module.Expression.id(a) == _module.Expression.id(b)));

// Datatype extensional equality definition: #_module.Expression.exprIf
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Expression#Equal(a, b), _module.Expression.exprIf_q(a) } 
    { _module.Expression#Equal(a, b), _module.Expression.exprIf_q(b) } 
  _module.Expression.exprIf_q(a) && _module.Expression.exprIf_q(b)
     ==> (_module.Expression#Equal(a, b)
       <==> _module.Expression#Equal(_module.Expression.cond(a), _module.Expression.cond(b))
         && _module.Expression#Equal(_module.Expression.ifTrue(a), _module.Expression.ifTrue(b))
         && _module.Expression#Equal(_module.Expression.ifFalse(a), _module.Expression.ifFalse(b))));

// Datatype extensional equality definition: #_module.Expression.exprAnd
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Expression#Equal(a, b), _module.Expression.exprAnd_q(a) } 
    { _module.Expression#Equal(a, b), _module.Expression.exprAnd_q(b) } 
  _module.Expression.exprAnd_q(a) && _module.Expression.exprAnd_q(b)
     ==> (_module.Expression#Equal(a, b)
       <==> _module.Expression#Equal(_module.Expression.conj0(a), _module.Expression.conj0(b))
         && _module.Expression#Equal(_module.Expression.conj1(a), _module.Expression.conj1(b))));

// Datatype extensional equality definition: #_module.Expression.exprOr
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Expression#Equal(a, b), _module.Expression.exprOr_q(a) } 
    { _module.Expression#Equal(a, b), _module.Expression.exprOr_q(b) } 
  _module.Expression.exprOr_q(a) && _module.Expression.exprOr_q(b)
     ==> (_module.Expression#Equal(a, b)
       <==> _module.Expression#Equal(_module.Expression.disj0(a), _module.Expression.disj0(b))
         && _module.Expression#Equal(_module.Expression.disj1(a), _module.Expression.disj1(b))));

// Datatype extensional equality definition: #_module.Expression.exprInvocation
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Expression#Equal(a, b), _module.Expression.exprInvocation_q(a) } 
    { _module.Expression#Equal(a, b), _module.Expression.exprInvocation_q(b) } 
  _module.Expression.exprInvocation_q(a) && _module.Expression.exprInvocation_q(b)
     ==> (_module.Expression#Equal(a, b)
       <==> _module.Expression#Equal(_module.Expression.fun(a), _module.Expression.fun(b))
         && Seq#Equal(_module.Expression.args(a), _module.Expression.args(b))));

// Datatype extensional equality definition: #_module.Expression.exprError
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Expression#Equal(a, b), _module.Expression.exprError_q(a) } 
    { _module.Expression#Equal(a, b), _module.Expression.exprError_q(b) } 
  _module.Expression.exprError_q(a) && _module.Expression.exprError_q(b)
     ==> (_module.Expression#Equal(a, b)
       <==> _module.Reason#Equal(_module.Expression.r(a), _module.Expression.r(b))));

// Datatype extensionality axiom: _module.Expression
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Expression#Equal(a, b) } 
  _module.Expression#Equal(a, b) <==> a == b);

const unique class._module.Expression: ClassName;

// Constructor function declaration
function #_module.Literal.litTrue() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Literal.litTrue()) == ##_module.Literal.litTrue;
// Constructor $Is
axiom $Is(#_module.Literal.litTrue(), Tclass._module.Literal());
// Constructor literal
axiom #_module.Literal.litTrue() == Lit(#_module.Literal.litTrue());
}

const unique ##_module.Literal.litTrue: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Literal.litTrue()) == ##_module.Literal.litTrue;
}

function _module.Literal.litTrue_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litTrue_q(d) } 
  _module.Literal.litTrue_q(d) <==> DatatypeCtorId(d) == ##_module.Literal.litTrue);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litTrue_q(d) } 
  _module.Literal.litTrue_q(d) ==> d == #_module.Literal.litTrue());

// Constructor function declaration
function #_module.Literal.litFalse() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Literal.litFalse()) == ##_module.Literal.litFalse;
// Constructor $Is
axiom $Is(#_module.Literal.litFalse(), Tclass._module.Literal());
// Constructor literal
axiom #_module.Literal.litFalse() == Lit(#_module.Literal.litFalse());
}

const unique ##_module.Literal.litFalse: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Literal.litFalse()) == ##_module.Literal.litFalse;
}

function _module.Literal.litFalse_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litFalse_q(d) } 
  _module.Literal.litFalse_q(d)
     <==> DatatypeCtorId(d) == ##_module.Literal.litFalse);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litFalse_q(d) } 
  _module.Literal.litFalse_q(d) ==> d == #_module.Literal.litFalse());

// Constructor function declaration
function #_module.Literal.litUndefined() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Literal.litUndefined())
   == ##_module.Literal.litUndefined;
// Constructor $Is
axiom $Is(#_module.Literal.litUndefined(), Tclass._module.Literal());
// Constructor literal
axiom #_module.Literal.litUndefined() == Lit(#_module.Literal.litUndefined());
}

const unique ##_module.Literal.litUndefined: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Literal.litUndefined())
   == ##_module.Literal.litUndefined;
}

function _module.Literal.litUndefined_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litUndefined_q(d) } 
  _module.Literal.litUndefined_q(d)
     <==> DatatypeCtorId(d) == ##_module.Literal.litUndefined);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litUndefined_q(d) } 
  _module.Literal.litUndefined_q(d) ==> d == #_module.Literal.litUndefined());

// Constructor function declaration
function #_module.Literal.litNull() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Literal.litNull()) == ##_module.Literal.litNull;
// Constructor $Is
axiom $Is(#_module.Literal.litNull(), Tclass._module.Literal());
// Constructor literal
axiom #_module.Literal.litNull() == Lit(#_module.Literal.litNull());
}

const unique ##_module.Literal.litNull: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Literal.litNull()) == ##_module.Literal.litNull;
}

function _module.Literal.litNull_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litNull_q(d) } 
  _module.Literal.litNull_q(d) <==> DatatypeCtorId(d) == ##_module.Literal.litNull);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litNull_q(d) } 
  _module.Literal.litNull_q(d) ==> d == #_module.Literal.litNull());

// Constructor function declaration
function #_module.Literal.litNumber(int) : DatatypeType;

const unique ##_module.Literal.litNumber: DtCtorId
uses {
// Constructor identifier
axiom (forall a#94#0#0: int :: 
  { #_module.Literal.litNumber(a#94#0#0) } 
  DatatypeCtorId(#_module.Literal.litNumber(a#94#0#0))
     == ##_module.Literal.litNumber);
}

function _module.Literal.litNumber_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litNumber_q(d) } 
  _module.Literal.litNumber_q(d)
     <==> DatatypeCtorId(d) == ##_module.Literal.litNumber);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litNumber_q(d) } 
  _module.Literal.litNumber_q(d)
     ==> (exists a#95#0#0: int :: d == #_module.Literal.litNumber(a#95#0#0)));

// Constructor $Is
axiom (forall a#96#0#0: int :: 
  { $Is(#_module.Literal.litNumber(a#96#0#0), Tclass._module.Literal()) } 
  $Is(#_module.Literal.litNumber(a#96#0#0), Tclass._module.Literal())
     <==> $Is(a#96#0#0, TInt));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Literal.num(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _module.Literal.litNumber_q(d)
       && $IsAlloc(d, Tclass._module.Literal(), $h)
     ==> $IsAlloc(_module.Literal.num(d), TInt, $h));

// Constructor literal
axiom (forall a#97#0#0: int :: 
  { #_module.Literal.litNumber(LitInt(a#97#0#0)) } 
  #_module.Literal.litNumber(LitInt(a#97#0#0))
     == Lit(#_module.Literal.litNumber(a#97#0#0)));

function _module.Literal.num(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#98#0#0: int :: 
  { #_module.Literal.litNumber(a#98#0#0) } 
  _module.Literal.num(#_module.Literal.litNumber(a#98#0#0)) == a#98#0#0);

// Constructor function declaration
function #_module.Literal.litString(Seq) : DatatypeType;

const unique ##_module.Literal.litString: DtCtorId
uses {
// Constructor identifier
axiom (forall a#99#0#0: Seq :: 
  { #_module.Literal.litString(a#99#0#0) } 
  DatatypeCtorId(#_module.Literal.litString(a#99#0#0))
     == ##_module.Literal.litString);
}

function _module.Literal.litString_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litString_q(d) } 
  _module.Literal.litString_q(d)
     <==> DatatypeCtorId(d) == ##_module.Literal.litString);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litString_q(d) } 
  _module.Literal.litString_q(d)
     ==> (exists a#100#0#0: Seq :: d == #_module.Literal.litString(a#100#0#0)));

// Constructor $Is
axiom (forall a#101#0#0: Seq :: 
  { $Is(#_module.Literal.litString(a#101#0#0), Tclass._module.Literal()) } 
  $Is(#_module.Literal.litString(a#101#0#0), Tclass._module.Literal())
     <==> $Is(a#101#0#0, TSeq(TChar)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Literal.str(d), TSeq(TChar), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Literal.litString_q(d)
       && $IsAlloc(d, Tclass._module.Literal(), $h)
     ==> $IsAlloc(_module.Literal.str(d), TSeq(TChar), $h));

// Constructor literal
axiom (forall a#102#0#0: Seq :: 
  { #_module.Literal.litString(Lit(a#102#0#0)) } 
  #_module.Literal.litString(Lit(a#102#0#0))
     == Lit(#_module.Literal.litString(a#102#0#0)));

function _module.Literal.str(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#103#0#0: Seq :: 
  { #_module.Literal.litString(a#103#0#0) } 
  _module.Literal.str(#_module.Literal.litString(a#103#0#0)) == a#103#0#0);

// Inductive seq element rank
axiom (forall a#104#0#0: Seq, i: int :: 
  { Seq#Index(a#104#0#0, i), #_module.Literal.litString(a#104#0#0) } 
  0 <= i && i < Seq#Length(a#104#0#0)
     ==> DtRank($Unbox(Seq#Index(a#104#0#0, i)): DatatypeType)
       < DtRank(#_module.Literal.litString(a#104#0#0)));

// Inductive seq rank
axiom (forall a#105#0#0: Seq :: 
  { #_module.Literal.litString(a#105#0#0) } 
  Seq#Rank(a#105#0#0) < DtRank(#_module.Literal.litString(a#105#0#0)));

// Constructor function declaration
function #_module.Literal.litPrimitive(DatatypeType) : DatatypeType;

const unique ##_module.Literal.litPrimitive: DtCtorId
uses {
// Constructor identifier
axiom (forall a#106#0#0: DatatypeType :: 
  { #_module.Literal.litPrimitive(a#106#0#0) } 
  DatatypeCtorId(#_module.Literal.litPrimitive(a#106#0#0))
     == ##_module.Literal.litPrimitive);
}

function _module.Literal.litPrimitive_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litPrimitive_q(d) } 
  _module.Literal.litPrimitive_q(d)
     <==> DatatypeCtorId(d) == ##_module.Literal.litPrimitive);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litPrimitive_q(d) } 
  _module.Literal.litPrimitive_q(d)
     ==> (exists a#107#0#0: DatatypeType :: 
      d == #_module.Literal.litPrimitive(a#107#0#0)));

// Constructor $Is
axiom (forall a#108#0#0: DatatypeType :: 
  { $Is(#_module.Literal.litPrimitive(a#108#0#0), Tclass._module.Literal()) } 
  $Is(#_module.Literal.litPrimitive(a#108#0#0), Tclass._module.Literal())
     <==> $Is(a#108#0#0, Tclass._module.Primitive()));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Literal.prim(d), Tclass._module.Primitive(), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Literal.litPrimitive_q(d)
       && $IsAlloc(d, Tclass._module.Literal(), $h)
     ==> $IsAlloc(_module.Literal.prim(d), Tclass._module.Primitive(), $h));

// Constructor literal
axiom (forall a#109#0#0: DatatypeType :: 
  { #_module.Literal.litPrimitive(Lit(a#109#0#0)) } 
  #_module.Literal.litPrimitive(Lit(a#109#0#0))
     == Lit(#_module.Literal.litPrimitive(a#109#0#0)));

function _module.Literal.prim(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#110#0#0: DatatypeType :: 
  { #_module.Literal.litPrimitive(a#110#0#0) } 
  _module.Literal.prim(#_module.Literal.litPrimitive(a#110#0#0)) == a#110#0#0);

// Inductive rank
axiom (forall a#111#0#0: DatatypeType :: 
  { #_module.Literal.litPrimitive(a#111#0#0) } 
  DtRank(a#111#0#0) < DtRank(#_module.Literal.litPrimitive(a#111#0#0)));

// Constructor function declaration
function #_module.Literal.litArrOfPaths(Set) : DatatypeType;

const unique ##_module.Literal.litArrOfPaths: DtCtorId
uses {
// Constructor identifier
axiom (forall a#112#0#0: Set :: 
  { #_module.Literal.litArrOfPaths(a#112#0#0) } 
  DatatypeCtorId(#_module.Literal.litArrOfPaths(a#112#0#0))
     == ##_module.Literal.litArrOfPaths);
}

function _module.Literal.litArrOfPaths_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litArrOfPaths_q(d) } 
  _module.Literal.litArrOfPaths_q(d)
     <==> DatatypeCtorId(d) == ##_module.Literal.litArrOfPaths);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litArrOfPaths_q(d) } 
  _module.Literal.litArrOfPaths_q(d)
     ==> (exists a#113#0#0: Set :: d == #_module.Literal.litArrOfPaths(a#113#0#0)));

// Constructor $Is
axiom (forall a#114#0#0: Set :: 
  { $Is(#_module.Literal.litArrOfPaths(a#114#0#0), Tclass._module.Literal()) } 
  $Is(#_module.Literal.litArrOfPaths(a#114#0#0), Tclass._module.Literal())
     <==> $Is(a#114#0#0, TSet(Tclass._module.Path())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Literal.paths(d), TSet(Tclass._module.Path()), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Literal.litArrOfPaths_q(d)
       && $IsAlloc(d, Tclass._module.Literal(), $h)
     ==> $IsAlloc(_module.Literal.paths(d), TSet(Tclass._module.Path()), $h));

// Constructor literal
axiom (forall a#115#0#0: Set :: 
  { #_module.Literal.litArrOfPaths(Lit(a#115#0#0)) } 
  #_module.Literal.litArrOfPaths(Lit(a#115#0#0))
     == Lit(#_module.Literal.litArrOfPaths(a#115#0#0)));

function _module.Literal.paths(DatatypeType) : Set;

// Constructor injectivity
axiom (forall a#116#0#0: Set :: 
  { #_module.Literal.litArrOfPaths(a#116#0#0) } 
  _module.Literal.paths(#_module.Literal.litArrOfPaths(a#116#0#0)) == a#116#0#0);

// Inductive set element rank
axiom (forall a#117#0#0: Set, d: DatatypeType :: 
  { Set#IsMember(a#117#0#0, $Box(d)), #_module.Literal.litArrOfPaths(a#117#0#0) } 
  Set#IsMember(a#117#0#0, $Box(d))
     ==> DtRank(d) < DtRank(#_module.Literal.litArrOfPaths(a#117#0#0)));

// Constructor function declaration
function #_module.Literal.litArrOfStrings(Set) : DatatypeType;

const unique ##_module.Literal.litArrOfStrings: DtCtorId
uses {
// Constructor identifier
axiom (forall a#118#0#0: Set :: 
  { #_module.Literal.litArrOfStrings(a#118#0#0) } 
  DatatypeCtorId(#_module.Literal.litArrOfStrings(a#118#0#0))
     == ##_module.Literal.litArrOfStrings);
}

function _module.Literal.litArrOfStrings_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litArrOfStrings_q(d) } 
  _module.Literal.litArrOfStrings_q(d)
     <==> DatatypeCtorId(d) == ##_module.Literal.litArrOfStrings);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litArrOfStrings_q(d) } 
  _module.Literal.litArrOfStrings_q(d)
     ==> (exists a#119#0#0: Set :: d == #_module.Literal.litArrOfStrings(a#119#0#0)));

// Constructor $Is
axiom (forall a#120#0#0: Set :: 
  { $Is(#_module.Literal.litArrOfStrings(a#120#0#0), Tclass._module.Literal()) } 
  $Is(#_module.Literal.litArrOfStrings(a#120#0#0), Tclass._module.Literal())
     <==> $Is(a#120#0#0, TSet(TSeq(TChar))));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Literal.strs(d), TSet(TSeq(TChar)), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Literal.litArrOfStrings_q(d)
       && $IsAlloc(d, Tclass._module.Literal(), $h)
     ==> $IsAlloc(_module.Literal.strs(d), TSet(TSeq(TChar)), $h));

// Constructor literal
axiom (forall a#121#0#0: Set :: 
  { #_module.Literal.litArrOfStrings(Lit(a#121#0#0)) } 
  #_module.Literal.litArrOfStrings(Lit(a#121#0#0))
     == Lit(#_module.Literal.litArrOfStrings(a#121#0#0)));

function _module.Literal.strs(DatatypeType) : Set;

// Constructor injectivity
axiom (forall a#122#0#0: Set :: 
  { #_module.Literal.litArrOfStrings(a#122#0#0) } 
  _module.Literal.strs(#_module.Literal.litArrOfStrings(a#122#0#0)) == a#122#0#0);

// Inductive set element rank
axiom (forall a#123#0#0: Set, d: DatatypeType :: 
  { Set#IsMember(a#123#0#0, $Box(d)), #_module.Literal.litArrOfStrings(a#123#0#0) } 
  Set#IsMember(a#123#0#0, $Box(d))
     ==> DtRank(d) < DtRank(#_module.Literal.litArrOfStrings(a#123#0#0)));

// Constructor function declaration
function #_module.Literal.litArray(Seq) : DatatypeType;

const unique ##_module.Literal.litArray: DtCtorId
uses {
// Constructor identifier
axiom (forall a#124#0#0: Seq :: 
  { #_module.Literal.litArray(a#124#0#0) } 
  DatatypeCtorId(#_module.Literal.litArray(a#124#0#0))
     == ##_module.Literal.litArray);
}

function _module.Literal.litArray_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Literal.litArray_q(d) } 
  _module.Literal.litArray_q(d)
     <==> DatatypeCtorId(d) == ##_module.Literal.litArray);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Literal.litArray_q(d) } 
  _module.Literal.litArray_q(d)
     ==> (exists a#125#0#0: Seq :: d == #_module.Literal.litArray(a#125#0#0)));

// Constructor $Is
axiom (forall a#126#0#0: Seq :: 
  { $Is(#_module.Literal.litArray(a#126#0#0), Tclass._module.Literal()) } 
  $Is(#_module.Literal.litArray(a#126#0#0), Tclass._module.Literal())
     <==> $Is(a#126#0#0, TSeq(Tclass._module.Expression())));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Literal.arr(d), TSeq(Tclass._module.Expression()), $h) } 
  $IsGoodHeap($h)
       && 
      _module.Literal.litArray_q(d)
       && $IsAlloc(d, Tclass._module.Literal(), $h)
     ==> $IsAlloc(_module.Literal.arr(d), TSeq(Tclass._module.Expression()), $h));

// Constructor literal
axiom (forall a#127#0#0: Seq :: 
  { #_module.Literal.litArray(Lit(a#127#0#0)) } 
  #_module.Literal.litArray(Lit(a#127#0#0))
     == Lit(#_module.Literal.litArray(a#127#0#0)));

function _module.Literal.arr(DatatypeType) : Seq;

// Constructor injectivity
axiom (forall a#128#0#0: Seq :: 
  { #_module.Literal.litArray(a#128#0#0) } 
  _module.Literal.arr(#_module.Literal.litArray(a#128#0#0)) == a#128#0#0);

// Inductive seq element rank
axiom (forall a#129#0#0: Seq, i: int :: 
  { Seq#Index(a#129#0#0, i), #_module.Literal.litArray(a#129#0#0) } 
  0 <= i && i < Seq#Length(a#129#0#0)
     ==> DtRank($Unbox(Seq#Index(a#129#0#0, i)): DatatypeType)
       < DtRank(#_module.Literal.litArray(a#129#0#0)));

// Inductive seq rank
axiom (forall a#130#0#0: Seq :: 
  { #_module.Literal.litArray(a#130#0#0) } 
  Seq#Rank(a#130#0#0) < DtRank(#_module.Literal.litArray(a#130#0#0)));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._module.Literal(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._module.Literal())
     ==> $IsAlloc(d, Tclass._module.Literal(), $h));

// Depth-one case-split function
function $IsA#_module.Literal(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Literal(d) } 
  $IsA#_module.Literal(d)
     ==> _module.Literal.litTrue_q(d)
       || _module.Literal.litFalse_q(d)
       || _module.Literal.litUndefined_q(d)
       || _module.Literal.litNull_q(d)
       || _module.Literal.litNumber_q(d)
       || _module.Literal.litString_q(d)
       || _module.Literal.litPrimitive_q(d)
       || _module.Literal.litArrOfPaths_q(d)
       || _module.Literal.litArrOfStrings_q(d)
       || _module.Literal.litArray_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.Literal.litArray_q(d), $Is(d, Tclass._module.Literal()) } 
    { _module.Literal.litArrOfStrings_q(d), $Is(d, Tclass._module.Literal()) } 
    { _module.Literal.litArrOfPaths_q(d), $Is(d, Tclass._module.Literal()) } 
    { _module.Literal.litPrimitive_q(d), $Is(d, Tclass._module.Literal()) } 
    { _module.Literal.litString_q(d), $Is(d, Tclass._module.Literal()) } 
    { _module.Literal.litNumber_q(d), $Is(d, Tclass._module.Literal()) } 
    { _module.Literal.litNull_q(d), $Is(d, Tclass._module.Literal()) } 
    { _module.Literal.litUndefined_q(d), $Is(d, Tclass._module.Literal()) } 
    { _module.Literal.litFalse_q(d), $Is(d, Tclass._module.Literal()) } 
    { _module.Literal.litTrue_q(d), $Is(d, Tclass._module.Literal()) } 
  $Is(d, Tclass._module.Literal())
     ==> _module.Literal.litTrue_q(d)
       || _module.Literal.litFalse_q(d)
       || _module.Literal.litUndefined_q(d)
       || _module.Literal.litNull_q(d)
       || _module.Literal.litNumber_q(d)
       || _module.Literal.litString_q(d)
       || _module.Literal.litPrimitive_q(d)
       || _module.Literal.litArrOfPaths_q(d)
       || _module.Literal.litArrOfStrings_q(d)
       || _module.Literal.litArray_q(d));

// Datatype extensional equality declaration
function _module.Literal#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Literal.litTrue
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litTrue_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litTrue_q(b) } 
  _module.Literal.litTrue_q(a) && _module.Literal.litTrue_q(b)
     ==> _module.Literal#Equal(a, b));

// Datatype extensional equality definition: #_module.Literal.litFalse
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litFalse_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litFalse_q(b) } 
  _module.Literal.litFalse_q(a) && _module.Literal.litFalse_q(b)
     ==> _module.Literal#Equal(a, b));

// Datatype extensional equality definition: #_module.Literal.litUndefined
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litUndefined_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litUndefined_q(b) } 
  _module.Literal.litUndefined_q(a) && _module.Literal.litUndefined_q(b)
     ==> _module.Literal#Equal(a, b));

// Datatype extensional equality definition: #_module.Literal.litNull
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litNull_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litNull_q(b) } 
  _module.Literal.litNull_q(a) && _module.Literal.litNull_q(b)
     ==> _module.Literal#Equal(a, b));

// Datatype extensional equality definition: #_module.Literal.litNumber
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litNumber_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litNumber_q(b) } 
  _module.Literal.litNumber_q(a) && _module.Literal.litNumber_q(b)
     ==> (_module.Literal#Equal(a, b)
       <==> _module.Literal.num(a) == _module.Literal.num(b)));

// Datatype extensional equality definition: #_module.Literal.litString
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litString_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litString_q(b) } 
  _module.Literal.litString_q(a) && _module.Literal.litString_q(b)
     ==> (_module.Literal#Equal(a, b)
       <==> Seq#Equal(_module.Literal.str(a), _module.Literal.str(b))));

// Datatype extensional equality definition: #_module.Literal.litPrimitive
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litPrimitive_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litPrimitive_q(b) } 
  _module.Literal.litPrimitive_q(a) && _module.Literal.litPrimitive_q(b)
     ==> (_module.Literal#Equal(a, b)
       <==> _module.Primitive#Equal(_module.Literal.prim(a), _module.Literal.prim(b))));

// Datatype extensional equality definition: #_module.Literal.litArrOfPaths
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litArrOfPaths_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litArrOfPaths_q(b) } 
  _module.Literal.litArrOfPaths_q(a) && _module.Literal.litArrOfPaths_q(b)
     ==> (_module.Literal#Equal(a, b)
       <==> Set#Equal(_module.Literal.paths(a), _module.Literal.paths(b))));

// Datatype extensional equality definition: #_module.Literal.litArrOfStrings
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litArrOfStrings_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litArrOfStrings_q(b) } 
  _module.Literal.litArrOfStrings_q(a) && _module.Literal.litArrOfStrings_q(b)
     ==> (_module.Literal#Equal(a, b)
       <==> Set#Equal(_module.Literal.strs(a), _module.Literal.strs(b))));

// Datatype extensional equality definition: #_module.Literal.litArray
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b), _module.Literal.litArray_q(a) } 
    { _module.Literal#Equal(a, b), _module.Literal.litArray_q(b) } 
  _module.Literal.litArray_q(a) && _module.Literal.litArray_q(b)
     ==> (_module.Literal#Equal(a, b)
       <==> Seq#Equal(_module.Literal.arr(a), _module.Literal.arr(b))));

// Datatype extensionality axiom: _module.Literal
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Literal#Equal(a, b) } 
  _module.Literal#Equal(a, b) <==> a == b);

const unique class._module.Literal: ClassName;

// Constructor function declaration
function #_module.Primitive.primCreatePath() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Primitive.primCreatePath())
   == ##_module.Primitive.primCreatePath;
// Constructor $Is
axiom $Is(#_module.Primitive.primCreatePath(), Tclass._module.Primitive());
// Constructor literal
axiom #_module.Primitive.primCreatePath() == Lit(#_module.Primitive.primCreatePath());
}

const unique ##_module.Primitive.primCreatePath: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Primitive.primCreatePath())
   == ##_module.Primitive.primCreatePath;
}

function _module.Primitive.primCreatePath_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Primitive.primCreatePath_q(d) } 
  _module.Primitive.primCreatePath_q(d)
     <==> DatatypeCtorId(d) == ##_module.Primitive.primCreatePath);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Primitive.primCreatePath_q(d) } 
  _module.Primitive.primCreatePath_q(d)
     ==> d == #_module.Primitive.primCreatePath());

// Constructor function declaration
function #_module.Primitive.primExec() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Primitive.primExec()) == ##_module.Primitive.primExec;
// Constructor $Is
axiom $Is(#_module.Primitive.primExec(), Tclass._module.Primitive());
// Constructor literal
axiom #_module.Primitive.primExec() == Lit(#_module.Primitive.primExec());
}

const unique ##_module.Primitive.primExec: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Primitive.primExec()) == ##_module.Primitive.primExec;
}

function _module.Primitive.primExec_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Primitive.primExec_q(d) } 
  _module.Primitive.primExec_q(d)
     <==> DatatypeCtorId(d) == ##_module.Primitive.primExec);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Primitive.primExec_q(d) } 
  _module.Primitive.primExec_q(d) ==> d == #_module.Primitive.primExec());

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._module.Primitive(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._module.Primitive())
     ==> $IsAlloc(d, Tclass._module.Primitive(), $h));

// Depth-one case-split function
function $IsA#_module.Primitive(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Primitive(d) } 
  $IsA#_module.Primitive(d)
     ==> _module.Primitive.primCreatePath_q(d) || _module.Primitive.primExec_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.Primitive.primExec_q(d), $Is(d, Tclass._module.Primitive()) } 
    { _module.Primitive.primCreatePath_q(d), $Is(d, Tclass._module.Primitive()) } 
  $Is(d, Tclass._module.Primitive())
     ==> _module.Primitive.primCreatePath_q(d) || _module.Primitive.primExec_q(d));

// Datatype extensional equality declaration
function _module.Primitive#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Primitive.primCreatePath
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Primitive#Equal(a, b), _module.Primitive.primCreatePath_q(a) } 
    { _module.Primitive#Equal(a, b), _module.Primitive.primCreatePath_q(b) } 
  _module.Primitive.primCreatePath_q(a) && _module.Primitive.primCreatePath_q(b)
     ==> _module.Primitive#Equal(a, b));

// Datatype extensional equality definition: #_module.Primitive.primExec
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Primitive#Equal(a, b), _module.Primitive.primExec_q(a) } 
    { _module.Primitive#Equal(a, b), _module.Primitive.primExec_q(b) } 
  _module.Primitive.primExec_q(a) && _module.Primitive.primExec_q(b)
     ==> _module.Primitive#Equal(a, b));

// Datatype extensionality axiom: _module.Primitive
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Primitive#Equal(a, b) } 
  _module.Primitive#Equal(a, b) <==> a == b);

const unique class._module.Primitive: ClassName;

// Constructor function declaration
function #_module.Reason.rCompatibility() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Reason.rCompatibility())
   == ##_module.Reason.rCompatibility;
// Constructor $Is
axiom $Is(#_module.Reason.rCompatibility(), Tclass._module.Reason());
// Constructor literal
axiom #_module.Reason.rCompatibility() == Lit(#_module.Reason.rCompatibility());
}

const unique ##_module.Reason.rCompatibility: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Reason.rCompatibility())
   == ##_module.Reason.rCompatibility;
}

function _module.Reason.rCompatibility_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Reason.rCompatibility_q(d) } 
  _module.Reason.rCompatibility_q(d)
     <==> DatatypeCtorId(d) == ##_module.Reason.rCompatibility);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Reason.rCompatibility_q(d) } 
  _module.Reason.rCompatibility_q(d) ==> d == #_module.Reason.rCompatibility());

// Constructor function declaration
function #_module.Reason.rValidity() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Reason.rValidity()) == ##_module.Reason.rValidity;
// Constructor $Is
axiom $Is(#_module.Reason.rValidity(), Tclass._module.Reason());
// Constructor literal
axiom #_module.Reason.rValidity() == Lit(#_module.Reason.rValidity());
}

const unique ##_module.Reason.rValidity: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Reason.rValidity()) == ##_module.Reason.rValidity;
}

function _module.Reason.rValidity_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Reason.rValidity_q(d) } 
  _module.Reason.rValidity_q(d)
     <==> DatatypeCtorId(d) == ##_module.Reason.rValidity);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Reason.rValidity_q(d) } 
  _module.Reason.rValidity_q(d) ==> d == #_module.Reason.rValidity());

// Constructor function declaration
function #_module.Reason.rInconsistentCache() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Reason.rInconsistentCache())
   == ##_module.Reason.rInconsistentCache;
// Constructor $Is
axiom $Is(#_module.Reason.rInconsistentCache(), Tclass._module.Reason());
// Constructor literal
axiom #_module.Reason.rInconsistentCache()
   == Lit(#_module.Reason.rInconsistentCache());
}

const unique ##_module.Reason.rInconsistentCache: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_module.Reason.rInconsistentCache())
   == ##_module.Reason.rInconsistentCache;
}

function _module.Reason.rInconsistentCache_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Reason.rInconsistentCache_q(d) } 
  _module.Reason.rInconsistentCache_q(d)
     <==> DatatypeCtorId(d) == ##_module.Reason.rInconsistentCache);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Reason.rInconsistentCache_q(d) } 
  _module.Reason.rInconsistentCache_q(d)
     ==> d == #_module.Reason.rInconsistentCache());

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._module.Reason(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._module.Reason())
     ==> $IsAlloc(d, Tclass._module.Reason(), $h));

// Depth-one case-split function
function $IsA#_module.Reason(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Reason(d) } 
  $IsA#_module.Reason(d)
     ==> _module.Reason.rCompatibility_q(d)
       || _module.Reason.rValidity_q(d)
       || _module.Reason.rInconsistentCache_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.Reason.rInconsistentCache_q(d), $Is(d, Tclass._module.Reason()) } 
    { _module.Reason.rValidity_q(d), $Is(d, Tclass._module.Reason()) } 
    { _module.Reason.rCompatibility_q(d), $Is(d, Tclass._module.Reason()) } 
  $Is(d, Tclass._module.Reason())
     ==> _module.Reason.rCompatibility_q(d)
       || _module.Reason.rValidity_q(d)
       || _module.Reason.rInconsistentCache_q(d));

// Datatype extensional equality declaration
function _module.Reason#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Reason.rCompatibility
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Reason#Equal(a, b), _module.Reason.rCompatibility_q(a) } 
    { _module.Reason#Equal(a, b), _module.Reason.rCompatibility_q(b) } 
  _module.Reason.rCompatibility_q(a) && _module.Reason.rCompatibility_q(b)
     ==> _module.Reason#Equal(a, b));

// Datatype extensional equality definition: #_module.Reason.rValidity
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Reason#Equal(a, b), _module.Reason.rValidity_q(a) } 
    { _module.Reason#Equal(a, b), _module.Reason.rValidity_q(b) } 
  _module.Reason.rValidity_q(a) && _module.Reason.rValidity_q(b)
     ==> _module.Reason#Equal(a, b));

// Datatype extensional equality definition: #_module.Reason.rInconsistentCache
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Reason#Equal(a, b), _module.Reason.rInconsistentCache_q(a) } 
    { _module.Reason#Equal(a, b), _module.Reason.rInconsistentCache_q(b) } 
  _module.Reason.rInconsistentCache_q(a) && _module.Reason.rInconsistentCache_q(b)
     ==> _module.Reason#Equal(a, b));

// Datatype extensionality axiom: _module.Reason
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Reason#Equal(a, b) } 
  _module.Reason#Equal(a, b) <==> a == b);

const unique class._module.Reason: ClassName;

// Constructor function declaration
function #_module.Path.OpaquePath(int) : DatatypeType;

const unique ##_module.Path.OpaquePath: DtCtorId
uses {
// Constructor identifier
axiom (forall a#151#0#0: int :: 
  { #_module.Path.OpaquePath(a#151#0#0) } 
  DatatypeCtorId(#_module.Path.OpaquePath(a#151#0#0)) == ##_module.Path.OpaquePath);
}

function _module.Path.OpaquePath_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Path.OpaquePath_q(d) } 
  _module.Path.OpaquePath_q(d) <==> DatatypeCtorId(d) == ##_module.Path.OpaquePath);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Path.OpaquePath_q(d) } 
  _module.Path.OpaquePath_q(d)
     ==> (exists a#152#0#0: int :: d == #_module.Path.OpaquePath(a#152#0#0)));

// Constructor $Is
axiom (forall a#153#0#0: int :: 
  { $Is(#_module.Path.OpaquePath(a#153#0#0), Tclass._module.Path()) } 
  $Is(#_module.Path.OpaquePath(a#153#0#0), Tclass._module.Path())
     <==> $Is(a#153#0#0, TInt));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Path._h0(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _module.Path.OpaquePath_q(d)
       && $IsAlloc(d, Tclass._module.Path(), $h)
     ==> $IsAlloc(_module.Path._h0(d), TInt, $h));

// Constructor literal
axiom (forall a#154#0#0: int :: 
  { #_module.Path.OpaquePath(LitInt(a#154#0#0)) } 
  #_module.Path.OpaquePath(LitInt(a#154#0#0))
     == Lit(#_module.Path.OpaquePath(a#154#0#0)));

function _module.Path._h0(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#155#0#0: int :: 
  { #_module.Path.OpaquePath(a#155#0#0) } 
  _module.Path._h0(#_module.Path.OpaquePath(a#155#0#0)) == a#155#0#0);

// Constructor function declaration
function #_module.Path.TransparentPath(int) : DatatypeType;

const unique ##_module.Path.TransparentPath: DtCtorId
uses {
// Constructor identifier
axiom (forall a#156#0#0: int :: 
  { #_module.Path.TransparentPath(a#156#0#0) } 
  DatatypeCtorId(#_module.Path.TransparentPath(a#156#0#0))
     == ##_module.Path.TransparentPath);
}

function _module.Path.TransparentPath_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Path.TransparentPath_q(d) } 
  _module.Path.TransparentPath_q(d)
     <==> DatatypeCtorId(d) == ##_module.Path.TransparentPath);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Path.TransparentPath_q(d) } 
  _module.Path.TransparentPath_q(d)
     ==> (exists a#157#0#0: int :: d == #_module.Path.TransparentPath(a#157#0#0)));

// Constructor $Is
axiom (forall a#158#0#0: int :: 
  { $Is(#_module.Path.TransparentPath(a#158#0#0), Tclass._module.Path()) } 
  $Is(#_module.Path.TransparentPath(a#158#0#0), Tclass._module.Path())
     <==> $Is(a#158#0#0, TInt));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_module.Path._h1(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _module.Path.TransparentPath_q(d)
       && $IsAlloc(d, Tclass._module.Path(), $h)
     ==> $IsAlloc(_module.Path._h1(d), TInt, $h));

// Constructor literal
axiom (forall a#159#0#0: int :: 
  { #_module.Path.TransparentPath(LitInt(a#159#0#0)) } 
  #_module.Path.TransparentPath(LitInt(a#159#0#0))
     == Lit(#_module.Path.TransparentPath(a#159#0#0)));

function _module.Path._h1(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#160#0#0: int :: 
  { #_module.Path.TransparentPath(a#160#0#0) } 
  _module.Path._h1(#_module.Path.TransparentPath(a#160#0#0)) == a#160#0#0);

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._module.Path(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._module.Path())
     ==> $IsAlloc(d, Tclass._module.Path(), $h));

// Depth-one case-split function
function $IsA#_module.Path(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Path(d) } 
  $IsA#_module.Path(d)
     ==> _module.Path.OpaquePath_q(d) || _module.Path.TransparentPath_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _module.Path.TransparentPath_q(d), $Is(d, Tclass._module.Path()) } 
    { _module.Path.OpaquePath_q(d), $Is(d, Tclass._module.Path()) } 
  $Is(d, Tclass._module.Path())
     ==> _module.Path.OpaquePath_q(d) || _module.Path.TransparentPath_q(d));

// Datatype extensional equality declaration
function _module.Path#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Path.OpaquePath
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Path#Equal(a, b), _module.Path.OpaquePath_q(a) } 
    { _module.Path#Equal(a, b), _module.Path.OpaquePath_q(b) } 
  _module.Path.OpaquePath_q(a) && _module.Path.OpaquePath_q(b)
     ==> (_module.Path#Equal(a, b) <==> _module.Path._h0(a) == _module.Path._h0(b)));

// Datatype extensional equality definition: #_module.Path.TransparentPath
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Path#Equal(a, b), _module.Path.TransparentPath_q(a) } 
    { _module.Path#Equal(a, b), _module.Path.TransparentPath_q(b) } 
  _module.Path.TransparentPath_q(a) && _module.Path.TransparentPath_q(b)
     ==> (_module.Path#Equal(a, b) <==> _module.Path._h1(a) == _module.Path._h1(b)));

// Datatype extensionality axiom: _module.Path
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Path#Equal(a, b) } 
  _module.Path#Equal(a, b) <==> a == b);

const unique class._module.Path: ClassName;

const unique class._module.Artifact: ClassName;

const unique class._module.Identifier: ClassName;

const unique class._module.Cache: ClassName;

const unique class._module.HashValue: ClassName;

// Constructor function declaration
function #_module.Tuple.Pair(Box, Box) : DatatypeType;

const unique ##_module.Tuple.Pair: DtCtorId
uses {
// Constructor identifier
axiom (forall a#161#0#0: Box, a#161#1#0: Box :: 
  { #_module.Tuple.Pair(a#161#0#0, a#161#1#0) } 
  DatatypeCtorId(#_module.Tuple.Pair(a#161#0#0, a#161#1#0))
     == ##_module.Tuple.Pair);
}

function _module.Tuple.Pair_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Tuple.Pair_q(d) } 
  _module.Tuple.Pair_q(d) <==> DatatypeCtorId(d) == ##_module.Tuple.Pair);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Tuple.Pair_q(d) } 
  _module.Tuple.Pair_q(d)
     ==> (exists a#162#0#0: Box, a#162#1#0: Box :: 
      d == #_module.Tuple.Pair(a#162#0#0, a#162#1#0)));

// Constructor $Is
axiom (forall _module.Tuple$A: Ty, _module.Tuple$B: Ty, a#163#0#0: Box, a#163#1#0: Box :: 
  { $Is(#_module.Tuple.Pair(a#163#0#0, a#163#1#0), 
      Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B)) } 
  $Is(#_module.Tuple.Pair(a#163#0#0, a#163#1#0), 
      Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B))
     <==> $IsBox(a#163#0#0, _module.Tuple$A) && $IsBox(a#163#1#0, _module.Tuple$B));

// Constructor $IsAlloc
axiom (forall _module.Tuple$A: Ty, 
    _module.Tuple$B: Ty, 
    a#163#0#0: Box, 
    a#163#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_module.Tuple.Pair(a#163#0#0, a#163#1#0), 
      Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_module.Tuple.Pair(a#163#0#0, a#163#1#0), 
        Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B), 
        $h)
       <==> $IsAllocBox(a#163#0#0, _module.Tuple$A, $h)
         && $IsAllocBox(a#163#1#0, _module.Tuple$B, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _module.Tuple$A: Ty, $h: Heap :: 
  { $IsAllocBox(_module.Tuple.fst(d), _module.Tuple$A, $h) } 
  $IsGoodHeap($h)
       && 
      _module.Tuple.Pair_q(d)
       && (exists _module.Tuple$B: Ty :: 
        { $IsAlloc(d, Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B), $h) } 
        $IsAlloc(d, Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B), $h))
     ==> $IsAllocBox(_module.Tuple.fst(d), _module.Tuple$A, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _module.Tuple$B: Ty, $h: Heap :: 
  { $IsAllocBox(_module.Tuple.snd(d), _module.Tuple$B, $h) } 
  $IsGoodHeap($h)
       && 
      _module.Tuple.Pair_q(d)
       && (exists _module.Tuple$A: Ty :: 
        { $IsAlloc(d, Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B), $h) } 
        $IsAlloc(d, Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B), $h))
     ==> $IsAllocBox(_module.Tuple.snd(d), _module.Tuple$B, $h));

// Constructor literal
axiom (forall a#164#0#0: Box, a#164#1#0: Box :: 
  { #_module.Tuple.Pair(Lit(a#164#0#0), Lit(a#164#1#0)) } 
  #_module.Tuple.Pair(Lit(a#164#0#0), Lit(a#164#1#0))
     == Lit(#_module.Tuple.Pair(a#164#0#0, a#164#1#0)));

function _module.Tuple.fst(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#165#0#0: Box, a#165#1#0: Box :: 
  { #_module.Tuple.Pair(a#165#0#0, a#165#1#0) } 
  _module.Tuple.fst(#_module.Tuple.Pair(a#165#0#0, a#165#1#0)) == a#165#0#0);

// Inductive rank
axiom (forall a#166#0#0: Box, a#166#1#0: Box :: 
  { #_module.Tuple.Pair(a#166#0#0, a#166#1#0) } 
  BoxRank(a#166#0#0) < DtRank(#_module.Tuple.Pair(a#166#0#0, a#166#1#0)));

function _module.Tuple.snd(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#167#0#0: Box, a#167#1#0: Box :: 
  { #_module.Tuple.Pair(a#167#0#0, a#167#1#0) } 
  _module.Tuple.snd(#_module.Tuple.Pair(a#167#0#0, a#167#1#0)) == a#167#1#0);

// Inductive rank
axiom (forall a#168#0#0: Box, a#168#1#0: Box :: 
  { #_module.Tuple.Pair(a#168#0#0, a#168#1#0) } 
  BoxRank(a#168#1#0) < DtRank(#_module.Tuple.Pair(a#168#0#0, a#168#1#0)));

// Depth-one case-split function
function $IsA#_module.Tuple(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Tuple(d) } 
  $IsA#_module.Tuple(d) ==> _module.Tuple.Pair_q(d));

// Questionmark data type disjunctivity
axiom (forall _module.Tuple$A: Ty, _module.Tuple$B: Ty, d: DatatypeType :: 
  { _module.Tuple.Pair_q(d), $Is(d, Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B)) } 
  $Is(d, Tclass._module.Tuple(_module.Tuple$A, _module.Tuple$B))
     ==> _module.Tuple.Pair_q(d));

// Datatype extensional equality declaration
function _module.Tuple#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Tuple.Pair
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Tuple#Equal(a, b) } 
  _module.Tuple#Equal(a, b)
     <==> _module.Tuple.fst(a) == _module.Tuple.fst(b)
       && _module.Tuple.snd(a) == _module.Tuple.snd(b));

// Datatype extensionality axiom: _module.Tuple
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Tuple#Equal(a, b) } 
  _module.Tuple#Equal(a, b) <==> a == b);

const unique class._module.Tuple: ClassName;

// Constructor function declaration
function #_module.Triple.Trio(Box, Box, Box) : DatatypeType;

const unique ##_module.Triple.Trio: DtCtorId
uses {
// Constructor identifier
axiom (forall a#169#0#0: Box, a#169#1#0: Box, a#169#2#0: Box :: 
  { #_module.Triple.Trio(a#169#0#0, a#169#1#0, a#169#2#0) } 
  DatatypeCtorId(#_module.Triple.Trio(a#169#0#0, a#169#1#0, a#169#2#0))
     == ##_module.Triple.Trio);
}

function _module.Triple.Trio_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _module.Triple.Trio_q(d) } 
  _module.Triple.Trio_q(d) <==> DatatypeCtorId(d) == ##_module.Triple.Trio);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _module.Triple.Trio_q(d) } 
  _module.Triple.Trio_q(d)
     ==> (exists a#170#0#0: Box, a#170#1#0: Box, a#170#2#0: Box :: 
      d == #_module.Triple.Trio(a#170#0#0, a#170#1#0, a#170#2#0)));

// Constructor $Is
axiom (forall _module.Triple$A: Ty, 
    _module.Triple$B: Ty, 
    _module.Triple$C: Ty, 
    a#171#0#0: Box, 
    a#171#1#0: Box, 
    a#171#2#0: Box :: 
  { $Is(#_module.Triple.Trio(a#171#0#0, a#171#1#0, a#171#2#0), 
      Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C)) } 
  $Is(#_module.Triple.Trio(a#171#0#0, a#171#1#0, a#171#2#0), 
      Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C))
     <==> $IsBox(a#171#0#0, _module.Triple$A)
       && $IsBox(a#171#1#0, _module.Triple$B)
       && $IsBox(a#171#2#0, _module.Triple$C));

// Constructor $IsAlloc
axiom (forall _module.Triple$A: Ty, 
    _module.Triple$B: Ty, 
    _module.Triple$C: Ty, 
    a#171#0#0: Box, 
    a#171#1#0: Box, 
    a#171#2#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_module.Triple.Trio(a#171#0#0, a#171#1#0, a#171#2#0), 
      Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_module.Triple.Trio(a#171#0#0, a#171#1#0, a#171#2#0), 
        Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C), 
        $h)
       <==> $IsAllocBox(a#171#0#0, _module.Triple$A, $h)
         && $IsAllocBox(a#171#1#0, _module.Triple$B, $h)
         && $IsAllocBox(a#171#2#0, _module.Triple$C, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _module.Triple$A: Ty, $h: Heap :: 
  { $IsAllocBox(_module.Triple.fst(d), _module.Triple$A, $h) } 
  $IsGoodHeap($h)
       && 
      _module.Triple.Trio_q(d)
       && (exists _module.Triple$B: Ty, _module.Triple$C: Ty :: 
        { $IsAlloc(d, 
            Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C), 
            $h) } 
        $IsAlloc(d, 
          Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C), 
          $h))
     ==> $IsAllocBox(_module.Triple.fst(d), _module.Triple$A, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _module.Triple$B: Ty, $h: Heap :: 
  { $IsAllocBox(_module.Triple.snd(d), _module.Triple$B, $h) } 
  $IsGoodHeap($h)
       && 
      _module.Triple.Trio_q(d)
       && (exists _module.Triple$A: Ty, _module.Triple$C: Ty :: 
        { $IsAlloc(d, 
            Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C), 
            $h) } 
        $IsAlloc(d, 
          Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C), 
          $h))
     ==> $IsAllocBox(_module.Triple.snd(d), _module.Triple$B, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _module.Triple$C: Ty, $h: Heap :: 
  { $IsAllocBox(_module.Triple.trd(d), _module.Triple$C, $h) } 
  $IsGoodHeap($h)
       && 
      _module.Triple.Trio_q(d)
       && (exists _module.Triple$A: Ty, _module.Triple$B: Ty :: 
        { $IsAlloc(d, 
            Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C), 
            $h) } 
        $IsAlloc(d, 
          Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C), 
          $h))
     ==> $IsAllocBox(_module.Triple.trd(d), _module.Triple$C, $h));

// Constructor literal
axiom (forall a#172#0#0: Box, a#172#1#0: Box, a#172#2#0: Box :: 
  { #_module.Triple.Trio(Lit(a#172#0#0), Lit(a#172#1#0), Lit(a#172#2#0)) } 
  #_module.Triple.Trio(Lit(a#172#0#0), Lit(a#172#1#0), Lit(a#172#2#0))
     == Lit(#_module.Triple.Trio(a#172#0#0, a#172#1#0, a#172#2#0)));

function _module.Triple.fst(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#173#0#0: Box, a#173#1#0: Box, a#173#2#0: Box :: 
  { #_module.Triple.Trio(a#173#0#0, a#173#1#0, a#173#2#0) } 
  _module.Triple.fst(#_module.Triple.Trio(a#173#0#0, a#173#1#0, a#173#2#0))
     == a#173#0#0);

// Inductive rank
axiom (forall a#174#0#0: Box, a#174#1#0: Box, a#174#2#0: Box :: 
  { #_module.Triple.Trio(a#174#0#0, a#174#1#0, a#174#2#0) } 
  BoxRank(a#174#0#0)
     < DtRank(#_module.Triple.Trio(a#174#0#0, a#174#1#0, a#174#2#0)));

function _module.Triple.snd(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#175#0#0: Box, a#175#1#0: Box, a#175#2#0: Box :: 
  { #_module.Triple.Trio(a#175#0#0, a#175#1#0, a#175#2#0) } 
  _module.Triple.snd(#_module.Triple.Trio(a#175#0#0, a#175#1#0, a#175#2#0))
     == a#175#1#0);

// Inductive rank
axiom (forall a#176#0#0: Box, a#176#1#0: Box, a#176#2#0: Box :: 
  { #_module.Triple.Trio(a#176#0#0, a#176#1#0, a#176#2#0) } 
  BoxRank(a#176#1#0)
     < DtRank(#_module.Triple.Trio(a#176#0#0, a#176#1#0, a#176#2#0)));

function _module.Triple.trd(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#177#0#0: Box, a#177#1#0: Box, a#177#2#0: Box :: 
  { #_module.Triple.Trio(a#177#0#0, a#177#1#0, a#177#2#0) } 
  _module.Triple.trd(#_module.Triple.Trio(a#177#0#0, a#177#1#0, a#177#2#0))
     == a#177#2#0);

// Inductive rank
axiom (forall a#178#0#0: Box, a#178#1#0: Box, a#178#2#0: Box :: 
  { #_module.Triple.Trio(a#178#0#0, a#178#1#0, a#178#2#0) } 
  BoxRank(a#178#2#0)
     < DtRank(#_module.Triple.Trio(a#178#0#0, a#178#1#0, a#178#2#0)));

// Depth-one case-split function
function $IsA#_module.Triple(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_module.Triple(d) } 
  $IsA#_module.Triple(d) ==> _module.Triple.Trio_q(d));

// Questionmark data type disjunctivity
axiom (forall _module.Triple$A: Ty, 
    _module.Triple$B: Ty, 
    _module.Triple$C: Ty, 
    d: DatatypeType :: 
  { _module.Triple.Trio_q(d), $Is(d, Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C)) } 
  $Is(d, Tclass._module.Triple(_module.Triple$A, _module.Triple$B, _module.Triple$C))
     ==> _module.Triple.Trio_q(d));

// Datatype extensional equality declaration
function _module.Triple#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_module.Triple.Trio
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Triple#Equal(a, b) } 
  _module.Triple#Equal(a, b)
     <==> _module.Triple.fst(a) == _module.Triple.fst(b)
       && _module.Triple.snd(a) == _module.Triple.snd(b)
       && _module.Triple.trd(a) == _module.Triple.trd(b));

// Datatype extensionality axiom: _module.Triple
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _module.Triple#Equal(a, b) } 
  _module.Triple#Equal(a, b) <==> a == b);

const unique class._module.Triple: ClassName;

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$_#Func2: TyTagFamily;

const unique tytagFamily$_#PartialFunc2: TyTagFamily;

const unique tytagFamily$_#TotalFunc2: TyTagFamily;

const unique tytagFamily$_#Func3: TyTagFamily;

const unique tytagFamily$_#PartialFunc3: TyTagFamily;

const unique tytagFamily$_#TotalFunc3: TyTagFamily;

const unique tytagFamily$_#Func4: TyTagFamily;

const unique tytagFamily$_#PartialFunc4: TyTagFamily;

const unique tytagFamily$_#TotalFunc4: TyTagFamily;

const unique tytagFamily$_#Func6: TyTagFamily;

const unique tytagFamily$_#PartialFunc6: TyTagFamily;

const unique tytagFamily$_#TotalFunc6: TyTagFamily;

const unique tytagFamily$Path: TyTagFamily;

const unique tytagFamily$Expression: TyTagFamily;

const unique tytagFamily$Triple: TyTagFamily;

const unique tytagFamily$StateC: TyTagFamily;

const unique tytagFamily$Tuple: TyTagFamily;

const unique tytagFamily$Statement: TyTagFamily;

const unique tytagFamily$Primitive: TyTagFamily;

const unique tytagFamily$Program: TyTagFamily;

const unique tytagFamily$Literal: TyTagFamily;

const unique tytagFamily$Reason: TyTagFamily;
