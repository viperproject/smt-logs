(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Path () T@U)
(declare-fun Tagclass._module.Expression () T@U)
(declare-fun Tagclass._module.Primitive () T@U)
(declare-fun |##_module.Expression.exprLiteral| () T@U)
(declare-fun Tagclass._module.Literal () T@U)
(declare-fun |##_module.Expression.exprIdentifier| () T@U)
(declare-fun |##_module.Expression.exprIf| () T@U)
(declare-fun |##_module.Expression.exprAnd| () T@U)
(declare-fun |##_module.Expression.exprOr| () T@U)
(declare-fun |##_module.Expression.exprInvocation| () T@U)
(declare-fun |##_module.Expression.exprError| () T@U)
(declare-fun Tagclass._module.Reason () T@U)
(declare-fun |##_module.Literal.litTrue| () T@U)
(declare-fun |##_module.Literal.litFalse| () T@U)
(declare-fun |##_module.Literal.litUndefined| () T@U)
(declare-fun |##_module.Literal.litNull| () T@U)
(declare-fun |##_module.Literal.litNumber| () T@U)
(declare-fun |##_module.Literal.litString| () T@U)
(declare-fun |##_module.Literal.litPrimitive| () T@U)
(declare-fun |##_module.Literal.litArrOfPaths| () T@U)
(declare-fun |##_module.Literal.litArrOfStrings| () T@U)
(declare-fun |##_module.Literal.litArray| () T@U)
(declare-fun tytagFamily$Path () T@U)
(declare-fun tytagFamily$Expression () T@U)
(declare-fun tytagFamily$Primitive () T@U)
(declare-fun tytagFamily$Literal () T@U)
(declare-fun tytagFamily$Reason () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.Expression.exprAnd| (T@U T@U) T@U)
(declare-fun Tclass._module.Expression () T@U)
(declare-fun |#_module.Expression.exprOr| (T@U T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.Expression.exprInvocation| (T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |#_module.Expression.exprIf| (T@U T@U T@U) T@U)
(declare-fun |#_module.Literal.litString| (T@U) T@U)
(declare-fun |#_module.Literal.litArray| (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Expression.cond (T@U) T@U)
(declare-fun _module.Expression.ifTrue (T@U) T@U)
(declare-fun _module.Expression.ifFalse (T@U) T@U)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass._module.Identifier () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |#_module.Literal.litTrue| () T@U)
(declare-fun |#_module.Literal.litFalse| () T@U)
(declare-fun |#_module.Literal.litUndefined| () T@U)
(declare-fun |#_module.Literal.litNull| () T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.OneToOne (T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.OneToOne#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun _module.Expression.exprLiteral_q (T@U) Bool)
(declare-fun _module.Literal.litString_q (T@U) Bool)
(declare-fun _module.Expression.lit (T@U) T@U)
(declare-fun _module.Literal.litArrOfPaths_q (T@U) Bool)
(declare-fun _module.Literal.litArrOfStrings_q (T@U) Bool)
(declare-fun _module.__default.Loc (T@U T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun _module.Literal.strs (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |_module.__default.Loc#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.Literal.paths (T@U) T@U)
(declare-fun Tclass._module.Literal () T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun _module.Expression.exprIdentifier_q (T@U) Bool)
(declare-fun _module.Expression.exprIf_q (T@U) Bool)
(declare-fun _module.Expression.exprAnd_q (T@U) Bool)
(declare-fun _module.Expression.exprOr_q (T@U) Bool)
(declare-fun _module.Expression.exprInvocation_q (T@U) Bool)
(declare-fun _module.Expression.exprError_q (T@U) Bool)
(declare-fun _module.Literal.litTrue_q (T@U) Bool)
(declare-fun _module.Literal.litFalse_q (T@U) Bool)
(declare-fun _module.Literal.litUndefined_q (T@U) Bool)
(declare-fun _module.Literal.litNull_q (T@U) Bool)
(declare-fun _module.Literal.litNumber_q (T@U) Bool)
(declare-fun _module.Literal.litPrimitive_q (T@U) Bool)
(declare-fun _module.Literal.litArray_q (T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |#_module.Expression.exprLiteral| (T@U) T@U)
(declare-fun |#_module.Expression.exprIdentifier| (T@U) T@U)
(declare-fun |#_module.Expression.exprError| (T@U) T@U)
(declare-fun |#_module.Literal.litNumber| (Int) T@U)
(declare-fun |#_module.Literal.litPrimitive| (T@U) T@U)
(declare-fun |#_module.Literal.litArrOfPaths| (T@U) T@U)
(declare-fun |#_module.Literal.litArrOfStrings| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.Path () T@U)
(declare-fun Tclass._module.Primitive () T@U)
(declare-fun Tclass._module.Reason () T@U)
(declare-fun charType () T@T)
(declare-fun _module.Expression.conj0 (T@U) T@U)
(declare-fun _module.Expression.conj1 (T@U) T@U)
(declare-fun _module.Expression.disj0 (T@U) T@U)
(declare-fun _module.Expression.disj1 (T@U) T@U)
(declare-fun _module.Expression.fun (T@U) T@U)
(declare-fun _module.Expression.args (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun _module.Expression.id (T@U) T@U)
(declare-fun _module.Expression.r (T@U) T@U)
(declare-fun _module.Literal.num (T@U) Int)
(declare-fun _module.Literal.str (T@U) T@U)
(declare-fun _module.Literal.prim (T@U) T@U)
(declare-fun _module.Literal.arr (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TInt TagBool TagChar TagInt TagSet TagSeq alloc Tagclass._module.Path Tagclass._module.Expression Tagclass._module.Primitive |##_module.Expression.exprLiteral| Tagclass._module.Literal |##_module.Expression.exprIdentifier| |##_module.Expression.exprIf| |##_module.Expression.exprAnd| |##_module.Expression.exprOr| |##_module.Expression.exprInvocation| |##_module.Expression.exprError| Tagclass._module.Reason |##_module.Literal.litTrue| |##_module.Literal.litFalse| |##_module.Literal.litUndefined| |##_module.Literal.litNull| |##_module.Literal.litNumber| |##_module.Literal.litString| |##_module.Literal.litPrimitive| |##_module.Literal.litArrOfPaths| |##_module.Literal.litArrOfStrings| |##_module.Literal.litArray| tytagFamily$Path tytagFamily$Expression tytagFamily$Primitive tytagFamily$Literal tytagFamily$Reason)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expression.exprAnd| |a#49#0#0| |a#49#1#0|) Tclass._module.Expression)  (and ($Is DatatypeTypeType |a#49#0#0| Tclass._module.Expression) ($Is DatatypeTypeType |a#49#1#0| Tclass._module.Expression)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expression.exprAnd| |a#49#0#0| |a#49#1#0|) Tclass._module.Expression))
)))
(assert (forall ((|a#57#0#0| T@U) (|a#57#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expression.exprOr| |a#57#0#0| |a#57#1#0|) Tclass._module.Expression)  (and ($Is DatatypeTypeType |a#57#0#0| Tclass._module.Expression) ($Is DatatypeTypeType |a#57#1#0| Tclass._module.Expression)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expression.exprOr| |a#57#0#0| |a#57#1#0|) Tclass._module.Expression))
)))
(assert (forall ((|a#70#0#0| T@U) (|a#70#1#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#70#1#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#70#1#0| i))) (DtRank (|#_module.Expression.exprInvocation| |a#70#0#0| |a#70#1#0|))))
 :pattern ( (|Seq#Index| |a#70#1#0| i) (|#_module.Expression.exprInvocation| |a#70#0#0| |a#70#1#0|))
)))
(assert (forall ((|a#39#0#0| T@U) (|a#39#1#0| T@U) (|a#39#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expression.exprIf| |a#39#0#0| |a#39#1#0| |a#39#2#0|) Tclass._module.Expression)  (and (and ($Is DatatypeTypeType |a#39#0#0| Tclass._module.Expression) ($Is DatatypeTypeType |a#39#1#0| Tclass._module.Expression)) ($Is DatatypeTypeType |a#39#2#0| Tclass._module.Expression)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expression.exprIf| |a#39#0#0| |a#39#1#0| |a#39#2#0|) Tclass._module.Expression))
)))
(assert (forall ((|a#104#0#0| T@U) (i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| |a#104#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#104#0#0| i@@0))) (DtRank (|#_module.Literal.litString| |a#104#0#0|))))
 :pattern ( (|Seq#Index| |a#104#0#0| i@@0) (|#_module.Literal.litString| |a#104#0#0|))
)))
(assert (forall ((|a#129#0#0| T@U) (i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| |a#129#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#129#0#0| i@@1))) (DtRank (|#_module.Literal.litArray| |a#129#0#0|))))
 :pattern ( (|Seq#Index| |a#129#0#0| i@@1) (|#_module.Literal.litArray| |a#129#0#0|))
)))
(assert (forall ((|a#37#0#0| T@U) (|a#37#1#0| T@U) (|a#37#2#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expression.exprIf| |a#37#0#0| |a#37#1#0| |a#37#2#0|)) |##_module.Expression.exprIf|)
 :pattern ( (|#_module.Expression.exprIf| |a#37#0#0| |a#37#1#0| |a#37#2#0|))
)))
(assert (forall ((|a#41#0#0| T@U) (|a#41#1#0| T@U) (|a#41#2#0| T@U) ) (! (= (_module.Expression.cond (|#_module.Expression.exprIf| |a#41#0#0| |a#41#1#0| |a#41#2#0|)) |a#41#0#0|)
 :pattern ( (|#_module.Expression.exprIf| |a#41#0#0| |a#41#1#0| |a#41#2#0|))
)))
(assert (forall ((|a#43#0#0| T@U) (|a#43#1#0| T@U) (|a#43#2#0| T@U) ) (! (= (_module.Expression.ifTrue (|#_module.Expression.exprIf| |a#43#0#0| |a#43#1#0| |a#43#2#0|)) |a#43#1#0|)
 :pattern ( (|#_module.Expression.exprIf| |a#43#0#0| |a#43#1#0| |a#43#2#0|))
)))
(assert (forall ((|a#45#0#0| T@U) (|a#45#1#0| T@U) (|a#45#2#0| T@U) ) (! (= (_module.Expression.ifFalse (|#_module.Expression.exprIf| |a#45#0#0| |a#45#1#0| |a#45#2#0|)) |a#45#2#0|)
 :pattern ( (|#_module.Expression.exprIf| |a#45#0#0| |a#45#1#0| |a#45#2#0|))
)))
(assert ($AlwaysAllocated Tclass._module.Identifier))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.Literal.litTrue|) |##_module.Literal.litTrue|))
(assert (= (DatatypeCtorId |#_module.Literal.litFalse|) |##_module.Literal.litFalse|))
(assert (= (DatatypeCtorId |#_module.Literal.litUndefined|) |##_module.Literal.litUndefined|))
(assert (= (DatatypeCtorId |#_module.Literal.litNull|) |##_module.Literal.litNull|))
(assert (= (Ctor SeqType) 4))
(assert (forall ((|a#65#0#0| T@U) (|a#65#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expression.exprInvocation| |a#65#0#0| |a#65#1#0|) Tclass._module.Expression)  (and ($Is DatatypeTypeType |a#65#0#0| Tclass._module.Expression) ($Is SeqType |a#65#1#0| (TSeq Tclass._module.Expression))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expression.exprInvocation| |a#65#0#0| |a#65#1#0|) Tclass._module.Expression))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|cmd#0| T@U) (|deps#0| T@U) (|exts#0| T@U) (|paths#0| T@U) ) (!  (=> (or (|_module.__default.OneToOne#canCall| |cmd#0| |deps#0| |exts#0| |paths#0|) (and (< 3 $FunctionContextHeight) (and (and (and (and ($Is DatatypeTypeType |cmd#0| Tclass._module.Expression) ($Is DatatypeTypeType |deps#0| Tclass._module.Expression)) ($Is DatatypeTypeType |exts#0| Tclass._module.Expression)) ($Is DatatypeTypeType |paths#0| Tclass._module.Expression)) (and (and (and (and (and (and (and (_module.Expression.exprLiteral_q |cmd#0|) (_module.Literal.litString_q (_module.Expression.lit |cmd#0|))) (_module.Expression.exprLiteral_q |deps#0|)) (_module.Literal.litArrOfPaths_q (_module.Expression.lit |deps#0|))) (_module.Expression.exprLiteral_q |exts#0|)) (_module.Literal.litArrOfStrings_q (_module.Expression.lit |exts#0|))) (_module.Expression.exprLiteral_q |paths#0|)) (_module.Literal.litArrOfPaths_q (_module.Expression.lit |paths#0|)))))) (and (forall ((|e#0| T@U) ) (!  (=> ($Is SeqType |e#0| (TSeq TChar)) (=> (|Set#IsMember| (_module.Literal.strs (_module.Expression.lit |exts#0|)) ($Box SeqType |e#0|)) (|_module.__default.Loc#canCall| |cmd#0| |deps#0| |e#0|)))
 :pattern ( (_module.__default.Loc |cmd#0| |deps#0| |e#0|))
 :pattern ( (|Set#IsMember| (_module.Literal.strs (_module.Expression.lit |exts#0|)) ($Box SeqType |e#0|)))
)) (= (_module.__default.OneToOne |cmd#0| |deps#0| |exts#0| |paths#0|) (forall ((|e#0@@0| T@U) ) (!  (=> ($Is SeqType |e#0@@0| (TSeq TChar)) (=> (|Set#IsMember| (_module.Literal.strs (_module.Expression.lit |exts#0|)) ($Box SeqType |e#0@@0|)) (|Set#IsMember| (_module.Literal.paths (_module.Expression.lit |paths#0|)) ($Box DatatypeTypeType (_module.__default.Loc |cmd#0| |deps#0| |e#0@@0|)))))
 :pattern ( (_module.__default.Loc |cmd#0| |deps#0| |e#0@@0|))
 :pattern ( (|Set#IsMember| (_module.Literal.strs (_module.Expression.lit |exts#0|)) ($Box SeqType |e#0@@0|)))
)))))
 :pattern ( (_module.__default.OneToOne |cmd#0| |deps#0| |exts#0| |paths#0|))
))))
(assert ($Is DatatypeTypeType |#_module.Literal.litTrue| Tclass._module.Literal))
(assert ($Is DatatypeTypeType |#_module.Literal.litFalse| Tclass._module.Literal))
(assert ($Is DatatypeTypeType |#_module.Literal.litUndefined| Tclass._module.Literal))
(assert ($Is DatatypeTypeType |#_module.Literal.litNull| Tclass._module.Literal))
(assert (= (Ctor SetType) 5))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((|cmd#0@@0| T@U) (|deps#0@@0| T@U) (|exts#0@@0| T@U) (|paths#0@@0| T@U) ) (!  (=> (or (|_module.__default.OneToOne#canCall| (Lit DatatypeTypeType |cmd#0@@0|) (Lit DatatypeTypeType |deps#0@@0|) (Lit DatatypeTypeType |exts#0@@0|) (Lit DatatypeTypeType |paths#0@@0|)) (and (< 3 $FunctionContextHeight) (and (and (and (and ($Is DatatypeTypeType |cmd#0@@0| Tclass._module.Expression) ($Is DatatypeTypeType |deps#0@@0| Tclass._module.Expression)) ($Is DatatypeTypeType |exts#0@@0| Tclass._module.Expression)) ($Is DatatypeTypeType |paths#0@@0| Tclass._module.Expression)) (U_2_bool (Lit boolType (bool_2_U  (and (and (and (and (and (and (and (_module.Expression.exprLiteral_q (Lit DatatypeTypeType |cmd#0@@0|)) (_module.Literal.litString_q (Lit DatatypeTypeType (_module.Expression.lit (Lit DatatypeTypeType |cmd#0@@0|))))) (_module.Expression.exprLiteral_q (Lit DatatypeTypeType |deps#0@@0|))) (_module.Literal.litArrOfPaths_q (Lit DatatypeTypeType (_module.Expression.lit (Lit DatatypeTypeType |deps#0@@0|))))) (_module.Expression.exprLiteral_q (Lit DatatypeTypeType |exts#0@@0|))) (_module.Literal.litArrOfStrings_q (Lit DatatypeTypeType (_module.Expression.lit (Lit DatatypeTypeType |exts#0@@0|))))) (_module.Expression.exprLiteral_q (Lit DatatypeTypeType |paths#0@@0|))) (_module.Literal.litArrOfPaths_q (Lit DatatypeTypeType (_module.Expression.lit (Lit DatatypeTypeType |paths#0@@0|))))))))))) (and (forall ((|e#1| T@U) ) (!  (=> ($Is SeqType |e#1| (TSeq TChar)) (=> (|Set#IsMember| (Lit SetType (_module.Literal.strs (Lit DatatypeTypeType (_module.Expression.lit (Lit DatatypeTypeType |exts#0@@0|))))) ($Box SeqType |e#1|)) (|_module.__default.Loc#canCall| (Lit DatatypeTypeType |cmd#0@@0|) (Lit DatatypeTypeType |deps#0@@0|) |e#1|)))
 :pattern ( (_module.__default.Loc |cmd#0@@0| |deps#0@@0| |e#1|))
 :pattern ( (|Set#IsMember| (_module.Literal.strs (_module.Expression.lit |exts#0@@0|)) ($Box SeqType |e#1|)))
)) (= (_module.__default.OneToOne (Lit DatatypeTypeType |cmd#0@@0|) (Lit DatatypeTypeType |deps#0@@0|) (Lit DatatypeTypeType |exts#0@@0|) (Lit DatatypeTypeType |paths#0@@0|)) (forall ((|e#1@@0| T@U) ) (!  (=> ($Is SeqType |e#1@@0| (TSeq TChar)) (=> (|Set#IsMember| (Lit SetType (_module.Literal.strs (Lit DatatypeTypeType (_module.Expression.lit (Lit DatatypeTypeType |exts#0@@0|))))) ($Box SeqType |e#1@@0|)) (|Set#IsMember| (Lit SetType (_module.Literal.paths (Lit DatatypeTypeType (_module.Expression.lit (Lit DatatypeTypeType |paths#0@@0|))))) ($Box DatatypeTypeType (_module.__default.Loc (Lit DatatypeTypeType |cmd#0@@0|) (Lit DatatypeTypeType |deps#0@@0|) |e#1@@0|)))))
 :pattern ( (_module.__default.Loc |cmd#0@@0| |deps#0@@0| |e#1@@0|))
 :pattern ( (|Set#IsMember| (_module.Literal.strs (_module.Expression.lit |exts#0@@0|)) ($Box SeqType |e#1@@0|)))
)))))
 :weight 3
 :pattern ( (_module.__default.OneToOne (Lit DatatypeTypeType |cmd#0@@0|) (Lit DatatypeTypeType |deps#0@@0|) (Lit DatatypeTypeType |exts#0@@0|) (Lit DatatypeTypeType |paths#0@@0|)))
))))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((d T@U) ) (! (= (_module.Expression.exprLiteral_q d) (= (DatatypeCtorId d) |##_module.Expression.exprLiteral|))
 :pattern ( (_module.Expression.exprLiteral_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Expression.exprIdentifier_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Expression.exprIdentifier|))
 :pattern ( (_module.Expression.exprIdentifier_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Expression.exprIf_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Expression.exprIf|))
 :pattern ( (_module.Expression.exprIf_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Expression.exprAnd_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Expression.exprAnd|))
 :pattern ( (_module.Expression.exprAnd_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.Expression.exprOr_q d@@3) (= (DatatypeCtorId d@@3) |##_module.Expression.exprOr|))
 :pattern ( (_module.Expression.exprOr_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (_module.Expression.exprInvocation_q d@@4) (= (DatatypeCtorId d@@4) |##_module.Expression.exprInvocation|))
 :pattern ( (_module.Expression.exprInvocation_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (_module.Expression.exprError_q d@@5) (= (DatatypeCtorId d@@5) |##_module.Expression.exprError|))
 :pattern ( (_module.Expression.exprError_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (_module.Literal.litTrue_q d@@6) (= (DatatypeCtorId d@@6) |##_module.Literal.litTrue|))
 :pattern ( (_module.Literal.litTrue_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (! (= (_module.Literal.litFalse_q d@@7) (= (DatatypeCtorId d@@7) |##_module.Literal.litFalse|))
 :pattern ( (_module.Literal.litFalse_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (! (= (_module.Literal.litUndefined_q d@@8) (= (DatatypeCtorId d@@8) |##_module.Literal.litUndefined|))
 :pattern ( (_module.Literal.litUndefined_q d@@8))
)))
(assert (forall ((d@@9 T@U) ) (! (= (_module.Literal.litNull_q d@@9) (= (DatatypeCtorId d@@9) |##_module.Literal.litNull|))
 :pattern ( (_module.Literal.litNull_q d@@9))
)))
(assert (forall ((d@@10 T@U) ) (! (= (_module.Literal.litNumber_q d@@10) (= (DatatypeCtorId d@@10) |##_module.Literal.litNumber|))
 :pattern ( (_module.Literal.litNumber_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (! (= (_module.Literal.litString_q d@@11) (= (DatatypeCtorId d@@11) |##_module.Literal.litString|))
 :pattern ( (_module.Literal.litString_q d@@11))
)))
(assert (forall ((d@@12 T@U) ) (! (= (_module.Literal.litPrimitive_q d@@12) (= (DatatypeCtorId d@@12) |##_module.Literal.litPrimitive|))
 :pattern ( (_module.Literal.litPrimitive_q d@@12))
)))
(assert (forall ((d@@13 T@U) ) (! (= (_module.Literal.litArrOfPaths_q d@@13) (= (DatatypeCtorId d@@13) |##_module.Literal.litArrOfPaths|))
 :pattern ( (_module.Literal.litArrOfPaths_q d@@13))
)))
(assert (forall ((d@@14 T@U) ) (! (= (_module.Literal.litArrOfStrings_q d@@14) (= (DatatypeCtorId d@@14) |##_module.Literal.litArrOfStrings|))
 :pattern ( (_module.Literal.litArrOfStrings_q d@@14))
)))
(assert (forall ((d@@15 T@U) ) (! (= (_module.Literal.litArray_q d@@15) (= (DatatypeCtorId d@@15) |##_module.Literal.litArray|))
 :pattern ( (_module.Literal.litArray_q d@@15))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@16 T@U) ) (!  (=> (_module.Expression.exprIf_q d@@16) (exists ((|a#38#0#0| T@U) (|a#38#1#0| T@U) (|a#38#2#0| T@U) ) (= d@@16 (|#_module.Expression.exprIf| |a#38#0#0| |a#38#1#0| |a#38#2#0|))))
 :pattern ( (_module.Expression.exprIf_q d@@16))
)))
(assert (forall ((d@@17 T@U) ) (!  (=> (_module.Expression.exprAnd_q d@@17) (exists ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (= d@@17 (|#_module.Expression.exprAnd| |a#48#0#0| |a#48#1#0|))))
 :pattern ( (_module.Expression.exprAnd_q d@@17))
)))
(assert (forall ((d@@18 T@U) ) (!  (=> (_module.Expression.exprOr_q d@@18) (exists ((|a#56#0#0| T@U) (|a#56#1#0| T@U) ) (= d@@18 (|#_module.Expression.exprOr| |a#56#0#0| |a#56#1#0|))))
 :pattern ( (_module.Expression.exprOr_q d@@18))
)))
(assert (forall ((d@@19 T@U) ) (!  (=> (_module.Expression.exprInvocation_q d@@19) (exists ((|a#64#0#0| T@U) (|a#64#1#0| T@U) ) (= d@@19 (|#_module.Expression.exprInvocation| |a#64#0#0| |a#64#1#0|))))
 :pattern ( (_module.Expression.exprInvocation_q d@@19))
)))
(assert (forall ((d@@20 T@U) ) (!  (=> (_module.Literal.litTrue_q d@@20) (= d@@20 |#_module.Literal.litTrue|))
 :pattern ( (_module.Literal.litTrue_q d@@20))
)))
(assert (forall ((d@@21 T@U) ) (!  (=> (_module.Literal.litFalse_q d@@21) (= d@@21 |#_module.Literal.litFalse|))
 :pattern ( (_module.Literal.litFalse_q d@@21))
)))
(assert (forall ((d@@22 T@U) ) (!  (=> (_module.Literal.litUndefined_q d@@22) (= d@@22 |#_module.Literal.litUndefined|))
 :pattern ( (_module.Literal.litUndefined_q d@@22))
)))
(assert (forall ((d@@23 T@U) ) (!  (=> (_module.Literal.litNull_q d@@23) (= d@@23 |#_module.Literal.litNull|))
 :pattern ( (_module.Literal.litNull_q d@@23))
)))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((d@@24 T@U) ) (!  (=> (_module.Expression.exprLiteral_q d@@24) (exists ((|a#27#0#0| T@U) ) (= d@@24 (|#_module.Expression.exprLiteral| |a#27#0#0|))))
 :pattern ( (_module.Expression.exprLiteral_q d@@24))
)))
(assert (forall ((d@@25 T@U) ) (!  (=> (_module.Expression.exprIdentifier_q d@@25) (exists ((|a#33#0#0| T@U) ) (= d@@25 (|#_module.Expression.exprIdentifier| |a#33#0#0|))))
 :pattern ( (_module.Expression.exprIdentifier_q d@@25))
)))
(assert (forall ((d@@26 T@U) ) (!  (=> (_module.Expression.exprError_q d@@26) (exists ((|a#73#0#0| T@U) ) (= d@@26 (|#_module.Expression.exprError| |a#73#0#0|))))
 :pattern ( (_module.Expression.exprError_q d@@26))
)))
(assert (forall ((d@@27 T@U) ) (!  (=> (_module.Literal.litNumber_q d@@27) (exists ((|a#95#0#0| Int) ) (= d@@27 (|#_module.Literal.litNumber| |a#95#0#0|))))
 :pattern ( (_module.Literal.litNumber_q d@@27))
)))
(assert (forall ((d@@28 T@U) ) (!  (=> (_module.Literal.litString_q d@@28) (exists ((|a#100#0#0| T@U) ) (= d@@28 (|#_module.Literal.litString| |a#100#0#0|))))
 :pattern ( (_module.Literal.litString_q d@@28))
)))
(assert (forall ((d@@29 T@U) ) (!  (=> (_module.Literal.litPrimitive_q d@@29) (exists ((|a#107#0#0| T@U) ) (= d@@29 (|#_module.Literal.litPrimitive| |a#107#0#0|))))
 :pattern ( (_module.Literal.litPrimitive_q d@@29))
)))
(assert (forall ((d@@30 T@U) ) (!  (=> (_module.Literal.litArrOfPaths_q d@@30) (exists ((|a#113#0#0| T@U) ) (= d@@30 (|#_module.Literal.litArrOfPaths| |a#113#0#0|))))
 :pattern ( (_module.Literal.litArrOfPaths_q d@@30))
)))
(assert (forall ((d@@31 T@U) ) (!  (=> (_module.Literal.litArrOfStrings_q d@@31) (exists ((|a#119#0#0| T@U) ) (= d@@31 (|#_module.Literal.litArrOfStrings| |a#119#0#0|))))
 :pattern ( (_module.Literal.litArrOfStrings_q d@@31))
)))
(assert (forall ((d@@32 T@U) ) (!  (=> (_module.Literal.litArray_q d@@32) (exists ((|a#125#0#0| T@U) ) (= d@@32 (|#_module.Literal.litArray| |a#125#0#0|))))
 :pattern ( (_module.Literal.litArray_q d@@32))
)))
(assert (forall ((d@@33 T@U) ) (!  (=> ($Is DatatypeTypeType d@@33 Tclass._module.Expression) (or (or (or (or (or (or (_module.Expression.exprLiteral_q d@@33) (_module.Expression.exprIdentifier_q d@@33)) (_module.Expression.exprIf_q d@@33)) (_module.Expression.exprAnd_q d@@33)) (_module.Expression.exprOr_q d@@33)) (_module.Expression.exprInvocation_q d@@33)) (_module.Expression.exprError_q d@@33)))
 :pattern ( (_module.Expression.exprError_q d@@33) ($Is DatatypeTypeType d@@33 Tclass._module.Expression))
 :pattern ( (_module.Expression.exprInvocation_q d@@33) ($Is DatatypeTypeType d@@33 Tclass._module.Expression))
 :pattern ( (_module.Expression.exprOr_q d@@33) ($Is DatatypeTypeType d@@33 Tclass._module.Expression))
 :pattern ( (_module.Expression.exprAnd_q d@@33) ($Is DatatypeTypeType d@@33 Tclass._module.Expression))
 :pattern ( (_module.Expression.exprIf_q d@@33) ($Is DatatypeTypeType d@@33 Tclass._module.Expression))
 :pattern ( (_module.Expression.exprIdentifier_q d@@33) ($Is DatatypeTypeType d@@33 Tclass._module.Expression))
 :pattern ( (_module.Expression.exprLiteral_q d@@33) ($Is DatatypeTypeType d@@33 Tclass._module.Expression))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((d@@34 T@U) ) (!  (=> ($Is DatatypeTypeType d@@34 Tclass._module.Literal) (or (or (or (or (or (or (or (or (or (_module.Literal.litTrue_q d@@34) (_module.Literal.litFalse_q d@@34)) (_module.Literal.litUndefined_q d@@34)) (_module.Literal.litNull_q d@@34)) (_module.Literal.litNumber_q d@@34)) (_module.Literal.litString_q d@@34)) (_module.Literal.litPrimitive_q d@@34)) (_module.Literal.litArrOfPaths_q d@@34)) (_module.Literal.litArrOfStrings_q d@@34)) (_module.Literal.litArray_q d@@34)))
 :pattern ( (_module.Literal.litArray_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
 :pattern ( (_module.Literal.litArrOfStrings_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
 :pattern ( (_module.Literal.litArrOfPaths_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
 :pattern ( (_module.Literal.litPrimitive_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
 :pattern ( (_module.Literal.litString_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
 :pattern ( (_module.Literal.litNumber_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
 :pattern ( (_module.Literal.litNull_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
 :pattern ( (_module.Literal.litUndefined_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
 :pattern ( (_module.Literal.litFalse_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
 :pattern ( (_module.Literal.litTrue_q d@@34) ($Is DatatypeTypeType d@@34 Tclass._module.Literal))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Path) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass._module.Path)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Path))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Expression) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) Tclass._module.Expression)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Expression))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Primitive) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass._module.Primitive)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Primitive))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.Literal) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) Tclass._module.Literal)))
 :pattern ( ($IsBox bx@@3 Tclass._module.Literal))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.Reason) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) Tclass._module.Reason)))
 :pattern ( ($IsBox bx@@4 Tclass._module.Reason))
)))
(assert (forall ((|a#28#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expression.exprLiteral| |a#28#0#0|) Tclass._module.Expression) ($Is DatatypeTypeType |a#28#0#0| Tclass._module.Literal))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expression.exprLiteral| |a#28#0#0|) Tclass._module.Expression))
)))
(assert (forall ((|a#34#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expression.exprIdentifier| |a#34#0#0|) Tclass._module.Expression) ($IsBox |a#34#0#0| Tclass._module.Identifier))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expression.exprIdentifier| |a#34#0#0|) Tclass._module.Expression))
)))
(assert (forall ((|a#74#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Expression.exprError| |a#74#0#0|) Tclass._module.Expression) ($Is DatatypeTypeType |a#74#0#0| Tclass._module.Reason))
 :pattern ( ($Is DatatypeTypeType (|#_module.Expression.exprError| |a#74#0#0|) Tclass._module.Expression))
)))
(assert (forall ((|a#108#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Literal.litPrimitive| |a#108#0#0|) Tclass._module.Literal) ($Is DatatypeTypeType |a#108#0#0| Tclass._module.Primitive))
 :pattern ( ($Is DatatypeTypeType (|#_module.Literal.litPrimitive| |a#108#0#0|) Tclass._module.Literal))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|cmd#0@@1| T@U) (|deps#0@@1| T@U) (|ext#0| T@U) ) (!  (=> (or (|_module.__default.Loc#canCall| |cmd#0@@1| |deps#0@@1| |ext#0|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |cmd#0@@1| Tclass._module.Expression) ($Is DatatypeTypeType |deps#0@@1| Tclass._module.Expression)) ($Is SeqType |ext#0| (TSeq TChar))))) ($Is DatatypeTypeType (_module.__default.Loc |cmd#0@@1| |deps#0@@1| |ext#0|) Tclass._module.Path))
 :pattern ( (_module.__default.Loc |cmd#0@@1| |deps#0@@1| |ext#0|))
))))
(assert (forall ((|a#114#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Literal.litArrOfPaths| |a#114#0#0|) Tclass._module.Literal) ($Is SetType |a#114#0#0| (TSet Tclass._module.Path)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Literal.litArrOfPaths| |a#114#0#0|) Tclass._module.Literal))
)))
(assert (forall ((|a#126#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Literal.litArray| |a#126#0#0|) Tclass._module.Literal) ($Is SeqType |a#126#0#0| (TSeq Tclass._module.Expression)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Literal.litArray| |a#126#0#0|) Tclass._module.Literal))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TInt) (and (= ($Box intType ($Unbox intType bx@@5)) bx@@5) ($Is intType ($Unbox intType bx@@5) TInt)))
 :pattern ( ($IsBox bx@@5 TInt))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 TBool) (and (= ($Box boolType ($Unbox boolType bx@@6)) bx@@6) ($Is boolType ($Unbox boolType bx@@6) TBool)))
 :pattern ( ($IsBox bx@@6 TBool))
)))
(assert (= (Ctor charType) 6))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 TChar) (and (= ($Box charType ($Unbox charType bx@@7)) bx@@7) ($Is charType ($Unbox charType bx@@7) TChar)))
 :pattern ( ($IsBox bx@@7 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@0 T@U) (v@@2 T@U) ) (!  (=> ($IsBox v@@2 ty) ($IsAllocBox v@@2 ty h@@0))
 :pattern ( ($IsAllocBox v@@2 ty h@@0))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall ((v@@3 T@U) (t0@@0 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@0) h@@1) (forall ((bx@@8 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@8) ($IsAllocBox bx@@8 t0@@0 h@@1))
 :pattern ( (|Set#IsMember| v@@3 bx@@8))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@0) h@@1))
)))
(assert (forall ((|a#47#0#0| T@U) (|a#47#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expression.exprAnd| |a#47#0#0| |a#47#1#0|)) |##_module.Expression.exprAnd|)
 :pattern ( (|#_module.Expression.exprAnd| |a#47#0#0| |a#47#1#0|))
)))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) ) (! (= (_module.Expression.conj0 (|#_module.Expression.exprAnd| |a#51#0#0| |a#51#1#0|)) |a#51#0#0|)
 :pattern ( (|#_module.Expression.exprAnd| |a#51#0#0| |a#51#1#0|))
)))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) ) (! (= (_module.Expression.conj1 (|#_module.Expression.exprAnd| |a#53#0#0| |a#53#1#0|)) |a#53#1#0|)
 :pattern ( (|#_module.Expression.exprAnd| |a#53#0#0| |a#53#1#0|))
)))
(assert (forall ((|a#55#0#0| T@U) (|a#55#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expression.exprOr| |a#55#0#0| |a#55#1#0|)) |##_module.Expression.exprOr|)
 :pattern ( (|#_module.Expression.exprOr| |a#55#0#0| |a#55#1#0|))
)))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) ) (! (= (_module.Expression.disj0 (|#_module.Expression.exprOr| |a#59#0#0| |a#59#1#0|)) |a#59#0#0|)
 :pattern ( (|#_module.Expression.exprOr| |a#59#0#0| |a#59#1#0|))
)))
(assert (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) ) (! (= (_module.Expression.disj1 (|#_module.Expression.exprOr| |a#61#0#0| |a#61#1#0|)) |a#61#1#0|)
 :pattern ( (|#_module.Expression.exprOr| |a#61#0#0| |a#61#1#0|))
)))
(assert (forall ((|a#63#0#0| T@U) (|a#63#1#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expression.exprInvocation| |a#63#0#0| |a#63#1#0|)) |##_module.Expression.exprInvocation|)
 :pattern ( (|#_module.Expression.exprInvocation| |a#63#0#0| |a#63#1#0|))
)))
(assert (forall ((|a#67#0#0| T@U) (|a#67#1#0| T@U) ) (! (= (_module.Expression.fun (|#_module.Expression.exprInvocation| |a#67#0#0| |a#67#1#0|)) |a#67#0#0|)
 :pattern ( (|#_module.Expression.exprInvocation| |a#67#0#0| |a#67#1#0|))
)))
(assert (forall ((|a#69#0#0| T@U) (|a#69#1#0| T@U) ) (! (= (_module.Expression.args (|#_module.Expression.exprInvocation| |a#69#0#0| |a#69#1#0|)) |a#69#1#0|)
 :pattern ( (|#_module.Expression.exprInvocation| |a#69#0#0| |a#69#1#0|))
)))
(assert (forall ((v@@4 T@U) (t0@@1 T@U) (h@@2 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@1) h@@2) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i@@2) t0@@1 h@@2))
 :pattern ( (|Seq#Index| v@@4 i@@2))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@1) h@@2))
)))
(assert (forall ((|a#40#0#0| T@U) (|a#40#1#0| T@U) (|a#40#2#0| T@U) ) (! (= (|#_module.Expression.exprIf| (Lit DatatypeTypeType |a#40#0#0|) (Lit DatatypeTypeType |a#40#1#0|) (Lit DatatypeTypeType |a#40#2#0|)) (Lit DatatypeTypeType (|#_module.Expression.exprIf| |a#40#0#0| |a#40#1#0| |a#40#2#0|)))
 :pattern ( (|#_module.Expression.exprIf| (Lit DatatypeTypeType |a#40#0#0|) (Lit DatatypeTypeType |a#40#1#0|) (Lit DatatypeTypeType |a#40#2#0|)))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((|a#26#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expression.exprLiteral| |a#26#0#0|)) |##_module.Expression.exprLiteral|)
 :pattern ( (|#_module.Expression.exprLiteral| |a#26#0#0|))
)))
(assert (forall ((|a#30#0#0| T@U) ) (! (= (_module.Expression.lit (|#_module.Expression.exprLiteral| |a#30#0#0|)) |a#30#0#0|)
 :pattern ( (|#_module.Expression.exprLiteral| |a#30#0#0|))
)))
(assert (forall ((|a#32#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expression.exprIdentifier| |a#32#0#0|)) |##_module.Expression.exprIdentifier|)
 :pattern ( (|#_module.Expression.exprIdentifier| |a#32#0#0|))
)))
(assert (forall ((|a#36#0#0| T@U) ) (! (= (_module.Expression.id (|#_module.Expression.exprIdentifier| |a#36#0#0|)) |a#36#0#0|)
 :pattern ( (|#_module.Expression.exprIdentifier| |a#36#0#0|))
)))
(assert (forall ((|a#72#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Expression.exprError| |a#72#0#0|)) |##_module.Expression.exprError|)
 :pattern ( (|#_module.Expression.exprError| |a#72#0#0|))
)))
(assert (forall ((|a#76#0#0| T@U) ) (! (= (_module.Expression.r (|#_module.Expression.exprError| |a#76#0#0|)) |a#76#0#0|)
 :pattern ( (|#_module.Expression.exprError| |a#76#0#0|))
)))
(assert (forall ((|a#94#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.Literal.litNumber| |a#94#0#0|)) |##_module.Literal.litNumber|)
 :pattern ( (|#_module.Literal.litNumber| |a#94#0#0|))
)))
(assert (forall ((|a#98#0#0| Int) ) (! (= (_module.Literal.num (|#_module.Literal.litNumber| |a#98#0#0|)) |a#98#0#0|)
 :pattern ( (|#_module.Literal.litNumber| |a#98#0#0|))
)))
(assert (forall ((|a#99#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Literal.litString| |a#99#0#0|)) |##_module.Literal.litString|)
 :pattern ( (|#_module.Literal.litString| |a#99#0#0|))
)))
(assert (forall ((|a#103#0#0| T@U) ) (! (= (_module.Literal.str (|#_module.Literal.litString| |a#103#0#0|)) |a#103#0#0|)
 :pattern ( (|#_module.Literal.litString| |a#103#0#0|))
)))
(assert (forall ((|a#106#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Literal.litPrimitive| |a#106#0#0|)) |##_module.Literal.litPrimitive|)
 :pattern ( (|#_module.Literal.litPrimitive| |a#106#0#0|))
)))
(assert (forall ((|a#110#0#0| T@U) ) (! (= (_module.Literal.prim (|#_module.Literal.litPrimitive| |a#110#0#0|)) |a#110#0#0|)
 :pattern ( (|#_module.Literal.litPrimitive| |a#110#0#0|))
)))
(assert (forall ((|a#112#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Literal.litArrOfPaths| |a#112#0#0|)) |##_module.Literal.litArrOfPaths|)
 :pattern ( (|#_module.Literal.litArrOfPaths| |a#112#0#0|))
)))
(assert (forall ((|a#116#0#0| T@U) ) (! (= (_module.Literal.paths (|#_module.Literal.litArrOfPaths| |a#116#0#0|)) |a#116#0#0|)
 :pattern ( (|#_module.Literal.litArrOfPaths| |a#116#0#0|))
)))
(assert (forall ((|a#118#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Literal.litArrOfStrings| |a#118#0#0|)) |##_module.Literal.litArrOfStrings|)
 :pattern ( (|#_module.Literal.litArrOfStrings| |a#118#0#0|))
)))
(assert (forall ((|a#122#0#0| T@U) ) (! (= (_module.Literal.strs (|#_module.Literal.litArrOfStrings| |a#122#0#0|)) |a#122#0#0|)
 :pattern ( (|#_module.Literal.litArrOfStrings| |a#122#0#0|))
)))
(assert (forall ((|a#124#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Literal.litArray| |a#124#0#0|)) |##_module.Literal.litArray|)
 :pattern ( (|#_module.Literal.litArray| |a#124#0#0|))
)))
(assert (forall ((|a#128#0#0| T@U) ) (! (= (_module.Literal.arr (|#_module.Literal.litArray| |a#128#0#0|)) |a#128#0#0|)
 :pattern ( (|#_module.Literal.litArray| |a#128#0#0|))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((|a#42#0#0| T@U) (|a#42#1#0| T@U) (|a#42#2#0| T@U) ) (! (< (DtRank |a#42#0#0|) (DtRank (|#_module.Expression.exprIf| |a#42#0#0| |a#42#1#0| |a#42#2#0|)))
 :pattern ( (|#_module.Expression.exprIf| |a#42#0#0| |a#42#1#0| |a#42#2#0|))
)))
(assert (forall ((|a#44#0#0| T@U) (|a#44#1#0| T@U) (|a#44#2#0| T@U) ) (! (< (DtRank |a#44#1#0|) (DtRank (|#_module.Expression.exprIf| |a#44#0#0| |a#44#1#0| |a#44#2#0|)))
 :pattern ( (|#_module.Expression.exprIf| |a#44#0#0| |a#44#1#0| |a#44#2#0|))
)))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) (|a#46#2#0| T@U) ) (! (< (DtRank |a#46#2#0|) (DtRank (|#_module.Expression.exprIf| |a#46#0#0| |a#46#1#0| |a#46#2#0|)))
 :pattern ( (|#_module.Expression.exprIf| |a#46#0#0| |a#46#1#0| |a#46#2#0|))
)))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) ) (! (< (DtRank |a#52#0#0|) (DtRank (|#_module.Expression.exprAnd| |a#52#0#0| |a#52#1#0|)))
 :pattern ( (|#_module.Expression.exprAnd| |a#52#0#0| |a#52#1#0|))
)))
(assert (forall ((|a#54#0#0| T@U) (|a#54#1#0| T@U) ) (! (< (DtRank |a#54#1#0|) (DtRank (|#_module.Expression.exprAnd| |a#54#0#0| |a#54#1#0|)))
 :pattern ( (|#_module.Expression.exprAnd| |a#54#0#0| |a#54#1#0|))
)))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) ) (! (< (DtRank |a#60#0#0|) (DtRank (|#_module.Expression.exprOr| |a#60#0#0| |a#60#1#0|)))
 :pattern ( (|#_module.Expression.exprOr| |a#60#0#0| |a#60#1#0|))
)))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) ) (! (< (DtRank |a#62#1#0|) (DtRank (|#_module.Expression.exprOr| |a#62#0#0| |a#62#1#0|)))
 :pattern ( (|#_module.Expression.exprOr| |a#62#0#0| |a#62#1#0|))
)))
(assert (forall ((|a#68#0#0| T@U) (|a#68#1#0| T@U) ) (! (< (DtRank |a#68#0#0|) (DtRank (|#_module.Expression.exprInvocation| |a#68#0#0| |a#68#1#0|)))
 :pattern ( (|#_module.Expression.exprInvocation| |a#68#0#0| |a#68#1#0|))
)))
(assert (forall ((|a#71#0#0| T@U) (|a#71#1#0| T@U) ) (! (< (|Seq#Rank| |a#71#1#0|) (DtRank (|#_module.Expression.exprInvocation| |a#71#0#0| |a#71#1#0|)))
 :pattern ( (|#_module.Expression.exprInvocation| |a#71#0#0| |a#71#1#0|))
)))
(assert (forall ((|a#96#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.Literal.litNumber| |a#96#0#0|) Tclass._module.Literal) ($Is intType (int_2_U |a#96#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.Literal.litNumber| |a#96#0#0|) Tclass._module.Literal))
)))
(assert (forall ((|a#31#0#0| T@U) ) (! (< (DtRank |a#31#0#0|) (DtRank (|#_module.Expression.exprLiteral| |a#31#0#0|)))
 :pattern ( (|#_module.Expression.exprLiteral| |a#31#0#0|))
)))
(assert (forall ((|a#77#0#0| T@U) ) (! (< (DtRank |a#77#0#0|) (DtRank (|#_module.Expression.exprError| |a#77#0#0|)))
 :pattern ( (|#_module.Expression.exprError| |a#77#0#0|))
)))
(assert (forall ((|a#105#0#0| T@U) ) (! (< (|Seq#Rank| |a#105#0#0|) (DtRank (|#_module.Literal.litString| |a#105#0#0|)))
 :pattern ( (|#_module.Literal.litString| |a#105#0#0|))
)))
(assert (forall ((|a#111#0#0| T@U) ) (! (< (DtRank |a#111#0#0|) (DtRank (|#_module.Literal.litPrimitive| |a#111#0#0|)))
 :pattern ( (|#_module.Literal.litPrimitive| |a#111#0#0|))
)))
(assert (forall ((|a#130#0#0| T@U) ) (! (< (|Seq#Rank| |a#130#0#0|) (DtRank (|#_module.Literal.litArray| |a#130#0#0|)))
 :pattern ( (|#_module.Literal.litArray| |a#130#0#0|))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@2 t1 t2 (MapType0Store t0@@2 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((t0@@3 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 (MapType1Store t0@@3 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 9)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 10))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@35 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (_module.Literal.litNumber_q d@@35) ($IsAlloc DatatypeTypeType d@@35 Tclass._module.Literal $h))) ($IsAlloc intType (int_2_U (_module.Literal.num d@@35)) TInt $h))
 :pattern ( ($IsAlloc intType (int_2_U (_module.Literal.num d@@35)) TInt $h))
)))
(assert (forall ((bx@@9 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@9 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@9)) bx@@9) ($Is SetType ($Unbox SetType bx@@9) (TSet t@@5))))
 :pattern ( ($IsBox bx@@9 (TSet t@@5)))
)))
(assert (forall ((bx@@10 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@10 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@10)) bx@@10) ($Is SeqType ($Unbox SeqType bx@@10) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@10 (TSeq t@@6)))
)))
(assert (forall ((d@@36 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d@@36 Tclass._module.Expression)) ($IsAlloc DatatypeTypeType d@@36 Tclass._module.Expression $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d@@36 Tclass._module.Expression $h@@0))
)))
(assert (forall ((d@@37 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) ($Is DatatypeTypeType d@@37 Tclass._module.Literal)) ($IsAlloc DatatypeTypeType d@@37 Tclass._module.Literal $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType d@@37 Tclass._module.Literal $h@@1))
)))
(assert (forall ((d@@38 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) ($Is DatatypeTypeType d@@38 Tclass._module.Primitive)) ($IsAlloc DatatypeTypeType d@@38 Tclass._module.Primitive $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType d@@38 Tclass._module.Primitive $h@@2))
)))
(assert (forall ((d@@39 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) ($Is DatatypeTypeType d@@39 Tclass._module.Reason)) ($IsAlloc DatatypeTypeType d@@39 Tclass._module.Reason $h@@3))
 :pattern ( ($IsAlloc DatatypeTypeType d@@39 Tclass._module.Reason $h@@3))
)))
(assert (forall ((d@@40 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) ($Is DatatypeTypeType d@@40 Tclass._module.Path)) ($IsAlloc DatatypeTypeType d@@40 Tclass._module.Path $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType d@@40 Tclass._module.Path $h@@4))
)))
(assert (= (Tag Tclass._module.Path) Tagclass._module.Path))
(assert (= (TagFamily Tclass._module.Path) tytagFamily$Path))
(assert (= (Tag Tclass._module.Expression) Tagclass._module.Expression))
(assert (= (TagFamily Tclass._module.Expression) tytagFamily$Expression))
(assert (= (Tag Tclass._module.Primitive) Tagclass._module.Primitive))
(assert (= (TagFamily Tclass._module.Primitive) tytagFamily$Primitive))
(assert (= (Tag Tclass._module.Literal) Tagclass._module.Literal))
(assert (= (TagFamily Tclass._module.Literal) tytagFamily$Literal))
(assert (= (Tag Tclass._module.Reason) Tagclass._module.Reason))
(assert (= (TagFamily Tclass._module.Reason) tytagFamily$Reason))
(assert (= |#_module.Literal.litTrue| (Lit DatatypeTypeType |#_module.Literal.litTrue|)))
(assert (= |#_module.Literal.litFalse| (Lit DatatypeTypeType |#_module.Literal.litFalse|)))
(assert (= |#_module.Literal.litUndefined| (Lit DatatypeTypeType |#_module.Literal.litUndefined|)))
(assert (= |#_module.Literal.litNull| (Lit DatatypeTypeType |#_module.Literal.litNull|)))
(assert (forall ((|a#101#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Literal.litString| |a#101#0#0|) Tclass._module.Literal) ($Is SeqType |a#101#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Literal.litString| |a#101#0#0|) Tclass._module.Literal))
)))
(assert (forall ((d@@41 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_module.Literal.litString_q d@@41) ($IsAlloc DatatypeTypeType d@@41 Tclass._module.Literal $h@@5))) ($IsAlloc SeqType (_module.Literal.str d@@41) (TSeq TChar) $h@@5))
 :pattern ( ($IsAlloc SeqType (_module.Literal.str d@@41) (TSeq TChar) $h@@5))
)))
(assert (forall ((|a#117#0#0| T@U) (d@@42 T@U) ) (!  (=> (|Set#IsMember| |a#117#0#0| ($Box DatatypeTypeType d@@42)) (< (DtRank d@@42) (DtRank (|#_module.Literal.litArrOfPaths| |a#117#0#0|))))
 :pattern ( (|Set#IsMember| |a#117#0#0| ($Box DatatypeTypeType d@@42)) (|#_module.Literal.litArrOfPaths| |a#117#0#0|))
)))
(assert (forall ((|a#123#0#0| T@U) (d@@43 T@U) ) (!  (=> (|Set#IsMember| |a#123#0#0| ($Box DatatypeTypeType d@@43)) (< (DtRank d@@43) (DtRank (|#_module.Literal.litArrOfStrings| |a#123#0#0|))))
 :pattern ( (|Set#IsMember| |a#123#0#0| ($Box DatatypeTypeType d@@43)) (|#_module.Literal.litArrOfStrings| |a#123#0#0|))
)))
(assert (forall ((d@@44 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_module.Expression.exprLiteral_q d@@44) ($IsAlloc DatatypeTypeType d@@44 Tclass._module.Expression $h@@6))) ($IsAlloc DatatypeTypeType (_module.Expression.lit d@@44) Tclass._module.Literal $h@@6))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.lit d@@44) Tclass._module.Literal $h@@6))
)))
(assert (forall ((d@@45 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_module.Expression.exprIdentifier_q d@@45) ($IsAlloc DatatypeTypeType d@@45 Tclass._module.Expression $h@@7))) ($IsAllocBox (_module.Expression.id d@@45) Tclass._module.Identifier $h@@7))
 :pattern ( ($IsAllocBox (_module.Expression.id d@@45) Tclass._module.Identifier $h@@7))
)))
(assert (forall ((d@@46 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_module.Expression.exprIf_q d@@46) ($IsAlloc DatatypeTypeType d@@46 Tclass._module.Expression $h@@8))) ($IsAlloc DatatypeTypeType (_module.Expression.cond d@@46) Tclass._module.Expression $h@@8))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.cond d@@46) Tclass._module.Expression $h@@8))
)))
(assert (forall ((d@@47 T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_module.Expression.exprIf_q d@@47) ($IsAlloc DatatypeTypeType d@@47 Tclass._module.Expression $h@@9))) ($IsAlloc DatatypeTypeType (_module.Expression.ifTrue d@@47) Tclass._module.Expression $h@@9))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.ifTrue d@@47) Tclass._module.Expression $h@@9))
)))
(assert (forall ((d@@48 T@U) ($h@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (_module.Expression.exprIf_q d@@48) ($IsAlloc DatatypeTypeType d@@48 Tclass._module.Expression $h@@10))) ($IsAlloc DatatypeTypeType (_module.Expression.ifFalse d@@48) Tclass._module.Expression $h@@10))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.ifFalse d@@48) Tclass._module.Expression $h@@10))
)))
(assert (forall ((d@@49 T@U) ($h@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (_module.Expression.exprAnd_q d@@49) ($IsAlloc DatatypeTypeType d@@49 Tclass._module.Expression $h@@11))) ($IsAlloc DatatypeTypeType (_module.Expression.conj0 d@@49) Tclass._module.Expression $h@@11))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.conj0 d@@49) Tclass._module.Expression $h@@11))
)))
(assert (forall ((d@@50 T@U) ($h@@12 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (_module.Expression.exprAnd_q d@@50) ($IsAlloc DatatypeTypeType d@@50 Tclass._module.Expression $h@@12))) ($IsAlloc DatatypeTypeType (_module.Expression.conj1 d@@50) Tclass._module.Expression $h@@12))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.conj1 d@@50) Tclass._module.Expression $h@@12))
)))
(assert (forall ((d@@51 T@U) ($h@@13 T@U) ) (!  (=> (and ($IsGoodHeap $h@@13) (and (_module.Expression.exprOr_q d@@51) ($IsAlloc DatatypeTypeType d@@51 Tclass._module.Expression $h@@13))) ($IsAlloc DatatypeTypeType (_module.Expression.disj0 d@@51) Tclass._module.Expression $h@@13))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.disj0 d@@51) Tclass._module.Expression $h@@13))
)))
(assert (forall ((d@@52 T@U) ($h@@14 T@U) ) (!  (=> (and ($IsGoodHeap $h@@14) (and (_module.Expression.exprOr_q d@@52) ($IsAlloc DatatypeTypeType d@@52 Tclass._module.Expression $h@@14))) ($IsAlloc DatatypeTypeType (_module.Expression.disj1 d@@52) Tclass._module.Expression $h@@14))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.disj1 d@@52) Tclass._module.Expression $h@@14))
)))
(assert (forall ((d@@53 T@U) ($h@@15 T@U) ) (!  (=> (and ($IsGoodHeap $h@@15) (and (_module.Expression.exprInvocation_q d@@53) ($IsAlloc DatatypeTypeType d@@53 Tclass._module.Expression $h@@15))) ($IsAlloc DatatypeTypeType (_module.Expression.fun d@@53) Tclass._module.Expression $h@@15))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.fun d@@53) Tclass._module.Expression $h@@15))
)))
(assert (forall ((d@@54 T@U) ($h@@16 T@U) ) (!  (=> (and ($IsGoodHeap $h@@16) (and (_module.Expression.exprError_q d@@54) ($IsAlloc DatatypeTypeType d@@54 Tclass._module.Expression $h@@16))) ($IsAlloc DatatypeTypeType (_module.Expression.r d@@54) Tclass._module.Reason $h@@16))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Expression.r d@@54) Tclass._module.Reason $h@@16))
)))
(assert (forall ((d@@55 T@U) ($h@@17 T@U) ) (!  (=> (and ($IsGoodHeap $h@@17) (and (_module.Literal.litPrimitive_q d@@55) ($IsAlloc DatatypeTypeType d@@55 Tclass._module.Literal $h@@17))) ($IsAlloc DatatypeTypeType (_module.Literal.prim d@@55) Tclass._module.Primitive $h@@17))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Literal.prim d@@55) Tclass._module.Primitive $h@@17))
)))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (! (= (|#_module.Expression.exprAnd| (Lit DatatypeTypeType |a#50#0#0|) (Lit DatatypeTypeType |a#50#1#0|)) (Lit DatatypeTypeType (|#_module.Expression.exprAnd| |a#50#0#0| |a#50#1#0|)))
 :pattern ( (|#_module.Expression.exprAnd| (Lit DatatypeTypeType |a#50#0#0|) (Lit DatatypeTypeType |a#50#1#0|)))
)))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) ) (! (= (|#_module.Expression.exprOr| (Lit DatatypeTypeType |a#58#0#0|) (Lit DatatypeTypeType |a#58#1#0|)) (Lit DatatypeTypeType (|#_module.Expression.exprOr| |a#58#0#0| |a#58#1#0|)))
 :pattern ( (|#_module.Expression.exprOr| (Lit DatatypeTypeType |a#58#0#0|) (Lit DatatypeTypeType |a#58#1#0|)))
)))
(assert (forall ((|a#66#0#0| T@U) (|a#66#1#0| T@U) ) (! (= (|#_module.Expression.exprInvocation| (Lit DatatypeTypeType |a#66#0#0|) (Lit SeqType |a#66#1#0|)) (Lit DatatypeTypeType (|#_module.Expression.exprInvocation| |a#66#0#0| |a#66#1#0|)))
 :pattern ( (|#_module.Expression.exprInvocation| (Lit DatatypeTypeType |a#66#0#0|) (Lit SeqType |a#66#1#0|)))
)))
(assert (forall ((|a#29#0#0| T@U) ) (! (= (|#_module.Expression.exprLiteral| (Lit DatatypeTypeType |a#29#0#0|)) (Lit DatatypeTypeType (|#_module.Expression.exprLiteral| |a#29#0#0|)))
 :pattern ( (|#_module.Expression.exprLiteral| (Lit DatatypeTypeType |a#29#0#0|)))
)))
(assert (forall ((|a#35#0#0| T@U) ) (! (= (|#_module.Expression.exprIdentifier| (Lit BoxType |a#35#0#0|)) (Lit DatatypeTypeType (|#_module.Expression.exprIdentifier| |a#35#0#0|)))
 :pattern ( (|#_module.Expression.exprIdentifier| (Lit BoxType |a#35#0#0|)))
)))
(assert (forall ((|a#75#0#0| T@U) ) (! (= (|#_module.Expression.exprError| (Lit DatatypeTypeType |a#75#0#0|)) (Lit DatatypeTypeType (|#_module.Expression.exprError| |a#75#0#0|)))
 :pattern ( (|#_module.Expression.exprError| (Lit DatatypeTypeType |a#75#0#0|)))
)))
(assert (forall ((|a#102#0#0| T@U) ) (! (= (|#_module.Literal.litString| (Lit SeqType |a#102#0#0|)) (Lit DatatypeTypeType (|#_module.Literal.litString| |a#102#0#0|)))
 :pattern ( (|#_module.Literal.litString| (Lit SeqType |a#102#0#0|)))
)))
(assert (forall ((|a#109#0#0| T@U) ) (! (= (|#_module.Literal.litPrimitive| (Lit DatatypeTypeType |a#109#0#0|)) (Lit DatatypeTypeType (|#_module.Literal.litPrimitive| |a#109#0#0|)))
 :pattern ( (|#_module.Literal.litPrimitive| (Lit DatatypeTypeType |a#109#0#0|)))
)))
(assert (forall ((|a#115#0#0| T@U) ) (! (= (|#_module.Literal.litArrOfPaths| (Lit SetType |a#115#0#0|)) (Lit DatatypeTypeType (|#_module.Literal.litArrOfPaths| |a#115#0#0|)))
 :pattern ( (|#_module.Literal.litArrOfPaths| (Lit SetType |a#115#0#0|)))
)))
(assert (forall ((|a#121#0#0| T@U) ) (! (= (|#_module.Literal.litArrOfStrings| (Lit SetType |a#121#0#0|)) (Lit DatatypeTypeType (|#_module.Literal.litArrOfStrings| |a#121#0#0|)))
 :pattern ( (|#_module.Literal.litArrOfStrings| (Lit SetType |a#121#0#0|)))
)))
(assert (forall ((|a#127#0#0| T@U) ) (! (= (|#_module.Literal.litArray| (Lit SeqType |a#127#0#0|)) (Lit DatatypeTypeType (|#_module.Literal.litArray| |a#127#0#0|)))
 :pattern ( (|#_module.Literal.litArray| (Lit SeqType |a#127#0#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((d@@56 T@U) ($h@@18 T@U) ) (!  (=> (and ($IsGoodHeap $h@@18) (and (_module.Literal.litArrOfStrings_q d@@56) ($IsAlloc DatatypeTypeType d@@56 Tclass._module.Literal $h@@18))) ($IsAlloc SetType (_module.Literal.strs d@@56) (TSet (TSeq TChar)) $h@@18))
 :pattern ( ($IsAlloc SetType (_module.Literal.strs d@@56) (TSet (TSeq TChar)) $h@@18))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((|a#120#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Literal.litArrOfStrings| |a#120#0#0|) Tclass._module.Literal) ($Is SetType |a#120#0#0| (TSet (TSeq TChar))))
 :pattern ( ($Is DatatypeTypeType (|#_module.Literal.litArrOfStrings| |a#120#0#0|) Tclass._module.Literal))
)))
(assert (forall ((d@@57 T@U) ($h@@19 T@U) ) (!  (=> (and ($IsGoodHeap $h@@19) (and (_module.Expression.exprInvocation_q d@@57) ($IsAlloc DatatypeTypeType d@@57 Tclass._module.Expression $h@@19))) ($IsAlloc SeqType (_module.Expression.args d@@57) (TSeq Tclass._module.Expression) $h@@19))
 :pattern ( ($IsAlloc SeqType (_module.Expression.args d@@57) (TSeq Tclass._module.Expression) $h@@19))
)))
(assert (forall ((d@@58 T@U) ($h@@20 T@U) ) (!  (=> (and ($IsGoodHeap $h@@20) (and (_module.Literal.litArrOfPaths_q d@@58) ($IsAlloc DatatypeTypeType d@@58 Tclass._module.Literal $h@@20))) ($IsAlloc SetType (_module.Literal.paths d@@58) (TSet Tclass._module.Path) $h@@20))
 :pattern ( ($IsAlloc SetType (_module.Literal.paths d@@58) (TSet Tclass._module.Path) $h@@20))
)))
(assert (forall ((d@@59 T@U) ($h@@21 T@U) ) (!  (=> (and ($IsGoodHeap $h@@21) (and (_module.Literal.litArray_q d@@59) ($IsAlloc DatatypeTypeType d@@59 Tclass._module.Literal $h@@21))) ($IsAlloc SeqType (_module.Literal.arr d@@59) (TSeq Tclass._module.Expression) $h@@21))
 :pattern ( ($IsAlloc SeqType (_module.Literal.arr d@@59) (TSeq Tclass._module.Expression) $h@@21))
)))
(assert (forall ((h@@3 T@U) (v@@5 T@U) ) (! ($IsAlloc intType v@@5 TInt h@@3)
 :pattern ( ($IsAlloc intType v@@5 TInt h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@6 T@U) ) (! ($IsAlloc boolType v@@6 TBool h@@4)
 :pattern ( ($IsAlloc boolType v@@6 TBool h@@4))
)))
(assert (forall ((h@@5 T@U) (v@@7 T@U) ) (! ($IsAlloc charType v@@7 TChar h@@5)
 :pattern ( ($IsAlloc charType v@@7 TChar h@@5))
)))
(assert (forall ((v@@8 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@8 (TSeq t0@@4)) (forall ((i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| v@@8))) ($IsBox (|Seq#Index| v@@8 i@@3) t0@@4))
 :pattern ( (|Seq#Index| v@@8 i@@3))
)))
 :pattern ( ($Is SeqType v@@8 (TSeq t0@@4)))
)))
(assert (forall ((s@@1 T@U) (i@@4 Int) ) (!  (=> (and (<= 0 i@@4) (< i@@4 (|Seq#Length| s@@1))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@4))) (|Seq#Rank| s@@1)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@4))))
)))
(assert (forall ((v@@9 T@U) ) (! ($Is intType v@@9 TInt)
 :pattern ( ($Is intType v@@9 TInt))
)))
(assert (forall ((v@@10 T@U) ) (! ($Is boolType v@@10 TBool)
 :pattern ( ($Is boolType v@@10 TBool))
)))
(assert (forall ((v@@11 T@U) ) (! ($Is charType v@@11 TChar)
 :pattern ( ($Is charType v@@11 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |exts#0@@1| () T@U)
(declare-fun |e#2@0| () T@U)
(declare-fun |cmd#0@@2| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |deps#0@@2| () T@U)
(declare-fun |paths#0@@1| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 16) (let ((anon6_correct true))
(let ((anon10_Else_correct  (=> (and (not (|Set#IsMember| (_module.Literal.strs (_module.Expression.lit |exts#0@@1|)) ($Box SeqType |e#2@0|))) (= (ControlFlow 0 7) 2)) anon6_correct)))
(let ((anon10_Then_correct  (=> (|Set#IsMember| (_module.Literal.strs (_module.Expression.lit |exts#0@@1|)) ($Box SeqType |e#2@0|)) (=> (and (and ($IsAlloc DatatypeTypeType |cmd#0@@2| Tclass._module.Expression $Heap) ($IsAlloc DatatypeTypeType |deps#0@@2| Tclass._module.Expression $Heap)) (and ($IsAlloc SeqType |e#2@0| (TSeq TChar) $Heap) (|_module.__default.Loc#canCall| |cmd#0@@2| |deps#0@@2| |e#2@0|))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (_module.Expression.exprLiteral_q |paths#0@@1|)) (=> (_module.Expression.exprLiteral_q |paths#0@@1|) (and (=> (= (ControlFlow 0 4) (- 0 5)) (_module.Literal.litArrOfPaths_q (_module.Expression.lit |paths#0@@1|))) (=> (_module.Literal.litArrOfPaths_q (_module.Expression.lit |paths#0@@1|)) (=> (= (ControlFlow 0 4) 2) anon6_correct)))))))))
(let ((anon9_Then_correct  (=> (and ($Is SeqType |e#2@0| (TSeq TChar)) ($IsAlloc SeqType |e#2@0| (TSeq TChar) $Heap)) (and (=> (= (ControlFlow 0 8) (- 0 10)) (_module.Expression.exprLiteral_q |exts#0@@1|)) (=> (_module.Expression.exprLiteral_q |exts#0@@1|) (and (=> (= (ControlFlow 0 8) (- 0 9)) (_module.Literal.litArrOfStrings_q (_module.Expression.lit |exts#0@@1|))) (=> (_module.Literal.litArrOfStrings_q (_module.Expression.lit |exts#0@@1|)) (and (=> (= (ControlFlow 0 8) 4) anon10_Then_correct) (=> (= (ControlFlow 0 8) 7) anon10_Else_correct)))))))))
(let ((anon9_Else_correct  (=> (and (not (and ($Is SeqType |e#2@0| (TSeq TChar)) ($IsAlloc SeqType |e#2@0| (TSeq TChar) $Heap))) (= (ControlFlow 0 3) 2)) anon6_correct)))
(let ((anon8_Then_correct true))
(let ((anon0_correct  (=> (and (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (_module.Expression.exprLiteral_q |cmd#0@@2|)) (and (=> (= (ControlFlow 0 11) (- 0 15)) (_module.Expression.exprLiteral_q |cmd#0@@2|)) (=> (_module.Expression.exprLiteral_q |cmd#0@@2|) (=> (and (_module.Literal.litString_q (_module.Expression.lit |cmd#0@@2|)) (_module.Expression.exprLiteral_q |deps#0@@2|)) (and (=> (= (ControlFlow 0 11) (- 0 14)) (_module.Expression.exprLiteral_q |deps#0@@2|)) (=> (_module.Expression.exprLiteral_q |deps#0@@2|) (=> (and (_module.Literal.litArrOfPaths_q (_module.Expression.lit |deps#0@@2|)) (_module.Expression.exprLiteral_q |exts#0@@1|)) (and (=> (= (ControlFlow 0 11) (- 0 13)) (_module.Expression.exprLiteral_q |exts#0@@1|)) (=> (_module.Expression.exprLiteral_q |exts#0@@1|) (=> (and (_module.Literal.litArrOfStrings_q (_module.Expression.lit |exts#0@@1|)) (_module.Expression.exprLiteral_q |paths#0@@1|)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (_module.Expression.exprLiteral_q |paths#0@@1|)) (=> (_module.Expression.exprLiteral_q |paths#0@@1|) (=> (_module.Literal.litArrOfPaths_q (_module.Expression.lit |paths#0@@1|)) (and (and (=> (= (ControlFlow 0 11) 1) anon8_Then_correct) (=> (= (ControlFlow 0 11) 8) anon9_Then_correct)) (=> (= (ControlFlow 0 11) 3) anon9_Else_correct)))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is DatatypeTypeType |cmd#0@@2| Tclass._module.Expression) ($Is DatatypeTypeType |deps#0@@2| Tclass._module.Expression))) (and (and ($Is DatatypeTypeType |exts#0@@1| Tclass._module.Expression) ($Is DatatypeTypeType |paths#0@@1| Tclass._module.Expression)) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 16) 11)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
