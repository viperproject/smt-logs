(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U) Int)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@30 (T@U) T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@40 (T@U) Bool)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 () T@T)
(declare-fun $generated@@56 () T@T)
(declare-fun $generated@@57 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@58 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 (T@T T@T) T@T)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@T) T@T)
(declare-fun $generated@@64 (T@T) T@T)
(declare-fun $generated@@113 (T@U) T@U)
(declare-fun $generated@@114 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@6 $generated@@26) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@29 T@U) ) (!  (=> (or ($generated@@24 $generated@@29) (and (< 1 $generated@@22) ($generated@@25 $generated@@26 $generated@@29 $generated@@27))) (= ($generated@@23 $generated@@29) (ite ($generated@@28 $generated@@29) 1 3)))
 :pattern ( ($generated@@23 $generated@@29))
))))
(assert (= ($generated@@30 $generated@@31) $generated@@2))
(assert (= ($generated@@30 $generated@@32) $generated@@3))
(assert ($generated@@25 $generated@@26 $generated@@31 $generated@@27))
(assert ($generated@@25 $generated@@26 $generated@@32 $generated@@27))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@34 T@U) ) (!  (=> (or ($generated@@24 ($generated@@33 $generated@@26 $generated@@34)) (and (< 1 $generated@@22) ($generated@@25 $generated@@26 $generated@@34 $generated@@27))) (= ($generated@@23 ($generated@@33 $generated@@26 $generated@@34)) (ite ($generated@@28 ($generated@@33 $generated@@26 $generated@@34)) 1 3)))
 :weight 3
 :pattern ( ($generated@@23 ($generated@@33 $generated@@26 $generated@@34)))
))))
(assert (forall (($generated@@36 Int) ) (! (= ($generated@@35 $generated@@36) $generated@@36)
 :pattern ( ($generated@@35 $generated@@36))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@33 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@33 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@28 $generated@@39) (= ($generated@@30 $generated@@39) $generated@@2))
 :pattern ( ($generated@@28 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@40 $generated@@41) (= ($generated@@30 $generated@@41) $generated@@3))
 :pattern ( ($generated@@40 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 ($generated@@42 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@42 $generated@@45 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@28 $generated@@46) (= $generated@@46 $generated@@31))
 :pattern ( ($generated@@28 $generated@@46))
)))
(assert (forall (($generated@@47 T@U) ) (!  (=> ($generated@@40 $generated@@47) (= $generated@@47 $generated@@32))
 :pattern ( ($generated@@40 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (! (= ($generated@@25 $generated@@8 $generated@@49 $generated@@48) (<= ($generated@@35 0) ($generated@@13 $generated@@49)))
 :pattern ( ($generated@@25 $generated@@8 $generated@@49 $generated@@48))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@50 T@U) ) (!  (=> (or ($generated@@24 $generated@@50) (and (< 1 $generated@@22) ($generated@@25 $generated@@26 $generated@@50 $generated@@27))) (<= ($generated@@35 0) ($generated@@23 $generated@@50)))
 :pattern ( ($generated@@23 $generated@@50))
))))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@51 $generated@@27) (or ($generated@@28 $generated@@51) ($generated@@40 $generated@@51)))
 :pattern ( ($generated@@40 $generated@@51) ($generated@@25 $generated@@26 $generated@@51 $generated@@27))
 :pattern ( ($generated@@28 $generated@@51) ($generated@@25 $generated@@26 $generated@@51 $generated@@27))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@42 $generated@@53 ($generated@@43 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@43 $generated@@53 $generated@@52))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@54 $generated@@65 $generated@@66 $generated@@67 ($generated@@61 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@70 $generated@@71) $generated@@68)
 :weight 0
)) (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@77 $generated@@79) (= ($generated@@54 $generated@@72 $generated@@73 $generated@@74 ($generated@@61 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@54 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@54 $generated@@81 $generated@@82 $generated@@83 ($generated@@61 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@54 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)))) (= ($generated@@6 $generated@@55) 4)) (= ($generated@@6 $generated@@56) 5)) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@58 $generated@@90 $generated@@91 ($generated@@62 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@92) $generated@@94) $generated@@92)
 :weight 0
))) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@99 $generated@@100) (= ($generated@@58 $generated@@95 $generated@@96 ($generated@@62 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@100) ($generated@@58 $generated@@95 $generated@@96 $generated@@98 $generated@@100)))
 :weight 0
))) (= ($generated@@6 $generated@@59) 6)) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (= ($generated@@6 ($generated@@60 $generated@@101 $generated@@102)) 7))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@63 ($generated@@60 $generated@@103 $generated@@104)) $generated@@103)
 :pattern ( ($generated@@60 $generated@@103 $generated@@104))
))) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (! (= ($generated@@64 ($generated@@60 $generated@@105 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@60 $generated@@105 $generated@@106))
))))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 Bool) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@11 ($generated@@54 $generated@@55 $generated@@56 $generated@@7 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))  (=> (and (or (not (= $generated@@111 $generated@@107)) (not true)) ($generated@@11 ($generated@@42 $generated@@7 ($generated@@58 $generated@@56 $generated@@59 ($generated@@58 $generated@@55 ($generated@@60 $generated@@56 $generated@@59) $generated@@108 $generated@@111) $generated@@109)))) $generated@@110))
 :pattern ( ($generated@@54 $generated@@55 $generated@@56 $generated@@7 ($generated@@57 $generated@@107 $generated@@108 $generated@@109 $generated@@110) $generated@@111 $generated@@112))
)))
(assert (= ($generated@@113 $generated@@48) $generated@@0))
(assert (= ($generated@@114 $generated@@48) $generated@@4))
(assert (= ($generated@@113 $generated@@27) $generated@@1))
(assert (= ($generated@@114 $generated@@27) $generated@@5))
(assert (= $generated@@31 ($generated@@33 $generated@@26 $generated@@31)))
(assert (= $generated@@32 ($generated@@33 $generated@@26 $generated@@32)))
(assert (forall (($generated@@115 Int) ) (! (= ($generated@@43 $generated@@8 ($generated@@12 ($generated@@35 $generated@@115))) ($generated@@33 $generated@@59 ($generated@@43 $generated@@8 ($generated@@12 $generated@@115))))
 :pattern ( ($generated@@43 $generated@@8 ($generated@@12 ($generated@@35 $generated@@115))))
)))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@T) ) (! (= ($generated@@43 $generated@@117 ($generated@@33 $generated@@117 $generated@@116)) ($generated@@33 $generated@@59 ($generated@@43 $generated@@117 $generated@@116)))
 :pattern ( ($generated@@43 $generated@@117 ($generated@@33 $generated@@117 $generated@@116)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@124 true))
(let (($generated@@125  (=> (and (= $generated@@118 $generated@@32) (= (ControlFlow 0 5) (- 0 4))) ($generated@@25 $generated@@8 ($generated@@12 ($generated@@35 3)) $generated@@48))))
(let (($generated@@126  (=> (or (not (= $generated@@118 $generated@@31)) (not true)) (and (=> (= (ControlFlow 0 7) 5) $generated@@125) (=> (= (ControlFlow 0 7) 6) $generated@@124)))))
(let (($generated@@127  (=> (and (= $generated@@118 $generated@@31) (= (ControlFlow 0 3) (- 0 2))) ($generated@@25 $generated@@8 ($generated@@12 ($generated@@35 1)) $generated@@48))))
(let (($generated@@128 true))
(let (($generated@@129  (=> (= $generated@@119 ($generated@@57 $generated@@120 $generated@@121 $generated false)) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@128) (=> (= (ControlFlow 0 8) 3) $generated@@127)) (=> (= (ControlFlow 0 8) 7) $generated@@126)))))
(let (($generated@@130  (=> (and (and (and ($generated@@122 $generated@@121) ($generated@@123 $generated@@121)) ($generated@@25 $generated@@26 $generated@@118 $generated@@27)) (and (= 1 $generated@@22) (= (ControlFlow 0 9) 8))) $generated@@129)))
$generated@@130))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
