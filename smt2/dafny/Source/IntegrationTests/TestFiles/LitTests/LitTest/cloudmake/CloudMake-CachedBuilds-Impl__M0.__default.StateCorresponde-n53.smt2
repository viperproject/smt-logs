(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun M0.__default.Loc (T@U T@U T@U) T@U)
(declare-fun |M0.__default.Loc#canCall| (T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Tclass.M0.Path () T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun M0.__default.PickOne (T@U T@U) T@U)
(declare-fun |M0.__default.PickOne#canCall| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |$let#0_x| (T@U T@U) T@U)
(declare-fun |$let#0$canCall| (T@U T@U) Bool)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass.M0.State () T@U)
(declare-fun M0.__default.Oracle (T@U T@U) T@U)
(declare-fun |M0.__default.Oracle#canCall| (T@U T@U) Bool)
(declare-fun Tclass.M0.Artifact () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun M0.__default.Combine (T@U Bool T@U Bool) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |M0.__default.Combine#canCall| (T@U Bool) Bool)
(declare-fun BoxType () T@T)
(declare-fun |M0.__default.Union#canCall| (T@U T@U Bool) Bool)
(declare-fun reveal_M0._default.Combine () Bool)
(declare-fun M0.__default.Union (T@U T@U Bool) T@U)
(declare-fun M0.__default.ConsistentCache (T@U) Bool)
(declare-fun |M0.__default.ConsistentCache#canCall| (T@U) Bool)
(declare-fun |M0.__default.Hash#canCall| (T@U) Bool)
(declare-fun |M0.__default.DomC#canCall| (T@U) Bool)
(declare-fun M0.__default.DomC (T@U) T@U)
(declare-fun M0.__default.Hash (T@U) T@U)
(declare-fun |M0.__default.DomSt#canCall| (T@U) Bool)
(declare-fun M0.__default.DomSt (T@U) T@U)
(declare-fun M0.__default.StateCorrespondence (Bool T@U T@U) Bool)
(declare-fun |M0.__default.StateCorrespondence#canCall| (T@U T@U) Bool)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun M0.__default.GetSt (T@U T@U) T@U)
(declare-fun |M0.__default.GetSt#canCall| (T@U T@U) Bool)
(declare-fun M0.__default.Extends (Bool T@U T@U) Bool)
(declare-fun |M0.__default.Extends#canCall| (T@U T@U) Bool)
(declare-fun M0.__default.ValidState (T@U) Bool)
(declare-fun |M0.__default.ValidState#canCall| (T@U) Bool)
(declare-fun M0.__default.WellFounded (T@U) Bool)
(declare-fun |M0.__default.WellFounded#canCall| (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun M0.__default.Compatible (T@U) Bool)
(declare-fun |M0.__default.Compatible#canCall| (T@U) Bool)
(declare-fun Tclass.M0.HashValue () T@U)
(declare-fun charType () T@T)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TagBool TagChar TagSet TagSeq alloc)
)
(assert  (and (= (Ctor SeqType) 3) (= (Ctor SetType) 4)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|cmd#0| T@U) (|deps#0| T@U) (|exp#0| T@U) ) (!  (=> (or (|M0.__default.Loc#canCall| |cmd#0| |deps#0| |exp#0|) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |cmd#0| (TSeq TChar)) ($Is SetType |deps#0| (TSet Tclass.M0.Path))) ($Is SeqType |exp#0| (TSeq TChar))))) ($IsBox (M0.__default.Loc |cmd#0| |deps#0| |exp#0|) Tclass.M0.Path))
 :pattern ( (M0.__default.Loc |cmd#0| |deps#0| |exp#0|))
))))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (M0._default.PickOne$T T@U) (|s#0| T@U) ) (!  (=> (and (or (|M0.__default.PickOne#canCall| M0._default.PickOne$T |s#0|) (and (< 0 $FunctionContextHeight) (and (and ($Is SetType |s#0| (TSet M0._default.PickOne$T)) ($IsAlloc SetType |s#0| (TSet M0._default.PickOne$T) $Heap)) (not (|Set#Equal| |s#0| |Set#Empty|))))) ($IsGoodHeap $Heap)) ($IsAllocBox (M0.__default.PickOne M0._default.PickOne$T |s#0|) M0._default.PickOne$T $Heap))
 :pattern ( ($IsAllocBox (M0.__default.PickOne M0._default.PickOne$T |s#0|) M0._default.PickOne$T $Heap))
))))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (forall ((M0._default.PickOne$T@@0 T@U) (s T@U) ) (!  (=> (|$let#0$canCall| M0._default.PickOne$T@@0 s) (|Set#IsMember| s (|$let#0_x| M0._default.PickOne$T@@0 s)))
 :pattern ( (|$let#0_x| M0._default.PickOne$T@@0 s))
)))
(assert ($AlwaysAllocated Tclass.M0.State))
(assert ($AlwaysAllocated Tclass.M0.Path))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|p#0| T@U) (|st#0| T@U) ) (!  (=> (or (|M0.__default.Oracle#canCall| |p#0| |st#0|) (and (< 0 $FunctionContextHeight) (and ($IsBox |p#0| Tclass.M0.Path) ($IsBox |st#0| Tclass.M0.State)))) ($IsBox (M0.__default.Oracle |p#0| |st#0|) Tclass.M0.Artifact))
 :pattern ( (M0.__default.Oracle |p#0| |st#0|))
))))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor BoxType) 5))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly T@U) (|sts#0| T@U) (|useCache#0| T@U) ) (!  (=> (or (|M0.__default.Combine#canCall| (Lit SetType |sts#0|) (U_2_bool (Lit boolType |useCache#0|))) (and (< 3 $FunctionContextHeight) (and ($Is SetType |sts#0| (TSet Tclass.M0.State)) (not (|Set#Equal| |sts#0| |Set#Empty|))))) (and (and (|M0.__default.PickOne#canCall| Tclass.M0.State (Lit SetType |sts#0|)) (let ((|st#1| (Lit BoxType (M0.__default.PickOne Tclass.M0.State (Lit SetType |sts#0|)))))
 (=> (not (|Set#Equal| |sts#0| (|Set#UnionOne| |Set#Empty| |st#1|))) (and (|M0.__default.Combine#canCall| (|Set#Difference| |sts#0| (|Set#UnionOne| |Set#Empty| |st#1|)) (U_2_bool (Lit boolType |useCache#0|))) (|M0.__default.Union#canCall| (M0.__default.Combine ($LS $ly) reveal_M0._default.Combine (|Set#Difference| |sts#0| (|Set#UnionOne| |Set#Empty| |st#1|)) (U_2_bool (Lit boolType |useCache#0|))) |st#1| (U_2_bool (Lit boolType |useCache#0|))))))) (= (M0.__default.Combine ($LS $ly) true (Lit SetType |sts#0|) (U_2_bool (Lit boolType |useCache#0|))) (let ((|st#1@@0| (Lit BoxType (M0.__default.PickOne Tclass.M0.State (Lit SetType |sts#0|)))))
(ite (|Set#Equal| |sts#0| (|Set#UnionOne| |Set#Empty| |st#1@@0|)) |st#1@@0| (M0.__default.Union (M0.__default.Combine ($LS $ly) reveal_M0._default.Combine (|Set#Difference| |sts#0| (|Set#UnionOne| |Set#Empty| |st#1@@0|)) (U_2_bool (Lit boolType |useCache#0|))) |st#1@@0| (U_2_bool (Lit boolType |useCache#0|))))))))
 :weight 3
 :pattern ( (M0.__default.Combine ($LS $ly) true (Lit SetType |sts#0|) (U_2_bool (Lit boolType |useCache#0|))))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|stC#0| T@U) ) (!  (=> (or (|M0.__default.ConsistentCache#canCall| |stC#0|) (and (< 1 $FunctionContextHeight) ($IsBox |stC#0| Tclass.M0.State))) (and (forall ((|cmd#0@@0| T@U) (|deps#0@@0| T@U) (|e#0| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#0@@0| (TSeq TChar)) ($Is SetType |deps#0@@0| (TSet Tclass.M0.Path))) ($Is SeqType |e#0| (TSeq TChar))) (and (and (and (|M0.__default.Loc#canCall| |cmd#0@@0| |deps#0@@0| |e#0|) (|M0.__default.Hash#canCall| (M0.__default.Loc |cmd#0@@0| |deps#0@@0| |e#0|))) (|M0.__default.DomC#canCall| |stC#0|)) (=> (|Set#IsMember| (M0.__default.DomC |stC#0|) (M0.__default.Hash (M0.__default.Loc |cmd#0@@0| |deps#0@@0| |e#0|))) (and (|M0.__default.Loc#canCall| |cmd#0@@0| |deps#0@@0| |e#0|) (|M0.__default.DomSt#canCall| |stC#0|)))))
 :pattern ( (M0.__default.Loc |cmd#0@@0| |deps#0@@0| |e#0|))
)) (= (M0.__default.ConsistentCache |stC#0|) (forall ((|cmd#0@@1| T@U) (|deps#0@@1| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#0@@1| (TSeq TChar)) ($Is SetType |deps#0@@1| (TSet Tclass.M0.Path))) ($Is SeqType |e#0@@0| (TSeq TChar))) (=> (|Set#IsMember| (M0.__default.DomC |stC#0|) (M0.__default.Hash (M0.__default.Loc |cmd#0@@1| |deps#0@@1| |e#0@@0|))) (|Set#IsMember| (M0.__default.DomSt |stC#0|) (M0.__default.Loc |cmd#0@@1| |deps#0@@1| |e#0@@0|))))
 :pattern ( (M0.__default.Loc |cmd#0@@1| |deps#0@@1| |e#0@@0|))
)))))
 :pattern ( (M0.__default.ConsistentCache |stC#0|))
))))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|st#0@@0| T@U) (|stC#0@@0| T@U) ) (!  (=> (or (|M0.__default.StateCorrespondence#canCall| |st#0@@0| |stC#0@@0|) (and (< 2 $FunctionContextHeight) (and ($IsBox |st#0@@0| Tclass.M0.State) ($IsBox |stC#0@@0| Tclass.M0.State)))) (and (and (and (|M0.__default.DomSt#canCall| |st#0@@0|) (|M0.__default.DomSt#canCall| |stC#0@@0|)) (=> (|Set#Subset| (M0.__default.DomSt |st#0@@0|) (M0.__default.DomSt |stC#0@@0|)) (and (forall ((|p#0@@0| T@U) ) (!  (=> ($IsBox |p#0@@0| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| |st#0@@0|) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#0@@0|) (and (|M0.__default.GetSt#canCall| |p#0@@0| |stC#0@@0|) (|M0.__default.GetSt#canCall| |p#0@@0| |st#0@@0|)))))
 :pattern ( (M0.__default.GetSt |p#0@@0| |st#0@@0|))
 :pattern ( (M0.__default.GetSt |p#0@@0| |stC#0@@0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#0@@0|))
)) (=> (forall ((|p#0@@1| T@U) ) (!  (=> ($IsBox |p#0@@1| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#0@@1|) (= (M0.__default.GetSt |p#0@@1| |stC#0@@0|) (M0.__default.GetSt |p#0@@1| |st#0@@0|))))
 :pattern ( (M0.__default.GetSt |p#0@@1| |st#0@@0|))
 :pattern ( (M0.__default.GetSt |p#0@@1| |stC#0@@0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#0@@1|))
)) (forall ((|p#1| T@U) ) (!  (=> ($IsBox |p#1| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| |st#0@@0|) (=> (not (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#1|)) (and (|M0.__default.DomSt#canCall| |stC#0@@0|) (=> (|Set#IsMember| (M0.__default.DomSt |stC#0@@0|) |p#1|) (and (|M0.__default.GetSt#canCall| |p#1| |stC#0@@0|) (|M0.__default.Oracle#canCall| |p#1| |st#0@@0|)))))))
 :pattern ( (M0.__default.Oracle |p#1| |st#0@@0|))
 :pattern ( (M0.__default.GetSt |p#1| |stC#0@@0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |stC#0@@0|) |p#1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#1|))
)))))) (= (M0.__default.StateCorrespondence true |st#0@@0| |stC#0@@0|)  (and (and (|Set#Subset| (M0.__default.DomSt |st#0@@0|) (M0.__default.DomSt |stC#0@@0|)) (forall ((|p#0@@2| T@U) ) (!  (=> ($IsBox |p#0@@2| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#0@@2|) (= (M0.__default.GetSt |p#0@@2| |stC#0@@0|) (M0.__default.GetSt |p#0@@2| |st#0@@0|))))
 :pattern ( (M0.__default.GetSt |p#0@@2| |st#0@@0|))
 :pattern ( (M0.__default.GetSt |p#0@@2| |stC#0@@0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#0@@2|))
))) (forall ((|p#1@@0| T@U) ) (!  (=> ($IsBox |p#1@@0| Tclass.M0.Path) (=> (and (not (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#1@@0|)) (|Set#IsMember| (M0.__default.DomSt |stC#0@@0|) |p#1@@0|)) (= (M0.__default.GetSt |p#1@@0| |stC#0@@0|) (M0.__default.Oracle |p#1@@0| |st#0@@0|))))
 :pattern ( (M0.__default.Oracle |p#1@@0| |st#0@@0|))
 :pattern ( (M0.__default.GetSt |p#1@@0| |stC#0@@0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |stC#0@@0|) |p#1@@0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#1@@0|))
))))))
 :pattern ( (M0.__default.StateCorrespondence true |st#0@@0| |stC#0@@0|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|st#0@@1| T@U) (|st'#0| T@U) ) (!  (=> (or (|M0.__default.Extends#canCall| |st#0@@1| |st'#0|) (and (< 2 $FunctionContextHeight) (and ($IsBox |st#0@@1| Tclass.M0.State) ($IsBox |st'#0| Tclass.M0.State)))) (and (and (and (|M0.__default.DomSt#canCall| |st#0@@1|) (|M0.__default.DomSt#canCall| |st'#0|)) (=> (|Set#Subset| (M0.__default.DomSt |st#0@@1|) (M0.__default.DomSt |st'#0|)) (and (forall ((|p#0@@3| T@U) ) (!  (=> ($IsBox |p#0@@3| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| |st#0@@1|) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#0@@3|) (and (|M0.__default.GetSt#canCall| |p#0@@3| |st'#0|) (|M0.__default.GetSt#canCall| |p#0@@3| |st#0@@1|)))))
 :pattern ( (M0.__default.GetSt |p#0@@3| |st#0@@1|))
 :pattern ( (M0.__default.GetSt |p#0@@3| |st'#0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#0@@3|))
)) (=> (forall ((|p#0@@4| T@U) ) (!  (=> ($IsBox |p#0@@4| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#0@@4|) (= (M0.__default.GetSt |p#0@@4| |st'#0|) (M0.__default.GetSt |p#0@@4| |st#0@@1|))))
 :pattern ( (M0.__default.GetSt |p#0@@4| |st#0@@1|))
 :pattern ( (M0.__default.GetSt |p#0@@4| |st'#0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#0@@4|))
)) (forall ((|p#1@@1| T@U) ) (!  (=> ($IsBox |p#1@@1| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| |st#0@@1|) (=> (not (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#1@@1|)) (and (|M0.__default.DomSt#canCall| |st'#0|) (=> (|Set#IsMember| (M0.__default.DomSt |st'#0|) |p#1@@1|) (and (|M0.__default.GetSt#canCall| |p#1@@1| |st'#0|) (|M0.__default.Oracle#canCall| |p#1@@1| |st#0@@1|)))))))
 :pattern ( (M0.__default.Oracle |p#1@@1| |st#0@@1|))
 :pattern ( (M0.__default.GetSt |p#1@@1| |st'#0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0|) |p#1@@1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#1@@1|))
)))))) (= (M0.__default.Extends true |st#0@@1| |st'#0|)  (and (and (|Set#Subset| (M0.__default.DomSt |st#0@@1|) (M0.__default.DomSt |st'#0|)) (forall ((|p#0@@5| T@U) ) (!  (=> ($IsBox |p#0@@5| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#0@@5|) (= (M0.__default.GetSt |p#0@@5| |st'#0|) (M0.__default.GetSt |p#0@@5| |st#0@@1|))))
 :pattern ( (M0.__default.GetSt |p#0@@5| |st#0@@1|))
 :pattern ( (M0.__default.GetSt |p#0@@5| |st'#0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#0@@5|))
))) (forall ((|p#1@@2| T@U) ) (!  (=> ($IsBox |p#1@@2| Tclass.M0.Path) (=> (and (not (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#1@@2|)) (|Set#IsMember| (M0.__default.DomSt |st'#0|) |p#1@@2|)) (= (M0.__default.GetSt |p#1@@2| |st'#0|) (M0.__default.Oracle |p#1@@2| |st#0@@1|))))
 :pattern ( (M0.__default.Oracle |p#1@@2| |st#0@@1|))
 :pattern ( (M0.__default.GetSt |p#1@@2| |st'#0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0|) |p#1@@2|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#1@@2|))
))))))
 :pattern ( (M0.__default.Extends true |st#0@@1| |st'#0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|p#0@@6| T@U) (|st#0@@2| T@U) ) (!  (=> (or (|M0.__default.GetSt#canCall| |p#0@@6| |st#0@@2|) (and (< 1 $FunctionContextHeight) (and (and ($IsBox |p#0@@6| Tclass.M0.Path) ($IsBox |st#0@@2| Tclass.M0.State)) (|Set#IsMember| (M0.__default.DomSt |st#0@@2|) |p#0@@6|)))) ($IsBox (M0.__default.GetSt |p#0@@6| |st#0@@2|) Tclass.M0.Artifact))
 :pattern ( (M0.__default.GetSt |p#0@@6| |st#0@@2|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|p#0@@7| T@U) (|st#0@@3| T@U) ) (!  (=> (and (or (|M0.__default.GetSt#canCall| |p#0@@7| |st#0@@3|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsBox |p#0@@7| Tclass.M0.Path) ($IsAllocBox |p#0@@7| Tclass.M0.Path $Heap@@0)) (and ($IsBox |st#0@@3| Tclass.M0.State) ($IsAllocBox |st#0@@3| Tclass.M0.State $Heap@@0))) (|Set#IsMember| (M0.__default.DomSt |st#0@@3|) |p#0@@7|)))) ($IsGoodHeap $Heap@@0)) ($IsAllocBox (M0.__default.GetSt |p#0@@7| |st#0@@3|) Tclass.M0.Artifact $Heap@@0))
 :pattern ( ($IsAllocBox (M0.__default.GetSt |p#0@@7| |st#0@@3|) Tclass.M0.Artifact $Heap@@0))
))))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Subset| a@@7 b@@4) (forall ((o@@2 T@U) ) (!  (=> (|Set#IsMember| a@@7 o@@2) (|Set#IsMember| b@@4 o@@2))
 :pattern ( (|Set#IsMember| a@@7 o@@2))
 :pattern ( (|Set#IsMember| b@@4 o@@2))
)))
 :pattern ( (|Set#Subset| a@@7 b@@4))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|st#0@@4| T@U) (|st'#0@@0| T@U) (|useCache#0@@0| Bool) ) (!  (=> (or (|M0.__default.Union#canCall| |st#0@@4| |st'#0@@0| |useCache#0@@0|) (and (< 2 $FunctionContextHeight) (and ($IsBox |st#0@@4| Tclass.M0.State) ($IsBox |st'#0@@0| Tclass.M0.State)))) (and (let ((|result#0| (M0.__default.Union |st#0@@4| |st'#0@@0| |useCache#0@@0|)))
 (and (and (|Set#Equal| (M0.__default.DomSt |result#0|) (|Set#Union| (M0.__default.DomSt |st#0@@4|) (M0.__default.DomSt |st'#0@@0|))) (forall ((|p#0@@8| T@U) ) (!  (=> ($IsBox |p#0@@8| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |result#0|) |p#0@@8|) (= (M0.__default.GetSt |p#0@@8| |result#0|) (M0.__default.GetSt |p#0@@8| (ite (|Set#IsMember| (M0.__default.DomSt |st'#0@@0|) |p#0@@8|) |st'#0@@0| |st#0@@4|)))))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@0|) |p#0@@8|))
 :pattern ( (M0.__default.GetSt |p#0@@8| |result#0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |result#0|) |p#0@@8|))
))) (=> |useCache#0@@0| (|Set#Equal| (M0.__default.DomC |result#0|) (|Set#Union| (M0.__default.DomC |st#0@@4|) (M0.__default.DomC |st'#0@@0|)))))) ($IsBox (M0.__default.Union |st#0@@4| |st'#0@@0| |useCache#0@@0|) Tclass.M0.State)))
 :pattern ( (M0.__default.Union |st#0@@4| |st'#0@@0| |useCache#0@@0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|st#0@@5| T@U) ) (!  (=> (or (|M0.__default.ValidState#canCall| |st#0@@5|) (and (< 1 $FunctionContextHeight) ($IsBox |st#0@@5| Tclass.M0.State))) (and (forall ((|p#0@@9| T@U) ) (!  (=> ($IsBox |p#0@@9| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| |st#0@@5|) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#0@@9|) (|M0.__default.WellFounded#canCall| |p#0@@9|))))
 :pattern ( (M0.__default.WellFounded |p#0@@9|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#0@@9|))
)) (= (M0.__default.ValidState |st#0@@5|) (forall ((|p#0@@10| T@U) ) (!  (=> ($IsBox |p#0@@10| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#0@@10|) (M0.__default.WellFounded |p#0@@10|)))
 :pattern ( (M0.__default.WellFounded |p#0@@10|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#0@@10|))
)))))
 :pattern ( (M0.__default.ValidState |st#0@@5|))
))))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) ) (! (= (|Set#Disjoint| a@@8 b@@5) (forall ((o@@3 T@U) ) (!  (or (not (|Set#IsMember| a@@8 o@@3)) (not (|Set#IsMember| b@@5 o@@3)))
 :pattern ( (|Set#IsMember| a@@8 o@@3))
 :pattern ( (|Set#IsMember| b@@5 o@@3))
)))
 :pattern ( (|Set#Disjoint| a@@8 b@@5))
)))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|sts#0@@0| T@U) ) (!  (=> (or (|M0.__default.Compatible#canCall| |sts#0@@0|) (and (< 2 $FunctionContextHeight) ($Is SetType |sts#0@@0| (TSet Tclass.M0.State)))) (and (forall ((|st#0@@6| T@U) (|st'#0@@1| T@U) ) (!  (=> (and ($IsBox |st#0@@6| Tclass.M0.State) ($IsBox |st'#0@@1| Tclass.M0.State)) (=> (|Set#IsMember| |sts#0@@0| |st#0@@6|) (=> (|Set#IsMember| |sts#0@@0| |st'#0@@1|) (forall ((|p#0@@11| T@U) ) (!  (=> ($IsBox |p#0@@11| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| |st#0@@6|) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@6|) |p#0@@11|) (and (|M0.__default.DomSt#canCall| |st'#0@@1|) (=> (|Set#IsMember| (M0.__default.DomSt |st'#0@@1|) |p#0@@11|) (and (|M0.__default.GetSt#canCall| |p#0@@11| |st#0@@6|) (|M0.__default.GetSt#canCall| |p#0@@11| |st'#0@@1|)))))))
 :pattern ( (M0.__default.GetSt |p#0@@11| |st'#0@@1|))
 :pattern ( (M0.__default.GetSt |p#0@@11| |st#0@@6|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@1|) |p#0@@11|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@6|) |p#0@@11|))
)))))
 :pattern ( (M0.__default.DomSt |st'#0@@1|) (M0.__default.DomSt |st#0@@6|))
 :pattern ( (M0.__default.DomSt |st'#0@@1|) (|Set#IsMember| |sts#0@@0| |st#0@@6|))
 :pattern ( (M0.__default.DomSt |st#0@@6|) (|Set#IsMember| |sts#0@@0| |st'#0@@1|))
 :pattern ( (|Set#IsMember| |sts#0@@0| |st'#0@@1|) (|Set#IsMember| |sts#0@@0| |st#0@@6|))
)) (= (M0.__default.Compatible |sts#0@@0|) (forall ((|st#0@@7| T@U) (|st'#0@@2| T@U) ) (!  (=> (and ($IsBox |st#0@@7| Tclass.M0.State) ($IsBox |st'#0@@2| Tclass.M0.State)) (=> (and (|Set#IsMember| |sts#0@@0| |st#0@@7|) (|Set#IsMember| |sts#0@@0| |st'#0@@2|)) (forall ((|p#0@@12| T@U) ) (!  (=> ($IsBox |p#0@@12| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#0@@7|) |p#0@@12|) (|Set#IsMember| (M0.__default.DomSt |st'#0@@2|) |p#0@@12|)) (= (M0.__default.GetSt |p#0@@12| |st#0@@7|) (M0.__default.GetSt |p#0@@12| |st'#0@@2|))))
 :pattern ( (M0.__default.GetSt |p#0@@12| |st'#0@@2|))
 :pattern ( (M0.__default.GetSt |p#0@@12| |st#0@@7|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@2|) |p#0@@12|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@7|) |p#0@@12|))
))))
 :pattern ( (M0.__default.DomSt |st'#0@@2|) (M0.__default.DomSt |st#0@@7|))
 :pattern ( (M0.__default.DomSt |st'#0@@2|) (|Set#IsMember| |sts#0@@0| |st#0@@7|))
 :pattern ( (M0.__default.DomSt |st#0@@7|) (|Set#IsMember| |sts#0@@0| |st'#0@@2|))
 :pattern ( (|Set#IsMember| |sts#0@@0| |st'#0@@2|) (|Set#IsMember| |sts#0@@0| |st#0@@7|))
)))))
 :pattern ( (M0.__default.Compatible |sts#0@@0|))
))))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@0 T@U) (|sts#0@@1| T@U) (|useCache#0@@1| Bool) ) (!  (=> (or (|M0.__default.Combine#canCall| |sts#0@@1| |useCache#0@@1|) (and (< 3 $FunctionContextHeight) (and ($Is SetType |sts#0@@1| (TSet Tclass.M0.State)) (not (|Set#Equal| |sts#0@@1| |Set#Empty|))))) (and (and (|M0.__default.PickOne#canCall| Tclass.M0.State |sts#0@@1|) (let ((|st#0@@8| (M0.__default.PickOne Tclass.M0.State |sts#0@@1|)))
 (=> (not (|Set#Equal| |sts#0@@1| (|Set#UnionOne| |Set#Empty| |st#0@@8|))) (and (|M0.__default.Combine#canCall| (|Set#Difference| |sts#0@@1| (|Set#UnionOne| |Set#Empty| |st#0@@8|)) |useCache#0@@1|) (|M0.__default.Union#canCall| (M0.__default.Combine $ly@@0 reveal_M0._default.Combine (|Set#Difference| |sts#0@@1| (|Set#UnionOne| |Set#Empty| |st#0@@8|)) |useCache#0@@1|) |st#0@@8| |useCache#0@@1|))))) (= (M0.__default.Combine ($LS $ly@@0) true |sts#0@@1| |useCache#0@@1|) (let ((|st#0@@9| (M0.__default.PickOne Tclass.M0.State |sts#0@@1|)))
(ite (|Set#Equal| |sts#0@@1| (|Set#UnionOne| |Set#Empty| |st#0@@9|)) |st#0@@9| (M0.__default.Union (M0.__default.Combine $ly@@0 reveal_M0._default.Combine (|Set#Difference| |sts#0@@1| (|Set#UnionOne| |Set#Empty| |st#0@@9|)) |useCache#0@@1|) |st#0@@9| |useCache#0@@1|))))))
 :pattern ( (M0.__default.Combine ($LS $ly@@0) true |sts#0@@1| |useCache#0@@1|))
))))
(assert (forall ((a@@9 T@U) (b@@6 T@U) (o@@4 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@9 b@@6) o@@4)  (or (|Set#IsMember| a@@9 o@@4) (|Set#IsMember| b@@6 o@@4)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@9 b@@6) o@@4))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (!  (=> (|Set#Disjoint| a@@10 b@@7) (and (= (|Set#Difference| (|Set#Union| a@@10 b@@7) a@@10) b@@7) (= (|Set#Difference| (|Set#Union| a@@10 b@@7) b@@7) a@@10)))
 :pattern ( (|Set#Union| a@@10 b@@7))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((M0._default.PickOne$T@@1 T@U) (|s#0@@0| T@U) ) (!  (=> (or (|M0.__default.PickOne#canCall| M0._default.PickOne$T@@1 |s#0@@0|) (and (< 0 $FunctionContextHeight) (and ($Is SetType |s#0@@0| (TSet M0._default.PickOne$T@@1)) (not (|Set#Equal| |s#0@@0| |Set#Empty|))))) ($IsBox (M0.__default.PickOne M0._default.PickOne$T@@1 |s#0@@0|) M0._default.PickOne$T@@1))
 :pattern ( (M0.__default.PickOne M0._default.PickOne$T@@1 |s#0@@0|))
))))
(assert (forall ((a@@11 T@U) (b@@8 T@U) ) (!  (=> (|Set#Equal| a@@11 b@@8) (= a@@11 b@@8))
 :pattern ( (|Set#Equal| a@@11 b@@8))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|st#0@@10| T@U) (|stC#0@@1| T@U) ) (!  (=> (or (|M0.__default.StateCorrespondence#canCall| (Lit BoxType |st#0@@10|) (Lit BoxType |stC#0@@1|)) (and (< 2 $FunctionContextHeight) (and ($IsBox |st#0@@10| Tclass.M0.State) ($IsBox |stC#0@@1| Tclass.M0.State)))) (and (and (and (|M0.__default.DomSt#canCall| (Lit BoxType |st#0@@10|)) (|M0.__default.DomSt#canCall| (Lit BoxType |stC#0@@1|))) (=> (|Set#Subset| (M0.__default.DomSt (Lit BoxType |st#0@@10|)) (M0.__default.DomSt (Lit BoxType |stC#0@@1|))) (and (forall ((|p#2| T@U) ) (!  (=> ($IsBox |p#2| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| (Lit BoxType |st#0@@10|)) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@10|)) |p#2|) (and (|M0.__default.GetSt#canCall| |p#2| (Lit BoxType |stC#0@@1|)) (|M0.__default.GetSt#canCall| |p#2| (Lit BoxType |st#0@@10|))))))
 :pattern ( (M0.__default.GetSt |p#2| |st#0@@10|))
 :pattern ( (M0.__default.GetSt |p#2| |stC#0@@1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@10|) |p#2|))
)) (=> (forall ((|p#2@@0| T@U) ) (!  (=> ($IsBox |p#2@@0| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@10|)) |p#2@@0|) (= (M0.__default.GetSt |p#2@@0| (Lit BoxType |stC#0@@1|)) (M0.__default.GetSt |p#2@@0| (Lit BoxType |st#0@@10|)))))
 :pattern ( (M0.__default.GetSt |p#2@@0| |st#0@@10|))
 :pattern ( (M0.__default.GetSt |p#2@@0| |stC#0@@1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@10|) |p#2@@0|))
)) (forall ((|p#3| T@U) ) (!  (=> ($IsBox |p#3| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| (Lit BoxType |st#0@@10|)) (=> (not (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@10|)) |p#3|)) (and (|M0.__default.DomSt#canCall| (Lit BoxType |stC#0@@1|)) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |stC#0@@1|)) |p#3|) (and (|M0.__default.GetSt#canCall| |p#3| (Lit BoxType |stC#0@@1|)) (|M0.__default.Oracle#canCall| |p#3| (Lit BoxType |st#0@@10|))))))))
 :pattern ( (M0.__default.Oracle |p#3| |st#0@@10|))
 :pattern ( (M0.__default.GetSt |p#3| |stC#0@@1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |stC#0@@1|) |p#3|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@10|) |p#3|))
)))))) (= (M0.__default.StateCorrespondence true (Lit BoxType |st#0@@10|) (Lit BoxType |stC#0@@1|))  (and (and (|Set#Subset| (M0.__default.DomSt (Lit BoxType |st#0@@10|)) (M0.__default.DomSt (Lit BoxType |stC#0@@1|))) (forall ((|p#2@@1| T@U) ) (!  (=> ($IsBox |p#2@@1| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@10|)) |p#2@@1|) (= (M0.__default.GetSt |p#2@@1| (Lit BoxType |stC#0@@1|)) (M0.__default.GetSt |p#2@@1| (Lit BoxType |st#0@@10|)))))
 :pattern ( (M0.__default.GetSt |p#2@@1| |st#0@@10|))
 :pattern ( (M0.__default.GetSt |p#2@@1| |stC#0@@1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@10|) |p#2@@1|))
))) (forall ((|p#3@@0| T@U) ) (!  (=> ($IsBox |p#3@@0| Tclass.M0.Path) (=> (and (not (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@10|)) |p#3@@0|)) (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |stC#0@@1|)) |p#3@@0|)) (= (M0.__default.GetSt |p#3@@0| (Lit BoxType |stC#0@@1|)) (M0.__default.Oracle |p#3@@0| (Lit BoxType |st#0@@10|)))))
 :pattern ( (M0.__default.Oracle |p#3@@0| |st#0@@10|))
 :pattern ( (M0.__default.GetSt |p#3@@0| |stC#0@@1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |stC#0@@1|) |p#3@@0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@10|) |p#3@@0|))
))))))
 :weight 3
 :pattern ( (M0.__default.StateCorrespondence true (Lit BoxType |st#0@@10|) (Lit BoxType |stC#0@@1|)))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|st#0@@11| T@U) (|st'#0@@3| T@U) ) (!  (=> (or (|M0.__default.Extends#canCall| (Lit BoxType |st#0@@11|) (Lit BoxType |st'#0@@3|)) (and (< 2 $FunctionContextHeight) (and ($IsBox |st#0@@11| Tclass.M0.State) ($IsBox |st'#0@@3| Tclass.M0.State)))) (and (and (and (|M0.__default.DomSt#canCall| (Lit BoxType |st#0@@11|)) (|M0.__default.DomSt#canCall| (Lit BoxType |st'#0@@3|))) (=> (|Set#Subset| (M0.__default.DomSt (Lit BoxType |st#0@@11|)) (M0.__default.DomSt (Lit BoxType |st'#0@@3|))) (and (forall ((|p#2@@2| T@U) ) (!  (=> ($IsBox |p#2@@2| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| (Lit BoxType |st#0@@11|)) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@11|)) |p#2@@2|) (and (|M0.__default.GetSt#canCall| |p#2@@2| (Lit BoxType |st'#0@@3|)) (|M0.__default.GetSt#canCall| |p#2@@2| (Lit BoxType |st#0@@11|))))))
 :pattern ( (M0.__default.GetSt |p#2@@2| |st#0@@11|))
 :pattern ( (M0.__default.GetSt |p#2@@2| |st'#0@@3|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@11|) |p#2@@2|))
)) (=> (forall ((|p#2@@3| T@U) ) (!  (=> ($IsBox |p#2@@3| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@11|)) |p#2@@3|) (= (M0.__default.GetSt |p#2@@3| (Lit BoxType |st'#0@@3|)) (M0.__default.GetSt |p#2@@3| (Lit BoxType |st#0@@11|)))))
 :pattern ( (M0.__default.GetSt |p#2@@3| |st#0@@11|))
 :pattern ( (M0.__default.GetSt |p#2@@3| |st'#0@@3|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@11|) |p#2@@3|))
)) (forall ((|p#3@@1| T@U) ) (!  (=> ($IsBox |p#3@@1| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| (Lit BoxType |st#0@@11|)) (=> (not (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@11|)) |p#3@@1|)) (and (|M0.__default.DomSt#canCall| (Lit BoxType |st'#0@@3|)) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st'#0@@3|)) |p#3@@1|) (and (|M0.__default.GetSt#canCall| |p#3@@1| (Lit BoxType |st'#0@@3|)) (|M0.__default.Oracle#canCall| |p#3@@1| (Lit BoxType |st#0@@11|))))))))
 :pattern ( (M0.__default.Oracle |p#3@@1| |st#0@@11|))
 :pattern ( (M0.__default.GetSt |p#3@@1| |st'#0@@3|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@3|) |p#3@@1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@11|) |p#3@@1|))
)))))) (= (M0.__default.Extends true (Lit BoxType |st#0@@11|) (Lit BoxType |st'#0@@3|))  (and (and (|Set#Subset| (M0.__default.DomSt (Lit BoxType |st#0@@11|)) (M0.__default.DomSt (Lit BoxType |st'#0@@3|))) (forall ((|p#2@@4| T@U) ) (!  (=> ($IsBox |p#2@@4| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@11|)) |p#2@@4|) (= (M0.__default.GetSt |p#2@@4| (Lit BoxType |st'#0@@3|)) (M0.__default.GetSt |p#2@@4| (Lit BoxType |st#0@@11|)))))
 :pattern ( (M0.__default.GetSt |p#2@@4| |st#0@@11|))
 :pattern ( (M0.__default.GetSt |p#2@@4| |st'#0@@3|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@11|) |p#2@@4|))
))) (forall ((|p#3@@2| T@U) ) (!  (=> ($IsBox |p#3@@2| Tclass.M0.Path) (=> (and (not (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@11|)) |p#3@@2|)) (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st'#0@@3|)) |p#3@@2|)) (= (M0.__default.GetSt |p#3@@2| (Lit BoxType |st'#0@@3|)) (M0.__default.Oracle |p#3@@2| (Lit BoxType |st#0@@11|)))))
 :pattern ( (M0.__default.Oracle |p#3@@2| |st#0@@11|))
 :pattern ( (M0.__default.GetSt |p#3@@2| |st'#0@@3|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@3|) |p#3@@2|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@11|) |p#3@@2|))
))))))
 :weight 3
 :pattern ( (M0.__default.Extends true (Lit BoxType |st#0@@11|) (Lit BoxType |st'#0@@3|)))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|p#0@@13| T@U) ) (!  (=> (or (|M0.__default.Hash#canCall| |p#0@@13|) (and (< 0 $FunctionContextHeight) ($IsBox |p#0@@13| Tclass.M0.Path))) ($IsBox (M0.__default.Hash |p#0@@13|) Tclass.M0.HashValue))
 :pattern ( (M0.__default.Hash |p#0@@13|))
))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@1 T@U) ($reveal Bool) (|sts#0@@2| T@U) (|useCache#0@@2| Bool) ) (!  (=> (or (|M0.__default.Combine#canCall| |sts#0@@2| |useCache#0@@2|) (and (< 3 $FunctionContextHeight) (and ($Is SetType |sts#0@@2| (TSet Tclass.M0.State)) (not (|Set#Equal| |sts#0@@2| |Set#Empty|))))) ($IsBox (M0.__default.Combine $ly@@1 $reveal |sts#0@@2| |useCache#0@@2|) Tclass.M0.State))
 :pattern ( (M0.__default.Combine $ly@@1 $reveal |sts#0@@2| |useCache#0@@2|))
))))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TBool) (and (= ($Box boolType ($Unbox boolType bx@@0)) bx@@0) ($Is boolType ($Unbox boolType bx@@0) TBool)))
 :pattern ( ($IsBox bx@@0 TBool))
)))
(assert (= (Ctor charType) 6))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TChar) (and (= ($Box charType ($Unbox charType bx@@1)) bx@@1) ($Is charType ($Unbox charType bx@@1) TChar)))
 :pattern ( ($IsBox bx@@1 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Seq#Length| s@@0))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@0 T@U) (v@@2 T@U) ) (!  (=> ($IsBox v@@2 ty) ($IsAllocBox v@@2 ty h@@0))
 :pattern ( ($IsAllocBox v@@2 ty h@@0))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((M0._default.PickOne$T@@2 T@U) ($Heap@@1 T@U) (|s#0@@1| T@U) ) (!  (=> (or (|M0.__default.PickOne#canCall| M0._default.PickOne$T@@2 |s#0@@1|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) ($Is SetType |s#0@@1| (TSet M0._default.PickOne$T@@2))) (not (|Set#Equal| |s#0@@1| |Set#Empty|))))) (and (|$let#0$canCall| M0._default.PickOne$T@@2 |s#0@@1|) (= (M0.__default.PickOne M0._default.PickOne$T@@2 |s#0@@1|) (let ((|x#0| (|$let#0_x| M0._default.PickOne$T@@2 |s#0@@1|)))
|x#0|))))
 :pattern ( (M0.__default.PickOne M0._default.PickOne$T@@2 |s#0@@1|) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((v@@3 T@U) (t0@@0 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@0) h@@1) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@2) ($IsAllocBox bx@@2 t0@@0 h@@1))
 :pattern ( (|Set#IsMember| v@@3 bx@@2))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@0) h@@1))
)))
(assert (forall ((v@@4 T@U) (t0@@1 T@U) (h@@2 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@1) h@@2) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i) t0@@1 h@@2))
 :pattern ( (|Seq#Index| v@@4 i))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@1) h@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@2 T@U) (|p#0@@14| T@U) ) (!  (=> (and (or (|M0.__default.Hash#canCall| |p#0@@14|) (and (< 0 $FunctionContextHeight) (and ($IsBox |p#0@@14| Tclass.M0.Path) ($IsAllocBox |p#0@@14| Tclass.M0.Path $Heap@@2)))) ($IsGoodHeap $Heap@@2)) ($IsAllocBox (M0.__default.Hash |p#0@@14|) Tclass.M0.HashValue $Heap@@2))
 :pattern ( ($IsAllocBox (M0.__default.Hash |p#0@@14|) Tclass.M0.HashValue $Heap@@2))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((x@@7 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@7)) x@@7)
 :pattern ( ($Box T@@3 x@@7))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|st#0@@12| T@U) ) (!  (=> (or (|M0.__default.DomSt#canCall| |st#0@@12|) (and (< 0 $FunctionContextHeight) ($IsBox |st#0@@12| Tclass.M0.State))) ($Is SetType (M0.__default.DomSt |st#0@@12|) (TSet Tclass.M0.Path)))
 :pattern ( (M0.__default.DomSt |st#0@@12|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|st#0@@13| T@U) ) (!  (=> (or (|M0.__default.DomC#canCall| |st#0@@13|) (and (< 0 $FunctionContextHeight) ($IsBox |st#0@@13| Tclass.M0.State))) ($Is SetType (M0.__default.DomC |st#0@@13|) (TSet Tclass.M0.HashValue)))
 :pattern ( (M0.__default.DomC |st#0@@13|))
))))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (! (= (|Set#Union| a@@12 (|Set#Union| a@@12 b@@9)) (|Set#Union| a@@12 b@@9))
 :pattern ( (|Set#Union| a@@12 (|Set#Union| a@@12 b@@9)))
)))
(assert (forall (($ly@@2 T@U) ($reveal@@0 Bool) (|sts#0@@3| T@U) (|useCache#0@@3| Bool) ) (! (= (M0.__default.Combine ($LS $ly@@2) $reveal@@0 |sts#0@@3| |useCache#0@@3|) (M0.__default.Combine $ly@@2 $reveal@@0 |sts#0@@3| |useCache#0@@3|))
 :pattern ( (M0.__default.Combine ($LS $ly@@2) $reveal@@0 |sts#0@@3| |useCache#0@@3|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@3 T@U) (|st#0@@14| T@U) ) (!  (=> (and (or (|M0.__default.DomC#canCall| |st#0@@14|) (and (< 0 $FunctionContextHeight) (and ($IsBox |st#0@@14| Tclass.M0.State) ($IsAllocBox |st#0@@14| Tclass.M0.State $Heap@@3)))) ($IsGoodHeap $Heap@@3)) ($IsAlloc SetType (M0.__default.DomC |st#0@@14|) (TSet Tclass.M0.HashValue) $Heap@@3))
 :pattern ( ($IsAlloc SetType (M0.__default.DomC |st#0@@14|) (TSet Tclass.M0.HashValue) $Heap@@3))
))))
(assert  (and (and (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@2 t1 t2 (MapType0Store t0@@2 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 7)) (= (Ctor FieldType) 8)) (forall ((t0@@3 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 (MapType1Store t0@@3 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 9))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@4 T@U) (|p#0@@15| T@U) (|st#0@@15| T@U) ) (!  (=> (and (or (|M0.__default.Oracle#canCall| |p#0@@15| |st#0@@15|) (and (< 0 $FunctionContextHeight) (and (and ($IsBox |p#0@@15| Tclass.M0.Path) ($IsAllocBox |p#0@@15| Tclass.M0.Path $Heap@@4)) (and ($IsBox |st#0@@15| Tclass.M0.State) ($IsAllocBox |st#0@@15| Tclass.M0.State $Heap@@4))))) ($IsGoodHeap $Heap@@4)) ($IsAllocBox (M0.__default.Oracle |p#0@@15| |st#0@@15|) Tclass.M0.Artifact $Heap@@4))
 :pattern ( ($IsAllocBox (M0.__default.Oracle |p#0@@15| |st#0@@15|) Tclass.M0.Artifact $Heap@@4))
))))
(assert (forall ((bx@@3 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@3 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@3)) bx@@3) ($Is SetType ($Unbox SetType bx@@3) (TSet t@@5))))
 :pattern ( ($IsBox bx@@3 (TSet t@@5)))
)))
(assert (forall ((bx@@4 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@4 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@4)) bx@@4) ($Is SeqType ($Unbox SeqType bx@@4) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@4 (TSeq t@@6)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|sts#0@@4| T@U) ) (!  (=> (or (|M0.__default.Compatible#canCall| (Lit SetType |sts#0@@4|)) (and (< 2 $FunctionContextHeight) ($Is SetType |sts#0@@4| (TSet Tclass.M0.State)))) (and (forall ((|st#1@@1| T@U) (|st'#1| T@U) ) (!  (=> (and ($IsBox |st#1@@1| Tclass.M0.State) ($IsBox |st'#1| Tclass.M0.State)) (=> (|Set#IsMember| (Lit SetType |sts#0@@4|) |st#1@@1|) (=> (|Set#IsMember| (Lit SetType |sts#0@@4|) |st'#1|) (forall ((|p#1@@3| T@U) ) (!  (=> ($IsBox |p#1@@3| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| |st#1@@1|) (=> (|Set#IsMember| (M0.__default.DomSt |st#1@@1|) |p#1@@3|) (and (|M0.__default.DomSt#canCall| |st'#1|) (=> (|Set#IsMember| (M0.__default.DomSt |st'#1|) |p#1@@3|) (and (|M0.__default.GetSt#canCall| |p#1@@3| |st#1@@1|) (|M0.__default.GetSt#canCall| |p#1@@3| |st'#1|)))))))
 :pattern ( (M0.__default.GetSt |p#1@@3| |st'#1|))
 :pattern ( (M0.__default.GetSt |p#1@@3| |st#1@@1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#1|) |p#1@@3|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@1|) |p#1@@3|))
)))))
 :pattern ( (M0.__default.DomSt |st'#1|) (M0.__default.DomSt |st#1@@1|))
 :pattern ( (M0.__default.DomSt |st'#1|) (|Set#IsMember| |sts#0@@4| |st#1@@1|))
 :pattern ( (M0.__default.DomSt |st#1@@1|) (|Set#IsMember| |sts#0@@4| |st'#1|))
 :pattern ( (|Set#IsMember| |sts#0@@4| |st'#1|) (|Set#IsMember| |sts#0@@4| |st#1@@1|))
)) (= (M0.__default.Compatible (Lit SetType |sts#0@@4|)) (forall ((|st#1@@2| T@U) (|st'#1@@0| T@U) ) (!  (=> (and ($IsBox |st#1@@2| Tclass.M0.State) ($IsBox |st'#1@@0| Tclass.M0.State)) (=> (and (|Set#IsMember| (Lit SetType |sts#0@@4|) |st#1@@2|) (|Set#IsMember| (Lit SetType |sts#0@@4|) |st'#1@@0|)) (forall ((|p#1@@4| T@U) ) (!  (=> ($IsBox |p#1@@4| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#1@@2|) |p#1@@4|) (|Set#IsMember| (M0.__default.DomSt |st'#1@@0|) |p#1@@4|)) (= (M0.__default.GetSt |p#1@@4| |st#1@@2|) (M0.__default.GetSt |p#1@@4| |st'#1@@0|))))
 :pattern ( (M0.__default.GetSt |p#1@@4| |st'#1@@0|))
 :pattern ( (M0.__default.GetSt |p#1@@4| |st#1@@2|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#1@@0|) |p#1@@4|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@2|) |p#1@@4|))
))))
 :pattern ( (M0.__default.DomSt |st'#1@@0|) (M0.__default.DomSt |st#1@@2|))
 :pattern ( (M0.__default.DomSt |st'#1@@0|) (|Set#IsMember| |sts#0@@4| |st#1@@2|))
 :pattern ( (M0.__default.DomSt |st#1@@2|) (|Set#IsMember| |sts#0@@4| |st'#1@@0|))
 :pattern ( (|Set#IsMember| |sts#0@@4| |st'#1@@0|) (|Set#IsMember| |sts#0@@4| |st#1@@2|))
)))))
 :weight 3
 :pattern ( (M0.__default.Compatible (Lit SetType |sts#0@@4|)))
))))
(assert (forall ((a@@13 T@U) (b@@10 T@U) ) (! (= (|Set#Equal| a@@13 b@@10) (forall ((o@@5 T@U) ) (! (= (|Set#IsMember| a@@13 o@@5) (|Set#IsMember| b@@10 o@@5))
 :pattern ( (|Set#IsMember| a@@13 o@@5))
 :pattern ( (|Set#IsMember| b@@10 o@@5))
)))
 :pattern ( (|Set#Equal| a@@13 b@@10))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|stC#0@@2| T@U) ) (!  (=> (or (|M0.__default.ConsistentCache#canCall| (Lit BoxType |stC#0@@2|)) (and (< 1 $FunctionContextHeight) ($IsBox |stC#0@@2| Tclass.M0.State))) (and (forall ((|cmd#1| T@U) (|deps#1| T@U) (|e#1| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#1| (TSeq TChar)) ($Is SetType |deps#1| (TSet Tclass.M0.Path))) ($Is SeqType |e#1| (TSeq TChar))) (and (and (and (|M0.__default.Loc#canCall| |cmd#1| |deps#1| |e#1|) (|M0.__default.Hash#canCall| (M0.__default.Loc |cmd#1| |deps#1| |e#1|))) (|M0.__default.DomC#canCall| (Lit BoxType |stC#0@@2|))) (=> (|Set#IsMember| (M0.__default.DomC (Lit BoxType |stC#0@@2|)) (M0.__default.Hash (M0.__default.Loc |cmd#1| |deps#1| |e#1|))) (and (|M0.__default.Loc#canCall| |cmd#1| |deps#1| |e#1|) (|M0.__default.DomSt#canCall| (Lit BoxType |stC#0@@2|))))))
 :pattern ( (M0.__default.Loc |cmd#1| |deps#1| |e#1|))
)) (= (M0.__default.ConsistentCache (Lit BoxType |stC#0@@2|)) (forall ((|cmd#1@@0| T@U) (|deps#1@@0| T@U) (|e#1@@0| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#1@@0| (TSeq TChar)) ($Is SetType |deps#1@@0| (TSet Tclass.M0.Path))) ($Is SeqType |e#1@@0| (TSeq TChar))) (=> (|Set#IsMember| (M0.__default.DomC (Lit BoxType |stC#0@@2|)) (M0.__default.Hash (M0.__default.Loc |cmd#1@@0| |deps#1@@0| |e#1@@0|))) (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |stC#0@@2|)) (M0.__default.Loc |cmd#1@@0| |deps#1@@0| |e#1@@0|))))
 :pattern ( (M0.__default.Loc |cmd#1@@0| |deps#1@@0| |e#1@@0|))
)))))
 :weight 3
 :pattern ( (M0.__default.ConsistentCache (Lit BoxType |stC#0@@2|)))
))))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@8)) (Lit BoxType ($Box T@@4 x@@8)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@8)))
)))
(assert (forall ((s@@1 T@U) ) (!  (=> (= (|Seq#Length| s@@1) 0) (= s@@1 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|st#0@@16| T@U) ) (!  (=> (or (|M0.__default.ValidState#canCall| (Lit BoxType |st#0@@16|)) (and (< 1 $FunctionContextHeight) ($IsBox |st#0@@16| Tclass.M0.State))) (and (forall ((|p#1@@5| T@U) ) (!  (=> ($IsBox |p#1@@5| Tclass.M0.Path) (and (|M0.__default.DomSt#canCall| (Lit BoxType |st#0@@16|)) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@16|)) |p#1@@5|) (|M0.__default.WellFounded#canCall| |p#1@@5|))))
 :pattern ( (M0.__default.WellFounded |p#1@@5|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@16|) |p#1@@5|))
)) (= (M0.__default.ValidState (Lit BoxType |st#0@@16|)) (forall ((|p#1@@6| T@U) ) (!  (=> ($IsBox |p#1@@6| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |st#0@@16|)) |p#1@@6|) (M0.__default.WellFounded |p#1@@6|)))
 :pattern ( (M0.__default.WellFounded |p#1@@6|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@16|) |p#1@@6|))
)))))
 :weight 3
 :pattern ( (M0.__default.ValidState (Lit BoxType |st#0@@16|)))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((M0._default.PickOne$T@@3 T@U) ($Heap@@5 T@U) (|s#0@@2| T@U) ) (!  (=> (or (|M0.__default.PickOne#canCall| M0._default.PickOne$T@@3 (Lit SetType |s#0@@2|)) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@5) ($Is SetType |s#0@@2| (TSet M0._default.PickOne$T@@3))) (not (|Set#Equal| |s#0@@2| |Set#Empty|))))) (and (|$let#0$canCall| M0._default.PickOne$T@@3 (Lit SetType |s#0@@2|)) (= (M0.__default.PickOne M0._default.PickOne$T@@3 (Lit SetType |s#0@@2|)) (let ((|x#1| (|$let#0_x| M0._default.PickOne$T@@3 (Lit SetType |s#0@@2|))))
|x#1|))))
 :weight 3
 :pattern ( (M0.__default.PickOne M0._default.PickOne$T@@3 (Lit SetType |s#0@@2|)) ($IsGoodHeap $Heap@@5))
))))
(assert (forall ((h@@3 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@3)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@6 T@U) ) (! ($IsAlloc charType v@@6 TChar h@@4)
 :pattern ( ($IsAlloc charType v@@6 TChar h@@4))
)))
(assert (forall ((v@@7 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@7 (TSeq t0@@4)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@7))) ($IsBox (|Seq#Index| v@@7 i@@0) t0@@4))
 :pattern ( (|Seq#Index| v@@7 i@@0))
)))
 :pattern ( ($Is SeqType v@@7 (TSeq t0@@4)))
)))
(assert (forall ((v@@8 T@U) ) (! ($Is boolType v@@8 TBool)
 :pattern ( ($Is boolType v@@8 TBool))
)))
(assert (forall ((v@@9 T@U) ) (! ($Is charType v@@9 TChar)
 :pattern ( ($Is charType v@@9 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |p#1_1_0@0| () T@U)
(declare-fun |$rhs#1_0@0| () T@U)
(declare-fun |$rhs#1_1@0| () T@U)
(declare-fun |call4formal@stRepr#0@0| () T@U)
(declare-fun |sts#0@@5| () T@U)
(declare-fun $LZ () T@U)
(declare-fun |stsC#0| () T@U)
(declare-fun |useCache##1_1_1_2@0| () Bool)
(declare-fun |call4formal@stRepr#0| () T@U)
(declare-fun $Heap@@6 () T@U)
(declare-fun $Heap@21 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call4formal@stRepr#0@0@@0| () T@U)
(declare-fun $Heap@20 () T@U)
(declare-fun |stC#0@@3| () T@U)
(declare-fun |sts##1_1_1_3@0| () T@U)
(declare-fun |useCache##1_1_1_3@0| () Bool)
(declare-fun $Heap@22 () T@U)
(declare-fun |sts##1_1_1_4@0| () T@U)
(declare-fun |useCache##1_1_1_4@0| () Bool)
(declare-fun $Heap@23 () T@U)
(declare-fun |##useCache#1_1_1_1@0| () Bool)
(declare-fun |##st#1_1_1_4@0| () T@U)
(declare-fun |##useCache#1_1_1_2@0| () Bool)
(declare-fun |##st#1_1_1_5@0| () T@U)
(declare-fun |##useCache#1_1_1_0@0| () Bool)
(declare-fun |##st#1_1_1_3@0| () T@U)
(declare-fun |st#0@@17| () T@U)
(declare-fun |useCache##1_1_1_0@0| () Bool)
(declare-fun $Heap@19 () T@U)
(declare-fun $Heap@17 () T@U)
(declare-fun |useCache##1_1_1_1@0| () Bool)
(declare-fun |sts##1_1_0_0@0| () T@U)
(declare-fun |useCache##1_1_0_0@0| () Bool)
(declare-fun $Heap@18 () T@U)
(declare-fun |sts##1_1_0@0| () T@U)
(declare-fun |useCache##1_1_0@0| () Bool)
(declare-fun |call4formal@stRepr#0@@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |sts##1_2_0_0@0| () T@U)
(declare-fun |useCache##1_2_0_0@0| () Bool)
(declare-fun $Heap@16 () T@U)
(declare-fun |p#1_2_0@0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |stOrig#0| () T@U)
(declare-fun |sts##1_2_1_0_0_0@0| () T@U)
(declare-fun |useCache##1_2_1_0_0_0@0| () Bool)
(declare-fun reveal_M0._default.Extends () Bool)
(declare-fun $Heap@14 () T@U)
(declare-fun $Heap@15 () T@U)
(declare-fun $Heap@13 () T@U)
(declare-fun |call4formal@stRepr#0@0@@1| () T@U)
(declare-fun |sts##1_2_2_0_0_0@0| () T@U)
(declare-fun |useCache##1_2_2_0_0_0@0| () Bool)
(declare-fun $Heap@11 () T@U)
(declare-fun $Heap@12 () T@U)
(declare-fun |##useCache#1_2_2_0_1_0@0| () Bool)
(declare-fun |##st#1_2_2_0_1_0@0| () T@U)
(declare-fun |useCache##1_2_2_0_1_0@0| () Bool)
(declare-fun $Heap@9 () T@U)
(declare-fun |##useCache#1_2_2_0_1_1@0| () Bool)
(declare-fun |st1##1_2_2_0_1_0@0| () T@U)
(declare-fun $Heap@10 () T@U)
(declare-fun |##useCache#1_2_2_0_2_0@0| () Bool)
(declare-fun |##st#1_2_2_0_2_0@0| () T@U)
(declare-fun |useCache##1_2_2_0_2_0@0| () Bool)
(declare-fun $Heap@8 () T@U)
(declare-fun |##useCache#1_2_2_0_2_1@0| () Bool)
(declare-fun |##st#1_2_2_0_2_1@0| () T@U)
(declare-fun |##useCache#1_2_2_0_2_2@0| () Bool)
(declare-fun |##st#1_2_2_0_2_2@0| () T@U)
(declare-fun |##useCache#1_2_2_0_2_3@0| () Bool)
(declare-fun |##st#1_2_2_0_2_3@0| () T@U)
(declare-fun |useCache##1_2_2_0_3_0@0| () Bool)
(declare-fun $Heap@6 () T@U)
(declare-fun |useCache##1_2_2_0_3_1@0| () Bool)
(declare-fun $Heap@7 () T@U)
(declare-fun |##useCache#1_2_2_0_3_0@0| () Bool)
(declare-fun |##st#1_2_2_0_3_1@0| () T@U)
(declare-fun |sts##1_2_0@0| () T@U)
(declare-fun |useCache##1_2_0@0| () Bool)
(declare-fun |call4formal@stRepr#0@@1| () T@U)
(declare-fun reveal_M0._default.StateCorrespondence () Bool)
(declare-fun |##useCache#1_0_0_0@0| () Bool)
(declare-fun |##st#1_0_0_1@0| () T@U)
(declare-fun |useCache##1_0_0_0@0| () Bool)
(declare-fun $Heap@4 () T@U)
(declare-fun |##useCache#1_0_1_0@0| () Bool)
(declare-fun |##st#1_0_1_1@0| () T@U)
(declare-fun |##useCache#1_0_1_1@0| () Bool)
(declare-fun |##st#1_0_1_3@0| () T@U)
(declare-fun |##useCache#1_0_2_0@0| () Bool)
(declare-fun |##st#1_0_2_1@0| () T@U)
(declare-fun |##useCache#1_0_2_1@0| () Bool)
(declare-fun |##st#1_0_2_2@0| () T@U)
(declare-fun |##useCache#1_0_2_2@0| () Bool)
(declare-fun |##st#1_0_2_3@0| () T@U)
(declare-fun |##useCache#1_0_2_3@0| () Bool)
(declare-fun |##st#1_0_2_5@0| () T@U)
(declare-fun |useCache##1_0_3_0@0| () Bool)
(declare-fun $Heap@3 () T@U)
(declare-fun |##useCache#1_0_3_0@0| () Bool)
(declare-fun |##st#1_0_3_2@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |##sts#1_0@0| () T@U)
(declare-fun |##useCache#1_0@0| () Bool)
(declare-fun |##sts#1_1@0| () T@U)
(declare-fun |##useCache#1_1@0| () Bool)
(declare-fun |##sts#1_2@0| () T@U)
(declare-fun |##useCache#1_2@0| () Bool)
(declare-fun |##sts#1_3@0| () T@U)
(declare-fun |##useCache#1_3@0| () Bool)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |defass#a#1_0| () Bool)
(declare-fun |a#1_0| () T@U)
(declare-fun |defass#b#1_0| () Bool)
(declare-fun |b#1_0| () T@U)
(declare-fun |defass#stRepr#1_1_0| () Bool)
(declare-fun |stRepr#1_1_0| () T@U)
(declare-fun |defass#stReprC#1_1_1_0| () Bool)
(declare-fun |stReprC#1_1_1_0| () T@U)
(declare-fun |defass#stReprC#1_2_0| () Bool)
(declare-fun |stReprC#1_2_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 15000000)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 183) (let ((anon18_correct  (=> (= (ControlFlow 0 118) (- 0 117)) (= (M0.__default.GetSt |p#1_1_0@0| |$rhs#1_0@0|) (M0.__default.GetSt |p#1_1_0@0| |$rhs#1_1@0|)))))
(let ((anon17_correct  (=> (and (and (|M0.__default.GetSt#canCall| |p#1_1_0@0| |$rhs#1_0@0|) (|M0.__default.GetSt#canCall| |p#1_1_0@0| |call4formal@stRepr#0@0|)) (=> (= (M0.__default.GetSt |p#1_1_0@0| |$rhs#1_0@0|) (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|)) (and (and (|M0.__default.GetSt#canCall| |p#1_1_0@0| |call4formal@stRepr#0@0|) (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (=> (= (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|) (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (and (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))))))) (and (=> (= (ControlFlow 0 124) (- 0 138)) (= (M0.__default.GetSt |p#1_1_0@0| |$rhs#1_0@0|) (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|))) (and (=> (= (ControlFlow 0 124) (- 0 137)) (= (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|) (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (and (=> (= (ControlFlow 0 124) (- 0 136)) (= (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (=> (and (and (and (and (= (M0.__default.GetSt |p#1_1_0@0| |$rhs#1_0@0|) (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|)) (= (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|) (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (= (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (= |useCache##1_1_1_2@0| (U_2_bool (Lit boolType (bool_2_U true))))) (and ($IsBox |call4formal@stRepr#0| Tclass.M0.State) ($IsAllocBox |call4formal@stRepr#0| Tclass.M0.State $Heap@@6))) (and (=> (= (ControlFlow 0 124) (- 0 135)) (not (|Set#Equal| |stsC#0| |Set#Empty|))) (=> (not (|Set#Equal| |stsC#0| |Set#Empty|)) (and (=> (= (ControlFlow 0 124) (- 0 134)) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| |useCache##1_1_1_2@0|)) |p#1_1_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| |useCache##1_1_1_2@0|)) |p#1_1_0@0|) (=> (and ($IsGoodHeap $Heap@21) ($IsHeapAnchor $Heap@21)) (=> (and (and (and ($IsBox |call4formal@stRepr#0@0@@0| Tclass.M0.State) ($IsAllocBox |call4formal@stRepr#0@0@@0| Tclass.M0.State $Heap@21)) (=> (|Set#IsMember| |stsC#0| |call4formal@stRepr#0@0@@0|) (and (|M0.__default.DomSt#canCall| |call4formal@stRepr#0@0@@0|) (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@0|) |p#1_1_0@0|) (and (|M0.__default.GetSt#canCall| |p#1_1_0@0| |call4formal@stRepr#0@0@@0|) (and (|M0.__default.Combine#canCall| |stsC#0| |useCache##1_1_1_2@0|) (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| |useCache##1_1_1_2@0|)))))))) (and (and (|Set#IsMember| |stsC#0| |call4formal@stRepr#0@0@@0|) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@0|) |p#1_1_0@0|)) (and (= (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0@@0|) (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| |useCache##1_1_1_2@0|))) (= $Heap@20 $Heap@21)))) (and (=> (= (ControlFlow 0 124) (- 0 133)) true) (and (=> (= (ControlFlow 0 124) (- 0 132)) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |call4formal@stRepr#0@0@@0|)) (=> (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |call4formal@stRepr#0@0@@0|) (and (=> (= (ControlFlow 0 124) (- 0 131)) true) (=> (and (= |sts##1_1_1_3@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|)) (= |useCache##1_1_1_3@0| (U_2_bool (Lit boolType (bool_2_U true))))) (and (=> (= (ControlFlow 0 124) (- 0 130)) (|Set#IsMember| |sts##1_1_1_3@0| |call4formal@stRepr#0@0@@0|)) (=> (|Set#IsMember| |sts##1_1_1_3@0| |call4formal@stRepr#0@0@@0|) (=> (and ($IsGoodHeap $Heap@22) ($IsHeapAnchor $Heap@22)) (=> (and (and (|M0.__default.DomSt#canCall| |call4formal@stRepr#0@0@@0|) (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@0|) |p#1_1_0@0|) (and (|M0.__default.Combine#canCall| |sts##1_1_1_3@0| |useCache##1_1_1_3@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts##1_1_1_3@0| |useCache##1_1_1_3@0|))))) (and (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@0|) |p#1_1_0@0|) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_1_3@0| |useCache##1_1_1_3@0|)) |p#1_1_0@0|)) (= $Heap@21 $Heap@22))) (and (=> (= (ControlFlow 0 124) (- 0 129)) true) (=> (and (= |sts##1_1_1_4@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|)) (= |useCache##1_1_1_4@0| (U_2_bool (Lit boolType (bool_2_U true))))) (and (=> (= (ControlFlow 0 124) (- 0 128)) (|Set#IsMember| |sts##1_1_1_4@0| |call4formal@stRepr#0@0@@0|)) (=> (|Set#IsMember| |sts##1_1_1_4@0| |call4formal@stRepr#0@0@@0|) (and (=> (= (ControlFlow 0 124) (- 0 127)) (=> (|M0.__default.Compatible#canCall| |sts##1_1_1_4@0|) (or (M0.__default.Compatible |sts##1_1_1_4@0|) (forall ((|st#1@@3| T@U) (|st'#0@@4| T@U) ) (!  (=> (and ($IsBox |st#1@@3| Tclass.M0.State) ($IsBox |st'#0@@4| Tclass.M0.State)) (=> (and (|Set#IsMember| |sts##1_1_1_4@0| |st#1@@3|) (|Set#IsMember| |sts##1_1_1_4@0| |st'#0@@4|)) (forall ((|p#1@@7| T@U) ) (!  (=> ($IsBox |p#1@@7| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#1@@3|) |p#1@@7|) (|Set#IsMember| (M0.__default.DomSt |st'#0@@4|) |p#1@@7|)) (= (M0.__default.GetSt |p#1@@7| |st#1@@3|) (M0.__default.GetSt |p#1@@7| |st'#0@@4|))))
 :pattern ( (M0.__default.GetSt |p#1@@7| |st'#0@@4|))
 :pattern ( (M0.__default.GetSt |p#1@@7| |st#1@@3|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@4|) |p#1@@7|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@3|) |p#1@@7|))
))))
 :pattern ( (M0.__default.DomSt |st'#0@@4|) (M0.__default.DomSt |st#1@@3|))
 :pattern ( (M0.__default.DomSt |st'#0@@4|) (|Set#IsMember| |sts##1_1_1_4@0| |st#1@@3|))
 :pattern ( (M0.__default.DomSt |st#1@@3|) (|Set#IsMember| |sts##1_1_1_4@0| |st'#0@@4|))
 :pattern ( (|Set#IsMember| |sts##1_1_1_4@0| |st'#0@@4|) (|Set#IsMember| |sts##1_1_1_4@0| |st#1@@3|))
))))) (=> (=> (|M0.__default.Compatible#canCall| |sts##1_1_1_4@0|) (or (M0.__default.Compatible |sts##1_1_1_4@0|) (forall ((|st#1@@4| T@U) (|st'#0@@5| T@U) ) (!  (=> (and ($IsBox |st#1@@4| Tclass.M0.State) ($IsBox |st'#0@@5| Tclass.M0.State)) (=> (and (|Set#IsMember| |sts##1_1_1_4@0| |st#1@@4|) (|Set#IsMember| |sts##1_1_1_4@0| |st'#0@@5|)) (forall ((|p#1@@8| T@U) ) (!  (=> ($IsBox |p#1@@8| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#1@@4|) |p#1@@8|) (|Set#IsMember| (M0.__default.DomSt |st'#0@@5|) |p#1@@8|)) (= (M0.__default.GetSt |p#1@@8| |st#1@@4|) (M0.__default.GetSt |p#1@@8| |st'#0@@5|))))
 :pattern ( (M0.__default.GetSt |p#1@@8| |st'#0@@5|))
 :pattern ( (M0.__default.GetSt |p#1@@8| |st#1@@4|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@5|) |p#1@@8|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@4|) |p#1@@8|))
))))
 :pattern ( (M0.__default.DomSt |st'#0@@5|) (M0.__default.DomSt |st#1@@4|))
 :pattern ( (M0.__default.DomSt |st'#0@@5|) (|Set#IsMember| |sts##1_1_1_4@0| |st#1@@4|))
 :pattern ( (M0.__default.DomSt |st#1@@4|) (|Set#IsMember| |sts##1_1_1_4@0| |st'#0@@5|))
 :pattern ( (|Set#IsMember| |sts##1_1_1_4@0| |st'#0@@5|) (|Set#IsMember| |sts##1_1_1_4@0| |st#1@@4|))
)))) (and (=> (= (ControlFlow 0 124) (- 0 126)) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@0|) |p#1_1_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@0|) |p#1_1_0@0|) (and (=> (= (ControlFlow 0 124) (- 0 125)) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_1_4@0| |useCache##1_1_1_4@0|)) |p#1_1_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_1_4@0| |useCache##1_1_1_4@0|)) |p#1_1_0@0|) (=> (and ($IsGoodHeap $Heap@23) ($IsHeapAnchor $Heap@23)) (=> (and (and (and (and (|M0.__default.Combine#canCall| |sts##1_1_1_4@0| |useCache##1_1_1_4@0|) (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts##1_1_1_4@0| |useCache##1_1_1_4@0|))) (|M0.__default.GetSt#canCall| |p#1_1_0@0| |call4formal@stRepr#0@0@@0|)) (= (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_1_4@0| |useCache##1_1_1_4@0|)) (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0@@0|))) (and (= $Heap@22 $Heap@23) (= (ControlFlow 0 124) 118))) anon18_correct))))))))))))))))))))))))))))))))))
(let ((anon58_Else_correct  (=> (and (not (and (= (M0.__default.GetSt |p#1_1_0@0| |$rhs#1_0@0|) (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|)) (= (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|) (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))))) (= (ControlFlow 0 144) 124)) anon17_correct)))
(let ((anon58_Then_correct  (=> (and (= (M0.__default.GetSt |p#1_1_0@0| |$rhs#1_0@0|) (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|)) (= (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|) (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (=> (and (and ($IsAllocBox |p#1_1_0@0| Tclass.M0.Path $Heap@20) ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@20)) (and (= |##useCache#1_1_1_1@0| (U_2_bool (Lit boolType (bool_2_U false)))) ($IsAlloc boolType (bool_2_U |##useCache#1_1_1_1@0|) TBool $Heap@20))) (and (=> (= (ControlFlow 0 139) (- 0 143)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (=> (and (= |##st#1_1_1_4@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) ($IsAllocBox |##st#1_1_1_4@0| Tclass.M0.State $Heap@20)) (and (=> (= (ControlFlow 0 139) (- 0 142)) (|Set#IsMember| (M0.__default.DomSt |##st#1_1_1_4@0|) |p#1_1_0@0|)) (=> (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) (=> (and (and ($IsAllocBox |p#1_1_0@0| Tclass.M0.Path $Heap@20) ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@20)) (and (= |##useCache#1_1_1_2@0| (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAlloc boolType (bool_2_U |##useCache#1_1_1_2@0|) TBool $Heap@20))) (and (=> (= (ControlFlow 0 139) (- 0 141)) (not (|Set#Equal| |stsC#0| |Set#Empty|))) (=> (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (=> (and (= |##st#1_1_1_5@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))) ($IsAllocBox |##st#1_1_1_5@0| Tclass.M0.State $Heap@20)) (and (=> (= (ControlFlow 0 139) (- 0 140)) (|Set#IsMember| (M0.__default.DomSt |##st#1_1_1_5@0|) |p#1_1_0@0|)) (=> (and (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))) (= (ControlFlow 0 139) 124)) anon17_correct)))))))))))))))
(let ((anon57_Else_correct  (=> (or (not (= (M0.__default.GetSt |p#1_1_0@0| |$rhs#1_0@0|) (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|))) (not true)) (and (=> (= (ControlFlow 0 150) 139) anon58_Then_correct) (=> (= (ControlFlow 0 150) 144) anon58_Else_correct)))))
(let ((anon57_Then_correct  (=> (and (= (M0.__default.GetSt |p#1_1_0@0| |$rhs#1_0@0|) (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|)) ($IsAllocBox |p#1_1_0@0| Tclass.M0.Path $Heap@20)) (and (=> (= (ControlFlow 0 145) (- 0 149)) true) (=> ($IsAllocBox |call4formal@stRepr#0@0| Tclass.M0.State $Heap@20) (and (=> (= (ControlFlow 0 145) (- 0 148)) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0|) |p#1_1_0@0|)) (=> (|M0.__default.GetSt#canCall| |p#1_1_0@0| |call4formal@stRepr#0@0|) (=> (and (and ($IsAllocBox |p#1_1_0@0| Tclass.M0.Path $Heap@20) ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@20)) (and (= |##useCache#1_1_1_0@0| (U_2_bool (Lit boolType (bool_2_U false)))) ($IsAlloc boolType (bool_2_U |##useCache#1_1_1_0@0|) TBool $Heap@20))) (and (=> (= (ControlFlow 0 145) (- 0 147)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (=> (and (= |##st#1_1_1_3@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) ($IsAllocBox |##st#1_1_1_3@0| Tclass.M0.State $Heap@20)) (and (=> (= (ControlFlow 0 145) (- 0 146)) (|Set#IsMember| (M0.__default.DomSt |##st#1_1_1_3@0|) |p#1_1_0@0|)) (=> (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) (and (=> (= (ControlFlow 0 145) 139) anon58_Then_correct) (=> (= (ControlFlow 0 145) 144) anon58_Else_correct)))))))))))))))
(let ((anon56_Else_correct  (=> (or (not (= |call4formal@stRepr#0@0| |st#0@@17|)) (not true)) (and (=> (= (ControlFlow 0 151) (- 0 164)) true) (and (=> (= (ControlFlow 0 151) (- 0 163)) (|Set#IsMember| |sts#0@@5| |call4formal@stRepr#0@0|)) (=> (|Set#IsMember| |sts#0@@5| |call4formal@stRepr#0@0|) (and (=> (= (ControlFlow 0 151) (- 0 162)) true) (=> (= |useCache##1_1_1_0@0| (U_2_bool (Lit boolType (bool_2_U false)))) (and (=> (= (ControlFlow 0 151) (- 0 161)) (|Set#IsMember| |sts#0@@5| |call4formal@stRepr#0@0|)) (=> (|Set#IsMember| |sts#0@@5| |call4formal@stRepr#0@0|) (=> (and ($IsGoodHeap $Heap@19) ($IsHeapAnchor $Heap@19)) (=> (and (and (|M0.__default.DomSt#canCall| |call4formal@stRepr#0@0|) (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0|) |p#1_1_0@0|) (and (|M0.__default.Combine#canCall| |sts#0@@5| |useCache##1_1_1_0@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| |useCache##1_1_1_0@0|))))) (and (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0|) |p#1_1_0@0|) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_1_1_0@0|)) |p#1_1_0@0|)) (= $Heap@17 $Heap@19))) (and (=> (= (ControlFlow 0 151) (- 0 160)) true) (=> (= |useCache##1_1_1_1@0| (U_2_bool (Lit boolType (bool_2_U false)))) (and (=> (= (ControlFlow 0 151) (- 0 159)) (|Set#IsMember| |sts#0@@5| |call4formal@stRepr#0@0|)) (=> (|Set#IsMember| |sts#0@@5| |call4formal@stRepr#0@0|) (and (=> (= (ControlFlow 0 151) (- 0 158)) (=> (|M0.__default.Compatible#canCall| |sts#0@@5|) (or (M0.__default.Compatible |sts#0@@5|) (forall ((|st#1@@5| T@U) (|st'#0@@6| T@U) ) (!  (=> (and ($IsBox |st#1@@5| Tclass.M0.State) ($IsBox |st'#0@@6| Tclass.M0.State)) (=> (and (|Set#IsMember| |sts#0@@5| |st#1@@5|) (|Set#IsMember| |sts#0@@5| |st'#0@@6|)) (forall ((|p#1@@9| T@U) ) (!  (=> ($IsBox |p#1@@9| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#1@@5|) |p#1@@9|) (|Set#IsMember| (M0.__default.DomSt |st'#0@@6|) |p#1@@9|)) (= (M0.__default.GetSt |p#1@@9| |st#1@@5|) (M0.__default.GetSt |p#1@@9| |st'#0@@6|))))
 :pattern ( (M0.__default.GetSt |p#1@@9| |st'#0@@6|))
 :pattern ( (M0.__default.GetSt |p#1@@9| |st#1@@5|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@6|) |p#1@@9|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@5|) |p#1@@9|))
))))
 :pattern ( (M0.__default.DomSt |st'#0@@6|) (M0.__default.DomSt |st#1@@5|))
 :pattern ( (M0.__default.DomSt |st'#0@@6|) (|Set#IsMember| |sts#0@@5| |st#1@@5|))
 :pattern ( (M0.__default.DomSt |st#1@@5|) (|Set#IsMember| |sts#0@@5| |st'#0@@6|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st'#0@@6|) (|Set#IsMember| |sts#0@@5| |st#1@@5|))
))))) (=> (=> (|M0.__default.Compatible#canCall| |sts#0@@5|) (or (M0.__default.Compatible |sts#0@@5|) (forall ((|st#1@@6| T@U) (|st'#0@@7| T@U) ) (!  (=> (and ($IsBox |st#1@@6| Tclass.M0.State) ($IsBox |st'#0@@7| Tclass.M0.State)) (=> (and (|Set#IsMember| |sts#0@@5| |st#1@@6|) (|Set#IsMember| |sts#0@@5| |st'#0@@7|)) (forall ((|p#1@@10| T@U) ) (!  (=> ($IsBox |p#1@@10| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#1@@6|) |p#1@@10|) (|Set#IsMember| (M0.__default.DomSt |st'#0@@7|) |p#1@@10|)) (= (M0.__default.GetSt |p#1@@10| |st#1@@6|) (M0.__default.GetSt |p#1@@10| |st'#0@@7|))))
 :pattern ( (M0.__default.GetSt |p#1@@10| |st'#0@@7|))
 :pattern ( (M0.__default.GetSt |p#1@@10| |st#1@@6|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@7|) |p#1@@10|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@6|) |p#1@@10|))
))))
 :pattern ( (M0.__default.DomSt |st'#0@@7|) (M0.__default.DomSt |st#1@@6|))
 :pattern ( (M0.__default.DomSt |st'#0@@7|) (|Set#IsMember| |sts#0@@5| |st#1@@6|))
 :pattern ( (M0.__default.DomSt |st#1@@6|) (|Set#IsMember| |sts#0@@5| |st'#0@@7|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st'#0@@7|) (|Set#IsMember| |sts#0@@5| |st#1@@6|))
)))) (and (=> (= (ControlFlow 0 151) (- 0 157)) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0|) |p#1_1_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0|) |p#1_1_0@0|) (and (=> (= (ControlFlow 0 151) (- 0 156)) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_1_1_1@0|)) |p#1_1_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_1_1_1@0|)) |p#1_1_0@0|) (=> (and ($IsGoodHeap $Heap@20) ($IsHeapAnchor $Heap@20)) (=> (and (and (and (and (|M0.__default.Combine#canCall| |sts#0@@5| |useCache##1_1_1_1@0|) (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| |useCache##1_1_1_1@0|))) (|M0.__default.GetSt#canCall| |p#1_1_0@0| |call4formal@stRepr#0@0|)) (= (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_1_1_1@0|)) (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|))) (and (= $Heap@19 $Heap@20) ($IsAllocBox |p#1_1_0@0| Tclass.M0.Path $Heap@20))) (and (=> (= (ControlFlow 0 151) (- 0 155)) true) (=> ($IsAllocBox |$rhs#1_0@0| Tclass.M0.State $Heap@20) (and (=> (= (ControlFlow 0 151) (- 0 154)) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_1_0@0|)) (=> (and (|M0.__default.GetSt#canCall| |p#1_1_0@0| |$rhs#1_0@0|) ($IsAllocBox |p#1_1_0@0| Tclass.M0.Path $Heap@20)) (and (=> (= (ControlFlow 0 151) (- 0 153)) true) (=> ($IsAllocBox |call4formal@stRepr#0@0| Tclass.M0.State $Heap@20) (and (=> (= (ControlFlow 0 151) (- 0 152)) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0|) |p#1_1_0@0|)) (=> (|M0.__default.GetSt#canCall| |p#1_1_0@0| |call4formal@stRepr#0@0|) (and (=> (= (ControlFlow 0 151) 145) anon57_Then_correct) (=> (= (ControlFlow 0 151) 150) anon57_Else_correct))))))))))))))))))))))))))))))))))
(let ((anon56_Then_correct  (=> (= |call4formal@stRepr#0@0| |st#0@@17|) (=> (and (= |sts##1_1_0_0@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|)) (= |useCache##1_1_0_0@0| (U_2_bool (Lit boolType (bool_2_U true))))) (and (=> (= (ControlFlow 0 119) (- 0 123)) (|Set#IsMember| |sts##1_1_0_0@0| |stC#0@@3|)) (=> (|Set#IsMember| |sts##1_1_0_0@0| |stC#0@@3|) (and (=> (= (ControlFlow 0 119) (- 0 122)) (=> (|M0.__default.Compatible#canCall| |sts##1_1_0_0@0|) (or (M0.__default.Compatible |sts##1_1_0_0@0|) (forall ((|st#1@@7| T@U) (|st'#0@@8| T@U) ) (!  (=> (and ($IsBox |st#1@@7| Tclass.M0.State) ($IsBox |st'#0@@8| Tclass.M0.State)) (=> (and (|Set#IsMember| |sts##1_1_0_0@0| |st#1@@7|) (|Set#IsMember| |sts##1_1_0_0@0| |st'#0@@8|)) (forall ((|p#1@@11| T@U) ) (!  (=> ($IsBox |p#1@@11| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#1@@7|) |p#1@@11|) (|Set#IsMember| (M0.__default.DomSt |st'#0@@8|) |p#1@@11|)) (= (M0.__default.GetSt |p#1@@11| |st#1@@7|) (M0.__default.GetSt |p#1@@11| |st'#0@@8|))))
 :pattern ( (M0.__default.GetSt |p#1@@11| |st'#0@@8|))
 :pattern ( (M0.__default.GetSt |p#1@@11| |st#1@@7|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@8|) |p#1@@11|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@7|) |p#1@@11|))
))))
 :pattern ( (M0.__default.DomSt |st'#0@@8|) (M0.__default.DomSt |st#1@@7|))
 :pattern ( (M0.__default.DomSt |st'#0@@8|) (|Set#IsMember| |sts##1_1_0_0@0| |st#1@@7|))
 :pattern ( (M0.__default.DomSt |st#1@@7|) (|Set#IsMember| |sts##1_1_0_0@0| |st'#0@@8|))
 :pattern ( (|Set#IsMember| |sts##1_1_0_0@0| |st'#0@@8|) (|Set#IsMember| |sts##1_1_0_0@0| |st#1@@7|))
))))) (=> (=> (|M0.__default.Compatible#canCall| |sts##1_1_0_0@0|) (or (M0.__default.Compatible |sts##1_1_0_0@0|) (forall ((|st#1@@8| T@U) (|st'#0@@9| T@U) ) (!  (=> (and ($IsBox |st#1@@8| Tclass.M0.State) ($IsBox |st'#0@@9| Tclass.M0.State)) (=> (and (|Set#IsMember| |sts##1_1_0_0@0| |st#1@@8|) (|Set#IsMember| |sts##1_1_0_0@0| |st'#0@@9|)) (forall ((|p#1@@12| T@U) ) (!  (=> ($IsBox |p#1@@12| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#1@@8|) |p#1@@12|) (|Set#IsMember| (M0.__default.DomSt |st'#0@@9|) |p#1@@12|)) (= (M0.__default.GetSt |p#1@@12| |st#1@@8|) (M0.__default.GetSt |p#1@@12| |st'#0@@9|))))
 :pattern ( (M0.__default.GetSt |p#1@@12| |st'#0@@9|))
 :pattern ( (M0.__default.GetSt |p#1@@12| |st#1@@8|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@9|) |p#1@@12|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@8|) |p#1@@12|))
))))
 :pattern ( (M0.__default.DomSt |st'#0@@9|) (M0.__default.DomSt |st#1@@8|))
 :pattern ( (M0.__default.DomSt |st'#0@@9|) (|Set#IsMember| |sts##1_1_0_0@0| |st#1@@8|))
 :pattern ( (M0.__default.DomSt |st#1@@8|) (|Set#IsMember| |sts##1_1_0_0@0| |st'#0@@9|))
 :pattern ( (|Set#IsMember| |sts##1_1_0_0@0| |st'#0@@9|) (|Set#IsMember| |sts##1_1_0_0@0| |st#1@@8|))
)))) (and (=> (= (ControlFlow 0 119) (- 0 121)) (|Set#IsMember| (M0.__default.DomSt |stC#0@@3|) |p#1_1_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt |stC#0@@3|) |p#1_1_0@0|) (and (=> (= (ControlFlow 0 119) (- 0 120)) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_0_0@0| |useCache##1_1_0_0@0|)) |p#1_1_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_0_0@0| |useCache##1_1_0_0@0|)) |p#1_1_0@0|) (=> (and ($IsGoodHeap $Heap@18) ($IsHeapAnchor $Heap@18)) (=> (and (and (and (and (|M0.__default.Combine#canCall| |sts##1_1_0_0@0| |useCache##1_1_0_0@0|) (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts##1_1_0_0@0| |useCache##1_1_0_0@0|))) (|M0.__default.GetSt#canCall| |p#1_1_0@0| |stC#0@@3|)) (= (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_0_0@0| |useCache##1_1_0_0@0|)) (M0.__default.GetSt |p#1_1_0@0| |stC#0@@3|))) (and (= $Heap@17 $Heap@18) (= (ControlFlow 0 119) 118))) anon18_correct))))))))))))))
(let ((anon55_Else_correct  (=> (and (and (= |sts##1_1_0@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|)) (= |useCache##1_1_0@0| (U_2_bool (Lit boolType (bool_2_U false))))) (and ($IsBox |call4formal@stRepr#0@@0| Tclass.M0.State) ($IsAllocBox |call4formal@stRepr#0@@0| Tclass.M0.State $Heap@@6))) (and (=> (= (ControlFlow 0 165) (- 0 168)) (not (|Set#Equal| |sts##1_1_0@0| |Set#Empty|))) (=> (not (|Set#Equal| |sts##1_1_0@0| |Set#Empty|)) (and (=> (= (ControlFlow 0 165) (- 0 167)) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_0@0| |useCache##1_1_0@0|)) |p#1_1_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_0@0| |useCache##1_1_0@0|)) |p#1_1_0@0|) (=> (and ($IsGoodHeap $Heap@17) ($IsHeapAnchor $Heap@17)) (=> (and (and (and ($IsBox |call4formal@stRepr#0@0| Tclass.M0.State) ($IsAllocBox |call4formal@stRepr#0@0| Tclass.M0.State $Heap@17)) (=> (|Set#IsMember| |sts##1_1_0@0| |call4formal@stRepr#0@0|) (and (|M0.__default.DomSt#canCall| |call4formal@stRepr#0@0|) (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0|) |p#1_1_0@0|) (and (|M0.__default.GetSt#canCall| |p#1_1_0@0| |call4formal@stRepr#0@0|) (and (|M0.__default.Combine#canCall| |sts##1_1_0@0| |useCache##1_1_0@0|) (|M0.__default.GetSt#canCall| |p#1_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts##1_1_0@0| |useCache##1_1_0@0|)))))))) (and (and (|Set#IsMember| |sts##1_1_0@0| |call4formal@stRepr#0@0|) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0|) |p#1_1_0@0|)) (and (= (M0.__default.GetSt |p#1_1_0@0| |call4formal@stRepr#0@0|) (M0.__default.GetSt |p#1_1_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_1_0@0| |useCache##1_1_0@0|))) (= $Heap@2 $Heap@17)))) (and (=> (= (ControlFlow 0 165) (- 0 166)) true) (and (=> (= (ControlFlow 0 165) 119) anon56_Then_correct) (=> (= (ControlFlow 0 165) 151) anon56_Else_correct))))))))))))
(let ((anon55_Then_correct  (=> ($IsAllocBox |p#1_1_0@0| Tclass.M0.Path $Heap@2) (and (=> (= (ControlFlow 0 113) (- 0 116)) true) (=> ($IsAllocBox |$rhs#1_0@0| Tclass.M0.State $Heap@2) (and (=> (= (ControlFlow 0 113) (- 0 115)) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_1_0@0|)) (=> (and (|M0.__default.GetSt#canCall| |p#1_1_0@0| |$rhs#1_0@0|) ($IsAllocBox |p#1_1_0@0| Tclass.M0.Path $Heap@2)) (and (=> (= (ControlFlow 0 113) (- 0 114)) true) (=> (and ($IsAllocBox |$rhs#1_1@0| Tclass.M0.State $Heap@2) (= (ControlFlow 0 113) (- 0 112))) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_1@0|) |p#1_1_0@0|))))))))))
(let ((anon54_Then_correct  (=> ($IsBox |p#1_1_0@0| Tclass.M0.Path) (and (=> (= (ControlFlow 0 169) (- 0 170)) true) (=> (and (and ($IsAllocBox |$rhs#1_0@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| |$rhs#1_0@0|)) (and (|M0.__default.DomSt#canCall| |$rhs#1_0@0|) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_1_0@0|))) (and (=> (= (ControlFlow 0 169) 113) anon55_Then_correct) (=> (= (ControlFlow 0 169) 165) anon55_Else_correct)))))))
(let ((anon63_Else_correct  (=> (and (= |sts##1_2_0_0@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|)) (= |useCache##1_2_0_0@0| (U_2_bool (Lit boolType (bool_2_U false))))) (and (=> (= (ControlFlow 0 102) (- 0 103)) (|Set#IsMember| |sts##1_2_0_0@0| |st#0@@17|)) (=> (|Set#IsMember| |sts##1_2_0_0@0| |st#0@@17|) (=> (and ($IsGoodHeap $Heap@16) ($IsHeapAnchor $Heap@16)) (=> (and (and (and (|M0.__default.DomSt#canCall| |st#0@@17|) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@17|) |p#1_2_0@0|) (and (|M0.__default.Combine#canCall| |sts##1_2_0_0@0| |useCache##1_2_0_0@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts##1_2_0_0@0| |useCache##1_2_0_0@0|))))) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@17|) |p#1_2_0@0|) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_0_0@0| |useCache##1_2_0_0@0|)) |p#1_2_0@0|))) (and (= $Heap@2 $Heap@16) (= (ControlFlow 0 102) (- 0 101)))) (not (|Set#IsMember| (M0.__default.DomSt |st#0@@17|) |p#1_2_0@0|)))))))))
(let ((anon63_Then_correct true))
(let ((anon62_Then_correct  (and (=> (= (ControlFlow 0 104) 100) anon63_Then_correct) (=> (= (ControlFlow 0 104) 102) anon63_Else_correct))))
(let ((anon69_Then_correct  (=> (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) ($IsAllocBox |stOrig#0| Tclass.M0.State $Heap@5)) (=> (and (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|)) (and (= |sts##1_2_1_0_0_0@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|)) (= |useCache##1_2_1_0_0_0@0| (U_2_bool (Lit boolType (bool_2_U false)))))) (and (=> (= (ControlFlow 0 87) (- 0 93)) (not (|Set#Equal| |sts##1_2_1_0_0_0@0| |Set#Empty|))) (=> (not (|Set#Equal| |sts##1_2_1_0_0_0@0| |Set#Empty|)) (and (=> (= (ControlFlow 0 87) (- 0 92)) (forall ((|st#1@@9| T@U) ) (!  (=> ($IsBox |st#1@@9| Tclass.M0.State) (and (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#1@@9|) (M0.__default.ValidState |st#1@@9|)) (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#1@@9|) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@9|))))
 :pattern ( (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@9|))
 :pattern ( (M0.__default.ValidState |st#1@@9|))
 :pattern ( (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#1@@9|))
))) (=> (forall ((|st#1@@10| T@U) ) (!  (=> ($IsBox |st#1@@10| Tclass.M0.State) (and (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#1@@10|) (M0.__default.ValidState |st#1@@10|)) (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#1@@10|) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@10|))))
 :pattern ( (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@10|))
 :pattern ( (M0.__default.ValidState |st#1@@10|))
 :pattern ( (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#1@@10|))
)) (and (=> (= (ControlFlow 0 87) (- 0 91)) (=> |useCache##1_2_1_0_0_0@0| (forall ((|st#3| T@U) ) (!  (=> ($IsBox |st#3| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#3|) (M0.__default.ConsistentCache |st#3|)))
 :pattern ( (M0.__default.ConsistentCache |st#3|))
 :pattern ( (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#3|))
)))) (=> (=> |useCache##1_2_1_0_0_0@0| (forall ((|st#3@@0| T@U) ) (!  (=> ($IsBox |st#3@@0| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#3@@0|) (M0.__default.ConsistentCache |st#3@@0|)))
 :pattern ( (M0.__default.ConsistentCache |st#3@@0|))
 :pattern ( (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#3@@0|))
))) (=> (and ($IsGoodHeap $Heap@14) ($IsHeapAnchor $Heap@14)) (=> (and (and (and (|M0.__default.Combine#canCall| |sts##1_2_1_0_0_0@0| |useCache##1_2_1_0_0_0@0|) (let ((|stCombined#0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts##1_2_1_0_0_0@0| |useCache##1_2_1_0_0_0@0|)))
 (and (|M0.__default.ValidState#canCall| |stCombined#0|) (=> (M0.__default.ValidState |stCombined#0|) (and (|M0.__default.Extends#canCall| |stOrig#0| |stCombined#0|) (=> (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |stCombined#0|) (=> |useCache##1_2_1_0_0_0@0| (and (|M0.__default.ConsistentCache#canCall| |stCombined#0|) (=> (M0.__default.ConsistentCache |stCombined#0|) (and (forall ((|st#7| T@U) ) (!  (=> ($IsBox |st#7| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#7|) (and (|M0.__default.DomC#canCall| |st#7|) (|M0.__default.DomC#canCall| |stCombined#0|))))
 :pattern ( (M0.__default.DomC |st#7|))
 :pattern ( (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#7|))
)) (=> (forall ((|st#7@@0| T@U) ) (!  (=> ($IsBox |st#7@@0| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#7@@0|) (|Set#Subset| (M0.__default.DomC |st#7@@0|) (M0.__default.DomC |stCombined#0|))))
 :pattern ( (M0.__default.DomC |st#7@@0|))
 :pattern ( (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#7@@0|))
)) (forall ((|h#1| T@U) ) (!  (=> ($IsBox |h#1| Tclass.M0.HashValue) (and (|M0.__default.DomC#canCall| |stCombined#0|) (=> (|Set#IsMember| (M0.__default.DomC |stCombined#0|) |h#1|) (forall ((|st#8| T@U) ) (!  (=> ($IsBox |st#8| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#8|) (|M0.__default.DomC#canCall| |st#8|)))
 :pattern ( (M0.__default.DomC |st#8|))
 :pattern ( (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#8|))
)))))
 :pattern ( (|Set#IsMember| (M0.__default.DomC |stCombined#0|) |h#1|))
))))))))))))) (and (let ((|stCombined#0@@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_1_0_0_0@0| |useCache##1_2_1_0_0_0@0|)))
 (and (|M0.__default.ValidState#canCall| |stCombined#0@@0|) (and (M0.__default.ValidState |stCombined#0@@0|) (forall ((|p#0@@16| T@U) ) (!  (=> ($IsBox |p#0@@16| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |stCombined#0@@0|) |p#0@@16|) (M0.__default.WellFounded |p#0@@16|)))
 :pattern ( (M0.__default.WellFounded |p#0@@16|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |stCombined#0@@0|) |p#0@@16|))
))))) (let ((|stCombined#0@@1| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_1_0_0_0@0| |useCache##1_2_1_0_0_0@0|)))
(M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |stCombined#0@@1|)))) (and (and (let ((|stCombined#0@@2| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_1_0_0_0@0| |useCache##1_2_1_0_0_0@0|)))
 (=> |useCache##1_2_1_0_0_0@0| (and (|M0.__default.ConsistentCache#canCall| |stCombined#0@@2|) (and (M0.__default.ConsistentCache |stCombined#0@@2|) (forall ((|cmd#0@@2| T@U) (|deps#0@@2| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#0@@2| (TSeq TChar)) ($Is SetType |deps#0@@2| (TSet Tclass.M0.Path))) ($Is SeqType |e#0@@1| (TSeq TChar))) (=> (|Set#IsMember| (M0.__default.DomC |stCombined#0@@2|) (M0.__default.Hash (M0.__default.Loc |cmd#0@@2| |deps#0@@2| |e#0@@1|))) (|Set#IsMember| (M0.__default.DomSt |stCombined#0@@2|) (M0.__default.Loc |cmd#0@@2| |deps#0@@2| |e#0@@1|))))
 :pattern ( (M0.__default.Loc |cmd#0@@2| |deps#0@@2| |e#0@@1|))
)))))) (let ((|stCombined#0@@3| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_1_0_0_0@0| |useCache##1_2_1_0_0_0@0|)))
 (=> |useCache##1_2_1_0_0_0@0| (forall ((|st#7@@1| T@U) ) (!  (=> ($IsBox |st#7@@1| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#7@@1|) (|Set#Subset| (M0.__default.DomC |st#7@@1|) (M0.__default.DomC |stCombined#0@@3|))))
 :pattern ( (M0.__default.DomC |st#7@@1|))
 :pattern ( (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#7@@1|))
))))) (and (let ((|stCombined#0@@4| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_1_0_0_0@0| |useCache##1_2_1_0_0_0@0|)))
 (=> |useCache##1_2_1_0_0_0@0| (forall ((|h#1@@0| T@U) ) (!  (=> ($IsBox |h#1@@0| Tclass.M0.HashValue) (=> (|Set#IsMember| (M0.__default.DomC |stCombined#0@@4|) |h#1@@0|) (exists ((|st#8@@0| T@U) ) (!  (and ($IsBox |st#8@@0| Tclass.M0.State) (and (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#8@@0|) (|Set#IsMember| (M0.__default.DomC |st#8@@0|) |h#1@@0|)))
 :pattern ( (M0.__default.DomC |st#8@@0|))
 :pattern ( (|Set#IsMember| |sts##1_2_1_0_0_0@0| |st#8@@0|))
))))
 :pattern ( (|Set#IsMember| (M0.__default.DomC |stCombined#0@@4|) |h#1@@0|))
)))) (= $Heap@5 $Heap@14)))) (and (=> (= (ControlFlow 0 87) (- 0 90)) true) (and (=> (= (ControlFlow 0 87) (- 0 89)) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |$rhs#1_0@0|)) (=> (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |$rhs#1_0@0|) (=> (and ($IsGoodHeap $Heap@15) ($IsHeapAnchor $Heap@15)) (=> (and (and (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |$rhs#1_0@0|)) (= (M0.__default.Oracle |p#1_2_0@0| |stOrig#0|) (M0.__default.Oracle |p#1_2_0@0| |$rhs#1_0@0|))) (and (= $Heap@14 $Heap@15) ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@15))) (and (=> (= (ControlFlow 0 87) (- 0 88)) true) (=> (and (and ($IsAllocBox |$rhs#1_0@0| Tclass.M0.State $Heap@15) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |$rhs#1_0@0|)) (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |$rhs#1_0@0|) (= (ControlFlow 0 87) (- 0 86)))) (= (M0.__default.Oracle |p#1_2_0@0| |stOrig#0|) (M0.__default.Oracle |p#1_2_0@0| |$rhs#1_0@0|)))))))))))))))))))))
(let ((anon68_Then_correct  (=> (and (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) ($IsAllocBox |st#0@@17| Tclass.M0.State $Heap@5)) (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |st#0@@17|) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |st#0@@17|))) (and (=> (= (ControlFlow 0 84) (- 0 85)) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#0@@17|)) (=> (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#0@@17|) (=> (and ($IsGoodHeap $Heap@13) ($IsHeapAnchor $Heap@13)) (=> (and (and (and (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |st#0@@17|)) (= (M0.__default.Oracle |p#1_2_0@0| |stOrig#0|) (M0.__default.Oracle |p#1_2_0@0| |st#0@@17|))) (and (= $Heap@5 $Heap@13) ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@13))) (and (and ($IsAllocBox |stOrig#0| Tclass.M0.State $Heap@13) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|)) (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|) (= (ControlFlow 0 84) (- 0 83))))) (= (M0.__default.Oracle |p#1_2_0@0| |st#0@@17|) (M0.__default.Oracle |p#1_2_0@0| |stOrig#0|)))))))))
(let ((anon67_Then_correct  (=> (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) ($IsAllocBox |stC#0@@3| Tclass.M0.State $Heap@5)) (=> (and (and (and (|Set#IsMember| (M0.__default.DomSt |stC#0@@3|) |p#1_2_0@0|) (|M0.__default.GetSt#canCall| |p#1_2_0@0| |stC#0@@3|)) (and (|M0.__default.GetSt#canCall| |p#1_2_0@0| |stC#0@@3|) ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5))) (and (and ($IsAllocBox |st#0@@17| Tclass.M0.State $Heap@5) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |st#0@@17|)) (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |st#0@@17|) (= (ControlFlow 0 82) (- 0 81))))) (= (M0.__default.GetSt |p#1_2_0@0| |stC#0@@3|) (M0.__default.Oracle |p#1_2_0@0| |st#0@@17|))))))
(let ((anon66_Then_correct  (=> ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) (=> (and ($IsAllocBox |$rhs#1_1@0| Tclass.M0.State $Heap@5) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_1@0|) |p#1_2_0@0|)) (=> (and (and (|M0.__default.GetSt#canCall| |p#1_2_0@0| |$rhs#1_1@0|) (|M0.__default.GetSt#canCall| |p#1_2_0@0| |$rhs#1_1@0|)) (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) ($IsAllocBox |stC#0@@3| Tclass.M0.State $Heap@5))) (and (=> (= (ControlFlow 0 79) (- 0 80)) (|Set#IsMember| (M0.__default.DomSt |stC#0@@3|) |p#1_2_0@0|)) (=> (|M0.__default.GetSt#canCall| |p#1_2_0@0| |stC#0@@3|) (=> (and (|M0.__default.GetSt#canCall| |p#1_2_0@0| |stC#0@@3|) (= (ControlFlow 0 79) (- 0 78))) (= (M0.__default.GetSt |p#1_2_0@0| |$rhs#1_1@0|) (M0.__default.GetSt |p#1_2_0@0| |stC#0@@3|))))))))))
(let ((anon65_Then_correct  (=> ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) (and (=> (= (ControlFlow 0 76) (- 0 77)) true) (=> (and ($IsAllocBox |$rhs#1_1@0| Tclass.M0.State $Heap@5) (= (ControlFlow 0 76) (- 0 75))) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_1@0|) |p#1_2_0@0|))))))
(let ((anon46_correct  (=> (= (ControlFlow 0 70) (- 0 69)) (= (M0.__default.GetSt |p#1_2_0@0| |$rhs#1_1@0|) (M0.__default.Oracle |p#1_2_0@0| |$rhs#1_0@0|)))))
(let ((anon69_Else_correct  (=> (and (= (M0.__default.GetSt |p#1_2_0@0| |$rhs#1_1@0|) (M0.__default.Oracle |p#1_2_0@0| |$rhs#1_0@0|)) (= (ControlFlow 0 94) 70)) anon46_correct)))
(let ((anon64_Then_correct  (=> (= |call4formal@stRepr#0@0@@1| |stC#0@@3|) (and (and (and (and (and (=> (= (ControlFlow 0 95) 76) anon65_Then_correct) (=> (= (ControlFlow 0 95) 79) anon66_Then_correct)) (=> (= (ControlFlow 0 95) 82) anon67_Then_correct)) (=> (= (ControlFlow 0 95) 84) anon68_Then_correct)) (=> (= (ControlFlow 0 95) 87) anon69_Then_correct)) (=> (= (ControlFlow 0 95) 94) anon69_Else_correct)))))
(let ((anon75_Else_correct  (=> (and (= (M0.__default.GetSt |p#1_2_0@0| |$rhs#1_1@0|) (M0.__default.Oracle |p#1_2_0@0| |$rhs#1_0@0|)) (= (ControlFlow 0 71) 70)) anon46_correct)))
(let ((anon75_Then_correct  (=> (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) ($IsAllocBox |stOrig#0| Tclass.M0.State $Heap@5)) (=> (and (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|)) (and (= |sts##1_2_2_0_0_0@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|)) (= |useCache##1_2_2_0_0_0@0| (U_2_bool (Lit boolType (bool_2_U false)))))) (and (=> (= (ControlFlow 0 62) (- 0 68)) (not (|Set#Equal| |sts##1_2_2_0_0_0@0| |Set#Empty|))) (=> (not (|Set#Equal| |sts##1_2_2_0_0_0@0| |Set#Empty|)) (and (=> (= (ControlFlow 0 62) (- 0 67)) (forall ((|st#1@@11| T@U) ) (!  (=> ($IsBox |st#1@@11| Tclass.M0.State) (and (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#1@@11|) (M0.__default.ValidState |st#1@@11|)) (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#1@@11|) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@11|))))
 :pattern ( (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@11|))
 :pattern ( (M0.__default.ValidState |st#1@@11|))
 :pattern ( (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#1@@11|))
))) (=> (forall ((|st#1@@12| T@U) ) (!  (=> ($IsBox |st#1@@12| Tclass.M0.State) (and (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#1@@12|) (M0.__default.ValidState |st#1@@12|)) (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#1@@12|) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@12|))))
 :pattern ( (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@12|))
 :pattern ( (M0.__default.ValidState |st#1@@12|))
 :pattern ( (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#1@@12|))
)) (and (=> (= (ControlFlow 0 62) (- 0 66)) (=> |useCache##1_2_2_0_0_0@0| (forall ((|st#3@@1| T@U) ) (!  (=> ($IsBox |st#3@@1| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#3@@1|) (M0.__default.ConsistentCache |st#3@@1|)))
 :pattern ( (M0.__default.ConsistentCache |st#3@@1|))
 :pattern ( (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#3@@1|))
)))) (=> (=> |useCache##1_2_2_0_0_0@0| (forall ((|st#3@@2| T@U) ) (!  (=> ($IsBox |st#3@@2| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#3@@2|) (M0.__default.ConsistentCache |st#3@@2|)))
 :pattern ( (M0.__default.ConsistentCache |st#3@@2|))
 :pattern ( (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#3@@2|))
))) (=> (and ($IsGoodHeap $Heap@11) ($IsHeapAnchor $Heap@11)) (=> (and (and (and (|M0.__default.Combine#canCall| |sts##1_2_2_0_0_0@0| |useCache##1_2_2_0_0_0@0|) (let ((|stCombined#0@@5| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts##1_2_2_0_0_0@0| |useCache##1_2_2_0_0_0@0|)))
 (and (|M0.__default.ValidState#canCall| |stCombined#0@@5|) (=> (M0.__default.ValidState |stCombined#0@@5|) (and (|M0.__default.Extends#canCall| |stOrig#0| |stCombined#0@@5|) (=> (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |stCombined#0@@5|) (=> |useCache##1_2_2_0_0_0@0| (and (|M0.__default.ConsistentCache#canCall| |stCombined#0@@5|) (=> (M0.__default.ConsistentCache |stCombined#0@@5|) (and (forall ((|st#7@@2| T@U) ) (!  (=> ($IsBox |st#7@@2| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#7@@2|) (and (|M0.__default.DomC#canCall| |st#7@@2|) (|M0.__default.DomC#canCall| |stCombined#0@@5|))))
 :pattern ( (M0.__default.DomC |st#7@@2|))
 :pattern ( (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#7@@2|))
)) (=> (forall ((|st#7@@3| T@U) ) (!  (=> ($IsBox |st#7@@3| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#7@@3|) (|Set#Subset| (M0.__default.DomC |st#7@@3|) (M0.__default.DomC |stCombined#0@@5|))))
 :pattern ( (M0.__default.DomC |st#7@@3|))
 :pattern ( (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#7@@3|))
)) (forall ((|h#1@@1| T@U) ) (!  (=> ($IsBox |h#1@@1| Tclass.M0.HashValue) (and (|M0.__default.DomC#canCall| |stCombined#0@@5|) (=> (|Set#IsMember| (M0.__default.DomC |stCombined#0@@5|) |h#1@@1|) (forall ((|st#8@@1| T@U) ) (!  (=> ($IsBox |st#8@@1| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#8@@1|) (|M0.__default.DomC#canCall| |st#8@@1|)))
 :pattern ( (M0.__default.DomC |st#8@@1|))
 :pattern ( (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#8@@1|))
)))))
 :pattern ( (|Set#IsMember| (M0.__default.DomC |stCombined#0@@5|) |h#1@@1|))
))))))))))))) (and (let ((|stCombined#0@@6| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_2_0_0_0@0| |useCache##1_2_2_0_0_0@0|)))
 (and (|M0.__default.ValidState#canCall| |stCombined#0@@6|) (and (M0.__default.ValidState |stCombined#0@@6|) (forall ((|p#0@@17| T@U) ) (!  (=> ($IsBox |p#0@@17| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |stCombined#0@@6|) |p#0@@17|) (M0.__default.WellFounded |p#0@@17|)))
 :pattern ( (M0.__default.WellFounded |p#0@@17|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |stCombined#0@@6|) |p#0@@17|))
))))) (let ((|stCombined#0@@7| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_2_0_0_0@0| |useCache##1_2_2_0_0_0@0|)))
(M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |stCombined#0@@7|)))) (and (and (let ((|stCombined#0@@8| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_2_0_0_0@0| |useCache##1_2_2_0_0_0@0|)))
 (=> |useCache##1_2_2_0_0_0@0| (and (|M0.__default.ConsistentCache#canCall| |stCombined#0@@8|) (and (M0.__default.ConsistentCache |stCombined#0@@8|) (forall ((|cmd#0@@3| T@U) (|deps#0@@3| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#0@@3| (TSeq TChar)) ($Is SetType |deps#0@@3| (TSet Tclass.M0.Path))) ($Is SeqType |e#0@@2| (TSeq TChar))) (=> (|Set#IsMember| (M0.__default.DomC |stCombined#0@@8|) (M0.__default.Hash (M0.__default.Loc |cmd#0@@3| |deps#0@@3| |e#0@@2|))) (|Set#IsMember| (M0.__default.DomSt |stCombined#0@@8|) (M0.__default.Loc |cmd#0@@3| |deps#0@@3| |e#0@@2|))))
 :pattern ( (M0.__default.Loc |cmd#0@@3| |deps#0@@3| |e#0@@2|))
)))))) (let ((|stCombined#0@@9| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_2_0_0_0@0| |useCache##1_2_2_0_0_0@0|)))
 (=> |useCache##1_2_2_0_0_0@0| (forall ((|st#7@@4| T@U) ) (!  (=> ($IsBox |st#7@@4| Tclass.M0.State) (=> (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#7@@4|) (|Set#Subset| (M0.__default.DomC |st#7@@4|) (M0.__default.DomC |stCombined#0@@9|))))
 :pattern ( (M0.__default.DomC |st#7@@4|))
 :pattern ( (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#7@@4|))
))))) (and (let ((|stCombined#0@@10| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_2_0_0_0@0| |useCache##1_2_2_0_0_0@0|)))
 (=> |useCache##1_2_2_0_0_0@0| (forall ((|h#1@@2| T@U) ) (!  (=> ($IsBox |h#1@@2| Tclass.M0.HashValue) (=> (|Set#IsMember| (M0.__default.DomC |stCombined#0@@10|) |h#1@@2|) (exists ((|st#8@@2| T@U) ) (!  (and ($IsBox |st#8@@2| Tclass.M0.State) (and (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#8@@2|) (|Set#IsMember| (M0.__default.DomC |st#8@@2|) |h#1@@2|)))
 :pattern ( (M0.__default.DomC |st#8@@2|))
 :pattern ( (|Set#IsMember| |sts##1_2_2_0_0_0@0| |st#8@@2|))
))))
 :pattern ( (|Set#IsMember| (M0.__default.DomC |stCombined#0@@10|) |h#1@@2|))
)))) (= $Heap@5 $Heap@11)))) (and (=> (= (ControlFlow 0 62) (- 0 65)) true) (and (=> (= (ControlFlow 0 62) (- 0 64)) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |$rhs#1_0@0|)) (=> (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |$rhs#1_0@0|) (=> (and ($IsGoodHeap $Heap@12) ($IsHeapAnchor $Heap@12)) (=> (and (and (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |$rhs#1_0@0|)) (= (M0.__default.Oracle |p#1_2_0@0| |stOrig#0|) (M0.__default.Oracle |p#1_2_0@0| |$rhs#1_0@0|))) (and (= $Heap@11 $Heap@12) ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@12))) (and (=> (= (ControlFlow 0 62) (- 0 63)) true) (=> (and (and ($IsAllocBox |$rhs#1_0@0| Tclass.M0.State $Heap@12) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |$rhs#1_0@0|)) (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |$rhs#1_0@0|) (= (ControlFlow 0 62) (- 0 61)))) (= (M0.__default.Oracle |p#1_2_0@0| |stOrig#0|) (M0.__default.Oracle |p#1_2_0@0| |$rhs#1_0@0|)))))))))))))))))))))
(let ((anon74_Then_correct  (=> ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) (=> (and (and ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@5) (= |##useCache#1_2_2_0_1_0@0| (U_2_bool (Lit boolType (bool_2_U false))))) (and ($IsAlloc boolType (bool_2_U |##useCache#1_2_2_0_1_0@0|) TBool $Heap@5) (not (|Set#Equal| |sts#0@@5| |Set#Empty|)))) (=> (and (and (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (= |##st#1_2_2_0_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (and ($IsAllocBox |##st#1_2_2_0_1_0@0| Tclass.M0.State $Heap@5) (|M0.__default.Oracle#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (and (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (|M0.__default.Oracle#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (= |useCache##1_2_2_0_1_0@0| (U_2_bool (Lit boolType (bool_2_U false)))))) (and (=> (= (ControlFlow 0 55) (- 0 60)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (not (|Set#Equal| |sts#0@@5| |Set#Empty|)) (and (=> (= (ControlFlow 0 55) (- 0 59)) (forall ((|st#1@@13| T@U) ) (!  (=> ($IsBox |st#1@@13| Tclass.M0.State) (and (=> (|Set#IsMember| |sts#0@@5| |st#1@@13|) (M0.__default.ValidState |st#1@@13|)) (=> (|Set#IsMember| |sts#0@@5| |st#1@@13|) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@13|))))
 :pattern ( (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@13|))
 :pattern ( (M0.__default.ValidState |st#1@@13|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st#1@@13|))
))) (=> (forall ((|st#1@@14| T@U) ) (!  (=> ($IsBox |st#1@@14| Tclass.M0.State) (and (=> (|Set#IsMember| |sts#0@@5| |st#1@@14|) (M0.__default.ValidState |st#1@@14|)) (=> (|Set#IsMember| |sts#0@@5| |st#1@@14|) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@14|))))
 :pattern ( (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#1@@14|))
 :pattern ( (M0.__default.ValidState |st#1@@14|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st#1@@14|))
)) (and (=> (= (ControlFlow 0 55) (- 0 58)) (=> |useCache##1_2_2_0_1_0@0| (forall ((|st#3@@3| T@U) ) (!  (=> ($IsBox |st#3@@3| Tclass.M0.State) (=> (|Set#IsMember| |sts#0@@5| |st#3@@3|) (M0.__default.ConsistentCache |st#3@@3|)))
 :pattern ( (M0.__default.ConsistentCache |st#3@@3|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st#3@@3|))
)))) (=> (=> |useCache##1_2_2_0_1_0@0| (forall ((|st#3@@4| T@U) ) (!  (=> ($IsBox |st#3@@4| Tclass.M0.State) (=> (|Set#IsMember| |sts#0@@5| |st#3@@4|) (M0.__default.ConsistentCache |st#3@@4|)))
 :pattern ( (M0.__default.ConsistentCache |st#3@@4|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st#3@@4|))
))) (=> (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (=> (and (and (|M0.__default.Combine#canCall| |sts#0@@5| |useCache##1_2_2_0_1_0@0|) (let ((|stCombined#0@@11| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| |useCache##1_2_2_0_1_0@0|)))
 (and (|M0.__default.ValidState#canCall| |stCombined#0@@11|) (=> (M0.__default.ValidState |stCombined#0@@11|) (and (|M0.__default.Extends#canCall| |stOrig#0| |stCombined#0@@11|) (=> (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |stCombined#0@@11|) (=> |useCache##1_2_2_0_1_0@0| (and (|M0.__default.ConsistentCache#canCall| |stCombined#0@@11|) (=> (M0.__default.ConsistentCache |stCombined#0@@11|) (and (forall ((|st#7@@5| T@U) ) (!  (=> ($IsBox |st#7@@5| Tclass.M0.State) (=> (|Set#IsMember| |sts#0@@5| |st#7@@5|) (and (|M0.__default.DomC#canCall| |st#7@@5|) (|M0.__default.DomC#canCall| |stCombined#0@@11|))))
 :pattern ( (M0.__default.DomC |st#7@@5|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st#7@@5|))
)) (=> (forall ((|st#7@@6| T@U) ) (!  (=> ($IsBox |st#7@@6| Tclass.M0.State) (=> (|Set#IsMember| |sts#0@@5| |st#7@@6|) (|Set#Subset| (M0.__default.DomC |st#7@@6|) (M0.__default.DomC |stCombined#0@@11|))))
 :pattern ( (M0.__default.DomC |st#7@@6|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st#7@@6|))
)) (forall ((|h#1@@3| T@U) ) (!  (=> ($IsBox |h#1@@3| Tclass.M0.HashValue) (and (|M0.__default.DomC#canCall| |stCombined#0@@11|) (=> (|Set#IsMember| (M0.__default.DomC |stCombined#0@@11|) |h#1@@3|) (forall ((|st#8@@3| T@U) ) (!  (=> ($IsBox |st#8@@3| Tclass.M0.State) (=> (|Set#IsMember| |sts#0@@5| |st#8@@3|) (|M0.__default.DomC#canCall| |st#8@@3|)))
 :pattern ( (M0.__default.DomC |st#8@@3|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st#8@@3|))
)))))
 :pattern ( (|Set#IsMember| (M0.__default.DomC |stCombined#0@@11|) |h#1@@3|))
))))))))))))) (let ((|stCombined#0@@12| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_2_2_0_1_0@0|)))
 (and (|M0.__default.ValidState#canCall| |stCombined#0@@12|) (and (M0.__default.ValidState |stCombined#0@@12|) (forall ((|p#0@@18| T@U) ) (!  (=> ($IsBox |p#0@@18| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |stCombined#0@@12|) |p#0@@18|) (M0.__default.WellFounded |p#0@@18|)))
 :pattern ( (M0.__default.WellFounded |p#0@@18|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |stCombined#0@@12|) |p#0@@18|))
)))))) (=> (and (and (and (let ((|stCombined#0@@13| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_2_2_0_1_0@0|)))
(M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |stCombined#0@@13|)) (let ((|stCombined#0@@14| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_2_2_0_1_0@0|)))
 (=> |useCache##1_2_2_0_1_0@0| (and (|M0.__default.ConsistentCache#canCall| |stCombined#0@@14|) (and (M0.__default.ConsistentCache |stCombined#0@@14|) (forall ((|cmd#0@@4| T@U) (|deps#0@@4| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#0@@4| (TSeq TChar)) ($Is SetType |deps#0@@4| (TSet Tclass.M0.Path))) ($Is SeqType |e#0@@3| (TSeq TChar))) (=> (|Set#IsMember| (M0.__default.DomC |stCombined#0@@14|) (M0.__default.Hash (M0.__default.Loc |cmd#0@@4| |deps#0@@4| |e#0@@3|))) (|Set#IsMember| (M0.__default.DomSt |stCombined#0@@14|) (M0.__default.Loc |cmd#0@@4| |deps#0@@4| |e#0@@3|))))
 :pattern ( (M0.__default.Loc |cmd#0@@4| |deps#0@@4| |e#0@@3|))
))))))) (and (let ((|stCombined#0@@15| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_2_2_0_1_0@0|)))
 (=> |useCache##1_2_2_0_1_0@0| (forall ((|st#7@@7| T@U) ) (!  (=> ($IsBox |st#7@@7| Tclass.M0.State) (=> (|Set#IsMember| |sts#0@@5| |st#7@@7|) (|Set#Subset| (M0.__default.DomC |st#7@@7|) (M0.__default.DomC |stCombined#0@@15|))))
 :pattern ( (M0.__default.DomC |st#7@@7|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st#7@@7|))
)))) (let ((|stCombined#0@@16| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_2_2_0_1_0@0|)))
 (=> |useCache##1_2_2_0_1_0@0| (forall ((|h#1@@4| T@U) ) (!  (=> ($IsBox |h#1@@4| Tclass.M0.HashValue) (=> (|Set#IsMember| (M0.__default.DomC |stCombined#0@@16|) |h#1@@4|) (exists ((|st#8@@4| T@U) ) (!  (and ($IsBox |st#8@@4| Tclass.M0.State) (and (|Set#IsMember| |sts#0@@5| |st#8@@4|) (|Set#IsMember| (M0.__default.DomC |st#8@@4|) |h#1@@4|)))
 :pattern ( (M0.__default.DomC |st#8@@4|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |st#8@@4|))
))))
 :pattern ( (|Set#IsMember| (M0.__default.DomC |stCombined#0@@16|) |h#1@@4|))
)))))) (and (and (= $Heap@5 $Heap@9) ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@9)) (and (= |##useCache#1_2_2_0_1_1@0| (U_2_bool (Lit boolType (bool_2_U false)))) ($IsAlloc boolType (bool_2_U |##useCache#1_2_2_0_1_1@0|) TBool $Heap@9)))) (and (=> (= (ControlFlow 0 55) (- 0 57)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (and (and (not (|Set#Equal| |sts#0@@5| |Set#Empty|)) (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (= |st1##1_2_2_0_1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (and (=> (= (ControlFlow 0 55) (- 0 56)) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st1##1_2_2_0_1_0@0|)) (=> (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st1##1_2_2_0_1_0@0|) (=> (and ($IsGoodHeap $Heap@10) ($IsHeapAnchor $Heap@10)) (=> (and (and (and (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |st1##1_2_2_0_1_0@0|)) (= (M0.__default.Oracle |p#1_2_0@0| |stOrig#0|) (M0.__default.Oracle |p#1_2_0@0| |st1##1_2_2_0_1_0@0|))) (and (= $Heap@9 $Heap@10) ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@10))) (and (and ($IsAllocBox |stOrig#0| Tclass.M0.State $Heap@10) (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|)) (and (|M0.__default.Oracle#canCall| |p#1_2_0@0| |stOrig#0|) (= (ControlFlow 0 55) (- 0 54))))) (= (M0.__default.Oracle |p#1_2_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) (M0.__default.Oracle |p#1_2_0@0| |stOrig#0|))))))))))))))))))))))
(let ((anon73_Then_correct  (=> (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@5)) (=> (and (and (= |##useCache#1_2_2_0_2_0@0| (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAlloc boolType (bool_2_U |##useCache#1_2_2_0_2_0@0|) TBool $Heap@5)) (and (not (|Set#Equal| |stsC#0| |Set#Empty|)) (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (=> (and (and (and (= |##st#1_2_2_0_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))) ($IsAllocBox |##st#1_2_2_0_2_0@0| Tclass.M0.State $Heap@5)) (and (|Set#IsMember| (M0.__default.DomSt |##st#1_2_2_0_2_0@0|) |p#1_2_0@0|) (|M0.__default.GetSt#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (and (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.GetSt#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (= |useCache##1_2_2_0_2_0@0| (U_2_bool (Lit boolType (bool_2_U false)))))) (and (=> (= (ControlFlow 0 47) (- 0 53)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (not (|Set#Equal| |sts#0@@5| |Set#Empty|)) (=> (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8)) (=> (and (and (and (and (|M0.__default.Combine#canCall| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |useCache##1_2_2_0_2_0@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |useCache##1_2_2_0_2_0@0|))) (and (|M0.__default.DomSt#canCall| |st#0@@17|) (and (|M0.__default.Combine#canCall| |sts#0@@5| |useCache##1_2_2_0_2_0@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| |useCache##1_2_2_0_2_0@0|))))) (|Set#Equal| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |useCache##1_2_2_0_2_0@0|)) (|Set#Union| (M0.__default.DomSt |st#0@@17|) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_2_2_0_2_0@0|))))) (and (and (= $Heap@5 $Heap@8) ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@8)) (and (= |##useCache#1_2_2_0_2_1@0| (U_2_bool (Lit boolType (bool_2_U false)))) ($IsAlloc boolType (bool_2_U |##useCache#1_2_2_0_2_1@0|) TBool $Heap@8)))) (and (=> (= (ControlFlow 0 47) (- 0 52)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (= |##st#1_2_2_0_2_1@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (=> (and (and ($IsAllocBox |##st#1_2_2_0_2_1@0| Tclass.M0.State $Heap@8) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (and (=> (= (ControlFlow 0 47) (- 0 51)) (not (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) |p#1_2_0@0|))) (=> (and (and (not (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) |p#1_2_0@0|)) ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@8)) (and (= |##useCache#1_2_2_0_2_2@0| (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAlloc boolType (bool_2_U |##useCache#1_2_2_0_2_2@0|) TBool $Heap@8))) (and (=> (= (ControlFlow 0 47) (- 0 50)) (not (|Set#Equal| |stsC#0| |Set#Empty|))) (=> (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (= |##st#1_2_2_0_2_2@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (=> (and (and ($IsAllocBox |##st#1_2_2_0_2_2@0| Tclass.M0.State $Heap@8) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (and (=> (= (ControlFlow 0 47) (- 0 49)) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))) |p#1_2_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))) |p#1_2_0@0|) (=> (and (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@8) ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@8)) (and (= |##useCache#1_2_2_0_2_3@0| (U_2_bool (Lit boolType (bool_2_U false)))) ($IsAlloc boolType (bool_2_U |##useCache#1_2_2_0_2_3@0|) TBool $Heap@8))) (and (=> (= (ControlFlow 0 47) (- 0 48)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (and (and (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (= |##st#1_2_2_0_2_3@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (and ($IsAllocBox |##st#1_2_2_0_2_3@0| Tclass.M0.State $Heap@8) (|M0.__default.Oracle#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (and (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (|M0.__default.Oracle#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (= (ControlFlow 0 47) (- 0 46)))) (= (M0.__default.GetSt |p#1_2_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))) (M0.__default.Oracle |p#1_2_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))))))))))))))))))))))))
(let ((anon72_Then_correct  (=> ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) (=> (and (and ($IsAllocBox |call4formal@stRepr#0@0@@1| Tclass.M0.State $Heap@5) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@1|) |p#1_2_0@0|)) (and (|M0.__default.GetSt#canCall| |p#1_2_0@0| |call4formal@stRepr#0@0@@1|) (|M0.__default.GetSt#canCall| |p#1_2_0@0| |call4formal@stRepr#0@0@@1|))) (and (=> (= (ControlFlow 0 36) (- 0 45)) true) (=> (= |useCache##1_2_2_0_3_0@0| (U_2_bool (Lit boolType (bool_2_U true)))) (and (=> (= (ControlFlow 0 36) (- 0 44)) (|Set#IsMember| |stsC#0| |call4formal@stRepr#0@0@@1|)) (=> (|Set#IsMember| |stsC#0| |call4formal@stRepr#0@0@@1|) (=> (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (=> (and (and (|M0.__default.DomSt#canCall| |call4formal@stRepr#0@0@@1|) (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@1|) |p#1_2_0@0|) (and (|M0.__default.Combine#canCall| |stsC#0| |useCache##1_2_2_0_3_0@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| |useCache##1_2_2_0_3_0@0|))))) (and (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@1|) |p#1_2_0@0|) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| |useCache##1_2_2_0_3_0@0|)) |p#1_2_0@0|)) (= $Heap@5 $Heap@6))) (and (=> (= (ControlFlow 0 36) (- 0 43)) true) (=> (= |useCache##1_2_2_0_3_1@0| (U_2_bool (Lit boolType (bool_2_U true)))) (and (=> (= (ControlFlow 0 36) (- 0 42)) (|Set#IsMember| |stsC#0| |call4formal@stRepr#0@0@@1|)) (=> (|Set#IsMember| |stsC#0| |call4formal@stRepr#0@0@@1|) (and (=> (= (ControlFlow 0 36) (- 0 41)) (=> (|M0.__default.Compatible#canCall| |stsC#0|) (or (M0.__default.Compatible |stsC#0|) (forall ((|st#1@@15| T@U) (|st'#0@@10| T@U) ) (!  (=> (and ($IsBox |st#1@@15| Tclass.M0.State) ($IsBox |st'#0@@10| Tclass.M0.State)) (=> (and (|Set#IsMember| |stsC#0| |st#1@@15|) (|Set#IsMember| |stsC#0| |st'#0@@10|)) (forall ((|p#1@@13| T@U) ) (!  (=> ($IsBox |p#1@@13| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#1@@15|) |p#1@@13|) (|Set#IsMember| (M0.__default.DomSt |st'#0@@10|) |p#1@@13|)) (= (M0.__default.GetSt |p#1@@13| |st#1@@15|) (M0.__default.GetSt |p#1@@13| |st'#0@@10|))))
 :pattern ( (M0.__default.GetSt |p#1@@13| |st'#0@@10|))
 :pattern ( (M0.__default.GetSt |p#1@@13| |st#1@@15|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@10|) |p#1@@13|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@15|) |p#1@@13|))
))))
 :pattern ( (M0.__default.DomSt |st'#0@@10|) (M0.__default.DomSt |st#1@@15|))
 :pattern ( (M0.__default.DomSt |st'#0@@10|) (|Set#IsMember| |stsC#0| |st#1@@15|))
 :pattern ( (M0.__default.DomSt |st#1@@15|) (|Set#IsMember| |stsC#0| |st'#0@@10|))
 :pattern ( (|Set#IsMember| |stsC#0| |st'#0@@10|) (|Set#IsMember| |stsC#0| |st#1@@15|))
))))) (=> (=> (|M0.__default.Compatible#canCall| |stsC#0|) (or (M0.__default.Compatible |stsC#0|) (forall ((|st#1@@16| T@U) (|st'#0@@11| T@U) ) (!  (=> (and ($IsBox |st#1@@16| Tclass.M0.State) ($IsBox |st'#0@@11| Tclass.M0.State)) (=> (and (|Set#IsMember| |stsC#0| |st#1@@16|) (|Set#IsMember| |stsC#0| |st'#0@@11|)) (forall ((|p#1@@14| T@U) ) (!  (=> ($IsBox |p#1@@14| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#1@@16|) |p#1@@14|) (|Set#IsMember| (M0.__default.DomSt |st'#0@@11|) |p#1@@14|)) (= (M0.__default.GetSt |p#1@@14| |st#1@@16|) (M0.__default.GetSt |p#1@@14| |st'#0@@11|))))
 :pattern ( (M0.__default.GetSt |p#1@@14| |st'#0@@11|))
 :pattern ( (M0.__default.GetSt |p#1@@14| |st#1@@16|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#0@@11|) |p#1@@14|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#1@@16|) |p#1@@14|))
))))
 :pattern ( (M0.__default.DomSt |st'#0@@11|) (M0.__default.DomSt |st#1@@16|))
 :pattern ( (M0.__default.DomSt |st'#0@@11|) (|Set#IsMember| |stsC#0| |st#1@@16|))
 :pattern ( (M0.__default.DomSt |st#1@@16|) (|Set#IsMember| |stsC#0| |st'#0@@11|))
 :pattern ( (|Set#IsMember| |stsC#0| |st'#0@@11|) (|Set#IsMember| |stsC#0| |st#1@@16|))
)))) (and (=> (= (ControlFlow 0 36) (- 0 40)) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@1|) |p#1_2_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@1|) |p#1_2_0@0|) (and (=> (= (ControlFlow 0 36) (- 0 39)) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| |useCache##1_2_2_0_3_1@0|)) |p#1_2_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| |useCache##1_2_2_0_3_1@0|)) |p#1_2_0@0|) (=> (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (=> (and (and (and (and (|M0.__default.Combine#canCall| |stsC#0| |useCache##1_2_2_0_3_1@0|) (|M0.__default.GetSt#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| |useCache##1_2_2_0_3_1@0|))) (|M0.__default.GetSt#canCall| |p#1_2_0@0| |call4formal@stRepr#0@0@@1|)) (and (= (M0.__default.GetSt |p#1_2_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| |useCache##1_2_2_0_3_1@0|)) (M0.__default.GetSt |p#1_2_0@0| |call4formal@stRepr#0@0@@1|)) (= $Heap@6 $Heap@7))) (and (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@7) ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@7)) (and (= |##useCache#1_2_2_0_3_0@0| (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAlloc boolType (bool_2_U |##useCache#1_2_2_0_3_0@0|) TBool $Heap@7)))) (and (=> (= (ControlFlow 0 36) (- 0 38)) (not (|Set#Equal| |stsC#0| |Set#Empty|))) (=> (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (=> (and (= |##st#1_2_2_0_3_1@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))) ($IsAllocBox |##st#1_2_2_0_3_1@0| Tclass.M0.State $Heap@7)) (and (=> (= (ControlFlow 0 36) (- 0 37)) (|Set#IsMember| (M0.__default.DomSt |##st#1_2_2_0_3_1@0|) |p#1_2_0@0|)) (=> (|M0.__default.GetSt#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))) (=> (and (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.GetSt#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (= (ControlFlow 0 36) (- 0 35))) (= (M0.__default.GetSt |p#1_2_0@0| |call4formal@stRepr#0@0@@1|) (M0.__default.GetSt |p#1_2_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))))))))))))))))))))))))))))))
(let ((anon71_Then_correct  (=> (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) ($IsAllocBox |$rhs#1_1@0| Tclass.M0.State $Heap@5)) (=> (and (and (|Set#IsMember| (M0.__default.DomSt |$rhs#1_1@0|) |p#1_2_0@0|) (|M0.__default.GetSt#canCall| |p#1_2_0@0| |$rhs#1_1@0|)) (and (|M0.__default.GetSt#canCall| |p#1_2_0@0| |$rhs#1_1@0|) ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5))) (and (=> (= (ControlFlow 0 32) (- 0 34)) true) (=> ($IsAllocBox |call4formal@stRepr#0@0@@1| Tclass.M0.State $Heap@5) (and (=> (= (ControlFlow 0 32) (- 0 33)) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@1|) |p#1_2_0@0|)) (=> (|M0.__default.GetSt#canCall| |p#1_2_0@0| |call4formal@stRepr#0@0@@1|) (=> (and (|M0.__default.GetSt#canCall| |p#1_2_0@0| |call4formal@stRepr#0@0@@1|) (= (ControlFlow 0 32) (- 0 31))) (= (M0.__default.GetSt |p#1_2_0@0| |$rhs#1_1@0|) (M0.__default.GetSt |p#1_2_0@0| |call4formal@stRepr#0@0@@1|)))))))))))
(let ((anon70_Then_correct  (=> ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@5) (and (=> (= (ControlFlow 0 29) (- 0 30)) true) (=> (and ($IsAllocBox |$rhs#1_1@0| Tclass.M0.State $Heap@5) (= (ControlFlow 0 29) (- 0 28))) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_1@0|) |p#1_2_0@0|))))))
(let ((anon64_Else_correct  (=> (or (not (= |call4formal@stRepr#0@0@@1| |stC#0@@3|)) (not true)) (and (=> (= (ControlFlow 0 72) (- 0 74)) true) (and (=> (= (ControlFlow 0 72) (- 0 73)) (|Set#IsMember| |stsC#0| |call4formal@stRepr#0@0@@1|)) (=> (|Set#IsMember| |stsC#0| |call4formal@stRepr#0@0@@1|) (and (and (and (and (and (and (=> (= (ControlFlow 0 72) 29) anon70_Then_correct) (=> (= (ControlFlow 0 72) 32) anon71_Then_correct)) (=> (= (ControlFlow 0 72) 36) anon72_Then_correct)) (=> (= (ControlFlow 0 72) 47) anon73_Then_correct)) (=> (= (ControlFlow 0 72) 55) anon74_Then_correct)) (=> (= (ControlFlow 0 72) 62) anon75_Then_correct)) (=> (= (ControlFlow 0 72) 71) anon75_Else_correct))))))))
(let ((anon62_Else_correct  (=> (=> (U_2_bool (Lit boolType (bool_2_U true))) (not (|Set#IsMember| (M0.__default.DomSt |st#0@@17|) |p#1_2_0@0|))) (=> (and (and (= |sts##1_2_0@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|)) (= |useCache##1_2_0@0| (U_2_bool (Lit boolType (bool_2_U true))))) (and ($IsBox |call4formal@stRepr#0@@1| Tclass.M0.State) ($IsAllocBox |call4formal@stRepr#0@@1| Tclass.M0.State $Heap@@6))) (and (=> (= (ControlFlow 0 96) (- 0 99)) (not (|Set#Equal| |sts##1_2_0@0| |Set#Empty|))) (=> (not (|Set#Equal| |sts##1_2_0@0| |Set#Empty|)) (and (=> (= (ControlFlow 0 96) (- 0 98)) (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_0@0| |useCache##1_2_0@0|)) |p#1_2_0@0|)) (=> (|Set#IsMember| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_0@0| |useCache##1_2_0@0|)) |p#1_2_0@0|) (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (and ($IsBox |call4formal@stRepr#0@0@@1| Tclass.M0.State) ($IsAllocBox |call4formal@stRepr#0@0@@1| Tclass.M0.State $Heap@5)) (=> (|Set#IsMember| |sts##1_2_0@0| |call4formal@stRepr#0@0@@1|) (and (|M0.__default.DomSt#canCall| |call4formal@stRepr#0@0@@1|) (=> (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@1|) |p#1_2_0@0|) (and (|M0.__default.GetSt#canCall| |p#1_2_0@0| |call4formal@stRepr#0@0@@1|) (and (|M0.__default.Combine#canCall| |sts##1_2_0@0| |useCache##1_2_0@0|) (|M0.__default.GetSt#canCall| |p#1_2_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts##1_2_0@0| |useCache##1_2_0@0|)))))))) (and (and (|Set#IsMember| |sts##1_2_0@0| |call4formal@stRepr#0@0@@1|) (|Set#IsMember| (M0.__default.DomSt |call4formal@stRepr#0@0@@1|) |p#1_2_0@0|)) (and (= (M0.__default.GetSt |p#1_2_0@0| |call4formal@stRepr#0@0@@1|) (M0.__default.GetSt |p#1_2_0@0| (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts##1_2_0@0| |useCache##1_2_0@0|))) (= $Heap@2 $Heap@5)))) (and (=> (= (ControlFlow 0 96) (- 0 97)) true) (and (=> (= (ControlFlow 0 96) 95) anon64_Then_correct) (=> (= (ControlFlow 0 96) 72) anon64_Else_correct)))))))))))))
(let ((anon61_Then_correct  (=> ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@2) (and (=> (= (ControlFlow 0 25) (- 0 27)) true) (=> ($IsAllocBox |$rhs#1_1@0| Tclass.M0.State $Heap@2) (and (=> (= (ControlFlow 0 25) (- 0 26)) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_1@0|) |p#1_2_0@0|)) (=> (|M0.__default.GetSt#canCall| |p#1_2_0@0| |$rhs#1_1@0|) (=> (and ($IsAllocBox |p#1_2_0@0| Tclass.M0.Path $Heap@2) (= (ControlFlow 0 25) (- 0 24))) true))))))))
(let ((anon23_correct  (=> (and (and (|M0.__default.DomSt#canCall| |$rhs#1_0@0|) (=> (not (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_2_0@0|)) (|M0.__default.DomSt#canCall| |$rhs#1_1@0|))) (and (not (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_2_0@0|)) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_1@0|) |p#1_2_0@0|))) (and (and (=> (= (ControlFlow 0 105) 25) anon61_Then_correct) (=> (= (ControlFlow 0 105) 104) anon62_Then_correct)) (=> (= (ControlFlow 0 105) 96) anon62_Else_correct)))))
(let ((anon60_Else_correct  (=> (and (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_2_0@0|) (= (ControlFlow 0 108) 105)) anon23_correct)))
(let ((anon60_Then_correct  (=> (not (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_2_0@0|)) (and (=> (= (ControlFlow 0 106) (- 0 107)) true) (=> ($IsAllocBox |$rhs#1_1@0| Tclass.M0.State $Heap@2) (=> (and (|M0.__default.DomSt#canCall| |$rhs#1_1@0|) (= (ControlFlow 0 106) 105)) anon23_correct))))))
(let ((anon59_Then_correct  (=> ($IsBox |p#1_2_0@0| Tclass.M0.Path) (and (=> (= (ControlFlow 0 109) (- 0 110)) true) (=> (and ($IsAllocBox |$rhs#1_0@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| |$rhs#1_0@0|)) (and (=> (= (ControlFlow 0 109) 106) anon60_Then_correct) (=> (= (ControlFlow 0 109) 108) anon60_Else_correct)))))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 21) (- 0 20)) (M0.__default.StateCorrespondence reveal_M0._default.StateCorrespondence (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) (U_2_bool (Lit boolType (bool_2_U false)))) (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) (U_2_bool (Lit boolType (bool_2_U true))))))))
(let ((anon59_Else_correct  (=> (and (forall ((|p#1_2_1| T@U) ) (!  (=> (and ($IsBox |p#1_2_1| Tclass.M0.Path) (and (not (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_2_1|)) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_1@0|) |p#1_2_1|))) (= (M0.__default.GetSt |p#1_2_1| |$rhs#1_1@0|) (M0.__default.Oracle |p#1_2_1| |$rhs#1_0@0|)))
 :pattern ( (M0.__default.Oracle |p#1_2_1| |$rhs#1_0@0|))
 :pattern ( (M0.__default.GetSt |p#1_2_1| |$rhs#1_1@0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |$rhs#1_1@0|) |p#1_2_1|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_2_1|))
)) (= (ControlFlow 0 23) 21)) GeneratedUnifiedExit_correct)))
(let ((anon54_Else_correct  (=> (forall ((|p#1_1_1| T@U) ) (!  (=> (and ($IsBox |p#1_1_1| Tclass.M0.Path) (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_1_1|)) (= (M0.__default.GetSt |p#1_1_1| |$rhs#1_0@0|) (M0.__default.GetSt |p#1_1_1| |$rhs#1_1@0|)))
 :pattern ( (M0.__default.GetSt |p#1_1_1| |$rhs#1_1@0|))
 :pattern ( (M0.__default.GetSt |p#1_1_1| |$rhs#1_0@0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |$rhs#1_0@0|) |p#1_1_1|))
)) (and (=> (= (ControlFlow 0 111) 109) anon59_Then_correct) (=> (= (ControlFlow 0 111) 23) anon59_Else_correct)))))
(let ((anon53_Else_correct  (=> (|Set#Subset| (M0.__default.DomSt |$rhs#1_0@0|) (M0.__default.DomSt |$rhs#1_1@0|)) (and (=> (= (ControlFlow 0 171) (- 0 174)) true) (=> (and ($IsAllocBox |$rhs#1_0@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| |$rhs#1_0@0|)) (and (=> (= (ControlFlow 0 171) (- 0 173)) true) (=> (and (and ($IsAllocBox |$rhs#1_1@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| |$rhs#1_1@0|)) (and (|M0.__default.DomSt#canCall| |$rhs#1_0@0|) (|M0.__default.DomSt#canCall| |$rhs#1_1@0|))) (and (=> (= (ControlFlow 0 171) (- 0 172)) (|Set#Subset| (M0.__default.DomSt |$rhs#1_0@0|) (M0.__default.DomSt |$rhs#1_1@0|))) (=> (|Set#Subset| (M0.__default.DomSt |$rhs#1_0@0|) (M0.__default.DomSt |$rhs#1_1@0|)) (and (=> (= (ControlFlow 0 171) 169) anon54_Then_correct) (=> (= (ControlFlow 0 171) 111) anon54_Else_correct)))))))))))
(let ((anon48_Then_correct  (=> (and (|Set#Equal| |sts#0@@5| |Set#Empty|) (= (ControlFlow 0 22) 21)) GeneratedUnifiedExit_correct)))
(let ((anon53_Then_correct  (=> (and ($IsAllocBox |stC#0@@3| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| |stC#0@@3|)) (=> (and (and ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@2) (= |##useCache#1_0_0_0@0| (U_2_bool (Lit boolType (bool_2_U true))))) (and ($IsAlloc boolType (bool_2_U |##useCache#1_0_0_0@0|) TBool $Heap@2) (not (|Set#Equal| |stsC#0| |Set#Empty|)))) (=> (and (and (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (= |##st#1_0_0_1@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (and ($IsAllocBox |##st#1_0_0_1@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (and (and (|M0.__default.DomSt#canCall| |stC#0@@3|) (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (= |useCache##1_0_0_0@0| (U_2_bool (Lit boolType (bool_2_U true)))))) (and (=> (= (ControlFlow 0 17) (- 0 19)) (not (|Set#Equal| |stsC#0| |Set#Empty|))) (=> (not (|Set#Equal| |stsC#0| |Set#Empty|)) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (and (|M0.__default.Combine#canCall| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |useCache##1_0_0_0@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |useCache##1_0_0_0@0|))) (and (|M0.__default.DomSt#canCall| |stC#0@@3|) (and (|M0.__default.Combine#canCall| |stsC#0| |useCache##1_0_0_0@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| |useCache##1_0_0_0@0|))))) (and (|Set#Equal| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |useCache##1_0_0_0@0|)) (|Set#Union| (M0.__default.DomSt |stC#0@@3|) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| |useCache##1_0_0_0@0|)))) (= $Heap@2 $Heap@4))) (and (=> (= (ControlFlow 0 17) (- 0 18)) true) (=> (and (and ($IsAllocBox |$rhs#1_1@0| Tclass.M0.State $Heap@4) (|M0.__default.DomSt#canCall| |$rhs#1_1@0|)) (and (|M0.__default.DomSt#canCall| |$rhs#1_1@0|) (= (ControlFlow 0 17) (- 0 16)))) (|Set#Equal| (|Set#Union| (M0.__default.DomSt |stC#0@@3|) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (M0.__default.DomSt |$rhs#1_1@0|)))))))))))))
(let ((anon52_Then_correct  (=> (and ($IsAllocBox |st#0@@17| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| |st#0@@17|)) (=> (and (and (and (and ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@2) (= |##useCache#1_0_1_0@0| (U_2_bool (Lit boolType (bool_2_U true))))) (and ($IsAlloc boolType (bool_2_U |##useCache#1_0_1_0@0|) TBool $Heap@2) (not (|Set#Equal| |stsC#0| |Set#Empty|)))) (and (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (= |##st#1_0_1_1@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (and ($IsAllocBox |##st#1_0_1_1@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))))) (and (and (and (|M0.__default.DomSt#canCall| |st#0@@17|) (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) ($IsAllocBox |stC#0@@3| Tclass.M0.State $Heap@2)) (and (and (|M0.__default.DomSt#canCall| |stC#0@@3|) ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@2)) (and (= |##useCache#1_0_1_1@0| (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAlloc boolType (bool_2_U |##useCache#1_0_1_1@0|) TBool $Heap@2))))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (not (|Set#Equal| |stsC#0| |Set#Empty|))) (=> (and (and (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (= |##st#1_0_1_3@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (and ($IsAllocBox |##st#1_0_1_3@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (and (and (|M0.__default.DomSt#canCall| |stC#0@@3|) (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (= (ControlFlow 0 14) (- 0 13)))) (|Set#Subset| (|Set#Union| (M0.__default.DomSt |st#0@@17|) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (|Set#Union| (M0.__default.DomSt |stC#0@@3|) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))))))))))
(let ((anon51_Then_correct  (=> (and ($IsAllocBox |st#0@@17| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| |st#0@@17|)) (=> (and (and (and (and ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@2) (= |##useCache#1_0_2_0@0| (U_2_bool (Lit boolType (bool_2_U false))))) (and ($IsAlloc boolType (bool_2_U |##useCache#1_0_2_0@0|) TBool $Heap@2) (not (|Set#Equal| |sts#0@@5| |Set#Empty|)))) (and (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (= |##st#1_0_2_1@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (and ($IsAllocBox |##st#1_0_2_1@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))))) (and (and (and (|M0.__default.DomSt#canCall| |st#0@@17|) (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@2)) (and (= |##useCache#1_0_2_1@0| (U_2_bool (Lit boolType (bool_2_U false)))) ($IsAlloc boolType (bool_2_U |##useCache#1_0_2_1@0|) TBool $Heap@2)))) (and (=> (= (ControlFlow 0 8) (- 0 12)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (=> (and (= |##st#1_0_2_2@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) ($IsAllocBox |##st#1_0_2_2@0| Tclass.M0.State $Heap@2)) (=> (and (and (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@2)) (and (= |##useCache#1_0_2_2@0| (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAlloc boolType (bool_2_U |##useCache#1_0_2_2@0|) TBool $Heap@2))) (and (=> (= (ControlFlow 0 8) (- 0 11)) (not (|Set#Equal| |stsC#0| |Set#Empty|))) (=> (and (and (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (= |##st#1_0_2_3@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (and ($IsAllocBox |##st#1_0_2_3@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (and (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))))) (and (=> (= (ControlFlow 0 8) (- 0 10)) (|Set#Subset| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (=> (and (|Set#Subset| (M0.__default.DomSt (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))) (M0.__default.DomSt (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) ($IsAllocBox |st#0@@17| Tclass.M0.State $Heap@2)) (=> (and (and (|M0.__default.DomSt#canCall| |st#0@@17|) ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@2)) (and (= |##useCache#1_0_2_3@0| (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAlloc boolType (bool_2_U |##useCache#1_0_2_3@0|) TBool $Heap@2))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (not (|Set#Equal| |stsC#0| |Set#Empty|))) (=> (and (and (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (= |##st#1_0_2_5@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))))) (and ($IsAllocBox |##st#1_0_2_5@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (and (and (|M0.__default.DomSt#canCall| |st#0@@17|) (and (|M0.__default.Combine#canCall| |stsC#0| (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (= (ControlFlow 0 8) (- 0 7)))) (|Set#Subset| (|Set#Union| (M0.__default.DomSt |st#0@@17|) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (|Set#Union| (M0.__default.DomSt |st#0@@17|) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))))))))))))))))))
(let ((anon50_Then_correct  (=> (and (and ($IsAllocBox |$rhs#1_0@0| Tclass.M0.State $Heap@2) (|M0.__default.DomSt#canCall| |$rhs#1_0@0|)) (and (|M0.__default.DomSt#canCall| |$rhs#1_0@0|) (= |useCache##1_0_3_0@0| (U_2_bool (Lit boolType (bool_2_U false)))))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (not (|Set#Equal| |sts#0@@5| |Set#Empty|)) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (and (and (|M0.__default.Combine#canCall| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |useCache##1_0_3_0@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |useCache##1_0_3_0@0|))) (and (|M0.__default.DomSt#canCall| |st#0@@17|) (and (|M0.__default.Combine#canCall| |sts#0@@5| |useCache##1_0_3_0@0|) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| |useCache##1_0_3_0@0|))))) (|Set#Equal| (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |useCache##1_0_3_0@0|)) (|Set#Union| (M0.__default.DomSt |st#0@@17|) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| |useCache##1_0_3_0@0|))))) (and (= $Heap@2 $Heap@3) ($IsAllocBox |st#0@@17| Tclass.M0.State $Heap@3))) (and (and (|M0.__default.DomSt#canCall| |st#0@@17|) ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@3)) (and (= |##useCache#1_0_3_0@0| (U_2_bool (Lit boolType (bool_2_U false)))) ($IsAlloc boolType (bool_2_U |##useCache#1_0_3_0@0|) TBool $Heap@3)))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (not (|Set#Equal| |sts#0@@5| |Set#Empty|))) (=> (and (and (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (= |##st#1_0_3_2@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))))) (and ($IsAllocBox |##st#1_0_3_2@0| Tclass.M0.State $Heap@3) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (and (and (|M0.__default.DomSt#canCall| |st#0@@17|) (and (|M0.__default.Combine#canCall| |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (|M0.__default.DomSt#canCall| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))) (= (ControlFlow 0 4) (- 0 3)))) (|Set#Equal| (M0.__default.DomSt |$rhs#1_0@0|) (|Set#Union| (M0.__default.DomSt |st#0@@17|) (M0.__default.DomSt (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false))))))))))))))))
(let ((anon49_Then_correct  (=> (= (ControlFlow 0 2) (- 0 1)) true)))
(let ((anon48_Else_correct  (=> (not (|Set#Equal| |sts#0@@5| |Set#Empty|)) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (= $Heap@1 $Heap@2) reveal_M0._default.StateCorrespondence)) (and (and (= |##sts#1_0@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|)) ($IsAlloc SetType |##sts#1_0@0| (TSet Tclass.M0.State) $Heap@2)) (and (= |##useCache#1_0@0| (U_2_bool (Lit boolType (bool_2_U false)))) ($IsAlloc boolType (bool_2_U |##useCache#1_0@0|) TBool $Heap@2)))) (and (=> (= (ControlFlow 0 175) (- 0 181)) (not (|Set#Equal| |##sts#1_0@0| |Set#Empty|))) (=> (and (and (and (not (|Set#Equal| |##sts#1_0@0| |Set#Empty|)) (|M0.__default.Combine#canCall| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) (U_2_bool (Lit boolType (bool_2_U false))))) (and (|M0.__default.Combine#canCall| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) (U_2_bool (Lit boolType (bool_2_U false)))) (= |$rhs#1_0@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) (U_2_bool (Lit boolType (bool_2_U false))))))) (and (and (= |##sts#1_1@0| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|)) ($IsAlloc SetType |##sts#1_1@0| (TSet Tclass.M0.State) $Heap@2)) (and (= |##useCache#1_1@0| (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAlloc boolType (bool_2_U |##useCache#1_1@0|) TBool $Heap@2)))) (and (=> (= (ControlFlow 0 175) (- 0 180)) (not (|Set#Equal| |##sts#1_1@0| |Set#Empty|))) (=> (and (and (and (not (|Set#Equal| |##sts#1_1@0| |Set#Empty|)) (|M0.__default.Combine#canCall| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) (U_2_bool (Lit boolType (bool_2_U true))))) (and (|M0.__default.Combine#canCall| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) (U_2_bool (Lit boolType (bool_2_U true)))) (= |$rhs#1_1@0| (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) (U_2_bool (Lit boolType (bool_2_U true))))))) (and (and (= |##sts#1_2@0| (|Set#UnionOne| |Set#Empty| |st#0@@17|)) ($IsAlloc SetType |##sts#1_2@0| (TSet Tclass.M0.State) $Heap@2)) (and (= |##useCache#1_2@0| (U_2_bool (Lit boolType (bool_2_U false)))) ($IsAlloc boolType (bool_2_U |##useCache#1_2@0|) TBool $Heap@2)))) (and (=> (= (ControlFlow 0 175) (- 0 179)) (not (|Set#Equal| |##sts#1_2@0| |Set#Empty|))) (=> (and (|M0.__default.Combine#canCall| (|Set#UnionOne| |Set#Empty| |st#0@@17|) (U_2_bool (Lit boolType (bool_2_U false)))) (|M0.__default.Combine#canCall| (|Set#UnionOne| |Set#Empty| |st#0@@17|) (U_2_bool (Lit boolType (bool_2_U false))))) (and (=> (= (ControlFlow 0 175) (- 0 178)) (= (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine (|Set#UnionOne| |Set#Empty| |st#0@@17|) (U_2_bool (Lit boolType (bool_2_U false)))) |st#0@@17|)) (=> (= (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine (|Set#UnionOne| |Set#Empty| |st#0@@17|) (U_2_bool (Lit boolType (bool_2_U false)))) |st#0@@17|) (=> (and (and (= |##sts#1_3@0| (|Set#UnionOne| |Set#Empty| |stC#0@@3|)) ($IsAlloc SetType |##sts#1_3@0| (TSet Tclass.M0.State) $Heap@2)) (and (= |##useCache#1_3@0| (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAlloc boolType (bool_2_U |##useCache#1_3@0|) TBool $Heap@2))) (and (=> (= (ControlFlow 0 175) (- 0 177)) (not (|Set#Equal| |##sts#1_3@0| |Set#Empty|))) (=> (and (|M0.__default.Combine#canCall| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) (U_2_bool (Lit boolType (bool_2_U true)))) (|M0.__default.Combine#canCall| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) (U_2_bool (Lit boolType (bool_2_U true))))) (and (=> (= (ControlFlow 0 175) (- 0 176)) (= (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine (|Set#UnionOne| |Set#Empty| |stC#0@@3|) (U_2_bool (Lit boolType (bool_2_U true)))) |stC#0@@3|)) (=> (= (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine (|Set#UnionOne| |Set#Empty| |stC#0@@3|) (U_2_bool (Lit boolType (bool_2_U true)))) |stC#0@@3|) (and (and (and (and (and (=> (= (ControlFlow 0 175) 2) anon49_Then_correct) (=> (= (ControlFlow 0 175) 4) anon50_Then_correct)) (=> (= (ControlFlow 0 175) 8) anon51_Then_correct)) (=> (= (ControlFlow 0 175) 14) anon52_Then_correct)) (=> (= (ControlFlow 0 175) 17) anon53_Then_correct)) (=> (= (ControlFlow 0 175) 171) anon53_Else_correct)))))))))))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@6 alloc false)) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@6 $Heap@0) (forall ((|$ih#sts0#0| T@U) (|$ih#stsC0#0| T@U) ) (!  (=> (and (and (and ($Is SetType |$ih#sts0#0| (TSet Tclass.M0.State)) ($Is SetType |$ih#stsC0#0| (TSet Tclass.M0.State))) (and (and (and (and (and (and (M0.__default.ValidState |st#0@@17|) (forall ((|s#4| T@U) ) (!  (=> ($IsBox |s#4| Tclass.M0.State) (=> (|Set#IsMember| |$ih#sts0#0| |s#4|) (M0.__default.ValidState |s#4|)))
 :pattern ( (M0.__default.ValidState |s#4|))
 :pattern ( (|Set#IsMember| |$ih#sts0#0| |s#4|))
))) (and (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#0@@17|) (forall ((|s#5| T@U) ) (!  (=> ($IsBox |s#5| Tclass.M0.State) (=> (|Set#IsMember| |$ih#sts0#0| |s#5|) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |s#5|)))
 :pattern ( (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |s#5|))
 :pattern ( (|Set#IsMember| |$ih#sts0#0| |s#5|))
)))) (M0.__default.StateCorrespondence reveal_M0._default.StateCorrespondence |st#0@@17| |stC#0@@3|)) (= (|Set#Equal| |$ih#sts0#0| |Set#Empty|) (|Set#Equal| |$ih#stsC0#0| |Set#Empty|))) (=> (and (not (|Set#Equal| |$ih#sts0#0| |Set#Empty|)) (not (|Set#Equal| |$ih#stsC0#0| |Set#Empty|))) (M0.__default.StateCorrespondence reveal_M0._default.StateCorrespondence (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |$ih#sts0#0| (U_2_bool (Lit boolType (bool_2_U false)))) (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine |$ih#stsC0#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (and (M0.__default.Compatible (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |$ih#sts0#0|)) (M0.__default.Compatible (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |$ih#stsC0#0|))))) (or (and (|Set#Subset| |$ih#sts0#0| |sts#0@@5|) (not (|Set#Subset| |sts#0@@5| |$ih#sts0#0|))) (and (|Set#Equal| |$ih#sts0#0| |sts#0@@5|) (and (|Set#Subset| |$ih#stsC0#0| |stsC#0|) (not (|Set#Subset| |stsC#0| |$ih#stsC0#0|)))))) (M0.__default.StateCorrespondence reveal_M0._default.StateCorrespondence (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |$ih#sts0#0|) (U_2_bool (Lit boolType (bool_2_U false)))) (M0.__default.Combine ($LS $LZ) reveal_M0._default.Combine (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |$ih#stsC0#0|) (U_2_bool (Lit boolType (bool_2_U true))))))
 :pattern ( (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |$ih#stsC0#0|) (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |$ih#sts0#0|))
)))) (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (= $Heap@0 $Heap@1) reveal_M0._default.Combine))) (and (=> (= (ControlFlow 0 182) 22) anon48_Then_correct) (=> (= (ControlFlow 0 182) 175) anon48_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@6) ($IsHeapAnchor $Heap@@6)) (and ($IsBox |stOrig#0| Tclass.M0.State) ($IsAllocBox |stOrig#0| Tclass.M0.State $Heap@@6))) (=> (and (and (and (and ($IsBox |st#0@@17| Tclass.M0.State) ($IsAllocBox |st#0@@17| Tclass.M0.State $Heap@@6)) (and ($Is SetType |sts#0@@5| (TSet Tclass.M0.State)) ($IsAlloc SetType |sts#0@@5| (TSet Tclass.M0.State) $Heap@@6))) (and (and ($IsBox |stC#0@@3| Tclass.M0.State) ($IsAllocBox |stC#0@@3| Tclass.M0.State $Heap@@6)) (and ($Is SetType |stsC#0| (TSet Tclass.M0.State)) ($IsAlloc SetType |stsC#0| (TSet Tclass.M0.State) $Heap@@6)))) (and (and (and (=> |defass#a#1_0| (and ($IsBox |a#1_0| Tclass.M0.State) ($IsAllocBox |a#1_0| Tclass.M0.State $Heap@@6))) true) (and (=> |defass#b#1_0| (and ($IsBox |b#1_0| Tclass.M0.State) ($IsAllocBox |b#1_0| Tclass.M0.State $Heap@@6))) true)) (and (and (=> |defass#stRepr#1_1_0| (and ($IsBox |stRepr#1_1_0| Tclass.M0.State) ($IsAllocBox |stRepr#1_1_0| Tclass.M0.State $Heap@@6))) true) (and (=> |defass#stReprC#1_1_1_0| (and ($IsBox |stReprC#1_1_1_0| Tclass.M0.State) ($IsAllocBox |stReprC#1_1_1_0| Tclass.M0.State $Heap@@6))) true)))) (=> (and (and (and (and (and (=> |defass#stReprC#1_2_0| (and ($IsBox |stReprC#1_2_0| Tclass.M0.State) ($IsAllocBox |stReprC#1_2_0| Tclass.M0.State $Heap@@6))) true) (= 6 $FunctionContextHeight)) (and (|M0.__default.ValidState#canCall| |st#0@@17|) (and (M0.__default.ValidState |st#0@@17|) (forall ((|p#3@@3| T@U) ) (!  (=> ($IsBox |p#3@@3| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@17|) |p#3@@3|) (M0.__default.WellFounded |p#3@@3|)))
 :pattern ( (M0.__default.WellFounded |p#3@@3|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@17|) |p#3@@3|))
))))) (and (and (forall ((|s#1| T@U) ) (!  (=> ($IsBox |s#1| Tclass.M0.State) (=> (|Set#IsMember| |sts#0@@5| |s#1|) (M0.__default.ValidState |s#1|)))
 :pattern ( (M0.__default.ValidState |s#1|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |s#1|))
)) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |st#0@@17|)) (and (forall ((|s#3| T@U) ) (!  (=> ($IsBox |s#3| Tclass.M0.State) (=> (|Set#IsMember| |sts#0@@5| |s#3|) (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |s#3|)))
 :pattern ( (M0.__default.Extends reveal_M0._default.Extends |stOrig#0| |s#3|))
 :pattern ( (|Set#IsMember| |sts#0@@5| |s#3|))
)) (M0.__default.StateCorrespondence reveal_M0._default.StateCorrespondence |st#0@@17| |stC#0@@3|)))) (and (and (and (= (|Set#Equal| |sts#0@@5| |Set#Empty|) (|Set#Equal| |stsC#0| |Set#Empty|)) (=> (and (not (|Set#Equal| |sts#0@@5| |Set#Empty|)) (not (|Set#Equal| |stsC#0| |Set#Empty|))) (M0.__default.StateCorrespondence reveal_M0._default.StateCorrespondence (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |sts#0@@5| (U_2_bool (Lit boolType (bool_2_U false)))) (M0.__default.Combine ($LS ($LS $LZ)) reveal_M0._default.Combine |stsC#0| (U_2_bool (Lit boolType (bool_2_U true))))))) (and (|M0.__default.Compatible#canCall| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|)) (and (M0.__default.Compatible (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|)) (forall ((|st#3@@5| T@U) (|st'#2| T@U) ) (!  (=> (and ($IsBox |st#3@@5| Tclass.M0.State) ($IsBox |st'#2| Tclass.M0.State)) (=> (and (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |st#3@@5|) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |st'#2|)) (forall ((|p#4| T@U) ) (!  (=> ($IsBox |p#4| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#3@@5|) |p#4|) (|Set#IsMember| (M0.__default.DomSt |st'#2|) |p#4|)) (= (M0.__default.GetSt |p#4| |st#3@@5|) (M0.__default.GetSt |p#4| |st'#2|))))
 :pattern ( (M0.__default.GetSt |p#4| |st'#2|))
 :pattern ( (M0.__default.GetSt |p#4| |st#3@@5|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#2|) |p#4|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#3@@5|) |p#4|))
))))
 :pattern ( (M0.__default.DomSt |st'#2|) (M0.__default.DomSt |st#3@@5|))
 :pattern ( (M0.__default.DomSt |st'#2|) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |st#3@@5|))
 :pattern ( (M0.__default.DomSt |st#3@@5|) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |st'#2|))
 :pattern ( (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |st'#2|) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |st#0@@17|) |sts#0@@5|) |st#3@@5|))
))))) (and (and (|M0.__default.Compatible#canCall| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|)) (and (M0.__default.Compatible (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|)) (forall ((|st#4| T@U) (|st'#3| T@U) ) (!  (=> (and ($IsBox |st#4| Tclass.M0.State) ($IsBox |st'#3| Tclass.M0.State)) (=> (and (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |st#4|) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |st'#3|)) (forall ((|p#5| T@U) ) (!  (=> ($IsBox |p#5| Tclass.M0.Path) (=> (and (|Set#IsMember| (M0.__default.DomSt |st#4|) |p#5|) (|Set#IsMember| (M0.__default.DomSt |st'#3|) |p#5|)) (= (M0.__default.GetSt |p#5| |st#4|) (M0.__default.GetSt |p#5| |st'#3|))))
 :pattern ( (M0.__default.GetSt |p#5| |st'#3|))
 :pattern ( (M0.__default.GetSt |p#5| |st#4|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st'#3|) |p#5|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#4|) |p#5|))
))))
 :pattern ( (M0.__default.DomSt |st'#3|) (M0.__default.DomSt |st#4|))
 :pattern ( (M0.__default.DomSt |st'#3|) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |st#4|))
 :pattern ( (M0.__default.DomSt |st#4|) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |st'#3|))
 :pattern ( (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |st'#3|) (|Set#IsMember| (|Set#Union| (|Set#UnionOne| |Set#Empty| |stC#0@@3|) |stsC#0|) |st#4|))
)))) (= (ControlFlow 0 183) 182)))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
