(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun M0.__default.Loc (T@U T@U T@U) T@U)
(declare-fun |M0.__default.Loc#canCall| (T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Tclass.M0.Path () T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass.M0.State () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun M0.__default.ConsistentCache (T@U) Bool)
(declare-fun |M0.__default.ConsistentCache#canCall| (T@U) Bool)
(declare-fun |M0.__default.Hash#canCall| (T@U) Bool)
(declare-fun |M0.__default.DomC#canCall| (T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun M0.__default.DomC (T@U) T@U)
(declare-fun M0.__default.Hash (T@U) T@U)
(declare-fun |M0.__default.DomSt#canCall| (T@U) Bool)
(declare-fun M0.__default.DomSt (T@U) T@U)
(declare-fun M0.__default.UpdateC (T@U T@U T@U T@U) T@U)
(declare-fun |M0.__default.UpdateC#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun M0.__default.GetSt (T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |M0.__default.GetSt#canCall| (T@U T@U) Bool)
(declare-fun Tclass.M0.Artifact () T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass.M0.HashValue () T@U)
(declare-fun charType () T@T)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TagChar TagSet TagSeq alloc)
)
(assert  (and (= (Ctor SeqType) 3) (= (Ctor SetType) 4)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|cmd#0| T@U) (|deps#0| T@U) (|exp#0| T@U) ) (!  (=> (or (|M0.__default.Loc#canCall| |cmd#0| |deps#0| |exp#0|) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |cmd#0| (TSeq TChar)) ($Is SetType |deps#0| (TSet Tclass.M0.Path))) ($Is SeqType |exp#0| (TSeq TChar))))) ($IsBox (M0.__default.Loc |cmd#0| |deps#0| |exp#0|) Tclass.M0.Path))
 :pattern ( (M0.__default.Loc |cmd#0| |deps#0| |exp#0|))
))))
(assert (= (Tag TChar) TagChar))
(assert ($AlwaysAllocated Tclass.M0.State))
(assert ($AlwaysAllocated Tclass.M0.Path))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|stC#0| T@U) ) (!  (=> (or (|M0.__default.ConsistentCache#canCall| |stC#0|) (and (< 1 $FunctionContextHeight) ($IsBox |stC#0| Tclass.M0.State))) (and (forall ((|cmd#0@@0| T@U) (|deps#0@@0| T@U) (|e#0| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#0@@0| (TSeq TChar)) ($Is SetType |deps#0@@0| (TSet Tclass.M0.Path))) ($Is SeqType |e#0| (TSeq TChar))) (and (and (and (|M0.__default.Loc#canCall| |cmd#0@@0| |deps#0@@0| |e#0|) (|M0.__default.Hash#canCall| (M0.__default.Loc |cmd#0@@0| |deps#0@@0| |e#0|))) (|M0.__default.DomC#canCall| |stC#0|)) (=> (|Set#IsMember| (M0.__default.DomC |stC#0|) (M0.__default.Hash (M0.__default.Loc |cmd#0@@0| |deps#0@@0| |e#0|))) (and (|M0.__default.Loc#canCall| |cmd#0@@0| |deps#0@@0| |e#0|) (|M0.__default.DomSt#canCall| |stC#0|)))))
 :pattern ( (M0.__default.Loc |cmd#0@@0| |deps#0@@0| |e#0|))
)) (= (M0.__default.ConsistentCache |stC#0|) (forall ((|cmd#0@@1| T@U) (|deps#0@@1| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#0@@1| (TSeq TChar)) ($Is SetType |deps#0@@1| (TSet Tclass.M0.Path))) ($Is SeqType |e#0@@0| (TSeq TChar))) (=> (|Set#IsMember| (M0.__default.DomC |stC#0|) (M0.__default.Hash (M0.__default.Loc |cmd#0@@1| |deps#0@@1| |e#0@@0|))) (|Set#IsMember| (M0.__default.DomSt |stC#0|) (M0.__default.Loc |cmd#0@@1| |deps#0@@1| |e#0@@0|))))
 :pattern ( (M0.__default.Loc |cmd#0@@1| |deps#0@@1| |e#0@@0|))
)))))
 :pattern ( (M0.__default.ConsistentCache |stC#0|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|cmd#0@@2| T@U) (|deps#0@@2| T@U) (|exps#0| T@U) (|st#0| T@U) ) (!  (=> (or (|M0.__default.UpdateC#canCall| |cmd#0@@2| |deps#0@@2| |exps#0| |st#0|) (and (< 2 $FunctionContextHeight) (and (and (and ($Is SeqType |cmd#0@@2| (TSeq TChar)) ($Is SetType |deps#0@@2| (TSet Tclass.M0.Path))) ($Is SetType |exps#0| (TSet (TSeq TChar)))) ($IsBox |st#0| Tclass.M0.State)))) (and (let ((|st'#0| (M0.__default.UpdateC |cmd#0@@2| |deps#0@@2| |exps#0| |st#0|)))
 (and (and (and (|Set#Equal| (M0.__default.DomSt |st#0|) (M0.__default.DomSt |st'#0|)) (forall ((|p#0| T@U) ) (!  (=> ($IsBox |p#0| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0|) |p#0|) (= (M0.__default.GetSt |p#0| |st#0|) (M0.__default.GetSt |p#0| |st'#0|))))
 :pattern ( (M0.__default.GetSt |p#0| |st'#0|))
 :pattern ( (M0.__default.GetSt |p#0| |st#0|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0|) |p#0|))
))) (=> (M0.__default.ConsistentCache |st#0|) (M0.__default.ConsistentCache |st'#0|))) (forall ((|e#0@@1| T@U) ) (!  (=> ($Is SeqType |e#0@@1| (TSeq TChar)) (=> (|Set#IsMember| |exps#0| ($Box SeqType |e#0@@1|)) (|Set#IsMember| (M0.__default.DomC |st'#0|) (M0.__default.Hash (M0.__default.Loc |cmd#0@@2| |deps#0@@2| |e#0@@1|)))))
 :pattern ( (M0.__default.Loc |cmd#0@@2| |deps#0@@2| |e#0@@1|))
 :pattern ( (|Set#IsMember| |exps#0| ($Box SeqType |e#0@@1|)))
)))) ($IsBox (M0.__default.UpdateC |cmd#0@@2| |deps#0@@2| |exps#0| |st#0|) Tclass.M0.State)))
 :pattern ( (M0.__default.UpdateC |cmd#0@@2| |deps#0@@2| |exps#0| |st#0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|p#0@@0| T@U) (|st#0@@0| T@U) ) (!  (=> (or (|M0.__default.GetSt#canCall| |p#0@@0| |st#0@@0|) (and (< 1 $FunctionContextHeight) (and (and ($IsBox |p#0@@0| Tclass.M0.Path) ($IsBox |st#0@@0| Tclass.M0.State)) (|Set#IsMember| (M0.__default.DomSt |st#0@@0|) |p#0@@0|)))) ($IsBox (M0.__default.GetSt |p#0@@0| |st#0@@0|) Tclass.M0.Artifact))
 :pattern ( (M0.__default.GetSt |p#0@@0| |st#0@@0|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (|p#0@@1| T@U) (|st#0@@1| T@U) ) (!  (=> (and (or (|M0.__default.GetSt#canCall| |p#0@@1| |st#0@@1|) (and (< 1 $FunctionContextHeight) (and (and (and ($IsBox |p#0@@1| Tclass.M0.Path) ($IsAllocBox |p#0@@1| Tclass.M0.Path $Heap)) (and ($IsBox |st#0@@1| Tclass.M0.State) ($IsAllocBox |st#0@@1| Tclass.M0.State $Heap))) (|Set#IsMember| (M0.__default.DomSt |st#0@@1|) |p#0@@1|)))) ($IsGoodHeap $Heap)) ($IsAllocBox (M0.__default.GetSt |p#0@@1| |st#0@@1|) Tclass.M0.Artifact $Heap))
 :pattern ( ($IsAllocBox (M0.__default.GetSt |p#0@@1| |st#0@@1|) Tclass.M0.Artifact $Heap))
))))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|Set#Subset| a b) (forall ((o T@U) ) (!  (=> (|Set#IsMember| a o) (|Set#IsMember| b o))
 :pattern ( (|Set#IsMember| a o))
 :pattern ( (|Set#IsMember| b o))
)))
 :pattern ( (|Set#Subset| a b))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (|Set#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|p#0@@2| T@U) ) (!  (=> (or (|M0.__default.Hash#canCall| |p#0@@2|) (and (< 0 $FunctionContextHeight) ($IsBox |p#0@@2| Tclass.M0.Path))) ($IsBox (M0.__default.Hash |p#0@@2|) Tclass.M0.HashValue))
 :pattern ( (M0.__default.Hash |p#0@@2|))
))))
(assert (= (Ctor charType) 5))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TChar) (and (= ($Box charType ($Unbox charType bx@@0)) bx@@0) ($Is charType ($Unbox charType bx@@0) TChar)))
 :pattern ( ($IsBox bx@@0 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@0 T@U) (v@@2 T@U) ) (!  (=> ($IsBox v@@2 ty) ($IsAllocBox v@@2 ty h@@0))
 :pattern ( ($IsAllocBox v@@2 ty h@@0))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall ((v@@3 T@U) (t0@@0 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@0) h@@1) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@1) ($IsAllocBox bx@@1 t0@@0 h@@1))
 :pattern ( (|Set#IsMember| v@@3 bx@@1))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@0) h@@1))
)))
(assert (forall ((v@@4 T@U) (t0@@1 T@U) (h@@2 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@1) h@@2) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i) t0@@1 h@@2))
 :pattern ( (|Seq#Index| v@@4 i))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@1) h@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|p#0@@3| T@U) ) (!  (=> (and (or (|M0.__default.Hash#canCall| |p#0@@3|) (and (< 0 $FunctionContextHeight) (and ($IsBox |p#0@@3| Tclass.M0.Path) ($IsAllocBox |p#0@@3| Tclass.M0.Path $Heap@@0)))) ($IsGoodHeap $Heap@@0)) ($IsAllocBox (M0.__default.Hash |p#0@@3|) Tclass.M0.HashValue $Heap@@0))
 :pattern ( ($IsAllocBox (M0.__default.Hash |p#0@@3|) Tclass.M0.HashValue $Heap@@0))
))))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|st#0@@2| T@U) ) (!  (=> (or (|M0.__default.DomSt#canCall| |st#0@@2|) (and (< 0 $FunctionContextHeight) ($IsBox |st#0@@2| Tclass.M0.State))) ($Is SetType (M0.__default.DomSt |st#0@@2|) (TSet Tclass.M0.Path)))
 :pattern ( (M0.__default.DomSt |st#0@@2|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|st#0@@3| T@U) ) (!  (=> (or (|M0.__default.DomC#canCall| |st#0@@3|) (and (< 0 $FunctionContextHeight) ($IsBox |st#0@@3| Tclass.M0.State))) ($Is SetType (M0.__default.DomC |st#0@@3|) (TSet Tclass.M0.HashValue)))
 :pattern ( (M0.__default.DomC |st#0@@3|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@1 T@U) (|st#0@@4| T@U) ) (!  (=> (and (or (|M0.__default.DomC#canCall| |st#0@@4|) (and (< 0 $FunctionContextHeight) (and ($IsBox |st#0@@4| Tclass.M0.State) ($IsAllocBox |st#0@@4| Tclass.M0.State $Heap@@1)))) ($IsGoodHeap $Heap@@1)) ($IsAlloc SetType (M0.__default.DomC |st#0@@4|) (TSet Tclass.M0.HashValue) $Heap@@1))
 :pattern ( ($IsAlloc SetType (M0.__default.DomC |st#0@@4|) (TSet Tclass.M0.HashValue) $Heap@@1))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0@@2 t1 t2 (MapType0Store t0@@2 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 6)) (= (Ctor FieldType) 7)) (forall ((t0@@3 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 (MapType1Store t0@@3 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 8)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 9))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@2 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@2 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@2)) bx@@2) ($Is SetType ($Unbox SetType bx@@2) (TSet t@@5))))
 :pattern ( ($IsBox bx@@2 (TSet t@@5)))
)))
(assert (forall ((bx@@3 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@3 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@3)) bx@@3) ($Is SeqType ($Unbox SeqType bx@@3) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@3 (TSeq t@@6)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@1 o@@0) (|Set#IsMember| b@@1 o@@0))
 :pattern ( (|Set#IsMember| a@@1 o@@0))
 :pattern ( (|Set#IsMember| b@@1 o@@0))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|stC#0@@0| T@U) ) (!  (=> (or (|M0.__default.ConsistentCache#canCall| (Lit BoxType |stC#0@@0|)) (and (< 1 $FunctionContextHeight) ($IsBox |stC#0@@0| Tclass.M0.State))) (and (forall ((|cmd#1| T@U) (|deps#1| T@U) (|e#1| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#1| (TSeq TChar)) ($Is SetType |deps#1| (TSet Tclass.M0.Path))) ($Is SeqType |e#1| (TSeq TChar))) (and (and (and (|M0.__default.Loc#canCall| |cmd#1| |deps#1| |e#1|) (|M0.__default.Hash#canCall| (M0.__default.Loc |cmd#1| |deps#1| |e#1|))) (|M0.__default.DomC#canCall| (Lit BoxType |stC#0@@0|))) (=> (|Set#IsMember| (M0.__default.DomC (Lit BoxType |stC#0@@0|)) (M0.__default.Hash (M0.__default.Loc |cmd#1| |deps#1| |e#1|))) (and (|M0.__default.Loc#canCall| |cmd#1| |deps#1| |e#1|) (|M0.__default.DomSt#canCall| (Lit BoxType |stC#0@@0|))))))
 :pattern ( (M0.__default.Loc |cmd#1| |deps#1| |e#1|))
)) (= (M0.__default.ConsistentCache (Lit BoxType |stC#0@@0|)) (forall ((|cmd#1@@0| T@U) (|deps#1@@0| T@U) (|e#1@@0| T@U) ) (!  (=> (and (and ($Is SeqType |cmd#1@@0| (TSeq TChar)) ($Is SetType |deps#1@@0| (TSet Tclass.M0.Path))) ($Is SeqType |e#1@@0| (TSeq TChar))) (=> (|Set#IsMember| (M0.__default.DomC (Lit BoxType |stC#0@@0|)) (M0.__default.Hash (M0.__default.Loc |cmd#1@@0| |deps#1@@0| |e#1@@0|))) (|Set#IsMember| (M0.__default.DomSt (Lit BoxType |stC#0@@0|)) (M0.__default.Loc |cmd#1@@0| |deps#1@@0| |e#1@@0|))))
 :pattern ( (M0.__default.Loc |cmd#1@@0| |deps#1@@0| |e#1@@0|))
)))))
 :weight 3
 :pattern ( (M0.__default.ConsistentCache (Lit BoxType |stC#0@@0|)))
))))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@3 T@U) (v@@5 T@U) ) (! ($IsAlloc charType v@@5 TChar h@@3)
 :pattern ( ($IsAlloc charType v@@5 TChar h@@3))
)))
(assert (forall ((v@@6 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@4)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@0) t0@@4))
 :pattern ( (|Seq#Index| v@@6 i@@0))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@4)))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is charType v@@7 TChar)
 :pattern ( ($Is charType v@@7 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |exps#0@@0| () T@U)
(declare-fun |e#3@0| () T@U)
(declare-fun |cmd#0@@3| () T@U)
(declare-fun $Heap@@2 () T@U)
(declare-fun |deps#0@@3| () T@U)
(declare-fun |##p#2@0| () T@U)
(declare-fun |st'#Z#0@0| () T@U)
(declare-fun |st#0@@5| () T@U)
(declare-fun |p#2@0| () T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |let#0#0#0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 24) (let ((anon15_correct true))
(let ((anon25_Else_correct  (=> (and (not (|Set#IsMember| |exps#0@@0| ($Box SeqType |e#3@0|))) (= (ControlFlow 0 6) 2)) anon15_correct)))
(let ((anon25_Then_correct  (=> (|Set#IsMember| |exps#0@@0| ($Box SeqType |e#3@0|)) (=> (and ($IsAlloc SeqType |cmd#0@@3| (TSeq TChar) $Heap@@2) ($IsAlloc SetType |deps#0@@3| (TSet Tclass.M0.Path) $Heap@@2)) (=> (and (and (and ($IsAlloc SeqType |e#3@0| (TSeq TChar) $Heap@@2) (|M0.__default.Loc#canCall| |cmd#0@@3| |deps#0@@3| |e#3@0|)) (and (= |##p#2@0| (M0.__default.Loc |cmd#0@@3| |deps#0@@3| |e#3@0|)) ($IsAllocBox |##p#2@0| Tclass.M0.Path $Heap@@2))) (and (and (|M0.__default.Hash#canCall| (M0.__default.Loc |cmd#0@@3| |deps#0@@3| |e#3@0|)) ($IsAllocBox |st'#Z#0@0| Tclass.M0.State $Heap@@2)) (and (|M0.__default.DomC#canCall| |st'#Z#0@0|) (= (ControlFlow 0 5) 2)))) anon15_correct)))))
(let ((anon24_Then_correct  (=> (and ($Is SeqType |e#3@0| (TSeq TChar)) ($IsAlloc SeqType |e#3@0| (TSeq TChar) $Heap@@2)) (and (=> (= (ControlFlow 0 7) 5) anon25_Then_correct) (=> (= (ControlFlow 0 7) 6) anon25_Else_correct)))))
(let ((anon24_Else_correct  (=> (and (not (and ($Is SeqType |e#3@0| (TSeq TChar)) ($IsAlloc SeqType |e#3@0| (TSeq TChar) $Heap@@2))) (= (ControlFlow 0 4) 2)) anon15_correct)))
(let ((anon23_Then_correct  (=> (and (and (|Set#Equal| (M0.__default.DomSt |st#0@@5|) (M0.__default.DomSt |st'#Z#0@0|)) (forall ((|p#3| T@U) ) (!  (=> ($IsBox |p#3| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#3|) (= (M0.__default.GetSt |p#3| |st#0@@5|) (M0.__default.GetSt |p#3| |st'#Z#0@0|))))
 :pattern ( (M0.__default.GetSt |p#3| |st'#Z#0@0|))
 :pattern ( (M0.__default.GetSt |p#3| |st#0@@5|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#3|))
))) (=> (M0.__default.ConsistentCache |st#0@@5|) (M0.__default.ConsistentCache |st'#Z#0@0|))) (and (=> (= (ControlFlow 0 8) 7) anon24_Then_correct) (=> (= (ControlFlow 0 8) 4) anon24_Else_correct)))))
(let ((anon23_Else_correct  (=> (and (not (and (and (|Set#Equal| (M0.__default.DomSt |st#0@@5|) (M0.__default.DomSt |st'#Z#0@0|)) (forall ((|p#3@@0| T@U) ) (!  (=> ($IsBox |p#3@@0| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#3@@0|) (= (M0.__default.GetSt |p#3@@0| |st#0@@5|) (M0.__default.GetSt |p#3@@0| |st'#Z#0@0|))))
 :pattern ( (M0.__default.GetSt |p#3@@0| |st'#Z#0@0|))
 :pattern ( (M0.__default.GetSt |p#3@@0| |st#0@@5|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#3@@0|))
))) (=> (M0.__default.ConsistentCache |st#0@@5|) (M0.__default.ConsistentCache |st'#Z#0@0|)))) (= (ControlFlow 0 3) 2)) anon15_correct)))
(let ((anon22_Else_correct  (=> (not (M0.__default.ConsistentCache |st#0@@5|)) (and (=> (= (ControlFlow 0 11) 8) anon23_Then_correct) (=> (= (ControlFlow 0 11) 3) anon23_Else_correct)))))
(let ((anon22_Then_correct  (=> (M0.__default.ConsistentCache |st#0@@5|) (=> (and ($IsAllocBox |st'#Z#0@0| Tclass.M0.State $Heap@@2) (|M0.__default.ConsistentCache#canCall| |st'#Z#0@0|)) (and (=> (= (ControlFlow 0 10) 8) anon23_Then_correct) (=> (= (ControlFlow 0 10) 3) anon23_Else_correct))))))
(let ((anon21_Then_correct  (=> (and (and (|Set#Equal| (M0.__default.DomSt |st#0@@5|) (M0.__default.DomSt |st'#Z#0@0|)) (forall ((|p#3@@1| T@U) ) (!  (=> ($IsBox |p#3@@1| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#3@@1|) (= (M0.__default.GetSt |p#3@@1| |st#0@@5|) (M0.__default.GetSt |p#3@@1| |st'#Z#0@0|))))
 :pattern ( (M0.__default.GetSt |p#3@@1| |st'#Z#0@0|))
 :pattern ( (M0.__default.GetSt |p#3@@1| |st#0@@5|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#3@@1|))
))) (and ($IsAllocBox |st#0@@5| Tclass.M0.State $Heap@@2) (|M0.__default.ConsistentCache#canCall| |st#0@@5|))) (and (=> (= (ControlFlow 0 12) 10) anon22_Then_correct) (=> (= (ControlFlow 0 12) 11) anon22_Else_correct)))))
(let ((anon21_Else_correct  (=> (not (and (|Set#Equal| (M0.__default.DomSt |st#0@@5|) (M0.__default.DomSt |st'#Z#0@0|)) (forall ((|p#3@@2| T@U) ) (!  (=> ($IsBox |p#3@@2| Tclass.M0.Path) (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#3@@2|) (= (M0.__default.GetSt |p#3@@2| |st#0@@5|) (M0.__default.GetSt |p#3@@2| |st'#Z#0@0|))))
 :pattern ( (M0.__default.GetSt |p#3@@2| |st'#Z#0@0|))
 :pattern ( (M0.__default.GetSt |p#3@@2| |st#0@@5|))
 :pattern ( (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#3@@2|))
)))) (and (=> (= (ControlFlow 0 9) 8) anon23_Then_correct) (=> (= (ControlFlow 0 9) 3) anon23_Else_correct)))))
(let ((anon20_Else_correct  (=> (not (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#2@0|)) (and (=> (= (ControlFlow 0 18) 12) anon21_Then_correct) (=> (= (ControlFlow 0 18) 9) anon21_Else_correct)))))
(let ((anon20_Then_correct  (=> (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#2@0|) (=> (and ($IsAllocBox |p#2@0| Tclass.M0.Path $Heap@@2) ($IsAllocBox |st#0@@5| Tclass.M0.State $Heap@@2)) (and (=> (= (ControlFlow 0 15) (- 0 17)) (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#2@0|)) (=> (and (and (|Set#IsMember| (M0.__default.DomSt |st#0@@5|) |p#2@0|) (|M0.__default.GetSt#canCall| |p#2@0| |st#0@@5|)) (and ($IsAllocBox |p#2@0| Tclass.M0.Path $Heap@@2) ($IsAllocBox |st'#Z#0@0| Tclass.M0.State $Heap@@2))) (and (=> (= (ControlFlow 0 15) (- 0 16)) (|Set#IsMember| (M0.__default.DomSt |st'#Z#0@0|) |p#2@0|)) (=> (and (|Set#IsMember| (M0.__default.DomSt |st'#Z#0@0|) |p#2@0|) (|M0.__default.GetSt#canCall| |p#2@0| |st'#Z#0@0|)) (and (=> (= (ControlFlow 0 15) 12) anon21_Then_correct) (=> (= (ControlFlow 0 15) 9) anon21_Else_correct))))))))))
(let ((anon19_Then_correct  (=> (and (and ($IsBox |p#2@0| Tclass.M0.Path) ($IsAllocBox |p#2@0| Tclass.M0.Path $Heap@@2)) (and ($IsAllocBox |st#0@@5| Tclass.M0.State $Heap@@2) (|M0.__default.DomSt#canCall| |st#0@@5|))) (and (=> (= (ControlFlow 0 19) 15) anon20_Then_correct) (=> (= (ControlFlow 0 19) 18) anon20_Else_correct)))))
(let ((anon19_Else_correct  (=> (not (and ($IsBox |p#2@0| Tclass.M0.Path) ($IsAllocBox |p#2@0| Tclass.M0.Path $Heap@@2))) (and (=> (= (ControlFlow 0 14) 12) anon21_Then_correct) (=> (= (ControlFlow 0 14) 9) anon21_Else_correct)))))
(let ((anon18_Then_correct  (=> (|Set#Equal| (M0.__default.DomSt |st#0@@5|) (M0.__default.DomSt |st'#Z#0@0|)) (and (=> (= (ControlFlow 0 20) 19) anon19_Then_correct) (=> (= (ControlFlow 0 20) 14) anon19_Else_correct)))))
(let ((anon18_Else_correct  (=> (not (|Set#Equal| (M0.__default.DomSt |st#0@@5|) (M0.__default.DomSt |st'#Z#0@0|))) (and (=> (= (ControlFlow 0 13) 12) anon21_Then_correct) (=> (= (ControlFlow 0 13) 9) anon21_Else_correct)))))
(let ((anon17_Then_correct  (=> ($IsBox (M0.__default.UpdateC |cmd#0@@3| |deps#0@@3| |exps#0@@0| |st#0@@5|) Tclass.M0.State) (=> (and (and ($IsAlloc SeqType |cmd#0@@3| (TSeq TChar) $Heap@@2) ($IsAlloc SetType |deps#0@@3| (TSet Tclass.M0.Path) $Heap@@2)) (and ($IsAlloc SetType |exps#0@@0| (TSet (TSeq TChar)) $Heap@@2) ($IsAllocBox |st#0@@5| Tclass.M0.State $Heap@@2))) (and (=> (= (ControlFlow 0 21) (- 0 22)) (or (and (and (and (= |cmd#0@@3| |cmd#0@@3|) (|Set#Equal| |deps#0@@3| |deps#0@@3|)) (|Set#Equal| |exps#0@@0| |exps#0@@0|)) (= |st#0@@5| |st#0@@5|)) (or (< (|Seq#Rank| |cmd#0@@3|) (|Seq#Rank| |cmd#0@@3|)) (and (= (|Seq#Rank| |cmd#0@@3|) (|Seq#Rank| |cmd#0@@3|)) (or (and (|Set#Subset| |deps#0@@3| |deps#0@@3|) (not (|Set#Subset| |deps#0@@3| |deps#0@@3|))) (and (|Set#Equal| |deps#0@@3| |deps#0@@3|) (and (|Set#Subset| |exps#0@@0| |exps#0@@0|) (not (|Set#Subset| |exps#0@@0| |exps#0@@0|))))))))) (=> (or (and (and (and (= |cmd#0@@3| |cmd#0@@3|) (|Set#Equal| |deps#0@@3| |deps#0@@3|)) (|Set#Equal| |exps#0@@0| |exps#0@@0|)) (= |st#0@@5| |st#0@@5|)) (or (< (|Seq#Rank| |cmd#0@@3|) (|Seq#Rank| |cmd#0@@3|)) (and (= (|Seq#Rank| |cmd#0@@3|) (|Seq#Rank| |cmd#0@@3|)) (or (and (|Set#Subset| |deps#0@@3| |deps#0@@3|) (not (|Set#Subset| |deps#0@@3| |deps#0@@3|))) (and (|Set#Equal| |deps#0@@3| |deps#0@@3|) (and (|Set#Subset| |exps#0@@0| |exps#0@@0|) (not (|Set#Subset| |exps#0@@0| |exps#0@@0|)))))))) (=> (or (and (and (and (= |cmd#0@@3| |cmd#0@@3|) (|Set#Equal| |deps#0@@3| |deps#0@@3|)) (|Set#Equal| |exps#0@@0| |exps#0@@0|)) (= |st#0@@5| |st#0@@5|)) (|M0.__default.UpdateC#canCall| |cmd#0@@3| |deps#0@@3| |exps#0@@0| |st#0@@5|)) (=> (and (and (and (= |let#0#0#0| (M0.__default.UpdateC |cmd#0@@3| |deps#0@@3| |exps#0@@0| |st#0@@5|)) (|M0.__default.UpdateC#canCall| |cmd#0@@3| |deps#0@@3| |exps#0@@0| |st#0@@5|)) (and ($IsBox |let#0#0#0| Tclass.M0.State) (= |st'#Z#0@0| |let#0#0#0|))) (and (and ($IsAllocBox |st#0@@5| Tclass.M0.State $Heap@@2) (|M0.__default.DomSt#canCall| |st#0@@5|)) (and ($IsAllocBox |st'#Z#0@0| Tclass.M0.State $Heap@@2) (|M0.__default.DomSt#canCall| |st'#Z#0@0|)))) (and (=> (= (ControlFlow 0 21) 20) anon18_Then_correct) (=> (= (ControlFlow 0 21) 13) anon18_Else_correct))))))))))
(let ((anon17_Else_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@2 alloc false)) (and (=> (= (ControlFlow 0 23) 21) anon17_Then_correct) (=> (= (ControlFlow 0 23) 1) anon17_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (and ($Is SeqType |cmd#0@@3| (TSeq TChar)) ($Is SetType |deps#0@@3| (TSet Tclass.M0.Path)))) (and (and ($Is SetType |exps#0@@0| (TSet (TSeq TChar))) ($IsBox |st#0@@5| Tclass.M0.State)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 24) 23)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
