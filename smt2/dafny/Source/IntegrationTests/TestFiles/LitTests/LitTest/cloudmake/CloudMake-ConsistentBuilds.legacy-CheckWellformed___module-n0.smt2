(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) Bool)
(declare-fun $generated@@20 () T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 () Int)
(declare-fun $generated@@23 (T@U T@U) T@U)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U T@U) Bool)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@45 (T@U T@U T@U) Bool)
(declare-fun $generated@@46 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@51 (T@U T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) Bool)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@54 (T@U T@U) Bool)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@78 (T@U) Bool)
(declare-fun $generated@@80 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@81 () T@T)
(declare-fun $generated@@82 () T@T)
(declare-fun $generated@@83 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@84 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@85 () T@T)
(declare-fun $generated@@86 (T@T T@T) T@T)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@88 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@T) T@T)
(declare-fun $generated@@90 (T@T) T@T)
(declare-fun $generated@@141 (T@U) Bool)
(declare-fun $generated@@144 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert ($generated@@19 $generated@@20))
(assert ($generated@@19 $generated@@21))
(assert (= ($generated@@3 $generated@@26) 3))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@29 T@U) ($generated@@30 T@U) ) (!  (=> (or ($generated@@24 $generated@@29 $generated@@30) (and (< 1 $generated@@22) (and ($generated@@25 $generated@@26 $generated@@29 $generated@@27) ($generated@@28 $generated@@30 $generated@@20)))) ($generated@@28 ($generated@@23 $generated@@29 $generated@@30) $generated@@21))
 :pattern ( ($generated@@23 $generated@@29 $generated@@30))
))))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@31 $generated@@33 $generated@@34) (forall (($generated@@35 T@U) ) (!  (=> ($generated@@32 $generated@@33 $generated@@35) ($generated@@32 $generated@@34 $generated@@35))
 :pattern ( ($generated@@32 $generated@@33 $generated@@35))
 :pattern ( ($generated@@32 $generated@@34 $generated@@35))
)))
 :pattern ( ($generated@@31 $generated@@33 $generated@@34))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert (= ($generated@@3 $generated@@40) 4))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@25 $generated@@40 $generated@@42 ($generated@@41 $generated@@43)) (forall (($generated@@44 T@U) ) (!  (=> ($generated@@32 $generated@@42 $generated@@44) ($generated@@28 $generated@@44 $generated@@43))
 :pattern ( ($generated@@32 $generated@@42 $generated@@44))
)))
 :pattern ( ($generated@@25 $generated@@40 $generated@@42 ($generated@@41 $generated@@43)))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@45 ($generated@@37 $generated@@50 $generated@@47) $generated@@48 $generated@@49) ($generated@@46 $generated@@50 $generated@@47 $generated@@48 $generated@@49))
 :pattern ( ($generated@@45 ($generated@@37 $generated@@50 $generated@@47) $generated@@48 $generated@@49))
)))
(assert  (=> (<= 2 $generated@@22) (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> (or ($generated@@52 $generated@@55 $generated@@56) (and (< 2 $generated@@22) (and (and ($generated@@25 $generated@@40 $generated@@55 ($generated@@41 $generated@@27)) ($generated@@28 $generated@@56 $generated@@20)) ($generated@@31 $generated@@55 ($generated@@53 $generated@@56))))) (and (let (($generated@@57 ($generated@@51 $generated@@55 $generated@@56)))
 (and ($generated@@54 ($generated@@53 $generated@@57) $generated@@55) (forall (($generated@@58 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@58 $generated@@27) (=> ($generated@@32 $generated@@55 ($generated@@37 $generated@@26 $generated@@58)) (= ($generated@@23 $generated@@58 $generated@@56) ($generated@@23 $generated@@58 $generated@@57))))
 :pattern ( ($generated@@23 $generated@@58 $generated@@57))
 :pattern ( ($generated@@23 $generated@@58 $generated@@56))
 :pattern ( ($generated@@32 $generated@@55 ($generated@@37 $generated@@26 $generated@@58)))
)))) ($generated@@28 ($generated@@51 $generated@@55 $generated@@56) $generated@@20)))
 :pattern ( ($generated@@51 $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@28 $generated@@59 $generated@@27) (and (= ($generated@@37 $generated@@26 ($generated@@36 $generated@@26 $generated@@59)) $generated@@59) ($generated@@25 $generated@@26 ($generated@@36 $generated@@26 $generated@@59) $generated@@27)))
 :pattern ( ($generated@@28 $generated@@59 $generated@@27))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ) (!  (=> ($generated@@54 $generated@@60 $generated@@61) (= $generated@@60 $generated@@61))
 :pattern ( ($generated@@54 $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@28 ($generated@@37 $generated@@64 $generated@@62) $generated@@63) ($generated@@25 $generated@@64 $generated@@62 $generated@@63))
 :pattern ( ($generated@@28 ($generated@@37 $generated@@64 $generated@@62) $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ) (!  (=> ($generated@@19 $generated@@65) (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> ($generated@@28 $generated@@67 $generated@@65) ($generated@@45 $generated@@67 $generated@@65 $generated@@66))
 :pattern ( ($generated@@45 $generated@@67 $generated@@65 $generated@@66))
)))
 :pattern ( ($generated@@19 $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@46 $generated@@40 $generated@@68 ($generated@@41 $generated@@69) $generated@@70) (forall (($generated@@71 T@U) ) (!  (=> ($generated@@32 $generated@@68 $generated@@71) ($generated@@45 $generated@@71 $generated@@69 $generated@@70))
 :pattern ( ($generated@@32 $generated@@68 $generated@@71))
)))
 :pattern ( ($generated@@46 $generated@@40 $generated@@68 ($generated@@41 $generated@@69) $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ) (! (= ($generated@@72 ($generated@@41 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@41 $generated@@73))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@74 ($generated@@41 $generated@@75)) $generated)
 :pattern ( ($generated@@41 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@36 $generated@@77 ($generated@@37 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@37 $generated@@77 $generated@@76))
)))
(assert  (=> (<= 1 $generated@@22) (forall (($generated@@79 T@U) ) (!  (=> (or ($generated@@78 $generated@@79) (and (< 1 $generated@@22) ($generated@@28 $generated@@79 $generated@@20))) ($generated@@25 $generated@@40 ($generated@@53 $generated@@79) ($generated@@41 $generated@@27)))
 :pattern ( ($generated@@53 $generated@@79))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@80 $generated@@91 $generated@@92 $generated@@93 ($generated@@87 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@80 $generated@@98 $generated@@99 $generated@@100 ($generated@@87 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@80 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@80 $generated@@107 $generated@@108 $generated@@109 ($generated@@87 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@80 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))) (= ($generated@@3 $generated@@81) 5)) (= ($generated@@3 $generated@@82) 6)) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (! (= ($generated@@84 $generated@@116 $generated@@117 ($generated@@88 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@118) $generated@@120) $generated@@118)
 :weight 0
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (!  (or (= $generated@@125 $generated@@126) (= ($generated@@84 $generated@@121 $generated@@122 ($generated@@88 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@123) $generated@@126) ($generated@@84 $generated@@121 $generated@@122 $generated@@124 $generated@@126)))
 :weight 0
))) (= ($generated@@3 $generated@@85) 7)) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (= ($generated@@3 ($generated@@86 $generated@@127 $generated@@128)) 8))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (! (= ($generated@@89 ($generated@@86 $generated@@129 $generated@@130)) $generated@@129)
 :pattern ( ($generated@@86 $generated@@129 $generated@@130))
))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (! (= ($generated@@90 ($generated@@86 $generated@@131 $generated@@132)) $generated@@132)
 :pattern ( ($generated@@86 $generated@@131 $generated@@132))
))))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 Bool) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@8 ($generated@@80 $generated@@81 $generated@@82 $generated@@4 ($generated@@83 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))  (=> (and (or (not (= $generated@@137 $generated@@133)) (not true)) ($generated@@8 ($generated@@36 $generated@@4 ($generated@@84 $generated@@82 $generated@@85 ($generated@@84 $generated@@81 ($generated@@86 $generated@@82 $generated@@85) $generated@@134 $generated@@137) $generated@@135)))) $generated@@136))
 :pattern ( ($generated@@80 $generated@@81 $generated@@82 $generated@@4 ($generated@@83 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> ($generated@@28 $generated@@139 ($generated@@41 $generated@@140)) (and (= ($generated@@37 $generated@@40 ($generated@@36 $generated@@40 $generated@@139)) $generated@@139) ($generated@@25 $generated@@40 ($generated@@36 $generated@@40 $generated@@139) ($generated@@41 $generated@@140))))
 :pattern ( ($generated@@28 $generated@@139 ($generated@@41 $generated@@140)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> (and ($generated@@141 $generated@@143) ($generated@@25 $generated@@26 $generated@@142 $generated@@27)) ($generated@@46 $generated@@26 $generated@@142 $generated@@27 $generated@@143))
 :pattern ( ($generated@@46 $generated@@26 $generated@@142 $generated@@27 $generated@@143))
)))
(assert (= ($generated@@74 $generated@@27) $generated@@1))
(assert (= ($generated@@144 $generated@@27) $generated@@2))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@54 $generated@@145 $generated@@146) (forall (($generated@@147 T@U) ) (! (= ($generated@@32 $generated@@145 $generated@@147) ($generated@@32 $generated@@146 $generated@@147))
 :pattern ( ($generated@@32 $generated@@145 $generated@@147))
 :pattern ( ($generated@@32 $generated@@146 $generated@@147))
)))
 :pattern ( ($generated@@54 $generated@@145 $generated@@146))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@157 true))
(let (($generated@@158  (=> (and (not ($generated@@32 $generated@@148 ($generated@@37 $generated@@26 $generated@@149))) (= (ControlFlow 0 6) 2)) $generated@@157)))
(let (($generated@@159  (=> (and (and (and ($generated@@32 $generated@@148 ($generated@@37 $generated@@26 $generated@@149)) ($generated@@46 $generated@@26 $generated@@149 $generated@@27 $generated@@150)) (and ($generated@@45 $generated@@151 $generated@@20 $generated@@150) ($generated@@24 $generated@@149 $generated@@151))) (and (and ($generated@@46 $generated@@26 $generated@@149 $generated@@27 $generated@@150) ($generated@@45 $generated@@152 $generated@@20 $generated@@150)) (and ($generated@@24 $generated@@149 $generated@@152) (= (ControlFlow 0 5) 2)))) $generated@@157)))
(let (($generated@@160  (=> (and ($generated@@25 $generated@@26 $generated@@149 $generated@@27) ($generated@@46 $generated@@26 $generated@@149 $generated@@27 $generated@@150)) (and (=> (= (ControlFlow 0 7) 5) $generated@@159) (=> (= (ControlFlow 0 7) 6) $generated@@158)))))
(let (($generated@@161  (=> (and (not (and ($generated@@25 $generated@@26 $generated@@149 $generated@@27) ($generated@@46 $generated@@26 $generated@@149 $generated@@27 $generated@@150))) (= (ControlFlow 0 4) 2)) $generated@@157)))
(let (($generated@@162  (=> ($generated@@54 ($generated@@53 $generated@@152) $generated@@148) (and (=> (= (ControlFlow 0 8) 7) $generated@@160) (=> (= (ControlFlow 0 8) 4) $generated@@161)))))
(let (($generated@@163  (=> (and (not ($generated@@54 ($generated@@53 $generated@@152) $generated@@148)) (= (ControlFlow 0 3) 2)) $generated@@157)))
(let (($generated@@164  (=> ($generated@@28 ($generated@@51 $generated@@148 $generated@@151) $generated@@20) (=> (and ($generated@@46 $generated@@40 $generated@@148 ($generated@@41 $generated@@27) $generated@@150) ($generated@@45 $generated@@151 $generated@@20 $generated@@150)) (and (=> (= (ControlFlow 0 9) (- 0 11)) ($generated@@31 $generated@@148 ($generated@@53 $generated@@151))) (=> ($generated@@31 $generated@@148 ($generated@@53 $generated@@151)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (or (and ($generated@@54 $generated@@148 $generated@@148) (= $generated@@151 $generated@@151)) (and ($generated@@31 $generated@@148 $generated@@148) (not ($generated@@31 $generated@@148 $generated@@148))))) (=> (or (and ($generated@@54 $generated@@148 $generated@@148) (= $generated@@151 $generated@@151)) (and ($generated@@31 $generated@@148 $generated@@148) (not ($generated@@31 $generated@@148 $generated@@148)))) (=> (or (and ($generated@@54 $generated@@148 $generated@@148) (= $generated@@151 $generated@@151)) ($generated@@52 $generated@@148 $generated@@151)) (=> (and (= $generated@@153 ($generated@@51 $generated@@148 $generated@@151)) ($generated@@52 $generated@@148 $generated@@151)) (=> (and (and ($generated@@28 $generated@@153 $generated@@20) (= $generated@@152 $generated@@153)) (and ($generated@@45 $generated@@152 $generated@@20 $generated@@150) ($generated@@78 $generated@@152))) (and (=> (= (ControlFlow 0 9) 8) $generated@@162) (=> (= (ControlFlow 0 9) 3) $generated@@163)))))))))))))
(let (($generated@@165 true))
(let (($generated@@166  (=> (and (and (= $generated@@154 ($generated@@83 $generated@@155 $generated@@150 $generated@@0 false)) ($generated@@45 $generated@@151 $generated@@20 $generated@@150)) (and ($generated@@78 $generated@@151) ($generated@@31 $generated@@148 ($generated@@53 $generated@@151)))) (and (=> (= (ControlFlow 0 12) 9) $generated@@164) (=> (= (ControlFlow 0 12) 1) $generated@@165)))))
(let (($generated@@167  (=> (and ($generated@@141 $generated@@150) ($generated@@156 $generated@@150)) (=> (and (and ($generated@@25 $generated@@40 $generated@@148 ($generated@@41 $generated@@27)) ($generated@@28 $generated@@151 $generated@@20)) (and (= 2 $generated@@22) (= (ControlFlow 0 13) 12))) $generated@@166))))
$generated@@167))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
