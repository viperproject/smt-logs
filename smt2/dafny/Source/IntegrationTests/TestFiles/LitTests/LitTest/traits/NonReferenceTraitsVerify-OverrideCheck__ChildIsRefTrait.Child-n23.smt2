(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 (T@T) Int)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 (Bool) T@U)
(declare-fun $generated@@16 (T@U) Bool)
(declare-fun $generated@@17 (Int) T@U)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@19 (Real) T@U)
(declare-fun $generated@@20 (T@U) Real)
(declare-fun $generated@@27 () Int)
(declare-fun $generated@@28 (T@U Int) Int)
(declare-fun $generated@@29 (T@U Int) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@T T@U T@U) Bool)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@U) Int)
(declare-fun $generated@@35 (Int) Int)
(declare-fun $generated@@38 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@44 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@49 () T@U)
(declare-fun $generated@@52 () T@U)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 () T@T)
(declare-fun $generated@@59 (T@T T@T) T@T)
(declare-fun $generated@@60 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@T) T@T)
(declare-fun $generated@@86 (T@U T@U) Bool)
(declare-fun $generated@@91 (T@T T@U) T@U)
(declare-fun $generated@@94 (T@T T@U) T@U)
(declare-fun $generated@@103 (T@U) Bool)
(declare-fun $generated@@124 (T@U) T@U)
(declare-fun $generated@@125 (T@U) T@U)
(declare-fun $generated@@126 (T@U) Bool)
(declare-fun $generated@@127 (T@U) T@U)
(declare-fun $generated@@129 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@11 $generated@@12) 0) (= ($generated@@11 $generated@@13) 1)) (= ($generated@@11 $generated@@14) 2)) (forall (($generated@@21 Bool) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Int) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Real) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10)
)
(assert (= ($generated@@11 $generated@@32) 3))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@36 T@U) ($generated@@37 Int) ) (!  (=> (or ($generated@@29 $generated@@36 $generated@@37) (and (< 1 $generated@@27) (and (and (or (not (= $generated@@36 $generated@@30)) (not true)) ($generated@@31 $generated@@32 $generated@@36 $generated@@33)) (< ($generated@@34 $generated@@36) 800)))) (and (< ($generated@@28 $generated@@36 $generated@@37) (+ ($generated@@34 $generated@@36) 100)) (<= ($generated@@35 0) ($generated@@28 $generated@@36 $generated@@37))))
 :pattern ( ($generated@@28 $generated@@36 $generated@@37))
))))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (! ($generated@@38 $generated@@13 $generated@@40 $generated@@39 $generated@@41)
 :pattern ( ($generated@@38 $generated@@13 $generated@@40 $generated@@39 $generated@@41))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@42 T@U) ($generated@@43 Int) ) (!  (=> (or ($generated@@29 $generated@@42 ($generated@@35 $generated@@43)) (and (< 1 $generated@@27) (and (and (or (not (= $generated@@42 $generated@@30)) (not true)) ($generated@@31 $generated@@32 $generated@@42 $generated@@33)) (< ($generated@@34 $generated@@42) 800)))) (= ($generated@@28 $generated@@42 ($generated@@35 $generated@@43)) ($generated@@35 2)))
 :weight 3
 :pattern ( ($generated@@28 $generated@@42 ($generated@@35 $generated@@43)))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@38 $generated@@32 $generated@@46 $generated@@44 $generated@@47) ($generated@@38 $generated@@32 $generated@@46 $generated@@45 $generated@@47))
 :pattern ( ($generated@@38 $generated@@32 $generated@@46 $generated@@44 $generated@@47))
 :pattern ( ($generated@@38 $generated@@32 $generated@@46 $generated@@45 $generated@@47))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@38 $generated@@32 $generated@@50 $generated@@48 $generated@@51) ($generated@@38 $generated@@32 $generated@@50 $generated@@49 $generated@@51))
 :pattern ( ($generated@@38 $generated@@32 $generated@@50 $generated@@48 $generated@@51))
 :pattern ( ($generated@@38 $generated@@32 $generated@@50 $generated@@49 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (! (= ($generated@@38 $generated@@32 $generated@@53 $generated@@33 $generated@@54) ($generated@@38 $generated@@32 $generated@@53 $generated@@52 $generated@@54))
 :pattern ( ($generated@@38 $generated@@32 $generated@@53 $generated@@33 $generated@@54))
 :pattern ( ($generated@@38 $generated@@32 $generated@@53 $generated@@52 $generated@@54))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@56 $generated@@63 $generated@@64 ($generated@@60 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@65) $generated@@67) $generated@@65)
 :weight 0
)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@72 $generated@@73) (= ($generated@@56 $generated@@68 $generated@@69 ($generated@@60 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@70) $generated@@73) ($generated@@56 $generated@@68 $generated@@69 $generated@@71 $generated@@73)))
 :weight 0
))) (= ($generated@@11 $generated@@57) 4)) (= ($generated@@11 $generated@@58) 5)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ) (= ($generated@@11 ($generated@@59 $generated@@74 $generated@@75)) 6))) (forall (($generated@@76 T@T) ($generated@@77 T@T) ) (! (= ($generated@@61 ($generated@@59 $generated@@76 $generated@@77)) $generated@@76)
 :pattern ( ($generated@@59 $generated@@76 $generated@@77))
))) (forall (($generated@@78 T@T) ($generated@@79 T@T) ) (! (= ($generated@@62 ($generated@@59 $generated@@78 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@59 $generated@@78 $generated@@79))
))))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@38 $generated@@32 $generated@@80 $generated@@45 $generated@@81)  (or (= $generated@@80 $generated@@30) ($generated@@16 ($generated@@55 $generated@@12 ($generated@@56 $generated@@57 $generated@@58 ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@81 $generated@@80) $generated)))))
 :pattern ( ($generated@@38 $generated@@32 $generated@@80 $generated@@45 $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@38 $generated@@32 $generated@@82 $generated@@49 $generated@@83)  (or (= $generated@@82 $generated@@30) ($generated@@16 ($generated@@55 $generated@@12 ($generated@@56 $generated@@57 $generated@@58 ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@83 $generated@@82) $generated)))))
 :pattern ( ($generated@@38 $generated@@32 $generated@@82 $generated@@49 $generated@@83))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@38 $generated@@32 $generated@@84 $generated@@52 $generated@@85)  (or (= $generated@@84 $generated@@30) ($generated@@16 ($generated@@55 $generated@@12 ($generated@@56 $generated@@57 $generated@@58 ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@85 $generated@@84) $generated)))))
 :pattern ( ($generated@@38 $generated@@32 $generated@@84 $generated@@52 $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (!  (=> ($generated@@86 $generated@@87 $generated@@88) (forall (($generated@@89 T@U) ) (!  (=> ($generated@@16 ($generated@@55 $generated@@12 ($generated@@56 $generated@@57 $generated@@58 ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@87 $generated@@89) $generated))) ($generated@@16 ($generated@@55 $generated@@12 ($generated@@56 $generated@@57 $generated@@58 ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@88 $generated@@89) $generated))))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58 ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@88 $generated@@89) $generated))
)))
 :pattern ( ($generated@@86 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@90 Int) ) (! (= ($generated@@35 $generated@@90) $generated@@90)
 :pattern ( ($generated@@35 $generated@@90))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@91 $generated@@93 $generated@@92) $generated@@92)
 :pattern ( ($generated@@91 $generated@@93 $generated@@92))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@94 $generated@@96 ($generated@@55 $generated@@96 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@55 $generated@@96 $generated@@95))
)))
(assert (forall (($generated@@97 T@U) ) (! (= ($generated@@31 $generated@@13 $generated@@97 $generated@@39) (<= ($generated@@35 0) ($generated@@18 $generated@@97)))
 :pattern ( ($generated@@31 $generated@@13 $generated@@97 $generated@@39))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@T) ) (!  (=> ($generated@@86 $generated@@98 $generated@@99) (=> ($generated@@38 $generated@@102 $generated@@100 $generated@@101 $generated@@98) ($generated@@38 $generated@@102 $generated@@100 $generated@@101 $generated@@99)))
 :pattern ( ($generated@@86 $generated@@98 $generated@@99) ($generated@@38 $generated@@102 $generated@@100 $generated@@101 $generated@@98))
)))
(assert  (=> (< 0 $generated@@27) (forall (($generated@@104 T@U) ($generated@@105 T@U) ) (!  (=> (and (and ($generated@@103 $generated@@104) (and (or (not (= $generated@@105 $generated@@30)) (not true)) ($generated@@31 $generated@@32 $generated@@105 $generated@@49))) ($generated@@16 ($generated@@55 $generated@@12 ($generated@@56 $generated@@57 $generated@@58 ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@104 $generated@@105) $generated)))) ($generated@@38 $generated@@13 ($generated@@17 ($generated@@34 $generated@@105)) $generated@@39 $generated@@104))
 :pattern ( ($generated@@34 $generated@@105) ($generated@@55 $generated@@12 ($generated@@56 $generated@@57 $generated@@58 ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@104 $generated@@105) $generated)))
))))
(assert  (=> (< 0 $generated@@27) (forall (($generated@@106 T@U) ) (!  (=> (and (or (not (= $generated@@106 $generated@@30)) (not true)) ($generated@@31 $generated@@32 $generated@@106 $generated@@49)) ($generated@@31 $generated@@13 ($generated@@17 ($generated@@34 $generated@@106)) $generated@@39))
 :pattern ( ($generated@@34 $generated@@106))
))))
(assert (forall (($generated@@107 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@107 $generated@@44)  (and ($generated@@31 $generated@@32 $generated@@107 $generated@@45) (or (not (= $generated@@107 $generated@@30)) (not true))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@107 $generated@@44))
 :pattern ( ($generated@@31 $generated@@32 $generated@@107 $generated@@45))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@108 $generated@@48)  (and ($generated@@31 $generated@@32 $generated@@108 $generated@@49) (or (not (= $generated@@108 $generated@@30)) (not true))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@108 $generated@@48))
 :pattern ( ($generated@@31 $generated@@32 $generated@@108 $generated@@49))
)))
(assert (forall (($generated@@109 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@109 $generated@@33)  (and ($generated@@31 $generated@@32 $generated@@109 $generated@@52) (or (not (= $generated@@109 $generated@@30)) (not true))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@109 $generated@@33))
 :pattern ( ($generated@@31 $generated@@32 $generated@@109 $generated@@52))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (!  (=> ($generated@@38 $generated@@32 $generated@@110 $generated@@52 $generated@@111) ($generated@@38 $generated@@32 $generated@@110 $generated@@49 $generated@@111))
 :pattern ( ($generated@@38 $generated@@32 $generated@@110 $generated@@52 $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (!  (=> ($generated@@38 $generated@@32 $generated@@112 $generated@@52 $generated@@113) ($generated@@38 $generated@@32 $generated@@112 $generated@@45 $generated@@113))
 :pattern ( ($generated@@38 $generated@@32 $generated@@112 $generated@@52 $generated@@113))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@114 T@U) ($generated@@115 Int) ) (!  (=> (or ($generated@@29 ($generated@@91 $generated@@32 $generated@@114) ($generated@@35 $generated@@115)) (and (< 1 $generated@@27) (and (and (or (not (= $generated@@114 $generated@@30)) (not true)) ($generated@@31 $generated@@32 $generated@@114 $generated@@33)) (< ($generated@@34 ($generated@@91 $generated@@32 $generated@@114)) 800)))) (= ($generated@@28 ($generated@@91 $generated@@32 $generated@@114) ($generated@@35 $generated@@115)) ($generated@@35 2)))
 :weight 3
 :pattern ( ($generated@@28 ($generated@@91 $generated@@32 $generated@@114) ($generated@@35 $generated@@115)))
))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (=> (or (not (= $generated@@116 $generated@@118)) (not true)) (=> (and ($generated@@86 $generated@@116 $generated@@117) ($generated@@86 $generated@@117 $generated@@118)) ($generated@@86 $generated@@116 $generated@@118)))
 :pattern ( ($generated@@86 $generated@@116 $generated@@117) ($generated@@86 $generated@@117 $generated@@118))
)))
(assert (forall (($generated@@119 T@U) ) (! ($generated@@31 $generated@@32 $generated@@119 $generated@@45)
 :pattern ( ($generated@@31 $generated@@32 $generated@@119 $generated@@45))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@T) ) (! (= ($generated@@55 $generated@@121 ($generated@@94 $generated@@121 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@94 $generated@@121 $generated@@120))
)))
(assert (forall (($generated@@122 T@U) ) (!  (=> ($generated@@31 $generated@@32 $generated@@122 $generated@@52) ($generated@@31 $generated@@32 $generated@@122 $generated@@49))
 :pattern ( ($generated@@31 $generated@@32 $generated@@122 $generated@@52))
)))
(assert (forall (($generated@@123 T@U) ) (!  (=> ($generated@@31 $generated@@32 $generated@@123 $generated@@52) ($generated@@31 $generated@@32 $generated@@123 $generated@@45))
 :pattern ( ($generated@@31 $generated@@32 $generated@@123 $generated@@52))
)))
(assert (= ($generated@@124 $generated@@39) $generated@@0))
(assert (= ($generated@@125 $generated@@39) $generated@@7))
(assert (= ($generated@@124 $generated@@45) $generated@@1))
(assert (= ($generated@@125 $generated@@45) $generated@@8))
(assert (= ($generated@@124 $generated@@44) $generated@@2))
(assert (= ($generated@@125 $generated@@44) $generated@@8))
(assert (= ($generated@@124 $generated@@48) $generated@@3))
(assert (= ($generated@@125 $generated@@48) $generated@@9))
(assert (= ($generated@@124 $generated@@33) $generated@@4))
(assert (= ($generated@@125 $generated@@33) $generated@@10))
(assert (= ($generated@@124 $generated@@52) $generated@@5))
(assert (= ($generated@@125 $generated@@52) $generated@@10))
(assert (= ($generated@@124 $generated@@49) $generated@@6))
(assert (= ($generated@@125 $generated@@49) $generated@@9))
(assert (forall (($generated@@128 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@128 $generated@@49)  (or (= $generated@@128 $generated@@30) ($generated@@126 ($generated@@127 $generated@@128))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@128 $generated@@49))
)))
(assert (forall (($generated@@130 T@U) ) (! (= ($generated@@31 $generated@@32 $generated@@130 $generated@@52)  (or (= $generated@@130 $generated@@30) ($generated@@129 ($generated@@127 $generated@@130))))
 :pattern ( ($generated@@31 $generated@@32 $generated@@130 $generated@@52))
)))
(assert (forall (($generated@@131 Int) ) (! (= ($generated@@94 $generated@@13 ($generated@@17 ($generated@@35 $generated@@131))) ($generated@@91 $generated@@58 ($generated@@94 $generated@@13 ($generated@@17 $generated@@131))))
 :pattern ( ($generated@@94 $generated@@13 ($generated@@17 ($generated@@35 $generated@@131))))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@T) ) (! (= ($generated@@94 $generated@@133 ($generated@@91 $generated@@133 $generated@@132)) ($generated@@91 $generated@@58 ($generated@@94 $generated@@133 $generated@@132)))
 :pattern ( ($generated@@94 $generated@@133 ($generated@@91 $generated@@133 $generated@@132)))
)))
(assert  (=> (<= 1 $generated@@27) (forall (($generated@@134 T@U) ($generated@@135 Int) ) (!  (=> (or ($generated@@29 $generated@@134 $generated@@135) (and (< 1 $generated@@27) (and (and (or (not (= $generated@@134 $generated@@30)) (not true)) ($generated@@31 $generated@@32 $generated@@134 $generated@@33)) (< ($generated@@34 $generated@@134) 800)))) (= ($generated@@28 $generated@@134 $generated@@135) ($generated@@35 2)))
 :pattern ( ($generated@@28 $generated@@134 $generated@@135))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 (T@U) Bool)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@141  (=> (< ($generated@@34 $generated@@136) 100) (and (=> (= (ControlFlow 0 2) (- 0 6)) (< ($generated@@34 $generated@@136) 800)) (=> (< ($generated@@34 $generated@@136) 800) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall (($generated@@142 T@U) ($generated@@143 T@U) ) true)) (=> (forall (($generated@@144 T@U) ($generated@@145 T@U) ) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@146 T@U) ($generated@@147 T@U) ) true)) (=> (forall (($generated@@148 T@U) ($generated@@149 T@U) ) true) (=> (and ($generated@@103 $generated@@137) ($generated@@138 $generated@@137)) (=> (and (and (forall (($generated@@150 T@U) ) (!  (=> (and (or (not (= $generated@@150 $generated@@30)) (not true)) ($generated@@16 ($generated@@55 $generated@@12 ($generated@@56 $generated@@57 $generated@@58 ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@139 $generated@@150) $generated)))) (= ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@137 $generated@@150) ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@139 $generated@@150)))
 :pattern ( ($generated@@56 $generated@@32 ($generated@@59 $generated@@57 $generated@@58) $generated@@137 $generated@@150))
)) ($generated@@86 $generated@@139 $generated@@137)) (and (< $generated@@140 (+ (+ ($generated@@34 $generated@@136) ($generated@@28 $generated@@136 ($generated@@35 5))) 100)) (= (ControlFlow 0 2) (- 0 1)))) (< $generated@@140 (+ (+ ($generated@@34 $generated@@136) ($generated@@28 $generated@@136 ($generated@@35 5))) 900))))))))))))))
(let (($generated@@151  (=> (and ($generated@@103 $generated@@139) ($generated@@138 $generated@@139)) (=> (and (and (and (or (not (= $generated@@136 $generated@@30)) (not true)) (and ($generated@@31 $generated@@32 $generated@@136 $generated@@33) ($generated@@38 $generated@@32 $generated@@136 $generated@@33 $generated@@139))) (<= ($generated@@35 0) $generated@@140)) (and (= 2 $generated@@27) (= (ControlFlow 0 7) 2))) $generated@@141))))
$generated@@151)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
