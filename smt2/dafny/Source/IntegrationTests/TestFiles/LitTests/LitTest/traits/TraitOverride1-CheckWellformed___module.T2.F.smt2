(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@T T@T) T@T)
(declare-fun $generated@@34 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U) Bool)
(declare-fun $generated@@64 (T@T T@U T@U) Bool)
(declare-fun $generated@@68 () Int)
(declare-fun $generated@@69 (T@U Int) Int)
(declare-fun $generated@@70 (T@U Int) Bool)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@108 (T@U) Bool)
(declare-fun $generated@@109 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@23) 3))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@26 $generated@@24 $generated@@27) ($generated@@22 $generated@@23 $generated@@26 $generated@@25 $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 $generated@@26 $generated@@24 $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 $generated@@26 $generated@@25 $generated@@27))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@30 $generated@@37 $generated@@38 ($generated@@34 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@41) $generated@@39)
 :weight 0
)) (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (or (= $generated@@46 $generated@@47) (= ($generated@@30 $generated@@42 $generated@@43 ($generated@@34 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@47) ($generated@@30 $generated@@42 $generated@@43 $generated@@45 $generated@@47)))
 :weight 0
))) (= ($generated@@5 $generated@@31) 4)) (= ($generated@@5 $generated@@32) 5)) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (= ($generated@@5 ($generated@@33 $generated@@48 $generated@@49)) 6))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@35 ($generated@@33 $generated@@50 $generated@@51)) $generated@@50)
 :pattern ( ($generated@@33 $generated@@50 $generated@@51))
))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@36 ($generated@@33 $generated@@52 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@33 $generated@@52 $generated@@53))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@54 $generated@@25 $generated@@55)  (or (= $generated@@54 $generated@@28) ($generated@@10 ($generated@@29 $generated@@6 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@55 $generated@@54) $generated@@1)))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@54 $generated@@25 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 ($generated@@29 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@29 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@59 ($generated@@56 $generated@@63 $generated@@60) $generated@@61 $generated@@62) ($generated@@22 $generated@@63 $generated@@60 $generated@@61 $generated@@62))
 :pattern ( ($generated@@59 ($generated@@56 $generated@@63 $generated@@60) $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@64 $generated@@23 $generated@@65 $generated@@24)  (and ($generated@@64 $generated@@23 $generated@@65 $generated@@25) (or (not (= $generated@@65 $generated@@28)) (not true))))
 :pattern ( ($generated@@64 $generated@@23 $generated@@65 $generated@@24))
 :pattern ( ($generated@@64 $generated@@23 $generated@@65 $generated@@25))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@29 $generated@@67 ($generated@@56 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@56 $generated@@67 $generated@@66))
)))
(assert  (=> (<= 1 $generated@@68) (forall (($generated@@71 T@U) ($generated@@72 Int) ) (!  (=> (or ($generated@@70 $generated@@71 $generated@@72) (and (< 1 $generated@@68) (and (and (or (not (= $generated@@71 $generated@@28)) (not true)) ($generated@@64 $generated@@23 $generated@@71 $generated@@24)) (< $generated@@72 100)))) (< ($generated@@69 $generated@@71 $generated@@72) 100))
 :pattern ( ($generated@@69 $generated@@71 $generated@@72))
))))
(assert  (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@73 $generated@@76 $generated@@77 $generated@@78 ($generated@@75 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@81 $generated@@82) $generated@@79)
 :weight 0
)) (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (!  (or (= $generated@@88 $generated@@90) (= ($generated@@73 $generated@@83 $generated@@84 $generated@@85 ($generated@@75 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@90 $generated@@91) ($generated@@73 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@90 $generated@@91)))
 :weight 0
)) (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@73 $generated@@92 $generated@@93 $generated@@94 ($generated@@75 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@99 $generated@@100) ($generated@@73 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@99 $generated@@100)))
 :weight 0
)))))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 Bool) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@10 ($generated@@73 $generated@@23 $generated@@31 $generated@@6 ($generated@@74 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))  (=> (and (or (not (= $generated@@105 $generated@@101)) (not true)) ($generated@@10 ($generated@@29 $generated@@6 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@102 $generated@@105) $generated@@103)))) $generated@@104))
 :pattern ( ($generated@@73 $generated@@23 $generated@@31 $generated@@6 ($generated@@74 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))
)))
(assert (= ($generated@@21 $generated@@25) $generated@@2))
(assert (= ($generated@@107 $generated@@25) $generated@@4))
(assert (= ($generated@@21 $generated@@24) $generated@@3))
(assert (= ($generated@@107 $generated@@24) $generated@@4))
(assert (forall (($generated@@110 T@U) ) (! (= ($generated@@64 $generated@@23 $generated@@110 $generated@@25)  (or (= $generated@@110 $generated@@28) ($generated@@108 ($generated@@109 $generated@@110))))
 :pattern ( ($generated@@64 $generated@@23 $generated@@110 $generated@@25))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! ($generated@@22 $generated@@7 $generated@@112 $generated $generated@@111)
 :pattern ( ($generated@@22 $generated@@7 $generated@@112 $generated $generated@@111))
)))
(assert (forall (($generated@@113 T@U) ) (! ($generated@@64 $generated@@7 $generated@@113 $generated)
 :pattern ( ($generated@@64 $generated@@7 $generated@@113 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 (T@U) Bool)
(declare-fun $generated@@119 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@120 true))
(let (($generated@@121  (=> (and ($generated@@59 ($generated@@56 $generated@@23 $generated@@114) $generated@@25 $generated@@115) ($generated@@22 $generated@@7 ($generated@@11 $generated@@116) $generated $generated@@115)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (< $generated@@116 100)) (=> (< $generated@@116 100) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (<= 0 $generated@@116) (= $generated@@116 $generated@@116))) (=> (or (<= 0 $generated@@116) (= $generated@@116 $generated@@116)) (=> (= (ControlFlow 0 2) (- 0 1)) (or (and (= $generated@@114 $generated@@114) (= $generated@@116 $generated@@116)) (< $generated@@116 $generated@@116))))))))))
(let (($generated@@122  (=> (and (= $generated@@117 ($generated@@74 $generated@@28 $generated@@115 $generated@@1 false)) (< $generated@@116 100)) (and (=> (= (ControlFlow 0 6) 2) $generated@@121) (=> (= (ControlFlow 0 6) 5) $generated@@120)))))
(let (($generated@@123  (=> (and ($generated@@118 $generated@@115) ($generated@@119 $generated@@115)) (=> (and (and (or (not (= $generated@@114 $generated@@28)) (not true)) (and ($generated@@64 $generated@@23 $generated@@114 $generated@@24) ($generated@@22 $generated@@23 $generated@@114 $generated@@24 $generated@@115))) (and (= 1 $generated@@68) (= (ControlFlow 0 7) 6))) $generated@@122))))
$generated@@123)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
