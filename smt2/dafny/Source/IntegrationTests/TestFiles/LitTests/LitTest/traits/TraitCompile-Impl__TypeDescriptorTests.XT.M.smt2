(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@T T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U T@U) T@U)
(declare-fun $generated@@26 (T@U T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@31 (T@U T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@41 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T) T@T)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@69 (T@U T@U) Bool)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@79 (T@U) T@U)
(declare-fun $generated@@82 (T@U) T@U)
(declare-fun $generated@@85 (T@U T@U T@U) Bool)
(declare-fun $generated@@86 (T@U) T@U)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@132 (T@U) T@U)
(declare-fun $generated@@133 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (forall (($generated@@21 T@U) ($generated@@22 T@T) ) (! (= ($generated@@20 $generated@@22 ($generated@@19 $generated@@22 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@19 $generated@@22 $generated@@21))
)))
(assert (= ($generated@@3 $generated@@24) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@30 ($generated@@25 $generated@@28 $generated@@29))  (and ($generated@@23 $generated@@24 $generated@@30 ($generated@@26 $generated@@28 $generated@@29)) (or (not (= $generated@@30 $generated@@27)) (not true))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@30 ($generated@@25 $generated@@28 $generated@@29)))
 :pattern ( ($generated@@23 $generated@@24 $generated@@30 ($generated@@26 $generated@@28 $generated@@29)))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@31 ($generated@@20 $generated@@36 $generated@@33) $generated@@34 $generated@@35) ($generated@@32 $generated@@36 $generated@@33 $generated@@34 $generated@@35))
 :pattern ( ($generated@@31 ($generated@@20 $generated@@36 $generated@@33) $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (! (= ($generated@@32 $generated@@24 $generated@@39 ($generated@@25 $generated@@37 $generated@@38) $generated@@40) ($generated@@32 $generated@@24 $generated@@39 ($generated@@26 $generated@@37 $generated@@38) $generated@@40))
 :pattern ( ($generated@@32 $generated@@24 $generated@@39 ($generated@@25 $generated@@37 $generated@@38) $generated@@40))
 :pattern ( ($generated@@32 $generated@@24 $generated@@39 ($generated@@26 $generated@@37 $generated@@38) $generated@@40))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@41 $generated@@48 $generated@@49 ($generated@@45 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@50) $generated@@52) $generated@@50)
 :weight 0
)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (or (= $generated@@57 $generated@@58) (= ($generated@@41 $generated@@53 $generated@@54 ($generated@@45 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@58) ($generated@@41 $generated@@53 $generated@@54 $generated@@56 $generated@@58)))
 :weight 0
))) (= ($generated@@3 $generated@@42) 4)) (= ($generated@@3 $generated@@43) 5)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (= ($generated@@3 ($generated@@44 $generated@@59 $generated@@60)) 6))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@46 ($generated@@44 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@44 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@63 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@44 $generated@@63 $generated@@64))
))))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@32 $generated@@24 $generated@@67 ($generated@@26 $generated@@65 $generated@@66) $generated@@68)  (or (= $generated@@67 $generated@@27) ($generated@@8 ($generated@@19 $generated@@4 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@24 ($generated@@44 $generated@@42 $generated@@43) $generated@@68 $generated@@67) $generated)))))
 :pattern ( ($generated@@32 $generated@@24 $generated@@67 ($generated@@26 $generated@@65 $generated@@66) $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@69 ($generated@@20 $generated@@72 $generated@@70) $generated@@71) ($generated@@23 $generated@@72 $generated@@70 $generated@@71))
 :pattern ( ($generated@@69 ($generated@@20 $generated@@72 $generated@@70) $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@73 ($generated@@26 $generated@@74 $generated@@75)) $generated@@74)
 :pattern ( ($generated@@26 $generated@@74 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@76 ($generated@@26 $generated@@77 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@26 $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (! (= ($generated@@79 ($generated@@25 $generated@@80 $generated@@81)) $generated@@80)
 :pattern ( ($generated@@25 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@82 ($generated@@25 $generated@@83 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@25 $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@89 ($generated@@26 $generated@@87 $generated@@88))  (or (= $generated@@89 $generated@@27) ($generated@@85 ($generated@@86 $generated@@89) $generated@@87 $generated@@88)))
 :pattern ( ($generated@@23 $generated@@24 $generated@@89 ($generated@@26 $generated@@87 $generated@@88)))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@T) ) (! (= ($generated@@19 $generated@@91 ($generated@@20 $generated@@91 $generated@@90)) $generated@@90)
 :pattern ( ($generated@@20 $generated@@91 $generated@@90))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (=> ($generated@@69 $generated@@94 ($generated@@26 $generated@@92 $generated@@93)) (and (= ($generated@@20 $generated@@24 ($generated@@19 $generated@@24 $generated@@94)) $generated@@94) ($generated@@23 $generated@@24 ($generated@@19 $generated@@24 $generated@@94) ($generated@@26 $generated@@92 $generated@@93))))
 :pattern ( ($generated@@69 $generated@@94 ($generated@@26 $generated@@92 $generated@@93)))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (=> ($generated@@69 $generated@@97 ($generated@@25 $generated@@95 $generated@@96)) (and (= ($generated@@20 $generated@@24 ($generated@@19 $generated@@24 $generated@@97)) $generated@@97) ($generated@@23 $generated@@24 ($generated@@19 $generated@@24 $generated@@97) ($generated@@25 $generated@@95 $generated@@96))))
 :pattern ( ($generated@@69 $generated@@97 ($generated@@25 $generated@@95 $generated@@96)))
)))
(assert  (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@98 $generated@@101 $generated@@102 $generated@@103 ($generated@@100 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@106 $generated@@107) $generated@@104)
 :weight 0
)) (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@98 $generated@@108 $generated@@109 $generated@@110 ($generated@@100 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@98 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@98 $generated@@117 $generated@@118 $generated@@119 ($generated@@100 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@98 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)))))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 Bool) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@8 ($generated@@98 $generated@@24 $generated@@42 $generated@@4 ($generated@@99 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))  (=> (and (or (not (= $generated@@130 $generated@@126)) (not true)) ($generated@@8 ($generated@@19 $generated@@4 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@24 ($generated@@44 $generated@@42 $generated@@43) $generated@@127 $generated@@130) $generated@@128)))) $generated@@129))
 :pattern ( ($generated@@98 $generated@@24 $generated@@42 $generated@@4 ($generated@@99 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (!  (and (= ($generated@@132 ($generated@@26 $generated@@134 $generated@@135)) $generated@@0) (= ($generated@@133 ($generated@@26 $generated@@134 $generated@@135)) $generated@@2))
 :pattern ( ($generated@@26 $generated@@134 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (!  (and (= ($generated@@132 ($generated@@25 $generated@@136 $generated@@137)) $generated@@1) (= ($generated@@133 ($generated@@25 $generated@@136 $generated@@137)) $generated@@2))
 :pattern ( ($generated@@25 $generated@@136 $generated@@137))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 () T@U)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 (T@U) Bool)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () Bool)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@149  (=> (and (= $generated@@138 ($generated@@99 $generated@@27 $generated@@139 $generated false)) (= (ControlFlow 0 2) (- 0 1))) true)))
(let (($generated@@150  (=> (and (and ($generated@@140 $generated@@139) ($generated@@141 $generated@@139)) (and (or (not (= $generated@@142 $generated@@27)) (not true)) (and ($generated@@23 $generated@@24 $generated@@142 ($generated@@25 $generated@@143 $generated@@144)) ($generated@@32 $generated@@24 $generated@@142 ($generated@@25 $generated@@143 $generated@@144) $generated@@139)))) (=> (and (and (and ($generated@@69 $generated@@145 $generated@@143) ($generated@@31 $generated@@145 $generated@@143 $generated@@139)) (=> $generated@@146 (and ($generated@@69 $generated@@147 $generated@@143) ($generated@@31 $generated@@147 $generated@@143 $generated@@139)))) (and (= 0 $generated@@148) (= (ControlFlow 0 3) 2))) $generated@@149))))
$generated@@150)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
