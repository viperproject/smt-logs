(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (T@U Int) Int)
(declare-fun $generated@@30 (Int) Int)
(declare-fun $generated@@31 (T@U Int) Bool)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@T T@U T@U) Bool)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@U) Int)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@46 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@T T@T) T@T)
(declare-fun $generated@@51 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@53 (T@T) T@T)
(declare-fun $generated@@75 (T@U T@U) Bool)
(declare-fun $generated@@80 (T@T T@U) T@U)
(declare-fun $generated@@83 (T@T T@U) T@U)
(declare-fun $generated@@92 (T@U) Bool)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@112 (T@U) Bool)
(declare-fun $generated@@113 (T@U) T@U)
(declare-fun $generated@@115 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! ($generated@@24 $generated@@10 $generated@@26 $generated@@25 $generated@@27)
 :pattern ( ($generated@@24 $generated@@10 $generated@@26 $generated@@25 $generated@@27))
)))
(assert (= ($generated@@8 $generated@@34) 3))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@37 T@U) ($generated@@38 Int) ) (!  (=> (or ($generated@@31 $generated@@37 ($generated@@30 $generated@@38)) (and (< 1 $generated@@28) (and (and (or (not (= $generated@@37 $generated@@32)) (not true)) ($generated@@33 $generated@@34 $generated@@37 $generated@@35)) (< ($generated@@36 $generated@@37) 800)))) (= ($generated@@29 $generated@@37 ($generated@@30 $generated@@38)) ($generated@@30 2)))
 :weight 3
 :pattern ( ($generated@@29 $generated@@37 ($generated@@30 $generated@@38)))
))))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@24 $generated@@34 $generated@@41 $generated@@39 $generated@@42) ($generated@@24 $generated@@34 $generated@@41 $generated@@40 $generated@@42))
 :pattern ( ($generated@@24 $generated@@34 $generated@@41 $generated@@39 $generated@@42))
 :pattern ( ($generated@@24 $generated@@34 $generated@@41 $generated@@40 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@24 $generated@@34 $generated@@44 $generated@@35 $generated@@45) ($generated@@24 $generated@@34 $generated@@44 $generated@@43 $generated@@45))
 :pattern ( ($generated@@24 $generated@@34 $generated@@44 $generated@@35 $generated@@45))
 :pattern ( ($generated@@24 $generated@@34 $generated@@44 $generated@@43 $generated@@45))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@47 $generated@@54 $generated@@55 ($generated@@51 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@56) $generated@@58) $generated@@56)
 :weight 0
)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (or (= $generated@@63 $generated@@64) (= ($generated@@47 $generated@@59 $generated@@60 ($generated@@51 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@61) $generated@@64) ($generated@@47 $generated@@59 $generated@@60 $generated@@62 $generated@@64)))
 :weight 0
))) (= ($generated@@8 $generated@@48) 4)) (= ($generated@@8 $generated@@49) 5)) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (= ($generated@@8 ($generated@@50 $generated@@65 $generated@@66)) 6))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (! (= ($generated@@52 ($generated@@50 $generated@@67 $generated@@68)) $generated@@67)
 :pattern ( ($generated@@50 $generated@@67 $generated@@68))
))) (forall (($generated@@69 T@T) ($generated@@70 T@T) ) (! (= ($generated@@53 ($generated@@50 $generated@@69 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@50 $generated@@69 $generated@@70))
))))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@24 $generated@@34 $generated@@71 $generated@@40 $generated@@72)  (or (= $generated@@71 $generated@@32) ($generated@@13 ($generated@@46 $generated@@9 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@72 $generated@@71) $generated)))))
 :pattern ( ($generated@@24 $generated@@34 $generated@@71 $generated@@40 $generated@@72))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@24 $generated@@34 $generated@@73 $generated@@43 $generated@@74)  (or (= $generated@@73 $generated@@32) ($generated@@13 ($generated@@46 $generated@@9 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@74 $generated@@73) $generated)))))
 :pattern ( ($generated@@24 $generated@@34 $generated@@73 $generated@@43 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> ($generated@@75 $generated@@76 $generated@@77) (forall (($generated@@78 T@U) ) (!  (=> ($generated@@13 ($generated@@46 $generated@@9 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@76 $generated@@78) $generated))) ($generated@@13 ($generated@@46 $generated@@9 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@77 $generated@@78) $generated))))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@77 $generated@@78) $generated))
)))
 :pattern ( ($generated@@75 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@79 Int) ) (! (= ($generated@@30 $generated@@79) $generated@@79)
 :pattern ( ($generated@@30 $generated@@79))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@80 $generated@@82 $generated@@81) $generated@@81)
 :pattern ( ($generated@@80 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@T) ) (! (= ($generated@@83 $generated@@85 ($generated@@46 $generated@@85 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@46 $generated@@85 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@33 $generated@@10 $generated@@86 $generated@@25) (<= ($generated@@30 0) ($generated@@15 $generated@@86)))
 :pattern ( ($generated@@33 $generated@@10 $generated@@86 $generated@@25))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@T) ) (!  (=> ($generated@@75 $generated@@87 $generated@@88) (=> ($generated@@24 $generated@@91 $generated@@89 $generated@@90 $generated@@87) ($generated@@24 $generated@@91 $generated@@89 $generated@@90 $generated@@88)))
 :pattern ( ($generated@@75 $generated@@87 $generated@@88) ($generated@@24 $generated@@91 $generated@@89 $generated@@90 $generated@@87))
)))
(assert  (=> (< 0 $generated@@28) (forall (($generated@@93 T@U) ($generated@@94 T@U) ) (!  (=> (and (and ($generated@@92 $generated@@93) (and (or (not (= $generated@@94 $generated@@32)) (not true)) ($generated@@33 $generated@@34 $generated@@94 $generated@@40))) ($generated@@13 ($generated@@46 $generated@@9 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@93 $generated@@94) $generated)))) ($generated@@24 $generated@@10 ($generated@@14 ($generated@@36 $generated@@94)) $generated@@25 $generated@@93))
 :pattern ( ($generated@@36 $generated@@94) ($generated@@46 $generated@@9 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@93 $generated@@94) $generated)))
))))
(assert  (=> (< 0 $generated@@28) (forall (($generated@@95 T@U) ) (!  (=> (and (or (not (= $generated@@95 $generated@@32)) (not true)) ($generated@@33 $generated@@34 $generated@@95 $generated@@40)) ($generated@@33 $generated@@10 ($generated@@14 ($generated@@36 $generated@@95)) $generated@@25))
 :pattern ( ($generated@@36 $generated@@95))
))))
(assert (forall (($generated@@96 T@U) ) (! (= ($generated@@33 $generated@@34 $generated@@96 $generated@@39)  (and ($generated@@33 $generated@@34 $generated@@96 $generated@@40) (or (not (= $generated@@96 $generated@@32)) (not true))))
 :pattern ( ($generated@@33 $generated@@34 $generated@@96 $generated@@39))
 :pattern ( ($generated@@33 $generated@@34 $generated@@96 $generated@@40))
)))
(assert (forall (($generated@@97 T@U) ) (! (= ($generated@@33 $generated@@34 $generated@@97 $generated@@35)  (and ($generated@@33 $generated@@34 $generated@@97 $generated@@43) (or (not (= $generated@@97 $generated@@32)) (not true))))
 :pattern ( ($generated@@33 $generated@@34 $generated@@97 $generated@@35))
 :pattern ( ($generated@@33 $generated@@34 $generated@@97 $generated@@43))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ) (!  (=> ($generated@@24 $generated@@34 $generated@@98 $generated@@43 $generated@@99) ($generated@@24 $generated@@34 $generated@@98 $generated@@40 $generated@@99))
 :pattern ( ($generated@@24 $generated@@34 $generated@@98 $generated@@43 $generated@@99))
)))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@100 T@U) ($generated@@101 Int) ) (!  (=> (or ($generated@@31 ($generated@@80 $generated@@34 $generated@@100) ($generated@@30 $generated@@101)) (and (< 1 $generated@@28) (and (and (or (not (= $generated@@100 $generated@@32)) (not true)) ($generated@@33 $generated@@34 $generated@@100 $generated@@35)) (< ($generated@@36 ($generated@@80 $generated@@34 $generated@@100)) 800)))) (= ($generated@@29 ($generated@@80 $generated@@34 $generated@@100) ($generated@@30 $generated@@101)) ($generated@@30 2)))
 :weight 3
 :pattern ( ($generated@@29 ($generated@@80 $generated@@34 $generated@@100) ($generated@@30 $generated@@101)))
))))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (or (not (= $generated@@102 $generated@@104)) (not true)) (=> (and ($generated@@75 $generated@@102 $generated@@103) ($generated@@75 $generated@@103 $generated@@104)) ($generated@@75 $generated@@102 $generated@@104)))
 :pattern ( ($generated@@75 $generated@@102 $generated@@103) ($generated@@75 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@46 $generated@@106 ($generated@@83 $generated@@106 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@83 $generated@@106 $generated@@105))
)))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@107 T@U) ($generated@@108 Int) ) (!  (=> (or ($generated@@31 $generated@@107 $generated@@108) (and (< 1 $generated@@28) (and (and (or (not (= $generated@@107 $generated@@32)) (not true)) ($generated@@33 $generated@@34 $generated@@107 $generated@@35)) (< ($generated@@36 $generated@@107) 800)))) (and (< ($generated@@29 $generated@@107 $generated@@108) ($generated@@36 $generated@@107)) (<= ($generated@@30 0) ($generated@@29 $generated@@107 $generated@@108))))
 :pattern ( ($generated@@29 $generated@@107 $generated@@108))
))))
(assert (forall (($generated@@109 T@U) ) (!  (=> ($generated@@33 $generated@@34 $generated@@109 $generated@@43) ($generated@@33 $generated@@34 $generated@@109 $generated@@40))
 :pattern ( ($generated@@33 $generated@@34 $generated@@109 $generated@@43))
)))
(assert (= ($generated@@110 $generated@@25) $generated@@0))
(assert (= ($generated@@111 $generated@@25) $generated@@5))
(assert (= ($generated@@110 $generated@@39) $generated@@1))
(assert (= ($generated@@111 $generated@@39) $generated@@6))
(assert (= ($generated@@110 $generated@@40) $generated@@2))
(assert (= ($generated@@111 $generated@@40) $generated@@6))
(assert (= ($generated@@110 $generated@@43) $generated@@3))
(assert (= ($generated@@111 $generated@@43) $generated@@7))
(assert (= ($generated@@110 $generated@@35) $generated@@4))
(assert (= ($generated@@111 $generated@@35) $generated@@7))
(assert (forall (($generated@@114 T@U) ) (! (= ($generated@@33 $generated@@34 $generated@@114 $generated@@40)  (or (= $generated@@114 $generated@@32) ($generated@@112 ($generated@@113 $generated@@114))))
 :pattern ( ($generated@@33 $generated@@34 $generated@@114 $generated@@40))
)))
(assert (forall (($generated@@116 T@U) ) (! (= ($generated@@33 $generated@@34 $generated@@116 $generated@@43)  (or (= $generated@@116 $generated@@32) ($generated@@115 ($generated@@113 $generated@@116))))
 :pattern ( ($generated@@33 $generated@@34 $generated@@116 $generated@@43))
)))
(assert (forall (($generated@@117 Int) ) (! (= ($generated@@83 $generated@@10 ($generated@@14 ($generated@@30 $generated@@117))) ($generated@@80 $generated@@49 ($generated@@83 $generated@@10 ($generated@@14 $generated@@117))))
 :pattern ( ($generated@@83 $generated@@10 ($generated@@14 ($generated@@30 $generated@@117))))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@T) ) (! (= ($generated@@83 $generated@@119 ($generated@@80 $generated@@119 $generated@@118)) ($generated@@80 $generated@@49 ($generated@@83 $generated@@119 $generated@@118)))
 :pattern ( ($generated@@83 $generated@@119 ($generated@@80 $generated@@119 $generated@@118)))
)))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@120 T@U) ($generated@@121 Int) ) (!  (=> (or ($generated@@31 $generated@@120 $generated@@121) (and (< 1 $generated@@28) (and (and (or (not (= $generated@@120 $generated@@32)) (not true)) ($generated@@33 $generated@@34 $generated@@120 $generated@@35)) (< ($generated@@36 $generated@@120) 800)))) (= ($generated@@29 $generated@@120 $generated@@121) ($generated@@30 2)))
 :pattern ( ($generated@@29 $generated@@120 $generated@@121))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@127  (=> (< ($generated@@36 $generated@@122) 100) (and (=> (= (ControlFlow 0 2) (- 0 6)) (< ($generated@@36 $generated@@122) 800)) (=> (< ($generated@@36 $generated@@122) 800) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall (($generated@@128 T@U) ($generated@@129 T@U) ) true)) (=> (forall (($generated@@130 T@U) ($generated@@131 T@U) ) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@132 T@U) ($generated@@133 T@U) ) true)) (=> (forall (($generated@@134 T@U) ($generated@@135 T@U) ) true) (=> (and ($generated@@92 $generated@@123) ($generated@@124 $generated@@123)) (=> (and (and (forall (($generated@@136 T@U) ) (!  (=> (and (or (not (= $generated@@136 $generated@@32)) (not true)) ($generated@@13 ($generated@@46 $generated@@9 ($generated@@47 $generated@@48 $generated@@49 ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@125 $generated@@136) $generated)))) (= ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@123 $generated@@136) ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@125 $generated@@136)))
 :pattern ( ($generated@@47 $generated@@34 ($generated@@50 $generated@@48 $generated@@49) $generated@@123 $generated@@136))
)) ($generated@@75 $generated@@125 $generated@@123)) (and (< $generated@@126 (+ (+ ($generated@@36 $generated@@122) ($generated@@29 $generated@@122 ($generated@@30 5))) 100)) (= (ControlFlow 0 2) (- 0 1)))) (< $generated@@126 (+ (+ ($generated@@36 $generated@@122) ($generated@@29 $generated@@122 ($generated@@30 5))) 900))))))))))))))
(let (($generated@@137  (=> (and ($generated@@92 $generated@@125) ($generated@@124 $generated@@125)) (=> (and (and (and (or (not (= $generated@@122 $generated@@32)) (not true)) (and ($generated@@33 $generated@@34 $generated@@122 $generated@@35) ($generated@@24 $generated@@34 $generated@@122 $generated@@35 $generated@@125))) (<= ($generated@@30 0) $generated@@126)) (and (= 2 $generated@@28) (= (ControlFlow 0 7) 2))) $generated@@127))))
$generated@@137)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
