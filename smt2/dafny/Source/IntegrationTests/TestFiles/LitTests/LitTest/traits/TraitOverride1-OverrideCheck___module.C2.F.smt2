(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U Int) Int)
(declare-fun $generated@@26 (Int) Int)
(declare-fun $generated@@27 (T@U Int) Bool)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@37 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@45 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@76 (T@T T@U) T@U)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@U) T@U)
(declare-fun $generated@@127 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert ($generated@@22 $generated@@23))
(assert (= ($generated@@6 $generated@@30) 3))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@33 T@U) ($generated@@34 Int) ) (!  (=> (or ($generated@@27 $generated@@33 ($generated@@26 $generated@@34)) (and (< 0 $generated@@24) (and (and (or (not (= $generated@@33 $generated@@28)) (not true)) ($generated@@29 $generated@@30 $generated@@33 $generated@@31)) ($generated@@11 ($generated@@32 $generated@@7 ($generated@@10 (< $generated@@34 100))))))) (= ($generated@@25 $generated@@33 ($generated@@26 $generated@@34)) ($generated@@26 $generated@@34)))
 :weight 3
 :pattern ( ($generated@@25 $generated@@33 ($generated@@26 $generated@@34)))
))))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@36 $generated@@23)  (or (= $generated@@36 $generated@@28) (= ($generated@@35 $generated@@36) $generated@@23)))
 :pattern ( ($generated@@29 $generated@@30 $generated@@36 $generated@@23))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@37 $generated@@30 $generated@@40 $generated@@38 $generated@@41) ($generated@@37 $generated@@30 $generated@@40 $generated@@39 $generated@@41))
 :pattern ( ($generated@@37 $generated@@30 $generated@@40 $generated@@38 $generated@@41))
 :pattern ( ($generated@@37 $generated@@30 $generated@@40 $generated@@39 $generated@@41))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@37 $generated@@30 $generated@@42 $generated@@31 $generated@@43) ($generated@@37 $generated@@30 $generated@@42 $generated@@23 $generated@@43))
 :pattern ( ($generated@@37 $generated@@30 $generated@@42 $generated@@31 $generated@@43))
 :pattern ( ($generated@@37 $generated@@30 $generated@@42 $generated@@23 $generated@@43))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (! (= ($generated@@45 $generated@@52 $generated@@53 ($generated@@49 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@54) $generated@@56) $generated@@54)
 :weight 0
)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ) (!  (or (= $generated@@61 $generated@@62) (= ($generated@@45 $generated@@57 $generated@@58 ($generated@@49 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@59) $generated@@62) ($generated@@45 $generated@@57 $generated@@58 $generated@@60 $generated@@62)))
 :weight 0
))) (= ($generated@@6 $generated@@46) 4)) (= ($generated@@6 $generated@@47) 5)) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (= ($generated@@6 ($generated@@48 $generated@@63 $generated@@64)) 6))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ) (! (= ($generated@@50 ($generated@@48 $generated@@65 $generated@@66)) $generated@@65)
 :pattern ( ($generated@@48 $generated@@65 $generated@@66))
))) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (! (= ($generated@@51 ($generated@@48 $generated@@67 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@48 $generated@@67 $generated@@68))
))))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ) (! (= ($generated@@37 $generated@@30 $generated@@69 $generated@@39 $generated@@70)  (or (= $generated@@69 $generated@@28) ($generated@@11 ($generated@@44 $generated@@7 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@70 $generated@@69) $generated)))))
 :pattern ( ($generated@@37 $generated@@30 $generated@@69 $generated@@39 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@37 $generated@@30 $generated@@71 $generated@@23 $generated@@72)  (or (= $generated@@71 $generated@@28) ($generated@@11 ($generated@@44 $generated@@7 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@72 $generated@@71) $generated)))))
 :pattern ( ($generated@@37 $generated@@30 $generated@@71 $generated@@23 $generated@@72))
)))
(assert (forall (($generated@@73 Int) ) (! (= ($generated@@26 $generated@@73) $generated@@73)
 :pattern ( ($generated@@26 $generated@@73))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@32 $generated@@75 $generated@@74) $generated@@74)
 :pattern ( ($generated@@32 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@76 $generated@@78 ($generated@@44 $generated@@78 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@44 $generated@@78 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@79 $generated@@38)  (and ($generated@@29 $generated@@30 $generated@@79 $generated@@39) (or (not (= $generated@@79 $generated@@28)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@79 $generated@@38))
 :pattern ( ($generated@@29 $generated@@30 $generated@@79 $generated@@39))
)))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@80 $generated@@31)  (and ($generated@@29 $generated@@30 $generated@@80 $generated@@23) (or (not (= $generated@@80 $generated@@28)) (not true))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@80 $generated@@31))
 :pattern ( ($generated@@29 $generated@@30 $generated@@80 $generated@@23))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> ($generated@@37 $generated@@30 $generated@@81 $generated@@23 $generated@@82) ($generated@@37 $generated@@30 $generated@@81 $generated@@39 $generated@@82))
 :pattern ( ($generated@@37 $generated@@30 $generated@@81 $generated@@23 $generated@@82))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@83 T@U) ($generated@@84 Int) ) (!  (=> (or ($generated@@27 ($generated@@32 $generated@@30 $generated@@83) ($generated@@26 $generated@@84)) (and (< 0 $generated@@24) (and (and (or (not (= $generated@@83 $generated@@28)) (not true)) ($generated@@29 $generated@@30 $generated@@83 $generated@@31)) ($generated@@11 ($generated@@32 $generated@@7 ($generated@@10 (< $generated@@84 100))))))) (= ($generated@@25 ($generated@@32 $generated@@30 $generated@@83) ($generated@@26 $generated@@84)) ($generated@@26 $generated@@84)))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@32 $generated@@30 $generated@@83) ($generated@@26 $generated@@84)))
))))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@44 $generated@@86 ($generated@@76 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@76 $generated@@86 $generated@@85))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@87 T@U) ($generated@@88 Int) ) (!  (=> (or ($generated@@27 $generated@@87 $generated@@88) (and (< 0 $generated@@24) (and (and (or (not (= $generated@@87 $generated@@28)) (not true)) ($generated@@29 $generated@@30 $generated@@87 $generated@@31)) (< $generated@@88 100)))) (< ($generated@@25 $generated@@87 $generated@@88) 100))
 :pattern ( ($generated@@25 $generated@@87 $generated@@88))
))))
(assert  (and (forall (($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@89 $generated@@92 $generated@@93 $generated@@94 ($generated@@91 $generated@@92 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@98 $generated@@95) $generated@@97 $generated@@98) $generated@@95)
 :weight 0
)) (and (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@104 $generated@@106) (= ($generated@@89 $generated@@99 $generated@@100 $generated@@101 ($generated@@91 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@89 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@114 $generated@@116) (= ($generated@@89 $generated@@108 $generated@@109 $generated@@110 ($generated@@91 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@89 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)))))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 Bool) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@11 ($generated@@89 $generated@@30 $generated@@46 $generated@@7 ($generated@@90 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))  (=> (and (or (not (= $generated@@121 $generated@@117)) (not true)) ($generated@@11 ($generated@@44 $generated@@7 ($generated@@45 $generated@@46 $generated@@47 ($generated@@45 $generated@@30 ($generated@@48 $generated@@46 $generated@@47) $generated@@118 $generated@@121) $generated@@119)))) $generated@@120))
 :pattern ( ($generated@@89 $generated@@30 $generated@@46 $generated@@7 ($generated@@90 $generated@@117 $generated@@118 $generated@@119 $generated@@120) $generated@@121 $generated@@122))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@123 T@U) ($generated@@124 Int) ) (!  (=> (or ($generated@@27 $generated@@123 $generated@@124) (and (< 0 $generated@@24) (and (and (or (not (= $generated@@123 $generated@@28)) (not true)) ($generated@@29 $generated@@30 $generated@@123 $generated@@31)) (< $generated@@124 100)))) (= ($generated@@25 $generated@@123 $generated@@124) $generated@@124))
 :pattern ( ($generated@@25 $generated@@123 $generated@@124))
))))
(assert (forall (($generated@@125 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@125 $generated@@23) ($generated@@29 $generated@@30 $generated@@125 $generated@@39))
 :pattern ( ($generated@@29 $generated@@30 $generated@@125 $generated@@23))
)))
(assert (= ($generated@@126 $generated@@39) $generated@@0))
(assert (= ($generated@@127 $generated@@39) $generated@@4))
(assert (= ($generated@@126 $generated@@38) $generated@@1))
(assert (= ($generated@@127 $generated@@38) $generated@@4))
(assert (= ($generated@@126 $generated@@23) $generated@@2))
(assert (= ($generated@@127 $generated@@23) $generated@@5))
(assert (= ($generated@@126 $generated@@31) $generated@@3))
(assert (= ($generated@@127 $generated@@31) $generated@@5))
(assert (forall (($generated@@128 T@U) ) (! (= ($generated@@29 $generated@@30 $generated@@128 $generated@@39)  (or (= $generated@@128 $generated@@28) ($generated@@22 ($generated@@35 $generated@@128))))
 :pattern ( ($generated@@29 $generated@@30 $generated@@128 $generated@@39))
)))
(assert (forall (($generated@@129 Int) ) (! (= ($generated@@76 $generated@@8 ($generated@@12 ($generated@@26 $generated@@129))) ($generated@@32 $generated@@47 ($generated@@76 $generated@@8 ($generated@@12 $generated@@129))))
 :pattern ( ($generated@@76 $generated@@8 ($generated@@12 ($generated@@26 $generated@@129))))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@T) ) (! (= ($generated@@76 $generated@@131 ($generated@@32 $generated@@131 $generated@@130)) ($generated@@32 $generated@@47 ($generated@@76 $generated@@131 $generated@@130)))
 :pattern ( ($generated@@76 $generated@@131 ($generated@@32 $generated@@131 $generated@@130)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@138  (=> (< $generated@@132 100) (and (=> (= (ControlFlow 0 2) (- 0 5)) (< $generated@@132 100)) (=> (< $generated@@132 100) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= $generated@@132 $generated@@132)) (=> (<= $generated@@132 $generated@@132) (=> (= $generated@@133 ($generated@@90 $generated@@28 $generated@@134 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@139 T@U) ($generated@@140 T@U) ) true)) (=> (forall (($generated@@141 T@U) ($generated@@142 T@U) ) true) (=> (and (< ($generated@@25 $generated@@135 $generated@@132) 100) (= (ControlFlow 0 2) (- 0 1))) (< ($generated@@25 $generated@@135 $generated@@132) 100))))))))))))
(let (($generated@@143  (=> (and ($generated@@136 $generated@@134) ($generated@@137 $generated@@134)) (=> (and (and (or (not (= $generated@@135 $generated@@28)) (not true)) (and ($generated@@29 $generated@@30 $generated@@135 $generated@@31) ($generated@@37 $generated@@30 $generated@@135 $generated@@31 $generated@@134))) (and (= 0 $generated@@24) (= (ControlFlow 0 6) 2))) $generated@@138))))
$generated@@143)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
