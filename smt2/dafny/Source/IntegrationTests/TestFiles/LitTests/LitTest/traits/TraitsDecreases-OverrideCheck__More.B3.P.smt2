(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@29 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@T T@T) T@T)
(declare-fun $generated@@42 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@70 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert ($generated@@22 $generated@@23))
(assert (= ($generated@@6 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@28 $generated@@23)  (or (= $generated@@28 $generated@@26) (= ($generated@@27 $generated@@28) $generated@@23)))
 :pattern ( ($generated@@24 $generated@@25 $generated@@28 $generated@@23))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@29 $generated@@25 $generated@@32 $generated@@30 $generated@@33) ($generated@@29 $generated@@25 $generated@@32 $generated@@31 $generated@@33))
 :pattern ( ($generated@@29 $generated@@25 $generated@@32 $generated@@30 $generated@@33))
 :pattern ( ($generated@@29 $generated@@25 $generated@@32 $generated@@31 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@29 $generated@@25 $generated@@35 $generated@@34 $generated@@36) ($generated@@29 $generated@@25 $generated@@35 $generated@@23 $generated@@36))
 :pattern ( ($generated@@29 $generated@@25 $generated@@35 $generated@@34 $generated@@36))
 :pattern ( ($generated@@29 $generated@@25 $generated@@35 $generated@@23 $generated@@36))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@38 $generated@@45 $generated@@46 ($generated@@42 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@49) $generated@@47)
 :weight 0
)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (= $generated@@54 $generated@@55) (= ($generated@@38 $generated@@50 $generated@@51 ($generated@@42 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@55) ($generated@@38 $generated@@50 $generated@@51 $generated@@53 $generated@@55)))
 :weight 0
))) (= ($generated@@6 $generated@@39) 4)) (= ($generated@@6 $generated@@40) 5)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (= ($generated@@6 ($generated@@41 $generated@@56 $generated@@57)) 6))) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (! (= ($generated@@43 ($generated@@41 $generated@@58 $generated@@59)) $generated@@58)
 :pattern ( ($generated@@41 $generated@@58 $generated@@59))
))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@44 ($generated@@41 $generated@@60 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@41 $generated@@60 $generated@@61))
))))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@29 $generated@@25 $generated@@62 $generated@@31 $generated@@63)  (or (= $generated@@62 $generated@@26) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@25 ($generated@@41 $generated@@39 $generated@@40) $generated@@63 $generated@@62) $generated)))))
 :pattern ( ($generated@@29 $generated@@25 $generated@@62 $generated@@31 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@29 $generated@@25 $generated@@64 $generated@@23 $generated@@65)  (or (= $generated@@64 $generated@@26) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@25 ($generated@@41 $generated@@39 $generated@@40) $generated@@65 $generated@@64) $generated)))))
 :pattern ( ($generated@@29 $generated@@25 $generated@@64 $generated@@23 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 ($generated@@37 $generated@@68 $generated@@67)) $generated@@67)
 :pattern ( ($generated@@37 $generated@@68 $generated@@67))
)))
(assert  (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (! (= ($generated@@69 $generated@@72 $generated@@73 $generated@@74 ($generated@@71 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@77 $generated@@78) $generated@@75)
 :weight 0
)) (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@69 $generated@@79 $generated@@80 $generated@@81 ($generated@@71 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@69 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@94 $generated@@96) (= ($generated@@69 $generated@@88 $generated@@89 $generated@@90 ($generated@@71 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@69 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)))))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@11 ($generated@@69 $generated@@25 $generated@@39 $generated@@7 ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))  (=> (and (or (not (= $generated@@101 $generated@@97)) (not true)) ($generated@@11 ($generated@@37 $generated@@7 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@25 ($generated@@41 $generated@@39 $generated@@40) $generated@@98 $generated@@101) $generated@@99)))) (= $generated@@101 $generated@@100)))
 :pattern ( ($generated@@69 $generated@@25 $generated@@39 $generated@@7 ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@100) $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@103 $generated@@30)  (and ($generated@@24 $generated@@25 $generated@@103 $generated@@31) (or (not (= $generated@@103 $generated@@26)) (not true))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@103 $generated@@30))
 :pattern ( ($generated@@24 $generated@@25 $generated@@103 $generated@@31))
)))
(assert (forall (($generated@@104 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@104 $generated@@34)  (and ($generated@@24 $generated@@25 $generated@@104 $generated@@23) (or (not (= $generated@@104 $generated@@26)) (not true))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@104 $generated@@34))
 :pattern ( ($generated@@24 $generated@@25 $generated@@104 $generated@@23))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ) (!  (=> ($generated@@29 $generated@@25 $generated@@105 $generated@@23 $generated@@106) ($generated@@29 $generated@@25 $generated@@105 $generated@@31 $generated@@106))
 :pattern ( ($generated@@29 $generated@@25 $generated@@105 $generated@@23 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@T) ) (! (= ($generated@@37 $generated@@108 ($generated@@66 $generated@@108 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@66 $generated@@108 $generated@@107))
)))
(assert (forall (($generated@@109 T@U) ) (!  (=> ($generated@@24 $generated@@25 $generated@@109 $generated@@23) ($generated@@24 $generated@@25 $generated@@109 $generated@@31))
 :pattern ( ($generated@@24 $generated@@25 $generated@@109 $generated@@23))
)))
(assert (= ($generated@@110 $generated@@31) $generated@@0))
(assert (= ($generated@@111 $generated@@31) $generated@@4))
(assert (= ($generated@@110 $generated@@30) $generated@@1))
(assert (= ($generated@@111 $generated@@30) $generated@@4))
(assert (= ($generated@@110 $generated@@23) $generated@@2))
(assert (= ($generated@@111 $generated@@23) $generated@@5))
(assert (= ($generated@@110 $generated@@34) $generated@@3))
(assert (= ($generated@@111 $generated@@34) $generated@@5))
(assert (forall (($generated@@112 T@U) ) (! (= ($generated@@24 $generated@@25 $generated@@112 $generated@@31)  (or (= $generated@@112 $generated@@26) ($generated@@22 ($generated@@27 $generated@@112))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@112 $generated@@31))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 (T@U) Bool)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@118  (=> (= (ControlFlow 0 2) (- 0 3)) false)))
(let (($generated@@119  (=> (and ($generated@@113 $generated@@114) ($generated@@115 $generated@@114)) (=> (and (and (or (not (= $generated@@116 $generated@@26)) (not true)) (and ($generated@@24 $generated@@25 $generated@@116 $generated@@34) ($generated@@29 $generated@@25 $generated@@116 $generated@@34 $generated@@114))) (and (= 0 $generated@@117) (= (ControlFlow 0 4) 2))) $generated@@118))))
$generated@@119)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 3))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
