(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U Int) Int)
(declare-fun $generated@@26 (T@U Int) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T T@T) T@T)
(declare-fun $generated@@56 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@81 (T@T T@U) T@U)
(declare-fun $generated@@84 (T@T T@U) T@U)
(declare-fun $generated@@88 (T@U) Bool)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@102 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@135 (T@U) T@U)
(declare-fun $generated@@136 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@8 $generated@@29) 3))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@33 T@U) ($generated@@34 Int) ) (!  (=> (or ($generated@@26 $generated@@33 $generated@@34) (and (< 1 $generated@@24) (and (and (or (not (= $generated@@33 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@33 $generated@@30)) (< ($generated@@31 $generated@@33) 800)))) (and (< ($generated@@25 $generated@@33 $generated@@34) (+ ($generated@@31 $generated@@33) 100)) (<= ($generated@@32 0) ($generated@@25 $generated@@33 $generated@@34))))
 :pattern ( ($generated@@25 $generated@@33 $generated@@34))
))))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! ($generated@@35 $generated@@10 $generated@@37 $generated@@36 $generated@@38)
 :pattern ( ($generated@@35 $generated@@10 $generated@@37 $generated@@36 $generated@@38))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@39 T@U) ($generated@@40 Int) ) (!  (=> (or ($generated@@26 $generated@@39 ($generated@@32 $generated@@40)) (and (< 1 $generated@@24) (and (and (or (not (= $generated@@39 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@39 $generated@@30)) (< ($generated@@31 $generated@@39) 800)))) (= ($generated@@25 $generated@@39 ($generated@@32 $generated@@40)) ($generated@@32 2)))
 :weight 3
 :pattern ( ($generated@@25 $generated@@39 ($generated@@32 $generated@@40)))
))))
(assert ($generated@@41 $generated@@42))
(assert (forall (($generated@@44 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@44 $generated@@42)  (or (= $generated@@44 $generated@@27) (= ($generated@@43 $generated@@44) $generated@@42)))
 :pattern ( ($generated@@28 $generated@@29 $generated@@44 $generated@@42))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@47 $generated@@45 $generated@@48) ($generated@@35 $generated@@29 $generated@@47 $generated@@46 $generated@@48))
 :pattern ( ($generated@@35 $generated@@29 $generated@@47 $generated@@45 $generated@@48))
 :pattern ( ($generated@@35 $generated@@29 $generated@@47 $generated@@46 $generated@@48))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@49 $generated@@30 $generated@@50) ($generated@@35 $generated@@29 $generated@@49 $generated@@42 $generated@@50))
 :pattern ( ($generated@@35 $generated@@29 $generated@@49 $generated@@30 $generated@@50))
 :pattern ( ($generated@@35 $generated@@29 $generated@@49 $generated@@42 $generated@@50))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@52 $generated@@59 $generated@@60 ($generated@@56 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@61) $generated@@63) $generated@@61)
 :weight 0
)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (or (= $generated@@68 $generated@@69) (= ($generated@@52 $generated@@64 $generated@@65 ($generated@@56 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@66) $generated@@69) ($generated@@52 $generated@@64 $generated@@65 $generated@@67 $generated@@69)))
 :weight 0
))) (= ($generated@@8 $generated@@53) 4)) (= ($generated@@8 $generated@@54) 5)) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (= ($generated@@8 ($generated@@55 $generated@@70 $generated@@71)) 6))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@57 ($generated@@55 $generated@@72 $generated@@73)) $generated@@72)
 :pattern ( ($generated@@55 $generated@@72 $generated@@73))
))) (forall (($generated@@74 T@T) ($generated@@75 T@T) ) (! (= ($generated@@58 ($generated@@55 $generated@@74 $generated@@75)) $generated@@75)
 :pattern ( ($generated@@55 $generated@@74 $generated@@75))
))))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@76 $generated@@46 $generated@@77)  (or (= $generated@@76 $generated@@27) ($generated@@13 ($generated@@51 $generated@@9 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@29 ($generated@@55 $generated@@53 $generated@@54) $generated@@77 $generated@@76) $generated)))))
 :pattern ( ($generated@@35 $generated@@29 $generated@@76 $generated@@46 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@78 $generated@@42 $generated@@79)  (or (= $generated@@78 $generated@@27) ($generated@@13 ($generated@@51 $generated@@9 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@29 ($generated@@55 $generated@@53 $generated@@54) $generated@@79 $generated@@78) $generated)))))
 :pattern ( ($generated@@35 $generated@@29 $generated@@78 $generated@@42 $generated@@79))
)))
(assert (forall (($generated@@80 Int) ) (! (= ($generated@@32 $generated@@80) $generated@@80)
 :pattern ( ($generated@@32 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@81 $generated@@83 $generated@@82) $generated@@82)
 :pattern ( ($generated@@81 $generated@@83 $generated@@82))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@84 $generated@@86 ($generated@@51 $generated@@86 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@51 $generated@@86 $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@28 $generated@@10 $generated@@87 $generated@@36) (<= ($generated@@32 0) ($generated@@15 $generated@@87)))
 :pattern ( ($generated@@28 $generated@@10 $generated@@87 $generated@@36))
)))
(assert  (=> (< 0 $generated@@24) (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (!  (=> (and (and ($generated@@88 $generated@@89) (and (or (not (= $generated@@90 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@90 $generated@@46))) ($generated@@13 ($generated@@51 $generated@@9 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@29 ($generated@@55 $generated@@53 $generated@@54) $generated@@89 $generated@@90) $generated)))) ($generated@@35 $generated@@10 ($generated@@14 ($generated@@31 $generated@@90)) $generated@@36 $generated@@89))
 :pattern ( ($generated@@31 $generated@@90) ($generated@@51 $generated@@9 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@29 ($generated@@55 $generated@@53 $generated@@54) $generated@@89 $generated@@90) $generated)))
))))
(assert  (=> (< 0 $generated@@24) (forall (($generated@@91 T@U) ) (!  (=> (and (or (not (= $generated@@91 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@91 $generated@@46)) ($generated@@28 $generated@@10 ($generated@@14 ($generated@@31 $generated@@91)) $generated@@36))
 :pattern ( ($generated@@31 $generated@@91))
))))
(assert (forall (($generated@@92 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@92 $generated@@45)  (and ($generated@@28 $generated@@29 $generated@@92 $generated@@46) (or (not (= $generated@@92 $generated@@27)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@92 $generated@@45))
 :pattern ( ($generated@@28 $generated@@29 $generated@@92 $generated@@46))
)))
(assert (forall (($generated@@93 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@93 $generated@@30)  (and ($generated@@28 $generated@@29 $generated@@93 $generated@@42) (or (not (= $generated@@93 $generated@@27)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@93 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 $generated@@93 $generated@@42))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ) (!  (=> ($generated@@35 $generated@@29 $generated@@94 $generated@@42 $generated@@95) ($generated@@35 $generated@@29 $generated@@94 $generated@@46 $generated@@95))
 :pattern ( ($generated@@35 $generated@@29 $generated@@94 $generated@@42 $generated@@95))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@96 T@U) ($generated@@97 Int) ) (!  (=> (or ($generated@@26 ($generated@@81 $generated@@29 $generated@@96) ($generated@@32 $generated@@97)) (and (< 1 $generated@@24) (and (and (or (not (= $generated@@96 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@96 $generated@@30)) (< ($generated@@31 ($generated@@81 $generated@@29 $generated@@96)) 800)))) (= ($generated@@25 ($generated@@81 $generated@@29 $generated@@96) ($generated@@32 $generated@@97)) ($generated@@32 2)))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@81 $generated@@29 $generated@@96) ($generated@@32 $generated@@97)))
))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@T) ) (! (= ($generated@@51 $generated@@99 ($generated@@84 $generated@@99 $generated@@98)) $generated@@98)
 :pattern ( ($generated@@84 $generated@@99 $generated@@98))
)))
(assert  (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (! (= ($generated@@100 $generated@@103 $generated@@104 $generated@@105 ($generated@@102 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@108 $generated@@109) $generated@@106)
 :weight 0
)) (and (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@100 $generated@@110 $generated@@111 $generated@@112 ($generated@@102 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@100 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ) (!  (or (= $generated@@125 $generated@@127) (= ($generated@@100 $generated@@119 $generated@@120 $generated@@121 ($generated@@102 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@126 $generated@@127) ($generated@@100 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@126 $generated@@127)))
 :weight 0
)))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@13 ($generated@@100 $generated@@29 $generated@@53 $generated@@9 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@13 ($generated@@51 $generated@@9 ($generated@@52 $generated@@53 $generated@@54 ($generated@@52 $generated@@29 ($generated@@55 $generated@@53 $generated@@54) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@100 $generated@@29 $generated@@53 $generated@@9 ($generated@@101 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@134 $generated@@42) ($generated@@28 $generated@@29 $generated@@134 $generated@@46))
 :pattern ( ($generated@@28 $generated@@29 $generated@@134 $generated@@42))
)))
(assert (= ($generated@@135 $generated@@36) $generated@@0))
(assert (= ($generated@@136 $generated@@36) $generated@@5))
(assert (= ($generated@@135 $generated@@45) $generated@@1))
(assert (= ($generated@@136 $generated@@45) $generated@@6))
(assert (= ($generated@@135 $generated@@30) $generated@@2))
(assert (= ($generated@@136 $generated@@30) $generated@@7))
(assert (= ($generated@@135 $generated@@42) $generated@@3))
(assert (= ($generated@@136 $generated@@42) $generated@@7))
(assert (= ($generated@@135 $generated@@46) $generated@@4))
(assert (= ($generated@@136 $generated@@46) $generated@@6))
(assert (forall (($generated@@137 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@137 $generated@@46)  (or (= $generated@@137 $generated@@27) ($generated@@41 ($generated@@43 $generated@@137))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@137 $generated@@46))
)))
(assert (forall (($generated@@138 Int) ) (! (= ($generated@@84 $generated@@10 ($generated@@14 ($generated@@32 $generated@@138))) ($generated@@81 $generated@@54 ($generated@@84 $generated@@10 ($generated@@14 $generated@@138))))
 :pattern ( ($generated@@84 $generated@@10 ($generated@@14 ($generated@@32 $generated@@138))))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@T) ) (! (= ($generated@@84 $generated@@140 ($generated@@81 $generated@@140 $generated@@139)) ($generated@@81 $generated@@54 ($generated@@84 $generated@@140 $generated@@139)))
 :pattern ( ($generated@@84 $generated@@140 ($generated@@81 $generated@@140 $generated@@139)))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@141 T@U) ($generated@@142 Int) ) (!  (=> (or ($generated@@26 $generated@@141 $generated@@142) (and (< 1 $generated@@24) (and (and (or (not (= $generated@@141 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@141 $generated@@30)) (< ($generated@@31 $generated@@141) 800)))) (= ($generated@@25 $generated@@141 $generated@@142) ($generated@@32 2)))
 :pattern ( ($generated@@25 $generated@@141 $generated@@142))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@148  (=> (< ($generated@@31 $generated@@143) 300) (and (=> (= (ControlFlow 0 2) (- 0 5)) (< ($generated@@31 $generated@@143) 800)) (=> (< ($generated@@31 $generated@@143) 800) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= $generated@@144 $generated@@144)) (=> (<= $generated@@144 $generated@@144) (=> (= $generated@@145 ($generated@@101 $generated@@27 $generated@@146 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@149 T@U) ($generated@@150 T@U) ) true)) (=> (forall (($generated@@151 T@U) ($generated@@152 T@U) ) true) (=> (and (< ($generated@@25 $generated@@143 $generated@@144) (+ ($generated@@31 $generated@@143) 100)) (= (ControlFlow 0 2) (- 0 1))) (< ($generated@@25 $generated@@143 $generated@@144) (+ ($generated@@31 $generated@@143) 900)))))))))))))
(let (($generated@@153  (=> (and ($generated@@88 $generated@@146) ($generated@@147 $generated@@146)) (=> (and (and (or (not (= $generated@@143 $generated@@27)) (not true)) (and ($generated@@28 $generated@@29 $generated@@143 $generated@@30) ($generated@@35 $generated@@29 $generated@@143 $generated@@30 $generated@@146))) (and (= 1 $generated@@24) (= (ControlFlow 0 6) 2))) $generated@@148))))
$generated@@153)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
