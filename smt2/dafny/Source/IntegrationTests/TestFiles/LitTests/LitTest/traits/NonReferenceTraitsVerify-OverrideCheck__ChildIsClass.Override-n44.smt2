(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U Int) Int)
(declare-fun $generated@@26 (T@U Int) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@T T@U T@U) Bool)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@35 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@41 () T@U)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@45 () T@U)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@49 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@T T@T) T@T)
(declare-fun $generated@@53 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@54 (T@T) T@T)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@77 (T@U T@U) Bool)
(declare-fun $generated@@82 (T@T T@U) T@U)
(declare-fun $generated@@85 (T@T T@U) T@U)
(declare-fun $generated@@94 (T@U) Bool)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@112 (T@U) Bool)
(declare-fun $generated@@113 (T@U) T@U)
(declare-fun $generated@@115 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@8 $generated@@29) 3))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@33 T@U) ($generated@@34 Int) ) (!  (=> (or ($generated@@26 $generated@@33 $generated@@34) (and (< 1 $generated@@24) (and (and (or (not (= $generated@@33 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@33 $generated@@30)) (< ($generated@@31 $generated@@33) 200)))) (and (< ($generated@@25 $generated@@33 $generated@@34) (+ ($generated@@31 $generated@@33) 100)) (<= ($generated@@32 0) ($generated@@25 $generated@@33 $generated@@34))))
 :pattern ( ($generated@@25 $generated@@33 $generated@@34))
))))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ) (! ($generated@@35 $generated@@10 $generated@@37 $generated@@36 $generated@@38)
 :pattern ( ($generated@@35 $generated@@10 $generated@@37 $generated@@36 $generated@@38))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@39 T@U) ($generated@@40 Int) ) (!  (=> (or ($generated@@26 $generated@@39 ($generated@@32 $generated@@40)) (and (< 1 $generated@@24) (and (and (or (not (= $generated@@39 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@39 $generated@@30)) (< ($generated@@31 $generated@@39) 200)))) (= ($generated@@25 $generated@@39 ($generated@@32 $generated@@40)) ($generated@@32 2)))
 :weight 3
 :pattern ( ($generated@@25 $generated@@39 ($generated@@32 $generated@@40)))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@43 $generated@@41 $generated@@44) ($generated@@35 $generated@@29 $generated@@43 $generated@@42 $generated@@44))
 :pattern ( ($generated@@35 $generated@@29 $generated@@43 $generated@@41 $generated@@44))
 :pattern ( ($generated@@35 $generated@@29 $generated@@43 $generated@@42 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@46 $generated@@30 $generated@@47) ($generated@@35 $generated@@29 $generated@@46 $generated@@45 $generated@@47))
 :pattern ( ($generated@@35 $generated@@29 $generated@@46 $generated@@30 $generated@@47))
 :pattern ( ($generated@@35 $generated@@29 $generated@@46 $generated@@45 $generated@@47))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@56 T@T) ($generated@@57 T@T) ($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@49 $generated@@56 $generated@@57 ($generated@@53 $generated@@56 $generated@@57 $generated@@59 $generated@@60 $generated@@58) $generated@@60) $generated@@58)
 :weight 0
)) (forall (($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (or (= $generated@@65 $generated@@66) (= ($generated@@49 $generated@@61 $generated@@62 ($generated@@53 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@63) $generated@@66) ($generated@@49 $generated@@61 $generated@@62 $generated@@64 $generated@@66)))
 :weight 0
))) (= ($generated@@8 $generated@@50) 4)) (= ($generated@@8 $generated@@51) 5)) (forall (($generated@@67 T@T) ($generated@@68 T@T) ) (= ($generated@@8 ($generated@@52 $generated@@67 $generated@@68)) 6))) (forall (($generated@@69 T@T) ($generated@@70 T@T) ) (! (= ($generated@@54 ($generated@@52 $generated@@69 $generated@@70)) $generated@@69)
 :pattern ( ($generated@@52 $generated@@69 $generated@@70))
))) (forall (($generated@@71 T@T) ($generated@@72 T@T) ) (! (= ($generated@@55 ($generated@@52 $generated@@71 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@52 $generated@@71 $generated@@72))
))))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@73 $generated@@42 $generated@@74)  (or (= $generated@@73 $generated@@27) ($generated@@13 ($generated@@48 $generated@@9 ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@74 $generated@@73) $generated)))))
 :pattern ( ($generated@@35 $generated@@29 $generated@@73 $generated@@42 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@35 $generated@@29 $generated@@75 $generated@@45 $generated@@76)  (or (= $generated@@75 $generated@@27) ($generated@@13 ($generated@@48 $generated@@9 ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@76 $generated@@75) $generated)))))
 :pattern ( ($generated@@35 $generated@@29 $generated@@75 $generated@@45 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> ($generated@@77 $generated@@78 $generated@@79) (forall (($generated@@80 T@U) ) (!  (=> ($generated@@13 ($generated@@48 $generated@@9 ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@78 $generated@@80) $generated))) ($generated@@13 ($generated@@48 $generated@@9 ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@79 $generated@@80) $generated))))
 :pattern ( ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@79 $generated@@80) $generated))
)))
 :pattern ( ($generated@@77 $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@81 Int) ) (! (= ($generated@@32 $generated@@81) $generated@@81)
 :pattern ( ($generated@@32 $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@82 $generated@@84 $generated@@83) $generated@@83)
 :pattern ( ($generated@@82 $generated@@84 $generated@@83))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@85 $generated@@87 ($generated@@48 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@48 $generated@@87 $generated@@86))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@28 $generated@@10 $generated@@88 $generated@@36) (<= ($generated@@32 0) ($generated@@15 $generated@@88)))
 :pattern ( ($generated@@28 $generated@@10 $generated@@88 $generated@@36))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@T) ) (!  (=> ($generated@@77 $generated@@89 $generated@@90) (=> ($generated@@35 $generated@@93 $generated@@91 $generated@@92 $generated@@89) ($generated@@35 $generated@@93 $generated@@91 $generated@@92 $generated@@90)))
 :pattern ( ($generated@@77 $generated@@89 $generated@@90) ($generated@@35 $generated@@93 $generated@@91 $generated@@92 $generated@@89))
)))
(assert  (=> (< 0 $generated@@24) (forall (($generated@@95 T@U) ($generated@@96 T@U) ) (!  (=> (and (and ($generated@@94 $generated@@95) (and (or (not (= $generated@@96 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@96 $generated@@42))) ($generated@@13 ($generated@@48 $generated@@9 ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@95 $generated@@96) $generated)))) ($generated@@35 $generated@@10 ($generated@@14 ($generated@@31 $generated@@96)) $generated@@36 $generated@@95))
 :pattern ( ($generated@@31 $generated@@96) ($generated@@48 $generated@@9 ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@95 $generated@@96) $generated)))
))))
(assert  (=> (< 0 $generated@@24) (forall (($generated@@97 T@U) ) (!  (=> (and (or (not (= $generated@@97 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@97 $generated@@42)) ($generated@@28 $generated@@10 ($generated@@14 ($generated@@31 $generated@@97)) $generated@@36))
 :pattern ( ($generated@@31 $generated@@97))
))))
(assert (forall (($generated@@98 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@98 $generated@@41)  (and ($generated@@28 $generated@@29 $generated@@98 $generated@@42) (or (not (= $generated@@98 $generated@@27)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@98 $generated@@41))
 :pattern ( ($generated@@28 $generated@@29 $generated@@98 $generated@@42))
)))
(assert (forall (($generated@@99 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@99 $generated@@30)  (and ($generated@@28 $generated@@29 $generated@@99 $generated@@45) (or (not (= $generated@@99 $generated@@27)) (not true))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@99 $generated@@30))
 :pattern ( ($generated@@28 $generated@@29 $generated@@99 $generated@@45))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ) (!  (=> ($generated@@35 $generated@@29 $generated@@100 $generated@@45 $generated@@101) ($generated@@35 $generated@@29 $generated@@100 $generated@@42 $generated@@101))
 :pattern ( ($generated@@35 $generated@@29 $generated@@100 $generated@@45 $generated@@101))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@102 T@U) ($generated@@103 Int) ) (!  (=> (or ($generated@@26 ($generated@@82 $generated@@29 $generated@@102) ($generated@@32 $generated@@103)) (and (< 1 $generated@@24) (and (and (or (not (= $generated@@102 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@102 $generated@@30)) (< ($generated@@31 ($generated@@82 $generated@@29 $generated@@102)) 200)))) (= ($generated@@25 ($generated@@82 $generated@@29 $generated@@102) ($generated@@32 $generated@@103)) ($generated@@32 2)))
 :weight 3
 :pattern ( ($generated@@25 ($generated@@82 $generated@@29 $generated@@102) ($generated@@32 $generated@@103)))
))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (=> (or (not (= $generated@@104 $generated@@106)) (not true)) (=> (and ($generated@@77 $generated@@104 $generated@@105) ($generated@@77 $generated@@105 $generated@@106)) ($generated@@77 $generated@@104 $generated@@106)))
 :pattern ( ($generated@@77 $generated@@104 $generated@@105) ($generated@@77 $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@T) ) (! (= ($generated@@48 $generated@@108 ($generated@@85 $generated@@108 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@85 $generated@@108 $generated@@107))
)))
(assert (forall (($generated@@109 T@U) ) (!  (=> ($generated@@28 $generated@@29 $generated@@109 $generated@@45) ($generated@@28 $generated@@29 $generated@@109 $generated@@42))
 :pattern ( ($generated@@28 $generated@@29 $generated@@109 $generated@@45))
)))
(assert (= ($generated@@110 $generated@@36) $generated@@0))
(assert (= ($generated@@111 $generated@@36) $generated@@5))
(assert (= ($generated@@110 $generated@@41) $generated@@1))
(assert (= ($generated@@111 $generated@@41) $generated@@6))
(assert (= ($generated@@110 $generated@@42) $generated@@2))
(assert (= ($generated@@111 $generated@@42) $generated@@6))
(assert (= ($generated@@110 $generated@@45) $generated@@3))
(assert (= ($generated@@111 $generated@@45) $generated@@7))
(assert (= ($generated@@110 $generated@@30) $generated@@4))
(assert (= ($generated@@111 $generated@@30) $generated@@7))
(assert (forall (($generated@@114 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@114 $generated@@42)  (or (= $generated@@114 $generated@@27) ($generated@@112 ($generated@@113 $generated@@114))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@114 $generated@@42))
)))
(assert (forall (($generated@@116 T@U) ) (! (= ($generated@@28 $generated@@29 $generated@@116 $generated@@45)  (or (= $generated@@116 $generated@@27) ($generated@@115 ($generated@@113 $generated@@116))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@116 $generated@@45))
)))
(assert (forall (($generated@@117 Int) ) (! (= ($generated@@85 $generated@@10 ($generated@@14 ($generated@@32 $generated@@117))) ($generated@@82 $generated@@51 ($generated@@85 $generated@@10 ($generated@@14 $generated@@117))))
 :pattern ( ($generated@@85 $generated@@10 ($generated@@14 ($generated@@32 $generated@@117))))
)))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@T) ) (! (= ($generated@@85 $generated@@119 ($generated@@82 $generated@@119 $generated@@118)) ($generated@@82 $generated@@51 ($generated@@85 $generated@@119 $generated@@118)))
 :pattern ( ($generated@@85 $generated@@119 ($generated@@82 $generated@@119 $generated@@118)))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@120 T@U) ($generated@@121 Int) ) (!  (=> (or ($generated@@26 $generated@@120 $generated@@121) (and (< 1 $generated@@24) (and (and (or (not (= $generated@@120 $generated@@27)) (not true)) ($generated@@28 $generated@@29 $generated@@120 $generated@@30)) (< ($generated@@31 $generated@@120) 200)))) (= ($generated@@25 $generated@@120 $generated@@121) ($generated@@32 2)))
 :pattern ( ($generated@@25 $generated@@120 $generated@@121))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () T@U)
(declare-fun $generated@@124 (T@U) Bool)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@127  (=> (< ($generated@@31 $generated@@122) 100) (and (=> (= (ControlFlow 0 2) (- 0 6)) (< ($generated@@31 $generated@@122) 150)) (=> (< ($generated@@31 $generated@@122) 150) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall (($generated@@128 T@U) ($generated@@129 T@U) ) true)) (=> (forall (($generated@@130 T@U) ($generated@@131 T@U) ) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($generated@@132 T@U) ($generated@@133 T@U) ) true)) (=> (forall (($generated@@134 T@U) ($generated@@135 T@U) ) true) (=> (and ($generated@@94 $generated@@123) ($generated@@124 $generated@@123)) (=> (and (and (forall (($generated@@136 T@U) ) (!  (=> (and (or (not (= $generated@@136 $generated@@27)) (not true)) ($generated@@13 ($generated@@48 $generated@@9 ($generated@@49 $generated@@50 $generated@@51 ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@125 $generated@@136) $generated)))) (= ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@123 $generated@@136) ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@125 $generated@@136)))
 :pattern ( ($generated@@49 $generated@@29 ($generated@@52 $generated@@50 $generated@@51) $generated@@123 $generated@@136))
)) ($generated@@77 $generated@@125 $generated@@123)) (and (< $generated@@126 (+ (+ ($generated@@31 $generated@@122) ($generated@@25 $generated@@122 ($generated@@32 5))) 1200)) (= (ControlFlow 0 2) (- 0 1)))) (< $generated@@126 (+ (+ ($generated@@31 $generated@@122) ($generated@@25 $generated@@122 ($generated@@32 5))) 900))))))))))))))
(let (($generated@@137  (=> (and ($generated@@94 $generated@@125) ($generated@@124 $generated@@125)) (=> (and (and (and (or (not (= $generated@@122 $generated@@27)) (not true)) (and ($generated@@28 $generated@@29 $generated@@122 $generated@@30) ($generated@@35 $generated@@29 $generated@@122 $generated@@30 $generated@@125))) (<= ($generated@@32 0) $generated@@126)) (and (= 2 $generated@@24) (= (ControlFlow 0 7) 2))) $generated@@127))))
$generated@@137)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
