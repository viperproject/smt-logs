(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@31 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@35 (T@U T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@T T@T) T@T)
(declare-fun $generated@@42 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@64 (T@U T@U) Bool)
(declare-fun $generated@@68 (Int) Int)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@U T@U) T@U)
(declare-fun $generated@@80 (T@U T@U T@U) Bool)
(declare-fun $generated@@100 (T@U) T@U)
(declare-fun $generated@@103 (T@U) T@U)
(declare-fun $generated@@106 (T@U) T@U)
(declare-fun $generated@@109 (T@U) T@U)
(declare-fun $generated@@117 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@118 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@119 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@151 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (= ($generated@@8 $generated@@26) 3))
(assert (forall (($generated@@30 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@30 $generated@@27)  (or (= $generated@@30 $generated@@28) (= ($generated@@29 $generated@@30) $generated@@27)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@30 $generated@@27))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@31 $generated@@26 $generated@@33 $generated@@32 $generated@@34) ($generated@@31 $generated@@26 $generated@@33 $generated@@27 $generated@@34))
 :pattern ( ($generated@@31 $generated@@26 $generated@@33 $generated@@32 $generated@@34))
 :pattern ( ($generated@@31 $generated@@26 $generated@@33 $generated@@27 $generated@@34))
)))
(assert (forall (($generated@@36 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@36 $generated@@27) ($generated@@25 $generated@@26 $generated@@36 ($generated@@35 $generated $generated)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@36 $generated@@27))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (! (= ($generated@@38 $generated@@45 $generated@@46 ($generated@@42 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@47) $generated@@49) $generated@@47)
 :weight 0
)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (or (= $generated@@54 $generated@@55) (= ($generated@@38 $generated@@50 $generated@@51 ($generated@@42 $generated@@50 $generated@@51 $generated@@53 $generated@@54 $generated@@52) $generated@@55) ($generated@@38 $generated@@50 $generated@@51 $generated@@53 $generated@@55)))
 :weight 0
))) (= ($generated@@8 $generated@@39) 4)) (= ($generated@@8 $generated@@40) 5)) (forall (($generated@@56 T@T) ($generated@@57 T@T) ) (= ($generated@@8 ($generated@@41 $generated@@56 $generated@@57)) 6))) (forall (($generated@@58 T@T) ($generated@@59 T@T) ) (! (= ($generated@@43 ($generated@@41 $generated@@58 $generated@@59)) $generated@@58)
 :pattern ( ($generated@@41 $generated@@58 $generated@@59))
))) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (! (= ($generated@@44 ($generated@@41 $generated@@60 $generated@@61)) $generated@@61)
 :pattern ( ($generated@@41 $generated@@60 $generated@@61))
))))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@31 $generated@@26 $generated@@62 $generated@@27 $generated@@63)  (or (= $generated@@62 $generated@@28) ($generated@@13 ($generated@@37 $generated@@9 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@63 $generated@@62) $generated@@1)))))
 :pattern ( ($generated@@31 $generated@@26 $generated@@62 $generated@@27 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> ($generated@@64 $generated@@65 $generated@@66) (forall (($generated@@67 T@U) ) (!  (=> ($generated@@13 ($generated@@37 $generated@@9 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@65 $generated@@67) $generated@@1))) ($generated@@13 ($generated@@37 $generated@@9 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@66 $generated@@67) $generated@@1))))
 :pattern ( ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@66 $generated@@67) $generated@@1))
)))
 :pattern ( ($generated@@64 $generated@@65 $generated@@66))
)))
(assert (forall (($generated@@69 Int) ) (! (= ($generated@@68 $generated@@69) $generated@@69)
 :pattern ( ($generated@@68 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 $generated@@71) $generated@@71)
 :pattern ( ($generated@@70 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 ($generated@@37 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@37 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@79 ($generated@@76 $generated@@77 $generated@@78))  (and ($generated@@25 $generated@@26 $generated@@79 ($generated@@35 $generated@@77 $generated@@78)) (or (not (= $generated@@79 $generated@@28)) (not true))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@79 ($generated@@76 $generated@@77 $generated@@78)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@79 ($generated@@35 $generated@@77 $generated@@78)))
)))
(assert ($generated@@80 $generated@@27 $generated $generated))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@T) ) (!  (=> ($generated@@64 $generated@@81 $generated@@82) (=> ($generated@@31 $generated@@85 $generated@@83 $generated@@84 $generated@@81) ($generated@@31 $generated@@85 $generated@@83 $generated@@84 $generated@@82)))
 :pattern ( ($generated@@64 $generated@@81 $generated@@82) ($generated@@31 $generated@@85 $generated@@83 $generated@@84 $generated@@81))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@31 $generated@@26 $generated@@88 ($generated@@76 $generated@@86 $generated@@87) $generated@@89) ($generated@@31 $generated@@26 $generated@@88 ($generated@@35 $generated@@86 $generated@@87) $generated@@89))
 :pattern ( ($generated@@31 $generated@@26 $generated@@88 ($generated@@76 $generated@@86 $generated@@87) $generated@@89))
 :pattern ( ($generated@@31 $generated@@26 $generated@@88 ($generated@@35 $generated@@86 $generated@@87) $generated@@89))
)))
(assert (forall (($generated@@90 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@90 $generated@@32)  (and ($generated@@25 $generated@@26 $generated@@90 $generated@@27) (or (not (= $generated@@90 $generated@@28)) (not true))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@90 $generated@@32))
 :pattern ( ($generated@@25 $generated@@26 $generated@@90 $generated@@27))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ) (!  (=> ($generated@@31 $generated@@26 $generated@@91 $generated@@27 $generated@@92) ($generated@@31 $generated@@26 $generated@@91 ($generated@@35 $generated $generated) $generated@@92))
 :pattern ( ($generated@@31 $generated@@26 $generated@@91 $generated@@27 $generated@@92))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (! (= ($generated@@31 $generated@@26 $generated@@95 ($generated@@35 $generated@@93 $generated@@94) $generated@@96)  (or (= $generated@@95 $generated@@28) ($generated@@13 ($generated@@37 $generated@@9 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@96 $generated@@95) $generated@@1)))))
 :pattern ( ($generated@@31 $generated@@26 $generated@@95 ($generated@@35 $generated@@93 $generated@@94) $generated@@96))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (!  (=> (or (not (= $generated@@97 $generated@@99)) (not true)) (=> (and ($generated@@64 $generated@@97 $generated@@98) ($generated@@64 $generated@@98 $generated@@99)) ($generated@@64 $generated@@97 $generated@@99)))
 :pattern ( ($generated@@64 $generated@@97 $generated@@98) ($generated@@64 $generated@@98 $generated@@99))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@100 ($generated@@35 $generated@@101 $generated@@102)) $generated@@101)
 :pattern ( ($generated@@35 $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@103 ($generated@@35 $generated@@104 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@35 $generated@@104 $generated@@105))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@106 ($generated@@76 $generated@@107 $generated@@108)) $generated@@107)
 :pattern ( ($generated@@76 $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@109 ($generated@@76 $generated@@110 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@76 $generated@@110 $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@114 ($generated@@35 $generated@@112 $generated@@113))  (or (= $generated@@114 $generated@@28) ($generated@@80 ($generated@@29 $generated@@114) $generated@@112 $generated@@113)))
 :pattern ( ($generated@@25 $generated@@26 $generated@@114 ($generated@@35 $generated@@112 $generated@@113)))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@T) ) (! (= ($generated@@37 $generated@@116 ($generated@@73 $generated@@116 $generated@@115)) $generated@@115)
 :pattern ( ($generated@@73 $generated@@116 $generated@@115))
)))
(assert  (and (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@117 $generated@@120 $generated@@121 $generated@@122 ($generated@@119 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@125 $generated@@126) $generated@@123)
 :weight 0
)) (and (forall (($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (!  (or (= $generated@@132 $generated@@134) (= ($generated@@117 $generated@@127 $generated@@128 $generated@@129 ($generated@@119 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@132 $generated@@133 $generated@@130) $generated@@134 $generated@@135) ($generated@@117 $generated@@127 $generated@@128 $generated@@129 $generated@@131 $generated@@134 $generated@@135)))
 :weight 0
)) (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@142 $generated@@144) (= ($generated@@117 $generated@@136 $generated@@137 $generated@@138 ($generated@@119 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@117 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
)))))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 Bool) ($generated@@149 T@U) ($generated@@150 T@U) ) (! (= ($generated@@13 ($generated@@117 $generated@@26 $generated@@39 $generated@@9 ($generated@@118 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))  (=> (and (or (not (= $generated@@149 $generated@@145)) (not true)) ($generated@@13 ($generated@@37 $generated@@9 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@146 $generated@@149) $generated@@147)))) $generated@@148))
 :pattern ( ($generated@@117 $generated@@26 $generated@@39 $generated@@9 ($generated@@118 $generated@@145 $generated@@146 $generated@@147 $generated@@148) $generated@@149 $generated@@150))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (and (= ($generated@@24 ($generated@@35 $generated@@152 $generated@@153)) $generated@@3) (= ($generated@@151 ($generated@@35 $generated@@152 $generated@@153)) $generated@@7))
 :pattern ( ($generated@@35 $generated@@152 $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (!  (and (= ($generated@@24 ($generated@@76 $generated@@154 $generated@@155)) $generated@@4) (= ($generated@@151 ($generated@@76 $generated@@154 $generated@@155)) $generated@@7))
 :pattern ( ($generated@@76 $generated@@154 $generated@@155))
)))
(assert (= ($generated@@24 $generated@@32) $generated@@2))
(assert (= ($generated@@151 $generated@@32) $generated@@6))
(assert (= ($generated@@24 $generated@@27) $generated@@5))
(assert (= ($generated@@151 $generated@@27) $generated@@6))
(assert (forall (($generated@@156 Int) ) (! (= ($generated@@73 $generated@@10 ($generated@@14 ($generated@@68 $generated@@156))) ($generated@@70 $generated@@40 ($generated@@73 $generated@@10 ($generated@@14 $generated@@156))))
 :pattern ( ($generated@@73 $generated@@10 ($generated@@14 ($generated@@68 $generated@@156))))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@T) ) (! (= ($generated@@73 $generated@@158 ($generated@@70 $generated@@158 $generated@@157)) ($generated@@70 $generated@@40 ($generated@@73 $generated@@158 $generated@@157)))
 :pattern ( ($generated@@73 $generated@@158 ($generated@@70 $generated@@158 $generated@@157)))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (! ($generated@@31 $generated@@10 $generated@@160 $generated $generated@@159)
 :pattern ( ($generated@@31 $generated@@10 $generated@@160 $generated $generated@@159))
)))
(assert (forall (($generated@@161 T@U) ) (! ($generated@@25 $generated@@10 $generated@@161 $generated)
 :pattern ( ($generated@@25 $generated@@10 $generated@@161 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@162 () T@U)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 (T@U) Bool)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 (T@U) Bool)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () Bool)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@172  (=> (= $generated@@162 ($generated@@118 $generated@@28 $generated@@163 $generated@@1 false)) (=> (and (and (or (not (= $generated@@164 $generated@@28)) (not true)) (and ($generated@@25 $generated@@26 $generated@@164 $generated@@32) ($generated@@31 $generated@@26 $generated@@164 $generated@@32 $generated@@163))) (and ($generated@@165 $generated@@166) ($generated@@167 $generated@@166))) (=> (and (and (and (or (not (= $generated@@168 $generated@@28)) (not true)) (and ($generated@@25 $generated@@26 $generated@@168 $generated@@32) ($generated@@31 $generated@@26 $generated@@168 $generated@@32 $generated@@166))) (not ($generated@@13 ($generated@@37 $generated@@9 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@163 $generated@@168) $generated@@1))))) (and (forall (($generated@@173 T@U) ) (!  (=> (and (or (not (= $generated@@173 $generated@@28)) (not true)) ($generated@@13 ($generated@@37 $generated@@9 ($generated@@38 $generated@@39 $generated@@40 ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@163 $generated@@173) $generated@@1)))) (= ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@166 $generated@@173) ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@163 $generated@@173)))
 :pattern ( ($generated@@38 $generated@@26 ($generated@@41 $generated@@39 $generated@@40) $generated@@166 $generated@@173))
)) ($generated@@64 $generated@@163 $generated@@166))) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (or (not (= $generated@@168 $generated@@28)) (not true)))))))))
(let (($generated@@174  (=> (and ($generated@@165 $generated@@163) ($generated@@167 $generated@@163)) (=> (and (and (=> $generated@@169 (and ($generated@@25 $generated@@26 $generated@@170 $generated@@32) ($generated@@31 $generated@@26 $generated@@170 $generated@@32 $generated@@163))) true) (and (= 1 $generated@@171) (= (ControlFlow 0 4) 2))) $generated@@172))))
$generated@@174)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
