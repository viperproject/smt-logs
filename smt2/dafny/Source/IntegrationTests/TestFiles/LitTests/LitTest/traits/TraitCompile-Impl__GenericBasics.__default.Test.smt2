(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass.GenericBasics.Cl () T@U)
(declare-fun Tagclass.GenericBasics.Mega () T@U)
(declare-fun Tagclass.GenericBasics.Tr () T@U)
(declare-fun Tagclass.GenericBasics.Tr? () T@U)
(declare-fun Tagclass.GenericBasics.Cl? () T@U)
(declare-fun Tagclass.GenericBasics.Mega? () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Cl () T@U)
(declare-fun tytagFamily$Mega () T@U)
(declare-fun tytagFamily$Tr () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun implements$GenericBasics.Tr (T@U T@U T@U) Bool)
(declare-fun Tclass.GenericBasics.Cl? (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun GenericBasics.Tr.RValue0 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |GenericBasics.Tr.RValue0#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.GenericBasics.Tr (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun bv2Type () T@T)
(declare-fun bv2_2_U ((_ BitVec 2)) T@U)
(declare-fun U_2_bv2 (T@U) (_ BitVec 2))
(declare-fun bv3Type () T@T)
(declare-fun bv3_2_U ((_ BitVec 3)) T@U)
(declare-fun U_2_bv3 (T@U) (_ BitVec 3))
(declare-fun bv7Type () T@T)
(declare-fun bv7_2_U ((_ BitVec 7)) T@U)
(declare-fun U_2_bv7 (T@U) (_ BitVec 7))
(declare-fun bv9Type () T@T)
(declare-fun bv9_2_U ((_ BitVec 9)) T@U)
(declare-fun U_2_bv9 (T@U) (_ BitVec 9))
(declare-fun Tclass.GenericBasics.Mega (T@U T@U T@U) T@U)
(declare-fun Tclass.GenericBasics.Mega_0 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Mega_1 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Mega_2 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Mega? (T@U T@U T@U) T@U)
(declare-fun Tclass.GenericBasics.Mega?_0 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Mega?_1 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Mega?_2 (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass.GenericBasics.Cl (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun GenericBasics.Cl.RBValue (T@U T@U T@U T@U Int) Int)
(declare-fun |GenericBasics.Cl.RBValue#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun Tclass.GenericBasics.Tr? (T@U T@U) T@U)
(declare-fun GenericBasics.Cl.RValue0 (T@U T@U T@U T@U) Int)
(declare-fun |GenericBasics.Cl.RValue0#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitReal (Real) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun GenericBasics.Mega.RValue0 (T@U T@U T@U T@U T@U T@U) Int)
(declare-fun |GenericBasics.Mega.RValue0#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun GenericBasics.Tr.RBValue (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |GenericBasics.Tr.RBValue#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun GenericBasics.Mega.RBValue (T@U T@U T@U T@U T@U T@U Int) Int)
(declare-fun |GenericBasics.Mega.RBValue#canCall| (T@U T@U T@U T@U T@U T@U Int) Bool)
(declare-fun dtype (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Tr_0 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Tr_1 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Tr?_0 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Tr?_1 (T@U) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass.GenericBasics.Cl_0 (T@U) T@U)
(declare-fun Tclass.GenericBasics.Cl?_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TReal TagBool TagInt TagReal TagSeq alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass.GenericBasics.Cl Tagclass.GenericBasics.Mega Tagclass.GenericBasics.Tr Tagclass.GenericBasics.Tr? Tagclass.GenericBasics.Cl? Tagclass.GenericBasics.Mega? |tytagFamily$_tuple#2| tytagFamily$Cl tytagFamily$Mega tytagFamily$Tr)
)
(assert (forall ((GenericBasics.Cl$Q T@U) ) (implements$GenericBasics.Tr (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q) GenericBasics.Cl$Q TInt)))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Ctor refType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (GenericBasics.Tr$A T@U) (GenericBasics.Tr$B T@U) (GenericBasics.Tr.RValue0$X T@U) (this T@U) (|x#0| T@U) ) (!  (=> (and (or (|GenericBasics.Tr.RValue0#canCall| GenericBasics.Tr$A GenericBasics.Tr$B GenericBasics.Tr.RValue0$X this |x#0|) (and (< 1 $FunctionContextHeight) (and (and (or (not (= this null)) (not true)) ($IsAlloc refType this (Tclass.GenericBasics.Tr GenericBasics.Tr$A GenericBasics.Tr$B) $Heap)) (and ($IsBox |x#0| GenericBasics.Tr.RValue0$X) ($IsAllocBox |x#0| GenericBasics.Tr.RValue0$X $Heap))))) ($IsGoodHeap $Heap)) ($IsAllocBox (GenericBasics.Tr.RValue0 GenericBasics.Tr$A GenericBasics.Tr$B GenericBasics.Tr.RValue0$X this |x#0|) GenericBasics.Tr$B $Heap))
 :pattern ( ($IsAllocBox (GenericBasics.Tr.RValue0 GenericBasics.Tr$A GenericBasics.Tr$B GenericBasics.Tr.RValue0$X this |x#0|) GenericBasics.Tr$B $Heap))
))))
(assert (forall ((v T@U) (h T@U) ) (! ($IsAlloc intType v (TBitvector 0) h)
 :pattern ( ($IsAlloc intType v (TBitvector 0) h))
)))
(assert  (and (and (= (Ctor bv2Type) 4) (forall ((arg0@@2 (_ BitVec 2)) ) (! (= (U_2_bv2 (bv2_2_U arg0@@2)) arg0@@2)
 :pattern ( (bv2_2_U arg0@@2))
))) (forall ((x@@2 T@U) ) (! (= (bv2_2_U (U_2_bv2 x@@2)) x@@2)
 :pattern ( (U_2_bv2 x@@2))
))))
(assert (forall ((v@@0 T@U) (heap T@U) ) (! ($IsAlloc bv2Type v@@0 (TBitvector 2) heap)
 :pattern ( ($IsAlloc bv2Type v@@0 (TBitvector 2) heap))
)))
(assert  (and (and (= (Ctor bv3Type) 5) (forall ((arg0@@3 (_ BitVec 3)) ) (! (= (U_2_bv3 (bv3_2_U arg0@@3)) arg0@@3)
 :pattern ( (bv3_2_U arg0@@3))
))) (forall ((x@@3 T@U) ) (! (= (bv3_2_U (U_2_bv3 x@@3)) x@@3)
 :pattern ( (U_2_bv3 x@@3))
))))
(assert (forall ((v@@1 T@U) (heap@@0 T@U) ) (! ($IsAlloc bv3Type v@@1 (TBitvector 3) heap@@0)
 :pattern ( ($IsAlloc bv3Type v@@1 (TBitvector 3) heap@@0))
)))
(assert  (and (and (= (Ctor bv7Type) 6) (forall ((arg0@@4 (_ BitVec 7)) ) (! (= (U_2_bv7 (bv7_2_U arg0@@4)) arg0@@4)
 :pattern ( (bv7_2_U arg0@@4))
))) (forall ((x@@4 T@U) ) (! (= (bv7_2_U (U_2_bv7 x@@4)) x@@4)
 :pattern ( (U_2_bv7 x@@4))
))))
(assert (forall ((v@@2 T@U) (heap@@1 T@U) ) (! ($IsAlloc bv7Type v@@2 (TBitvector 7) heap@@1)
 :pattern ( ($IsAlloc bv7Type v@@2 (TBitvector 7) heap@@1))
)))
(assert  (and (and (= (Ctor bv9Type) 7) (forall ((arg0@@5 (_ BitVec 9)) ) (! (= (U_2_bv9 (bv9_2_U arg0@@5)) arg0@@5)
 :pattern ( (bv9_2_U arg0@@5))
))) (forall ((x@@5 T@U) ) (! (= (bv9_2_U (U_2_bv9 x@@5)) x@@5)
 :pattern ( (U_2_bv9 x@@5))
))))
(assert (forall ((v@@3 T@U) (heap@@2 T@U) ) (! ($IsAlloc bv9Type v@@3 (TBitvector 9) heap@@2)
 :pattern ( ($IsAlloc bv9Type v@@3 (TBitvector 9) heap@@2))
)))
(assert (forall ((GenericBasics.Mega$P T@U) (GenericBasics.Mega$Q T@U) (GenericBasics.Mega$L T@U) ) (! (= (Tclass.GenericBasics.Mega_0 (Tclass.GenericBasics.Mega GenericBasics.Mega$P GenericBasics.Mega$Q GenericBasics.Mega$L)) GenericBasics.Mega$P)
 :pattern ( (Tclass.GenericBasics.Mega GenericBasics.Mega$P GenericBasics.Mega$Q GenericBasics.Mega$L))
)))
(assert (forall ((GenericBasics.Mega$P@@0 T@U) (GenericBasics.Mega$Q@@0 T@U) (GenericBasics.Mega$L@@0 T@U) ) (! (= (Tclass.GenericBasics.Mega_1 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@0 GenericBasics.Mega$Q@@0 GenericBasics.Mega$L@@0)) GenericBasics.Mega$Q@@0)
 :pattern ( (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@0 GenericBasics.Mega$Q@@0 GenericBasics.Mega$L@@0))
)))
(assert (forall ((GenericBasics.Mega$P@@1 T@U) (GenericBasics.Mega$Q@@1 T@U) (GenericBasics.Mega$L@@1 T@U) ) (! (= (Tclass.GenericBasics.Mega_2 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@1 GenericBasics.Mega$Q@@1 GenericBasics.Mega$L@@1)) GenericBasics.Mega$L@@1)
 :pattern ( (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@1 GenericBasics.Mega$Q@@1 GenericBasics.Mega$L@@1))
)))
(assert (forall ((GenericBasics.Mega$P@@2 T@U) (GenericBasics.Mega$Q@@2 T@U) (GenericBasics.Mega$L@@2 T@U) ) (! (= (Tclass.GenericBasics.Mega?_0 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@2 GenericBasics.Mega$Q@@2 GenericBasics.Mega$L@@2)) GenericBasics.Mega$P@@2)
 :pattern ( (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@2 GenericBasics.Mega$Q@@2 GenericBasics.Mega$L@@2))
)))
(assert (forall ((GenericBasics.Mega$P@@3 T@U) (GenericBasics.Mega$Q@@3 T@U) (GenericBasics.Mega$L@@3 T@U) ) (! (= (Tclass.GenericBasics.Mega?_1 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@3 GenericBasics.Mega$Q@@3 GenericBasics.Mega$L@@3)) GenericBasics.Mega$Q@@3)
 :pattern ( (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@3 GenericBasics.Mega$Q@@3 GenericBasics.Mega$L@@3))
)))
(assert (forall ((GenericBasics.Mega$P@@4 T@U) (GenericBasics.Mega$Q@@4 T@U) (GenericBasics.Mega$L@@4 T@U) ) (! (= (Tclass.GenericBasics.Mega?_2 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@4 GenericBasics.Mega$Q@@4 GenericBasics.Mega$L@@4)) GenericBasics.Mega$L@@4)
 :pattern ( (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@4 GenericBasics.Mega$Q@@4 GenericBasics.Mega$L@@4))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is intType v@@4 (TBitvector 0))
 :pattern ( ($Is intType v@@4 (TBitvector 0)))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is bv2Type v@@5 (TBitvector 2))
 :pattern ( ($Is bv2Type v@@5 (TBitvector 2)))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is bv3Type v@@6 (TBitvector 3))
 :pattern ( ($Is bv3Type v@@6 (TBitvector 3)))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is bv7Type v@@7 (TBitvector 7))
 :pattern ( ($Is bv7Type v@@7 (TBitvector 7)))
)))
(assert (forall ((v@@8 T@U) ) (! ($Is bv9Type v@@8 (TBitvector 9))
 :pattern ( ($Is bv9Type v@@8 (TBitvector 9)))
)))
(assert (forall ((GenericBasics.Cl$Q@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@0) $h) ($IsAlloc refType |c#0| (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@0) $h))
)))
(assert (= (Ctor DatatypeTypeType) 8))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((GenericBasics.Mega$P@@5 T@U) (GenericBasics.Mega$Q@@5 T@U) (GenericBasics.Mega$L@@5 T@U) ) (!  (and (= (Tag (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@5 GenericBasics.Mega$Q@@5 GenericBasics.Mega$L@@5)) Tagclass.GenericBasics.Mega) (= (TagFamily (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@5 GenericBasics.Mega$Q@@5 GenericBasics.Mega$L@@5)) tytagFamily$Mega))
 :pattern ( (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@5 GenericBasics.Mega$Q@@5 GenericBasics.Mega$L@@5))
)))
(assert (forall ((GenericBasics.Mega$P@@6 T@U) (GenericBasics.Mega$Q@@6 T@U) (GenericBasics.Mega$L@@6 T@U) ) (!  (and (= (Tag (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@6 GenericBasics.Mega$Q@@6 GenericBasics.Mega$L@@6)) Tagclass.GenericBasics.Mega?) (= (TagFamily (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@6 GenericBasics.Mega$Q@@6 GenericBasics.Mega$L@@6)) tytagFamily$Mega))
 :pattern ( (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@6 GenericBasics.Mega$Q@@6 GenericBasics.Mega$L@@6))
)))
(assert (forall ((GenericBasics.Mega$P@@7 T@U) (GenericBasics.Mega$Q@@7 T@U) (GenericBasics.Mega$L@@7 T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@7 GenericBasics.Mega$Q@@7 GenericBasics.Mega$L@@7)) (and (= ($Box refType ($Unbox refType bx)) bx) ($Is refType ($Unbox refType bx) (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@7 GenericBasics.Mega$Q@@7 GenericBasics.Mega$L@@7))))
 :pattern ( ($IsBox bx (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@7 GenericBasics.Mega$Q@@7 GenericBasics.Mega$L@@7)))
)))
(assert (forall ((GenericBasics.Mega$P@@8 T@U) (GenericBasics.Mega$Q@@8 T@U) (GenericBasics.Mega$L@@8 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@8 GenericBasics.Mega$Q@@8 GenericBasics.Mega$L@@8)) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@8 GenericBasics.Mega$Q@@8 GenericBasics.Mega$L@@8))))
 :pattern ( ($IsBox bx@@0 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@8 GenericBasics.Mega$Q@@8 GenericBasics.Mega$L@@8)))
)))
(assert (forall ((GenericBasics.Mega$P@@9 T@U) (GenericBasics.Mega$Q@@9 T@U) (GenericBasics.Mega$L@@9 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@9 GenericBasics.Mega$Q@@9 GenericBasics.Mega$L@@9))  (and ($Is refType |c#0@@0| (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@9 GenericBasics.Mega$Q@@9 GenericBasics.Mega$L@@9)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@9 GenericBasics.Mega$Q@@9 GenericBasics.Mega$L@@9)))
 :pattern ( ($Is refType |c#0@@0| (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@9 GenericBasics.Mega$Q@@9 GenericBasics.Mega$L@@9)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Cl$Q@@1 T@U) (GenericBasics.Cl.RBValue$XX T@U) (this@@0 T@U) (|x#0@@0| T@U) (|b#0| Int) ) (!  (=> (or (|GenericBasics.Cl.RBValue#canCall| GenericBasics.Cl$Q@@1 GenericBasics.Cl.RBValue$XX this@@0 |x#0@@0| |b#0|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@1))) ($IsBox |x#0@@0| GenericBasics.Cl.RBValue$XX)))) (= (GenericBasics.Cl.RBValue GenericBasics.Cl$Q@@1 GenericBasics.Cl.RBValue$XX this@@0 |x#0@@0| |b#0|) (+ |b#0| 2)))
 :pattern ( (GenericBasics.Cl.RBValue GenericBasics.Cl$Q@@1 GenericBasics.Cl.RBValue$XX this@@0 |x#0@@0| |b#0|))
))))
(assert (forall ((GenericBasics.Cl$Q@@2 T@U) ($o T@U) ) (!  (=> ($Is refType $o (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@2)) ($Is refType $o (Tclass.GenericBasics.Tr? GenericBasics.Cl$Q@@2 TInt)))
 :pattern ( ($Is refType $o (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@2)))
)))
(assert (forall ((GenericBasics.Cl$Q@@3 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@3)) ($IsBox bx@@1 (Tclass.GenericBasics.Tr? GenericBasics.Cl$Q@@3 TInt)))
 :pattern ( ($IsBox bx@@1 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@3)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Cl$Q@@4 T@U) (GenericBasics.Cl.RValue0$XX T@U) (this@@1 T@U) (|x#0@@1| T@U) ) (!  (=> (or (|GenericBasics.Cl.RValue0#canCall| GenericBasics.Cl$Q@@4 GenericBasics.Cl.RValue0$XX this@@1 |x#0@@1|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@4))) ($IsBox |x#0@@1| GenericBasics.Cl.RValue0$XX)))) (= (GenericBasics.Cl.RValue0 GenericBasics.Cl$Q@@4 GenericBasics.Cl.RValue0$XX this@@1 |x#0@@1|) (LitInt 5)))
 :pattern ( (GenericBasics.Cl.RValue0 GenericBasics.Cl$Q@@4 GenericBasics.Cl.RValue0$XX this@@1 |x#0@@1|))
))))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 9)) (= (Ctor BoxType) 10)) (forall ((arg0@@6 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@6 arg1)) 11))) (forall ((arg0@@7 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@7 arg1@@0)) arg0@@7)
 :pattern ( (MapType0Type arg0@@7 arg1@@0))
))) (forall ((arg0@@8 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@8 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@8 arg1@@1))
))))
(assert (forall ((GenericBasics.Cl$Q@@5 T@U) ($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@5) $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@5) $h@@0))
)))
(assert (forall ((h@@0 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@0 k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@0 o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h@@0 k))
)))
(assert (forall ((x@@6 Int) ) (! (= (LitInt x@@6) x@@6)
 :pattern ( (LitInt x@@6))
)))
(assert (forall ((x@@7 Real) ) (! (= (LitReal x@@7) x@@7)
 :pattern ( (LitReal x@@7))
)))
(assert (forall ((x@@8 T@U) (T T@T) ) (! (= (Lit T x@@8) x@@8)
 :pattern ( (Lit T x@@8))
)))
(assert (= (Ctor SeqType) 12))
(assert (forall ((s T@U) (bx@@2 T@U) (t T@U) ) (!  (=> (and ($Is SeqType s (TSeq t)) ($IsBox bx@@2 t)) ($Is SeqType (|Seq#Build| s bx@@2) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s bx@@2) (TSeq t)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@1) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@1))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Mega$P@@10 T@U) (GenericBasics.Mega$Q@@10 T@U) (GenericBasics.Mega$L@@10 T@U) (GenericBasics.Mega.RValue0$XX T@U) (this@@2 T@U) (|x#0@@2| T@U) ) (!  (=> (or (|GenericBasics.Mega.RValue0#canCall| GenericBasics.Mega$P@@10 GenericBasics.Mega$Q@@10 GenericBasics.Mega$L@@10 GenericBasics.Mega.RValue0$XX (Lit refType this@@2) (Lit BoxType |x#0@@2|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@10 GenericBasics.Mega$Q@@10 GenericBasics.Mega$L@@10))) ($IsBox |x#0@@2| GenericBasics.Mega.RValue0$XX)))) (= (GenericBasics.Mega.RValue0 GenericBasics.Mega$P@@10 GenericBasics.Mega$Q@@10 GenericBasics.Mega$L@@10 GenericBasics.Mega.RValue0$XX (Lit refType this@@2) (Lit BoxType |x#0@@2|)) (LitInt 5)))
 :weight 3
 :pattern ( (GenericBasics.Mega.RValue0 GenericBasics.Mega$P@@10 GenericBasics.Mega$Q@@10 GenericBasics.Mega$L@@10 GenericBasics.Mega.RValue0$XX (Lit refType this@@2) (Lit BoxType |x#0@@2|)))
))))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@9 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@9)) x@@9)
 :pattern ( ($Unbox T@@0 x@@9))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((GenericBasics.Tr$A@@0 T@U) (GenericBasics.Tr$B@@0 T@U) (GenericBasics.Tr.RBValue$X T@U) (this@@3 T@U) (|x#0@@3| T@U) (|b#0@@0| T@U) ) (!  (=> (or (|GenericBasics.Tr.RBValue#canCall| GenericBasics.Tr$A@@0 GenericBasics.Tr$B@@0 GenericBasics.Tr.RBValue$X this@@3 |x#0@@3| |b#0@@0|) (and (< 1 $FunctionContextHeight) (and (and (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@0 GenericBasics.Tr$B@@0))) ($IsBox |x#0@@3| GenericBasics.Tr.RBValue$X)) ($IsBox |b#0@@0| GenericBasics.Tr$B@@0)))) ($IsBox (GenericBasics.Tr.RBValue GenericBasics.Tr$A@@0 GenericBasics.Tr$B@@0 GenericBasics.Tr.RBValue$X this@@3 |x#0@@3| |b#0@@0|) GenericBasics.Tr$B@@0))
 :pattern ( (GenericBasics.Tr.RBValue GenericBasics.Tr$A@@0 GenericBasics.Tr$B@@0 GenericBasics.Tr.RBValue$X this@@3 |x#0@@3| |b#0@@0|))
))))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((GenericBasics.Mega$P@@11 T@U) (GenericBasics.Mega$Q@@11 T@U) (GenericBasics.Mega$L@@11 T@U) ) (implements$GenericBasics.Tr (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@11 GenericBasics.Mega$Q@@11 GenericBasics.Mega$L@@11) GenericBasics.Mega$Q@@11 TInt)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Mega$P@@12 T@U) (GenericBasics.Mega$Q@@12 T@U) (GenericBasics.Mega$L@@12 T@U) (GenericBasics.Mega.RBValue$XX T@U) (this@@4 T@U) (|x#0@@4| T@U) (|b#0@@1| Int) ) (!  (=> (or (|GenericBasics.Mega.RBValue#canCall| GenericBasics.Mega$P@@12 GenericBasics.Mega$Q@@12 GenericBasics.Mega$L@@12 GenericBasics.Mega.RBValue$XX this@@4 |x#0@@4| |b#0@@1|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@4 null)) (not true)) ($Is refType this@@4 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@12 GenericBasics.Mega$Q@@12 GenericBasics.Mega$L@@12))) ($IsBox |x#0@@4| GenericBasics.Mega.RBValue$XX)))) (= (GenericBasics.Mega.RBValue GenericBasics.Mega$P@@12 GenericBasics.Mega$Q@@12 GenericBasics.Mega$L@@12 GenericBasics.Mega.RBValue$XX this@@4 |x#0@@4| |b#0@@1|) (+ |b#0@@1| 2)))
 :pattern ( (GenericBasics.Mega.RBValue GenericBasics.Mega$P@@12 GenericBasics.Mega$Q@@12 GenericBasics.Mega$L@@12 GenericBasics.Mega.RBValue$XX this@@4 |x#0@@4| |b#0@@1|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Cl$Q@@6 T@U) (GenericBasics.Cl.RValue0$XX@@0 T@U) (this@@5 T@U) (|x#0@@5| T@U) ) (!  (=> (or (|GenericBasics.Cl.RValue0#canCall| GenericBasics.Cl$Q@@6 GenericBasics.Cl.RValue0$XX@@0 this@@5 |x#0@@5|) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@5 null)) (not true)) ($Is refType this@@5 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@6))))) (= (GenericBasics.Tr.RValue0 GenericBasics.Cl$Q@@6 TInt GenericBasics.Cl.RValue0$XX@@0 this@@5 |x#0@@5|) ($Box intType (int_2_U (GenericBasics.Cl.RValue0 GenericBasics.Cl$Q@@6 GenericBasics.Cl.RValue0$XX@@0 this@@5 |x#0@@5|)))))
 :pattern ( (GenericBasics.Tr.RValue0 GenericBasics.Cl$Q@@6 TInt GenericBasics.Cl.RValue0$XX@@0 this@@5 |x#0@@5|) ($Is refType this@@5 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@6)))
 :pattern ( (GenericBasics.Tr.RValue0 GenericBasics.Cl$Q@@6 TInt GenericBasics.Cl.RValue0$XX@@0 this@@5 |x#0@@5|) (GenericBasics.Cl.RValue0 GenericBasics.Cl$Q@@6 GenericBasics.Cl.RValue0$XX@@0 this@@5 |x#0@@5|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((GenericBasics.Tr$A@@1 T@U) (GenericBasics.Tr$B@@1 T@U) (GenericBasics.Tr.RValue0$X@@0 T@U) (this@@6 T@U) (|x#0@@6| T@U) ) (!  (=> (or (|GenericBasics.Tr.RValue0#canCall| GenericBasics.Tr$A@@1 GenericBasics.Tr$B@@1 GenericBasics.Tr.RValue0$X@@0 this@@6 |x#0@@6|) (and (< 1 $FunctionContextHeight) (and (and (or (not (= this@@6 null)) (not true)) ($Is refType this@@6 (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@1 GenericBasics.Tr$B@@1))) ($IsBox |x#0@@6| GenericBasics.Tr.RValue0$X@@0)))) ($IsBox (GenericBasics.Tr.RValue0 GenericBasics.Tr$A@@1 GenericBasics.Tr$B@@1 GenericBasics.Tr.RValue0$X@@0 this@@6 |x#0@@6|) GenericBasics.Tr$B@@1))
 :pattern ( (GenericBasics.Tr.RValue0 GenericBasics.Tr$A@@1 GenericBasics.Tr$B@@1 GenericBasics.Tr.RValue0$X@@0 this@@6 |x#0@@6|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Cl$Q@@7 T@U) (GenericBasics.Cl.RBValue$XX@@0 T@U) (this@@7 T@U) (|x#0@@7| T@U) (|b#0@@2| Int) ) (!  (=> (or (|GenericBasics.Cl.RBValue#canCall| GenericBasics.Cl$Q@@7 GenericBasics.Cl.RBValue$XX@@0 this@@7 |x#0@@7| (LitInt |b#0@@2|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@7 null)) (not true)) ($Is refType this@@7 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@7))) ($IsBox |x#0@@7| GenericBasics.Cl.RBValue$XX@@0)))) (= (GenericBasics.Cl.RBValue GenericBasics.Cl$Q@@7 GenericBasics.Cl.RBValue$XX@@0 this@@7 |x#0@@7| (LitInt |b#0@@2|)) (LitInt (+ |b#0@@2| 2))))
 :weight 3
 :pattern ( (GenericBasics.Cl.RBValue GenericBasics.Cl$Q@@7 GenericBasics.Cl.RBValue$XX@@0 this@@7 |x#0@@7| (LitInt |b#0@@2|)))
))))
(assert (forall ((GenericBasics.Tr$A@@2 T@U) (GenericBasics.Tr$B@@2 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@2 GenericBasics.Tr$B@@2))  (and ($Is refType |c#0@@1| (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@2 GenericBasics.Tr$B@@2)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@2 GenericBasics.Tr$B@@2)))
 :pattern ( ($Is refType |c#0@@1| (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@2 GenericBasics.Tr$B@@2)))
)))
(assert (forall ((s@@0 T@U) (v@@9 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@0 v@@9)) (+ 1 (|Seq#Length| s@@0)))
 :pattern ( (|Seq#Build| s@@0 v@@9))
)))
(assert (forall ((GenericBasics.Cl$Q@@8 T@U) (|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@8))  (and ($Is refType |c#0@@2| (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@8)) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@8)))
 :pattern ( ($Is refType |c#0@@2| (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@8)))
)))
(assert (forall ((v@@10 T@U) (t@@0 T@U) (h@@1 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@10) t@@0 h@@1) ($IsAlloc T@@1 v@@10 t@@0 h@@1))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@10) t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@0 T@U) (bx@@3 T@U) (t@@1 T@U) ) (!  (=> ($HeapSucc h@@2 k@@0) (=> ($IsAllocBox bx@@3 t@@1 h@@2) ($IsAllocBox bx@@3 t@@1 k@@0)))
 :pattern ( ($HeapSucc h@@2 k@@0) ($IsAllocBox bx@@3 t@@1 h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@1 T@U) (v@@11 T@U) (t@@2 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@3 k@@1) (=> ($IsAlloc T@@2 v@@11 t@@2 h@@3) ($IsAlloc T@@2 v@@11 t@@2 k@@1)))
 :pattern ( ($HeapSucc h@@3 k@@1) ($IsAlloc T@@2 v@@11 t@@2 h@@3))
)))
(assert (forall ((GenericBasics.Cl$Q@@9 T@U) ) (!  (and (= (Tag (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@9)) Tagclass.GenericBasics.Cl) (= (TagFamily (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@9)) tytagFamily$Cl))
 :pattern ( (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@9))
)))
(assert (forall ((GenericBasics.Cl$Q@@10 T@U) ) (!  (and (= (Tag (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@10)) Tagclass.GenericBasics.Cl?) (= (TagFamily (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@10)) tytagFamily$Cl))
 :pattern ( (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@10))
)))
(assert (forall ((GenericBasics.Tr$A@@3 T@U) (GenericBasics.Tr$B@@3 T@U) (|c#0@@3| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@3| (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@3 GenericBasics.Tr$B@@3) $h@@2) ($IsAlloc refType |c#0@@3| (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@3 GenericBasics.Tr$B@@3) $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@3| (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@3 GenericBasics.Tr$B@@3) $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@3| (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@3 GenericBasics.Tr$B@@3) $h@@2))
)))
(assert (forall ((GenericBasics.Cl$Q@@11 T@U) ($o@@1 T@U) ) (! (= ($Is refType $o@@1 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@11))  (or (= $o@@1 null) (= (dtype $o@@1) (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@11))))
 :pattern ( ($Is refType $o@@1 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@11)))
)))
(assert (forall ((GenericBasics.Cl$Q@@12 T@U) (bx@@4 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsAllocBox bx@@4 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@12) $h@@3) ($IsGoodHeap $h@@3)) ($IsAllocBox bx@@4 (Tclass.GenericBasics.Tr? GenericBasics.Cl$Q@@12 TInt) $h@@3))
 :pattern ( ($IsAllocBox bx@@4 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@12) $h@@3))
)))
(assert (forall ((GenericBasics.Cl$Q@@13 T@U) ($o@@2 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@2 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@13) $heap) ($IsAlloc refType $o@@2 (Tclass.GenericBasics.Tr? GenericBasics.Cl$Q@@13 TInt) $heap))
 :pattern ( ($IsAlloc refType $o@@2 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@13) $heap))
)))
(assert (forall ((s@@1 T@U) (i Int) (v@@12 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@1)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@12) i) v@@12)) (=> (or (not (= i (|Seq#Length| s@@1))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@12) i) (|Seq#Index| s@@1 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@1 v@@12) i))
)))
(assert (forall ((GenericBasics.Mega$P@@13 T@U) (GenericBasics.Mega$Q@@13 T@U) (GenericBasics.Mega$L@@13 T@U) ($o@@3 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@3 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@13 GenericBasics.Mega$Q@@13 GenericBasics.Mega$L@@13) $h@@4)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@13 GenericBasics.Mega$Q@@13 GenericBasics.Mega$L@@13) $h@@4))
)))
(assert (forall ((GenericBasics.Mega$P@@14 T@U) (GenericBasics.Mega$Q@@14 T@U) (GenericBasics.Mega$L@@14 T@U) ($o@@4 T@U) ) (!  (=> ($Is refType $o@@4 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@14 GenericBasics.Mega$Q@@14 GenericBasics.Mega$L@@14)) ($Is refType $o@@4 (Tclass.GenericBasics.Tr? GenericBasics.Mega$Q@@14 TInt)))
 :pattern ( ($Is refType $o@@4 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@14 GenericBasics.Mega$Q@@14 GenericBasics.Mega$L@@14)))
)))
(assert (forall ((GenericBasics.Mega$P@@15 T@U) (GenericBasics.Mega$Q@@15 T@U) (GenericBasics.Mega$L@@15 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@15 GenericBasics.Mega$Q@@15 GenericBasics.Mega$L@@15)) ($IsBox bx@@5 (Tclass.GenericBasics.Tr? GenericBasics.Mega$Q@@15 TInt)))
 :pattern ( ($IsBox bx@@5 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@15 GenericBasics.Mega$Q@@15 GenericBasics.Mega$L@@15)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Mega$P@@16 T@U) (GenericBasics.Mega$Q@@16 T@U) (GenericBasics.Mega$L@@16 T@U) (GenericBasics.Mega.RBValue$XX@@0 T@U) (this@@8 T@U) (|x#0@@8| T@U) (|b#0@@3| Int) ) (!  (=> (or (|GenericBasics.Mega.RBValue#canCall| GenericBasics.Mega$P@@16 GenericBasics.Mega$Q@@16 GenericBasics.Mega$L@@16 GenericBasics.Mega.RBValue$XX@@0 this@@8 |x#0@@8| (LitInt |b#0@@3|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@8 null)) (not true)) ($Is refType this@@8 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@16 GenericBasics.Mega$Q@@16 GenericBasics.Mega$L@@16))) ($IsBox |x#0@@8| GenericBasics.Mega.RBValue$XX@@0)))) (= (GenericBasics.Mega.RBValue GenericBasics.Mega$P@@16 GenericBasics.Mega$Q@@16 GenericBasics.Mega$L@@16 GenericBasics.Mega.RBValue$XX@@0 this@@8 |x#0@@8| (LitInt |b#0@@3|)) (LitInt (+ |b#0@@3| 2))))
 :weight 3
 :pattern ( (GenericBasics.Mega.RBValue GenericBasics.Mega$P@@16 GenericBasics.Mega$Q@@16 GenericBasics.Mega$L@@16 GenericBasics.Mega.RBValue$XX@@0 this@@8 |x#0@@8| (LitInt |b#0@@3|)))
))))
(assert (forall ((GenericBasics.Tr$A@@4 T@U) (GenericBasics.Tr$B@@4 T@U) ($o@@5 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@5 (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@4 GenericBasics.Tr$B@@4) $h@@5)  (or (= $o@@5 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) alloc)))))
 :pattern ( ($IsAlloc refType $o@@5 (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@4 GenericBasics.Tr$B@@4) $h@@5))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Mega$P@@17 T@U) (GenericBasics.Mega$Q@@17 T@U) (GenericBasics.Mega$L@@17 T@U) (GenericBasics.Mega.RValue0$XX@@0 T@U) (this@@9 T@U) (|x#0@@9| T@U) ) (!  (=> (or (|GenericBasics.Mega.RValue0#canCall| GenericBasics.Mega$P@@17 GenericBasics.Mega$Q@@17 GenericBasics.Mega$L@@17 GenericBasics.Mega.RValue0$XX@@0 this@@9 |x#0@@9|) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@9 null)) (not true)) ($Is refType this@@9 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@17 GenericBasics.Mega$Q@@17 GenericBasics.Mega$L@@17))))) (= (GenericBasics.Tr.RValue0 GenericBasics.Mega$Q@@17 TInt GenericBasics.Mega.RValue0$XX@@0 this@@9 |x#0@@9|) ($Box intType (int_2_U (GenericBasics.Mega.RValue0 GenericBasics.Mega$P@@17 GenericBasics.Mega$Q@@17 GenericBasics.Mega$L@@17 GenericBasics.Mega.RValue0$XX@@0 this@@9 |x#0@@9|)))))
 :pattern ( (GenericBasics.Tr.RValue0 GenericBasics.Mega$Q@@17 TInt GenericBasics.Mega.RValue0$XX@@0 this@@9 |x#0@@9|) ($Is refType this@@9 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@17 GenericBasics.Mega$Q@@17 GenericBasics.Mega$L@@17)))
 :pattern ( (GenericBasics.Tr.RValue0 GenericBasics.Mega$Q@@17 TInt GenericBasics.Mega.RValue0$XX@@0 this@@9 |x#0@@9|) (GenericBasics.Mega.RValue0 GenericBasics.Mega$P@@17 GenericBasics.Mega$Q@@17 GenericBasics.Mega$L@@17 GenericBasics.Mega.RValue0$XX@@0 this@@9 |x#0@@9|))
))))
(assert (forall ((GenericBasics.Mega$P@@18 T@U) (GenericBasics.Mega$Q@@18 T@U) (GenericBasics.Mega$L@@18 T@U) (bx@@6 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsAllocBox bx@@6 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@18 GenericBasics.Mega$Q@@18 GenericBasics.Mega$L@@18) $h@@6) ($IsGoodHeap $h@@6)) ($IsAllocBox bx@@6 (Tclass.GenericBasics.Tr? GenericBasics.Mega$Q@@18 TInt) $h@@6))
 :pattern ( ($IsAllocBox bx@@6 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@18 GenericBasics.Mega$Q@@18 GenericBasics.Mega$L@@18) $h@@6))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@0 T@U) (GenericBasics.Tr$A@@5 T@U) (GenericBasics.Tr$B@@5 T@U) (GenericBasics.Tr.RBValue$X@@0 T@U) (this@@10 T@U) (|x#0@@10| T@U) (|b#0@@4| T@U) ) (!  (=> (and (or (|GenericBasics.Tr.RBValue#canCall| GenericBasics.Tr$A@@5 GenericBasics.Tr$B@@5 GenericBasics.Tr.RBValue$X@@0 this@@10 |x#0@@10| |b#0@@4|) (and (< 1 $FunctionContextHeight) (and (and (and (or (not (= this@@10 null)) (not true)) ($IsAlloc refType this@@10 (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@5 GenericBasics.Tr$B@@5) $Heap@@0)) (and ($IsBox |x#0@@10| GenericBasics.Tr.RBValue$X@@0) ($IsAllocBox |x#0@@10| GenericBasics.Tr.RBValue$X@@0 $Heap@@0))) (and ($IsBox |b#0@@4| GenericBasics.Tr$B@@5) ($IsAllocBox |b#0@@4| GenericBasics.Tr$B@@5 $Heap@@0))))) ($IsGoodHeap $Heap@@0)) ($IsAllocBox (GenericBasics.Tr.RBValue GenericBasics.Tr$A@@5 GenericBasics.Tr$B@@5 GenericBasics.Tr.RBValue$X@@0 this@@10 |x#0@@10| |b#0@@4|) GenericBasics.Tr$B@@5 $Heap@@0))
 :pattern ( ($IsAllocBox (GenericBasics.Tr.RBValue GenericBasics.Tr$A@@5 GenericBasics.Tr$B@@5 GenericBasics.Tr.RBValue$X@@0 this@@10 |x#0@@10| |b#0@@4|) GenericBasics.Tr$B@@5 $Heap@@0))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Cl$Q@@14 T@U) (GenericBasics.Cl.RBValue$XX@@1 T@U) (this@@11 T@U) (|x#0@@11| T@U) (|b#0@@5| Int) ) (!  (=> (or (|GenericBasics.Cl.RBValue#canCall| GenericBasics.Cl$Q@@14 GenericBasics.Cl.RBValue$XX@@1 (Lit refType this@@11) (Lit BoxType |x#0@@11|) (LitInt |b#0@@5|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@11 null)) (not true)) ($Is refType this@@11 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@14))) ($IsBox |x#0@@11| GenericBasics.Cl.RBValue$XX@@1)))) (= (GenericBasics.Cl.RBValue GenericBasics.Cl$Q@@14 GenericBasics.Cl.RBValue$XX@@1 (Lit refType this@@11) (Lit BoxType |x#0@@11|) (LitInt |b#0@@5|)) (LitInt (+ |b#0@@5| 2))))
 :weight 3
 :pattern ( (GenericBasics.Cl.RBValue GenericBasics.Cl$Q@@14 GenericBasics.Cl.RBValue$XX@@1 (Lit refType this@@11) (Lit BoxType |x#0@@11|) (LitInt |b#0@@5|)))
))))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 TInt) (and (= ($Box intType ($Unbox intType bx@@7)) bx@@7) ($Is intType ($Unbox intType bx@@7) TInt)))
 :pattern ( ($IsBox bx@@7 TInt))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 TReal) (and (= ($Box realType ($Unbox realType bx@@8)) bx@@8) ($Is realType ($Unbox realType bx@@8) TReal)))
 :pattern ( ($IsBox bx@@8 TReal))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 TBool) (and (= ($Box boolType ($Unbox boolType bx@@9)) bx@@9) ($Is boolType ($Unbox boolType bx@@9) TBool)))
 :pattern ( ($IsBox bx@@9 TBool))
)))
(assert (forall ((v@@13 T@U) (t@@3 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@13) t@@3) ($Is T@@3 v@@13 t@@3))
 :pattern ( ($IsBox ($Box T@@3 v@@13) t@@3))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((GenericBasics.Tr$A@@6 T@U) (GenericBasics.Tr$B@@6 T@U) ) (! (= (Tclass.GenericBasics.Tr_0 (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@6 GenericBasics.Tr$B@@6)) GenericBasics.Tr$A@@6)
 :pattern ( (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@6 GenericBasics.Tr$B@@6))
)))
(assert (forall ((GenericBasics.Tr$A@@7 T@U) (GenericBasics.Tr$B@@7 T@U) ) (! (= (Tclass.GenericBasics.Tr_1 (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@7 GenericBasics.Tr$B@@7)) GenericBasics.Tr$B@@7)
 :pattern ( (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@7 GenericBasics.Tr$B@@7))
)))
(assert (forall ((GenericBasics.Tr$A@@8 T@U) (GenericBasics.Tr$B@@8 T@U) ) (! (= (Tclass.GenericBasics.Tr?_0 (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@8 GenericBasics.Tr$B@@8)) GenericBasics.Tr$A@@8)
 :pattern ( (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@8 GenericBasics.Tr$B@@8))
)))
(assert (forall ((GenericBasics.Tr$A@@9 T@U) (GenericBasics.Tr$B@@9 T@U) ) (! (= (Tclass.GenericBasics.Tr?_1 (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@9 GenericBasics.Tr$B@@9)) GenericBasics.Tr$B@@9)
 :pattern ( (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@9 GenericBasics.Tr$B@@9))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Mega$P@@19 T@U) (GenericBasics.Mega$Q@@19 T@U) (GenericBasics.Mega$L@@19 T@U) (GenericBasics.Mega.RValue0$XX@@1 T@U) (this@@12 T@U) (|x#0@@12| T@U) ) (!  (=> (or (|GenericBasics.Mega.RValue0#canCall| GenericBasics.Mega$P@@19 GenericBasics.Mega$Q@@19 GenericBasics.Mega$L@@19 GenericBasics.Mega.RValue0$XX@@1 this@@12 |x#0@@12|) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@12 null)) (not true)) ($Is refType this@@12 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@19 GenericBasics.Mega$Q@@19 GenericBasics.Mega$L@@19))) ($IsBox |x#0@@12| GenericBasics.Mega.RValue0$XX@@1)))) (= (GenericBasics.Mega.RValue0 GenericBasics.Mega$P@@19 GenericBasics.Mega$Q@@19 GenericBasics.Mega$L@@19 GenericBasics.Mega.RValue0$XX@@1 this@@12 |x#0@@12|) (LitInt 5)))
 :pattern ( (GenericBasics.Mega.RValue0 GenericBasics.Mega$P@@19 GenericBasics.Mega$Q@@19 GenericBasics.Mega$L@@19 GenericBasics.Mega.RValue0$XX@@1 this@@12 |x#0@@12|))
))))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SeqType v@@14 (TSeq t0@@0) h@@4) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@14))) ($IsAllocBox (|Seq#Index| v@@14 i@@0) t0@@0 h@@4))
 :pattern ( (|Seq#Index| v@@14 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@14 (TSeq t0@@0) h@@4))
)))
(assert (forall ((GenericBasics.Tr$A@@10 T@U) (GenericBasics.Tr$B@@10 T@U) ($o@@6 T@U) ) (! (= ($Is refType $o@@6 (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@10 GenericBasics.Tr$B@@10))  (or (= $o@@6 null) (implements$GenericBasics.Tr (dtype $o@@6) GenericBasics.Tr$A@@10 GenericBasics.Tr$B@@10)))
 :pattern ( ($Is refType $o@@6 (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@10 GenericBasics.Tr$B@@10)))
)))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w)
 :pattern ( (TBitvector w))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSeq (TSeq t@@4)) t@@4)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSeq t@@5)) TagSeq)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((GenericBasics.Cl$Q@@15 T@U) ) (! (= (Tclass.GenericBasics.Cl_0 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@15)) GenericBasics.Cl$Q@@15)
 :pattern ( (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@15))
)))
(assert (forall ((GenericBasics.Cl$Q@@16 T@U) ) (! (= (Tclass.GenericBasics.Cl?_0 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@16)) GenericBasics.Cl$Q@@16)
 :pattern ( (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@16))
)))
(assert (forall ((x@@10 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@10)) x@@10)
 :pattern ( ($Box T@@4 x@@10))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Cl$Q@@17 T@U) (GenericBasics.Cl.RValue0$XX@@1 T@U) (this@@13 T@U) (|x#0@@13| T@U) ) (!  (=> (or (|GenericBasics.Cl.RValue0#canCall| GenericBasics.Cl$Q@@17 GenericBasics.Cl.RValue0$XX@@1 (Lit refType this@@13) (Lit BoxType |x#0@@13|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@13 null)) (not true)) ($Is refType this@@13 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@17))) ($IsBox |x#0@@13| GenericBasics.Cl.RValue0$XX@@1)))) (= (GenericBasics.Cl.RValue0 GenericBasics.Cl$Q@@17 GenericBasics.Cl.RValue0$XX@@1 (Lit refType this@@13) (Lit BoxType |x#0@@13|)) (LitInt 5)))
 :weight 3
 :pattern ( (GenericBasics.Cl.RValue0 GenericBasics.Cl$Q@@17 GenericBasics.Cl.RValue0$XX@@1 (Lit refType this@@13) (Lit BoxType |x#0@@13|)))
))))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@10)) bx@@10) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@10) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@10 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((GenericBasics.Tr$A@@11 T@U) (GenericBasics.Tr$B@@11 T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@11 GenericBasics.Tr$B@@11)) (and (= ($Box refType ($Unbox refType bx@@11)) bx@@11) ($Is refType ($Unbox refType bx@@11) (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@11 GenericBasics.Tr$B@@11))))
 :pattern ( ($IsBox bx@@11 (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@11 GenericBasics.Tr$B@@11)))
)))
(assert (forall ((GenericBasics.Tr$A@@12 T@U) (GenericBasics.Tr$B@@12 T@U) (bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@12 GenericBasics.Tr$B@@12)) (and (= ($Box refType ($Unbox refType bx@@12)) bx@@12) ($Is refType ($Unbox refType bx@@12) (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@12 GenericBasics.Tr$B@@12))))
 :pattern ( ($IsBox bx@@12 (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@12 GenericBasics.Tr$B@@12)))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@7 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))  (=> (and (or (not (= $o@@7 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@7 $f))
)))
(assert (forall ((GenericBasics.Mega$P@@20 T@U) (GenericBasics.Mega$Q@@20 T@U) (GenericBasics.Mega$L@@20 T@U) ($o@@8 T@U) ) (! (= ($Is refType $o@@8 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@20 GenericBasics.Mega$Q@@20 GenericBasics.Mega$L@@20))  (or (= $o@@8 null) (= (dtype $o@@8) (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@20 GenericBasics.Mega$Q@@20 GenericBasics.Mega$L@@20))))
 :pattern ( ($Is refType $o@@8 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@20 GenericBasics.Mega$Q@@20 GenericBasics.Mega$L@@20)))
)))
(assert (forall ((GenericBasics.Mega$P@@21 T@U) (GenericBasics.Mega$Q@@21 T@U) (GenericBasics.Mega$L@@21 T@U) (|c#0@@4| T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType |c#0@@4| (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@21 GenericBasics.Mega$Q@@21 GenericBasics.Mega$L@@21) $h@@7) ($IsAlloc refType |c#0@@4| (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@21 GenericBasics.Mega$Q@@21 GenericBasics.Mega$L@@21) $h@@7))
 :pattern ( ($IsAlloc refType |c#0@@4| (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@21 GenericBasics.Mega$Q@@21 GenericBasics.Mega$L@@21) $h@@7))
 :pattern ( ($IsAlloc refType |c#0@@4| (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@21 GenericBasics.Mega$Q@@21 GenericBasics.Mega$L@@21) $h@@7))
)))
(assert (forall ((s@@3 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@3 val@@4)) s@@3) (= (|Seq#Build_inv1| (|Seq#Build| s@@3 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@3 val@@4))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((GenericBasics.Tr$A@@13 T@U) (GenericBasics.Tr$B@@13 T@U) ) (!  (and (= (Tag (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@13 GenericBasics.Tr$B@@13)) Tagclass.GenericBasics.Tr) (= (TagFamily (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@13 GenericBasics.Tr$B@@13)) tytagFamily$Tr))
 :pattern ( (Tclass.GenericBasics.Tr GenericBasics.Tr$A@@13 GenericBasics.Tr$B@@13))
)))
(assert (forall ((GenericBasics.Tr$A@@14 T@U) (GenericBasics.Tr$B@@14 T@U) ) (!  (and (= (Tag (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@14 GenericBasics.Tr$B@@14)) Tagclass.GenericBasics.Tr?) (= (TagFamily (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@14 GenericBasics.Tr$B@@14)) tytagFamily$Tr))
 :pattern ( (Tclass.GenericBasics.Tr? GenericBasics.Tr$A@@14 GenericBasics.Tr$B@@14))
)))
(assert (forall ((GenericBasics.Mega$P@@22 T@U) (GenericBasics.Mega$Q@@22 T@U) (GenericBasics.Mega$L@@22 T@U) ($o@@9 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@9 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@22 GenericBasics.Mega$Q@@22 GenericBasics.Mega$L@@22) $heap@@0) ($IsAlloc refType $o@@9 (Tclass.GenericBasics.Tr? GenericBasics.Mega$Q@@22 TInt) $heap@@0))
 :pattern ( ($IsAlloc refType $o@@9 (Tclass.GenericBasics.Mega? GenericBasics.Mega$P@@22 GenericBasics.Mega$Q@@22 GenericBasics.Mega$L@@22) $heap@@0))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (TBitvector 0)) (and (= ($Box intType ($Unbox intType bx@@13)) bx@@13) ($Is intType ($Unbox intType bx@@13) (TBitvector 0))))
 :pattern ( ($IsBox bx@@13 (TBitvector 0)))
)))
(assert (forall ((bx@@14 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@14 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@14)) bx@@14) ($Is SeqType ($Unbox SeqType bx@@14) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@14 (TSeq t@@6)))
)))
(assert (forall ((GenericBasics.Cl$Q@@18 T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@18)) (and (= ($Box refType ($Unbox refType bx@@15)) bx@@15) ($Is refType ($Unbox refType bx@@15) (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@18))))
 :pattern ( ($IsBox bx@@15 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@18)))
)))
(assert (forall ((GenericBasics.Cl$Q@@19 T@U) (bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@19)) (and (= ($Box refType ($Unbox refType bx@@16)) bx@@16) ($Is refType ($Unbox refType bx@@16) (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@19))))
 :pattern ( ($IsBox bx@@16 (Tclass.GenericBasics.Cl? GenericBasics.Cl$Q@@19)))
)))
(assert (forall ((bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 (TBitvector 2)) (and (= ($Box bv2Type ($Unbox bv2Type bx@@17)) bx@@17) ($Is bv2Type ($Unbox bv2Type bx@@17) (TBitvector 2))))
 :pattern ( ($IsBox bx@@17 (TBitvector 2)))
)))
(assert (forall ((bx@@18 T@U) ) (!  (=> ($IsBox bx@@18 (TBitvector 3)) (and (= ($Box bv3Type ($Unbox bv3Type bx@@18)) bx@@18) ($Is bv3Type ($Unbox bv3Type bx@@18) (TBitvector 3))))
 :pattern ( ($IsBox bx@@18 (TBitvector 3)))
)))
(assert (forall ((bx@@19 T@U) ) (!  (=> ($IsBox bx@@19 (TBitvector 7)) (and (= ($Box bv7Type ($Unbox bv7Type bx@@19)) bx@@19) ($Is bv7Type ($Unbox bv7Type bx@@19) (TBitvector 7))))
 :pattern ( ($IsBox bx@@19 (TBitvector 7)))
)))
(assert (forall ((bx@@20 T@U) ) (!  (=> ($IsBox bx@@20 (TBitvector 9)) (and (= ($Box bv9Type ($Unbox bv9Type bx@@20)) bx@@20) ($Is bv9Type ($Unbox bv9Type bx@@20) (TBitvector 9))))
 :pattern ( ($IsBox bx@@20 (TBitvector 9)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Mega$P@@23 T@U) (GenericBasics.Mega$Q@@23 T@U) (GenericBasics.Mega$L@@23 T@U) (GenericBasics.Mega.RBValue$XX@@1 T@U) (this@@14 T@U) (|x#0@@14| T@U) (|b#0@@6| Int) ) (!  (=> (or (|GenericBasics.Mega.RBValue#canCall| GenericBasics.Mega$P@@23 GenericBasics.Mega$Q@@23 GenericBasics.Mega$L@@23 GenericBasics.Mega.RBValue$XX@@1 (Lit refType this@@14) (Lit BoxType |x#0@@14|) (LitInt |b#0@@6|)) (and (< 0 $FunctionContextHeight) (and (and (or (not (= this@@14 null)) (not true)) ($Is refType this@@14 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@23 GenericBasics.Mega$Q@@23 GenericBasics.Mega$L@@23))) ($IsBox |x#0@@14| GenericBasics.Mega.RBValue$XX@@1)))) (= (GenericBasics.Mega.RBValue GenericBasics.Mega$P@@23 GenericBasics.Mega$Q@@23 GenericBasics.Mega$L@@23 GenericBasics.Mega.RBValue$XX@@1 (Lit refType this@@14) (Lit BoxType |x#0@@14|) (LitInt |b#0@@6|)) (LitInt (+ |b#0@@6| 2))))
 :weight 3
 :pattern ( (GenericBasics.Mega.RBValue GenericBasics.Mega$P@@23 GenericBasics.Mega$Q@@23 GenericBasics.Mega$L@@23 GenericBasics.Mega.RBValue$XX@@1 (Lit refType this@@14) (Lit BoxType |x#0@@14|) (LitInt |b#0@@6|)))
))))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@8)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@8))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@8))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@8))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@9)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@9))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@9))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@9))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@11 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@11))) (Lit BoxType ($Box intType (int_2_U x@@11))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@11))))
)))
(assert (forall ((x@@12 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@12))) (Lit BoxType ($Box realType (real_2_U x@@12))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@12))))
)))
(assert (forall ((x@@13 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@13)) (Lit BoxType ($Box T@@5 x@@13)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@13)))
)))
(assert (forall ((s@@4 T@U) ) (!  (=> (= (|Seq#Length| s@@4) 0) (= s@@4 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Cl$Q@@20 T@U) (GenericBasics.Cl.RBValue$XX@@2 T@U) (this@@15 T@U) (|x#0@@15| T@U) (|b#0@@7| Int) ) (!  (=> (or (|GenericBasics.Cl.RBValue#canCall| GenericBasics.Cl$Q@@20 GenericBasics.Cl.RBValue$XX@@2 this@@15 |x#0@@15| |b#0@@7|) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@15 null)) (not true)) ($Is refType this@@15 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@20))))) (= (GenericBasics.Tr.RBValue GenericBasics.Cl$Q@@20 TInt GenericBasics.Cl.RBValue$XX@@2 this@@15 |x#0@@15| ($Box intType (int_2_U |b#0@@7|))) ($Box intType (int_2_U (GenericBasics.Cl.RBValue GenericBasics.Cl$Q@@20 GenericBasics.Cl.RBValue$XX@@2 this@@15 |x#0@@15| |b#0@@7|)))))
 :pattern ( (GenericBasics.Tr.RBValue GenericBasics.Cl$Q@@20 TInt GenericBasics.Cl.RBValue$XX@@2 this@@15 |x#0@@15| ($Box intType (int_2_U |b#0@@7|))) ($Is refType this@@15 (Tclass.GenericBasics.Cl GenericBasics.Cl$Q@@20)))
 :pattern ( (GenericBasics.Tr.RBValue GenericBasics.Cl$Q@@20 TInt GenericBasics.Cl.RBValue$XX@@2 this@@15 |x#0@@15| ($Box intType (int_2_U |b#0@@7|))) (GenericBasics.Cl.RBValue GenericBasics.Cl$Q@@20 GenericBasics.Cl.RBValue$XX@@2 this@@15 |x#0@@15| |b#0@@7|))
))))
(assert (forall ((h@@5 T@U) (v@@15 T@U) ) (! ($IsAlloc intType v@@15 TInt h@@5)
 :pattern ( ($IsAlloc intType v@@15 TInt h@@5))
)))
(assert (forall ((h@@6 T@U) (v@@16 T@U) ) (! ($IsAlloc realType v@@16 TReal h@@6)
 :pattern ( ($IsAlloc realType v@@16 TReal h@@6))
)))
(assert (forall ((h@@7 T@U) (v@@17 T@U) ) (! ($IsAlloc boolType v@@17 TBool h@@7)
 :pattern ( ($IsAlloc boolType v@@17 TBool h@@7))
)))
(assert (forall ((v@@18 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@18 (TSeq t0@@2)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@18))) ($IsBox (|Seq#Index| v@@18 i@@1) t0@@2))
 :pattern ( (|Seq#Index| v@@18 i@@1))
)))
 :pattern ( ($Is SeqType v@@18 (TSeq t0@@2)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((GenericBasics.Mega$P@@24 T@U) (GenericBasics.Mega$Q@@24 T@U) (GenericBasics.Mega$L@@24 T@U) (GenericBasics.Mega.RBValue$XX@@2 T@U) (this@@16 T@U) (|x#0@@16| T@U) (|b#0@@8| Int) ) (!  (=> (or (|GenericBasics.Mega.RBValue#canCall| GenericBasics.Mega$P@@24 GenericBasics.Mega$Q@@24 GenericBasics.Mega$L@@24 GenericBasics.Mega.RBValue$XX@@2 this@@16 |x#0@@16| |b#0@@8|) (and (< 0 $FunctionContextHeight) (and (or (not (= this@@16 null)) (not true)) ($Is refType this@@16 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@24 GenericBasics.Mega$Q@@24 GenericBasics.Mega$L@@24))))) (= (GenericBasics.Tr.RBValue GenericBasics.Mega$Q@@24 TInt GenericBasics.Mega.RBValue$XX@@2 this@@16 |x#0@@16| ($Box intType (int_2_U |b#0@@8|))) ($Box intType (int_2_U (GenericBasics.Mega.RBValue GenericBasics.Mega$P@@24 GenericBasics.Mega$Q@@24 GenericBasics.Mega$L@@24 GenericBasics.Mega.RBValue$XX@@2 this@@16 |x#0@@16| |b#0@@8|)))))
 :pattern ( (GenericBasics.Tr.RBValue GenericBasics.Mega$Q@@24 TInt GenericBasics.Mega.RBValue$XX@@2 this@@16 |x#0@@16| ($Box intType (int_2_U |b#0@@8|))) ($Is refType this@@16 (Tclass.GenericBasics.Mega GenericBasics.Mega$P@@24 GenericBasics.Mega$Q@@24 GenericBasics.Mega$L@@24)))
 :pattern ( (GenericBasics.Tr.RBValue GenericBasics.Mega$Q@@24 TInt GenericBasics.Mega.RBValue$XX@@2 this@@16 |x#0@@16| ($Box intType (int_2_U |b#0@@8|))) (GenericBasics.Mega.RBValue GenericBasics.Mega$P@@24 GenericBasics.Mega$Q@@24 GenericBasics.Mega$L@@24 GenericBasics.Mega.RBValue$XX@@2 this@@16 |x#0@@16| |b#0@@8|))
))))
(assert (forall ((s@@5 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@5))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))) (|Seq#Rank| s@@5)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))))
)))
(assert (forall ((v@@19 T@U) ) (! ($Is intType v@@19 TInt)
 :pattern ( ($Is intType v@@19 TInt))
)))
(assert (forall ((v@@20 T@U) ) (! ($Is realType v@@20 TReal)
 :pattern ( ($Is realType v@@20 TReal))
)))
(assert (forall ((v@@21 T@U) ) (! ($Is boolType v@@21 TBool)
 :pattern ( ($Is boolType v@@21 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#0@1| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |t#0@2| () T@U)
(declare-fun call2formal@this@0 () T@U)
(declare-fun call4formal@this@0 () T@U)
(declare-fun |ts#0@0| () T@U)
(declare-fun |x##0_0@1| () Int)
(declare-fun |a##0_0@1| () Real)
(declare-fun |b##0_0@1| () Int)
(declare-fun |call7formal@bb#0| () T@U)
(declare-fun call1formal@GenericBasics.Tr$B () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun |call8formal@cc#0| () T@U)
(declare-fun |call4formal@a#0@0| () T@U)
(declare-fun |call5formal@b#0@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call7formal@bb#0@0| () T@U)
(declare-fun |call8formal@cc#0@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |$rhs##0_0@1| () Int)
(declare-fun |y##0_0@1| () Int)
(declare-fun |a##0_1@1| () Real)
(declare-fun |b##0_1@1| () Int)
(declare-fun |call6formal@bb#0| () T@U)
(declare-fun call1formal@GenericBasics.Tr$B@@0 () T@U)
(declare-fun |call3formal@a#0@0| () T@U)
(declare-fun |call4formal@b#0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |call6formal@bb#0@0| () T@U)
(declare-fun |$rhs##0_2@1| () Int)
(declare-fun |##a#0_0@1| () T@U)
(declare-fun |GenericBasics.Tr.Teen#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |##a#0_1@1| () T@U)
(declare-fun |##b#0_0@1| () Int)
(declare-fun |GenericBasics.Tr.STeen#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |##x#0_0@1| () T@U)
(declare-fun |rv0#0_0@1| () Int)
(declare-fun |##x#0_1@1| () T@U)
(declare-fun |GenericBasics.Tr.RValue1#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |##x#0_2@1| () T@U)
(declare-fun |GenericBasics.Tr.RValue2#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |##x#0_3@1| () T@U)
(declare-fun |GenericBasics.Tr.RValue3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |##x#0_4@1| () T@U)
(declare-fun |##b#0_1@1| () Int)
(declare-fun |rb#0_0@1| () Int)
(declare-fun |x##0_1@1| () Real)
(declare-fun |b##0_2@1| () Int)
(declare-fun |call7formal@r#0| () T@U)
(declare-fun call1formal@GenericBasics.Tr$B@@1 () T@U)
(declare-fun |call4formal@x#0@0| () T@U)
(declare-fun |call5formal@b#0@0@@0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |call7formal@r#0@0| () T@U)
(declare-fun |$rhs##0_3@1| () Int)
(declare-fun |x##0_2@1| () Real)
(declare-fun |b##0_3@1| () Int)
(declare-fun |call7formal@r#0@@0| () T@U)
(declare-fun call1formal@GenericBasics.Tr$B@@2 () T@U)
(declare-fun |call8formal@y#0| () T@U)
(declare-fun call2formal@GenericBasics.Tr.MValue1$X () T@U)
(declare-fun |call4formal@x#0@0@@0| () T@U)
(declare-fun |call5formal@b#0@0@@1| () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |call7formal@r#0@0@@0| () T@U)
(declare-fun |call8formal@y#0@0| () T@U)
(declare-fun |$rhs##0_4@1| () Int)
(declare-fun |$rhs##0_5@1| () Real)
(declare-fun |i#0@2| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |defass#t#0@0| () Bool)
(declare-fun |t#0@1| () T@U)
(declare-fun |sq#0_0@0| () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |defass#t#0| () Bool)
(declare-fun call2formal@this () T@U)
(declare-fun call0formal@GenericBasics.Cl$Q () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun call4formal@this () T@U)
(declare-fun call0formal@GenericBasics.Mega$P () T@U)
(declare-fun call1formal@GenericBasics.Mega$Q () T@U)
(declare-fun call2formal@GenericBasics.Mega$L () T@U)
(declare-fun call2formal@GenericBasics.Mega$L@0 () T@U)
(declare-fun |t#0@0| () T@U)
(declare-fun |i#0@0| () Int)
(declare-fun |defass#c#0| () Bool)
(declare-fun |c#0@@5| () T@U)
(declare-fun |defass#m#0| () Bool)
(declare-fun |m#0| () T@U)
(declare-fun |ts#0| () T@U)
(declare-fun |t#0| () T@U)
(declare-fun |sq#0_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 55) (let ((anon4_correct true))
(let ((anon13_Else_correct  (=> (and (< |i#0@1| (LitInt 0)) (= (ControlFlow 0 46) 44)) anon4_correct)))
(let ((anon13_Then_correct  (=> (and (<= (LitInt 0) |i#0@1|) (= (ControlFlow 0 45) 44)) anon4_correct)))
(let ((anon12_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 47) 45) anon13_Then_correct) (=> (= (ControlFlow 0 47) 46) anon13_Else_correct)))))
(let ((anon10_correct  (=> (= |t#0@2| (ite (= |i#0@1| (LitInt 0)) call2formal@this@0 call4formal@this@0)) (and (=> (= (ControlFlow 0 4) (- 0 35)) true) (and (=> (= (ControlFlow 0 4) (- 0 34)) (and (<= 0 |i#0@1|) (< |i#0@1| (|Seq#Length| |ts#0@0|)))) (and (=> (= (ControlFlow 0 4) (- 0 33)) (= |t#0@2| ($Unbox refType (|Seq#Index| |ts#0@0| |i#0@1|)))) (=> (= |t#0@2| ($Unbox refType (|Seq#Index| |ts#0@0| |i#0@1|))) (and (=> (= (ControlFlow 0 4) (- 0 32)) true) (and (=> (= (ControlFlow 0 4) (- 0 31)) (or (not (= |t#0@2| null)) (not true))) (and (=> (= (ControlFlow 0 4) (- 0 30)) true) (and (=> (= (ControlFlow 0 4) (- 0 29)) (or (not (= |t#0@2| null)) (not true))) (and (=> (= (ControlFlow 0 4) (- 0 28)) true) (and (=> (= (ControlFlow 0 4) (- 0 27)) true) (and (=> (= (ControlFlow 0 4) (- 0 26)) (or (not (= |t#0@2| null)) (not true))) (=> (or (not (= |t#0@2| null)) (not true)) (=> (= |x##0_0@1| (LitInt 50)) (=> (and (and (= |a##0_0@1| (LitReal 51.0)) (= |b##0_0@1| (LitInt 52))) (and ($IsBox |call7formal@bb#0| call1formal@GenericBasics.Tr$B) ($IsAllocBox |call7formal@bb#0| call1formal@GenericBasics.Tr$B $Heap@@1))) (=> (and (and (and (and ($Is SeqType |call8formal@cc#0| (TSeq call1formal@GenericBasics.Tr$B)) ($IsAlloc SeqType |call8formal@cc#0| (TSeq call1formal@GenericBasics.Tr$B) $Heap@@1)) (and (= |call4formal@a#0@0| ($Box realType (real_2_U |a##0_0@1|))) (= |call5formal@b#0@0| ($Box intType (int_2_U |b##0_0@1|))))) (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and ($IsBox |call7formal@bb#0@0| TInt) ($IsAllocBox |call7formal@bb#0@0| TInt $Heap@3)))) (and (and (and ($Is SeqType |call8formal@cc#0@0| (TSeq TInt)) ($IsAlloc SeqType |call8formal@cc#0@0| (TSeq TInt) $Heap@3)) (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@10) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@10)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@10))
))) (and ($HeapSucc $Heap@2 $Heap@3) (= |$rhs##0_0@1| (U_2_int ($Unbox intType |call7formal@bb#0@0|)))))) (and (=> (= (ControlFlow 0 4) (- 0 25)) true) (=> (= |y##0_0@1| (LitInt 50)) (=> (and (and (and (and (= |a##0_1@1| (LitReal 51.0)) (= |b##0_1@1| (LitInt 52))) (and ($IsBox |call6formal@bb#0| call1formal@GenericBasics.Tr$B@@0) ($IsAllocBox |call6formal@bb#0| call1formal@GenericBasics.Tr$B@@0 $Heap@@1))) (and (and (= |call3formal@a#0@0| ($Box realType (real_2_U |a##0_1@1|))) (= |call4formal@b#0@0| ($Box intType (int_2_U |b##0_1@1|)))) (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)))) (and (and (and ($IsBox |call6formal@bb#0@0| TInt) ($IsAllocBox |call6formal@bb#0@0| TInt $Heap@4)) (forall (($o@@11 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@11) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@11) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@11)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@11))
))) (and ($HeapSucc $Heap@3 $Heap@4) (= |$rhs##0_2@1| (U_2_int ($Unbox intType |call6formal@bb#0@0|)))))) (and (=> (= (ControlFlow 0 4) (- 0 24)) true) (and (=> (= (ControlFlow 0 4) (- 0 23)) (or (not (= |t#0@2| null)) (not true))) (=> ($IsAllocBox ($Box refType |t#0@2|) (Tclass.GenericBasics.Tr? TReal TInt) $Heap@4) (=> (and (and (= |##a#0_0@1| (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box realType (real_2_U (LitReal 0.5))) ($Box bv9Type (Lit bv9Type (bv9_2_U #b001100100)))))) ($IsAlloc DatatypeTypeType |##a#0_0@1| (Tclass._System.Tuple2 TReal (TBitvector 9)) $Heap@4)) (and (|GenericBasics.Tr.Teen#canCall| TReal TInt (TBitvector 9) |t#0@2| (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box realType (real_2_U (LitReal 0.5))) ($Box bv9Type (Lit bv9Type (bv9_2_U #b001100100)))))) (|GenericBasics.Tr.Teen#canCall| TReal TInt (TBitvector 9) |t#0@2| (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box realType (real_2_U (LitReal 0.5))) ($Box bv9Type (Lit bv9Type (bv9_2_U #b001100100)))))))) (and (=> (= (ControlFlow 0 4) (- 0 22)) true) (=> (and (= |##a#0_1@1| (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box realType (real_2_U (LitReal 0.5))) ($Box bv9Type (Lit bv9Type (bv9_2_U #b001100100)))))) ($IsAlloc DatatypeTypeType |##a#0_1@1| (Tclass._System.Tuple2 TReal (TBitvector 9)) $Heap@4)) (=> (and (and (= |##b#0_0@1| (LitInt 53)) ($IsAlloc intType (int_2_U |##b#0_0@1|) TInt $Heap@4)) (and (|GenericBasics.Tr.STeen#canCall| TReal TInt (TBitvector 9) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box realType (real_2_U (LitReal 0.5))) ($Box bv9Type (Lit bv9Type (bv9_2_U #b001100100))))) ($Box intType (int_2_U (LitInt 53)))) (|GenericBasics.Tr.STeen#canCall| TReal TInt (TBitvector 9) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box realType (real_2_U (LitReal 0.5))) ($Box bv9Type (Lit bv9Type (bv9_2_U #b001100100))))) ($Box intType (int_2_U (LitInt 53)))))) (and (=> (= (ControlFlow 0 4) (- 0 21)) true) (and (=> (= (ControlFlow 0 4) (- 0 20)) (or (not (= |t#0@2| null)) (not true))) (=> (or (not (= |t#0@2| null)) (not true)) (=> (and ($IsAllocBox ($Box refType |t#0@2|) (Tclass.GenericBasics.Tr? TReal TInt) $Heap@4) (= |##x#0_0@1| (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011))))))) (=> (and (and ($IsAlloc DatatypeTypeType |##x#0_0@1| (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) $Heap@4) (|GenericBasics.Tr.RValue0#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011)))))))) (and (|GenericBasics.Tr.RValue0#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011))))))) (= |rv0#0_0@1| (U_2_int ($Unbox intType (GenericBasics.Tr.RValue0 TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011)))))))))))) (and (=> (= (ControlFlow 0 4) (- 0 19)) true) (and (=> (= (ControlFlow 0 4) (- 0 18)) (or (not (= |t#0@2| null)) (not true))) (=> ($IsAllocBox ($Box refType |t#0@2|) (Tclass.GenericBasics.Tr? TReal TInt) $Heap@4) (=> (and (and (= |##x#0_1@1| (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011)))))) ($IsAlloc DatatypeTypeType |##x#0_1@1| (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) $Heap@4)) (and (|GenericBasics.Tr.RValue1#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011))))))) (|GenericBasics.Tr.RValue1#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011))))))))) (and (=> (= (ControlFlow 0 4) (- 0 17)) true) (and (=> (= (ControlFlow 0 4) (- 0 16)) (or (not (= |t#0@2| null)) (not true))) (=> ($IsAllocBox ($Box refType |t#0@2|) (Tclass.GenericBasics.Tr? TReal TInt) $Heap@4) (=> (and (and (= |##x#0_2@1| (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011)))))) ($IsAlloc DatatypeTypeType |##x#0_2@1| (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) $Heap@4)) (and (|GenericBasics.Tr.RValue2#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011))))))) (|GenericBasics.Tr.RValue2#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011))))))))) (and (=> (= (ControlFlow 0 4) (- 0 15)) true) (and (=> (= (ControlFlow 0 4) (- 0 14)) (or (not (= |t#0@2| null)) (not true))) (=> ($IsAllocBox ($Box refType |t#0@2|) (Tclass.GenericBasics.Tr? TReal TInt) $Heap@4) (=> (and (and (= |##x#0_3@1| (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011)))))) ($IsAlloc DatatypeTypeType |##x#0_3@1| (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) $Heap@4)) (and (|GenericBasics.Tr.RValue3#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011))))))) (|GenericBasics.Tr.RValue3#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011))))))))) (and (=> (= (ControlFlow 0 4) (- 0 13)) true) (and (=> (= (ControlFlow 0 4) (- 0 12)) (or (not (= |t#0@2| null)) (not true))) (=> (or (not (= |t#0@2| null)) (not true)) (=> (and (and (and ($IsAllocBox ($Box refType |t#0@2|) (Tclass.GenericBasics.Tr? TReal TInt) $Heap@4) (= |##x#0_4@1| (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011))))))) (and ($IsAlloc DatatypeTypeType |##x#0_4@1| (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) $Heap@4) (= |##b#0_1@1| (LitInt 10)))) (and (and ($IsAlloc intType (int_2_U |##b#0_1@1|) TInt $Heap@4) (|GenericBasics.Tr.RBValue#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011)))))) ($Box intType (int_2_U (LitInt 10))))) (and (|GenericBasics.Tr.RBValue#canCall| TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011)))))) ($Box intType (int_2_U (LitInt 10)))) (= |rb#0_0@1| (U_2_int ($Unbox intType (GenericBasics.Tr.RBValue TReal TInt (Tclass._System.Tuple2 (TBitvector 2) (TBitvector 3)) |t#0@2| ($Box DatatypeTypeType (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box bv2Type (Lit bv2Type (bv2_2_U #b11))) ($Box bv3Type (Lit bv3Type (bv3_2_U #b011)))))) ($Box intType (int_2_U (LitInt 10)))))))))) (and (=> (= (ControlFlow 0 4) (- 0 11)) true) (and (=> (= (ControlFlow 0 4) (- 0 10)) (or (not (= |t#0@2| null)) (not true))) (=> (or (not (= |t#0@2| null)) (not true)) (=> (and (and (and (and (= |x##0_1@1| (LitReal 18.8)) (= |b##0_2@1| (LitInt 30))) (and ($IsBox |call7formal@r#0| call1formal@GenericBasics.Tr$B@@1) ($IsAllocBox |call7formal@r#0| call1formal@GenericBasics.Tr$B@@1 $Heap@@1))) (and (and (= |call4formal@x#0@0| ($Box realType (real_2_U |x##0_1@1|))) (= |call5formal@b#0@0@@0| ($Box intType (int_2_U |b##0_2@1|)))) (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)))) (and (and (and ($IsBox |call7formal@r#0@0| TInt) ($IsAllocBox |call7formal@r#0@0| TInt $Heap@5)) (forall (($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@12) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@12) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@12)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@12))
))) (and ($HeapSucc $Heap@4 $Heap@5) (= |$rhs##0_3@1| (U_2_int ($Unbox intType |call7formal@r#0@0|)))))) (and (=> (= (ControlFlow 0 4) (- 0 9)) true) (and (=> (= (ControlFlow 0 4) (- 0 8)) (or (not (= |t#0@2| null)) (not true))) (=> (or (not (= |t#0@2| null)) (not true)) (=> (and (and (= |x##0_2@1| (LitReal 18.8)) (= |b##0_3@1| (LitInt 30))) (and ($IsBox |call7formal@r#0@@0| call1formal@GenericBasics.Tr$B@@2) ($IsAllocBox |call7formal@r#0@@0| call1formal@GenericBasics.Tr$B@@2 $Heap@@1))) (=> (and (and (and (and ($IsBox |call8formal@y#0| call2formal@GenericBasics.Tr.MValue1$X) ($IsAllocBox |call8formal@y#0| call2formal@GenericBasics.Tr.MValue1$X $Heap@@1)) (and (= |call4formal@x#0@0@@0| ($Box realType (real_2_U |x##0_2@1|))) (= |call5formal@b#0@0@@1| ($Box intType (int_2_U |b##0_3@1|))))) (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and ($IsBox |call7formal@r#0@0@@0| TInt) ($IsAllocBox |call7formal@r#0@0@@0| TInt $Heap@6)))) (and (and (and ($IsBox |call8formal@y#0@0| TReal) ($IsAllocBox |call8formal@y#0@0| TReal $Heap@6)) (forall (($o@@13 T@U) ) (!  (=> (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@13) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@13) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@13)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@13))
))) (and (and ($HeapSucc $Heap@5 $Heap@6) (= |$rhs##0_4@1| (U_2_int ($Unbox intType |call7formal@r#0@0@@0|)))) (and (= |$rhs##0_5@1| (U_2_real ($Unbox realType |call8formal@y#0@0|))) (= |i#0@2| (+ |i#0@1| 1)))))) (and (=> (= (ControlFlow 0 4) (- 0 7)) (or (<= 0 |$decr$loop#00@1|) (= (- 2 |i#0@2|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- 2 |i#0@2|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (< (- 2 |i#0@2|) |$decr$loop#00@1|)) (=> (< (- 2 |i#0@2|) |$decr$loop#00@1|) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@2|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@2|)) (=> (= (ControlFlow 0 4) (- 0 3)) (=> |$w$loop#0@0| (<= |i#0@2| (LitInt 2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon15_Else_correct  (=> (or (not (= |i#0@1| (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 39) (- 0 41)) true) (and (=> (= (ControlFlow 0 39) (- 0 40)) ($Is refType (ite (= |i#0@1| (LitInt 0)) call2formal@this@0 call4formal@this@0) (Tclass.GenericBasics.Tr TReal TInt))) (=> ($Is refType (ite (= |i#0@1| (LitInt 0)) call2formal@this@0 call4formal@this@0) (Tclass.GenericBasics.Tr TReal TInt)) (=> (= (ControlFlow 0 39) 4) anon10_correct)))))))
(let ((anon15_Then_correct  (=> (= |i#0@1| (LitInt 0)) (and (=> (= (ControlFlow 0 36) (- 0 38)) true) (and (=> (= (ControlFlow 0 36) (- 0 37)) ($Is refType (ite (= |i#0@1| (LitInt 0)) call2formal@this@0 call4formal@this@0) (Tclass.GenericBasics.Tr TReal TInt))) (=> ($Is refType (ite (= |i#0@1| (LitInt 0)) call2formal@this@0 call4formal@this@0) (Tclass.GenericBasics.Tr TReal TInt)) (=> (= (ControlFlow 0 36) 4) anon10_correct)))))))
(let ((anon14_Else_correct  (=> (and (< |i#0@1| 2) (= |$decr$loop#00@1| (- 2 |i#0@1|))) (and (=> (= (ControlFlow 0 42) 36) anon15_Then_correct) (=> (= (ControlFlow 0 42) 39) anon15_Else_correct)))))
(let ((anon14_Then_correct true))
(let ((anon12_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 43) 2) anon14_Then_correct) (=> (= (ControlFlow 0 43) 42) anon14_Else_correct)))))
(let ((anon11_LoopBody_correct  (and (=> (= (ControlFlow 0 48) 47) anon12_Then_correct) (=> (= (ControlFlow 0 48) 43) anon12_Else_correct))))
(let ((anon11_LoopDone_correct true))
(let ((anon11_LoopHead_correct  (=> (=> |defass#t#0@0| (and ($Is refType |t#0@1| (Tclass.GenericBasics.Tr TReal TInt)) ($IsAlloc refType |t#0@1| (Tclass.GenericBasics.Tr TReal TInt) $Heap@2))) (=> (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and ($Is SeqType |sq#0_0@0| (TSeq TInt)) ($IsAlloc SeqType |sq#0_0@0| (TSeq TInt) $Heap@2))) (=> (and (and (and (and (and (and (and (not false) true) true) (and (<= 0 |i#0@1|) (< |i#0@1| 3))) (= |$decr_init$loop#00@0| 2)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@1|))) (and (=> |$w$loop#0@0| (<= |i#0@1| (LitInt 2))) (forall (($o@@14 T@U) ) (!  (=> (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@14) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@14) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@14)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@14))
)))) (and (and ($HeapSucc $Heap@1 $Heap@2) (forall (($o@@15 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@15) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@15 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@15) $f@@0))
))) (and (=> |defass#t#0| |defass#t#0@0|) (<= (- 2 |i#0@1|) |$decr_init$loop#00@0|)))) (and (=> (= (ControlFlow 0 49) 1) anon11_LoopDone_correct) (=> (= (ControlFlow 0 49) 48) anon11_LoopBody_correct)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (=> (and (and (or (not (= call2formal@this null)) (not true)) (and ($Is refType call2formal@this (Tclass.GenericBasics.Cl call0formal@GenericBasics.Cl$Q)) ($IsAlloc refType call2formal@this (Tclass.GenericBasics.Cl call0formal@GenericBasics.Cl$Q) $Heap@@1))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and (or (not (= call2formal@this@0 null)) (not true)) (and ($Is refType call2formal@this@0 (Tclass.GenericBasics.Cl TReal)) ($IsAlloc refType call2formal@this@0 (Tclass.GenericBasics.Cl TReal) $Heap@0))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 call2formal@this@0) alloc))))) (and (forall (($o@@16 T@U) ) (!  (=> (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@16) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@16) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@16)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@16))
)) ($HeapSucc $Heap@@1 $Heap@0))) (=> (and (and (and (and (or (not (= call4formal@this null)) (not true)) (and ($Is refType call4formal@this (Tclass.GenericBasics.Mega call0formal@GenericBasics.Mega$P call1formal@GenericBasics.Mega$Q call2formal@GenericBasics.Mega$L)) ($IsAlloc refType call4formal@this (Tclass.GenericBasics.Mega call0formal@GenericBasics.Mega$P call1formal@GenericBasics.Mega$Q call2formal@GenericBasics.Mega$L) $Heap@@1))) (= call2formal@GenericBasics.Mega$L@0 (Tclass.GenericBasics.Cl TReal))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (and (or (not (= call4formal@this@0 null)) (not true)) (and ($Is refType call4formal@this@0 (Tclass.GenericBasics.Mega TBool TReal call2formal@GenericBasics.Mega$L@0)) ($IsAlloc refType call4formal@this@0 (Tclass.GenericBasics.Mega TBool TReal call2formal@GenericBasics.Mega$L@0) $Heap@1))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call4formal@this@0) alloc))))) (and (forall (($o@@17 T@U) ) (!  (=> (and (or (not (= $o@@17 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@17) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@17) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@17)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@17))
)) ($HeapSucc $Heap@0 $Heap@1)))) (and (=> (= (ControlFlow 0 50) (- 0 54)) true) (and (=> (= (ControlFlow 0 50) (- 0 53)) true) (=> (and (and (= |ts#0@0| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box refType call2formal@this@0)) ($Box refType call4formal@this@0))) (=> |defass#t#0| (and ($Is refType |t#0@0| (Tclass.GenericBasics.Tr TReal TInt)) ($IsAlloc refType |t#0@0| (Tclass.GenericBasics.Tr TReal TInt) $Heap@1)))) (and (= |i#0@0| (LitInt 0)) (= |$decr_init$loop#00@0| (- 2 |i#0@0|)))) (and (=> (= (ControlFlow 0 50) (- 0 52)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@0|)) (and (=> (= (ControlFlow 0 50) (- 0 51)) (=> |$w$loop#0@0| (<= |i#0@0| (LitInt 2)))) (=> (=> |$w$loop#0@0| (<= |i#0@0| (LitInt 2))) (=> (= (ControlFlow 0 50) 49) anon11_LoopHead_correct))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and (=> |defass#c#0| (and ($Is refType |c#0@@5| (Tclass.GenericBasics.Cl TReal)) ($IsAlloc refType |c#0@@5| (Tclass.GenericBasics.Cl TReal) $Heap@@1))) true) (and (=> |defass#m#0| (and ($Is refType |m#0| (Tclass.GenericBasics.Mega TBool TReal (Tclass.GenericBasics.Cl TReal))) ($IsAlloc refType |m#0| (Tclass.GenericBasics.Mega TBool TReal (Tclass.GenericBasics.Cl TReal)) $Heap@@1))) true)) (=> (and (and (and (and ($Is SeqType |ts#0| (TSeq (Tclass.GenericBasics.Tr TReal TInt))) ($IsAlloc SeqType |ts#0| (TSeq (Tclass.GenericBasics.Tr TReal TInt)) $Heap@@1)) true) (and (=> |defass#t#0| (and ($Is refType |t#0| (Tclass.GenericBasics.Tr TReal TInt)) ($IsAlloc refType |t#0| (Tclass.GenericBasics.Tr TReal TInt) $Heap@@1))) true)) (and (and (and ($Is SeqType |sq#0_0| (TSeq TInt)) ($IsAlloc SeqType |sq#0_0| (TSeq TInt) $Heap@@1)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 55) 50)))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
