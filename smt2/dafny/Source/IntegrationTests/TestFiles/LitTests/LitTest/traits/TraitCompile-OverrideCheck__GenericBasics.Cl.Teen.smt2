(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 (T@T) Int)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 (Bool) T@U)
(declare-fun $generated@@15 (T@U) Bool)
(declare-fun $generated@@16 (Int) T@U)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 (Real) T@U)
(declare-fun $generated@@19 (T@U) Real)
(declare-fun $generated@@26 (T@U T@U T@U) Bool)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@30 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@36 (T@T T@U T@U) Bool)
(declare-fun $generated@@37 (T@U T@U) T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 (T@T T@T) T@T)
(declare-fun $generated@@46 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@48 (T@T) T@T)
(declare-fun $generated@@69 (T@T T@U) T@U)
(declare-fun $generated@@72 (T@U T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@95 (T@U T@U) T@U)
(declare-fun $generated@@96 (T@U) T@U)
(declare-fun $generated@@99 (T@U) T@U)
(declare-fun $generated@@102 (T@U) T@U)
(declare-fun $generated@@105 (T@U) T@U)
(declare-fun $generated@@108 (T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@117 (T@U) T@U)
(declare-fun $generated@@119 (T@U) T@U)
(declare-fun $generated@@123 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@124 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@125 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@10 $generated@@11) 0) (= ($generated@@10 $generated@@12) 1)) (= ($generated@@10 $generated@@13) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@19 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@18 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9)
)
(assert (forall (($generated@@28 T@U) ) ($generated@@26 ($generated@@27 $generated@@28) $generated@@28 $generated)))
(assert (= ($generated@@29 $generated) $generated@@0))
(assert (= ($generated@@10 $generated@@31) 3))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@34 ($generated@@32 $generated@@33) $generated@@35) ($generated@@30 $generated@@31 $generated@@34 ($generated@@27 $generated@@33) $generated@@35))
 :pattern ( ($generated@@30 $generated@@31 $generated@@34 ($generated@@32 $generated@@33) $generated@@35))
 :pattern ( ($generated@@30 $generated@@31 $generated@@34 ($generated@@27 $generated@@33) $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (!  (=> ($generated@@36 $generated@@31 $generated@@39 ($generated@@27 $generated@@38)) ($generated@@36 $generated@@31 $generated@@39 ($generated@@37 $generated@@38 $generated)))
 :pattern ( ($generated@@36 $generated@@31 $generated@@39 ($generated@@27 $generated@@38)))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@49 T@T) ($generated@@50 T@T) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@42 $generated@@49 $generated@@50 ($generated@@46 $generated@@49 $generated@@50 $generated@@52 $generated@@53 $generated@@51) $generated@@53) $generated@@51)
 :weight 0
)) (forall (($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (!  (or (= $generated@@58 $generated@@59) (= ($generated@@42 $generated@@54 $generated@@55 ($generated@@46 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@56) $generated@@59) ($generated@@42 $generated@@54 $generated@@55 $generated@@57 $generated@@59)))
 :weight 0
))) (= ($generated@@10 $generated@@43) 4)) (= ($generated@@10 $generated@@44) 5)) (forall (($generated@@60 T@T) ($generated@@61 T@T) ) (= ($generated@@10 ($generated@@45 $generated@@60 $generated@@61)) 6))) (forall (($generated@@62 T@T) ($generated@@63 T@T) ) (! (= ($generated@@47 ($generated@@45 $generated@@62 $generated@@63)) $generated@@62)
 :pattern ( ($generated@@45 $generated@@62 $generated@@63))
))) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (! (= ($generated@@48 ($generated@@45 $generated@@64 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@45 $generated@@64 $generated@@65))
))))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@67 ($generated@@27 $generated@@66) $generated@@68)  (or (= $generated@@67 $generated@@40) ($generated@@15 ($generated@@41 $generated@@11 ($generated@@42 $generated@@43 $generated@@44 ($generated@@42 $generated@@31 ($generated@@45 $generated@@43 $generated@@44) $generated@@68 $generated@@67) $generated@@1)))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@67 ($generated@@27 $generated@@66) $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@T) ) (! (= ($generated@@69 $generated@@71 ($generated@@41 $generated@@71 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@41 $generated@@71 $generated@@70))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@36 $generated@@31 $generated@@75 ($generated@@72 $generated@@73 $generated@@74))  (and ($generated@@36 $generated@@31 $generated@@75 ($generated@@37 $generated@@73 $generated@@74)) (or (not (= $generated@@75 $generated@@40)) (not true))))
 :pattern ( ($generated@@36 $generated@@31 $generated@@75 ($generated@@72 $generated@@73 $generated@@74)))
 :pattern ( ($generated@@36 $generated@@31 $generated@@75 ($generated@@37 $generated@@73 $generated@@74)))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@36 $generated@@31 $generated@@77 ($generated@@32 $generated@@76))  (and ($generated@@36 $generated@@31 $generated@@77 ($generated@@27 $generated@@76)) (or (not (= $generated@@77 $generated@@40)) (not true))))
 :pattern ( ($generated@@36 $generated@@31 $generated@@77 ($generated@@32 $generated@@76)))
 :pattern ( ($generated@@36 $generated@@31 $generated@@77 ($generated@@27 $generated@@76)))
)))
(assert (forall (($generated@@79 T@U) ) (!  (and (= ($generated@@29 ($generated@@32 $generated@@79)) $generated@@3) (= ($generated@@78 ($generated@@32 $generated@@79)) $generated@@8))
 :pattern ( ($generated@@32 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ) (!  (and (= ($generated@@29 ($generated@@27 $generated@@80)) $generated@@6) (= ($generated@@78 ($generated@@27 $generated@@80)) $generated@@8))
 :pattern ( ($generated@@27 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@83 ($generated@@72 $generated@@81 $generated@@82) $generated@@84) ($generated@@30 $generated@@31 $generated@@83 ($generated@@37 $generated@@81 $generated@@82) $generated@@84))
 :pattern ( ($generated@@30 $generated@@31 $generated@@83 ($generated@@72 $generated@@81 $generated@@82) $generated@@84))
 :pattern ( ($generated@@30 $generated@@31 $generated@@83 ($generated@@37 $generated@@81 $generated@@82) $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@36 $generated@@31 $generated@@87 ($generated@@27 $generated@@86))  (or (= $generated@@87 $generated@@40) (= ($generated@@85 $generated@@87) ($generated@@27 $generated@@86))))
 :pattern ( ($generated@@36 $generated@@31 $generated@@87 ($generated@@27 $generated@@86)))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ) (!  (=> ($generated@@30 $generated@@31 $generated@@89 ($generated@@27 $generated@@88) $generated@@90) ($generated@@30 $generated@@31 $generated@@89 ($generated@@37 $generated@@88 $generated) $generated@@90))
 :pattern ( ($generated@@30 $generated@@31 $generated@@89 ($generated@@27 $generated@@88) $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@30 $generated@@31 $generated@@93 ($generated@@37 $generated@@91 $generated@@92) $generated@@94)  (or (= $generated@@93 $generated@@40) ($generated@@15 ($generated@@41 $generated@@11 ($generated@@42 $generated@@43 $generated@@44 ($generated@@42 $generated@@31 ($generated@@45 $generated@@43 $generated@@44) $generated@@94 $generated@@93) $generated@@1)))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@93 ($generated@@37 $generated@@91 $generated@@92) $generated@@94))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@96 ($generated@@95 $generated@@97 $generated@@98)) $generated@@97)
 :pattern ( ($generated@@95 $generated@@97 $generated@@98))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ) (! (= ($generated@@99 ($generated@@95 $generated@@100 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@95 $generated@@100 $generated@@101))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@102 ($generated@@72 $generated@@103 $generated@@104)) $generated@@103)
 :pattern ( ($generated@@72 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@105 ($generated@@72 $generated@@106 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@72 $generated@@106 $generated@@107))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@108 ($generated@@37 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@37 $generated@@109 $generated@@110))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ) (! (= ($generated@@111 ($generated@@37 $generated@@112 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@37 $generated@@112 $generated@@113))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@36 $generated@@31 $generated@@116 ($generated@@37 $generated@@114 $generated@@115))  (or (= $generated@@116 $generated@@40) ($generated@@26 ($generated@@85 $generated@@116) $generated@@114 $generated@@115)))
 :pattern ( ($generated@@36 $generated@@31 $generated@@116 ($generated@@37 $generated@@114 $generated@@115)))
)))
(assert (forall (($generated@@118 T@U) ) (! (= ($generated@@117 ($generated@@32 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@32 $generated@@118))
)))
(assert (forall (($generated@@120 T@U) ) (! (= ($generated@@119 ($generated@@27 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@27 $generated@@120))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@T) ) (! (= ($generated@@41 $generated@@122 ($generated@@69 $generated@@122 $generated@@121)) $generated@@121)
 :pattern ( ($generated@@69 $generated@@122 $generated@@121))
)))
(assert  (and (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (! (= ($generated@@123 $generated@@126 $generated@@127 $generated@@128 ($generated@@125 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@132 $generated@@129) $generated@@131 $generated@@132) $generated@@129)
 :weight 0
)) (and (forall (($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@T) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ) (!  (or (= $generated@@138 $generated@@140) (= ($generated@@123 $generated@@133 $generated@@134 $generated@@135 ($generated@@125 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@138 $generated@@139 $generated@@136) $generated@@140 $generated@@141) ($generated@@123 $generated@@133 $generated@@134 $generated@@135 $generated@@137 $generated@@140 $generated@@141)))
 :weight 0
)) (forall (($generated@@142 T@T) ($generated@@143 T@T) ($generated@@144 T@T) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ) (!  (or (= $generated@@148 $generated@@150) (= ($generated@@123 $generated@@142 $generated@@143 $generated@@144 ($generated@@125 $generated@@142 $generated@@143 $generated@@144 $generated@@146 $generated@@147 $generated@@148 $generated@@145) $generated@@149 $generated@@150) ($generated@@123 $generated@@142 $generated@@143 $generated@@144 $generated@@146 $generated@@149 $generated@@150)))
 :weight 0
)))))
(assert (forall (($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 Bool) ($generated@@155 T@U) ($generated@@156 T@U) ) (! (= ($generated@@15 ($generated@@123 $generated@@31 $generated@@43 $generated@@11 ($generated@@124 $generated@@151 $generated@@152 $generated@@153 $generated@@154) $generated@@155 $generated@@156))  (=> (and (or (not (= $generated@@155 $generated@@151)) (not true)) ($generated@@15 ($generated@@41 $generated@@11 ($generated@@42 $generated@@43 $generated@@44 ($generated@@42 $generated@@31 ($generated@@45 $generated@@43 $generated@@44) $generated@@152 $generated@@155) $generated@@153)))) $generated@@154))
 :pattern ( ($generated@@123 $generated@@31 $generated@@43 $generated@@11 ($generated@@124 $generated@@151 $generated@@152 $generated@@153 $generated@@154) $generated@@155 $generated@@156))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (!  (and (= ($generated@@29 ($generated@@95 $generated@@157 $generated@@158)) $generated@@2) (= ($generated@@78 ($generated@@95 $generated@@157 $generated@@158)) $generated@@7))
 :pattern ( ($generated@@95 $generated@@157 $generated@@158))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (!  (and (= ($generated@@29 ($generated@@72 $generated@@159 $generated@@160)) $generated@@4) (= ($generated@@78 ($generated@@72 $generated@@159 $generated@@160)) $generated@@9))
 :pattern ( ($generated@@72 $generated@@159 $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (and (= ($generated@@29 ($generated@@37 $generated@@161 $generated@@162)) $generated@@5) (= ($generated@@78 ($generated@@37 $generated@@161 $generated@@162)) $generated@@9))
 :pattern ( ($generated@@37 $generated@@161 $generated@@162))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (! ($generated@@30 $generated@@12 $generated@@164 $generated $generated@@163)
 :pattern ( ($generated@@30 $generated@@12 $generated@@164 $generated $generated@@163))
)))
(assert (forall (($generated@@165 T@U) ) (! ($generated@@36 $generated@@12 $generated@@165 $generated)
 :pattern ( ($generated@@36 $generated@@12 $generated@@165 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 () T@U)
(declare-fun $generated@@169 () T@U)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 (T@U) Int)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 (T@U) Bool)
(declare-fun $generated@@176 (T@U) Bool)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@T)
(declare-fun $generated@@179 () Int)
(assert (= ($generated@@10 $generated@@178) 7))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@180  (=> (= $generated@@166 $generated@@167) (=> (and (= $generated@@168 $generated) (= $generated@@169 $generated@@170)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= ($generated@@171 $generated@@172) ($generated@@171 $generated@@172))) (=> (<= ($generated@@171 $generated@@172) ($generated@@171 $generated@@172)) (=> (and (= $generated@@173 ($generated@@124 $generated@@40 $generated@@174 $generated@@1 false)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@181 T@U) ($generated@@182 T@U) ) true))))))))
(let (($generated@@183  (=> (and ($generated@@175 $generated@@174) ($generated@@176 $generated@@174)) (=> (and (and (and (or (not (= $generated@@177 $generated@@40)) (not true)) (and ($generated@@36 $generated@@31 $generated@@177 ($generated@@32 $generated@@167)) ($generated@@30 $generated@@31 $generated@@177 ($generated@@32 $generated@@167) $generated@@174))) ($generated@@36 $generated@@178 $generated@@172 ($generated@@95 $generated@@167 $generated@@170))) (and (= 0 $generated@@179) (= (ControlFlow 0 4) 2))) $generated@@180))))
$generated@@183)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
