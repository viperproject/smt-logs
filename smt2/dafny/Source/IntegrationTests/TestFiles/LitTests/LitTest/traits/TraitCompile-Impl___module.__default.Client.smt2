(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 () T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 (T@T T@T) T@T)
(declare-fun $generated@@34 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@56 (T@U T@U) Bool)
(declare-fun $generated@@60 (Int) Int)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 () Int)
(declare-fun $generated@@66 (T@U Int Int) Int)
(declare-fun $generated@@67 (T@U Int Int) Bool)
(declare-fun $generated@@68 (T@T T@U T@U) Bool)
(declare-fun $generated@@72 (T@T T@U) T@U)
(declare-fun $generated@@75 (T@U T@U T@U) Bool)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@103 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@135 (T@U) T@U)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (= ($generated@@5 $generated@@23) 3))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@26 $generated@@24 $generated@@27) ($generated@@22 $generated@@23 $generated@@26 $generated@@25 $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 $generated@@26 $generated@@24 $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 $generated@@26 $generated@@25 $generated@@27))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@30 $generated@@37 $generated@@38 ($generated@@34 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@41) $generated@@39)
 :weight 0
)) (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (or (= $generated@@46 $generated@@47) (= ($generated@@30 $generated@@42 $generated@@43 ($generated@@34 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@47) ($generated@@30 $generated@@42 $generated@@43 $generated@@45 $generated@@47)))
 :weight 0
))) (= ($generated@@5 $generated@@31) 4)) (= ($generated@@5 $generated@@32) 5)) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (= ($generated@@5 ($generated@@33 $generated@@48 $generated@@49)) 6))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@35 ($generated@@33 $generated@@50 $generated@@51)) $generated@@50)
 :pattern ( ($generated@@33 $generated@@50 $generated@@51))
))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@36 ($generated@@33 $generated@@52 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@33 $generated@@52 $generated@@53))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (! (= ($generated@@22 $generated@@23 $generated@@54 $generated@@25 $generated@@55)  (or (= $generated@@54 $generated@@28) ($generated@@10 ($generated@@29 $generated@@6 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@55 $generated@@54) $generated@@1)))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@54 $generated@@25 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (!  (=> ($generated@@56 $generated@@57 $generated@@58) (forall (($generated@@59 T@U) ) (!  (=> ($generated@@10 ($generated@@29 $generated@@6 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@57 $generated@@59) $generated@@1))) ($generated@@10 ($generated@@29 $generated@@6 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@58 $generated@@59) $generated@@1))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@58 $generated@@59) $generated@@1))
)))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@61 Int) ) (! (= ($generated@@60 $generated@@61) $generated@@61)
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 $generated@@63) $generated@@63)
 :pattern ( ($generated@@62 $generated@@64 $generated@@63))
)))
(assert  (=> (<= 0 $generated@@65) (forall (($generated@@69 T@U) ($generated@@70 Int) ($generated@@71 Int) ) (!  (=> (or ($generated@@67 ($generated@@62 $generated@@23 $generated@@69) ($generated@@60 $generated@@70) ($generated@@60 $generated@@71)) (and (< 0 $generated@@65) (and (and (or (not (= $generated@@69 $generated@@28)) (not true)) ($generated@@68 $generated@@23 $generated@@69 $generated@@24)) ($generated@@10 ($generated@@62 $generated@@6 ($generated@@9 (> $generated@@70 $generated@@71))))))) (= ($generated@@66 ($generated@@62 $generated@@23 $generated@@69) ($generated@@60 $generated@@70) ($generated@@60 $generated@@71)) ($generated@@60 (+ $generated@@70 $generated@@71))))
 :weight 3
 :pattern ( ($generated@@66 ($generated@@62 $generated@@23 $generated@@69) ($generated@@60 $generated@@70) ($generated@@60 $generated@@71)))
))))
(assert (forall (($generated@@73 T@U) ($generated@@74 T@T) ) (! (= ($generated@@72 $generated@@74 ($generated@@29 $generated@@74 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@29 $generated@@74 $generated@@73))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@T) ) (! (= ($generated@@75 ($generated@@72 $generated@@79 $generated@@76) $generated@@77 $generated@@78) ($generated@@22 $generated@@79 $generated@@76 $generated@@77 $generated@@78))
 :pattern ( ($generated@@75 ($generated@@72 $generated@@79 $generated@@76) $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (=> ($generated@@56 $generated@@80 $generated@@81) (=> ($generated@@75 $generated@@82 $generated@@83 $generated@@80) ($generated@@75 $generated@@82 $generated@@83 $generated@@81)))
 :pattern ( ($generated@@56 $generated@@80 $generated@@81) ($generated@@75 $generated@@82 $generated@@83 $generated@@80))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@T) ) (!  (=> ($generated@@56 $generated@@84 $generated@@85) (=> ($generated@@22 $generated@@88 $generated@@86 $generated@@87 $generated@@84) ($generated@@22 $generated@@88 $generated@@86 $generated@@87 $generated@@85)))
 :pattern ( ($generated@@56 $generated@@84 $generated@@85) ($generated@@22 $generated@@88 $generated@@86 $generated@@87 $generated@@84))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@68 $generated@@23 $generated@@89 $generated@@24)  (and ($generated@@68 $generated@@23 $generated@@89 $generated@@25) (or (not (= $generated@@89 $generated@@28)) (not true))))
 :pattern ( ($generated@@68 $generated@@23 $generated@@89 $generated@@24))
 :pattern ( ($generated@@68 $generated@@23 $generated@@89 $generated@@25))
)))
(assert  (=> (<= 0 $generated@@65) (forall (($generated@@90 T@U) ($generated@@91 Int) ($generated@@92 Int) ) (!  (=> (or ($generated@@67 $generated@@90 ($generated@@60 $generated@@91) ($generated@@60 $generated@@92)) (and (< 0 $generated@@65) (and (and (or (not (= $generated@@90 $generated@@28)) (not true)) ($generated@@68 $generated@@23 $generated@@90 $generated@@24)) ($generated@@10 ($generated@@62 $generated@@6 ($generated@@9 (> $generated@@91 $generated@@92))))))) (= ($generated@@66 $generated@@90 ($generated@@60 $generated@@91) ($generated@@60 $generated@@92)) ($generated@@60 (+ $generated@@91 $generated@@92))))
 :weight 3
 :pattern ( ($generated@@66 $generated@@90 ($generated@@60 $generated@@91) ($generated@@60 $generated@@92)))
))))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (=> (or (not (= $generated@@93 $generated@@95)) (not true)) (=> (and ($generated@@56 $generated@@93 $generated@@94) ($generated@@56 $generated@@94 $generated@@95)) ($generated@@56 $generated@@93 $generated@@95)))
 :pattern ( ($generated@@56 $generated@@93 $generated@@94) ($generated@@56 $generated@@94 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@29 $generated@@97 ($generated@@72 $generated@@97 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@72 $generated@@97 $generated@@96))
)))
(assert  (=> (<= 0 $generated@@65) (forall (($generated@@98 T@U) ($generated@@99 Int) ($generated@@100 Int) ) (!  (=> (or ($generated@@67 $generated@@98 $generated@@99 $generated@@100) (and (< 0 $generated@@65) (and (and (or (not (= $generated@@98 $generated@@28)) (not true)) ($generated@@68 $generated@@23 $generated@@98 $generated@@24)) (> $generated@@99 $generated@@100)))) (= ($generated@@66 $generated@@98 $generated@@99 $generated@@100) (+ $generated@@99 $generated@@100)))
 :pattern ( ($generated@@66 $generated@@98 $generated@@99 $generated@@100))
))))
(assert  (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@101 $generated@@104 $generated@@105 $generated@@106 ($generated@@103 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@109 $generated@@110) $generated@@107)
 :weight 0
)) (and (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@101 $generated@@111 $generated@@112 $generated@@113 ($generated@@103 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@116 $generated@@117 $generated@@114) $generated@@118 $generated@@119) ($generated@@101 $generated@@111 $generated@@112 $generated@@113 $generated@@115 $generated@@118 $generated@@119)))
 :weight 0
)) (forall (($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@126 $generated@@128) (= ($generated@@101 $generated@@120 $generated@@121 $generated@@122 ($generated@@103 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@126 $generated@@123) $generated@@127 $generated@@128) ($generated@@101 $generated@@120 $generated@@121 $generated@@122 $generated@@124 $generated@@127 $generated@@128)))
 :weight 0
)))))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 Bool) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@10 ($generated@@101 $generated@@23 $generated@@31 $generated@@6 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))  (=> (and (or (not (= $generated@@133 $generated@@129)) (not true)) ($generated@@10 ($generated@@29 $generated@@6 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@130 $generated@@133) $generated@@131)))) $generated@@132))
 :pattern ( ($generated@@101 $generated@@23 $generated@@31 $generated@@6 ($generated@@102 $generated@@129 $generated@@130 $generated@@131 $generated@@132) $generated@@133 $generated@@134))
)))
(assert (= ($generated@@21 $generated@@24) $generated@@2))
(assert (= ($generated@@135 $generated@@24) $generated@@4))
(assert (= ($generated@@21 $generated@@25) $generated@@3))
(assert (= ($generated@@135 $generated@@25) $generated@@4))
(assert (forall (($generated@@138 T@U) ) (! (= ($generated@@68 $generated@@23 $generated@@138 $generated@@25)  (or (= $generated@@138 $generated@@28) ($generated@@136 ($generated@@137 $generated@@138))))
 :pattern ( ($generated@@68 $generated@@23 $generated@@138 $generated@@25))
)))
(assert (forall (($generated@@139 Int) ) (! (= ($generated@@72 $generated@@7 ($generated@@11 ($generated@@60 $generated@@139))) ($generated@@62 $generated@@32 ($generated@@72 $generated@@7 ($generated@@11 $generated@@139))))
 :pattern ( ($generated@@72 $generated@@7 ($generated@@11 ($generated@@60 $generated@@139))))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@T) ) (! (= ($generated@@72 $generated@@141 ($generated@@62 $generated@@141 $generated@@140)) ($generated@@62 $generated@@32 ($generated@@72 $generated@@141 $generated@@140)))
 :pattern ( ($generated@@72 $generated@@141 ($generated@@62 $generated@@141 $generated@@140)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (! ($generated@@22 $generated@@7 $generated@@143 $generated $generated@@142)
 :pattern ( ($generated@@22 $generated@@7 $generated@@143 $generated $generated@@142))
)))
(assert (forall (($generated@@144 T@U) ) (! ($generated@@68 $generated@@7 $generated@@144 $generated)
 :pattern ( ($generated@@68 $generated@@7 $generated@@144 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@155  (=> (= $generated@@145 ($generated@@102 $generated@@28 $generated@@146 $generated@@1 false)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (not (= $generated@@147 $generated@@28)) (not true))) (=> (or (not (= $generated@@147 $generated@@28)) (not true)) (=> ($generated@@75 ($generated@@72 $generated@@23 $generated@@147) $generated@@25 $generated@@146) (=> (and (and (= $generated@@148 ($generated@@60 10)) ($generated@@22 $generated@@7 ($generated@@11 $generated@@148) $generated $generated@@146)) (and (= $generated@@149 ($generated@@60 2)) ($generated@@22 $generated@@7 ($generated@@11 $generated@@149) $generated $generated@@146))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (> $generated@@148 $generated@@149)) (=> (and (and (> $generated@@148 $generated@@149) ($generated@@67 $generated@@147 ($generated@@60 10) ($generated@@60 2))) (and ($generated@@67 $generated@@147 ($generated@@60 10) ($generated@@60 2)) (= $generated@@150 ($generated@@66 $generated@@147 ($generated@@60 10) ($generated@@60 2))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= $generated@@147 $generated@@28)) (not true))) (=> (or (not (= $generated@@147 $generated@@28)) (not true)) (=> (= $generated@@151 ($generated@@60 400)) (=> (and (and (and ($generated@@152 $generated@@153) ($generated@@154 $generated@@153)) (forall (($generated@@156 T@U) ) (!  (=> (and (or (not (= $generated@@156 $generated@@28)) (not true)) ($generated@@10 ($generated@@29 $generated@@6 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@146 $generated@@156) $generated@@1)))) (= ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@153 $generated@@156) ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@146 $generated@@156)))
 :pattern ( ($generated@@30 $generated@@23 ($generated@@33 $generated@@31 $generated@@32) $generated@@153 $generated@@156))
))) (and ($generated@@56 $generated@@146 $generated@@153) (= (ControlFlow 0 2) (- 0 1)))) (or (not (= $generated@@147 $generated@@28)) (not true)))))))))))))))
(let (($generated@@157  (=> (and ($generated@@152 $generated@@146) ($generated@@154 $generated@@146)) (=> (and (and ($generated@@68 $generated@@23 $generated@@147 $generated@@24) ($generated@@22 $generated@@23 $generated@@147 $generated@@24 $generated@@146)) (and (= 2 $generated@@65) (= (ControlFlow 0 6) 2))) $generated@@155))))
$generated@@157)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
