(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 (T@U) T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T) T@T)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@79 (T@U T@U) Bool)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@91 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@92 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@93 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@0))
(assert (= ($generated@@8 $generated@@26) 3))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@30 ($generated@@27 $generated@@29) $generated@@31) ($generated@@25 $generated@@26 $generated@@30 ($generated@@28 $generated@@29) $generated@@31))
 :pattern ( ($generated@@25 $generated@@26 $generated@@30 ($generated@@27 $generated@@29) $generated@@31))
 :pattern ( ($generated@@25 $generated@@26 $generated@@30 ($generated@@28 $generated@@29) $generated@@31))
)))
(assert (forall (($generated@@36 T@U) ) (! (= ($generated@@32 $generated@@26 $generated@@36 $generated@@33)  (or (= $generated@@36 $generated@@34) (= ($generated@@35 $generated@@36) $generated@@33)))
 :pattern ( ($generated@@32 $generated@@26 $generated@@36 $generated@@33))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@38 $generated@@37 $generated@@39) ($generated@@25 $generated@@26 $generated@@38 $generated@@33 $generated@@39))
 :pattern ( ($generated@@25 $generated@@26 $generated@@38 $generated@@37 $generated@@39))
 :pattern ( ($generated@@25 $generated@@26 $generated@@38 $generated@@33 $generated@@39))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@41 $generated@@48 $generated@@49 ($generated@@45 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@50) $generated@@52) $generated@@50)
 :weight 0
)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (or (= $generated@@57 $generated@@58) (= ($generated@@41 $generated@@53 $generated@@54 ($generated@@45 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@58) ($generated@@41 $generated@@53 $generated@@54 $generated@@56 $generated@@58)))
 :weight 0
))) (= ($generated@@8 $generated@@42) 4)) (= ($generated@@8 $generated@@43) 5)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (= ($generated@@8 ($generated@@44 $generated@@59 $generated@@60)) 6))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@46 ($generated@@44 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@44 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@63 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@44 $generated@@63 $generated@@64))
))))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@66 ($generated@@28 $generated@@65) $generated@@67)  (or (= $generated@@66 $generated@@34) ($generated@@13 ($generated@@40 $generated@@9 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@26 ($generated@@44 $generated@@42 $generated@@43) $generated@@67 $generated@@66) $generated@@1)))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@66 ($generated@@28 $generated@@65) $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@25 $generated@@26 $generated@@68 $generated@@33 $generated@@69)  (or (= $generated@@68 $generated@@34) ($generated@@13 ($generated@@40 $generated@@9 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@26 ($generated@@44 $generated@@42 $generated@@43) $generated@@69 $generated@@68) $generated@@1)))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@68 $generated@@33 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@32 $generated@@26 $generated@@70 $generated@@33) ($generated@@32 $generated@@26 $generated@@70 ($generated@@28 $generated)))
 :pattern ( ($generated@@32 $generated@@26 $generated@@70 $generated@@33))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@71 $generated@@73 ($generated@@40 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@40 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@32 $generated@@26 $generated@@75 ($generated@@27 $generated@@74))  (and ($generated@@32 $generated@@26 $generated@@75 ($generated@@28 $generated@@74)) (or (not (= $generated@@75 $generated@@34)) (not true))))
 :pattern ( ($generated@@32 $generated@@26 $generated@@75 ($generated@@27 $generated@@74)))
 :pattern ( ($generated@@32 $generated@@26 $generated@@75 ($generated@@28 $generated@@74)))
)))
(assert (forall (($generated@@77 T@U) ) (!  (and (= ($generated@@24 ($generated@@28 $generated@@77)) $generated@@3) (= ($generated@@76 ($generated@@28 $generated@@77)) $generated@@7))
 :pattern ( ($generated@@28 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (!  (and (= ($generated@@24 ($generated@@27 $generated@@78)) $generated@@4) (= ($generated@@76 ($generated@@27 $generated@@78)) $generated@@7))
 :pattern ( ($generated@@27 $generated@@78))
)))
(assert ($generated@@79 $generated@@33 $generated))
(assert (forall (($generated@@80 T@U) ) (! (= ($generated@@32 $generated@@26 $generated@@80 $generated@@37)  (and ($generated@@32 $generated@@26 $generated@@80 $generated@@33) (or (not (= $generated@@80 $generated@@34)) (not true))))
 :pattern ( ($generated@@32 $generated@@26 $generated@@80 $generated@@37))
 :pattern ( ($generated@@32 $generated@@26 $generated@@80 $generated@@33))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@81 $generated@@33 $generated@@82) ($generated@@25 $generated@@26 $generated@@81 ($generated@@28 $generated) $generated@@82))
 :pattern ( ($generated@@25 $generated@@26 $generated@@81 $generated@@33 $generated@@82))
)))
(assert (forall (($generated@@84 T@U) ) (! (= ($generated@@83 ($generated@@28 $generated@@84)) $generated@@84)
 :pattern ( ($generated@@28 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@85 ($generated@@27 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@27 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@40 $generated@@88 ($generated@@71 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@71 $generated@@88 $generated@@87))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@32 $generated@@26 $generated@@90 ($generated@@28 $generated@@89))  (or (= $generated@@90 $generated@@34) ($generated@@79 ($generated@@35 $generated@@90) $generated@@89)))
 :pattern ( ($generated@@32 $generated@@26 $generated@@90 ($generated@@28 $generated@@89)))
)))
(assert  (and (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@91 $generated@@94 $generated@@95 $generated@@96 ($generated@@93 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@99 $generated@@100) $generated@@97)
 :weight 0
)) (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ) (!  (or (= $generated@@106 $generated@@108) (= ($generated@@91 $generated@@101 $generated@@102 $generated@@103 ($generated@@93 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@108 $generated@@109) ($generated@@91 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@108 $generated@@109)))
 :weight 0
)) (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@116 $generated@@118) (= ($generated@@91 $generated@@110 $generated@@111 $generated@@112 ($generated@@93 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@117 $generated@@118) ($generated@@91 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@117 $generated@@118)))
 :weight 0
)))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@13 ($generated@@91 $generated@@26 $generated@@42 $generated@@9 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@13 ($generated@@40 $generated@@9 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@26 ($generated@@44 $generated@@42 $generated@@43) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@91 $generated@@26 $generated@@42 $generated@@9 ($generated@@92 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (= ($generated@@24 $generated@@37) $generated@@2))
(assert (= ($generated@@76 $generated@@37) $generated@@6))
(assert (= ($generated@@24 $generated@@33) $generated@@5))
(assert (= ($generated@@76 $generated@@33) $generated@@6))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (! ($generated@@25 $generated@@10 $generated@@126 $generated $generated@@125)
 :pattern ( ($generated@@25 $generated@@10 $generated@@126 $generated $generated@@125))
)))
(assert (forall (($generated@@127 T@U) ) (! ($generated@@32 $generated@@10 $generated@@127 $generated)
 :pattern ( ($generated@@32 $generated@@10 $generated@@127 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () Bool)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@134 (T@U) Bool)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@137  (=> (= $generated@@128 ($generated@@92 $generated@@34 $generated@@129 $generated@@1 false)) (=> (and (=> $generated@@130 (and ($generated@@32 $generated@@26 $generated@@131 $generated@@37) ($generated@@25 $generated@@26 $generated@@131 $generated@@37 $generated@@129))) (= (ControlFlow 0 2) (- 0 1))) ($generated@@32 $generated@@26 $generated@@132 $generated@@37)))))
(let (($generated@@138  (=> (and (and (and ($generated@@133 $generated@@129) ($generated@@134 $generated@@129)) (and ($generated@@32 $generated@@26 $generated@@132 $generated@@33) ($generated@@25 $generated@@26 $generated@@132 $generated@@33 $generated@@129))) (and (and (=> $generated@@130 (and ($generated@@32 $generated@@26 $generated@@135 $generated@@37) ($generated@@25 $generated@@26 $generated@@135 $generated@@37 $generated@@129))) true) (and (= 1 $generated@@136) (= (ControlFlow 0 3) 2)))) $generated@@137)))
$generated@@138)))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
