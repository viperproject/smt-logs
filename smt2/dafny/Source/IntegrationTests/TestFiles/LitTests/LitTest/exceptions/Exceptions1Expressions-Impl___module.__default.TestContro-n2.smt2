(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.NatOutcome () T@U)
(declare-fun Tagclass._module.VoidOutcome () T@U)
(declare-fun |##_module.VoidOutcome.VoidSuccess| () T@U)
(declare-fun |##_module.VoidOutcome.VoidFailure| () T@U)
(declare-fun |##_module.NatOutcome.NatSuccess| () T@U)
(declare-fun |##_module.NatOutcome.NatFailure| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$NatOutcome () T@U)
(declare-fun tytagFamily$VoidOutcome () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#_module.VoidOutcome.VoidFailure| (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#_module.NatOutcome.NatFailure| (T@U) T@U)
(declare-fun _module.VoidOutcome.PropagateFailure (T@U) T@U)
(declare-fun |_module.VoidOutcome.PropagateFailure#canCall| (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.VoidOutcome () T@U)
(declare-fun _module.VoidOutcome.IsFailure (T@U) Bool)
(declare-fun _module.NatOutcome.PropagateFailure (T@U) T@U)
(declare-fun |_module.NatOutcome.PropagateFailure#canCall| (T@U) Bool)
(declare-fun Tclass._module.NatOutcome () T@U)
(declare-fun _module.NatOutcome.IsFailure (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.TestControlFlowCase__Void (Bool Bool Bool) T@U)
(declare-fun |_module.__default.TestControlFlowCase__Void#canCall| (Bool Bool Bool) Bool)
(declare-fun |_module.__default.FailIf#canCall| (Bool) Bool)
(declare-fun _module.__default.FailIf (Bool) T@U)
(declare-fun |_module.VoidOutcome.IsFailure#canCall| (T@U) Bool)
(declare-fun |#_module.VoidOutcome.VoidSuccess| () T@U)
(declare-fun _module.NatOutcome.Extract (T@U) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |_module.NatOutcome.Extract#canCall| (T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun _module.NatOutcome.value (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.VoidOutcome.VoidFailure_q (T@U) Bool)
(declare-fun |_module.NatOutcome.IsFailure#canCall| (T@U) Bool)
(declare-fun _module.NatOutcome.NatFailure_q (T@U) Bool)
(declare-fun _module.__default.Switch (Bool Int) T@U)
(declare-fun |_module.__default.Switch#canCall| (Bool Int) Bool)
(declare-fun |#_module.NatOutcome.NatSuccess| (Int) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun _module.VoidOutcome.VoidSuccess_q (T@U) Bool)
(declare-fun _module.NatOutcome.NatSuccess_q (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun _module.__default.TestControlFlowCase__Nat (Bool Bool Bool) T@U)
(declare-fun |_module.__default.TestControlFlowCase__Nat#canCall| (Bool Bool Bool) Bool)
(declare-fun Div (Int Int) Int)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun _module.VoidOutcome.error (T@U) T@U)
(declare-fun _module.NatOutcome.error (T@U) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun Mod (Int Int) Int)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TagBool TagChar TagSeq alloc Tagclass._System.nat Tagclass._module.NatOutcome Tagclass._module.VoidOutcome |##_module.VoidOutcome.VoidSuccess| |##_module.VoidOutcome.VoidFailure| |##_module.NatOutcome.NatSuccess| |##_module.NatOutcome.NatFailure| tytagFamily$nat tytagFamily$NatOutcome tytagFamily$VoidOutcome)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#9#0#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#9#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#9#0#0| i))) (DtRank (|#_module.VoidOutcome.VoidFailure| |a#9#0#0|))))
 :pattern ( (|Seq#Index| |a#9#0#0| i) (|#_module.VoidOutcome.VoidFailure| |a#9#0#0|))
)))
(assert (forall ((|a#10#0#0| T@U) (i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| |a#10#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#10#0#0| i@@0))) (DtRank (|#_module.NatOutcome.NatFailure| |a#10#0#0|))))
 :pattern ( (|Seq#Index| |a#10#0#0| i@@0) (|#_module.NatOutcome.NatFailure| |a#10#0#0|))
)))
(assert (forall ((this T@U) ) (!  (=> (or (|_module.VoidOutcome.PropagateFailure#canCall| this) (and ($Is DatatypeTypeType this Tclass._module.VoidOutcome) (_module.VoidOutcome.IsFailure this))) ($Is DatatypeTypeType (_module.VoidOutcome.PropagateFailure this) Tclass._module.VoidOutcome))
 :pattern ( (_module.VoidOutcome.PropagateFailure this))
)))
(assert (forall ((this@@0 T@U) ) (!  (=> (or (|_module.NatOutcome.PropagateFailure#canCall| this@@0) (and ($Is DatatypeTypeType this@@0 Tclass._module.NatOutcome) (_module.NatOutcome.IsFailure this@@0))) ($Is DatatypeTypeType (_module.NatOutcome.PropagateFailure this@@0) Tclass._module.NatOutcome))
 :pattern ( (_module.NatOutcome.PropagateFailure this@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|switch1#0| Bool) (|switch2#0| Bool) (|switch3#0| Bool) ) (!  (=> (or (|_module.__default.TestControlFlowCase__Void#canCall| |switch1#0| |switch2#0| |switch3#0|) (< 2 $FunctionContextHeight)) (and (and (|_module.__default.FailIf#canCall| |switch1#0|) (let ((|valueOrError0#0| (_module.__default.FailIf |switch1#0|)))
 (and (and (|_module.VoidOutcome.IsFailure#canCall| |valueOrError0#0|) (=> (_module.VoidOutcome.IsFailure |valueOrError0#0|) (|_module.VoidOutcome.PropagateFailure#canCall| |valueOrError0#0|))) (=> (not (_module.VoidOutcome.IsFailure |valueOrError0#0|)) (and (|_module.__default.FailIf#canCall| |switch2#0|) (let ((|valueOrError1#0| (_module.__default.FailIf |switch2#0|)))
 (and (and (|_module.VoidOutcome.IsFailure#canCall| |valueOrError1#0|) (=> (_module.VoidOutcome.IsFailure |valueOrError1#0|) (|_module.VoidOutcome.PropagateFailure#canCall| |valueOrError1#0|))) (=> (not (_module.VoidOutcome.IsFailure |valueOrError1#0|)) (and (|_module.__default.FailIf#canCall| |switch3#0|) (let ((|valueOrError2#0| (_module.__default.FailIf |switch3#0|)))
 (and (|_module.VoidOutcome.IsFailure#canCall| |valueOrError2#0|) (=> (_module.VoidOutcome.IsFailure |valueOrError2#0|) (|_module.VoidOutcome.PropagateFailure#canCall| |valueOrError2#0|))))))))))))) (= (_module.__default.TestControlFlowCase__Void |switch1#0| |switch2#0| |switch3#0|) (let ((|valueOrError0#0@@0| (_module.__default.FailIf |switch1#0|)))
(ite (_module.VoidOutcome.IsFailure |valueOrError0#0@@0|) (_module.VoidOutcome.PropagateFailure |valueOrError0#0@@0|) (let ((|valueOrError1#0@@0| (_module.__default.FailIf |switch2#0|)))
(ite (_module.VoidOutcome.IsFailure |valueOrError1#0@@0|) (_module.VoidOutcome.PropagateFailure |valueOrError1#0@@0|) (let ((|valueOrError2#0@@0| (_module.__default.FailIf |switch3#0|)))
(ite (_module.VoidOutcome.IsFailure |valueOrError2#0@@0|) (_module.VoidOutcome.PropagateFailure |valueOrError2#0@@0|) |#_module.VoidOutcome.VoidSuccess|)))))))))
 :pattern ( (_module.__default.TestControlFlowCase__Void |switch1#0| |switch2#0| |switch3#0|))
))))
(assert (forall ((this@@1 T@U) ) (!  (=> (or (|_module.NatOutcome.Extract#canCall| (Lit DatatypeTypeType this@@1)) (and ($Is DatatypeTypeType this@@1 Tclass._module.NatOutcome) (not (U_2_bool (Lit boolType (bool_2_U (_module.NatOutcome.IsFailure (Lit DatatypeTypeType this@@1)))))))) (= (_module.NatOutcome.Extract (Lit DatatypeTypeType this@@1)) (LitInt (_module.NatOutcome.value (Lit DatatypeTypeType this@@1)))))
 :weight 3
 :pattern ( (_module.NatOutcome.Extract (Lit DatatypeTypeType this@@1)))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.VoidOutcome.VoidSuccess|) |##_module.VoidOutcome.VoidSuccess|))
(assert ($Is DatatypeTypeType |#_module.VoidOutcome.VoidSuccess| Tclass._module.VoidOutcome))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor SeqType) 8))
(assert (forall ((s T@U) (bx T@U) (t T@U) ) (!  (=> (and ($Is SeqType s (TSeq t)) ($IsBox bx t)) ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
)))
(assert (forall ((this@@2 T@U) ) (!  (=> (or (|_module.VoidOutcome.IsFailure#canCall| (Lit DatatypeTypeType this@@2)) ($Is DatatypeTypeType this@@2 Tclass._module.VoidOutcome)) (= (_module.VoidOutcome.IsFailure (Lit DatatypeTypeType this@@2)) (U_2_bool (Lit boolType (bool_2_U (_module.VoidOutcome.VoidFailure_q (Lit DatatypeTypeType this@@2)))))))
 :weight 3
 :pattern ( (_module.VoidOutcome.IsFailure (Lit DatatypeTypeType this@@2)))
)))
(assert (forall ((this@@3 T@U) ) (!  (=> (or (|_module.NatOutcome.IsFailure#canCall| (Lit DatatypeTypeType this@@3)) ($Is DatatypeTypeType this@@3 Tclass._module.NatOutcome)) (= (_module.NatOutcome.IsFailure (Lit DatatypeTypeType this@@3)) (U_2_bool (Lit boolType (bool_2_U (_module.NatOutcome.NatFailure_q (Lit DatatypeTypeType this@@3)))))))
 :weight 3
 :pattern ( (_module.NatOutcome.IsFailure (Lit DatatypeTypeType this@@3)))
)))
(assert (= (Ctor charType) 9))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0| Bool) (|v#0| Int) ) (!  (=> (or (|_module.__default.Switch#canCall| |b#0| |v#0|) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |v#0|))) (= (_module.__default.Switch |b#0| |v#0|) (ite |b#0| (|#_module.NatOutcome.NatSuccess| |v#0|) (|#_module.NatOutcome.NatFailure| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 98))) ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 117))) ($Box charType (|char#FromInt| 99))) ($Box charType (|char#FromInt| 107))))))))
 :pattern ( (_module.__default.Switch |b#0| |v#0|))
))))
(assert (forall ((d T@U) ) (! (= (_module.VoidOutcome.VoidSuccess_q d) (= (DatatypeCtorId d) |##_module.VoidOutcome.VoidSuccess|))
 :pattern ( (_module.VoidOutcome.VoidSuccess_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.VoidOutcome.VoidFailure_q d@@0) (= (DatatypeCtorId d@@0) |##_module.VoidOutcome.VoidFailure|))
 :pattern ( (_module.VoidOutcome.VoidFailure_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.NatOutcome.NatSuccess_q d@@1) (= (DatatypeCtorId d@@1) |##_module.NatOutcome.NatSuccess|))
 :pattern ( (_module.NatOutcome.NatSuccess_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.NatOutcome.NatFailure_q d@@2) (= (DatatypeCtorId d@@2) |##_module.NatOutcome.NatFailure|))
 :pattern ( (_module.NatOutcome.NatFailure_q d@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((this@@4 T@U) ) (!  (=> (or (|_module.VoidOutcome.PropagateFailure#canCall| (Lit DatatypeTypeType this@@4)) (and ($Is DatatypeTypeType this@@4 Tclass._module.VoidOutcome) (U_2_bool (Lit boolType (bool_2_U (_module.VoidOutcome.IsFailure (Lit DatatypeTypeType this@@4))))))) (= (_module.VoidOutcome.PropagateFailure (Lit DatatypeTypeType this@@4)) (Lit DatatypeTypeType this@@4)))
 :weight 3
 :pattern ( (_module.VoidOutcome.PropagateFailure (Lit DatatypeTypeType this@@4)))
)))
(assert (forall ((this@@5 T@U) ) (!  (=> (or (|_module.NatOutcome.PropagateFailure#canCall| (Lit DatatypeTypeType this@@5)) (and ($Is DatatypeTypeType this@@5 Tclass._module.NatOutcome) (U_2_bool (Lit boolType (bool_2_U (_module.NatOutcome.IsFailure (Lit DatatypeTypeType this@@5))))))) (= (_module.NatOutcome.PropagateFailure (Lit DatatypeTypeType this@@5)) (Lit DatatypeTypeType this@@5)))
 :weight 3
 :pattern ( (_module.NatOutcome.PropagateFailure (Lit DatatypeTypeType this@@5)))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.VoidOutcome.VoidSuccess_q d@@3) (= d@@3 |#_module.VoidOutcome.VoidSuccess|))
 :pattern ( (_module.VoidOutcome.VoidSuccess_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.VoidOutcome.VoidFailure_q d@@4) (exists ((|a#5#0#0| T@U) ) (= d@@4 (|#_module.VoidOutcome.VoidFailure| |a#5#0#0|))))
 :pattern ( (_module.VoidOutcome.VoidFailure_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (_module.NatOutcome.NatSuccess_q d@@5) (exists ((|a#1#0#0| Int) ) (= d@@5 (|#_module.NatOutcome.NatSuccess| |a#1#0#0|))))
 :pattern ( (_module.NatOutcome.NatSuccess_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (_module.NatOutcome.NatFailure_q d@@6) (exists ((|a#6#0#0| T@U) ) (= d@@6 (|#_module.NatOutcome.NatFailure| |a#6#0#0|))))
 :pattern ( (_module.NatOutcome.NatFailure_q d@@6))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall ((s@@0 T@U) (v T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@0 v)) (+ 1 (|Seq#Length| s@@0)))
 :pattern ( (|Seq#Build| s@@0 v))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@0 h@@0) ($IsAlloc T@@1 v@@0 t@@0 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@0 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@1 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@1 h@@1) ($IsAllocBox bx@@0 t@@1 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@1 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@2 h@@2) ($IsAlloc T@@2 v@@1 t@@2 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@2 h@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|switch1#0@@0| Bool) (|switch2#0@@0| Bool) (|switch3#0@@0| Bool) ) (!  (=> (or (|_module.__default.TestControlFlowCase__Nat#canCall| |switch1#0@@0| |switch2#0@@0| |switch3#0@@0|) (< 2 $FunctionContextHeight)) ($Is DatatypeTypeType (_module.__default.TestControlFlowCase__Nat |switch1#0@@0| |switch2#0@@0| |switch3#0@@0|) Tclass._module.NatOutcome))
 :pattern ( (_module.__default.TestControlFlowCase__Nat |switch1#0@@0| |switch2#0@@0| |switch3#0@@0|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|switch1#0@@1| Bool) (|switch2#0@@1| Bool) (|switch3#0@@1| Bool) ) (!  (=> (or (|_module.__default.TestControlFlowCase__Void#canCall| |switch1#0@@1| |switch2#0@@1| |switch3#0@@1|) (< 2 $FunctionContextHeight)) ($Is DatatypeTypeType (_module.__default.TestControlFlowCase__Void |switch1#0@@1| |switch2#0@@1| |switch3#0@@1|) Tclass._module.VoidOutcome))
 :pattern ( (_module.__default.TestControlFlowCase__Void |switch1#0@@1| |switch2#0@@1| |switch3#0@@1|))
))))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@1 Tclass._System.nat))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.NatOutcome) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass._module.NatOutcome)))
 :pattern ( ($IsBox bx@@2 Tclass._module.NatOutcome))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.VoidOutcome) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) Tclass._module.VoidOutcome)))
 :pattern ( ($IsBox bx@@3 Tclass._module.VoidOutcome))
)))
(assert (forall ((|a#2#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.NatOutcome.NatSuccess| |a#2#0#0|) Tclass._module.NatOutcome) ($Is intType (int_2_U |a#2#0#0|) Tclass._System.nat))
 :pattern ( ($Is DatatypeTypeType (|#_module.NatOutcome.NatSuccess| |a#2#0#0|) Tclass._module.NatOutcome))
)))
(assert (forall ((s@@1 T@U) (i@@1 Int) (v@@2 T@U) ) (!  (and (=> (= i@@1 (|Seq#Length| s@@1)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@2) i@@1) v@@2)) (=> (or (not (= i@@1 (|Seq#Length| s@@1))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@2) i@@1) (|Seq#Index| s@@1 i@@1))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@1 v@@2) i@@1))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|switch1#0@@2| T@U) (|switch2#0@@2| T@U) (|switch3#0@@2| T@U) ) (!  (=> (or (|_module.__default.TestControlFlowCase__Nat#canCall| (U_2_bool (Lit boolType |switch1#0@@2|)) (U_2_bool (Lit boolType |switch2#0@@2|)) (U_2_bool (Lit boolType |switch3#0@@2|))) (< 2 $FunctionContextHeight)) (and (and (|_module.__default.Switch#canCall| (U_2_bool (Lit boolType |switch1#0@@2|)) (LitInt 88)) (let ((|valueOrError0#1| (Lit DatatypeTypeType (_module.__default.Switch (U_2_bool (Lit boolType |switch1#0@@2|)) (LitInt 88)))))
 (and (and (|_module.NatOutcome.IsFailure#canCall| |valueOrError0#1|) (=> (_module.NatOutcome.IsFailure |valueOrError0#1|) (|_module.NatOutcome.PropagateFailure#canCall| |valueOrError0#1|))) (=> (not (_module.NatOutcome.IsFailure |valueOrError0#1|)) (and (|_module.NatOutcome.Extract#canCall| |valueOrError0#1|) (and (|_module.__default.Switch#canCall| (U_2_bool (Lit boolType |switch2#0@@2|)) (LitInt 42)) (let ((|valueOrError1#1| (Lit DatatypeTypeType (_module.__default.Switch (U_2_bool (Lit boolType |switch2#0@@2|)) (LitInt 42)))))
 (and (and (|_module.NatOutcome.IsFailure#canCall| |valueOrError1#1|) (=> (_module.NatOutcome.IsFailure |valueOrError1#1|) (|_module.NatOutcome.PropagateFailure#canCall| |valueOrError1#1|))) (=> (not (_module.NatOutcome.IsFailure |valueOrError1#1|)) (and (|_module.NatOutcome.Extract#canCall| |valueOrError1#1|) (and (|_module.__default.Switch#canCall| (U_2_bool (Lit boolType |switch3#0@@2|)) (LitInt 33)) (let ((|valueOrError2#1| (Lit DatatypeTypeType (_module.__default.Switch (U_2_bool (Lit boolType |switch3#0@@2|)) (LitInt 33)))))
 (and (and (|_module.NatOutcome.IsFailure#canCall| |valueOrError2#1|) (=> (_module.NatOutcome.IsFailure |valueOrError2#1|) (|_module.NatOutcome.PropagateFailure#canCall| |valueOrError2#1|))) (=> (not (_module.NatOutcome.IsFailure |valueOrError2#1|)) (|_module.NatOutcome.Extract#canCall| |valueOrError2#1|))))))))))))))) (= (_module.__default.TestControlFlowCase__Nat (U_2_bool (Lit boolType |switch1#0@@2|)) (U_2_bool (Lit boolType |switch2#0@@2|)) (U_2_bool (Lit boolType |switch3#0@@2|))) (let ((|valueOrError0#1@@0| (Lit DatatypeTypeType (_module.__default.Switch (U_2_bool (Lit boolType |switch1#0@@2|)) (LitInt 88)))))
(ite (_module.NatOutcome.IsFailure |valueOrError0#1@@0|) (_module.NatOutcome.PropagateFailure |valueOrError0#1@@0|) (let ((|valueOrError1#1@@0| (Lit DatatypeTypeType (_module.__default.Switch (U_2_bool (Lit boolType |switch2#0@@2|)) (LitInt 42)))))
(ite (_module.NatOutcome.IsFailure |valueOrError1#1@@0|) (_module.NatOutcome.PropagateFailure |valueOrError1#1@@0|) (let ((|valueOrError2#1@@0| (Lit DatatypeTypeType (_module.__default.Switch (U_2_bool (Lit boolType |switch3#0@@2|)) (LitInt 33)))))
(ite (_module.NatOutcome.IsFailure |valueOrError2#1@@0|) (_module.NatOutcome.PropagateFailure |valueOrError2#1@@0|) (Lit DatatypeTypeType (|#_module.NatOutcome.NatSuccess| (LitInt 100))))))))))))
 :weight 3
 :pattern ( (_module.__default.TestControlFlowCase__Nat (U_2_bool (Lit boolType |switch1#0@@2|)) (U_2_bool (Lit boolType |switch2#0@@2|)) (U_2_bool (Lit boolType |switch3#0@@2|))))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0@@0| Bool) (|v#0@@0| Int) ) (!  (=> (or (|_module.__default.Switch#canCall| |b#0@@0| |v#0@@0|) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |v#0@@0|))) ($Is DatatypeTypeType (_module.__default.Switch |b#0@@0| |v#0@@0|) Tclass._module.NatOutcome))
 :pattern ( (_module.__default.Switch |b#0@@0| |v#0@@0|))
))))
(assert (forall ((x@@5 Int) (y Int) ) (! (= (Div x@@5 y) (div x@@5 y))
 :pattern ( (Div x@@5 y))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 Tclass._module.VoidOutcome) (or (_module.VoidOutcome.VoidSuccess_q d@@7) (_module.VoidOutcome.VoidFailure_q d@@7)))
 :pattern ( (_module.VoidOutcome.VoidFailure_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.VoidOutcome))
 :pattern ( (_module.VoidOutcome.VoidSuccess_q d@@7) ($Is DatatypeTypeType d@@7 Tclass._module.VoidOutcome))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> ($Is DatatypeTypeType d@@8 Tclass._module.NatOutcome) (or (_module.NatOutcome.NatSuccess_q d@@8) (_module.NatOutcome.NatFailure_q d@@8)))
 :pattern ( (_module.NatOutcome.NatFailure_q d@@8) ($Is DatatypeTypeType d@@8 Tclass._module.NatOutcome))
 :pattern ( (_module.NatOutcome.NatSuccess_q d@@8) ($Is DatatypeTypeType d@@8 Tclass._module.NatOutcome))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TBool) (and (= ($Box boolType ($Unbox boolType bx@@4)) bx@@4) ($Is boolType ($Unbox boolType bx@@4) TBool)))
 :pattern ( ($IsBox bx@@4 TBool))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TChar) (and (= ($Box charType ($Unbox charType bx@@5)) bx@@5) ($Is charType ($Unbox charType bx@@5) TChar)))
 :pattern ( ($IsBox bx@@5 TChar))
)))
(assert (forall ((this@@6 T@U) ) (!  (=> (or (|_module.NatOutcome.Extract#canCall| this@@6) (and ($Is DatatypeTypeType this@@6 Tclass._module.NatOutcome) (not (_module.NatOutcome.IsFailure this@@6)))) (= (_module.NatOutcome.Extract this@@6) (_module.NatOutcome.value this@@6)))
 :pattern ( (_module.NatOutcome.Extract this@@6))
)))
(assert (forall ((this@@7 T@U) ) (!  (=> (or (|_module.NatOutcome.Extract#canCall| this@@7) (and ($Is DatatypeTypeType this@@7 Tclass._module.NatOutcome) (not (_module.NatOutcome.IsFailure this@@7)))) (<= (LitInt 0) (_module.NatOutcome.Extract this@@7)))
 :pattern ( (_module.NatOutcome.Extract this@@7))
)))
(assert (forall ((v@@3 T@U) (t@@3 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@3) t@@3) ($Is T@@3 v@@3 t@@3))
 :pattern ( ($IsBox ($Box T@@3 v@@3) t@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|switch1#0@@3| Bool) (|switch2#0@@3| Bool) (|switch3#0@@3| Bool) ) (!  (=> (or (|_module.__default.TestControlFlowCase__Nat#canCall| |switch1#0@@3| |switch2#0@@3| |switch3#0@@3|) (< 2 $FunctionContextHeight)) (and (and (|_module.__default.Switch#canCall| |switch1#0@@3| (LitInt 88)) (let ((|valueOrError0#0@@1| (_module.__default.Switch |switch1#0@@3| (LitInt 88))))
 (and (and (|_module.NatOutcome.IsFailure#canCall| |valueOrError0#0@@1|) (=> (_module.NatOutcome.IsFailure |valueOrError0#0@@1|) (|_module.NatOutcome.PropagateFailure#canCall| |valueOrError0#0@@1|))) (=> (not (_module.NatOutcome.IsFailure |valueOrError0#0@@1|)) (and (|_module.NatOutcome.Extract#canCall| |valueOrError0#0@@1|) (and (|_module.__default.Switch#canCall| |switch2#0@@3| (LitInt 42)) (let ((|valueOrError1#0@@1| (_module.__default.Switch |switch2#0@@3| (LitInt 42))))
 (and (and (|_module.NatOutcome.IsFailure#canCall| |valueOrError1#0@@1|) (=> (_module.NatOutcome.IsFailure |valueOrError1#0@@1|) (|_module.NatOutcome.PropagateFailure#canCall| |valueOrError1#0@@1|))) (=> (not (_module.NatOutcome.IsFailure |valueOrError1#0@@1|)) (and (|_module.NatOutcome.Extract#canCall| |valueOrError1#0@@1|) (and (|_module.__default.Switch#canCall| |switch3#0@@3| (LitInt 33)) (let ((|valueOrError2#0@@1| (_module.__default.Switch |switch3#0@@3| (LitInt 33))))
 (and (and (|_module.NatOutcome.IsFailure#canCall| |valueOrError2#0@@1|) (=> (_module.NatOutcome.IsFailure |valueOrError2#0@@1|) (|_module.NatOutcome.PropagateFailure#canCall| |valueOrError2#0@@1|))) (=> (not (_module.NatOutcome.IsFailure |valueOrError2#0@@1|)) (|_module.NatOutcome.Extract#canCall| |valueOrError2#0@@1|))))))))))))))) (= (_module.__default.TestControlFlowCase__Nat |switch1#0@@3| |switch2#0@@3| |switch3#0@@3|) (let ((|valueOrError0#0@@2| (_module.__default.Switch |switch1#0@@3| (LitInt 88))))
(ite (_module.NatOutcome.IsFailure |valueOrError0#0@@2|) (_module.NatOutcome.PropagateFailure |valueOrError0#0@@2|) (let ((|valueOrError1#0@@2| (_module.__default.Switch |switch2#0@@3| (LitInt 42))))
(ite (_module.NatOutcome.IsFailure |valueOrError1#0@@2|) (_module.NatOutcome.PropagateFailure |valueOrError1#0@@2|) (let ((|valueOrError2#0@@2| (_module.__default.Switch |switch3#0@@3| (LitInt 33))))
(ite (_module.NatOutcome.IsFailure |valueOrError2#0@@2|) (_module.NatOutcome.PropagateFailure |valueOrError2#0@@2|) (Lit DatatypeTypeType (|#_module.NatOutcome.NatSuccess| (LitInt 100))))))))))))
 :pattern ( (_module.__default.TestControlFlowCase__Nat |switch1#0@@3| |switch2#0@@3| |switch3#0@@3|))
))))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((v@@4 T@U) (t0@@0 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@0) h@@3) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i@@2) t0@@0 h@@3))
 :pattern ( (|Seq#Index| v@@4 i@@2))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@0) h@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSeq (TSeq t@@4)) t@@4)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSeq t@@5)) TagSeq)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.VoidOutcome.VoidFailure| |a#4#0#0|)) |##_module.VoidOutcome.VoidFailure|)
 :pattern ( (|#_module.VoidOutcome.VoidFailure| |a#4#0#0|))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (_module.VoidOutcome.error (|#_module.VoidOutcome.VoidFailure| |a#8#0#0|)) |a#8#0#0|)
 :pattern ( (|#_module.VoidOutcome.VoidFailure| |a#8#0#0|))
)))
(assert (forall ((|a#0#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.NatOutcome.NatSuccess| |a#0#0#0|)) |##_module.NatOutcome.NatSuccess|)
 :pattern ( (|#_module.NatOutcome.NatSuccess| |a#0#0#0|))
)))
(assert (forall ((|a#4#0#0@@0| Int) ) (! (= (_module.NatOutcome.value (|#_module.NatOutcome.NatSuccess| |a#4#0#0@@0|)) |a#4#0#0@@0|)
 :pattern ( (|#_module.NatOutcome.NatSuccess| |a#4#0#0@@0|))
)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (! (= (DatatypeCtorId (|#_module.NatOutcome.NatFailure| |a#5#0#0@@0|)) |##_module.NatOutcome.NatFailure|)
 :pattern ( (|#_module.NatOutcome.NatFailure| |a#5#0#0@@0|))
)))
(assert (forall ((|a#9#0#0@@0| T@U) ) (! (= (_module.NatOutcome.error (|#_module.NatOutcome.NatFailure| |a#9#0#0@@0|)) |a#9#0#0@@0|)
 :pattern ( (|#_module.NatOutcome.NatFailure| |a#9#0#0@@0|))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert (forall ((n Int) ) (!  (=> (or (and (<= 0 n) (< n 55296)) (and (<= 57344 n) (< n 1114112))) (= (|char#ToInt| (|char#FromInt| n)) n))
 :pattern ( (|char#FromInt| n))
)))
(assert (forall ((|a#10#0#0@@0| T@U) ) (! (< (|Seq#Rank| |a#10#0#0@@0|) (DtRank (|#_module.VoidOutcome.VoidFailure| |a#10#0#0@@0|)))
 :pattern ( (|#_module.VoidOutcome.VoidFailure| |a#10#0#0@@0|))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (< (|Seq#Rank| |a#11#0#0|) (DtRank (|#_module.NatOutcome.NatFailure| |a#11#0#0|)))
 :pattern ( (|#_module.NatOutcome.NatFailure| |a#11#0#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0@@1| Bool) ) (!  (=> (or (|_module.__default.FailIf#canCall| |b#0@@1|) (< 1 $FunctionContextHeight)) ($Is DatatypeTypeType (_module.__default.FailIf |b#0@@1|) Tclass._module.VoidOutcome))
 :pattern ( (_module.__default.FailIf |b#0@@1|))
))))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@7 Int) (y@@0 Int) ) (! (= (Mod x@@7 y@@0) (mod x@@7 y@@0))
 :pattern ( (Mod x@@7 y@@0))
)))
(assert (forall ((s@@3 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@3 val@@4)) s@@3) (= (|Seq#Build_inv1| (|Seq#Build| s@@3 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@3 val@@4))
)))
(assert (forall ((bx@@6 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@6 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@6)) bx@@6) ($Is SeqType ($Unbox SeqType bx@@6) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@6 (TSeq t@@6)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0@@2| Bool) ) (!  (=> (or (|_module.__default.FailIf#canCall| |b#0@@2|) (< 1 $FunctionContextHeight)) (= (_module.__default.FailIf |b#0@@2|) (ite |b#0@@2| |#_module.VoidOutcome.VoidSuccess| (|#_module.VoidOutcome.VoidFailure| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 118))) ($Box charType (|char#FromInt| 111))) ($Box charType (|char#FromInt| 105))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 98))) ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 117))) ($Box charType (|char#FromInt| 99))) ($Box charType (|char#FromInt| 107))))))))
 :pattern ( (_module.__default.FailIf |b#0@@2|))
))))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|switch1#0@@4| T@U) (|switch2#0@@4| T@U) (|switch3#0@@4| T@U) ) (!  (=> (or (|_module.__default.TestControlFlowCase__Void#canCall| (U_2_bool (Lit boolType |switch1#0@@4|)) (U_2_bool (Lit boolType |switch2#0@@4|)) (U_2_bool (Lit boolType |switch3#0@@4|))) (< 2 $FunctionContextHeight)) (and (and (|_module.__default.FailIf#canCall| (U_2_bool (Lit boolType |switch1#0@@4|))) (let ((|valueOrError0#1@@1| (Lit DatatypeTypeType (_module.__default.FailIf (U_2_bool (Lit boolType |switch1#0@@4|))))))
 (and (and (|_module.VoidOutcome.IsFailure#canCall| |valueOrError0#1@@1|) (=> (_module.VoidOutcome.IsFailure |valueOrError0#1@@1|) (|_module.VoidOutcome.PropagateFailure#canCall| |valueOrError0#1@@1|))) (=> (not (_module.VoidOutcome.IsFailure |valueOrError0#1@@1|)) (and (|_module.__default.FailIf#canCall| (U_2_bool (Lit boolType |switch2#0@@4|))) (let ((|valueOrError1#1@@1| (Lit DatatypeTypeType (_module.__default.FailIf (U_2_bool (Lit boolType |switch2#0@@4|))))))
 (and (and (|_module.VoidOutcome.IsFailure#canCall| |valueOrError1#1@@1|) (=> (_module.VoidOutcome.IsFailure |valueOrError1#1@@1|) (|_module.VoidOutcome.PropagateFailure#canCall| |valueOrError1#1@@1|))) (=> (not (_module.VoidOutcome.IsFailure |valueOrError1#1@@1|)) (and (|_module.__default.FailIf#canCall| (U_2_bool (Lit boolType |switch3#0@@4|))) (let ((|valueOrError2#1@@1| (Lit DatatypeTypeType (_module.__default.FailIf (U_2_bool (Lit boolType |switch3#0@@4|))))))
 (and (|_module.VoidOutcome.IsFailure#canCall| |valueOrError2#1@@1|) (=> (_module.VoidOutcome.IsFailure |valueOrError2#1@@1|) (|_module.VoidOutcome.PropagateFailure#canCall| |valueOrError2#1@@1|))))))))))))) (= (_module.__default.TestControlFlowCase__Void (U_2_bool (Lit boolType |switch1#0@@4|)) (U_2_bool (Lit boolType |switch2#0@@4|)) (U_2_bool (Lit boolType |switch3#0@@4|))) (let ((|valueOrError0#1@@2| (Lit DatatypeTypeType (_module.__default.FailIf (U_2_bool (Lit boolType |switch1#0@@4|))))))
(ite (_module.VoidOutcome.IsFailure |valueOrError0#1@@2|) (_module.VoidOutcome.PropagateFailure |valueOrError0#1@@2|) (let ((|valueOrError1#1@@2| (Lit DatatypeTypeType (_module.__default.FailIf (U_2_bool (Lit boolType |switch2#0@@4|))))))
(ite (_module.VoidOutcome.IsFailure |valueOrError1#1@@2|) (_module.VoidOutcome.PropagateFailure |valueOrError1#1@@2|) (let ((|valueOrError2#1@@2| (Lit DatatypeTypeType (_module.__default.FailIf (U_2_bool (Lit boolType |switch3#0@@4|))))))
(ite (_module.VoidOutcome.IsFailure |valueOrError2#1@@2|) (_module.VoidOutcome.PropagateFailure |valueOrError2#1@@2|) |#_module.VoidOutcome.VoidSuccess|)))))))))
 :weight 3
 :pattern ( (_module.__default.TestControlFlowCase__Void (U_2_bool (Lit boolType |switch1#0@@4|)) (U_2_bool (Lit boolType |switch2#0@@4|)) (U_2_bool (Lit boolType |switch3#0@@4|))))
))))
(assert (forall ((d@@9 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d@@9 Tclass._module.VoidOutcome)) ($IsAlloc DatatypeTypeType d@@9 Tclass._module.VoidOutcome $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d@@9 Tclass._module.VoidOutcome $h@@0))
)))
(assert (forall ((d@@10 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) ($Is DatatypeTypeType d@@10 Tclass._module.NatOutcome)) ($IsAlloc DatatypeTypeType d@@10 Tclass._module.NatOutcome $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType d@@10 Tclass._module.NatOutcome $h@@1))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._module.NatOutcome) Tagclass._module.NatOutcome))
(assert (= (TagFamily Tclass._module.NatOutcome) tytagFamily$NatOutcome))
(assert (= (Tag Tclass._module.VoidOutcome) Tagclass._module.VoidOutcome))
(assert (= (TagFamily Tclass._module.VoidOutcome) tytagFamily$VoidOutcome))
(assert (= |#_module.VoidOutcome.VoidSuccess| (Lit DatatypeTypeType |#_module.VoidOutcome.VoidSuccess|)))
(assert (forall ((|a#6#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.VoidOutcome.VoidFailure| |a#6#0#0@@0|) Tclass._module.VoidOutcome) ($Is SeqType |a#6#0#0@@0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.VoidOutcome.VoidFailure| |a#6#0#0@@0|) Tclass._module.VoidOutcome))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.NatOutcome.NatFailure| |a#7#0#0|) Tclass._module.NatOutcome) ($Is SeqType |a#7#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#_module.NatOutcome.NatFailure| |a#7#0#0|) Tclass._module.NatOutcome))
)))
(assert (forall ((d@@11 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.VoidOutcome.VoidFailure_q d@@11) ($IsAlloc DatatypeTypeType d@@11 Tclass._module.VoidOutcome $h@@2))) ($IsAlloc SeqType (_module.VoidOutcome.error d@@11) (TSeq TChar) $h@@2))
 :pattern ( ($IsAlloc SeqType (_module.VoidOutcome.error d@@11) (TSeq TChar) $h@@2))
)))
(assert (forall ((d@@12 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_module.NatOutcome.NatFailure_q d@@12) ($IsAlloc DatatypeTypeType d@@12 Tclass._module.NatOutcome $h@@3))) ($IsAlloc SeqType (_module.NatOutcome.error d@@12) (TSeq TChar) $h@@3))
 :pattern ( ($IsAlloc SeqType (_module.NatOutcome.error d@@12) (TSeq TChar) $h@@3))
)))
(assert (forall ((d@@13 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.NatOutcome.NatSuccess_q d@@13) ($IsAlloc DatatypeTypeType d@@13 Tclass._module.NatOutcome $h@@4))) ($IsAlloc intType (int_2_U (_module.NatOutcome.value d@@13)) Tclass._System.nat $h@@4))
 :pattern ( ($IsAlloc intType (int_2_U (_module.NatOutcome.value d@@13)) Tclass._System.nat $h@@4))
)))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((|a#7#0#0@@0| T@U) ) (! (= (|#_module.VoidOutcome.VoidFailure| (Lit SeqType |a#7#0#0@@0|)) (Lit DatatypeTypeType (|#_module.VoidOutcome.VoidFailure| |a#7#0#0@@0|)))
 :pattern ( (|#_module.VoidOutcome.VoidFailure| (Lit SeqType |a#7#0#0@@0|)))
)))
(assert (forall ((|a#3#0#0| Int) ) (! (= (|#_module.NatOutcome.NatSuccess| (LitInt |a#3#0#0|)) (Lit DatatypeTypeType (|#_module.NatOutcome.NatSuccess| |a#3#0#0|)))
 :pattern ( (|#_module.NatOutcome.NatSuccess| (LitInt |a#3#0#0|)))
)))
(assert (forall ((|a#8#0#0@@0| T@U) ) (! (= (|#_module.NatOutcome.NatFailure| (Lit SeqType |a#8#0#0@@0|)) (Lit DatatypeTypeType (|#_module.NatOutcome.NatFailure| |a#8#0#0@@0|)))
 :pattern ( (|#_module.NatOutcome.NatFailure| (Lit SeqType |a#8#0#0@@0|)))
)))
(assert (forall ((x@@9 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@9)) (Lit BoxType ($Box T@@5 x@@9)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@9)))
)))
(assert (forall ((s@@4 T@U) ) (!  (=> (= (|Seq#Length| s@@4) 0) (= s@@4 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0@@3| T@U) (|v#0@@1| Int) ) (!  (=> (or (|_module.__default.Switch#canCall| (U_2_bool (Lit boolType |b#0@@3|)) (LitInt |v#0@@1|)) (and (< 1 $FunctionContextHeight) (<= (LitInt 0) |v#0@@1|))) (= (_module.__default.Switch (U_2_bool (Lit boolType |b#0@@3|)) (LitInt |v#0@@1|)) (ite (U_2_bool |b#0@@3|) (|#_module.NatOutcome.NatSuccess| (LitInt |v#0@@1|)) (|#_module.NatOutcome.NatFailure| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 98))) ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 117))) ($Box charType (|char#FromInt| 99))) ($Box charType (|char#FromInt| 107))))))))
 :weight 3
 :pattern ( (_module.__default.Switch (U_2_bool (Lit boolType |b#0@@3|)) (LitInt |v#0@@1|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0@@4| T@U) ) (!  (=> (or (|_module.__default.FailIf#canCall| (U_2_bool (Lit boolType |b#0@@4|))) (< 1 $FunctionContextHeight)) (= (_module.__default.FailIf (U_2_bool (Lit boolType |b#0@@4|))) (ite (U_2_bool |b#0@@4|) |#_module.VoidOutcome.VoidSuccess| (|#_module.VoidOutcome.VoidFailure| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 118))) ($Box charType (|char#FromInt| 111))) ($Box charType (|char#FromInt| 105))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 98))) ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 117))) ($Box charType (|char#FromInt| 99))) ($Box charType (|char#FromInt| 107))))))))
 :weight 3
 :pattern ( (_module.__default.FailIf (U_2_bool (Lit boolType |b#0@@4|))))
))))
(assert (forall ((this@@8 T@U) ) (!  (=> (or (|_module.VoidOutcome.IsFailure#canCall| this@@8) ($Is DatatypeTypeType this@@8 Tclass._module.VoidOutcome)) (= (_module.VoidOutcome.IsFailure this@@8) (_module.VoidOutcome.VoidFailure_q this@@8)))
 :pattern ( (_module.VoidOutcome.IsFailure this@@8))
)))
(assert (forall ((this@@9 T@U) ) (!  (=> (or (|_module.NatOutcome.IsFailure#canCall| this@@9) ($Is DatatypeTypeType this@@9 Tclass._module.NatOutcome)) (= (_module.NatOutcome.IsFailure this@@9) (_module.NatOutcome.NatFailure_q this@@9)))
 :pattern ( (_module.NatOutcome.IsFailure this@@9))
)))
(assert (forall ((h@@4 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@4)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@4))
)))
(assert (forall ((h@@5 T@U) (v@@6 T@U) ) (! ($IsAlloc charType v@@6 TChar h@@5)
 :pattern ( ($IsAlloc charType v@@6 TChar h@@5))
)))
(assert (forall ((this@@10 T@U) ) (!  (=> (or (|_module.VoidOutcome.PropagateFailure#canCall| this@@10) (and ($Is DatatypeTypeType this@@10 Tclass._module.VoidOutcome) (_module.VoidOutcome.IsFailure this@@10))) (= (_module.VoidOutcome.PropagateFailure this@@10) this@@10))
 :pattern ( (_module.VoidOutcome.PropagateFailure this@@10))
)))
(assert (forall ((this@@11 T@U) ) (!  (=> (or (|_module.NatOutcome.PropagateFailure#canCall| this@@11) (and ($Is DatatypeTypeType this@@11 Tclass._module.NatOutcome) (_module.NatOutcome.IsFailure this@@11))) (= (_module.NatOutcome.PropagateFailure this@@11) this@@11))
 :pattern ( (_module.NatOutcome.PropagateFailure this@@11))
)))
(assert (forall ((v@@7 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@7 (TSeq t0@@2)) (forall ((i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| v@@7))) ($IsBox (|Seq#Index| v@@7 i@@3) t0@@2))
 :pattern ( (|Seq#Index| v@@7 i@@3))
)))
 :pattern ( ($Is SeqType v@@7 (TSeq t0@@2)))
)))
(assert (forall ((s@@5 T@U) (i@@4 Int) ) (!  (=> (and (<= 0 i@@4) (< i@@4 (|Seq#Length| s@@5))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@4))) (|Seq#Rank| s@@5)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@4))))
)))
(assert (forall ((v@@8 T@U) ) (! ($Is boolType v@@8 TBool)
 :pattern ( ($Is boolType v@@8 TBool))
)))
(assert (forall ((v@@9 T@U) ) (! ($Is charType v@@9 TChar)
 :pattern ( ($Is charType v@@9 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#0@1| () Int)
(declare-fun |i#0@2| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |materialized2#0_0@1| () T@U)
(declare-fun |$rhs#0_0@1| () Bool)
(declare-fun $Heap () T@U)
(declare-fun |$rhs#0_1@1| () Bool)
(declare-fun |$rhs#0_2@1| () Bool)
(declare-fun |materialized1#0_0@1| () T@U)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |materialized2#0_0@0| () T@U)
(declare-fun |materialized1#0_0@0| () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun null () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |i#0@0| () Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |i#0| () Int)
(declare-fun |materialized1#0_0| () T@U)
(declare-fun |materialized2#0_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 25) (let ((anon11_correct  (and (=> (= (ControlFlow 0 5) (- 0 7)) ($Is intType (int_2_U (+ |i#0@1| 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (+ |i#0@1| 1)) Tclass._System.nat) (=> (= |i#0@2| (+ |i#0@1| 1)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (<= 0 |$decr$loop#00@1|) (= (- 8 |i#0@2|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- 8 |i#0@2|) |$decr$loop#00@1|)) (=> (= (ControlFlow 0 5) (- 0 4)) (< (- 8 |i#0@2|) |$decr$loop#00@1|)))))))))
(let ((anon16_Else_correct  (=> (and (not (_module.VoidOutcome.IsFailure |materialized2#0_0@1|)) (= (ControlFlow 0 9) 5)) anon11_correct)))
(let ((anon16_Then_correct  (=> (and (_module.VoidOutcome.IsFailure |materialized2#0_0@1|) (= (ControlFlow 0 8) 5)) anon11_correct)))
(let ((anon8_correct  (=> ($IsAlloc boolType (bool_2_U |$rhs#0_0@1|) TBool $Heap) (=> (and (and (and ($IsAlloc boolType (bool_2_U |$rhs#0_1@1|) TBool $Heap) ($IsAlloc boolType (bool_2_U |$rhs#0_2@1|) TBool $Heap)) (and (|_module.__default.TestControlFlowCase__Void#canCall| |$rhs#0_0@1| |$rhs#0_1@1| |$rhs#0_2@1|) (|_module.__default.TestControlFlowCase__Void#canCall| |$rhs#0_0@1| |$rhs#0_1@1| |$rhs#0_2@1|))) (and (and (= |materialized2#0_0@1| (_module.__default.TestControlFlowCase__Void |$rhs#0_0@1| |$rhs#0_1@1| |$rhs#0_2@1|)) ($IsAllocBox ($Box DatatypeTypeType |materialized2#0_0@1|) Tclass._module.VoidOutcome $Heap)) (and (|_module.VoidOutcome.IsFailure#canCall| |materialized2#0_0@1|) (|_module.VoidOutcome.IsFailure#canCall| |materialized2#0_0@1|)))) (and (=> (= (ControlFlow 0 10) 8) anon16_Then_correct) (=> (= (ControlFlow 0 10) 9) anon16_Else_correct))))))
(let ((anon15_Else_correct  (=> (and (not (_module.NatOutcome.IsFailure |materialized1#0_0@1|)) ($IsAllocBox ($Box DatatypeTypeType |materialized1#0_0@1|) Tclass._module.NatOutcome $Heap)) (and (=> (= (ControlFlow 0 12) (- 0 13)) (not (_module.NatOutcome.IsFailure |materialized1#0_0@1|))) (=> (|_module.NatOutcome.Extract#canCall| |materialized1#0_0@1|) (=> (and (|_module.NatOutcome.Extract#canCall| |materialized1#0_0@1|) (= (ControlFlow 0 12) 10)) anon8_correct))))))
(let ((anon15_Then_correct  (=> (and (_module.NatOutcome.IsFailure |materialized1#0_0@1|) (= (ControlFlow 0 11) 10)) anon8_correct)))
(let ((anon14_Else_correct  (=> (and (< |i#0@1| 8) (= |$decr$loop#00@1| (- 8 |i#0@1|))) (and (=> (= (ControlFlow 0 14) (- 0 19)) (or (not (= (LitInt 4) 0)) (not true))) (=> (or (not (= (LitInt 4) 0)) (not true)) (and (=> (= (ControlFlow 0 14) (- 0 18)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (=> (= |$rhs#0_0@1| (= (Mod (Div |i#0@1| (LitInt 4)) (LitInt 2)) (LitInt 0))) (and (=> (= (ControlFlow 0 14) (- 0 17)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (and (=> (= (ControlFlow 0 14) (- 0 16)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (=> (= |$rhs#0_1@1| (= (Mod (Div |i#0@1| (LitInt 2)) (LitInt 2)) (LitInt 0))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (or (not (= (LitInt 2) 0)) (not true))) (=> (or (not (= (LitInt 2) 0)) (not true)) (=> (and (= |$rhs#0_2@1| (= (Mod |i#0@1| (LitInt 2)) (LitInt 0))) ($IsAlloc boolType (bool_2_U |$rhs#0_0@1|) TBool $Heap)) (=> (and (and (and ($IsAlloc boolType (bool_2_U |$rhs#0_1@1|) TBool $Heap) ($IsAlloc boolType (bool_2_U |$rhs#0_2@1|) TBool $Heap)) (and (|_module.__default.TestControlFlowCase__Nat#canCall| |$rhs#0_0@1| |$rhs#0_1@1| |$rhs#0_2@1|) (|_module.__default.TestControlFlowCase__Nat#canCall| |$rhs#0_0@1| |$rhs#0_1@1| |$rhs#0_2@1|))) (and (and (= |materialized1#0_0@1| (_module.__default.TestControlFlowCase__Nat |$rhs#0_0@1| |$rhs#0_1@1| |$rhs#0_2@1|)) ($IsAllocBox ($Box DatatypeTypeType |materialized1#0_0@1|) Tclass._module.NatOutcome $Heap)) (and (|_module.NatOutcome.IsFailure#canCall| |materialized1#0_0@1|) (|_module.NatOutcome.IsFailure#canCall| |materialized1#0_0@1|)))) (and (=> (= (ControlFlow 0 14) 11) anon15_Then_correct) (=> (= (ControlFlow 0 14) 12) anon15_Else_correct)))))))))))))))))))
(let ((anon14_Then_correct true))
(let ((anon13_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 20) 3) anon14_Then_correct) (=> (= (ControlFlow 0 20) 14) anon14_Else_correct)))))
(let ((anon13_Then_correct true))
(let ((anon12_LoopBody_correct  (and (=> (= (ControlFlow 0 21) 2) anon13_Then_correct) (=> (= (ControlFlow 0 21) 20) anon13_Else_correct))))
(let ((anon12_LoopDone_correct true))
(let ((anon12_LoopHead_correct  (=> (<= (LitInt 0) |i#0@1|) (=> (and (and ($Is DatatypeTypeType |materialized2#0_0@0| Tclass._module.VoidOutcome) ($IsAlloc DatatypeTypeType |materialized2#0_0@0| Tclass._module.VoidOutcome $Heap)) (and ($Is DatatypeTypeType |materialized1#0_0@0| Tclass._module.NatOutcome) ($IsAlloc DatatypeTypeType |materialized1#0_0@0| Tclass._module.NatOutcome $Heap))) (=> (and (and (and (not false) (and (<= 0 |i#0@1|) (< |i#0@1| 9))) (= |$decr_init$loop#00@0| 8)) (and (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0))
)) ($HeapSucc $Heap $Heap)) (and (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0))
)) (<= (- 8 |i#0@1|) |$decr_init$loop#00@0|)))) (and (=> (= (ControlFlow 0 22) 1) anon12_LoopDone_correct) (=> (= (ControlFlow 0 22) 21) anon12_LoopBody_correct)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 23) (- 0 24)) ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 0)) Tclass._System.nat) (=> (= |i#0@0| (LitInt 0)) (=> (and (= |$decr_init$loop#00@0| (- 8 |i#0@0|)) (= (ControlFlow 0 23) 22)) anon12_LoopHead_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (<= (LitInt 0) |i#0|) true)) (and (and ($Is DatatypeTypeType |materialized1#0_0| Tclass._module.NatOutcome) ($IsAlloc DatatypeTypeType |materialized1#0_0| Tclass._module.NatOutcome $Heap)) true)) (and (and (and ($Is DatatypeTypeType |materialized2#0_0| Tclass._module.VoidOutcome) ($IsAlloc DatatypeTypeType |materialized2#0_0| Tclass._module.VoidOutcome $Heap)) true) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 25) 23)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
