(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun class._module.SparseArray? () T@U)
(declare-fun Tagclass._module.SparseArray? () T@U)
(declare-fun Tagclass._module.SparseArray () T@U)
(declare-fun tytagFamily$SparseArray () T@U)
(declare-fun field$Contents () T@U)
(declare-fun field$zero () T@U)
(declare-fun field$a () T@U)
(declare-fun field$b () T@U)
(declare-fun field$c () T@U)
(declare-fun field$n () T@U)
(declare-fun field$d () T@U)
(declare-fun field$e () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.SparseArray.zero () T@U)
(declare-fun Tclass._module.SparseArray? (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun _module.SparseArray.Valid (T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.SparseArray (T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun _module.SparseArray.Contents () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.SparseArray.d () T@U)
(declare-fun _module.SparseArray.e () T@U)
(declare-fun _module.SparseArray.a () T@U)
(declare-fun _module.SparseArray.b () T@U)
(declare-fun _module.SparseArray.c () T@U)
(declare-fun _module.SparseArray.n () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |_module.SparseArray.Valid#canCall| (T@U T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass._module.SparseArray?_0 (T@U) T@U)
(declare-fun Tclass._module.SparseArray_0 (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc allocName class._module.SparseArray? Tagclass._module.SparseArray? Tagclass._module.SparseArray tytagFamily$SparseArray field$Contents field$zero field$a field$b field$c field$n field$d field$e)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.SparseArray$T T@U) ($h T@U) ($o T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._module.SparseArray? _module.SparseArray$T)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) _module.SparseArray.zero) _module.SparseArray$T))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) _module.SparseArray.zero) (Tclass._module.SparseArray? _module.SparseArray$T))
)))
(assert (forall ((_module.SparseArray$T@@0 T@U) ($h@@0 T@U) ($o@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@0) (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass._module.SparseArray? _module.SparseArray$T@@0)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) _module.SparseArray.zero) _module.SparseArray$T@@0 $h@@0))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) _module.SparseArray.zero) (Tclass._module.SparseArray? _module.SparseArray$T@@0))
)))
(assert (forall ((_module.SparseArray$T@@1 T@U) ($h0 T@U) ($h1 T@U) (this T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this null)) (not true)) ($Is refType this (Tclass._module.SparseArray _module.SparseArray$T@@1)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@1 T@U) ($f T@U) )  (=> (and (or (not (= $o@@1 null)) (not true)) (= $o@@1 this)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@1) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@1) $f)))) (= (_module.SparseArray.Valid _module.SparseArray$T@@1 $h0 this) (_module.SparseArray.Valid _module.SparseArray$T@@1 $h1 this))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.SparseArray.Valid _module.SparseArray$T@@1 $h1 this))
)))
(assert (forall ((s T@U) (v T@U) (x@@2 T@U) ) (! (= (|Seq#Contains| (|Seq#Build| s v) x@@2)  (or (= v x@@2) (|Seq#Contains| s x@@2)))
 :pattern ( (|Seq#Contains| (|Seq#Build| s v) x@@2))
)))
(assert (forall ((_module.SparseArray$T@@2 T@U) (|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.SparseArray _module.SparseArray$T@@2) $h@@1) ($IsAlloc refType |c#0| (Tclass._module.SparseArray? _module.SparseArray$T@@2) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.SparseArray _module.SparseArray$T@@2) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.SparseArray? _module.SparseArray$T@@2) $h@@1))
)))
(assert (forall ((x@@3 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@3))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@3))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s@@0 T@U) (v@@0 T@U) (n Int) ) (!  (=> (and (<= 0 n) (<= n (|Seq#Length| s@@0))) (= (|Seq#Drop| (|Seq#Build| s@@0 v@@0) n) (|Seq#Build| (|Seq#Drop| s@@0 n) v@@0)))
 :pattern ( (|Seq#Drop| (|Seq#Build| s@@0 v@@0) n))
)))
(assert (forall ((s@@1 T@U) (t T@U) (n@@0 Int) ) (!  (=> (= n@@0 (|Seq#Length| s@@1)) (and (= (|Seq#Take| (|Seq#Append| s@@1 t) n@@0) s@@1) (= (|Seq#Drop| (|Seq#Append| s@@1 t) n@@0) t)))
 :pattern ( (|Seq#Take| (|Seq#Append| s@@1 t) n@@0))
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@1 t) n@@0))
)))
(assert (= (FDim _module.SparseArray.Contents) 0))
(assert (= (FieldOfDecl class._module.SparseArray? field$Contents) _module.SparseArray.Contents))
(assert ($IsGhostField _module.SparseArray.Contents))
(assert (= (FDim _module.SparseArray.d) 0))
(assert (= (FieldOfDecl class._module.SparseArray? field$d) _module.SparseArray.d))
(assert ($IsGhostField _module.SparseArray.d))
(assert (= (FDim _module.SparseArray.e) 0))
(assert (= (FieldOfDecl class._module.SparseArray? field$e) _module.SparseArray.e))
(assert ($IsGhostField _module.SparseArray.e))
(assert (forall ((_module.SparseArray$T@@3 T@U) ($o@@2 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@2 (Tclass._module.SparseArray? _module.SparseArray$T@@3) $h@@2)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 (Tclass._module.SparseArray? _module.SparseArray$T@@3) $h@@2))
)))
(assert (= (FDim _module.SparseArray.zero) 0))
(assert (= (FieldOfDecl class._module.SparseArray? field$zero) _module.SparseArray.zero))
(assert  (not ($IsGhostField _module.SparseArray.zero)))
(assert (= (FDim _module.SparseArray.a) 0))
(assert (= (FieldOfDecl class._module.SparseArray? field$a) _module.SparseArray.a))
(assert  (not ($IsGhostField _module.SparseArray.a)))
(assert (= (FDim _module.SparseArray.b) 0))
(assert (= (FieldOfDecl class._module.SparseArray? field$b) _module.SparseArray.b))
(assert  (not ($IsGhostField _module.SparseArray.b)))
(assert (= (FDim _module.SparseArray.c) 0))
(assert (= (FieldOfDecl class._module.SparseArray? field$c) _module.SparseArray.c))
(assert  (not ($IsGhostField _module.SparseArray.c)))
(assert (= (FDim _module.SparseArray.n) 0))
(assert (= (FieldOfDecl class._module.SparseArray? field$n) _module.SparseArray.n))
(assert  (not ($IsGhostField _module.SparseArray.n)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((s@@2 T@U) (n@@1 Int) ) (!  (=> (= n@@1 0) (= (|Seq#Drop| s@@2 n@@1) s@@2))
 :pattern ( (|Seq#Drop| s@@2 n@@1))
)))
(assert (forall ((x@@4 Int) ) (! (= (LitInt x@@4) x@@4)
 :pattern ( (LitInt x@@4))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (= (Ctor SeqType) 7))
(assert (forall ((s@@3 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> (and ($Is SeqType s@@3 (TSeq t@@0)) ($IsBox bx t@@0)) ($Is SeqType (|Seq#Build| s@@3 bx) (TSeq t@@0)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@3 bx) (TSeq t@@0)))
)))
(assert (forall ((s@@4 T@U) (n@@2 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@2)) (< j (|Seq#Length| s@@4))) (= (|Seq#Index| (|Seq#Take| s@@4 n@@2) j) (|Seq#Index| s@@4 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@4 n@@2) j))
 :pattern ( (|Seq#Index| s@@4 j) (|Seq#Take| s@@4 n@@2))
)))
(assert (forall ((s@@5 T@U) (n@@3 Int) ) (!  (=> (and (<= 0 n@@3) (<= n@@3 (|Seq#Length| s@@5))) (= (|Seq#Length| (|Seq#Drop| s@@5 n@@3)) (- (|Seq#Length| s@@5) n@@3)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@5 n@@3)))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((_module.SparseArray$T@@4 T@U) ($h@@3 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._module.SparseArray? _module.SparseArray$T@@4)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.SparseArray.n)) TInt $h@@3))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.SparseArray.n)) (Tclass._module.SparseArray? _module.SparseArray$T@@4))
)))
(assert ($IsGhostField alloc))
(assert (forall ((s@@6 T@U) (v@@1 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@6 v@@1)) (+ 1 (|Seq#Length| s@@6)))
 :pattern ( (|Seq#Build| s@@6 v@@1))
)))
(assert (forall ((_module.SparseArray$T@@5 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._module.SparseArray _module.SparseArray$T@@5))  (and ($Is refType |c#0@@0| (Tclass._module.SparseArray? _module.SparseArray$T@@5)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._module.SparseArray _module.SparseArray$T@@5)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._module.SparseArray? _module.SparseArray$T@@5)))
)))
(assert (forall ((v@@2 T@U) (t@@1 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@2) t@@1 h@@0) ($IsAlloc T@@1 v@@2 t@@1 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@2) t@@1 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@2 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@2 h@@1) ($IsAllocBox bx@@0 t@@2 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@2 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@3 T@U) (t@@3 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@3 t@@3 h@@2) ($IsAlloc T@@2 v@@3 t@@3 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@3 t@@3 h@@2))
)))
(assert (forall ((s@@7 T@U) (n@@4 Int) (j@@0 Int) ) (!  (=> (and (and (<= 0 n@@4) (<= 0 j@@0)) (< j@@0 (- (|Seq#Length| s@@7) n@@4))) (= (|Seq#Index| (|Seq#Drop| s@@7 n@@4) j@@0) (|Seq#Index| s@@7 (+ j@@0 n@@4))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@7 n@@4) j@@0))
)))
(assert (forall ((_module.SparseArray$T@@6 T@U) ) (!  (and (= (Tag (Tclass._module.SparseArray? _module.SparseArray$T@@6)) Tagclass._module.SparseArray?) (= (TagFamily (Tclass._module.SparseArray? _module.SparseArray$T@@6)) tytagFamily$SparseArray))
 :pattern ( (Tclass._module.SparseArray? _module.SparseArray$T@@6))
)))
(assert (forall ((_module.SparseArray$T@@7 T@U) ) (!  (and (= (Tag (Tclass._module.SparseArray _module.SparseArray$T@@7)) Tagclass._module.SparseArray) (= (TagFamily (Tclass._module.SparseArray _module.SparseArray$T@@7)) tytagFamily$SparseArray))
 :pattern ( (Tclass._module.SparseArray _module.SparseArray$T@@7))
)))
(assert (forall ((h@@3 T@U) (k@@2 T@U) ) (!  (=> ($HeapSuccGhost h@@3 k@@2) (and ($HeapSucc h@@3 k@@2) (forall ((o@@0 T@U) (f T@U) ) (!  (=> (not ($IsGhostField f)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 o@@0) f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k@@2 o@@0) f)))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k@@2 o@@0) f))
))))
 :pattern ( ($HeapSuccGhost h@@3 k@@2))
)))
(assert (forall ((_module.SparseArray$T@@8 T@U) ($h@@4 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._module.SparseArray? _module.SparseArray$T@@8)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.SparseArray.Contents)) (TSeq _module.SparseArray$T@@8) $h@@4))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.SparseArray.Contents)) (Tclass._module.SparseArray? _module.SparseArray$T@@8))
)))
(assert (forall ((_module.SparseArray$T@@9 T@U) ($h@@5 T@U) ($o@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._module.SparseArray? _module.SparseArray$T@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) _module.SparseArray.a)) (TSeq _module.SparseArray$T@@9) $h@@5))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) _module.SparseArray.a)) (Tclass._module.SparseArray? _module.SparseArray$T@@9))
)))
(assert (forall ((_module.SparseArray$T@@10 T@U) ($h@@6 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._module.SparseArray? _module.SparseArray$T@@10)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) _module.SparseArray.b)) (TSeq TInt) $h@@6))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) _module.SparseArray.b)) (Tclass._module.SparseArray? _module.SparseArray$T@@10))
)))
(assert (forall ((_module.SparseArray$T@@11 T@U) ($h@@7 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._module.SparseArray? _module.SparseArray$T@@11)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@7) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@7) _module.SparseArray.c)) (TSeq TInt) $h@@7))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@7) _module.SparseArray.c)) (Tclass._module.SparseArray? _module.SparseArray$T@@11))
)))
(assert (forall ((_module.SparseArray$T@@12 T@U) ($h@@8 T@U) ($o@@8 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) (Tclass._module.SparseArray? _module.SparseArray$T@@12)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@8) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@8) _module.SparseArray.d)) (TSeq TInt) $h@@8))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@8) _module.SparseArray.d)) (Tclass._module.SparseArray? _module.SparseArray$T@@12))
)))
(assert (forall ((_module.SparseArray$T@@13 T@U) ($h@@9 T@U) ($o@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) (Tclass._module.SparseArray? _module.SparseArray$T@@13)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@9) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@9) _module.SparseArray.e)) (TSeq TInt) $h@@9))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@9) _module.SparseArray.e)) (Tclass._module.SparseArray? _module.SparseArray$T@@13))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@10 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#1| |l#0| |l#1| |l#2| |l#3|) $o@@10 $f@@0))  (=> (and (or (not (= $o@@10 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@10) |l#2|)))) (= $o@@10 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#1| |l#0| |l#1| |l#2| |l#3|) $o@@10 $f@@0))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0 s1)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.SparseArray$T@@14 T@U) ($Heap T@U) (this@@0 T@U) ) (!  (=> (or (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@14 $Heap this@@0) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 (Tclass._module.SparseArray _module.SparseArray$T@@14)) ($IsAlloc refType this@@0 (Tclass._module.SparseArray _module.SparseArray$T@@14) $Heap)))))) (= (_module.SparseArray.Valid _module.SparseArray$T@@14 $Heap this@@0)  (and (and (and (and (and (and (and (and (and (and (and (and (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.a))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.Contents)))) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.b))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.Contents))))) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.c))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.Contents))))) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.n))))) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.n))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.c))))) (forall ((|i#0| Int) ) (!  (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.Contents))))) (= (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.Contents)) |i#0|) (ite  (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.b)) |i#0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.b)) |i#0|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.n))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.c)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.b)) |i#0|)))))) |i#0|)) (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.a)) |i#0|) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.zero))))
 :pattern ( (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.a)) |i#0|))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.b)) |i#0|)))
 :pattern ( (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.Contents)) |i#0|))
))) (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.Contents))))) (= (|Seq#Contains| (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.c)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.n)))) ($Box intType (int_2_U |i#1|)))  (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.b)) |i#1|)))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.b)) |i#1|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.n))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.c)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.b)) |i#1|)))))) |i#1|))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.b)) |i#1|)))
 :pattern ( (|Seq#Contains| (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.c)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.n)))) ($Box intType (int_2_U |i#1|))))
))) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.Contents))))) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.Contents))))) (forall ((|i#2| Int) ) (!  (=> (and (<= (LitInt 0) |i#2|) (< |i#2| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.n))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.c)) |i#2|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d)) |i#2|)))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d)) |i#2|)))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.c)) |i#2|)))
))) (forall ((|i#3| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d))))) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d)) |i#3|))))) (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d))))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d)) |i#3|))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d))))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d)) |i#3|)))
))) (forall ((|i#4| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#4|) (< |i#4| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e))))) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e)) |i#4|))))) (=> (and (<= (LitInt 0) |i#4|) (< |i#4| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e))))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e)) |i#4|))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e))))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e)) |i#4|)))
))) (forall ((|i#5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5|) (< |i#5| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.d)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e)) |i#5|)))))) |i#5|))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.SparseArray.e)) |i#5|)))
)))))
 :pattern ( (_module.SparseArray.Valid _module.SparseArray$T@@14 $Heap this@@0) ($IsGoodHeap $Heap))
))))
(assert (forall ((_module.SparseArray$T@@15 T@U) ($o@@11 T@U) ) (! (= ($Is refType $o@@11 (Tclass._module.SparseArray? _module.SparseArray$T@@15))  (or (= $o@@11 null) (= (dtype $o@@11) (Tclass._module.SparseArray? _module.SparseArray$T@@15))))
 :pattern ( ($Is refType $o@@11 (Tclass._module.SparseArray? _module.SparseArray$T@@15)))
)))
(assert (forall ((s@@8 T@U) (i Int) (v@@4 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@8)) (= (|Seq#Index| (|Seq#Build| s@@8 v@@4) i) v@@4)) (=> (or (not (= i (|Seq#Length| s@@8))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@8 v@@4) i) (|Seq#Index| s@@8 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@8 v@@4) i))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (x@@7 T@U) ) (! (= (|Seq#Contains| (|Seq#Append| s0@@0 s1@@0) x@@7)  (or (|Seq#Contains| s0@@0 x@@7) (|Seq#Contains| s1@@0 x@@7)))
 :pattern ( (|Seq#Contains| (|Seq#Append| s0@@0 s1@@0) x@@7))
)))
(assert (forall ((s@@9 T@U) (n@@5 Int) (x@@8 T@U) ) (! (= (|Seq#Contains| (|Seq#Take| s@@9 n@@5) x@@8) (exists ((i@@0 Int) ) (!  (and (and (and (<= 0 i@@0) (< i@@0 n@@5)) (< i@@0 (|Seq#Length| s@@9))) (= (|Seq#Index| s@@9 i@@0) x@@8))
 :pattern ( (|Seq#Index| s@@9 i@@0))
)))
 :pattern ( (|Seq#Contains| (|Seq#Take| s@@9 n@@5) x@@8))
)))
(assert (forall ((s@@10 T@U) (x@@9 T@U) ) (! (= (|Seq#Contains| s@@10 x@@9) (exists ((i@@1 Int) ) (!  (and (and (<= 0 i@@1) (< i@@1 (|Seq#Length| s@@10))) (= (|Seq#Index| s@@10 i@@1) x@@9))
 :pattern ( (|Seq#Index| s@@10 i@@1))
)))
 :pattern ( (|Seq#Contains| s@@10 x@@9))
)))
(assert (forall ((s@@11 T@U) (n@@6 Int) ) (!  (=> (and (<= 0 n@@6) (<= n@@6 (|Seq#Length| s@@11))) (= (|Seq#Length| (|Seq#Take| s@@11 n@@6)) n@@6))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@11 n@@6)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@5 T@U) (t@@4 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@5) t@@4) ($Is T@@3 v@@5 t@@4))
 :pattern ( ($IsBox ($Box T@@3 v@@5) t@@4))
)))
(assert (forall ((s@@12 T@U) ) (! (<= 0 (|Seq#Length| s@@12))
 :pattern ( (|Seq#Length| s@@12))
)))
(assert (forall ((v@@6 T@U) (t0@@1 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SeqType v@@6 (TSeq t0@@1) h@@4) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@6))) ($IsAllocBox (|Seq#Index| v@@6 i@@2) t0@@1 h@@4))
 :pattern ( (|Seq#Index| v@@6 i@@2))
)))
 :pattern ( ($IsAlloc SeqType v@@6 (TSeq t0@@1) h@@4))
)))
(assert (forall ((_module.SparseArray$T@@16 T@U) ($h@@10 T@U) ($o@@12 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) (Tclass._module.SparseArray? _module.SparseArray$T@@16)))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@12) _module.SparseArray.n)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@12) _module.SparseArray.n)) (Tclass._module.SparseArray? _module.SparseArray$T@@16))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Inv0_TSeq (TSeq t@@5)) t@@5)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Tag (TSeq t@@6)) TagSeq)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((_module.SparseArray$T@@17 T@U) ) (! (= (Tclass._module.SparseArray?_0 (Tclass._module.SparseArray? _module.SparseArray$T@@17)) _module.SparseArray$T@@17)
 :pattern ( (Tclass._module.SparseArray? _module.SparseArray$T@@17))
)))
(assert (forall ((_module.SparseArray$T@@18 T@U) ) (! (= (Tclass._module.SparseArray_0 (Tclass._module.SparseArray _module.SparseArray$T@@18)) _module.SparseArray$T@@18)
 :pattern ( (Tclass._module.SparseArray _module.SparseArray$T@@18))
)))
(assert (forall ((x@@10 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@10)) x@@10)
 :pattern ( ($Box T@@4 x@@10))
)))
(assert (forall ((s@@13 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@13 val@@4)) s@@13) (= (|Seq#Build_inv1| (|Seq#Build| s@@13 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@13 val@@4))
)))
(assert (forall ((_module.SparseArray$T@@19 T@U) ($h@@11 T@U) ($o@@13 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@13 null)) (not true)) (= (dtype $o@@13) (Tclass._module.SparseArray? _module.SparseArray$T@@19)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@13) _module.SparseArray.Contents)) (TSeq _module.SparseArray$T@@19)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@13) _module.SparseArray.Contents)) (Tclass._module.SparseArray? _module.SparseArray$T@@19))
)))
(assert (forall ((_module.SparseArray$T@@20 T@U) ($h@@12 T@U) ($o@@14 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@14 null)) (not true)) (= (dtype $o@@14) (Tclass._module.SparseArray? _module.SparseArray$T@@20)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@14) _module.SparseArray.a)) (TSeq _module.SparseArray$T@@20)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@14) _module.SparseArray.a)) (Tclass._module.SparseArray? _module.SparseArray$T@@20))
)))
(assert (forall ((_module.SparseArray$T@@21 T@U) ($h@@13 T@U) ($o@@15 T@U) ) (!  (=> (and ($IsGoodHeap $h@@13) (and (or (not (= $o@@15 null)) (not true)) (= (dtype $o@@15) (Tclass._module.SparseArray? _module.SparseArray$T@@21)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@15) _module.SparseArray.b)) (TSeq TInt)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@15) _module.SparseArray.b)) (Tclass._module.SparseArray? _module.SparseArray$T@@21))
)))
(assert (forall ((_module.SparseArray$T@@22 T@U) ($h@@14 T@U) ($o@@16 T@U) ) (!  (=> (and ($IsGoodHeap $h@@14) (and (or (not (= $o@@16 null)) (not true)) (= (dtype $o@@16) (Tclass._module.SparseArray? _module.SparseArray$T@@22)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@16) _module.SparseArray.c)) (TSeq TInt)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@16) _module.SparseArray.c)) (Tclass._module.SparseArray? _module.SparseArray$T@@22))
)))
(assert (forall ((_module.SparseArray$T@@23 T@U) ($h@@15 T@U) ($o@@17 T@U) ) (!  (=> (and ($IsGoodHeap $h@@15) (and (or (not (= $o@@17 null)) (not true)) (= (dtype $o@@17) (Tclass._module.SparseArray? _module.SparseArray$T@@23)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@17) _module.SparseArray.d)) (TSeq TInt)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@17) _module.SparseArray.d)) (Tclass._module.SparseArray? _module.SparseArray$T@@23))
)))
(assert (forall ((_module.SparseArray$T@@24 T@U) ($h@@16 T@U) ($o@@18 T@U) ) (!  (=> (and ($IsGoodHeap $h@@16) (and (or (not (= $o@@18 null)) (not true)) (= (dtype $o@@18) (Tclass._module.SparseArray? _module.SparseArray$T@@24)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@18) _module.SparseArray.e)) (TSeq TInt)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@18) _module.SparseArray.e)) (Tclass._module.SparseArray? _module.SparseArray$T@@24))
)))
(assert (forall ((s@@14 T@U) (n@@7 Int) (x@@11 T@U) ) (! (= (|Seq#Contains| (|Seq#Drop| s@@14 n@@7) x@@11) (exists ((i@@3 Int) ) (!  (and (and (and (<= 0 n@@7) (<= n@@7 i@@3)) (< i@@3 (|Seq#Length| s@@14))) (= (|Seq#Index| s@@14 i@@3) x@@11))
 :pattern ( (|Seq#Index| s@@14 i@@3))
)))
 :pattern ( (|Seq#Contains| (|Seq#Drop| s@@14 n@@7) x@@11))
)))
(assert (forall ((bx@@2 T@U) (t@@7 T@U) ) (!  (=> ($IsBox bx@@2 (TSeq t@@7)) (and (= ($Box SeqType ($Unbox SeqType bx@@2)) bx@@2) ($Is SeqType ($Unbox SeqType bx@@2) (TSeq t@@7))))
 :pattern ( ($IsBox bx@@2 (TSeq t@@7)))
)))
(assert (forall ((_module.SparseArray$T@@25 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._module.SparseArray? _module.SparseArray$T@@25)) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) (Tclass._module.SparseArray? _module.SparseArray$T@@25))))
 :pattern ( ($IsBox bx@@3 (Tclass._module.SparseArray? _module.SparseArray$T@@25)))
)))
(assert (forall ((_module.SparseArray$T@@26 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._module.SparseArray _module.SparseArray$T@@26)) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) (Tclass._module.SparseArray _module.SparseArray$T@@26))))
 :pattern ( ($IsBox bx@@4 (Tclass._module.SparseArray _module.SparseArray$T@@26)))
)))
(assert (forall ((h@@5 T@U) (r T@U) (f@@0 T@U) (x@@12 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f@@0 x@@12))) ($HeapSucc h@@5 (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f@@0 x@@12))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f@@0 x@@12)))
)))
(assert (forall ((s@@15 T@U) (n@@8 Int) (k@@3 Int) ) (!  (=> (and (and (<= 0 n@@8) (<= n@@8 k@@3)) (< k@@3 (|Seq#Length| s@@15))) (= (|Seq#Index| (|Seq#Drop| s@@15 n@@8) (- k@@3 n@@8)) (|Seq#Index| s@@15 k@@3)))
 :weight 25
 :pattern ( (|Seq#Index| s@@15 k@@3) (|Seq#Drop| s@@15 n@@8))
)))
(assert (forall ((s@@16 T@U) (m@@4 Int) (n@@9 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@9)) (<= (+ m@@4 n@@9) (|Seq#Length| s@@16))) (= (|Seq#Drop| (|Seq#Drop| s@@16 m@@4) n@@9) (|Seq#Drop| s@@16 (+ m@@4 n@@9))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@16 m@@4) n@@9))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@10 Int) ) (!  (and (=> (< n@@10 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@10) (|Seq#Index| s0@@1 n@@10))) (=> (<= (|Seq#Length| s0@@1) n@@10) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@10) (|Seq#Index| s1@@1 (- n@@10 (|Seq#Length| s0@@1))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@10))
)))
(assert (forall ((x@@13 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@13))) (Lit BoxType ($Box intType (int_2_U x@@13))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@13))))
)))
(assert (forall ((x@@14 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@14)) (Lit BoxType ($Box T@@5 x@@14)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@14)))
)))
(assert (forall ((s@@17 T@U) ) (!  (=> (= (|Seq#Length| s@@17) 0) (= s@@17 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@17))
)))
(assert (forall ((s@@18 T@U) (n@@11 Int) ) (!  (=> (= n@@11 0) (= (|Seq#Take| s@@18 n@@11) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@18 n@@11))
)))
(assert (forall ((h@@6 T@U) (v@@7 T@U) ) (! ($IsAlloc intType v@@7 TInt h@@6)
 :pattern ( ($IsAlloc intType v@@7 TInt h@@6))
)))
(assert (forall ((v@@8 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@8 (TSeq t0@@2)) (forall ((i@@4 Int) ) (!  (=> (and (<= 0 i@@4) (< i@@4 (|Seq#Length| v@@8))) ($IsBox (|Seq#Index| v@@8 i@@4) t0@@2))
 :pattern ( (|Seq#Index| v@@8 i@@4))
)))
 :pattern ( ($Is SeqType v@@8 (TSeq t0@@2)))
)))
(assert (forall ((v@@9 T@U) ) (! ($Is intType v@@9 TInt)
 :pattern ( ($Is intType v@@9 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#14@0| () Int)
(declare-fun |k#0@1| () Int)
(declare-fun |id#0@1| () T@U)
(declare-fun |s#0@1| () T@U)
(declare-fun |zero#0| () T@U)
(declare-fun |i#12@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |N#0| () Int)
(declare-fun _module.SparseArray$T@@27 () T@U)
(declare-fun $Heap@11 () T@U)
(declare-fun this@@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun $Heap@10 () T@U)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |s#0@2| () T@U)
(declare-fun |id#0@2| () T@U)
(declare-fun |k#0@2| () Int)
(declare-fun |$rhs#3@0| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun $Heap@@0 () T@U)
(declare-fun |call3formal@arr#0| () T@U)
(declare-fun call0formal@_module._default.AllocateArray$G () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |call3formal@arr#0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |call3formal@arr#0@@0| () T@U)
(declare-fun call0formal@_module._default.AllocateArray$G@@0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |call3formal@arr#0@0@@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |call3formal@arr#0@@1| () T@U)
(declare-fun call0formal@_module._default.AllocateArray$G@@1 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |call3formal@arr#0@0@@1| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |s#0@0| () T@U)
(declare-fun |id#0@0| () T@U)
(declare-fun |k#0@0| () Int)
(declare-fun |aa#0| () T@U)
(declare-fun |bb#0| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun |id#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 67) (let ((anon25_Else_correct true))
(let ((anon14_correct true))
(let ((anon27_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#14@0|) (< |i#14@0| |k#0@1|))) (= (ControlFlow 0 39) 34)) anon14_correct)))
(let ((anon27_Then_correct  (=> (and (<= (LitInt 0) |i#14@0|) (< |i#14@0| |k#0@1|)) (and (=> (= (ControlFlow 0 37) (- 0 38)) (and (<= 0 |i#14@0|) (< |i#14@0| (|Seq#Length| |id#0@1|)))) (=> (= (ControlFlow 0 37) 34) anon14_correct)))))
(let ((anon26_Else_correct  (=> (< |i#14@0| (LitInt 0)) (and (=> (= (ControlFlow 0 41) 37) anon27_Then_correct) (=> (= (ControlFlow 0 41) 39) anon27_Else_correct)))))
(let ((anon26_Then_correct  (=> (<= (LitInt 0) |i#14@0|) (and (=> (= (ControlFlow 0 40) 37) anon27_Then_correct) (=> (= (ControlFlow 0 40) 39) anon27_Else_correct)))))
(let ((anon25_Then_correct  (and (=> (= (ControlFlow 0 42) 40) anon26_Then_correct) (=> (= (ControlFlow 0 42) 41) anon26_Else_correct))))
(let ((anon24_Then_correct  (=> (= (|Seq#Length| |id#0@1|) |k#0@1|) (and (=> (= (ControlFlow 0 43) 42) anon25_Then_correct) (=> (= (ControlFlow 0 43) 36) anon25_Else_correct)))))
(let ((anon24_Else_correct  (=> (and (or (not (= (|Seq#Length| |id#0@1|) |k#0@1|)) (not true)) (= (ControlFlow 0 35) 34)) anon14_correct)))
(let ((anon7_correct  (=> (forall ((|i#13| Int) ) (!  (=> (and (<= (LitInt 0) |i#13|) (< |i#13| (|Seq#Length| |s#0@1|))) (= (|Seq#Index| |s#0@1| |i#13|) |zero#0|))
 :pattern ( (|Seq#Index| |s#0@1| |i#13|))
)) (and (=> (= (ControlFlow 0 44) 43) anon24_Then_correct) (=> (= (ControlFlow 0 44) 35) anon24_Else_correct)))))
(let ((anon23_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#12@0|) (< |i#12@0| (|Seq#Length| |s#0@1|)))) (= (ControlFlow 0 47) 44)) anon7_correct)))
(let ((anon23_Then_correct  (=> (and (<= (LitInt 0) |i#12@0|) (< |i#12@0| (|Seq#Length| |s#0@1|))) (and (=> (= (ControlFlow 0 45) (- 0 46)) (and (<= 0 |i#12@0|) (< |i#12@0| (|Seq#Length| |s#0@1|)))) (=> (= (ControlFlow 0 45) 44) anon7_correct)))))
(let ((anon22_Else_correct  (=> (< |i#12@0| (LitInt 0)) (and (=> (= (ControlFlow 0 49) 45) anon23_Then_correct) (=> (= (ControlFlow 0 49) 47) anon23_Else_correct)))))
(let ((anon22_Then_correct  (=> (<= (LitInt 0) |i#12@0|) (and (=> (= (ControlFlow 0 48) 45) anon23_Then_correct) (=> (= (ControlFlow 0 48) 47) anon23_Else_correct)))))
(let ((anon21_Then_correct  (and (=> (= (ControlFlow 0 50) 48) anon22_Then_correct) (=> (= (ControlFlow 0 50) 49) anon22_Else_correct))))
(let ((anon21_Else_correct true))
(let ((anon20_Then_correct  (=> (not |$w$loop#0@0|) (=> (and (<= |k#0@1| |N#0|) (= (|Seq#Length| |s#0@1|) |k#0@1|)) (and (=> (= (ControlFlow 0 51) 50) anon21_Then_correct) (=> (= (ControlFlow 0 51) 33) anon21_Else_correct))))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 11) (- 0 26)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.a))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.a))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)))))) (and (=> (= (ControlFlow 0 11) (- 0 25)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)))))) (and (=> (= (ControlFlow 0 11) (- 0 24)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)))))) (and (=> (= (ControlFlow 0 11) (- 0 23)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n))))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n)))))) (and (=> (= (ControlFlow 0 11) (- 0 22)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c))))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (<= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)))))) (and (=> (= (ControlFlow 0 11) (- 0 21)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#6| Int) ) (!  (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))))) (= (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)) |i#6|) (ite  (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#6|)))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#6|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#6|)))))) |i#6|)) (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.a)) |i#6|) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.zero))))
 :pattern ( (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.a)) |i#6|))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#6|)))
 :pattern ( (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)) |i#6|))
))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#6@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@0|) (< |i#6@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))))) (= (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)) |i#6@@0|) (ite  (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#6@@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#6@@0|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#6@@0|)))))) |i#6@@0|)) (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.a)) |i#6@@0|) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.zero))))
 :pattern ( (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.a)) |i#6@@0|))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#6@@0|)))
 :pattern ( (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)) |i#6@@0|))
)))) (and (=> (= (ControlFlow 0 11) (- 0 20)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#7| Int) ) (!  (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))))) (= (|Seq#Contains| (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n)))) ($Box intType (int_2_U |i#7|)))  (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#7|)))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#7|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#7|)))))) |i#7|))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#7|)))
 :pattern ( (|Seq#Contains| (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n)))) ($Box intType (int_2_U |i#7|))))
))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#7@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@0|) (< |i#7@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))))) (= (|Seq#Contains| (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n)))) ($Box intType (int_2_U |i#7@@0|)))  (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#7@@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#7@@0|))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#7@@0|)))))) |i#7@@0|))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.b)) |i#7@@0|)))
 :pattern ( (|Seq#Contains| (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n)))) ($Box intType (int_2_U |i#7@@0|))))
)))) (and (=> (= (ControlFlow 0 11) (- 0 19)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)))))) (and (=> (= (ControlFlow 0 11) (- 0 18)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)))))) (and (=> (= (ControlFlow 0 11) (- 0 17)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#8| Int) ) (!  (=> (and (<= (LitInt 0) |i#8|) (< |i#8| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) |i#8|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#8|)))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#8|)))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) |i#8|)))
))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#8@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#8@@0|) (< |i#8@@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.n))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) |i#8@@0|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#8@@0|)))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#8@@0|)))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.c)) |i#8@@0|)))
)))) (and (=> (= (ControlFlow 0 11) (- 0 16)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#9| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#9|) (< |i#9| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d))))) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#9|))))) (=> (and (<= (LitInt 0) |i#9|) (< |i#9| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d))))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#9|))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d))))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#9|)))
))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#9@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#9@@0|) (< |i#9@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d))))) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#9@@0|))))) (=> (and (<= (LitInt 0) |i#9@@0|) (< |i#9@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d))))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#9@@0|))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d))))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) |i#9@@0|)))
)))) (and (=> (= (ControlFlow 0 11) (- 0 15)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#10| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#10|) (< |i#10| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))))) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#10|))))) (=> (and (<= (LitInt 0) |i#10|) (< |i#10| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#10|))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#10|)))
))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#10@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#10@@0|) (< |i#10@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))))) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#10@@0|))))) (=> (and (<= (LitInt 0) |i#10@@0|) (< |i#10@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))))) (< (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#10@@0|))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))))))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#10@@0|)))
)))) (and (=> (= (ControlFlow 0 11) (- 0 14)) (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#11| Int) ) (!  (=> (and (<= (LitInt 0) |i#11|) (< |i#11| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#11|)))))) |i#11|))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#11|)))
))))) (=> (=> (|_module.SparseArray.Valid#canCall| _module.SparseArray$T@@27 $Heap@11 this@@1) (or (_module.SparseArray.Valid _module.SparseArray$T@@27 $Heap@11 this@@1) (forall ((|i#11@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#11@@0|) (< |i#11@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e))))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.d)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#11@@0|)))))) |i#11@@0|))
 :pattern ( ($Unbox intType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.e)) |i#11@@0|)))
)))) (and (=> (= (ControlFlow 0 11) (- 0 13)) (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))) |N#0|)) (=> (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents))) |N#0|) (and (=> (= (ControlFlow 0 11) (- 0 12)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.zero) |zero#0|)) (=> (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.zero) |zero#0|) (=> (= (ControlFlow 0 11) (- 0 10)) (forall ((|x#1| T@U) ) (!  (=> ($IsBox |x#1| _module.SparseArray$T@@27) (=> (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)) |x#1|) (= |x#1| |zero#0|)))
 :pattern ( (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 this@@1) _module.SparseArray.Contents)) |x#1|))
)))))))))))))))))))))))))))))))))))
(let ((anon28_Then_correct  (=> (<= |N#0| |k#0@1|) (and (=> (= (ControlFlow 0 27) (- 0 31)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.zero))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.zero)) (=> (and (= $Heap@7 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@6 this@@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 this@@1) _module.SparseArray.zero |zero#0|))) ($IsGoodHeap $Heap@7)) (and (=> (= (ControlFlow 0 27) (- 0 30)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.Contents))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.Contents)) (=> (and (= $Heap@8 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@7 this@@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 this@@1) _module.SparseArray.Contents ($Box SeqType |s#0@1|)))) ($IsGoodHeap $Heap@8)) (and (=> (= (ControlFlow 0 27) (- 0 29)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.d))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.d)) (=> (and (= $Heap@9 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@8 this@@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 this@@1) _module.SparseArray.d ($Box SeqType |id#0@1|)))) ($IsGoodHeap $Heap@9)) (and (=> (= (ControlFlow 0 27) (- 0 28)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.e))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.e)) (=> (and (and (= $Heap@10 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@9 this@@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 this@@1) _module.SparseArray.e ($Box SeqType |id#0@1|)))) ($IsGoodHeap $Heap@10)) (and (= $Heap@11 $Heap@10) (= (ControlFlow 0 27) 11))) GeneratedUnifiedExit_correct)))))))))))))))
(let ((anon28_Else_correct  (=> (< |k#0@1| |N#0|) (=> (and (and (= |$decr$loop#00@1| (- |N#0| |k#0@1|)) (= |s#0@2| (|Seq#Append| |s#0@1| (|Seq#Build| |Seq#Empty| |zero#0|)))) (and (= |id#0@2| (|Seq#Append| |id#0@1| (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U |k#0@1|))))) (= |k#0@2| (+ |k#0@1| 1)))) (and (=> (= (ControlFlow 0 3) (- 0 9)) (or (<= 0 |$decr$loop#00@1|) (= (- |N#0| |k#0@2|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- |N#0| |k#0@2|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (< (- |N#0| |k#0@2|) |$decr$loop#00@1|)) (=> (< (- |N#0| |k#0@2|) |$decr$loop#00@1|) (and (=> (= (ControlFlow 0 3) (- 0 7)) (=> |$w$loop#0@0| (<= |k#0@2| |N#0|))) (=> (=> |$w$loop#0@0| (<= |k#0@2| |N#0|)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (=> |$w$loop#0@0| (= (|Seq#Length| |s#0@2|) |k#0@2|))) (=> (=> |$w$loop#0@0| (= (|Seq#Length| |s#0@2|) |k#0@2|)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> |$w$loop#0@0| (forall ((|i#13@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@0|) (< |i#13@@0| (|Seq#Length| |s#0@2|))) (= (|Seq#Index| |s#0@2| |i#13@@0|) |zero#0|))
 :pattern ( (|Seq#Index| |s#0@2| |i#13@@0|))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#13@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@1|) (< |i#13@@1| (|Seq#Length| |s#0@2|))) (= (|Seq#Index| |s#0@2| |i#13@@1|) |zero#0|))
 :pattern ( (|Seq#Index| |s#0@2| |i#13@@1|))
))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#0@0| (= (|Seq#Length| |id#0@2|) |k#0@2|))) (=> (=> |$w$loop#0@0| (= (|Seq#Length| |id#0@2|) |k#0@2|)) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#0@0| (forall ((|i#15| Int) ) (!  (=> (and (<= (LitInt 0) |i#15|) (< |i#15| |k#0@2|)) (= (U_2_int ($Unbox intType (|Seq#Index| |id#0@2| |i#15|))) |i#15|))
 :pattern ( ($Unbox intType (|Seq#Index| |id#0@2| |i#15|)))
))))))))))))))))))))
(let ((anon20_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 32) 27) anon28_Then_correct) (=> (= (ControlFlow 0 32) 3) anon28_Else_correct)))))
(let ((anon19_LoopBody_correct  (and (=> (= (ControlFlow 0 52) 51) anon20_Then_correct) (=> (= (ControlFlow 0 52) 32) anon20_Else_correct))))
(let ((anon19_LoopDone_correct true))
(let ((anon19_LoopHead_correct  (=> (and (and ($Is SeqType |s#0@1| (TSeq _module.SparseArray$T@@27)) ($IsAlloc SeqType |s#0@1| (TSeq _module.SparseArray$T@@27) $Heap@6)) (and ($Is SeqType |id#0@1| (TSeq TInt)) ($IsAlloc SeqType |id#0@1| (TSeq TInt) $Heap@6))) (=> (and (and (and (and (and (and (and (and (not false) (<= 0 |N#0|)) (<= 0 |N#0|)) (<= 0 |N#0|)) (= |$rhs#3@0| 0)) (<= 0 |k#0@1|)) (<= 0 |$decr_init$loop#00@0|)) (=> |$w$loop#0@0| (<= |k#0@1| |N#0|))) (and (and (and (=> |$w$loop#0@0| (= (|Seq#Length| |s#0@1|) |k#0@1|)) (=> |$w$loop#0@0| (forall ((|i#13@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@2|) (< |i#13@@2| (|Seq#Length| |s#0@1|))) (= (|Seq#Index| |s#0@1| |i#13@@2|) |zero#0|))
 :pattern ( (|Seq#Index| |s#0@1| |i#13@@2|))
)))) (and (=> |$w$loop#0@0| (= (|Seq#Length| |id#0@1|) |k#0@1|)) (=> |$w$loop#0@0| (forall ((|i#15@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#15@@0|) (< |i#15@@0| |k#0@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| |id#0@1| |i#15@@0|))) |i#15@@0|))
 :pattern ( ($Unbox intType (|Seq#Index| |id#0@1| |i#15@@0|)))
))))) (and (and (forall (($o@@19 T@U) ) (!  (=> (and (or (not (= $o@@19 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 $o@@19) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@19) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@19)) (= $o@@19 this@@1)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@19))
)) ($HeapSuccGhost $Heap@6 $Heap@6)) (and (forall (($o@@20 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@20 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@20) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@20) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@20) $f@@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@20 $f@@1))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@20) $f@@1))
)) (<= (- |N#0| |k#0@1|) |$decr_init$loop#00@0|))))) (and (=> (= (ControlFlow 0 53) 1) anon19_LoopDone_correct) (=> (= (ControlFlow 0 53) 52) anon19_LoopBody_correct))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#1| null $Heap@@0 alloc this@@1)) (=> (and ($Is SeqType |call3formal@arr#0| (TSeq call0formal@_module._default.AllocateArray$G)) ($IsAlloc SeqType |call3formal@arr#0| (TSeq call0formal@_module._default.AllocateArray$G) $Heap@@0)) (and (=> (= (ControlFlow 0 54) (- 0 66)) (<= (LitInt 0) |N#0|)) (=> (<= (LitInt 0) |N#0|) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and ($Is SeqType |call3formal@arr#0@0| (TSeq _module.SparseArray$T@@27)) ($IsAlloc SeqType |call3formal@arr#0@0| (TSeq _module.SparseArray$T@@27) $Heap@0)) (= (|Seq#Length| |call3formal@arr#0@0|) |N#0|)) (and (forall (($o@@21 T@U) ) (!  (=> (and (or (not (= $o@@21 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 $o@@21) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@21) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 $o@@21)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@21))
)) ($HeapSucc $Heap@@0 $Heap@0))) (and (=> (= (ControlFlow 0 54) (- 0 65)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.a))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.a)) (=> (and (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 this@@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this@@1) _module.SparseArray.a ($Box SeqType |call3formal@arr#0@0|)))) ($IsGoodHeap $Heap@1)) (and ($Is SeqType |call3formal@arr#0@@0| (TSeq call0formal@_module._default.AllocateArray$G@@0)) ($IsAlloc SeqType |call3formal@arr#0@@0| (TSeq call0formal@_module._default.AllocateArray$G@@0) $Heap@@0))) (and (=> (= (ControlFlow 0 54) (- 0 64)) (<= (LitInt 0) |N#0|)) (=> (<= (LitInt 0) |N#0|) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and ($Is SeqType |call3formal@arr#0@0@@0| (TSeq TInt)) ($IsAlloc SeqType |call3formal@arr#0@0@@0| (TSeq TInt) $Heap@2)) (= (|Seq#Length| |call3formal@arr#0@0@@0|) |N#0|)) (and (forall (($o@@22 T@U) ) (!  (=> (and (or (not (= $o@@22 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@22) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@22) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@22)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@22))
)) ($HeapSucc $Heap@1 $Heap@2))) (and (=> (= (ControlFlow 0 54) (- 0 63)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.b))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.b)) (=> (and (and (= $Heap@3 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@2 this@@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this@@1) _module.SparseArray.b ($Box SeqType |call3formal@arr#0@0@@0|)))) ($IsGoodHeap $Heap@3)) (and ($Is SeqType |call3formal@arr#0@@1| (TSeq call0formal@_module._default.AllocateArray$G@@1)) ($IsAlloc SeqType |call3formal@arr#0@@1| (TSeq call0formal@_module._default.AllocateArray$G@@1) $Heap@@0))) (and (=> (= (ControlFlow 0 54) (- 0 62)) (<= (LitInt 0) |N#0|)) (=> (<= (LitInt 0) |N#0|) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (and ($Is SeqType |call3formal@arr#0@0@@1| (TSeq TInt)) ($IsAlloc SeqType |call3formal@arr#0@0@@1| (TSeq TInt) $Heap@4)) (= (|Seq#Length| |call3formal@arr#0@0@@1|) |N#0|)) (and (forall (($o@@23 T@U) ) (!  (=> (and (or (not (= $o@@23 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@23) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@23) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@23)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@23))
)) ($HeapSucc $Heap@3 $Heap@4))) (and (=> (= (ControlFlow 0 54) (- 0 61)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.c))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.c)) (=> (and (= $Heap@5 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@4 this@@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 this@@1) _module.SparseArray.c ($Box SeqType |call3formal@arr#0@0@@1|)))) ($IsGoodHeap $Heap@5)) (and (=> (= (ControlFlow 0 54) (- 0 60)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.n))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.SparseArray.n)) (=> (= |$rhs#3@0| (LitInt 0)) (=> (and (= $Heap@6 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@5 this@@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 this@@1) _module.SparseArray.n ($Box intType (int_2_U |$rhs#3@0|))))) ($IsGoodHeap $Heap@6)) (=> (and (and (= |s#0@0| (Lit SeqType |Seq#Empty|)) (= |id#0@0| (Lit SeqType |Seq#Empty|))) (and (= |k#0@0| (LitInt 0)) (= |$decr_init$loop#00@0| (- |N#0| |k#0@0|)))) (and (=> (= (ControlFlow 0 54) (- 0 59)) (=> |$w$loop#0@0| (<= |k#0@0| |N#0|))) (=> (=> |$w$loop#0@0| (<= |k#0@0| |N#0|)) (and (=> (= (ControlFlow 0 54) (- 0 58)) (=> |$w$loop#0@0| (= (|Seq#Length| |s#0@0|) |k#0@0|))) (=> (=> |$w$loop#0@0| (= (|Seq#Length| |s#0@0|) |k#0@0|)) (and (=> (= (ControlFlow 0 54) (- 0 57)) (=> |$w$loop#0@0| (forall ((|i#13@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@3|) (< |i#13@@3| (|Seq#Length| |s#0@0|))) (= (|Seq#Index| |s#0@0| |i#13@@3|) |zero#0|))
 :pattern ( (|Seq#Index| |s#0@0| |i#13@@3|))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#13@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#13@@4|) (< |i#13@@4| (|Seq#Length| |s#0@0|))) (= (|Seq#Index| |s#0@0| |i#13@@4|) |zero#0|))
 :pattern ( (|Seq#Index| |s#0@0| |i#13@@4|))
))) (and (=> (= (ControlFlow 0 54) (- 0 56)) (=> |$w$loop#0@0| (= (|Seq#Length| |id#0@0|) |k#0@0|))) (=> (=> |$w$loop#0@0| (= (|Seq#Length| |id#0@0|) |k#0@0|)) (and (=> (= (ControlFlow 0 54) (- 0 55)) (=> |$w$loop#0@0| (forall ((|i#15@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#15@@1|) (< |i#15@@1| |k#0@0|)) (= (U_2_int ($Unbox intType (|Seq#Index| |id#0@0| |i#15@@1|))) |i#15@@1|))
 :pattern ( ($Unbox intType (|Seq#Index| |id#0@0| |i#15@@1|)))
)))) (=> (=> |$w$loop#0@0| (forall ((|i#15@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#15@@2|) (< |i#15@@2| |k#0@0|)) (= (U_2_int ($Unbox intType (|Seq#Index| |id#0@0| |i#15@@2|))) |i#15@@2|))
 :pattern ( ($Unbox intType (|Seq#Index| |id#0@0| |i#15@@2|)))
))) (=> (= (ControlFlow 0 54) 53) anon19_LoopHead_correct)))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and (and (and (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 (Tclass._module.SparseArray _module.SparseArray$T@@27)) ($IsAlloc refType this@@1 (Tclass._module.SparseArray _module.SparseArray$T@@27) $Heap@@0))) (and ($IsBox |zero#0| _module.SparseArray$T@@27) ($IsAllocBox |zero#0| _module.SparseArray$T@@27 $Heap@@0))) (and (and ($Is SeqType |aa#0| (TSeq _module.SparseArray$T@@27)) ($IsAlloc SeqType |aa#0| (TSeq _module.SparseArray$T@@27) $Heap@@0)) true)) (and (and (and ($Is SeqType |bb#0| (TSeq TInt)) ($IsAlloc SeqType |bb#0| (TSeq TInt) $Heap@@0)) true) (and (and ($Is SeqType |s#0| (TSeq _module.SparseArray$T@@27)) ($IsAlloc SeqType |s#0| (TSeq _module.SparseArray$T@@27) $Heap@@0)) true))) (and (and (and (and ($Is SeqType |id#0| (TSeq TInt)) ($IsAlloc SeqType |id#0| (TSeq TInt) $Heap@@0)) true) (= 1 $FunctionContextHeight)) (and (<= (LitInt 0) |N#0|) (= (ControlFlow 0 67) 54)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
