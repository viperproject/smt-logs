(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun TSet (T@U) T@U)
(declare-fun |Reads1#Handle| (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Injective (T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.Injective#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $AlwaysAllocated (T@U) Bool)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool TagSet alloc Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 tytagFamily$object |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1|)
)
(assert (= (Tag TBool) TagBool))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (Ctor HandleTypeType) 3))
(assert (forall ((f T@U) (t0 T@U) (t1 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) (forall ((bx T@U) ) (!  (=> ($IsBox bx u0) ($IsBox bx t0))
 :pattern ( ($IsBox bx u0))
 :pattern ( ($IsBox bx t0))
))) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 t1) ($IsBox bx@@0 u1))
 :pattern ( ($IsBox bx@@0 t1))
 :pattern ( ($IsBox bx@@0 u1))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
)))
(assert (= (Ctor refType) 4))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h) ($IsAlloc refType |c#0| Tclass._System.object? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h))
)))
(assert (forall (($bx T@U) (|#$T0| T@U) (|#$R| T@U) ($self T@U) ($heap T@U) (|$fh$0x#0| T@U) ) (!  (=> (Requires1 |#$T0| |#$R| $heap $self |$fh$0x#0|) (= (|Set#IsMember| (Reads1 |#$T0| (TSet Tclass._System.object?) $heap (|Reads1#Handle| |#$T0| |#$R| $self) |$fh$0x#0|) $bx) (|Set#IsMember| (Reads1 |#$T0| |#$R| $heap $self |$fh$0x#0|) $bx)))
 :pattern ( (|Set#IsMember| (Reads1 |#$T0| (TSet Tclass._System.object?) $heap (|Reads1#Handle| |#$T0| |#$R| $self) |$fh$0x#0|) $bx))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1@@0 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@0 t1@@0 (MapType0Store t0@@0 t1@@0 m x0 val) x0) val)
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0@@0 u1@@0 (MapType0Store u0@@0 u1@@0 m@@0 x0@@0 val@@0) y0) (MapType0Select u0@@0 u1@@0 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o Tclass._System.object? $h@@0)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o Tclass._System.object? $h@@0))
)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@1) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@1 t1@@1)))) (= (|Set#Equal| (Reads1 t0@@1 t1@@1 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@1 t1@@1 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@1 t1@@1 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@1 t1@@1 heap f@@0 bx0))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (= (Ctor SetType) 8))
(assert (forall ((v T@U) (t0@@2 T@U) ) (! (= ($Is SetType v (TSet t0@@2)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v bx@@1) ($IsBox bx@@1 t0@@2))
 :pattern ( (|Set#IsMember| v bx@@1))
)))
 :pattern ( ($Is SetType v (TSet t0@@2)))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v@@0) t h) ($IsAlloc T@@0 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@0 v@@0) t h))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) (|f#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@0| |#$R@@0|) $h@@1) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@0| |#$R@@0|) $h@@1))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object?))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._System.object)))
 :pattern ( ($IsBox bx@@3 Tclass._System.object))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Injective$X T@U) (_module._default.Injective$Y T@U) ($Heap T@U) (|f#0@@0| T@U) ) (!  (=> (or (|_module.__default.Injective#canCall| _module._default.Injective$X _module._default.Injective$Y $Heap |f#0@@0|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 _module._default.Injective$X _module._default.Injective$Y))) (forall ((|x#1| T@U) ) (!  (=> ($IsBox |x#1| _module._default.Injective$X) (Requires1 _module._default.Injective$X _module._default.Injective$Y $Heap |f#0@@0| |x#1|))
 :pattern ( (Requires1 _module._default.Injective$X _module._default.Injective$Y $Heap |f#0@@0| |x#1|))
))))) (= (_module.__default.Injective _module._default.Injective$X _module._default.Injective$Y $Heap |f#0@@0|) (forall ((|x1#0| T@U) (|x2#0| T@U) ) (!  (=> (and ($IsBox |x1#0| _module._default.Injective$X) ($IsBox |x2#0| _module._default.Injective$X)) (=> (= (Apply1 _module._default.Injective$X _module._default.Injective$Y $Heap |f#0@@0| |x1#0|) (Apply1 _module._default.Injective$X _module._default.Injective$Y $Heap |f#0@@0| |x2#0|)) (= |x1#0| |x2#0|)))
 :pattern ( (Apply1 _module._default.Injective$X _module._default.Injective$Y $Heap |f#0@@0| |x2#0|) (Apply1 _module._default.Injective$X _module._default.Injective$Y $Heap |f#0@@0| |x1#0|))
))))
 :pattern ( (_module.__default.Injective _module._default.Injective$X _module._default.Injective$Y $Heap |f#0@@0|) ($IsGoodHeap $Heap))
))))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._System.object)  (and ($Is refType |c#0@@0| Tclass._System.object?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object?))
)))
(assert (forall ((f@@1 T@U) (t0@@3 T@U) (t1@@2 T@U) (h@@0 T@U) ) (!  (=> (and ($IsGoodHeap h@@0) ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@3 t1@@2) h@@0)) (forall ((bx0@@0 T@U) ) (!  (=> (and ($IsAllocBox bx0@@0 t0@@3 h@@0) (Requires1 t0@@3 t1@@2 h@@0 f@@1 bx0@@0)) ($IsAllocBox (Apply1 t0@@3 t1@@2 h@@0 f@@1 bx0@@0) t1@@2 h@@0))
 :pattern ( (Apply1 t0@@3 t1@@2 h@@0 f@@1 bx0@@0))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@3 t1@@2) h@@0))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ($self@@0 T@U) ($heap@@0 T@U) (|$fh$0x#0@@0| T@U) ) (! (= (Reads1 |#$T0@@1| |#$R@@1| $heap@@0 $self@@0 |$fh$0x#0@@0|) ($Unbox SetType (Apply1 |#$T0@@1| (TSet Tclass._System.object?) $heap@@0 (|Reads1#Handle| |#$T0@@1| |#$R@@1| $self@@0) |$fh$0x#0@@0|)))
 :pattern ( (Reads1 |#$T0@@1| |#$R@@1| $heap@@0 $self@@0 |$fh$0x#0@@0|))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ($self@@1 T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) ) (! (= (Requires1 |#$T0@@2| (TSet Tclass._System.object?) $heap@@1 (|Reads1#Handle| |#$T0@@2| |#$R@@2| $self@@1) |$fh$0x#0@@1|) (Requires1 |#$T0@@2| |#$R@@2| $heap@@1 $self@@1 |$fh$0x#0@@1|))
 :pattern ( (Requires1 |#$T0@@2| (TSet Tclass._System.object?) $heap@@1 (|Reads1#Handle| |#$T0@@2| |#$R@@2| $self@@1) |$fh$0x#0@@1|))
)))
(assert (forall ((f@@2 T@U) (t0@@4 T@U) (t1@@3 T@U) ) (! (= ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@4 t1@@3)) (forall ((h@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@1) ($IsBox bx0@@1 t0@@4)) (Requires1 t0@@4 t1@@3 h@@1 f@@2 bx0@@1)) ($IsBox (Apply1 t0@@4 t1@@3 h@@1 f@@2 bx0@@1) t1@@3))
 :pattern ( (Apply1 t0@@4 t1@@3 h@@1 f@@2 bx0@@1))
)))
 :pattern ( ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@4 t1@@3)))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TBool) (and (= ($Box boolType ($Unbox boolType bx@@4)) bx@@4) ($Is boolType ($Unbox boolType bx@@4) TBool)))
 :pattern ( ($IsBox bx@@4 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v@@1) t@@0) ($Is T@@1 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@1 v@@1) t@@0))
)))
(assert (forall ((ty T@U) ) (!  (=> ($AlwaysAllocated ty) (forall ((h@@2 T@U) (v@@2 T@U) ) (!  (=> ($IsBox v@@2 ty) ($IsAllocBox v@@2 ty h@@2))
 :pattern ( ($IsAllocBox v@@2 ty h@@2))
)))
 :pattern ( ($AlwaysAllocated ty))
)))
(assert (forall ((v@@3 T@U) (t0@@5 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@5) h@@3) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@5) ($IsAllocBox bx@@5 t0@@5 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@5))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@5) h@@3))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@4| |#$R@@4|)) |#$R@@4|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$T0@@5|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))
)))
(assert (forall (($o@@0 T@U) ) (! ($Is refType $o@@0 Tclass._System.object?)
 :pattern ( ($Is refType $o@@0 Tclass._System.object?))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@3 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@3)) x@@3)
 :pattern ( ($Box T@@2 x@@3))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0@@1| T@U) ) (! (= ($Is HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is HandleTypeType |f#0@@1| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@7|) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0@@1| |x0#0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|)))
)))
(assert (forall ((f@@3 T@U) (t0@@6 T@U) (t1@@4 T@U) (h@@4 T@U) ) (!  (=> ($IsGoodHeap h@@4) (= ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@6 t1@@4) h@@4) (forall ((bx0@@2 T@U) ) (!  (=> (and (and ($IsBox bx0@@2 t0@@6) ($IsAllocBox bx0@@2 t0@@6 h@@4)) (Requires1 t0@@6 t1@@4 h@@4 f@@3 bx0@@2)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads1 t0@@6 t1@@4 h@@4 f@@3 bx0@@2) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@6 t1@@4 h@@4 f@@3 bx0@@2) ($Box refType r)))
)))
 :pattern ( (Apply1 t0@@6 t1@@4 h@@4 f@@3 bx0@@2))
 :pattern ( (Reads1 t0@@6 t1@@4 h@@4 f@@3 bx0@@2))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@6 t1@@4) h@@4))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@6)) bx@@6) ($Is HandleTypeType ($Unbox HandleTypeType bx@@6) (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|))))
 :pattern ( ($IsBox bx@@6 (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|)))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._System.___hPartialFunc1 |#$T0@@9| |#$R@@9|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@7)) bx@@7) ($Is HandleTypeType ($Unbox HandleTypeType bx@@7) (Tclass._System.___hPartialFunc1 |#$T0@@9| |#$R@@9|))))
 :pattern ( ($IsBox bx@@7 (Tclass._System.___hPartialFunc1 |#$T0@@9| |#$R@@9|)))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@10| |#$R@@10|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@10| |#$R@@10|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@10| |#$R@@10|))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@11| |#$R@@11|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@11| |#$R@@11|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@11| |#$R@@11|))
)))
(assert (forall ((t0@@7 T@U) (t1@@5 T@U) (heap@@0 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@3 t0@@7) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@7 t1@@5)))) (|Set#Equal| (Reads1 t0@@7 t1@@5 $OneHeap f@@4 bx0@@3) |Set#Empty|)) (= (Requires1 t0@@7 t1@@5 $OneHeap f@@4 bx0@@3) (Requires1 t0@@7 t1@@5 heap@@0 f@@4 bx0@@3)))
 :pattern ( (Requires1 t0@@7 t1@@5 $OneHeap f@@4 bx0@@3) ($IsGoodHeap heap@@0))
 :pattern ( (Requires1 t0@@7 t1@@5 heap@@0 f@@4 bx0@@3))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) ($self@@2 T@U) ($heap@@2 T@U) (|$fh$0x#0@@2| T@U) ) (! (= (Apply1 |#$T0@@12| (TSet Tclass._System.object?) $heap@@2 (|Reads1#Handle| |#$T0@@12| |#$R@@12| $self@@2) |$fh$0x#0@@2|) ($Box SetType (Reads1 |#$T0@@12| |#$R@@12| $heap@@2 $self@@2 |$fh$0x#0@@2|)))
 :pattern ( (Apply1 |#$T0@@12| (TSet Tclass._System.object?) $heap@@2 (|Reads1#Handle| |#$T0@@12| |#$R@@12| $self@@2) |$fh$0x#0@@2|))
)))
(assert (forall ((bx@@8 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@8 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@8)) bx@@8) ($Is SetType ($Unbox SetType bx@@8) (TSet t@@3))))
 :pattern ( ($IsBox bx@@8 (TSet t@@3)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Equal| a@@0 b@@0) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@0 o@@0) (|Set#IsMember| b@@0 o@@0))
 :pattern ( (|Set#IsMember| a@@0 o@@0))
 :pattern ( (|Set#IsMember| b@@0 o@@0))
)))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert  (and (forall ((t0@@8 T@T) (t1@@6 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@8 t1@@6 t2 (MapType1Store t0@@8 t1@@6 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2 (MapType1Store u0@@1 u1@@1 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|l#5| T@U) (|l#6| T@U) (|l#7| T@U) (|l#8| T@U) (|l#9| T@U) (|l#10| T@U) (|l#11| T@U) (|l#12| T@U) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6| |l#7| |l#8| |l#9| |l#10| |l#11| |l#12|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) (exists ((|_x0#0| T@U) (|_obj#0| T@U) ) (!  (and (and (and ($IsBox |_x0#0| |l#3|) ($Is refType |_obj#0| |l#4|)) (|Set#IsMember| (Reads1 |l#5| |l#6| |l#7| |l#8| |_x0#0|) ($Box refType |_obj#0|))) (= ($Box refType $o@@1) ($Box refType |_obj#0|)))
 :pattern ( (|Set#IsMember| (Reads1 |l#9| |l#10| |l#11| |l#12| |_x0#0|) ($Box refType |_obj#0|)))
))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6| |l#7| |l#8| |l#9| |l#10| |l#11| |l#12|) $o@@1 $f))
)))
(assert (forall ((h@@5 T@U) (v@@4 T@U) ) (! ($IsAlloc boolType v@@4 TBool h@@5)
 :pattern ( ($IsAlloc boolType v@@4 TBool h@@5))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is boolType v@@5 TBool)
 :pattern ( ($Is boolType v@@5 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module._default.Injective$X@@0 () T@U)
(declare-fun _module._default.Injective$Y@@0 () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |f#0@@2| () T@U)
(declare-fun |x1#1@0| () T@U)
(declare-fun |x2#1@0| () T@U)
(declare-fun |_x0#2@0| () T@U)
(declare-fun |_obj#2@0| () T@U)
(declare-fun |b$reqreads#1@1| () Bool)
(declare-fun |_x0#1@0| () T@U)
(declare-fun |_obj#1@0| () T@U)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun |x#2@0| () T@U)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 25) (let ((anon12_correct true))
(let ((anon20_Else_correct  (=> (and (or (not (= (Apply1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x1#1@0|) (Apply1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x2#1@0|))) (not true)) (= (ControlFlow 0 5) 2)) anon12_correct)))
(let ((anon20_Then_correct  (=> (and (= (Apply1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x1#1@0|) (Apply1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x2#1@0|)) (= (ControlFlow 0 4) 2)) anon12_correct)))
(let ((anon19_Then_correct  (=> (and (and ($IsBox |x1#1@0| _module._default.Injective$X@@0) ($IsAllocBox |x1#1@0| _module._default.Injective$X@@0 $Heap@@0)) (and ($IsBox |x2#1@0| _module._default.Injective$X@@0) ($IsAllocBox |x2#1@0| _module._default.Injective$X@@0 $Heap@@0))) (and (=> (= (ControlFlow 0 6) (- 0 8)) (Requires1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x1#1@0|)) (=> (Requires1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x1#1@0|) (and (=> (= (ControlFlow 0 6) (- 0 7)) (Requires1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x2#1@0|)) (=> (Requires1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x2#1@0|) (and (=> (= (ControlFlow 0 6) 4) anon20_Then_correct) (=> (= (ControlFlow 0 6) 5) anon20_Else_correct)))))))))
(let ((anon19_Else_correct  (=> (and (not (and (and ($IsBox |x1#1@0| _module._default.Injective$X@@0) ($IsAllocBox |x1#1@0| _module._default.Injective$X@@0 $Heap@@0)) (and ($IsBox |x2#1@0| _module._default.Injective$X@@0) ($IsAllocBox |x2#1@0| _module._default.Injective$X@@0 $Heap@@0)))) (= (ControlFlow 0 3) 2)) anon12_correct)))
(let ((anon18_Then_correct true))
(let ((anon17_Else_correct  (=> (not (|Set#IsMember| (Reads1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |_x0#2@0|) ($Box refType |_obj#2@0|))) (and (and (=> (= (ControlFlow 0 11) 1) anon18_Then_correct) (=> (= (ControlFlow 0 11) 6) anon19_Then_correct)) (=> (= (ControlFlow 0 11) 3) anon19_Else_correct)))))
(let ((anon17_Then_correct  (=> (|Set#IsMember| (Reads1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |_x0#2@0|) ($Box refType |_obj#2@0|)) (and (and (=> (= (ControlFlow 0 10) 1) anon18_Then_correct) (=> (= (ControlFlow 0 10) 6) anon19_Then_correct)) (=> (= (ControlFlow 0 10) 3) anon19_Else_correct)))))
(let ((anon16_Then_correct  (=> (and (and ($IsBox |_x0#2@0| _module._default.Injective$X@@0) ($IsAllocBox |_x0#2@0| _module._default.Injective$X@@0 $Heap@@0)) (and ($Is refType |_obj#2@0| Tclass._System.object?) ($IsAlloc refType |_obj#2@0| Tclass._System.object? $Heap@@0))) (and (=> (= (ControlFlow 0 12) (- 0 14)) true) (and (=> (= (ControlFlow 0 12) (- 0 13)) (Requires1 _module._default.Injective$X@@0 (TSet Tclass._System.object?) $Heap@@0 (|Reads1#Handle| _module._default.Injective$X@@0 _module._default.Injective$Y@@0 |f#0@@2|) |_x0#2@0|)) (=> (Requires1 _module._default.Injective$X@@0 (TSet Tclass._System.object?) $Heap@@0 (|Reads1#Handle| _module._default.Injective$X@@0 _module._default.Injective$Y@@0 |f#0@@2|) |_x0#2@0|) (and (=> (= (ControlFlow 0 12) 10) anon17_Then_correct) (=> (= (ControlFlow 0 12) 11) anon17_Else_correct))))))))
(let ((anon16_Else_correct  (=> (not (and (and ($IsBox |_x0#2@0| _module._default.Injective$X@@0) ($IsAllocBox |_x0#2@0| _module._default.Injective$X@@0 $Heap@@0)) (and ($Is refType |_obj#2@0| Tclass._System.object?) ($IsAlloc refType |_obj#2@0| Tclass._System.object? $Heap@@0)))) (and (and (=> (= (ControlFlow 0 9) 1) anon18_Then_correct) (=> (= (ControlFlow 0 9) 6) anon19_Then_correct)) (=> (= (ControlFlow 0 9) 3) anon19_Else_correct)))))
(let ((anon4_correct  (and (=> (= (ControlFlow 0 15) (- 0 16)) |b$reqreads#1@1|) (=> |b$reqreads#1@1| (and (=> (= (ControlFlow 0 15) 12) anon16_Then_correct) (=> (= (ControlFlow 0 15) 9) anon16_Else_correct))))))
(let ((anon15_Else_correct  (=> (not (|Set#IsMember| (Reads1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |_x0#1@0|) ($Box refType |_obj#1@0|))) (=> (and (= |b$reqreads#1@1| |b$reqreads#1@0|) (= (ControlFlow 0 19) 15)) anon4_correct))))
(let ((anon15_Then_correct  (=> (|Set#IsMember| (Reads1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |_x0#1@0|) ($Box refType |_obj#1@0|)) (=> (and (= |b$reqreads#1@1| |b$reqreads#1@0|) (= (ControlFlow 0 18) 15)) anon4_correct))))
(let ((anon14_Then_correct  (=> (and (and ($IsBox |_x0#1@0| _module._default.Injective$X@@0) ($IsAllocBox |_x0#1@0| _module._default.Injective$X@@0 $Heap@@0)) (and ($Is refType |_obj#1@0| Tclass._System.object?) ($IsAlloc refType |_obj#1@0| Tclass._System.object? $Heap@@0))) (and (=> (= (ControlFlow 0 20) (- 0 22)) true) (and (=> (= (ControlFlow 0 20) (- 0 21)) (Requires1 _module._default.Injective$X@@0 (TSet Tclass._System.object?) $Heap@@0 (|Reads1#Handle| _module._default.Injective$X@@0 _module._default.Injective$Y@@0 |f#0@@2|) |_x0#1@0|)) (=> (Requires1 _module._default.Injective$X@@0 (TSet Tclass._System.object?) $Heap@@0 (|Reads1#Handle| _module._default.Injective$X@@0 _module._default.Injective$Y@@0 |f#0@@2|) |_x0#1@0|) (=> (= |b$reqreads#1@0| (forall (($o@@2 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 $o@@2) alloc)))) (|Set#IsMember| (Reads1 _module._default.Injective$X@@0 (TSet Tclass._System.object?) $Heap@@0 (|Reads1#Handle| _module._default.Injective$X@@0 _module._default.Injective$Y@@0 |f#0@@2|) |_x0#1@0|) ($Box refType $o@@2))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@2 $f@@0))))) (and (=> (= (ControlFlow 0 20) 18) anon15_Then_correct) (=> (= (ControlFlow 0 20) 19) anon15_Else_correct)))))))))
(let ((anon14_Else_correct  (=> (not (and (and ($IsBox |_x0#1@0| _module._default.Injective$X@@0) ($IsAllocBox |_x0#1@0| _module._default.Injective$X@@0 $Heap@@0)) (and ($Is refType |_obj#1@0| Tclass._System.object?) ($IsAlloc refType |_obj#1@0| Tclass._System.object? $Heap@@0)))) (=> (and (= |b$reqreads#1@1| true) (= (ControlFlow 0 17) 15)) anon4_correct))))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@0 alloc _module._default.Injective$X@@0 Tclass._System.object? _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2|)) (=> (and (and (and ($IsBox |x#2@0| _module._default.Injective$X@@0) ($IsAllocBox |x#2@0| _module._default.Injective$X@@0 $Heap@@0)) ($IsAllocBox ($Box HandleTypeType |f#0@@2|) (Tclass._System.___hFunc1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0) $Heap@@0)) (and (and ($IsAllocBox |x#2@0| _module._default.Injective$X@@0 $Heap@@0) (= |b$reqreads#0@0| (forall (($o@@3 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 $o@@3) alloc)))) (|Set#IsMember| (Reads1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x#2@0|) ($Box refType $o@@3))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@3 $f@@1)))))) (and (Requires1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x#2@0|) (forall ((|x#0| T@U) ) (!  (=> ($IsBox |x#0| _module._default.Injective$X@@0) (Requires1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x#0|))
 :pattern ( (Requires1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0 $Heap@@0 |f#0@@2| |x#0|))
))))) (and (=> (= (ControlFlow 0 23) (- 0 24)) |b$reqreads#0@0|) (=> |b$reqreads#0@0| (and (=> (= (ControlFlow 0 23) 20) anon14_Then_correct) (=> (= (ControlFlow 0 23) 17) anon14_Else_correct))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and ($AlwaysAllocated _module._default.Injective$X@@0) ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 _module._default.Injective$X@@0 _module._default.Injective$Y@@0))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 25) 23))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
