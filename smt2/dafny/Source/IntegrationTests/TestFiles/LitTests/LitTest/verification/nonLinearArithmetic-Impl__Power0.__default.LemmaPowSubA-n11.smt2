(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (T@U Bool Int Int) Int)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@22 (Int Int) Bool)
(declare-fun $generated@@23 (Int Int) Int)
(declare-fun $generated@@24 () Bool)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U T@U) Bool)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@48 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@52 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 (T@T T@T) T@T)
(declare-fun $generated@@55 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@109 (T@U) T@U)
(declare-fun $generated@@110 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@25 T@U) ($generated@@26 Int) ($generated@@27 Int) ) (!  (=> (or ($generated@@22 ($generated@@21 $generated@@26) ($generated@@21 $generated@@27)) (and (< 0 $generated@@18) (<= ($generated@@21 0) $generated@@27))) (and (=> (or (not (= ($generated@@21 $generated@@27) ($generated@@21 0))) (not true)) ($generated@@22 ($generated@@21 $generated@@26) ($generated@@21 (- $generated@@27 1)))) (= ($generated@@19 ($generated@@20 $generated@@25) true ($generated@@21 $generated@@26) ($generated@@21 $generated@@27)) (ite (= ($generated@@21 $generated@@27) ($generated@@21 0)) 1 ($generated@@23 ($generated@@21 $generated@@26) ($generated@@19 ($generated@@20 $generated@@25) $generated@@24 ($generated@@21 $generated@@26) ($generated@@21 (- $generated@@27 1))))))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@25) true ($generated@@21 $generated@@26) ($generated@@21 $generated@@27)))
))))
(assert (forall (($generated@@28 Int) ) (! (= ($generated@@21 $generated@@28) $generated@@28)
 :pattern ( ($generated@@21 $generated@@28))
)))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@T) ) (! (= ($generated@@29 $generated@@31 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@31 $generated@@30))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 ($generated@@32 $generated@@35 $generated@@34)) $generated@@34)
 :pattern ( ($generated@@32 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@38 T@U) ) (! (= ($generated@@36 $generated@@4 $generated@@38 $generated@@37) (<= ($generated@@21 0) ($generated@@9 $generated@@38)))
 :pattern ( ($generated@@36 $generated@@4 $generated@@38 $generated@@37))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@39 T@U) ($generated@@40 Int) ($generated@@41 Int) ) (!  (=> (or ($generated@@22 $generated@@40 ($generated@@21 $generated@@41)) (and (< 0 $generated@@18) (<= ($generated@@21 0) $generated@@41))) (and (=> (or (not (= ($generated@@21 $generated@@41) ($generated@@21 0))) (not true)) ($generated@@22 $generated@@40 ($generated@@21 (- $generated@@41 1)))) (= ($generated@@19 ($generated@@20 $generated@@39) true $generated@@40 ($generated@@21 $generated@@41)) (ite (= ($generated@@21 $generated@@41) ($generated@@21 0)) 1 ($generated@@23 $generated@@40 ($generated@@19 ($generated@@20 $generated@@39) $generated@@24 $generated@@40 ($generated@@21 (- $generated@@41 1))))))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@20 $generated@@39) true $generated@@40 ($generated@@21 $generated@@41)))
))))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@T) ) (! (= ($generated@@32 $generated@@43 ($generated@@33 $generated@@43 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@33 $generated@@43 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 Bool) ($generated@@46 Int) ($generated@@47 Int) ) (! (= ($generated@@19 ($generated@@20 $generated@@44) $generated@@45 $generated@@46 $generated@@47) ($generated@@19 $generated@@44 $generated@@45 $generated@@46 $generated@@47))
 :pattern ( ($generated@@19 ($generated@@20 $generated@@44) $generated@@45 $generated@@46 $generated@@47))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@48 $generated@@59 $generated@@60 $generated@@61 ($generated@@55 $generated@@59 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@65 $generated@@62) $generated@@64 $generated@@65) $generated@@62)
 :weight 0
)) (and (forall (($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ) (!  (or (= $generated@@71 $generated@@73) (= ($generated@@48 $generated@@66 $generated@@67 $generated@@68 ($generated@@55 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@71 $generated@@72 $generated@@69) $generated@@73 $generated@@74) ($generated@@48 $generated@@66 $generated@@67 $generated@@68 $generated@@70 $generated@@73 $generated@@74)))
 :weight 0
)) (forall (($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (!  (or (= $generated@@81 $generated@@83) (= ($generated@@48 $generated@@75 $generated@@76 $generated@@77 ($generated@@55 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@81 $generated@@78) $generated@@82 $generated@@83) ($generated@@48 $generated@@75 $generated@@76 $generated@@77 $generated@@79 $generated@@82 $generated@@83)))
 :weight 0
)))) (= ($generated@@2 $generated@@49) 3)) (= ($generated@@2 $generated@@50) 4)) (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@52 $generated@@84 $generated@@85 ($generated@@56 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@86) $generated@@88) $generated@@86)
 :weight 0
))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@93 $generated@@94) (= ($generated@@52 $generated@@89 $generated@@90 ($generated@@56 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@91) $generated@@94) ($generated@@52 $generated@@89 $generated@@90 $generated@@92 $generated@@94)))
 :weight 0
))) (= ($generated@@2 $generated@@53) 5)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ) (= ($generated@@2 ($generated@@54 $generated@@95 $generated@@96)) 6))) (forall (($generated@@97 T@T) ($generated@@98 T@T) ) (! (= ($generated@@57 ($generated@@54 $generated@@97 $generated@@98)) $generated@@97)
 :pattern ( ($generated@@54 $generated@@97 $generated@@98))
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (! (= ($generated@@58 ($generated@@54 $generated@@99 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@54 $generated@@99 $generated@@100))
))))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 Bool) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@7 ($generated@@48 $generated@@49 $generated@@50 $generated@@3 ($generated@@51 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))  (=> (and (or (not (= $generated@@105 $generated@@101)) (not true)) ($generated@@7 ($generated@@32 $generated@@3 ($generated@@52 $generated@@50 $generated@@53 ($generated@@52 $generated@@49 ($generated@@54 $generated@@50 $generated@@53) $generated@@102 $generated@@105) $generated@@103)))) $generated@@104))
 :pattern ( ($generated@@48 $generated@@49 $generated@@50 $generated@@3 ($generated@@51 $generated@@101 $generated@@102 $generated@@103 $generated@@104) $generated@@105 $generated@@106))
)))
(assert (forall (($generated@@107 Int) ($generated@@108 Int) ) (! (= ($generated@@23 $generated@@107 $generated@@108) (* $generated@@107 $generated@@108))
 :pattern ( ($generated@@23 $generated@@107 $generated@@108))
)))
(assert (= ($generated@@109 $generated@@37) $generated@@0))
(assert (= ($generated@@110 $generated@@37) $generated@@1))
(assert (forall (($generated@@111 Int) ) (! (= ($generated@@33 $generated@@4 ($generated@@8 ($generated@@21 $generated@@111))) ($generated@@29 $generated@@53 ($generated@@33 $generated@@4 ($generated@@8 $generated@@111))))
 :pattern ( ($generated@@33 $generated@@4 ($generated@@8 ($generated@@21 $generated@@111))))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@T) ) (! (= ($generated@@33 $generated@@113 ($generated@@29 $generated@@113 $generated@@112)) ($generated@@29 $generated@@53 ($generated@@33 $generated@@113 $generated@@112)))
 :pattern ( ($generated@@33 $generated@@113 ($generated@@29 $generated@@113 $generated@@112)))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@114 T@U) ($generated@@115 Int) ($generated@@116 Int) ) (!  (=> (or ($generated@@22 $generated@@115 $generated@@116) (and (< 0 $generated@@18) (<= ($generated@@21 0) $generated@@116))) (and (=> (or (not (= $generated@@116 ($generated@@21 0))) (not true)) ($generated@@22 $generated@@115 (- $generated@@116 1))) (= ($generated@@19 ($generated@@20 $generated@@114) true $generated@@115 $generated@@116) (ite (= $generated@@116 ($generated@@21 0)) 1 ($generated@@23 $generated@@115 ($generated@@19 $generated@@114 $generated@@24 $generated@@115 (- $generated@@116 1)))))))
 :pattern ( ($generated@@19 ($generated@@20 $generated@@114) true $generated@@115 $generated@@116))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 (T@U) Bool)
(declare-fun $generated@@124 () T@U)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@128  (=> (= $generated@@117 ($generated@@51 $generated@@118 $generated@@119 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@36 $generated@@4 ($generated@@8 (- $generated@@120 $generated@@121)) $generated@@37)) (=> ($generated@@36 $generated@@4 ($generated@@8 (- $generated@@120 $generated@@121)) $generated@@37) (=> (= $generated@@122 (- $generated@@120 $generated@@121)) (=> (and ($generated@@123 $generated@@124) ($generated@@125 $generated@@124)) (=> (and (and (and ($generated@@22 $generated@@126 (+ $generated@@122 $generated@@121)) (and ($generated@@22 $generated@@126 $generated@@122) ($generated@@22 $generated@@126 $generated@@121))) (= ($generated@@19 ($generated@@20 ($generated@@20 $generated@@127)) $generated@@24 $generated@@126 (+ $generated@@122 $generated@@121)) ($generated@@23 ($generated@@19 ($generated@@20 ($generated@@20 $generated@@127)) $generated@@24 $generated@@126 $generated@@122) ($generated@@19 ($generated@@20 ($generated@@20 $generated@@127)) $generated@@24 $generated@@126 $generated@@121)))) (and (= $generated@@119 $generated@@124) (= (ControlFlow 0 2) (- 0 1)))) (= ($generated@@23 ($generated@@19 ($generated@@20 ($generated@@20 $generated@@127)) $generated@@24 $generated@@126 (- $generated@@120 $generated@@121)) ($generated@@19 ($generated@@20 ($generated@@20 $generated@@127)) $generated@@24 $generated@@126 $generated@@121)) ($generated@@19 ($generated@@20 ($generated@@20 $generated@@127)) $generated@@24 $generated@@126 $generated@@120))))))))))
(let (($generated@@129  (=> (and (and (and ($generated@@123 $generated@@119) ($generated@@125 $generated@@119)) (<= ($generated@@21 0) $generated@@120)) (and (and (<= ($generated@@21 0) $generated@@121) (= 2 $generated@@18)) (and (>= $generated@@120 $generated@@121) (= (ControlFlow 0 4) 2)))) $generated@@128)))
$generated@@129)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
