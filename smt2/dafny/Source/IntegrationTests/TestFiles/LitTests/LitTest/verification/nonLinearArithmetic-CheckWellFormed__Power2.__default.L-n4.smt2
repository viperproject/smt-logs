(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () Int)
(declare-fun $generated@@26 (T@U Bool Int Int) Int)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (Int) Int)
(declare-fun $generated@@29 (Int Int) Bool)
(declare-fun $generated@@30 (Int Int) Bool)
(declare-fun $generated@@31 (Int Int) Int)
(declare-fun $generated@@32 (Int Int) Int)
(declare-fun $generated@@33 () Bool)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@48 (T@T T@U T@U) Bool)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@63 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@64 () T@T)
(declare-fun $generated@@65 (T@T T@T) T@T)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@120 (Int Int) Bool)
(declare-fun $generated@@127 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@6 $generated@@23 $generated@@22 $generated@@24))
)))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@34 T@U) ($generated@@35 Int) ($generated@@36 Int) ) (!  (=> (or ($generated@@29 $generated@@35 ($generated@@28 $generated@@36)) (and (< 0 $generated@@25) ($generated@@30 0 $generated@@36))) (and (=> (or (not (= ($generated@@28 $generated@@36) ($generated@@28 0))) (not true)) ($generated@@29 $generated@@35 ($generated@@28 ($generated@@31 $generated@@36 1)))) (= ($generated@@26 ($generated@@27 $generated@@34) true $generated@@35 ($generated@@28 $generated@@36)) (ite (= ($generated@@28 $generated@@36) ($generated@@28 0)) 1 ($generated@@32 $generated@@35 ($generated@@26 ($generated@@27 $generated@@34) $generated@@33 $generated@@35 ($generated@@28 ($generated@@31 $generated@@36 1))))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@34) true $generated@@35 ($generated@@28 $generated@@36)))
))))
(assert (forall (($generated@@37 Int) ) (! (= ($generated@@28 $generated@@37) $generated@@37)
 :pattern ( ($generated@@28 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 $generated@@39) $generated@@39)
 :pattern ( ($generated@@38 $generated@@40 $generated@@39))
)))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@T) ) (! (= ($generated@@42 $generated@@44 ($generated@@41 $generated@@44 $generated@@43)) $generated@@43)
 :pattern ( ($generated@@41 $generated@@44 $generated@@43))
)))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@45 T@U) ($generated@@46 Int) ($generated@@47 Int) ) (!  (=> (or ($generated@@29 $generated@@46 $generated@@47) (and (< 0 $generated@@25) ($generated@@30 0 $generated@@47))) (and (=> (or (not (= $generated@@47 ($generated@@28 0))) (not true)) ($generated@@29 $generated@@46 ($generated@@31 $generated@@47 1))) (= ($generated@@26 ($generated@@27 $generated@@45) true $generated@@46 $generated@@47) (ite (= $generated@@47 ($generated@@28 0)) 1 ($generated@@32 $generated@@46 ($generated@@26 $generated@@45 $generated@@33 $generated@@46 ($generated@@31 $generated@@47 1)))))))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@45) true $generated@@46 $generated@@47))
))))
(assert (forall (($generated@@49 T@U) ) (! (= ($generated@@48 $generated@@6 $generated@@49 $generated@@22) ($generated@@30 0 ($generated@@11 $generated@@49)))
 :pattern ( ($generated@@48 $generated@@6 $generated@@49 $generated@@22))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@41 $generated@@51 ($generated@@42 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@42 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 Bool) ($generated@@54 Int) ($generated@@55 Int) ) (! (= ($generated@@26 ($generated@@27 $generated@@52) $generated@@53 $generated@@54 $generated@@55) ($generated@@26 $generated@@52 $generated@@53 $generated@@54 $generated@@55))
 :pattern ( ($generated@@26 ($generated@@27 $generated@@52) $generated@@53 $generated@@54 $generated@@55))
)))
(assert  (=> (<= 0 $generated@@25) (forall (($generated@@56 T@U) ($generated@@57 Int) ($generated@@58 Int) ) (!  (=> (or ($generated@@29 ($generated@@28 $generated@@57) ($generated@@28 $generated@@58)) (and (< 0 $generated@@25) ($generated@@30 0 $generated@@58))) (and (=> (or (not (= ($generated@@28 $generated@@58) ($generated@@28 0))) (not true)) ($generated@@29 ($generated@@28 $generated@@57) ($generated@@28 ($generated@@31 $generated@@58 1)))) (= ($generated@@26 ($generated@@27 $generated@@56) true ($generated@@28 $generated@@57) ($generated@@28 $generated@@58)) (ite (= ($generated@@28 $generated@@58) ($generated@@28 0)) 1 ($generated@@32 $generated@@57 ($generated@@26 ($generated@@27 $generated@@56) $generated@@33 ($generated@@28 $generated@@57) ($generated@@28 ($generated@@31 $generated@@58 1))))))))
 :weight 3
 :pattern ( ($generated@@26 ($generated@@27 $generated@@56) true ($generated@@28 $generated@@57) ($generated@@28 $generated@@58)))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@59 $generated@@70 $generated@@71 $generated@@72 ($generated@@66 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@75 $generated@@76) $generated@@73)
 :weight 0
)) (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@59 $generated@@77 $generated@@78 $generated@@79 ($generated@@66 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@84 $generated@@85) ($generated@@59 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@84 $generated@@85)))
 :weight 0
)) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@59 $generated@@86 $generated@@87 $generated@@88 ($generated@@66 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@59 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)))) (= ($generated@@4 $generated@@60) 3)) (= ($generated@@4 $generated@@61) 4)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@63 $generated@@95 $generated@@96 ($generated@@67 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@97) $generated@@99) $generated@@97)
 :weight 0
))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@104 $generated@@105) (= ($generated@@63 $generated@@100 $generated@@101 ($generated@@67 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@102) $generated@@105) ($generated@@63 $generated@@100 $generated@@101 $generated@@103 $generated@@105)))
 :weight 0
))) (= ($generated@@4 $generated@@64) 5)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ) (= ($generated@@4 ($generated@@65 $generated@@106 $generated@@107)) 6))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ) (! (= ($generated@@68 ($generated@@65 $generated@@108 $generated@@109)) $generated@@108)
 :pattern ( ($generated@@65 $generated@@108 $generated@@109))
))) (forall (($generated@@110 T@T) ($generated@@111 T@T) ) (! (= ($generated@@69 ($generated@@65 $generated@@110 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@65 $generated@@110 $generated@@111))
))))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 Bool) ($generated@@116 T@U) ($generated@@117 T@U) ) (! (= ($generated@@9 ($generated@@59 $generated@@60 $generated@@61 $generated@@5 ($generated@@62 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))  (=> (and (or (not (= $generated@@116 $generated@@112)) (not true)) ($generated@@9 ($generated@@41 $generated@@5 ($generated@@63 $generated@@61 $generated@@64 ($generated@@63 $generated@@60 ($generated@@65 $generated@@61 $generated@@64) $generated@@113 $generated@@116) $generated@@114)))) $generated@@115))
 :pattern ( ($generated@@59 $generated@@60 $generated@@61 $generated@@5 ($generated@@62 $generated@@112 $generated@@113 $generated@@114 $generated@@115) $generated@@116 $generated@@117))
)))
(assert (forall (($generated@@118 Int) ($generated@@119 Int) ) (! (= ($generated@@30 $generated@@118 $generated@@119) (<= $generated@@118 $generated@@119))
 :pattern ( ($generated@@30 $generated@@118 $generated@@119))
)))
(assert (forall (($generated@@121 Int) ($generated@@122 Int) ) (! (= ($generated@@120 $generated@@121 $generated@@122) (>= $generated@@121 $generated@@122))
 :pattern ( ($generated@@120 $generated@@121 $generated@@122))
)))
(assert (forall (($generated@@123 Int) ($generated@@124 Int) ) (! (= ($generated@@31 $generated@@123 $generated@@124) (- $generated@@123 $generated@@124))
 :pattern ( ($generated@@31 $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@125 Int) ($generated@@126 Int) ) (! (= ($generated@@32 $generated@@125 $generated@@126) (* $generated@@125 $generated@@126))
 :pattern ( ($generated@@32 $generated@@125 $generated@@126))
)))
(assert (= ($generated@@20 $generated@@22) $generated@@2))
(assert (= ($generated@@127 $generated@@22) $generated@@3))
(assert (forall (($generated@@128 Int) ) (! (= ($generated@@42 $generated@@6 ($generated@@10 ($generated@@28 $generated@@128))) ($generated@@38 $generated@@64 ($generated@@42 $generated@@6 ($generated@@10 $generated@@128))))
 :pattern ( ($generated@@42 $generated@@6 ($generated@@10 ($generated@@28 $generated@@128))))
)))
(assert (forall (($generated@@129 T@U) ($generated@@130 T@T) ) (! (= ($generated@@42 $generated@@130 ($generated@@38 $generated@@130 $generated@@129)) ($generated@@38 $generated@@64 ($generated@@42 $generated@@130 $generated@@129)))
 :pattern ( ($generated@@42 $generated@@130 ($generated@@38 $generated@@130 $generated@@129)))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ) (! ($generated@@21 $generated@@6 $generated@@132 $generated $generated@@131)
 :pattern ( ($generated@@21 $generated@@6 $generated@@132 $generated $generated@@131))
)))
(assert (forall (($generated@@133 T@U) ) (! ($generated@@48 $generated@@6 $generated@@133 $generated)
 :pattern ( ($generated@@48 $generated@@6 $generated@@133 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 (T@U) Bool)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 (T@U) Bool)
(declare-fun $generated@@142 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@143  (=> (and (= $generated@@134 ($generated@@62 $generated@@135 $generated@@136 $generated@@1 false)) ($generated@@120 $generated@@137 $generated@@138)) (=> (and (and (and ($generated@@139 $generated@@140) ($generated@@141 $generated@@140)) (= $generated@@136 $generated@@140)) (and ($generated@@21 $generated@@6 ($generated@@10 $generated@@142) $generated $generated@@140) (= (ControlFlow 0 2) (- 0 1)))) ($generated@@48 $generated@@6 ($generated@@10 ($generated@@31 $generated@@137 $generated@@138)) $generated@@22)))))
(let (($generated@@144  (=> (and ($generated@@139 $generated@@136) ($generated@@141 $generated@@136)) (=> (and (and ($generated@@30 0 $generated@@137) ($generated@@30 0 $generated@@138)) (and (= 2 $generated@@25) (= (ControlFlow 0 3) 2))) $generated@@143))))
$generated@@144)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
