(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.Option () T@U)
(declare-fun |##_module.Option.None| () T@U)
(declare-fun |##_module.Option.Some| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |_module.Option#Equal| (T@U T@U) Bool)
(declare-fun _module.Option.Some_q (T@U) Bool)
(declare-fun _module.Option.value (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Option.None| () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Option (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.Option.None_q (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.IsConsistent (T@U Int) Bool)
(declare-fun |_module.__default.IsConsistent#canCall| (T@U Int) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.Option.Some| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |$IsA#_module.Option| (T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass._module.Option_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc Tagclass._System.nat Tagclass._module.Option |##_module.Option.None| |##_module.Option.Some| tytagFamily$nat tytagFamily$Option)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (_module.Option.Some_q a) (_module.Option.Some_q b)) (= (|_module.Option#Equal| a b) (= (_module.Option.value a) (_module.Option.value b))))
 :pattern ( (|_module.Option#Equal| a b) (_module.Option.Some_q a))
 :pattern ( (|_module.Option#Equal| a b) (_module.Option.Some_q b))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.Option.None|) |##_module.Option.None|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.Option$X T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$X) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$X) $h@@0))
)))
(assert (forall ((_module.Option$X@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$X@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$X@@0)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|_module.Option#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|_module.Option#Equal| a@@0 b@@0))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor SeqType) 8))
(assert (forall ((s T@U) (bx T@U) (t T@U) ) (!  (=> (and ($Is SeqType s (TSeq t)) ($IsBox bx t)) ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
)))
(assert (forall ((d T@U) ) (! (= (_module.Option.None_q d) (= (DatatypeCtorId d) |##_module.Option.None|))
 :pattern ( (_module.Option.None_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Option.Some_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Option.Some|))
 :pattern ( (_module.Option.Some_q d@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|board#0| T@U) (|pos#0| Int) ) (!  (=> (or (|_module.__default.IsConsistent#canCall| (Lit SeqType |board#0|) (LitInt |pos#0|)) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |board#0| (TSeq TInt)) (<= (LitInt 0) |pos#0|)))) (= (_module.__default.IsConsistent (Lit SeqType |board#0|) (LitInt |pos#0|))  (and (< |pos#0| (|Seq#Length| (Lit SeqType |board#0|))) (forall ((|q#1| Int) ) (!  (and (and (=> (and (<= (LitInt 0) |q#1|) (< |q#1| |pos#0|)) (or (not (= (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) |q#1|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) (LitInt |pos#0|)))))) (not true))) (=> (and (<= (LitInt 0) |q#1|) (< |q#1| |pos#0|)) (or (not (= (- (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) |q#1|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) (LitInt |pos#0|))))) (- |pos#0| |q#1|))) (not true)))) (=> (and (<= (LitInt 0) |q#1|) (< |q#1| |pos#0|)) (or (not (= (- (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) (LitInt |pos#0|)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) |q#1|)))) (- |pos#0| |q#1|))) (not true))))
 :pattern ( ($Unbox intType (|Seq#Index| |board#0| |q#1|)))
)))))
 :weight 3
 :pattern ( (_module.__default.IsConsistent (Lit SeqType |board#0|) (LitInt |pos#0|)))
))))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Option.None_q d@@1) (= d@@1 |#_module.Option.None|))
 :pattern ( (_module.Option.None_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Option.Some_q d@@2) (exists ((|a#5#0#0| T@U) ) (= d@@2 (|#_module.Option.Some| |a#5#0#0|))))
 :pattern ( (_module.Option.Some_q d@@2))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall ((s@@0 T@U) (v T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@0 v)) (+ 1 (|Seq#Length| s@@0)))
 :pattern ( (|Seq#Build| s@@0 v))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@0 h@@0) ($IsAlloc T@@1 v@@0 t@@0 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@0 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@1 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@1 h@@1) ($IsAllocBox bx@@0 t@@1 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@1 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@2 h@@2) ($IsAlloc T@@2 v@@1 t@@2 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@2 h@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|board#0@@0| T@U) (|pos#0@@0| Int) ) (!  (=> (or (|_module.__default.IsConsistent#canCall| |board#0@@0| |pos#0@@0|) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |board#0@@0| (TSeq TInt)) (<= (LitInt 0) |pos#0@@0|)))) (= (_module.__default.IsConsistent |board#0@@0| |pos#0@@0|)  (and (< |pos#0@@0| (|Seq#Length| |board#0@@0|)) (forall ((|q#0| Int) ) (!  (and (and (=> (and (<= (LitInt 0) |q#0|) (< |q#0| |pos#0@@0|)) (or (not (= (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |q#0|))) (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |pos#0@@0|))))) (not true))) (=> (and (<= (LitInt 0) |q#0|) (< |q#0| |pos#0@@0|)) (or (not (= (- (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |q#0|))) (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |pos#0@@0|)))) (- |pos#0@@0| |q#0|))) (not true)))) (=> (and (<= (LitInt 0) |q#0|) (< |q#0| |pos#0@@0|)) (or (not (= (- (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |pos#0@@0|))) (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |q#0|)))) (- |pos#0@@0| |q#0|))) (not true))))
 :pattern ( ($Unbox intType (|Seq#Index| |board#0@@0| |q#0|)))
)))))
 :pattern ( (_module.__default.IsConsistent |board#0@@0| |pos#0@@0|))
))))
(assert (forall ((_module.Option$X@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Option _module.Option$X@@1)) Tagclass._module.Option) (= (TagFamily (Tclass._module.Option _module.Option$X@@1)) tytagFamily$Option))
 :pattern ( (Tclass._module.Option _module.Option$X@@1))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0 s1)))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@1 Tclass._System.nat))
)))
(assert (forall ((s@@1 T@U) (i Int) (v@@2 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@1)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@2) i) v@@2)) (=> (or (not (= i (|Seq#Length| s@@1))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@2) i) (|Seq#Index| s@@1 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@1 v@@2) i))
)))
(assert (forall ((_module.Option$X@@2 T@U) (|a#6#0#0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_module.Option.Some| |a#6#0#0|) (Tclass._module.Option _module.Option$X@@2) $h@@1) ($IsAllocBox |a#6#0#0| _module.Option$X@@2 $h@@1)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Option.Some| |a#6#0#0|) (Tclass._module.Option _module.Option$X@@2) $h@@1))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#_module.Option| d@@3) (or (_module.Option.None_q d@@3) (_module.Option.Some_q d@@3)))
 :pattern ( (|$IsA#_module.Option| d@@3))
)))
(assert (forall ((_module.Option$X@@3 T@U) (d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 (Tclass._module.Option _module.Option$X@@3)) (or (_module.Option.None_q d@@4) (_module.Option.Some_q d@@4)))
 :pattern ( (_module.Option.Some_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.Option _module.Option$X@@3)))
 :pattern ( (_module.Option.None_q d@@4) ($Is DatatypeTypeType d@@4 (Tclass._module.Option _module.Option$X@@3)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (c T@U) ) (!  (=> (or (not (= a@@1 c)) (not true)) (=> (and ($HeapSucc a@@1 b@@1) ($HeapSucc b@@1 c)) ($HeapSucc a@@1 c)))
 :pattern ( ($HeapSucc a@@1 b@@1) ($HeapSucc b@@1 c))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((v@@3 T@U) (t@@3 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@3) t@@3) ($Is T@@3 v@@3 t@@3))
 :pattern ( ($IsBox ($Box T@@3 v@@3) t@@3))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.Option.None_q a@@2) (_module.Option.None_q b@@2)) (|_module.Option#Equal| a@@2 b@@2))
 :pattern ( (|_module.Option#Equal| a@@2 b@@2) (_module.Option.None_q a@@2))
 :pattern ( (|_module.Option#Equal| a@@2 b@@2) (_module.Option.None_q b@@2))
)))
(assert (forall ((v@@4 T@U) (t0@@0 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@0) h@@3) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i@@0) t0@@0 h@@3))
 :pattern ( (|Seq#Index| v@@4 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@0) h@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSeq (TSeq t@@4)) t@@4)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSeq t@@5)) TagSeq)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((_module.Option$X@@4 T@U) ) (! (= (Tclass._module.Option_0 (Tclass._module.Option _module.Option$X@@4)) _module.Option$X@@4)
 :pattern ( (Tclass._module.Option _module.Option$X@@4))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Option.Some| |a#4#0#0|)) |##_module.Option.Some|)
 :pattern ( (|#_module.Option.Some| |a#4#0#0|))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (_module.Option.value (|#_module.Option.Some| |a#8#0#0|)) |a#8#0#0|)
 :pattern ( (|#_module.Option.Some| |a#8#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_module.Option$X@@5 T@U) (|a#6#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Option.Some| |a#6#0#0@@0|) (Tclass._module.Option _module.Option$X@@5)) ($IsBox |a#6#0#0@@0| _module.Option$X@@5))
 :pattern ( ($Is DatatypeTypeType (|#_module.Option.Some| |a#6#0#0@@0|) (Tclass._module.Option _module.Option$X@@5)))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.Option.Some| |a#9#0#0|)))
 :pattern ( (|#_module.Option.Some| |a#9#0#0|))
)))
(assert (forall ((d@@5 T@U) (_module.Option$X@@6 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Option.Some_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass._module.Option _module.Option$X@@6) $h@@2))) ($IsAllocBox (_module.Option.value d@@5) _module.Option$X@@6 $h@@2))
 :pattern ( ($IsAllocBox (_module.Option.value d@@5) _module.Option$X@@6 $h@@2))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((s@@3 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@3 val@@4)) s@@3) (= (|Seq#Build_inv1| (|Seq#Build| s@@3 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@3 val@@4))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((bx@@3 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@3 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@3)) bx@@3) ($Is SeqType ($Unbox SeqType bx@@3) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@3 (TSeq t@@6)))
)))
(assert (forall ((_module.Option$X@@7 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass._module.Option _module.Option$X@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) (Tclass._module.Option _module.Option$X@@7))))
 :pattern ( ($IsBox bx@@4 (Tclass._module.Option _module.Option$X@@7)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= |#_module.Option.None| (Lit DatatypeTypeType |#_module.Option.None|)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n Int) ) (! (= (|Seq#SameUntil| s0@@0 s1@@0 n) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j n)) (= (|Seq#Index| s0@@0 j) (|Seq#Index| s1@@0 j)))
 :pattern ( (|Seq#Index| s0@@0 j))
 :pattern ( (|Seq#Index| s1@@0 j))
)))
 :pattern ( (|Seq#SameUntil| s0@@0 s1@@0 n))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@0 Int) ) (!  (and (=> (< n@@0 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@0) (|Seq#Index| s0@@1 n@@0))) (=> (<= (|Seq#Length| s0@@1) n@@0) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@0) (|Seq#Index| s1@@1 (- n@@0 (|Seq#Length| s0@@1))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@0))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= (|#_module.Option.Some| (Lit BoxType |a#7#0#0|)) (Lit DatatypeTypeType (|#_module.Option.Some| |a#7#0#0|)))
 :pattern ( (|#_module.Option.Some| (Lit BoxType |a#7#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((s@@4 T@U) ) (!  (=> (= (|Seq#Length| s@@4) 0) (= s@@4 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert (forall ((h@@4 T@U) (v@@5 T@U) ) (! ($IsAlloc intType v@@5 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@5 TInt h@@4))
)))
(assert (forall ((v@@6 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@2)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@1) t0@@2))
 :pattern ( (|Seq#Index| v@@6 i@@1))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@2)))
)))
(assert (forall ((s@@5 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@5))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))) (|Seq#Rank| s@@5)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is intType v@@7 TInt)
 :pattern ( ($Is intType v@@7 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |p#5@0| () Int)
(declare-fun |N#0| () Int)
(declare-fun |B#2@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |boardSoFar#0| () T@U)
(declare-fun |pos#0@0| () Int)
(declare-fun |n#0@0| () Int)
(declare-fun |i#3@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |r#0@3| () T@U)
(declare-fun |call3formal@r#0@0| () T@U)
(declare-fun |r#0@2| () T@U)
(declare-fun |r#0@0| () T@U)
(declare-fun |n#0@1| () Int)
(declare-fun |candidateBoard#1_0@1| () T@U)
(declare-fun |call3formal@r#0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun null () T@U)
(declare-fun |k#1_0_0@1| () Int)
(declare-fun |B#1_1_0@1| () T@U)
(declare-fun |i#1_1_0@1| () Int)
(declare-fun |r#0@1| () T@U)
(declare-fun |candidateBoard#1_0@0| () T@U)
(declare-fun |n#0#lo@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |r#0| () T@U)
(declare-fun |candidateBoard#1_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 101) (let ((anon72_Else_correct true))
(let ((anon82_Else_correct true))
(let ((anon31_correct true))
(let ((anon84_Else_correct  (=> (and (not (and (<= (LitInt 0) |p#5@0|) (< |p#5@0| |N#0|))) (= (ControlFlow 0 64) 58)) anon31_correct)))
(let ((anon84_Then_correct  (=> (and (and (<= (LitInt 0) |p#5@0|) (< |p#5@0| |N#0|)) ($IsAlloc SeqType |B#2@0| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 62) (- 0 63)) ($Is intType (int_2_U |p#5@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |p#5@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |p#5@0|) Tclass._System.nat $Heap@0) (=> (and (|_module.__default.IsConsistent#canCall| |B#2@0| |p#5@0|) (= (ControlFlow 0 62) 58)) anon31_correct)))))))
(let ((anon83_Else_correct  (=> (< |p#5@0| (LitInt 0)) (and (=> (= (ControlFlow 0 66) 62) anon84_Then_correct) (=> (= (ControlFlow 0 66) 64) anon84_Else_correct)))))
(let ((anon83_Then_correct  (=> (<= (LitInt 0) |p#5@0|) (and (=> (= (ControlFlow 0 65) 62) anon84_Then_correct) (=> (= (ControlFlow 0 65) 64) anon84_Else_correct)))))
(let ((anon82_Then_correct  (and (=> (= (ControlFlow 0 67) 65) anon83_Then_correct) (=> (= (ControlFlow 0 67) 66) anon83_Else_correct))))
(let ((anon81_Then_correct  (=> (and (and (and (= (|Seq#Length| |B#2@0|) |N#0|) (forall ((|i#4| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#4|) (< |i#4| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4|))))) (=> (and (<= (LitInt 0) |i#4|) (< |i#4| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#2@0| |i#4|)))
))) (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#2@0|)) (|Seq#SameUntil| |boardSoFar#0| |B#2@0| (|Seq#Length| |boardSoFar#0|)))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |pos#0@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |pos#0@0|))) |n#0@0|))) (and (=> (= (ControlFlow 0 68) 67) anon82_Then_correct) (=> (= (ControlFlow 0 68) 61) anon82_Else_correct)))))
(let ((anon81_Else_correct  (=> (and (not (and (and (and (= (|Seq#Length| |B#2@0|) |N#0|) (forall ((|i#4@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#4@@0|) (< |i#4@@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@0|))))) (=> (and (<= (LitInt 0) |i#4@@0|) (< |i#4@@0| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@0|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@0|)))
))) (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#2@0|)) (|Seq#SameUntil| |boardSoFar#0| |B#2@0| (|Seq#Length| |boardSoFar#0|)))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |pos#0@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |pos#0@0|))) |n#0@0|)))) (= (ControlFlow 0 60) 58)) anon31_correct)))
(let ((anon80_Else_correct  (=> (< (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |pos#0@0|))) (LitInt 0)) (and (=> (= (ControlFlow 0 72) 68) anon81_Then_correct) (=> (= (ControlFlow 0 72) 60) anon81_Else_correct)))))
(let ((anon80_Then_correct  (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |pos#0@0|)))) (and (=> (= (ControlFlow 0 70) (- 0 71)) (and (<= 0 |pos#0@0|) (< |pos#0@0| (|Seq#Length| |B#2@0|)))) (and (=> (= (ControlFlow 0 70) 68) anon81_Then_correct) (=> (= (ControlFlow 0 70) 60) anon81_Else_correct))))))
(let ((anon79_Then_correct  (=> (and (and (= (|Seq#Length| |B#2@0|) |N#0|) (forall ((|i#4@@1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#4@@1|) (< |i#4@@1| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@1|))))) (=> (and (<= (LitInt 0) |i#4@@1|) (< |i#4@@1| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@1|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@1|)))
))) (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#2@0|)) (|Seq#SameUntil| |boardSoFar#0| |B#2@0| (|Seq#Length| |boardSoFar#0|)))) (and (=> (= (ControlFlow 0 73) (- 0 74)) (and (<= 0 |pos#0@0|) (< |pos#0@0| (|Seq#Length| |B#2@0|)))) (and (=> (= (ControlFlow 0 73) 70) anon80_Then_correct) (=> (= (ControlFlow 0 73) 72) anon80_Else_correct))))))
(let ((anon79_Else_correct  (=> (not (and (and (= (|Seq#Length| |B#2@0|) |N#0|) (forall ((|i#4@@2| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#4@@2|) (< |i#4@@2| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@2|))))) (=> (and (<= (LitInt 0) |i#4@@2|) (< |i#4@@2| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@2|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@2|)))
))) (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#2@0|)) (|Seq#SameUntil| |boardSoFar#0| |B#2@0| (|Seq#Length| |boardSoFar#0|))))) (and (=> (= (ControlFlow 0 69) 68) anon81_Then_correct) (=> (= (ControlFlow 0 69) 60) anon81_Else_correct)))))
(let ((anon78_Else_correct  (=> (not (and (= (|Seq#Length| |B#2@0|) |N#0|) (forall ((|i#4@@3| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#4@@3|) (< |i#4@@3| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@3|))))) (=> (and (<= (LitInt 0) |i#4@@3|) (< |i#4@@3| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@3|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@3|)))
)))) (and (=> (= (ControlFlow 0 76) 73) anon79_Then_correct) (=> (= (ControlFlow 0 76) 69) anon79_Else_correct)))))
(let ((anon78_Then_correct  (=> (and (= (|Seq#Length| |B#2@0|) |N#0|) (forall ((|i#4@@4| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#4@@4|) (< |i#4@@4| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@4|))))) (=> (and (<= (LitInt 0) |i#4@@4|) (< |i#4@@4| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@4|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#2@0| |i#4@@4|)))
))) (and (=> (= (ControlFlow 0 75) 73) anon79_Then_correct) (=> (= (ControlFlow 0 75) 69) anon79_Else_correct)))))
(let ((anon77_Else_correct  (=> (not (and (<= (LitInt 0) |i#3@0|) (< |i#3@0| |N#0|))) (and (=> (= (ControlFlow 0 82) 75) anon78_Then_correct) (=> (= (ControlFlow 0 82) 76) anon78_Else_correct)))))
(let ((anon77_Then_correct  (=> (and (<= (LitInt 0) |i#3@0|) (< |i#3@0| |N#0|)) (and (=> (= (ControlFlow 0 80) (- 0 81)) (and (<= 0 |i#3@0|) (< |i#3@0| (|Seq#Length| |B#2@0|)))) (and (=> (= (ControlFlow 0 80) 75) anon78_Then_correct) (=> (= (ControlFlow 0 80) 76) anon78_Else_correct))))))
(let ((anon76_Else_correct  (=> (< |i#3@0| (LitInt 0)) (and (=> (= (ControlFlow 0 84) 80) anon77_Then_correct) (=> (= (ControlFlow 0 84) 82) anon77_Else_correct)))))
(let ((anon76_Then_correct  (=> (<= (LitInt 0) |i#3@0|) (and (=> (= (ControlFlow 0 83) 80) anon77_Then_correct) (=> (= (ControlFlow 0 83) 82) anon77_Else_correct)))))
(let ((anon75_Then_correct  (=> (=> (and (<= (LitInt 0) |i#3@0|) (< |i#3@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#3@0|))))) (and (=> (= (ControlFlow 0 85) 83) anon76_Then_correct) (=> (= (ControlFlow 0 85) 84) anon76_Else_correct)))))
(let ((anon75_Else_correct  (=> (not (=> (and (<= (LitInt 0) |i#3@0|) (< |i#3@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#2@0| |i#3@0|)))))) (and (=> (= (ControlFlow 0 79) 75) anon78_Then_correct) (=> (= (ControlFlow 0 79) 76) anon78_Else_correct)))))
(let ((anon74_Else_correct  (=> (not (and (<= (LitInt 0) |i#3@0|) (< |i#3@0| |N#0|))) (and (=> (= (ControlFlow 0 88) 85) anon75_Then_correct) (=> (= (ControlFlow 0 88) 79) anon75_Else_correct)))))
(let ((anon74_Then_correct  (=> (and (<= (LitInt 0) |i#3@0|) (< |i#3@0| |N#0|)) (and (=> (= (ControlFlow 0 86) (- 0 87)) (and (<= 0 |i#3@0|) (< |i#3@0| (|Seq#Length| |B#2@0|)))) (and (=> (= (ControlFlow 0 86) 85) anon75_Then_correct) (=> (= (ControlFlow 0 86) 79) anon75_Else_correct))))))
(let ((anon73_Else_correct  (=> (< |i#3@0| (LitInt 0)) (and (=> (= (ControlFlow 0 90) 86) anon74_Then_correct) (=> (= (ControlFlow 0 90) 88) anon74_Else_correct)))))
(let ((anon73_Then_correct  (=> (<= (LitInt 0) |i#3@0|) (and (=> (= (ControlFlow 0 89) 86) anon74_Then_correct) (=> (= (ControlFlow 0 89) 88) anon74_Else_correct)))))
(let ((anon72_Then_correct  (and (=> (= (ControlFlow 0 91) 89) anon73_Then_correct) (=> (= (ControlFlow 0 91) 90) anon73_Else_correct))))
(let ((anon71_Then_correct  (=> (= (|Seq#Length| |B#2@0|) |N#0|) (and (=> (= (ControlFlow 0 92) 91) anon72_Then_correct) (=> (= (ControlFlow 0 92) 78) anon72_Else_correct)))))
(let ((anon71_Else_correct  (=> (or (not (= (|Seq#Length| |B#2@0|) |N#0|)) (not true)) (and (=> (= (ControlFlow 0 77) 75) anon78_Then_correct) (=> (= (ControlFlow 0 77) 76) anon78_Else_correct)))))
(let ((anon70_Then_correct  (=> (and ($Is SeqType |B#2@0| (TSeq TInt)) ($IsAlloc SeqType |B#2@0| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 93) 92) anon71_Then_correct) (=> (= (ControlFlow 0 93) 77) anon71_Else_correct)))))
(let ((anon70_Else_correct  (=> (and (not (and ($Is SeqType |B#2@0| (TSeq TInt)) ($IsAlloc SeqType |B#2@0| (TSeq TInt) $Heap@0))) (= (ControlFlow 0 59) 58)) anon31_correct)))
(let ((anon69_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 94) 93) anon70_Then_correct) (=> (= (ControlFlow 0 94) 59) anon70_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 33) (- 0 35)) (=> (_module.Option.Some_q |r#0@3|) (let ((|newBoard#0| ($Unbox SeqType (_module.Option.value |r#0@3|))))
(= (|Seq#Length| |newBoard#0|) |N#0|)))) (=> (=> (_module.Option.Some_q |r#0@3|) (let ((|newBoard#0@@0| ($Unbox SeqType (_module.Option.value |r#0@3|))))
(= (|Seq#Length| |newBoard#0@@0|) |N#0|))) (and (=> (= (ControlFlow 0 33) (- 0 34)) (=> (_module.Option.Some_q |r#0@3|) (let ((|newBoard#0@@1| ($Unbox SeqType (_module.Option.value |r#0@3|))))
(forall ((|p#1| Int) ) (!  (=> (and (<= (LitInt 0) |p#1|) (< |p#1| |N#0|)) (_module.__default.IsConsistent |newBoard#0@@1| |p#1|))
 :pattern ( (_module.__default.IsConsistent |newBoard#0@@1| |p#1|))
))))) (=> (=> (_module.Option.Some_q |r#0@3|) (let ((|newBoard#0@@2| ($Unbox SeqType (_module.Option.value |r#0@3|))))
(forall ((|p#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |p#1@@0|) (< |p#1@@0| |N#0|)) (_module.__default.IsConsistent |newBoard#0@@2| |p#1@@0|))
 :pattern ( (_module.__default.IsConsistent |newBoard#0@@2| |p#1@@0|))
)))) (=> (= (ControlFlow 0 33) (- 0 32)) (=> (|_module.Option#Equal| |r#0@3| |#_module.Option.None|) (forall ((|B#1| T@U) ) (!  (=> ($Is SeqType |B#1| (TSeq TInt)) (=> (and (and (= (|Seq#Length| |B#1|) |N#0|) (forall ((|i#2| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#2|) (< |i#2| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1| |i#2|))))) (=> (and (<= (LitInt 0) |i#2|) (< |i#2| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1| |i#2|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1| |i#2|)))
))) (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#1|)) (|Seq#SameUntil| |boardSoFar#0| |B#1| (|Seq#Length| |boardSoFar#0|)))) (exists ((|p#4| Int) ) (!  (and (and (<= (LitInt 0) |p#4|) (< |p#4| |N#0|)) (not (_module.__default.IsConsistent |B#1| |p#4|)))
 :pattern ( (_module.__default.IsConsistent |B#1| |p#4|))
))))
 :pattern ( (|Seq#Length| |B#1|))
))))))))))
(let ((anon91_Then_correct  (=> (_module.Option.Some_q |call3formal@r#0@0|) (=> (and (= |r#0@3| |call3formal@r#0@0|) (= (ControlFlow 0 38) 33)) GeneratedUnifiedExit_correct))))
(let ((anon85_Then_correct  (=> (and (and (= |n#0@0| |N#0|) (= |r#0@2| (Lit DatatypeTypeType |#_module.Option.None|))) (and (= |r#0@3| |r#0@2|) (= (ControlFlow 0 37) 33))) GeneratedUnifiedExit_correct)))
(let ((anon67_Then_correct  (=> (and (and (= |pos#0@0| |N#0|) (= |r#0@0| (|#_module.Option.Some| ($Box SeqType |boardSoFar#0|)))) (and (= |r#0@3| |r#0@0|) (= (ControlFlow 0 36) 33))) GeneratedUnifiedExit_correct)))
(let ((anon87_Else_correct true))
(let ((anon94_Else_correct true))
(let ((anon65_correct  (=> (= |n#0@1| (+ |n#0@0| 1)) (=> (and (and (forall ((|B#3| T@U) ) (!  (=> ($Is SeqType |B#3| (TSeq TInt)) (=> (= (|Seq#Length| |B#3|) |N#0|) (=> (forall ((|i#5| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#5|) (< |i#5| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3| |i#5|))))) (=> (and (<= (LitInt 0) |i#5|) (< |i#5| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3| |i#5|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3| |i#5|)))
)) (=> (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#3|)) (|Seq#SameUntil| |boardSoFar#0| |B#3| (|Seq#Length| |boardSoFar#0|))) (=> (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3| |pos#0@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3| |pos#0@0|))) |n#0@1|)) (forall ((|p#6| Int) ) (!  (=> (and (<= (LitInt 0) |p#6|) (< |p#6| |N#0|)) (|_module.__default.IsConsistent#canCall| |B#3| |p#6|))
 :pattern ( (_module.__default.IsConsistent |B#3| |p#6|))
)))))))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3| |pos#0@0|)))
 :pattern ( (|Seq#Length| |B#3|))
)) (= (ControlFlow 0 3) (- 0 2))) |$w$loop#0@0|) (forall ((|B#3@@0| T@U) ) (!  (=> ($Is SeqType |B#3@@0| (TSeq TInt)) (=> (and (and (and (= (|Seq#Length| |B#3@@0|) |N#0|) (forall ((|i#5@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#5@@0|) (< |i#5@@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@0| |i#5@@0|))))) (=> (and (<= (LitInt 0) |i#5@@0|) (< |i#5@@0| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@0| |i#5@@0|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@0| |i#5@@0|)))
))) (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#3@@0|)) (|Seq#SameUntil| |boardSoFar#0| |B#3@@0| (|Seq#Length| |boardSoFar#0|)))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@0| |pos#0@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@0| |pos#0@0|))) |n#0@1|))) (exists ((|p#6@@0| Int) ) (!  (and (and (<= (LitInt 0) |p#6@@0|) (< |p#6@@0| |N#0|)) (not (_module.__default.IsConsistent |B#3@@0| |p#6@@0|)))
 :pattern ( (_module.__default.IsConsistent |B#3@@0| |p#6@@0|))
))))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@0| |pos#0@0|)))
 :pattern ( (|Seq#Length| |B#3@@0|))
))))))
(let ((anon91_Else_correct  (=> (and (not (_module.Option.Some_q |call3formal@r#0@0|)) (= (ControlFlow 0 31) 3)) anon65_correct)))
(let ((anon42_correct  (=> (forall ((|k#1_0_1| Int) ) (!  (=> (and (<= (LitInt 0) |k#1_0_1|) (< |k#1_0_1| (|Seq#Length| |boardSoFar#0|))) (and (|_module.__default.IsConsistent#canCall| |boardSoFar#0| |k#1_0_1|) (=> (_module.__default.IsConsistent |boardSoFar#0| |k#1_0_1|) (|_module.__default.IsConsistent#canCall| |candidateBoard#1_0@1| |k#1_0_1|))))
 :pattern ( (_module.__default.IsConsistent |candidateBoard#1_0@1| |k#1_0_1|))
 :pattern ( (_module.__default.IsConsistent |boardSoFar#0| |k#1_0_1|))
)) (and (=> (= (ControlFlow 0 39) (- 0 44)) (forall ((|k#1_0_1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |k#1_0_1@@0|) (< |k#1_0_1@@0| (|Seq#Length| |boardSoFar#0|))) (_module.__default.IsConsistent |boardSoFar#0| |k#1_0_1@@0|)) (_module.__default.IsConsistent |candidateBoard#1_0@1| |k#1_0_1@@0|))
 :pattern ( (_module.__default.IsConsistent |candidateBoard#1_0@1| |k#1_0_1@@0|))
 :pattern ( (_module.__default.IsConsistent |boardSoFar#0| |k#1_0_1@@0|))
))) (=> (forall ((|k#1_0_1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |k#1_0_1@@1|) (< |k#1_0_1@@1| (|Seq#Length| |boardSoFar#0|))) (_module.__default.IsConsistent |boardSoFar#0| |k#1_0_1@@1|)) (_module.__default.IsConsistent |candidateBoard#1_0@1| |k#1_0_1@@1|))
 :pattern ( (_module.__default.IsConsistent |candidateBoard#1_0@1| |k#1_0_1@@1|))
 :pattern ( (_module.__default.IsConsistent |boardSoFar#0| |k#1_0_1@@1|))
)) (and (=> (= (ControlFlow 0 39) (- 0 43)) (or (<= 0 (- |N#0| (|Seq#Length| |boardSoFar#0|))) (= (- |N#0| (|Seq#Length| |candidateBoard#1_0@1|)) (- |N#0| (|Seq#Length| |boardSoFar#0|))))) (=> (or (<= 0 (- |N#0| (|Seq#Length| |boardSoFar#0|))) (= (- |N#0| (|Seq#Length| |candidateBoard#1_0@1|)) (- |N#0| (|Seq#Length| |boardSoFar#0|)))) (and (=> (= (ControlFlow 0 39) (- 0 42)) (< (- |N#0| (|Seq#Length| |candidateBoard#1_0@1|)) (- |N#0| (|Seq#Length| |boardSoFar#0|)))) (=> (< (- |N#0| (|Seq#Length| |candidateBoard#1_0@1|)) (- |N#0| (|Seq#Length| |boardSoFar#0|))) (=> (and ($Is DatatypeTypeType |call3formal@r#0| (Tclass._module.Option (TSeq TInt))) ($IsAlloc DatatypeTypeType |call3formal@r#0| (Tclass._module.Option (TSeq TInt)) $Heap)) (and (=> (= (ControlFlow 0 39) (- 0 41)) (<= (|Seq#Length| |candidateBoard#1_0@1|) |N#0|)) (=> (<= (|Seq#Length| |candidateBoard#1_0@1|) |N#0|) (and (=> (= (ControlFlow 0 39) (- 0 40)) (forall ((|k#1| Int) ) (!  (=> (and (<= (LitInt 0) |k#1|) (< |k#1| (|Seq#Length| |candidateBoard#1_0@1|))) (_module.__default.IsConsistent |candidateBoard#1_0@1| |k#1|))
 :pattern ( (_module.__default.IsConsistent |candidateBoard#1_0@1| |k#1|))
))) (=> (forall ((|k#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |k#1@@0|) (< |k#1@@0| (|Seq#Length| |candidateBoard#1_0@1|))) (_module.__default.IsConsistent |candidateBoard#1_0@1| |k#1@@0|))
 :pattern ( (_module.__default.IsConsistent |candidateBoard#1_0@1| |k#1@@0|))
)) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (and (and ($Is DatatypeTypeType |call3formal@r#0@0| (Tclass._module.Option (TSeq TInt))) ($IsAlloc DatatypeTypeType |call3formal@r#0@0| (Tclass._module.Option (TSeq TInt)) $Heap@1)) (=> (_module.Option.Some_q |call3formal@r#0@0|) (let ((|newBoard#0@@3| ($Unbox SeqType (_module.Option.value |call3formal@r#0@0|))))
 (=> (= (|Seq#Length| |newBoard#0@@3|) |N#0|) (forall ((|p#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |p#1@@1|) (< |p#1@@1| |N#0|)) (|_module.__default.IsConsistent#canCall| |newBoard#0@@3| |p#1@@1|))
 :pattern ( (_module.__default.IsConsistent |newBoard#0@@3| |p#1@@1|))
)))))) (and (=> (_module.Option.Some_q |call3formal@r#0@0|) (let ((|newBoard#0@@4| ($Unbox SeqType (_module.Option.value |call3formal@r#0@0|))))
(= (|Seq#Length| |newBoard#0@@4|) |N#0|))) (=> (_module.Option.Some_q |call3formal@r#0@0|) (let ((|newBoard#0@@5| ($Unbox SeqType (_module.Option.value |call3formal@r#0@0|))))
(forall ((|p#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |p#1@@2|) (< |p#1@@2| |N#0|)) (_module.__default.IsConsistent |newBoard#0@@5| |p#1@@2|))
 :pattern ( (_module.__default.IsConsistent |newBoard#0@@5| |p#1@@2|))
)))))) (and (and (and (|$IsA#_module.Option| |call3formal@r#0@0|) (=> (|_module.Option#Equal| |call3formal@r#0@0| |#_module.Option.None|) (forall ((|B#1@@0| T@U) ) (!  (=> ($Is SeqType |B#1@@0| (TSeq TInt)) (=> (= (|Seq#Length| |B#1@@0|) |N#0|) (=> (forall ((|i#2@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1@@0| |i#2@@0|))))) (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1@@0| |i#2@@0|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1@@0| |i#2@@0|)))
)) (=> (and (<= (|Seq#Length| |candidateBoard#1_0@1|) (|Seq#Length| |B#1@@0|)) (|Seq#SameUntil| |candidateBoard#1_0@1| |B#1@@0| (|Seq#Length| |candidateBoard#1_0@1|))) (forall ((|p#4@@0| Int) ) (!  (=> (and (<= (LitInt 0) |p#4@@0|) (< |p#4@@0| |N#0|)) (|_module.__default.IsConsistent#canCall| |B#1@@0| |p#4@@0|))
 :pattern ( (_module.__default.IsConsistent |B#1@@0| |p#4@@0|))
))))))
 :pattern ( (|Seq#Length| |B#1@@0|))
)))) (=> (|_module.Option#Equal| |call3formal@r#0@0| |#_module.Option.None|) (forall ((|B#1@@1| T@U) ) (!  (=> ($Is SeqType |B#1@@1| (TSeq TInt)) (=> (and (and (= (|Seq#Length| |B#1@@1|) |N#0|) (forall ((|i#2@@1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1@@1| |i#2@@1|))))) (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1@@1| |i#2@@1|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1@@1| |i#2@@1|)))
))) (and (<= (|Seq#Length| |candidateBoard#1_0@1|) (|Seq#Length| |B#1@@1|)) (|Seq#SameUntil| |candidateBoard#1_0@1| |B#1@@1| (|Seq#Length| |candidateBoard#1_0@1|)))) (exists ((|p#4@@1| Int) ) (!  (and (and (<= (LitInt 0) |p#4@@1|) (< |p#4@@1| |N#0|)) (not (_module.__default.IsConsistent |B#1@@1| |p#4@@1|)))
 :pattern ( (_module.__default.IsConsistent |B#1@@1| |p#4@@1|))
))))
 :pattern ( (|Seq#Length| |B#1@@1|))
)))) (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@0))
)) ($HeapSucc $Heap@0 $Heap@1)))) (and (=> (= (ControlFlow 0 39) 38) anon91_Then_correct) (=> (= (ControlFlow 0 39) 31) anon91_Else_correct))))))))))))))))))
(let ((anon90_Else_correct  (=> (and (not (and (and (<= (LitInt 0) |k#1_0_0@1|) (< |k#1_0_0@1| (|Seq#Length| |boardSoFar#0|))) (_module.__default.IsConsistent |boardSoFar#0| |k#1_0_0@1|))) (= (ControlFlow 0 47) 39)) anon42_correct)))
(let ((anon90_Then_correct  (=> (and (and (and (<= (LitInt 0) |k#1_0_0@1|) (< |k#1_0_0@1| (|Seq#Length| |boardSoFar#0|))) (_module.__default.IsConsistent |boardSoFar#0| |k#1_0_0@1|)) ($IsAlloc SeqType |candidateBoard#1_0@1| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 45) (- 0 46)) ($Is intType (int_2_U |k#1_0_0@1|) Tclass._System.nat)) (=> ($Is intType (int_2_U |k#1_0_0@1|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |k#1_0_0@1|) Tclass._System.nat $Heap@0) (=> (and (|_module.__default.IsConsistent#canCall| |candidateBoard#1_0@1| |k#1_0_0@1|) (= (ControlFlow 0 45) 39)) anon42_correct)))))))
(let ((anon89_Else_correct  (=> (not (and (<= (LitInt 0) |k#1_0_0@1|) (< |k#1_0_0@1| (|Seq#Length| |boardSoFar#0|)))) (and (=> (= (ControlFlow 0 50) 45) anon90_Then_correct) (=> (= (ControlFlow 0 50) 47) anon90_Else_correct)))))
(let ((anon89_Then_correct  (=> (and (and (<= (LitInt 0) |k#1_0_0@1|) (< |k#1_0_0@1| (|Seq#Length| |boardSoFar#0|))) ($IsAlloc SeqType |boardSoFar#0| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 48) (- 0 49)) ($Is intType (int_2_U |k#1_0_0@1|) Tclass._System.nat)) (=> ($Is intType (int_2_U |k#1_0_0@1|) Tclass._System.nat) (=> (and ($IsAlloc intType (int_2_U |k#1_0_0@1|) Tclass._System.nat $Heap@0) (|_module.__default.IsConsistent#canCall| |boardSoFar#0| |k#1_0_0@1|)) (and (=> (= (ControlFlow 0 48) 45) anon90_Then_correct) (=> (= (ControlFlow 0 48) 47) anon90_Else_correct))))))))
(let ((anon88_Else_correct  (=> (< |k#1_0_0@1| (LitInt 0)) (and (=> (= (ControlFlow 0 52) 48) anon89_Then_correct) (=> (= (ControlFlow 0 52) 50) anon89_Else_correct)))))
(let ((anon88_Then_correct  (=> (<= (LitInt 0) |k#1_0_0@1|) (and (=> (= (ControlFlow 0 51) 48) anon89_Then_correct) (=> (= (ControlFlow 0 51) 50) anon89_Else_correct)))))
(let ((anon87_Then_correct  (and (=> (= (ControlFlow 0 53) 51) anon88_Then_correct) (=> (= (ControlFlow 0 53) 52) anon88_Else_correct))))
(let ((anon86_Then_correct  (=> (_module.__default.IsConsistent |candidateBoard#1_0@1| |pos#0@0|) (and (=> (= (ControlFlow 0 54) 53) anon87_Then_correct) (=> (= (ControlFlow 0 54) 30) anon87_Else_correct)))))
(let ((anon64_correct  (=> (forall ((|B#1_1_1| T@U) ) (!  (=> ($Is SeqType |B#1_1_1| (TSeq TInt)) (=> (= (|Seq#Length| |B#1_1_1|) |N#0|) (=> (forall ((|i#1_1_2| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1_1_2|) (< |i#1_1_2| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_1| |i#1_1_2|))))) (=> (and (<= (LitInt 0) |i#1_1_2|) (< |i#1_1_2| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_1| |i#1_1_2|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1_1_1| |i#1_1_2|)))
)) (=> (and (<= (|Seq#Length| |candidateBoard#1_0@1|) (|Seq#Length| |B#1_1_1|)) (|Seq#SameUntil| |candidateBoard#1_0@1| |B#1_1_1| (|Seq#Length| |candidateBoard#1_0@1|))) (|_module.__default.IsConsistent#canCall| |B#1_1_1| |pos#0@0|)))))
 :pattern ( (_module.__default.IsConsistent |B#1_1_1| |pos#0@0|))
 :pattern ( (|Seq#Length| |B#1_1_1|))
)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (forall ((|B#1_1_1@@0| T@U) ) (!  (=> ($Is SeqType |B#1_1_1@@0| (TSeq TInt)) (=> (and (and (= (|Seq#Length| |B#1_1_1@@0|) |N#0|) (forall ((|i#1_1_2@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1_1_2@@0|) (< |i#1_1_2@@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_1@@0| |i#1_1_2@@0|))))) (=> (and (<= (LitInt 0) |i#1_1_2@@0|) (< |i#1_1_2@@0| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_1@@0| |i#1_1_2@@0|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1_1_1@@0| |i#1_1_2@@0|)))
))) (and (<= (|Seq#Length| |candidateBoard#1_0@1|) (|Seq#Length| |B#1_1_1@@0|)) (|Seq#SameUntil| |candidateBoard#1_0@1| |B#1_1_1@@0| (|Seq#Length| |candidateBoard#1_0@1|)))) (not (_module.__default.IsConsistent |B#1_1_1@@0| |pos#0@0|))))
 :pattern ( (_module.__default.IsConsistent |B#1_1_1@@0| |pos#0@0|))
 :pattern ( (|Seq#Length| |B#1_1_1@@0|))
))) (=> (forall ((|B#1_1_1@@1| T@U) ) (!  (=> ($Is SeqType |B#1_1_1@@1| (TSeq TInt)) (=> (and (and (= (|Seq#Length| |B#1_1_1@@1|) |N#0|) (forall ((|i#1_1_2@@1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1_1_2@@1|) (< |i#1_1_2@@1| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_1@@1| |i#1_1_2@@1|))))) (=> (and (<= (LitInt 0) |i#1_1_2@@1|) (< |i#1_1_2@@1| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_1@@1| |i#1_1_2@@1|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1_1_1@@1| |i#1_1_2@@1|)))
))) (and (<= (|Seq#Length| |candidateBoard#1_0@1|) (|Seq#Length| |B#1_1_1@@1|)) (|Seq#SameUntil| |candidateBoard#1_0@1| |B#1_1_1@@1| (|Seq#Length| |candidateBoard#1_0@1|)))) (not (_module.__default.IsConsistent |B#1_1_1@@1| |pos#0@0|))))
 :pattern ( (_module.__default.IsConsistent |B#1_1_1@@1| |pos#0@0|))
 :pattern ( (|Seq#Length| |B#1_1_1@@1|))
)) (=> (= (ControlFlow 0 4) 3) anon65_correct))))))
(let ((anon101_Else_correct  (=> (and (not (and (and (= (|Seq#Length| |B#1_1_0@1|) |N#0|) (forall ((|i#1_1_1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1_1_1|) (< |i#1_1_1| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1|))))) (=> (and (<= (LitInt 0) |i#1_1_1|) (< |i#1_1_1| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1|)))
))) (and (<= (|Seq#Length| |candidateBoard#1_0@1|) (|Seq#Length| |B#1_1_0@1|)) (|Seq#SameUntil| |candidateBoard#1_0@1| |B#1_1_0@1| (|Seq#Length| |candidateBoard#1_0@1|))))) (= (ControlFlow 0 9) 4)) anon64_correct)))
(let ((anon101_Then_correct  (=> (and (and (and (= (|Seq#Length| |B#1_1_0@1|) |N#0|) (forall ((|i#1_1_1@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1_1_1@@0|) (< |i#1_1_1@@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1@@0|))))) (=> (and (<= (LitInt 0) |i#1_1_1@@0|) (< |i#1_1_1@@0| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1@@0|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1@@0|)))
))) (and (<= (|Seq#Length| |candidateBoard#1_0@1|) (|Seq#Length| |B#1_1_0@1|)) (|Seq#SameUntil| |candidateBoard#1_0@1| |B#1_1_0@1| (|Seq#Length| |candidateBoard#1_0@1|)))) ($IsAlloc SeqType |B#1_1_0@1| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 7) (- 0 8)) ($Is intType (int_2_U |pos#0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |pos#0@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |pos#0@0|) Tclass._System.nat $Heap@0) (=> (and (|_module.__default.IsConsistent#canCall| |B#1_1_0@1| |pos#0@0|) (= (ControlFlow 0 7) 4)) anon64_correct)))))))
(let ((anon100_Else_correct  (=> (not (and (= (|Seq#Length| |B#1_1_0@1|) |N#0|) (forall ((|i#1_1_1@@1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1_1_1@@1|) (< |i#1_1_1@@1| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1@@1|))))) (=> (and (<= (LitInt 0) |i#1_1_1@@1|) (< |i#1_1_1@@1| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1@@1|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1@@1|)))
)))) (and (=> (= (ControlFlow 0 11) 7) anon101_Then_correct) (=> (= (ControlFlow 0 11) 9) anon101_Else_correct)))))
(let ((anon100_Then_correct  (=> (and (= (|Seq#Length| |B#1_1_0@1|) |N#0|) (forall ((|i#1_1_1@@2| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1_1_1@@2|) (< |i#1_1_1@@2| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1@@2|))))) (=> (and (<= (LitInt 0) |i#1_1_1@@2|) (< |i#1_1_1@@2| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1@@2|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_1@@2|)))
))) (and (=> (= (ControlFlow 0 10) 7) anon101_Then_correct) (=> (= (ControlFlow 0 10) 9) anon101_Else_correct)))))
(let ((anon99_Else_correct  (=> (not (and (<= (LitInt 0) |i#1_1_0@1|) (< |i#1_1_0@1| |N#0|))) (and (=> (= (ControlFlow 0 17) 10) anon100_Then_correct) (=> (= (ControlFlow 0 17) 11) anon100_Else_correct)))))
(let ((anon99_Then_correct  (=> (and (<= (LitInt 0) |i#1_1_0@1|) (< |i#1_1_0@1| |N#0|)) (and (=> (= (ControlFlow 0 15) (- 0 16)) (and (<= 0 |i#1_1_0@1|) (< |i#1_1_0@1| (|Seq#Length| |B#1_1_0@1|)))) (and (=> (= (ControlFlow 0 15) 10) anon100_Then_correct) (=> (= (ControlFlow 0 15) 11) anon100_Else_correct))))))
(let ((anon98_Else_correct  (=> (< |i#1_1_0@1| (LitInt 0)) (and (=> (= (ControlFlow 0 19) 15) anon99_Then_correct) (=> (= (ControlFlow 0 19) 17) anon99_Else_correct)))))
(let ((anon98_Then_correct  (=> (<= (LitInt 0) |i#1_1_0@1|) (and (=> (= (ControlFlow 0 18) 15) anon99_Then_correct) (=> (= (ControlFlow 0 18) 17) anon99_Else_correct)))))
(let ((anon97_Then_correct  (=> (=> (and (<= (LitInt 0) |i#1_1_0@1|) (< |i#1_1_0@1| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_0@1|))))) (and (=> (= (ControlFlow 0 20) 18) anon98_Then_correct) (=> (= (ControlFlow 0 20) 19) anon98_Else_correct)))))
(let ((anon97_Else_correct  (=> (not (=> (and (<= (LitInt 0) |i#1_1_0@1|) (< |i#1_1_0@1| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#1_1_0@1| |i#1_1_0@1|)))))) (and (=> (= (ControlFlow 0 14) 10) anon100_Then_correct) (=> (= (ControlFlow 0 14) 11) anon100_Else_correct)))))
(let ((anon96_Else_correct  (=> (not (and (<= (LitInt 0) |i#1_1_0@1|) (< |i#1_1_0@1| |N#0|))) (and (=> (= (ControlFlow 0 23) 20) anon97_Then_correct) (=> (= (ControlFlow 0 23) 14) anon97_Else_correct)))))
(let ((anon96_Then_correct  (=> (and (<= (LitInt 0) |i#1_1_0@1|) (< |i#1_1_0@1| |N#0|)) (and (=> (= (ControlFlow 0 21) (- 0 22)) (and (<= 0 |i#1_1_0@1|) (< |i#1_1_0@1| (|Seq#Length| |B#1_1_0@1|)))) (and (=> (= (ControlFlow 0 21) 20) anon97_Then_correct) (=> (= (ControlFlow 0 21) 14) anon97_Else_correct))))))
(let ((anon95_Else_correct  (=> (< |i#1_1_0@1| (LitInt 0)) (and (=> (= (ControlFlow 0 25) 21) anon96_Then_correct) (=> (= (ControlFlow 0 25) 23) anon96_Else_correct)))))
(let ((anon95_Then_correct  (=> (<= (LitInt 0) |i#1_1_0@1|) (and (=> (= (ControlFlow 0 24) 21) anon96_Then_correct) (=> (= (ControlFlow 0 24) 23) anon96_Else_correct)))))
(let ((anon94_Then_correct  (and (=> (= (ControlFlow 0 26) 24) anon95_Then_correct) (=> (= (ControlFlow 0 26) 25) anon95_Else_correct))))
(let ((anon93_Then_correct  (=> (= (|Seq#Length| |B#1_1_0@1|) |N#0|) (and (=> (= (ControlFlow 0 27) 26) anon94_Then_correct) (=> (= (ControlFlow 0 27) 13) anon94_Else_correct)))))
(let ((anon93_Else_correct  (=> (or (not (= (|Seq#Length| |B#1_1_0@1|) |N#0|)) (not true)) (and (=> (= (ControlFlow 0 12) 10) anon100_Then_correct) (=> (= (ControlFlow 0 12) 11) anon100_Else_correct)))))
(let ((anon92_Then_correct  (=> (and ($Is SeqType |B#1_1_0@1| (TSeq TInt)) ($IsAlloc SeqType |B#1_1_0@1| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 28) 27) anon93_Then_correct) (=> (= (ControlFlow 0 28) 12) anon93_Else_correct)))))
(let ((anon92_Else_correct  (=> (and (not (and ($Is SeqType |B#1_1_0@1| (TSeq TInt)) ($IsAlloc SeqType |B#1_1_0@1| (TSeq TInt) $Heap@0))) (= (ControlFlow 0 6) 4)) anon64_correct)))
(let ((anon86_Else_correct  (=> (not (_module.__default.IsConsistent |candidateBoard#1_0@1| |pos#0@0|)) (and (=> (= (ControlFlow 0 29) 28) anon92_Then_correct) (=> (= (ControlFlow 0 29) 6) anon92_Else_correct)))))
(let ((anon85_Else_correct  (=> (or (not (= |n#0@0| |N#0|)) (not true)) (=> (and (= |candidateBoard#1_0@1| (|Seq#Append| |boardSoFar#0| (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U |n#0@0|))))) ($IsAlloc SeqType |candidateBoard#1_0@1| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 55) (- 0 56)) ($Is intType (int_2_U |pos#0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |pos#0@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |pos#0@0|) Tclass._System.nat $Heap@0) (=> (and (|_module.__default.IsConsistent#canCall| |candidateBoard#1_0@1| |pos#0@0|) (|_module.__default.IsConsistent#canCall| |candidateBoard#1_0@1| |pos#0@0|)) (and (=> (= (ControlFlow 0 55) 54) anon86_Then_correct) (=> (= (ControlFlow 0 55) 29) anon86_Else_correct))))))))))
(let ((anon69_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 57) 37) anon85_Then_correct) (=> (= (ControlFlow 0 57) 55) anon85_Else_correct)))))
(let ((anon68_LoopBody_correct  (and (=> (= (ControlFlow 0 95) 94) anon69_Then_correct) (=> (= (ControlFlow 0 95) 57) anon69_Else_correct))))
(let ((anon68_LoopDone_correct true))
(let ((anon68_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and ($Is DatatypeTypeType |r#0@1| (Tclass._module.Option (TSeq TInt))) ($IsAlloc DatatypeTypeType |r#0@1| (Tclass._module.Option (TSeq TInt)) $Heap@0)) (and ($Is SeqType |candidateBoard#1_0@0| (TSeq TInt)) ($IsAlloc SeqType |candidateBoard#1_0@0| (TSeq TInt) $Heap@0))) (=> (and (and (and (and (not false) (<= 0 |n#0@0|)) (= |n#0#lo@0| 0)) (<= 0 |N#0|)) (and (and (and (<= |n#0#lo@0| |n#0@0|) (<= |n#0@0| |N#0|)) (=> |$w$loop#0@0| (forall ((|B#3@@1| T@U) ) (!  (=> ($Is SeqType |B#3@@1| (TSeq TInt)) (=> (= (|Seq#Length| |B#3@@1|) |N#0|) (=> (forall ((|i#5@@1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#5@@1|) (< |i#5@@1| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@1| |i#5@@1|))))) (=> (and (<= (LitInt 0) |i#5@@1|) (< |i#5@@1| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@1| |i#5@@1|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@1| |i#5@@1|)))
)) (=> (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#3@@1|)) (|Seq#SameUntil| |boardSoFar#0| |B#3@@1| (|Seq#Length| |boardSoFar#0|))) (=> (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@1| |pos#0@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@1| |pos#0@0|))) |n#0@0|)) (forall ((|p#6@@1| Int) ) (!  (=> (and (<= (LitInt 0) |p#6@@1|) (< |p#6@@1| |N#0|)) (|_module.__default.IsConsistent#canCall| |B#3@@1| |p#6@@1|))
 :pattern ( (_module.__default.IsConsistent |B#3@@1| |p#6@@1|))
)))))))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@1| |pos#0@0|)))
 :pattern ( (|Seq#Length| |B#3@@1|))
)))) (and (and (=> |$w$loop#0@0| (forall ((|B#3@@2| T@U) ) (!  (=> ($Is SeqType |B#3@@2| (TSeq TInt)) (=> (and (and (and (= (|Seq#Length| |B#3@@2|) |N#0|) (forall ((|i#5@@2| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#5@@2|) (< |i#5@@2| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@2| |i#5@@2|))))) (=> (and (<= (LitInt 0) |i#5@@2|) (< |i#5@@2| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@2| |i#5@@2|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@2| |i#5@@2|)))
))) (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#3@@2|)) (|Seq#SameUntil| |boardSoFar#0| |B#3@@2| (|Seq#Length| |boardSoFar#0|)))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@2| |pos#0@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@2| |pos#0@0|))) |n#0@0|))) (exists ((|p#6@@2| Int) ) (!  (and (and (<= (LitInt 0) |p#6@@2|) (< |p#6@@2| |N#0|)) (not (_module.__default.IsConsistent |B#3@@2| |p#6@@2|)))
 :pattern ( (_module.__default.IsConsistent |B#3@@2| |p#6@@2|))
))))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@2| |pos#0@0|)))
 :pattern ( (|Seq#Length| |B#3@@2|))
))) (forall (($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1))
))) (and ($HeapSucc $Heap $Heap@0) (forall (($o@@2 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@2) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@2 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@2) $f@@0))
)))))) (and (=> (= (ControlFlow 0 96) 1) anon68_LoopDone_correct) (=> (= (ControlFlow 0 96) 95) anon68_LoopBody_correct)))))))
(let ((anon67_Else_correct  (=> (and (or (not (= |pos#0@0| |N#0|)) (not true)) (= |n#0#lo@0| (LitInt 0))) (and (=> (= (ControlFlow 0 97) (- 0 99)) (<= |n#0#lo@0| |N#0|)) (=> (<= |n#0#lo@0| |N#0|) (and (=> (= (ControlFlow 0 97) (- 0 98)) (=> |$w$loop#0@0| (forall ((|B#3@@3| T@U) ) (!  (=> ($Is SeqType |B#3@@3| (TSeq TInt)) (=> (and (and (and (= (|Seq#Length| |B#3@@3|) |N#0|) (forall ((|i#5@@3| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#5@@3|) (< |i#5@@3| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@3| |i#5@@3|))))) (=> (and (<= (LitInt 0) |i#5@@3|) (< |i#5@@3| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@3| |i#5@@3|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@3| |i#5@@3|)))
))) (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#3@@3|)) (|Seq#SameUntil| |boardSoFar#0| |B#3@@3| (|Seq#Length| |boardSoFar#0|)))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@3| |pos#0@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@3| |pos#0@0|))) |n#0#lo@0|))) (exists ((|p#6@@3| Int) ) (!  (and (and (<= (LitInt 0) |p#6@@3|) (< |p#6@@3| |N#0|)) (not (_module.__default.IsConsistent |B#3@@3| |p#6@@3|)))
 :pattern ( (_module.__default.IsConsistent |B#3@@3| |p#6@@3|))
))))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@3| |pos#0@0|)))
 :pattern ( (|Seq#Length| |B#3@@3|))
)))) (=> (=> |$w$loop#0@0| (forall ((|B#3@@4| T@U) ) (!  (=> ($Is SeqType |B#3@@4| (TSeq TInt)) (=> (and (and (and (= (|Seq#Length| |B#3@@4|) |N#0|) (forall ((|i#5@@4| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#5@@4|) (< |i#5@@4| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@4| |i#5@@4|))))) (=> (and (<= (LitInt 0) |i#5@@4|) (< |i#5@@4| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@4| |i#5@@4|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@4| |i#5@@4|)))
))) (and (<= (|Seq#Length| |boardSoFar#0|) (|Seq#Length| |B#3@@4|)) (|Seq#SameUntil| |boardSoFar#0| |B#3@@4| (|Seq#Length| |boardSoFar#0|)))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#3@@4| |pos#0@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |B#3@@4| |pos#0@0|))) |n#0#lo@0|))) (exists ((|p#6@@4| Int) ) (!  (and (and (<= (LitInt 0) |p#6@@4|) (< |p#6@@4| |N#0|)) (not (_module.__default.IsConsistent |B#3@@4| |p#6@@4|)))
 :pattern ( (_module.__default.IsConsistent |B#3@@4| |p#6@@4|))
))))
 :pattern ( ($Unbox intType (|Seq#Index| |B#3@@4| |pos#0@0|)))
 :pattern ( (|Seq#Length| |B#3@@4|))
))) (=> (= (ControlFlow 0 97) 96) anon68_LoopHead_correct))))))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |pos#0@0| (|Seq#Length| |boardSoFar#0|))) (and (=> (= (ControlFlow 0 100) 36) anon67_Then_correct) (=> (= (ControlFlow 0 100) 97) anon67_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (<= (LitInt 0) |N#0|)) (and (and ($Is SeqType |boardSoFar#0| (TSeq TInt)) ($IsAlloc SeqType |boardSoFar#0| (TSeq TInt) $Heap)) (and ($Is DatatypeTypeType |r#0| (Tclass._module.Option (TSeq TInt))) ($IsAlloc DatatypeTypeType |r#0| (Tclass._module.Option (TSeq TInt)) $Heap)))) (and (and (and ($Is SeqType |candidateBoard#1_0| (TSeq TInt)) ($IsAlloc SeqType |candidateBoard#1_0| (TSeq TInt) $Heap)) true) (and (and (= 1 $FunctionContextHeight) (<= (|Seq#Length| |boardSoFar#0|) |N#0|)) (and (forall ((|k#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |k#1@@1|) (< |k#1@@1| (|Seq#Length| |boardSoFar#0|))) (_module.__default.IsConsistent |boardSoFar#0| |k#1@@1|))
 :pattern ( (_module.__default.IsConsistent |boardSoFar#0| |k#1@@1|))
)) (= (ControlFlow 0 101) 100))))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
