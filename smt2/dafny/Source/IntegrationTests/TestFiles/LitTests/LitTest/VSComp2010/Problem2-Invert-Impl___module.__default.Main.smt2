(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.inImage (Int) Bool)
(declare-fun |_module.__default.inImage#canCall| (Int) Bool)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.array? Tagclass._System.array tytagFamily$array)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._System.array? _System.array$arg@@1) $h@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@1 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))) ($IsAllocBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) _System.array$arg@@2 $h@@1))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@2 T@U) ) (! (= ($Is refType $o@@2 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@2 null) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@2 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|i#0| Int) ) (!  (=> (or (|_module.__default.inImage#canCall| |i#0|) (< 0 $FunctionContextHeight)) (= (_module.__default.inImage |i#0|) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (_module.__default.inImage |i#0|))
))))
(assert (forall ((o@@0 T@U) ) (! (<= 0 (_System.array.Length o@@0))
 :pattern ( (_System.array.Length o@@0))
)))
(assert (forall ((i Int) ) (! (= (FDim (IndexField i)) 1)
 :pattern ( (IndexField i))
)))
(assert (forall ((i@@0 Int) ) (! (= (IndexField_Inverse (IndexField i@@0)) i@@0)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@2 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@3) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@3)) TInt $h@@2))
 :pattern ( (_System.array.Length $o@@3) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@3) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@3 T@U) ($o@@4 T@U) ($i0@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@4)))) ($IsBox (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@4) (IndexField $i0@@0)) _System.array$arg@@10))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@4) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#2| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@5) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#2| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|i#0@@0| Int) ) (!  (=> (or (|_module.__default.inImage#canCall| (LitInt |i#0@@0|)) (< 0 $FunctionContextHeight)) (= (_module.__default.inImage (LitInt |i#0@@0|)) (U_2_bool (Lit boolType (bool_2_U true)))))
 :weight 3
 :pattern ( (_module.__default.inImage (LitInt |i#0@@0|)))
))))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (forall ((h@@3 T@U) (r T@U) (f T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@6))) ($HeapSucc h@@3 (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@6)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((h@@4 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@4))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@1 () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun |k#0@0| () Int)
(declare-fun |m#0@0| () Int)
(declare-fun |N##0@0| () Int)
(declare-fun $nw@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |k#2@0| () Int)
(declare-fun |m#2@0| () Int)
(declare-fun $Heap () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |b#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 79) (let ((anon32_Else_correct true))
(let ((anon13_correct  (=> (and (forall ((|m#1| Int) ) (!  (=> (and (<= (LitInt 0) |m#1|) (< |m#1| 10)) (|_module.__default.inImage#canCall| |m#1|))
 :pattern ( (_module.__default.inImage |m#1|))
)) (= (ControlFlow 0 28) (- 0 27))) (forall ((|m#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |m#1@@0|) (< |m#1@@0| 10)) (_module.__default.inImage |m#1@@0|)) (exists ((|k#1| Int) ) (!  (and (and (<= (LitInt 0) |k#1|) (< |k#1| 10)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1|)))) |m#1@@0|))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1|))))
)))
 :pattern ( (_module.__default.inImage |m#1@@0|))
)))))
(let ((anon34_Else_correct  (=> (and (not (and (<= (LitInt 0) |k#0@0|) (< |k#0@0| 10))) (= (ControlFlow 0 34) 28)) anon13_correct)))
(let ((anon34_Then_correct  (=> (and (<= (LitInt 0) |k#0@0|) (< |k#0@0| 10)) (and (=> (= (ControlFlow 0 31) (- 0 33)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 31) (- 0 32)) (and (<= 0 |k#0@0|) (< |k#0@0| (_System.array.Length $nw@0)))) (=> (= (ControlFlow 0 31) 28) anon13_correct)))))))
(let ((anon33_Else_correct  (=> (< |k#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 36) 31) anon34_Then_correct) (=> (= (ControlFlow 0 36) 34) anon34_Else_correct)))))
(let ((anon33_Then_correct  (=> (<= (LitInt 0) |k#0@0|) (and (=> (= (ControlFlow 0 35) 31) anon34_Then_correct) (=> (= (ControlFlow 0 35) 34) anon34_Else_correct)))))
(let ((anon32_Then_correct  (and (=> (= (ControlFlow 0 37) 35) anon33_Then_correct) (=> (= (ControlFlow 0 37) 36) anon33_Else_correct))))
(let ((anon31_Then_correct  (=> (and (and (<= (LitInt 0) |m#0@0|) (< |m#0@0| 10)) (_module.__default.inImage |m#0@0|)) (and (=> (= (ControlFlow 0 38) 37) anon32_Then_correct) (=> (= (ControlFlow 0 38) 30) anon32_Else_correct)))))
(let ((anon31_Else_correct  (=> (and (not (and (and (<= (LitInt 0) |m#0@0|) (< |m#0@0| 10)) (_module.__default.inImage |m#0@0|))) (= (ControlFlow 0 29) 28)) anon13_correct)))
(let ((anon30_Else_correct  (=> (not (and (<= (LitInt 0) |m#0@0|) (< |m#0@0| 10))) (and (=> (= (ControlFlow 0 40) 38) anon31_Then_correct) (=> (= (ControlFlow 0 40) 29) anon31_Else_correct)))))
(let ((anon30_Then_correct  (=> (and (and (<= (LitInt 0) |m#0@0|) (< |m#0@0| 10)) (and ($IsAlloc intType (int_2_U |m#0@0|) TInt $Heap@1) (|_module.__default.inImage#canCall| |m#0@0|))) (and (=> (= (ControlFlow 0 39) 38) anon31_Then_correct) (=> (= (ControlFlow 0 39) 29) anon31_Else_correct)))))
(let ((anon29_Else_correct  (=> (< |m#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 42) 39) anon30_Then_correct) (=> (= (ControlFlow 0 42) 40) anon30_Else_correct)))))
(let ((anon29_Then_correct  (=> (<= (LitInt 0) |m#0@0|) (and (=> (= (ControlFlow 0 41) 39) anon30_Then_correct) (=> (= (ControlFlow 0 41) 40) anon30_Else_correct)))))
(let ((anon28_Then_correct  (and (=> (= (ControlFlow 0 43) 41) anon29_Then_correct) (=> (= (ControlFlow 0 43) 42) anon29_Else_correct))))
(let ((anon28_Else_correct true))
(let ((anon27_Then_correct  (and (=> (= (ControlFlow 0 44) (- 0 74)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 73)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 72)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 0))))) (LitInt 9))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 0))))) (LitInt 9)) (and (=> (= (ControlFlow 0 44) (- 0 71)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 70)) (and (<= 0 (LitInt 1)) (< (LitInt 1) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 69)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 1))))) (LitInt 3))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 1))))) (LitInt 3)) (and (=> (= (ControlFlow 0 44) (- 0 68)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 67)) (and (<= 0 (LitInt 2)) (< (LitInt 2) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 66)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 2))))) (LitInt 8))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 2))))) (LitInt 8)) (and (=> (= (ControlFlow 0 44) (- 0 65)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 64)) (and (<= 0 (LitInt 3)) (< (LitInt 3) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 63)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 3))))) (LitInt 2))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 3))))) (LitInt 2)) (and (=> (= (ControlFlow 0 44) (- 0 62)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 61)) (and (<= 0 (LitInt 4)) (< (LitInt 4) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 60)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 4))))) (LitInt 7))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 4))))) (LitInt 7)) (and (=> (= (ControlFlow 0 44) (- 0 59)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 58)) (and (<= 0 (LitInt 5)) (< (LitInt 5) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 57)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 5))))) (LitInt 4))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 5))))) (LitInt 4)) (and (=> (= (ControlFlow 0 44) (- 0 56)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 55)) (and (<= 0 (LitInt 6)) (< (LitInt 6) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 54)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 6))))) (LitInt 0))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 6))))) (LitInt 0)) (and (=> (= (ControlFlow 0 44) (- 0 53)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 52)) (and (<= 0 (LitInt 7)) (< (LitInt 7) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 51)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 7))))) (LitInt 1))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 7))))) (LitInt 1)) (and (=> (= (ControlFlow 0 44) (- 0 50)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 49)) (and (<= 0 (LitInt 8)) (< (LitInt 8) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 48)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 8))))) (LitInt 5))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 8))))) (LitInt 5)) (and (=> (= (ControlFlow 0 44) (- 0 47)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 44) (- 0 46)) (and (<= 0 (LitInt 9)) (< (LitInt 9) (_System.array.Length $nw@0)))) (and (=> (= (ControlFlow 0 44) (- 0 45)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 9))))) (LitInt 6))) (=> (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 9))))) (LitInt 6)) (and (=> (= (ControlFlow 0 44) 43) anon28_Then_correct) (=> (= (ControlFlow 0 44) 26) anon28_Else_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon39_Else_correct true))
(let ((anon26_correct  (=> (forall ((|m#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |m#1@@1|) (< |m#1@@1| 10)) (|_module.__default.inImage#canCall| |m#1@@1|))
 :pattern ( (_module.__default.inImage |m#1@@1|))
)) (=> (and (forall ((|m#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |m#1@@2|) (< |m#1@@2| 10)) (_module.__default.inImage |m#1@@2|)) (exists ((|k#1@@0| Int) ) (!  (and (and (<= (LitInt 0) |k#1@@0|) (< |k#1@@0| 10)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1@@0|)))) |m#1@@2|))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1@@0|))))
)))
 :pattern ( (_module.__default.inImage |m#1@@2|))
)) (= |N##0@0| (LitInt 10))) (and (=> (= (ControlFlow 0 3) (- 0 12)) (forall (($o@@6 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@6) alloc)))) (= $o@@6 $nw@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@6 $f@@0))))) (=> (forall (($o@@7 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@7) alloc)))) (= $o@@7 $nw@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@7 $f@@1)))) (and (=> (= (ControlFlow 0 3) (- 0 11)) (<= (LitInt 0) |N##0@0|)) (=> (<= (LitInt 0) |N##0@0|) (and (=> (= (ControlFlow 0 3) (- 0 10)) (= |N##0@0| (_System.array.Length $nw@0))) (=> (= |N##0@0| (_System.array.Length $nw@0)) (and (=> (= (ControlFlow 0 3) (- 0 9)) (= |N##0@0| (_System.array.Length $nw@1))) (=> (= |N##0@0| (_System.array.Length $nw@1)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (or (not (= $nw@0 $nw@1)) (not true))) (=> (or (not (= $nw@0 $nw@1)) (not true)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (forall ((|k#1@@1| Int) ) (!  (and (=> (and (<= (LitInt 0) |k#1@@1|) (< |k#1@@1| |N##0@0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1@@1|)))))) (=> (and (<= (LitInt 0) |k#1@@1|) (< |k#1@@1| |N##0@0|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1@@1|)))) |N##0@0|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1@@1|))))
))) (=> (forall ((|k#1@@2| Int) ) (!  (and (=> (and (<= (LitInt 0) |k#1@@2|) (< |k#1@@2| |N##0@0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1@@2|)))))) (=> (and (<= (LitInt 0) |k#1@@2|) (< |k#1@@2| |N##0@0|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1@@2|)))) |N##0@0|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#1@@2|))))
)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (forall ((|j#1| Int) (|k#3| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1|) (< |j#1| |k#3|)) (< |k#3| |N##0@0|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#1|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#3|)))))) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#3|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#1|))))
))) (=> (forall ((|j#1@@0| Int) (|k#3@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| |k#3@@0|)) (< |k#3@@0| |N##0@0|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#1@@0|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#3@@0|)))))) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#3@@0|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |j#1@@0|))))
)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (forall ((|m#1@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |m#1@@3|) (< |m#1@@3| |N##0@0|)) (_module.__default.inImage |m#1@@3|)) (exists ((|k#6| Int) ) (!  (and (and (<= (LitInt 0) |k#6|) (< |k#6| |N##0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#6|)))) |m#1@@3|))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#6|))))
)))
 :pattern ( (_module.__default.inImage |m#1@@3|))
))) (=> (forall ((|m#1@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |m#1@@4|) (< |m#1@@4| |N##0@0|)) (_module.__default.inImage |m#1@@4|)) (exists ((|k#6@@0| Int) ) (!  (and (and (<= (LitInt 0) |k#6@@0|) (< |k#6@@0| |N##0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#6@@0|)))) |m#1@@4|))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@0) (IndexField |k#6@@0|))))
)))
 :pattern ( (_module.__default.inImage |m#1@@4|))
)) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (forall ((|k#8| Int) ) (!  (and (=> (and (<= (LitInt 0) |k#8|) (< |k#8| |N##0@0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField |k#8|)))))) (=> (and (<= (LitInt 0) |k#8|) (< |k#8| |N##0@0|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField |k#8|)))) |N##0@0|)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField |k#8|))))
)) (forall ((|k#10| Int) ) (!  (=> (and (<= (LitInt 0) |k#10|) (< |k#10| |N##0@0|)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |k#10|)))))))) |k#10|))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@0) (IndexField |k#10|))))
)))) (and (and (forall ((|k#10@@0| Int) ) (!  (=> (and (<= (LitInt 0) |k#10@@0|) (< |k#10@@0| |N##0@0|)) (= |k#10@@0| (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@0) (IndexField (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField |k#10@@0|))))))))))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField |k#10@@0|))))
)) (forall ((|j#3| Int) (|k#12| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#3|) (< |j#3| |k#12|)) (< |k#12| |N##0@0|)) (or (not (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField |j#3|)))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField |k#12|)))))) (not true)))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField |k#12|))) ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@1) (IndexField |j#3|))))
))) (and (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8)) (= $o@@8 $nw@1)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@8))
)) ($HeapSucc $Heap@1 $Heap@2)))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (=> (= (ControlFlow 0 3) (- 0 2)) (or (not (= $nw@1 null)) (not true))))))))))))))))))))))))))
(let ((anon41_Else_correct  (=> (and (not (and (<= (LitInt 0) |k#2@0|) (< |k#2@0| 10))) (= (ControlFlow 0 16) 3)) anon26_correct)))
(let ((anon41_Then_correct  (=> (and (and (and (<= (LitInt 0) |k#2@0|) (< |k#2@0| 10)) (or (not (= $nw@0 null)) (not true))) (and (and (<= 0 |k#2@0|) (< |k#2@0| (_System.array.Length $nw@0))) (= (ControlFlow 0 15) 3))) anon26_correct)))
(let ((anon40_Else_correct  (=> (< |k#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 18) 15) anon41_Then_correct) (=> (= (ControlFlow 0 18) 16) anon41_Else_correct)))))
(let ((anon40_Then_correct  (=> (<= (LitInt 0) |k#2@0|) (and (=> (= (ControlFlow 0 17) 15) anon41_Then_correct) (=> (= (ControlFlow 0 17) 16) anon41_Else_correct)))))
(let ((anon39_Then_correct  (and (=> (= (ControlFlow 0 19) 17) anon40_Then_correct) (=> (= (ControlFlow 0 19) 18) anon40_Else_correct))))
(let ((anon38_Then_correct  (=> (and (and (<= (LitInt 0) |m#2@0|) (< |m#2@0| 10)) (_module.__default.inImage |m#2@0|)) (and (=> (= (ControlFlow 0 20) 19) anon39_Then_correct) (=> (= (ControlFlow 0 20) 14) anon39_Else_correct)))))
(let ((anon38_Else_correct  (=> (and (not (and (and (<= (LitInt 0) |m#2@0|) (< |m#2@0| 10)) (_module.__default.inImage |m#2@0|))) (= (ControlFlow 0 13) 3)) anon26_correct)))
(let ((anon37_Else_correct  (=> (not (and (<= (LitInt 0) |m#2@0|) (< |m#2@0| 10))) (and (=> (= (ControlFlow 0 22) 20) anon38_Then_correct) (=> (= (ControlFlow 0 22) 13) anon38_Else_correct)))))
(let ((anon37_Then_correct  (=> (and (and (<= (LitInt 0) |m#2@0|) (< |m#2@0| 10)) (and ($IsAlloc intType (int_2_U |m#2@0|) TInt $Heap@1) (|_module.__default.inImage#canCall| |m#2@0|))) (and (=> (= (ControlFlow 0 21) 20) anon38_Then_correct) (=> (= (ControlFlow 0 21) 13) anon38_Else_correct)))))
(let ((anon36_Else_correct  (=> (< |m#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 24) 21) anon37_Then_correct) (=> (= (ControlFlow 0 24) 22) anon37_Else_correct)))))
(let ((anon36_Then_correct  (=> (<= (LitInt 0) |m#2@0|) (and (=> (= (ControlFlow 0 23) 21) anon37_Then_correct) (=> (= (ControlFlow 0 23) 22) anon37_Else_correct)))))
(let ((anon35_Then_correct  (and (=> (= (ControlFlow 0 25) 23) anon36_Then_correct) (=> (= (ControlFlow 0 25) 24) anon36_Else_correct))))
(let ((anon35_Else_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#2| null $Heap alloc false)) (and (=> (= (ControlFlow 0 75) (- 0 78)) (<= 0 (LitInt 10))) (=> (<= 0 (LitInt 10)) (and (=> (= (ControlFlow 0 75) (- 0 77)) (= (LitInt 10) 10)) (=> (= (LitInt 10) 10) (=> (and (and (and (and (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 (Tclass._System.array? TInt))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc))))) (and (= (_System.array.Length $nw@0) (LitInt 10)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 0)))) (LitInt 9)))) (and (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 1)))) (LitInt 3)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 2)))) (LitInt 8))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 3)))) (LitInt 2)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 4)))) (LitInt 7))))) (and (and (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 5)))) (LitInt 4)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 6)))) (LitInt 0))) (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 7)))) (LitInt 1)) (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 8)))) (LitInt 5)))) (and (and (= (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) (IndexField 9)))) (LitInt 6)) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))))) (and (=> (= (ControlFlow 0 75) (- 0 76)) (<= 0 (LitInt 10))) (=> (<= 0 (LitInt 10)) (=> (and (and (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 (Tclass._System.array? TInt))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc))))) (and (and (= (_System.array.Length $nw@1) (LitInt 10)) (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)))) (and (and (=> (= (ControlFlow 0 75) 44) anon27_Then_correct) (=> (= (ControlFlow 0 75) 25) anon35_Then_correct)) (=> (= (ControlFlow 0 75) 1) anon35_Else_correct)))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is refType |a#0| (Tclass._System.array TInt)) ($IsAlloc refType |a#0| (Tclass._System.array TInt) $Heap)) true) (=> (and (and (and ($Is refType |b#0| (Tclass._System.array TInt)) ($IsAlloc refType |b#0| (Tclass._System.array TInt) $Heap)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 79) 75))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
