(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.Option () T@U)
(declare-fun |##_module.Option.None| () T@U)
(declare-fun |##_module.Option.Some| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun |_module.Option#Equal| (T@U T@U) Bool)
(declare-fun _module.Option.Some_q (T@U) Bool)
(declare-fun _module.Option.value (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Option.None| () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Option (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Option.None_q (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.IsConsistent (T@U Int) Bool)
(declare-fun SeqType () T@T)
(declare-fun |_module.__default.IsConsistent#canCall| (T@U Int) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#_module.Option.Some| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass._module.Option_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc Tagclass._System.nat Tagclass._module.Option |##_module.Option.None| |##_module.Option.Some| tytagFamily$nat tytagFamily$Option)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (_module.Option.Some_q a) (_module.Option.Some_q b)) (= (|_module.Option#Equal| a b) (= (_module.Option.value a) (_module.Option.value b))))
 :pattern ( (|_module.Option#Equal| a b) (_module.Option.Some_q a))
 :pattern ( (|_module.Option#Equal| a b) (_module.Option.Some_q b))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.Option.None|) |##_module.Option.None|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((_module.Option$X T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$X) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$X) $h@@0))
)))
(assert (forall ((_module.Option$X@@0 T@U) ) (! ($Is DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$X@@0))
 :pattern ( ($Is DatatypeTypeType |#_module.Option.None| (Tclass._module.Option _module.Option$X@@0)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|_module.Option#Equal| a@@0 b@@0) (= a@@0 b@@0))
 :pattern ( (|_module.Option#Equal| a@@0 b@@0))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d T@U) ) (! (= (_module.Option.None_q d) (= (DatatypeCtorId d) |##_module.Option.None|))
 :pattern ( (_module.Option.None_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Option.Some_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Option.Some|))
 :pattern ( (_module.Option.Some_q d@@0))
)))
(assert (= (Ctor SeqType) 8))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|board#0| T@U) (|pos#0| Int) ) (!  (=> (or (|_module.__default.IsConsistent#canCall| (Lit SeqType |board#0|) (LitInt |pos#0|)) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |board#0| (TSeq TInt)) (<= (LitInt 0) |pos#0|)))) (= (_module.__default.IsConsistent (Lit SeqType |board#0|) (LitInt |pos#0|))  (and (< |pos#0| (|Seq#Length| (Lit SeqType |board#0|))) (forall ((|q#1| Int) ) (!  (and (and (=> (and (<= (LitInt 0) |q#1|) (< |q#1| |pos#0|)) (or (not (= (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) |q#1|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) (LitInt |pos#0|)))))) (not true))) (=> (and (<= (LitInt 0) |q#1|) (< |q#1| |pos#0|)) (or (not (= (- (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) |q#1|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) (LitInt |pos#0|))))) (- |pos#0| |q#1|))) (not true)))) (=> (and (<= (LitInt 0) |q#1|) (< |q#1| |pos#0|)) (or (not (= (- (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) (LitInt |pos#0|)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit SeqType |board#0|) |q#1|)))) (- |pos#0| |q#1|))) (not true))))
 :pattern ( ($Unbox intType (|Seq#Index| |board#0| |q#1|)))
)))))
 :weight 3
 :pattern ( (_module.__default.IsConsistent (Lit SeqType |board#0|) (LitInt |pos#0|)))
))))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Option.None_q d@@1) (= d@@1 |#_module.Option.None|))
 :pattern ( (_module.Option.None_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Option.Some_q d@@2) (exists ((|a#5#0#0| T@U) ) (= d@@2 (|#_module.Option.Some| |a#5#0#0|))))
 :pattern ( (_module.Option.Some_q d@@2))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|board#0@@0| T@U) (|pos#0@@0| Int) ) (!  (=> (or (|_module.__default.IsConsistent#canCall| |board#0@@0| |pos#0@@0|) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |board#0@@0| (TSeq TInt)) (<= (LitInt 0) |pos#0@@0|)))) (= (_module.__default.IsConsistent |board#0@@0| |pos#0@@0|)  (and (< |pos#0@@0| (|Seq#Length| |board#0@@0|)) (forall ((|q#0| Int) ) (!  (and (and (=> (and (<= (LitInt 0) |q#0|) (< |q#0| |pos#0@@0|)) (or (not (= (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |q#0|))) (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |pos#0@@0|))))) (not true))) (=> (and (<= (LitInt 0) |q#0|) (< |q#0| |pos#0@@0|)) (or (not (= (- (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |q#0|))) (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |pos#0@@0|)))) (- |pos#0@@0| |q#0|))) (not true)))) (=> (and (<= (LitInt 0) |q#0|) (< |q#0| |pos#0@@0|)) (or (not (= (- (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |pos#0@@0|))) (U_2_int ($Unbox intType (|Seq#Index| |board#0@@0| |q#0|)))) (- |pos#0@@0| |q#0|))) (not true))))
 :pattern ( ($Unbox intType (|Seq#Index| |board#0@@0| |q#0|)))
)))))
 :pattern ( (_module.__default.IsConsistent |board#0@@0| |pos#0@@0|))
))))
(assert (forall ((_module.Option$X@@1 T@U) ) (!  (and (= (Tag (Tclass._module.Option _module.Option$X@@1)) Tagclass._module.Option) (= (TagFamily (Tclass._module.Option _module.Option$X@@1)) tytagFamily$Option))
 :pattern ( (Tclass._module.Option _module.Option$X@@1))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@0 Tclass._System.nat))
)))
(assert (forall ((_module.Option$X@@2 T@U) (|a#6#0#0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_module.Option.Some| |a#6#0#0|) (Tclass._module.Option _module.Option$X@@2) $h@@1) ($IsAllocBox |a#6#0#0| _module.Option$X@@2 $h@@1)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_module.Option.Some| |a#6#0#0|) (Tclass._module.Option _module.Option$X@@2) $h@@1))
)))
(assert (forall ((_module.Option$X@@3 T@U) (d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 (Tclass._module.Option _module.Option$X@@3)) (or (_module.Option.None_q d@@3) (_module.Option.Some_q d@@3)))
 :pattern ( (_module.Option.Some_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.Option _module.Option$X@@3)))
 :pattern ( (_module.Option.None_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass._module.Option _module.Option$X@@3)))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (c T@U) ) (!  (=> (or (not (= a@@1 c)) (not true)) (=> (and ($HeapSucc a@@1 b@@1) ($HeapSucc b@@1 c)) ($HeapSucc a@@1 c)))
 :pattern ( ($HeapSucc a@@1 b@@1) ($HeapSucc b@@1 c))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.Option.None_q a@@2) (_module.Option.None_q b@@2)) (|_module.Option#Equal| a@@2 b@@2))
 :pattern ( (|_module.Option#Equal| a@@2 b@@2) (_module.Option.None_q a@@2))
 :pattern ( (|_module.Option#Equal| a@@2 b@@2) (_module.Option.None_q b@@2))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@2))) ($IsAllocBox (|Seq#Index| v@@2 i) t0@@0 h@@3))
 :pattern ( (|Seq#Index| v@@2 i))
)))
 :pattern ( ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((_module.Option$X@@4 T@U) ) (! (= (Tclass._module.Option_0 (Tclass._module.Option _module.Option$X@@4)) _module.Option$X@@4)
 :pattern ( (Tclass._module.Option _module.Option$X@@4))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Option.Some| |a#4#0#0|)) |##_module.Option.Some|)
 :pattern ( (|#_module.Option.Some| |a#4#0#0|))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (_module.Option.value (|#_module.Option.Some| |a#8#0#0|)) |a#8#0#0|)
 :pattern ( (|#_module.Option.Some| |a#8#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((_module.Option$X@@5 T@U) (|a#6#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Option.Some| |a#6#0#0@@0|) (Tclass._module.Option _module.Option$X@@5)) ($IsBox |a#6#0#0@@0| _module.Option$X@@5))
 :pattern ( ($Is DatatypeTypeType (|#_module.Option.Some| |a#6#0#0@@0|) (Tclass._module.Option _module.Option$X@@5)))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#_module.Option.Some| |a#9#0#0|)))
 :pattern ( (|#_module.Option.Some| |a#9#0#0|))
)))
(assert (forall ((d@@4 T@U) (_module.Option$X@@6 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Option.Some_q d@@4) ($IsAlloc DatatypeTypeType d@@4 (Tclass._module.Option _module.Option$X@@6) $h@@2))) ($IsAllocBox (_module.Option.value d@@4) _module.Option$X@@6 $h@@2))
 :pattern ( ($IsAllocBox (_module.Option.value d@@4) _module.Option$X@@6 $h@@2))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@5 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@5)) (DtRank d@@5))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@5)))
)))
(assert (forall ((bx@@2 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@2 (TSeq t@@5)) (and (= ($Box SeqType ($Unbox SeqType bx@@2)) bx@@2) ($Is SeqType ($Unbox SeqType bx@@2) (TSeq t@@5))))
 :pattern ( ($IsBox bx@@2 (TSeq t@@5)))
)))
(assert (forall ((_module.Option$X@@7 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._module.Option _module.Option$X@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) (Tclass._module.Option _module.Option$X@@7))))
 :pattern ( ($IsBox bx@@3 (Tclass._module.Option _module.Option$X@@7)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= |#_module.Option.None| (Lit DatatypeTypeType |#_module.Option.None|)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= (|#_module.Option.Some| (Lit BoxType |a#7#0#0|)) (Lit DatatypeTypeType (|#_module.Option.Some| |a#7#0#0|)))
 :pattern ( (|#_module.Option.Some| (Lit BoxType |a#7#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@4 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@4))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@4 (TSeq t0@@2)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@4))) ($IsBox (|Seq#Index| v@@4 i@@0) t0@@2))
 :pattern ( (|Seq#Index| v@@4 i@@0))
)))
 :pattern ( ($Is SeqType v@@4 (TSeq t0@@2)))
)))
(assert (forall ((s@@1 T@U) (i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| s@@1))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@1))) (|Seq#Rank| s@@1)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@1 i@@1))))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |p#2@0| () Int)
(declare-fun |N#0| () Int)
(declare-fun |B#0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |i#0@0| () Int)
(declare-fun |r#0@0| () T@U)
(declare-fun |p#0@0| () Int)
(declare-fun |board#Z#0@0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |r#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 39) (let ((anon31_Else_correct true))
(let ((anon36_Else_correct true))
(let ((anon27_correct true))
(let ((anon25_correct  (=> (and (and (<= (LitInt 0) |p#2@0|) (< |p#2@0| |N#0|)) ($IsAlloc SeqType |B#0@0| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 5) (- 0 6)) ($Is intType (int_2_U |p#2@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |p#2@0|) Tclass._System.nat) (=> (and (and ($IsAlloc intType (int_2_U |p#2@0|) Tclass._System.nat $Heap@0) (|_module.__default.IsConsistent#canCall| |B#0@0| |p#2@0|)) (and (not (_module.__default.IsConsistent |B#0@0| |p#2@0|)) (= (ControlFlow 0 5) 2))) anon27_correct))))))
(let ((anon42_Else_correct  (=> (and (< |p#2@0| (LitInt 0)) (= (ControlFlow 0 8) 5)) anon25_correct)))
(let ((anon42_Then_correct  (=> (and (<= (LitInt 0) |p#2@0|) (= (ControlFlow 0 7) 5)) anon25_correct)))
(let ((anon23_correct  (=> (forall ((|i#1| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1|) (< |i#1| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#0@0| |i#1|))))) (=> (and (<= (LitInt 0) |i#1|) (< |i#1| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#0@0| |i#1|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#0@0| |i#1|)))
)) (and (=> (= (ControlFlow 0 9) 7) anon42_Then_correct) (=> (= (ControlFlow 0 9) 8) anon42_Else_correct)))))
(let ((anon41_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |N#0|))) (= (ControlFlow 0 13) 9)) anon23_correct)))
(let ((anon41_Then_correct  (=> (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |N#0|)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |B#0@0|)))) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |B#0@0|))) (=> (= (ControlFlow 0 11) 9) anon23_correct))))))
(let ((anon40_Else_correct  (=> (< |i#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 15) 11) anon41_Then_correct) (=> (= (ControlFlow 0 15) 13) anon41_Else_correct)))))
(let ((anon40_Then_correct  (=> (<= (LitInt 0) |i#0@0|) (and (=> (= (ControlFlow 0 14) 11) anon41_Then_correct) (=> (= (ControlFlow 0 14) 13) anon41_Else_correct)))))
(let ((anon39_Then_correct  (=> (=> (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#0@0| |i#0@0|))))) (and (=> (= (ControlFlow 0 16) 14) anon40_Then_correct) (=> (= (ControlFlow 0 16) 15) anon40_Else_correct)))))
(let ((anon39_Else_correct  (=> (and (not (=> (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#0@0| |i#0@0|)))))) (= (ControlFlow 0 10) 9)) anon23_correct)))
(let ((anon38_Else_correct  (=> (not (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |N#0|))) (and (=> (= (ControlFlow 0 19) 16) anon39_Then_correct) (=> (= (ControlFlow 0 19) 10) anon39_Else_correct)))))
(let ((anon38_Then_correct  (=> (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |N#0|)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |B#0@0|)))) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |B#0@0|))) (and (=> (= (ControlFlow 0 17) 16) anon39_Then_correct) (=> (= (ControlFlow 0 17) 10) anon39_Else_correct)))))))
(let ((anon37_Else_correct  (=> (< |i#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 21) 17) anon38_Then_correct) (=> (= (ControlFlow 0 21) 19) anon38_Else_correct)))))
(let ((anon37_Then_correct  (=> (<= (LitInt 0) |i#0@0|) (and (=> (= (ControlFlow 0 20) 17) anon38_Then_correct) (=> (= (ControlFlow 0 20) 19) anon38_Else_correct)))))
(let ((anon36_Then_correct  (and (=> (= (ControlFlow 0 22) 20) anon37_Then_correct) (=> (= (ControlFlow 0 22) 21) anon37_Else_correct))))
(let ((anon35_Then_correct  (=> (= (|Seq#Length| |B#0@0|) |N#0|) (and (=> (= (ControlFlow 0 23) 22) anon36_Then_correct) (=> (= (ControlFlow 0 23) 4) anon36_Else_correct)))))
(let ((anon35_Else_correct  (=> (and (=> (and (= (|Seq#Length| |B#0@0|) |N#0|) (forall ((|i#1@@0| Int) ) (!  (and (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| |N#0|)) (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |B#0@0| |i#1@@0|))))) (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| |N#0|)) (< (U_2_int ($Unbox intType (|Seq#Index| |B#0@0| |i#1@@0|))) |N#0|)))
 :pattern ( ($Unbox intType (|Seq#Index| |B#0@0| |i#1@@0|)))
))) (exists ((|p#3| Int) ) (!  (and (and (<= (LitInt 0) |p#3|) (< |p#3| |N#0|)) (not (_module.__default.IsConsistent |B#0@0| |p#3|)))
 :pattern ( (_module.__default.IsConsistent |B#0@0| |p#3|))
))) (= (ControlFlow 0 3) 2)) anon27_correct)))
(let ((anon34_Then_correct  (=> (|_module.Option#Equal| |r#0@0| |#_module.Option.None|) (=> (and ($Is SeqType |B#0@0| (TSeq TInt)) ($IsAlloc SeqType |B#0@0| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 24) 23) anon35_Then_correct) (=> (= (ControlFlow 0 24) 3) anon35_Else_correct))))))
(let ((anon34_Else_correct true))
(let ((anon9_correct  (=> (let ((|board#0@@1| ($Unbox SeqType (_module.Option.value |r#0@0|))))
 (and (= (|Seq#Length| |board#0@@1|) |N#0|) (forall ((|p#1| Int) ) (!  (=> (and (<= (LitInt 0) |p#1|) (< |p#1| |N#0|)) (_module.__default.IsConsistent |board#0@@1| |p#1|))
 :pattern ( (_module.__default.IsConsistent |board#0@@1| |p#1|))
)))) (and (=> (= (ControlFlow 0 26) 24) anon34_Then_correct) (=> (= (ControlFlow 0 26) 1) anon34_Else_correct)))))
(let ((anon33_Else_correct  (=> (and (not (and (<= (LitInt 0) |p#0@0|) (< |p#0@0| |N#0|))) (= (ControlFlow 0 31) 26)) anon9_correct)))
(let ((anon33_Then_correct  (=> (and (and (<= (LitInt 0) |p#0@0|) (< |p#0@0| |N#0|)) ($IsAlloc SeqType |board#Z#0@0| (TSeq TInt) $Heap@0)) (and (=> (= (ControlFlow 0 29) (- 0 30)) ($Is intType (int_2_U |p#0@0|) Tclass._System.nat)) (=> ($Is intType (int_2_U |p#0@0|) Tclass._System.nat) (=> ($IsAlloc intType (int_2_U |p#0@0|) Tclass._System.nat $Heap@0) (=> (and (|_module.__default.IsConsistent#canCall| |board#Z#0@0| |p#0@0|) (= (ControlFlow 0 29) 26)) anon9_correct)))))))
(let ((anon32_Else_correct  (=> (< |p#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 33) 29) anon33_Then_correct) (=> (= (ControlFlow 0 33) 31) anon33_Else_correct)))))
(let ((anon32_Then_correct  (=> (<= (LitInt 0) |p#0@0|) (and (=> (= (ControlFlow 0 32) 29) anon33_Then_correct) (=> (= (ControlFlow 0 32) 31) anon33_Else_correct)))))
(let ((anon31_Then_correct  (and (=> (= (ControlFlow 0 34) 32) anon32_Then_correct) (=> (= (ControlFlow 0 34) 33) anon32_Else_correct))))
(let ((anon30_Then_correct  (=> (= (|Seq#Length| |board#Z#0@0|) |N#0|) (and (=> (= (ControlFlow 0 35) 34) anon31_Then_correct) (=> (= (ControlFlow 0 35) 28) anon31_Else_correct)))))
(let ((anon30_Else_correct  (=> (and (or (not (= (|Seq#Length| |board#Z#0@0|) |N#0|)) (not true)) (= (ControlFlow 0 27) 26)) anon9_correct)))
(let ((anon29_Then_correct  (=> (_module.Option.Some_q |r#0@0|) (and (=> (= (ControlFlow 0 36) (- 0 37)) (_module.Option.Some_q |r#0@0|)) (=> (_module.Option.Some_q |r#0@0|) (=> (= |let#0#0#0| ($Unbox SeqType (_module.Option.value |r#0@0|))) (=> (and ($Is SeqType |let#0#0#0| (TSeq TInt)) (= |board#Z#0@0| |let#0#0#0|)) (and (=> (= (ControlFlow 0 36) 35) anon30_Then_correct) (=> (= (ControlFlow 0 36) 27) anon30_Else_correct)))))))))
(let ((anon29_Else_correct  (=> (=> (_module.Option.Some_q |r#0@0|) (let ((|board#0@@2| ($Unbox SeqType (_module.Option.value |r#0@0|))))
 (and (= (|Seq#Length| |board#0@@2|) |N#0|) (forall ((|p#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |p#1@@0|) (< |p#1@@0| |N#0|)) (_module.__default.IsConsistent |board#0@@2| |p#1@@0|))
 :pattern ( (_module.__default.IsConsistent |board#0@@2| |p#1@@0|))
))))) (and (=> (= (ControlFlow 0 25) 24) anon34_Then_correct) (=> (= (ControlFlow 0 25) 1) anon34_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
)) ($HeapSucc $Heap $Heap@0)) (and ($Is DatatypeTypeType |r#0@0| (Tclass._module.Option (TSeq TInt))) ($IsAlloc DatatypeTypeType |r#0@0| (Tclass._module.Option (TSeq TInt)) $Heap@0))) (and (=> (= (ControlFlow 0 38) 36) anon29_Then_correct) (=> (= (ControlFlow 0 38) 25) anon29_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (<= (LitInt 0) |N#0|)) (and (and ($Is DatatypeTypeType |r#0| (Tclass._module.Option (TSeq TInt))) ($IsAlloc DatatypeTypeType |r#0| (Tclass._module.Option (TSeq TInt)) $Heap)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 39) 38)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
