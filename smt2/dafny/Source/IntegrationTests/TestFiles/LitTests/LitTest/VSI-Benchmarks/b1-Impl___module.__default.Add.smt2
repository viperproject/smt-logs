(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (T@T T@T) T@T)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (T@T T@U) T@U)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@17 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@18 (T@T) T@T)
(declare-fun $generated@@19 (T@T) T@T)
(declare-fun $generated@@46 (Int) Int)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@61 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@8) 0) (= ($generated@@9 $generated@@10) 1)) (= ($generated@@9 $generated@@11) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@6 ($generated@@12 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@12 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@12 ($generated@@6 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@6 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@13 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@14 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@15 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@16 $generated@@25))
))) (forall (($generated@@26 T@T) ($generated@@27 T@T) ($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@0 $generated@@26 $generated@@27 ($generated@@17 $generated@@26 $generated@@27 $generated@@29 $generated@@30 $generated@@28) $generated@@30) $generated@@28)
 :weight 0
))) (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (!  (or (= $generated@@35 $generated@@36) (= ($generated@@0 $generated@@31 $generated@@32 ($generated@@17 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@36) ($generated@@0 $generated@@31 $generated@@32 $generated@@34 $generated@@36)))
 :weight 0
))) (= ($generated@@9 $generated@@1) 3)) (= ($generated@@9 $generated@@2) 4)) (= ($generated@@9 $generated@@3) 5)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ) (= ($generated@@9 ($generated@@4 $generated@@37 $generated@@38)) 6))) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (! (= ($generated@@18 ($generated@@4 $generated@@39 $generated@@40)) $generated@@39)
 :pattern ( ($generated@@4 $generated@@39 $generated@@40))
))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@19 ($generated@@4 $generated@@41 $generated@@42)) $generated@@42)
 :pattern ( ($generated@@4 $generated@@41 $generated@@42))
))))
(assert (forall (($generated@@43 T@U) ($generated@@44 T@U) ) (!  (=> ($generated $generated@@43 $generated@@44) (forall (($generated@@45 T@U) ) (!  (=> ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@43 $generated@@45) $generated@@5))) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@44 $generated@@45) $generated@@5))
)))
 :pattern ( ($generated $generated@@43 $generated@@44))
)))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@46 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 ($generated@@7 $generated@@53 $generated@@52)) $generated@@52)
 :pattern ( ($generated@@7 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (=> (or (not (= $generated@@54 $generated@@56)) (not true)) (=> (and ($generated $generated@@54 $generated@@55) ($generated $generated@@55 $generated@@56)) ($generated $generated@@54 $generated@@56)))
 :pattern ( ($generated $generated@@54 $generated@@55) ($generated $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@7 $generated@@58 ($generated@@51 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@51 $generated@@58 $generated@@57))
)))
(assert  (and (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (! (= ($generated@@59 $generated@@62 $generated@@63 $generated@@64 ($generated@@61 $generated@@62 $generated@@63 $generated@@64 $generated@@66 $generated@@67 $generated@@68 $generated@@65) $generated@@67 $generated@@68) $generated@@65)
 :weight 0
)) (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@74 $generated@@76) (= ($generated@@59 $generated@@69 $generated@@70 $generated@@71 ($generated@@61 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@76 $generated@@77) ($generated@@59 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@76 $generated@@77)))
 :weight 0
)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@84 $generated@@86) (= ($generated@@59 $generated@@78 $generated@@79 $generated@@80 ($generated@@61 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@59 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)))))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 Bool) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@6 ($generated@@59 $generated@@3 $generated@@1 $generated@@8 ($generated@@60 $generated@@87 $generated@@88 $generated@@89 $generated@@90) $generated@@91 $generated@@92))  (=> (and (or (not (= $generated@@91 $generated@@87)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@88 $generated@@91) $generated@@89)))) $generated@@90))
 :pattern ( ($generated@@59 $generated@@3 $generated@@1 $generated@@8 ($generated@@60 $generated@@87 $generated@@88 $generated@@89 $generated@@90) $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@93 Int) ) (! (= ($generated@@51 $generated@@10 ($generated@@13 ($generated@@46 $generated@@93))) ($generated@@48 $generated@@2 ($generated@@51 $generated@@10 ($generated@@13 $generated@@93))))
 :pattern ( ($generated@@51 $generated@@10 ($generated@@13 ($generated@@46 $generated@@93))))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@51 $generated@@95 ($generated@@48 $generated@@95 $generated@@94)) ($generated@@48 $generated@@2 ($generated@@51 $generated@@95 $generated@@94)))
 :pattern ( ($generated@@51 $generated@@95 ($generated@@48 $generated@@95 $generated@@94)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@96 () Int)
(declare-fun $generated@@97 () Int)
(declare-fun $generated@@98 () Int)
(declare-fun $generated@@99 () Int)
(declare-fun $generated@@100 () Bool)
(declare-fun $generated@@101 () Int)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () Int)
(declare-fun $generated@@106 () Bool)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () T@U)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 (T@U) Bool)
(declare-fun $generated@@117 (T@U) Bool)
(declare-fun $generated@@118 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 44) (let (($generated@@119 true))
(let (($generated@@120  (=> (and (< ($generated@@46 0) $generated@@96) (= (ControlFlow 0 33) 31)) $generated@@119)))
(let (($generated@@121  (=> (and (<= $generated@@96 ($generated@@46 0)) (= (ControlFlow 0 32) 31)) $generated@@119)))
(let (($generated@@122  (=> (and (= $generated@@97 (- (+ $generated@@98 $generated@@99) $generated@@96)) (<= ($generated@@46 0) (- 0 $generated@@96))) (and (=> (= (ControlFlow 0 34) 32) $generated@@121) (=> (= (ControlFlow 0 34) 33) $generated@@120)))))
(let (($generated@@123  (=> (and (or (not (= $generated@@97 (- (+ $generated@@98 $generated@@99) $generated@@96))) (not true)) (= (ControlFlow 0 36) 34)) $generated@@122)))
(let (($generated@@124  (=> (and (= $generated@@97 (- (+ $generated@@98 $generated@@99) $generated@@96)) (= (ControlFlow 0 35) 34)) $generated@@122)))
(let (($generated@@125  (=> (not $generated@@100) (and (=> (= (ControlFlow 0 37) 35) $generated@@124) (=> (= (ControlFlow 0 37) 36) $generated@@123)))))
(let (($generated@@126  (=> (and (and (or (not (= $generated@@96 0)) (not true)) (= $generated@@101 (ite (<= $generated@@96 ($generated@@46 0)) (- 0 $generated@@96) (- $generated@@96 0)))) (and (= $generated@@102 (- $generated@@97 1)) (= $generated@@103 (+ $generated@@96 1)))) (and (=> (= (ControlFlow 0 26) (- 0 29)) (or (<= 0 $generated@@101) (= (ite (<= $generated@@103 ($generated@@46 0)) (- 0 $generated@@103) (- $generated@@103 0)) $generated@@101))) (=> (or (<= 0 $generated@@101) (= (ite (<= $generated@@103 ($generated@@46 0)) (- 0 $generated@@103) (- $generated@@103 0)) $generated@@101)) (and (=> (= (ControlFlow 0 26) (- 0 28)) (< (ite (<= $generated@@103 ($generated@@46 0)) (- 0 $generated@@103) (- $generated@@103 0)) $generated@@101)) (=> (< (ite (<= $generated@@103 ($generated@@46 0)) (- 0 $generated@@103) (- $generated@@103 0)) $generated@@101) (and (=> (= (ControlFlow 0 26) (- 0 27)) (=> $generated@@100 (= $generated@@102 (- (+ $generated@@98 $generated@@99) $generated@@103)))) (=> (=> $generated@@100 (= $generated@@102 (- (+ $generated@@98 $generated@@99) $generated@@103))) (=> (= (ControlFlow 0 26) (- 0 25)) (=> $generated@@100 (<= ($generated@@46 0) (- 0 $generated@@103)))))))))))))
(let (($generated@@127 true))
(let (($generated@@128 true))
(let (($generated@@129  (=> (and (< ($generated@@46 0) $generated@@104) (= (ControlFlow 0 13) 11)) $generated@@128)))
(let (($generated@@130  (=> (and (<= $generated@@104 ($generated@@46 0)) (= (ControlFlow 0 12) 11)) $generated@@128)))
(let (($generated@@131  (=> (and (= $generated@@105 (- (+ $generated@@98 $generated@@99) $generated@@104)) (<= ($generated@@46 0) $generated@@104)) (and (=> (= (ControlFlow 0 14) 12) $generated@@130) (=> (= (ControlFlow 0 14) 13) $generated@@129)))))
(let (($generated@@132  (=> (and (or (not (= $generated@@105 (- (+ $generated@@98 $generated@@99) $generated@@104))) (not true)) (= (ControlFlow 0 16) 14)) $generated@@131)))
(let (($generated@@133  (=> (and (= $generated@@105 (- (+ $generated@@98 $generated@@99) $generated@@104)) (= (ControlFlow 0 15) 14)) $generated@@131)))
(let (($generated@@134  (=> (not $generated@@106) (and (=> (= (ControlFlow 0 17) 15) $generated@@133) (=> (= (ControlFlow 0 17) 16) $generated@@132)))))
(let (($generated@@135  (=> (= (ControlFlow 0 8) (- 0 7)) (= $generated@@107 (+ $generated@@98 $generated@@99)))))
(let (($generated@@136  (=> (= $generated@@96 0) (=> (and (= $generated@@107 $generated@@97) (= (ControlFlow 0 24) 8)) $generated@@135))))
(let (($generated@@137  (=> $generated@@100 (and (=> (= (ControlFlow 0 30) 24) $generated@@136) (=> (= (ControlFlow 0 30) 26) $generated@@126)))))
(let (($generated@@138  (and (=> (= (ControlFlow 0 38) 37) $generated@@125) (=> (= (ControlFlow 0 38) 30) $generated@@137))))
(let (($generated@@139  (=> (and (and (and (and (not false) (< $generated@@96 1)) (<= 1 $generated@@108)) (and (=> $generated@@100 (= $generated@@97 (- (+ $generated@@98 $generated@@99) $generated@@96))) (=> $generated@@100 (<= ($generated@@46 0) (- 0 $generated@@96))))) (and (and (forall (($generated@@140 T@U) ) (!  (=> (and (or (not (= $generated@@140 $generated@@110)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@140) $generated@@5)))) (= ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@140) ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@140)))
 :pattern ( ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@140))
)) ($generated $generated@@109 $generated@@109)) (and (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (!  (=> (and (or (not (= $generated@@141 $generated@@110)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@141) $generated@@5)))) (or (= ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@141) $generated@@142) ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@141) $generated@@142)) ($generated@@6 ($generated@@59 $generated@@3 $generated@@1 $generated@@8 $generated@@111 $generated@@141 $generated@@142))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@141) $generated@@142))
)) (<= (ite (<= $generated@@96 ($generated@@46 0)) (- 0 $generated@@96) (- $generated@@96 0)) $generated@@108)))) (and (=> (= (ControlFlow 0 39) 23) $generated@@127) (=> (= (ControlFlow 0 39) 38) $generated@@138)))))
(let (($generated@@143  (=> (and (< $generated@@99 0) (= $generated@@108 (ite (<= $generated@@99 ($generated@@46 0)) (- 0 $generated@@99) (- $generated@@99 0)))) (and (=> (= (ControlFlow 0 40) (- 0 42)) (=> $generated@@100 (= $generated@@98 (- (+ $generated@@98 $generated@@99) $generated@@99)))) (=> (=> $generated@@100 (= $generated@@98 (- (+ $generated@@98 $generated@@99) $generated@@99))) (and (=> (= (ControlFlow 0 40) (- 0 41)) (=> $generated@@100 (<= ($generated@@46 0) (- 0 $generated@@99)))) (=> (=> $generated@@100 (<= ($generated@@46 0) (- 0 $generated@@99))) (=> (= (ControlFlow 0 40) 39) $generated@@139))))))))
(let (($generated@@144  (=> (= $generated@@104 0) (=> (and (= $generated@@107 $generated@@105) (= (ControlFlow 0 9) 8)) $generated@@135))))
(let (($generated@@145  (=> (and (and (or (not (= $generated@@104 0)) (not true)) (= $generated@@112 (ite (<= $generated@@104 ($generated@@46 0)) (- 0 $generated@@104) (- $generated@@104 0)))) (and (= $generated@@113 (+ $generated@@105 1)) (= $generated@@114 (- $generated@@104 1)))) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (<= 0 $generated@@112) (= (ite (<= $generated@@114 ($generated@@46 0)) (- 0 $generated@@114) (- $generated@@114 0)) $generated@@112))) (=> (or (<= 0 $generated@@112) (= (ite (<= $generated@@114 ($generated@@46 0)) (- 0 $generated@@114) (- $generated@@114 0)) $generated@@112)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (< (ite (<= $generated@@114 ($generated@@46 0)) (- 0 $generated@@114) (- $generated@@114 0)) $generated@@112)) (=> (< (ite (<= $generated@@114 ($generated@@46 0)) (- 0 $generated@@114) (- $generated@@114 0)) $generated@@112) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> $generated@@106 (= $generated@@113 (- (+ $generated@@98 $generated@@99) $generated@@114)))) (=> (=> $generated@@106 (= $generated@@113 (- (+ $generated@@98 $generated@@99) $generated@@114))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> $generated@@106 (<= ($generated@@46 0) $generated@@114))))))))))))
(let (($generated@@146  (=> $generated@@106 (and (=> (= (ControlFlow 0 10) 9) $generated@@144) (=> (= (ControlFlow 0 10) 3) $generated@@145)))))
(let (($generated@@147  (and (=> (= (ControlFlow 0 18) 17) $generated@@134) (=> (= (ControlFlow 0 18) 10) $generated@@146))))
(let (($generated@@148 true))
(let (($generated@@149  (=> (and (and (and (not false) (<= 0 $generated@@104)) (and (=> $generated@@106 (= $generated@@105 (- (+ $generated@@98 $generated@@99) $generated@@104))) (=> $generated@@106 (<= ($generated@@46 0) $generated@@104)))) (and (and (forall (($generated@@150 T@U) ) (!  (=> (and (or (not (= $generated@@150 $generated@@110)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@150) $generated@@5)))) (= ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@150) ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@150)))
 :pattern ( ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@150))
)) ($generated $generated@@109 $generated@@109)) (and (forall (($generated@@151 T@U) ($generated@@152 T@U) ) (!  (=> (and (or (not (= $generated@@151 $generated@@110)) (not true)) ($generated@@6 ($generated@@7 $generated@@8 ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@151) $generated@@5)))) (or (= ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@151) $generated@@152) ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@151) $generated@@152)) ($generated@@6 ($generated@@59 $generated@@3 $generated@@1 $generated@@8 $generated@@111 $generated@@151 $generated@@152))))
 :pattern ( ($generated@@0 $generated@@1 $generated@@2 ($generated@@0 $generated@@3 ($generated@@4 $generated@@1 $generated@@2) $generated@@109 $generated@@151) $generated@@152))
)) (<= (ite (<= $generated@@104 ($generated@@46 0)) (- 0 $generated@@104) (- $generated@@104 0)) $generated@@115)))) (and (=> (= (ControlFlow 0 19) 1) $generated@@148) (=> (= (ControlFlow 0 19) 18) $generated@@147)))))
(let (($generated@@153  (=> (and (<= 0 $generated@@99) (= $generated@@115 (ite (<= $generated@@99 ($generated@@46 0)) (- 0 $generated@@99) (- $generated@@99 0)))) (and (=> (= (ControlFlow 0 20) (- 0 22)) (=> $generated@@106 (= $generated@@98 (- (+ $generated@@98 $generated@@99) $generated@@99)))) (=> (=> $generated@@106 (= $generated@@98 (- (+ $generated@@98 $generated@@99) $generated@@99))) (and (=> (= (ControlFlow 0 20) (- 0 21)) (=> $generated@@106 (<= ($generated@@46 0) $generated@@99))) (=> (=> $generated@@106 (<= ($generated@@46 0) $generated@@99)) (=> (= (ControlFlow 0 20) 19) $generated@@149))))))))
(let (($generated@@154  (=> (= $generated@@111 ($generated@@60 $generated@@110 $generated@@109 $generated@@5 false)) (and (=> (= (ControlFlow 0 43) 40) $generated@@143) (=> (= (ControlFlow 0 43) 20) $generated@@153)))))
(let (($generated@@155  (=> (and (and ($generated@@116 $generated@@109) ($generated@@117 $generated@@109)) (and (= 0 $generated@@118) (= (ControlFlow 0 44) 43))) $generated@@154)))
$generated@@155))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
