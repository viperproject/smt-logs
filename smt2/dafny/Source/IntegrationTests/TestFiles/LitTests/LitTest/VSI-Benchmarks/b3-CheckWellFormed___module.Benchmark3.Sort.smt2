(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun class._module.Queue? () T@U)
(declare-fun Tagclass._module.Queue? () T@U)
(declare-fun Tagclass._module.Queue () T@U)
(declare-fun Tagclass._module.Benchmark3? () T@U)
(declare-fun Tagclass._module.Benchmark3 () T@U)
(declare-fun tytagFamily$Queue () T@U)
(declare-fun tytagFamily$Benchmark3 () T@U)
(declare-fun field$contents () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Queue (T@U) T@U)
(declare-fun Tclass._module.Queue? (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Tclass._module.Benchmark3? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun Tclass._module.Benchmark3 () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun _module.Queue.contents () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Queue.Get (T@U T@U T@U Int) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.Queue.Get#canCall| (T@U T@U T@U Int) Bool)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |MultiSet#Multiplicity| (T@U T@U) Int)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| () T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass._module.Queue?_0 (T@U) T@U)
(declare-fun Tclass._module.Queue_0 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc allocName class._module.Queue? Tagclass._module.Queue? Tagclass._module.Queue Tagclass._module.Benchmark3? Tagclass._module.Benchmark3 tytagFamily$Queue tytagFamily$Benchmark3 field$contents)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (= (Ctor refType) 3))
(assert (forall ((_module.Queue$T T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.Queue _module.Queue$T) $h) ($IsAlloc refType |c#0| (Tclass._module.Queue? _module.Queue$T) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Queue _module.Queue$T) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Queue? _module.Queue$T) $h))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Benchmark3?)  (or (= $o null) (= (dtype $o) Tclass._module.Benchmark3?)))
 :pattern ( ($Is refType $o Tclass._module.Benchmark3?))
)))
(assert (forall ((s T@U) ) (! ($IsGoodMultiSet (|MultiSet#FromSeq| s))
 :pattern ( (|MultiSet#FromSeq| s))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Benchmark3 $h@@0) ($IsAlloc refType |c#0@@0| Tclass._module.Benchmark3? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Benchmark3 $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Benchmark3? $h@@0))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_module.Queue$T@@0 T@U) ($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._module.Queue? _module.Queue$T@@0) $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._module.Queue? _module.Queue$T@@0) $h@@1))
)))
(assert (= (FDim _module.Queue.contents) 0))
(assert (= (FieldOfDecl class._module.Queue? field$contents) _module.Queue.contents))
(assert  (not ($IsGhostField _module.Queue.contents)))
(assert (forall (($o@@1 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.Benchmark3? $h@@2)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.Benchmark3? $h@@2))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (= (Ctor SeqType) 7))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.Queue$T@@1 T@U) ($Heap T@U) (this T@U) (|i#0| Int) ) (!  (=> (or (|_module.Queue.Get#canCall| _module.Queue$T@@1 $Heap this |i#0|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this (Tclass._module.Queue _module.Queue$T@@1)) ($IsAlloc refType this (Tclass._module.Queue _module.Queue$T@@1) $Heap)))) (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Queue.contents)))))))) (= (_module.Queue.Get _module.Queue$T@@1 $Heap this |i#0|) (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Queue.contents)) |i#0|)))
 :pattern ( (_module.Queue.Get _module.Queue$T@@1 $Heap this |i#0|) ($IsGoodHeap $Heap))
))))
(assert ($IsGhostField alloc))
(assert (forall ((_module.Queue$T@@2 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._module.Queue _module.Queue$T@@2))  (and ($Is refType |c#0@@1| (Tclass._module.Queue? _module.Queue$T@@2)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Queue _module.Queue$T@@2)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._module.Queue? _module.Queue$T@@2)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_module.Queue$T@@3 T@U) ) (!  (and (= (Tag (Tclass._module.Queue? _module.Queue$T@@3)) Tagclass._module.Queue?) (= (TagFamily (Tclass._module.Queue? _module.Queue$T@@3)) tytagFamily$Queue))
 :pattern ( (Tclass._module.Queue? _module.Queue$T@@3))
)))
(assert (forall ((_module.Queue$T@@4 T@U) ) (!  (and (= (Tag (Tclass._module.Queue _module.Queue$T@@4)) Tagclass._module.Queue) (= (TagFamily (Tclass._module.Queue _module.Queue$T@@4)) tytagFamily$Queue))
 :pattern ( (Tclass._module.Queue _module.Queue$T@@4))
)))
(assert (forall ((_module.Queue$T@@5 T@U) ($h@@3 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._module.Queue? _module.Queue$T@@5)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) _module.Queue.contents)) (TSeq _module.Queue$T@@5) $h@@3))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@2) _module.Queue.contents)) (Tclass._module.Queue? _module.Queue$T@@5))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) (= $o@@3 |l#3|)))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.Queue$T@@6 T@U) ($Heap@@0 T@U) (this@@0 T@U) (|i#0@@0| Int) ) (!  (=> (or (|_module.Queue.Get#canCall| _module.Queue$T@@6 $Heap@@0 this@@0 |i#0@@0|) (and (< 0 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@0) (or (not (= this@@0 null)) (not true))) ($IsAlloc refType this@@0 (Tclass._module.Queue _module.Queue$T@@6) $Heap@@0)) (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.Queue.contents)))))))) ($IsAllocBox (_module.Queue.Get _module.Queue$T@@6 $Heap@@0 this@@0 |i#0@@0|) _module.Queue$T@@6 $Heap@@0))
 :pattern ( ($IsAllocBox (_module.Queue.Get _module.Queue$T@@6 $Heap@@0 this@@0 |i#0@@0|) _module.Queue$T@@6 $Heap@@0))
))))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.Benchmark3?) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) Tclass._module.Benchmark3?)))
 :pattern ( ($IsBox bx@@0 Tclass._module.Benchmark3?))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Benchmark3) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.Benchmark3)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Benchmark3))
)))
(assert (forall ((_module.Queue$T@@7 T@U) ($o@@4 T@U) ) (! (= ($Is refType $o@@4 (Tclass._module.Queue? _module.Queue$T@@7))  (or (= $o@@4 null) (= (dtype $o@@4) (Tclass._module.Queue? _module.Queue$T@@7))))
 :pattern ( ($Is refType $o@@4 (Tclass._module.Queue? _module.Queue$T@@7)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.Benchmark3)  (and ($Is refType |c#0@@2| Tclass._module.Benchmark3?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Benchmark3))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.Benchmark3?))
)))
(assert (forall ((_module.Queue$T@@8 T@U) ($h0 T@U) ($h1 T@U) (this@@1 T@U) (|i#0@@1| Int) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 (Tclass._module.Queue _module.Queue$T@@8)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@5 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@5 null)) (not true)) (= $o@@5 this@@1)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@5) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@5) $f@@0)))) (= (_module.Queue.Get _module.Queue$T@@8 $h0 this@@1 |i#0@@1|) (_module.Queue.Get _module.Queue$T@@8 $h1 this@@1 |i#0@@1|))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.Queue.Get _module.Queue$T@@8 $h1 this@@1 |i#0@@1|))
)))
(assert (forall ((s@@0 T@U) (x@@5 T@U) ) (! (= (exists ((i Int) ) (!  (and (and (<= 0 i) (< i (|Seq#Length| s@@0))) (= x@@5 (|Seq#Index| s@@0 i)))
 :pattern ( (|Seq#Index| s@@0 i))
)) (< 0 (|MultiSet#Multiplicity| (|MultiSet#FromSeq| s@@0) x@@5)))
 :pattern ( (|MultiSet#Multiplicity| (|MultiSet#FromSeq| s@@0) x@@5))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.Queue$T@@9 T@U) ($Heap@@1 T@U) (this@@2 T@U) (|i#0@@2| Int) ) (!  (=> (or (|_module.Queue.Get#canCall| _module.Queue$T@@9 $Heap@@1 this@@2 |i#0@@2|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 (Tclass._module.Queue _module.Queue$T@@9)) ($IsAlloc refType this@@2 (Tclass._module.Queue _module.Queue$T@@9) $Heap@@1)))) (and (<= (LitInt 0) |i#0@@2|) (< |i#0@@2| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@2) _module.Queue.contents)))))))) ($IsBox (_module.Queue.Get _module.Queue$T@@9 $Heap@@1 this@@2 |i#0@@2|) _module.Queue$T@@9))
 :pattern ( (_module.Queue.Get _module.Queue$T@@9 $Heap@@1 this@@2 |i#0@@2|))
))))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|MultiSet#Equal| a b) (= a b))
 :pattern ( (|MultiSet#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((ms T@U) ) (! (= ($IsGoodMultiSet ms) (forall ((bx@@3 T@U) ) (!  (and (<= 0 (|MultiSet#Multiplicity| ms bx@@3)) (<= (|MultiSet#Multiplicity| ms bx@@3) (|MultiSet#Card| ms)))
 :pattern ( (|MultiSet#Multiplicity| ms bx@@3))
)))
 :pattern ( ($IsGoodMultiSet ms))
)))
(assert (forall ((s@@1 T@U) ) (! (<= 0 (|MultiSet#Card| s@@1))
 :pattern ( (|MultiSet#Card| s@@1))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((o@@0 T@U) ) (! (= (|MultiSet#Multiplicity| |MultiSet#Empty| o@@0) 0)
 :pattern ( (|MultiSet#Multiplicity| |MultiSet#Empty| o@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@2 (TSeq t0@@1) h@@3) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@2))) ($IsAllocBox (|Seq#Index| v@@2 i@@0) t0@@1 h@@3))
 :pattern ( (|Seq#Index| v@@2 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@2 (TSeq t0@@1) h@@3))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((_module.Queue$T@@10 T@U) ) (! (= (Tclass._module.Queue?_0 (Tclass._module.Queue? _module.Queue$T@@10)) _module.Queue$T@@10)
 :pattern ( (Tclass._module.Queue? _module.Queue$T@@10))
)))
(assert (forall ((_module.Queue$T@@11 T@U) ) (! (= (Tclass._module.Queue_0 (Tclass._module.Queue _module.Queue$T@@11)) _module.Queue$T@@11)
 :pattern ( (Tclass._module.Queue _module.Queue$T@@11))
)))
(assert (forall ((x@@6 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@6)) x@@6)
 :pattern ( ($Box T@@4 x@@6))
)))
(assert (forall ((s@@3 T@U) ) (!  (and (= (= (|MultiSet#Card| s@@3) 0) (= s@@3 |MultiSet#Empty|)) (=> (or (not (= (|MultiSet#Card| s@@3) 0)) (not true)) (exists ((x@@7 T@U) ) (! (< 0 (|MultiSet#Multiplicity| s@@3 x@@7))
 :pattern ( (|MultiSet#Multiplicity| s@@3 x@@7))
))))
 :pattern ( (|MultiSet#Card| s@@3))
)))
(assert (forall ((_module.Queue$T@@12 T@U) ($h@@4 T@U) ($o@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._module.Queue? _module.Queue$T@@12)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@6) _module.Queue.contents)) (TSeq _module.Queue$T@@12)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@6) _module.Queue.contents)) (Tclass._module.Queue? _module.Queue$T@@12))
)))
(assert (forall ((s@@4 T@U) ) (! (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@4)) (|Seq#Length| s@@4))
 :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@4)))
)))
(assert (forall ((bx@@4 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@4 (TSeq t@@5)) (and (= ($Box SeqType ($Unbox SeqType bx@@4)) bx@@4) ($Is SeqType ($Unbox SeqType bx@@4) (TSeq t@@5))))
 :pattern ( ($IsBox bx@@4 (TSeq t@@5)))
)))
(assert (forall ((_module.Queue$T@@13 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._module.Queue? _module.Queue$T@@13)) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) (Tclass._module.Queue? _module.Queue$T@@13))))
 :pattern ( ($IsBox bx@@5 (Tclass._module.Queue? _module.Queue$T@@13)))
)))
(assert (forall ((_module.Queue$T@@14 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._module.Queue _module.Queue$T@@14)) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) (Tclass._module.Queue _module.Queue$T@@14))))
 :pattern ( ($IsBox bx@@6 (Tclass._module.Queue _module.Queue$T@@14)))
)))
(assert (= (|MultiSet#FromSeq| |Seq#Empty|) |MultiSet#Empty|))
(assert (= (Tag Tclass._module.Benchmark3?) Tagclass._module.Benchmark3?))
(assert (= (TagFamily Tclass._module.Benchmark3?) tytagFamily$Benchmark3))
(assert (= (Tag Tclass._module.Benchmark3) Tagclass._module.Benchmark3))
(assert (= (TagFamily Tclass._module.Benchmark3) tytagFamily$Benchmark3))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((x@@9 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@9)) (Lit BoxType ($Box T@@5 x@@9)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@9)))
)))
(assert (forall ((s@@5 T@U) ) (!  (=> (= (|Seq#Length| s@@5) 0) (= s@@5 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@5))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|MultiSet#Equal| a@@1 b@@1) (forall ((o@@1 T@U) ) (! (= (|MultiSet#Multiplicity| a@@1 o@@1) (|MultiSet#Multiplicity| b@@1 o@@1))
 :pattern ( (|MultiSet#Multiplicity| a@@1 o@@1))
 :pattern ( (|MultiSet#Multiplicity| b@@1 o@@1))
)))
 :pattern ( (|MultiSet#Equal| a@@1 b@@1))
)))
(assert (forall ((h@@4 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@4))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@4 (TSeq t0@@2)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@4))) ($IsBox (|Seq#Index| v@@4 i@@1) t0@@2))
 :pattern ( (|Seq#Index| v@@4 i@@1))
)))
 :pattern ( ($Is SeqType v@@4 (TSeq t0@@2)))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |r#0@0| () T@U)
(declare-fun |q#0| () T@U)
(declare-fun $Heap@@2 () T@U)
(declare-fun |i#0@0| () Int)
(declare-fun |j#0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun this@@3 () T@U)
(declare-fun |r#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 22) (let ((anon8_correct  (=> (forall ((|i#1| Int) (|j#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1|) (< |i#1| |j#1|)) (< |j#1| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |r#0@0|) _module.Queue.contents))))) (<= (U_2_int ($Unbox intType (_module.Queue.Get TInt $Heap@0 |r#0@0| |i#1|))) (U_2_int ($Unbox intType (_module.Queue.Get TInt $Heap@0 |r#0@0| |j#1|)))))
 :pattern ( ($Unbox intType (_module.Queue.Get TInt $Heap@0 |r#0@0| |j#1|)) ($Unbox intType (_module.Queue.Get TInt $Heap@0 |r#0@0| |i#1|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= |r#0@0| null)) (not true))) (=> (or (not (= |r#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= |q#0| null)) (not true))) (=> (or (not (= |q#0| null)) (not true)) (=> (= (ControlFlow 0 2) (- 0 1)) ($IsAlloc refType |q#0| (Tclass._module.Queue TInt) $Heap@@2)))))))))
(let ((anon6_correct  (=> (and (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |j#0@0|)) (< |j#0@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |r#0@0|) _module.Queue.contents))))) (and (=> (= (ControlFlow 0 6) (- 0 12)) (or (not (= |r#0@0| null)) (not true))) (=> (or (not (= |r#0@0| null)) (not true)) (=> (and ($IsAllocBox ($Box refType |r#0@0|) (Tclass._module.Queue? TInt) $Heap@0) ($IsAlloc intType (int_2_U |i#0@0|) TInt $Heap@0)) (and (=> (= (ControlFlow 0 6) (- 0 11)) (<= (LitInt 0) |i#0@0|)) (and (=> (= (ControlFlow 0 6) (- 0 10)) (< |i#0@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |r#0@0|) _module.Queue.contents))))) (=> (and (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |r#0@0|) _module.Queue.contents))))) (|_module.Queue.Get#canCall| TInt $Heap@0 |r#0@0| |i#0@0|)) (and (=> (= (ControlFlow 0 6) (- 0 9)) (or (not (= |r#0@0| null)) (not true))) (=> (or (not (= |r#0@0| null)) (not true)) (=> (and ($IsAllocBox ($Box refType |r#0@0|) (Tclass._module.Queue? TInt) $Heap@0) ($IsAlloc intType (int_2_U |j#0@0|) TInt $Heap@0)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (<= (LitInt 0) |j#0@0|)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (< |j#0@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |r#0@0|) _module.Queue.contents))))) (=> (and (and (and (<= (LitInt 0) |j#0@0|) (< |j#0@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |r#0@0|) _module.Queue.contents))))) (|_module.Queue.Get#canCall| TInt $Heap@0 |r#0@0| |j#0@0|)) (and (<= (U_2_int ($Unbox intType (_module.Queue.Get TInt $Heap@0 |r#0@0| |i#0@0|))) (U_2_int ($Unbox intType (_module.Queue.Get TInt $Heap@0 |r#0@0| |j#0@0|)))) (= (ControlFlow 0 6) 2))) anon8_correct)))))))))))))))
(let ((anon11_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |j#0@0|))) (= (ControlFlow 0 15) 6)) anon6_correct)))
(let ((anon11_Then_correct  (=> (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |j#0@0|)) (and (=> (= (ControlFlow 0 13) (- 0 14)) (or (not (= |r#0@0| null)) (not true))) (=> (or (not (= |r#0@0| null)) (not true)) (=> (= (ControlFlow 0 13) 6) anon6_correct))))))
(let ((anon10_Else_correct  (=> (< |i#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 17) 13) anon11_Then_correct) (=> (= (ControlFlow 0 17) 15) anon11_Else_correct)))))
(let ((anon10_Then_correct  (=> (<= (LitInt 0) |i#0@0|) (and (=> (= (ControlFlow 0 16) 13) anon11_Then_correct) (=> (= (ControlFlow 0 16) 15) anon11_Else_correct)))))
(let ((anon9_Else_correct  (=> (and (=> (and (and (<= (LitInt 0) |i#0@0|) (< |i#0@0| |j#0@0|)) (< |j#0@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |r#0@0|) _module.Queue.contents))))) (<= (U_2_int ($Unbox intType (_module.Queue.Get TInt $Heap@0 |r#0@0| |i#0@0|))) (U_2_int ($Unbox intType (_module.Queue.Get TInt $Heap@0 |r#0@0| |j#0@0|))))) (= (ControlFlow 0 5) 2)) anon8_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@2 alloc |q#0|)) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (forall (($o@@7 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@7) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@7) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@7)) (= $o@@7 |q#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@7))
)) ($HeapSucc $Heap@@2 $Heap@0))) (and (and ($Is refType |r#0@0| (Tclass._module.Queue TInt)) ($IsAlloc refType |r#0@0| (Tclass._module.Queue TInt) $Heap@0)) (and (or (not (= |r#0@0| null)) (not true)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 |r#0@0|) alloc))))))) (and (=> (= (ControlFlow 0 18) (- 0 21)) (or (not (= |r#0@0| null)) (not true))) (=> (or (not (= |r#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 18) (- 0 20)) (or (not (= |q#0| null)) (not true))) (=> (or (not (= |q#0| null)) (not true)) (and (=> (= (ControlFlow 0 18) (- 0 19)) ($IsAlloc refType |q#0| (Tclass._module.Queue TInt) $Heap@@2)) (=> ($IsAlloc refType |q#0| (Tclass._module.Queue TInt) $Heap@@2) (=> (= (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |r#0@0|) _module.Queue.contents))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 |q#0|) _module.Queue.contents)))) (and (and (=> (= (ControlFlow 0 18) 5) anon9_Else_correct) (=> (= (ControlFlow 0 18) 16) anon10_Then_correct)) (=> (= (ControlFlow 0 18) 17) anon10_Else_correct)))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (=> (and (and (and (or (not (= this@@3 null)) (not true)) (and ($Is refType this@@3 Tclass._module.Benchmark3) ($IsAlloc refType this@@3 Tclass._module.Benchmark3 $Heap@@2))) (and ($Is refType |q#0| (Tclass._module.Queue TInt)) ($IsAlloc refType |q#0| (Tclass._module.Queue TInt) $Heap@@2))) (and (and ($Is refType |r#0| (Tclass._module.Queue TInt)) ($IsAlloc refType |r#0| (Tclass._module.Queue TInt) $Heap@@2)) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 22) 18)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
