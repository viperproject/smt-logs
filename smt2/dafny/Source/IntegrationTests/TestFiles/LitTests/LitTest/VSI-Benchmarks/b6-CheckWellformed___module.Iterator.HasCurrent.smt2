(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._module.Collection? () T@U)
(declare-fun Tagclass._module.Collection? () T@U)
(declare-fun Tagclass._module.Collection () T@U)
(declare-fun Tagclass._module.Iterator () T@U)
(declare-fun Tagclass._module.Iterator? () T@U)
(declare-fun class._module.Iterator? () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$Collection () T@U)
(declare-fun tytagFamily$Iterator () T@U)
(declare-fun field$footprint () T@U)
(declare-fun field$elements () T@U)
(declare-fun field$pos () T@U)
(declare-fun field$c () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Iterator.HasCurrent (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.Iterator.HasCurrent#canCall| (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Iterator (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun _module.Iterator.Valid (T@U T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.Iterator.pos () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun SeqType () T@T)
(declare-fun _module.Iterator.c () T@U)
(declare-fun _module.Collection.elements () T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Tclass._module.Collection (T@U) T@U)
(declare-fun Tclass._module.Collection? (T@U) T@U)
(declare-fun Tclass._module.Iterator? (T@U) T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun _module.Iterator.footprint () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun |_module.Iterator.Valid#canCall| (T@U T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass._module.Collection?_0 (T@U) T@U)
(declare-fun Tclass._module.Collection_0 (T@U) T@U)
(declare-fun Tclass._module.Iterator_0 (T@U) T@U)
(declare-fun Tclass._module.Iterator?_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#13| (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt TagSet TagSeq alloc allocName Tagclass._System.object? Tagclass._System.object class._module.Collection? Tagclass._module.Collection? Tagclass._module.Collection Tagclass._module.Iterator Tagclass._module.Iterator? class._module.Iterator? tytagFamily$object tytagFamily$Collection tytagFamily$Iterator field$footprint field$elements field$pos field$c)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (and (= (Ctor refType) 3) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))) (= (Ctor SeqType) 7)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.Iterator$T T@U) ($Heap T@U) (this T@U) ) (!  (=> (or (|_module.Iterator.HasCurrent#canCall| _module.Iterator$T $Heap this) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this (Tclass._module.Iterator _module.Iterator$T)) ($IsAlloc refType this (Tclass._module.Iterator _module.Iterator$T) $Heap)))) (_module.Iterator.Valid _module.Iterator$T $Heap this)))) (= (_module.Iterator.HasCurrent _module.Iterator$T $Heap this)  (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Iterator.pos)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Iterator.pos))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) _module.Iterator.c))) _module.Collection.elements)))))))
 :pattern ( (_module.Iterator.HasCurrent _module.Iterator$T $Heap this) ($IsGoodHeap $Heap))
))))
(assert (forall ((_module.Collection$T T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._module.Collection _module.Collection$T) $h) ($IsAlloc refType |c#0| (Tclass._module.Collection? _module.Collection$T) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Collection _module.Collection$T) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._module.Collection? _module.Collection$T) $h))
)))
(assert (forall ((_module.Iterator$T@@0 T@U) (|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass._module.Iterator _module.Iterator$T@@0) $h@@0) ($IsAlloc refType |c#0@@0| (Tclass._module.Iterator? _module.Iterator$T@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.Iterator _module.Iterator$T@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.Iterator? _module.Iterator$T@@0) $h@@0))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((|c#0@@1| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._System.object $h@@1) ($IsAlloc refType |c#0@@1| Tclass._System.object? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._System.object $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._System.object? $h@@1))
)))
(assert (= (FDim _module.Iterator.footprint) 0))
(assert (= (FieldOfDecl class._module.Iterator? field$footprint) _module.Iterator.footprint))
(assert ($IsGhostField _module.Iterator.footprint))
(assert (forall ((_module.Collection$T@@0 T@U) ($o T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o (Tclass._module.Collection? _module.Collection$T@@0) $h@@2)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o (Tclass._module.Collection? _module.Collection$T@@0) $h@@2))
)))
(assert (forall ((_module.Iterator$T@@1 T@U) ($o@@0 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._module.Iterator? _module.Iterator$T@@1) $h@@3)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._module.Iterator? _module.Iterator$T@@1) $h@@3))
)))
(assert (= (FDim _module.Collection.elements) 0))
(assert (= (FieldOfDecl class._module.Collection? field$elements) _module.Collection.elements))
(assert  (not ($IsGhostField _module.Collection.elements)))
(assert (= (FDim _module.Iterator.pos) 0))
(assert (= (FieldOfDecl class._module.Iterator? field$pos) _module.Iterator.pos))
(assert  (not ($IsGhostField _module.Iterator.pos)))
(assert (= (FDim _module.Iterator.c) 0))
(assert (= (FieldOfDecl class._module.Iterator? field$c) _module.Iterator.c))
(assert  (not ($IsGhostField _module.Iterator.c)))
(assert (forall (($o@@1 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._System.object? $h@@4)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._System.object? $h@@4))
)))
(assert (= (Ctor SetType) 8))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.Iterator$T@@2 T@U) ($Heap@@0 T@U) (this@@0 T@U) ) (!  (=> (or (|_module.Iterator.Valid#canCall| _module.Iterator$T@@2 $Heap@@0 this@@0) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 (Tclass._module.Iterator _module.Iterator$T@@2)) ($IsAlloc refType this@@0 (Tclass._module.Iterator _module.Iterator$T@@2) $Heap@@0)))))) (= (_module.Iterator.Valid _module.Iterator$T@@2 $Heap@@0 this@@0)  (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.Iterator.footprint)) ($Box refType this@@0)) (<= (LitInt (- 0 1)) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@0) _module.Iterator.pos)))))))
 :pattern ( (_module.Iterator.Valid _module.Iterator$T@@2 $Heap@@0 this@@0) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((_module.Iterator$T@@3 T@U) ($h@@5 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._module.Iterator? _module.Iterator$T@@3)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@2) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@2) _module.Iterator.pos)) TInt $h@@5))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@2) _module.Iterator.pos)) (Tclass._module.Iterator? _module.Iterator$T@@3))
)))
(assert ($IsGhostField alloc))
(assert (forall ((_module.Collection$T@@1 T@U) (|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| (Tclass._module.Collection _module.Collection$T@@1))  (and ($Is refType |c#0@@2| (Tclass._module.Collection? _module.Collection$T@@1)) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| (Tclass._module.Collection _module.Collection$T@@1)))
 :pattern ( ($Is refType |c#0@@2| (Tclass._module.Collection? _module.Collection$T@@1)))
)))
(assert (forall ((_module.Iterator$T@@4 T@U) (|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| (Tclass._module.Iterator _module.Iterator$T@@4))  (and ($Is refType |c#0@@3| (Tclass._module.Iterator? _module.Iterator$T@@4)) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| (Tclass._module.Iterator _module.Iterator$T@@4)))
 :pattern ( ($Is refType |c#0@@3| (Tclass._module.Iterator? _module.Iterator$T@@4)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((_module.Collection$T@@2 T@U) ) (!  (and (= (Tag (Tclass._module.Collection? _module.Collection$T@@2)) Tagclass._module.Collection?) (= (TagFamily (Tclass._module.Collection? _module.Collection$T@@2)) tytagFamily$Collection))
 :pattern ( (Tclass._module.Collection? _module.Collection$T@@2))
)))
(assert (forall ((_module.Collection$T@@3 T@U) ) (!  (and (= (Tag (Tclass._module.Collection _module.Collection$T@@3)) Tagclass._module.Collection) (= (TagFamily (Tclass._module.Collection _module.Collection$T@@3)) tytagFamily$Collection))
 :pattern ( (Tclass._module.Collection _module.Collection$T@@3))
)))
(assert (forall ((_module.Iterator$T@@5 T@U) ) (!  (and (= (Tag (Tclass._module.Iterator _module.Iterator$T@@5)) Tagclass._module.Iterator) (= (TagFamily (Tclass._module.Iterator _module.Iterator$T@@5)) tytagFamily$Iterator))
 :pattern ( (Tclass._module.Iterator _module.Iterator$T@@5))
)))
(assert (forall ((_module.Iterator$T@@6 T@U) ) (!  (and (= (Tag (Tclass._module.Iterator? _module.Iterator$T@@6)) Tagclass._module.Iterator?) (= (TagFamily (Tclass._module.Iterator? _module.Iterator$T@@6)) tytagFamily$Iterator))
 :pattern ( (Tclass._module.Iterator? _module.Iterator$T@@6))
)))
(assert (forall ((_module.Collection$T@@4 T@U) ($h@@6 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._module.Collection? _module.Collection$T@@4)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@3) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@3) _module.Collection.elements)) (TSeq _module.Collection$T@@4) $h@@6))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@3) _module.Collection.elements)) (Tclass._module.Collection? _module.Collection$T@@4))
)))
(assert (forall ((_module.Iterator$T@@7 T@U) ($h@@7 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._module.Iterator? _module.Iterator$T@@7)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@4) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@4) _module.Iterator.c)) (Tclass._module.Collection _module.Iterator$T@@7) $h@@7))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@4) _module.Iterator.c)) (Tclass._module.Iterator? _module.Iterator$T@@7))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@0 Tclass._System.object?))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._System.object)))
 :pattern ( ($IsBox bx@@1 Tclass._System.object))
)))
(assert (forall ((_module.Collection$T@@5 T@U) ($o@@5 T@U) ) (! (= ($Is refType $o@@5 (Tclass._module.Collection? _module.Collection$T@@5))  (or (= $o@@5 null) (= (dtype $o@@5) (Tclass._module.Collection? _module.Collection$T@@5))))
 :pattern ( ($Is refType $o@@5 (Tclass._module.Collection? _module.Collection$T@@5)))
)))
(assert (forall ((_module.Iterator$T@@8 T@U) ($o@@6 T@U) ) (! (= ($Is refType $o@@6 (Tclass._module.Iterator? _module.Iterator$T@@8))  (or (= $o@@6 null) (= (dtype $o@@6) (Tclass._module.Iterator? _module.Iterator$T@@8))))
 :pattern ( ($Is refType $o@@6 (Tclass._module.Iterator? _module.Iterator$T@@8)))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._System.object)  (and ($Is refType |c#0@@4| Tclass._System.object?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@4| Tclass._System.object?))
)))
(assert (forall ((_module.Iterator$T@@9 T@U) ($h@@8 T@U) ($o@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._module.Iterator? _module.Iterator$T@@9)))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@7) _module.Iterator.footprint)) (TSet Tclass._System.object)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@7) _module.Iterator.footprint)) (Tclass._module.Iterator? _module.Iterator$T@@9))
)))
(assert (forall ((_module.Iterator$T@@10 T@U) ($h@@9 T@U) ($o@@8 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) (Tclass._module.Iterator? _module.Iterator$T@@10)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@8) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@8) _module.Iterator.footprint)) (TSet Tclass._System.object) $h@@9))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@8) _module.Iterator.footprint)) (Tclass._module.Iterator? _module.Iterator$T@@10))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 TBool) (and (= ($Box boolType ($Unbox boolType bx@@3)) bx@@3) ($Is boolType ($Unbox boolType bx@@3) TBool)))
 :pattern ( ($IsBox bx@@3 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@4) ($IsAllocBox bx@@4 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@4))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall (($o@@9 T@U) ) (! ($Is refType $o@@9 Tclass._System.object?)
 :pattern ( ($Is refType $o@@9 Tclass._System.object?))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0@@2) h@@1) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i) t0@@2 h@@1))
 :pattern ( (|Seq#Index| v@@3 i))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0@@2) h@@1))
)))
(assert (forall ((_module.Iterator$T@@11 T@U) ($h@@10 T@U) ($o@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@10 null)) (not true)) (= (dtype $o@@10) (Tclass._module.Iterator? _module.Iterator$T@@11)))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@10) _module.Iterator.pos)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@10) _module.Iterator.pos)) (Tclass._module.Iterator? _module.Iterator$T@@11))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((_module.Collection$T@@6 T@U) ) (! (= (Tclass._module.Collection?_0 (Tclass._module.Collection? _module.Collection$T@@6)) _module.Collection$T@@6)
 :pattern ( (Tclass._module.Collection? _module.Collection$T@@6))
)))
(assert (forall ((_module.Collection$T@@7 T@U) ) (! (= (Tclass._module.Collection_0 (Tclass._module.Collection _module.Collection$T@@7)) _module.Collection$T@@7)
 :pattern ( (Tclass._module.Collection _module.Collection$T@@7))
)))
(assert (forall ((_module.Iterator$T@@12 T@U) ) (! (= (Tclass._module.Iterator_0 (Tclass._module.Iterator _module.Iterator$T@@12)) _module.Iterator$T@@12)
 :pattern ( (Tclass._module.Iterator _module.Iterator$T@@12))
)))
(assert (forall ((_module.Iterator$T@@13 T@U) ) (! (= (Tclass._module.Iterator?_0 (Tclass._module.Iterator? _module.Iterator$T@@13)) _module.Iterator$T@@13)
 :pattern ( (Tclass._module.Iterator? _module.Iterator$T@@13))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((_module.Collection$T@@8 T@U) ($h@@11 T@U) ($o@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@11 null)) (not true)) (= (dtype $o@@11) (Tclass._module.Collection? _module.Collection$T@@8)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@11) _module.Collection.elements)) (TSeq _module.Collection$T@@8)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@11) _module.Collection.elements)) (Tclass._module.Collection? _module.Collection$T@@8))
)))
(assert (forall ((_module.Iterator$T@@14 T@U) ($h@@12 T@U) ($o@@12 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) (Tclass._module.Iterator? _module.Iterator$T@@14)))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@12) _module.Iterator.c)) (Tclass._module.Collection _module.Iterator$T@@14)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@12) _module.Iterator.c)) (Tclass._module.Iterator? _module.Iterator$T@@14))
)))
(assert (forall ((bx@@5 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@5 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@5)) bx@@5) ($Is SetType ($Unbox SetType bx@@5) (TSet t@@5))))
 :pattern ( ($IsBox bx@@5 (TSet t@@5)))
)))
(assert (forall ((bx@@6 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@6 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@6)) bx@@6) ($Is SeqType ($Unbox SeqType bx@@6) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@6 (TSeq t@@6)))
)))
(assert (forall ((_module.Collection$T@@9 T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._module.Collection? _module.Collection$T@@9)) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) (Tclass._module.Collection? _module.Collection$T@@9))))
 :pattern ( ($IsBox bx@@7 (Tclass._module.Collection? _module.Collection$T@@9)))
)))
(assert (forall ((_module.Collection$T@@10 T@U) (bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 (Tclass._module.Collection _module.Collection$T@@10)) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) (Tclass._module.Collection _module.Collection$T@@10))))
 :pattern ( ($IsBox bx@@8 (Tclass._module.Collection _module.Collection$T@@10)))
)))
(assert (forall ((_module.Iterator$T@@15 T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._module.Iterator _module.Iterator$T@@15)) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) (Tclass._module.Iterator _module.Iterator$T@@15))))
 :pattern ( ($IsBox bx@@9 (Tclass._module.Iterator _module.Iterator$T@@15)))
)))
(assert (forall ((_module.Iterator$T@@16 T@U) (bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 (Tclass._module.Iterator? _module.Iterator$T@@16)) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) (Tclass._module.Iterator? _module.Iterator$T@@16))))
 :pattern ( ($IsBox bx@@10 (Tclass._module.Iterator? _module.Iterator$T@@16)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert  (and (forall ((t0@@3 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 t2 (MapType1Store t0@@3 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|l#5| T@U) ($o@@13 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#13| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5|) $o@@13 $f))  (=> (and (or (not (= $o@@13 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@13) |l#2|)))) (or (or (= $o@@13 |l#3|) (= $o@@13 |l#4|)) (|Set#IsMember| |l#5| ($Box refType $o@@13)))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#13| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5|) $o@@13 $f))
)))
(assert (forall ((s@@0 T@U) ) (!  (=> (= (|Seq#Length| s@@0) 0) (= s@@0 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((h@@2 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@2)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@2))
)))
(assert (forall ((h@@3 T@U) (v@@5 T@U) ) (! ($IsAlloc boolType v@@5 TBool h@@3)
 :pattern ( ($IsAlloc boolType v@@5 TBool h@@3))
)))
(assert (forall ((v@@6 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@4)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@0) t0@@4))
 :pattern ( (|Seq#Index| v@@6 i@@0))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@4)))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is intType v@@7 TInt)
 :pattern ( ($Is intType v@@7 TInt))
)))
(assert (forall ((v@@8 T@U) ) (! ($Is boolType v@@8 TBool)
 :pattern ( ($Is boolType v@@8 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module.Iterator$T@@17 () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun this@@1 () T@U)
(declare-fun |b$reqreads#3@0| () Bool)
(declare-fun |b$reqreads#4@1| () Bool)
(declare-fun |b$reqreads#5@1| () Bool)
(declare-fun |b$reqreads#6@1| () Bool)
(declare-fun |b$reqreads#4@0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun |b$reqreads#5@0| () Bool)
(declare-fun |b$reqreads#6@0| () Bool)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun |b$reqreads#2@0| () Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let ((anon5_correct  (=> (and (= (_module.Iterator.HasCurrent _module.Iterator$T@@17 $Heap@@1 this@@1)  (and (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.pos)))) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.pos))) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.c))) _module.Collection.elements)))))) ($Is boolType (bool_2_U (_module.Iterator.HasCurrent _module.Iterator$T@@17 $Heap@@1 this@@1)) TBool)) (and (=> (= (ControlFlow 0 3) (- 0 6)) |b$reqreads#3@0|) (=> |b$reqreads#3@0| (and (=> (= (ControlFlow 0 3) (- 0 5)) |b$reqreads#4@1|) (=> |b$reqreads#4@1| (and (=> (= (ControlFlow 0 3) (- 0 4)) |b$reqreads#5@1|) (=> |b$reqreads#5@1| (=> (= (ControlFlow 0 3) (- 0 2)) |b$reqreads#6@1|))))))))))
(let ((anon8_Else_correct  (=> (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.pos))) (LitInt 0)) (=> (and (and (= |b$reqreads#4@1| true) (= |b$reqreads#5@1| true)) (and (= |b$reqreads#6@1| true) (= (ControlFlow 0 9) 3))) anon5_correct))))
(let ((anon8_Then_correct  (=> (<= (LitInt 0) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.pos)))) (=> (and (= |b$reqreads#4@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@1 _module.Iterator.pos))) (= |b$reqreads#5@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@1 _module.Iterator.c)))) (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.c)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.c)) null)) (not true)) (=> (= |b$reqreads#6@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.c)) _module.Collection.elements))) (=> (and (and (= |b$reqreads#4@1| |b$reqreads#4@0|) (= |b$reqreads#5@1| |b$reqreads#5@0|)) (and (= |b$reqreads#6@1| |b$reqreads#6@0|) (= (ControlFlow 0 7) 3))) anon5_correct))))))))
(let ((anon7_Else_correct  (=> (= |b$reqreads#3@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@1 _module.Iterator.pos))) (and (=> (= (ControlFlow 0 10) 7) anon8_Then_correct) (=> (= (ControlFlow 0 10) 9) anon8_Else_correct)))))
(let ((anon7_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#13| null $Heap@@1 alloc this@@1 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.c)) ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.footprint)))) (=> (and (and ($IsAllocBox ($Box refType this@@1) (Tclass._module.Iterator? _module.Iterator$T@@17) $Heap@@1) (= |b$reqreads#0@0| (forall (($o@@14 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@14) alloc)))) (or (= $o@@14 this@@1) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@1) _module.Iterator.footprint)) ($Box refType $o@@14)))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@14 $f@@0)))))) (and (|_module.Iterator.Valid#canCall| _module.Iterator$T@@17 $Heap@@1 this@@1) (_module.Iterator.Valid _module.Iterator$T@@17 $Heap@@1 this@@1))) (and (=> (= (ControlFlow 0 11) (- 0 14)) |b$reqreads#0@0|) (=> |b$reqreads#0@0| (=> (and (= |b$reqreads#1@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@1 _module.Iterator.c))) (= |b$reqreads#2@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 this@@1 _module.Iterator.footprint)))) (and (=> (= (ControlFlow 0 11) (- 0 13)) |b$reqreads#1@0|) (=> |b$reqreads#1@0| (and (=> (= (ControlFlow 0 11) (- 0 12)) |b$reqreads#2@0|) (=> |b$reqreads#2@0| (and (=> (= (ControlFlow 0 11) 1) anon7_Then_correct) (=> (= (ControlFlow 0 11) 10) anon7_Else_correct)))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 (Tclass._module.Iterator _module.Iterator$T@@17)) ($IsAlloc refType this@@1 (Tclass._module.Iterator _module.Iterator$T@@17) $Heap@@1))) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 15) 11))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
