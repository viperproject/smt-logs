(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._module.Node? () T@U)
(declare-fun Tagclass._module.Node () T@U)
(declare-fun class._module.Node? () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun field$Spine () T@U)
(declare-fun field$next () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Map.SpineValid (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.Map.SpineValid#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Tclass._module.Node (T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Node? (T@U T@U) T@U)
(declare-fun null () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.Node.Spine () T@U)
(declare-fun _module.Node.next () T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun dtype (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Tclass._module.Node?_0 (T@U) T@U)
(declare-fun Tclass._module.Node?_1 (T@U) T@U)
(declare-fun Tclass._module.Node_0 (T@U) T@U)
(declare-fun Tclass._module.Node_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool TagSet alloc allocName Tagclass._module.Node? Tagclass._module.Node class._module.Node? tytagFamily$Node field$Spine field$next)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (DeclName alloc) allocName))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (forall ((a@@2 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b y@@0) (not (|Set#IsMember| (|Set#Difference| a@@2 b) y@@0)))
 :pattern ( (|Set#Difference| a@@2 b) (|Set#IsMember| b y@@0))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1)  (and (|Set#IsMember| a@@3 o@@1) (not (|Set#IsMember| b@@0 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1))
)))
(assert  (and (and (and (and (and (and (and (and (= (Ctor SetType) 3) (= (Ctor refType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module.Map$Key T@U) (_module.Map$Value T@U) ($ly T@U) ($Heap T@U) (|spine#0| T@U) (|n#0| T@U) ) (!  (=> (or (|_module.Map.SpineValid#canCall| _module.Map$Key _module.Map$Value $Heap |spine#0| |n#0|) (and (< 1 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is SetType |spine#0| (TSet (Tclass._module.Node _module.Map$Key _module.Map$Value)))) ($Is refType |n#0| (Tclass._module.Node? _module.Map$Key _module.Map$Value))))) (and (=> (not (and (= |n#0| null) (|Set#Equal| |spine#0| |Set#Empty|))) (=> (or (not (= |n#0| null)) (not true)) (=> (|Set#IsMember| |spine#0| ($Box refType |n#0|)) (=> (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#0|) _module.Node.Spine)) (|Set#Difference| |spine#0| (|Set#UnionOne| |Set#Empty| ($Box refType |n#0|)))) (|_module.Map.SpineValid#canCall| _module.Map$Key _module.Map$Value $Heap ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#0|) _module.Node.Spine)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#0|) _module.Node.next))))))) (= (_module.Map.SpineValid _module.Map$Key _module.Map$Value ($LS $ly) $Heap |spine#0| |n#0|)  (or (and (= |n#0| null) (|Set#Equal| |spine#0| |Set#Empty|)) (and (and (and (or (not (= |n#0| null)) (not true)) (|Set#IsMember| |spine#0| ($Box refType |n#0|))) (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#0|) _module.Node.Spine)) (|Set#Difference| |spine#0| (|Set#UnionOne| |Set#Empty| ($Box refType |n#0|))))) (_module.Map.SpineValid _module.Map$Key _module.Map$Value $ly $Heap ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#0|) _module.Node.Spine)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |n#0|) _module.Node.next))))))))
 :pattern ( (_module.Map.SpineValid _module.Map$Key _module.Map$Value ($LS $ly) $Heap |spine#0| |n#0|) ($IsGoodHeap $Heap))
))))
(assert (= (FDim _module.Node.Spine) 0))
(assert (= (FieldOfDecl class._module.Node? field$Spine) _module.Node.Spine))
(assert ($IsGhostField _module.Node.Spine))
(assert (= (FDim _module.Node.next) 0))
(assert (= (FieldOfDecl class._module.Node? field$next) _module.Node.next))
(assert  (not ($IsGhostField _module.Node.next)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (! (= (|Set#Subset| a@@4 b@@1) (forall ((o@@2 T@U) ) (!  (=> (|Set#IsMember| a@@4 o@@2) (|Set#IsMember| b@@1 o@@2))
 :pattern ( (|Set#IsMember| a@@4 o@@2))
 :pattern ( (|Set#IsMember| b@@1 o@@2))
)))
 :pattern ( (|Set#Subset| a@@4 b@@1))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@5)) x@@5)
 :pattern ( ($Unbox T x@@5))
)))
(assert (forall ((_module.Map$Key@@0 T@U) (_module.Map$Value@@0 T@U) ($ly@@0 T@U) ($Heap@@0 T@U) (|spine#0@@0| T@U) (|n#0@@0| T@U) ) (! (= (_module.Map.SpineValid _module.Map$Key@@0 _module.Map$Value@@0 ($LS $ly@@0) $Heap@@0 |spine#0@@0| |n#0@@0|) (_module.Map.SpineValid _module.Map$Key@@0 _module.Map$Value@@0 $ly@@0 $Heap@@0 |spine#0@@0| |n#0@@0|))
 :pattern ( (_module.Map.SpineValid _module.Map$Key@@0 _module.Map$Value@@0 ($LS $ly@@0) $Heap@@0 |spine#0@@0| |n#0@@0|))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((_module.Node$Key T@U) (_module.Node$Value T@U) (|c#0| T@U) ) (! (= ($Is refType |c#0| (Tclass._module.Node _module.Node$Key _module.Node$Value))  (and ($Is refType |c#0| (Tclass._module.Node? _module.Node$Key _module.Node$Value)) (or (not (= |c#0| null)) (not true))))
 :pattern ( ($Is refType |c#0| (Tclass._module.Node _module.Node$Key _module.Node$Value)))
 :pattern ( ($Is refType |c#0| (Tclass._module.Node? _module.Node$Key _module.Node$Value)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v@@0) t h) ($IsAlloc T@@0 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@0 v@@0) t h))
)))
(assert (forall ((_module.Node$Key@@0 T@U) (_module.Node$Value@@0 T@U) ($o T@U) ) (! (= ($Is refType $o (Tclass._module.Node? _module.Node$Key@@0 _module.Node$Value@@0))  (or (= $o null) (= (dtype $o) (Tclass._module.Node? _module.Node$Key@@0 _module.Node$Value@@0))))
 :pattern ( ($Is refType $o (Tclass._module.Node? _module.Node$Key@@0 _module.Node$Value@@0)))
)))
(assert (forall ((_module.Node$Key@@1 T@U) (_module.Node$Value@@1 T@U) (|c#0@@0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass._module.Node _module.Node$Key@@1 _module.Node$Value@@1) $h) ($IsAlloc refType |c#0@@0| (Tclass._module.Node? _module.Node$Key@@1 _module.Node$Value@@1) $h))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.Node _module.Node$Key@@1 _module.Node$Value@@1) $h))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._module.Node? _module.Node$Key@@1 _module.Node$Value@@1) $h))
)))
(assert (forall ((_module.Node$Key@@2 T@U) (_module.Node$Value@@2 T@U) ($o@@0 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass._module.Node? _module.Node$Key@@2 _module.Node$Value@@2) $h@@0)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass._module.Node? _module.Node$Key@@2 _module.Node$Value@@2) $h@@0))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (!  (=> (|Set#Equal| a@@5 b@@2) (= a@@5 b@@2))
 :pattern ( (|Set#Equal| a@@5 b@@2))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TBool) (and (= ($Box boolType ($Unbox boolType bx@@0)) bx@@0) ($Is boolType ($Unbox boolType bx@@0) TBool)))
 :pattern ( ($IsBox bx@@0 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@1 T@T) ) (! (= ($IsBox ($Box T@@1 v@@1) t@@0) ($Is T@@1 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@1 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@1) ($IsAllocBox bx@@1 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@1))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((_module.Node$Key@@3 T@U) (_module.Node$Value@@3 T@U) ) (! (= (Tclass._module.Node?_0 (Tclass._module.Node? _module.Node$Key@@3 _module.Node$Value@@3)) _module.Node$Key@@3)
 :pattern ( (Tclass._module.Node? _module.Node$Key@@3 _module.Node$Value@@3))
)))
(assert (forall ((_module.Node$Key@@4 T@U) (_module.Node$Value@@4 T@U) ) (! (= (Tclass._module.Node?_1 (Tclass._module.Node? _module.Node$Key@@4 _module.Node$Value@@4)) _module.Node$Value@@4)
 :pattern ( (Tclass._module.Node? _module.Node$Key@@4 _module.Node$Value@@4))
)))
(assert (forall ((_module.Node$Key@@5 T@U) (_module.Node$Value@@5 T@U) ) (! (= (Tclass._module.Node_0 (Tclass._module.Node _module.Node$Key@@5 _module.Node$Value@@5)) _module.Node$Key@@5)
 :pattern ( (Tclass._module.Node _module.Node$Key@@5 _module.Node$Value@@5))
)))
(assert (forall ((_module.Node$Key@@6 T@U) (_module.Node$Value@@6 T@U) ) (! (= (Tclass._module.Node_1 (Tclass._module.Node _module.Node$Key@@6 _module.Node$Value@@6)) _module.Node$Value@@6)
 :pattern ( (Tclass._module.Node _module.Node$Key@@6 _module.Node$Value@@6))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@6 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@6)) x@@6)
 :pattern ( ($Box T@@2 x@@6))
)))
(assert (forall ((_module.Node$Key@@7 T@U) (_module.Node$Value@@7 T@U) ($h@@1 T@U) ($o@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._module.Node? _module.Node$Key@@7 _module.Node$Value@@7)))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Node.next)) (Tclass._module.Node? _module.Node$Key@@7 _module.Node$Value@@7)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) _module.Node.next)) (Tclass._module.Node? _module.Node$Key@@7 _module.Node$Value@@7))
)))
(assert (forall ((_module.Node$Key@@8 T@U) (_module.Node$Value@@8 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._module.Node? _module.Node$Key@@8 _module.Node$Value@@8)) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) (Tclass._module.Node? _module.Node$Key@@8 _module.Node$Value@@8))))
 :pattern ( ($IsBox bx@@2 (Tclass._module.Node? _module.Node$Key@@8 _module.Node$Value@@8)))
)))
(assert (forall ((_module.Node$Key@@9 T@U) (_module.Node$Value@@9 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass._module.Node _module.Node$Key@@9 _module.Node$Value@@9)) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) (Tclass._module.Node _module.Node$Key@@9 _module.Node$Value@@9))))
 :pattern ( ($IsBox bx@@3 (Tclass._module.Node _module.Node$Key@@9 _module.Node$Value@@9)))
)))
(assert (forall ((_module.Node$Key@@10 T@U) (_module.Node$Value@@10 T@U) ) (!  (and (= (Tag (Tclass._module.Node? _module.Node$Key@@10 _module.Node$Value@@10)) Tagclass._module.Node?) (= (TagFamily (Tclass._module.Node? _module.Node$Key@@10 _module.Node$Value@@10)) tytagFamily$Node))
 :pattern ( (Tclass._module.Node? _module.Node$Key@@10 _module.Node$Value@@10))
)))
(assert (forall ((_module.Node$Key@@11 T@U) (_module.Node$Value@@11 T@U) ) (!  (and (= (Tag (Tclass._module.Node _module.Node$Key@@11 _module.Node$Value@@11)) Tagclass._module.Node) (= (TagFamily (Tclass._module.Node _module.Node$Key@@11 _module.Node$Value@@11)) tytagFamily$Node))
 :pattern ( (Tclass._module.Node _module.Node$Key@@11 _module.Node$Value@@11))
)))
(assert (forall ((_module.Node$Key@@12 T@U) (_module.Node$Value@@12 T@U) ($h@@2 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._module.Node? _module.Node$Key@@12 _module.Node$Value@@12)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Node.next)) (Tclass._module.Node? _module.Node$Key@@12 _module.Node$Value@@12) $h@@2))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) _module.Node.next)) (Tclass._module.Node? _module.Node$Key@@12 _module.Node$Value@@12))
)))
(assert (forall ((bx@@4 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@3))))
 :pattern ( ($IsBox bx@@4 (TSet t@@3)))
)))
(assert (forall ((_module.Node$Key@@13 T@U) (_module.Node$Value@@13 T@U) ($h@@3 T@U) ($o@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._module.Node? _module.Node$Key@@13 _module.Node$Value@@13)))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.Node.Spine)) (TSet (Tclass._module.Node _module.Node$Key@@13 _module.Node$Value@@13))))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.Node.Spine)) (Tclass._module.Node? _module.Node$Key@@13 _module.Node$Value@@13))
)))
(assert (forall ((_module.Node$Key@@14 T@U) (_module.Node$Value@@14 T@U) ($h@@4 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._module.Node? _module.Node$Key@@14 _module.Node$Value@@14)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.Node.Spine)) (TSet (Tclass._module.Node _module.Node$Key@@14 _module.Node$Value@@14)) $h@@4))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.Node.Spine)) (Tclass._module.Node? _module.Node$Key@@14 _module.Node$Value@@14))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) ) (! (= (|Set#Equal| a@@6 b@@3) (forall ((o@@3 T@U) ) (! (= (|Set#IsMember| a@@6 o@@3) (|Set#IsMember| b@@3 o@@3))
 :pattern ( (|Set#IsMember| a@@6 o@@3))
 :pattern ( (|Set#IsMember| b@@3 o@@3))
)))
 :pattern ( (|Set#Equal| a@@6 b@@3))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#1| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@5) |l#2|)))) (|Set#IsMember| |l#3| ($Box refType $o@@5))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#1| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc boolType v@@3 TBool h@@1)
 :pattern ( ($IsAlloc boolType v@@3 TBool h@@1))
)))
(assert (forall ((v@@4 T@U) ) (! ($Is boolType v@@4 TBool)
 :pattern ( ($Is boolType v@@4 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun _module.Map$Key@@1 () T@U)
(declare-fun _module.Map$Value@@1 () T@U)
(declare-fun $LZ () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun |spine#0@@1| () T@U)
(declare-fun |n#0@@1| () T@U)
(declare-fun |b$reqreads#0@2| () Bool)
(declare-fun |b$reqreads#1@1| () Bool)
(declare-fun |b$reqreads#2@1| () Bool)
(declare-fun |b$reqreads#3@1| () Bool)
(declare-fun |b$reqreads#0@1| () Bool)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun |##spine#0@0| () T@U)
(declare-fun |b$reqreads#2@0| () Bool)
(declare-fun |##n#0@0| () T@U)
(declare-fun |b$reqreads#3@0| () Bool)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 22) (let ((anon12_correct  (=> (= (_module.Map.SpineValid _module.Map$Key@@1 _module.Map$Value@@1 ($LS $LZ) $Heap@@1 |spine#0@@1| |n#0@@1|)  (or (and (= |n#0@@1| null) (|Set#Equal| |spine#0@@1| |Set#Empty|)) (and (and (and (or (not (= |n#0@@1| null)) (not true)) (|Set#IsMember| |spine#0@@1| ($Box refType |n#0@@1|))) (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.Spine)) (|Set#Difference| |spine#0@@1| (|Set#UnionOne| |Set#Empty| ($Box refType |n#0@@1|))))) (_module.Map.SpineValid _module.Map$Key@@1 _module.Map$Value@@1 ($LS $LZ) $Heap@@1 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.Spine)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.next)))))) (=> (and (=> (not (and (= |n#0@@1| null) (|Set#Equal| |spine#0@@1| |Set#Empty|))) (=> (or (not (= |n#0@@1| null)) (not true)) (=> (|Set#IsMember| |spine#0@@1| ($Box refType |n#0@@1|)) (=> (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.Spine)) (|Set#Difference| |spine#0@@1| (|Set#UnionOne| |Set#Empty| ($Box refType |n#0@@1|)))) (|_module.Map.SpineValid#canCall| _module.Map$Key@@1 _module.Map$Value@@1 $Heap@@1 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.Spine)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.next))))))) ($Is boolType (bool_2_U (_module.Map.SpineValid _module.Map$Key@@1 _module.Map$Value@@1 ($LS $LZ) $Heap@@1 |spine#0@@1| |n#0@@1|)) TBool)) (and (=> (= (ControlFlow 0 3) (- 0 6)) |b$reqreads#0@2|) (=> |b$reqreads#0@2| (and (=> (= (ControlFlow 0 3) (- 0 5)) |b$reqreads#1@1|) (=> |b$reqreads#1@1| (and (=> (= (ControlFlow 0 3) (- 0 4)) |b$reqreads#2@1|) (=> |b$reqreads#2@1| (=> (= (ControlFlow 0 3) (- 0 2)) |b$reqreads#3@1|)))))))))))
(let ((anon19_Else_correct  (=> (and (not (and (and (or (not (= |n#0@@1| null)) (not true)) (|Set#IsMember| |spine#0@@1| ($Box refType |n#0@@1|))) (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.Spine)) (|Set#Difference| |spine#0@@1| (|Set#UnionOne| |Set#Empty| ($Box refType |n#0@@1|)))))) (= |b$reqreads#0@2| |b$reqreads#0@1|)) (=> (and (and (= |b$reqreads#1@1| true) (= |b$reqreads#2@1| true)) (and (= |b$reqreads#3@1| true) (= (ControlFlow 0 12) 3))) anon12_correct))))
(let ((anon19_Then_correct  (=> (and (and (or (not (= |n#0@@1| null)) (not true)) (|Set#IsMember| |spine#0@@1| ($Box refType |n#0@@1|))) (|Set#Equal| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.Spine)) (|Set#Difference| |spine#0@@1| (|Set#UnionOne| |Set#Empty| ($Box refType |n#0@@1|))))) (and (=> (= (ControlFlow 0 8) (- 0 11)) (or (not (= |n#0@@1| null)) (not true))) (=> (or (not (= |n#0@@1| null)) (not true)) (=> (= |b$reqreads#1@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 |n#0@@1| _module.Node.Spine))) (=> (and (= |##spine#0@0| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.Spine))) ($IsAlloc SetType |##spine#0@0| (TSet (Tclass._module.Node _module.Map$Key@@1 _module.Map$Value@@1)) $Heap@@1)) (and (=> (= (ControlFlow 0 8) (- 0 10)) (or (not (= |n#0@@1| null)) (not true))) (=> (or (not (= |n#0@@1| null)) (not true)) (=> (and (and (= |b$reqreads#2@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 |n#0@@1| _module.Node.next))) (= |##n#0@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.next)))) (and ($IsAlloc refType |##n#0@0| (Tclass._module.Node? _module.Map$Key@@1 _module.Map$Value@@1) $Heap@@1) (= |b$reqreads#3@0| (forall (($o@@6 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@6) alloc)))) (|Set#IsMember| |##spine#0@0| ($Box refType $o@@6))) (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 $o@@6 $f@@0))))))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (and (|Set#Subset| |##spine#0@0| |spine#0@@1|) (not (|Set#Subset| |spine#0@@1| |##spine#0@0|))) (and (|Set#Equal| |##spine#0@0| |spine#0@@1|) (or (and (|Set#Subset| |##spine#0@0| |spine#0@@1|) (not (|Set#Subset| |spine#0@@1| |##spine#0@0|))) (and (|Set#Equal| |##spine#0@0| |spine#0@@1|) (and (= |##n#0@0| null) (or (not (= |n#0@@1| null)) (not true)))))))) (=> (or (and (|Set#Subset| |##spine#0@0| |spine#0@@1|) (not (|Set#Subset| |spine#0@@1| |##spine#0@0|))) (and (|Set#Equal| |##spine#0@0| |spine#0@@1|) (or (and (|Set#Subset| |##spine#0@0| |spine#0@@1|) (not (|Set#Subset| |spine#0@@1| |##spine#0@0|))) (and (|Set#Equal| |##spine#0@0| |spine#0@@1|) (and (= |##n#0@0| null) (or (not (= |n#0@@1| null)) (not true))))))) (=> (and (|_module.Map.SpineValid#canCall| _module.Map$Key@@1 _module.Map$Value@@1 $Heap@@1 ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.Spine)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 |n#0@@1|) _module.Node.next))) (= |b$reqreads#0@2| |b$reqreads#0@1|)) (=> (and (and (= |b$reqreads#1@1| |b$reqreads#1@0|) (= |b$reqreads#2@1| |b$reqreads#2@0|)) (and (= |b$reqreads#3@1| |b$reqreads#3@0|) (= (ControlFlow 0 8) 3))) anon12_correct))))))))))))))
(let ((anon18_Else_correct  (=> (and (not (and (or (not (= |n#0@@1| null)) (not true)) (|Set#IsMember| |spine#0@@1| ($Box refType |n#0@@1|)))) (= |b$reqreads#0@1| true)) (and (=> (= (ControlFlow 0 15) 8) anon19_Then_correct) (=> (= (ControlFlow 0 15) 12) anon19_Else_correct)))))
(let ((anon18_Then_correct  (=> (and (or (not (= |n#0@@1| null)) (not true)) (|Set#IsMember| |spine#0@@1| ($Box refType |n#0@@1|))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (or (not (= |n#0@@1| null)) (not true))) (=> (or (not (= |n#0@@1| null)) (not true)) (=> (and (= |b$reqreads#0@0| (U_2_bool (MapType1Select refType FieldType boolType $_ReadsFrame@0 |n#0@@1| _module.Node.Spine))) (= |b$reqreads#0@1| |b$reqreads#0@0|)) (and (=> (= (ControlFlow 0 13) 8) anon19_Then_correct) (=> (= (ControlFlow 0 13) 12) anon19_Else_correct))))))))
(let ((anon17_Else_correct  (=> (= |n#0@@1| null) (and (=> (= (ControlFlow 0 17) 13) anon18_Then_correct) (=> (= (ControlFlow 0 17) 15) anon18_Else_correct)))))
(let ((anon17_Then_correct  (=> (or (not (= |n#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 16) 13) anon18_Then_correct) (=> (= (ControlFlow 0 16) 15) anon18_Else_correct)))))
(let ((anon16_Then_correct  (=> (not (and (= |n#0@@1| null) (|Set#Equal| |spine#0@@1| |Set#Empty|))) (and (=> (= (ControlFlow 0 18) 16) anon17_Then_correct) (=> (= (ControlFlow 0 18) 17) anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (and (and (and (= |n#0@@1| null) (|Set#Equal| |spine#0@@1| |Set#Empty|)) (= |b$reqreads#0@2| true)) (and (and (= |b$reqreads#1@1| true) (= |b$reqreads#2@1| true)) (and (= |b$reqreads#3@1| true) (= (ControlFlow 0 7) 3)))) anon12_correct)))
(let ((anon15_Else_correct  (=> (or (not (= |n#0@@1| null)) (not true)) (and (=> (= (ControlFlow 0 20) 18) anon16_Then_correct) (=> (= (ControlFlow 0 20) 7) anon16_Else_correct)))))
(let ((anon15_Then_correct  (=> (= |n#0@@1| null) (and (=> (= (ControlFlow 0 19) 18) anon16_Then_correct) (=> (= (ControlFlow 0 19) 7) anon16_Else_correct)))))
(let ((anon14_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#1| null $Heap@@1 alloc |spine#0@@1|)) (and (and (=> (= (ControlFlow 0 21) 1) anon14_Then_correct) (=> (= (ControlFlow 0 21) 19) anon15_Then_correct)) (=> (= (ControlFlow 0 21) 20) anon15_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and ($Is SetType |spine#0@@1| (TSet (Tclass._module.Node _module.Map$Key@@1 _module.Map$Value@@1))) ($Is refType |n#0@@1| (Tclass._module.Node? _module.Map$Key@@1 _module.Map$Value@@1))) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 22) 21))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
