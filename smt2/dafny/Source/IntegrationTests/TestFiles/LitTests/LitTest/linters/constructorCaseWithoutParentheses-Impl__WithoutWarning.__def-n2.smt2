(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 (T@U) T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@36 (T@U T@U) Bool)
(declare-fun $generated@@37 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@T)
(declare-fun $generated@@41 (T@T T@T) T@T)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@44 (T@T) T@T)
(declare-fun $generated@@45 (T@T) T@T)
(declare-fun $generated@@66 (T@T T@U) T@U)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U) Bool)
(declare-fun $generated@@77 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@91 (T@U) T@U)
(declare-fun $generated@@92 (T@U) T@U)
(declare-fun $generated@@94 (T@U T@U) Bool)
(declare-fun $generated@@97 (T@U) Bool)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@116 (T@U) Int)
(declare-fun $generated@@117 (T@U) Int)
(declare-fun $generated@@122 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@123 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@124 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated@@26) $generated@@3))
(assert (= ($generated@@25 $generated@@27) $generated@@5))
(assert (= ($generated@@9 $generated@@30) 3))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@U) ) (!  (=> ($generated@@29 $generated@@30 $generated@@33 ($generated@@31 $generated@@32)) ($generated@@28 $generated@@33))
 :pattern ( ($generated@@28 $generated@@33) ($generated@@29 $generated@@30 $generated@@33 ($generated@@31 $generated@@32)))
)))
(assert ($generated@@29 $generated@@30 $generated@@26 $generated@@34))
(assert ($generated@@29 $generated@@30 $generated@@27 $generated@@35))
(assert  (and (and (and (and (and (and (and (forall (($generated@@46 T@T) ($generated@@47 T@T) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@37 $generated@@46 $generated@@47 ($generated@@43 $generated@@46 $generated@@47 $generated@@49 $generated@@50 $generated@@48) $generated@@50) $generated@@48)
 :weight 0
)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ) (!  (or (= $generated@@55 $generated@@56) (= ($generated@@37 $generated@@51 $generated@@52 ($generated@@43 $generated@@51 $generated@@52 $generated@@54 $generated@@55 $generated@@53) $generated@@56) ($generated@@37 $generated@@51 $generated@@52 $generated@@54 $generated@@56)))
 :weight 0
))) (= ($generated@@9 $generated@@38) 4)) (= ($generated@@9 $generated@@39) 5)) (= ($generated@@9 $generated@@40) 6)) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (= ($generated@@9 ($generated@@41 $generated@@57 $generated@@58)) 7))) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (! (= ($generated@@44 ($generated@@41 $generated@@59 $generated@@60)) $generated@@59)
 :pattern ( ($generated@@41 $generated@@59 $generated@@60))
))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@45 ($generated@@41 $generated@@61 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@41 $generated@@61 $generated@@62))
))))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> ($generated@@36 $generated@@63 $generated@@64) (forall (($generated@@65 T@U) ) (!  (=> ($generated@@14 ($generated@@42 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@40 ($generated@@41 $generated@@38 $generated@@39) $generated@@63 $generated@@65) $generated))) ($generated@@14 ($generated@@42 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@40 ($generated@@41 $generated@@38 $generated@@39) $generated@@64 $generated@@65) $generated))))
 :pattern ( ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@40 ($generated@@41 $generated@@38 $generated@@39) $generated@@64 $generated@@65) $generated))
)))
 :pattern ( ($generated@@36 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@T) ) (! (= ($generated@@66 $generated@@68 $generated@@67) $generated@@67)
 :pattern ( ($generated@@66 $generated@@68 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@28 $generated@@69) (= ($generated@@25 $generated@@69) $generated@@4))
 :pattern ( ($generated@@28 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 ($generated@@42 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@42 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@28 $generated@@74) (exists (($generated@@75 T@U) ) (= $generated@@74 ($generated@@73 $generated@@75))))
 :pattern ( ($generated@@28 $generated@@74))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@T) ) (! (= ($generated@@76 ($generated@@70 $generated@@81 $generated@@78) $generated@@79 $generated@@80) ($generated@@77 $generated@@81 $generated@@78 $generated@@79 $generated@@80))
 :pattern ( ($generated@@76 ($generated@@70 $generated@@81 $generated@@78) $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (=> ($generated@@36 $generated@@82 $generated@@83) (=> ($generated@@76 $generated@@84 $generated@@85 $generated@@82) ($generated@@76 $generated@@84 $generated@@85 $generated@@83)))
 :pattern ( ($generated@@36 $generated@@82 $generated@@83) ($generated@@76 $generated@@84 $generated@@85 $generated@@82))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@T) ) (!  (=> ($generated@@36 $generated@@86 $generated@@87) (=> ($generated@@77 $generated@@90 $generated@@88 $generated@@89 $generated@@86) ($generated@@77 $generated@@90 $generated@@88 $generated@@89 $generated@@87)))
 :pattern ( ($generated@@36 $generated@@86 $generated@@87) ($generated@@77 $generated@@90 $generated@@88 $generated@@89 $generated@@86))
)))
(assert (forall (($generated@@93 T@U) ) (!  (and (= ($generated@@91 ($generated@@31 $generated@@93)) $generated@@1) (= ($generated@@92 ($generated@@31 $generated@@93)) $generated@@7))
 :pattern ( ($generated@@31 $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ) (!  (=> ($generated@@94 $generated@@95 $generated@@35) (and (= ($generated@@70 $generated@@30 ($generated@@42 $generated@@30 $generated@@95)) $generated@@95) ($generated@@29 $generated@@30 ($generated@@42 $generated@@30 $generated@@95) $generated@@35)))
 :pattern ( ($generated@@94 $generated@@95 $generated@@35))
)))
(assert (forall (($generated@@96 T@U) ) (!  (=> ($generated@@94 $generated@@96 $generated@@34) (and (= ($generated@@70 $generated@@30 ($generated@@42 $generated@@30 $generated@@96)) $generated@@96) ($generated@@29 $generated@@30 ($generated@@42 $generated@@30 $generated@@96) $generated@@34)))
 :pattern ( ($generated@@94 $generated@@96 $generated@@34))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (!  (=> ($generated@@97 $generated@@100) (= ($generated@@77 $generated@@30 ($generated@@73 $generated@@99) ($generated@@31 $generated@@98) $generated@@100) ($generated@@76 $generated@@99 $generated@@98 $generated@@100)))
 :pattern ( ($generated@@77 $generated@@30 ($generated@@73 $generated@@99) ($generated@@31 $generated@@98) $generated@@100))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (=> (or (not (= $generated@@101 $generated@@103)) (not true)) (=> (and ($generated@@36 $generated@@101 $generated@@102) ($generated@@36 $generated@@102 $generated@@103)) ($generated@@36 $generated@@101 $generated@@103)))
 :pattern ( ($generated@@36 $generated@@101 $generated@@102) ($generated@@36 $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@94 ($generated@@70 $generated@@106 $generated@@104) $generated@@105) ($generated@@29 $generated@@106 $generated@@104 $generated@@105))
 :pattern ( ($generated@@94 ($generated@@70 $generated@@106 $generated@@104) $generated@@105))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@107 ($generated@@31 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@31 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ) (! (= ($generated@@25 ($generated@@73 $generated@@109)) $generated@@4)
 :pattern ( ($generated@@73 $generated@@109))
)))
(assert (forall (($generated@@111 T@U) ) (! (= ($generated@@110 ($generated@@73 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@73 $generated@@111))
)))
(assert (forall (($generated@@112 T@U) ($generated@@113 T@T) ) (! (= ($generated@@42 $generated@@113 ($generated@@70 $generated@@113 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@70 $generated@@113 $generated@@112))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@29 $generated@@30 ($generated@@73 $generated@@115) ($generated@@31 $generated@@114)) ($generated@@94 $generated@@115 $generated@@114))
 :pattern ( ($generated@@29 $generated@@30 ($generated@@73 $generated@@115) ($generated@@31 $generated@@114)))
)))
(assert (forall (($generated@@118 T@U) ) (! (< ($generated@@116 $generated@@118) ($generated@@117 ($generated@@73 $generated@@118)))
 :pattern ( ($generated@@73 $generated@@118))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (=> (and ($generated@@97 $generated@@121) (and ($generated@@28 $generated@@119) ($generated@@77 $generated@@30 $generated@@119 ($generated@@31 $generated@@120) $generated@@121))) ($generated@@76 ($generated@@110 $generated@@119) $generated@@120 $generated@@121))
 :pattern ( ($generated@@76 ($generated@@110 $generated@@119) $generated@@120 $generated@@121))
)))
(assert  (and (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@122 $generated@@125 $generated@@126 $generated@@127 ($generated@@124 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@130 $generated@@131) $generated@@128)
 :weight 0
)) (and (forall (($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@T) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@137 $generated@@139) (= ($generated@@122 $generated@@132 $generated@@133 $generated@@134 ($generated@@124 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@137 $generated@@138 $generated@@135) $generated@@139 $generated@@140) ($generated@@122 $generated@@132 $generated@@133 $generated@@134 $generated@@136 $generated@@139 $generated@@140)))
 :weight 0
)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ($generated@@143 T@T) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ) (!  (or (= $generated@@147 $generated@@149) (= ($generated@@122 $generated@@141 $generated@@142 $generated@@143 ($generated@@124 $generated@@141 $generated@@142 $generated@@143 $generated@@145 $generated@@146 $generated@@147 $generated@@144) $generated@@148 $generated@@149) ($generated@@122 $generated@@141 $generated@@142 $generated@@143 $generated@@145 $generated@@148 $generated@@149)))
 :weight 0
)))))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 Bool) ($generated@@154 T@U) ($generated@@155 T@U) ) (! (= ($generated@@14 ($generated@@122 $generated@@40 $generated@@38 $generated@@10 ($generated@@123 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))  (=> (and (or (not (= $generated@@154 $generated@@150)) (not true)) ($generated@@14 ($generated@@42 $generated@@10 ($generated@@37 $generated@@38 $generated@@39 ($generated@@37 $generated@@40 ($generated@@41 $generated@@38 $generated@@39) $generated@@151 $generated@@154) $generated@@152)))) $generated@@153))
 :pattern ( ($generated@@122 $generated@@40 $generated@@38 $generated@@10 ($generated@@123 $generated@@150 $generated@@151 $generated@@152 $generated@@153) $generated@@154 $generated@@155))
)))
(assert (forall (($generated@@156 T@U) ) (! (= ($generated@@116 ($generated@@70 $generated@@30 $generated@@156)) ($generated@@117 $generated@@156))
 :pattern ( ($generated@@116 ($generated@@70 $generated@@30 $generated@@156)))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (!  (=> ($generated@@94 $generated@@158 ($generated@@31 $generated@@157)) (and (= ($generated@@70 $generated@@30 ($generated@@42 $generated@@30 $generated@@158)) $generated@@158) ($generated@@29 $generated@@30 ($generated@@42 $generated@@30 $generated@@158) ($generated@@31 $generated@@157))))
 :pattern ( ($generated@@94 $generated@@158 ($generated@@31 $generated@@157)))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (!  (=> (and ($generated@@97 $generated@@160) ($generated@@29 $generated@@30 $generated@@159 $generated@@34)) ($generated@@77 $generated@@30 $generated@@159 $generated@@34 $generated@@160))
 :pattern ( ($generated@@77 $generated@@30 $generated@@159 $generated@@34 $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> (and ($generated@@97 $generated@@162) ($generated@@29 $generated@@30 $generated@@161 $generated@@35)) ($generated@@77 $generated@@30 $generated@@161 $generated@@35 $generated@@162))
 :pattern ( ($generated@@77 $generated@@30 $generated@@161 $generated@@35 $generated@@162))
)))
(assert (= ($generated@@91 $generated@@35) $generated@@0))
(assert (= ($generated@@92 $generated@@35) $generated@@6))
(assert (= ($generated@@91 $generated@@34) $generated@@2))
(assert (= ($generated@@92 $generated@@34) $generated@@8))
(assert (= $generated@@26 ($generated@@66 $generated@@30 $generated@@26)))
(assert (= $generated@@27 ($generated@@66 $generated@@30 $generated@@27)))
(assert (forall (($generated@@163 T@U) ) (! (= ($generated@@73 ($generated@@66 $generated@@39 $generated@@163)) ($generated@@66 $generated@@30 ($generated@@73 $generated@@163)))
 :pattern ( ($generated@@73 ($generated@@66 $generated@@39 $generated@@163)))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@T) ) (! (= ($generated@@70 $generated@@165 ($generated@@66 $generated@@165 $generated@@164)) ($generated@@66 $generated@@39 ($generated@@70 $generated@@165 $generated@@164)))
 :pattern ( ($generated@@70 $generated@@165 ($generated@@66 $generated@@165 $generated@@164)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
