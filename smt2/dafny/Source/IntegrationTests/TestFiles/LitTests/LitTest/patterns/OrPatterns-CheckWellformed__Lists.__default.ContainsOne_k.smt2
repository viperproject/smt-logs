(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U T@U T@U) Int)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@31 () Int)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 (T@U T@U) Bool)
(declare-fun $generated@@36 (T@T T@U T@U) Bool)
(declare-fun $generated@@37 (T@U) T@U)
(declare-fun $generated@@38 (T@U) Bool)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@40 (Int) Int)
(declare-fun $generated@@49 (T@U) T@U)
(declare-fun $generated@@50 () T@U)
(declare-fun $generated@@51 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@59 (T@U T@U) T@U)
(declare-fun $generated@@60 (T@U T@U) Bool)
(declare-fun $generated@@65 (T@U) Bool)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@80 (T@U T@U T@U) Bool)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@87 (T@U) Bool)
(declare-fun $generated@@88 (T@U) Bool)
(declare-fun $generated@@89 () T@U)
(declare-fun $generated@@90 (T@U) T@U)
(declare-fun $generated@@105 (T@U) T@U)
(declare-fun $generated@@109 (T@U) Int)
(declare-fun $generated@@110 (T@U) Int)
(declare-fun $generated@@118 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@119 () T@T)
(declare-fun $generated@@120 () T@T)
(declare-fun $generated@@121 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@122 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@123 () T@T)
(declare-fun $generated@@124 (T@T T@T) T@T)
(declare-fun $generated@@125 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@127 (T@T) T@T)
(declare-fun $generated@@128 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@1))
(assert (= ($generated@@24 $generated@@0) $generated@@2))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@25 $generated@@28 $generated@@29 $generated@@30) ($generated@@25 $generated@@28 $generated@@27 $generated@@30))
 :pattern ( ($generated@@25 $generated@@28 ($generated@@26 $generated@@29) $generated@@30))
)))
(assert (= ($generated@@8 $generated@@34) 3))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (=> (or ($generated@@35 $generated@@41 ($generated@@33 $generated@@34 $generated@@43)) (and (< 1 $generated@@31) ($generated@@36 $generated@@34 $generated@@43 ($generated@@37 $generated@@41)))) (and (=> (not ($generated@@13 ($generated@@33 $generated@@9 ($generated@@12 ($generated@@38 ($generated@@33 $generated@@34 $generated@@43)))))) (let (($generated@@44 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 $generated@@43)))))
($generated@@35 $generated@@41 $generated@@44))) (= ($generated@@25 $generated@@41 ($generated@@32 $generated@@42) ($generated@@33 $generated@@34 $generated@@43)) (ite ($generated@@38 ($generated@@33 $generated@@34 $generated@@43)) 0 (let (($generated@@45 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 $generated@@43)))))
($generated@@40 (+ 1 ($generated@@25 $generated@@41 ($generated@@32 $generated@@42) $generated@@45))))))))
 :weight 3
 :pattern ( ($generated@@25 $generated@@41 ($generated@@32 $generated@@42) ($generated@@33 $generated@@34 $generated@@43)))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@25 $generated@@46 ($generated@@32 $generated@@47) $generated@@48) ($generated@@25 $generated@@46 $generated@@47 $generated@@48))
 :pattern ( ($generated@@25 $generated@@46 ($generated@@32 $generated@@47) $generated@@48))
)))
(assert (= ($generated@@49 $generated@@50) $generated@@5))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (=> ($generated@@52 $generated@@54) ($generated@@51 $generated@@34 $generated@@50 ($generated@@37 $generated@@53) $generated@@54))
 :pattern ( ($generated@@51 $generated@@34 $generated@@50 ($generated@@37 $generated@@53) $generated@@54))
)))
(assert (forall (($generated@@55 T@U) ) (! ($generated@@36 $generated@@34 $generated@@50 ($generated@@37 $generated@@55))
 :pattern ( ($generated@@36 $generated@@34 $generated@@50 ($generated@@37 $generated@@55)))
)))
(assert (forall (($generated@@56 Int) ) (! (= ($generated@@40 $generated@@56) $generated@@56)
 :pattern ( ($generated@@40 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@33 $generated@@58 $generated@@57) $generated@@57)
 :pattern ( ($generated@@33 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (! (= ($generated@@36 $generated@@34 ($generated@@59 $generated@@62 $generated@@63) ($generated@@37 $generated@@61))  (and ($generated@@60 $generated@@62 $generated@@61) ($generated@@36 $generated@@34 $generated@@63 ($generated@@37 $generated@@61))))
 :pattern ( ($generated@@36 $generated@@34 ($generated@@59 $generated@@62 $generated@@63) ($generated@@37 $generated@@61)))
)))
(assert (forall (($generated@@64 T@U) ) (! (= ($generated@@38 $generated@@64) (= ($generated@@49 $generated@@64) $generated@@5))
 :pattern ( ($generated@@38 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ) (! (= ($generated@@65 $generated@@66) (= ($generated@@49 $generated@@66) $generated@@6))
 :pattern ( ($generated@@65 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@68 $generated@@70 ($generated@@67 $generated@@70 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@67 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (!  (=> ($generated@@65 $generated@@71) (exists (($generated@@72 T@U) ($generated@@73 T@U) ) (= $generated@@71 ($generated@@59 $generated@@72 $generated@@73))))
 :pattern ( ($generated@@65 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ) (!  (=> ($generated@@38 $generated@@74) (= $generated@@74 $generated@@50))
 :pattern ( ($generated@@38 $generated@@74))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> (or ($generated@@35 $generated@@75 $generated@@77) (and (< 1 $generated@@31) ($generated@@36 $generated@@34 $generated@@77 ($generated@@37 $generated@@75)))) (and (=> (not ($generated@@38 $generated@@77)) (let (($generated@@78 ($generated@@39 $generated@@77)))
($generated@@35 $generated@@75 $generated@@78))) (= ($generated@@25 $generated@@75 ($generated@@32 $generated@@76) $generated@@77) (ite ($generated@@38 $generated@@77) 0 (let (($generated@@79 ($generated@@39 $generated@@77)))
(+ 1 ($generated@@25 $generated@@75 $generated@@76 $generated@@79)))))))
 :pattern ( ($generated@@25 $generated@@75 ($generated@@32 $generated@@76) $generated@@77))
))))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@80 ($generated@@68 $generated@@84 $generated@@81) $generated@@82 $generated@@83) ($generated@@51 $generated@@84 $generated@@81 $generated@@82 $generated@@83))
 :pattern ( ($generated@@80 ($generated@@68 $generated@@84 $generated@@81) $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@86 T@U) ) (!  (and (= ($generated@@24 ($generated@@37 $generated@@86)) $generated@@4) (= ($generated@@85 ($generated@@37 $generated@@86)) $generated@@7))
 :pattern ( ($generated@@37 $generated@@86))
)))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@91 T@U) ) (!  (=> (or ($generated@@88 ($generated@@33 $generated@@34 $generated@@91)) (and (< 2 $generated@@31) (and ($generated@@36 $generated@@34 $generated@@91 ($generated@@37 $generated@@0)) (= ($generated@@40 ($generated@@25 $generated@@0 $generated@@89 ($generated@@33 $generated@@34 $generated@@91))) ($generated@@40 3))))) (= ($generated@@87 ($generated@@33 $generated@@34 $generated@@91)) (ite (= ($generated@@40 ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@33 $generated@@34 $generated@@91))))) ($generated@@40 1)) (ite (= ($generated@@40 ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 $generated@@91))))))) ($generated@@40 1)) (ite (= ($generated@@40 ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 $generated@@91))))))))) ($generated@@40 1)) true true) (ite (= ($generated@@40 ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 $generated@@91))))))))) ($generated@@40 1)) true true)) (ite (= ($generated@@40 ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 $generated@@91))))))) ($generated@@40 1)) (ite (= ($generated@@40 ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 $generated@@91))))))))) ($generated@@40 1)) true true) (ite (= ($generated@@40 ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 ($generated@@39 ($generated@@33 $generated@@34 $generated@@91))))))))) ($generated@@40 1)) true false)))))
 :weight 3
 :pattern ( ($generated@@87 ($generated@@33 $generated@@34 $generated@@91)))
))))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ) (!  (=> ($generated@@36 $generated@@34 $generated@@93 ($generated@@37 $generated@@92)) (or ($generated@@38 $generated@@93) ($generated@@65 $generated@@93)))
 :pattern ( ($generated@@65 $generated@@93) ($generated@@36 $generated@@34 $generated@@93 ($generated@@37 $generated@@92)))
 :pattern ( ($generated@@38 $generated@@93) ($generated@@36 $generated@@34 $generated@@93 ($generated@@37 $generated@@92)))
)))
(assert (forall (($generated@@94 T@U) ) (!  (=> ($generated@@60 $generated@@94 $generated@@0) (and (= ($generated@@68 $generated@@10 ($generated@@67 $generated@@10 $generated@@94)) $generated@@94) ($generated@@36 $generated@@10 ($generated@@67 $generated@@10 $generated@@94) $generated@@0)))
 :pattern ( ($generated@@60 $generated@@94 $generated@@0))
)))
(assert (forall (($generated@@95 T@U) ) (!  (=> ($generated@@60 $generated@@95 $generated) (and (= ($generated@@68 $generated@@9 ($generated@@67 $generated@@9 $generated@@95)) $generated@@95) ($generated@@36 $generated@@9 ($generated@@67 $generated@@9 $generated@@95) $generated)))
 :pattern ( ($generated@@60 $generated@@95 $generated))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@T) ) (! (= ($generated@@60 ($generated@@68 $generated@@98 $generated@@96) $generated@@97) ($generated@@36 $generated@@98 $generated@@96 $generated@@97))
 :pattern ( ($generated@@60 ($generated@@68 $generated@@98 $generated@@96) $generated@@97))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@49 ($generated@@59 $generated@@99 $generated@@100)) $generated@@6)
 :pattern ( ($generated@@59 $generated@@99 $generated@@100))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@90 ($generated@@59 $generated@@101 $generated@@102)) $generated@@101)
 :pattern ( ($generated@@59 $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (! (= ($generated@@39 ($generated@@59 $generated@@103 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@59 $generated@@103 $generated@@104))
)))
(assert (forall (($generated@@106 T@U) ) (! (= ($generated@@105 ($generated@@37 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@37 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@T) ) (! (= ($generated@@67 $generated@@108 ($generated@@68 $generated@@108 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@68 $generated@@108 $generated@@107))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ) (! (< ($generated@@109 $generated@@111) ($generated@@110 ($generated@@59 $generated@@111 $generated@@112)))
 :pattern ( ($generated@@59 $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! (< ($generated@@110 $generated@@114) ($generated@@110 ($generated@@59 $generated@@113 $generated@@114)))
 :pattern ( ($generated@@59 $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (=> (and ($generated@@52 $generated@@117) (and ($generated@@65 $generated@@115) ($generated@@51 $generated@@34 $generated@@115 ($generated@@37 $generated@@116) $generated@@117))) ($generated@@80 ($generated@@90 $generated@@115) $generated@@116 $generated@@117))
 :pattern ( ($generated@@80 ($generated@@90 $generated@@115) $generated@@116 $generated@@117))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@118 $generated@@129 $generated@@130 $generated@@131 ($generated@@125 $generated@@129 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@135 $generated@@132) $generated@@134 $generated@@135) $generated@@132)
 :weight 0
)) (and (forall (($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@T) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ) (!  (or (= $generated@@141 $generated@@143) (= ($generated@@118 $generated@@136 $generated@@137 $generated@@138 ($generated@@125 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@141 $generated@@142 $generated@@139) $generated@@143 $generated@@144) ($generated@@118 $generated@@136 $generated@@137 $generated@@138 $generated@@140 $generated@@143 $generated@@144)))
 :weight 0
)) (forall (($generated@@145 T@T) ($generated@@146 T@T) ($generated@@147 T@T) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ) (!  (or (= $generated@@151 $generated@@153) (= ($generated@@118 $generated@@145 $generated@@146 $generated@@147 ($generated@@125 $generated@@145 $generated@@146 $generated@@147 $generated@@149 $generated@@150 $generated@@151 $generated@@148) $generated@@152 $generated@@153) ($generated@@118 $generated@@145 $generated@@146 $generated@@147 $generated@@149 $generated@@152 $generated@@153)))
 :weight 0
)))) (= ($generated@@8 $generated@@119) 4)) (= ($generated@@8 $generated@@120) 5)) (forall (($generated@@154 T@T) ($generated@@155 T@T) ($generated@@156 T@U) ($generated@@157 T@U) ($generated@@158 T@U) ) (! (= ($generated@@122 $generated@@154 $generated@@155 ($generated@@126 $generated@@154 $generated@@155 $generated@@157 $generated@@158 $generated@@156) $generated@@158) $generated@@156)
 :weight 0
))) (forall (($generated@@159 T@T) ($generated@@160 T@T) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ($generated@@164 T@U) ) (!  (or (= $generated@@163 $generated@@164) (= ($generated@@122 $generated@@159 $generated@@160 ($generated@@126 $generated@@159 $generated@@160 $generated@@162 $generated@@163 $generated@@161) $generated@@164) ($generated@@122 $generated@@159 $generated@@160 $generated@@162 $generated@@164)))
 :weight 0
))) (= ($generated@@8 $generated@@123) 6)) (forall (($generated@@165 T@T) ($generated@@166 T@T) ) (= ($generated@@8 ($generated@@124 $generated@@165 $generated@@166)) 7))) (forall (($generated@@167 T@T) ($generated@@168 T@T) ) (! (= ($generated@@127 ($generated@@124 $generated@@167 $generated@@168)) $generated@@167)
 :pattern ( ($generated@@124 $generated@@167 $generated@@168))
))) (forall (($generated@@169 T@T) ($generated@@170 T@T) ) (! (= ($generated@@128 ($generated@@124 $generated@@169 $generated@@170)) $generated@@170)
 :pattern ( ($generated@@124 $generated@@169 $generated@@170))
))))
(assert (forall (($generated@@171 T@U) ($generated@@172 T@U) ($generated@@173 T@U) ($generated@@174 Bool) ($generated@@175 T@U) ($generated@@176 T@U) ) (! (= ($generated@@13 ($generated@@118 $generated@@119 $generated@@120 $generated@@9 ($generated@@121 $generated@@171 $generated@@172 $generated@@173 $generated@@174) $generated@@175 $generated@@176))  (=> (and (or (not (= $generated@@175 $generated@@171)) (not true)) ($generated@@13 ($generated@@67 $generated@@9 ($generated@@122 $generated@@120 $generated@@123 ($generated@@122 $generated@@119 ($generated@@124 $generated@@120 $generated@@123) $generated@@172 $generated@@175) $generated@@173)))) $generated@@174))
 :pattern ( ($generated@@118 $generated@@119 $generated@@120 $generated@@9 ($generated@@121 $generated@@171 $generated@@172 $generated@@173 $generated@@174) $generated@@175 $generated@@176))
)))
(assert (forall (($generated@@177 T@U) ) (! (= ($generated@@109 ($generated@@68 $generated@@34 $generated@@177)) ($generated@@110 $generated@@177))
 :pattern ( ($generated@@109 ($generated@@68 $generated@@34 $generated@@177)))
)))
(assert (forall (($generated@@178 T@U) ($generated@@179 T@U) ) (!  (=> ($generated@@60 $generated@@179 ($generated@@37 $generated@@178)) (and (= ($generated@@68 $generated@@34 ($generated@@67 $generated@@34 $generated@@179)) $generated@@179) ($generated@@36 $generated@@34 ($generated@@67 $generated@@34 $generated@@179) ($generated@@37 $generated@@178))))
 :pattern ( ($generated@@60 $generated@@179 ($generated@@37 $generated@@178)))
)))
(assert (forall (($generated@@180 T@U) ($generated@@181 T@U) ($generated@@182 T@U) ) (!  (=> (and ($generated@@52 $generated@@182) (and ($generated@@65 $generated@@180) ($generated@@51 $generated@@34 $generated@@180 ($generated@@37 $generated@@181) $generated@@182))) ($generated@@51 $generated@@34 ($generated@@39 $generated@@180) ($generated@@37 $generated@@181) $generated@@182))
 :pattern ( ($generated@@51 $generated@@34 ($generated@@39 $generated@@180) ($generated@@37 $generated@@181) $generated@@182))
)))
(assert (= $generated@@50 ($generated@@33 $generated@@34 $generated@@50)))
(assert (forall (($generated@@183 T@U) ($generated@@184 T@U) ) (! (= ($generated@@59 ($generated@@33 $generated@@123 $generated@@183) ($generated@@33 $generated@@34 $generated@@184)) ($generated@@33 $generated@@34 ($generated@@59 $generated@@183 $generated@@184)))
 :pattern ( ($generated@@59 ($generated@@33 $generated@@123 $generated@@183) ($generated@@33 $generated@@34 $generated@@184)))
)))
(assert (forall (($generated@@185 Int) ) (! (= ($generated@@68 $generated@@10 ($generated@@14 ($generated@@40 $generated@@185))) ($generated@@33 $generated@@123 ($generated@@68 $generated@@10 ($generated@@14 $generated@@185))))
 :pattern ( ($generated@@68 $generated@@10 ($generated@@14 ($generated@@40 $generated@@185))))
)))
(assert (forall (($generated@@186 T@U) ($generated@@187 T@T) ) (! (= ($generated@@68 $generated@@187 ($generated@@33 $generated@@187 $generated@@186)) ($generated@@33 $generated@@123 ($generated@@68 $generated@@187 $generated@@186)))
 :pattern ( ($generated@@68 $generated@@187 ($generated@@33 $generated@@187 $generated@@186)))
)))
(assert  (=> (<= 1 $generated@@31) (forall (($generated@@188 T@U) ($generated@@189 T@U) ($generated@@190 T@U) ) (!  (=> (or ($generated@@35 $generated@@188 $generated@@190) (and (< 1 $generated@@31) ($generated@@36 $generated@@34 $generated@@190 ($generated@@37 $generated@@188)))) (<= ($generated@@40 0) ($generated@@25 $generated@@188 $generated@@189 $generated@@190)))
 :pattern ( ($generated@@25 $generated@@188 $generated@@189 $generated@@190))
))))
(assert (forall (($generated@@191 T@U) ($generated@@192 T@U) ) (! ($generated@@51 $generated@@10 $generated@@192 $generated@@0 $generated@@191)
 :pattern ( ($generated@@51 $generated@@10 $generated@@192 $generated@@0 $generated@@191))
)))
(assert (forall (($generated@@193 T@U) ($generated@@194 T@U) ) (! ($generated@@51 $generated@@9 $generated@@194 $generated $generated@@193)
 :pattern ( ($generated@@51 $generated@@9 $generated@@194 $generated $generated@@193))
)))
(assert (forall (($generated@@195 T@U) ($generated@@196 T@U) ($generated@@197 T@U) ($generated@@198 T@U) ) (!  (=> ($generated@@52 $generated@@198) (= ($generated@@51 $generated@@34 ($generated@@59 $generated@@196 $generated@@197) ($generated@@37 $generated@@195) $generated@@198)  (and ($generated@@80 $generated@@196 $generated@@195 $generated@@198) ($generated@@51 $generated@@34 $generated@@197 ($generated@@37 $generated@@195) $generated@@198))))
 :pattern ( ($generated@@51 $generated@@34 ($generated@@59 $generated@@196 $generated@@197) ($generated@@37 $generated@@195) $generated@@198))
)))
(assert  (=> (<= 2 $generated@@31) (forall (($generated@@199 T@U) ) (!  (=> (or ($generated@@88 $generated@@199) (and (< 2 $generated@@31) (and ($generated@@36 $generated@@34 $generated@@199 ($generated@@37 $generated@@0)) (= ($generated@@25 $generated@@0 $generated@@89 $generated@@199) ($generated@@40 3))))) (= ($generated@@87 $generated@@199) (ite (= ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 $generated@@199))) ($generated@@40 1)) (ite (= ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@39 $generated@@199)))) ($generated@@40 1)) (ite (= ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@39 ($generated@@39 $generated@@199))))) ($generated@@40 1)) true true) (ite (= ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@39 ($generated@@39 $generated@@199))))) ($generated@@40 1)) true true)) (ite (= ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@39 $generated@@199)))) ($generated@@40 1)) (ite (= ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@39 ($generated@@39 $generated@@199))))) ($generated@@40 1)) true true) (ite (= ($generated@@15 ($generated@@67 $generated@@10 ($generated@@90 ($generated@@39 ($generated@@39 $generated@@199))))) ($generated@@40 1)) true false)))))
 :pattern ( ($generated@@87 $generated@@199))
))))
(assert (forall (($generated@@200 T@U) ) (! ($generated@@36 $generated@@10 $generated@@200 $generated@@0)
 :pattern ( ($generated@@36 $generated@@10 $generated@@200 $generated@@0))
)))
(assert (forall (($generated@@201 T@U) ) (! ($generated@@36 $generated@@9 $generated@@201 $generated)
 :pattern ( ($generated@@36 $generated@@9 $generated@@201 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@202 () T@U)
(declare-fun $generated@@203 () T@U)
(declare-fun $generated@@204 () T@U)
(declare-fun $generated@@205 () Int)
(declare-fun $generated@@206 () T@U)
(declare-fun $generated@@207 () T@U)
(declare-fun $generated@@208 () T@U)
(declare-fun $generated@@209 () Int)
(declare-fun $generated@@210 () T@U)
(declare-fun $generated@@211 () T@U)
(declare-fun $generated@@212 () T@U)
(declare-fun $generated@@213 () Int)
(declare-fun $generated@@214 () T@U)
(declare-fun $generated@@215 () T@U)
(declare-fun $generated@@216 () T@U)
(declare-fun $generated@@217 () Int)
(declare-fun $generated@@218 () T@U)
(declare-fun $generated@@219 () T@U)
(declare-fun $generated@@220 () T@U)
(declare-fun $generated@@221 () Int)
(declare-fun $generated@@222 () T@U)
(declare-fun $generated@@223 () T@U)
(declare-fun $generated@@224 () T@U)
(declare-fun $generated@@225 () Int)
(declare-fun $generated@@226 () T@U)
(declare-fun $generated@@227 () T@U)
(declare-fun $generated@@228 () T@U)
(declare-fun $generated@@229 () Int)
(declare-fun $generated@@230 () T@U)
(declare-fun $generated@@231 () T@U)
(declare-fun $generated@@232 () T@U)
(declare-fun $generated@@233 () T@U)
(declare-fun $generated@@234 () T@U)
(declare-fun $generated@@235 () T@U)
(declare-fun $generated@@236 () T@U)
(declare-fun $generated@@237 () T@U)
(declare-fun $generated@@238 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 92) (let (($generated@@239 true))
(let (($generated@@240  (=> (and (= $generated@@202 ($generated@@59 $generated@@203 $generated@@204)) (= (ControlFlow 0 82) (- 0 81))) false)))
(let (($generated@@241  (=> (or (not (= $generated@@202 $generated@@50)) (not true)) (and (=> (= (ControlFlow 0 84) 82) $generated@@240) (=> (= (ControlFlow 0 84) 83) $generated@@239)))))
(let (($generated@@242 true))
(let (($generated@@243  (=> (= $generated@@205 ($generated@@40 1)) (and (=> (= (ControlFlow 0 85) 80) $generated@@242) (=> (= (ControlFlow 0 85) 84) $generated@@241)))))
(let (($generated@@244 true))
(let (($generated@@245  (=> (and (= $generated@@202 ($generated@@59 $generated@@206 $generated@@207)) (= (ControlFlow 0 76) (- 0 75))) false)))
(let (($generated@@246  (=> (or (not (= $generated@@202 $generated@@50)) (not true)) (and (=> (= (ControlFlow 0 78) 76) $generated@@245) (=> (= (ControlFlow 0 78) 77) $generated@@244)))))
(let (($generated@@247 true))
(let (($generated@@248  (=> (or (not (= $generated@@205 ($generated@@40 1))) (not true)) (and (=> (= (ControlFlow 0 79) 74) $generated@@247) (=> (= (ControlFlow 0 79) 78) $generated@@246)))))
(let (($generated@@249  (=> (and (= $generated@@208 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@205)) $generated@@202)) ($generated@@36 $generated@@34 $generated@@202 ($generated@@37 $generated@@0))) (and (=> (= (ControlFlow 0 86) 85) $generated@@243) (=> (= (ControlFlow 0 86) 79) $generated@@248)))))
(let (($generated@@250 true))
(let (($generated@@251  (=> (and (= $generated@@208 $generated@@50) (= (ControlFlow 0 71) (- 0 70))) false)))
(let (($generated@@252  (=> (or (not (= $generated@@208 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@205)) $generated@@202))) (not true)) (and (=> (= (ControlFlow 0 73) 71) $generated@@251) (=> (= (ControlFlow 0 73) 72) $generated@@250)))))
(let (($generated@@253  (=> (= $generated@@209 ($generated@@40 1)) (and (=> (= (ControlFlow 0 87) 86) $generated@@249) (=> (= (ControlFlow 0 87) 73) $generated@@252)))))
(let (($generated@@254 true))
(let (($generated@@255  (=> (and (= $generated@@210 ($generated@@59 $generated@@211 $generated@@212)) (= (ControlFlow 0 64) (- 0 63))) false)))
(let (($generated@@256  (=> (or (not (= $generated@@210 $generated@@50)) (not true)) (and (=> (= (ControlFlow 0 66) 64) $generated@@255) (=> (= (ControlFlow 0 66) 65) $generated@@254)))))
(let (($generated@@257 true))
(let (($generated@@258  (=> (= $generated@@213 ($generated@@40 1)) (and (=> (= (ControlFlow 0 67) 62) $generated@@257) (=> (= (ControlFlow 0 67) 66) $generated@@256)))))
(let (($generated@@259 true))
(let (($generated@@260  (=> (and (= $generated@@210 ($generated@@59 $generated@@214 $generated@@215)) (= (ControlFlow 0 58) (- 0 57))) false)))
(let (($generated@@261  (=> (or (not (= $generated@@210 $generated@@50)) (not true)) (and (=> (= (ControlFlow 0 60) 58) $generated@@260) (=> (= (ControlFlow 0 60) 59) $generated@@259)))))
(let (($generated@@262 true))
(let (($generated@@263  (=> (or (not (= $generated@@213 ($generated@@40 1))) (not true)) (and (=> (= (ControlFlow 0 61) 56) $generated@@262) (=> (= (ControlFlow 0 61) 60) $generated@@261)))))
(let (($generated@@264  (=> (and (= $generated@@208 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@213)) $generated@@210)) ($generated@@36 $generated@@34 $generated@@210 ($generated@@37 $generated@@0))) (and (=> (= (ControlFlow 0 68) 67) $generated@@258) (=> (= (ControlFlow 0 68) 61) $generated@@263)))))
(let (($generated@@265 true))
(let (($generated@@266  (=> (and (= $generated@@208 $generated@@50) (= (ControlFlow 0 53) (- 0 52))) false)))
(let (($generated@@267  (=> (or (not (= $generated@@208 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@213)) $generated@@210))) (not true)) (and (=> (= (ControlFlow 0 55) 53) $generated@@266) (=> (= (ControlFlow 0 55) 54) $generated@@265)))))
(let (($generated@@268  (=> (or (not (= $generated@@209 ($generated@@40 1))) (not true)) (and (=> (= (ControlFlow 0 69) 68) $generated@@264) (=> (= (ControlFlow 0 69) 55) $generated@@267)))))
(let (($generated@@269  (=> (and (= $generated@@216 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@209)) $generated@@208)) ($generated@@36 $generated@@34 $generated@@208 ($generated@@37 $generated@@0))) (and (=> (= (ControlFlow 0 88) 87) $generated@@253) (=> (= (ControlFlow 0 88) 69) $generated@@268)))))
(let (($generated@@270 true))
(let (($generated@@271  (=> (and (= $generated@@216 $generated@@50) (= (ControlFlow 0 49) (- 0 48))) false)))
(let (($generated@@272  (=> (or (not (= $generated@@216 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@209)) $generated@@208))) (not true)) (and (=> (= (ControlFlow 0 51) 49) $generated@@271) (=> (= (ControlFlow 0 51) 50) $generated@@270)))))
(let (($generated@@273  (=> (= $generated@@217 ($generated@@40 1)) (and (=> (= (ControlFlow 0 89) 88) $generated@@269) (=> (= (ControlFlow 0 89) 51) $generated@@272)))))
(let (($generated@@274 true))
(let (($generated@@275  (=> (and (= $generated@@218 ($generated@@59 $generated@@219 $generated@@220)) (= (ControlFlow 0 40) (- 0 39))) false)))
(let (($generated@@276  (=> (or (not (= $generated@@218 $generated@@50)) (not true)) (and (=> (= (ControlFlow 0 42) 40) $generated@@275) (=> (= (ControlFlow 0 42) 41) $generated@@274)))))
(let (($generated@@277 true))
(let (($generated@@278  (=> (= $generated@@221 ($generated@@40 1)) (and (=> (= (ControlFlow 0 43) 38) $generated@@277) (=> (= (ControlFlow 0 43) 42) $generated@@276)))))
(let (($generated@@279 true))
(let (($generated@@280  (=> (and (= $generated@@218 ($generated@@59 $generated@@222 $generated@@223)) (= (ControlFlow 0 34) (- 0 33))) false)))
(let (($generated@@281  (=> (or (not (= $generated@@218 $generated@@50)) (not true)) (and (=> (= (ControlFlow 0 36) 34) $generated@@280) (=> (= (ControlFlow 0 36) 35) $generated@@279)))))
(let (($generated@@282 true))
(let (($generated@@283  (=> (or (not (= $generated@@221 ($generated@@40 1))) (not true)) (and (=> (= (ControlFlow 0 37) 32) $generated@@282) (=> (= (ControlFlow 0 37) 36) $generated@@281)))))
(let (($generated@@284  (=> (and (= $generated@@224 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@221)) $generated@@218)) ($generated@@36 $generated@@34 $generated@@218 ($generated@@37 $generated@@0))) (and (=> (= (ControlFlow 0 44) 43) $generated@@278) (=> (= (ControlFlow 0 44) 37) $generated@@283)))))
(let (($generated@@285 true))
(let (($generated@@286  (=> (and (= $generated@@224 $generated@@50) (= (ControlFlow 0 29) (- 0 28))) false)))
(let (($generated@@287  (=> (or (not (= $generated@@224 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@221)) $generated@@218))) (not true)) (and (=> (= (ControlFlow 0 31) 29) $generated@@286) (=> (= (ControlFlow 0 31) 30) $generated@@285)))))
(let (($generated@@288  (=> (= $generated@@225 ($generated@@40 1)) (and (=> (= (ControlFlow 0 45) 44) $generated@@284) (=> (= (ControlFlow 0 45) 31) $generated@@287)))))
(let (($generated@@289 true))
(let (($generated@@290  (=> (and (= $generated@@226 ($generated@@59 $generated@@227 $generated@@228)) (= (ControlFlow 0 22) (- 0 21))) false)))
(let (($generated@@291  (=> (or (not (= $generated@@226 $generated@@50)) (not true)) (and (=> (= (ControlFlow 0 24) 22) $generated@@290) (=> (= (ControlFlow 0 24) 23) $generated@@289)))))
(let (($generated@@292 true))
(let (($generated@@293  (=> (= $generated@@229 ($generated@@40 1)) (and (=> (= (ControlFlow 0 25) 20) $generated@@292) (=> (= (ControlFlow 0 25) 24) $generated@@291)))))
(let (($generated@@294 true))
(let (($generated@@295  (=> (and (= $generated@@226 ($generated@@59 $generated@@230 $generated@@231)) (= (ControlFlow 0 16) (- 0 15))) false)))
(let (($generated@@296  (=> (or (not (= $generated@@226 $generated@@50)) (not true)) (and (=> (= (ControlFlow 0 18) 16) $generated@@295) (=> (= (ControlFlow 0 18) 17) $generated@@294)))))
(let (($generated@@297 true))
(let (($generated@@298  (=> (or (not (= $generated@@229 ($generated@@40 1))) (not true)) (and (=> (= (ControlFlow 0 19) 14) $generated@@297) (=> (= (ControlFlow 0 19) 18) $generated@@296)))))
(let (($generated@@299  (=> (and (= $generated@@224 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@229)) $generated@@226)) ($generated@@36 $generated@@34 $generated@@226 ($generated@@37 $generated@@0))) (and (=> (= (ControlFlow 0 26) 25) $generated@@293) (=> (= (ControlFlow 0 26) 19) $generated@@298)))))
(let (($generated@@300 true))
(let (($generated@@301  (=> (and (= $generated@@224 $generated@@50) (= (ControlFlow 0 11) (- 0 10))) false)))
(let (($generated@@302  (=> (or (not (= $generated@@224 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@229)) $generated@@226))) (not true)) (and (=> (= (ControlFlow 0 13) 11) $generated@@301) (=> (= (ControlFlow 0 13) 12) $generated@@300)))))
(let (($generated@@303  (=> (or (not (= $generated@@225 ($generated@@40 1))) (not true)) (and (=> (= (ControlFlow 0 27) 26) $generated@@299) (=> (= (ControlFlow 0 27) 13) $generated@@302)))))
(let (($generated@@304  (=> (and (= $generated@@216 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@225)) $generated@@224)) ($generated@@36 $generated@@34 $generated@@224 ($generated@@37 $generated@@0))) (and (=> (= (ControlFlow 0 46) 45) $generated@@288) (=> (= (ControlFlow 0 46) 27) $generated@@303)))))
(let (($generated@@305 true))
(let (($generated@@306  (=> (and (= $generated@@216 $generated@@50) (= (ControlFlow 0 7) (- 0 6))) false)))
(let (($generated@@307  (=> (or (not (= $generated@@216 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@225)) $generated@@224))) (not true)) (and (=> (= (ControlFlow 0 9) 7) $generated@@306) (=> (= (ControlFlow 0 9) 8) $generated@@305)))))
(let (($generated@@308  (=> (or (not (= $generated@@217 ($generated@@40 1))) (not true)) (and (=> (= (ControlFlow 0 47) 46) $generated@@304) (=> (= (ControlFlow 0 47) 9) $generated@@307)))))
(let (($generated@@309  (=> (and (= $generated@@232 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@217)) $generated@@216)) ($generated@@36 $generated@@34 $generated@@216 ($generated@@37 $generated@@0))) (and (=> (= (ControlFlow 0 90) 89) $generated@@273) (=> (= (ControlFlow 0 90) 47) $generated@@308)))))
(let (($generated@@310 true))
(let (($generated@@311  (=> (and (= $generated@@232 $generated@@50) (= (ControlFlow 0 3) (- 0 2))) false)))
(let (($generated@@312  (=> (or (not (= $generated@@232 ($generated@@59 ($generated@@68 $generated@@10 ($generated@@14 $generated@@217)) $generated@@216))) (not true)) (and (=> (= (ControlFlow 0 5) 3) $generated@@311) (=> (= (ControlFlow 0 5) 4) $generated@@310)))))
(let (($generated@@313 true))
(let (($generated@@314  (=> (= $generated@@233 ($generated@@121 $generated@@234 $generated@@235 $generated@@3 false)) (=> (and (= $generated@@236 ($generated@@32 ($generated@@32 ($generated@@32 ($generated@@32 ($generated@@32 $generated@@237)))))) (= $generated@@89 ($generated@@32 ($generated@@32 ($generated@@32 ($generated@@32 ($generated@@32 ($generated@@32 $generated@@237)))))))) (=> (and (and (= ($generated@@26 $generated@@237) $generated@@237) ($generated@@80 ($generated@@68 $generated@@34 $generated@@232) ($generated@@37 $generated@@0) $generated@@235)) (and ($generated@@35 $generated@@0 $generated@@232) (= ($generated@@25 $generated@@0 $generated@@89 $generated@@232) ($generated@@40 3)))) (and (and (=> (= (ControlFlow 0 91) 1) $generated@@313) (=> (= (ControlFlow 0 91) 90) $generated@@309)) (=> (= (ControlFlow 0 91) 5) $generated@@312)))))))
(let (($generated@@315  (=> (and (and (and ($generated@@52 $generated@@235) ($generated@@238 $generated@@235)) ($generated@@36 $generated@@34 $generated@@232 ($generated@@37 $generated@@0))) (and (= 2 $generated@@31) (= (ControlFlow 0 92) 91))) $generated@@314)))
$generated@@315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
