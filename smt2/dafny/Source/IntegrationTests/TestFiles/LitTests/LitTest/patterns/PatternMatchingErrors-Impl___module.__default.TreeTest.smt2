(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U Bool T@U) T@U)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@44 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@U) Bool)
(declare-fun $generated@@49 (T@U) Bool)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@U) Bool)
(declare-fun $generated@@68 (T@U) Int)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 () T@T)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@79 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 (T@T T@T) T@T)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@83 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@84 (T@T) T@T)
(declare-fun $generated@@85 (T@T) T@T)
(declare-fun $generated@@134 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@135 (T@U) Bool)
(declare-fun $generated@@140 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (forall (($generated@@24 T@U) ($generated@@25 Bool) ($generated@@26 T@U) ) (! (= ($generated@@23 ($generated@@22 $generated@@24 $generated@@25 $generated@@26)) $generated@@25)
 :pattern ( ($generated@@22 $generated@@24 $generated@@25 $generated@@26))
)))
(assert (= ($generated@@27 $generated) $generated@@0))
(assert (forall (($generated@@29 T@U) ($generated@@30 Bool) ($generated@@31 T@U) ) (! (= ($generated@@28 ($generated@@22 $generated@@29 $generated@@30 $generated@@31)) $generated@@4)
 :pattern ( ($generated@@22 $generated@@29 $generated@@30 $generated@@31))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 Bool) ($generated@@35 T@U) ) (! (= ($generated@@32 ($generated@@22 $generated@@33 $generated@@34 $generated@@35)) $generated@@33)
 :pattern ( ($generated@@22 $generated@@33 $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 Bool) ($generated@@39 T@U) ) (! (= ($generated@@36 ($generated@@22 $generated@@37 $generated@@38 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@22 $generated@@37 $generated@@38 $generated@@39))
)))
(assert (= ($generated@@28 $generated@@40) $generated@@3))
(assert (= ($generated@@6 $generated@@42) 3))
(assert ($generated@@41 $generated@@42 $generated@@40 $generated@@43))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@44 $generated@@46 $generated@@45) $generated@@45)
 :pattern ( ($generated@@44 $generated@@46 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@47 $generated@@48) (= ($generated@@28 $generated@@48) $generated@@3))
 :pattern ( ($generated@@47 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ) (! (= ($generated@@49 $generated@@50) (= ($generated@@28 $generated@@50) $generated@@4))
 :pattern ( ($generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@52 $generated@@54 ($generated@@51 $generated@@54 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@51 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (!  (=> ($generated@@49 $generated@@55) (exists (($generated@@56 T@U) ($generated@@57 Bool) ($generated@@58 T@U) ) (= $generated@@55 ($generated@@22 $generated@@56 $generated@@57 $generated@@58))))
 :pattern ( ($generated@@49 $generated@@55))
)))
(assert (forall (($generated@@59 T@U) ) (!  (=> ($generated@@47 $generated@@59) (= $generated@@59 $generated@@40))
 :pattern ( ($generated@@47 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ) (!  (=> ($generated@@60 $generated@@61) (or ($generated@@47 $generated@@61) ($generated@@49 $generated@@61)))
 :pattern ( ($generated@@60 $generated@@61))
)))
(assert (forall (($generated@@62 T@U) ) (!  (=> ($generated@@41 $generated@@42 $generated@@62 $generated@@43) (or ($generated@@47 $generated@@62) ($generated@@49 $generated@@62)))
 :pattern ( ($generated@@49 $generated@@62) ($generated@@41 $generated@@42 $generated@@62 $generated@@43))
 :pattern ( ($generated@@47 $generated@@62) ($generated@@41 $generated@@42 $generated@@62 $generated@@43))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ) (! (= ($generated@@22 ($generated@@44 $generated@@42 $generated@@63) ($generated@@11 ($generated@@44 $generated@@7 $generated@@64)) ($generated@@44 $generated@@42 $generated@@65)) ($generated@@44 $generated@@42 ($generated@@22 $generated@@63 ($generated@@11 $generated@@64) $generated@@65)))
 :pattern ( ($generated@@22 ($generated@@44 $generated@@42 $generated@@63) ($generated@@11 ($generated@@44 $generated@@7 $generated@@64)) ($generated@@44 $generated@@42 $generated@@65)))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@51 $generated@@67 ($generated@@52 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@52 $generated@@67 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 Bool) ($generated@@71 T@U) ) (! (< ($generated@@68 $generated@@69) ($generated@@68 ($generated@@22 $generated@@69 $generated@@70 $generated@@71)))
 :pattern ( ($generated@@22 $generated@@69 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 Bool) ($generated@@74 T@U) ) (! (< ($generated@@68 $generated@@74) ($generated@@68 ($generated@@22 $generated@@72 $generated@@73 $generated@@74)))
 :pattern ( ($generated@@22 $generated@@72 $generated@@73 $generated@@74))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@75 $generated@@86 $generated@@87 $generated@@88 ($generated@@82 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@91 $generated@@92) $generated@@89)
 :weight 0
)) (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@98 $generated@@100) (= ($generated@@75 $generated@@93 $generated@@94 $generated@@95 ($generated@@82 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@75 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@75 $generated@@102 $generated@@103 $generated@@104 ($generated@@82 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@108 $generated@@105) $generated@@109 $generated@@110) ($generated@@75 $generated@@102 $generated@@103 $generated@@104 $generated@@106 $generated@@109 $generated@@110)))
 :weight 0
)))) (= ($generated@@6 $generated@@76) 4)) (= ($generated@@6 $generated@@77) 5)) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@79 $generated@@111 $generated@@112 ($generated@@83 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@115) $generated@@113)
 :weight 0
))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@120 $generated@@121) (= ($generated@@79 $generated@@116 $generated@@117 ($generated@@83 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@118) $generated@@121) ($generated@@79 $generated@@116 $generated@@117 $generated@@119 $generated@@121)))
 :weight 0
))) (= ($generated@@6 $generated@@80) 6)) (forall (($generated@@122 T@T) ($generated@@123 T@T) ) (= ($generated@@6 ($generated@@81 $generated@@122 $generated@@123)) 7))) (forall (($generated@@124 T@T) ($generated@@125 T@T) ) (! (= ($generated@@84 ($generated@@81 $generated@@124 $generated@@125)) $generated@@124)
 :pattern ( ($generated@@81 $generated@@124 $generated@@125))
))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ) (! (= ($generated@@85 ($generated@@81 $generated@@126 $generated@@127)) $generated@@127)
 :pattern ( ($generated@@81 $generated@@126 $generated@@127))
))))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 Bool) ($generated@@132 T@U) ($generated@@133 T@U) ) (! (= ($generated@@11 ($generated@@75 $generated@@76 $generated@@77 $generated@@7 ($generated@@78 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))  (=> (and (or (not (= $generated@@132 $generated@@128)) (not true)) ($generated@@11 ($generated@@51 $generated@@7 ($generated@@79 $generated@@77 $generated@@80 ($generated@@79 $generated@@76 ($generated@@81 $generated@@77 $generated@@80) $generated@@129 $generated@@132) $generated@@130)))) $generated@@131))
 :pattern ( ($generated@@75 $generated@@76 $generated@@77 $generated@@7 ($generated@@78 $generated@@128 $generated@@129 $generated@@130 $generated@@131) $generated@@132 $generated@@133))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (!  (=> (and ($generated@@135 $generated@@137) (and ($generated@@49 $generated@@136) ($generated@@134 $generated@@42 $generated@@136 $generated@@43 $generated@@137))) ($generated@@134 $generated@@7 ($generated@@10 ($generated@@23 $generated@@136)) $generated $generated@@137))
 :pattern ( ($generated@@134 $generated@@7 ($generated@@10 ($generated@@23 $generated@@136)) $generated $generated@@137))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> (and ($generated@@135 $generated@@139) ($generated@@41 $generated@@42 $generated@@138 $generated@@43)) ($generated@@134 $generated@@42 $generated@@138 $generated@@43 $generated@@139))
 :pattern ( ($generated@@134 $generated@@42 $generated@@138 $generated@@43 $generated@@139))
)))
(assert (= ($generated@@27 $generated@@43) $generated@@2))
(assert (= ($generated@@140 $generated@@43) $generated@@5))
(assert (= $generated@@40 ($generated@@44 $generated@@42 $generated@@40)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (!  (=> (and ($generated@@135 $generated@@142) (and ($generated@@49 $generated@@141) ($generated@@134 $generated@@42 $generated@@141 $generated@@43 $generated@@142))) ($generated@@134 $generated@@42 ($generated@@32 $generated@@141) $generated@@43 $generated@@142))
 :pattern ( ($generated@@134 $generated@@42 ($generated@@32 $generated@@141) $generated@@43 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (!  (=> (and ($generated@@135 $generated@@144) (and ($generated@@49 $generated@@143) ($generated@@134 $generated@@42 $generated@@143 $generated@@43 $generated@@144))) ($generated@@134 $generated@@42 ($generated@@36 $generated@@143) $generated@@43 $generated@@144))
 :pattern ( ($generated@@134 $generated@@42 ($generated@@36 $generated@@143) $generated@@43 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@T) ) (! (= ($generated@@52 $generated@@146 ($generated@@44 $generated@@146 $generated@@145)) ($generated@@44 $generated@@80 ($generated@@52 $generated@@146 $generated@@145)))
 :pattern ( ($generated@@52 $generated@@146 ($generated@@44 $generated@@146 $generated@@145)))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ) (! ($generated@@134 $generated@@7 $generated@@148 $generated $generated@@147)
 :pattern ( ($generated@@134 $generated@@7 $generated@@148 $generated $generated@@147))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 Bool) ($generated@@151 T@U) ) (! (= ($generated@@41 $generated@@42 ($generated@@22 $generated@@149 $generated@@150 $generated@@151) $generated@@43)  (and (and ($generated@@41 $generated@@42 $generated@@149 $generated@@43) ($generated@@41 $generated@@7 ($generated@@10 $generated@@150) $generated)) ($generated@@41 $generated@@42 $generated@@151 $generated@@43)))
 :pattern ( ($generated@@41 $generated@@42 ($generated@@22 $generated@@149 $generated@@150 $generated@@151) $generated@@43))
)))
(assert (forall (($generated@@152 T@U) ) (! ($generated@@41 $generated@@7 $generated@@152 $generated)
 :pattern ( ($generated@@41 $generated@@7 $generated@@152 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () Bool)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () Bool)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () T@U)
(declare-fun $generated@@162 () Bool)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () T@U)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 (T@U) Bool)
(declare-fun $generated@@167 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let (($generated@@168 true))
(let (($generated@@169  (=> (and (= $generated@@153 ($generated@@22 $generated@@154 $generated@@155 $generated@@156)) (= (ControlFlow 0 11) (- 0 10))) false)))
(let (($generated@@170  (=> (or (not (= $generated@@153 $generated@@40)) (not true)) (and (=> (= (ControlFlow 0 13) 11) $generated@@169) (=> (= (ControlFlow 0 13) 12) $generated@@168)))))
(let (($generated@@171 true))
(let (($generated@@172  (=> (= $generated@@157 $generated@@40) (and (=> (= (ControlFlow 0 14) 9) $generated@@171) (=> (= (ControlFlow 0 14) 13) $generated@@170)))))
(let (($generated@@173 true))
(let (($generated@@174  (=> (and (and (= $generated@@157 ($generated@@22 $generated@@158 $generated@@159 $generated@@160)) ($generated@@41 $generated@@42 $generated@@158 $generated@@43)) (and ($generated@@41 $generated@@42 $generated@@160 $generated@@43) (= (ControlFlow 0 6) (- 0 5)))) (= $generated@@159 ($generated@@11 ($generated@@44 $generated@@7 ($generated@@10 true)))))))
(let (($generated@@175  (=> (or (not (= $generated@@157 $generated@@40)) (not true)) (and (=> (= (ControlFlow 0 8) 6) $generated@@174) (=> (= (ControlFlow 0 8) 7) $generated@@173)))))
(let (($generated@@176  (=> (= $generated@@161 ($generated@@22 $generated@@157 $generated@@162 $generated@@153)) (=> (and ($generated@@41 $generated@@42 $generated@@157 $generated@@43) ($generated@@41 $generated@@42 $generated@@153 $generated@@43)) (and (=> (= (ControlFlow 0 15) 14) $generated@@172) (=> (= (ControlFlow 0 15) 8) $generated@@175))))))
(let (($generated@@177 true))
(let (($generated@@178  (=> (and (= $generated@@161 $generated@@40) (= (ControlFlow 0 2) (- 0 1))) false)))
(let (($generated@@179  (=> (or (not (= $generated@@161 ($generated@@22 $generated@@157 $generated@@162 $generated@@153))) (not true)) (and (=> (= (ControlFlow 0 4) 2) $generated@@178) (=> (= (ControlFlow 0 4) 3) $generated@@177)))))
(let (($generated@@180  (=> (= $generated@@163 ($generated@@78 $generated@@164 $generated@@165 $generated@@1 false)) (and (=> (= (ControlFlow 0 16) 15) $generated@@176) (=> (= (ControlFlow 0 16) 4) $generated@@179)))))
(let (($generated@@181  (=> (and ($generated@@135 $generated@@165) ($generated@@166 $generated@@165)) (=> (and (and (and ($generated@@41 $generated@@42 $generated@@161 $generated@@43) ($generated@@134 $generated@@42 $generated@@161 $generated@@43 $generated@@165)) ($generated@@60 $generated@@161)) (and (= 1 $generated@@167) (= (ControlFlow 0 17) 16))) $generated@@180))))
$generated@@181)))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 11) (- 10))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
