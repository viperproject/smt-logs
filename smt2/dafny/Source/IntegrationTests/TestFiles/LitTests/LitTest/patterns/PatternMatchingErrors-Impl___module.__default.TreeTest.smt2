(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Tree () T@U)
(declare-fun |##_module.Tree.Leaf| () T@U)
(declare-fun |##_module.Tree.Branch| () T@U)
(declare-fun tytagFamily$Tree () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |#_module.Tree.Branch| (T@U Bool T@U) T@U)
(declare-fun _module.Tree.b (T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Tree.left (T@U) T@U)
(declare-fun _module.Tree.right (T@U) T@U)
(declare-fun |#_module.Tree.Leaf| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Tree () T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Tree.Leaf_q (T@U) Bool)
(declare-fun _module.Tree.Branch_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |$IsA#_module.Tree| (T@U) Bool)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool alloc Tagclass._module.Tree |##_module.Tree.Leaf| |##_module.Tree.Branch| tytagFamily$Tree)
)
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| Bool) (|a#22#2#0| T@U) ) (! (= (_module.Tree.b (|#_module.Tree.Branch| |a#22#0#0| |a#22#1#0| |a#22#2#0|)) |a#22#1#0|)
 :pattern ( (|#_module.Tree.Branch| |a#22#0#0| |a#22#1#0| |a#22#2#0|))
)))
(assert (= (Tag TBool) TagBool))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| Bool) (|a#16#2#0| T@U) ) (! (= (DatatypeCtorId (|#_module.Tree.Branch| |a#16#0#0| |a#16#1#0| |a#16#2#0|)) |##_module.Tree.Branch|)
 :pattern ( (|#_module.Tree.Branch| |a#16#0#0| |a#16#1#0| |a#16#2#0|))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| Bool) (|a#20#2#0| T@U) ) (! (= (_module.Tree.left (|#_module.Tree.Branch| |a#20#0#0| |a#20#1#0| |a#20#2#0|)) |a#20#0#0|)
 :pattern ( (|#_module.Tree.Branch| |a#20#0#0| |a#20#1#0| |a#20#2#0|))
)))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| Bool) (|a#23#2#0| T@U) ) (! (= (_module.Tree.right (|#_module.Tree.Branch| |a#23#0#0| |a#23#1#0| |a#23#2#0|)) |a#23#2#0|)
 :pattern ( (|#_module.Tree.Branch| |a#23#0#0| |a#23#1#0| |a#23#2#0|))
)))
(assert (= (DatatypeCtorId |#_module.Tree.Leaf|) |##_module.Tree.Leaf|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert ($Is DatatypeTypeType |#_module.Tree.Leaf| Tclass._module.Tree))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((d T@U) ) (! (= (_module.Tree.Leaf_q d) (= (DatatypeCtorId d) |##_module.Tree.Leaf|))
 :pattern ( (_module.Tree.Leaf_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Tree.Branch_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Tree.Branch|))
 :pattern ( (_module.Tree.Branch_q d@@0))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_module.Tree.Branch_q d@@1) (exists ((|a#17#0#0| T@U) (|a#17#1#0| Bool) (|a#17#2#0| T@U) ) (= d@@1 (|#_module.Tree.Branch| |a#17#0#0| |a#17#1#0| |a#17#2#0|))))
 :pattern ( (_module.Tree.Branch_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Tree.Leaf_q d@@2) (= d@@2 |#_module.Tree.Leaf|))
 :pattern ( (_module.Tree.Leaf_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (|$IsA#_module.Tree| d@@3) (or (_module.Tree.Leaf_q d@@3) (_module.Tree.Branch_q d@@3)))
 :pattern ( (|$IsA#_module.Tree| d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> ($Is DatatypeTypeType d@@4 Tclass._module.Tree) (or (_module.Tree.Leaf_q d@@4) (_module.Tree.Branch_q d@@4)))
 :pattern ( (_module.Tree.Branch_q d@@4) ($Is DatatypeTypeType d@@4 Tclass._module.Tree))
 :pattern ( (_module.Tree.Leaf_q d@@4) ($Is DatatypeTypeType d@@4 Tclass._module.Tree))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) (|a#19#2#0| T@U) ) (! (= (|#_module.Tree.Branch| (Lit DatatypeTypeType |a#19#0#0|) (U_2_bool (Lit boolType |a#19#1#0|)) (Lit DatatypeTypeType |a#19#2#0|)) (Lit DatatypeTypeType (|#_module.Tree.Branch| |a#19#0#0| (U_2_bool |a#19#1#0|) |a#19#2#0|)))
 :pattern ( (|#_module.Tree.Branch| (Lit DatatypeTypeType |a#19#0#0|) (U_2_bool (Lit boolType |a#19#1#0|)) (Lit DatatypeTypeType |a#19#2#0|)))
)))
(assert (forall ((x@@4 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@4)) x@@4)
 :pattern ( ($Box T@@1 x@@4))
)))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| Bool) (|a#21#2#0| T@U) ) (! (< (DtRank |a#21#0#0|) (DtRank (|#_module.Tree.Branch| |a#21#0#0| |a#21#1#0| |a#21#2#0|)))
 :pattern ( (|#_module.Tree.Branch| |a#21#0#0| |a#21#1#0| |a#21#2#0|))
)))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| Bool) (|a#24#2#0| T@U) ) (! (< (DtRank |a#24#2#0|) (DtRank (|#_module.Tree.Branch| |a#24#0#0| |a#24#1#0| |a#24#2#0|)))
 :pattern ( (|#_module.Tree.Branch| |a#24#0#0| |a#24#1#0| |a#24#2#0|))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((d@@5 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (_module.Tree.Branch_q d@@5) ($IsAlloc DatatypeTypeType d@@5 Tclass._module.Tree $h))) ($IsAlloc boolType (bool_2_U (_module.Tree.b d@@5)) TBool $h))
 :pattern ( ($IsAlloc boolType (bool_2_U (_module.Tree.b d@@5)) TBool $h))
)))
(assert (forall ((d@@6 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d@@6 Tclass._module.Tree)) ($IsAlloc DatatypeTypeType d@@6 Tclass._module.Tree $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d@@6 Tclass._module.Tree $h@@0))
)))
(assert (= (Tag Tclass._module.Tree) Tagclass._module.Tree))
(assert (= (TagFamily Tclass._module.Tree) tytagFamily$Tree))
(assert (= |#_module.Tree.Leaf| (Lit DatatypeTypeType |#_module.Tree.Leaf|)))
(assert (forall ((d@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Tree.Branch_q d@@7) ($IsAlloc DatatypeTypeType d@@7 Tclass._module.Tree $h@@1))) ($IsAlloc DatatypeTypeType (_module.Tree.left d@@7) Tclass._module.Tree $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree.left d@@7) Tclass._module.Tree $h@@1))
)))
(assert (forall ((d@@8 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.Tree.Branch_q d@@8) ($IsAlloc DatatypeTypeType d@@8 Tclass._module.Tree $h@@2))) ($IsAlloc DatatypeTypeType (_module.Tree.right d@@8) Tclass._module.Tree $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.Tree.right d@@8) Tclass._module.Tree $h@@2))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@5)) (Lit BoxType ($Box T@@2 x@@5)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@5)))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc boolType v TBool h)
 :pattern ( ($IsAlloc boolType v TBool h))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| Bool) (|a#18#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.Tree.Branch| |a#18#0#0| |a#18#1#0| |a#18#2#0|) Tclass._module.Tree)  (and (and ($Is DatatypeTypeType |a#18#0#0| Tclass._module.Tree) ($Is boolType (bool_2_U |a#18#1#0|) TBool)) ($Is DatatypeTypeType |a#18#2#0| Tclass._module.Tree)))
 :pattern ( ($Is DatatypeTypeType (|#_module.Tree.Branch| |a#18#0#0| |a#18#1#0| |a#18#2#0|) Tclass._module.Tree))
)))
(assert (forall ((v@@0 T@U) ) (! ($Is boolType v@@0 TBool)
 :pattern ( ($Is boolType v@@0 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |_mcc#2#0_0@0| () T@U)
(declare-fun |a#0_1_0#0#0@0| () T@U)
(declare-fun |a#0_1_0#1#0@0| () Bool)
(declare-fun |a#0_1_0#2#0@0| () T@U)
(declare-fun |_mcc#0#0_0@0| () T@U)
(declare-fun |_mcc#6#0_0_0@0| () T@U)
(declare-fun |_mcc#7#0_0_0@0| () Bool)
(declare-fun |_mcc#8#0_0_0@0| () T@U)
(declare-fun |t#0| () T@U)
(declare-fun |_mcc#1#0_0@0| () Bool)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 17) (let ((anon13_Else_correct true))
(let ((anon13_Then_correct  (=> (and (= |_mcc#2#0_0@0| (|#_module.Tree.Branch| |a#0_1_0#0#0@0| |a#0_1_0#1#0@0| |a#0_1_0#2#0@0|)) (= (ControlFlow 0 11) (- 0 10))) false)))
(let ((anon12_Else_correct  (=> (or (not (= |_mcc#2#0_0@0| |#_module.Tree.Leaf|)) (not true)) (and (=> (= (ControlFlow 0 13) 11) anon13_Then_correct) (=> (= (ControlFlow 0 13) 12) anon13_Else_correct)))))
(let ((anon12_Then_correct true))
(let ((anon11_Then_correct  (=> (= |_mcc#0#0_0@0| |#_module.Tree.Leaf|) (and (=> (= (ControlFlow 0 14) 9) anon12_Then_correct) (=> (= (ControlFlow 0 14) 13) anon12_Else_correct)))))
(let ((anon14_Else_correct true))
(let ((anon14_Then_correct  (=> (and (and (= |_mcc#0#0_0@0| (|#_module.Tree.Branch| |_mcc#6#0_0_0@0| |_mcc#7#0_0_0@0| |_mcc#8#0_0_0@0|)) ($Is DatatypeTypeType |_mcc#6#0_0_0@0| Tclass._module.Tree)) (and ($Is DatatypeTypeType |_mcc#8#0_0_0@0| Tclass._module.Tree) (= (ControlFlow 0 6) (- 0 5)))) (= |_mcc#7#0_0_0@0| (U_2_bool (Lit boolType (bool_2_U true)))))))
(let ((anon11_Else_correct  (=> (or (not (= |_mcc#0#0_0@0| |#_module.Tree.Leaf|)) (not true)) (and (=> (= (ControlFlow 0 8) 6) anon14_Then_correct) (=> (= (ControlFlow 0 8) 7) anon14_Else_correct)))))
(let ((anon10_Then_correct  (=> (= |t#0| (|#_module.Tree.Branch| |_mcc#0#0_0@0| |_mcc#1#0_0@0| |_mcc#2#0_0@0|)) (=> (and ($Is DatatypeTypeType |_mcc#0#0_0@0| Tclass._module.Tree) ($Is DatatypeTypeType |_mcc#2#0_0@0| Tclass._module.Tree)) (and (=> (= (ControlFlow 0 15) 14) anon11_Then_correct) (=> (= (ControlFlow 0 15) 8) anon11_Else_correct))))))
(let ((anon15_Else_correct true))
(let ((anon15_Then_correct  (=> (and (= |t#0| |#_module.Tree.Leaf|) (= (ControlFlow 0 2) (- 0 1))) false)))
(let ((anon10_Else_correct  (=> (or (not (= |t#0| (|#_module.Tree.Branch| |_mcc#0#0_0@0| |_mcc#1#0_0@0| |_mcc#2#0_0@0|))) (not true)) (and (=> (= (ControlFlow 0 4) 2) anon15_Then_correct) (=> (= (ControlFlow 0 4) 3) anon15_Else_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 16) 15) anon10_Then_correct) (=> (= (ControlFlow 0 16) 4) anon10_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is DatatypeTypeType |t#0| Tclass._module.Tree) ($IsAlloc DatatypeTypeType |t#0| Tclass._module.Tree $Heap)) (|$IsA#_module.Tree| |t#0|)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 17) 16))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 11) (- 10))))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 6) (- 5))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
