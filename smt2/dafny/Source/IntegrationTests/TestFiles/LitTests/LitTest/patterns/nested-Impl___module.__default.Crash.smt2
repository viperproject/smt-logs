(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@U) Bool)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 () T@U)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@42 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 () T@T)
(declare-fun $generated@@45 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@46 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@101 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@102 (T@U) Bool)
(declare-fun $generated@@105 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@0))
(assert (forall (($generated@@24 T@U) ) (!  (=> ($generated@@22 $generated@@24) ($generated@@23 $generated@@24))
 :pattern ( ($generated@@22 $generated@@24))
)))
(assert (= ($generated@@25 $generated@@26) $generated@@3))
(assert (= ($generated@@5 $generated@@28) 3))
(assert (forall (($generated@@30 T@U) ) (!  (=> ($generated@@27 $generated@@28 $generated@@30 $generated@@29) ($generated@@23 $generated@@30))
 :pattern ( ($generated@@23 $generated@@30) ($generated@@27 $generated@@28 $generated@@30 $generated@@29))
)))
(assert ($generated@@27 $generated@@28 $generated@@26 $generated@@29))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ) (! (= ($generated@@23 $generated@@34) (= ($generated@@25 $generated@@34) $generated@@3))
 :pattern ( ($generated@@23 $generated@@34))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@36 $generated@@38 ($generated@@35 $generated@@38 $generated@@37)) $generated@@37)
 :pattern ( ($generated@@35 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ) (!  (=> ($generated@@23 $generated@@39) (= $generated@@39 $generated@@26))
 :pattern ( ($generated@@23 $generated@@39))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@T) ) (! (= ($generated@@35 $generated@@41 ($generated@@36 $generated@@41 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@36 $generated@@41 $generated@@40))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@T) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@42 $generated@@53 $generated@@54 $generated@@55 ($generated@@49 $generated@@53 $generated@@54 $generated@@55 $generated@@57 $generated@@58 $generated@@59 $generated@@56) $generated@@58 $generated@@59) $generated@@56)
 :weight 0
)) (and (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (or (= $generated@@65 $generated@@67) (= ($generated@@42 $generated@@60 $generated@@61 $generated@@62 ($generated@@49 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@66 $generated@@63) $generated@@67 $generated@@68) ($generated@@42 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@67 $generated@@68)))
 :weight 0
)) (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (or (= $generated@@75 $generated@@77) (= ($generated@@42 $generated@@69 $generated@@70 $generated@@71 ($generated@@49 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@76 $generated@@77) ($generated@@42 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@76 $generated@@77)))
 :weight 0
)))) (= ($generated@@5 $generated@@43) 4)) (= ($generated@@5 $generated@@44) 5)) (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@46 $generated@@78 $generated@@79 ($generated@@50 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@80) $generated@@82) $generated@@80)
 :weight 0
))) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@87 $generated@@88) (= ($generated@@46 $generated@@83 $generated@@84 ($generated@@50 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@85) $generated@@88) ($generated@@46 $generated@@83 $generated@@84 $generated@@86 $generated@@88)))
 :weight 0
))) (= ($generated@@5 $generated@@47) 6)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (= ($generated@@5 ($generated@@48 $generated@@89 $generated@@90)) 7))) (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (! (= ($generated@@51 ($generated@@48 $generated@@91 $generated@@92)) $generated@@91)
 :pattern ( ($generated@@48 $generated@@91 $generated@@92))
))) (forall (($generated@@93 T@T) ($generated@@94 T@T) ) (! (= ($generated@@52 ($generated@@48 $generated@@93 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@48 $generated@@93 $generated@@94))
))))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 Bool) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@10 ($generated@@42 $generated@@43 $generated@@44 $generated@@6 ($generated@@45 $generated@@95 $generated@@96 $generated@@97 $generated@@98) $generated@@99 $generated@@100))  (=> (and (or (not (= $generated@@99 $generated@@95)) (not true)) ($generated@@10 ($generated@@35 $generated@@6 ($generated@@46 $generated@@44 $generated@@47 ($generated@@46 $generated@@43 ($generated@@48 $generated@@44 $generated@@47) $generated@@96 $generated@@99) $generated@@97)))) $generated@@98))
 :pattern ( ($generated@@42 $generated@@43 $generated@@44 $generated@@6 ($generated@@45 $generated@@95 $generated@@96 $generated@@97 $generated@@98) $generated@@99 $generated@@100))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ) (!  (=> (and ($generated@@102 $generated@@104) ($generated@@27 $generated@@28 $generated@@103 $generated@@29)) ($generated@@101 $generated@@28 $generated@@103 $generated@@29 $generated@@104))
 :pattern ( ($generated@@101 $generated@@28 $generated@@103 $generated@@29 $generated@@104))
)))
(assert (= ($generated@@21 $generated@@29) $generated@@2))
(assert (= ($generated@@105 $generated@@29) $generated@@4))
(assert (= $generated@@26 ($generated@@31 $generated@@28 $generated@@26)))
(assert (forall (($generated@@106 T@U) ($generated@@107 T@T) ) (! (= ($generated@@36 $generated@@107 ($generated@@31 $generated@@107 $generated@@106)) ($generated@@31 $generated@@47 ($generated@@36 $generated@@107 $generated@@106)))
 :pattern ( ($generated@@36 $generated@@107 ($generated@@31 $generated@@107 $generated@@106)))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@U) ) (! ($generated@@101 $generated@@6 $generated@@109 $generated $generated@@108)
 :pattern ( ($generated@@101 $generated@@6 $generated@@109 $generated $generated@@108))
)))
(assert (forall (($generated@@110 T@U) ) (! ($generated@@27 $generated@@6 $generated@@110 $generated)
 :pattern ( ($generated@@27 $generated@@6 $generated@@110 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@111 () Bool)
(declare-fun $generated@@112 () Bool)
(declare-fun $generated@@113 () Bool)
(declare-fun $generated@@114 () T@U)
(declare-fun $generated@@115 () T@U)
(declare-fun $generated@@116 () T@U)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 (T@U) Bool)
(declare-fun $generated@@119 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@120 true))
(let (($generated@@121  (=> (and (and (= $generated@@111 (= $generated@@112 ($generated@@10 ($generated@@31 $generated@@6 ($generated@@9 true))))) ($generated@@27 $generated@@6 ($generated@@9 $generated@@111) $generated)) (and (= $generated@@113 $generated@@111) (= (ControlFlow 0 3) (- 0 2)))) (forall (($generated@@122 Bool) ) (let (($generated@@123 (= $generated@@122 ($generated@@10 ($generated@@31 $generated@@6 ($generated@@9 true))))))
$generated@@123)))))
(let (($generated@@124  (=> (= $generated@@114 $generated@@26) (and (=> (= (ControlFlow 0 5) 3) $generated@@121) (=> (= (ControlFlow 0 5) 4) $generated@@120)))))
(let (($generated@@125 true))
(let (($generated@@126  (=> (= $generated@@115 ($generated@@45 $generated@@116 $generated@@117 $generated@@1 false)) (and (=> (= (ControlFlow 0 6) 5) $generated@@124) (=> (= (ControlFlow 0 6) 1) $generated@@125)))))
(let (($generated@@127  (=> (and ($generated@@102 $generated@@117) ($generated@@118 $generated@@117)) (=> (and (and (and ($generated@@27 $generated@@28 $generated@@114 $generated@@29) ($generated@@101 $generated@@28 $generated@@114 $generated@@29 $generated@@117)) ($generated@@22 $generated@@114)) (and (= 1 $generated@@119) (= (ControlFlow 0 7) 6))) $generated@@126))))
$generated@@127)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
