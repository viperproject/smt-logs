(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 (T@T) Int)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 (Bool) T@U)
(declare-fun $generated@@15 (T@U) Bool)
(declare-fun $generated@@16 (Int) T@U)
(declare-fun $generated@@17 (T@U) Int)
(declare-fun $generated@@18 (Real) T@U)
(declare-fun $generated@@19 (T@U) Real)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@U) Int)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 (T@U) Int)
(declare-fun $generated@@36 (T@U) T@U)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@38 (T@T T@U T@U) Bool)
(declare-fun $generated@@39 () T@T)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@43 (T@U T@U) Bool)
(declare-fun $generated@@46 (Int) Int)
(declare-fun $generated@@48 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@U) Bool)
(declare-fun $generated@@55 (T@U) Bool)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@62 (Int) T@U)
(declare-fun $generated@@65 (Int) T@U)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@71 () T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@76 (T@U) Bool)
(declare-fun $generated@@92 (T@U) Int)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 () T@T)
(declare-fun $generated@@97 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@99 () T@T)
(declare-fun $generated@@100 (T@T T@T) T@T)
(declare-fun $generated@@101 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@102 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@103 (T@T) T@T)
(declare-fun $generated@@104 (T@T) T@T)
(declare-fun $generated@@153 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@163 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@10 $generated@@11) 0) (= ($generated@@10 $generated@@12) 1)) (= ($generated@@10 $generated@@13) 2)) (forall (($generated@@20 Bool) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Int) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 Real) ) (! (= ($generated@@19 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 T@U) ) (! (= ($generated@@18 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9)
)
(assert (= ($generated@@26 $generated) $generated@@0))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> (and ($generated@@28 $generated@@30) ($generated@@28 $generated@@31)) (= ($generated@@27 $generated@@30 $generated@@31) (= ($generated@@29 $generated@@30) ($generated@@29 $generated@@31))))
 :pattern ( ($generated@@27 $generated@@30 $generated@@31) ($generated@@28 $generated@@30))
 :pattern ( ($generated@@27 $generated@@30 $generated@@31) ($generated@@28 $generated@@31))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> (and ($generated@@32 $generated@@34) ($generated@@32 $generated@@35)) (= ($generated@@27 $generated@@34 $generated@@35) (= ($generated@@33 $generated@@34) ($generated@@33 $generated@@35))))
 :pattern ( ($generated@@27 $generated@@34 $generated@@35) ($generated@@32 $generated@@34))
 :pattern ( ($generated@@27 $generated@@34 $generated@@35) ($generated@@32 $generated@@35))
)))
(assert (= ($generated@@36 $generated@@37) $generated@@7))
(assert (= ($generated@@10 $generated@@39) 3))
(assert ($generated@@38 $generated@@39 $generated@@37 $generated@@40))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ) (! (= ($generated@@27 $generated@@41 $generated@@42) (= $generated@@41 $generated@@42))
 :pattern ( ($generated@@27 $generated@@41 $generated@@42))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@43 $generated@@44 $generated@@45) (= $generated@@44 $generated@@45))
 :pattern ( ($generated@@43 $generated@@44 $generated@@45))
)))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@46 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@T) ) (! (= ($generated@@48 $generated@@50 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@50 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ) (! (= ($generated@@28 $generated@@51) (= ($generated@@36 $generated@@51) $generated@@4))
 :pattern ( ($generated@@28 $generated@@51))
)))
(assert (forall (($generated@@52 T@U) ) (! (= ($generated@@32 $generated@@52) (= ($generated@@36 $generated@@52) $generated@@5))
 :pattern ( ($generated@@32 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@53 $generated@@54) (= ($generated@@36 $generated@@54) $generated@@6))
 :pattern ( ($generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@55 $generated@@56) (= ($generated@@36 $generated@@56) $generated@@7))
 :pattern ( ($generated@@55 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 ($generated@@57 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@57 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@61 T@U) ) (!  (=> ($generated@@55 $generated@@61) (= $generated@@61 $generated@@37))
 :pattern ( ($generated@@55 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@28 $generated@@63) (exists (($generated@@64 Int) ) (= $generated@@63 ($generated@@62 $generated@@64))))
 :pattern ( ($generated@@28 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ) (!  (=> ($generated@@32 $generated@@66) (exists (($generated@@67 Int) ) (= $generated@@66 ($generated@@65 $generated@@67))))
 :pattern ( ($generated@@32 $generated@@66))
)))
(assert (forall (($generated@@69 T@U) ) (!  (=> ($generated@@53 $generated@@69) (exists (($generated@@70 T@U) ) (= $generated@@69 ($generated@@68 $generated@@70))))
 :pattern ( ($generated@@53 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@38 $generated@@39 ($generated@@68 $generated@@72) $generated@@40) ($generated@@38 $generated@@39 $generated@@72 $generated@@71))
 :pattern ( ($generated@@38 $generated@@39 ($generated@@68 $generated@@72) $generated@@40))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (!  (=> (and ($generated@@53 $generated@@74) ($generated@@53 $generated@@75)) (= ($generated@@43 $generated@@74 $generated@@75) ($generated@@27 ($generated@@73 $generated@@74) ($generated@@73 $generated@@75))))
 :pattern ( ($generated@@43 $generated@@74 $generated@@75) ($generated@@53 $generated@@74))
 :pattern ( ($generated@@43 $generated@@74 $generated@@75) ($generated@@53 $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ) (!  (=> ($generated@@76 $generated@@77) (or ($generated@@53 $generated@@77) ($generated@@55 $generated@@77)))
 :pattern ( ($generated@@76 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@38 $generated@@39 $generated@@78 $generated@@71) (or ($generated@@28 $generated@@78) ($generated@@32 $generated@@78)))
 :pattern ( ($generated@@32 $generated@@78) ($generated@@38 $generated@@39 $generated@@78 $generated@@71))
 :pattern ( ($generated@@28 $generated@@78) ($generated@@38 $generated@@39 $generated@@78 $generated@@71))
)))
(assert (forall (($generated@@79 T@U) ) (!  (=> ($generated@@38 $generated@@39 $generated@@79 $generated@@40) (or ($generated@@53 $generated@@79) ($generated@@55 $generated@@79)))
 :pattern ( ($generated@@55 $generated@@79) ($generated@@38 $generated@@39 $generated@@79 $generated@@40))
 :pattern ( ($generated@@53 $generated@@79) ($generated@@38 $generated@@39 $generated@@79 $generated@@40))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ) (!  (=> (and ($generated@@55 $generated@@80) ($generated@@55 $generated@@81)) ($generated@@43 $generated@@80 $generated@@81))
 :pattern ( ($generated@@43 $generated@@80 $generated@@81) ($generated@@55 $generated@@80))
 :pattern ( ($generated@@43 $generated@@80 $generated@@81) ($generated@@55 $generated@@81))
)))
(assert (forall (($generated@@82 Int) ) (! (= ($generated@@36 ($generated@@62 $generated@@82)) $generated@@4)
 :pattern ( ($generated@@62 $generated@@82))
)))
(assert (forall (($generated@@83 Int) ) (! (= ($generated@@29 ($generated@@62 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@62 $generated@@83))
)))
(assert (forall (($generated@@84 Int) ) (! (= ($generated@@36 ($generated@@65 $generated@@84)) $generated@@5)
 :pattern ( ($generated@@65 $generated@@84))
)))
(assert (forall (($generated@@85 Int) ) (! (= ($generated@@33 ($generated@@65 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@65 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ) (! (= ($generated@@36 ($generated@@68 $generated@@86)) $generated@@6)
 :pattern ( ($generated@@68 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@73 ($generated@@68 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@68 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@57 $generated@@89 ($generated@@58 $generated@@89 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@58 $generated@@89 $generated@@88))
)))
(assert (forall (($generated@@90 Int) ) (! (= ($generated@@38 $generated@@39 ($generated@@62 $generated@@90) $generated@@71) ($generated@@38 $generated@@12 ($generated@@16 $generated@@90) $generated))
 :pattern ( ($generated@@38 $generated@@39 ($generated@@62 $generated@@90) $generated@@71))
)))
(assert (forall (($generated@@91 Int) ) (! (= ($generated@@38 $generated@@39 ($generated@@65 $generated@@91) $generated@@71) ($generated@@38 $generated@@12 ($generated@@16 $generated@@91) $generated))
 :pattern ( ($generated@@38 $generated@@39 ($generated@@65 $generated@@91) $generated@@71))
)))
(assert (forall (($generated@@93 T@U) ) (! (< ($generated@@92 $generated@@93) ($generated@@92 ($generated@@68 $generated@@93)))
 :pattern ( ($generated@@68 $generated@@93))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (! (= ($generated@@94 $generated@@105 $generated@@106 $generated@@107 ($generated@@101 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@110 $generated@@111) $generated@@108)
 :weight 0
)) (and (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@117 $generated@@119) (= ($generated@@94 $generated@@112 $generated@@113 $generated@@114 ($generated@@101 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@94 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@T) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (!  (or (= $generated@@127 $generated@@129) (= ($generated@@94 $generated@@121 $generated@@122 $generated@@123 ($generated@@101 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@126 $generated@@127 $generated@@124) $generated@@128 $generated@@129) ($generated@@94 $generated@@121 $generated@@122 $generated@@123 $generated@@125 $generated@@128 $generated@@129)))
 :weight 0
)))) (= ($generated@@10 $generated@@95) 4)) (= ($generated@@10 $generated@@96) 5)) (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@98 $generated@@130 $generated@@131 ($generated@@102 $generated@@130 $generated@@131 $generated@@133 $generated@@134 $generated@@132) $generated@@134) $generated@@132)
 :weight 0
))) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@U) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ) (!  (or (= $generated@@139 $generated@@140) (= ($generated@@98 $generated@@135 $generated@@136 ($generated@@102 $generated@@135 $generated@@136 $generated@@138 $generated@@139 $generated@@137) $generated@@140) ($generated@@98 $generated@@135 $generated@@136 $generated@@138 $generated@@140)))
 :weight 0
))) (= ($generated@@10 $generated@@99) 6)) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (= ($generated@@10 ($generated@@100 $generated@@141 $generated@@142)) 7))) (forall (($generated@@143 T@T) ($generated@@144 T@T) ) (! (= ($generated@@103 ($generated@@100 $generated@@143 $generated@@144)) $generated@@143)
 :pattern ( ($generated@@100 $generated@@143 $generated@@144))
))) (forall (($generated@@145 T@T) ($generated@@146 T@T) ) (! (= ($generated@@104 ($generated@@100 $generated@@145 $generated@@146)) $generated@@146)
 :pattern ( ($generated@@100 $generated@@145 $generated@@146))
))))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 Bool) ($generated@@151 T@U) ($generated@@152 T@U) ) (! (= ($generated@@15 ($generated@@94 $generated@@95 $generated@@96 $generated@@11 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))  (=> (and (or (not (= $generated@@151 $generated@@147)) (not true)) ($generated@@15 ($generated@@57 $generated@@11 ($generated@@98 $generated@@96 $generated@@99 ($generated@@98 $generated@@95 ($generated@@100 $generated@@96 $generated@@99) $generated@@148 $generated@@151) $generated@@149)))) $generated@@150))
 :pattern ( ($generated@@94 $generated@@95 $generated@@96 $generated@@11 ($generated@@97 $generated@@147 $generated@@148 $generated@@149 $generated@@150) $generated@@151 $generated@@152))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> (and ($generated@@154 $generated@@156) (and ($generated@@28 $generated@@155) ($generated@@153 $generated@@39 $generated@@155 $generated@@71 $generated@@156))) ($generated@@153 $generated@@12 ($generated@@16 ($generated@@29 $generated@@155)) $generated $generated@@156))
 :pattern ( ($generated@@153 $generated@@12 ($generated@@16 ($generated@@29 $generated@@155)) $generated $generated@@156))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (!  (=> (and ($generated@@154 $generated@@158) (and ($generated@@32 $generated@@157) ($generated@@153 $generated@@39 $generated@@157 $generated@@71 $generated@@158))) ($generated@@153 $generated@@12 ($generated@@16 ($generated@@33 $generated@@157)) $generated $generated@@158))
 :pattern ( ($generated@@153 $generated@@12 ($generated@@16 ($generated@@33 $generated@@157)) $generated $generated@@158))
)))
(assert (forall (($generated@@159 T@U) ($generated@@160 T@U) ) (!  (=> (and ($generated@@154 $generated@@160) ($generated@@38 $generated@@39 $generated@@159 $generated@@71)) ($generated@@153 $generated@@39 $generated@@159 $generated@@71 $generated@@160))
 :pattern ( ($generated@@153 $generated@@39 $generated@@159 $generated@@71 $generated@@160))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@U) ) (!  (=> (and ($generated@@154 $generated@@162) ($generated@@38 $generated@@39 $generated@@161 $generated@@40)) ($generated@@153 $generated@@39 $generated@@161 $generated@@40 $generated@@162))
 :pattern ( ($generated@@153 $generated@@39 $generated@@161 $generated@@40 $generated@@162))
)))
(assert (= ($generated@@26 $generated@@40) $generated@@2))
(assert (= ($generated@@163 $generated@@40) $generated@@8))
(assert (= ($generated@@26 $generated@@71) $generated@@3))
(assert (= ($generated@@163 $generated@@71) $generated@@9))
(assert (= $generated@@37 ($generated@@48 $generated@@39 $generated@@37)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (!  (=> (and ($generated@@154 $generated@@165) (and ($generated@@53 $generated@@164) ($generated@@153 $generated@@39 $generated@@164 $generated@@40 $generated@@165))) ($generated@@153 $generated@@39 ($generated@@73 $generated@@164) $generated@@71 $generated@@165))
 :pattern ( ($generated@@153 $generated@@39 ($generated@@73 $generated@@164) $generated@@71 $generated@@165))
)))
(assert (forall (($generated@@166 Int) ) (! (= ($generated@@58 $generated@@12 ($generated@@16 ($generated@@46 $generated@@166))) ($generated@@48 $generated@@99 ($generated@@58 $generated@@12 ($generated@@16 $generated@@166))))
 :pattern ( ($generated@@58 $generated@@12 ($generated@@16 ($generated@@46 $generated@@166))))
)))
(assert (forall (($generated@@167 Int) ) (! (= ($generated@@62 ($generated@@46 $generated@@167)) ($generated@@48 $generated@@39 ($generated@@62 $generated@@167)))
 :pattern ( ($generated@@62 ($generated@@46 $generated@@167)))
)))
(assert (forall (($generated@@168 Int) ) (! (= ($generated@@65 ($generated@@46 $generated@@168)) ($generated@@48 $generated@@39 ($generated@@65 $generated@@168)))
 :pattern ( ($generated@@65 ($generated@@46 $generated@@168)))
)))
(assert (forall (($generated@@169 T@U) ) (! (= ($generated@@68 ($generated@@48 $generated@@39 $generated@@169)) ($generated@@48 $generated@@39 ($generated@@68 $generated@@169)))
 :pattern ( ($generated@@68 ($generated@@48 $generated@@39 $generated@@169)))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@T) ) (! (= ($generated@@58 $generated@@171 ($generated@@48 $generated@@171 $generated@@170)) ($generated@@48 $generated@@99 ($generated@@58 $generated@@171 $generated@@170)))
 :pattern ( ($generated@@58 $generated@@171 ($generated@@48 $generated@@171 $generated@@170)))
)))
(assert (forall (($generated@@172 T@U) ($generated@@173 T@U) ) (! ($generated@@153 $generated@@12 $generated@@173 $generated $generated@@172)
 :pattern ( ($generated@@153 $generated@@12 $generated@@173 $generated $generated@@172))
)))
(assert (forall (($generated@@174 T@U) ) (! ($generated@@38 $generated@@12 $generated@@174 $generated)
 :pattern ( ($generated@@38 $generated@@12 $generated@@174 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 () Int)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () Int)
(declare-fun $generated@@179 () Int)
(declare-fun $generated@@180 () Int)
(declare-fun $generated@@181 () Int)
(declare-fun $generated@@182 () Int)
(declare-fun $generated@@183 () Int)
(declare-fun $generated@@184 () T@U)
(declare-fun $generated@@185 () Int)
(declare-fun $generated@@186 () T@U)
(declare-fun $generated@@187 () T@U)
(declare-fun $generated@@188 (T@U) Bool)
(declare-fun $generated@@189 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@190 true))
(let (($generated@@191  (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> ($generated@@43 $generated@@175 $generated@@37) (= $generated@@176 ($generated@@46 2)))) (=> (=> ($generated@@43 $generated@@175 $generated@@37) (= $generated@@176 ($generated@@46 2))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> (not ($generated@@43 $generated@@175 $generated@@37)) (< $generated@@176 2)))))))
(let (($generated@@192  (=> (and (and (= $generated@@177 ($generated@@65 $generated@@178)) (= $generated@@179 ($generated@@46 1))) (and (= $generated@@176 $generated@@179) (= (ControlFlow 0 8) 3))) $generated@@191)))
(let (($generated@@193  (=> (or (not (= $generated@@177 ($generated@@62 $generated@@180))) (not true)) (and (=> (= (ControlFlow 0 10) 8) $generated@@192) (=> (= (ControlFlow 0 10) 9) $generated@@190)))))
(let (($generated@@194  (=> (= $generated@@177 ($generated@@62 $generated@@180)) (=> (and (= $generated@@181 $generated@@180) ($generated@@38 $generated@@12 ($generated@@16 $generated@@181) $generated)) (=> (and (and (= $generated@@182 $generated@@181) (= $generated@@183 ($generated@@46 0))) (and (= $generated@@176 $generated@@183) (= (ControlFlow 0 7) 3))) $generated@@191)))))
(let (($generated@@195  (=> (= $generated@@175 ($generated@@68 $generated@@177)) (=> (and ($generated@@38 $generated@@39 $generated@@177 $generated@@71) ($generated@@153 $generated@@39 $generated@@177 $generated@@71 $generated@@184)) (and (=> (= (ControlFlow 0 11) 7) $generated@@194) (=> (= (ControlFlow 0 11) 10) $generated@@193))))))
(let (($generated@@196  (=> (and (and (= $generated@@175 $generated@@37) (= $generated@@185 ($generated@@46 2))) (and (= $generated@@176 $generated@@185) (= (ControlFlow 0 5) 3))) $generated@@191)))
(let (($generated@@197 true))
(let (($generated@@198  (=> (or (not (= $generated@@175 ($generated@@68 $generated@@177))) (not true)) (and (=> (= (ControlFlow 0 6) 5) $generated@@196) (=> (= (ControlFlow 0 6) 1) $generated@@197)))))
(let (($generated@@199  (=> (= $generated@@186 ($generated@@97 $generated@@187 $generated@@184 $generated@@1 false)) (and (=> (= (ControlFlow 0 12) 11) $generated@@195) (=> (= (ControlFlow 0 12) 6) $generated@@198)))))
(let (($generated@@200  (=> (and ($generated@@154 $generated@@184) ($generated@@188 $generated@@184)) (=> (and (and (and ($generated@@38 $generated@@39 $generated@@175 $generated@@40) ($generated@@153 $generated@@39 $generated@@175 $generated@@40 $generated@@184)) ($generated@@76 $generated@@175)) (and (= 2 $generated@@189) (= (ControlFlow 0 13) 12))) $generated@@199))))
$generated@@200))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
