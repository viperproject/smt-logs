(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@U T@U) Bool)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@18 (T@U T@U) Bool)
(declare-fun $generated@@19 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@20 () T@T)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@T T@T) T@T)
(declare-fun $generated@@24 () T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@49 (Int) Int)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@62 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@63 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@64 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (forall (($generated@@17 T@U) ) (!  (not ($generated $generated@@0 $generated@@17))
 :pattern ( ($generated $generated@@0 $generated@@17))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@29 T@T) ($generated@@30 T@T) ($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@19 $generated@@29 $generated@@30 ($generated@@26 $generated@@29 $generated@@30 $generated@@32 $generated@@33 $generated@@31) $generated@@33) $generated@@31)
 :weight 0
)) (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ) (!  (or (= $generated@@38 $generated@@39) (= ($generated@@19 $generated@@34 $generated@@35 ($generated@@26 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@39) ($generated@@19 $generated@@34 $generated@@35 $generated@@37 $generated@@39)))
 :weight 0
))) (= ($generated@@1 $generated@@20) 3)) (= ($generated@@1 $generated@@21) 4)) (= ($generated@@1 $generated@@22) 5)) (forall (($generated@@40 T@T) ($generated@@41 T@T) ) (= ($generated@@1 ($generated@@23 $generated@@40 $generated@@41)) 6))) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (! (= ($generated@@27 ($generated@@23 $generated@@42 $generated@@43)) $generated@@42)
 :pattern ( ($generated@@23 $generated@@42 $generated@@43))
))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@28 ($generated@@23 $generated@@44 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@23 $generated@@44 $generated@@45))
))))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (!  (=> ($generated@@18 $generated@@46 $generated@@47) (forall (($generated@@48 T@U) ) (!  (=> ($generated@@6 ($generated@@25 $generated@@2 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@46 $generated@@48) $generated@@24))) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@47 $generated@@48) $generated@@24))))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@47 $generated@@48) $generated@@24))
)))
 :pattern ( ($generated@@18 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@50 Int) ) (! (= ($generated@@49 $generated@@50) $generated@@50)
 :pattern ( ($generated@@49 $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 $generated@@52) $generated@@52)
 :pattern ( ($generated@@51 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 ($generated@@25 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@25 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (!  (=> (or (not (= $generated@@57 $generated@@59)) (not true)) (=> (and ($generated@@18 $generated@@57 $generated@@58) ($generated@@18 $generated@@58 $generated@@59)) ($generated@@18 $generated@@57 $generated@@59)))
 :pattern ( ($generated@@18 $generated@@57 $generated@@58) ($generated@@18 $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@25 $generated@@61 ($generated@@54 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@54 $generated@@61 $generated@@60))
)))
(assert  (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@62 $generated@@65 $generated@@66 $generated@@67 ($generated@@64 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@70 $generated@@71) $generated@@68)
 :weight 0
)) (and (forall (($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (or (= $generated@@77 $generated@@79) (= ($generated@@62 $generated@@72 $generated@@73 $generated@@74 ($generated@@64 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@77 $generated@@78 $generated@@75) $generated@@79 $generated@@80) ($generated@@62 $generated@@72 $generated@@73 $generated@@74 $generated@@76 $generated@@79 $generated@@80)))
 :weight 0
)) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (!  (or (= $generated@@87 $generated@@89) (= ($generated@@62 $generated@@81 $generated@@82 $generated@@83 ($generated@@64 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@88 $generated@@89) ($generated@@62 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@88 $generated@@89)))
 :weight 0
)))))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 Bool) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@6 ($generated@@62 $generated@@22 $generated@@20 $generated@@2 ($generated@@63 $generated@@90 $generated@@91 $generated@@92 $generated@@93) $generated@@94 $generated@@95))  (=> (and (or (not (= $generated@@94 $generated@@90)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@91 $generated@@94) $generated@@92)))) $generated@@93))
 :pattern ( ($generated@@62 $generated@@22 $generated@@20 $generated@@2 ($generated@@63 $generated@@90 $generated@@91 $generated@@92 $generated@@93) $generated@@94 $generated@@95))
)))
(assert (forall (($generated@@96 Int) ) (! (= ($generated@@54 $generated@@3 ($generated@@7 ($generated@@49 $generated@@96))) ($generated@@51 $generated@@21 ($generated@@54 $generated@@3 ($generated@@7 $generated@@96))))
 :pattern ( ($generated@@54 $generated@@3 ($generated@@7 ($generated@@49 $generated@@96))))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 T@T) ) (! (= ($generated@@54 $generated@@98 ($generated@@51 $generated@@98 $generated@@97)) ($generated@@51 $generated@@21 ($generated@@54 $generated@@98 $generated@@97)))
 :pattern ( ($generated@@54 $generated@@98 ($generated@@51 $generated@@98 $generated@@97)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@99 () T@U)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 () T@U)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 (T@U) Bool)
(declare-fun $generated@@104 (T@U) Bool)
(declare-fun $generated@@105 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@106  (=> (= $generated@@99 ($generated@@63 $generated@@100 $generated@@101 $generated@@24 false)) (=> (and (= $generated@@102 ($generated@@49 3)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@107 T@U) ($generated@@108 T@U) )  (=> (and (and (or (not (= $generated@@107 $generated@@100)) (not true)) ($generated@@6 ($generated@@25 $generated@@2 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@101 $generated@@107) $generated@@24)))) ($generated (ite (= $generated@@102 ($generated@@49 0)) $generated@@0 $generated@@0) ($generated@@54 $generated@@22 $generated@@107))) ($generated@@6 ($generated@@62 $generated@@22 $generated@@20 $generated@@2 $generated@@99 $generated@@107 $generated@@108))))))))
(let (($generated@@109  (=> (and (and ($generated@@103 $generated@@101) ($generated@@104 $generated@@101)) (and (= 0 $generated@@105) (= (ControlFlow 0 3) 2))) $generated@@106)))
$generated@@109)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
