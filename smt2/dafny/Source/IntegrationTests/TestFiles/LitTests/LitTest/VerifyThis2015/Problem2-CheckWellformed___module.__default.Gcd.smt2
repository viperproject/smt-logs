(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (Int Int) Int)
(declare-fun $generated@@21 (T@U) Bool)
(declare-fun $generated@@22 (Int Int) Bool)
(declare-fun $generated@@23 (Int Int) Bool)
(declare-fun $generated@@24 (Int Int) Int)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (Bool Int Int) Bool)
(declare-fun $generated@@39 (Int Int) Bool)
(declare-fun $generated@@40 (Int Int Int) Bool)
(declare-fun $generated@@41 (Int Int Int) Bool)
(declare-fun $generated@@50 (Int Int Int) Bool)
(declare-fun $generated@@51 (Int Int Int) Bool)
(declare-fun $generated@@52 () Bool)
(declare-fun $generated@@62 (Int Int) Int)
(declare-fun $generated@@68 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 () T@T)
(declare-fun $generated@@71 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@72 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@T T@T) T@T)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@77 (T@T) T@T)
(declare-fun $generated@@78 (T@T) T@T)
(declare-fun $generated@@139 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@142 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 5 $generated@@19) (forall (($generated@@25 T@U) ($generated@@26 Int) ($generated@@27 Int) ) (!  (=> (or ($generated@@22 $generated@@26 $generated@@27) (and (< 5 $generated@@19) (and ($generated@@21 $generated@@25) (and (> $generated@@26 0) (> $generated@@27 0))))) (and ($generated@@23 $generated@@26 $generated@@27) (= ($generated@@20 $generated@@26 $generated@@27) (let (($generated@@28 ($generated@@24 $generated@@26 $generated@@27)))
$generated@@28))))
 :pattern ( ($generated@@20 $generated@@26 $generated@@27) ($generated@@21 $generated@@25))
))))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@29 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 ($generated@@34 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@34 $generated@@37 $generated@@36))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@42 Int) ($generated@@43 Int) ) (!  (=> (or ($generated@@39 ($generated@@29 $generated@@42) ($generated@@29 $generated@@43)) (and (< 1 $generated@@19) ($generated@@7 ($generated@@31 $generated@@3 ($generated@@6  (and (> $generated@@42 0) (> $generated@@43 0))))))) (and (forall (($generated@@44 Int) ) (!  (=> (> $generated@@44 0) ($generated@@41 $generated@@44 ($generated@@29 $generated@@42) ($generated@@29 $generated@@43)))
 :pattern ( ($generated@@40 $generated@@44 $generated@@42 $generated@@43))
)) (= ($generated@@38 true ($generated@@29 $generated@@42) ($generated@@29 $generated@@43)) (exists (($generated@@45 Int) ) (!  (and (> $generated@@45 0) ($generated@@40 $generated@@45 ($generated@@29 $generated@@42) ($generated@@29 $generated@@43)))
 :pattern ( ($generated@@40 $generated@@45 $generated@@42 $generated@@43))
)))))
 :weight 3
 :pattern ( ($generated@@38 true ($generated@@29 $generated@@42) ($generated@@29 $generated@@43)))
))))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@46 Int) ($generated@@47 Int) ) (!  (=> (or ($generated@@39 $generated@@46 $generated@@47) (and (< 1 $generated@@19) (and (> $generated@@46 0) (> $generated@@47 0)))) (and (forall (($generated@@48 Int) ) (!  (=> (> $generated@@48 0) ($generated@@41 $generated@@48 $generated@@46 $generated@@47))
 :pattern ( ($generated@@40 $generated@@48 $generated@@46 $generated@@47))
)) (= ($generated@@38 true $generated@@46 $generated@@47) (exists (($generated@@49 Int) ) (!  (and (> $generated@@49 0) ($generated@@40 $generated@@49 $generated@@46 $generated@@47))
 :pattern ( ($generated@@40 $generated@@49 $generated@@46 $generated@@47))
)))))
 :pattern ( ($generated@@38 true $generated@@46 $generated@@47))
))))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@53 Int) ($generated@@54 Int) ($generated@@55 Int) ) (!  (=> (or ($generated@@51 ($generated@@29 $generated@@53) ($generated@@29 $generated@@54) ($generated@@29 $generated@@55)) (and (< 2 $generated@@19) ($generated@@7 ($generated@@31 $generated@@3 ($generated@@6  (and (> $generated@@54 0) (> $generated@@55 0))))))) (and (=> ($generated@@7 ($generated@@31 $generated@@3 ($generated@@6 (> $generated@@53 0)))) (and ($generated@@39 ($generated@@29 $generated@@53) ($generated@@29 $generated@@54)) (=> ($generated@@38 $generated@@52 ($generated@@29 $generated@@53) ($generated@@29 $generated@@54)) ($generated@@39 ($generated@@29 $generated@@53) ($generated@@29 $generated@@55))))) (= ($generated@@50 ($generated@@29 $generated@@53) ($generated@@29 $generated@@54) ($generated@@29 $generated@@55))  (and (and (> $generated@@53 0) ($generated@@38 $generated@@52 ($generated@@29 $generated@@53) ($generated@@29 $generated@@54))) ($generated@@38 $generated@@52 ($generated@@29 $generated@@53) ($generated@@29 $generated@@55))))))
 :weight 3
 :pattern ( ($generated@@50 ($generated@@29 $generated@@53) ($generated@@29 $generated@@54) ($generated@@29 $generated@@55)))
))))
(assert (forall (($generated@@56 Int) ($generated@@57 Int) ) (!  (=> ($generated@@23 $generated@@56 $generated@@57) (and ($generated@@50 ($generated@@24 $generated@@56 $generated@@57) $generated@@56 $generated@@57) (forall (($generated@@58 Int) ) (!  (=> ($generated@@50 $generated@@58 $generated@@56 $generated@@57) (<= $generated@@58 ($generated@@24 $generated@@56 $generated@@57)))
 :pattern ( ($generated@@50 $generated@@58 $generated@@56 $generated@@57))
))))
 :pattern ( ($generated@@24 $generated@@56 $generated@@57))
)))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@59 Int) ($generated@@60 Int) ($generated@@61 Int) ) (!  (=> (or ($generated@@51 $generated@@59 $generated@@60 $generated@@61) (and (< 2 $generated@@19) (and (> $generated@@60 0) (> $generated@@61 0)))) (and (=> (> $generated@@59 0) (and ($generated@@39 $generated@@59 $generated@@60) (=> ($generated@@38 $generated@@52 $generated@@59 $generated@@60) ($generated@@39 $generated@@59 $generated@@61)))) (= ($generated@@50 $generated@@59 $generated@@60 $generated@@61)  (and (and (> $generated@@59 0) ($generated@@38 $generated@@52 $generated@@59 $generated@@60)) ($generated@@38 $generated@@52 $generated@@59 $generated@@61)))))
 :pattern ( ($generated@@50 $generated@@59 $generated@@60 $generated@@61))
))))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@63 Int) ($generated@@64 Int) ($generated@@65 Int) ) (!  (=> (or ($generated@@41 ($generated@@29 $generated@@63) ($generated@@29 $generated@@64) ($generated@@29 $generated@@65)) (and (< 0 $generated@@19) ($generated@@7 ($generated@@31 $generated@@3 ($generated@@6  (and (> $generated@@63 0) (> $generated@@64 0))))))) (= ($generated@@40 ($generated@@29 $generated@@63) ($generated@@29 $generated@@64) ($generated@@29 $generated@@65)) (= ($generated@@29 ($generated@@62 ($generated@@29 $generated@@63) ($generated@@29 $generated@@64))) ($generated@@29 $generated@@65))))
 :weight 3
 :pattern ( ($generated@@40 ($generated@@29 $generated@@63) ($generated@@29 $generated@@64) ($generated@@29 $generated@@65)))
))))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@T) ) (! (= ($generated@@34 $generated@@67 ($generated@@35 $generated@@67 $generated@@66)) $generated@@66)
 :pattern ( ($generated@@35 $generated@@67 $generated@@66))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (! (= ($generated@@68 $generated@@79 $generated@@80 $generated@@81 ($generated@@75 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@84 $generated@@85) $generated@@82)
 :weight 0
)) (and (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@68 $generated@@86 $generated@@87 $generated@@88 ($generated@@75 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@68 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)) (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@68 $generated@@95 $generated@@96 $generated@@97 ($generated@@75 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@68 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)))) (= ($generated@@2 $generated@@69) 3)) (= ($generated@@2 $generated@@70) 4)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@72 $generated@@104 $generated@@105 ($generated@@76 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@106) $generated@@108) $generated@@106)
 :weight 0
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (!  (or (= $generated@@113 $generated@@114) (= ($generated@@72 $generated@@109 $generated@@110 ($generated@@76 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@111) $generated@@114) ($generated@@72 $generated@@109 $generated@@110 $generated@@112 $generated@@114)))
 :weight 0
))) (= ($generated@@2 $generated@@73) 5)) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (= ($generated@@2 ($generated@@74 $generated@@115 $generated@@116)) 6))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@77 ($generated@@74 $generated@@117 $generated@@118)) $generated@@117)
 :pattern ( ($generated@@74 $generated@@117 $generated@@118))
))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@78 ($generated@@74 $generated@@119 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@74 $generated@@119 $generated@@120))
))))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 Bool) ($generated@@125 T@U) ($generated@@126 T@U) ) (! (= ($generated@@7 ($generated@@68 $generated@@69 $generated@@70 $generated@@3 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))  (=> (and (or (not (= $generated@@125 $generated@@121)) (not true)) ($generated@@7 ($generated@@34 $generated@@3 ($generated@@72 $generated@@70 $generated@@73 ($generated@@72 $generated@@69 ($generated@@74 $generated@@70 $generated@@73) $generated@@122 $generated@@125) $generated@@123)))) $generated@@124))
 :pattern ( ($generated@@68 $generated@@69 $generated@@70 $generated@@3 ($generated@@71 $generated@@121 $generated@@122 $generated@@123 $generated@@124) $generated@@125 $generated@@126))
)))
(assert (forall (($generated@@127 Int) ($generated@@128 Int) ) (! (= ($generated@@62 $generated@@127 $generated@@128) (* $generated@@127 $generated@@128))
 :pattern ( ($generated@@62 $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 Int) ) (! (= ($generated@@35 $generated@@4 ($generated@@8 ($generated@@29 $generated@@129))) ($generated@@31 $generated@@73 ($generated@@35 $generated@@4 ($generated@@8 $generated@@129))))
 :pattern ( ($generated@@35 $generated@@4 ($generated@@8 ($generated@@29 $generated@@129))))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@T) ) (! (= ($generated@@35 $generated@@131 ($generated@@31 $generated@@131 $generated@@130)) ($generated@@31 $generated@@73 ($generated@@35 $generated@@131 $generated@@130)))
 :pattern ( ($generated@@35 $generated@@131 ($generated@@31 $generated@@131 $generated@@130)))
)))
(assert  (=> (<= 5 $generated@@19) (forall (($generated@@132 T@U) ($generated@@133 Int) ($generated@@134 Int) ) (!  (=> (or ($generated@@22 ($generated@@29 $generated@@133) ($generated@@29 $generated@@134)) (and (< 5 $generated@@19) (and ($generated@@21 $generated@@132) ($generated@@7 ($generated@@31 $generated@@3 ($generated@@6  (and (> $generated@@133 0) (> $generated@@134 0)))))))) (and ($generated@@23 ($generated@@29 $generated@@133) ($generated@@29 $generated@@134)) (= ($generated@@20 ($generated@@29 $generated@@133) ($generated@@29 $generated@@134)) (let (($generated@@135 ($generated@@24 ($generated@@29 $generated@@133) ($generated@@29 $generated@@134))))
$generated@@135))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@29 $generated@@133) ($generated@@29 $generated@@134)) ($generated@@21 $generated@@132))
))))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@136 Int) ($generated@@137 Int) ($generated@@138 Int) ) (!  (=> (or ($generated@@41 $generated@@136 $generated@@137 $generated@@138) (and (< 0 $generated@@19) (and (> $generated@@136 0) (> $generated@@137 0)))) (= ($generated@@40 $generated@@136 $generated@@137 $generated@@138) (= ($generated@@62 $generated@@136 $generated@@137) $generated@@138)))
 :pattern ( ($generated@@40 $generated@@136 $generated@@137 $generated@@138))
))))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (! ($generated@@139 $generated@@4 $generated@@141 $generated $generated@@140)
 :pattern ( ($generated@@139 $generated@@4 $generated@@141 $generated $generated@@140))
)))
(assert (forall (($generated@@143 T@U) ) (! ($generated@@142 $generated@@4 $generated@@143 $generated)
 :pattern ( ($generated@@142 $generated@@4 $generated@@143 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 (T@U) Bool)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let (($generated@@153 true))
(let (($generated@@154  (=> (= (ControlFlow 0 4) (- 0 3)) (or (and ($generated@@142 $generated@@4 ($generated@@8 ($generated@@29 0)) $generated) (and ($generated@@50 ($generated@@29 0) $generated@@144 $generated@@145) (forall (($generated@@155 Int) ) (!  (=> ($generated@@50 $generated@@155 $generated@@144 $generated@@145) (<= $generated@@155 ($generated@@29 0)))
 :pattern ( ($generated@@50 $generated@@155 $generated@@144 $generated@@145))
)))) (exists (($generated@@156 Int) )  (and ($generated@@50 $generated@@156 $generated@@144 $generated@@145) (forall (($generated@@157 Int) ) (!  (=> ($generated@@50 $generated@@157 $generated@@144 $generated@@145) (<= $generated@@157 $generated@@156))
 :pattern ( ($generated@@50 $generated@@157 $generated@@144 $generated@@145))
))))))))
(let (($generated@@158  (=> (and (not ($generated@@50 $generated@@146 $generated@@144 $generated@@145)) (= (ControlFlow 0 8) 4)) $generated@@154)))
(let (($generated@@159  (=> (and ($generated@@50 $generated@@146 $generated@@144 $generated@@145) (= (ControlFlow 0 7) 4)) $generated@@154)))
(let (($generated@@160  (=> ($generated@@139 $generated@@4 ($generated@@8 $generated@@146) $generated $generated@@147) (=> (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@144) $generated $generated@@147) ($generated@@139 $generated@@4 ($generated@@8 $generated@@145) $generated $generated@@147)) (and (=> (= (ControlFlow 0 9) (- 0 11)) (> $generated@@144 0)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (> $generated@@145 0)) (=> (and (and (> $generated@@144 0) (> $generated@@145 0)) ($generated@@51 $generated@@146 $generated@@144 $generated@@145)) (and (=> (= (ControlFlow 0 9) 7) $generated@@159) (=> (= (ControlFlow 0 9) 8) $generated@@158)))))))))
(let (($generated@@161  (=> ($generated@@50 $generated@@148 $generated@@144 $generated@@145) (and (=> (= (ControlFlow 0 12) 9) $generated@@160) (=> (= (ControlFlow 0 12) 6) $generated@@153)))))
(let (($generated@@162  (=> (and (not ($generated@@50 $generated@@148 $generated@@144 $generated@@145)) (= (ControlFlow 0 5) 4)) $generated@@154)))
(let (($generated@@163  (=> ($generated@@139 $generated@@4 ($generated@@8 $generated@@148) $generated $generated@@147) (=> (and ($generated@@139 $generated@@4 ($generated@@8 $generated@@144) $generated $generated@@147) ($generated@@139 $generated@@4 ($generated@@8 $generated@@145) $generated $generated@@147)) (and (=> (= (ControlFlow 0 13) (- 0 15)) (> $generated@@144 0)) (and (=> (= (ControlFlow 0 13) (- 0 14)) (> $generated@@145 0)) (=> (and (and (> $generated@@144 0) (> $generated@@145 0)) ($generated@@51 $generated@@148 $generated@@144 $generated@@145)) (and (=> (= (ControlFlow 0 13) 12) $generated@@161) (=> (= (ControlFlow 0 13) 5) $generated@@162)))))))))
(let (($generated@@164 true))
(let (($generated@@165  (and (=> (= (ControlFlow 0 16) (- 0 18)) (> $generated@@144 0)) (=> (> $generated@@144 0) (and (=> (= (ControlFlow 0 16) (- 0 17)) (> $generated@@145 0)) (=> (> $generated@@145 0) (=> (and (and (and ($generated@@21 $generated@@147) ($generated@@149 $generated@@147)) (forall (($generated@@166 Int) ) (!  (and ($generated@@51 $generated@@166 $generated@@144 $generated@@145) (=> ($generated@@50 $generated@@166 $generated@@144 $generated@@145) (forall (($generated@@167 Int) ) (! ($generated@@51 $generated@@167 $generated@@144 $generated@@145)
 :pattern ( ($generated@@50 $generated@@167 $generated@@144 $generated@@145))
))))
 :pattern ( ($generated@@50 $generated@@166 $generated@@144 $generated@@145))
))) (and (exists (($generated@@168 Int) ) (!  (and ($generated@@50 $generated@@168 $generated@@144 $generated@@145) (forall (($generated@@169 Int) ) (!  (=> ($generated@@50 $generated@@169 $generated@@144 $generated@@145) (<= $generated@@169 $generated@@168))
 :pattern ( ($generated@@50 $generated@@169 $generated@@144 $generated@@145))
)))
 :pattern ( ($generated@@50 $generated@@168 $generated@@144 $generated@@145))
)) (= $generated@@150 $generated@@147))) (and (=> (= (ControlFlow 0 16) 13) $generated@@163) (=> (= (ControlFlow 0 16) 2) $generated@@164)))))))))
(let (($generated@@170 true))
(let (($generated@@171  (=> (= $generated@@151 ($generated@@71 $generated@@152 $generated@@150 $generated@@1 false)) (=> (and (> $generated@@144 0) (> $generated@@145 0)) (and (=> (= (ControlFlow 0 19) 1) $generated@@170) (=> (= (ControlFlow 0 19) 16) $generated@@165))))))
(let (($generated@@172  (=> (and (and ($generated@@21 $generated@@150) ($generated@@149 $generated@@150)) (and (= 5 $generated@@19) (= (ControlFlow 0 20) 19))) $generated@@171)))
$generated@@172))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
