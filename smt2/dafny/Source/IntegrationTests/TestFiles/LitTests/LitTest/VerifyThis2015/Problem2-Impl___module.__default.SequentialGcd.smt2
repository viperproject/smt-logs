(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Gcd (Int Int) Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.__default.Gcd#canCall| (Int Int) Bool)
(declare-fun |$let#0$canCall| (Int Int) Bool)
(declare-fun |$let#0_d| (Int Int) Int)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun _module.__default.Divides (Bool Int Int) Bool)
(declare-fun |_module.__default.Divides#canCall| (Int Int) Bool)
(declare-fun _module.__default.MulTriple (Int Int Int) Bool)
(declare-fun |_module.__default.MulTriple#canCall| (Int Int Int) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun _module.__default.DividesBoth (Int Int Int) Bool)
(declare-fun |_module.__default.DividesBoth#canCall| (Int Int Int) Bool)
(declare-fun reveal__module._default.Divides () Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc)
)
(assert (= (Tag TInt) TagInt))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap T@U) (|a#0| Int) (|b#0| Int) ) (!  (=> (or (|_module.__default.Gcd#canCall| |a#0| |b#0|) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (> |a#0| 0) (> |b#0| 0))))) (and (|$let#0$canCall| |a#0| |b#0|) (= (_module.__default.Gcd |a#0| |b#0|) (let ((|d#0| (|$let#0_d| |a#0| |b#0|)))
|d#0|))))
 :pattern ( (_module.__default.Gcd |a#0| |b#0|) ($IsGoodHeap $Heap))
))))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|d#0@@0| Int) (|a#0@@0| Int) ) (!  (=> (or (|_module.__default.Divides#canCall| (LitInt |d#0@@0|) (LitInt |a#0@@0|)) (and (< 1 $FunctionContextHeight) (U_2_bool (Lit boolType (bool_2_U  (and (> |d#0@@0| 0) (> |a#0@@0| 0))))))) (and (forall ((|n#1| Int) ) (!  (=> (> |n#1| 0) (|_module.__default.MulTriple#canCall| |n#1| (LitInt |d#0@@0|) (LitInt |a#0@@0|)))
 :pattern ( (_module.__default.MulTriple |n#1| |d#0@@0| |a#0@@0|))
)) (= (_module.__default.Divides true (LitInt |d#0@@0|) (LitInt |a#0@@0|)) (exists ((|n#1@@0| Int) ) (!  (and (> |n#1@@0| 0) (_module.__default.MulTriple |n#1@@0| (LitInt |d#0@@0|) (LitInt |a#0@@0|)))
 :pattern ( (_module.__default.MulTriple |n#1@@0| |d#0@@0| |a#0@@0|))
)))))
 :weight 3
 :pattern ( (_module.__default.Divides true (LitInt |d#0@@0|) (LitInt |a#0@@0|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|d#0@@1| Int) (|a#0@@1| Int) ) (!  (=> (or (|_module.__default.Divides#canCall| |d#0@@1| |a#0@@1|) (and (< 1 $FunctionContextHeight) (and (> |d#0@@1| 0) (> |a#0@@1| 0)))) (and (forall ((|n#0| Int) ) (!  (=> (> |n#0| 0) (|_module.__default.MulTriple#canCall| |n#0| |d#0@@1| |a#0@@1|))
 :pattern ( (_module.__default.MulTriple |n#0| |d#0@@1| |a#0@@1|))
)) (= (_module.__default.Divides true |d#0@@1| |a#0@@1|) (exists ((|n#0@@0| Int) ) (!  (and (> |n#0@@0| 0) (_module.__default.MulTriple |n#0@@0| |d#0@@1| |a#0@@1|))
 :pattern ( (_module.__default.MulTriple |n#0@@0| |d#0@@1| |a#0@@1|))
)))))
 :pattern ( (_module.__default.Divides true |d#0@@1| |a#0@@1|))
))))
(assert (forall ((h@@0 T@U) (k@@0 T@U) (v T@U) (t T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@0 k@@0) (=> ($IsAlloc T@@1 v t h@@0) ($IsAlloc T@@1 v t k@@0)))
 :pattern ( ($HeapSucc h@@0 k@@0) ($IsAlloc T@@1 v t h@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|d#0@@2| Int) (|a#0@@2| Int) (|b#0@@0| Int) ) (!  (=> (or (|_module.__default.DividesBoth#canCall| (LitInt |d#0@@2|) (LitInt |a#0@@2|) (LitInt |b#0@@0|)) (and (< 2 $FunctionContextHeight) (U_2_bool (Lit boolType (bool_2_U  (and (> |a#0@@2| 0) (> |b#0@@0| 0))))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (> |d#0@@2| 0)))) (and (|_module.__default.Divides#canCall| (LitInt |d#0@@2|) (LitInt |a#0@@2|)) (=> (_module.__default.Divides reveal__module._default.Divides (LitInt |d#0@@2|) (LitInt |a#0@@2|)) (|_module.__default.Divides#canCall| (LitInt |d#0@@2|) (LitInt |b#0@@0|))))) (= (_module.__default.DividesBoth (LitInt |d#0@@2|) (LitInt |a#0@@2|) (LitInt |b#0@@0|))  (and (and (> |d#0@@2| 0) (_module.__default.Divides reveal__module._default.Divides (LitInt |d#0@@2|) (LitInt |a#0@@2|))) (_module.__default.Divides reveal__module._default.Divides (LitInt |d#0@@2|) (LitInt |b#0@@0|))))))
 :weight 3
 :pattern ( (_module.__default.DividesBoth (LitInt |d#0@@2|) (LitInt |a#0@@2|) (LitInt |b#0@@0|)))
))))
(assert (forall ((a Int) (b Int) ) (!  (=> (|$let#0$canCall| a b) (and (_module.__default.DividesBoth (|$let#0_d| a b) a b) (forall ((|m#0| Int) ) (!  (=> (_module.__default.DividesBoth |m#0| a b) (<= |m#0| (|$let#0_d| a b)))
 :pattern ( (_module.__default.DividesBoth |m#0| a b))
))))
 :pattern ( (|$let#0_d| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|d#0@@3| Int) (|a#0@@3| Int) (|b#0@@1| Int) ) (!  (=> (or (|_module.__default.DividesBoth#canCall| |d#0@@3| |a#0@@3| |b#0@@1|) (and (< 2 $FunctionContextHeight) (and (> |a#0@@3| 0) (> |b#0@@1| 0)))) (and (=> (> |d#0@@3| 0) (and (|_module.__default.Divides#canCall| |d#0@@3| |a#0@@3|) (=> (_module.__default.Divides reveal__module._default.Divides |d#0@@3| |a#0@@3|) (|_module.__default.Divides#canCall| |d#0@@3| |b#0@@1|)))) (= (_module.__default.DividesBoth |d#0@@3| |a#0@@3| |b#0@@1|)  (and (and (> |d#0@@3| 0) (_module.__default.Divides reveal__module._default.Divides |d#0@@3| |a#0@@3|)) (_module.__default.Divides reveal__module._default.Divides |d#0@@3| |b#0@@1|)))))
 :pattern ( (_module.__default.DividesBoth |d#0@@3| |a#0@@3| |b#0@@1|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0@@1| Int) (|d#0@@4| Int) (|a#0@@4| Int) ) (!  (=> (or (|_module.__default.MulTriple#canCall| (LitInt |n#0@@1|) (LitInt |d#0@@4|) (LitInt |a#0@@4|)) (and (< 0 $FunctionContextHeight) (U_2_bool (Lit boolType (bool_2_U  (and (> |n#0@@1| 0) (> |d#0@@4| 0))))))) (= (_module.__default.MulTriple (LitInt |n#0@@1|) (LitInt |d#0@@4|) (LitInt |a#0@@4|)) (= (LitInt (Mul (LitInt |n#0@@1|) (LitInt |d#0@@4|))) (LitInt |a#0@@4|))))
 :weight 3
 :pattern ( (_module.__default.MulTriple (LitInt |n#0@@1|) (LitInt |d#0@@4|) (LitInt |a#0@@4|)))
))))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@8)) (Lit BoxType ($Box T@@3 x@@8)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@8)))
)))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|a#0@@5| Int) (|b#0@@2| Int) ) (!  (=> (or (|_module.__default.Gcd#canCall| (LitInt |a#0@@5|) (LitInt |b#0@@2|)) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (U_2_bool (Lit boolType (bool_2_U  (and (> |a#0@@5| 0) (> |b#0@@2| 0)))))))) (and (|$let#0$canCall| (LitInt |a#0@@5|) (LitInt |b#0@@2|)) (= (_module.__default.Gcd (LitInt |a#0@@5|) (LitInt |b#0@@2|)) (let ((|d#1| (|$let#0_d| (LitInt |a#0@@5|) (LitInt |b#0@@2|))))
|d#1|))))
 :weight 3
 :pattern ( (_module.__default.Gcd (LitInt |a#0@@5|) (LitInt |b#0@@2|)) ($IsGoodHeap $Heap@@0))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0@@2| Int) (|d#0@@5| Int) (|a#0@@6| Int) ) (!  (=> (or (|_module.__default.MulTriple#canCall| |n#0@@2| |d#0@@5| |a#0@@6|) (and (< 0 $FunctionContextHeight) (and (> |n#0@@2| 0) (> |d#0@@5| 0)))) (= (_module.__default.MulTriple |n#0@@2| |d#0@@5| |a#0@@6|) (= (Mul |n#0@@2| |d#0@@5|) |a#0@@6|)))
 :pattern ( (_module.__default.MulTriple |n#0@@2| |d#0@@5| |a#0@@6|))
))))
(assert (forall ((h@@1 T@U) (v@@0 T@U) ) (! ($IsAlloc intType v@@0 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@0 TInt h@@1))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |a#0@0| () Int)
(declare-fun |b#0@0| () Int)
(declare-fun |A#0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |B#0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |a#0@2| () Int)
(declare-fun |b#0@2| () Int)
(declare-fun |b#0@1| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |a#0@1| () Int)
(declare-fun |##a#0_0_0_0@0| () Int)
(declare-fun |a##0_0_0_0@0| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun |##b#0_0_0_1@0| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun |##a#0_0_1_1@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |gcd#0@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun null () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 56) (let ((anon4_correct  (=> (and (and (< 0 |a#0@0|) (< 0 |b#0@0|)) (and ($IsAlloc intType (int_2_U |A#0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |B#0|) TInt $Heap@0))) (and (=> (= (ControlFlow 0 43) (- 0 46)) (> |A#0| 0)) (and (=> (= (ControlFlow 0 43) (- 0 45)) (> |B#0| 0)) (=> (|_module.__default.Gcd#canCall| |A#0| |B#0|) (=> (and ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |b#0@0|) TInt $Heap@0)) (and (=> (= (ControlFlow 0 43) (- 0 44)) (> |a#0@0| 0)) (=> (= (ControlFlow 0 43) (- 0 42)) (> |b#0@0| 0))))))))))
(let ((anon20_Else_correct  (=> (and (<= |a#0@0| 0) (= (ControlFlow 0 48) 43)) anon4_correct)))
(let ((anon20_Then_correct  (=> (and (< 0 |a#0@0|) (= (ControlFlow 0 47) 43)) anon4_correct)))
(let ((anon19_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 49) 47) anon20_Then_correct) (=> (= (ControlFlow 0 49) 48) anon20_Else_correct)))))
(let ((anon16_correct  (and (=> (= (ControlFlow 0 30) (- 0 34)) (or (<= 0 |$decr$loop#00@1|) (= (+ |a#0@2| |b#0@2|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (+ |a#0@2| |b#0@2|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 30) (- 0 33)) (< (+ |a#0@2| |b#0@2|) |$decr$loop#00@1|)) (=> (< (+ |a#0@2| |b#0@2|) |$decr$loop#00@1|) (=> (=> (< 0 |a#0@2|) (=> (< 0 |b#0@2|) (and (|_module.__default.Gcd#canCall| |A#0| |B#0|) (|_module.__default.Gcd#canCall| |a#0@2| |b#0@2|)))) (and (=> (= (ControlFlow 0 30) (- 0 32)) (=> |$w$loop#0@0| (< 0 |a#0@2|))) (=> (=> |$w$loop#0@0| (< 0 |a#0@2|)) (and (=> (= (ControlFlow 0 30) (- 0 31)) (=> |$w$loop#0@0| (< 0 |b#0@2|))) (=> (=> |$w$loop#0@0| (< 0 |b#0@2|)) (=> (= (ControlFlow 0 30) (- 0 29)) (=> |$w$loop#0@0| (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |a#0@2| |b#0@2|)))))))))))))))
(let ((anon27_Else_correct  (=> (= (_module.__default.Gcd |a#0@0| |b#0@0|) (_module.__default.Gcd |a#0@0| (- |b#0@0| |a#0@0|))) (=> (and (and (= |b#0@1| (- |b#0@0| |a#0@0|)) (= |a#0@2| |a#0@0|)) (and (= |b#0@2| |b#0@1|) (= (ControlFlow 0 38) 30))) anon16_correct))))
(let ((anon22_Then_correct  (=> (> |a#0@0| |b#0@0|) (and (=> (= (ControlFlow 0 35) (- 0 37)) (> |a#0@0| |b#0@0|)) (=> (> |a#0@0| |b#0@0|) (and (=> (= (ControlFlow 0 35) (- 0 36)) (> |b#0@0| 0)) (=> (> |b#0@0| 0) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (and (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|) (|_module.__default.Gcd#canCall| (- |a#0@0| |b#0@0|) |b#0@0|)) (and (= (_module.__default.Gcd |a#0@0| |b#0@0|) (_module.__default.Gcd (- |a#0@0| |b#0@0|) |b#0@0|)) (= $Heap@0 $Heap@1))) (and (and (= |a#0@1| (- |a#0@0| |b#0@0|)) (= |a#0@2| |a#0@1|)) (and (= |b#0@2| |b#0@0|) (= (ControlFlow 0 35) 30)))) anon16_correct)))))))))
(let ((anon27_Then_correct  (=> (and (and (and (= |##a#0_0_0_0@0| (- |b#0@0| |a#0@0|)) ($IsAlloc intType (int_2_U |##a#0_0_0_0@0|) TInt $Heap@0)) (and ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@0) (> |##a#0_0_0_0@0| 0))) (and (and (> |a#0@0| 0) (|_module.__default.Gcd#canCall| (- |b#0@0| |a#0@0|) |a#0@0|)) (and (|_module.__default.Gcd#canCall| (- |b#0@0| |a#0@0|) |a#0@0|) (= |a##0_0_0_0@0| (- |b#0@0| |a#0@0|))))) (and (=> (= (ControlFlow 0 24) (- 0 28)) (> |a##0_0_0_0@0| 0)) (=> (> |a##0_0_0_0@0| 0) (and (=> (= (ControlFlow 0 24) (- 0 27)) (> |a#0@0| 0)) (=> (> |a#0@0| 0) (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (and (|_module.__default.Gcd#canCall| |a##0_0_0_0@0| |a#0@0|) (|_module.__default.Gcd#canCall| |a#0@0| |a##0_0_0_0@0|)) (= (_module.__default.Gcd |a##0_0_0_0@0| |a#0@0|) (_module.__default.Gcd |a#0@0| |a##0_0_0_0@0|))) (and (and (= $Heap@0 $Heap@5) ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@5)) (and (= |##b#0_0_0_1@0| (- |b#0@0| |a#0@0|)) ($IsAlloc intType (int_2_U |##b#0_0_0_1@0|) TInt $Heap@5)))) (and (=> (= (ControlFlow 0 24) (- 0 26)) (> |a#0@0| 0)) (and (=> (= (ControlFlow 0 24) (- 0 25)) (> |##b#0_0_0_1@0| 0)) (=> (|_module.__default.Gcd#canCall| |a#0@0| (- |b#0@0| |a#0@0|)) (=> (and (|_module.__default.Gcd#canCall| |a#0@0| (- |b#0@0| |a#0@0|)) (= (ControlFlow 0 24) (- 0 23))) (= (_module.__default.Gcd (- |b#0@0| |a#0@0|) |a#0@0|) (_module.__default.Gcd |a#0@0| (- |b#0@0| |a#0@0|))))))))))))))))
(let ((anon26_Then_correct  (=> (and ($IsAlloc intType (int_2_U |b#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@0)) (=> (and (and (> |b#0@0| 0) (> |a#0@0| 0)) (and (|_module.__default.Gcd#canCall| |b#0@0| |a#0@0|) (|_module.__default.Gcd#canCall| |b#0@0| |a#0@0|))) (and (=> (= (ControlFlow 0 18) (- 0 22)) (> |b#0@0| |a#0@0|)) (=> (> |b#0@0| |a#0@0|) (and (=> (= (ControlFlow 0 18) (- 0 21)) (> |a#0@0| 0)) (=> (> |a#0@0| 0) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (and (|_module.__default.Gcd#canCall| |b#0@0| |a#0@0|) (|_module.__default.Gcd#canCall| (- |b#0@0| |a#0@0|) |a#0@0|)) (= (_module.__default.Gcd |b#0@0| |a#0@0|) (_module.__default.Gcd (- |b#0@0| |a#0@0|) |a#0@0|))) (and (and (= $Heap@0 $Heap@4) (= |##a#0_0_1_1@0| (- |b#0@0| |a#0@0|))) (and ($IsAlloc intType (int_2_U |##a#0_0_1_1@0|) TInt $Heap@4) ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@4)))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (> |##a#0_0_1_1@0| 0)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (> |a#0@0| 0)) (=> (|_module.__default.Gcd#canCall| (- |b#0@0| |a#0@0|) |a#0@0|) (=> (and (|_module.__default.Gcd#canCall| (- |b#0@0| |a#0@0|) |a#0@0|) (= (ControlFlow 0 18) (- 0 17))) (= (_module.__default.Gcd |b#0@0| |a#0@0|) (_module.__default.Gcd (- |b#0@0| |a#0@0|) |a#0@0|))))))))))))))))
(let ((anon25_Then_correct  (=> (and ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |b#0@0|) TInt $Heap@0)) (=> (and (and (> |a#0@0| 0) (> |b#0@0| 0)) (and (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|) (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|))) (and (=> (= (ControlFlow 0 12) (- 0 16)) (> |a#0@0| 0)) (=> (> |a#0@0| 0) (and (=> (= (ControlFlow 0 12) (- 0 15)) (> |b#0@0| 0)) (=> (> |b#0@0| 0) (=> (and (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|) (|_module.__default.Gcd#canCall| |b#0@0| |a#0@0|))) (and (and (= (_module.__default.Gcd |a#0@0| |b#0@0|) (_module.__default.Gcd |b#0@0| |a#0@0|)) (= $Heap@0 $Heap@3)) (and ($IsAlloc intType (int_2_U |b#0@0|) TInt $Heap@3) ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@3)))) (and (=> (= (ControlFlow 0 12) (- 0 14)) (> |b#0@0| 0)) (and (=> (= (ControlFlow 0 12) (- 0 13)) (> |a#0@0| 0)) (=> (|_module.__default.Gcd#canCall| |b#0@0| |a#0@0|) (=> (and (|_module.__default.Gcd#canCall| |b#0@0| |a#0@0|) (= (ControlFlow 0 12) (- 0 11))) (= (_module.__default.Gcd |a#0@0| |b#0@0|) (_module.__default.Gcd |b#0@0| |a#0@0|)))))))))))))))
(let ((anon24_Then_correct  (=> (and ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |b#0@0|) TInt $Heap@0)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (> |a#0@0| 0)) (=> (= (ControlFlow 0 9) (- 0 8)) (> |b#0@0| 0))))))
(let ((anon23_Then_correct  (=> (> |b#0@0| |a#0@0|) (and (and (and (and (=> (= (ControlFlow 0 39) 9) anon24_Then_correct) (=> (= (ControlFlow 0 39) 12) anon25_Then_correct)) (=> (= (ControlFlow 0 39) 18) anon26_Then_correct)) (=> (= (ControlFlow 0 39) 24) anon27_Then_correct)) (=> (= (ControlFlow 0 39) 38) anon27_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (= |gcd#0@0| (_module.__default.Gcd |A#0| |B#0|)))))
(let ((anon17_correct  (and (=> (= (ControlFlow 0 4) (- 0 5)) (> |a#0@0| 0)) (=> (> |a#0@0| 0) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (|_module.__default.Gcd#canCall| |a#0@0| |a#0@0|)) (and (and (= (_module.__default.Gcd |a#0@0| |a#0@0|) |a#0@0|) (= $Heap@0 $Heap@2)) (and (= |gcd#0@0| |a#0@0|) (= (ControlFlow 0 4) 3)))) GeneratedUnifiedExit_correct)))))
(let ((anon23_Else_correct  (=> (and (and (>= |b#0@0| |a#0@0|) (>= |a#0@0| |b#0@0|)) (= (ControlFlow 0 7) 4)) anon17_correct)))
(let ((anon21_Else_correct  (=> (and (U_2_bool (Lit boolType (bool_2_U true))) (= |$decr$loop#00@1| (+ |a#0@0| |b#0@0|))) (and (and (=> (= (ControlFlow 0 40) 35) anon22_Then_correct) (=> (= (ControlFlow 0 40) 39) anon23_Then_correct)) (=> (= (ControlFlow 0 40) 7) anon23_Else_correct)))))
(let ((anon21_Then_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 6) 4)) anon17_correct)))
(let ((anon19_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 41) 6) anon21_Then_correct) (=> (= (ControlFlow 0 41) 40) anon21_Else_correct)))))
(let ((anon18_LoopBody_correct  (and (=> (= (ControlFlow 0 50) 49) anon19_Then_correct) (=> (= (ControlFlow 0 50) 41) anon19_Else_correct))))
(let ((anon18_LoopDone_correct true))
(let ((anon18_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (and (not false) (<= 1 |A#0|)) (<= 1 |B#0|)) (<= 2 |$decr_init$loop#00@0|)) (and (and (and (=> |$w$loop#0@0| (< 0 |a#0@0|)) (=> |$w$loop#0@0| (< 0 |b#0@0|))) (and (=> |$w$loop#0@0| (and (|_module.__default.Gcd#canCall| |A#0| |B#0|) (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|))) (=> |$w$loop#0@0| (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |a#0@0| |b#0@0|))))) (and (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
)) ($HeapSucc $Heap@@1 $Heap@0)) (and (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) $f@@0))
)) (<= (+ |a#0@0| |b#0@0|) |$decr_init$loop#00@0|))))) (and (=> (= (ControlFlow 0 51) 1) anon18_LoopDone_correct) (=> (= (ControlFlow 0 51) 50) anon18_LoopBody_correct))))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (= |$decr_init$loop#00@0| (+ |A#0| |B#0|))) (and (=> (= (ControlFlow 0 52) (- 0 55)) (=> |$w$loop#0@0| (< 0 |A#0|))) (=> (=> |$w$loop#0@0| (< 0 |A#0|)) (and (=> (= (ControlFlow 0 52) (- 0 54)) (=> |$w$loop#0@0| (< 0 |B#0|))) (=> (=> |$w$loop#0@0| (< 0 |B#0|)) (and (=> (= (ControlFlow 0 52) (- 0 53)) (=> |$w$loop#0@0| (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |A#0| |B#0|)))) (=> (=> |$w$loop#0@0| (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |A#0| |B#0|))) (=> (= (ControlFlow 0 52) 51) anon18_LoopHead_correct))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and (= 7 $FunctionContextHeight) (> |A#0| 0)) (and (> |B#0| 0) (= (ControlFlow 0 56) 52))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
