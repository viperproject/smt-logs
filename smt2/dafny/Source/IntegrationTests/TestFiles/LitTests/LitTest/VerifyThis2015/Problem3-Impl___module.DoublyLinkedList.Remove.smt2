(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._module.DoublyLinkedList () T@U)
(declare-fun Tagclass._module.Node () T@U)
(declare-fun Tagclass._module.DoublyLinkedList? () T@U)
(declare-fun Tagclass._module.Node? () T@U)
(declare-fun class._module.Node? () T@U)
(declare-fun class._module.DoublyLinkedList? () T@U)
(declare-fun tytagFamily$DoublyLinkedList () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun field$Nodes () T@U)
(declare-fun field$L () T@U)
(declare-fun field$R () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Node? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.DoublyLinkedList? () T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.Node () T@U)
(declare-fun Tclass._module.DoublyLinkedList () T@U)
(declare-fun _module.DoublyLinkedList.Nodes () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.Node.L () T@U)
(declare-fun _module.Node.R () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun _module.DoublyLinkedList.Valid (T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |_module.DoublyLinkedList.Valid#canCall| (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U Int Int T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc allocName Tagclass._module.DoublyLinkedList Tagclass._module.Node Tagclass._module.DoublyLinkedList? Tagclass._module.Node? class._module.Node? class._module.DoublyLinkedList? tytagFamily$DoublyLinkedList tytagFamily$Node field$Nodes field$L field$R)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((x@@2 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@2))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@2))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Node?)  (or (= $o null) (= (dtype $o) Tclass._module.Node?)))
 :pattern ( ($Is refType $o Tclass._module.Node?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass._module.DoublyLinkedList?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass._module.DoublyLinkedList?)))
 :pattern ( ($Is refType $o@@0 Tclass._module.DoublyLinkedList?))
)))
(assert (forall ((s T@U) (t T@U) (n Int) ) (!  (=> (= n (|Seq#Length| s)) (and (= (|Seq#Take| (|Seq#Append| s t) n) s) (= (|Seq#Drop| (|Seq#Append| s t) n) t)))
 :pattern ( (|Seq#Take| (|Seq#Append| s t) n))
 :pattern ( (|Seq#Drop| (|Seq#Append| s t) n))
)))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Node $h) ($IsAlloc refType |c#0| Tclass._module.Node? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Node? $h))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.DoublyLinkedList $h@@0) ($IsAlloc refType |c#0@@0| Tclass._module.DoublyLinkedList? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.DoublyLinkedList $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.DoublyLinkedList? $h@@0))
)))
(assert (= (FDim _module.DoublyLinkedList.Nodes) 0))
(assert (= (FieldOfDecl class._module.DoublyLinkedList? field$Nodes) _module.DoublyLinkedList.Nodes))
(assert ($IsGhostField _module.DoublyLinkedList.Nodes))
(assert (= (FDim _module.Node.L) 0))
(assert (= (FieldOfDecl class._module.Node? field$L) _module.Node.L))
(assert  (not ($IsGhostField _module.Node.L)))
(assert (= (FDim _module.Node.R) 0))
(assert (= (FieldOfDecl class._module.Node? field$R) _module.Node.R))
(assert  (not ($IsGhostField _module.Node.R)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@1 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.Node? $h@@1)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.Node? $h@@1))
)))
(assert (forall (($o@@2 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._module.DoublyLinkedList? $h@@2)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._module.DoublyLinkedList? $h@@2))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) ) (!  (=> (= n@@0 0) (= (|Seq#Drop| s@@0 n@@0) s@@0))
 :pattern ( (|Seq#Drop| s@@0 n@@0))
)))
(assert (forall ((x@@3 Int) ) (! (= (LitInt x@@3) x@@3)
 :pattern ( (LitInt x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((s@@1 T@U) (n@@1 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@1)) (< j (|Seq#Length| s@@1))) (= (|Seq#Index| (|Seq#Take| s@@1 n@@1) j) (|Seq#Index| s@@1 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@1 n@@1) j))
 :pattern ( (|Seq#Index| s@@1 j) (|Seq#Take| s@@1 n@@1))
)))
(assert (forall ((s@@2 T@U) (n@@2 Int) ) (!  (=> (and (<= 0 n@@2) (<= n@@2 (|Seq#Length| s@@2))) (= (|Seq#Length| (|Seq#Drop| s@@2 n@@2)) (- (|Seq#Length| s@@2) n@@2)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@2 n@@2)))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0))) (= (|Seq#Index| s0 j@@0) (|Seq#Index| s1 j@@0)))
 :pattern ( (|Seq#Index| s0 j@@0))
 :pattern ( (|Seq#Index| s1 j@@0))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v T@U) (t@@0 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t@@0 h@@0) ($IsAlloc T@@1 v t@@0 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t@@0 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@1 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@1 h@@1) ($IsAllocBox bx t@@1 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@1 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@2 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@2 h@@2) ($IsAlloc T@@2 v@@0 t@@2 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@2 h@@2))
)))
(assert (forall ((s@@3 T@U) (n@@3 Int) (j@@1 Int) ) (!  (=> (and (and (<= 0 n@@3) (<= 0 j@@1)) (< j@@1 (- (|Seq#Length| s@@3) n@@3))) (= (|Seq#Index| (|Seq#Drop| s@@3 n@@3) j@@1) (|Seq#Index| s@@3 (+ j@@1 n@@3))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@3 n@@3) j@@1))
)))
(assert (forall (($h@@3 T@U) ($o@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) Tclass._module.Node?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.Node.L)) Tclass._module.Node?))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@3) _module.Node.L)))
)))
(assert (forall (($h@@4 T@U) ($o@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) Tclass._module.Node?))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.Node.R)) Tclass._module.Node?))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@4) _module.Node.R)))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (= (Ctor SeqType) 7))
(assert (forall (($h0 T@U) ($h1 T@U) (this T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this null)) (not true)) ($Is refType this Tclass._module.DoublyLinkedList))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@5 T@U) ($f T@U) )  (=> (and (or (not (= $o@@5 null)) (not true)) (or (= $o@@5 this) (exists (($i Int) )  (and (and (<= 0 $i) (< $i (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 this) _module.DoublyLinkedList.Nodes))))) (= (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 this) _module.DoublyLinkedList.Nodes)) $i) ($Box refType $o@@5)))))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@5) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@5) $f)))) (= (_module.DoublyLinkedList.Valid $h0 this) (_module.DoublyLinkedList.Valid $h1 this))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.DoublyLinkedList.Valid $h1 this))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._module.DoublyLinkedList) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) Tclass._module.DoublyLinkedList)))
 :pattern ( ($IsBox bx@@0 Tclass._module.DoublyLinkedList))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Node) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) Tclass._module.Node)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Node))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.DoublyLinkedList?) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.DoublyLinkedList?)))
 :pattern ( ($IsBox bx@@2 Tclass._module.DoublyLinkedList?))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.Node?) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.Node?)))
 :pattern ( ($IsBox bx@@3 Tclass._module.Node?))
)))
(assert (forall ((|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| Tclass._module.Node)  (and ($Is refType |c#0@@1| Tclass._module.Node?) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| Tclass._module.Node))
 :pattern ( ($Is refType |c#0@@1| Tclass._module.Node?))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.DoublyLinkedList)  (and ($Is refType |c#0@@2| Tclass._module.DoublyLinkedList?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.DoublyLinkedList))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.DoublyLinkedList?))
)))
(assert (forall (($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) Tclass._module.Node?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@6) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@6) _module.Node.L)) Tclass._module.Node? $h@@5))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@6) _module.Node.L)))
)))
(assert (forall (($h@@6 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) Tclass._module.Node?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@7) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@7) _module.Node.R)) Tclass._module.Node? $h@@6))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@7) _module.Node.R)))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@6 T@U) ) (! (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@6)  (or (|Seq#Contains| s0@@1 x@@6) (|Seq#Contains| s1@@1 x@@6)))
 :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@6))
)))
(assert (forall ((s@@4 T@U) (n@@4 Int) (x@@7 T@U) ) (! (= (|Seq#Contains| (|Seq#Take| s@@4 n@@4) x@@7) (exists ((i Int) ) (!  (and (and (and (<= 0 i) (< i n@@4)) (< i (|Seq#Length| s@@4))) (= (|Seq#Index| s@@4 i) x@@7))
 :pattern ( (|Seq#Index| s@@4 i))
)))
 :pattern ( (|Seq#Contains| (|Seq#Take| s@@4 n@@4) x@@7))
)))
(assert (forall ((s@@5 T@U) (x@@8 T@U) ) (! (= (|Seq#Contains| s@@5 x@@8) (exists ((i@@0 Int) ) (!  (and (and (<= 0 i@@0) (< i@@0 (|Seq#Length| s@@5))) (= (|Seq#Index| s@@5 i@@0) x@@8))
 :pattern ( (|Seq#Index| s@@5 i@@0))
)))
 :pattern ( (|Seq#Contains| s@@5 x@@8))
)))
(assert (forall (($h@@7 T@U) ($o@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) Tclass._module.DoublyLinkedList?))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@8) _module.DoublyLinkedList.Nodes)) (TSeq Tclass._module.Node)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@8) _module.DoublyLinkedList.Nodes)))
)))
(assert (forall (($h@@8 T@U) ($o@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) Tclass._module.DoublyLinkedList?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@9) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@9) _module.DoublyLinkedList.Nodes)) (TSeq Tclass._module.Node) $h@@8))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@9) _module.DoublyLinkedList.Nodes)))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Seq#Equal| a b) (= a b))
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((s@@6 T@U) (n@@5 Int) ) (!  (=> (and (<= 0 n@@5) (<= n@@5 (|Seq#Length| s@@6))) (= (|Seq#Length| (|Seq#Take| s@@6 n@@5)) n@@5))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@6 n@@5)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TInt) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) TInt)))
 :pattern ( ($IsBox bx@@4 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@3 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@3) ($Is T@@3 v@@1 t@@3))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@3))
)))
(assert (forall ((s@@7 T@U) ) (! (<= 0 (|Seq#Length| s@@7))
 :pattern ( (|Seq#Length| s@@7))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@2))) ($IsAllocBox (|Seq#Index| v@@2 i@@1) t0@@0 h@@3))
 :pattern ( (|Seq#Index| v@@2 i@@1))
)))
 :pattern ( ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSeq (TSeq t@@4)) t@@4)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSeq t@@5)) TagSeq)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((x@@9 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@9)) x@@9)
 :pattern ( ($Box T@@4 x@@9))
)))
(assert (forall ((s@@8 T@U) (n@@6 Int) (x@@10 T@U) ) (! (= (|Seq#Contains| (|Seq#Drop| s@@8 n@@6) x@@10) (exists ((i@@2 Int) ) (!  (and (and (and (<= 0 n@@6) (<= n@@6 i@@2)) (< i@@2 (|Seq#Length| s@@8))) (= (|Seq#Index| s@@8 i@@2) x@@10))
 :pattern ( (|Seq#Index| s@@8 i@@2))
)))
 :pattern ( (|Seq#Contains| (|Seq#Drop| s@@8 n@@6) x@@10))
)))
(assert (forall ((bx@@5 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@5 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@5)) bx@@5) ($Is SeqType ($Unbox SeqType bx@@5) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@5 (TSeq t@@6)))
)))
(assert (forall ((h@@4 T@U) (r T@U) (f T@U) (x@@11 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@11))) ($HeapSucc h@@4 (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@11))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@11)))
)))
(assert (= (Tag Tclass._module.DoublyLinkedList) Tagclass._module.DoublyLinkedList))
(assert (= (TagFamily Tclass._module.DoublyLinkedList) tytagFamily$DoublyLinkedList))
(assert (= (Tag Tclass._module.Node) Tagclass._module.Node))
(assert (= (TagFamily Tclass._module.Node) tytagFamily$Node))
(assert (= (Tag Tclass._module.DoublyLinkedList?) Tagclass._module.DoublyLinkedList?))
(assert (= (TagFamily Tclass._module.DoublyLinkedList?) tytagFamily$DoublyLinkedList))
(assert (= (Tag Tclass._module.Node?) Tagclass._module.Node?))
(assert (= (TagFamily Tclass._module.Node?) tytagFamily$Node))
(assert (forall ((s@@9 T@U) (n@@7 Int) (k@@2 Int) ) (!  (=> (and (and (<= 0 n@@7) (<= n@@7 k@@2)) (< k@@2 (|Seq#Length| s@@9))) (= (|Seq#Index| (|Seq#Drop| s@@9 n@@7) (- k@@2 n@@7)) (|Seq#Index| s@@9 k@@2)))
 :weight 25
 :pattern ( (|Seq#Index| s@@9 k@@2) (|Seq#Drop| s@@9 n@@7))
)))
(assert (forall ((s@@10 T@U) (m@@1 Int) (n@@8 Int) ) (!  (=> (and (and (<= 0 m@@1) (<= 0 n@@8)) (<= (+ m@@1 n@@8) (|Seq#Length| s@@10))) (= (|Seq#Drop| (|Seq#Drop| s@@10 m@@1) n@@8) (|Seq#Drop| s@@10 (+ m@@1 n@@8))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@10 m@@1) n@@8))
)))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (n@@9 Int) ) (!  (and (=> (< n@@9 (|Seq#Length| s0@@2)) (= (|Seq#Index| (|Seq#Append| s0@@2 s1@@2) n@@9) (|Seq#Index| s0@@2 n@@9))) (=> (<= (|Seq#Length| s0@@2) n@@9) (= (|Seq#Index| (|Seq#Append| s0@@2 s1@@2) n@@9) (|Seq#Index| s1@@2 (- n@@9 (|Seq#Length| s0@@2))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@2 s1@@2) n@@9))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (this@@0 T@U) ) (!  (=> (or (|_module.DoublyLinkedList.Valid#canCall| $Heap this@@0) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 Tclass._module.DoublyLinkedList) ($IsAlloc refType this@@0 Tclass._module.DoublyLinkedList $Heap)))))) (= (_module.DoublyLinkedList.Valid $Heap this@@0)  (and (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes))) 0) (and (and (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) (LitInt 0)))) _module.Node.L)) null) (forall ((|i#0| Int) ) (!  (=> (and (<= (LitInt 1) |i#0|) (< |i#0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes))))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) |i#0|))) _module.Node.L)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) (- |i#0| 1)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) |i#0|))) _module.Node.L)))
))) (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) |i#1|))) _module.Node.R)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) (+ |i#1| 1)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) |i#1|))) _module.Node.R)))
))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes))) 1)))) _module.Node.R)) null))) (forall ((|i#2| Int) (|j#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#2|) (< |i#2| |j#0|)) (< |j#0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes))))) (or (not (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) |i#2|)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) |j#0|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) |j#0|)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this@@0) _module.DoublyLinkedList.Nodes)) |i#2|)))
)))))
 :pattern ( (_module.DoublyLinkedList.Valid $Heap this@@0) ($IsGoodHeap $Heap))
))))
(assert (forall ((x@@12 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@12))) (Lit BoxType ($Box intType (int_2_U x@@12))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@12))))
)))
(assert (forall ((x@@13 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@13)) (Lit BoxType ($Box T@@5 x@@13)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@13)))
)))
(assert (forall ((s@@11 T@U) ) (!  (=> (= (|Seq#Length| s@@11) 0) (= s@@11 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@11))
)))
(assert (forall ((s@@12 T@U) (n@@10 Int) ) (!  (=> (= n@@10 0) (= (|Seq#Take| s@@12 n@@10) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@12 n@@10))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| Int) (|l#5| Int) (|l#6| T@U) ($o@@10 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6|) $o@@10 $f@@0))  (=> (and (or (not (= $o@@10 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@10) |l#2|)))) (or (= $o@@10 |l#3|) (exists (($i@@0 Int) )  (and (and (<= |l#4| $i@@0) (< $i@@0 |l#5|)) (= (|Seq#Index| |l#6| $i@@0) ($Box refType $o@@10)))))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6|) $o@@10 $f@@0))
)))
(assert (forall ((h@@5 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@5)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@5))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@4 (TSeq t0@@2)) (forall ((i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| v@@4))) ($IsBox (|Seq#Index| v@@4 i@@3) t0@@2))
 :pattern ( (|Seq#Index| v@@4 i@@3))
)))
 :pattern ( ($Is SeqType v@@4 (TSeq t0@@2)))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@3 () T@U)
(declare-fun this@@1 () T@U)
(declare-fun |k#0@1| () Int)
(declare-fun $Heap@@0 () T@U)
(declare-fun |x#0| () T@U)
(declare-fun |k#0@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$rhs#0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |$rhs#1@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |$rhs#2@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |k#1@0| () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 35) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 3) (- 0 13)) (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 0) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (LitInt 0)))) _module.Node.L)) null))))) (=> (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 0) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (LitInt 0)))) _module.Node.L)) null)))) (and (=> (= (ControlFlow 0 3) (- 0 12)) (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 0) (forall ((|i#9| Int) ) (!  (=> (and (<= (LitInt 1) |i#9|) (< |i#9| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#9|))) _module.Node.L)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (- |i#9| 1)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#9|))) _module.Node.L)))
)))))) (=> (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 0) (forall ((|i#9@@0| Int) ) (!  (=> (and (<= (LitInt 1) |i#9@@0|) (< |i#9@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#9@@0|))) _module.Node.L)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (- |i#9@@0| 1)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#9@@0|))) _module.Node.L)))
))))) (and (=> (= (ControlFlow 0 3) (- 0 11)) (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 0) (forall ((|i#10| Int) ) (!  (=> (and (<= (LitInt 0) |i#10|) (< |i#10| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#10|))) _module.Node.R)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (+ |i#10| 1)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#10|))) _module.Node.R)))
)))))) (=> (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 0) (forall ((|i#10@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#10@@0|) (< |i#10@@0| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#10@@0|))) _module.Node.R)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (+ |i#10@@0| 1)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#10@@0|))) _module.Node.R)))
))))) (and (=> (= (ControlFlow 0 3) (- 0 10)) (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 0) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 1)))) _module.Node.R)) null))))) (=> (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 0) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))) 1)))) _module.Node.R)) null)))) (and (=> (= (ControlFlow 0 3) (- 0 9)) (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (forall ((|i#11| Int) (|j#3| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#11|) (< |i#11| |j#3|)) (< |j#3| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))))) (or (not (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#11|)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |j#3|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |j#3|)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#11|)))
))))) (=> (=> (|_module.DoublyLinkedList.Valid#canCall| $Heap@3 this@@1) (or (_module.DoublyLinkedList.Valid $Heap@3 this@@1) (forall ((|i#11@@0| Int) (|j#3@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#11@@0|) (< |i#11@@0| |j#3@@0|)) (< |j#3@@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes))))) (or (not (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#11@@0|)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |j#3@@0|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |j#3@@0|)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) |i#11@@0|)))
)))) (and (=> (= (ControlFlow 0 3) (- 0 8)) (<= (LitInt 0) |k#0@1|)) (=> (<= (LitInt 0) |k#0@1|) (and (=> (= (ControlFlow 0 3) (- 0 7)) (< |k#0@1| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))))) (=> (< |k#0@1| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)))) (and (=> (= (ControlFlow 0 3) (- 0 6)) (= |x#0| ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |k#0@1|)))) (=> (= |x#0| ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |k#0@1|))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (|Seq#Append| (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |k#0@1|) (|Seq#Drop| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (+ |k#0@1| 1))))) (=> (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this@@1) _module.DoublyLinkedList.Nodes)) (|Seq#Append| (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |k#0@1|) (|Seq#Drop| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (+ |k#0@1| 1)))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |x#0|) _module.Node.L)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.L)))) (=> (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |x#0|) _module.Node.L)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.L))) (=> (= (ControlFlow 0 3) (- 0 2)) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 |x#0|) _module.Node.R)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.R))))))))))))))))))))))))))
(let ((anon5_correct  (and (=> (= (ControlFlow 0 14) (- 0 27)) (or (and ($Is intType (int_2_U (- (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1) 1)) TInt) (and (and (<= (LitInt 1) (- (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1) 1)) (< (- (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1) 1) (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (- (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1) 1))) |x#0|))) (or (and ($Is intType (int_2_U (LitInt 1)) TInt) (and (and (<= (LitInt 1) (LitInt 1)) (< 1 (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (LitInt 1))) |x#0|))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (<= (LitInt 1) (LitInt 0)) (< 0 (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (LitInt 0))) |x#0|))) (exists ((|$as#k0#0| Int) )  (and (and (<= (LitInt 1) |$as#k0#0|) (< |$as#k0#0| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |$as#k0#0|)) |x#0|))))))) (=> (or (and ($Is intType (int_2_U (- (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1) 1)) TInt) (and (and (<= (LitInt 1) (- (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1) 1)) (< (- (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1) 1) (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (- (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1) 1))) |x#0|))) (or (and ($Is intType (int_2_U (LitInt 1)) TInt) (and (and (<= (LitInt 1) (LitInt 1)) (< 1 (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (LitInt 1))) |x#0|))) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (and (<= (LitInt 1) (LitInt 0)) (< 0 (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (LitInt 0))) |x#0|))) (exists ((|$as#k0#0@@0| Int) )  (and (and (<= (LitInt 1) |$as#k0#0@@0|) (< |$as#k0#0@@0| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |$as#k0#0@@0|)) |x#0|)))))) (=> (and (and (<= (LitInt 1) |k#0@0|) (< |k#0@0| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |k#0@0|)) |x#0|)) (and (=> (= (ControlFlow 0 14) (- 0 26)) (or (not (= |x#0| null)) (not true))) (=> (or (not (= |x#0| null)) (not true)) (and (=> (= (ControlFlow 0 14) (- 0 25)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.R)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.R)) null)) (not true)) (and (=> (= (ControlFlow 0 14) (- 0 24)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.R)) _module.Node.L))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.R)) _module.Node.L)) (and (=> (= (ControlFlow 0 14) (- 0 23)) (or (not (= |x#0| null)) (not true))) (=> (or (not (= |x#0| null)) (not true)) (=> (= |$rhs#0@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.L))) (=> (and (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.R)) (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 |x#0|) _module.Node.R))) _module.Node.L ($Box refType |$rhs#0@0|)))) ($IsGoodHeap $Heap@0)) (and (=> (= (ControlFlow 0 14) (- 0 22)) (or (not (= |x#0| null)) (not true))) (=> (or (not (= |x#0| null)) (not true)) (and (=> (= (ControlFlow 0 14) (- 0 21)) (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |x#0|) _module.Node.L)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |x#0|) _module.Node.L)) null)) (not true)) (and (=> (= (ControlFlow 0 14) (- 0 20)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |x#0|) _module.Node.L)) _module.Node.R))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |x#0|) _module.Node.L)) _module.Node.R)) (and (=> (= (ControlFlow 0 14) (- 0 19)) (or (not (= |x#0| null)) (not true))) (=> (or (not (= |x#0| null)) (not true)) (=> (= |$rhs#1@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |x#0|) _module.Node.R))) (=> (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |x#0|) _module.Node.L)) (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |x#0|) _module.Node.L))) _module.Node.R ($Box refType |$rhs#1@0|)))) ($IsGoodHeap $Heap@1)) (and (=> (= (ControlFlow 0 14) (- 0 18)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.DoublyLinkedList.Nodes))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this@@1 _module.DoublyLinkedList.Nodes)) (and (=> (= (ControlFlow 0 14) (- 0 17)) (and (<= 0 |k#0@0|) (<= |k#0@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@1) _module.DoublyLinkedList.Nodes)))))) (=> (and (<= 0 |k#0@0|) (<= |k#0@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@1) _module.DoublyLinkedList.Nodes))))) (and (=> (= (ControlFlow 0 14) (- 0 16)) (and (<= 0 (+ |k#0@0| 1)) (<= (+ |k#0@0| 1) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@1) _module.DoublyLinkedList.Nodes)))))) (=> (and (<= 0 (+ |k#0@0| 1)) (<= (+ |k#0@0| 1) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@1) _module.DoublyLinkedList.Nodes))))) (=> (= |$rhs#2@0| (|Seq#Append| (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@1) _module.DoublyLinkedList.Nodes)) |k#0@0|) (|Seq#Drop| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@1) _module.DoublyLinkedList.Nodes)) (+ |k#0@0| 1)))) (=> (and (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 this@@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this@@1) _module.DoublyLinkedList.Nodes ($Box SeqType |$rhs#2@0|)))) ($IsGoodHeap $Heap@2)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this@@1) _module.DoublyLinkedList.Nodes))) 0)) (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this@@1) _module.DoublyLinkedList.Nodes))) 0) (=> (= |k#0@1| |k#0@0|) (=> (and (= $Heap@3 $Heap@2) (= (ControlFlow 0 14) 3)) GeneratedUnifiedExit_correct)))))))))))))))))))))))))))))))))))))
(let ((anon9_Else_correct  (=> (and (not (and (<= (LitInt 1) |k#1@0|) (< |k#1@0| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1)))) (= (ControlFlow 0 30) 14)) anon5_correct)))
(let ((anon9_Then_correct  (=> (and (<= (LitInt 1) |k#1@0|) (< |k#1@0| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (and (=> (= (ControlFlow 0 28) (- 0 29)) (and (<= 0 |k#1@0|) (< |k#1@0| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)))))) (=> (= (ControlFlow 0 28) 14) anon5_correct)))))
(let ((anon8_Else_correct  (=> (< |k#1@0| (LitInt 1)) (and (=> (= (ControlFlow 0 32) 28) anon9_Then_correct) (=> (= (ControlFlow 0 32) 30) anon9_Else_correct)))))
(let ((anon8_Then_correct  (=> (<= (LitInt 1) |k#1@0|) (and (=> (= (ControlFlow 0 31) 28) anon9_Then_correct) (=> (= (ControlFlow 0 31) 30) anon9_Else_correct)))))
(let ((anon7_Then_correct  (and (=> (= (ControlFlow 0 33) 31) anon8_Then_correct) (=> (= (ControlFlow 0 33) 32) anon8_Else_correct))))
(let ((anon7_Else_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@0 alloc this@@1 0 (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)))) (and (=> (= (ControlFlow 0 34) 33) anon7_Then_correct) (=> (= (ControlFlow 0 34) 1) anon7_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 Tclass._module.DoublyLinkedList) ($IsAlloc refType this@@1 Tclass._module.DoublyLinkedList $Heap@@0)))) (=> (and (and (and (and ($Is refType |x#0| Tclass._module.Node) ($IsAlloc refType |x#0| Tclass._module.Node $Heap@@0)) (= 1 $FunctionContextHeight)) (and (|_module.DoublyLinkedList.Valid#canCall| $Heap@@0 this@@1) (and (_module.DoublyLinkedList.Valid $Heap@@0 this@@1) (and (=> (> (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 0) (and (and (and (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (LitInt 0)))) _module.Node.L)) null) (forall ((|i#6| Int) ) (!  (=> (and (<= (LitInt 1) |i#6|) (< |i#6| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |i#6|))) _module.Node.L)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (- |i#6| 1)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |i#6|))) _module.Node.L)))
))) (forall ((|i#7| Int) ) (!  (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |i#7|))) _module.Node.R)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (+ |i#7| 1)))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |i#7|))) _module.Node.R)))
))) (= ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1)))) _module.Node.R)) null))) (forall ((|i#8| Int) (|j#2| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8|) (< |i#8| |j#2|)) (< |j#2| (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))))) (or (not (= ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |i#8|)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |j#2|)))) (not true)))
 :pattern ( ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |j#2|)) ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) |i#8|)))
)))))) (and (and (|Seq#Contains| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) ($Box refType |x#0|)) (or (not (= |x#0| ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (LitInt 0))))) (not true))) (and (or (not (= |x#0| ($Unbox refType (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes)) (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 this@@1) _module.DoublyLinkedList.Nodes))) 1))))) (not true)) (= (ControlFlow 0 35) 34)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
