(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 (Bool Int Int) Bool)
(declare-fun $generated@@32 (Int Int) Bool)
(declare-fun $generated@@33 (Int Int Int) Bool)
(declare-fun $generated@@34 (Int Int Int) Bool)
(declare-fun $generated@@43 (Int Int Int) Bool)
(declare-fun $generated@@44 (Int Int Int) Bool)
(declare-fun $generated@@45 () Bool)
(declare-fun $generated@@52 (Int Int) Int)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(declare-fun $generated@@125 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@130 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert (forall (($generated@@22 Int) ) (! (= ($generated@@21 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@22))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 $generated@@24) $generated@@24)
 :pattern ( ($generated@@23 $generated@@25 $generated@@24))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 ($generated@@26 $generated@@29 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@26 $generated@@29 $generated@@28))
)))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@35 Int) ($generated@@36 Int) ) (!  (=> (or ($generated@@32 ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)) (and (< 1 $generated@@30) ($generated@@9 ($generated@@23 $generated@@5 ($generated@@8  (and (> $generated@@35 0) (> $generated@@36 0))))))) (and (forall (($generated@@37 Int) ) (!  (=> (> $generated@@37 0) ($generated@@34 $generated@@37 ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)))
 :pattern ( ($generated@@33 $generated@@37 $generated@@35 $generated@@36))
)) (= ($generated@@31 true ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)) (exists (($generated@@38 Int) ) (!  (and (> $generated@@38 0) ($generated@@33 $generated@@38 ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)))
 :pattern ( ($generated@@33 $generated@@38 $generated@@35 $generated@@36))
)))))
 :weight 3
 :pattern ( ($generated@@31 true ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)))
))))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@39 Int) ($generated@@40 Int) ) (!  (=> (or ($generated@@32 $generated@@39 $generated@@40) (and (< 1 $generated@@30) (and (> $generated@@39 0) (> $generated@@40 0)))) (and (forall (($generated@@41 Int) ) (!  (=> (> $generated@@41 0) ($generated@@34 $generated@@41 $generated@@39 $generated@@40))
 :pattern ( ($generated@@33 $generated@@41 $generated@@39 $generated@@40))
)) (= ($generated@@31 true $generated@@39 $generated@@40) (exists (($generated@@42 Int) ) (!  (and (> $generated@@42 0) ($generated@@33 $generated@@42 $generated@@39 $generated@@40))
 :pattern ( ($generated@@33 $generated@@42 $generated@@39 $generated@@40))
)))))
 :pattern ( ($generated@@31 true $generated@@39 $generated@@40))
))))
(assert  (=> (<= 2 $generated@@30) (forall (($generated@@46 Int) ($generated@@47 Int) ($generated@@48 Int) ) (!  (=> (or ($generated@@44 ($generated@@21 $generated@@46) ($generated@@21 $generated@@47) ($generated@@21 $generated@@48)) (and (< 2 $generated@@30) ($generated@@9 ($generated@@23 $generated@@5 ($generated@@8  (and (> $generated@@47 0) (> $generated@@48 0))))))) (and (=> ($generated@@9 ($generated@@23 $generated@@5 ($generated@@8 (> $generated@@46 0)))) (and ($generated@@32 ($generated@@21 $generated@@46) ($generated@@21 $generated@@47)) (=> ($generated@@31 $generated@@45 ($generated@@21 $generated@@46) ($generated@@21 $generated@@47)) ($generated@@32 ($generated@@21 $generated@@46) ($generated@@21 $generated@@48))))) (= ($generated@@43 ($generated@@21 $generated@@46) ($generated@@21 $generated@@47) ($generated@@21 $generated@@48))  (and (and (> $generated@@46 0) ($generated@@31 $generated@@45 ($generated@@21 $generated@@46) ($generated@@21 $generated@@47))) ($generated@@31 $generated@@45 ($generated@@21 $generated@@46) ($generated@@21 $generated@@48))))))
 :weight 3
 :pattern ( ($generated@@43 ($generated@@21 $generated@@46) ($generated@@21 $generated@@47) ($generated@@21 $generated@@48)))
))))
(assert  (=> (<= 2 $generated@@30) (forall (($generated@@49 Int) ($generated@@50 Int) ($generated@@51 Int) ) (!  (=> (or ($generated@@44 $generated@@49 $generated@@50 $generated@@51) (and (< 2 $generated@@30) (and (> $generated@@50 0) (> $generated@@51 0)))) (and (=> (> $generated@@49 0) (and ($generated@@32 $generated@@49 $generated@@50) (=> ($generated@@31 $generated@@45 $generated@@49 $generated@@50) ($generated@@32 $generated@@49 $generated@@51)))) (= ($generated@@43 $generated@@49 $generated@@50 $generated@@51)  (and (and (> $generated@@49 0) ($generated@@31 $generated@@45 $generated@@49 $generated@@50)) ($generated@@31 $generated@@45 $generated@@49 $generated@@51)))))
 :pattern ( ($generated@@43 $generated@@49 $generated@@50 $generated@@51))
))))
(assert  (=> (<= 0 $generated@@30) (forall (($generated@@53 Int) ($generated@@54 Int) ($generated@@55 Int) ) (!  (=> (or ($generated@@34 ($generated@@21 $generated@@53) ($generated@@21 $generated@@54) ($generated@@21 $generated@@55)) (and (< 0 $generated@@30) ($generated@@9 ($generated@@23 $generated@@5 ($generated@@8  (and (> $generated@@53 0) (> $generated@@54 0))))))) (= ($generated@@33 ($generated@@21 $generated@@53) ($generated@@21 $generated@@54) ($generated@@21 $generated@@55)) (= ($generated@@21 ($generated@@52 ($generated@@21 $generated@@53) ($generated@@21 $generated@@54))) ($generated@@21 $generated@@55))))
 :weight 3
 :pattern ( ($generated@@33 ($generated@@21 $generated@@53) ($generated@@21 $generated@@54) ($generated@@21 $generated@@55)))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@26 $generated@@57 ($generated@@27 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@27 $generated@@57 $generated@@56))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@58 $generated@@69 $generated@@70 $generated@@71 ($generated@@65 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@74 $generated@@75) $generated@@72)
 :weight 0
)) (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@81 $generated@@83) (= ($generated@@58 $generated@@76 $generated@@77 $generated@@78 ($generated@@65 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@58 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@58 $generated@@85 $generated@@86 $generated@@87 ($generated@@65 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@58 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)))) (= ($generated@@4 $generated@@59) 3)) (= ($generated@@4 $generated@@60) 4)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@62 $generated@@94 $generated@@95 ($generated@@66 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@96) $generated@@98) $generated@@96)
 :weight 0
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@103 $generated@@104) (= ($generated@@62 $generated@@99 $generated@@100 ($generated@@66 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@104) ($generated@@62 $generated@@99 $generated@@100 $generated@@102 $generated@@104)))
 :weight 0
))) (= ($generated@@4 $generated@@63) 5)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (= ($generated@@4 ($generated@@64 $generated@@105 $generated@@106)) 6))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@67 ($generated@@64 $generated@@107 $generated@@108)) $generated@@107)
 :pattern ( ($generated@@64 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@68 ($generated@@64 $generated@@109 $generated@@110)) $generated@@110)
 :pattern ( ($generated@@64 $generated@@109 $generated@@110))
))))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 Bool) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@9 ($generated@@58 $generated@@59 $generated@@60 $generated@@5 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))  (=> (and (or (not (= $generated@@115 $generated@@111)) (not true)) ($generated@@9 ($generated@@26 $generated@@5 ($generated@@62 $generated@@60 $generated@@63 ($generated@@62 $generated@@59 ($generated@@64 $generated@@60 $generated@@63) $generated@@112 $generated@@115) $generated@@113)))) $generated@@114))
 :pattern ( ($generated@@58 $generated@@59 $generated@@60 $generated@@5 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))
)))
(assert (forall (($generated@@117 Int) ($generated@@118 Int) ) (! (= ($generated@@52 $generated@@117 $generated@@118) (* $generated@@117 $generated@@118))
 :pattern ( ($generated@@52 $generated@@117 $generated@@118))
)))
(assert (forall (($generated@@119 Int) ) (! (= ($generated@@27 $generated@@6 ($generated@@10 ($generated@@21 $generated@@119))) ($generated@@23 $generated@@63 ($generated@@27 $generated@@6 ($generated@@10 $generated@@119))))
 :pattern ( ($generated@@27 $generated@@6 ($generated@@10 ($generated@@21 $generated@@119))))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@T) ) (! (= ($generated@@27 $generated@@121 ($generated@@23 $generated@@121 $generated@@120)) ($generated@@23 $generated@@63 ($generated@@27 $generated@@121 $generated@@120)))
 :pattern ( ($generated@@27 $generated@@121 ($generated@@23 $generated@@121 $generated@@120)))
)))
(assert  (=> (<= 0 $generated@@30) (forall (($generated@@122 Int) ($generated@@123 Int) ($generated@@124 Int) ) (!  (=> (or ($generated@@34 $generated@@122 $generated@@123 $generated@@124) (and (< 0 $generated@@30) (and (> $generated@@122 0) (> $generated@@123 0)))) (= ($generated@@33 $generated@@122 $generated@@123 $generated@@124) (= ($generated@@52 $generated@@122 $generated@@123) $generated@@124)))
 :pattern ( ($generated@@33 $generated@@122 $generated@@123 $generated@@124))
))))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (! ($generated@@125 $generated@@6 $generated@@127 $generated@@0 $generated@@126)
 :pattern ( ($generated@@125 $generated@@6 $generated@@127 $generated@@0 $generated@@126))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (! ($generated@@125 $generated@@5 $generated@@129 $generated $generated@@128)
 :pattern ( ($generated@@125 $generated@@5 $generated@@129 $generated $generated@@128))
)))
(assert (forall (($generated@@131 T@U) ) (! ($generated@@130 $generated@@6 $generated@@131 $generated@@0)
 :pattern ( ($generated@@130 $generated@@6 $generated@@131 $generated@@0))
)))
(assert (forall (($generated@@132 T@U) ) (! ($generated@@130 $generated@@5 $generated@@132 $generated)
 :pattern ( ($generated@@130 $generated@@5 $generated@@132 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 (T@U) Bool)
(declare-fun $generated@@140 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@141 true))
(let (($generated@@142  (=> (and (not (and (> $generated@@133 0) ($generated@@31 $generated@@45 $generated@@133 $generated@@134))) (= (ControlFlow 0 6) 2)) $generated@@141)))
(let (($generated@@143  (=> (and (and (> $generated@@133 0) ($generated@@31 $generated@@45 $generated@@133 $generated@@134)) (and ($generated@@125 $generated@@6 ($generated@@10 $generated@@133) $generated@@0 $generated@@135) ($generated@@125 $generated@@6 ($generated@@10 $generated@@136) $generated@@0 $generated@@135))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (> $generated@@133 0)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (> $generated@@136 0)) (=> (and (and (> $generated@@133 0) (> $generated@@136 0)) (and ($generated@@32 $generated@@133 $generated@@136) (= (ControlFlow 0 3) 2))) $generated@@141))))))
(let (($generated@@144  (=> (>= 0 $generated@@133) (and (=> (= (ControlFlow 0 10) 3) $generated@@143) (=> (= (ControlFlow 0 10) 6) $generated@@142)))))
(let (($generated@@145  (=> (> $generated@@133 0) (=> (and ($generated@@125 $generated@@6 ($generated@@10 $generated@@133) $generated@@0 $generated@@135) ($generated@@125 $generated@@6 ($generated@@10 $generated@@134) $generated@@0 $generated@@135)) (and (=> (= (ControlFlow 0 7) (- 0 9)) (> $generated@@133 0)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (> $generated@@134 0)) (=> (and (and (> $generated@@133 0) (> $generated@@134 0)) ($generated@@32 $generated@@133 $generated@@134)) (and (=> (= (ControlFlow 0 7) 3) $generated@@143) (=> (= (ControlFlow 0 7) 6) $generated@@142)))))))))
(let (($generated@@146 true))
(let (($generated@@147  (=> (= $generated@@137 ($generated@@61 $generated@@138 $generated@@135 $generated@@3 false)) (=> (and (> $generated@@134 0) (> $generated@@136 0)) (and (and (=> (= (ControlFlow 0 11) 1) $generated@@146) (=> (= (ControlFlow 0 11) 7) $generated@@145)) (=> (= (ControlFlow 0 11) 10) $generated@@144))))))
(let (($generated@@148  (=> (and (and ($generated@@139 $generated@@135) ($generated@@140 $generated@@135)) (and (= 2 $generated@@30) (= (ControlFlow 0 12) 11))) $generated@@147)))
$generated@@148)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
