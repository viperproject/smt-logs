(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (Bool Int Int) Bool)
(declare-fun $generated@@30 (Int Int) Bool)
(declare-fun $generated@@31 (Int Int Int) Bool)
(declare-fun $generated@@32 (Int Int Int) Bool)
(declare-fun $generated@@41 (Int Int) Int)
(declare-fun $generated@@47 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 () T@T)
(declare-fun $generated@@50 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@51 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@57 (T@T) T@T)
(declare-fun $generated@@114 (T@T T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@33 Int) ($generated@@34 Int) ) (!  (=> (or ($generated@@30 ($generated@@19 $generated@@33) ($generated@@19 $generated@@34)) (and (< 1 $generated@@28) ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6  (and (> $generated@@33 0) (> $generated@@34 0))))))) (and (forall (($generated@@35 Int) ) (!  (=> (> $generated@@35 0) ($generated@@32 $generated@@35 ($generated@@19 $generated@@33) ($generated@@19 $generated@@34)))
 :pattern ( ($generated@@31 $generated@@35 $generated@@33 $generated@@34))
)) (= ($generated@@29 true ($generated@@19 $generated@@33) ($generated@@19 $generated@@34)) (exists (($generated@@36 Int) ) (!  (and (> $generated@@36 0) ($generated@@31 $generated@@36 ($generated@@19 $generated@@33) ($generated@@19 $generated@@34)))
 :pattern ( ($generated@@31 $generated@@36 $generated@@33 $generated@@34))
)))))
 :weight 3
 :pattern ( ($generated@@29 true ($generated@@19 $generated@@33) ($generated@@19 $generated@@34)))
))))
(assert  (=> (<= 1 $generated@@28) (forall (($generated@@37 Int) ($generated@@38 Int) ) (!  (=> (or ($generated@@30 $generated@@37 $generated@@38) (and (< 1 $generated@@28) (and (> $generated@@37 0) (> $generated@@38 0)))) (and (forall (($generated@@39 Int) ) (!  (=> (> $generated@@39 0) ($generated@@32 $generated@@39 $generated@@37 $generated@@38))
 :pattern ( ($generated@@31 $generated@@39 $generated@@37 $generated@@38))
)) (= ($generated@@29 true $generated@@37 $generated@@38) (exists (($generated@@40 Int) ) (!  (and (> $generated@@40 0) ($generated@@31 $generated@@40 $generated@@37 $generated@@38))
 :pattern ( ($generated@@31 $generated@@40 $generated@@37 $generated@@38))
)))))
 :pattern ( ($generated@@29 true $generated@@37 $generated@@38))
))))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@42 Int) ($generated@@43 Int) ($generated@@44 Int) ) (!  (=> (or ($generated@@32 ($generated@@19 $generated@@42) ($generated@@19 $generated@@43) ($generated@@19 $generated@@44)) (and (< 0 $generated@@28) ($generated@@7 ($generated@@21 $generated@@3 ($generated@@6  (and (> $generated@@42 0) (> $generated@@43 0))))))) (= ($generated@@31 ($generated@@19 $generated@@42) ($generated@@19 $generated@@43) ($generated@@19 $generated@@44)) (= ($generated@@19 ($generated@@41 ($generated@@19 $generated@@42) ($generated@@19 $generated@@43))) ($generated@@19 $generated@@44))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@19 $generated@@42) ($generated@@19 $generated@@43) ($generated@@19 $generated@@44)))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@24 $generated@@46 ($generated@@25 $generated@@46 $generated@@45)) $generated@@45)
 :pattern ( ($generated@@25 $generated@@46 $generated@@45))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@47 $generated@@58 $generated@@59 $generated@@60 ($generated@@54 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@63 $generated@@64) $generated@@61)
 :weight 0
)) (and (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@T) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (!  (or (= $generated@@70 $generated@@72) (= ($generated@@47 $generated@@65 $generated@@66 $generated@@67 ($generated@@54 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@70 $generated@@71 $generated@@68) $generated@@72 $generated@@73) ($generated@@47 $generated@@65 $generated@@66 $generated@@67 $generated@@69 $generated@@72 $generated@@73)))
 :weight 0
)) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@T) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ) (!  (or (= $generated@@80 $generated@@82) (= ($generated@@47 $generated@@74 $generated@@75 $generated@@76 ($generated@@54 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@79 $generated@@80 $generated@@77) $generated@@81 $generated@@82) ($generated@@47 $generated@@74 $generated@@75 $generated@@76 $generated@@78 $generated@@81 $generated@@82)))
 :weight 0
)))) (= ($generated@@2 $generated@@48) 3)) (= ($generated@@2 $generated@@49) 4)) (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@51 $generated@@83 $generated@@84 ($generated@@55 $generated@@83 $generated@@84 $generated@@86 $generated@@87 $generated@@85) $generated@@87) $generated@@85)
 :weight 0
))) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@92 $generated@@93) (= ($generated@@51 $generated@@88 $generated@@89 ($generated@@55 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@93) ($generated@@51 $generated@@88 $generated@@89 $generated@@91 $generated@@93)))
 :weight 0
))) (= ($generated@@2 $generated@@52) 5)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ) (= ($generated@@2 ($generated@@53 $generated@@94 $generated@@95)) 6))) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (! (= ($generated@@56 ($generated@@53 $generated@@96 $generated@@97)) $generated@@96)
 :pattern ( ($generated@@53 $generated@@96 $generated@@97))
))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (! (= ($generated@@57 ($generated@@53 $generated@@98 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@53 $generated@@98 $generated@@99))
))))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 Bool) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@7 ($generated@@47 $generated@@48 $generated@@49 $generated@@3 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))  (=> (and (or (not (= $generated@@104 $generated@@100)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@51 $generated@@49 $generated@@52 ($generated@@51 $generated@@48 ($generated@@53 $generated@@49 $generated@@52) $generated@@101 $generated@@104) $generated@@102)))) $generated@@103))
 :pattern ( ($generated@@47 $generated@@48 $generated@@49 $generated@@3 ($generated@@50 $generated@@100 $generated@@101 $generated@@102 $generated@@103) $generated@@104 $generated@@105))
)))
(assert (forall (($generated@@106 Int) ($generated@@107 Int) ) (! (= ($generated@@41 $generated@@106 $generated@@107) (* $generated@@106 $generated@@107))
 :pattern ( ($generated@@41 $generated@@106 $generated@@107))
)))
(assert (forall (($generated@@108 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@108))) ($generated@@21 $generated@@52 ($generated@@25 $generated@@4 ($generated@@8 $generated@@108))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@108))))
)))
(assert (forall (($generated@@109 T@U) ($generated@@110 T@T) ) (! (= ($generated@@25 $generated@@110 ($generated@@21 $generated@@110 $generated@@109)) ($generated@@21 $generated@@52 ($generated@@25 $generated@@110 $generated@@109)))
 :pattern ( ($generated@@25 $generated@@110 ($generated@@21 $generated@@110 $generated@@109)))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@111 Int) ($generated@@112 Int) ($generated@@113 Int) ) (!  (=> (or ($generated@@32 $generated@@111 $generated@@112 $generated@@113) (and (< 0 $generated@@28) (and (> $generated@@111 0) (> $generated@@112 0)))) (= ($generated@@31 $generated@@111 $generated@@112 $generated@@113) (= ($generated@@41 $generated@@111 $generated@@112) $generated@@113)))
 :pattern ( ($generated@@31 $generated@@111 $generated@@112 $generated@@113))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (! ($generated@@114 $generated@@4 $generated@@116 $generated $generated@@115)
 :pattern ( ($generated@@114 $generated@@4 $generated@@116 $generated $generated@@115))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@117 () T@U)
(declare-fun $generated@@118 () T@U)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 (T@U) Bool)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 (T@U) Bool)
(declare-fun $generated@@123 () Bool)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () Int)
(declare-fun $generated@@126 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@127  (=> (= $generated@@117 ($generated@@50 $generated@@118 $generated@@119 $generated@@1 false)) (=> (and (and (and ($generated@@120 $generated@@121) ($generated@@122 $generated@@121)) (= $generated@@119 $generated@@121)) (and (and $generated@@123 ($generated@@114 $generated@@4 ($generated@@8 $generated@@124) $generated $generated@@121)) (and ($generated@@114 $generated@@4 ($generated@@8 $generated@@125) $generated $generated@@121) ($generated@@114 $generated@@4 ($generated@@8 $generated@@126) $generated $generated@@121)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (> $generated@@124 0)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (> $generated@@125 0)) (=> (and ($generated@@32 $generated@@124 $generated@@125 $generated@@126) ($generated@@32 $generated@@124 $generated@@125 $generated@@126)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> ($generated@@32 $generated@@124 $generated@@125 $generated@@126) (or ($generated@@31 $generated@@124 $generated@@125 $generated@@126) (= ($generated@@41 $generated@@124 $generated@@125) $generated@@126)))) (=> (and ($generated@@31 $generated@@124 $generated@@125 $generated@@126) (= (ControlFlow 0 2) (- 0 1))) ($generated@@29 $generated@@123 $generated@@125 $generated@@126))))))))))
(let (($generated@@128  (=> (and (and (and ($generated@@120 $generated@@119) ($generated@@122 $generated@@119)) (= 2 $generated@@28)) (and (and (> $generated@@124 0) (> $generated@@125 0)) (and (= ($generated@@41 $generated@@124 $generated@@125) $generated@@126) (= (ControlFlow 0 6) 2)))) $generated@@127)))
$generated@@128)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
