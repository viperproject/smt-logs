(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (Int) Int)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@17 (T@T T@U) T@U)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (Bool Int Int) Bool)
(declare-fun $generated@@26 (Int Int) Bool)
(declare-fun $generated@@27 (Int Int Int) Bool)
(declare-fun $generated@@28 (Int Int Int) Bool)
(declare-fun $generated@@37 (Int Int Int) Bool)
(declare-fun $generated@@38 (Int Int Int) Bool)
(declare-fun $generated@@39 () Bool)
(declare-fun $generated@@46 (Int Int) Int)
(declare-fun $generated@@52 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@53 () T@T)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@56 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@57 () T@T)
(declare-fun $generated@@58 (T@T T@T) T@T)
(declare-fun $generated@@59 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@60 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 (T@T) T@T)
(declare-fun $generated@@62 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 Int) ) (! (= ($generated $generated@@16) $generated@@16)
 :pattern ( ($generated $generated@@16))
)))
(assert (forall (($generated@@18 T@U) ($generated@@19 T@T) ) (! (= ($generated@@17 $generated@@19 $generated@@18) $generated@@18)
 :pattern ( ($generated@@17 $generated@@19 $generated@@18))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 ($generated@@20 $generated@@23 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@20 $generated@@23 $generated@@22))
)))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@29 Int) ($generated@@30 Int) ) (!  (=> (or ($generated@@26 ($generated $generated@@29) ($generated $generated@@30)) (and (< 1 $generated@@24) ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4  (and (> $generated@@29 0) (> $generated@@30 0))))))) (and (forall (($generated@@31 Int) ) (!  (=> (> $generated@@31 0) ($generated@@28 $generated@@31 ($generated $generated@@29) ($generated $generated@@30)))
 :pattern ( ($generated@@27 $generated@@31 $generated@@29 $generated@@30))
)) (= ($generated@@25 true ($generated $generated@@29) ($generated $generated@@30)) (exists (($generated@@32 Int) ) (!  (and (> $generated@@32 0) ($generated@@27 $generated@@32 ($generated $generated@@29) ($generated $generated@@30)))
 :pattern ( ($generated@@27 $generated@@32 $generated@@29 $generated@@30))
)))))
 :weight 3
 :pattern ( ($generated@@25 true ($generated $generated@@29) ($generated $generated@@30)))
))))
(assert  (=> (<= 1 $generated@@24) (forall (($generated@@33 Int) ($generated@@34 Int) ) (!  (=> (or ($generated@@26 $generated@@33 $generated@@34) (and (< 1 $generated@@24) (and (> $generated@@33 0) (> $generated@@34 0)))) (and (forall (($generated@@35 Int) ) (!  (=> (> $generated@@35 0) ($generated@@28 $generated@@35 $generated@@33 $generated@@34))
 :pattern ( ($generated@@27 $generated@@35 $generated@@33 $generated@@34))
)) (= ($generated@@25 true $generated@@33 $generated@@34) (exists (($generated@@36 Int) ) (!  (and (> $generated@@36 0) ($generated@@27 $generated@@36 $generated@@33 $generated@@34))
 :pattern ( ($generated@@27 $generated@@36 $generated@@33 $generated@@34))
)))))
 :pattern ( ($generated@@25 true $generated@@33 $generated@@34))
))))
(assert  (=> (<= 2 $generated@@24) (forall (($generated@@40 Int) ($generated@@41 Int) ($generated@@42 Int) ) (!  (=> (or ($generated@@38 ($generated $generated@@40) ($generated $generated@@41) ($generated $generated@@42)) (and (< 2 $generated@@24) ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4  (and (> $generated@@41 0) (> $generated@@42 0))))))) (and (=> ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4 (> $generated@@40 0)))) (and ($generated@@26 ($generated $generated@@40) ($generated $generated@@41)) (=> ($generated@@25 $generated@@39 ($generated $generated@@40) ($generated $generated@@41)) ($generated@@26 ($generated $generated@@40) ($generated $generated@@42))))) (= ($generated@@37 ($generated $generated@@40) ($generated $generated@@41) ($generated $generated@@42))  (and (and (> $generated@@40 0) ($generated@@25 $generated@@39 ($generated $generated@@40) ($generated $generated@@41))) ($generated@@25 $generated@@39 ($generated $generated@@40) ($generated $generated@@42))))))
 :weight 3
 :pattern ( ($generated@@37 ($generated $generated@@40) ($generated $generated@@41) ($generated $generated@@42)))
))))
(assert  (=> (<= 2 $generated@@24) (forall (($generated@@43 Int) ($generated@@44 Int) ($generated@@45 Int) ) (!  (=> (or ($generated@@38 $generated@@43 $generated@@44 $generated@@45) (and (< 2 $generated@@24) (and (> $generated@@44 0) (> $generated@@45 0)))) (and (=> (> $generated@@43 0) (and ($generated@@26 $generated@@43 $generated@@44) (=> ($generated@@25 $generated@@39 $generated@@43 $generated@@44) ($generated@@26 $generated@@43 $generated@@45)))) (= ($generated@@37 $generated@@43 $generated@@44 $generated@@45)  (and (and (> $generated@@43 0) ($generated@@25 $generated@@39 $generated@@43 $generated@@44)) ($generated@@25 $generated@@39 $generated@@43 $generated@@45)))))
 :pattern ( ($generated@@37 $generated@@43 $generated@@44 $generated@@45))
))))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@47 Int) ($generated@@48 Int) ($generated@@49 Int) ) (!  (=> (or ($generated@@28 ($generated $generated@@47) ($generated $generated@@48) ($generated $generated@@49)) (and (< 0 $generated@@24) ($generated@@5 ($generated@@17 $generated@@1 ($generated@@4  (and (> $generated@@47 0) (> $generated@@48 0))))))) (= ($generated@@27 ($generated $generated@@47) ($generated $generated@@48) ($generated $generated@@49)) (= ($generated ($generated@@46 ($generated $generated@@47) ($generated $generated@@48))) ($generated $generated@@49))))
 :weight 3
 :pattern ( ($generated@@27 ($generated $generated@@47) ($generated $generated@@48) ($generated $generated@@49)))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@20 $generated@@51 ($generated@@21 $generated@@51 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@21 $generated@@51 $generated@@50))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@63 T@T) ($generated@@64 T@T) ($generated@@65 T@T) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (! (= ($generated@@52 $generated@@63 $generated@@64 $generated@@65 ($generated@@59 $generated@@63 $generated@@64 $generated@@65 $generated@@67 $generated@@68 $generated@@69 $generated@@66) $generated@@68 $generated@@69) $generated@@66)
 :weight 0
)) (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ) (!  (or (= $generated@@75 $generated@@77) (= ($generated@@52 $generated@@70 $generated@@71 $generated@@72 ($generated@@59 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@77 $generated@@78) ($generated@@52 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@77 $generated@@78)))
 :weight 0
)) (forall (($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@52 $generated@@79 $generated@@80 $generated@@81 ($generated@@59 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@84 $generated@@85 $generated@@82) $generated@@86 $generated@@87) ($generated@@52 $generated@@79 $generated@@80 $generated@@81 $generated@@83 $generated@@86 $generated@@87)))
 :weight 0
)))) (= ($generated@@0 $generated@@53) 3)) (= ($generated@@0 $generated@@54) 4)) (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (! (= ($generated@@56 $generated@@88 $generated@@89 ($generated@@60 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@90) $generated@@92) $generated@@90)
 :weight 0
))) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@97 $generated@@98) (= ($generated@@56 $generated@@93 $generated@@94 ($generated@@60 $generated@@93 $generated@@94 $generated@@96 $generated@@97 $generated@@95) $generated@@98) ($generated@@56 $generated@@93 $generated@@94 $generated@@96 $generated@@98)))
 :weight 0
))) (= ($generated@@0 $generated@@57) 5)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ) (= ($generated@@0 ($generated@@58 $generated@@99 $generated@@100)) 6))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ) (! (= ($generated@@61 ($generated@@58 $generated@@101 $generated@@102)) $generated@@101)
 :pattern ( ($generated@@58 $generated@@101 $generated@@102))
))) (forall (($generated@@103 T@T) ($generated@@104 T@T) ) (! (= ($generated@@62 ($generated@@58 $generated@@103 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@58 $generated@@103 $generated@@104))
))))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 Bool) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@5 ($generated@@52 $generated@@53 $generated@@54 $generated@@1 ($generated@@55 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))  (=> (and (or (not (= $generated@@109 $generated@@105)) (not true)) ($generated@@5 ($generated@@20 $generated@@1 ($generated@@56 $generated@@54 $generated@@57 ($generated@@56 $generated@@53 ($generated@@58 $generated@@54 $generated@@57) $generated@@106 $generated@@109) $generated@@107)))) $generated@@108))
 :pattern ( ($generated@@52 $generated@@53 $generated@@54 $generated@@1 ($generated@@55 $generated@@105 $generated@@106 $generated@@107 $generated@@108) $generated@@109 $generated@@110))
)))
(assert (forall (($generated@@111 Int) ($generated@@112 Int) ) (! (= ($generated@@46 $generated@@111 $generated@@112) (* $generated@@111 $generated@@112))
 :pattern ( ($generated@@46 $generated@@111 $generated@@112))
)))
(assert (forall (($generated@@113 Int) ) (! (= ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@113))) ($generated@@17 $generated@@57 ($generated@@21 $generated@@2 ($generated@@6 $generated@@113))))
 :pattern ( ($generated@@21 $generated@@2 ($generated@@6 ($generated $generated@@113))))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@21 $generated@@115 ($generated@@17 $generated@@115 $generated@@114)) ($generated@@17 $generated@@57 ($generated@@21 $generated@@115 $generated@@114)))
 :pattern ( ($generated@@21 $generated@@115 ($generated@@17 $generated@@115 $generated@@114)))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@116 Int) ($generated@@117 Int) ($generated@@118 Int) ) (!  (=> (or ($generated@@28 $generated@@116 $generated@@117 $generated@@118) (and (< 0 $generated@@24) (and (> $generated@@116 0) (> $generated@@117 0)))) (= ($generated@@27 $generated@@116 $generated@@117 $generated@@118) (= ($generated@@46 $generated@@116 $generated@@117) $generated@@118)))
 :pattern ( ($generated@@27 $generated@@116 $generated@@117 $generated@@118))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () T@U)
(declare-fun $generated@@121 () T@U)
(declare-fun $generated@@122 () T@U)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 (T@U) Bool)
(declare-fun $generated@@128 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@129  (=> (= $generated@@119 ($generated@@55 $generated@@120 $generated@@121 $generated@@122 false)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (> $generated@@123 0)) (=> (> $generated@@123 0) (and (=> (= (ControlFlow 0 2) (- 0 3)) (> $generated@@124 0)) (=> (> $generated@@124 0) (=> (and (and ($generated@@125 $generated@@126) ($generated@@127 $generated@@126)) (and ($generated@@38 $generated@@128 $generated@@123 $generated@@124) (=> ($generated@@37 $generated@@128 $generated@@123 $generated@@124) (forall (($generated@@130 Int) ) (! ($generated@@38 $generated@@130 $generated@@123 $generated@@124)
 :pattern ( ($generated@@37 $generated@@130 $generated@@123 $generated@@124))
))))) (=> (and (and (and ($generated@@38 $generated@@128 $generated@@123 $generated@@124) (and ($generated@@37 $generated@@128 $generated@@123 $generated@@124) (and (and (> $generated@@128 0) ($generated@@25 $generated@@39 $generated@@128 $generated@@123)) ($generated@@25 $generated@@39 $generated@@128 $generated@@124)))) (forall (($generated@@131 Int) ) (!  (=> ($generated@@37 $generated@@131 $generated@@123 $generated@@124) (<= $generated@@131 $generated@@128))
 :pattern ( ($generated@@37 $generated@@131 $generated@@123 $generated@@124))
))) (and (= $generated@@121 $generated@@126) (= (ControlFlow 0 2) (- 0 1)))) (exists (($generated@@132 Int) ) (!  (and ($generated@@37 $generated@@132 $generated@@123 $generated@@124) (forall (($generated@@133 Int) ) (!  (=> ($generated@@37 $generated@@133 $generated@@123 $generated@@124) (<= $generated@@133 $generated@@132))
 :pattern ( ($generated@@37 $generated@@133 $generated@@123 $generated@@124))
)))
 :pattern ( ($generated@@37 $generated@@132 $generated@@123 $generated@@124))
)))))))))))
(let (($generated@@134  (=> (and ($generated@@125 $generated@@121) ($generated@@127 $generated@@121)) (=> (and (and (= 4 $generated@@24) (> $generated@@123 0)) (and (> $generated@@124 0) (= (ControlFlow 0 5) 2))) $generated@@129))))
$generated@@134)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
