(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.IsRelaxedPrefixAux (T@U T@U T@U T@U Int) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |_module.__default.IsRelaxedPrefixAux#canCall| (T@U T@U T@U Int) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.__default.IsRelaxedPrefix (T@U T@U T@U) Bool)
(declare-fun |_module.__default.IsRelaxedPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSeq alloc Tagclass._System.nat tytagFamily$nat)
)
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (= (Ctor SeqType) 3))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.IsRelaxedPrefixAux$T T@U) ($ly T@U) (|pat#0| T@U) (|a#0| T@U) (|slack#0| Int) ) (!  (=> (or (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.IsRelaxedPrefixAux$T |pat#0| |a#0| |slack#0|) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |pat#0| (TSeq _module._default.IsRelaxedPrefixAux$T)) ($Is SeqType |a#0| (TSeq _module._default.IsRelaxedPrefixAux$T))) (<= (LitInt 0) |slack#0|)))) (and (=> (not (|Seq#Equal| |pat#0| |Seq#Empty|)) (and (=> (and (not (|Seq#Equal| |a#0| |Seq#Empty|)) (= (|Seq#Index| |pat#0| (LitInt 0)) (|Seq#Index| |a#0| (LitInt 0)))) (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.IsRelaxedPrefixAux$T (|Seq#Drop| |pat#0| (LitInt 1)) (|Seq#Drop| |a#0| (LitInt 1)) |slack#0|)) (=> (not (and (not (|Seq#Equal| |a#0| |Seq#Empty|)) (= (|Seq#Index| |pat#0| (LitInt 0)) (|Seq#Index| |a#0| (LitInt 0))))) (=> (> |slack#0| 0) (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.IsRelaxedPrefixAux$T (|Seq#Drop| |pat#0| (LitInt 1)) |a#0| (- |slack#0| 1)))))) (= (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T ($LS $ly) |pat#0| |a#0| |slack#0|) (ite (|Seq#Equal| |pat#0| |Seq#Empty|) true (ite  (and (not (|Seq#Equal| |a#0| |Seq#Empty|)) (= (|Seq#Index| |pat#0| (LitInt 0)) (|Seq#Index| |a#0| (LitInt 0)))) (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T $ly (|Seq#Drop| |pat#0| (LitInt 1)) (|Seq#Drop| |a#0| (LitInt 1)) |slack#0|)  (and (> |slack#0| 0) (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T $ly (|Seq#Drop| |pat#0| (LitInt 1)) |a#0| (- |slack#0| 1))))))))
 :pattern ( (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T ($LS $ly) |pat#0| |a#0| |slack#0|))
))))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((s T@U) (n Int) ) (!  (=> (= n 0) (= (|Seq#Drop| s n) s))
 :pattern ( (|Seq#Drop| s n))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) ) (!  (=> (and (<= 0 n@@0) (<= n@@0 (|Seq#Length| s@@0))) (= (|Seq#Length| (|Seq#Drop| s@@0 n@@0)) (- (|Seq#Length| s@@0) n@@0)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@0 n@@0)))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0))) (= (|Seq#Index| s0 j) (|Seq#Index| s1 j)))
 :pattern ( (|Seq#Index| s0 j))
 :pattern ( (|Seq#Index| s1 j))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((s@@1 T@U) (n@@1 Int) (j@@0 Int) ) (!  (=> (and (and (<= 0 n@@1) (<= 0 j@@0)) (< j@@0 (- (|Seq#Length| s@@1) n@@1))) (= (|Seq#Index| (|Seq#Drop| s@@1 n@@1) j@@0) (|Seq#Index| s@@1 (+ j@@0 n@@1))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@1 n@@1) j@@0))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@0 Tclass._System.nat))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.IsRelaxedPrefix$T T@U) (|pat#0@@0| T@U) (|a#0@@0| T@U) ) (!  (=> (or (|_module.__default.IsRelaxedPrefix#canCall| _module._default.IsRelaxedPrefix$T |pat#0@@0| |a#0@@0|) (and (< 1 $FunctionContextHeight) (and ($Is SeqType |pat#0@@0| (TSeq _module._default.IsRelaxedPrefix$T)) ($Is SeqType |a#0@@0| (TSeq _module._default.IsRelaxedPrefix$T))))) (and (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.IsRelaxedPrefix$T |pat#0@@0| |a#0@@0| (LitInt 1)) (= (_module.__default.IsRelaxedPrefix _module._default.IsRelaxedPrefix$T |pat#0@@0| |a#0@@0|) (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefix$T ($LS $LZ) |pat#0@@0| |a#0@@0| (LitInt 1)))))
 :pattern ( (_module.__default.IsRelaxedPrefix _module._default.IsRelaxedPrefix$T |pat#0@@0| |a#0@@0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.IsRelaxedPrefixAux$T@@0 T@U) ($ly@@0 T@U) (|pat#0@@1| T@U) (|a#0@@1| T@U) (|slack#0@@0| Int) ) (!  (=> (or (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.IsRelaxedPrefixAux$T@@0 (Lit SeqType |pat#0@@1|) (Lit SeqType |a#0@@1|) (LitInt |slack#0@@0|)) (and (< 0 $FunctionContextHeight) (and (and ($Is SeqType |pat#0@@1| (TSeq _module._default.IsRelaxedPrefixAux$T@@0)) ($Is SeqType |a#0@@1| (TSeq _module._default.IsRelaxedPrefixAux$T@@0))) (<= (LitInt 0) |slack#0@@0|)))) (and (=> (not (|Seq#Equal| |pat#0@@1| |Seq#Empty|)) (and (=> (and (not (|Seq#Equal| |a#0@@1| |Seq#Empty|)) (= (|Seq#Index| (Lit SeqType |pat#0@@1|) (LitInt 0)) (|Seq#Index| (Lit SeqType |a#0@@1|) (LitInt 0)))) (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.IsRelaxedPrefixAux$T@@0 (Lit SeqType (|Seq#Drop| (Lit SeqType |pat#0@@1|) (LitInt 1))) (Lit SeqType (|Seq#Drop| (Lit SeqType |a#0@@1|) (LitInt 1))) (LitInt |slack#0@@0|))) (=> (not (and (not (|Seq#Equal| |a#0@@1| |Seq#Empty|)) (= (|Seq#Index| (Lit SeqType |pat#0@@1|) (LitInt 0)) (|Seq#Index| (Lit SeqType |a#0@@1|) (LitInt 0))))) (=> (U_2_bool (Lit boolType (bool_2_U (> |slack#0@@0| 0)))) (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.IsRelaxedPrefixAux$T@@0 (Lit SeqType (|Seq#Drop| (Lit SeqType |pat#0@@1|) (LitInt 1))) (Lit SeqType |a#0@@1|) (LitInt (- |slack#0@@0| 1))))))) (= (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T@@0 ($LS $ly@@0) (Lit SeqType |pat#0@@1|) (Lit SeqType |a#0@@1|) (LitInt |slack#0@@0|)) (ite (|Seq#Equal| |pat#0@@1| |Seq#Empty|) true (ite  (and (not (|Seq#Equal| |a#0@@1| |Seq#Empty|)) (= (|Seq#Index| (Lit SeqType |pat#0@@1|) (LitInt 0)) (|Seq#Index| (Lit SeqType |a#0@@1|) (LitInt 0)))) (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T@@0 ($LS $ly@@0) (Lit SeqType (|Seq#Drop| (Lit SeqType |pat#0@@1|) (LitInt 1))) (Lit SeqType (|Seq#Drop| (Lit SeqType |a#0@@1|) (LitInt 1))) (LitInt |slack#0@@0|))  (and (> |slack#0@@0| 0) (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T@@0 ($LS $ly@@0) (Lit SeqType (|Seq#Drop| (Lit SeqType |pat#0@@1|) (LitInt 1))) (Lit SeqType |a#0@@1|) (LitInt (- |slack#0@@0| 1)))))))))
 :weight 3
 :pattern ( (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T@@0 ($LS $ly@@0) (Lit SeqType |pat#0@@1|) (Lit SeqType |a#0@@1|) (LitInt |slack#0@@0|)))
))))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Seq#Equal| a b) (= a b))
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@2))) ($IsAllocBox (|Seq#Index| v@@2 i) t0@@0 h@@3))
 :pattern ( (|Seq#Index| v@@2 i))
)))
 :pattern ( ($IsAlloc SeqType v@@2 (TSeq t0@@0) h@@3))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSeq (TSeq t@@3)) t@@3)
 :pattern ( (TSeq t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSeq t@@4)) TagSeq)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((bx@@1 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@1 (TSeq t@@5)) (and (= ($Box SeqType ($Unbox SeqType bx@@1)) bx@@1) ($Is SeqType ($Unbox SeqType bx@@1) (TSeq t@@5))))
 :pattern ( ($IsBox bx@@1 (TSeq t@@5)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((_module._default.IsRelaxedPrefix$T@@0 T@U) (|pat#0@@2| T@U) (|a#0@@2| T@U) ) (!  (=> (or (|_module.__default.IsRelaxedPrefix#canCall| _module._default.IsRelaxedPrefix$T@@0 (Lit SeqType |pat#0@@2|) (Lit SeqType |a#0@@2|)) (and (< 1 $FunctionContextHeight) (and ($Is SeqType |pat#0@@2| (TSeq _module._default.IsRelaxedPrefix$T@@0)) ($Is SeqType |a#0@@2| (TSeq _module._default.IsRelaxedPrefix$T@@0))))) (and (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.IsRelaxedPrefix$T@@0 (Lit SeqType |pat#0@@2|) (Lit SeqType |a#0@@2|) (LitInt 1)) (= (_module.__default.IsRelaxedPrefix _module._default.IsRelaxedPrefix$T@@0 (Lit SeqType |pat#0@@2|) (Lit SeqType |a#0@@2|)) (U_2_bool (Lit boolType (bool_2_U (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefix$T@@0 ($LS $LZ) (Lit SeqType |pat#0@@2|) (Lit SeqType |a#0@@2|) (LitInt 1))))))))
 :weight 3
 :pattern ( (_module.__default.IsRelaxedPrefix _module._default.IsRelaxedPrefix$T@@0 (Lit SeqType |pat#0@@2|) (Lit SeqType |a#0@@2|)))
))))
(assert (forall ((_module._default.IsRelaxedPrefixAux$T@@1 T@U) ($ly@@1 T@U) (|pat#0@@3| T@U) (|a#0@@3| T@U) (|slack#0@@1| Int) ) (! (= (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T@@1 ($LS $ly@@1) |pat#0@@3| |a#0@@3| |slack#0@@1|) (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T@@1 $ly@@1 |pat#0@@3| |a#0@@3| |slack#0@@1|))
 :pattern ( (_module.__default.IsRelaxedPrefixAux _module._default.IsRelaxedPrefixAux$T@@1 ($LS $ly@@1) |pat#0@@3| |a#0@@3| |slack#0@@1|))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((s@@3 T@U) (n@@2 Int) (k@@2 Int) ) (!  (=> (and (and (<= 0 n@@2) (<= n@@2 k@@2)) (< k@@2 (|Seq#Length| s@@3))) (= (|Seq#Index| (|Seq#Drop| s@@3 n@@2) (- k@@2 n@@2)) (|Seq#Index| s@@3 k@@2)))
 :weight 25
 :pattern ( (|Seq#Index| s@@3 k@@2) (|Seq#Drop| s@@3 n@@2))
)))
(assert (forall ((s@@4 T@U) (m@@4 Int) (n@@3 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@3)) (<= (+ m@@4 n@@3) (|Seq#Length| s@@4))) (= (|Seq#Drop| (|Seq#Drop| s@@4 m@@4) n@@3) (|Seq#Drop| s@@4 (+ m@@4 n@@3))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@4 m@@4) n@@3))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((s@@5 T@U) ) (!  (=> (= (|Seq#Length| s@@5) 0) (= s@@5 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@5))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@3 (TSeq t0@@2)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsBox (|Seq#Index| v@@3 i@@0) t0@@2))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($Is SeqType v@@3 (TSeq t0@@2)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |pat#0@@4| () T@U)
(declare-fun |i#0@0| () Int)
(declare-fun |shift#0@0| () Int)
(declare-fun |##pat#2@0| () T@U)
(declare-fun _module._default.ComputeIsRelaxedPrefix$T () T@U)
(declare-fun $Heap () T@U)
(declare-fun |a#0@@4| () T@U)
(declare-fun |##a#2@0| () T@U)
(declare-fun |##slack#1@0| () Int)
(declare-fun |B#0@0| () Bool)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |b#0@2| () Bool)
(declare-fun |b#0@1| () Bool)
(declare-fun |b#0@0| () Bool)
(declare-fun |i#0@1| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |$decr$loop#01@1| () Int)
(declare-fun |shift#0@2| () Int)
(declare-fun |shift#0@1| () Int)
(declare-fun |##slack#0@0| () Int)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |$rhs#1@0| () Int)
(declare-fun null () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |$decr_init$loop#01@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 59) (let ((anon13_correct true))
(let ((anon35_Else_correct  (=> (and (<= (|Seq#Length| |pat#0@@4|) |i#0@0|) (= (ControlFlow 0 32) 30)) anon13_correct)))
(let ((anon35_Then_correct  (=> (and (< |i#0@0| (|Seq#Length| |pat#0@@4|)) (= (ControlFlow 0 31) 30)) anon13_correct)))
(let ((anon10_correct  (=> (or (= |shift#0@0| (LitInt 0)) (= |shift#0@0| (LitInt 1))) (and (=> (= (ControlFlow 0 33) (- 0 36)) (and (<= 0 |i#0@0|) (<= |i#0@0| (|Seq#Length| |pat#0@@4|)))) (=> (and (= |##pat#2@0| (|Seq#Drop| |pat#0@@4| |i#0@0|)) ($IsAlloc SeqType |##pat#2@0| (TSeq _module._default.ComputeIsRelaxedPrefix$T) $Heap)) (and (=> (= (ControlFlow 0 33) (- 0 35)) (and (<= 0 (- |i#0@0| |shift#0@0|)) (<= (- |i#0@0| |shift#0@0|) (|Seq#Length| |a#0@@4|)))) (=> (and (= |##a#2@0| (|Seq#Drop| |a#0@@4| (- |i#0@0| |shift#0@0|))) ($IsAlloc SeqType |##a#2@0| (TSeq _module._default.ComputeIsRelaxedPrefix$T) $Heap)) (and (=> (= (ControlFlow 0 33) (- 0 34)) ($Is intType (int_2_U (- 1 |shift#0@0|)) Tclass._System.nat)) (=> ($Is intType (int_2_U (- 1 |shift#0@0|)) Tclass._System.nat) (=> (= |##slack#1@0| (- 1 |shift#0@0|)) (=> (and (and ($IsAlloc intType (int_2_U |##slack#1@0|) Tclass._System.nat $Heap) (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.ComputeIsRelaxedPrefix$T (|Seq#Drop| |pat#0@@4| |i#0@0|) (|Seq#Drop| |a#0@@4| (- |i#0@0| |shift#0@0|)) (- 1 |shift#0@0|))) (and (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.ComputeIsRelaxedPrefix$T (|Seq#Drop| |pat#0@@4| |i#0@0|) (|Seq#Drop| |a#0@@4| (- |i#0@0| |shift#0@0|)) (- 1 |shift#0@0|)) (= (_module.__default.IsRelaxedPrefixAux _module._default.ComputeIsRelaxedPrefix$T ($LS $LZ) (|Seq#Drop| |pat#0@@4| |i#0@0|) (|Seq#Drop| |a#0@@4| (- |i#0@0| |shift#0@0|)) (- 1 |shift#0@0|)) |B#0@0|))) (and (=> (= (ControlFlow 0 33) 31) anon35_Then_correct) (=> (= (ControlFlow 0 33) 32) anon35_Else_correct)))))))))))))
(let ((anon34_Else_correct  (=> (and (= |shift#0@0| (LitInt 0)) (= (ControlFlow 0 38) 33)) anon10_correct)))
(let ((anon34_Then_correct  (=> (and (or (not (= |shift#0@0| (LitInt 0))) (not true)) (= (ControlFlow 0 37) 33)) anon10_correct)))
(let ((anon8_correct  (=> (and (<= (LitInt 0) |shift#0@0|) (<= |shift#0@0| |i#0@0|)) (and (=> (= (ControlFlow 0 39) 37) anon34_Then_correct) (=> (= (ControlFlow 0 39) 38) anon34_Else_correct)))))
(let ((anon33_Else_correct  (=> (and (< |shift#0@0| (LitInt 0)) (= (ControlFlow 0 41) 39)) anon8_correct)))
(let ((anon33_Then_correct  (=> (and (<= (LitInt 0) |shift#0@0|) (= (ControlFlow 0 40) 39)) anon8_correct)))
(let ((anon6_correct  (=> (and (and (<= (LitInt 0) |i#0@0|) (<= |i#0@0| (|Seq#Length| |pat#0@@4|))) (<= (- |i#0@0| |shift#0@0|) (|Seq#Length| |a#0@@4|))) (and (=> (= (ControlFlow 0 42) 40) anon33_Then_correct) (=> (= (ControlFlow 0 42) 41) anon33_Else_correct)))))
(let ((anon32_Else_correct  (=> (and (not (and (<= (LitInt 0) |i#0@0|) (<= |i#0@0| (|Seq#Length| |pat#0@@4|)))) (= (ControlFlow 0 44) 42)) anon6_correct)))
(let ((anon32_Then_correct  (=> (and (and (<= (LitInt 0) |i#0@0|) (<= |i#0@0| (|Seq#Length| |pat#0@@4|))) (= (ControlFlow 0 43) 42)) anon6_correct)))
(let ((anon31_Else_correct  (=> (< |i#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 46) 43) anon32_Then_correct) (=> (= (ControlFlow 0 46) 44) anon32_Else_correct)))))
(let ((anon31_Then_correct  (=> (<= (LitInt 0) |i#0@0|) (and (=> (= (ControlFlow 0 45) 43) anon32_Then_correct) (=> (= (ControlFlow 0 45) 44) anon32_Else_correct)))))
(let ((anon30_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 47) 45) anon31_Then_correct) (=> (= (ControlFlow 0 47) 46) anon31_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 16) (- 0 15)) (= |b#0@2| (_module.__default.IsRelaxedPrefix _module._default.ComputeIsRelaxedPrefix$T |pat#0@@4| |a#0@@4|)))))
(let ((anon28_correct  (=> (= |b#0@1|  (and (<= (- |i#0@0| |shift#0@0|) (|Seq#Length| |pat#0@@4|)) (<= (|Seq#Length| |pat#0@@4|) (+ (- |i#0@0| |shift#0@0|) 1)))) (=> (and (= |b#0@2| |b#0@1|) (= (ControlFlow 0 22) 16)) GeneratedUnifiedExit_correct))))
(let ((anon40_Else_correct  (=> (and (< (|Seq#Length| |pat#0@@4|) (- |i#0@0| |shift#0@0|)) (= (ControlFlow 0 24) 22)) anon28_correct)))
(let ((anon40_Then_correct  (=> (and (<= (- |i#0@0| |shift#0@0|) (|Seq#Length| |pat#0@@4|)) (= (ControlFlow 0 23) 22)) anon28_correct)))
(let ((anon37_Then_correct  (=> (not (and (< |i#0@0| (|Seq#Length| |pat#0@@4|)) (< (- |i#0@0| |shift#0@0|) (|Seq#Length| |a#0@@4|)))) (and (=> (= (ControlFlow 0 25) 23) anon40_Then_correct) (=> (= (ControlFlow 0 25) 24) anon40_Else_correct)))))
(let ((anon39_Else_correct  (=> (and (and (or (not (= |shift#0@0| (LitInt 0))) (not true)) (= |b#0@0| (U_2_bool (Lit boolType (bool_2_U false))))) (and (= |b#0@2| |b#0@0|) (= (ControlFlow 0 17) 16))) GeneratedUnifiedExit_correct)))
(let ((anon25_correct  (=> (= |i#0@1| (+ |i#0@0| 1)) (and (=> (= (ControlFlow 0 3) (- 0 12)) (or (<= 0 |$decr$loop#00@1|) (= (- (|Seq#Length| |pat#0@@4|) |i#0@1|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- (|Seq#Length| |pat#0@@4|) |i#0@1|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 3) (- 0 11)) (or (or (<= 0 |$decr$loop#01@1|) (< (- (|Seq#Length| |pat#0@@4|) |i#0@1|) |$decr$loop#00@1|)) (= (ite (< |i#0@1| (|Seq#Length| |pat#0@@4|)) (- (|Seq#Length| |a#0@@4|) (- |i#0@1| |shift#0@2|)) (- 0 1)) |$decr$loop#01@1|))) (=> (or (or (<= 0 |$decr$loop#01@1|) (< (- (|Seq#Length| |pat#0@@4|) |i#0@1|) |$decr$loop#00@1|)) (= (ite (< |i#0@1| (|Seq#Length| |pat#0@@4|)) (- (|Seq#Length| |a#0@@4|) (- |i#0@1| |shift#0@2|)) (- 0 1)) |$decr$loop#01@1|)) (and (=> (= (ControlFlow 0 3) (- 0 10)) (or (< (- (|Seq#Length| |pat#0@@4|) |i#0@1|) |$decr$loop#00@1|) (and (= (- (|Seq#Length| |pat#0@@4|) |i#0@1|) |$decr$loop#00@1|) (< (ite (< |i#0@1| (|Seq#Length| |pat#0@@4|)) (- (|Seq#Length| |a#0@@4|) (- |i#0@1| |shift#0@2|)) (- 0 1)) |$decr$loop#01@1|)))) (=> (or (< (- (|Seq#Length| |pat#0@@4|) |i#0@1|) |$decr$loop#00@1|) (and (= (- (|Seq#Length| |pat#0@@4|) |i#0@1|) |$decr$loop#00@1|) (< (ite (< |i#0@1| (|Seq#Length| |pat#0@@4|)) (- (|Seq#Length| |a#0@@4|) (- |i#0@1| |shift#0@2|)) (- 0 1)) |$decr$loop#01@1|))) (=> (=> (and (<= (LitInt 0) |i#0@1|) (<= |i#0@1| (|Seq#Length| |pat#0@@4|))) (=> (<= (- |i#0@1| |shift#0@2|) (|Seq#Length| |a#0@@4|)) (=> (and (<= (LitInt 0) |shift#0@2|) (<= |shift#0@2| |i#0@1|)) (=> (or (= |shift#0@2| (LitInt 0)) (= |shift#0@2| (LitInt 1))) (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.ComputeIsRelaxedPrefix$T (|Seq#Drop| |pat#0@@4| |i#0@1|) (|Seq#Drop| |a#0@@4| (- |i#0@1| |shift#0@2|)) (- 1 |shift#0@2|)))))) (and (=> (= (ControlFlow 0 3) (- 0 9)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@1|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@1|)) (and (=> (= (ControlFlow 0 3) (- 0 8)) (=> |$w$loop#0@0| (<= |i#0@1| (|Seq#Length| |pat#0@@4|)))) (=> (=> |$w$loop#0@0| (<= |i#0@1| (|Seq#Length| |pat#0@@4|))) (and (=> (= (ControlFlow 0 3) (- 0 7)) (=> |$w$loop#0@0| (<= (- |i#0@1| |shift#0@2|) (|Seq#Length| |a#0@@4|)))) (=> (=> |$w$loop#0@0| (<= (- |i#0@1| |shift#0@2|) (|Seq#Length| |a#0@@4|))) (and (=> (= (ControlFlow 0 3) (- 0 6)) (=> |$w$loop#0@0| (<= (LitInt 0) |shift#0@2|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |shift#0@2|)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (=> |$w$loop#0@0| (<= |shift#0@2| |i#0@1|))) (=> (=> |$w$loop#0@0| (<= |shift#0@2| |i#0@1|)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (=> |$w$loop#0@0| (or (= |shift#0@2| (LitInt 0)) (= |shift#0@2| (LitInt 1))))) (=> (=> |$w$loop#0@0| (or (= |shift#0@2| (LitInt 0)) (= |shift#0@2| (LitInt 1)))) (=> (= (ControlFlow 0 3) (- 0 2)) (=> |$w$loop#0@0| (= (_module.__default.IsRelaxedPrefixAux _module._default.ComputeIsRelaxedPrefix$T ($LS ($LS $LZ)) (|Seq#Drop| |pat#0@@4| |i#0@1|) (|Seq#Drop| |a#0@@4| (- |i#0@1| |shift#0@2|)) (- 1 |shift#0@2|)) |B#0@0|)))))))))))))))))))))))))
(let ((anon39_Then_correct  (=> (and (and (= |shift#0@0| (LitInt 0)) (= |shift#0@1| (LitInt 1))) (and (= |shift#0@2| |shift#0@1|) (= (ControlFlow 0 14) 3))) anon25_correct)))
(let ((anon38_Then_correct  (=> (or (not (= (|Seq#Index| |pat#0@@4| |i#0@0|) (|Seq#Index| |a#0@@4| (- |i#0@0| |shift#0@0|)))) (not true)) (and (=> (= (ControlFlow 0 18) 14) anon39_Then_correct) (=> (= (ControlFlow 0 18) 17) anon39_Else_correct)))))
(let ((anon38_Else_correct  (=> (= (|Seq#Index| |pat#0@@4| |i#0@0|) (|Seq#Index| |a#0@@4| (- |i#0@0| |shift#0@0|))) (=> (and (= |shift#0@2| |shift#0@0|) (= (ControlFlow 0 13) 3)) anon25_correct))))
(let ((anon37_Else_correct  (=> (and (and (< |i#0@0| (|Seq#Length| |pat#0@@4|)) (< (- |i#0@0| |shift#0@0|) (|Seq#Length| |a#0@@4|))) (and (= |$decr$loop#00@1| (- (|Seq#Length| |pat#0@@4|) |i#0@0|)) (= |$decr$loop#01@1| (ite (< |i#0@0| (|Seq#Length| |pat#0@@4|)) (- (|Seq#Length| |a#0@@4|) (- |i#0@0| |shift#0@0|)) (- 0 1))))) (and (=> (= (ControlFlow 0 19) (- 0 21)) (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |pat#0@@4|)))) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |pat#0@@4|))) (and (=> (= (ControlFlow 0 19) (- 0 20)) (and (<= 0 (- |i#0@0| |shift#0@0|)) (< (- |i#0@0| |shift#0@0|) (|Seq#Length| |a#0@@4|)))) (=> (and (<= 0 (- |i#0@0| |shift#0@0|)) (< (- |i#0@0| |shift#0@0|) (|Seq#Length| |a#0@@4|))) (and (=> (= (ControlFlow 0 19) 18) anon38_Then_correct) (=> (= (ControlFlow 0 19) 13) anon38_Else_correct)))))))))
(let ((anon16_correct  (and (=> (= (ControlFlow 0 26) 25) anon37_Then_correct) (=> (= (ControlFlow 0 26) 19) anon37_Else_correct))))
(let ((anon36_Else_correct  (=> (and (<= (|Seq#Length| |pat#0@@4|) |i#0@0|) (= (ControlFlow 0 28) 26)) anon16_correct)))
(let ((anon36_Then_correct  (=> (and (< |i#0@0| (|Seq#Length| |pat#0@@4|)) (= (ControlFlow 0 27) 26)) anon16_correct)))
(let ((anon30_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 29) 27) anon36_Then_correct) (=> (= (ControlFlow 0 29) 28) anon36_Else_correct)))))
(let ((anon29_LoopBody_correct  (and (=> (= (ControlFlow 0 48) 47) anon30_Then_correct) (=> (= (ControlFlow 0 48) 29) anon30_Else_correct))))
(let ((anon29_LoopDone_correct true))
(let ((anon29_LoopHead_correct  (=> (and (and (and (and (and (and (and (and (not false) (= |##slack#0@0| 1)) (and (<= 0 |shift#0@0|) (< |shift#0@0| 3))) (<= 0 |i#0@0|)) (= |$rhs#0@0| 0)) (= |$rhs#1@0| 0)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@0|))) (and (and (=> |$w$loop#0@0| (<= |i#0@0| (|Seq#Length| |pat#0@@4|))) (=> |$w$loop#0@0| (<= (- |i#0@0| |shift#0@0|) (|Seq#Length| |a#0@@4|)))) (and (=> |$w$loop#0@0| (<= (LitInt 0) |shift#0@0|)) (=> |$w$loop#0@0| (<= |shift#0@0| |i#0@0|))))) (and (and (and (=> |$w$loop#0@0| (or (= |shift#0@0| (LitInt 0)) (= |shift#0@0| (LitInt 1)))) (=> |$w$loop#0@0| (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.ComputeIsRelaxedPrefix$T (|Seq#Drop| |pat#0@@4| |i#0@0|) (|Seq#Drop| |a#0@@4| (- |i#0@0| |shift#0@0|)) (- 1 |shift#0@0|)))) (and (=> |$w$loop#0@0| (= (_module.__default.IsRelaxedPrefixAux _module._default.ComputeIsRelaxedPrefix$T ($LS ($LS $LZ)) (|Seq#Drop| |pat#0@@4| |i#0@0|) (|Seq#Drop| |a#0@@4| (- |i#0@0| |shift#0@0|)) (- 1 |shift#0@0|)) |B#0@0|)) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0))
)))) (and (and ($HeapSucc $Heap $Heap) (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0))
))) (and (<= (- (|Seq#Length| |pat#0@@4|) |i#0@0|) |$decr_init$loop#00@0|) (=> (= (- (|Seq#Length| |pat#0@@4|) |i#0@0|) |$decr_init$loop#00@0|) (<= (ite (< |i#0@0| (|Seq#Length| |pat#0@@4|)) (- (|Seq#Length| |a#0@@4|) (- |i#0@0| |shift#0@0|)) (- 0 1)) |$decr_init$loop#01@0|)))))) (and (=> (= (ControlFlow 0 49) 1) anon29_LoopDone_correct) (=> (= (ControlFlow 0 49) 48) anon29_LoopBody_correct)))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and ($IsAlloc SeqType |pat#0@@4| (TSeq _module._default.ComputeIsRelaxedPrefix$T) $Heap) ($IsAlloc SeqType |a#0@@4| (TSeq _module._default.ComputeIsRelaxedPrefix$T) $Heap)) (and (=> (= (ControlFlow 0 50) (- 0 58)) ($Is intType (int_2_U (LitInt 1)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 1)) Tclass._System.nat) (=> (= |##slack#0@0| (LitInt 1)) (=> (and (and (and ($IsAlloc intType (int_2_U |##slack#0@0|) Tclass._System.nat $Heap) (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.ComputeIsRelaxedPrefix$T |pat#0@@4| |a#0@@4| (LitInt 1))) (and (|_module.__default.IsRelaxedPrefixAux#canCall| _module._default.ComputeIsRelaxedPrefix$T |pat#0@@4| |a#0@@4| (LitInt 1)) (= |B#0@0| (_module.__default.IsRelaxedPrefixAux _module._default.ComputeIsRelaxedPrefix$T ($LS $LZ) |pat#0@@4| |a#0@@4| (LitInt 1))))) (and (and (= |$rhs#0@0| (LitInt 0)) (= |$rhs#1@0| (LitInt 0))) (and (= |$decr_init$loop#00@0| (- (|Seq#Length| |pat#0@@4|) |$rhs#1@0|)) (= |$decr_init$loop#01@0| (ite (< |$rhs#1@0| (|Seq#Length| |pat#0@@4|)) (- (|Seq#Length| |a#0@@4|) (- |$rhs#1@0| |$rhs#0@0|)) (- 0 1)))))) (and (=> (= (ControlFlow 0 50) (- 0 57)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#1@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#1@0|)) (and (=> (= (ControlFlow 0 50) (- 0 56)) (=> |$w$loop#0@0| (<= |$rhs#1@0| (|Seq#Length| |pat#0@@4|)))) (=> (=> |$w$loop#0@0| (<= |$rhs#1@0| (|Seq#Length| |pat#0@@4|))) (and (=> (= (ControlFlow 0 50) (- 0 55)) (=> |$w$loop#0@0| (<= (- |$rhs#1@0| |$rhs#0@0|) (|Seq#Length| |a#0@@4|)))) (=> (=> |$w$loop#0@0| (<= (- |$rhs#1@0| |$rhs#0@0|) (|Seq#Length| |a#0@@4|))) (and (=> (= (ControlFlow 0 50) (- 0 54)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#0@0|)) (and (=> (= (ControlFlow 0 50) (- 0 53)) (=> |$w$loop#0@0| (<= |$rhs#0@0| |$rhs#1@0|))) (=> (=> |$w$loop#0@0| (<= |$rhs#0@0| |$rhs#1@0|)) (and (=> (= (ControlFlow 0 50) (- 0 52)) (=> |$w$loop#0@0| (or (= |$rhs#0@0| (LitInt 0)) (= |$rhs#0@0| (LitInt 1))))) (=> (=> |$w$loop#0@0| (or (= |$rhs#0@0| (LitInt 0)) (= |$rhs#0@0| (LitInt 1)))) (and (=> (= (ControlFlow 0 50) (- 0 51)) (=> |$w$loop#0@0| (= (_module.__default.IsRelaxedPrefixAux _module._default.ComputeIsRelaxedPrefix$T ($LS ($LS $LZ)) (|Seq#Drop| |pat#0@@4| |$rhs#1@0|) (|Seq#Drop| |a#0@@4| (- |$rhs#1@0| |$rhs#0@0|)) (- 1 |$rhs#0@0|)) |B#0@0|))) (=> (=> |$w$loop#0@0| (= (_module.__default.IsRelaxedPrefixAux _module._default.ComputeIsRelaxedPrefix$T ($LS ($LS $LZ)) (|Seq#Drop| |pat#0@@4| |$rhs#1@0|) (|Seq#Drop| |a#0@@4| (- |$rhs#1@0| |$rhs#0@0|)) (- 1 |$rhs#0@0|)) |B#0@0|)) (=> (= (ControlFlow 0 50) 49) anon29_LoopHead_correct)))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is SeqType |pat#0@@4| (TSeq _module._default.ComputeIsRelaxedPrefix$T)) ($IsAlloc SeqType |pat#0@@4| (TSeq _module._default.ComputeIsRelaxedPrefix$T) $Heap))) (and (and ($Is SeqType |a#0@@4| (TSeq _module._default.ComputeIsRelaxedPrefix$T)) ($IsAlloc SeqType |a#0@@4| (TSeq _module._default.ComputeIsRelaxedPrefix$T) $Heap)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 59) 50)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
