(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (Int Int) Int)
(declare-fun $generated@@21 (T@U) Bool)
(declare-fun $generated@@22 (Int Int) Bool)
(declare-fun $generated@@23 (Int Int) Bool)
(declare-fun $generated@@24 (Int Int) Int)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 () T@T)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@T T@T) T@T)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@37 (T@T) T@T)
(declare-fun $generated@@38 (T@T) T@T)
(declare-fun $generated@@59 (Int) Int)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@64 (T@T T@U) T@U)
(declare-fun $generated@@67 (Bool Int Int) Bool)
(declare-fun $generated@@68 (Int Int) Bool)
(declare-fun $generated@@69 (Int Int Int) Bool)
(declare-fun $generated@@70 (Int Int Int) Bool)
(declare-fun $generated@@79 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@85 (Int Int Int) Bool)
(declare-fun $generated@@86 (Int Int Int) Bool)
(declare-fun $generated@@87 () Bool)
(declare-fun $generated@@100 (Int Int) Int)
(declare-fun $generated@@106 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@107 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@108 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert  (=> (<= 5 $generated@@19) (forall (($generated@@25 T@U) ($generated@@26 Int) ($generated@@27 Int) ) (!  (=> (or ($generated@@22 $generated@@26 $generated@@27) (and (< 5 $generated@@19) (and ($generated@@21 $generated@@25) (and (> $generated@@26 0) (> $generated@@27 0))))) (and ($generated@@23 $generated@@26 $generated@@27) (= ($generated@@20 $generated@@26 $generated@@27) (let (($generated@@28 ($generated@@24 $generated@@26 $generated@@27)))
$generated@@28))))
 :pattern ( ($generated@@20 $generated@@26 $generated@@27) ($generated@@21 $generated@@25))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (! (= ($generated@@30 $generated@@39 $generated@@40 ($generated@@36 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@43) $generated@@41)
 :weight 0
)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ) (!  (or (= $generated@@48 $generated@@49) (= ($generated@@30 $generated@@44 $generated@@45 ($generated@@36 $generated@@44 $generated@@45 $generated@@47 $generated@@48 $generated@@46) $generated@@49) ($generated@@30 $generated@@44 $generated@@45 $generated@@47 $generated@@49)))
 :weight 0
))) (= ($generated@@2 $generated@@31) 3)) (= ($generated@@2 $generated@@32) 4)) (= ($generated@@2 $generated@@33) 5)) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (= ($generated@@2 ($generated@@34 $generated@@50 $generated@@51)) 6))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@37 ($generated@@34 $generated@@52 $generated@@53)) $generated@@52)
 :pattern ( ($generated@@34 $generated@@52 $generated@@53))
))) (forall (($generated@@54 T@T) ($generated@@55 T@T) ) (! (= ($generated@@38 ($generated@@34 $generated@@54 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@34 $generated@@54 $generated@@55))
))))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@U) ) (!  (=> ($generated@@29 $generated@@56 $generated@@57) (forall (($generated@@58 T@U) ) (!  (=> ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@56 $generated@@58) $generated@@1))) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated@@1))))
 :pattern ( ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@57 $generated@@58) $generated@@1))
)))
 :pattern ( ($generated@@29 $generated@@56 $generated@@57))
)))
(assert (forall (($generated@@60 Int) ) (! (= ($generated@@59 $generated@@60) $generated@@60)
 :pattern ( ($generated@@59 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@61 $generated@@63 $generated@@62) $generated@@62)
 :pattern ( ($generated@@61 $generated@@63 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@64 $generated@@66 ($generated@@35 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@35 $generated@@66 $generated@@65))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@71 Int) ($generated@@72 Int) ) (!  (=> (or ($generated@@68 ($generated@@59 $generated@@71) ($generated@@59 $generated@@72)) (and (< 1 $generated@@19) ($generated@@7 ($generated@@61 $generated@@3 ($generated@@6  (and (> $generated@@71 0) (> $generated@@72 0))))))) (and (forall (($generated@@73 Int) ) (!  (=> (> $generated@@73 0) ($generated@@70 $generated@@73 ($generated@@59 $generated@@71) ($generated@@59 $generated@@72)))
 :pattern ( ($generated@@69 $generated@@73 $generated@@71 $generated@@72))
)) (= ($generated@@67 true ($generated@@59 $generated@@71) ($generated@@59 $generated@@72)) (exists (($generated@@74 Int) ) (!  (and (> $generated@@74 0) ($generated@@69 $generated@@74 ($generated@@59 $generated@@71) ($generated@@59 $generated@@72)))
 :pattern ( ($generated@@69 $generated@@74 $generated@@71 $generated@@72))
)))))
 :weight 3
 :pattern ( ($generated@@67 true ($generated@@59 $generated@@71) ($generated@@59 $generated@@72)))
))))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@75 Int) ($generated@@76 Int) ) (!  (=> (or ($generated@@68 $generated@@75 $generated@@76) (and (< 1 $generated@@19) (and (> $generated@@75 0) (> $generated@@76 0)))) (and (forall (($generated@@77 Int) ) (!  (=> (> $generated@@77 0) ($generated@@70 $generated@@77 $generated@@75 $generated@@76))
 :pattern ( ($generated@@69 $generated@@77 $generated@@75 $generated@@76))
)) (= ($generated@@67 true $generated@@75 $generated@@76) (exists (($generated@@78 Int) ) (!  (and (> $generated@@78 0) ($generated@@69 $generated@@78 $generated@@75 $generated@@76))
 :pattern ( ($generated@@69 $generated@@78 $generated@@75 $generated@@76))
)))))
 :pattern ( ($generated@@67 true $generated@@75 $generated@@76))
))))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (!  (=> ($generated@@29 $generated@@80 $generated@@81) (=> ($generated@@79 $generated@@84 $generated@@82 $generated@@83 $generated@@80) ($generated@@79 $generated@@84 $generated@@82 $generated@@83 $generated@@81)))
 :pattern ( ($generated@@29 $generated@@80 $generated@@81) ($generated@@79 $generated@@84 $generated@@82 $generated@@83 $generated@@80))
)))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@88 Int) ($generated@@89 Int) ($generated@@90 Int) ) (!  (=> (or ($generated@@86 ($generated@@59 $generated@@88) ($generated@@59 $generated@@89) ($generated@@59 $generated@@90)) (and (< 2 $generated@@19) ($generated@@7 ($generated@@61 $generated@@3 ($generated@@6  (and (> $generated@@89 0) (> $generated@@90 0))))))) (and (=> ($generated@@7 ($generated@@61 $generated@@3 ($generated@@6 (> $generated@@88 0)))) (and ($generated@@68 ($generated@@59 $generated@@88) ($generated@@59 $generated@@89)) (=> ($generated@@67 $generated@@87 ($generated@@59 $generated@@88) ($generated@@59 $generated@@89)) ($generated@@68 ($generated@@59 $generated@@88) ($generated@@59 $generated@@90))))) (= ($generated@@85 ($generated@@59 $generated@@88) ($generated@@59 $generated@@89) ($generated@@59 $generated@@90))  (and (and (> $generated@@88 0) ($generated@@67 $generated@@87 ($generated@@59 $generated@@88) ($generated@@59 $generated@@89))) ($generated@@67 $generated@@87 ($generated@@59 $generated@@88) ($generated@@59 $generated@@90))))))
 :weight 3
 :pattern ( ($generated@@85 ($generated@@59 $generated@@88) ($generated@@59 $generated@@89) ($generated@@59 $generated@@90)))
))))
(assert (forall (($generated@@91 Int) ($generated@@92 Int) ) (!  (=> ($generated@@23 $generated@@91 $generated@@92) (and ($generated@@85 ($generated@@24 $generated@@91 $generated@@92) $generated@@91 $generated@@92) (forall (($generated@@93 Int) ) (!  (=> ($generated@@85 $generated@@93 $generated@@91 $generated@@92) (<= $generated@@93 ($generated@@24 $generated@@91 $generated@@92)))
 :pattern ( ($generated@@85 $generated@@93 $generated@@91 $generated@@92))
))))
 :pattern ( ($generated@@24 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (=> (or (not (= $generated@@94 $generated@@96)) (not true)) (=> (and ($generated@@29 $generated@@94 $generated@@95) ($generated@@29 $generated@@95 $generated@@96)) ($generated@@29 $generated@@94 $generated@@96)))
 :pattern ( ($generated@@29 $generated@@94 $generated@@95) ($generated@@29 $generated@@95 $generated@@96))
)))
(assert  (=> (<= 2 $generated@@19) (forall (($generated@@97 Int) ($generated@@98 Int) ($generated@@99 Int) ) (!  (=> (or ($generated@@86 $generated@@97 $generated@@98 $generated@@99) (and (< 2 $generated@@19) (and (> $generated@@98 0) (> $generated@@99 0)))) (and (=> (> $generated@@97 0) (and ($generated@@68 $generated@@97 $generated@@98) (=> ($generated@@67 $generated@@87 $generated@@97 $generated@@98) ($generated@@68 $generated@@97 $generated@@99)))) (= ($generated@@85 $generated@@97 $generated@@98 $generated@@99)  (and (and (> $generated@@97 0) ($generated@@67 $generated@@87 $generated@@97 $generated@@98)) ($generated@@67 $generated@@87 $generated@@97 $generated@@99)))))
 :pattern ( ($generated@@85 $generated@@97 $generated@@98 $generated@@99))
))))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@101 Int) ($generated@@102 Int) ($generated@@103 Int) ) (!  (=> (or ($generated@@70 ($generated@@59 $generated@@101) ($generated@@59 $generated@@102) ($generated@@59 $generated@@103)) (and (< 0 $generated@@19) ($generated@@7 ($generated@@61 $generated@@3 ($generated@@6  (and (> $generated@@101 0) (> $generated@@102 0))))))) (= ($generated@@69 ($generated@@59 $generated@@101) ($generated@@59 $generated@@102) ($generated@@59 $generated@@103)) (= ($generated@@59 ($generated@@100 ($generated@@59 $generated@@101) ($generated@@59 $generated@@102))) ($generated@@59 $generated@@103))))
 :weight 3
 :pattern ( ($generated@@69 ($generated@@59 $generated@@101) ($generated@@59 $generated@@102) ($generated@@59 $generated@@103)))
))))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@T) ) (! (= ($generated@@35 $generated@@105 ($generated@@64 $generated@@105 $generated@@104)) $generated@@104)
 :pattern ( ($generated@@64 $generated@@105 $generated@@104))
)))
(assert  (and (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (! (= ($generated@@106 $generated@@109 $generated@@110 $generated@@111 ($generated@@108 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@114 $generated@@115) $generated@@112)
 :weight 0
)) (and (forall (($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@121 $generated@@123) (= ($generated@@106 $generated@@116 $generated@@117 $generated@@118 ($generated@@108 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@121 $generated@@122 $generated@@119) $generated@@123 $generated@@124) ($generated@@106 $generated@@116 $generated@@117 $generated@@118 $generated@@120 $generated@@123 $generated@@124)))
 :weight 0
)) (forall (($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ) (!  (or (= $generated@@131 $generated@@133) (= ($generated@@106 $generated@@125 $generated@@126 $generated@@127 ($generated@@108 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@131 $generated@@128) $generated@@132 $generated@@133) ($generated@@106 $generated@@125 $generated@@126 $generated@@127 $generated@@129 $generated@@132 $generated@@133)))
 :weight 0
)))))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 Bool) ($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@7 ($generated@@106 $generated@@33 $generated@@31 $generated@@3 ($generated@@107 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))  (=> (and (or (not (= $generated@@138 $generated@@134)) (not true)) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@135 $generated@@138) $generated@@136)))) $generated@@137))
 :pattern ( ($generated@@106 $generated@@33 $generated@@31 $generated@@3 ($generated@@107 $generated@@134 $generated@@135 $generated@@136 $generated@@137) $generated@@138 $generated@@139))
)))
(assert (forall (($generated@@140 Int) ($generated@@141 Int) ) (! (= ($generated@@100 $generated@@140 $generated@@141) (* $generated@@140 $generated@@141))
 :pattern ( ($generated@@100 $generated@@140 $generated@@141))
)))
(assert (forall (($generated@@142 Int) ) (! (= ($generated@@64 $generated@@4 ($generated@@8 ($generated@@59 $generated@@142))) ($generated@@61 $generated@@32 ($generated@@64 $generated@@4 ($generated@@8 $generated@@142))))
 :pattern ( ($generated@@64 $generated@@4 ($generated@@8 ($generated@@59 $generated@@142))))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@T) ) (! (= ($generated@@64 $generated@@144 ($generated@@61 $generated@@144 $generated@@143)) ($generated@@61 $generated@@32 ($generated@@64 $generated@@144 $generated@@143)))
 :pattern ( ($generated@@64 $generated@@144 ($generated@@61 $generated@@144 $generated@@143)))
)))
(assert  (=> (<= 5 $generated@@19) (forall (($generated@@145 T@U) ($generated@@146 Int) ($generated@@147 Int) ) (!  (=> (or ($generated@@22 ($generated@@59 $generated@@146) ($generated@@59 $generated@@147)) (and (< 5 $generated@@19) (and ($generated@@21 $generated@@145) ($generated@@7 ($generated@@61 $generated@@3 ($generated@@6  (and (> $generated@@146 0) (> $generated@@147 0)))))))) (and ($generated@@23 ($generated@@59 $generated@@146) ($generated@@59 $generated@@147)) (= ($generated@@20 ($generated@@59 $generated@@146) ($generated@@59 $generated@@147)) (let (($generated@@148 ($generated@@24 ($generated@@59 $generated@@146) ($generated@@59 $generated@@147))))
$generated@@148))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@59 $generated@@146) ($generated@@59 $generated@@147)) ($generated@@21 $generated@@145))
))))
(assert  (=> (<= 0 $generated@@19) (forall (($generated@@149 Int) ($generated@@150 Int) ($generated@@151 Int) ) (!  (=> (or ($generated@@70 $generated@@149 $generated@@150 $generated@@151) (and (< 0 $generated@@19) (and (> $generated@@149 0) (> $generated@@150 0)))) (= ($generated@@69 $generated@@149 $generated@@150 $generated@@151) (= ($generated@@100 $generated@@149 $generated@@150) $generated@@151)))
 :pattern ( ($generated@@69 $generated@@149 $generated@@150 $generated@@151))
))))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (! ($generated@@79 $generated@@4 $generated@@153 $generated $generated@@152)
 :pattern ( ($generated@@79 $generated@@4 $generated@@153 $generated $generated@@152))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () Int)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@161  (=> (= $generated@@154 ($generated@@107 $generated@@155 $generated@@156 $generated@@1 false)) (=> (and (and (and (> $generated@@157 0) (> $generated@@158 0)) (and ($generated@@21 $generated@@159) ($generated@@160 $generated@@159))) (and (and (forall (($generated@@162 T@U) ) (!  (=> (and (or (not (= $generated@@162 $generated@@155)) (not true)) ($generated@@7 ($generated@@35 $generated@@3 ($generated@@30 $generated@@31 $generated@@32 ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@156 $generated@@162) $generated@@1)))) (= ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@159 $generated@@162) ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@156 $generated@@162)))
 :pattern ( ($generated@@30 $generated@@33 ($generated@@34 $generated@@31 $generated@@32) $generated@@159 $generated@@162))
)) ($generated@@29 $generated@@156 $generated@@159)) (and ($generated@@79 $generated@@4 ($generated@@8 $generated@@157) $generated $generated@@159) ($generated@@79 $generated@@4 ($generated@@8 $generated@@158) $generated $generated@@159)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (> $generated@@157 0)) (=> (= (ControlFlow 0 2) (- 0 1)) (> $generated@@158 0)))))))
(let (($generated@@163  (=> (and (and ($generated@@21 $generated@@156) ($generated@@160 $generated@@156)) (and (= 7 $generated@@19) (= (ControlFlow 0 4) 2))) $generated@@161)))
$generated@@163)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
