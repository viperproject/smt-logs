(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Gcd (Int Int) Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |_module.__default.Gcd#canCall| (Int Int) Bool)
(declare-fun |$let#0$canCall| (Int Int) Bool)
(declare-fun |$let#0_d| (Int Int) Int)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun _module.__default.Divides (Bool Int Int) Bool)
(declare-fun |_module.__default.Divides#canCall| (Int Int) Bool)
(declare-fun _module.__default.MulTriple (Int Int Int) Bool)
(declare-fun |_module.__default.MulTriple#canCall| (Int Int Int) Bool)
(declare-fun _module.__default.FinalStretch (Int Int Int Int Int) Int)
(declare-fun |_module.__default.FinalStretch#canCall| (Int Int Int Int Int) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun _module.__default.DividesBoth (Int Int Int) Bool)
(declare-fun |_module.__default.DividesBoth#canCall| (Int Int Int) Bool)
(declare-fun reveal__module._default.Divides () Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc)
)
(assert (= (Tag TInt) TagInt))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap T@U) (|a#0| Int) (|b#0| Int) ) (!  (=> (or (|_module.__default.Gcd#canCall| |a#0| |b#0|) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (> |a#0| 0) (> |b#0| 0))))) (and (|$let#0$canCall| |a#0| |b#0|) (= (_module.__default.Gcd |a#0| |b#0|) (let ((|d#0| (|$let#0_d| |a#0| |b#0|)))
|d#0|))))
 :pattern ( (_module.__default.Gcd |a#0| |b#0|) ($IsGoodHeap $Heap))
))))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|d#0@@0| Int) (|a#0@@0| Int) ) (!  (=> (or (|_module.__default.Divides#canCall| (LitInt |d#0@@0|) (LitInt |a#0@@0|)) (and (< 1 $FunctionContextHeight) (U_2_bool (Lit boolType (bool_2_U  (and (> |d#0@@0| 0) (> |a#0@@0| 0))))))) (and (forall ((|n#1| Int) ) (!  (=> (> |n#1| 0) (|_module.__default.MulTriple#canCall| |n#1| (LitInt |d#0@@0|) (LitInt |a#0@@0|)))
 :pattern ( (_module.__default.MulTriple |n#1| |d#0@@0| |a#0@@0|))
)) (= (_module.__default.Divides true (LitInt |d#0@@0|) (LitInt |a#0@@0|)) (exists ((|n#1@@0| Int) ) (!  (and (> |n#1@@0| 0) (_module.__default.MulTriple |n#1@@0| (LitInt |d#0@@0|) (LitInt |a#0@@0|)))
 :pattern ( (_module.__default.MulTriple |n#1@@0| |d#0@@0| |a#0@@0|))
)))))
 :weight 3
 :pattern ( (_module.__default.Divides true (LitInt |d#0@@0|) (LitInt |a#0@@0|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|d#0@@1| Int) (|a#0@@1| Int) ) (!  (=> (or (|_module.__default.Divides#canCall| |d#0@@1| |a#0@@1|) (and (< 1 $FunctionContextHeight) (and (> |d#0@@1| 0) (> |a#0@@1| 0)))) (and (forall ((|n#0| Int) ) (!  (=> (> |n#0| 0) (|_module.__default.MulTriple#canCall| |n#0| |d#0@@1| |a#0@@1|))
 :pattern ( (_module.__default.MulTriple |n#0| |d#0@@1| |a#0@@1|))
)) (= (_module.__default.Divides true |d#0@@1| |a#0@@1|) (exists ((|n#0@@0| Int) ) (!  (and (> |n#0@@0| 0) (_module.__default.MulTriple |n#0@@0| |d#0@@1| |a#0@@1|))
 :pattern ( (_module.__default.MulTriple |n#0@@0| |d#0@@1| |a#0@@1|))
)))))
 :pattern ( (_module.__default.Divides true |d#0@@1| |a#0@@1|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|pcThis#0| Int) (|pcThat#0| Int) (|a0#0| Int) (|b0#0| Int) (|b#0@@0| Int) ) (!  (=> (or (|_module.__default.FinalStretch#canCall| |pcThis#0| |pcThat#0| |a0#0| |b0#0| |b#0@@0|) (< 0 $FunctionContextHeight)) (= (_module.__default.FinalStretch |pcThis#0| |pcThat#0| |a0#0| |b0#0| |b#0@@0|) (ite  (or (not (= |pcThat#0| 3)) (not true)) 10 (ite (= |pcThis#0| (LitInt 3)) 0 (ite  (and (= |pcThis#0| (LitInt 2)) (= |a0#0| |b0#0|)) 1 (ite  (and (= |pcThis#0| (LitInt 1)) (= |a0#0| |b#0@@0|)) 2 (ite (= |pcThis#0| (LitInt 0)) 3 (ite  (and (= |pcThis#0| (LitInt 2)) (< |a0#0| |b0#0|)) 4 5))))))))
 :pattern ( (_module.__default.FinalStretch |pcThis#0| |pcThat#0| |a0#0| |b0#0| |b#0@@0|))
))))
(assert (forall ((h@@0 T@U) (k@@0 T@U) (v T@U) (t T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@0 k@@0) (=> ($IsAlloc T@@1 v t h@@0) ($IsAlloc T@@1 v t k@@0)))
 :pattern ( ($HeapSucc h@@0 k@@0) ($IsAlloc T@@1 v t h@@0))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|d#0@@2| Int) (|a#0@@2| Int) (|b#0@@1| Int) ) (!  (=> (or (|_module.__default.DividesBoth#canCall| (LitInt |d#0@@2|) (LitInt |a#0@@2|) (LitInt |b#0@@1|)) (and (< 2 $FunctionContextHeight) (U_2_bool (Lit boolType (bool_2_U  (and (> |a#0@@2| 0) (> |b#0@@1| 0))))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (> |d#0@@2| 0)))) (and (|_module.__default.Divides#canCall| (LitInt |d#0@@2|) (LitInt |a#0@@2|)) (=> (_module.__default.Divides reveal__module._default.Divides (LitInt |d#0@@2|) (LitInt |a#0@@2|)) (|_module.__default.Divides#canCall| (LitInt |d#0@@2|) (LitInt |b#0@@1|))))) (= (_module.__default.DividesBoth (LitInt |d#0@@2|) (LitInt |a#0@@2|) (LitInt |b#0@@1|))  (and (and (> |d#0@@2| 0) (_module.__default.Divides reveal__module._default.Divides (LitInt |d#0@@2|) (LitInt |a#0@@2|))) (_module.__default.Divides reveal__module._default.Divides (LitInt |d#0@@2|) (LitInt |b#0@@1|))))))
 :weight 3
 :pattern ( (_module.__default.DividesBoth (LitInt |d#0@@2|) (LitInt |a#0@@2|) (LitInt |b#0@@1|)))
))))
(assert (forall ((a Int) (b Int) ) (!  (=> (|$let#0$canCall| a b) (and (_module.__default.DividesBoth (|$let#0_d| a b) a b) (forall ((|m#0| Int) ) (!  (=> (_module.__default.DividesBoth |m#0| a b) (<= |m#0| (|$let#0_d| a b)))
 :pattern ( (_module.__default.DividesBoth |m#0| a b))
))))
 :pattern ( (|$let#0_d| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|d#0@@3| Int) (|a#0@@3| Int) (|b#0@@2| Int) ) (!  (=> (or (|_module.__default.DividesBoth#canCall| |d#0@@3| |a#0@@3| |b#0@@2|) (and (< 2 $FunctionContextHeight) (and (> |a#0@@3| 0) (> |b#0@@2| 0)))) (and (=> (> |d#0@@3| 0) (and (|_module.__default.Divides#canCall| |d#0@@3| |a#0@@3|) (=> (_module.__default.Divides reveal__module._default.Divides |d#0@@3| |a#0@@3|) (|_module.__default.Divides#canCall| |d#0@@3| |b#0@@2|)))) (= (_module.__default.DividesBoth |d#0@@3| |a#0@@3| |b#0@@2|)  (and (and (> |d#0@@3| 0) (_module.__default.Divides reveal__module._default.Divides |d#0@@3| |a#0@@3|)) (_module.__default.Divides reveal__module._default.Divides |d#0@@3| |b#0@@2|)))))
 :pattern ( (_module.__default.DividesBoth |d#0@@3| |a#0@@3| |b#0@@2|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0@@1| Int) (|d#0@@4| Int) (|a#0@@4| Int) ) (!  (=> (or (|_module.__default.MulTriple#canCall| (LitInt |n#0@@1|) (LitInt |d#0@@4|) (LitInt |a#0@@4|)) (and (< 0 $FunctionContextHeight) (U_2_bool (Lit boolType (bool_2_U  (and (> |n#0@@1| 0) (> |d#0@@4| 0))))))) (= (_module.__default.MulTriple (LitInt |n#0@@1|) (LitInt |d#0@@4|) (LitInt |a#0@@4|)) (= (LitInt (Mul (LitInt |n#0@@1|) (LitInt |d#0@@4|))) (LitInt |a#0@@4|))))
 :weight 3
 :pattern ( (_module.__default.MulTriple (LitInt |n#0@@1|) (LitInt |d#0@@4|) (LitInt |a#0@@4|)))
))))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|pcThis#0@@0| Int) (|pcThat#0@@0| Int) (|a0#0@@0| Int) (|b0#0@@0| Int) (|b#0@@3| Int) ) (!  (=> (or (|_module.__default.FinalStretch#canCall| (LitInt |pcThis#0@@0|) (LitInt |pcThat#0@@0|) (LitInt |a0#0@@0|) (LitInt |b0#0@@0|) (LitInt |b#0@@3|)) (< 0 $FunctionContextHeight)) (= (_module.__default.FinalStretch (LitInt |pcThis#0@@0|) (LitInt |pcThat#0@@0|) (LitInt |a0#0@@0|) (LitInt |b0#0@@0|) (LitInt |b#0@@3|)) (ite  (or (not (= |pcThat#0@@0| 3)) (not true)) 10 (ite (= (LitInt |pcThis#0@@0|) (LitInt 3)) 0 (ite  (and (= (LitInt |pcThis#0@@0|) (LitInt 2)) (= (LitInt |a0#0@@0|) (LitInt |b0#0@@0|))) 1 (ite  (and (= (LitInt |pcThis#0@@0|) (LitInt 1)) (= (LitInt |a0#0@@0|) (LitInt |b#0@@3|))) 2 (ite (= (LitInt |pcThis#0@@0|) (LitInt 0)) 3 (ite  (and (= (LitInt |pcThis#0@@0|) (LitInt 2)) (< |a0#0@@0| |b0#0@@0|)) 4 5))))))))
 :weight 3
 :pattern ( (_module.__default.FinalStretch (LitInt |pcThis#0@@0|) (LitInt |pcThat#0@@0|) (LitInt |a0#0@@0|) (LitInt |b0#0@@0|) (LitInt |b#0@@3|)))
))))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@8)) (Lit BoxType ($Box T@@3 x@@8)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@8)))
)))
(assert  (=> (<= 5 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|a#0@@5| Int) (|b#0@@4| Int) ) (!  (=> (or (|_module.__default.Gcd#canCall| (LitInt |a#0@@5|) (LitInt |b#0@@4|)) (and (< 5 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@0) (U_2_bool (Lit boolType (bool_2_U  (and (> |a#0@@5| 0) (> |b#0@@4| 0)))))))) (and (|$let#0$canCall| (LitInt |a#0@@5|) (LitInt |b#0@@4|)) (= (_module.__default.Gcd (LitInt |a#0@@5|) (LitInt |b#0@@4|)) (let ((|d#1| (|$let#0_d| (LitInt |a#0@@5|) (LitInt |b#0@@4|))))
|d#1|))))
 :weight 3
 :pattern ( (_module.__default.Gcd (LitInt |a#0@@5|) (LitInt |b#0@@4|)) ($IsGoodHeap $Heap@@0))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|n#0@@2| Int) (|d#0@@5| Int) (|a#0@@6| Int) ) (!  (=> (or (|_module.__default.MulTriple#canCall| |n#0@@2| |d#0@@5| |a#0@@6|) (and (< 0 $FunctionContextHeight) (and (> |n#0@@2| 0) (> |d#0@@5| 0)))) (= (_module.__default.MulTriple |n#0@@2| |d#0@@5| |a#0@@6|) (= (Mul |n#0@@2| |d#0@@5|) |a#0@@6|)))
 :pattern ( (_module.__default.MulTriple |n#0@@2| |d#0@@5| |a#0@@6|))
))))
(assert (forall ((h@@1 T@U) (v@@0 T@U) ) (! ($IsAlloc intType v@@0 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@0 TInt h@@1))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 TInt)
 :pattern ( ($Is intType v@@1 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |a#0@0| () Int)
(declare-fun |b#0@0| () Int)
(declare-fun |pc1#0@0| () Int)
(declare-fun |b1#0@1| () Int)
(declare-fun |a1#0@1| () Int)
(declare-fun |pc0#0@0| () Int)
(declare-fun |a0#0@1| () Int)
(declare-fun |b0#0@1| () Int)
(declare-fun |budget0#0@1| () Int)
(declare-fun |budget1#0@1| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |A#0| () Int)
(declare-fun |B#0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |gcd#0@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |a#0@1| () Int)
(declare-fun |b#0@1| () Int)
(declare-fun |$decr$loop#01@1| () Int)
(declare-fun |pc0#0@3| () Int)
(declare-fun |pc1#0@3| () Int)
(declare-fun |a0#0@2| () Int)
(declare-fun |b0#0@2| () Int)
(declare-fun |b1#0@2| () Int)
(declare-fun |a1#0@2| () Int)
(declare-fun |$decr$loop#02@1| () Int)
(declare-fun |$decr$loop#03@1| () Int)
(declare-fun |budget0#0@2| () Int)
(declare-fun |budget1#0@2| () Int)
(declare-fun |$decr$loop#04@1| () Int)
(declare-fun |pc1#0@1| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |call4formal@outThis#0@0| () Int)
(declare-fun |call5formal@outThat#0@0| () Int)
(declare-fun null () T@U)
(declare-fun |pc1#0@2| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |call4formal@outThis#0@0@@0| () Int)
(declare-fun |call5formal@outThat#0@0@@0| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |a##0_2_2@1| () Int)
(declare-fun $Heap@6 () T@U)
(declare-fun |$rhs#0_2_0@1| () Int)
(declare-fun |$rhs#0_2_1@1| () Int)
(declare-fun $Heap@7 () T@U)
(declare-fun |call4formal@outThis#0@0@@1| () Int)
(declare-fun |call5formal@outThat#0@0@@1| () Int)
(declare-fun |pc0#0@1| () Int)
(declare-fun $Heap@8 () T@U)
(declare-fun |call4formal@outThis#0@0@@2| () Int)
(declare-fun |call5formal@outThat#0@0@@2| () Int)
(declare-fun |pc0#0@2| () Int)
(declare-fun $Heap@9 () T@U)
(declare-fun |call4formal@outThis#0@0@@3| () Int)
(declare-fun |call5formal@outThat#0@0@@3| () Int)
(declare-fun $Heap@10 () T@U)
(declare-fun |$rhs#0_7_0@1| () Int)
(declare-fun |$rhs#0_7_1@1| () Int)
(declare-fun $Heap@11 () T@U)
(declare-fun |call4formal@outThis#0@0@@4| () Int)
(declare-fun |call5formal@outThat#0@0@@4| () Int)
(declare-fun |$rhs#0_3_1@1| () Int)
(declare-fun |$rhs#0_4_1@1| () Int)
(declare-fun |$rhs#0_8_1@1| () Int)
(declare-fun |$rhs#0_9_1@1| () Int)
(declare-fun |$rhs#2@0| () Int)
(declare-fun |$rhs#3@0| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |$decr_init$loop#02@0| () Int)
(declare-fun |$decr_init$loop#03@0| () Int)
(declare-fun |$decr_init$loop#04@0| () Int)
(declare-fun $Heap@@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$decr_init$loop#01@0| () Int)
(declare-fun |budget0#0@0| () Int)
(declare-fun |budget1#0@0| () Int)
(declare-fun |a0#0@0| () Int)
(declare-fun |b0#0@0| () Int)
(declare-fun |b1#0@0| () Int)
(declare-fun |a1#0@0| () Int)
(declare-fun |budget0#1@0| () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 195) (let ((anon58_correct true))
(let ((anon138_Else_correct  (=> (and (<= |a#0@0| |b#0@0|) (= (ControlFlow 0 101) 99)) anon58_correct)))
(let ((anon138_Then_correct  (=> (and (< |b#0@0| |a#0@0|) (= (ControlFlow 0 100) 99)) anon58_correct)))
(let ((anon137_Else_correct  (=> (<= |b#0@0| |a#0@0|) (and (=> (= (ControlFlow 0 103) 100) anon138_Then_correct) (=> (= (ControlFlow 0 103) 101) anon138_Else_correct)))))
(let ((anon137_Then_correct  (=> (< |a#0@0| |b#0@0|) (and (=> (= (ControlFlow 0 102) 100) anon138_Then_correct) (=> (= (ControlFlow 0 102) 101) anon138_Else_correct)))))
(let ((anon52_correct  (and (=> (= (ControlFlow 0 104) 102) anon137_Then_correct) (=> (= (ControlFlow 0 104) 103) anon137_Else_correct))))
(let ((anon136_Else_correct  (=> (and (not (and (and (= |pc1#0@0| (LitInt 2)) (< |b1#0@1| |a1#0@1|)) (not (< |b#0@0| |a#0@0|)))) (= (ControlFlow 0 106) 104)) anon52_correct)))
(let ((anon136_Then_correct  (=> (and (and (and (= |pc1#0@0| (LitInt 2)) (< |b1#0@1| |a1#0@1|)) (not (< |b#0@0| |a#0@0|))) (= (ControlFlow 0 105) 104)) anon52_correct)))
(let ((anon135_Else_correct  (=> (not (and (= |pc1#0@0| (LitInt 2)) (< |b1#0@1| |a1#0@1|))) (and (=> (= (ControlFlow 0 108) 105) anon136_Then_correct) (=> (= (ControlFlow 0 108) 106) anon136_Else_correct)))))
(let ((anon135_Then_correct  (=> (and (= |pc1#0@0| (LitInt 2)) (< |b1#0@1| |a1#0@1|)) (and (=> (= (ControlFlow 0 107) 105) anon136_Then_correct) (=> (= (ControlFlow 0 107) 106) anon136_Else_correct)))))
(let ((anon134_Else_correct  (=> (or (not (= |pc1#0@0| (LitInt 2))) (not true)) (and (=> (= (ControlFlow 0 110) 107) anon135_Then_correct) (=> (= (ControlFlow 0 110) 108) anon135_Else_correct)))))
(let ((anon134_Then_correct  (=> (= |pc1#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 109) 107) anon135_Then_correct) (=> (= (ControlFlow 0 109) 108) anon135_Else_correct)))))
(let ((anon133_Else_correct  (=> (not (and (and (= |pc0#0@0| (LitInt 2)) (< |a0#0@1| |b0#0@1|)) (not (< |a#0@0| |b#0@0|)))) (and (=> (= (ControlFlow 0 112) 109) anon134_Then_correct) (=> (= (ControlFlow 0 112) 110) anon134_Else_correct)))))
(let ((anon133_Then_correct  (=> (and (and (= |pc0#0@0| (LitInt 2)) (< |a0#0@1| |b0#0@1|)) (not (< |a#0@0| |b#0@0|))) (and (=> (= (ControlFlow 0 111) 109) anon134_Then_correct) (=> (= (ControlFlow 0 111) 110) anon134_Else_correct)))))
(let ((anon132_Else_correct  (=> (not (and (= |pc0#0@0| (LitInt 2)) (< |a0#0@1| |b0#0@1|))) (and (=> (= (ControlFlow 0 114) 111) anon133_Then_correct) (=> (= (ControlFlow 0 114) 112) anon133_Else_correct)))))
(let ((anon132_Then_correct  (=> (and (= |pc0#0@0| (LitInt 2)) (< |a0#0@1| |b0#0@1|)) (and (=> (= (ControlFlow 0 113) 111) anon133_Then_correct) (=> (= (ControlFlow 0 113) 112) anon133_Else_correct)))))
(let ((anon131_Else_correct  (=> (or (not (= |pc0#0@0| (LitInt 2))) (not true)) (and (=> (= (ControlFlow 0 116) 113) anon132_Then_correct) (=> (= (ControlFlow 0 116) 114) anon132_Else_correct)))))
(let ((anon131_Then_correct  (=> (= |pc0#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 115) 113) anon132_Then_correct) (=> (= (ControlFlow 0 115) 114) anon132_Else_correct)))))
(let ((anon38_correct  (=> (and (and (and (and (and (<= (LitInt 0) |budget0#0@1|) (<= (LitInt 0) |budget1#0@1|)) (or (or (= |pc0#0@0| (LitInt 3)) (= |pc1#0@0| (LitInt 3))) (<= (LitInt 1) (+ |budget0#0@1| |budget1#0@1|)))) (and ($IsAlloc intType (int_2_U |pc0#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |pc1#0@0|) TInt $Heap@0))) (and (and ($IsAlloc intType (int_2_U |a0#0@1|) TInt $Heap@0) ($IsAlloc intType (int_2_U |b0#0@1|) TInt $Heap@0)) (and ($IsAlloc intType (int_2_U |b#0@0|) TInt $Heap@0) (|_module.__default.FinalStretch#canCall| |pc0#0@0| |pc1#0@0| |a0#0@1| |b0#0@1| |b#0@0|)))) (and (and (and ($IsAlloc intType (int_2_U |pc1#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |pc0#0@0|) TInt $Heap@0)) (and ($IsAlloc intType (int_2_U |b1#0@1|) TInt $Heap@0) ($IsAlloc intType (int_2_U |a1#0@1|) TInt $Heap@0))) (and (and ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@0) (|_module.__default.FinalStretch#canCall| |pc1#0@0| |pc0#0@0| |b1#0@1| |a1#0@1| |a#0@0|)) (and (|_module.__default.FinalStretch#canCall| |pc0#0@0| |pc1#0@0| |a0#0@1| |b0#0@1| |b#0@0|) (|_module.__default.FinalStretch#canCall| |pc1#0@0| |pc0#0@0| |b1#0@1| |a1#0@1| |a#0@0|))))) (and (=> (= (ControlFlow 0 117) 115) anon131_Then_correct) (=> (= (ControlFlow 0 117) 116) anon131_Else_correct)))))
(let ((anon130_Else_correct  (=> (and (or (= |pc0#0@0| (LitInt 3)) (= |pc1#0@0| (LitInt 3))) (= (ControlFlow 0 120) 117)) anon38_correct)))
(let ((anon130_Then_correct  (=> (and (not (or (= |pc0#0@0| (LitInt 3)) (= |pc1#0@0| (LitInt 3)))) (= (ControlFlow 0 119) 117)) anon38_correct)))
(let ((anon129_Else_correct  (=> (= |pc0#0@0| (LitInt 3)) (and (=> (= (ControlFlow 0 122) 119) anon130_Then_correct) (=> (= (ControlFlow 0 122) 120) anon130_Else_correct)))))
(let ((anon129_Then_correct  (=> (or (not (= |pc0#0@0| (LitInt 3))) (not true)) (and (=> (= (ControlFlow 0 121) 119) anon130_Then_correct) (=> (= (ControlFlow 0 121) 120) anon130_Else_correct)))))
(let ((anon128_Then_correct  (=> (and (<= (LitInt 0) |budget0#0@1|) (<= (LitInt 0) |budget1#0@1|)) (and (=> (= (ControlFlow 0 123) 121) anon129_Then_correct) (=> (= (ControlFlow 0 123) 122) anon129_Else_correct)))))
(let ((anon128_Else_correct  (=> (and (not (and (<= (LitInt 0) |budget0#0@1|) (<= (LitInt 0) |budget1#0@1|))) (= (ControlFlow 0 118) 117)) anon38_correct)))
(let ((anon127_Else_correct  (=> (< |budget0#0@1| (LitInt 0)) (and (=> (= (ControlFlow 0 125) 123) anon128_Then_correct) (=> (= (ControlFlow 0 125) 118) anon128_Else_correct)))))
(let ((anon127_Then_correct  (=> (<= (LitInt 0) |budget0#0@1|) (and (=> (= (ControlFlow 0 124) 123) anon128_Then_correct) (=> (= (ControlFlow 0 124) 118) anon128_Else_correct)))))
(let ((anon31_correct  (=> (and (=> (= |pc0#0@0| (LitInt 3)) (= |a#0@0| |b#0@0|)) (=> (= |pc1#0@0| (LitInt 3)) (= |a#0@0| |b#0@0|))) (and (=> (= (ControlFlow 0 126) 124) anon127_Then_correct) (=> (= (ControlFlow 0 126) 125) anon127_Else_correct)))))
(let ((anon126_Else_correct  (=> (and (or (not (= |pc1#0@0| (LitInt 3))) (not true)) (= (ControlFlow 0 129) 126)) anon31_correct)))
(let ((anon126_Then_correct  (=> (and (= |pc1#0@0| (LitInt 3)) (= (ControlFlow 0 128) 126)) anon31_correct)))
(let ((anon125_Then_correct  (=> (=> (= |pc0#0@0| (LitInt 3)) (= |a#0@0| |b#0@0|)) (and (=> (= (ControlFlow 0 130) 128) anon126_Then_correct) (=> (= (ControlFlow 0 130) 129) anon126_Else_correct)))))
(let ((anon125_Else_correct  (=> (and (not (=> (= |pc0#0@0| (LitInt 3)) (= |a#0@0| |b#0@0|))) (= (ControlFlow 0 127) 126)) anon31_correct)))
(let ((anon124_Else_correct  (=> (or (not (= |pc0#0@0| (LitInt 3))) (not true)) (and (=> (= (ControlFlow 0 132) 130) anon125_Then_correct) (=> (= (ControlFlow 0 132) 127) anon125_Else_correct)))))
(let ((anon124_Then_correct  (=> (= |pc0#0@0| (LitInt 3)) (and (=> (= (ControlFlow 0 131) 130) anon125_Then_correct) (=> (= (ControlFlow 0 131) 127) anon125_Else_correct)))))
(let ((anon26_correct  (=> (=> (= |pc1#0@0| (LitInt 2)) (and (<= |a#0@0| |a1#0@1|) (=> (<= |a1#0@1| |b1#0@1|) (= |a1#0@1| |a#0@0|)))) (and (=> (= (ControlFlow 0 133) 131) anon124_Then_correct) (=> (= (ControlFlow 0 133) 132) anon124_Else_correct)))))
(let ((anon123_Else_correct  (=> (and (< |b1#0@1| |a1#0@1|) (= (ControlFlow 0 137) 133)) anon26_correct)))
(let ((anon123_Then_correct  (=> (and (<= |a1#0@1| |b1#0@1|) (= (ControlFlow 0 136) 133)) anon26_correct)))
(let ((anon122_Then_correct  (=> (<= |a#0@0| |a1#0@1|) (and (=> (= (ControlFlow 0 138) 136) anon123_Then_correct) (=> (= (ControlFlow 0 138) 137) anon123_Else_correct)))))
(let ((anon122_Else_correct  (=> (and (< |a1#0@1| |a#0@0|) (= (ControlFlow 0 135) 133)) anon26_correct)))
(let ((anon121_Then_correct  (=> (= |pc1#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 139) 138) anon122_Then_correct) (=> (= (ControlFlow 0 139) 135) anon122_Else_correct)))))
(let ((anon121_Else_correct  (=> (and (or (not (= |pc1#0@0| (LitInt 2))) (not true)) (= (ControlFlow 0 134) 133)) anon26_correct)))
(let ((anon22_correct  (=> (=> (= |pc0#0@0| (LitInt 2)) (and (<= |b#0@0| |b0#0@1|) (=> (<= |b0#0@1| |a0#0@1|) (= |b0#0@1| |b#0@0|)))) (and (=> (= (ControlFlow 0 140) 139) anon121_Then_correct) (=> (= (ControlFlow 0 140) 134) anon121_Else_correct)))))
(let ((anon120_Else_correct  (=> (and (< |a0#0@1| |b0#0@1|) (= (ControlFlow 0 144) 140)) anon22_correct)))
(let ((anon120_Then_correct  (=> (and (<= |b0#0@1| |a0#0@1|) (= (ControlFlow 0 143) 140)) anon22_correct)))
(let ((anon119_Then_correct  (=> (<= |b#0@0| |b0#0@1|) (and (=> (= (ControlFlow 0 145) 143) anon120_Then_correct) (=> (= (ControlFlow 0 145) 144) anon120_Else_correct)))))
(let ((anon119_Else_correct  (=> (and (< |b0#0@1| |b#0@0|) (= (ControlFlow 0 142) 140)) anon22_correct)))
(let ((anon118_Then_correct  (=> (= |pc0#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 146) 145) anon119_Then_correct) (=> (= (ControlFlow 0 146) 142) anon119_Else_correct)))))
(let ((anon118_Else_correct  (=> (and (or (not (= |pc0#0@0| (LitInt 2))) (not true)) (= (ControlFlow 0 141) 140)) anon22_correct)))
(let ((anon18_correct  (=> (and (or (= |pc0#0@0| (LitInt 0)) (= |a0#0@1| |a#0@0|)) (or (= |pc1#0@0| (LitInt 0)) (= |b1#0@1| |b#0@0|))) (and (=> (= (ControlFlow 0 147) 146) anon118_Then_correct) (=> (= (ControlFlow 0 147) 141) anon118_Else_correct)))))
(let ((anon117_Else_correct  (=> (and (= |pc1#0@0| (LitInt 0)) (= (ControlFlow 0 150) 147)) anon18_correct)))
(let ((anon117_Then_correct  (=> (and (or (not (= |pc1#0@0| (LitInt 0))) (not true)) (= (ControlFlow 0 149) 147)) anon18_correct)))
(let ((anon116_Then_correct  (=> (or (= |pc0#0@0| (LitInt 0)) (= |a0#0@1| |a#0@0|)) (and (=> (= (ControlFlow 0 151) 149) anon117_Then_correct) (=> (= (ControlFlow 0 151) 150) anon117_Else_correct)))))
(let ((anon116_Else_correct  (=> (and (not (or (= |pc0#0@0| (LitInt 0)) (= |a0#0@1| |a#0@0|))) (= (ControlFlow 0 148) 147)) anon18_correct)))
(let ((anon115_Else_correct  (=> (= |pc0#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 153) 151) anon116_Then_correct) (=> (= (ControlFlow 0 153) 148) anon116_Else_correct)))))
(let ((anon115_Then_correct  (=> (or (not (= |pc0#0@0| (LitInt 0))) (not true)) (and (=> (= (ControlFlow 0 152) 151) anon116_Then_correct) (=> (= (ControlFlow 0 152) 148) anon116_Else_correct)))))
(let ((anon13_correct  (=> (and (and (<= (LitInt 0) |pc0#0@0|) (< |pc0#0@0| 4)) (and (<= (LitInt 0) |pc1#0@0|) (< |pc1#0@0| 4))) (and (=> (= (ControlFlow 0 154) 152) anon115_Then_correct) (=> (= (ControlFlow 0 154) 153) anon115_Else_correct)))))
(let ((anon114_Else_correct  (=> (and (< |pc1#0@0| (LitInt 0)) (= (ControlFlow 0 157) 154)) anon13_correct)))
(let ((anon114_Then_correct  (=> (and (<= (LitInt 0) |pc1#0@0|) (= (ControlFlow 0 156) 154)) anon13_correct)))
(let ((anon113_Then_correct  (=> (and (<= (LitInt 0) |pc0#0@0|) (< |pc0#0@0| 4)) (and (=> (= (ControlFlow 0 158) 156) anon114_Then_correct) (=> (= (ControlFlow 0 158) 157) anon114_Else_correct)))))
(let ((anon113_Else_correct  (=> (and (not (and (<= (LitInt 0) |pc0#0@0|) (< |pc0#0@0| 4))) (= (ControlFlow 0 155) 154)) anon13_correct)))
(let ((anon112_Else_correct  (=> (< |pc0#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 160) 158) anon113_Then_correct) (=> (= (ControlFlow 0 160) 155) anon113_Else_correct)))))
(let ((anon112_Then_correct  (=> (<= (LitInt 0) |pc0#0@0|) (and (=> (= (ControlFlow 0 159) 158) anon113_Then_correct) (=> (= (ControlFlow 0 159) 155) anon113_Else_correct)))))
(let ((anon8_correct  (=> (and (and (< 0 |a#0@0|) (< 0 |b#0@0|)) (and ($IsAlloc intType (int_2_U |A#0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |B#0|) TInt $Heap@0))) (and (=> (= (ControlFlow 0 161) (- 0 165)) (> |A#0| 0)) (and (=> (= (ControlFlow 0 161) (- 0 164)) (> |B#0| 0)) (=> (|_module.__default.Gcd#canCall| |A#0| |B#0|) (=> (and ($IsAlloc intType (int_2_U |a#0@0|) TInt $Heap@0) ($IsAlloc intType (int_2_U |b#0@0|) TInt $Heap@0)) (and (=> (= (ControlFlow 0 161) (- 0 163)) (> |a#0@0| 0)) (and (=> (= (ControlFlow 0 161) (- 0 162)) (> |b#0@0| 0)) (=> (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|) (=> (and (and (|_module.__default.Gcd#canCall| |A#0| |B#0|) (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|)) (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |a#0@0| |b#0@0|))) (and (=> (= (ControlFlow 0 161) 159) anon112_Then_correct) (=> (= (ControlFlow 0 161) 160) anon112_Else_correct)))))))))))))
(let ((anon111_Else_correct  (=> (and (<= |a#0@0| 0) (= (ControlFlow 0 167) 161)) anon8_correct)))
(let ((anon111_Then_correct  (=> (and (< 0 |a#0@0|) (= (ControlFlow 0 166) 161)) anon8_correct)))
(let ((anon110_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 168) 166) anon111_Then_correct) (=> (= (ControlFlow 0 168) 167) anon111_Else_correct)))))
(let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 92) (- 0 91)) (= |gcd#0@0| (_module.__default.Gcd |A#0| |B#0|)))))
(let ((anon140_Then_correct  (=> (and (= |pc0#0@0| (LitInt 3)) (= |pc1#0@0| (LitInt 3))) (and (=> (= (ControlFlow 0 93) (- 0 94)) (> |a#0@0| 0)) (=> (> |a#0@0| 0) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (|_module.__default.Gcd#canCall| |a#0@0| |a#0@0|)) (and (and (= (_module.__default.Gcd |a#0@0| |a#0@0|) |a#0@0|) (= $Heap@0 $Heap@1)) (and (= |gcd#0@0| |a#0@0|) (= (ControlFlow 0 93) 92)))) GeneratedUnifiedExit_correct))))))
(let ((anon105_correct  (and (=> (= (ControlFlow 0 6) (- 0 29)) (or (<= 0 |$decr$loop#00@1|) (= (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 6) (- 0 28)) (or (or (<= 0 |$decr$loop#01@1|) (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|)) (= (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|))) (=> (or (or (<= 0 |$decr$loop#01@1|) (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|)) (= (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|)) (and (=> (= (ControlFlow 0 6) (- 0 27)) (or (or (or (<= 0 |$decr$loop#02@1|) (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|)) (< (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|)) (= (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|))) (=> (or (or (or (<= 0 |$decr$loop#02@1|) (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|)) (< (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|)) (= (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|)) (and (=> (= (ControlFlow 0 6) (- 0 26)) (or (or (or (or (<= 0 |$decr$loop#03@1|) (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|)) (< (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|)) (< (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|)) (= (+ (ite (< |a#0@1| |b#0@1|) |budget0#0@2| 0) (ite (< |b#0@1| |a#0@1|) |budget1#0@2| 0)) |$decr$loop#03@1|))) (=> (or (or (or (or (<= 0 |$decr$loop#03@1|) (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|)) (< (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|)) (< (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|)) (= (+ (ite (< |a#0@1| |b#0@1|) |budget0#0@2| 0) (ite (< |b#0@1| |a#0@1|) |budget1#0@2| 0)) |$decr$loop#03@1|)) (and (=> (= (ControlFlow 0 6) (- 0 25)) (or (or (or (or (or (<= 0 |$decr$loop#04@1|) (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|)) (< (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|)) (< (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|)) (< (+ (ite (< |a#0@1| |b#0@1|) |budget0#0@2| 0) (ite (< |b#0@1| |a#0@1|) |budget1#0@2| 0)) |$decr$loop#03@1|)) (= (- (- 8 |pc0#0@3|) |pc1#0@3|) |$decr$loop#04@1|))) (=> (or (or (or (or (or (<= 0 |$decr$loop#04@1|) (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|)) (< (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|)) (< (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|)) (< (+ (ite (< |a#0@1| |b#0@1|) |budget0#0@2| 0) (ite (< |b#0@1| |a#0@1|) |budget1#0@2| 0)) |$decr$loop#03@1|)) (= (- (- 8 |pc0#0@3|) |pc1#0@3|) |$decr$loop#04@1|)) (and (=> (= (ControlFlow 0 6) (- 0 24)) (or (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|) (and (= (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|) (or (< (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|) (and (= (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|) (or (< (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|) (and (= (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|) (or (< (+ (ite (< |a#0@1| |b#0@1|) |budget0#0@2| 0) (ite (< |b#0@1| |a#0@1|) |budget1#0@2| 0)) |$decr$loop#03@1|) (and (= (+ (ite (< |a#0@1| |b#0@1|) |budget0#0@2| 0) (ite (< |b#0@1| |a#0@1|) |budget1#0@2| 0)) |$decr$loop#03@1|) (< (- (- 8 |pc0#0@3|) |pc1#0@3|) |$decr$loop#04@1|)))))))))) (=> (or (< (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|) (and (= (+ |a#0@1| |b#0@1|) |$decr$loop#00@1|) (or (< (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|) (and (= (+ (_module.__default.FinalStretch |pc0#0@3| |pc1#0@3| |a0#0@2| |b0#0@2| |b#0@1|) (_module.__default.FinalStretch |pc1#0@3| |pc0#0@3| |b1#0@2| |a1#0@2| |a#0@1|)) |$decr$loop#01@1|) (or (< (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|) (and (= (+ (ite  (and (and (= |pc0#0@3| (LitInt 2)) (< |a0#0@2| |b0#0@2|)) (not (< |a#0@1| |b#0@1|))) 1 0) (ite  (and (and (= |pc1#0@3| (LitInt 2)) (< |b1#0@2| |a1#0@2|)) (not (< |b#0@1| |a#0@1|))) 1 0)) |$decr$loop#02@1|) (or (< (+ (ite (< |a#0@1| |b#0@1|) |budget0#0@2| 0) (ite (< |b#0@1| |a#0@1|) |budget1#0@2| 0)) |$decr$loop#03@1|) (and (= (+ (ite (< |a#0@1| |b#0@1|) |budget0#0@2| 0) (ite (< |b#0@1| |a#0@1|) |budget1#0@2| 0)) |$decr$loop#03@1|) (< (- (- 8 |pc0#0@3|) |pc1#0@3|) |$decr$loop#04@1|))))))))) (=> (=> (< 0 |a#0@1|) (=> (< 0 |b#0@1|) (and (|_module.__default.Gcd#canCall| |A#0| |B#0|) (|_module.__default.Gcd#canCall| |a#0@1| |b#0@1|)))) (and (=> (= (ControlFlow 0 6) (- 0 23)) (=> |$w$loop#0@0| (< 0 |a#0@1|))) (=> (=> |$w$loop#0@0| (< 0 |a#0@1|)) (and (=> (= (ControlFlow 0 6) (- 0 22)) (=> |$w$loop#0@0| (< 0 |b#0@1|))) (=> (=> |$w$loop#0@0| (< 0 |b#0@1|)) (and (=> (= (ControlFlow 0 6) (- 0 21)) (=> |$w$loop#0@0| (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |a#0@1| |b#0@1|)))) (=> (=> |$w$loop#0@0| (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |a#0@1| |b#0@1|))) (and (=> (= (ControlFlow 0 6) (- 0 20)) (=> |$w$loop#0@0| (<= (LitInt 0) |pc0#0@3|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |pc0#0@3|)) (and (=> (= (ControlFlow 0 6) (- 0 19)) (=> |$w$loop#0@0| (< |pc0#0@3| 4))) (=> (=> |$w$loop#0@0| (< |pc0#0@3| 4)) (and (=> (= (ControlFlow 0 6) (- 0 18)) (=> |$w$loop#0@0| (<= (LitInt 0) |pc1#0@3|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |pc1#0@3|)) (and (=> (= (ControlFlow 0 6) (- 0 17)) (=> |$w$loop#0@0| (< |pc1#0@3| 4))) (=> (=> |$w$loop#0@0| (< |pc1#0@3| 4)) (and (=> (= (ControlFlow 0 6) (- 0 16)) (=> |$w$loop#0@0| (or (= |pc0#0@3| (LitInt 0)) (= |a0#0@2| |a#0@1|)))) (=> (=> |$w$loop#0@0| (or (= |pc0#0@3| (LitInt 0)) (= |a0#0@2| |a#0@1|))) (and (=> (= (ControlFlow 0 6) (- 0 15)) (=> |$w$loop#0@0| (or (= |pc1#0@3| (LitInt 0)) (= |b1#0@2| |b#0@1|)))) (=> (=> |$w$loop#0@0| (or (= |pc1#0@3| (LitInt 0)) (= |b1#0@2| |b#0@1|))) (and (=> (= (ControlFlow 0 6) (- 0 14)) (=> |$w$loop#0@0| (=> (= |pc0#0@3| (LitInt 2)) (<= |b#0@1| |b0#0@2|)))) (=> (=> |$w$loop#0@0| (=> (= |pc0#0@3| (LitInt 2)) (<= |b#0@1| |b0#0@2|))) (and (=> (= (ControlFlow 0 6) (- 0 13)) (=> |$w$loop#0@0| (=> (= |pc0#0@3| (LitInt 2)) (=> (<= |b0#0@2| |a0#0@2|) (= |b0#0@2| |b#0@1|))))) (=> (=> |$w$loop#0@0| (=> (= |pc0#0@3| (LitInt 2)) (=> (<= |b0#0@2| |a0#0@2|) (= |b0#0@2| |b#0@1|)))) (and (=> (= (ControlFlow 0 6) (- 0 12)) (=> |$w$loop#0@0| (=> (= |pc1#0@3| (LitInt 2)) (<= |a#0@1| |a1#0@2|)))) (=> (=> |$w$loop#0@0| (=> (= |pc1#0@3| (LitInt 2)) (<= |a#0@1| |a1#0@2|))) (and (=> (= (ControlFlow 0 6) (- 0 11)) (=> |$w$loop#0@0| (=> (= |pc1#0@3| (LitInt 2)) (=> (<= |a1#0@2| |b1#0@2|) (= |a1#0@2| |a#0@1|))))) (=> (=> |$w$loop#0@0| (=> (= |pc1#0@3| (LitInt 2)) (=> (<= |a1#0@2| |b1#0@2|) (= |a1#0@2| |a#0@1|)))) (and (=> (= (ControlFlow 0 6) (- 0 10)) (=> |$w$loop#0@0| (=> (= |pc0#0@3| (LitInt 3)) (= |a#0@1| |b#0@1|)))) (=> (=> |$w$loop#0@0| (=> (= |pc0#0@3| (LitInt 3)) (= |a#0@1| |b#0@1|))) (and (=> (= (ControlFlow 0 6) (- 0 9)) (=> |$w$loop#0@0| (=> (= |pc1#0@3| (LitInt 3)) (= |a#0@1| |b#0@1|)))) (=> (=> |$w$loop#0@0| (=> (= |pc1#0@3| (LitInt 3)) (= |a#0@1| |b#0@1|))) (and (=> (= (ControlFlow 0 6) (- 0 8)) (=> |$w$loop#0@0| (<= (LitInt 0) |budget0#0@2|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |budget0#0@2|)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (=> |$w$loop#0@0| (<= (LitInt 0) |budget1#0@2|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |budget1#0@2|)) (=> (= (ControlFlow 0 6) (- 0 5)) (=> |$w$loop#0@0| (or (or (= |pc0#0@3| (LitInt 3)) (= |pc1#0@3| (LitInt 3))) (<= (LitInt 1) (+ |budget0#0@2| |budget1#0@2|))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((anon103_correct  (=> (and (and (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3)))) (= |b1#0@1| |a1#0@1|)) (= |pc1#0@1| (LitInt 3))) (and (=> (= (ControlFlow 0 82) (- 0 83)) (or (= |pc0#0@0| (LitInt 3)) (< 0 |budget1#0@1|))) (=> (or (= |pc0#0@0| (LitInt 3)) (< 0 |budget1#0@1|)) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and (and (= |call4formal@outThis#0@0| (ite (< 0 |budget1#0@1|) (- |budget1#0@1| 1) |budget1#0@1|)) (=> (= |pc0#0@0| (LitInt 3)) (= |call5formal@outThat#0@0| |budget0#0@1|))) (and (=> (or (not (= |pc0#0@0| (LitInt 3))) (not true)) (> |call5formal@outThat#0@0| 0)) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@0))
)))) (and (and ($HeapSucc $Heap@0 $Heap@2) (= |pc1#0@3| |pc1#0@1|)) (and (= |budget0#0@2| |call5formal@outThat#0@0|) (= |budget1#0@2| |call4formal@outThis#0@0|)))) (and (and (and (= |b#0@1| |b#0@0|) (= |a1#0@2| |a1#0@1|)) (and (= |b1#0@2| |b1#0@1|) (= |pc0#0@3| |pc0#0@0|))) (and (and (= |a#0@1| |a#0@0|) (= |b0#0@2| |b0#0@1|)) (and (= |a0#0@2| |a0#0@1|) (= (ControlFlow 0 82) 6))))) anon105_correct)))))))
(let ((anon168_Else_correct  (=> (and (not (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3))))) (= (ControlFlow 0 85) 82)) anon103_correct)))
(let ((anon168_Then_correct  (=> (and (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3)))) (= (ControlFlow 0 84) 82)) anon103_correct)))
(let ((anon167_Else_correct  (=> (> |budget1#0@1| 0) (and (=> (= (ControlFlow 0 88) 84) anon168_Then_correct) (=> (= (ControlFlow 0 88) 85) anon168_Else_correct)))))
(let ((anon167_Then_correct  (=> (>= 0 |budget1#0@1|) (and (=> (= (ControlFlow 0 87) 84) anon168_Then_correct) (=> (= (ControlFlow 0 87) 85) anon168_Else_correct)))))
(let ((anon166_Then_correct  (=> (= |pc1#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 89) 87) anon167_Then_correct) (=> (= (ControlFlow 0 89) 88) anon167_Else_correct)))))
(let ((anon166_Else_correct  (=> (or (not (= |pc1#0@0| (LitInt 2))) (not true)) (and (=> (= (ControlFlow 0 86) 84) anon168_Then_correct) (=> (= (ControlFlow 0 86) 85) anon168_Else_correct)))))
(let ((anon97_correct  (=> (and (and (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3)))) (< |b1#0@1| |a1#0@1|)) (= |pc1#0@2| (LitInt 0))) (and (=> (= (ControlFlow 0 74) (- 0 75)) (or (= |pc0#0@0| (LitInt 3)) (< 0 |budget1#0@1|))) (=> (or (= |pc0#0@0| (LitInt 3)) (< 0 |budget1#0@1|)) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (and (= |call4formal@outThis#0@0@@0| (ite (< 0 |budget1#0@1|) (- |budget1#0@1| 1) |budget1#0@1|)) (=> (= |pc0#0@0| (LitInt 3)) (= |call5formal@outThat#0@0@@0| |budget0#0@1|))) (and (=> (or (not (= |pc0#0@0| (LitInt 3))) (not true)) (> |call5formal@outThat#0@0@@0| 0)) (forall (($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@1) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@1))
)))) (and (and ($HeapSucc $Heap@0 $Heap@3) (= |pc1#0@3| |pc1#0@2|)) (and (= |budget0#0@2| |call5formal@outThat#0@0@@0|) (= |budget1#0@2| |call4formal@outThis#0@0@@0|)))) (and (and (and (= |b#0@1| |b#0@0|) (= |a1#0@2| |a1#0@1|)) (and (= |b1#0@2| |b1#0@1|) (= |pc0#0@3| |pc0#0@0|))) (and (and (= |a#0@1| |a#0@0|) (= |b0#0@2| |b0#0@1|)) (and (= |a0#0@2| |a0#0@1|) (= (ControlFlow 0 74) 6))))) anon105_correct)))))))
(let ((anon164_Else_correct  (=> (and (not (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3))))) (= (ControlFlow 0 77) 74)) anon97_correct)))
(let ((anon164_Then_correct  (=> (and (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3)))) (= (ControlFlow 0 76) 74)) anon97_correct)))
(let ((anon163_Else_correct  (=> (> |budget1#0@1| 0) (and (=> (= (ControlFlow 0 80) 76) anon164_Then_correct) (=> (= (ControlFlow 0 80) 77) anon164_Else_correct)))))
(let ((anon163_Then_correct  (=> (>= 0 |budget1#0@1|) (and (=> (= (ControlFlow 0 79) 76) anon164_Then_correct) (=> (= (ControlFlow 0 79) 77) anon164_Else_correct)))))
(let ((anon162_Then_correct  (=> (= |pc1#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 81) 79) anon163_Then_correct) (=> (= (ControlFlow 0 81) 80) anon163_Else_correct)))))
(let ((anon162_Else_correct  (=> (or (not (= |pc1#0@0| (LitInt 2))) (not true)) (and (=> (= (ControlFlow 0 78) 76) anon164_Then_correct) (=> (= (ControlFlow 0 78) 77) anon164_Else_correct)))))
(let ((anon91_correct  (=> (and (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3)))) (> |b1#0@1| |a1#0@1|)) (and (=> (= (ControlFlow 0 60) (- 0 67)) (> |a#0@0| 0)) (=> (> |a#0@0| 0) (and (=> (= (ControlFlow 0 60) (- 0 66)) (> |b#0@0| 0)) (=> (> |b#0@0| 0) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|) (|_module.__default.Gcd#canCall| |b#0@0| |a#0@0|)) (and (= (_module.__default.Gcd |a#0@0| |b#0@0|) (_module.__default.Gcd |b#0@0| |a#0@0|)) (= $Heap@0 $Heap@4))) (and (=> (= (ControlFlow 0 60) (- 0 65)) (> |b#0@0| |a#0@0|)) (=> (> |b#0@0| |a#0@0|) (and (=> (= (ControlFlow 0 60) (- 0 64)) (> |a#0@0| 0)) (=> (> |a#0@0| 0) (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (and (|_module.__default.Gcd#canCall| |b#0@0| |a#0@0|) (|_module.__default.Gcd#canCall| (- |b#0@0| |a#0@0|) |a#0@0|)) (= (_module.__default.Gcd |b#0@0| |a#0@0|) (_module.__default.Gcd (- |b#0@0| |a#0@0|) |a#0@0|))) (and (= $Heap@4 $Heap@5) (= |a##0_2_2@1| (- |b#0@0| |a#0@0|)))) (and (=> (= (ControlFlow 0 60) (- 0 63)) (> |a##0_2_2@1| 0)) (=> (> |a##0_2_2@1| 0) (and (=> (= (ControlFlow 0 60) (- 0 62)) (> |a#0@0| 0)) (=> (> |a#0@0| 0) (=> (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (|_module.__default.Gcd#canCall| |a##0_2_2@1| |a#0@0|) (|_module.__default.Gcd#canCall| |a#0@0| |a##0_2_2@1|))) (and (and (= (_module.__default.Gcd |a##0_2_2@1| |a#0@0|) (_module.__default.Gcd |a#0@0| |a##0_2_2@1|)) (= $Heap@5 $Heap@6)) (and (= |$rhs#0_2_0@1| (- |b1#0@1| |a1#0@1|)) (= |$rhs#0_2_1@1| (LitInt 0))))) (and (=> (= (ControlFlow 0 60) (- 0 61)) (or (= |pc0#0@0| (LitInt 3)) (< 0 |budget1#0@1|))) (=> (or (= |pc0#0@0| (LitInt 3)) (< 0 |budget1#0@1|)) (=> (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (=> (and (and (and (and (= |call4formal@outThis#0@0@@1| (ite (< 0 |budget1#0@1|) (- |budget1#0@1| 1) |budget1#0@1|)) (=> (= |pc0#0@0| (LitInt 3)) (= |call5formal@outThat#0@0@@1| |budget0#0@1|))) (and (=> (or (not (= |pc0#0@0| (LitInt 3))) (not true)) (> |call5formal@outThat#0@0@@1| 0)) (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@2)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@2))
)))) (and (and ($HeapSucc $Heap@6 $Heap@7) (= |pc1#0@3| |$rhs#0_2_1@1|)) (and (= |budget0#0@2| |call5formal@outThat#0@0@@1|) (= |budget1#0@2| |call4formal@outThis#0@0@@1|)))) (and (and (and (= |b#0@1| |$rhs#0_2_0@1|) (= |a1#0@2| |a1#0@1|)) (and (= |b1#0@2| |b1#0@1|) (= |pc0#0@3| |pc0#0@0|))) (and (and (= |a#0@1| |a#0@0|) (= |b0#0@2| |b0#0@1|)) (and (= |a0#0@2| |a0#0@1|) (= (ControlFlow 0 60) 6))))) anon105_correct))))))))))))))))))))))))
(let ((anon160_Else_correct  (=> (and (not (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3))))) (= (ControlFlow 0 69) 60)) anon91_correct)))
(let ((anon160_Then_correct  (=> (and (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3)))) (= (ControlFlow 0 68) 60)) anon91_correct)))
(let ((anon159_Else_correct  (=> (> |budget1#0@1| 0) (and (=> (= (ControlFlow 0 72) 68) anon160_Then_correct) (=> (= (ControlFlow 0 72) 69) anon160_Else_correct)))))
(let ((anon159_Then_correct  (=> (>= 0 |budget1#0@1|) (and (=> (= (ControlFlow 0 71) 68) anon160_Then_correct) (=> (= (ControlFlow 0 71) 69) anon160_Else_correct)))))
(let ((anon158_Then_correct  (=> (= |pc1#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 73) 71) anon159_Then_correct) (=> (= (ControlFlow 0 73) 72) anon159_Else_correct)))))
(let ((anon158_Else_correct  (=> (or (not (= |pc1#0@0| (LitInt 2))) (not true)) (and (=> (= (ControlFlow 0 70) 68) anon160_Then_correct) (=> (= (ControlFlow 0 70) 69) anon160_Else_correct)))))
(let ((anon83_correct  (=> (and (and (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3)))) (= |a0#0@1| |b0#0@1|)) (= |pc0#0@1| (LitInt 3))) (and (=> (= (ControlFlow 0 52) (- 0 53)) (or (= |pc1#0@0| (LitInt 3)) (< 0 |budget0#0@1|))) (=> (or (= |pc1#0@0| (LitInt 3)) (< 0 |budget0#0@1|)) (=> (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8)) (=> (and (and (and (and (= |call4formal@outThis#0@0@@2| (ite (< 0 |budget0#0@1|) (- |budget0#0@1| 1) |budget0#0@1|)) (=> (= |pc1#0@0| (LitInt 3)) (= |call5formal@outThat#0@0@@2| |budget1#0@1|))) (and (=> (or (not (= |pc1#0@0| (LitInt 3))) (not true)) (> |call5formal@outThat#0@0@@2| 0)) (forall (($o@@3 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@3) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@3) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@3)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@3))
)))) (and (and ($HeapSucc $Heap@0 $Heap@8) (= |pc1#0@3| |pc1#0@0|)) (and (= |budget0#0@2| |call4formal@outThis#0@0@@2|) (= |budget1#0@2| |call5formal@outThat#0@0@@2|)))) (and (and (and (= |b#0@1| |b#0@0|) (= |a1#0@2| |a1#0@1|)) (and (= |b1#0@2| |b1#0@1|) (= |pc0#0@3| |pc0#0@1|))) (and (and (= |a#0@1| |a#0@0|) (= |b0#0@2| |b0#0@1|)) (and (= |a0#0@2| |a0#0@1|) (= (ControlFlow 0 52) 6))))) anon105_correct)))))))
(let ((anon154_Else_correct  (=> (and (not (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3))))) (= (ControlFlow 0 55) 52)) anon83_correct)))
(let ((anon154_Then_correct  (=> (and (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3)))) (= (ControlFlow 0 54) 52)) anon83_correct)))
(let ((anon153_Else_correct  (=> (> |budget0#0@1| 0) (and (=> (= (ControlFlow 0 58) 54) anon154_Then_correct) (=> (= (ControlFlow 0 58) 55) anon154_Else_correct)))))
(let ((anon153_Then_correct  (=> (>= 0 |budget0#0@1|) (and (=> (= (ControlFlow 0 57) 54) anon154_Then_correct) (=> (= (ControlFlow 0 57) 55) anon154_Else_correct)))))
(let ((anon152_Then_correct  (=> (= |pc0#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 59) 57) anon153_Then_correct) (=> (= (ControlFlow 0 59) 58) anon153_Else_correct)))))
(let ((anon152_Else_correct  (=> (or (not (= |pc0#0@0| (LitInt 2))) (not true)) (and (=> (= (ControlFlow 0 56) 54) anon154_Then_correct) (=> (= (ControlFlow 0 56) 55) anon154_Else_correct)))))
(let ((anon77_correct  (=> (and (and (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3)))) (< |a0#0@1| |b0#0@1|)) (= |pc0#0@2| (LitInt 0))) (and (=> (= (ControlFlow 0 44) (- 0 45)) (or (= |pc1#0@0| (LitInt 3)) (< 0 |budget0#0@1|))) (=> (or (= |pc1#0@0| (LitInt 3)) (< 0 |budget0#0@1|)) (=> (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (=> (and (and (and (and (= |call4formal@outThis#0@0@@3| (ite (< 0 |budget0#0@1|) (- |budget0#0@1| 1) |budget0#0@1|)) (=> (= |pc1#0@0| (LitInt 3)) (= |call5formal@outThat#0@0@@3| |budget1#0@1|))) (and (=> (or (not (= |pc1#0@0| (LitInt 3))) (not true)) (> |call5formal@outThat#0@0@@3| 0)) (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@4)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@4))
)))) (and (and ($HeapSucc $Heap@0 $Heap@9) (= |pc1#0@3| |pc1#0@0|)) (and (= |budget0#0@2| |call4formal@outThis#0@0@@3|) (= |budget1#0@2| |call5formal@outThat#0@0@@3|)))) (and (and (and (= |b#0@1| |b#0@0|) (= |a1#0@2| |a1#0@1|)) (and (= |b1#0@2| |b1#0@1|) (= |pc0#0@3| |pc0#0@2|))) (and (and (= |a#0@1| |a#0@0|) (= |b0#0@2| |b0#0@1|)) (and (= |a0#0@2| |a0#0@1|) (= (ControlFlow 0 44) 6))))) anon105_correct)))))))
(let ((anon150_Else_correct  (=> (and (not (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3))))) (= (ControlFlow 0 47) 44)) anon77_correct)))
(let ((anon150_Then_correct  (=> (and (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3)))) (= (ControlFlow 0 46) 44)) anon77_correct)))
(let ((anon149_Else_correct  (=> (> |budget0#0@1| 0) (and (=> (= (ControlFlow 0 50) 46) anon150_Then_correct) (=> (= (ControlFlow 0 50) 47) anon150_Else_correct)))))
(let ((anon149_Then_correct  (=> (>= 0 |budget0#0@1|) (and (=> (= (ControlFlow 0 49) 46) anon150_Then_correct) (=> (= (ControlFlow 0 49) 47) anon150_Else_correct)))))
(let ((anon148_Then_correct  (=> (= |pc0#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 51) 49) anon149_Then_correct) (=> (= (ControlFlow 0 51) 50) anon149_Else_correct)))))
(let ((anon148_Else_correct  (=> (or (not (= |pc0#0@0| (LitInt 2))) (not true)) (and (=> (= (ControlFlow 0 48) 46) anon150_Then_correct) (=> (= (ControlFlow 0 48) 47) anon150_Else_correct)))))
(let ((anon71_correct  (=> (and (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3)))) (> |a0#0@1| |b0#0@1|)) (and (=> (= (ControlFlow 0 34) (- 0 37)) (> |a#0@0| |b#0@0|)) (=> (> |a#0@0| |b#0@0|) (and (=> (= (ControlFlow 0 34) (- 0 36)) (> |b#0@0| 0)) (=> (> |b#0@0| 0) (=> (and (and (and ($IsGoodHeap $Heap@10) ($IsHeapAnchor $Heap@10)) (and (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|) (|_module.__default.Gcd#canCall| (- |a#0@0| |b#0@0|) |b#0@0|))) (and (and (= (_module.__default.Gcd |a#0@0| |b#0@0|) (_module.__default.Gcd (- |a#0@0| |b#0@0|) |b#0@0|)) (= $Heap@0 $Heap@10)) (and (= |$rhs#0_7_0@1| (- |a0#0@1| |b0#0@1|)) (= |$rhs#0_7_1@1| (LitInt 0))))) (and (=> (= (ControlFlow 0 34) (- 0 35)) (or (= |pc1#0@0| (LitInt 3)) (< 0 |budget0#0@1|))) (=> (or (= |pc1#0@0| (LitInt 3)) (< 0 |budget0#0@1|)) (=> (and ($IsGoodHeap $Heap@11) ($IsHeapAnchor $Heap@11)) (=> (and (and (and (and (= |call4formal@outThis#0@0@@4| (ite (< 0 |budget0#0@1|) (- |budget0#0@1| 1) |budget0#0@1|)) (=> (= |pc1#0@0| (LitInt 3)) (= |call5formal@outThat#0@0@@4| |budget1#0@1|))) (and (=> (or (not (= |pc1#0@0| (LitInt 3))) (not true)) (> |call5formal@outThat#0@0@@4| 0)) (forall (($o@@5 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@5) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@5) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@5)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@5))
)))) (and (and ($HeapSucc $Heap@10 $Heap@11) (= |pc1#0@3| |pc1#0@0|)) (and (= |budget0#0@2| |call4formal@outThis#0@0@@4|) (= |budget1#0@2| |call5formal@outThat#0@0@@4|)))) (and (and (and (= |b#0@1| |b#0@0|) (= |a1#0@2| |a1#0@1|)) (and (= |b1#0@2| |b1#0@1|) (= |pc0#0@3| |$rhs#0_7_1@1|))) (and (and (= |a#0@1| |$rhs#0_7_0@1|) (= |b0#0@2| |b0#0@1|)) (and (= |a0#0@2| |a0#0@1|) (= (ControlFlow 0 34) 6))))) anon105_correct))))))))))))
(let ((anon146_Else_correct  (=> (and (not (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3))))) (= (ControlFlow 0 39) 34)) anon71_correct)))
(let ((anon146_Then_correct  (=> (and (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3)))) (= (ControlFlow 0 38) 34)) anon71_correct)))
(let ((anon145_Else_correct  (=> (> |budget0#0@1| 0) (and (=> (= (ControlFlow 0 42) 38) anon146_Then_correct) (=> (= (ControlFlow 0 42) 39) anon146_Else_correct)))))
(let ((anon145_Then_correct  (=> (>= 0 |budget0#0@1|) (and (=> (= (ControlFlow 0 41) 38) anon146_Then_correct) (=> (= (ControlFlow 0 41) 39) anon146_Else_correct)))))
(let ((anon144_Then_correct  (=> (= |pc0#0@0| (LitInt 2)) (and (=> (= (ControlFlow 0 43) 41) anon145_Then_correct) (=> (= (ControlFlow 0 43) 42) anon145_Else_correct)))))
(let ((anon144_Else_correct  (=> (or (not (= |pc0#0@0| (LitInt 2))) (not true)) (and (=> (= (ControlFlow 0 40) 38) anon146_Then_correct) (=> (= (ControlFlow 0 40) 39) anon146_Else_correct)))))
(let ((anon156_Then_correct  (=> (= |pc1#0@0| (LitInt 1)) (=> (and (and (= |$rhs#0_3_1@1| (LitInt 2)) (= |pc1#0@3| |$rhs#0_3_1@1|)) (and (= |budget0#0@2| |budget0#0@1|) (= |budget1#0@2| |budget1#0@1|))) (=> (and (and (and (= |b#0@1| |b#0@0|) (= |a1#0@2| |a#0@0|)) (and (= |b1#0@2| |b1#0@1|) (= |pc0#0@3| |pc0#0@0|))) (and (and (= |a#0@1| |a#0@0|) (= |b0#0@2| |b0#0@1|)) (and (= |a0#0@2| |a0#0@1|) (= (ControlFlow 0 33) 6)))) anon105_correct)))))
(let ((anon155_Then_correct  (=> (= |pc1#0@0| (LitInt 0)) (=> (and (and (= |$rhs#0_4_1@1| (LitInt 1)) (= |pc1#0@3| |$rhs#0_4_1@1|)) (and (= |budget0#0@2| |budget0#0@1|) (= |budget1#0@2| |budget1#0@1|))) (=> (and (and (and (= |b#0@1| |b#0@0|) (= |a1#0@2| |a1#0@1|)) (and (= |b1#0@2| |b#0@0|) (= |pc0#0@3| |pc0#0@0|))) (and (and (= |a#0@1| |a#0@0|) (= |b0#0@2| |b0#0@1|)) (and (= |a0#0@2| |a0#0@1|) (= (ControlFlow 0 32) 6)))) anon105_correct)))))
(let ((anon142_Then_correct  (=> (= |pc0#0@0| (LitInt 1)) (=> (and (and (= |$rhs#0_8_1@1| (LitInt 2)) (= |pc1#0@3| |pc1#0@0|)) (and (= |budget0#0@2| |budget0#0@1|) (= |budget1#0@2| |budget1#0@1|))) (=> (and (and (and (= |b#0@1| |b#0@0|) (= |a1#0@2| |a1#0@1|)) (and (= |b1#0@2| |b1#0@1|) (= |pc0#0@3| |$rhs#0_8_1@1|))) (and (and (= |a#0@1| |a#0@0|) (= |b0#0@2| |b#0@0|)) (and (= |a0#0@2| |a0#0@1|) (= (ControlFlow 0 31) 6)))) anon105_correct)))))
(let ((anon141_Then_correct  (=> (= |pc0#0@0| (LitInt 0)) (=> (and (and (= |$rhs#0_9_1@1| (LitInt 1)) (= |pc1#0@3| |pc1#0@0|)) (and (= |budget0#0@2| |budget0#0@1|) (= |budget1#0@2| |budget1#0@1|))) (=> (and (and (and (= |b#0@1| |b#0@0|) (= |a1#0@2| |a1#0@1|)) (and (= |b1#0@2| |b1#0@1|) (= |pc0#0@3| |$rhs#0_9_1@1|))) (and (and (= |a#0@1| |a#0@0|) (= |b0#0@2| |b0#0@1|)) (and (= |a0#0@2| |a#0@0|) (= (ControlFlow 0 30) 6)))) anon105_correct)))))
(let ((anon165_Else_correct  (=> (and (and (and (and (and (and (and (and (and (and (or (not (= |pc0#0@0| (LitInt 0))) (not true)) (or (not (= |pc0#0@0| (LitInt 1))) (not true))) (not (and (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3)))) (> |a0#0@1| |b0#0@1|)))) (not (and (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3)))) (< |a0#0@1| |b0#0@1|)))) (not (and (and (= |pc0#0@0| (LitInt 2)) (or (> |budget0#0@1| 0) (= |pc1#0@0| (LitInt 3)))) (= |a0#0@1| |b0#0@1|)))) (or (not (= |pc1#0@0| (LitInt 0))) (not true))) (or (not (= |pc1#0@0| (LitInt 1))) (not true))) (not (and (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3)))) (> |b1#0@1| |a1#0@1|)))) (not (and (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3)))) (< |b1#0@1| |a1#0@1|)))) (not (and (and (= |pc1#0@0| (LitInt 2)) (or (> |budget1#0@1| 0) (= |pc0#0@0| (LitInt 3)))) (= |b1#0@1| |a1#0@1|)))) (= (ControlFlow 0 4) (- 0 3))) false)))
(let ((anon140_Else_correct  (=> (and (not (and (= |pc0#0@0| (LitInt 3)) (= |pc1#0@0| (LitInt 3)))) (= |$decr$loop#00@1| (+ |a#0@0| |b#0@0|))) (=> (and (and (= |$decr$loop#01@1| (+ (_module.__default.FinalStretch |pc0#0@0| |pc1#0@0| |a0#0@1| |b0#0@1| |b#0@0|) (_module.__default.FinalStretch |pc1#0@0| |pc0#0@0| |b1#0@1| |a1#0@1| |a#0@0|))) (= |$decr$loop#02@1| (+ (ite  (and (and (= |pc0#0@0| (LitInt 2)) (< |a0#0@1| |b0#0@1|)) (not (< |a#0@0| |b#0@0|))) 1 0) (ite  (and (and (= |pc1#0@0| (LitInt 2)) (< |b1#0@1| |a1#0@1|)) (not (< |b#0@0| |a#0@0|))) 1 0)))) (and (= |$decr$loop#03@1| (+ (ite (< |a#0@0| |b#0@0|) |budget0#0@1| 0) (ite (< |b#0@0| |a#0@0|) |budget1#0@1| 0))) (= |$decr$loop#04@1| (- (- 8 |pc0#0@0|) |pc1#0@0|)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 90) 30) anon141_Then_correct) (=> (= (ControlFlow 0 90) 31) anon142_Then_correct)) (=> (= (ControlFlow 0 90) 32) anon155_Then_correct)) (=> (= (ControlFlow 0 90) 33) anon156_Then_correct)) (=> (= (ControlFlow 0 90) 4) anon165_Else_correct)) (=> (= (ControlFlow 0 90) 89) anon166_Then_correct)) (=> (= (ControlFlow 0 90) 86) anon166_Else_correct)) (=> (= (ControlFlow 0 90) 81) anon162_Then_correct)) (=> (= (ControlFlow 0 90) 78) anon162_Else_correct)) (=> (= (ControlFlow 0 90) 73) anon158_Then_correct)) (=> (= (ControlFlow 0 90) 70) anon158_Else_correct)) (=> (= (ControlFlow 0 90) 59) anon152_Then_correct)) (=> (= (ControlFlow 0 90) 56) anon152_Else_correct)) (=> (= (ControlFlow 0 90) 51) anon148_Then_correct)) (=> (= (ControlFlow 0 90) 48) anon148_Else_correct)) (=> (= (ControlFlow 0 90) 43) anon144_Then_correct)) (=> (= (ControlFlow 0 90) 40) anon144_Else_correct))))))
(let ((anon61_correct  (and (=> (= (ControlFlow 0 95) 93) anon140_Then_correct) (=> (= (ControlFlow 0 95) 90) anon140_Else_correct))))
(let ((anon139_Else_correct  (=> (and (or (not (= |pc0#0@0| (LitInt 3))) (not true)) (= (ControlFlow 0 97) 95)) anon61_correct)))
(let ((anon139_Then_correct  (=> (and (= |pc0#0@0| (LitInt 3)) (= (ControlFlow 0 96) 95)) anon61_correct)))
(let ((anon110_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 98) 96) anon139_Then_correct) (=> (= (ControlFlow 0 98) 97) anon139_Else_correct)))))
(let ((anon109_LoopBody_correct  (and (=> (= (ControlFlow 0 169) 168) anon110_Then_correct) (=> (= (ControlFlow 0 169) 98) anon110_Else_correct))))
(let ((anon109_LoopDone_correct true))
(let ((anon109_LoopHead_correct  (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (and (and (and (and (and (and (and (and (and (not false) (<= 1 |A#0|)) (<= 1 |B#0|)) (and (<= 0 |pc0#0@0|) (< |pc0#0@0| 4))) (and (<= 0 |pc1#0@0|) (< |pc1#0@0| 4))) (= |$rhs#2@0| 0)) (= |$rhs#3@0| 0)) (<= 2 |$decr_init$loop#00@0|)) (= |$decr_init$loop#02@0| 0)) (<= 0 |$decr_init$loop#03@0|)) (= |$decr_init$loop#04@0| 8)) (and (and (and (=> |$w$loop#0@0| (< 0 |a#0@0|)) (=> |$w$loop#0@0| (< 0 |b#0@0|))) (and (=> |$w$loop#0@0| (and (|_module.__default.Gcd#canCall| |A#0| |B#0|) (|_module.__default.Gcd#canCall| |a#0@0| |b#0@0|))) (=> |$w$loop#0@0| (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |a#0@0| |b#0@0|))))) (and (and (=> |$w$loop#0@0| (<= (LitInt 0) |pc0#0@0|)) (=> |$w$loop#0@0| (< |pc0#0@0| 4))) (and (=> |$w$loop#0@0| (<= (LitInt 0) |pc1#0@0|)) (=> |$w$loop#0@0| (< |pc1#0@0| 4)))))) (and (and (and (and (=> |$w$loop#0@0| (or (= |pc0#0@0| (LitInt 0)) (= |a0#0@1| |a#0@0|))) (=> |$w$loop#0@0| (or (= |pc1#0@0| (LitInt 0)) (= |b1#0@1| |b#0@0|)))) (and (=> |$w$loop#0@0| (=> (= |pc0#0@0| (LitInt 2)) (<= |b#0@0| |b0#0@1|))) (=> |$w$loop#0@0| (=> (= |pc0#0@0| (LitInt 2)) (=> (<= |b0#0@1| |a0#0@1|) (= |b0#0@1| |b#0@0|)))))) (and (and (=> |$w$loop#0@0| (=> (= |pc1#0@0| (LitInt 2)) (<= |a#0@0| |a1#0@1|))) (=> |$w$loop#0@0| (=> (= |pc1#0@0| (LitInt 2)) (=> (<= |a1#0@1| |b1#0@1|) (= |a1#0@1| |a#0@0|))))) (and (=> |$w$loop#0@0| (=> (= |pc0#0@0| (LitInt 3)) (= |a#0@0| |b#0@0|))) (=> |$w$loop#0@0| (=> (= |pc1#0@0| (LitInt 3)) (= |a#0@0| |b#0@0|)))))) (and (and (and (=> |$w$loop#0@0| (<= (LitInt 0) |budget0#0@1|)) (=> |$w$loop#0@0| (<= (LitInt 0) |budget1#0@1|))) (and (=> |$w$loop#0@0| (or (or (= |pc0#0@0| (LitInt 3)) (= |pc1#0@0| (LitInt 3))) (<= (LitInt 1) (+ |budget0#0@1| |budget1#0@1|)))) (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6))
)))) (and (and ($HeapSucc $Heap@@1 $Heap@0) (forall (($o@@7 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@7) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@7) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@7) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@7 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@7) $f@@0))
))) (and (<= (+ |a#0@0| |b#0@0|) |$decr_init$loop#00@0|) (=> (= (+ |a#0@0| |b#0@0|) |$decr_init$loop#00@0|) (and (<= (+ (_module.__default.FinalStretch |pc0#0@0| |pc1#0@0| |a0#0@1| |b0#0@1| |b#0@0|) (_module.__default.FinalStretch |pc1#0@0| |pc0#0@0| |b1#0@1| |a1#0@1| |a#0@0|)) |$decr_init$loop#01@0|) (=> (= (+ (_module.__default.FinalStretch |pc0#0@0| |pc1#0@0| |a0#0@1| |b0#0@1| |b#0@0|) (_module.__default.FinalStretch |pc1#0@0| |pc0#0@0| |b1#0@1| |a1#0@1| |a#0@0|)) |$decr_init$loop#01@0|) (and (<= (+ (ite  (and (and (= |pc0#0@0| (LitInt 2)) (< |a0#0@1| |b0#0@1|)) (not (< |a#0@0| |b#0@0|))) 1 0) (ite  (and (and (= |pc1#0@0| (LitInt 2)) (< |b1#0@1| |a1#0@1|)) (not (< |b#0@0| |a#0@0|))) 1 0)) |$decr_init$loop#02@0|) (=> (= (+ (ite  (and (and (= |pc0#0@0| (LitInt 2)) (< |a0#0@1| |b0#0@1|)) (not (< |a#0@0| |b#0@0|))) 1 0) (ite  (and (and (= |pc1#0@0| (LitInt 2)) (< |b1#0@1| |a1#0@1|)) (not (< |b#0@0| |a#0@0|))) 1 0)) |$decr_init$loop#02@0|) (and (<= (+ (ite (< |a#0@0| |b#0@0|) |budget0#0@1| 0) (ite (< |b#0@0| |a#0@0|) |budget1#0@1| 0)) |$decr_init$loop#03@0|) (=> (= (+ (ite (< |a#0@0| |b#0@0|) |budget0#0@1| 0) (ite (< |b#0@0| |a#0@0|) |budget1#0@1| 0)) |$decr_init$loop#03@0|) (<= (- (- 8 |pc0#0@0|) |pc1#0@0|) |$decr_init$loop#04@0|))))))))))))) (and (=> (= (ControlFlow 0 170) 2) anon109_LoopDone_correct) (=> (= (ControlFlow 0 170) 169) anon109_LoopBody_correct))))))
(let ((anon3_correct  (and (=> (= (ControlFlow 0 171) (- 0 190)) (or (and (and ($Is intType (int_2_U (LitInt (+ 0 1))) TInt) ($Is intType (int_2_U (LitInt (+ 0 1))) TInt)) (U_2_bool (Lit boolType (bool_2_U  (and (> (+ 0 1) 0) (> (+ 0 1) 0)))))) (or (and (and ($Is intType (int_2_U (LitInt 0)) TInt) ($Is intType (int_2_U (LitInt (+ 0 1))) TInt)) (U_2_bool (Lit boolType (bool_2_U  (and (> 0 0) (> (+ 0 1) 0)))))) (or (exists ((|$as#budget00#0| Int) )  (and ($Is intType (int_2_U (LitInt (+ 0 1))) TInt) (and (> |$as#budget00#0| 0) (> (+ 0 1) 0)))) (or (and (and ($Is intType (int_2_U (LitInt (+ 0 1))) TInt) ($Is intType (int_2_U (LitInt 0)) TInt)) (U_2_bool (Lit boolType (bool_2_U  (and (> (+ 0 1) 0) (> 0 0)))))) (or (and (and ($Is intType (int_2_U (LitInt 0)) TInt) ($Is intType (int_2_U (LitInt 0)) TInt)) (U_2_bool (Lit boolType (bool_2_U  (and (> 0 0) (> 0 0)))))) (or (exists ((|$as#budget00#0@@0| Int) )  (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (> |$as#budget00#0@@0| 0) (> 0 0)))) (or (exists ((|$as#budget10#0| Int) )  (and ($Is intType (int_2_U (LitInt (+ 0 1))) TInt) (and (> (+ 0 1) 0) (> |$as#budget10#0| 0)))) (or (exists ((|$as#budget10#0@@0| Int) )  (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (> 0 0) (> |$as#budget10#0@@0| 0)))) (exists ((|$as#budget00#0@@1| Int) (|$as#budget10#0@@1| Int) )  (and (> |$as#budget00#0@@1| 0) (> |$as#budget10#0@@1| 0)))))))))))) (=> (or (and (and ($Is intType (int_2_U (LitInt (+ 0 1))) TInt) ($Is intType (int_2_U (LitInt (+ 0 1))) TInt)) (U_2_bool (Lit boolType (bool_2_U  (and (> (+ 0 1) 0) (> (+ 0 1) 0)))))) (or (and (and ($Is intType (int_2_U (LitInt 0)) TInt) ($Is intType (int_2_U (LitInt (+ 0 1))) TInt)) (U_2_bool (Lit boolType (bool_2_U  (and (> 0 0) (> (+ 0 1) 0)))))) (or (exists ((|$as#budget00#0@@2| Int) )  (and ($Is intType (int_2_U (LitInt (+ 0 1))) TInt) (and (> |$as#budget00#0@@2| 0) (> (+ 0 1) 0)))) (or (and (and ($Is intType (int_2_U (LitInt (+ 0 1))) TInt) ($Is intType (int_2_U (LitInt 0)) TInt)) (U_2_bool (Lit boolType (bool_2_U  (and (> (+ 0 1) 0) (> 0 0)))))) (or (and (and ($Is intType (int_2_U (LitInt 0)) TInt) ($Is intType (int_2_U (LitInt 0)) TInt)) (U_2_bool (Lit boolType (bool_2_U  (and (> 0 0) (> 0 0)))))) (or (exists ((|$as#budget00#0@@3| Int) )  (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (> |$as#budget00#0@@3| 0) (> 0 0)))) (or (exists ((|$as#budget10#0@@2| Int) )  (and ($Is intType (int_2_U (LitInt (+ 0 1))) TInt) (and (> (+ 0 1) 0) (> |$as#budget10#0@@2| 0)))) (or (exists ((|$as#budget10#0@@3| Int) )  (and ($Is intType (int_2_U (LitInt 0)) TInt) (and (> 0 0) (> |$as#budget10#0@@3| 0)))) (exists ((|$as#budget00#0@@4| Int) (|$as#budget10#0@@4| Int) )  (and (> |$as#budget00#0@@4| 0) (> |$as#budget10#0@@4| 0))))))))))) (=> (and (and (and (> |budget0#0@0| 0) (> |budget1#0@0| 0)) (= |$decr_init$loop#00@0| (+ |A#0| |B#0|))) (and (and (= |$decr_init$loop#01@0| (+ (_module.__default.FinalStretch |$rhs#2@0| |$rhs#3@0| |a0#0@0| |b0#0@0| |B#0|) (_module.__default.FinalStretch |$rhs#3@0| |$rhs#2@0| |b1#0@0| |a1#0@0| |A#0|))) (= |$decr_init$loop#02@0| (+ (ite  (and (and (= |$rhs#2@0| (LitInt 2)) (< |a0#0@0| |b0#0@0|)) (not (< |A#0| |B#0|))) 1 0) (ite  (and (and (= |$rhs#3@0| (LitInt 2)) (< |b1#0@0| |a1#0@0|)) (not (< |B#0| |A#0|))) 1 0)))) (and (= |$decr_init$loop#03@0| (+ (ite (< |A#0| |B#0|) |budget0#0@0| 0) (ite (< |B#0| |A#0|) |budget1#0@0| 0))) (= |$decr_init$loop#04@0| (- (- 8 |$rhs#2@0|) |$rhs#3@0|))))) (and (=> (= (ControlFlow 0 171) (- 0 189)) (=> |$w$loop#0@0| (< 0 |A#0|))) (=> (=> |$w$loop#0@0| (< 0 |A#0|)) (and (=> (= (ControlFlow 0 171) (- 0 188)) (=> |$w$loop#0@0| (< 0 |B#0|))) (=> (=> |$w$loop#0@0| (< 0 |B#0|)) (and (=> (= (ControlFlow 0 171) (- 0 187)) (=> |$w$loop#0@0| (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |A#0| |B#0|)))) (=> (=> |$w$loop#0@0| (= (_module.__default.Gcd |A#0| |B#0|) (_module.__default.Gcd |A#0| |B#0|))) (and (=> (= (ControlFlow 0 171) (- 0 186)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#2@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#2@0|)) (and (=> (= (ControlFlow 0 171) (- 0 185)) (=> |$w$loop#0@0| (< |$rhs#2@0| 4))) (=> (=> |$w$loop#0@0| (< |$rhs#2@0| 4)) (and (=> (= (ControlFlow 0 171) (- 0 184)) (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#3@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |$rhs#3@0|)) (and (=> (= (ControlFlow 0 171) (- 0 183)) (=> |$w$loop#0@0| (< |$rhs#3@0| 4))) (=> (=> |$w$loop#0@0| (< |$rhs#3@0| 4)) (and (=> (= (ControlFlow 0 171) (- 0 182)) (=> |$w$loop#0@0| (or (= |$rhs#2@0| (LitInt 0)) (= |a0#0@0| |A#0|)))) (=> (=> |$w$loop#0@0| (or (= |$rhs#2@0| (LitInt 0)) (= |a0#0@0| |A#0|))) (and (=> (= (ControlFlow 0 171) (- 0 181)) (=> |$w$loop#0@0| (or (= |$rhs#3@0| (LitInt 0)) (= |b1#0@0| |B#0|)))) (=> (=> |$w$loop#0@0| (or (= |$rhs#3@0| (LitInt 0)) (= |b1#0@0| |B#0|))) (and (=> (= (ControlFlow 0 171) (- 0 180)) (=> |$w$loop#0@0| (=> (= |$rhs#2@0| (LitInt 2)) (<= |B#0| |b0#0@0|)))) (=> (=> |$w$loop#0@0| (=> (= |$rhs#2@0| (LitInt 2)) (<= |B#0| |b0#0@0|))) (and (=> (= (ControlFlow 0 171) (- 0 179)) (=> |$w$loop#0@0| (=> (= |$rhs#2@0| (LitInt 2)) (=> (<= |b0#0@0| |a0#0@0|) (= |b0#0@0| |B#0|))))) (=> (=> |$w$loop#0@0| (=> (= |$rhs#2@0| (LitInt 2)) (=> (<= |b0#0@0| |a0#0@0|) (= |b0#0@0| |B#0|)))) (and (=> (= (ControlFlow 0 171) (- 0 178)) (=> |$w$loop#0@0| (=> (= |$rhs#3@0| (LitInt 2)) (<= |A#0| |a1#0@0|)))) (=> (=> |$w$loop#0@0| (=> (= |$rhs#3@0| (LitInt 2)) (<= |A#0| |a1#0@0|))) (and (=> (= (ControlFlow 0 171) (- 0 177)) (=> |$w$loop#0@0| (=> (= |$rhs#3@0| (LitInt 2)) (=> (<= |a1#0@0| |b1#0@0|) (= |a1#0@0| |A#0|))))) (=> (=> |$w$loop#0@0| (=> (= |$rhs#3@0| (LitInt 2)) (=> (<= |a1#0@0| |b1#0@0|) (= |a1#0@0| |A#0|)))) (and (=> (= (ControlFlow 0 171) (- 0 176)) (=> |$w$loop#0@0| (=> (= |$rhs#2@0| (LitInt 3)) (= |A#0| |B#0|)))) (=> (=> |$w$loop#0@0| (=> (= |$rhs#2@0| (LitInt 3)) (= |A#0| |B#0|))) (and (=> (= (ControlFlow 0 171) (- 0 175)) (=> |$w$loop#0@0| (=> (= |$rhs#3@0| (LitInt 3)) (= |A#0| |B#0|)))) (=> (=> |$w$loop#0@0| (=> (= |$rhs#3@0| (LitInt 3)) (= |A#0| |B#0|))) (and (=> (= (ControlFlow 0 171) (- 0 174)) (=> |$w$loop#0@0| (<= (LitInt 0) |budget0#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |budget0#0@0|)) (and (=> (= (ControlFlow 0 171) (- 0 173)) (=> |$w$loop#0@0| (<= (LitInt 0) |budget1#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |budget1#0@0|)) (and (=> (= (ControlFlow 0 171) (- 0 172)) (=> |$w$loop#0@0| (or (or (= |$rhs#2@0| (LitInt 3)) (= |$rhs#3@0| (LitInt 3))) (<= (LitInt 1) (+ |budget0#0@0| |budget1#0@0|))))) (=> (=> |$w$loop#0@0| (or (or (= |$rhs#2@0| (LitInt 3)) (= |$rhs#3@0| (LitInt 3))) (<= (LitInt 1) (+ |budget0#0@0| |budget1#0@0|)))) (=> (= (ControlFlow 0 171) 170) anon109_LoopHead_correct))))))))))))))))))))))))))))))))))))))))))
(let ((anon108_Else_correct  (=> (and (>= 0 |budget0#1@0|) (= (ControlFlow 0 192) 171)) anon3_correct)))
(let ((anon108_Then_correct  (=> (and (> |budget0#1@0| 0) (= (ControlFlow 0 191) 171)) anon3_correct)))
(let ((anon107_Then_correct  (and (=> (= (ControlFlow 0 193) 191) anon108_Then_correct) (=> (= (ControlFlow 0 193) 192) anon108_Else_correct))))
(let ((anon107_Else_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (=> (and (= |$rhs#2@0| (LitInt 0)) (= |$rhs#3@0| (LitInt 0))) (and (=> (= (ControlFlow 0 194) 193) anon107_Then_correct) (=> (= (ControlFlow 0 194) 1) anon107_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (=> (and (and (= 7 $FunctionContextHeight) (> |A#0| 0)) (and (> |B#0| 0) (= (ControlFlow 0 195) 194))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
