(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@23 (T@T T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 (Bool Int Int) Bool)
(declare-fun $generated@@32 (Int Int) Bool)
(declare-fun $generated@@33 (Int Int Int) Bool)
(declare-fun $generated@@34 (Int Int Int) Bool)
(declare-fun $generated@@43 (Int Int) Int)
(declare-fun $generated@@49 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@53 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@54 () T@T)
(declare-fun $generated@@55 (T@T T@T) T@T)
(declare-fun $generated@@56 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@57 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@58 (T@T) T@T)
(declare-fun $generated@@59 (T@T) T@T)
(declare-fun $generated@@116 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@121 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@1))
(assert (= ($generated@@20 $generated@@0) $generated@@2))
(assert (forall (($generated@@22 Int) ) (! (= ($generated@@21 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@22))
)))
(assert (forall (($generated@@24 T@U) ($generated@@25 T@T) ) (! (= ($generated@@23 $generated@@25 $generated@@24) $generated@@24)
 :pattern ( ($generated@@23 $generated@@25 $generated@@24))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@27 $generated@@29 ($generated@@26 $generated@@29 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@26 $generated@@29 $generated@@28))
)))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@35 Int) ($generated@@36 Int) ) (!  (=> (or ($generated@@32 ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)) (and (< 1 $generated@@30) ($generated@@9 ($generated@@23 $generated@@5 ($generated@@8  (and (> $generated@@35 0) (> $generated@@36 0))))))) (and (forall (($generated@@37 Int) ) (!  (=> (> $generated@@37 0) ($generated@@34 $generated@@37 ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)))
 :pattern ( ($generated@@33 $generated@@37 $generated@@35 $generated@@36))
)) (= ($generated@@31 true ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)) (exists (($generated@@38 Int) ) (!  (and (> $generated@@38 0) ($generated@@33 $generated@@38 ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)))
 :pattern ( ($generated@@33 $generated@@38 $generated@@35 $generated@@36))
)))))
 :weight 3
 :pattern ( ($generated@@31 true ($generated@@21 $generated@@35) ($generated@@21 $generated@@36)))
))))
(assert  (=> (<= 1 $generated@@30) (forall (($generated@@39 Int) ($generated@@40 Int) ) (!  (=> (or ($generated@@32 $generated@@39 $generated@@40) (and (< 1 $generated@@30) (and (> $generated@@39 0) (> $generated@@40 0)))) (and (forall (($generated@@41 Int) ) (!  (=> (> $generated@@41 0) ($generated@@34 $generated@@41 $generated@@39 $generated@@40))
 :pattern ( ($generated@@33 $generated@@41 $generated@@39 $generated@@40))
)) (= ($generated@@31 true $generated@@39 $generated@@40) (exists (($generated@@42 Int) ) (!  (and (> $generated@@42 0) ($generated@@33 $generated@@42 $generated@@39 $generated@@40))
 :pattern ( ($generated@@33 $generated@@42 $generated@@39 $generated@@40))
)))))
 :pattern ( ($generated@@31 true $generated@@39 $generated@@40))
))))
(assert  (=> (<= 0 $generated@@30) (forall (($generated@@44 Int) ($generated@@45 Int) ($generated@@46 Int) ) (!  (=> (or ($generated@@34 ($generated@@21 $generated@@44) ($generated@@21 $generated@@45) ($generated@@21 $generated@@46)) (and (< 0 $generated@@30) ($generated@@9 ($generated@@23 $generated@@5 ($generated@@8  (and (> $generated@@44 0) (> $generated@@45 0))))))) (= ($generated@@33 ($generated@@21 $generated@@44) ($generated@@21 $generated@@45) ($generated@@21 $generated@@46)) (= ($generated@@21 ($generated@@43 ($generated@@21 $generated@@44) ($generated@@21 $generated@@45))) ($generated@@21 $generated@@46))))
 :weight 3
 :pattern ( ($generated@@33 ($generated@@21 $generated@@44) ($generated@@21 $generated@@45) ($generated@@21 $generated@@46)))
))))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@T) ) (! (= ($generated@@26 $generated@@48 ($generated@@27 $generated@@48 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@27 $generated@@48 $generated@@47))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (! (= ($generated@@49 $generated@@60 $generated@@61 $generated@@62 ($generated@@56 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@66 $generated@@63) $generated@@65 $generated@@66) $generated@@63)
 :weight 0
)) (and (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@72 $generated@@74) (= ($generated@@49 $generated@@67 $generated@@68 $generated@@69 ($generated@@56 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@74 $generated@@75) ($generated@@49 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@74 $generated@@75)))
 :weight 0
)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@49 $generated@@76 $generated@@77 $generated@@78 ($generated@@56 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@49 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)))) (= ($generated@@4 $generated@@50) 3)) (= ($generated@@4 $generated@@51) 4)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@53 $generated@@85 $generated@@86 ($generated@@57 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@87) $generated@@89) $generated@@87)
 :weight 0
))) (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@94 $generated@@95) (= ($generated@@53 $generated@@90 $generated@@91 ($generated@@57 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@92) $generated@@95) ($generated@@53 $generated@@90 $generated@@91 $generated@@93 $generated@@95)))
 :weight 0
))) (= ($generated@@4 $generated@@54) 5)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ) (= ($generated@@4 ($generated@@55 $generated@@96 $generated@@97)) 6))) (forall (($generated@@98 T@T) ($generated@@99 T@T) ) (! (= ($generated@@58 ($generated@@55 $generated@@98 $generated@@99)) $generated@@98)
 :pattern ( ($generated@@55 $generated@@98 $generated@@99))
))) (forall (($generated@@100 T@T) ($generated@@101 T@T) ) (! (= ($generated@@59 ($generated@@55 $generated@@100 $generated@@101)) $generated@@101)
 :pattern ( ($generated@@55 $generated@@100 $generated@@101))
))))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 Bool) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@9 ($generated@@49 $generated@@50 $generated@@51 $generated@@5 ($generated@@52 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))  (=> (and (or (not (= $generated@@106 $generated@@102)) (not true)) ($generated@@9 ($generated@@26 $generated@@5 ($generated@@53 $generated@@51 $generated@@54 ($generated@@53 $generated@@50 ($generated@@55 $generated@@51 $generated@@54) $generated@@103 $generated@@106) $generated@@104)))) $generated@@105))
 :pattern ( ($generated@@49 $generated@@50 $generated@@51 $generated@@5 ($generated@@52 $generated@@102 $generated@@103 $generated@@104 $generated@@105) $generated@@106 $generated@@107))
)))
(assert (forall (($generated@@108 Int) ($generated@@109 Int) ) (! (= ($generated@@43 $generated@@108 $generated@@109) (* $generated@@108 $generated@@109))
 :pattern ( ($generated@@43 $generated@@108 $generated@@109))
)))
(assert (forall (($generated@@110 Int) ) (! (= ($generated@@27 $generated@@6 ($generated@@10 ($generated@@21 $generated@@110))) ($generated@@23 $generated@@54 ($generated@@27 $generated@@6 ($generated@@10 $generated@@110))))
 :pattern ( ($generated@@27 $generated@@6 ($generated@@10 ($generated@@21 $generated@@110))))
)))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@T) ) (! (= ($generated@@27 $generated@@112 ($generated@@23 $generated@@112 $generated@@111)) ($generated@@23 $generated@@54 ($generated@@27 $generated@@112 $generated@@111)))
 :pattern ( ($generated@@27 $generated@@112 ($generated@@23 $generated@@112 $generated@@111)))
)))
(assert  (=> (<= 0 $generated@@30) (forall (($generated@@113 Int) ($generated@@114 Int) ($generated@@115 Int) ) (!  (=> (or ($generated@@34 $generated@@113 $generated@@114 $generated@@115) (and (< 0 $generated@@30) (and (> $generated@@113 0) (> $generated@@114 0)))) (= ($generated@@33 $generated@@113 $generated@@114 $generated@@115) (= ($generated@@43 $generated@@113 $generated@@114) $generated@@115)))
 :pattern ( ($generated@@33 $generated@@113 $generated@@114 $generated@@115))
))))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (! ($generated@@116 $generated@@6 $generated@@118 $generated@@0 $generated@@117)
 :pattern ( ($generated@@116 $generated@@6 $generated@@118 $generated@@0 $generated@@117))
)))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ) (! ($generated@@116 $generated@@5 $generated@@120 $generated $generated@@119)
 :pattern ( ($generated@@116 $generated@@5 $generated@@120 $generated $generated@@119))
)))
(assert (forall (($generated@@122 T@U) ) (! ($generated@@121 $generated@@6 $generated@@122 $generated@@0)
 :pattern ( ($generated@@121 $generated@@6 $generated@@122 $generated@@0))
)))
(assert (forall (($generated@@123 T@U) ) (! ($generated@@121 $generated@@5 $generated@@123 $generated)
 :pattern ( ($generated@@121 $generated@@5 $generated@@123 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () Int)
(declare-fun $generated@@127 () Int)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 (T@U) Bool)
(declare-fun $generated@@131 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@132 true))
(let (($generated@@133  (=> (and (>= 0 $generated@@124) (= (ControlFlow 0 7) 3)) $generated@@132)))
(let (($generated@@134  (=> (and (and (> $generated@@124 0) ($generated@@116 $generated@@6 ($generated@@10 $generated@@124) $generated@@0 $generated@@125)) (and ($generated@@116 $generated@@6 ($generated@@10 $generated@@126) $generated@@0 $generated@@125) ($generated@@116 $generated@@6 ($generated@@10 $generated@@127) $generated@@0 $generated@@125))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (> $generated@@124 0)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (> $generated@@126 0)) (=> (and (and (> $generated@@124 0) (> $generated@@126 0)) (and ($generated@@34 $generated@@124 $generated@@126 $generated@@127) (= (ControlFlow 0 4) 3))) $generated@@132))))))
(let (($generated@@135  (and (=> (= (ControlFlow 0 8) 4) $generated@@134) (=> (= (ControlFlow 0 8) 7) $generated@@133))))
(let (($generated@@136 true))
(let (($generated@@137 true))
(let (($generated@@138  (=> (= $generated@@128 ($generated@@52 $generated@@129 $generated@@125 $generated@@3 false)) (=> (and (> $generated@@126 0) (> $generated@@127 0)) (and (and (=> (= (ControlFlow 0 9) 1) $generated@@137) (=> (= (ControlFlow 0 9) 8) $generated@@135)) (=> (= (ControlFlow 0 9) 2) $generated@@136))))))
(let (($generated@@139  (=> (and (and ($generated@@130 $generated@@125) ($generated@@131 $generated@@125)) (and (= 1 $generated@@30) (= (ControlFlow 0 10) 9))) $generated@@138)))
$generated@@139)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
